<slack>
  <team_domain>elmlang</team_domain>
  <channel_name>general</channel_name>
  <start_date>2018-12-31T00:00:02.058422</start_date>
  <end_date>2019-06-07T01:00:01.660771</end_date>
  <message conversation_id="1">
    <ts>2018-12-31T04:52:41.387200</ts>
    <user>Fred</user>
    <text>I just finished updating my application from 0.18 and 0.19, but using `--optimize` only gets the compiled file from 1.2MB to 1.1MB.  I guess I was expecting more.  Could I be doing something wrong?</text>
  </message>
  <message conversation_id="1">
    <ts>2018-12-31T05:03:15.388300</ts>
    <user>Earlean</user>
    <text>&lt;@Fred&gt; `--optimize` doesn't minify but it does have an output that is easier to minify &lt;https://guide.elm-lang.org/optimization/asset_size.html#instructions&gt; provides the best command for minifying</text>
  </message>
  <message conversation_id="1">
    <ts>2018-12-31T05:03:36.388500</ts>
    <user>Fred</user>
    <text>Aha</text>
  </message>
  <message conversation_id="1">
    <ts>2018-12-31T05:07:06.388900</ts>
    <user>Fred</user>
    <text>That's better</text>
  </message>
  <message conversation_id="1">
    <ts>2018-12-31T05:07:16.389200</ts>
    <user>Fred</user>
    <text>127k -&amp;gt; 84k</text>
  </message>
  <message conversation_id="2">
    <ts>2018-12-31T07:56:50.390600</ts>
    <user>Santina</user>
    <text>Happy new year all. I'm wondering why in the Elm docs, it is so discouraged to write effect manager helpers? If I knew why it was discouraged, it might give me an idea for how to implement some kind of alternative. &lt;https://package.elm-lang.org/packages/elm/core/latest/Platform&gt;</text>
  </message>
  <message conversation_id="2">
    <ts>2018-12-31T08:02:58.392100</ts>
    <user>Mirian</user>
    <text>I don't think you even CAN write an effect manager since 0.19</text>
  </message>
  <message conversation_id="2">
    <ts>2018-12-31T08:03:09.392300</ts>
    <user>Santina</user>
    <text>It seems possible given the documentation,</text>
  </message>
  <message conversation_id="2">
    <ts>2018-12-31T08:03:12.392500</ts>
    <user>Santina</user>
    <text>unless the documentation is outdated</text>
  </message>
  <message conversation_id="2">
    <ts>2018-12-31T08:03:37.392700</ts>
    <user>Mirian</user>
    <text>Yeah I think this is outdated but somebody got to confirm this </text>
  </message>
  <message conversation_id="2">
    <ts>2018-12-31T08:04:50.392900</ts>
    <user>Mirian</user>
    <text>As to why - we loose all guarantees that elm gives us when we just wrap js code </text>
  </message>
  <message conversation_id="2">
    <ts>2018-12-31T08:06:49.393100</ts>
    <user>Mirian</user>
    <text>If you need to access some js library ports are the way to go</text>
  </message>
  <message conversation_id="2">
    <ts>2018-12-31T08:07:45.393300</ts>
    <user>Virgie</user>
    <text>effect managers are not necessarily using JS code though. The main problem with them is that they store state outside of the model. This does indeed break the nice guarantees that elm otherwise provides.

They are also discouraged because they are the "easy" solution, thinking about the problem harder in an elm context likely gives a better solution</text>
  </message>
  <message conversation_id="2">
    <ts>2018-12-31T08:09:05.393500</ts>
    <user>Santina</user>
    <text>Thanks for the tips, &lt;@Mirian&gt; and &lt;@Virgie&gt;!</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T08:44:20.395900</ts>
    <user>Lavonna</user>
    <text>I'm trying to write a shrinker (elm-explorations/test v1.2.0) for my own data structure but fail to import module 'Lazy.List' ("I cannot find that module!").
Importing module 'Shrink' works without problems.
Any ideas?</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T08:48:21.396500</ts>
    <user>Virgie</user>
    <text>looks like it is not exported. Do you need anything besides the type signature? (also try &lt;#C0CLGCMMF|testing&gt; )</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T09:04:59.400100</ts>
    <user>Lavonna</user>
    <text>Where do you get the info from that it is not exported? (-&amp;gt;Where should I look to find this out myself?) I thought I need it because the 'Shrink' doc (&lt;https://package.elm-lang.org/packages/elm-explorations/test/1.2.0/Shrink&gt;) says a shrinker should produce a lazy list and I had a look at the provided implementations.
Can I produce any kind of lazy list (maybe from other packages)?</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T09:08:11.400900</ts>
    <user>Lavonna</user>
    <text>ah . . . "elm.json" in the package source contains the info, what modules are exposed</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T09:17:43.401400</ts>
    <user>Virgie</user>
    <text>in the docs &lt;https://package.elm-lang.org/packages/elm-explorations/test/latest/Shrink#lazylist&gt; exposed types are blue/clickable. `LazyList` isn't</text>
  </message>
  <message conversation_id="4">
    <ts>2018-12-31T09:19:44.401500</ts>
    <user>Howard</user>
    <text>not true - for example `Shrinker` is exposed but not blue/clickable</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T09:26:16.401700</ts>
    <user>Virgie</user>
    <text>Hmm, that did work before. Might be dropped in 0.19</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T09:26:41.401900</ts>
    <user>Virgie</user>
    <text>also it does work for `elm/core` &lt;https://package.elm-lang.org/packages/elm/core/latest/String&gt;</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T09:27:28.402100</ts>
    <user>Virgie</user>
    <text>maybe it only works for types and not aliases?</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T09:32:48.402400</ts>
    <user>Rosalee</user>
    <text>Can someone explain what is meant by “effect manager”?</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T09:47:22.402700</ts>
    <user>Virgie</user>
    <text>they are something used in the implementation of subscriptions and commands, for instance the browser package uses them for keyboard and mouse events &lt;https://github.com/elm/browser/blob/1.0.1/src/Browser/Events.elm#L246&gt;</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T09:47:50.402900</ts>
    <user>Virgie</user>
    <text>but, like native code, they break guarantees and thus can only be used by the core team in specific packages</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T10:01:00.403100</ts>
    <user>Lavonna</user>
    <text>thx - wasn't aware that the links correspond to the exposed types</text>
  </message>
  <message conversation_id="5">
    <ts>2018-12-31T10:37:38.406000</ts>
    <user>Lavonna</user>
    <text>Although in my special case (at most one possibility ever) I would conceptually get away with a regular list, the compiler insists on a 'Lazy.List.LazyList' . . . is there a more elegant way to solve this, than to replicate/copy the corresponding non-exposed code from 'elm-explorations/test'?</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T11:12:22.406700</ts>
    <user>Virgie</user>
    <text>really depends on the specifics I think. The folks in &lt;#C0CLGCMMF|testing&gt; will know more (also sharing the specifics might help)</text>
  </message>
  <message conversation_id="5">
    <ts>2018-12-31T12:24:34.407200</ts>
    <user>Lavonna</user>
    <text>thx - I'll ask there</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T12:25:49.408400</ts>
    <user>Lizeth</user>
    <text>new in town and looking for a jumpstart to accessing airtable from ELM.  wondering if the is a GraphQL package.  just getting started…</text>
  </message>
  <message conversation_id="6">
    <ts>2018-12-31T12:40:33.408700</ts>
    <user>Rosalee</user>
    <text>join us in &lt;#C0RSQNQ92|graphql&gt;</text>
  </message>
  <message conversation_id="3">
    <ts>2018-12-31T12:40:50.409000</ts>
    <user>Rosalee</user>
    <text>Tldr, check out &lt;https://github.com/dillonkearns/elm-graphql&gt;</text>
  </message>
  <message conversation_id="6">
    <ts>2018-12-31T12:42:49.410900</ts>
    <user>Rosalee</user>
    <text>Imagine the best of Graphql and Elm. Impossible to write an invalid query. Not just a syntactically invalid query. You can only build queries your api can return a valid response for.</text>
  </message>
  <message conversation_id="7">
    <ts>2018-12-31T14:41:34.414300</ts>
    <user>Britt</user>
    <text>Hi
I have been on and off with elm for different versions.. during signals.. then subscriptions... I have written a few apps in elm during that time.

I now require to write an App for my startup :slightly_smiling_face:
Can someone tell me if there are any new breaking changes ? New design patterns / philosophies ?
What are the upcoming / hot topics in Elm ?
Thanks for providing any information.</text>
  </message>
  <message conversation_id="6">
    <ts>2018-12-31T14:44:19.415100</ts>
    <user>Rosalee</user>
    <text>I would say to skim the recent conference talks to get an idea of whats hot these days &lt;https://www.youtube.com/channel/UCOpGiN9AkczVjlpGDaBwQrQ&gt;</text>
  </message>
  <message conversation_id="8">
    <ts>2018-12-31T16:26:44.416700</ts>
    <user>Wendell</user>
    <text>I wish there were a way to easily look at the optimized output of a package.</text>
  </message>
  <message conversation_id="9">
    <ts>2018-12-31T16:56:42.417700</ts>
    <user>Macy</user>
    <text>Is there an equivalent for `Date.fromString` in Elm .19, to parse a time string into a Posix?</text>
  </message>
  <message conversation_id="9">
    <ts>2018-12-31T16:59:15.418100</ts>
    <user>Aurore</user>
    <text>&lt;@Macy&gt; Maybe &lt;https://package.elm-lang.org/packages/rtfeldman/elm-iso8601-date-strings/latest&gt;</text>
  </message>
  <message conversation_id="9">
    <ts>2018-12-31T17:00:13.418400</ts>
    <user>Macy</user>
    <text>Thanks, &lt;@Aurore&gt;</text>
  </message>
  <message conversation_id="6">
    <ts>2019-01-01T00:29:21.419000</ts>
    <user>Debrah</user>
    <text>Happy new year! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="10">
    <ts>2019-01-01T08:35:26.420000</ts>
    <user>Marcelino</user>
    <text>&lt;@Delmy&gt; I like your example as well. Thanks for your appreciation. We should probably start an online book with parsing examples. I think a lot of people would benefit from it</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:18:55.423500</ts>
    <user>Norris</user>
    <text>Is there any reason why you cannot use `Html.Attributes.property` (or `VirtualDom.property`) to set an element's `innerHTML` value in 0.19?</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:19:23.424100</ts>
    <user>Norris</user>
    <text>When I ported our 0.18 code to 0.19, that line stopped working</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:20:08.424800</ts>
    <user>Norris</user>
    <text>I can set a different attribute, e.g. if I change `property "innerHTML" (Json.Encode.string stringVal)` to `property "innerText" (Json.Encode.string stringVal)`, it will work</text>
  </message>
  <message conversation_id="10">
    <ts>2019-01-01T22:26:59.425600</ts>
    <user>Howard</user>
    <text>`innerHtml` is specifically forbidden in source:
VirtualDom.elm - &lt;https://github.com/elm/virtual-dom/blob/5a5bcf48720bc7d53461b3cd42a9f19f119c5503/src/VirtualDom.elm#L167&gt;
kernel code - &lt;https://github.com/elm/virtual-dom/blob/5a5bcf48720bc7d53461b3cd42a9f19f119c5503/src/Elm/Kernel/VirtualDom.js#L289&gt;</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:28:05.426000</ts>
    <user>Norris</user>
    <text>Yeah just noticed that by looking at my compiled `.js` file</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:28:20.426400</ts>
    <user>Norris</user>
    <text>I really don't appreciate these unannounced breaking changes</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:29:28.427300</ts>
    <user>Norris</user>
    <text>So how is one supposed to insert characters like `&amp;amp;nbsp;` into their HTML now?</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:29:37.427500</ts>
    <user>Norris</user>
    <text>Or any special chars for that matter</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:32:14.428700</ts>
    <user>Earlean</user>
    <text>Type the actual character</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:32:21.429000</ts>
    <user>Howard</user>
    <text>you can use Elm unicode escapes, for example `"\u{00A0}"` for non-breaking space (but granted this isn't as simple as using html escapes)</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:32:26.429200</ts>
    <user>Norris</user>
    <text>So just use `text`?</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:32:45.429500</ts>
    <user>Earlean</user>
    <text>Yep</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:33:16.430400</ts>
    <user>Norris</user>
    <text>so `text "&amp;amp;nbsp;"` will display as a space?</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:33:34.430700</ts>
    <user>Earlean</user>
    <text>Nope</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:33:47.431300</ts>
    <user>Norris</user>
    <text>Figured it wouldn't</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:34:12.432500</ts>
    <user>Norris</user>
    <text>We display user values that are stored as HTML codes in our database</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:34:29.432900</ts>
    <user>Earlean</user>
    <text>`text "\u{00A0}"` will</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:34:44.433600</ts>
    <user>Norris</user>
    <text>silly characters like :spades:</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:34:52.434000</ts>
    <user>Norris</user>
    <text>`♠`</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:35:10.434700</ts>
    <user>Earlean</user>
    <text>You'll need to do the html entity decoding yourself</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:36:42.435500</ts>
    <user>Earlean</user>
    <text>&lt;https://package.elm-lang.org/packages/marcosh/elm-html-to-unicode/latest/&gt; is a package that does this</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:48:46.436300</ts>
    <user>Norris</user>
    <text>So in my database I have a `&amp;amp;#8902` which looks like `⋆` when passed into `innerHTML`</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:49:20.436700</ts>
    <user>Norris</user>
    <text>if I `escape` that database value using that package, I get `&amp;amp;amp;#8902`</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:49:58.437000</ts>
    <user>Norris</user>
    <text>That doesn't quite seem to solve my problem</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:53:42.437800</ts>
    <user>Norris</user>
    <text>Problem is that in this case I have to turn `&amp;amp;#8902` into `\u{22C6}`</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:53:49.438000</ts>
    <user>Norris</user>
    <text>&lt;https://www.toptal.com/designers/htmlarrows/math/star-operator/&gt;</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:57:07.438500</ts>
    <user>Norris</user>
    <text>ah, looks like the issue is that the semicolon is missing</text>
  </message>
  <message conversation_id="11">
    <ts>2019-01-01T22:57:25.439000</ts>
    <user>Norris</user>
    <text>`unescape "&amp;amp;#8902;"` works, whereas just `&amp;amp;#8902` does not</text>
  </message>
  <message conversation_id="12">
    <ts>2019-01-02T06:37:09.441000</ts>
    <user>Earnestine</user>
    <text>does anyone use elm19 with emacs elm-mode? looks like it's rather written fro 18, but maybe there's a recipe to configure it for 19?</text>
  </message>
  <message conversation_id="12">
    <ts>2019-01-02T06:38:45.441500</ts>
    <user>Niesha</user>
    <text>&lt;@Earnestine&gt; the elm IDE support is apparently a bit wonky. &lt;https://github.com/jcollard/elm-mode/issues/152&gt;</text>
  </message>
  <message conversation_id="12">
    <ts>2019-01-02T06:45:03.441700</ts>
    <user>Earnestine</user>
    <text>ui</text>
  </message>
  <message conversation_id="12">
    <ts>2019-01-02T06:47:56.443100</ts>
    <user>Earnestine</user>
    <text>another one: does anybody know why this library (for elm 18) does not show up it's exposed modules/readme.md in here?:
&lt;https://package.elm-lang.org/packages/thought2/elm-wikimedia-commons/1.1.0&gt;</text>
  </message>
  <message conversation_id="12">
    <ts>2019-01-02T07:08:40.443200</ts>
    <user>Earlean</user>
    <text>The &lt;http://package.elm-lang.org|package.elm-lang.org&gt; doesn't properly display newly published 0.18 packages.</text>
  </message>
  <message conversation_id="12">
    <ts>2019-01-02T07:52:29.443400</ts>
    <user>Earnestine</user>
    <text>ui ui</text>
  </message>
  <message conversation_id="13">
    <ts>2019-01-02T08:26:55.444100</ts>
    <user>Earnestine</user>
    <text>any recommendations for an elm (18) documentation generator (html)?</text>
  </message>
  <message conversation_id="13">
    <ts>2019-01-02T08:29:20.444800</ts>
    <user>Jin</user>
    <text>For your own application? &lt;https://github.com/ento/elm-doc&gt; at versions &amp;lt; 1.0 works for Elm 0.18</text>
  </message>
  <message conversation_id="12">
    <ts>2019-01-02T09:10:22.445100</ts>
    <user>Earnestine</user>
    <text>mhh, then we have have python as a build dependency... I'd prefer something that's in npm, I tried some of them, they are not really working...</text>
  </message>
  <message conversation_id="14">
    <ts>2019-01-02T09:21:24.446300</ts>
    <user>Agustin</user>
    <text>This is off topic, but can anyone recommend a JS linter thats not as opinionated as standard? I want whitespace and syntax checking, but I care more about consistency when it comes to `function()` and semi colons etc.</text>
  </message>
  <message conversation_id="14">
    <ts>2019-01-02T09:22:13.447000</ts>
    <user>Agustin</user>
    <text>(We have serverside JS code and Ruby/Elixir code, haven’t yet convinced client to switch to Elm :()</text>
  </message>
  <message conversation_id="14">
    <ts>2019-01-02T09:30:03.447900</ts>
    <user>Kris</user>
    <text>Prettier is pretty good for formatting </text>
  </message>
  <message conversation_id="15">
    <ts>2019-01-02T09:36:31.448700</ts>
    <user>Meridith</user>
    <text>I find `eslint` satisfactory, but you’ll have to tweak the settings I reckon</text>
  </message>
  <message conversation_id="12">
    <ts>2019-01-02T09:51:52.449100</ts>
    <user>Sherri</user>
    <text>I'm late to the party but south american countries like Brazil (where i'm from) also have very low % of english speakers, and a high number of software developers. I jumped in the forum :slightly_smiling_face:</text>
  </message>
  <message conversation_id="16">
    <ts>2019-01-02T15:52:25.452500</ts>
    <user>Michelle</user>
    <text>&lt;@Leoma&gt; sorry i just saw this, that would be doable with this package.  I could probably create some functions that exposes all that functionality</text>
  </message>
  <message conversation_id="17">
    <ts>2019-01-02T16:04:50.453400</ts>
    <user>Saul</user>
    <text>Hi, is there any good stream library for 0.19?</text>
  </message>
  <message conversation_id="17">
    <ts>2019-01-02T16:12:09.453600</ts>
    <user>Virgie</user>
    <text>stream of what?</text>
  </message>
  <message conversation_id="17">
    <ts>2019-01-02T16:14:20.454500</ts>
    <user>Saul</user>
    <text>an updated version of this: &lt;https://package.elm-lang.org/packages/naddeoa/stream/latest&gt;</text>
  </message>
  <message conversation_id="17">
    <ts>2019-01-02T16:16:55.454700</ts>
    <user>Virgie</user>
    <text>maybe &lt;https://package.elm-lang.org/packages/the-sett/lazy-list/latest/Seq&gt;</text>
  </message>
  <message conversation_id="17">
    <ts>2019-01-02T16:37:01.454900</ts>
    <user>Saul</user>
    <text>nice thanks</text>
  </message>
  <message conversation_id="18">
    <ts>2019-01-02T17:20:48.456300</ts>
    <user>Su</user>
    <text>I am looking at the documentation for Random (&lt;https://package.elm-lang.org/packages/elm/random/latest/Random&gt;); and see that the signature for `generate` is `generate : (a -&amp;gt; msg) -&amp;gt; Generator a -&amp;gt; Cmd msg`; is there a name for the (a -&amp;gt; msg) part? Asking because I want to pass my random function a `(a -&amp;gt; msg)`</text>
  </message>
  <message conversation_id="18">
    <ts>2019-01-02T17:22:59.456700</ts>
    <user>Virgie</user>
    <text>it is often a (partially applied) constructor of your `Msg` type</text>
  </message>
  <message conversation_id="18">
    <ts>2019-01-02T17:23:49.457600</ts>
    <user>Virgie</user>
    <text>so if `Msg  = Thing1 Int Int | Thing2 String` then `Thing1 42` and `Thing2` are both values of type `something -&amp;gt; Msg`</text>
  </message>
  <message conversation_id="18">
    <ts>2019-01-02T17:24:00.457900</ts>
    <user>Virgie</user>
    <text>and `Thing1` and `Thing2` are the constructors of `Msg`</text>
  </message>
  <message conversation_id="18">
    <ts>2019-01-02T17:25:35.459100</ts>
    <user>Su</user>
    <text>Ah, ok, thanks! Constructor makes sense. This makes the signature of the function I am working on look like:
```
generatePassword : (String -&amp;gt; Msg) -&amp;gt; Cmd Msg
generatePassword msgConstructor =
```</text>
  </message>
  <message conversation_id="19">
    <ts>2019-01-02T17:27:30.460000</ts>
    <user>Earleen</user>
    <text>Hello all! Any suggestion on naming messages? (I'm mostly having issues naming msgs for HTTP command)</text>
  </message>
  <message conversation_id="18">
    <ts>2019-01-02T17:28:06.460700</ts>
    <user>Virgie</user>
    <text>in that context I think I would go for `toMsg`, but your name would be unremarkable (which is good!)</text>
  </message>
  <message conversation_id="19">
    <ts>2019-01-02T17:29:32.461300</ts>
    <user>Virgie</user>
    <text>&lt;@Earleen&gt; generally, go for "thing has happened" rather than "make thing happen"</text>
  </message>
  <message conversation_id="18">
    <ts>2019-01-02T17:29:52.461600</ts>
    <user>Virgie</user>
    <text>for instance &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L110&gt;</text>
  </message>
  <message conversation_id="18">
    <ts>2019-01-02T17:35:30.463000</ts>
    <user>Kris</user>
    <text>&lt;@Su&gt; note that you don’t need to make that Msg concrete, you can keep it a type variable to get a more generic function </text>
  </message>
  <message conversation_id="19">
    <ts>2019-01-02T17:35:56.463500</ts>
    <user>Earleen</user>
    <text>&lt;@Virgie&gt; thanks</text>
  </message>
  <message conversation_id="18">
    <ts>2019-01-02T17:39:27.464200</ts>
    <user>Su</user>
    <text>Thanks! I tried having signatures of both `(a -&amp;gt; Msg)` and `(String -&amp;gt; msg)`; but the compiler warned me:
```
Hint: Your type annotation uses type variable `msg` which means ANY type of
value can flow through, but your code is saying it specifically wants a `Msg`
value. Maybe change your type annotation to be more specific? Maybe change the
code to be more general?
```
then I tried `(String -&amp;gt; msg) -&amp;gt; Cmd msg` and this passed; I see how this could be more useful</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:18:18.465800</ts>
    <user>Hien</user>
    <text>Greetings, all. I’m having issues with `elm/time`. I’m trying to use `Time.Month` like so:</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:18:19.466000</ts>
    <user>Hien</user>
    <text>```
import Time exposing (Month)

daysInMonth : Month -&amp;gt; List Int
daysInMonth month =
    case month of
        Jan -&amp;gt;
            List.range 1 31

        Feb -&amp;gt;
            List.range 1 28

        Mar -&amp;gt;
            List.range 1 31

        Apr -&amp;gt;
            List.range 1 30

        May -&amp;gt;
            List.range 1 31

        Jun -&amp;gt;
            List.range 1 30

        Jul -&amp;gt;
            List.range 1 31

        Aug -&amp;gt;
            List.range 1 31

        Sep -&amp;gt;
            List.range 1 30

        Oct -&amp;gt;
            List.range 1 31

        Nov -&amp;gt;
            List.range 1 30

        Dec -&amp;gt;
            List.range 1 31
```</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:18:41.466300</ts>
    <user>Hien</user>
    <text>I’m getting an error for every month similar to this:</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:18:44.466500</ts>
    <user>Hien</user>
    <text>```I cannot find a `Dec` constructor:

117|         Dec -&amp;gt;
             ^^^
These names seem close though:

    EQ
    Err
    GT
    LT```</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:18:52.466800</ts>
    <user>Hien</user>
    <text>Can someone give me a pointer to what I’m doing wrong?</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:19:11.467200</ts>
    <user>Hien</user>
    <text>I thought these types were importable and usable as shown in the docs.</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:19:15.467400</ts>
    <user>Hien</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/time/latest/Time&gt;</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:19:57.467500</ts>
    <user>Hien</user>
    <text>I know I’m not handling leap years yet. This is my first implementation and I’m trying to populate a dropdown.</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:21:13.468000</ts>
    <user>Rebekah</user>
    <text>`import Time exposing (Month (..))`</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:21:48.468300</ts>
    <user>Rebekah</user>
    <text>You are importing the Month type from the Time module, without it's type constructors (Jan, Feb, Mar, ...)</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:30:20.468600</ts>
    <user>Hien</user>
    <text>Oh geez. Thank you. I didn’t see an example in the docs.</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:30:25.468800</ts>
    <user>Hien</user>
    <text>It that the only way to use it?</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:30:34.469000</ts>
    <user>Hien</user>
    <text>I can’t do `Month.Jan`, can I?</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:31:39.469200</ts>
    <user>Hien</user>
    <text>Is there any other way to use it without the `(..)` import?</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:41:49.469400</ts>
    <user>Hien</user>
    <text>I tried `Month.Jan` but it didn’t work. While I’m sure there’s a good reason, I just don’t know what it is. (yet)</text>
  </message>
  <message conversation_id="21">
    <ts>2019-01-02T21:56:55.480700</ts>
    <user>Georgene</user>
    <text>admin note: since some of these messages were deleted, and they're just noise, I'm just gonna delete all of them. For people coming into this later: it was just someone being disruptive. Carry on :slightly_smiling_face:</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:58:36.483200</ts>
    <user>Earlean</user>
    <text>&lt;@Hien&gt; `Time.Jan`</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:58:39.483500</ts>
    <user>Hien</user>
    <text>&lt;@Georgene&gt; Feel free to delete my last comment, too. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:59:06.483700</ts>
    <user>Georgene</user>
    <text>alright, done. Wasn't sure if that was part of the prior conversation :slightly_smiling_face:</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:59:27.483900</ts>
    <user>Hien</user>
    <text>&lt;@Earlean&gt; Oh, so each “variant” of that type is attached directly to time. Interesting.</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T21:59:40.484300</ts>
    <user>Hien</user>
    <text>Thanks &lt;@Earlean&gt; and &lt;@Rebekah&gt;!</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T22:00:16.484500</ts>
    <user>Hien</user>
    <text>Thanks! It was part of my question but was useless. I was concerned that my lengthy post was basic enough to be in &lt;#C192T0Q1E|beginners&gt; rather than here.</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T22:00:50.484700</ts>
    <user>Georgene</user>
    <text>there's not a really deep distinction. If you feel like moving it, feel free. Otherwise here is fine!</text>
  </message>
  <message conversation_id="20">
    <ts>2019-01-02T22:02:29.485600</ts>
    <user>Rosanne</user>
    <text>I thought using unsafePerformIO was as controversial as functional programming could get, guess I was wrong :grimacing:</text>
  </message>
  <message conversation_id="22">
    <ts>2019-01-02T22:28:37.486300</ts>
    <user>Mozella</user>
    <text>Someone dm me what the argument was about I missed it</text>
  </message>
  <message conversation_id="22">
    <ts>2019-01-02T22:30:00.487400</ts>
    <user>Mozella</user>
    <text>also, has anyone used any of the available xml parsing modules?</text>
  </message>
  <message conversation_id="22">
    <ts>2019-01-02T22:30:17.487800</ts>
    <user>Mozella</user>
    <text>I'm a bit lost on how to decode stuff</text>
  </message>
  <message conversation_id="22">
    <ts>2019-01-02T22:35:39.489700</ts>
    <user>Leoma</user>
    <text>No worries. I've built (another) calendar widget (elm-ui based) with a simple core API. I'm planning to open source in the next few weeks.</text>
  </message>
  <message conversation_id="23">
    <ts>2019-01-03T03:37:16.490800</ts>
    <user>Danika</user>
    <text>```The elm.json for elm-community/list-extra 1.0.0 gotcorrupted somehow.

I removed it from my file cache, so if it was some transient error it should be
fixed if you try the same thing again. Please report this if it seems like an
Elm problem though!```

This is not the first time i've got this message when trying to install a package with `elm install`, any ideas?</text>
  </message>
  <message conversation_id="23">
    <ts>2019-01-03T06:10:34.491600</ts>
    <user>Sherri</user>
    <text>&lt;@Danika&gt; try deleting elm-stuff folder</text>
  </message>
  <message conversation_id="23">
    <ts>2019-01-03T06:35:40.494900</ts>
    <user>Danika</user>
    <text>No such like, I've tried that before. I believe this is some sort of dependency issue with a non-helpful error. The latest version of list extra is 8.1.0...

On some further investigation it looks like I was triyng to install an old package (`NoRedInk/elm-decode-pipeline`) when a newer version (`NoRedInk/elm-json-decode-pipeline`) exists. Frustrating to say the least but at least it works now.</text>
  </message>
  <message conversation_id="22">
    <ts>2019-01-03T09:37:47.495200</ts>
    <user>Michelle</user>
    <text>&lt;@Leoma&gt; neat!</text>
  </message>
  <message conversation_id="22">
    <ts>2019-01-03T09:38:23.495400</ts>
    <user>Emilee</user>
    <text>if you'll excuse my curiosity, what happened?</text>
  </message>
  <message conversation_id="22">
    <ts>2019-01-03T09:41:36.495700</ts>
    <user>Georgene</user>
    <text>just technical difficulties. One person pinged a lot of people at once (seemed like an accident.) One of the people who was pinged reacted disruptively.</text>
  </message>
  <message conversation_id="22">
    <ts>2019-01-03T09:42:18.495900</ts>
    <user>Georgene</user>
    <text>for full transparency: we didn't have full-Slack pings turned off for whatever reason. Now they're fixed so the cause should not happen again. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="22">
    <ts>2019-01-03T09:42:37.496100</ts>
    <user>Emilee</user>
    <text>i see, thanks for the reply :slightly_smiling_face:</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T10:47:17.497100</ts>
    <user>Zachary</user>
    <text>(not sure what's the policy on announcements here, but I'll post it anyway)

Using Nix to deploy Elm application: &lt;https://blog.hercules-ci.com/elm/2019/01/03/elm2nix-0.1/&gt;</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T10:47:55.497700</ts>
    <user>Virgie</user>
    <text>there is the &lt;#C0K384K4Y|news-and-links&gt;  channel</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T10:48:23.498000</ts>
    <user>Lashawnda</user>
    <text>yeah, share it in &lt;#C0K384K4Y|news-and-links&gt; too!</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T10:49:53.498200</ts>
    <user>Zachary</user>
    <text>thanks! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T11:01:08.498800</ts>
    <user>Lecia</user>
    <text>Anyone know whats wrong with this Regex</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T11:01:11.499000</ts>
    <user>Lecia</user>
    <text>```
                protocolExp =
                    Regex.regex "^https?\:\/\/"
```</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T11:01:21.499200</ts>
    <user>Lecia</user>
    <text>compiler says</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T11:01:24.499400</ts>
    <user>Lecia</user>
    <text>```
(line 1, column 10): unexpected ":" expecting space, "&amp;amp;" or escape code

62|                     Regex.regex "^https?\:\/\/"
                                                   ^
Maybe &amp;lt;http://elm-lang.org/docs/syntax&amp;gt; can help you figure it out.
```</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T11:03:05.499900</ts>
    <user>Kris</user>
    <text>Perhaps colons don’t require escaping </text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T11:05:20.500200</ts>
    <user>Georgene</user>
    <text>this looks like maybe it's 0.18?</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T11:05:48.500700</ts>
    <user>Georgene</user>
    <text>regardless: yeah, colons and forward slashes don't need escaping.</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T11:06:10.501000</ts>
    <user>Georgene</user>
    <text>if you want a literal backslash use `\\`</text>
  </message>
  <message conversation_id="24">
    <ts>2019-01-03T11:07:41.501200</ts>
    <user>Lecia</user>
    <text>ah cool, thanks</text>
  </message>
  <message conversation_id="25">
    <ts>2019-01-03T11:17:04.501900</ts>
    <user>Hyacinth</user>
    <text>Does anyone have enough experience with the `composable-form` package to know how to make a custom field to just display a paragraph of text?</text>
  </message>
  <message conversation_id="25">
    <ts>2019-01-03T11:17:37.502200</ts>
    <user>Carman</user>
    <text>You want a `&amp;lt;textarea&amp;gt;` ?</text>
  </message>
  <message conversation_id="25">
    <ts>2019-01-03T11:17:55.502600</ts>
    <user>Hyacinth</user>
    <text>Just a block of text for description purposes between fields.</text>
  </message>
  <message conversation_id="25">
    <ts>2019-01-03T11:18:34.503200</ts>
    <user>Carman</user>
    <text>Is it tied to a particular field? Or perhaps to a sub-form?</text>
  </message>
  <message conversation_id="25">
    <ts>2019-01-03T11:21:12.505700</ts>
    <user>Hyacinth</user>
    <text>To a sub-form maybe. I'm making a multi-page wizard for helping new customers set up their accounts. Currently each page is a separate form to be able to send a request to save the data with each step. Most of the time keeping the description text outside of the form works fine, but sometimes for design purposes it would be nice to have be able to have an arbitrary number of paragraphs of text within the form itseld.</text>
  </message>
  <message conversation_id="25">
    <ts>2019-01-03T11:22:25.506300</ts>
    <user>Hyacinth</user>
    <text>I suppose that for the most part it would work just fine to include an optional description text to any field.</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:33:22.509600</ts>
    <user>Marcus</user>
    <text>I have a `User` record with `firstName` and `lastName`. Both are of type `Maybe String`. What's the best way to say "if firstName isn't Nothing and lastName isn't Nothing then"?</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:33:55.509900</ts>
    <user>Carman</user>
    <text>You have a function that needs both the first and last name strings?</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:34:56.510400</ts>
    <user>Marcus</user>
    <text>Yes, exactly correct.</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:35:27.511600</ts>
    <user>Marcus</user>
    <text>If either is Nothing, then I won't display them. Only if both are present do they get shown.</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:35:36.511800</ts>
    <user>Carman</user>
    <text>You can do something like:
```
Maybe.map2 yourFunction user.firstName user.lastName
```</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:36:07.512300</ts>
    <user>Carman</user>
    <text>This will either return `Just outputOfYourFunction` or `Nothing`</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:38:16.513800</ts>
    <user>Marcus</user>
    <text>Cool. I imagine the type annotation of `yourFunction` would look something like `yourFunction : String -&amp;gt; String -&amp;gt; String`, assuming the output is the two strings concatenated together.</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:38:35.514100</ts>
    <user>Carman</user>
    <text>Correct</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:38:56.514300</ts>
    <user>Marcus</user>
    <text>Thanks for your help.</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:39:23.514600</ts>
    <user>Carman</user>
    <text>Glad to help! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="26">
    <ts>2019-01-03T14:40:07.515200</ts>
    <user>Carman</user>
    <text>You may find these articles on the topic useful:
• &lt;https://robots.thoughtbot.com/maybe-mechanics&gt;
• &lt;https://robots.thoughtbot.com/problem-solving-with-maybe&gt;
• &lt;https://robots.thoughtbot.com/two-ways-of-looking-at-map-functions&gt;</text>
  </message>
  <message conversation_id="27">
    <ts>2019-01-03T17:02:48.516400</ts>
    <user>Melodee</user>
    <text>Hi everyone and happy new year! If you missed it last month, we’re excited to announce Elm in the Spring, a new one-day single-track conference for developers interested in Elm! Join us in Chicago on April 26th, 2019 for a great day of learning, teaching, and community. &lt;https://www.elminthespring.org&gt;</text>
  </message>
  <message conversation_id="27">
    <ts>2019-01-03T17:03:14.517100</ts>
    <user>Melodee</user>
    <text>Our CFP is open — if you have an idea or story you want to share with the Elm community, we’d love to hear what you have to say! :grinning:</text>
  </message>
  <message conversation_id="28">
    <ts>2019-01-03T20:14:39.518400</ts>
    <user>Kimiko</user>
    <text>Hi everyone! Does anyone know whether the 0.19 elm/random module supersedes the elm-random-extended-pcg library? I'm trying to figure out a way forward for &lt;https://github.com/danyx23/elm-uuid/issues/10&gt;</text>
  </message>
  <message conversation_id="28">
    <ts>2019-01-03T20:40:25.518800</ts>
    <user>Kimiko</user>
    <text>Never mind, I think the answer is "no, it doesn't"</text>
  </message>
  <message conversation_id="29">
    <ts>2019-01-04T03:10:05.519200</ts>
    <user>Arie</user>
    <text>I'm trying out the navbar in rundis/elm-bootstrap. It looks a little weird and fails to collapse. I'm using elm 0.19. Same thing when I try this example &lt;http://elm-bootstrap.info/getting-started&gt; Anyone who tried this?</text>
  </message>
  <message conversation_id="29">
    <ts>2019-01-04T03:20:37.521300</ts>
    <user>Jin</user>
    <text>&lt;@Arie&gt; Do you have the navbar subscriptions enabled in your app? Have you linked to the (correct) bootstrap CSS? Those are just questions off the top of my head. People in &lt;#C3U2E3JRX|elm-bootstrap&gt; might know more.</text>
  </message>
  <message conversation_id="29">
    <ts>2019-01-04T03:31:40.522600</ts>
    <user>Arie</user>
    <text>&lt;@Jin&gt; I have the navbar subscription. I have not linked the bootstrap CSS, can you give any hint on how to do so?</text>
  </message>
  <message conversation_id="29">
    <ts>2019-01-04T03:36:10.526400</ts>
    <user>Jin</user>
    <text>As mentioned in the linked guide you could use `Bootstrap.CDN.stylesheet` to create an inline style node. This works, also in `elm reactor`, but is not meant to be used for serious applications. There you could link to a hosted CSS via a normal link tag in your Html file, `&amp;lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"&amp;gt;`. Or, if you have some build tooling in place, you could add the CSS as a dependency and import and build it like your other CSS.</text>
  </message>
  <message conversation_id="29">
    <ts>2019-01-04T03:52:38.527200</ts>
    <user>Arie</user>
    <text>&lt;@Jin&gt; You pointed me in the right direction and it work perfectly! Thank you.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:10:43.531200</ts>
    <user>Lynne</user>
    <text>Hey folks. I think I know the answer to my question but there is a chance I am missing something. Say I have a list of rose trees where each node contains an object of the same type. I would like to work with this "forest" as if it is a rose tree to use zipper etc. This is easily achievable by catering some root item which would be a non-meaningful value of the same type which all trees are using. But that's what I would like to avoid. Is there any way to model it somehow?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:35:59.531800</ts>
    <user>Lashawnda</user>
    <text>What about a list zipper over a list of tree zippers</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:39:21.532800</ts>
    <user>Lynne</user>
    <text>I won't be able to use library dedicated for rose trees then (like zwilias/elm-rosetree which I am currently adopting)</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:41:06.533700</ts>
    <user>Lynne</user>
    <text>I mean I won't be able to use to full power (like traversing "forward" to a next  tree if there is no child which is exactly what I want)</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:41:12.534000</ts>
    <user>Kris</user>
    <text>I didn’t quite understand what you wanted </text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:41:23.534400</ts>
    <user>Kris</user>
    <text>But I think it’s a zipper over the tree </text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:41:37.534700</ts>
    <user>Lynne</user>
    <text>Yes, with exception</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:42:10.535400</ts>
    <user>Lynne</user>
    <text>Root of this tree does not contain something which is contained within its descendants</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:42:41.536500</ts>
    <user>Lynne</user>
    <text>Imagine a `Tree (Maybe a)` where root is `Tree Nothing` but all children are always `Tree (Just a)`</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:43:12.537000</ts>
    <user>Lynne</user>
    <text>That's basically what I'd like to model</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:44:15.538100</ts>
    <user>Kris</user>
    <text>Well, you should probably model it as something like `type MyThing a = Root Something (Tree a)` </text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:44:44.538800</ts>
    <user>Kris</user>
    <text>That’s probably easier than trying to stuff it in the same type </text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T10:47:26.540200</ts>
    <user>Lynne</user>
    <text>Not sure I understand. Do you suggest using a type with single constructor where root would be `Root Something &amp;lt;no tree&amp;gt;` and every descendant `Root &amp;lt;nothing&amp;gt; &amp;lt;some tree&amp;gt;`?</text>
  </message>
  <message conversation_id="31">
    <ts>2019-01-04T16:26:53.543500</ts>
    <user>Monte</user>
    <text>Is there any way to find out which github repos use a particular elm package?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:29:23.544200</ts>
    <user>Alicia</user>
    <text>hmm, maybe not bulletproof but how about something like &lt;https://github.com/search?q=noredink%2Felm-json-decode-pipeline+filename%3Aelm.json&amp;amp;type=Code&gt;</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:39:05.544400</ts>
    <user>Huong</user>
    <text>That's a pretty interesting problem!</text>
  </message>
  <message conversation_id="31">
    <ts>2019-01-04T16:41:54.545900</ts>
    <user>Nery</user>
    <text>how would one build a heterogenous Dict-like (Hash-like, Map-like) data structure in Elm? ie, w/ homogenous (say, String keys) but w/ heterogenous values?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:42:45.546600</ts>
    <user>Timika</user>
    <text>How heterogenous  is it? If it’s just a small set of types, you could create a custom type that wraps those under one unified type.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:44:32.548800</ts>
    <user>Timika</user>
    <text>```type HValue
    = StringValue String
    | IntValue Int
    | ArrayIntValue (Array Int)
``` for example. But you have to wrap and unwrap yourself.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:44:34.548900</ts>
    <user>Nery</user>
    <text>ah nice
so, eg, `type Value = String | Int | Time` ?
but i suppose for more arbitrary number of types....
or is this the only viable way to achieve this</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:44:52.549300</ts>
    <user>Monte</user>
    <text>&lt;@Alicia&gt; thanks, more or less what I needed :smiley:</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:45:07.549800</ts>
    <user>Nery</user>
    <text>&lt;@Timika&gt; i see i have to have constructors</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:45:47.551200</ts>
    <user>Nery</user>
    <text>there is great value in other langs in "programming w/ maps"  per se
should i not expect to get that kind of experience in Elm (strongly typed land)?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:45:49.551300</ts>
    <user>Timika</user>
    <text>Both key and value of a dict must a of _one_ specific type. I know now other way to achieve this, other with a new type that wraps multiple types.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:46:43.552300</ts>
    <user>Timika</user>
    <text>If `Dict` would allow multiple kinds of type as value at the same time, how would you know what type `Dict.get "key"` results in? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:47:28.553100</ts>
    <user>Monte</user>
    <text>&lt;@Nery&gt; Are you asking in general or is there a specific problem you want to solve?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:48:00.554200</ts>
    <user>Timika</user>
    <text>&lt;@Monte&gt; is asking the real questions here :slightly_smiling_face:</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:48:01.554300</ts>
    <user>Nery</user>
    <text>well a generally approach i take in other languages is to model my data based on a vocabulary of facts
and these usually go into a Dict-like structure but obviously the types vary</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:48:30.554900</ts>
    <user>Nery</user>
    <text>so it would be great to be able to say "age" is Int</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:48:42.555400</ts>
    <user>Timika</user>
    <text>Correct me if I’m wrong, but would that not be a record?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:48:46.555500</ts>
    <user>Nery</user>
    <text>to put the type on the _key_ itself, eg</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:49:24.556600</ts>
    <user>Nery</user>
    <text>...which you can get with _records_, i realize but then i have to create a huge type taxonomy or something ... ie, that's cheating cos it's not on the key the type of the key is for that record only</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:50:05.557300</ts>
    <user>Timika</user>
    <text>Can you give an example what you mean by “model my data based on a vocabulary of facts”?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:50:21.557800</ts>
    <user>Nery</user>
    <text>well here's an example... i want a function like
`isOldEnough()`</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:50:35.558200</ts>
    <user>Nery</user>
    <text>`isOldEnough : Entity -&amp;gt; Boolean`</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:51:12.559000</ts>
    <user>Timika</user>
    <text>```isOldEnough : { a | age : Int } -&amp;gt; Bool
isOldEnough { age } =
    age &amp;gt;= 18```</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:51:13.559200</ts>
    <user>Nery</user>
    <text>wherein isOldEnough could be defined as such:
`isOldEnough = get "age" Entity &amp;gt; 21`</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:51:20.559400</ts>
    <user>Timika</user>
    <text>would be a way to do this with records</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:51:26.559700</ts>
    <user>Nery</user>
    <text>gotcha</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:51:36.560200</ts>
    <user>Kris</user>
    <text>Relevant to programming with maps &lt;https://mobile.twitter.com/EvilHaskellTips/status/433449719226826752&gt;</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:51:36.560300</ts>
    <user>Timika</user>
    <text>then you can pass in every record with an `age` field.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:51:59.561000</ts>
    <user>Nery</user>
    <text>with an `_Int_``age` field</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:52:01.561200</ts>
    <user>Nery</user>
    <text>cool</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:52:06.561400</ts>
    <user>Timika</user>
    <text>Correct, yes.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:52:41.562300</ts>
    <user>Nery</user>
    <text>&lt;@Kris&gt; okay that evil tip has got me intrigued</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:53:06.562800</ts>
    <user>Nery</user>
    <text>thx &lt;@Timika&gt;.. i know that's newbie stuff. i prolly should be in &lt;#C192T0Q1E|beginners&gt; on that question .. thank you</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:53:32.563300</ts>
    <user>Timika</user>
    <text>No worries! Happy to help wherever I can! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:55:42.563800</ts>
    <user>Timika</user>
    <text>Yeah, cake! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T16:59:00.565900</ts>
    <user>Nery</user>
    <text>another pesky question...
what's the significance of requiring `age` to be defined in record after record
why couldn't age simply be defined as Int w/o marrying it to a record
are there strongly typed PLs that allow stuff like this.
it seems rather silly or redundant to have to keep re-defining `age` across N records as an Int
(i assume haskell makes you do the same thing?)</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:00:41.568300</ts>
    <user>Kris</user>
    <text>I don’t understand your question, but you can just write that function as an `Int -&amp;gt; Bool` and call it as `f myRecord.age`</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:00:55.568900</ts>
    <user>Kris</user>
    <text>Haskell doesn’t really have records, so nope : p </text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:02:36.571400</ts>
    <user>Nery</user>
    <text>but what if my logic is based on not just age, eg
`canRideThisRide : Entity -&amp;gt; Bool`
...where in you have to be 10 or older and your height has to be greater than 1.5m, say...</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:02:53.571800</ts>
    <user>Nery</user>
    <text>so i have `age`, an Int, and `height`, a Float, say</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:03:22.572400</ts>
    <user>Timika</user>
    <text>That works the same way as with my example code. You can _match_ on multiple fields.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:04:06.573300</ts>
    <user>Carman</user>
    <text>Are you trying to be super generic here? Or could `Entity` be a record that has all the fields you want:
```
type alias Entity =
  { age : Int
  , height : Float
  , name : String
  , ...
  }
```</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:05:00.574400</ts>
    <user>Nery</user>
    <text>ah i like that &lt;@Carman&gt;
would that be acceptable approach or .. an anti-pattern..?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:05:00.574500</ts>
    <user>Carman</user>
    <text>Then you could say:
```
canRideThisRide : Entity -&amp;gt; Bool
canRideThisRide entity =
  entity.age &amp;gt; 10 &amp;amp;&amp;amp; entity.height &amp;lt; 1.5
```</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:05:34.575400</ts>
    <user>Nery</user>
    <text>i mean that's basically what i'm after &lt;@Carman&gt;</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:05:40.575800</ts>
    <user>Nery</user>
    <text>i want to define a _vocabulary_</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:05:50.576300</ts>
    <user>Timika</user>
    <text>It would become an anti-pattern as soon as you have fields that are not used by all kinds of entities and then get a default value that makes no sense.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:05:52.576400</ts>
    <user>Nery</user>
    <text>NOT a taxonomy of types</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:05:59.576500</ts>
    <user>Carman</user>
    <text>I'd say that's the standard way to design structures. As your business rules get more complex you can get fancier to eliminate impossible states</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:06:24.576800</ts>
    <user>Nery</user>
    <text>ah &lt;@Timika&gt; that seems  a problem</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:07:16.577900</ts>
    <user>Nery</user>
    <text>can they just be defaulted to Empty/Null/what-have-you?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:07:27.578200</ts>
    <user>Nery</user>
    <text>Unknown</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:08:12.579100</ts>
    <user>Timika</user>
    <text>You could make them `Maybe`s. But I would consider a record with just `Maybe` values an anti-pattern. But as always, you have to make your own trade-offs that make sense to you and the problem you’re trying to solve.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:08:35.579700</ts>
    <user>Nery</user>
    <text>yeah i guess my issue is that this seems pretty basic</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:08:40.580000</ts>
    <user>Nery</user>
    <text>so i have a sense i'm missing something</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:08:49.580200</ts>
    <user>Timika</user>
    <text>Could it be that you’re trying to do some game-engine stuff? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:08:58.580600</ts>
    <user>Nery</user>
    <text>hahaha that would be more fun than what i'm doing</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:09:13.581200</ts>
    <user>Nery</user>
    <text>i'm basically just doing business data processing stuff</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:09:20.581600</ts>
    <user>Kris</user>
    <text>Elm doesn’t have that many language features </text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:09:26.581900</ts>
    <user>Nery</user>
    <text>like load a bunch of entities and then render them - basic stuff like that</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:10:34.583500</ts>
    <user>Nery</user>
    <text>but to be able to just deal w/ facts like "age" and "height" seems pretty fundamental
so, since Dicts don't really make this natural, it seems _records_ are the way to go
well, more specifically, a _single_ record like Entity seems the way to go</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:11:13.584400</ts>
    <user>Nery</user>
    <text>but then having say 100 fields that are all Maybe doesn't sound right
so i feel like i'm stuck between a rock and a hard place</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:13:20.587000</ts>
    <user>Carman</user>
    <text>It depends on what the business rules of your system are. Are there some combinations of missing/present data that are invalid?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:13:43.587500</ts>
    <user>Nery</user>
    <text>not necessarily or minimally
after all is just to render</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:13:51.587900</ts>
    <user>Nery</user>
    <text>so if a fact isn't present then it just doesn't need to render</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:14:29.588600</ts>
    <user>Carman</user>
    <text>If all the Maybes are independent, it could be that you're just dealing with highly uncertain data</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:15:12.590000</ts>
    <user>Nery</user>
    <text>well today it's well-known but i'm worried that as new writers want to come into the data system they'll end up breaking my code if i don't make everything Maybe</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:16:23.590700</ts>
    <user>Carman</user>
    <text>The compiler will tell them if they need to add a Maybe</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:16:53.591200</ts>
    <user>Carman</user>
    <text>If all the values are guaranteed to be there today then I wouldn't bring in Maybe</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:17:06.591500</ts>
    <user>Nery</user>
    <text>they're serving up from back end code (no elm)</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:17:24.591800</ts>
    <user>Nery</user>
    <text>if i don't make them Maybe.. they could break me overnight</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:17:37.592200</ts>
    <user>Nery</user>
    <text>if only i could freeze time... : )</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:18:28.593100</ts>
    <user>Carman</user>
    <text>Elm doesn't trust data that comes from APIs. If you're decoding JSON, it will tell you if the data is not in the right shape</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:19:49.594900</ts>
    <user>Timika</user>
    <text>That seems to be your core problem. You’re reading data from a source that changes at-will. How could you ever work with data from such a source? This goes way beyond types.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:20:33.595400</ts>
    <user>Nery</user>
    <text>the source has the guarantee that all the facts are of the right type
like age is Int, height is Float, etc...</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:20:50.595800</ts>
    <user>Nery</user>
    <text>it just won't guarantee which facts you will get across the board</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:21:04.596400</ts>
    <user>Carman</user>
    <text>Ah, so all the facts are optional in the API?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:21:27.597200</ts>
    <user>Nery</user>
    <text>i'd say if i didn't make that assumption i'd be making myself unnecessarily brittle and easily breakable</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:21:58.598000</ts>
    <user>Nery</user>
    <text>like my customers want access to their data in all cases</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:22:09.598400</ts>
    <user>Nery</user>
    <text>like if i only have a guy's first name or last name they want to see that</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:22:19.598900</ts>
    <user>Nery</user>
    <text>not only see it if i just have his first or last name only (for example)</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:23:32.599800</ts>
    <user>Lashawnda</user>
    <text>you might want to use a more general data structure then</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:23:52.600300</ts>
    <user>Nery</user>
    <text>i think that's what i'm looking for @luke</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:24:04.600600</ts>
    <user>Nery</user>
    <text>but what is it if it's not a Dict or record(s)</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:24:26.601200</ts>
    <user>Lashawnda</user>
    <text>then it's time to model it with a custom type :slightly_smiling_face:</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:24:55.602100</ts>
    <user>Nery</user>
    <text>but how .. i mean i want something like a heterogenous Dict .. is there a good pattern (ie, custom type) to get that kind of data structure?</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:24:58.602200</ts>
    <user>Timika</user>
    <text>The initial idea with a `Dict` and the custom type that encapsulates different types in one type seems one solution.</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:25:27.602800</ts>
    <user>Lashawnda</user>
    <text>ah yeah that sounds like a good start</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:25:33.603000</ts>
    <user>Nery</user>
    <text>&lt;@Timika&gt; i think you're right that initial pitch you have that's probably my best best</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:25:35.603200</ts>
    <user>Nery</user>
    <text>bet</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:25:46.603500</ts>
    <user>Nery</user>
    <text>cool i'm going to work with that for a while and see how it plays out</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:25:49.603700</ts>
    <user>Nery</user>
    <text>really appreciate the help</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:26:06.604000</ts>
    <user>Nery</user>
    <text>&amp;lt;more cakes&amp;gt; : )</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:35:14.604200</ts>
    <user>Huong</user>
    <text>So, I think I came up with something</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:38:06.604500</ts>
    <user>Freda</user>
    <text>I am quite late to the party but if you haven't already tried that I can recommend the `airbnb` eslint config. It's also opinated but has less weird things like the semi colons in `standard`</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:40:17.604700</ts>
    <user>Freda</user>
    <text>&lt;https://www.npmjs.com/package/eslint-config-airbnb&gt;</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T17:42:21.606300</ts>
    <user>Huong</user>
    <text>&lt;@Lynne&gt; you mentioned wanting to use `Tree.Zipper` with a root-less forest of trees earlier - I realized that it wouldn't be super-hard to make that possible, and it would provide more consistent behaviour for `prepend` and `append`, too, so, here you go: &lt;https://package.elm-lang.org/packages/zwilias/elm-rosetree/latest/Tree-Zipper#fromForest&gt;</text>
  </message>
  <message conversation_id="30">
    <ts>2019-01-04T19:09:24.608200</ts>
    <user>Ron</user>
    <text>Need help on calling multiple function on a list while passing down the new list to the next function, I have abour 15 functions to call and apply filters and code is getting too large, so here is the example updatedRearAxleWeightFitlerList =
                        (uiModel.selectedFilterBullets, model.truckList)
                                |&amp;gt; filterBySalesStatus
                                |&amp;gt; filterByYear
                                |&amp;gt; filterByMake
                                |&amp;gt; filterByModel
                                |&amp;gt; filterBySleeperRoof
                                |&amp;gt; filterBySleeperBunk
                                |&amp;gt; filterByEngineMake
                                |&amp;gt; filterByTransType
                                |&amp;gt; filterBySuspension
                                |&amp;gt; filterByBodyType
                                |&amp;gt; filterByRearAxleType
                                |&amp;gt; filterByTruckType
                                |&amp;gt; filterByFleetCode</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:10:22.609400</ts>
    <user>Ron</user>
    <text>is there a way to list those functions in a List and map over that list call each func and passdown the result to the next func call ?</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:10:58.610800</ts>
    <user>Niesha</user>
    <text>Yeah, there is. Need help finding it?</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:11:30.611500</ts>
    <user>Ron</user>
    <text>Oh, that would be great, because I have 20 more filters to apply</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:11:37.611800</ts>
    <user>Danika</user>
    <text>jesus</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:11:53.612200</ts>
    <user>Niesha</user>
    <text>You could a) extract the filter functions into `(a -&amp;gt; Bool)` and then it's rather easy to compose them</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:13:12.613600</ts>
    <user>Niesha</user>
    <text>or b) your `filterByX` are of type `List a -&amp;gt; List a`, in which case you wanna `foldl (&amp;gt;&amp;gt;) [filterByX, filterbyY]` (or `(&amp;lt;&amp;lt;)`)</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:15:30.614400</ts>
    <user>Ron</user>
    <text>thanks, I tried foldl, it didnt work, probably I didn't do it right, let me give a try again.</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:16:14.614800</ts>
    <user>Niesha</user>
    <text>Wait, I don't think `&amp;gt;&amp;gt;` is the right way to go here</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:16:15.615000</ts>
    <user>Niesha</user>
    <text>&lt;https://klaftertief.github.io/elm-search/?q=(a%20-%3E%20a)%20-%3E%20(a%20-%3E%20a)%20-%3E%20(a%20-%3E%20a)&gt;</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:16:23.615400</ts>
    <user>Niesha</user>
    <text>you need this function, doesn't seem to exist yet</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:17:28.615700</ts>
    <user>Niesha</user>
    <text>Nah, that's `&amp;gt;&amp;gt;`, the search just doesn't find it</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:18:35.615900</ts>
    <user>Danika</user>
    <text>Oh hey is this like hoogle?</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:34:58.617200</ts>
    <user>Ron</user>
    <text>thanks &lt;@Niesha&gt;</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:38:34.617400</ts>
    <user>Niesha</user>
    <text>Yeah.</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:38:42.617600</ts>
    <user>Niesha</user>
    <text>Sure.</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:40:13.617800</ts>
    <user>Ron</user>
    <text>I tried to do this</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:40:16.618100</ts>
    <user>Ron</user>
    <text>funcListx = [
                                filterBySalesStatus
                                ,filterByYear
                                ,filterByMake
                                ,filterByModel
                                ,filterBySleeperRoof
                                ,filterBySleeperBunk
                                ]

                upx =

                         foldl (&amp;gt;&amp;gt;)  (model.truckList) funcListx</text>
  </message>
  <message conversation_id="33">
    <ts>2019-01-04T19:40:18.618200</ts>
    <user>Lucilla</user>
    <text>that elm search is really useful, thanks for sharing it</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:41:11.619500</ts>
    <user>Danika</user>
    <text>Just a heads up, if you surround your code in three backticks ( ` ) then it’ll format in a nice monospaced code block</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:41:37.619700</ts>
    <user>Ron</user>
    <text>I am getting compiler error, I guess I need to learn the signatures clearly</text>
  </message>
  <message conversation_id="32">
    <ts>2019-01-04T19:41:56.620100</ts>
    <user>Ron</user>
    <text>oh, ok. thx.</text>
  </message>
  <message conversation_id="34">
    <ts>2019-01-04T20:22:56.622300</ts>
    <user>Lizabeth</user>
    <text>I use this, it works but it’s probably not the most efficient way to do it.

```
filters : List (a -&amp;gt; Bool) -&amp;gt; List a -&amp;gt; List a
filters predicates list =
    List.foldl List.filter list predicates
```

I suppose composing the filters instead would only require a single pass instead doing one for each filter as I do here?</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:13:19.625300</ts>
    <user>Earnest</user>
    <text>Something like this?
```
filters : List (a -&amp;gt; Bool) -&amp;gt; List a -&amp;gt; List a
filters fs =
    List.filter (\i -&amp;gt; List.all (\filter -&amp;gt; filter i) fs)
```</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:19:03.626500</ts>
    <user>Tu</user>
    <text>does anybody know if this is possible?
- given a union type where all tag data have the same extensible record base
- extract the extensible record tag data without a case statement</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:20:07.627600</ts>
    <user>Tu</user>
    <text>(made a union type so i could cram heterogenous form types into a single collection; hoped to avoid case statements using extensible records; seems impossible)</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:21:12.627900</ts>
    <user>Earnest</user>
    <text>Don't think so, I'd try putting the tag as a field in the extensible record</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:22:31.630000</ts>
    <user>Earnest</user>
    <text>```
type NotThis a =
   MyS { a | field : String }
   MyI { a | field : String }

type alias ButThis a =
    { a | field : String, type_ : MyType }
type MyType = MyS | MyI
```
?</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:22:39.630200</ts>
    <user>Tu</user>
    <text>hm, that sounds interesting and something i hadn't considered, but in this case it would push the heterogenous data the the tag is hiding up into the record, making the collection items polymorphic</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:23:19.630800</ts>
    <user>Earnest</user>
    <text>Ah, you mean you want somethng like this?
```
type This a b
   = MyS { a | field : String }
   | MyI { b | field : String }
```</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:24:01.631400</ts>
    <user>Tu</user>
    <text>yeah i think so but this syntax is new to me</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:24:12.631800</ts>
    <user>Tu</user>
    <text>i'm using type aliases with arguments</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:24:38.632100</ts>
    <user>Tu</user>
    <text>whew</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:24:40.632300</ts>
    <user>Tu</user>
    <text>thank you</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:25:12.632900</ts>
    <user>Tu</user>
    <text>yeah that's a nicer way of expressing what i've done (so thanks for that)</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:25:44.633500</ts>
    <user>Earnest</user>
    <text>I haven't played with anything like that yet but I imagine you'd still need to case match</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:26:48.634400</ts>
    <user>Tu</user>
    <text>yeah.. it's just a little irritating b/c each branch has the same value</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:27:58.635500</ts>
    <user>Earnest</user>
    <text>I guess the benefit of the alias is that you don't have to case match until you get to the `MyType` specific fields. Like `type MyType = MyS { stringSpecificField : String } | MyI { intSpecificField : Int }`</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:29:03.636700</ts>
    <user>Earnest</user>
    <text>along with the above `ButThis` type. then you can access shared fields normally but have to case when you get to the `MyType` fields</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:32:37.638700</ts>
    <user>Tu</user>
    <text>interesting — but i don't think you can make a `List ButThis a`, can you? as soon as you try to, say, create a literal instance `[ {field = "asdf", intField = 1}, {field = "wert", floatField = 2.0}]`, the compiler will :face_vomiting:</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:34:00.639900</ts>
    <user>Earnest</user>
    <text>No it'd be more like:
```
myList = 
  [ { someField = "9001",  fieldType = IntField 1 }
  , { someField = "42", fieldType = FloatField 2.0 }
  ]
```</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:34:41.640800</ts>
    <user>Earnest</user>
    <text>So you encode the differences in it's own type, and then that type can be a field of the more general record</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:34:43.640900</ts>
    <user>Tu</user>
    <text>that's neat</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:35:03.641400</ts>
    <user>Earnest</user>
    <text>:tada:</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:35:34.642200</ts>
    <user>Tu</user>
    <text>thanks a million :slightly_smiling_face: super handy to have y'all smarties around here to help me expand my type imagination...</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:35:56.642500</ts>
    <user>Earnest</user>
    <text>No problem, abstract modeling is fun :stuck_out_tongue:</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T21:36:36.643400</ts>
    <user>Tu</user>
    <text>it is! i had a rough handful of evenings but as soon as i got the hang of combining unions and extensible records i started to get excited</text>
  </message>
  <message conversation_id="35">
    <ts>2019-01-04T22:05:09.645500</ts>
    <user>Tu</user>
    <text>&lt;@Earnest&gt;this may not come as a surprise to anyone but me, but now that i've finally solved the problem i set out to solve (defining a list of form inputs with associated types), i've just about decided i should move the heterogeneous values out of the input records altogether and convert the strings to the appropriate type wherever i access those fields (seems like less code than case statements in the same places)</text>
  </message>
  <message conversation_id="36">
    <ts>2019-01-04T23:23:21.645900</ts>
    <user>Ron</user>
    <text>hi &lt;@Lizabeth&gt;, do you have a working sample of this code ?</text>
  </message>
  <message conversation_id="36">
    <ts>2019-01-04T23:25:33.646100</ts>
    <user>Ron</user>
    <text>I am really having hardtime to understand this, any help would be greatly appreciated</text>
  </message>
  <message conversation_id="36">
    <ts>2019-01-05T00:50:50.646400</ts>
    <user>Ron</user>
    <text>`applyFilters filterCategory filters =
                        List.foldl
                                executeFilterFunc
                                (uiModel.selectedFilterBullets, model.truckList)
                                (List.filter (\(fltrCategory, fn) -&amp;gt; fltrCategory /= filterCategory ) funcList)
                                        |&amp;gt; rebuildFilters filterCategory filters

                executeFilterFunc (fnCategory, fn) (sfBullets, trks) =
                        fn (sfBullets, trks)

                --asdf = Debug.log "ppppppppppppppppppppppp " [finalTruckList]

                updatedSalesStatusFitlerList =
                        applyFilters SalesStatus uiModel.salesStatusFilters`</text>
  </message>
  <message conversation_id="36">
    <ts>2019-01-05T00:51:05.646600</ts>
    <user>Ron</user>
    <text>I got that working</text>
  </message>
  <message conversation_id="36">
    <ts>2019-01-05T00:51:16.646800</ts>
    <user>Ron</user>
    <text>thx for pointing me to foldl func</text>
  </message>
  <message conversation_id="36">
    <ts>2019-01-05T00:53:37.647300</ts>
    <user>Ron</user>
    <text>` applyFilters filterCategory filters =
                        List.foldl
                                executeFilterFunc
                                (uiModel.selectedFilterBullets, model.truckList)
                                (List.filter (\(fltrCategory, fn) -&amp;gt; fltrCategory /= filterCategory ) funcList)
                                        |&amp;gt; rebuildFilters filterCategory filters

                executeFilterFunc (fnCategory, fn) (sfBullets, trks) =
                        fn (sfBullets, trks)

                --asdf = Debug.log "ppppppppppppppppppppppp " [finalTruckList]

                updatedSalesStatusFitlerList =
                        applyFilters SalesStatus uiModel.salesStatusFilters `</text>
  </message>
  <message conversation_id="36">
    <ts>2019-01-05T00:53:51.647600</ts>
    <user>Ron</user>
    <text>I finally got this stuff working</text>
  </message>
  <message conversation_id="37">
    <ts>2019-01-05T03:48:03.648000</ts>
    <user>Lynne</user>
    <text>Wow, would you mind sharing it? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="38">
    <ts>2019-01-05T06:49:52.648700</ts>
    <user>Shelli</user>
    <text>Has this been posted before? I don’t care. It’s Christmass time here.
&lt;https://www.youtube.com/watch?v=slMZJtnsD2A&gt;</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:45:26.648800</ts>
    <user>Huong</user>
    <text>&lt;https://package.elm-lang.org/packages/zwilias/elm-rosetree/latest/Tree-Zipper#fromForest&gt;</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:47:29.649100</ts>
    <user>Lynne</user>
    <text>Have you actually released new version of the library?! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:48:48.649300</ts>
    <user>Huong</user>
    <text>Yeah, changed how a zipper is modeled so it keeps track of siblings of the current focus, rather than having the siblings be part of the "breadcrumbs", which enables having siblings without a parent at the "root" level</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:49:29.649500</ts>
    <user>Lynne</user>
    <text>So `Zipper.backward` will traverse from "second" to "first" as if there was no root, right?</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:49:34.649700</ts>
    <user>Huong</user>
    <text>Interestingly, the API didn't actually need to change, and it made behaviour of `prepend` and `append` more consistent, too, so I'm quite happy with it</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:50:37.649900</ts>
    <user>Huong</user>
    <text>Yeah, that sounds right</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:50:37.650100</ts>
    <user>Lynne</user>
    <text>And my program still compiles after upgrading</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:50:48.650300</ts>
    <user>Lynne</user>
    <text>Thank you so much!</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:52:09.650500</ts>
    <user>Lynne</user>
    <text>I also thought about posting an issue at Github with a proposal to add `Zipper.isRoot` function, though it seems I won't need it anymore</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:52:26.650700</ts>
    <user>Huong</user>
    <text>Yeah, as far as the API is concerned, 2 new functions were added and everything should still behave the way it did before</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:53:42.650900</ts>
    <user>Huong</user>
    <text>Heh, for some reason that function actually exists, but isn't exposed :thinking_face:</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:54:09.651100</ts>
    <user>Lynne</user>
    <text>Oh yeah, that's why I thought it was there! I saw it in the source but could not use as it is not exposed</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:55:04.651400</ts>
    <user>Huong</user>
    <text>Anyway, if you run into any issues, feel free to poke me (here or on github :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:55:14.651600</ts>
    <user>Lynne</user>
    <text>Sure, thanks again!</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:55:39.651800</ts>
    <user>Lynne</user>
    <text>I will now change to the upgraded API and tell you if I run into any concern</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:56:56.652000</ts>
    <user>Lynne</user>
    <text>Oh I see you changed `map` as well. It used to be `(a-&amp;gt;a) -&amp;gt; Tree a -&amp;gt; Tree a` and I was wondering why</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T07:59:06.652200</ts>
    <user>Huong</user>
    <text>Hm, I didn't change the `Tree` module, though perhaps you were looking at `mapLabel` before? (which only changes the current label and doesn't touch the children)</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T08:00:01.652400</ts>
    <user>Lynne</user>
    <text>I am pretty sure it was `map`, let me check</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T08:01:14.652600</ts>
    <user>Lynne</user>
    <text>Hm, apparently it was `mapLabel`</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T08:02:02.652800</ts>
    <user>Huong</user>
    <text>Oh well ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T08:02:36.653000</ts>
    <user>Huong</user>
    <text>I wonder whether `mapLabel` is all that useful</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T08:03:42.653200</ts>
    <user>Huong</user>
    <text>Good luck, and you know where to find me :slightly_smiling_face:</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T08:03:47.653400</ts>
    <user>Lynne</user>
    <text>It might be. I used (and still do it until I finish transition) another rosetree implementation where this function is called `updateItem`</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T08:04:01.653600</ts>
    <user>Lynne</user>
    <text>I utilized it in my code :slightly_smiling_face:</text>
  </message>
  <message conversation_id="39">
    <ts>2019-01-05T08:04:04.653800</ts>
    <user>Lynne</user>
    <text>Thanks again!</text>
  </message>
  <message conversation_id="40">
    <ts>2019-01-05T14:09:53.655700</ts>
    <user>Jae</user>
    <text>```./src/Main.elm
Error: Compiler process exited with error Compilation failed
elm.exe: not enough bytes
CallStack (from HasCallStack):
  error, called at libraries\binary\src\Data\Binary.hs:212:21 in binary-0.8.5.1:Data.Binary```
I've gotten this error a few times today when compiling my code.  Does anyone know how to fix this?  My solution for now is to delete elm-stuff and compile again but it's kind of tedious.</text>
  </message>
  <message conversation_id="40">
    <ts>2019-01-05T14:12:10.657600</ts>
    <user>Ron</user>
    <text>I worked on a medium sized PROD app for searching trucks inventory with lots of search filters, and I have encountered this issues quite a few time and I had to do the same thing you did and it seems like that is the only way to solve that problem</text>
  </message>
  <message conversation_id="41">
    <ts>2019-01-05T19:37:32.657800</ts>
    <user>Rosalee</user>
    <text>Its a bug in the compiler, don’t compile with `--debug`</text>
  </message>
  <message conversation_id="42">
    <ts>2019-01-05T23:27:03.658100</ts>
    <user>Renay</user>
    <text>Delete the `elm-stuff` folder from your project and you should be good to go</text>
  </message>
  <message conversation_id="42">
    <ts>2019-01-05T23:29:31.660100</ts>
    <user>Renay</user>
    <text>I'm porting a 0.18 app to 0.19.. the app was created using &lt;https://github.com/halfzebra/create-elm-app&gt; having trouble importing .elm files in .js file

more specifically
```
import { App } from './App.elm';
import { Welcome } from "./Welcome.elm"
```
both `App` and `Welcome` are `undefined`.. any hints?</text>
  </message>
  <message conversation_id="42">
    <ts>2019-01-05T23:30:47.660800</ts>
    <user>Renay</user>
    <text>later in the code
```
    let welcomeApp = Welcome.Main.init({
      node: document.getElementById('root'),
      flags: logoPath
    });
.
.
.
    let app = App.Main.init({
      node: document.getElementById('root')
    });
```</text>
  </message>
  <message conversation_id="42">
    <ts>2019-01-05T23:32:56.661200</ts>
    <user>Renay</user>
    <text>getting error
```
index.js:38 Uncaught TypeError: Cannot read property 'Main' of undefined
    at Module../src/index.js (index.js:38)
```</text>
  </message>
  <message conversation_id="42">
    <ts>2019-01-05T23:36:36.661700</ts>
    <user>Nery</user>
    <text>&lt;@Renay&gt; what version of `elm-webpack-loader` is configured in your package.json</text>
  </message>
  <message conversation_id="42">
    <ts>2019-01-05T23:36:40.661900</ts>
    <user>Nery</user>
    <text>you may need to upgrade that</text>
  </message>
  <message conversation_id="42">
    <ts>2019-01-06T00:08:10.662100</ts>
    <user>Renay</user>
    <text>I have `"elm-webpack-loader": "^5.0.0"`</text>
  </message>
  <message conversation_id="42">
    <ts>2019-01-06T02:12:34.666900</ts>
    <user>Renay</user>
    <text>I've created a stupid ellie app (&lt;https://ellie-app.com/4nt65mz53Mga1&gt;) to demonstrate what I need.

When X or Y boxes are clicked they switch to the other div.  I'm trying to have animation when they move between the divs.

Looked at &lt;https://github.com/mdgriffith/elm-style-animation&gt;, but it only supports (from what I understand) elements appearing/disappearing from within a div not moving elements across divs.

In effect, I'm trying to achieve animations like &lt;https://media1.tenor.com/images/451f5d8c8b78e1726dd730d7e491d472/tenor.gif&gt;

Any ideas/hints?</text>
  </message>
  <message conversation_id="43">
    <ts>2019-01-06T02:46:54.669300</ts>
    <user>Jae</user>
    <text>I looked in the elm compiler repo and saw this issue which looks like it’s the problem I’m having &lt;https://github.com/elm/compiler/issues/1853&gt;</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:10:58.673200</ts>
    <user>Tu</user>
    <text>is anybody up to date on the contenteditable cursor position issue? afaict from a mailing list thread and some recent blog posts that google turned up, it's unsolved (that is, elm doesn't maintain cursor position in contenteditable elements when re-rendering like it does w/inputs)</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:17:49.673400</ts>
    <user>Lynne</user>
    <text>In my app I solve it by adding a `data-` attribute to the element where cursor is located and having a mutation observer which invokes `document.setSelection` according to value of that attribute. Works pretty smooth.</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:18:58.673600</ts>
    <user>Lynne</user>
    <text>Could you please give me a link to the thread you were referring to? I am curious to know what people are saying about this issue.</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:21:01.673800</ts>
    <user>Lynne</user>
    <text>The property generated by `elm-webpack-loader` is called Elm despite on the module name, you may try writing `import {Elm as App} from './App.elm'`</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:24:51.674000</ts>
    <user>Lynne</user>
    <text>You can look into CSS transitions to achieve this. You will need to keep DOM node in the tree until transition is done so your model will need to become more sophisticated.</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T04:32:19.674300</ts>
    <user>Tu</user>
    <text>it's a couple of years old, and all they say is "yup, doesn't work w/o hacks": &lt;https://groups.google.com/forum/#!topic/elm-discuss/YKz8rgffoWc&gt;</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:32:50.674600</ts>
    <user>Tu</user>
    <text>(and they don't get into specifics about their solutions)</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:32:59.674800</ts>
    <user>Lynne</user>
    <text>Ok, I see. Thanks anyway :slightly_smiling_face:</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:33:04.675000</ts>
    <user>Tu</user>
    <text>thank you!</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:33:24.675200</ts>
    <user>Tu</user>
    <text>oh wow so you're not even using ports huh</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:34:25.675400</ts>
    <user>Lynne</user>
    <text>I had however hard time implementing selection (and dropped it for now in favor of other issues) so you may need consider this on beforehand</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:34:40.675600</ts>
    <user>Tu</user>
    <text>ah</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:34:42.675800</ts>
    <user>Tu</user>
    <text>thanks</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:34:47.676000</ts>
    <user>Tu</user>
    <text>yeah, i'm going to stick w/input for now</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:34:55.676200</ts>
    <user>Lynne</user>
    <text>Then it should be fine</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:35:23.676400</ts>
    <user>Tu</user>
    <text>it's a minor aesthetic benefit i get of having a "$" prefix on the field render closer to the input value if i can make contenteditable work</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:35:47.676600</ts>
    <user>Tu</user>
    <text>so it's the difference between "$     4,000" and "    $4,000"</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:36:04.676800</ts>
    <user>Tu</user>
    <text>nbd for now</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:36:31.677000</ts>
    <user>Lynne</user>
    <text>Is user supposed typing in $ himself/herself?</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:36:42.677300</ts>
    <user>Tu</user>
    <text>no</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:37:03.677500</ts>
    <user>Tu</user>
    <text>i decided it'd be nice to have typed input fields that have configurable prefixes/suffixes for units</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:37:32.677700</ts>
    <user>Tu</user>
    <text>so like " 4.5 %/mo" where "%/mo" is the suffix</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:38:00.677900</ts>
    <user>Tu</user>
    <text>it's for a real estate investment model</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:38:08.678100</ts>
    <user>Lynne</user>
    <text>So you'd like to always render prefix/suffix close to what user typed in and to achieve this you are considering contenteditable, is it correct?</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:39:00.678300</ts>
    <user>Tu</user>
    <text>correct, except i'm no longer using contenteditable b/c it doens't maintain cursor position, and it's just not as high priority as finishing</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:39:14.678500</ts>
    <user>Lynne</user>
    <text>I see</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:39:33.678700</ts>
    <user>Tu</user>
    <text>this is a little side project that i used as an excuse to learn elm, and i actually need the finished project to make a decision on an investment!</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:39:37.678900</ts>
    <user>Lynne</user>
    <text>You could also look into input addons in Bootstrap style if you haven't yet</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:39:47.679100</ts>
    <user>Tu</user>
    <text>i haven't, no</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:39:49.679300</ts>
    <user>Lynne</user>
    <text>Spontaneously it feels like a decent alternative</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:40:19.679500</ts>
    <user>Lynne</user>
    <text>As you could style them however you want</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:42:04.679700</ts>
    <user>Tu</user>
    <text>are you sure they can do what i want? it sounds impossible for now as it requires an input field that grows w/input</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:42:11.679900</ts>
    <user>Tu</user>
    <text>which, afaik, is only possible w/contenteditable</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:42:36.680100</ts>
    <user>Lynne</user>
    <text>I am not sure of course</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:43:00.680300</ts>
    <user>Tu</user>
    <text>kk</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:43:07.680500</ts>
    <user>Lynne</user>
    <text>I don't understand your need 100%, so it is just a hint which you might want to consider when you are done with more prioritized tasks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:43:38.680700</ts>
    <user>Tu</user>
    <text>sure :slightly_smiling_face: anyhow — thanks for the input (haha) on the contenteditable hack!</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:43:55.680900</ts>
    <user>Lynne</user>
    <text>ur welcome and good luck</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:50:48.681100</ts>
    <user>Renay</user>
    <text>Hmm.. maybe you mean imitating jQuery `animate` function like &lt;https://stackoverflow.com/a/31212954/1970118&gt; but within Elm</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:52:25.681500</ts>
    <user>Lynne</user>
    <text>I meant lower level implementation which jQuery's animate might be using (I don't know how that function is implemented).</text>
  </message>
  <message conversation_id="44">
    <ts>2019-01-06T04:53:19.681700</ts>
    <user>Lynne</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions&gt;</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T04:53:32.682000</ts>
    <user>Lynne</user>
    <text>There are also CSS animations</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T09:47:08.687900</ts>
    <user>Lindsey</user>
    <text>Does the google bot index text from inside an SPA?  My main page has almost no text, but a user can navigate to another view that does have a bunch of text on it.  I don't know how to tell if that's being accessed or not, but I think probably not.  One can pass an URL that causes the page to load with the text on it, but google search thinks that's a duplicate to the main view, which has no text displayed - and arguably that's correct since the same code is loaded either way.</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T11:19:21.690100</ts>
    <user>Jake</user>
    <text>&lt;@Lindsey&gt; kind of. If you don't use actual &amp;lt;a href&amp;gt; tags (or provide a sitemap) the bot doesn't have much to work with.</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T11:20:16.692000</ts>
    <user>Jake</user>
    <text>And although it can handle running some JS in a sandbox, I'm not sure if it's done on all pages (and probably not in the first pass)</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T11:23:00.693300</ts>
    <user>Lindsey</user>
    <text>yeah, I get "Duplicate, submitted URL not selected as canonical" for my help page.  I could flag it as the canonical page but that's not really what I want visitors to see right away.  Still, maybe better than no results on google.</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T11:24:23.694100</ts>
    <user>Lindsey</user>
    <text>Hmmm, making my tab buttons into hrefs might work though, now that I'm parsing the url.</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T11:26:57.695100</ts>
    <user>Jake</user>
    <text>Are you using hash routing? That might cause Google to consider all of your app to be one document</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T11:28:49.697100</ts>
    <user>Lindsey</user>
    <text>I just switched from urls containing various parameters to plain urls corresponding to my four 'pages' and then parameters in the query part.  So basically four urls and then /</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T11:29:30.697700</ts>
    <user>Lindsey</user>
    <text>by hash routing I assume you mean some kind of base64 encoding of parameters and whatnot</text>
  </message>
  <message conversation_id="46">
    <ts>2019-01-06T12:32:37.698200</ts>
    <user>Agustin</user>
    <text>Check the webmaster tool, it can show you what Google sees</text>
  </message>
  <message conversation_id="46">
    <ts>2019-01-06T12:32:41.698500</ts>
    <user>Agustin</user>
    <text>They do run JS in the bot now</text>
  </message>
  <message conversation_id="45">
    <ts>2019-01-06T12:48:08.700600</ts>
    <user>Jake</user>
    <text>&lt;@Lindsey&gt; by "hash routing" I mean using URLs like `&lt;http://mysite.com/#/page1|mysite.com/#/page1&gt;` as opposed to `&lt;http://mysite.com/page1|mysite.com/page1&gt;`</text>
  </message>
  <message conversation_id="47">
    <ts>2019-01-06T20:41:17.701300</ts>
    <user>Dee</user>
    <text>:wave: i'm confused about this error message from the json package:</text>
  </message>
  <message conversation_id="47">
    <ts>2019-01-06T20:41:21.701500</ts>
    <user>Dee</user>
    <text>```
-- TYPE MISMATCH -------------------------------------------------- src/Main.elm

The 1st argument to `list` is not what I expect:

142|     Encode.list (List.map encodeRow rows)
                      ^^^^^^^^^^^^^^^^^^^^^^^
This `map` call produces:

    List Encode.Value

But `list` needs the 1st argument to be:

    a -&amp;gt; Encode.Value
```</text>
  </message>
  <message conversation_id="47">
    <ts>2019-01-06T20:41:45.701900</ts>
    <user>Dee</user>
    <text>that doesn't seem to be what `list` needs the 1st argument to be, according to &lt;https://package.elm-lang.org/packages/elm-lang/core/1.1.1/Json-Encode#list&gt;</text>
  </message>
  <message conversation_id="47">
    <ts>2019-01-06T20:45:49.702100</ts>
    <user>Dee</user>
    <text>oh i'm looking at the wrong docs</text>
  </message>
  <message conversation_id="47">
    <ts>2019-01-06T20:48:01.703100</ts>
    <user>Dee</user>
    <text>what's the difference between elm-lang/core/Json.Encode and elm/json/Json.Encode?</text>
  </message>
  <message conversation_id="47">
    <ts>2019-01-06T20:56:17.703800</ts>
    <user>Earlean</user>
    <text>&lt;@Dee&gt; `elm-lang/` packages are old package from Elm 0.18</text>
  </message>
  <message conversation_id="47">
    <ts>2019-01-06T21:06:57.704200</ts>
    <user>Dee</user>
    <text>ah okay, thanks!</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:05:00.704900</ts>
    <user>Loyce</user>
    <text>What is the current best way to focus an input element? Ports required?</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:10:08.705000</ts>
    <user>Claretta</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom#focus&gt;</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:10:20.705200</ts>
    <user>Loyce</user>
    <text>:+1: Thank you</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:21:02.706300</ts>
    <user>Bernardo</user>
    <text>Is there a way I could combine two `string` :arrow_down:  so I get `Maybe (String, String)`?
&lt;https://package.elm-lang.org/packages/elm/url/latest/Url-Parser-Query#string&gt;</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:23:30.706600</ts>
    <user>Ruthann</user>
    <text>long shot, are you possibly after: &lt;https://package.elm-lang.org/packages/elm/url/latest/Url-Parser-Query#custom&gt;</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:24:14.707400</ts>
    <user>Ruthann</user>
    <text>the string function returns a `Parser (Maybe String)` you can’t get around that unless you put in your own delimiter perhaps and split it at the end</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:25:00.707700</ts>
    <user>Ruthann</user>
    <text>OR are you actually after a map2: &lt;https://package.elm-lang.org/packages/elm/url/latest/Url-Parser-Query#map2&gt;</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:27:11.708700</ts>
    <user>Bernardo</user>
    <text>Yeah I got kinda close with `map2`, but it's not ideal, since I end up with a record having two `Maybe`s, thus:
```
type alias ConfirmationToken = { tokenId : Maybe String, token : Maybe String}
routeParser : Parser (ConfirmationToken -&amp;gt; a) a
routeParser = query (Query.map2 ConfirmationToken (Query.string "tokenId") (Query.string "token"))
```</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:41:34.709900</ts>
    <user>Ruthann</user>
    <text>```
toMabeConfirmationToken maybeA maybeB =
  case ( maybeA, maybeB) of
    (Just a, Just b) -&amp;gt; { tokenId = a, token = b }
    _ -&amp;gt; Nothing
```</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:42:23.710600</ts>
    <user>Ruthann</user>
    <text>&lt;@Bernardo&gt; you can choose to return nothing if you don’t get both matches is this better? gets rid of the Maybes</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:44:37.711100</ts>
    <user>Bernardo</user>
    <text>Brilliant! Here's the version I just finished writing :grin:
```
type Route = Home | ConfirmRoute String String

toRoute : Url.Url -&amp;gt; Route
toRoute url = case (parse routeParser url) of
  Just cToken -&amp;gt; case (cToken.tokenId, cToken.token) of
    (Just tokenId, Just token) -&amp;gt; ConfirmRoute tokenId token
    otherwise -&amp;gt; Home
  otherwise -&amp;gt; Home
```</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:45:38.711300</ts>
    <user>Ruthann</user>
    <text>yep that works</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:46:13.712000</ts>
    <user>Bernardo</user>
    <text>A lot of song and dance to get a couple of query string params thou :disappointed:</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:46:41.712600</ts>
    <user>Ruthann</user>
    <text>you could even put the inner case in a separate function and use the Maybe.andThen with `Maybe.withDefault Home` to streamline the pipes</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:47:44.713100</ts>
    <user>Bernardo</user>
    <text>TY, I'll give that a go</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:49:18.713900</ts>
    <user>Ruthann</user>
    <text>our parser is broken up into a list of possible results, i think if you have more routes, it’s better to do something like this:
```
parser : Parser (Route -&amp;gt; a) a
parser =
    Url.Parser.oneOf
        [ Url.Parser.map Login top
        , Url.Parser.map Login (s "login")
        , Url.Parser.map UserSettings (s (toPath UserSettings))
        , Url.Parser.map Security (s (toPath Security))
        , Url.Parser.map Logout (s "logout")
        , Url.Parser.map Search (s "search" &amp;lt;/&amp;gt; searchSubPageParser)
         , ...
         ]
```</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:49:59.714400</ts>
    <user>Ruthann</user>
    <text>we’ve only got 20 rules, but if i were to do it like you above, i’d go crazy! hehe</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:50:40.714800</ts>
    <user>Ruthann</user>
    <text>will you look that that, i even put in where i stole the code from:
```
{-| Lifted from: &amp;lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Route.elm#L59-L65&amp;gt;
-}
```</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:51:26.715100</ts>
    <user>Ruthann</user>
    <text>that’s using url fragments for routing:&lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Route.elm#L59-L65&gt;</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T22:58:05.716800</ts>
    <user>Bernardo</user>
    <text>Yeah, I'm right on the fence on whether to do fragment routing (so I can just naively serve my `index.html`), or bite the bullet and use a proper web-server</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T23:03:31.717500</ts>
    <user>Bernardo</user>
    <text>Aaaah, I see now, this turns the fragment *into* the path: `{ url | path = Maybe.withDefault "" url.fragment, fragment = Nothing }`, that's awesome, thanks &lt;@Ruthann&gt;!</text>
  </message>
  <message conversation_id="48">
    <ts>2019-01-06T23:05:28.718900</ts>
    <user>Ruthann</user>
    <text>ah yeah, old habits ( 0.18 ) die hard, esp when our whole web server is unfortunately hardcoded to serve assets etc via fragments… couldn’t use the history api unfortunately… have fun!</text>
  </message>
  <message conversation_id="49">
    <ts>2019-01-07T03:10:42.719700</ts>
    <user>Renay</user>
    <text>Ended up doing something like &lt;https://ellie-app.com/4nVK5qBgQy2a1&gt; in my project

Thanks &lt;@Lynne&gt;!</text>
  </message>
  <message conversation_id="50">
    <ts>2019-01-07T03:11:30.720700</ts>
    <user>Shawnna</user>
    <text>Hey all... I'm trying to run a basically empty elm file (`view _ = text "hi"`, no-op update, etc) through reactor, and it loads for a minute then times out with ```
A web handler threw an exception. Details:
thread killed```</text>
  </message>
  <message conversation_id="50">
    <ts>2019-01-07T03:11:43.721000</ts>
    <user>Shawnna</user>
    <text>Nothing gets printed in the console where reactor is running</text>
  </message>
  <message conversation_id="50">
    <ts>2019-01-07T03:11:59.721500</ts>
    <user>Shawnna</user>
    <text>The elm.json is as initially generated by `elm init`, 0.19</text>
  </message>
  <message conversation_id="50">
    <ts>2019-01-07T03:23:09.722200</ts>
    <user>Shawnna</user>
    <text>also when i use `elm make` it says `Success! Compiled one module.` but doesn't actually make a file</text>
  </message>
  <message conversation_id="50">
    <ts>2019-01-07T03:23:22.722600</ts>
    <user>Shawnna</user>
    <text>with or without `--output=xyz.js`</text>
  </message>
  <message conversation_id="50">
    <ts>2019-01-07T03:26:47.722900</ts>
    <user>Shawnna</user>
    <text>Running make in strace, it appears to never open a file to write to</text>
  </message>
  <message conversation_id="50">
    <ts>2019-01-07T03:39:19.723700</ts>
    <user>Lynne</user>
    <text>You have to have a `main` function in your module</text>
  </message>
  <message conversation_id="51">
    <ts>2019-01-07T03:39:45.724300</ts>
    <user>Lynne</user>
    <text>That's how Elm compiler decides if there is anything to do.</text>
  </message>
  <message conversation_id="51">
    <ts>2019-01-07T03:42:22.725200</ts>
    <user>Lynne</user>
    <text>That `main` function must return a `Program` because this is what Elm runtime is capable of running</text>
  </message>
  <message conversation_id="52">
    <ts>2019-01-07T05:18:05.726700</ts>
    <user>Loralee</user>
    <text>Hi folks. Do you know if there already is an "UnionFind" implementation in Elm? I've written one and I wonder if I can publish it without make a doublon.</text>
  </message>
  <message conversation_id="50">
    <ts>2019-01-07T08:42:27.727200</ts>
    <user>Wendell</user>
    <text>small addition: `main` can also be of type `Html msg`</text>
  </message>
  <message conversation_id="50">
    <ts>2019-01-07T08:45:00.727400</ts>
    <user>Wendell</user>
    <text>There was one, but it doesn’t look like it was updated to 0.19. &lt;https://package.elm-lang.org/packages/mattrrichard/elm-disjoint-set/1.0.1&gt;</text>
  </message>
  <message conversation_id="52">
    <ts>2019-01-07T12:16:47.728000</ts>
    <user>Loralee</user>
    <text>Ok thanks</text>
  </message>
  <message conversation_id="53">
    <ts>2019-01-07T12:33:46.728500</ts>
    <user>Treva</user>
    <text>Is there a guide anywhere for upgrading from elm/http 1.0.0 to elm/http 2.0.0 ?</text>
  </message>
  <message conversation_id="53">
    <ts>2019-01-07T12:34:08.728700</ts>
    <user>Treva</user>
    <text>Specifically I was depending on the Request type, which seems to have been removed</text>
  </message>
  <message conversation_id="53">
    <ts>2019-01-07T12:45:13.728900</ts>
    <user>Earnest</user>
    <text>Construct the record yourself &amp;amp; use the `Http.request` function</text>
  </message>
  <message conversation_id="53">
    <ts>2019-01-07T12:46:04.729100</ts>
    <user>Earnest</user>
    <text>Maybe checkout the `elm-http-builder` package</text>
  </message>
  <message conversation_id="53">
    <ts>2019-01-07T12:47:39.729300</ts>
    <user>Treva</user>
    <text>:man-shrugging: I think I like the new approach with typed methods, and Expect, and now that I’ve read through all the API docs I can probably do it.</text>
  </message>
  <message conversation_id="53">
    <ts>2019-01-07T12:47:59.729500</ts>
    <user>Treva</user>
    <text>Even more dependencies is not what I want. Thank you for the suggestions, regardless.</text>
  </message>
  <message conversation_id="53">
    <ts>2019-01-07T12:48:40.729700</ts>
    <user>Treva</user>
    <text>Because I am going to need headers at some point, and builder looks like it’ll be nice then!</text>
  </message>
  <message conversation_id="53">
    <ts>2019-01-07T12:49:16.729900</ts>
    <user>Earnest</user>
    <text>Yup, I usually just write a more domain-specific version of http-builder in an Api module:
&lt;https://github.com/Southern-Exposure-Seed-Exchange/southernexposure.com/blob/master/client/src/Api.elm&gt;</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T16:55:36.733200</ts>
    <user>Floy</user>
    <text>Hi folks, is there any working implementation of a global model (i.e. store a.k.a. redux) for Elm? I've been wondering a lot about it, couldn't exactly spot anything out there, after being repeatedly asked for something like that for my project?</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T16:59:48.733900</ts>
    <user>Floy</user>
    <text>pretty much, I don't see much of a problem with writing huge model for all my domain object, but I am terrified with  dealing with any associations that are out there and keeping them in sync</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:00:13.734100</ts>
    <user>Floy</user>
    <text>&lt;@Rosa&gt; if you don't mind responding here, so I can easily spot this thread later on</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:00:55.734300</ts>
    <user>Rosa</user>
    <text>i feel like you _could_ just pass it around as an argument.</text>
  </message>
  <message conversation_id="53">
    <ts>2019-01-07T17:04:03.734600</ts>
    <user>Earlean</user>
    <text>Can you be more specific about your question? An Elm app has a single model value that hold all the state of your application. (redux got the idea from Elm) </text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:05:11.735000</ts>
    <user>Earlean</user>
    <text>What are 'associations' in this context and why do you think they would be a problem to keep in sync?</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:06:01.735800</ts>
    <user>Cammy</user>
    <text>It sounds an awful lot like you’re describing the Elm Architecture itself (which redux is an implementation of). </text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:06:19.736000</ts>
    <user>Rosa</user>
    <text>elm spa exmple i think used to have a `Session` object which is almost (smells like ) a `Model`. and then each Page had its own `Model`, and could “sync” data with `Session`</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:06:40.736200</ts>
    <user>Floy</user>
    <text>so let's say my model looks like:

```
type alias Store = {
   students: List Student
   classes: List Classes
}

type alias Student = {
   classes: List Classes  --- or should it be List Classes.Id
}
```</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:06:52.736500</ts>
    <user>Rosa</user>
    <text>for like caching, auth, and stuff</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:08:19.736800</ts>
    <user>Floy</user>
    <text>&lt;@Earlean&gt; the question is if I know change one of the classes that change will not be reflected in each student record that is associated/participates in given classes?</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:08:29.737000</ts>
    <user>Floy</user>
    <text>as everything is stored "as value"?</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:09:02.737200</ts>
    <user>Floy</user>
    <text>or am I fundamentally wrong, now :thinking_face: ?</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:09:22.737400</ts>
    <user>Rosa</user>
    <text>btw Richard just gave a rad talk on keeping things in sync
&lt;https://www.youtube.com/watch?v=28OdemxhfbU&gt;

even used Students and Classes for examples</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:09:38.737600</ts>
    <user>Floy</user>
    <text>awesome, will definitely watch it !</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:10:19.738000</ts>
    <user>Floy</user>
    <text>apart from that, I assume that easiest way to handle association would be to store associations via IDs (UUIDs) and simply pull'em from the store for render purposes</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:10:21.738200</ts>
    <user>Floy</user>
    <text>?</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:14:20.738400</ts>
    <user>Earlean</user>
    <text>&lt;@Floy&gt; you should store the values once and store IDs to refer to them</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:18:48.738700</ts>
    <user>Floy</user>
    <text>so will my assumption be correct that in order to correctly handle, let's say `delete`, I ought to have dedicated functions to know exactly what to delete (class) and where (classId in all students)?</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:28:19.739000</ts>
    <user>Floy</user>
    <text>yeah, I think this might be correct answer</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:29:15.739200</ts>
    <user>Earlean</user>
    <text>You can certainly do that. But invalid IDs are fine to have.</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:30:21.739400</ts>
    <user>Floy</user>
    <text>if you have time, I wonder about one extra thing - will I be correct to assume that each view wouldn't exactly store the model (i.e. copy or "lens" of the store). I should pass that to view/update only and maybe just have some convenient function to materialize slice of the store for view purposes?</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:30:53.739600</ts>
    <user>Floy</user>
    <text>i.e. `viewStudent : Store -&amp;gt; List StudentView` ?</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:34:19.739800</ts>
    <user>Earlean</user>
    <text>Yep, that's a common strategy</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:41:04.740000</ts>
    <user>Floy</user>
    <text>:+1:</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:41:28.740200</ts>
    <user>Floy</user>
    <text>ok, I will try to find time and build something against those recommendations, if I may call them so</text>
  </message>
  <message conversation_id="54">
    <ts>2019-01-07T17:41:33.740400</ts>
    <user>Floy</user>
    <text>thx a lot for quick chat</text>
  </message>
  <message conversation_id="55">
    <ts>2019-01-07T21:11:57.741700</ts>
    <user>Marcus</user>
    <text>Is it possible to do something like this: `user = { model.user | firstName = "John" }`? My intuition says it should be, but my compiler says it is not.</text>
  </message>
  <message conversation_id="55">
    <ts>2019-01-07T21:12:58.742400</ts>
    <user>Marcus</user>
    <text>Feels more succinct to do it that way than to break out `model.user` as an intermediate variable, which works.</text>
  </message>
  <message conversation_id="56">
    <ts>2019-01-07T21:31:05.742600</ts>
    <user>Lizabeth</user>
    <text>```
user = model.user |&amp;gt; \u -&amp;gt; { u | firstName = "John" }
```

I’ve seen someone suggest this before.</text>
  </message>
  <message conversation_id="55">
    <ts>2019-01-07T21:39:34.742800</ts>
    <user>Marcus</user>
    <text>Ah, not a bad approach. Thanks.</text>
  </message>
  <message conversation_id="55">
    <ts>2019-01-07T22:25:14.745600</ts>
    <user>Marcus</user>
    <text>I'm wondering if there is a more idiomatic way to do what I'm doing below. This is one of the case statements in my update function:

```
NewName name -&amp;gt;
    let
        newModel = { model | name = newName }
    in
    ( newModel
    , persistModel newModel
    )
```

I have this pattern a lot, where I create an intermediate variable for the model, then return that and a command that uses is.</text>
  </message>
  <message conversation_id="55">
    <ts>2019-01-07T22:26:46.747200</ts>
    <user>Marcus</user>
    <text>I guess I could do something like:

```
{ model | name = newName }
|&amp;gt; (\m -&amp;gt; (m, persistModel m))
```

That doesn't really feel much clearer though.</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:34:09.747700</ts>
    <user>Ruthann</user>
    <text>what does `persistModel` do?</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:34:54.748400</ts>
    <user>Ruthann</user>
    <text>i ask because the name implies it's doing something you're already doing by returning `newModel` in the first part of the tuple</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:36:05.749300</ts>
    <user>Marcus</user>
    <text>I simplified the actual code so it isn't domain specific. In my case, it passes the model to an API.</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:36:24.749600</ts>
    <user>Marcus</user>
    <text>e.g., for backend storage</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:37:47.750200</ts>
    <user>Ruthann</user>
    <text>ic and returning `newModel` would be a sort of 'optimistic update' in that case</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:39:15.751700</ts>
    <user>Ruthann</user>
    <text>in theory, that looks fine to me, you're updating your model locally (temp) and sending it away (perm)
we do this in places as well. the only other thing i could see is if you only updated your local model when the backend task returned with the true state of the backend after the save</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:40:16.752600</ts>
    <user>Marcus</user>
    <text>It's strictly fire-and-forget. I wasn't crazy about always creating the intermediate variable to hold the updated model, but I don't think there's a better way.</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:41:01.753200</ts>
    <user>Ruthann</user>
    <text>if you just want it to look cleaner:
```
{ model | name = newName }
  |&amp;gt; (,)
  |&amp;gt; Tuple.mapSecond persistModel
```</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:41:44.754000</ts>
    <user>Ruthann</user>
    <text>we use pipes `|&amp;gt;` *a lot* in our code, it doesn't always lead to more readable code so up to you to judge</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:42:55.755200</ts>
    <user>Marcus</user>
    <text>The majority of the team is new to FP, so I'll probably stick with the intermediate variable over the pipes. Although, we could stand to embrace pipes more.</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:43:12.755900</ts>
    <user>Marcus</user>
    <text>Can you explain the line `|&amp;gt; (,)`?</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:43:15.756000</ts>
    <user>Ruthann</user>
    <text>hum... actually i don't think that'll work `(,) : a -&amp;gt; b -&amp;gt; (a,b)` your anonymous function is better</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:43:47.756700</ts>
    <user>Ruthann</user>
    <text>i definitely found that pipes or too much transformations was a barrier to onboarding</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:44:24.757700</ts>
    <user>Ruthann</user>
    <text>ppl tended to hold the whole type in their heads rather than just looking at each transform in turn, or not being able to see the input/output straight away</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:44:34.758000</ts>
    <user>Marcus</user>
    <text>It's an awesome idiom, but an unfamiliar syntax.</text>
  </message>
  <message conversation_id="57">
    <ts>2019-01-07T22:44:53.758200</ts>
    <user>Marcus</user>
    <text>We'll get there.</text>
  </message>
  <message conversation_id="58">
    <ts>2019-01-08T03:24:42.759600</ts>
    <user>Velia</user>
    <text>Why not make your `persistModel` function return the tuple?
```
persistModel : Model -&amp;gt; (Model, Cmd Msg)
```
then
```
{ model | name = newName }
    |&amp;gt; persistModel
```
or just
```
persistModel { model | name = newName }
```

An alternative is to make your anonymous function a generic one, maybe something like:
```
thenDo : (Model -&amp;gt; Cmd msg) -&amp;gt; Model -&amp;gt; (Model, Cmd msg)
thenDo f model =
    (model, f model)
```
then
```
{ model | name = newName }
    |&amp;gt; thenDo persistModel
```
Or if you want to keep the tuple structure more visible:
```
apply : (a, a -&amp;gt; b) -&amp;gt; (a, b)
apply (a, f) = (a, f a)
```
then
```
    apply
        ( { model | name = newName }
        , persistModel
        )
```
the most difficult might be to find a good name :sweat_smile:</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T03:57:28.762700</ts>
    <user>Raymonde</user>
    <text>Hi folks, any good idea to cache http requests? I mean cache the GET request with url and params, so that next time fetch with same url and params, it should not trigger the request.</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T04:00:12.763600</ts>
    <user>Raymonde</user>
    <text>It should apply to all requests through the app.</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T04:01:07.764500</ts>
    <user>Nana</user>
    <text>&lt;@Raymonde&gt; I was thinking about this too
you could just use a Dict with the entire url as key I guess</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T04:02:35.765200</ts>
    <user>Nana</user>
    <text>(or the relavant part of the url)</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T04:03:06.765700</ts>
    <user>Raymonde</user>
    <text>Seems I have to store this Dict in global model, and pass all the way down where there is request command.</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T04:03:35.765900</ts>
    <user>Nana</user>
    <text>yup</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T04:04:23.766200</ts>
    <user>Raymonde</user>
    <text>I’ll think about it, thanks.</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T04:08:47.766800</ts>
    <user>Lewis</user>
    <text>won't the browser do this for you “for free” if the http server responds with caching headers?</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T04:09:26.767200</ts>
    <user>Nana</user>
    <text>&lt;@Lewis&gt; not when getting things through scripts I think?</text>
  </message>
  <message conversation_id="59">
    <ts>2019-01-08T04:09:38.767400</ts>
    <user>Lewis</user>
    <text>ah. ok.</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:25:52.769600</ts>
    <user>Lynne</user>
    <text>Is it an intended/documented behaviour to not using cache when requesting data from scripts? It is plain old HTTP after all. Here, for example, it is said that resources downloaded through fetch are subject to the HTTP cache: &lt;https://hacks.mozilla.org/2016/03/referrer-and-cache-control-apis-for-fetch/&gt;</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:32:29.771500</ts>
    <user>Bert</user>
    <text>XHR requests do adhere to the normal HTTP caching too. </text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:33:36.772900</ts>
    <user>Bert</user>
    <text>You need to set no-cache headers for GET requests when you want to bypass the cache. </text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:34:30.774500</ts>
    <user>Bert</user>
    <text>Which incidentally many times is what you want when dealing with an API. </text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:34:59.775200</ts>
    <user>Lynne</user>
    <text>And backend can be set up to prevent same requests from being sent by setting some response headers</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:46:08.775600</ts>
    <user>Nana</user>
    <text>ah I see :sweat_smile:</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:52:13.776800</ts>
    <user>Raymonde</user>
    <text>Is that means it doesn’t need to cache the requests in model, if set cache control correctly?</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:52:37.777200</ts>
    <user>Lynne</user>
    <text>Yes, that's how it is supposed to be done if you control both frontend and backend</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:54:18.778200</ts>
    <user>Lynne</user>
    <text>The question is, however, if Elm's HTTP implementation allows to NOT set no-cache headers - it may be hardcoded</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:54:54.778900</ts>
    <user>Lynne</user>
    <text>As &lt;@Bert&gt; mentioned many times when you dealing with API you want to bypass the cache</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T04:59:30.780700</ts>
    <user>Raymonde</user>
    <text>Alright, I checked the api in my app, and noticed there is a request header `cache-control: no-cache`. According to the article you post, I can set cache mode to `force-cache`</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T05:00:10.781600</ts>
    <user>Bert</user>
    <text>There are no headers in `elm/http` requests by default.</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T05:00:30.782200</ts>
    <user>Raymonde</user>
    <text>But I don’t see a place to set cache mode with elm/http</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T05:01:19.782900</ts>
    <user>Lynne</user>
    <text>`Http.request` accepts `headers` as a record field</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T05:02:27.784300</ts>
    <user>Lynne</user>
    <text>Please also note that setting up cache is not limited only to `cache-control` header. There are few other headers which needs to be set up in request and response for caching to be reliable.</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T05:03:54.785200</ts>
    <user>Raymonde</user>
    <text>Ah, that seems many things to concern.</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T05:04:36.785700</ts>
    <user>Lynne</user>
    <text>It is not that complicated but, yes, it does require some learning</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T05:05:59.786500</ts>
    <user>Lynne</user>
    <text>Some server-side frameworks make it easy by taking single configuration option and then setting up responses for you. So you might want to check docs for whatever is on your backend.</text>
  </message>
  <message conversation_id="60">
    <ts>2019-01-08T05:08:36.787500</ts>
    <user>Raymonde</user>
    <text>I only control our frontend, I’ll learn http cache first. Thanks.</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T05:54:43.789600</ts>
    <user>Nana</user>
    <text>btw, something that's puzzled me a bit is all the talk about using Service Workers for caching
they always seem to treat caching as something completely new, never mentioning the traditional HTTP caching</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T05:57:51.790100</ts>
    <user>Danika</user>
    <text>service workers offer much more granular control over what and when resources are cached</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T05:59:29.790600</ts>
    <user>Danika</user>
    <text>&lt;https://code.fb.com/web/web-performance-cache-efficiency-exercise/&gt; here’s an interesting internal study at facebook</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T05:59:32.790900</ts>
    <user>Danika</user>
    <text>&amp;gt; After a few weeks of collecting data and letting caches fill up, we looked back over the past seven days’ worth of data. The initial results were surprising to us: 25.5% of all logged requests were missing the cache. We split the data by interface, desktop and mobile, and still saw the same breakdown: 24.8% of desktop requests and 26.9% of mobile were missing the cached image. Not what we expected, so we dug in more.</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T05:59:41.791100</ts>
    <user>Danika</user>
    <text>This is with standard HTTP caches</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:06:20.791800</ts>
    <user>Nana</user>
    <text>hmm are they saying that 25% should have had the image cached but didn't? or is it just that 25% hadn't seen the image before?</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:08:08.792000</ts>
    <user>Danika</user>
    <text>Should’ve been cached</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:10:00.793000</ts>
    <user>Nana</user>
    <text>why would that be though? because the browser decided to free up the harddrive space?</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:10:34.793300</ts>
    <user>Danika</user>
    <text>Browsers ultimately discard the cache when they feel like it.</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:10:48.793700</ts>
    <user>Nana</user>
    <text>like, surely it's not just "HTTP caching is buggy and fails 20% of the time"</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:11:23.794400</ts>
    <user>Danika</user>
    <text>Yes, its not that HTTP caching is *necessarily* the evil one, but its more that browsers treat service worker cache and HTTP cache differently</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:11:56.795200</ts>
    <user>Danika</user>
    <text>&lt;https://jakearchibald.com/2016/caching-best-practices/&gt; this article is getting a bit on the old side now, but using service worker and http cache in tandem is a reasonable strategy</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:12:31.796000</ts>
    <user>Nana</user>
    <text>just seems weird to use service workers for something such basic things, and especially for Google to promote it. couldn't they just change the browser settings?</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:15:51.797000</ts>
    <user>Nana</user>
    <text>or is it that too many websites are telling the browser to cache things, so you should use Service Workers to tell the browser you *really* want to cache it?</text>
  </message>
  <message conversation_id="61">
    <ts>2019-01-08T06:21:06.798600</ts>
    <user>Danika</user>
    <text>I mean ultimately service workers and http caches are for different things, right.

You http cache to save redownloading assets that havent changed. But service workers power PWAs which should/need to function like native apps. The expectation is different: pwas need to be functional offline but a cached website doesn’t offer the same assurance.</text>
  </message>
  <message conversation_id="62">
    <ts>2019-01-08T09:29:59.799900</ts>
    <user>Bert</user>
    <text>Service Workers can be used to make the app run and have content offline. </text>
  </message>
  <message conversation_id="62">
    <ts>2019-01-08T09:31:21.801200</ts>
    <user>Bert</user>
    <text>Oh, I didn't see the newest message. Yes! </text>
  </message>
  <message conversation_id="62">
    <ts>2019-01-08T09:31:23.801300</ts>
    <user>Danika</user>
    <text>I’d argue thats what they *should* be used for, not just that they _can_ be</text>
  </message>
  <message conversation_id="62">
    <ts>2019-01-08T09:31:25.801600</ts>
    <user>Danika</user>
    <text>yeah</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:27:54.802800</ts>
    <user>Quintin</user>
    <text>Has anyone experimented with elm-ui ? If so what's your opinion about it? and how do you handle media queries and animation?</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:28:17.803200</ts>
    <user>Quintin</user>
    <text>this elm-ui &lt;https://package.elm-lang.org/packages/mdgriffith/elm-ui/1.1.0/&gt;</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:31:16.804300</ts>
    <user>Carman</user>
    <text>I've used elm-ui on my game (&lt;https://github.com/JoelQ/muses&gt;) but haven't done animation or media queries yet :slightly_smiling_face:</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:32:07.804800</ts>
    <user>Quintin</user>
    <text>&lt;@Carman&gt; did you enjoy elm-ui? or did you ran into problems?</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:33:02.805500</ts>
    <user>Carman</user>
    <text>I did enjoy it! Layout in particular is much more intuitive to me than standard CSS</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:35:10.806300</ts>
    <user>Quintin</user>
    <text>I agree with the premise that css and app ui is not really a great match, but looking at the docs, I still get the feeling that elm-ui doesnt entirely replace elm-css  :disappointed:</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:35:16.806500</ts>
    <user>Quintin</user>
    <text>but I might be missing something</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T10:44:08.807600</ts>
    <user>Desire</user>
    <text>what are you missing? please also be aware of &lt;#C4F9NBLR1|elm-ui&gt;</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:51:41.809000</ts>
    <user>Quintin</user>
    <text>&lt;@Desire&gt; Im still looking at the docs, but out of the box, im missing how to deal with desktop/mobile components (media queries) and animations/transitions, I might be missing something ofc :smile: And thanks for the channel tip, I had no idea it existed</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T10:53:31.809800</ts>
    <user>Desire</user>
    <text>animatons are in a different package</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T10:54:21.810600</ts>
    <user>Desire</user>
    <text>and media queries are supported afaik</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:56:25.811300</ts>
    <user>Quintin</user>
    <text>if they are, then im missing something (but im glad they are supported, so I just need to search a bit better :smile: )</text>
  </message>
  <message conversation_id="63">
    <ts>2019-01-08T10:56:39.811700</ts>
    <user>Quintin</user>
    <text>im moving this conversation to &lt;#C4F9NBLR1|elm-ui&gt; to avoid more noise thanks! :smile:</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:00:13.813000</ts>
    <user>Danika</user>
    <text>Packages aren’t allowed to use native code, but am I right in thinking that `ports` are fair game?</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:02:58.813500</ts>
    <user>Agustin</user>
    <text>Port are your interface to write native code</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:03:16.814000</ts>
    <user>Agustin</user>
    <text>I don’t think you can ship ports in a package though if thats what you are asking</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:04:23.814600</ts>
    <user>Danika</user>
    <text>That’s a shame, that is what i was asking yes</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:04:59.815000</ts>
    <user>Agustin</user>
    <text>Theres at least one package that ships as a npm + elm package</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:05:06.815400</ts>
    <user>Agustin</user>
    <text>Where the npm package generates ports for the elm package</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:05:26.815700</ts>
    <user>Danika</user>
    <text>interesting. do you know how that works?</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:08:05.816800</ts>
    <user>Alana</user>
    <text>Check out elm-mapbox for an example</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:08:15.817000</ts>
    <user>Danika</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:08:34.817500</ts>
    <user>Alana</user>
    <text>(which is awesome, btw)</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:11:38.817600</ts>
    <user>Danika</user>
    <text>Ah cool so you basically just ask politely for developers to define the ports themselves (or supply different port names to the js portion of the library).</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:19:15.818100</ts>
    <user>Agustin</user>
    <text>This was the package I was thinking of &lt;https://github.com/billstclair/elm-websocket-client&gt;</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:19:35.818600</ts>
    <user>Agustin</user>
    <text>But its a copy and paste job, I thought someone was talking about adding a generator</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:23:47.820000</ts>
    <user>Danika</user>
    <text>seems like thats the only way to go. I’d like to throw together a simple Web Audio library over the weekend (elm-webaudio is _old_) as FP works well in the audio processing world</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:45:05.820900</ts>
    <user>Agustin</user>
    <text>If you find something that works well, you might be able to ask for an elm-explorations repo</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:45:31.821300</ts>
    <user>Agustin</user>
    <text>That allows native code as experimental packages</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:45:47.821600</ts>
    <user>Agustin</user>
    <text>I have no idea what the process is though</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T11:47:09.822100</ts>
    <user>Danika</user>
    <text>Ah I doubt anything i whip together will come close to being blessed with native code ^^</text>
  </message>
  <message conversation_id="65">
    <ts>2019-01-08T12:29:58.822300</ts>
    <user>Alana</user>
    <text>And this developer gladly complied! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="66">
    <ts>2019-01-08T13:44:05.823700</ts>
    <user>Jana</user>
    <text>Is there a way to send/receive `Bytes` values over http?  One would need Json encoders/decoders for `Bytes`, but I can’t find any.</text>
  </message>
  <message conversation_id="64">
    <ts>2019-01-08T13:44:48.824500</ts>
    <user>Jana</user>
    <text>I guess one could map to a huge hex string and back, but this seems wasteful.</text>
  </message>
  <message conversation_id="66">
    <ts>2019-01-08T13:47:36.826900</ts>
    <user>Carman</user>
    <text>Hmmm I seem to remember version 2.0 of the elm/http package having something for byte payloads</text>
  </message>
  <message conversation_id="66">
    <ts>2019-01-08T13:47:37.827000</ts>
    <user>Virgie</user>
    <text>this is what I use
```
type Msg
    = LoadFont (Result String Bytes)

loadFont : Cmd Msg
loadFont =
    Http.request
        { method = "GET"
        , headers = [ Http.header "Accept-Ranges" "bytes" ]
        , url = currentFont.url

        --, url = "../Raleway-v4020-Regular.otf"
        , body = Http.emptyBody
        , expect = Http.expectBytesResponse LoadFont keepBytes
        , timeout = Nothing
        , tracker = Nothing
        }
keepBytes : Http.Response Bytes -&amp;gt; Result String Bytes
keepBytes response =
    case response of
        Http.GoodStatus_ _ bytes -&amp;gt;
            Ok bytes

        _ -&amp;gt;
            Err (Debug.toString response)
```</text>
  </message>
  <message conversation_id="66">
    <ts>2019-01-08T13:48:41.827500</ts>
    <user>Jana</user>
    <text>&lt;@Carman&gt; — great, I will look there.  And &lt;@Virgie&gt;, thankyou!!!</text>
  </message>
  <message conversation_id="66">
    <ts>2019-01-08T13:49:30.828300</ts>
    <user>Virgie</user>
    <text>specifically `Http.expectBytesResponse` will give access to it, and then you have to transform the http response into a result as shown</text>
  </message>
  <message conversation_id="66">
    <ts>2019-01-08T13:50:06.830000</ts>
    <user>Carman</user>
    <text>Looks like requests can have a `bytesBody` or a `fileBody` as their payload (in addition to the more traditional string and JSON options)</text>
  </message>
  <message conversation_id="67">
    <ts>2019-01-08T14:17:32.835200</ts>
    <user>Leopoldo</user>
    <text>hello, i m upgrading an elm package from 0.18 to 0.19, what are the syntax and packaging guidelines to follow? i read the docs and but couldn't see a template to start on</text>
  </message>
  <message conversation_id="66">
    <ts>2019-01-08T14:18:16.835600</ts>
    <user>Virgie</user>
    <text>you mean for an `elm.json`? syntax guidelines are effectively whatever elm-format does</text>
  </message>
  <message conversation_id="67">
    <ts>2019-01-08T14:19:02.836600</ts>
    <user>Leopoldo</user>
    <text>what about the main coding structure, etc.. ?</text>
  </message>
  <message conversation_id="67">
    <ts>2019-01-08T14:20:39.839300</ts>
    <user>Leoma</user>
    <text>I’ve put together an API for streamlining the boilerplate in large apps with pages, sub pages, components, etc, and their communication.
I’ve been using it in a large project and it’s helped be with readability and organization (obviously this is subjective).
I’d appreciate any comments before I pull the trigger on publishing it.
&lt;https://github.com/z5h/component-result&gt;</text>
  </message>
  <message conversation_id="67">
    <ts>2019-01-08T15:02:29.840500</ts>
    <user>Leopoldo</user>
    <text>where do i submit an elm package?</text>
  </message>
  <message conversation_id="67">
    <ts>2019-01-08T15:07:27.840700</ts>
    <user>Leoma</user>
    <text>`elm publish --help`</text>
  </message>
  <message conversation_id="67">
    <ts>2019-01-08T15:21:55.840900</ts>
    <user>Leopoldo</user>
    <text>thanks</text>
  </message>
  <message conversation_id="67">
    <ts>2019-01-08T15:28:14.841100</ts>
    <user>Leopoldo</user>
    <text>i couldn't see a guideline, i trying to upload the package &lt;https://github.com/afidegnum/elm-tailwind&gt; a 0.19 version of.   &lt;https://github.com/splodingsocks/elm-tailwind&gt;

The maintainer is not ready to maintain this package anymore as i discussed with him.</text>
  </message>
  <message conversation_id="68">
    <ts>2019-01-08T16:58:12.841300</ts>
    <user>Theda</user>
    <text>This definitely looks like something I’d use.

One use case I had with a component that this wouldn’t work for though:
I have what I call a “SuperSelect” component which is basically just an autocomplete. One need I had while making it was the `update` function of the component, in addition to returning it’s `model` and `cmd` also returned the third option of `maybe Option` (option being an internal type for the selected autocomplete option) which was the previously selected, or just then selected option based on logic that occurred inside the component’s update function</text>
  </message>
  <message conversation_id="68">
    <ts>2019-01-08T17:01:09.841600</ts>
    <user>Theda</user>
    <text>I think I can actually work around that though</text>
  </message>
  <message conversation_id="68">
    <ts>2019-01-08T17:16:52.842500</ts>
    <user>Leoma</user>
    <text>&lt;@Theda&gt; this is what the external message functionality is for.</text>
  </message>
  <message conversation_id="68">
    <ts>2019-01-08T17:17:22.843200</ts>
    <user>Leoma</user>
    <text>It’s there. Unless I’ve misunderstood your requirements.</text>
  </message>
  <message conversation_id="68">
    <ts>2019-01-08T17:21:58.843400</ts>
    <user>Theda</user>
    <text>So in this case an option can be selected for a large number of reasons.

1. The input loses focus but there was a “hovered” option by arrow key navigation. `OnBlur`
2. The user clicks on an option from the autocomplete dropdown. `OnClick optionIndex`
3. The user navigates the options via arrow keys and hits “enter” to select `OnKeyPress` subscription.

So three different messages can result in this change and the consumer would have to watch for every one</text>
  </message>
  <message conversation_id="68">
    <ts>2019-01-08T17:28:11.843700</ts>
    <user>Leoma</user>
    <text>Right, so I’n my example, my TextEditorComponent can signal that a value was accepted, or reverted: &lt;https://github.com/z5h/component-result/blob/master/examples/src/TextEditorComponent.elm#L31&gt;

It’s dispatched here, for example:
&lt;https://github.com/z5h/component-result/blob/master/examples/src/TextEditorComponent.elm#L47&gt;

And handled in the caller:
&lt;https://github.com/z5h/component-result/blob/master/examples/src/Page.elm#L63&gt;</text>
  </message>
  <message conversation_id="68">
    <ts>2019-01-08T17:32:00.843900</ts>
    <user>Leoma</user>
    <text>Actually, perhaps I’m still not understanding your need. Do you have a link to code, or an ellie or something I could see?</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T17:48:48.845600</ts>
    <user>Opal</user>
    <text>&lt;@Leopoldo&gt; You mentioned not seeing guidelines for publishing packages. I’m not sure where you’re feeling stuck, but thought I’d throw this out here in case you haven’t already encountered it: &lt;https://package.elm-lang.org/help/design-guidelines&gt;</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T17:50:16.846500</ts>
    <user>Leopoldo</user>
    <text>&lt;@Opal&gt; i read that already, i needed to run `elm publish`, which leads me to a next issue</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T17:51:06.847400</ts>
    <user>Opal</user>
    <text>Cool. I figured maybe that was the case, but it looked like maybe you were still stuck from your last post.</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T17:53:18.848300</ts>
    <user>Leopoldo</user>
    <text>now, it's requires i had to expose everything, which seems to be tough, they are about _10 000_ objects</text>
  </message>
  <message conversation_id="70">
    <ts>2019-01-08T17:57:24.848400</ts>
    <user>Theda</user>
    <text>&lt;https://github.com/abradley2/form-elements/blob/master/src/FormElements/SuperSelect.elm&gt;

Ah. I see your example more clearly now. I didn't realize withExternal message used an actual message from the update. I thought it just piped whatever message the view put out</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:15:30.848900</ts>
    <user>Opal</user>
    <text>Just to be clear, are you still stuck, or is this just a frustration that you have a workaround for? If stuck, can you share some code snippets or other details that might help us help you? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:19:47.849100</ts>
    <user>Leopoldo</user>
    <text>thanks a lot, i even forgot it figured in the docs, but in my way to share it</text>
  </message>
  <message conversation_id="71">
    <ts>2019-01-08T18:40:58.849400</ts>
    <user>Earnest</user>
    <text>Seems like you'd want to edit the `convert.js` so it explicitly lists all the generated functions/values instead of just having `exposing (..)` in the `elmString`</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:42:06.849600</ts>
    <user>Leopoldo</user>
    <text>on this class, &lt;https://github.com/afidegnum/elm-tailwind/blob/master/src/Tailwind/Classes.elm&gt;  i m having an error I cannot find a ```TailwindClass` constructor:

These names seem close though:```</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:42:57.849800</ts>
    <user>Leopoldo</user>
    <text>&lt;@Earnest&gt; the classes are listed in the `@docs` but i will need to work on the js as well</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:43:07.850000</ts>
    <user>Earnest</user>
    <text>It'd help to post the full error</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:43:59.850200</ts>
    <user>Leopoldo</user>
    <text>``` I cannot find a `TailwindClass` constructor:

36|         folder (TailwindClass c) memo =
                    ^^^^^^^^^^^^^
These names seem close though:

    Basics.EQ
    Basics.False
    &lt;http://Basics.GT|Basics.GT&gt;
    &lt;http://Basics.LT|Basics.LT&gt;

Hint: Read &amp;lt;https://elm-lang.org/0.19.0/imports&amp;gt; to see how `import`
declarations work in Elm.
```</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:44:04.850400</ts>
    <user>Leopoldo</user>
    <text>&lt;https://github.com/afidegnum/elm-tailwind/blob/master/src/Tailwind.elm&gt;</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:44:50.850600</ts>
    <user>Earnest</user>
    <text>you're only exporting the `TailwindClass` type, not the `TailwindClass` constructor</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:45:13.850800</ts>
    <user>Earnest</user>
    <text>to export all the tags/constructors you'd need to do something like `exposing (TailwindClass(..))`</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:45:33.851000</ts>
    <user>Leopoldo</user>
    <text>oh, wow! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:46:08.851200</ts>
    <user>Earnest</user>
    <text>Or add a function like `fromTailwindClass : TailwindClass -&amp;gt; String`, depending on if you want consumers to be able to create their own TailwindClass or not</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:46:41.851400</ts>
    <user>Earnest</user>
    <text>Just exposing the type &amp;amp; function means people can pull values out, but not make their own. Exposing the type &amp;amp; constructor means they can do both.</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:47:31.851600</ts>
    <user>Leopoldo</user>
    <text>ok...</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T18:58:08.851800</ts>
    <user>Leopoldo</user>
    <text>&lt;@Earnest&gt; apart from `exposing (TailwindClass(..))` do i add something else again?</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T19:00:17.852000</ts>
    <user>Leopoldo</user>
    <text>```I do not see `absolute` in the `exposing` list, but it is in your module
documentation:

24| @docs negm_0 ...

Does it need to be added to the `exposing` list as well? Or maybe you removed
`absolute` and forgot to delete it here?

 ```</text>
  </message>
  <message conversation_id="69">
    <ts>2019-01-08T19:16:15.852300</ts>
    <user>Leopoldo</user>
    <text>any hint?</text>
  </message>
  <message conversation_id="72">
    <ts>2019-01-08T19:37:48.853100</ts>
    <user>Sofia</user>
    <text>I've got an odd challenge; I'm trying to create a text box that automatically replaces characters as the user types. Imagine essentially typing `gamma` and after you hit space, the `gamma` becomes `ɣ`</text>
  </message>
  <message conversation_id="72">
    <ts>2019-01-08T19:38:26.854200</ts>
    <user>Sofia</user>
    <text>I'd like to keep the cursor in the same place as well as set the value on the input box with the new value.</text>
  </message>
  <message conversation_id="72">
    <ts>2019-01-08T19:40:48.856500</ts>
    <user>Sofia</user>
    <text>If I use an unkeyed `Html.input`, the cursor doesn't change positions unless the value is explicitly changed; imagine that the cursor is always set to 0 in the dom -- the dom ignores it since it never changes.
```
Html.input
                [ HtmlA.type_ "text"
                , HtmlA.value replacedString
                , HtmlA.selectionStart inputBox.input.caret
                , HtmlA.selectionEnd inputBox.input.caret
                , HtmlE.onInput DoAThing
                ]
                []
          )
        ]
 
```</text>
  </message>
  <message conversation_id="72">
    <ts>2019-01-08T19:41:20.857200</ts>
    <user>Sofia</user>
    <text>If I use a keyed Html.input where the key changes every time the input changes, then the dom node gets recreated over and over which leads to the mobile keyboard quickly closing and reopening and keystrokes being dropped.</text>
  </message>
  <message conversation_id="72">
    <ts>2019-01-08T19:41:50.857600</ts>
    <user>Sofia</user>
    <text>Is there a good way to do this kind of auto-replace in textboxes in elm?</text>
  </message>
  <message conversation_id="73">
    <ts>2019-01-08T20:57:57.857700</ts>
    <user>Earnest</user>
    <text>not sure on that one, looks like it's in both...</text>
  </message>
  <message conversation_id="72">
    <ts>2019-01-08T22:26:05.865300</ts>
    <user>Augustus</user>
    <text>&lt;@Sofia&gt; we ran into a similar problem with supporting `@mentions` in a comment area, You could do it through ports with something like &lt;https://stackoverflow.com/a/512542&gt; and either put the cursor to the end of the input (with another port), or use a subscription that keeps track of the current cursor position and restore it to where it was.</text>
  </message>
  <message conversation_id="73">
    <ts>2019-01-08T22:26:42.866200</ts>
    <user>Augustus</user>
    <text>if it needs to be more complex than that I would recommend using another library like Quill and wrapping it in a custom element, you have a lot more control and easier cross-browser support with it than rolling your own</text>
  </message>
  <message conversation_id="74">
    <ts>2019-01-09T00:05:53.867400</ts>
    <user>Bailey</user>
    <text>can someone tell me if there's a css to list style for elm, where I would pass a block of css definition and return a list of html attribute with the style</text>
  </message>
  <message conversation_id="74">
    <ts>2019-01-09T00:06:03.867700</ts>
    <user>Bailey</user>
    <text>couldn't find anything on google</text>
  </message>
  <message conversation_id="75">
    <ts>2019-01-09T02:50:40.868100</ts>
    <user>Leopoldo</user>
    <text>great news~! &lt;https://package.elm-lang.org/packages/afidegnum/elm-tailwind/latest/&gt;</text>
  </message>
  <message conversation_id="75">
    <ts>2019-01-09T02:53:10.868700</ts>
    <user>Leopoldo</user>
    <text>can you try this ? &lt;https://package.elm-lang.org/packages/afidegnum/elm-tailwind/latest/&gt;</text>
  </message>
  <message conversation_id="75">
    <ts>2019-01-09T02:53:30.868800</ts>
    <user>Leopoldo</user>
    <text>&lt;https://package.elm-lang.org/packages/afidegnum/elm-tailwind/latest&gt;</text>
  </message>
  <message conversation_id="75">
    <ts>2019-01-09T03:46:11.871000</ts>
    <user>Dorsey</user>
    <text>&lt;@Leopoldo&gt; I think &lt;@Bailey&gt; is asking about a general purpose tool, for any CSS, not a specific framework. I don't know of any, but depending on your case simple search and replace with regular expressions could work. Something like: replace `/(.+?)\:(.+?);/` to `Html.Attributes.style "$1" "$2" ,`.</text>
  </message>
  <message conversation_id="76">
    <ts>2019-01-09T03:47:12.871800</ts>
    <user>Dorsey</user>
    <text>You will probably need a little bit of manual post processing. Finally Elm Format will help you align everything.</text>
  </message>
  <message conversation_id="75">
    <ts>2019-01-09T03:52:01.872000</ts>
    <user>Leopoldo</user>
    <text>Ok</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T05:00:33.874200</ts>
    <user>Lynn</user>
    <text>in elm 0.18 is there a way to get the entire hash part of the location. I naively tried to use
```
tokenParser =
    Url.custom "TOKEN"
        (\urlString -&amp;gt; Debug.log "" urlString .....
```
and all I ever get is the string up to the first `/` in my hash rather than the whole thing</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T05:01:13.874900</ts>
    <user>Lynn</user>
    <text>(we’ve inherited some hash routing)</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T05:32:26.876400</ts>
    <user>Huong</user>
    <text>&lt;@Lynn&gt; when using `parsePath`, the parser is run on the path, when using parseHash, it only ever sees the hash. To mix, I'd try pass the `hash` as a parameter to the parser manually, so ```toRoute : Location -&amp;gt; Maybe Route
toRoute location =
  UrlParser.parsePath (myParser location.hash) location```</text>
  </message>
  <message conversation_id="75">
    <ts>2019-01-09T05:32:58.876700</ts>
    <user>Huong</user>
    <text>or something like that</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T05:37:44.877300</ts>
    <user>Lynn</user>
    <text>so I am using parseHash at present but let me play around with your suggestion</text>
  </message>
  <message conversation_id="75">
    <ts>2019-01-09T05:39:29.879000</ts>
    <user>Huong</user>
    <text>ohh, okay, so you want "the rest of the url" so to speak. There's no built-in way to do that at present - passing it as a parameter is the easiest way, the alternative is to build a sort of recursive, depth-limited parser, but that tends to get slow and ugly</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T05:40:18.879400</ts>
    <user>Lynn</user>
    <text>perhaps an example would help</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T05:40:34.879800</ts>
    <user>Lynn</user>
    <text>if I have `&lt;http://localhost:3000/#edit/nestedQueries/P5-ZypUo#token=23456&gt;` (which I know is ugly)</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T05:40:44.880100</ts>
    <user>Lynn</user>
    <text>I want `#edit/nestedQueries/P5-ZypUo#token=23456`</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T05:40:52.880300</ts>
    <user>Lynn</user>
    <text>or perhaps without the first `#`</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T05:43:13.880900</ts>
    <user>Lynn</user>
    <text>what I get is `edit` and none of what follows the `/`</text>
  </message>
  <message conversation_id="78">
    <ts>2019-01-09T06:13:31.881600</ts>
    <user>Emilee</user>
    <text>is there an elm library that parses urls, and accepts urls that have no scheme?</text>
  </message>
  <message conversation_id="78">
    <ts>2019-01-09T06:14:11.882500</ts>
    <user>Emilee</user>
    <text>i'm trying to sanitize form input, and at first I used a premade regex to check urls (which did not work well *at all*), then I tried `elm/url`, but the problem here is that it only accepts urls with a scheme</text>
  </message>
  <message conversation_id="78">
    <ts>2019-01-09T06:25:27.883800</ts>
    <user>Emilee</user>
    <text>seems `elm/url` is not a great choice for this usecase anyway since it also accepts more urls than i want ( `&lt;https://asdf&gt;` for example is a valid url, but I don't want it to be accepted by my form because it doesn't have a tld)</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T07:55:22.885400</ts>
    <user>Huong</user>
    <text>&lt;@Lynn&gt; I _think_ that would all be in `location.hash`. Which you have access to _outside_ your urlParser, so it can be passed along as a param</text>
  </message>
  <message conversation_id="77">
    <ts>2019-01-09T08:33:02.886000</ts>
    <user>Lynn</user>
    <text>yes, that's what I sort of worked out. thanks again</text>
  </message>
  <message conversation_id="79">
    <ts>2019-01-09T08:38:53.887000</ts>
    <user>Leopoldo</user>
    <text>hello, anyone has collections of bare html templates to use with no js? those i have are cluttered with JSes, dificult to handle</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T11:05:33.887700</ts>
    <user>Bert</user>
    <text>What do you mean by templates? </text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T16:46:55.890100</ts>
    <user>Jenice</user>
    <text>I've just hit our old friend

```
Success! Compiled 9 modules.
elm: Map.!: given key is not an element in the map
CallStack (from HasCallStack):
  error, called at libraries/containers/Data/Map/Internal.hs:603:17 in containers-0.5.10.2:Data.Map.Internal
```

*again*, this time when just creating a new, pretty basic module and trying to use it. Again, is there any progress on this? I have no clue how to get around it. Its such a painful bug and I've got it on every 0.19 project I have.. Its really frustrating</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T16:47:38.890400</ts>
    <user>Jenice</user>
    <text>I shudder to think how many new elm users hit this bug and then bail out altogether</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T16:51:47.890900</ts>
    <user>Leoma</user>
    <text>Is the agreed upon solution to do `rm -rf elm-stuff/0.19.0/`? This is my go-to fix.</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T16:52:11.891400</ts>
    <user>Jenice</user>
    <text>Unfortunately that doesn't fix it forme</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T16:53:07.892200</ts>
    <user>Asha</user>
    <text>I’ve also seen to try elm make without the --debug flag</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T16:55:47.892800</ts>
    <user>Teddy</user>
    <text>I'm also curious about this, I've never run into the issue and we've done 2 or 3 elm sites for clients in 0.19 since it was released :thinking_face:</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T16:59:49.894500</ts>
    <user>Jenice</user>
    <text>Turning off the debugger does fix it, but I personally find the debugger so invaluable when developing it makes life really really difficult</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T17:00:37.895600</ts>
    <user>Jenice</user>
    <text>I could probably live with it though, if I heard something anything about if this is actually in the pipeline to be fixed or not?</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T17:03:19.898500</ts>
    <user>Jenice</user>
    <text>I understand the reasoning for not talking too publicly about new features or releases but this is a bug with the existing release and it is causing a lot of people problems, and those are just the ones that come on the slack here and report it. For a language which is so wonderfully friendly to new users, being confronted with an unsolvable Haskell error seems like a real shame to me</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T17:08:56.898700</ts>
    <user>Teddy</user>
    <text>I'm curious, how are you building Elm? Like are you using webpack, parcel, create-elm-app, or just vanilla elm tool chain?</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T17:09:13.898900</ts>
    <user>Jenice</user>
    <text>Ejected `create-elm-app`</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T17:09:24.899100</ts>
    <user>Jenice</user>
    <text>So its webpack basically</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T17:11:16.899300</ts>
    <user>Teddy</user>
    <text>hrmm, interesting, okay well that ruins my theory.

We do all our work in non-ejected `create-elm-app` and thought maybe that had something to do with it, but I don't think the ejection is causing it.

I do hope this gets patched soon.</text>
  </message>
  <message conversation_id="80">
    <ts>2019-01-09T17:22:07.899700</ts>
    <user>Jenice</user>
    <text>Me too</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T17:58:29.904100</ts>
    <user>Shelli</user>
    <text>what does ‘ejected’ mean?</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:23:17.944700</ts>
    <user>Danika</user>
    <text>Im baffled that we don’t have a moderation team </text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:24:08.946000</ts>
    <user>Georgene</user>
    <text>we do. I'm here.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:24:14.946400</ts>
    <user>Georgene</user>
    <text>deletin' stuff</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:24:37.947100</ts>
    <user>Jolanda</user>
    <text>thank you</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:24:45.947300</ts>
    <user>Jenice</user>
    <text>:+1:</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:25:46.948700</ts>
    <user>Jenice</user>
    <text>So when you use create-elm-app you can 'eject' into the webpack configuration it uses: &lt;https://github.com/halfzebra/create-elm-app/blob/master/README.md#want-a-custom-setup&gt;</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:27:38.952900</ts>
    <user>Danika</user>
    <text>Actually more baffled there’s no native slack way to mention admins unless you know who they are</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:27:48.953500</ts>
    <user>Danika</user>
    <text>Thank you &lt;@Georgene&gt; </text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:28:05.954100</ts>
    <user>Georgene</user>
    <text>it's really not meant for communities like this.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:28:20.954500</ts>
    <user>Georgene</user>
    <text>FYI: &lt;@Deja&gt; is basically write-only. If you need help with something, it's better to ask in &lt;#C3FKL0A8H|admin-help&gt;.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:28:31.954800</ts>
    <user>Georgene</user>
    <text>we'll definitely have to revisit that after today though.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:29:08.957100</ts>
    <user>Evita</user>
    <text>Could be good to make &lt;@Deja&gt; mentions get forwarded to all admins or something? Via email</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:29:10.957200</ts>
    <user>Reva</user>
    <text>perhaps this list of admins should be updated? &lt;https://github.com/elm-community/slack#admins&gt;</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:29:39.959000</ts>
    <user>Danika</user>
    <text>I did post in &lt;#C3FKL0A8H|admin-help&gt; to be fair ^^ </text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:31:04.961600</ts>
    <user>Georgene</user>
    <text>and that's why I saw it. Thanks.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:31:22.962000</ts>
    <user>Georgene</user>
    <text>right-o then. That's cleanup done, more-or-less.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:32:02.963500</ts>
    <user>Danika</user>
    <text>Aye so someone mentioned a haskell bug... </text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:32:03.963600</ts>
    <user>Rosanne</user>
    <text>Thanks, Brian. Is there a way to disable the ability to use @-channel/@-everyone in this channel?</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:32:21.964400</ts>
    <user>Danika</user>
    <text>You can probably personally disable channel mentions for yourself </text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:32:51.965100</ts>
    <user>Georgene</user>
    <text>ok, so transparency note time:

- some sockpuppets signed up and spammed a bunch of offensive stuff
- a couple people mentioned them in &lt;#C3FKL0A8H|admin-help&gt;, which was the place we look
- I deactivated their accounts and removed the messages

in the future, &lt;#C3FKL0A8H|admin-help&gt; is the place to go.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:33:05.965500</ts>
    <user>Rosanne</user>
    <text>True, but that won't stop the trolling since most people still have notifications on by default</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:33:07.965600</ts>
    <user>Siu</user>
    <text>You can’t disable channel mentions. At least not for general</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:33:09.965700</ts>
    <user>Georgene</user>
    <text>I'm really curious about this, because I didn't get the @'s in this channel, and that setting is turned off in this Slack.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:33:42.966900</ts>
    <user>Georgene</user>
    <text>yeah, the admins are gonna have to get together and figure out a plan. Sorry for the noise, folks.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:34:12.967700</ts>
    <user>Danika</user>
    <text>Thanks for the transparency Brian </text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:34:48.968100</ts>
    <user>Rosanne</user>
    <text>The troll was editing out their use of @-..., for one thing. I saw both an @-channel notification and an @-everyone</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:35:59.969700</ts>
    <user>Danika</user>
    <text>Slack is an awkward one for public communities when it comes to situations like this; it’s not really built for it, but its also a tool lots of us are already using professionally or elsewhere. </text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:36:07.969800</ts>
    <user>Georgene</user>
    <text>I think there may be some Slack bug which allows this.</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:37:22.970000</ts>
    <user>Shelli</user>
    <text>noted, thanx</text>
  </message>
  <message conversation_id="82">
    <ts>2019-01-09T18:42:43.971900</ts>
    <user>Royal</user>
    <text>Hi everyone. New Elmer here. I posted a question in Beginner channel along with a brief intro. Simply put..I cannot find elm-make on my system. any ideas?</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:43:12.972500</ts>
    <user>Danika</user>
    <text>it is `elm make` in the newest version of the language </text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:43:19.972800</ts>
    <user>Royal</user>
    <text>ahhhh</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:43:21.972900</ts>
    <user>Danika</user>
    <text>Confusing I know</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:43:31.973500</ts>
    <user>Royal</user>
    <text>thanks</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:43:37.973900</ts>
    <user>Danika</user>
    <text>elm-&amp;lt;command&amp;gt; is 0.18, 0.19 is the latest version </text>
  </message>
  <message conversation_id="82">
    <ts>2019-01-09T18:46:15.978300</ts>
    <user>Lashawnda</user>
    <text>hey everyone, if more problems come up in any of the channels for the rest of the day feel free to ping me directly in addition to posting in &lt;#C3FKL0A8H|admin-help&gt;. slack isn't really designed for big, open communities so it's hard to prevent stuff like this from happening but we can definitely clear stuff out and ban accounts as quickly as possible</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T18:46:40.978600</ts>
    <user>Royal</user>
    <text>well it was worth it if I now have a source of guidance on my journey. I'm attempting to build my business website and I've chosen elm over the usual route. The reasoning, I'm learning Racket in HTDP, and didn't want to muddy the waters by learning JS.</text>
  </message>
  <message conversation_id="82">
    <ts>2019-01-09T19:15:56.980500</ts>
    <user>Lashawnda</user>
    <text>also, it turns out that one of the accounts involved was impersonating a real user in this slack so if you saw the exchange and recognize their picture or name take a second to assess before responding</text>
  </message>
  <message conversation_id="82">
    <ts>2019-01-09T19:48:00.984400</ts>
    <user>Lashawnda</user>
    <text>if i have updates i'll post them in &lt;#C3FKL0A8H|admin-help&gt;. i'm about to share some more info right now</text>
  </message>
  <message conversation_id="82">
    <ts>2019-01-09T20:07:21.984800</ts>
    <user>Lashawnda</user>
    <text>&lt;@Lashawnda&gt; set the channel purpose: This channel is for team-wide communication and announcements. All team members are in this channel.

Our Code of Conduct is found at &lt;https://github.com/elm-hub/assets/blob/master/slack-code-of-conduct.md&gt;</text>
  </message>
  <message conversation_id="82">
    <ts>2019-01-09T20:08:00.984900</ts>
    <user>Lashawnda</user>
    <text>&lt;@Lashawnda&gt; set the channel purpose: Code of Conduct: &lt;https://github.com/elm-hub/assets/blob/master/slack-code-of-conduct.md&gt;

Get help with Slack or notify admins of issues in &lt;#C3FKL0A8H|admin-help&gt;</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T20:37:15.985300</ts>
    <user>Leopoldo</user>
    <text>hi, i have been reading this issue about private repos,</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T20:37:21.985500</ts>
    <user>Leopoldo</user>
    <text>but i m still stack in a middle</text>
  </message>
  <message conversation_id="81">
    <ts>2019-01-09T20:37:42.986000</ts>
    <user>Leopoldo</user>
    <text>is it possible to slight modify existing installed packages?</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-09T22:58:15.987000</ts>
    <user>Telma</user>
    <text>Has anyone used this? Does it work very well? &lt;https://github.com/gicentre/prettier-plugin-elm&gt;</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-09T23:11:47.987400</ts>
    <user>Rosalee</user>
    <text>I use it. Works for me</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-09T23:27:39.987900</ts>
    <user>Telma</user>
    <text>cool. the stress of having to format elm on top of all the other learning has been a roadblock for me before</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-09T23:33:12.988300</ts>
    <user>Bernardo</user>
    <text>Is there a way to send a `Result` over a port, from JS back to Elm?</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-09T23:35:12.989700</ts>
    <user>Bernardo</user>
    <text>I have a bit of JS which can fail in exciting ways, and I'd like to either `send(Ok, ())` or `send(Err, someErrorMessage);`</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-10T00:05:29.990200</ts>
    <user>Earnest</user>
    <text>&lt;@Bernardo&gt; Encode it into a `Value` and send that through</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-10T00:06:28.990700</ts>
    <user>Bernardo</user>
    <text>&lt;@Earnest&gt; ah, so time to learn about `Value` then :joy:</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-10T00:07:20.991200</ts>
    <user>Earnest</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/json/latest/Json-Encode&gt;</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-10T00:08:29.992800</ts>
    <user>Bernardo</user>
    <text>I'm not entirely sure what :thanks: is :thinking_face: :smile:</text>
  </message>
  <message conversation_id="83">
    <ts>2019-01-10T00:10:10.993400</ts>
    <user>Earnest</user>
    <text>A brain in a shirt that's too small, that skips leg day, &amp;amp; has snakes for arms?</text>
  </message>
  <message conversation_id="84">
    <ts>2019-01-10T02:09:20.005200</ts>
    <user>Floy</user>
    <text>hey folks, another thing that is quite interesting thing.
recently we've got request to improve performance of the views and I am trying to hard to come up with the model that would allow to me safely implement new approach. Let's maybe start off with requirements. There are 2 distinct requests per "groupId" that I have to execute. One must finish successfully in order to even display the data and second request is auxiliary to provide user some context data out of the associations from object in first request. Also, number of "groupIds" for each I execute those 2 requests should be considered infinite (i..e there can be 1 but also 10). Not to mention that objects that must resolve have to be coupled with user-inputs-ish props

a.k.a -&amp;gt; `type alias ServerData = {obj: Obj, changeRequest, }`, where `obj` is the server response and `changeRequest` is sth to allow user to interact with it.

so now I have this auxiliary data, let's call it `ObjDetails` that is fetched for the same `groupId` from another endpoint that may fail but it will not fail everything. That means that I am targeting sth along ``type alias ServerData = {obj: Obj, changeRequest, details; ObjDetails}`.

I cannot exactly wrap my head around those facts:
1. I cannot use `Task` because I need both requests per `groupId` to resolve without killing each other (i,e, one fails). I assume if I could've that would simplify a lot
2. I have troubles figuring how to safely pull information from second request result. I assume that trying to do that withing `update` is not exactly a nice idea as there are two distinct messages per `groupId` and actually response from either of requests is stored inside the main models dictionaries where keys are `groupId`. So I guess it has to be done within `view` a.k.a. gluing all things up together

Basically, I hope that with this description you might be able to pin point of relate to own business cases and how you resolved them

BTW. Associations are represnted via ids and there is no way to fetch full blown object (i.e. one request per `groupid`</text>
  </message>
  <message conversation_id="84">
    <ts>2019-01-10T02:09:53.005300</ts>
    <user>Floy</user>
    <text>if you have any tips, let's take it over in this thread
thx in advance</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:52:40.005500</ts>
    <user>Lynne</user>
    <text>Hey there</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:52:57.005700</ts>
    <user>Lynne</user>
    <text>Quite an interesting intro :slightly_smiling_face:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:53:59.005900</ts>
    <user>Floy</user>
    <text>I wanted to be thorough :stuck_out_tongue:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:54:08.006100</ts>
    <user>Lynne</user>
    <text>So, you are saying you can't use tasks because you need both requests to resolve without killing each other</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:54:21.006300</ts>
    <user>Lynne</user>
    <text>Where does information about tasks killing each other originate from?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:54:31.006500</ts>
    <user>Lynne</user>
    <text>Tasks themselves are independent entities</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:54:50.006700</ts>
    <user>Floy</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/core/latest/Task#map2&gt;</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:54:53.006900</ts>
    <user>Floy</user>
    <text>Note in there</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:55:15.007200</ts>
    <user>Floy</user>
    <text>or is it like that `map2` fails if and only if the first one fails</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:55:19.007400</ts>
    <user>Floy</user>
    <text>?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:55:31.007600</ts>
    <user>Lynne</user>
    <text>No, if either</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:55:39.007800</ts>
    <user>Lynne</user>
    <text>But it just means you can't use `map2` :slightly_smiling_face:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:55:44.008000</ts>
    <user>Lynne</user>
    <text>Which is far less strickter</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:55:57.008300</ts>
    <user>Floy</user>
    <text>what would you use?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:56:20.008500</ts>
    <user>Lynne</user>
    <text>I would just fire two separate tasks, let them come with results and store these results in two separate `Dict`s</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:56:32.008700</ts>
    <user>Floy</user>
    <text>that's what I have right now in the model</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:56:45.009100</ts>
    <user>Floy</user>
    <text>the problem is combining both</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:57:03.009300</ts>
    <user>Lynne</user>
    <text>I see, let me grasp a little more on the intro then</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:57:44.009500</ts>
    <user>Lynne</user>
    <text>You could actually look into `andThen` btw</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:58:08.009700</ts>
    <user>Lynne</user>
    <text>If I understand correctly first request must complete (meaning if it does not, you are not even interested in firing the second one)</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:58:20.009900</ts>
    <user>Floy</user>
    <text>everything is also a bit complicated by a fact that those aforementioned `details` are in fact `Maybe`. Meaning my  object from first request says `detailsId: Maybe DetailsId` :stuck_out_tongue:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:58:22.010100</ts>
    <user>Lynne</user>
    <text>But it will mean that requests will not be asynchronous</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:58:51.010300</ts>
    <user>Floy</user>
    <text>given the volume of data I need to handle there, I am trying to stay away that fact</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:59:11.010500</ts>
    <user>Lynne</user>
    <text>Do you mean you need things to run asynchronously?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:59:35.010800</ts>
    <user>Floy</user>
    <text>those literally can't be synchronous and given the underlying data source I cannot exactly expect paging now, maybe in future - still I need to address performance issues :confused:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T02:59:52.011000</ts>
    <user>Lynne</user>
    <text>Well, let's focus on present then</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:00:31.011200</ts>
    <user>Lynne</user>
    <text>Ok, then, yes, combining tasks won't work. Actually `map2` is also running tasks synchronously, so that's another reason why it is not suitable</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:02:01.011400</ts>
    <user>Floy</user>
    <text>exactly so</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:02:53.011600</ts>
    <user>Lynne</user>
    <text>I think I have pretty much similar situation in my app actually. I need to load data from two sources and only when it is there I can initialize a component. In your case it means you don't have to wait for the second source probably and can render as soon as you get `Obj`</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:03:14.011800</ts>
    <user>Lynne</user>
    <text>So actually you can combine stuff in `update` and to solve performance issues you have to I think</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:03:50.012000</ts>
    <user>Lynne</user>
    <text>That's how I addressed it:
```
type ModelState
    = NotInitialized
    | Initializing (Maybe x) (Maybe y)
    | Initialized (x, y)
```</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:04:17.012200</ts>
    <user>Floy</user>
    <text>is it considered a good practice/solution? I mean I will need to have two separate messages for that?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:04:36.012400</ts>
    <user>Lynne</user>
    <text>So if you had a `Dict GroupId (ModelState Obj ObjDetails)` you could populate it with correct `ModelState`s</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:04:52.012600</ts>
    <user>Lynne</user>
    <text>Having two separate messages is unavoidable I think</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:05:15.012800</ts>
    <user>Lynne</user>
    <text>You basically run two things in parallel and don't know when either of them completes</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:05:42.013000</ts>
    <user>Lynne</user>
    <text>How else would you address t his? There has to be a point somewhere to wait and combine the results. That's what `update` is for.</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:05:44.013200</ts>
    <user>Floy</user>
    <text>yeah, I see what you mean here</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:06:11.013400</ts>
    <user>Lynne</user>
    <text>Do you have performance problems in views?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:06:20.013600</ts>
    <user>Floy</user>
    <text>well, honestly speaking that is the most difficult challenge that I had to face here :slightly_smiling_face:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:06:23.013800</ts>
    <user>Lynne</user>
    <text>I mean are they slow/sluggish?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:07:44.014100</ts>
    <user>Floy</user>
    <text>they kind of are, but bigger issue is on backend side that even after receiving a load of performance improvements may still get killed given that can be bombarded with thousands of new request for each object resolved from 1st request to get those details one by one :smile:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:08:57.014300</ts>
    <user>Lynne</user>
    <text>Can you batch these requests?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:09:05.014500</ts>
    <user>Lynne</user>
    <text>Would it help?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:09:13.014700</ts>
    <user>Floy</user>
    <text>as to why that happened, I can't exactly say, I assume that everyone is guilty here :stuck_out_tongue:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:09:32.014900</ts>
    <user>Floy</user>
    <text>you mean sending batch request? it's a neat idea, but backend does not exactly support that</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:09:46.015100</ts>
    <user>Lynne</user>
    <text>Ok, you can't :slightly_smiling_face:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:09:59.015300</ts>
    <user>Lynne</user>
    <text>But I think that would be a way to go</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:10:01.015500</ts>
    <user>Floy</user>
    <text>not to mentioon that it would present another challange in Elm as to parsing the response for that :smile:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:10:21.015700</ts>
    <user>Lynne</user>
    <text>It would be a list/dict of same decoders you use for the single message</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:10:23.015900</ts>
    <user>Lynne</user>
    <text>easy-peasy</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:10:26.016100</ts>
    <user>Lynne</user>
    <text>:stuck_out_tongue:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:10:39.016300</ts>
    <user>Floy</user>
    <text>hmm....ok, my bad :smile:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:10:57.016500</ts>
    <user>Lynne</user>
    <text>Not a problem :slightly_smiling_face:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:11:13.016700</ts>
    <user>Floy</user>
    <text>sorry, just having troubles seeing the obvious</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:11:34.016900</ts>
    <user>Floy</user>
    <text>ok, I will try to somehow try to overcome what happens here</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:12:29.017100</ts>
    <user>Lynne</user>
    <text>Did I come with anything helpful? I am not 100% sure I fully understand what you are trying to achieve.</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:16:05.018000</ts>
    <user>Luba</user>
    <text>Hmm. With the new Http, is it not possible to make at Task with Json decoder anymore? Is there a reason for this?</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:16:53.018100</ts>
    <user>Floy</user>
    <text>performance improvement and a model that is 100% accurate of each stage :stuck_out_tongue:</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:17:06.018300</ts>
    <user>Floy</user>
    <text>I don't want to deal with weird states by logic in view</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:19:37.018900</ts>
    <user>Lynne</user>
    <text>Wow, that was surprising... I guess you can use `stringResolver` and then `Decode.decodeString` instead</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:20:12.019300</ts>
    <user>Lynne</user>
    <text>Weird there is no `jsonResolver` tho</text>
  </message>
  <message conversation_id="85">
    <ts>2019-01-10T03:21:08.019400</ts>
    <user>Luba</user>
    <text>I guess so. But seems like he must have had a reason to make task and cmd different in that way.</text>
  </message>
  <message conversation_id="86">
    <ts>2019-01-10T04:08:30.019700</ts>
    <user>Lynne</user>
    <text>Definitely</text>
  </message>
  <message conversation_id="87">
    <ts>2019-01-10T06:13:45.020500</ts>
    <user>Lynn</user>
    <text>we’ve heard - but now for quite a long time - that a fix is in development. It requires changes deep in the internals of the compiler and will take time. With other stuff coming out though - e.g. http2 - there is a question as to how much this bug is being prioritised</text>
  </message>
  <message conversation_id="88">
    <ts>2019-01-10T06:22:14.021400</ts>
    <user>Leopoldo</user>
    <text>&lt;@Leonie&gt; hi, about your css module i have a little question, i posted in github</text>
  </message>
  <message conversation_id="88">
    <ts>2019-01-10T06:45:27.021600</ts>
    <user>Lewis</user>
    <text>you should just ask the question on &lt;#C0HJVT881|elm-css&gt; and see if anyone there can help you. github issues should be issues related to the project itself, not a question about usage of the project, for that slack (or discourse) is a better place. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="88">
    <ts>2019-01-10T06:46:45.021800</ts>
    <user>Lewis</user>
    <text>it can considered somewhat rude to open a github issue and then ping someone (potentially triggering a notification for them) about it right after.</text>
  </message>
  <message conversation_id="88">
    <ts>2019-01-10T06:46:54.022000</ts>
    <user>Lewis</user>
    <text>just a friendly tip! :+1:</text>
  </message>
  <message conversation_id="88">
    <ts>2019-01-10T06:54:39.022200</ts>
    <user>Leopoldo</user>
    <text>thanks for the tip, it won't happen again</text>
  </message>
  <message conversation_id="88">
    <ts>2019-01-10T06:55:58.022400</ts>
    <user>Lewis</user>
    <text>sure. hope someone can help you! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:33:24.024000</ts>
    <user>Desire</user>
    <text>anybody that knows of a good way of making scatter plots?</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:36:27.024100</ts>
    <user>Rebekah</user>
    <text>Sending: &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#bytesBody&gt;</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:36:55.024300</ts>
    <user>Rebekah</user>
    <text>Receiving: &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#expectBytesResponse&gt;</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:39:04.025100</ts>
    <user>Iona</user>
    <text>There are several graph/charting libraries, but I find something like &lt;https://package.elm-lang.org/packages/enetsee/facet-plot-alpha/latest&gt; very appealing</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:39:25.025600</ts>
    <user>Nana</user>
    <text>&lt;@Desire&gt; terezka/line-charts and make the lines transparent :wink:</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:41:09.025700</ts>
    <user>Desire</user>
    <text>can I do that?</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:41:26.025900</ts>
    <user>Iona</user>
    <text>&lt;https://enetsee.github.io/facet-plot-alpha/&gt;</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:41:54.026100</ts>
    <user>Desire</user>
    <text>can multiple points be on the same x ?</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:42:48.026300</ts>
    <user>Nana</user>
    <text>yeah they can even be unordered</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:43:14.026500</ts>
    <user>Nana</user>
    <text>so you could make a line that goes in a circle if you wanted :stuck_out_tongue:</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:43:34.026700</ts>
    <user>Desire</user>
    <text>libraries like that really need demos</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:43:57.026900</ts>
    <user>Iona</user>
    <text>&lt;https://enetsee.github.io/facet-plot-alpha/&gt;</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:44:05.027100</ts>
    <user>Desire</user>
    <text>nice!</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:45:18.027300</ts>
    <user>Desire</user>
    <text>where is that in the readme?</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:46:12.027500</ts>
    <user>Iona</user>
    <text>it’s relatively new - it was on the elm discourse where both links are present</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:47:59.027700</ts>
    <user>Desire</user>
    <text>added an issue about that</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:48:18.027900</ts>
    <user>Desire</user>
    <text>looks promissing</text>
  </message>
  <message conversation_id="89">
    <ts>2019-01-10T07:49:08.028100</ts>
    <user>Iona</user>
    <text>Yeah - the idea behind the grammar of graphics is really nice and very customisable with a small number of composable primitives</text>
  </message>
  <message conversation_id="90">
    <ts>2019-01-10T08:24:32.028600</ts>
    <user>Agustin</user>
    <text>`gampleman/elm-visualization`</text>
  </message>
  <message conversation_id="90">
    <ts>2019-01-10T08:25:57.029200</ts>
    <user>Agustin</user>
    <text>Although for line chart I prefer terezkas package</text>
  </message>
  <message conversation_id="90">
    <ts>2019-01-10T08:33:35.029900</ts>
    <user>Earnestine</user>
    <text>if you like something a bit more 'low level', `elm-collage` is a nice choice as well...</text>
  </message>
  <message conversation_id="90">
    <ts>2019-01-10T08:38:57.030200</ts>
    <user>Agustin</user>
    <text>elm-visualuzation is quite low level, it’s basically D3 for elm</text>
  </message>
  <message conversation_id="91">
    <ts>2019-01-10T09:52:16.031100</ts>
    <user>Mazie</user>
    <text>Hello folks. Does anybody has an example of working `.circleci/config.yml` with running *elm-test*. I mean the one based on the standard `circleci/node`
image.</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T10:40:47.035600</ts>
    <user>Su</user>
    <text>Is there a way to capture the first part of a union type? e.g. suppose there is a union type:
```
type Model
  = Foo1 Bar1 Baz1
  | Foo2 Bar2 Baz2
  ...
```
you can use `case model of` and match on `Foo1 bar _ -&amp;gt;`, but I am unable to match on it like this `foo bar _ -&amp;gt;` in order to be able to construct the right foo back. I’m thinking that the way to is to wrap the `Foo` in another constructor, like:
```
type Model
  = Qux1 Foo1 Bar1 Baz1
  | Qux2 Foo2 Bar2 Baz2
  ...
```</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T10:45:26.036100</ts>
    <user>Carman</user>
    <text>I'm not sure what you mean by "construct the right foo back"?</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T10:45:56.036800</ts>
    <user>Carman</user>
    <text>Something like this?
```
case model of
  Foo1 bar _ -&amp;gt; Foo1 bar newBaz
  ...
```</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T10:54:33.039000</ts>
    <user>Su</user>
    <text>Yes, sorry, that is what I mean. I want to do this because the message I get leads to updating something in the payload e.g. `bar`, but it should not change the foo type. Right now I have a growing number of Foo1, Foo2, etc so I am casing on all of them</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T10:57:54.039500</ts>
    <user>Carman</user>
    <text>Do you have something that works and are trying to simplify? Or are you trying to something working first?</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:02:30.040600</ts>
    <user>Su</user>
    <text>I have something that works, and am trying to simplify. I will be adding more cases of Foo as I refactor more logic from the JS side</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:03:42.041100</ts>
    <user>Carman</user>
    <text>So you want a way to unwrap, do a thing to a value inside, then rewrap?</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:04:30.041700</ts>
    <user>Su</user>
    <text>Yes, that describes it exactly</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:05:11.042300</ts>
    <user>Carman</user>
    <text>How many branches will have a `bar` value? Just one? Most branches?</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:06:24.043400</ts>
    <user>Su</user>
    <text>Right now, all the branches have the `bar` value; I cannot foresee a branch without a `bar` value</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:08:18.046400</ts>
    <user>Carman</user>
    <text>One possibility is to have something like:
```
updateBar : (Bar -&amp;gt; Bar) -&amp;gt; Model -&amp;gt; Model
updateBar func model =
  case model of
    Foo1 bar other -&amp;gt; Foo1 (func bar) other
    Foo2 bar different -&amp;gt; Foo2 (func bar) different
    ...
```</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:08:52.047700</ts>
    <user>Carman</user>
    <text>This allows you to only have to do the `case` once. Now you can apply any operation to a bar inside a model</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:10:26.050800</ts>
    <user>Nana</user>
    <text>&lt;@Su&gt; one option is to make  `type alias Foo {bar : Int, baz: FooBar}`
so you put fields which the variants have in common in the outside record, and things that are different you put in the inner type</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:10:37.050900</ts>
    <user>Carman</user>
    <text>Another possibility is to change the modeling. If there's always a `Bar` + something else maybe you could have something like:
```
type alias Model = { bar : Bar, rest : ThePartThatVaries }
```</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:11:06.051300</ts>
    <user>Carman</user>
    <text>hmmm I think that's the same approach as &lt;@Nana&gt; :smile:</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:12:30.051800</ts>
    <user>Nana</user>
    <text>&lt;@Carman&gt; yup :smile:</text>
  </message>
  <message conversation_id="92">
    <ts>2019-01-10T11:20:33.054100</ts>
    <user>Su</user>
    <text>&lt;@Carman&gt; and &lt;@Nana&gt; awesome, thanks. Casing on all the variants in one place will address casing everywhere. And changing the modeling to a record with outer common structure makes a lot of sense for my model.</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T13:49:51.054600</ts>
    <user>Jospeh</user>
    <text>I implemented a little demo in elm (for a class I teach) a while back. You can see a live version here: &lt;http://paws.kettering.edu/~sturgmancohen/realtime/&gt; and the approximate code here: &lt;https://github.com/sturgman/demo-leveltank&gt;

I am curious... say I wanted to learn moder js by porting my demo. What would that entail? Where would I even start? What kind of things would I have to learn. I appreciate elm because it guided me into accomplishing the demo with little web programming experience: it told me to build a model, a way to update it, and a view. I did those three things and magically had a useful demo for class. How do I even get started doing something similar in js?</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T13:50:23.054700</ts>
    <user>Jospeh</user>
    <text>More specific questions:
I know elm uses something called a vdom... would I need something like that in js land... or could I forgo it?</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T13:54:06.054900</ts>
    <user>Lindsey</user>
    <text>there's raw js, and there's 'modern' js.  I think in most real world projects there will be libraries/frameworks involved.  you can pick one and see how its goes... react for instance?</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T13:59:38.055400</ts>
    <user>Danika</user>
    <text>Vue!</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:01:11.055600</ts>
    <user>Nana</user>
    <text>&lt;@Jospeh&gt; vdom is a technique that Elm and many modern JS frameworks uses under the hood. it's a way to enable writing functional/declarative UI code with good performance</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:01:24.055800</ts>
    <user>Nana</user>
    <text>but not something you need to concern yourself with</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:02:14.056000</ts>
    <user>Nana</user>
    <text>yeah Vue or React are good, and quite similar to Elm</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:12:38.056300</ts>
    <user>Jospeh</user>
    <text>Vue and React are programming languages? Or are they equivalent to TEA?</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:13:33.056500</ts>
    <user>Nana</user>
    <text>the are frameworks/libs for JS, but they use "functional rendering" similar to Elm</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:13:35.056700</ts>
    <user>Jospeh</user>
    <text>Never mind! I googled... make sense... so I would still use something to guide me through the process instead of just starting js from scratch...</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:13:35.056900</ts>
    <user>Rosa</user>
    <text>Vue and REact are js librarires</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:13:47.057100</ts>
    <user>Jospeh</user>
    <text>Cool... thanks all! I will check it out...</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:14:21.057300</ts>
    <user>Nana</user>
    <text>React is often combined with Redux, and Vue is often combined with Vuex. Redux/Vuex are like the Model/Update in TEA</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:15:23.057500</ts>
    <user>Jospeh</user>
    <text>wow... so many things...</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:16:24.057700</ts>
    <user>Nana</user>
    <text>you also have immutable.js, lodash, ramda, webpack, css preprocessors... it's probably more fun to stick with Elm :stuck_out_tongue:</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:17:01.057900</ts>
    <user>Jospeh</user>
    <text>Ha! probably good advice...</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:19:56.058100</ts>
    <user>Jospeh</user>
    <text>vue.js is so interesting!</text>
  </message>
  <message conversation_id="93">
    <ts>2019-01-10T14:23:30.058900</ts>
    <user>Danika</user>
    <text>Vue is awesome, and it’s developed by an Evan just like elm :3</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:37:09.061200</ts>
    <user>Shawanna</user>
    <text>Is it possible/reasonable to write a decoder adapter with Json.Decode? For example, I'm trying to write a function with type:
`replaceAlias : Decoder a -&amp;gt; (String, String) -&amp;gt; Decoder a`

That will adapt the provided decoder to work on JSON where an object field name needs to be different.</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:38:07.062300</ts>
    <user>Shawanna</user>
    <text>Or is the correct approach to define a decoder of type `Decode Value` and somehow string them together?</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:41:39.062600</ts>
    <user>Carman</user>
    <text>I'm not sure what you're trying to do?</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:42:19.064000</ts>
    <user>Shawanna</user>
    <text>It's a pretty gross workaround to get dillonkearns/elm-graphql working with a finicky backend</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:42:33.064400</ts>
    <user>Carman</user>
    <text>You have something like `Decode.field "name" Decode.string` and you'd like to change it to read from `"email"` instead?</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:42:39.064600</ts>
    <user>Shawanna</user>
    <text>yeah</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:42:49.064900</ts>
    <user>Shawanna</user>
    <text>but without actually changing the decoder</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:42:57.065200</ts>
    <user>Shawanna</user>
    <text>since it's autogenerated code</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:46:33.065800</ts>
    <user>Carman</user>
    <text>Can you define a different decoder that reads from the correct field and use that instead?</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:47:22.066400</ts>
    <user>Shawanna</user>
    <text>Unfortunately that won't work when the server-side GraphQL schema changes and we need to regenerate code</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:48:20.067300</ts>
    <user>Shawanna</user>
    <text>The required change is predictable, but the only way I can see to really handle it now is to get a string body back, do the substitution, and then continue</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:52:38.068300</ts>
    <user>Carman</user>
    <text>What about modifying the code-gen script to do a find-and-replace at the very end?</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:53:00.068600</ts>
    <user>Shawanna</user>
    <text>that would end up breaking it for other, correct, backends</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:53:40.069000</ts>
    <user>Shawanna</user>
    <text>I could do that and then just have two sets of generated code</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:57:39.072000</ts>
    <user>Carman</user>
    <text>hmmm maybe your find-and-replace could do something a bit fancier like turning `field "name" string` into `oneOf [field "name" string, field "email" string]` ?</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T14:58:49.073100</ts>
    <user>Shawanna</user>
    <text>ahh, yeah, that's a good idea</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:01:27.075600</ts>
    <user>Sade</user>
    <text>&lt;@Carman&gt; hey there! For reference, here is the issue &lt;@Shawanna&gt; is talking about: &lt;https://github.com/dillonkearns/elm-graphql/issues/106&gt;. It's a bit hard to describe concisely. But basically there is this strange clause in the GraphQL Spec that declares certain perfectly unambiguous queries to be invalid: &lt;https://facebook.github.io/graphql/draft/#example-54e3d&gt;

Some GraphQL team members were nice enough to describe the rationale, which is basically that they wanted to eliminate a case where, say, a Java GraphQL code generator would have a clash of two fields with the same name but different types. So they made them invalid.

All the relevant details are linked to in that issue. Like I said, pretty complicated so it's a bit hard to describe it concisely!</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:03:12.078300</ts>
    <user>Shawanna</user>
    <text>Hey &lt;@Sade&gt;. It turns out for my case, the only alias that really matters is the alias of the actual mutation operation, so I've got a pretty dirty way of stripping it, now I'm just looking to add it back in on completion, since I can guarantee there will never be a need for it.</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:03:36.079100</ts>
    <user>Shawanna</user>
    <text>Hence the idea of renaming a field in the decode pipeline</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:05:04.079800</ts>
    <user>Sade</user>
    <text>The unfortunate thing is that it seems like a couple of frameworks don't handle valid GraphQL queries correctly when they have valid (but unusual) field aliases like this:

```
{
  search(query: "Elm") {
    ...on Repo {
      aliasForStringId: id
    }
    ...on Issue {
      aliasForIntId: id
    }
  }
}
```</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:05:56.080600</ts>
    <user>Sade</user>
    <text>^ And by the way, this is exactly the case where you need a field alias to ensure that this query is valid (even though it would be unambiguous without the aliases). But since in practice field aliases are rarely used, some frameworks have bugs around them :confused:</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:06:16.081000</ts>
    <user>Shawanna</user>
    <text>Yeah, it's an unfortunate intersection of little used edge cases</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:07:15.082400</ts>
    <user>Shawanna</user>
    <text>AppSync handles the spec correctly (I think), it just fails to automagically trigger the subscription event unless a mutation matches exactly by name. Hence, I only need to strip that alias, then I can parse the result w/ field aliases no-problem</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:07:27.082700</ts>
    <user>Sade</user>
    <text>&amp;gt; It turns out for my case, the only alias that really matters is the alias of the actual mutation operation
&lt;@Shawanna&gt; I'm not sure I'm following, could you clarify with an example maybe?</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:07:33.082900</ts>
    <user>Shawanna</user>
    <text>Sure</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:07:55.083300</ts>
    <user>Shawanna</user>
    <text>Here's an example subscription
```
subscription {
  showStartedAt {
    showState3523593770: showState
    comedians2741155849: comedians
    time3832528868: time
    date3832528868: date
  }
}
```</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:08:32.083900</ts>
    <user>Shawanna</user>
    <text>That gets wired up in AppSync so that it automatically triggers on a specific mutation</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:08:43.084200</ts>
    <user>Shawanna</user>
    <text>So when I send a mutation like this:
```
mutation {
  startShow3832717217: startShow(date: "2019-02-02", time: "02:00 pm") {
    showState3523593770: showState
    comedians2741155849: comedians
    time3832528868: time
    date3832528868: date
  }
}
```</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:09:17.084700</ts>
    <user>Shawanna</user>
    <text>It should trigger it, but doesn't, because of the `startShow3832717217` alias</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:09:43.085600</ts>
    <user>Shawanna</user>
    <text>So, if I strip that alias, send the response, and then add it back in, everything lines up</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:10:26.087100</ts>
    <user>Shawanna</user>
    <text>I just realized I may be able to use the alias in the AppSync GraphQL annotations that specify the wiring, but I'll have to test it</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:10:34.087500</ts>
    <user>Sade</user>
    <text>Ah, okay, it's very helpful to see the specific example, thanks for that &lt;@Shawanna&gt;!

So this is actually a totally different use case then. This doesn't have to do with that corner-case of the GraphQL Spec that I was describing. This is actually something that `dillonkearns/elm-graphql` does in order to ensure that you don't have clashing fields if you query the same thing multiple times.</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:10:35.087600</ts>
    <user>Shawanna</user>
    <text>That'd certainly make things simpler</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:10:47.087800</ts>
    <user>Shawanna</user>
    <text>yes</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:10:58.088000</ts>
    <user>Shawanna</user>
    <text>The feature makes 100% sense</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:12:34.089700</ts>
    <user>Sade</user>
    <text>Yeah, totally, the aliasing is all valid according to the GraphQL spec. The only reason I bring it up is because this one is actually harder to find a way to remove. Because say you had multiple calls to `startShow` in your `dillonkearns/elm-graphql` query which each have different arguments... then you would need the hashed aliases that it uses (based on the arguments passed in).</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:12:59.090400</ts>
    <user>Sade</user>
    <text>So anyway, there's not really anything that can be done to remove that. As I describe in &lt;https://medium.com/@dillonkearns/how-elm-guides-towards-simplicity-3d34685dc33c&gt;</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:14:41.092200</ts>
    <user>Shawanna</user>
    <text>Agreed. I happen to know that, in my use-case, that won't ever be a concern, so I copied only the `Graphql.Http` part of `elm-graphql` into my project and rework `toReadyRequest` to strip the alias and capture it's name for later re-insertion</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:15:15.093000</ts>
    <user>Shawanna</user>
    <text>I'd been hoping to write something that could generally transform a `Decoder` to rename a field, but looking at the source for `Json.Decode` it doesn't seem likely</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:15:50.093900</ts>
    <user>Shawanna</user>
    <text>It's a fragile approach, unfortunately</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:16:14.094400</ts>
    <user>Sade</user>
    <text>Yeah, I wouldn't imagine that tweaking Json.Decode would be a fruitful path. But copying the code into `vendor` in your project wouldn't be too terrible. Obviously it's far from ideal, but it should do the trick.</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:16:32.095100</ts>
    <user>Shawanna</user>
    <text>In any case, I think I just found an AWS side work-around</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:16:38.095200</ts>
    <user>Sade</user>
    <text>The good news is that there's really just a single pinch point for determining the alias names. So all you need to do is tweak that any time you pull down updated source code.</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:16:48.095400</ts>
    <user>Sade</user>
    <text>Oh, good!</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:17:46.096400</ts>
    <user>Shawanna</user>
    <text>If your curious, basically in my mutation schema I just define a dummy operation:
```
type Mutation {
	startShow(date: String!, time: String!): Show!
	startShow3832717217(date: String!, time: String!): Show!
}
```

And wire the annotation to both of them, then it ends up routing things correctly</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:18:40.097300</ts>
    <user>Shawanna</user>
    <text>Since the usage pattern is simple that isn't too painful to keep track of</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:18:56.097700</ts>
    <user>Shawanna</user>
    <text>Thanks for the help &lt;@Sade&gt; and &lt;@Carman&gt;</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:21:04.097800</ts>
    <user>Sade</user>
    <text>Oh my! Well, whatever gets the job done, I suppose! :man-shrugging:  Glad you found a solution. Would you mind posting that on the Github issue when you get a chance?</text>
  </message>
  <message conversation_id="94">
    <ts>2019-01-10T15:31:29.098900</ts>
    <user>Shawanna</user>
    <text>Ahh dang, nevermind. I'm dumb and didn't consider the hashing was on data, not just keys. Ok, back to the hacky plan then</text>
  </message>
  <message conversation_id="95">
    <ts>2019-01-10T16:55:28.101500</ts>
    <user>Santina</user>
    <text>Anyone have some pointers on how I might use `elm/parser` to parse a string like "45.4.5.6", where the first number must be between 1-64, and the numbers following the first (4.5.6) are optional but the values of which must be within the range of 1-6?</text>
  </message>
  <message conversation_id="95">
    <ts>2019-01-10T17:02:38.101900</ts>
    <user>Virgie</user>
    <text>&lt;@Santina&gt; roughly

1. Decode an integer with `int`
2. use `Decode.andThen` to get access to the parsed value
3. validate

```
&lt;http://Parser.int|Parser.int&gt; |&amp;gt; Parser.andThen (\value -&amp;gt; 
    if value &amp;gt;= 1 &amp;amp;&amp;amp; value &amp;lt;= 64 then 
        Parser.loop [] dotDigit
            |&amp;gt; Parser.map (\digits -&amp;gt; (value, digits)
    else
        problem "out of range"
```

4. use `Parser.loop` to parse the optional final digits. This decoder will probably use `chompIf` a bunch.
5. put it all together</text>
  </message>
  <message conversation_id="95">
    <ts>2019-01-10T18:25:03.102100</ts>
    <user>Santina</user>
    <text>thank you!!! this is very helpful</text>
  </message>
  <message conversation_id="95">
    <ts>2019-01-10T18:26:00.102300</ts>
    <user>Santina</user>
    <text>dotDigit is a function I'd write, correct?</text>
  </message>
  <message conversation_id="96">
    <ts>2019-01-10T18:42:57.105700</ts>
    <user>Pauletta</user>
    <text>Hi folks! Anyone using parcel bundler with elm? I was really happy, everything working perfectly.
Today I run into a problem and cannot see what I am doing wrong. I created a port and it seems after compiling it's not there.
When I compile with `elm make` directly the port shows up as expected</text>
  </message>
  <message conversation_id="96">
    <ts>2019-01-10T18:48:23.106300</ts>
    <user>Earlean</user>
    <text>&lt;@Pauletta&gt; are you using that port within Elm?</text>
  </message>
  <message conversation_id="96">
    <ts>2019-01-10T18:48:52.107000</ts>
    <user>Earlean</user>
    <text>Dead code elimination will remove unused ports</text>
  </message>
  <message conversation_id="97">
    <ts>2019-01-10T19:15:41.107200</ts>
    <user>Ron</user>
    <text>A prod ready web-app developed  in 100% elm and elm-ui , try it out @ &lt;https://mhctrucksmartsearch.azurewebsites.net/&gt;</text>
  </message>
  <message conversation_id="98">
    <ts>2019-01-10T21:46:56.113400</ts>
    <user>Dee</user>
    <text>:wave: looking for a suggestion on how to decode something in json. let's say i have

```
type alias RowItem = Result String (Maybe String)
```

and my json looks like

```
{
    "userID": "123",
    "userIDError": "" 
}
```

i want to make a `RowItem` decoder that depends on both of those keys.

*examples*

```
{ "userID": "", "userIDError": "Something bad happened" }
// -&amp;gt; Err "Something bad happened"
```

```
{ "userID": "123", "userIDError": "" }
// -&amp;gt; Ok (Just "123")
```

```
{ "userID": "", "userIDError": "" }
// -&amp;gt; Ok Nothing
```

does that make sense? i was playing around with `Decode.andThen`, but i couldn't figure out how get the behavior i want.</text>
  </message>
  <message conversation_id="98">
    <ts>2019-01-10T21:52:52.114000</ts>
    <user>Dee</user>
    <text>hm, maybe `Decode.oneOf` will do the trick</text>
  </message>
  <message conversation_id="98">
    <ts>2019-01-10T23:48:02.115000</ts>
    <user>Earnest</user>
    <text>Decode the first field `andThen` decode the second field `andThen` use both values to make your final type</text>
  </message>
  <message conversation_id="98">
    <ts>2019-01-10T23:48:06.115200</ts>
    <user>Earnest</user>
    <text>&lt;@Dee&gt;</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T01:20:18.118300</ts>
    <user>Allyn</user>
    <text>Hello. I created a 3 days training to help members of my team to start with elm. One of them  is concerned with the language maturity. Have you any useful info I could give about this subject? Do we know how far we are from a 1.0 version? (until then I extracted a few numbers of the state of elm 2018 poll, about the use of elm in production)</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:00:39.118600</ts>
    <user>Lashawnda</user>
    <text>there's no established milestone for what 1.0 means for elm</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:01:27.118800</ts>
    <user>Lashawnda</user>
    <text>when we need to argue the degree to which elm is production ready we usually do so in terms of the abundance of cases where elm is successfully being used in production</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:03:11.119000</ts>
    <user>Allyn</user>
    <text>That's the way 've taken so far</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:03:54.119200</ts>
    <user>Lashawnda</user>
    <text>another data point that i like is that there are now 4 independent conferences dedicated entirely to elm in 3 different countries</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:04:13.119400</ts>
    <user>Allyn</user>
    <text>4 conferences if I'm not wrong</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:04:46.119600</ts>
    <user>Allyn</user>
    <text>Elm in the spring, Oslo, Elm Europe and Elm Conf</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:05:06.119800</ts>
    <user>Allyn</user>
    <text>Do you have any example of enterprises I could use, in addition to NoRedInk, FeatureSpace, IBM (I referred to the post they published on elm discourse)?</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:06:25.120000</ts>
    <user>Bert</user>
    <text>1.0 shouldn't really matter. React was 0.x for a few years while people were totally happy to use it in production. Then at some point they got tired of the 1.0 question and started numbering releases with x.0 instead... </text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:07:28.120200</ts>
    <user>Allyn</user>
    <text>I definitely agree with that, and it was not the point of my co-worker</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:10:32.120500</ts>
    <user>Allyn</user>
    <text>But I have a vague memoy of reading somewhere (maybe here) that elm 0.19 was near of what we could call a 1.0 release in terms of language design</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:11:19.120700</ts>
    <user>Allyn</user>
    <text>I was wondering if any concrete info could confirm this</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:12:10.120900</ts>
    <user>Allyn</user>
    <text>&lt;@Colby&gt; thanks for the suggestion of mentionning conferences, I'll do it</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:13:50.121200</ts>
    <user>Lashawnda</user>
    <text>regarding the version number, the official line is that we're not concerned right now with what a finished iteration that a 1.0 version might imply would look like, and we're just continuing to make it nicer for the foreseeable future</text>
  </message>
  <message conversation_id="99">
    <ts>2019-01-11T02:14:27.121400</ts>
    <user>Allyn</user>
    <text>I like this line :slightly_smiling_face:</text>
  </message>
  <message conversation_id="100">
    <ts>2019-01-11T02:20:40.121600</ts>
    <user>Bert</user>
    <text>As for the companies, there's this list at least: &lt;https://github.com/jah2488/elm-companies&gt;</text>
  </message>
  <message conversation_id="101">
    <ts>2019-01-11T03:32:43.122900</ts>
    <user>Dee</user>
    <text>&lt;@Earnest&gt; that worked! thanks a lot!

```
decodeRowItem : String -&amp;gt; Decode.Decoder RowItem
decodeRowItem field =
    Decode.field (field ++ "Error") Decode.string
        |&amp;gt; Decode.andThen
            (\err -&amp;gt;
                Decode.field field Decode.string
                    |&amp;gt; Decode.andThen
                        (\val -&amp;gt;
                            Decode.succeed (mapRowItem err val)
                        )
            )
```

```
&amp;gt; json = """{"userID":"", "userIDError":"Something bad happened."}"""
"{\"userID\":\"\", \"userIDError\":\"Something bad happened.\"}" : String
&amp;gt; Decode.decodeString (decodeRowItem "userID") json
Ok (Err ("Something bad happened.")) : Result Decode.Error (Result String (Maybe String))
&amp;gt; json = """{"userID":"123", "userIDError":""}"""
"{\"userID\":\"123\", \"userIDError\":\"\"}" : String
&amp;gt; Decode.decodeString (decodeRowItem "userID") json
Ok (Ok (Just "123")) : Result Decode.Error (Result String (Maybe String))
&amp;gt; json = """{"userID":"", "userIDError":""}"""
"{\"userID\":\"\", \"userIDError\":\"\"}" : String
&amp;gt; Decode.decodeString (decodeRowItem "userID") json
Ok (Ok Nothing) : Result Decode.Error (Result String (Maybe String))
```</text>
  </message>
  <message conversation_id="102">
    <ts>2019-01-11T03:54:44.124900</ts>
    <user>Nana</user>
    <text>*Poll:* Do you use a single `Id` type for everything, or do you use `User.Id` `Post.Id` `Comment.Id` etc?
Vote :+1: for single `Id` or :-1: if you use different Ids, also like to hear what you think :slightly_smiling_face:</text>
  </message>
  <message conversation_id="103">
    <ts>2019-01-11T04:09:26.125300</ts>
    <user>Selene</user>
    <text>is this still the latest version available on npm? 0.19.0-bugfix2</text>
  </message>
  <message conversation_id="103">
    <ts>2019-01-11T04:18:18.125700</ts>
    <user>Desire</user>
    <text>there is also this, which is just logos &lt;https://docs.google.com/presentation/d/1LM_W2BRs_ItT-SPDe70C10cbwhGNHGQlJ1fVnAdnRIY/edit#slide=id.g400e8d3ac3_0_208&gt;</text>
  </message>
  <message conversation_id="103">
    <ts>2019-01-11T04:27:17.126000</ts>
    <user>Pauletta</user>
    <text>Yes, I'm using it, the port is there when compiling with elm make. I think it might be the way parcel calls the compiler, I'll try to dig a bit more. Thank you!</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T05:20:49.127800</ts>
    <user>Earnestine</user>
    <text>for an elm18 project, that also needs elm dependencies from github instead of the officially hosted packages...
`elm-github-install` or `elm-groove` .. or? any recommendations?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T05:29:04.128000</ts>
    <user>Hoa</user>
    <text>I voted :-1:, but if your data comes from a traditional relational DB a single `Id` makes sense :slightly_smiling_face:</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T05:30:32.128200</ts>
    <user>Hoa</user>
    <text>While dealing with third-party API situation is less clear</text>
  </message>
  <message conversation_id="105">
    <ts>2019-01-11T06:52:15.128700</ts>
    <user>Ashton</user>
    <text>I use phantom types when I can
```
type Id a 
    = Id String
```
Not sure if thats a :thumbsup: or :thumbsdown: . Its one type `Id a`, but it comes in forms `Id User`, `Id Comment`, `Id Post`</text>
  </message>
  <message conversation_id="105">
    <ts>2019-01-11T06:52:28.129100</ts>
    <user>Danika</user>
    <text>I had no idea such things existed</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T06:57:42.129400</ts>
    <user>Hoa</user>
    <text>FYI: For 0.19 there’s &lt;https://github.com/Skinney/elm-git-install&gt;</text>
  </message>
  <message conversation_id="105">
    <ts>2019-01-11T06:59:50.129600</ts>
    <user>Nana</user>
    <text>&lt;@Ashton&gt; that's pretty cool :open_mouth: so you get the same safety but without the boilerplate</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:01:18.129900</ts>
    <user>Danika</user>
    <text>:exploding_head:</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:02:12.130500</ts>
    <user>Liza</user>
    <text>point of it today ? can you still crate some “ugly magic” like native modules ?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:02:23.130700</ts>
    <user>Danika</user>
    <text>No</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:03:07.131900</ts>
    <user>Liza</user>
    <text>for private repo only ?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:04:20.133500</ts>
    <user>Danika</user>
    <text>Yes pretty much</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:04:25.133700</ts>
    <user>Danika</user>
    <text>rip native modules :c</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:05:10.134400</ts>
    <user>Liza</user>
    <text>interesting is there any hacky way how to crate native modules, and run locally - just for learning exp</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:05:24.134600</ts>
    <user>Danika</user>
    <text>I would say not in 0.19, no</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:05:55.135100</ts>
    <user>Danika</user>
    <text>Ports are the only option now</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:06:37.135700</ts>
    <user>Liza</user>
    <text>but how i could become contributor some day, if i have no way to hack / learn ?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:07:33.136100</ts>
    <user>Danika</user>
    <text>A contributor to what?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:08:16.136700</ts>
    <user>Liza</user>
    <text>`elm-community/*` `elm-explorations/*` `elm/*`</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:12:55.138600</ts>
    <user>Elyse</user>
    <text>&lt;@Ashton&gt; could you give an example how to create such Id User for instance?
Is it something like the following?
```
userId: String -&amp;gt; Id User
userId s = Id s
```</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:13:28.139100</ts>
    <user>Danika</user>
    <text>&amp;gt; So in 0.19 only the elm-lang and elm-explorations organizations can compile and publish kernel code or effect managers. It *will not be available in applications* or other packages. I hope the history I wrote, and the posts here 303 and here 214 clarify the design trade-offs that went into this.

I believe the intention is for lang/explorations to eventually drop kernel code all together. Although presumably there is some mechanism built into the language to allow those developers to actually work on those packages… A private fork perhaps?

In any case the kernel code always lives in `src/Elm/Kernel/yourJsHere.js` so try it and see what the compiler shouts about I guess.</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:16:16.140300</ts>
    <user>Liza</user>
    <text>based on what i sow - your package also must have some magic organization stuff, an as i know `elm-lang` and `elm-explorations` is hardcoded into compielier</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:17:05.141100</ts>
    <user>Liza</user>
    <text>so - sounds like some “little” magic how to compile it, and then link it as dependency..</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:17:49.141700</ts>
    <user>Liza</user>
    <text>and looking into how JS looks… it is not really pleasure work</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:25:00.143400</ts>
    <user>Danika</user>
    <text>Although I disagree with the basic premise, the point is you’re not supposed to be writing kernel code in your elm apps. It was never a supported feature for users, just an undocumented api designed just for core. If it works for lang/explorations then there _will_ be a way to get it to work locally, but it’s not a useful or productive “learning” process because there will eventually be no kernel code left to write.</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:25:25.143900</ts>
    <user>Danika</user>
    <text>It’s not a pleasure to work, because it’s a hack until WebAssembly support is complete</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:26:06.144600</ts>
    <user>Danika</user>
    <text>There are other front end fp langs that offer upfront js support, but elm is not one of them</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:29:34.145400</ts>
    <user>Nana</user>
    <text>&lt;@Danika&gt; so it's the intention that all kernel code from elm-explorations will eventually be merged into core I guess?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:30:03.145900</ts>
    <user>Danika</user>
    <text>As I understand, the intention is there will be no kernel code at all eventually</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:39:23.146700</ts>
    <user>Agustin</user>
    <text>&lt;@Danika&gt; I believe &lt;@Liza&gt; is asking how to work on elm core locally</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:39:30.146900</ts>
    <user>Agustin</user>
    <text>Rather than publishing native JS</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:39:36.147500</ts>
    <user>Liza</user>
    <text>kind of</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:39:50.148100</ts>
    <user>Agustin</user>
    <text>I.e. if Evan ever opened up development of the language itself to others, how would you go about it</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:40:01.148700</ts>
    <user>Danika</user>
    <text>It’s a moot point because Evan won’t do that</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:40:14.149300</ts>
    <user>Agustin</user>
    <text>Well its not</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:40:19.149800</ts>
    <user>Liza</user>
    <text>&amp;gt;WebAssembly support is complete
as i remember -  there was no plans for that, and no one works on that</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:40:27.150000</ts>
    <user>Agustin</user>
    <text>Because explorations are for precisely this reason</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:40:57.150600</ts>
    <user>Agustin</user>
    <text>Even if Evan then only takes the results as a guideline for his own dev of a library for core</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:41:15.150900</ts>
    <user>Agustin</user>
    <text>And at some point, someone other than Evan must be allowed to work on core</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:41:21.151100</ts>
    <user>Agustin</user>
    <text>Simply to remove the bus factor</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:41:35.151400</ts>
    <user>Agustin</user>
    <text>Unless we somehow transpile Evan into Elm itself… :thinking_face:</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:41:59.151700</ts>
    <user>Agustin</user>
    <text>Anyone have a USB to Evan adaptor?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:44:06.155100</ts>
    <user>Agustin</user>
    <text>On a less silly note, you can fork elm, so you should be able to work on it that way?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:44:06.155200</ts>
    <user>Liza</user>
    <text>and there is also other part of “elm” that is compiler - that stuff lives in haskell, so that can be “easy”  compiled by anyone who knows how haskell tooling works (btw kind of readable / hackable), but to work with “native modules” for people like me (more than 15y exp in JS) is kind of challenge</text>
  </message>
  <message conversation_id="106">
    <ts>2019-01-11T07:44:32.155400</ts>
    <user>Allyn</user>
    <text>Thank you &lt;@Desire&gt; :+1:</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:45:05.156100</ts>
    <user>Danika</user>
    <text>I wholeheartedly agree with you that there _should_ be some mechanism for playing with kernel code if not for the only reason of being able to contribute to existing projects</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:46:01.157500</ts>
    <user>Danika</user>
    <text>but there isn’t and it is a design choice of the language to not have that</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:46:13.158000</ts>
    <user>Liza</user>
    <text>for now “easiest way” looks like just recompile compilier  and commenting out hardcoded stuff will do job</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:46:21.158200</ts>
    <user>Danika</user>
    <text>Indeed</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:46:24.158400</ts>
    <user>Agustin</user>
    <text>:+1:</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:46:30.158700</ts>
    <user>Danika</user>
    <text>Or just get blessed by Evan</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:46:48.159100</ts>
    <user>Agustin</user>
    <text>Just be aware that no native code is going to to be accepted into packages going forward and hack away :stuck_out_tongue:</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:47:14.159800</ts>
    <user>Danika</user>
    <text>Or just fork it ^^</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:47:23.160000</ts>
    <user>Liza</user>
    <text>it will not work..</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:47:42.160500</ts>
    <user>Liza</user>
    <text>You cannot run forked libs (if they contain native code)..</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:48:09.160900</ts>
    <user>Liza</user>
    <text>or i have no clue how to do that.</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:49:06.161900</ts>
    <user>Danika</user>
    <text>I meant fork the language</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:49:09.162100</ts>
    <user>Liza</user>
    <text>and about WASM - that is feature that i waiting mostly (as selling point of elm) - but as i understand for next year there is no plans for that - so no way</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:49:19.162400</ts>
    <user>Danika</user>
    <text>There are no immediate wasm plans</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:49:35.162900</ts>
    <user>Danika</user>
    <text>because wasm is still a working draft</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:51:17.163600</ts>
    <user>Liza</user>
    <text>and other part is that JS is part of ELM</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:51:21.163700</ts>
    <user>Danika</user>
    <text>from evans post on removing native code in 0.19:

&amp;gt; Since then, I have come to believe that there is no amount of documentation or communication that will really be effective. If the path exists, people will walk it. And with WebAssembly on the horizon, this is a door that is going to close on us anyway.</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:55:02.163800</ts>
    <user>Sharon</user>
    <text>I may be overcomplicating it, but when I used that kind of ID type my code looked like this:

```
type ID a
    = ID String


type CollectionType
    = CollectionType


type alias CollectionID =
    ID CollectionType


type alias Collection =
    { uuid : CollectionID
    , name : String
    }


id : a -&amp;gt; String -&amp;gt; ID a
id phantom uuid =
    ID uuid


collectionID : String -&amp;gt; ID CollectionType
collectionID =
    id CollectionType
```</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:58:04.165400</ts>
    <user>Liza</user>
    <text>impo main problem with wasm is that you need to rewrite compiler again, to be able map it to new “target”, and rework all JS mappings (have no clue how much of that was done by migration to 0.19)</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T07:58:58.166600</ts>
    <user>Liza</user>
    <text>for me additional target as wasm would be biggest selling point at work (in company where is 100+ js-devs)</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:00:09.167600</ts>
    <user>Liza</user>
    <text>but till that `elm` looks (for other devs) like toy where you have no controll, and “immutable and FP is slow by default”</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:26:32.170900</ts>
    <user>Desire</user>
    <text>well you have no control over things you should not control</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:27:31.172000</ts>
    <user>Desire</user>
    <text>is your js code able to change your bios?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:28:14.172300</ts>
    <user>Agustin</user>
    <text>Depends if your on a chromebook or not :drum_with_drumsticks:</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:28:23.172500</ts>
    <user>Danika</user>
    <text>cros represent! </text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:29:00.172900</ts>
    <user>Desire</user>
    <text>oh snap :smile:</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:31:08.173400</ts>
    <user>Danika</user>
    <text>Or NodeOS (yes thats a thing)</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:32:14.173700</ts>
    <user>Agustin</user>
    <text>Just say noooooo to node</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:34:10.174000</ts>
    <user>Danika</user>
    <text>&lt;https://github.com/NodeOS/NodeOS&gt;</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:34:39.174700</ts>
    <user>Danika</user>
    <text>On a more topical note, I want to start working on an Elm package. Do i need to setup anything differently/specifically?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:55:26.175700</ts>
    <user>Desire</user>
    <text>just make sure you generate an elm.json for a package</text>
  </message>
  <message conversation_id="107">
    <ts>2019-01-11T08:55:43.176200</ts>
    <user>Desire</user>
    <text>the formats are different</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:56:33.177200</ts>
    <user>Desire</user>
    <text>and read the both package best practices from evan and dillon</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:57:07.177400</ts>
    <user>Danika</user>
    <text>&lt;https://github.com/dillonkearns/idiomatic-elm-package-guide&gt; this yes?</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:57:29.177800</ts>
    <user>Desire</user>
    <text>yes and &lt;https://package.elm-lang.org/help/design-guidelines&gt;</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T08:57:56.178100</ts>
    <user>Danika</user>
    <text>Aye I’ve read those. Tah</text>
  </message>
  <message conversation_id="108">
    <ts>2019-01-11T10:53:48.179800</ts>
    <user>Todd</user>
    <text>I have a problem: I have a port that works just fine when the Elm app has already been running for a short bit, but the port simply doesn't get called when I run it during initialization (well, not exactly the init function, but very shortly after)</text>
  </message>
  <message conversation_id="108">
    <ts>2019-01-11T10:53:54.179900</ts>
    <user>Todd</user>
    <text>Hey everyone</text>
  </message>
  <message conversation_id="108">
    <ts>2019-01-11T10:54:27.180400</ts>
    <user>Todd</user>
    <text>I tested it and the port itself works, but when it should be run after startup, nothing happens</text>
  </message>
  <message conversation_id="109">
    <ts>2019-01-11T11:44:54.180700</ts>
    <user>Rosa</user>
    <text>fwiw we use elm in prod. ~50k loc</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T13:23:00.181200</ts>
    <user>Ashton</user>
    <text>Yeah &lt;@Cora&gt;, you just lock in certain functions to certain types by making the `a` in the type signature what every you want. But you can also do things like lock in consistency. Like for example:
```
getById : Id a -&amp;gt; Dict String a -&amp;gt; Maybe a
getById id dict =
    Dict (Id.toString id) dict
```
You can use `getById` for any `a`, but it _must_ be the same `a` as the one in the `Id a`.</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T13:24:51.181500</ts>
    <user>Ashton</user>
    <text>Does that make sense? All you have to do is make the type signature `Id User` and is it an `Id User`, and thereafter it cannot be anything else. All it takes is making the type signature that to start with, and then from then on out through out your program theres type safety.</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:13:08.184600</ts>
    <user>Gale</user>
    <text>Do people usually end up using webpack with Elm in production stacks or are elm make and reactor enough? Just asking because I'm upgrading one of mine to 0.19 and seems like elm-asset-loader maybe isn't compatible - so I'm wondering if it's wise to ditch webpack at this point - or start working round/ with what I have to get my scripts working again.</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T14:14:08.184700</ts>
    <user>Nana</user>
    <text>&lt;@Ashton&gt; although if `User` is a type alias you are then relying on duck typing :thinking_face: probably a pretty silly concern though</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:15:45.185000</ts>
    <user>Agustin</user>
    <text>Im using webpack</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:15:51.185200</ts>
    <user>Agustin</user>
    <text>And I’m not the only one</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:16:04.185600</ts>
    <user>Agustin</user>
    <text>But its not used “in production” its just building for netlify in my case</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:17:58.186800</ts>
    <user>Gale</user>
    <text>Yeah - seems like it might be the default - but I'm wondering if build/ compile with webpack is always necessary with teams using Elm or if it's just a habit.</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:18:45.187800</ts>
    <user>Agustin</user>
    <text>Its by no means a default!</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:19:00.188500</ts>
    <user>Agustin</user>
    <text>Remember that elm doesn’t minify or bundle assets</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:19:02.188800</ts>
    <user>Gale</user>
    <text>I'm unsure whether Elm tooling is designed (or aimed towards) being able to support production project builds on it's own or whether it is assumed that people will use webpack.</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:19:12.189000</ts>
    <user>Nana</user>
    <text>and things like your `getById` example probably provide more safety than what you lose from the duck typing</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:20:55.191100</ts>
    <user>Gale</user>
    <text>So in my upgrade I'm coming across people saying optimize won't work with uglify and things like that. I guess I'm trying to find out what the 'standard/ preferred' method is for bundling assets mostly at this point. My app is small and I'm not too bothered with the minify part.</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:23:46.192400</ts>
    <user>Gale</user>
    <text>I had a thought that webpack was maybe over-complicating things for my project (since it's the last hurdle for my 0.19 upgrade). &lt;@Agustin&gt; Thanks for your comments.</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:31:46.192800</ts>
    <user>Agustin</user>
    <text>FWIW Webpack was not a blocker in my 0.18 -&amp;gt; 0.19 upgrade at all</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:31:52.193000</ts>
    <user>Agustin</user>
    <text>It’s quite a minimal webpack config tho</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:32:21.193500</ts>
    <user>Timika</user>
    <text>Parcel is awesome! We use it in production too. :)</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:33:58.194200</ts>
    <user>Gale</user>
    <text>&lt;@Agustin&gt; I bet it's just my original webpack config being bad.</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:35:03.194700</ts>
    <user>Gale</user>
    <text>&lt;@Timika&gt; Parcel looks neat. I hadn't heard of it before.</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T14:37:18.194900</ts>
    <user>Nana</user>
    <text>oh actually writing:
```
type alias User = 
    { id: Id User
    , name: String
    }
```
isn't allowed anyway, as it creates an infinitely recursive type :stuck_out_tongue:
so are you doing like this then?
```
type User
    = User
        { id : Id User
        , name : String
        }
```</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T14:47:07.195400</ts>
    <user>Nana</user>
    <text>maybe &lt;@Sharon&gt;'s example is actually the most convenient then, since you don't need to unwrap `User`</text>
  </message>
  <message conversation_id="110">
    <ts>2019-01-11T14:54:44.198500</ts>
    <user>Gale</user>
    <text>Thanks both ^^ since &lt;@Agustin&gt; said webpack shouldn't be causing me an issue... I nuked my node and stuff dirs - and ta da! (a lovely white screen) - but also successful build and compile - so I think I'm making progress.</text>
  </message>
  <message conversation_id="104">
    <ts>2019-01-11T15:56:39.198700</ts>
    <user>Ashton</user>
    <text>Yeah Ive run into that recursive type problem. Ive never done your solution &lt;@Nana&gt;, but it seems like a good one. Instead I just try not to put ids _inside_ the thing they are an `Id` of, and instead use lots of `(Id User, User)`. Another, however less ideal solution Ive done is:
```
type UserId = UserId

type alis User =
    { id : Id UserId }
```
This also maintains consistency, even if its not using the `User` type.</text>
  </message>
  <message conversation_id="111">
    <ts>2019-01-11T18:55:54.201900</ts>
    <user>Kimiko</user>
    <text>If you try to pattern match on an enumerated type but don't cover all cases, you get a compiler error. Is there a way to do something similar for record types, where you get an error if you don't name every field?</text>
  </message>
  <message conversation_id="111">
    <ts>2019-01-11T19:04:25.204300</ts>
    <user>Daria</user>
    <text>Could someone shed some light on what exactly happens when one calls `var app = Elm.Main.init({ flags: flags });` ? We ran into some issues where other JS components initialised before elm were misbehaving, which was fixed simply by moving them to after Elm.init</text>
  </message>
  <message conversation_id="111">
    <ts>2019-01-11T19:09:25.205900</ts>
    <user>Augustus</user>
    <text>It kicks off the program and does the initial render and everything. Were the other JS components using things elm needs to render? </text>
  </message>
  <message conversation_id="112">
    <ts>2019-01-11T19:32:33.206500</ts>
    <user>Earlean</user>
    <text>What happens depends on whether you're using `Browser.element` or `Browser.application`</text>
  </message>
  <message conversation_id="112">
    <ts>2019-01-11T19:32:57.206700</ts>
    <user>Earlean</user>
    <text>`Browser.element` will mount the Elm app on a given DOM node.</text>
  </message>
  <message conversation_id="112">
    <ts>2019-01-11T19:34:25.206900</ts>
    <user>Earlean</user>
    <text>`Browser.application` will mount on the `body` DOM node removing any existing child nodes</text>
  </message>
  <message conversation_id="112">
    <ts>2019-01-11T19:44:19.207100</ts>
    <user>Daria</user>
    <text>&lt;@Earlean&gt; thanks, we’re using Browser.application and indeed it seems clearing the child nodes was the culprit I was looking for as the js elements used “document.body.appendChild(script);” internally</text>
  </message>
  <message conversation_id="112">
    <ts>2019-01-11T20:49:21.207400</ts>
    <user>Grisel</user>
    <text>elm-app install elm-lang/svg
-- OLD DEPENDENCIES --------------------------------------------------- elm.json

The following packages do not work with Elm 0.19.0 right now:

    elm-lang/svg

This may be because it is not upgraded yet. It may be because a better solution
came along, so there was no need to upgrade it. Etc. *Try asking around on Slack*
to learn more about the topic.

Note: Whatever the case, please be kind to the relevant package authors! Having
friendly interactions with users is great motivation, and conversely, getting
berated by strangers on the internet sucks your soul dry. Furthermore, package
authors are humans with families, friends, jobs, vacations, responsibilities,
goals, etc. They face obstacles outside of their technical work you will never
know about, so please assume the best and try to be patient and supportive!</text>
  </message>
  <message conversation_id="113">
    <ts>2019-01-11T20:51:06.208400</ts>
    <user>Grisel</user>
    <text>OK - anyone come across this issue before? Knows answer?</text>
  </message>
  <message conversation_id="113">
    <ts>2019-01-11T21:00:25.208700</ts>
    <user>Grisel</user>
    <text>Worked it out.</text>
  </message>
  <message conversation_id="113">
    <ts>2019-01-11T21:01:26.209500</ts>
    <user>Grisel</user>
    <text>&lt;https://github.com/elm-lang/svg&gt; aka “elm-app install elm/svg” is now showing: “This repository has been archived by the owner. It is now read-only.” with a README.md saying “Repo Moved to elm/svg”</text>
  </message>
  <message conversation_id="113">
    <ts>2019-01-11T21:08:00.210400</ts>
    <user>Grisel</user>
    <text>So.. the new location is &lt;https://github.com/elm/svg&gt; and the install instruction elm-app install elm/svg worked.</text>
  </message>
  <message conversation_id="113">
    <ts>2019-01-11T21:08:07.210600</ts>
    <user>Grisel</user>
    <text>Here is my plan:

  Add:
    elm/svg    1.0.1

Would you like me to update your elm.json accordingly? [Y/n]: Y
Starting downloads...

  ● elm/svg 1.0.1

Dependencies ready!</text>
  </message>
  <message conversation_id="113">
    <ts>2019-01-11T21:08:09.210800</ts>
    <user>Grisel</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="113">
    <ts>2019-01-11T21:08:19.211100</ts>
    <user>Grisel</user>
    <text>Hope it helps someone else.</text>
  </message>
  <message conversation_id="114">
    <ts>2019-01-12T05:08:18.212500</ts>
    <user>Danika</user>
    <text>For future reference elm-lang/* is 0.18 and elm/* is 0.19 :) </text>
  </message>
  <message conversation_id="114">
    <ts>2019-01-12T05:08:32.212900</ts>
    <user>Danika</user>
    <text>Oops, accidental bold</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T06:56:10.213200</ts>
    <user>Yang</user>
    <text>how to i get a mouse up event that works on the hole document</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T06:56:19.213500</ts>
    <user>Yang</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Events#onMouseUp&gt;</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T06:56:27.213800</ts>
    <user>Yang</user>
    <text>is this working just on the element like this:</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T06:56:33.214000</ts>
    <user>Yang</user>
    <text>&lt;https://www.w3schools.com/jsref/event_onmouseup.asp&gt;</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T06:56:40.214300</ts>
    <user>Yang</user>
    <text>or is binded to window?</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T06:56:52.214500</ts>
    <user>Yang</user>
    <text>is for a drag and drop functionality</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T06:57:03.214900</ts>
    <user>Yang</user>
    <text>and i need to catch a mouse up anywere on the screen</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T06:57:37.215300</ts>
    <user>Yang</user>
    <text>any insight ? thansk :slightly_smiling_face:</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T06:58:58.215700</ts>
    <user>Lynne</user>
    <text>`Browser.Events.onMouseUp` is definitely what you are after</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T07:02:23.216000</ts>
    <user>Yang</user>
    <text>perfect, thanks :smile: :hugging_face:</text>
  </message>
  <message conversation_id="116">
    <ts>2019-01-12T08:18:46.216100</ts>
    <user>Pauletta</user>
    <text>Not surprisingly it was my fault :slightly_smiling_face:</text>
  </message>
  <message conversation_id="116">
    <ts>2019-01-12T10:11:32.216300</ts>
    <user>Allyn</user>
    <text>For which company do you work &lt;@Rosa&gt;?</text>
  </message>
  <message conversation_id="117">
    <ts>2019-01-12T12:00:05.217400</ts>
    <user>Earnestine</user>
    <text>is there an elm implementation of elm-format? Looks like not...</text>
  </message>
  <message conversation_id="115">
    <ts>2019-01-12T12:56:28.217700</ts>
    <user>Lynne</user>
    <text>It is written in Haskell</text>
  </message>
  <message conversation_id="118">
    <ts>2019-01-12T13:03:35.218500</ts>
    <user>Geralyn</user>
    <text>Hello, unfortunaltely, nobody answered in the beginners channel, so I'll try to ask here. Does anybody know export/import debug history working in 0.19 or not? I'm getting 'Looks like this history file is corrupt. I cannot understand it.' when I try to import my exported history.</text>
  </message>
  <message conversation_id="118">
    <ts>2019-01-12T13:28:13.218900</ts>
    <user>Elyse</user>
    <text>It wasn't working when 0.19 was released, and there have been no patches since.</text>
  </message>
  <message conversation_id="118">
    <ts>2019-01-12T13:35:13.219100</ts>
    <user>Geralyn</user>
    <text>Ok./ thank you</text>
  </message>
  <message conversation_id="119">
    <ts>2019-01-12T15:49:19.220200</ts>
    <user>Earnestine</user>
    <text>re-export of types works (via a type alias), re-export of their constructors does not work... right? or do I miss something?</text>
  </message>
  <message conversation_id="120">
    <ts>2019-01-12T16:11:49.220600</ts>
    <user>Bert</user>
    <text>That is correct </text>
  </message>
  <message conversation_id="119">
    <ts>2019-01-12T16:18:46.220900</ts>
    <user>Earnestine</user>
    <text>alright, thx!</text>
  </message>
  <message conversation_id="121">
    <ts>2019-01-12T18:03:04.226400</ts>
    <user>Forrest</user>
    <text>Hello! I am building a little app that visualizes common list transformations like map, filter, and fold/reduce.

&lt;https://github.com/tmikeschu/see-fp&gt;

I am trying to figure out how to model the different functions that could be passed to, for example, a map function.

I started off with mapping `increment` over a list of numbers, but I want to add `isEven` to the mix now, and all of my `Int -&amp;gt; Int` signatures need to become more flexible obviously.

At a high level, I want to have some signature like

```
transform : a -&amp;gt; Operation (a -&amp;gt; b) -&amp;gt; b
```

I think my main challenge is figuring out how to model `Operation`. I feel like it should be something like:

```
type Operation
    = Increment (Int -&amp;gt; Int)
    | Decrement (Int -&amp;gt; Int)
    | IsEven (Int -&amp;gt; Bool)
```

But I’d love to get some advice about modeling this in a flexible way.

Thanks!</text>
  </message>
  <message conversation_id="121">
    <ts>2019-01-12T18:12:07.226700</ts>
    <user>Timika</user>
    <text>Cool project! :slightly_smiling_face: I am wondering why for example `Increment` carries a function around with it. Isn’t there only one possible implementation for that anyway? It feels to me that the actual function should not be part of the `Operation` type.

I think the core issue is the fact that your functions can be any unary function which makes it very hard to model in a custom type. It could be that it is impossible to model this generically in Elm.

`transform` is basically `|&amp;gt;`, which in turn is just function application. With that in mind, I am wondering if an operation type is necessary at all, they are just functions.

This is just me rambling, but maybe there is something useful in there somewhere. Also: _“Not Penny’s Boat_“ :wink:</text>
  </message>
  <message conversation_id="121">
    <ts>2019-01-12T18:19:24.230200</ts>
    <user>Earnest</user>
    <text>&lt;@Forrest&gt; Do you mean something like this?
```
type Transformation a b
  = Mapable (a -&amp;gt; b)
  | Filterable (a -&amp;gt; Maybe b)
  | Accumulatation b (a -&amp;gt; b -&amp;gt; b)

increment : Transformation Int Int
increment = Mapable (\x -&amp;gt; x + 1)
```</text>
  </message>
  <message conversation_id="121">
    <ts>2019-01-12T18:25:30.231800</ts>
    <user>Earnest</user>
    <text>Not quite sure what your end goal is though. Do you just want a type for users to select different map actions?</text>
  </message>
  <message conversation_id="121">
    <ts>2019-01-12T18:26:30.233500</ts>
    <user>Timika</user>
    <text>I understood it as the desire to put all operations into one `List` any be able to apply them somehow generically. Could be wrong though.</text>
  </message>
  <message conversation_id="121">
    <ts>2019-01-12T20:31:56.234100</ts>
    <user>Earnest</user>
    <text>&lt;@Forrest&gt; You figure out what you needed?</text>
  </message>
  <message conversation_id="121">
    <ts>2019-01-12T23:34:34.238800</ts>
    <user>Forrest</user>
    <text>Yeah that actually makes a lot of sense!

The whole time I’ve felt weird about trying to model the core of lambda calc as a type haha. It’s great to hear another voice say that’s overkill.

The high level is to try to represent the model in a generic way. Given that I’ll have a variety of input and output types, do you see a way that doesn’t involve separate list types on the model for each output type?</text>
  </message>
  <message conversation_id="121">
    <ts>2019-01-12T23:39:31.242700</ts>
    <user>Forrest</user>
    <text>Thanks for the feedback! &lt;@Timika&gt; picked up what I was putting down. I’m going for representing the selected list and function, whether a -&amp;gt; Bool, a -&amp;gt; b, or other, as generically as possible.

So whether a user picks filter names by length or map cats to humans, the model and updates would be similar if not the same. </text>
  </message>
  <message conversation_id="122">
    <ts>2019-01-13T00:44:37.243600</ts>
    <user>Dee</user>
    <text>does anyone have a good (and up-to-date) example of url routing in an elm program? basically, what would normally go in the *Synthesis* section of &lt;https://guide.elm-lang.org/webapps/url_parsing.html&gt;</text>
  </message>
  <message conversation_id="122">
    <ts>2019-01-13T00:45:57.244900</ts>
    <user>Dee</user>
    <text>currently mulling questions like, should i have separate entries for the current route AND possible data extracted from said route in my model record</text>
  </message>
  <message conversation_id="123">
    <ts>2019-01-13T02:20:15.245300</ts>
    <user>Earlean</user>
    <text>These kind of decisions tend to be application specific. But always try to only store a value once.</text>
  </message>
  <message conversation_id="121">
    <ts>2019-01-13T04:54:32.252200</ts>
    <user>Timika</user>
    <text>I thought about this and I think there is a solution from a different angle. If all your types are finite you could make a custom type that wraps all possible types in your app. ‘type SeeFpType = IntValue Int | CatValue Cat | ...’. Your functions can then be functions from SeeFpType to SeeFpType. It makes implementation of those functions more complicated as you have to check within those functions if you got the correct input type and handle mismatchs yourself. 

But it would allow you to have a List of all functions, because their types are the same. Maybe it’s a route you can go?</text>
  </message>
  <message conversation_id="122">
    <ts>2019-01-13T05:07:43.252400</ts>
    <user>Lynne</user>
    <text>Custom types suit well to store both route and data. Given examples from the section "Examples 3" on the page you mentioned the simplest example could be:
```
type Route
    = ElmBasics
    | ElmMaybe
    | ElmList (Maybe String)
```
If you'd want go wilder you could replace `Maybe String` with another type denoting concrete place on the page to show when it is loaded.
It allows to store route and relevant data in single place  making your `update` less error-prone, your model thinner, and `view` easier to judge on. And you also get a feature of making impossible state irrepresentable in contrast to separate entries in your model record.</text>
  </message>
  <message conversation_id="124">
    <ts>2019-01-13T09:42:27.253100</ts>
    <user>Yang</user>
    <text>how to achive a mouseHover text underline in elm-ui?

i have:  `mouseOver [ Font.underline ]`

but it doesnt compile

since Font.underline is not a Decoration

&lt;https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/Element#mouseOver&gt;

&lt;https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/Element-Font#underline&gt;

how to combine this 2?

thanks ::D</text>
  </message>
  <message conversation_id="124">
    <ts>2019-01-13T09:46:20.253500</ts>
    <user>Lynne</user>
    <text>&lt;@Yang&gt; You will probably get more help if you ask in &lt;#C4F9NBLR1|elm-ui&gt;</text>
  </message>
  <message conversation_id="124">
    <ts>2019-01-13T09:46:48.254100</ts>
    <user>Yang</user>
    <text>already did that thanks, nowbody is around there for now.. though i have more luck here.</text>
  </message>
  <message conversation_id="124">
    <ts>2019-01-13T09:46:55.254300</ts>
    <user>Yang</user>
    <text>same for Font.bold</text>
  </message>
  <message conversation_id="124">
    <ts>2019-01-13T09:47:07.254700</ts>
    <user>Yang</user>
    <text>i want the font to be bold under mouse hover.</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:37:09.256100</ts>
    <user>Deann</user>
    <text>Anybody know the date for US elm-conf 2019?  Will it be in St. Louis again?</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:38:53.257100</ts>
    <user>Carman</user>
    <text>Historically it's always been a pre-conf event that's connected with StrangeLoop</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:39:24.257700</ts>
    <user>Carman</user>
    <text>Based on their website, StrangeLoop will occur September 12-14 this year in St. Louis</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:39:50.258300</ts>
    <user>Carman</user>
    <text>So going by previous years I'd guess that elm-conf would happen on ~September 11~</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:40:44.259200</ts>
    <user>Carman</user>
    <text>just checked the fine print on &lt;https://www.thestrangeloop.com/&gt;, pre-conf events occur on Sept 12 :slightly_smiling_face:</text>
  </message>
  <message conversation_id="126">
    <ts>2019-01-13T12:50:05.262300</ts>
    <user>Danika</user>
    <text>Hey peeps, could someone help me get my head around opaque types and extensible records. I have the following types:
```
type alias Node a =
    { a | connections : List Connection, id : NodeID, type_ : NodeType }

type alias OscillatorNode 
  = Node { detune : Float, frequency : Float, waveform : Waveform }
```
and this function:
```
connect : Node a -&amp;gt; String -&amp;gt; Node b -&amp;gt; Connection
connect a dest b =
  ( a.id, b.id, dest )
```
This is all fine and dandy but I'd like both Node and OscillatorNode to be opaque types as I don't want anyone creating Nodes directly and I already supply a creator function for oscillators. I think I'm just being silly but how do I access the `id` field when the type is opaque?</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:51:03.262600</ts>
    <user>Virgie</user>
    <text>a pattern match. so
```
case node of
    { id } -&amp;gt; ...
```</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:51:45.263100</ts>
    <user>Virgie</user>
    <text>that would be `Node { id }` if it's wrapped</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:52:28.263500</ts>
    <user>Danika</user>
    <text>Oh really? OK cheers, I'll give that a go.</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:57:05.266700</ts>
    <user>Carman</user>
    <text>Looking at your example, the extensible record + `type_` field is a bit of a smell pointing out that a custom type may be a better modeling of your domain.</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:57:07.266900</ts>
    <user>Carman</user>
    <text>For example something like:
```
type Node
  = OscillatorNode { connections : List Connection, id : NodeId, detune : Float, frequency : Float, waveform : Float }
  | OtherTypeOfNode ...
  | ...
```</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:57:46.268100</ts>
    <user>Carman</user>
    <text>This allows you to have different node types, keep your type opaque, and vary the fields present on each node type</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:58:11.268800</ts>
    <user>Carman</user>
    <text>To make this nicer to use, you may want to alias the record that gets wrapped</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:58:35.269100</ts>
    <user>Danika</user>
    <text>Yes I was considering doing something like that. It seemed redundant when all nodes share some common fields, and (I think) allowed for user-defined nodes</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T12:59:30.270200</ts>
    <user>Danika</user>
    <text>I think I probably agree on `type_` being less than ideal (and probably makes my whole "user defined nodes" thing break...)</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:00:31.271400</ts>
    <user>Danika</user>
    <text>Using a type like that also means I have to `case` over all the options and perform the exact same operation when I want to have generic `Node` functions, no?</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:00:51.271800</ts>
    <user>Carman</user>
    <text>correct</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:01:49.272900</ts>
    <user>Carman</user>
    <text>A variation that extracts the common fields could look like this:

```
type Node = Node { connections: List Connection, id : NodeId, details : NodeDetails }

type NodeDetails
  = OscillatorDetails { detune : Float, frequency : Float, waveform : Float }
  | OtherDetails { .. }
  | ...
```</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:04:07.273400</ts>
    <user>Danika</user>
    <text>Hmm looks like I have some options to consider</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:05:24.274200</ts>
    <user>Carman</user>
    <text>In my experience, you're better off trying to compose data than trying to fake an inheritance hierarchy via extensible records :slightly_smiling_face:</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:07:20.275600</ts>
    <user>Danika</user>
    <text>for some extra context:

```
createOscillatorNode : NodeID -&amp;gt; OscillatorNode
createOscillatorNode id = {
    connections = [],
    id = id,
    type_ = Oscillator,
    detune = 0.0,
    frequency = 440.0,
    waveform = Sine
  }

setDetune : Float -&amp;gt; OscillatorNode -&amp;gt; OscillatorNode
setDetune val osc =
   { osc | detune = val }

setFrequency ...
```
which as it stands means I can create oscillator nodes:
```
createOscillatorNode (stringToNodeID "myOsc")
    |&amp;gt; setFrequency 220.0
    |&amp;gt; ...
```</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:07:28.275800</ts>
    <user>Danika</user>
    <text>I'd like to preserve this</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:07:49.276100</ts>
    <user>Danika</user>
    <text>And I think that also breaks down if I use some sort of Node union type</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:12:16.277900</ts>
    <user>Danika</user>
    <text>I don't really feel like I'm trying (nor do i want) to hack some sort of OOP solution. But it does strongly seem like an extensible record is the appropriate thing for the `Node` :thinking_face:  I shall do some more thinkign with your suggestions in mind</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:13:01.278200</ts>
    <user>Carman</user>
    <text>Do you have any functions that are generic to any kind of node?</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:13:35.278900</ts>
    <user>Carman</user>
    <text>because if you don't you could just have a bunch of concrete record aliases</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:13:40.279000</ts>
    <user>Danika</user>
    <text>`connect` connects two generic nodes together</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T13:41:14.280700</ts>
    <user>Danika</user>
    <text>I think I came up with a solution</text>
  </message>
  <message conversation_id="127">
    <ts>2019-01-13T14:10:49.283700</ts>
    <user>Forrest</user>
    <text>Interesting! Thank you. I’ll give that a look!

I’ll let you know if I find any other solutions. Thanks!</text>
  </message>
  <message conversation_id="128">
    <ts>2019-01-13T16:34:18.284800</ts>
    <user>Jae</user>
    <text>Does there exist something like json decode pipeline but for `elm/bytes`?</text>
  </message>
  <message conversation_id="125">
    <ts>2019-01-13T18:17:09.284900</ts>
    <user>Virgie</user>
    <text>you can define the `andMap` function (see &lt;https://github.com/folkertdev/elm-cff/blob/master/src/Decode/Extra.elm#L33&gt;) and then use that to make pipelines (like here &lt;https://github.com/folkertdev/elm-cff/blob/master/src/CompactFontFormat.elm#L72&gt;)</text>
  </message>
  <message conversation_id="129">
    <ts>2019-01-13T20:04:55.285400</ts>
    <user>Grisel</user>
    <text>Does anyone do an ELM debugging service</text>
  </message>
  <message conversation_id="129">
    <ts>2019-01-13T20:05:05.285700</ts>
    <user>Grisel</user>
    <text>Can pay Bitcoin Cash.</text>
  </message>
  <message conversation_id="129">
    <ts>2019-01-13T20:05:23.286100</ts>
    <user>Grisel</user>
    <text>My implementation of SVG is broken… don’t see why</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:29:28.287500</ts>
    <user>Raymonde</user>
    <text>Hi folks, I got `String.fromFloat (4.1 - 1)` as `"3.0999999999999996"`, how can I got `"3.1"` as expected?</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:45:49.289200</ts>
    <user>Lynne</user>
    <text>This is not trivial. Basically you need a function rounding to N digits after comma (in your case 1 digit).</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:45:56.289400</ts>
    <user>Lynne</user>
    <text>This is an example: `String.fromFloat &amp;lt;| (toFloat &amp;lt;| ceiling ((4.1 - 1) * 10.0)) / 10.0`</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:46:14.289600</ts>
    <user>Lynne</user>
    <text>You may need to look for some library already defining such functions</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:50:13.289800</ts>
    <user>Raymonde</user>
    <text>&lt;@Lynne&gt; The problem is the number input from user, so the digits after comma is arbitrary</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:58:22.290000</ts>
    <user>Lynne</user>
    <text>I understand, just replace `4.1` with whatever you parse from that input then</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:59:12.290200</ts>
    <user>Lynne</user>
    <text>The most crucial part here is multiplying by 10^N, ceiling and then dividing by 10^N where N is number of digits after comma</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:59:37.290400</ts>
    <user>Lynne</user>
    <text>Are you saying that you don't know exactly how many digits after comma you want?</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:59:46.290600</ts>
    <user>Raymonde</user>
    <text>Yeah</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T02:59:50.290800</ts>
    <user>Lynne</user>
    <text>I see</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:00:31.291100</ts>
    <user>Lynne</user>
    <text>I am actually not sure it is possible to solve this without knowing number of digits</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:00:55.291300</ts>
    <user>Lynne</user>
    <text>Due to the nature of floating point numbers</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:01:26.291500</ts>
    <user>Lynne</user>
    <text>At some point rounding should happen</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:01:44.291700</ts>
    <user>Jin</user>
    <text>There is &lt;https://package.elm-lang.org/packages/myrho/elm-round/latest/&gt;</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:02:00.291900</ts>
    <user>Raymonde</user>
    <text>So I have to parse the number of digits from the input number first. That’s not ideal.</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:04:36.292100</ts>
    <user>Lynne</user>
    <text>I would actually check what problem you are trying to solve</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:04:45.292300</ts>
    <user>Lynne</user>
    <text>For most tasks in the world 4 digits are usually enough</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:05:02.292600</ts>
    <user>Jin</user>
    <text>You already have to turn the textual input into a number, probably. This would be a good place to also check for the  significant digits.</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:05:03.292800</ts>
    <user>Lynne</user>
    <text>For displaying</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:05:37.293000</ts>
    <user>Lynne</user>
    <text>If you are not sure, use 5 or 10 digits. Unnecessary zeroes will go anyway so it will cover most of the inputs probably</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:07:52.293200</ts>
    <user>Raymonde</user>
    <text>I’m implementing a custom input like this, note the `+` is always there, might be `-` according to the number.</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:09:35.293800</ts>
    <user>Bert</user>
    <text>&lt;@Raymonde&gt; Just to make this clear, this is **not** an Elm-specific issue. The reason this is happening is how floating point numbers arithmetics work in JavaScript (Elm relies on JS numbers at the low level), and a whole lot of other languages including C, Java, and so on.</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:10:23.294000</ts>
    <user>Lynne</user>
    <text>I think it is an architectural issue. I.e. x86, x64 or whatever else</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:11:00.294200</ts>
    <user>Bert</user>
    <text>Where is the code and how is it broken?</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:12:00.294400</ts>
    <user>Iona</user>
    <text>IEEE floating point</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:12:33.294600</ts>
    <user>Lynne</user>
    <text>Exactly</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:12:53.294800</ts>
    <user>Raymonde</user>
    <text>OK, got it, I think I can parse the digits number from input to solve this. Not ideal though.</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:16:57.295000</ts>
    <user>Bert</user>
    <text>You could try &lt;https://package.elm-lang.org/packages/prikhi/decimal/latest/Decimal&gt; too</text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:17:07.295200</ts>
    <user>Lynne</user>
    <text>And use elm-round which &lt;@Jin&gt; suggested. It mentions there still can be issues with multiply/divide approach</text>
  </message>
  <message conversation_id="131">
    <ts>2019-01-14T03:20:23.298500</ts>
    <user>Victorina</user>
    <text>Hi, has anybody somewhere worked with Processes? I mean, is it possible to apply them as workers for heavy elm functions? </text>
  </message>
  <message conversation_id="130">
    <ts>2019-01-14T03:22:10.298600</ts>
    <user>Raymonde</user>
    <text>I’ll check these packages, thanks all for your helps.</text>
  </message>
  <message conversation_id="131">
    <ts>2019-01-14T03:25:33.302000</ts>
    <user>Jake</user>
    <text>I think those are still on the main thread (as opposed to a background worker)</text>
  </message>
  <message conversation_id="131">
    <ts>2019-01-14T03:42:41.303000</ts>
    <user>Dorsey</user>
    <text>Not directly. I guess it's planned for the future. Currently you can make separate Elm programs and wire them up using ports. You will have to do encoding and decoding. To start a headless Elm process use `Platform.worker` as described here: &lt;https://package.elm-lang.org/packages/elm/core/latest/Platform#worker&gt;</text>
  </message>
  <message conversation_id="131">
    <ts>2019-01-14T03:43:24.303200</ts>
    <user>Dorsey</user>
    <text>You will have to manage the threads from JS code.</text>
  </message>
  <message conversation_id="132">
    <ts>2019-01-14T12:11:04.307100</ts>
    <user>Tynisha</user>
    <text>Is anyone else having problems editing Elm code with the latest version of linter in Atom (2.3.0)? Since upgrading today, the linter no longer signals Elm compiler messages. If I downgrade Atom's linter to 2.2.0 (`apm install linter@2.2.0`) things work again. Looking at the release notes of linter ("Remove support for legacy linter APIs"), I wonder if this is a problem with language-elm relying on deprecated APIs</text>
  </message>
  <message conversation_id="132">
    <ts>2019-01-14T12:12:17.307200</ts>
    <user>Elyse</user>
    <text>Yes, same here. I didn't notice the linter being updated though, but that would probably explain it :+1:</text>
  </message>
  <message conversation_id="133">
    <ts>2019-01-14T12:38:04.309100</ts>
    <user>Leoma</user>
    <text>Suppose I had a function which throws away data, such that I can do
`tossA : Foo A -&amp;gt; Foo a`
What is the term for converting a type to a type variable (A -&amp;gt; a) ? Is there one?
If I want to discuss or or remind a reader that A -&amp;gt; a, how do I state that clearly?
“Note that the type parameter whent from … to a type variable?”</text>
  </message>
  <message conversation_id="133">
    <ts>2019-01-14T12:42:10.309700</ts>
    <user>Elina</user>
    <text>shot in the dark, but maybe you'd call that "unbinding"</text>
  </message>
  <message conversation_id="132">
    <ts>2019-01-14T13:45:05.311500</ts>
    <user>Carman</user>
    <text>Most of the time, such a function forces you to return an "empty state" version of `Foo` (e.g. `List Int -&amp;gt; List a` must return `[]`)</text>
  </message>
  <message conversation_id="134">
    <ts>2019-01-14T13:46:43.312100</ts>
    <user>Carman</user>
    <text>I wonder if describing that behavior might be helpful when trying to explain the type change</text>
  </message>
  <message conversation_id="134">
    <ts>2019-01-14T13:52:45.312300</ts>
    <user>Hyacinth</user>
    <text>You could destructure the record in a function in such a way that the fields become required, but that's not quite the same.

doThing : MyRecord -&amp;gt; Result
doThing { field1, field2 } =
    {{function code here}}</text>
  </message>
  <message conversation_id="134">
    <ts>2019-01-14T13:53:20.312500</ts>
    <user>Hyacinth</user>
    <text>Eh, but that's not the same as requiring every field in the record.</text>
  </message>
  <message conversation_id="134">
    <ts>2019-01-14T13:54:08.312700</ts>
    <user>Hyacinth</user>
    <text>Could you use a custom type for the use case that you're trying to do?</text>
  </message>
  <message conversation_id="135">
    <ts>2019-01-14T17:49:59.313600</ts>
    <user>Grisel</user>
    <text>Currently in pieces across a number of my tabs.</text>
  </message>
  <message conversation_id="135">
    <ts>2019-01-14T17:50:21.314400</ts>
    <user>Grisel</user>
    <text>I’ll spin up a private Gist and DM you.</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:15:23.315200</ts>
    <user>Danika</user>
    <text>Does elm note allow apostrophies at the end of function names anymore -&amp;gt; `name'` ?</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:15:50.315500</ts>
    <user>Earlean</user>
    <text>&lt;@Danika&gt; yep, it was removed in 0.18</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:17:52.317100</ts>
    <user>Danika</user>
    <text>Ah okay</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:18:18.317200</ts>
    <user>Earlean</user>
    <text>`'` is an uncommonly allowed in variable names in most languages that people come to Elm from, it's common use lead people to ask whether there was something special about it which put people off.</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:18:39.317700</ts>
    <user>Earlean</user>
    <text>Removing it also encourages people to think of better names</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:19:42.318000</ts>
    <user>Danika</user>
    <text>or replace it with `_` :angel:</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:19:52.318400</ts>
    <user>Danika</user>
    <text>well perhaps you could help me with a naming problem then ^^</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:20:08.318800</ts>
    <user>Earlean</user>
    <text>yep, elm-upgrade did that automatically for the 0.18 upgrade</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:20:47.319800</ts>
    <user>Earlean</user>
    <text>but `_` is very commonly allowed in variable names across languages so people don't have the same reaction to it</text>
  </message>
  <message conversation_id="136">
    <ts>2019-01-14T18:23:47.322100</ts>
    <user>Danika</user>
    <text>I have a type `Param = Note Int |  Frequency Float | ...` for midi note and note frequency and some other things. I'd like to have the very standard `mtof` (midi to frequency) and `ftom` functions as utils for a package I'm working on.

But it also seems reasonable to have the same functions for generic Int/Float types. Do you think `mtof_` would be fine for the generic function?</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:05:33.324800</ts>
    <user>Carman</user>
    <text>Personally I don't like having raw numbers in my programs. I tend to wrap everything in a custom type that represents the unit</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:07:11.325700</ts>
    <user>Carman</user>
    <text>So I'd probably have a custom type that looks something like

```
type Frequency = Hertz Float

-- OR

type Hertz = Hertz Float
```</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:08:04.326400</ts>
    <user>Carman</user>
    <text>I usually put these in their own modules, often a with a function to unwrap the raw value although that's not needed as much as you might expect</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:10:42.327400</ts>
    <user>Danika</user>
    <text>I don't see much utility in `Frequency (Hertz Float)` compared to `Frequency Float`, the Float is already wrapped why wrap it again?</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:12:21.328200</ts>
    <user>Carman</user>
    <text>That first one isn't double wrapping. It just has a different name for the type and the constructor, allowing you to add other units in the same category</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:12:40.328900</ts>
    <user>Carman</user>
    <text>e.g.
```
type Frequency = Hertz Float | MegaHertz Float | ...
```</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:12:52.329300</ts>
    <user>Carman</user>
    <text>I usually don't do that though</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:13:09.329800</ts>
    <user>Carman</user>
    <text>I stick with `type Hertz = Hertz Float`</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:15:20.331900</ts>
    <user>Danika</user>
    <text>I understand that, but I already have `Frequency Float` which is part of

```type Params
  = Value Float
  | Note Int
  | Frequency Float
  | ... ```

So what you propose would be

```type Hertz = Hertz Float

type Params
  = Value Float
  | Frequency (Hertz Float)
  | ... ```
no?</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:16:52.333100</ts>
    <user>Danika</user>
    <text>In my particular case I think `Frequency Float` already gives enough information that this is in hz (given the context of the rest of the package) and any more specificity doesn't really bring any extra benefit.</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:19:29.334300</ts>
    <user>Carman</user>
    <text>What does the `Params` type represent?</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:19:52.334700</ts>
    <user>Carman</user>
    <text>are these URL parameters? Inputs from a form?</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:21:13.335600</ts>
    <user>Danika</user>
    <text>I think we're probably going way beyond the scope of what I originally asked but..

```type Node
    = Node { id : NodeID, type_ : NodeType, params : Dict String Param }```

`Param` represents some parameter of an audio node on a graph.</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:24:18.336400</ts>
    <user>Carman</user>
    <text>Do you do any math on param values? Or just output them directly?</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:25:53.336700</ts>
    <user>Danika</user>
    <text>There will inevitably be math on param values yes</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:27:26.337600</ts>
    <user>Carman</user>
    <text>I assume some operations will only work on frequencies, not on any param type right?</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:27:42.337800</ts>
    <user>Danika</user>
    <text>indeed</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:29:45.339400</ts>
    <user>Carman</user>
    <text>For those functions, I really like to be able to have signatures like `freqOp : Hertz -&amp;gt; Hertz` rather than `freqOp : Float -&amp;gt; Float`</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:31:29.339700</ts>
    <user>Danika</user>
    <text>That is a valid point</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:35:16.340800</ts>
    <user>Carman</user>
    <text>Depending on how the program is structured, maybe there's a conversion step somewhere between a `Params` and `Hertz`. Alternatively maybe `Params` wraps a `Hertz` like you showed earlier.</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:40:42.341400</ts>
    <user>Danika</user>
    <text>Definitely something to think about. In any case its nearly 1 so I should sleep! Thanks for the input :slightly_smiling_face:</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T19:42:35.341500</ts>
    <user>Ruthann</user>
    <text>ls</text>
  </message>
  <message conversation_id="137">
    <ts>2019-01-14T21:51:33.343600</ts>
    <user>Ruthann</user>
    <text>bloody slack always takes window focus when it loads :stuck_out_tongue: &lt;@Earlean&gt; several times!</text>
  </message>
  <message conversation_id="138">
    <ts>2019-01-14T21:54:14.343800</ts>
    <user>Earlean</user>
    <text>It's a classic meme from the IRC days</text>
  </message>
  <message conversation_id="139">
    <ts>2019-01-14T22:22:15.345600</ts>
    <user>Santina</user>
    <text>I'm trying to figure out elm/parse but I think I'm finding the types a little confusing. I've written up a (hopefully) clear gist with my problem at &lt;https://gist.github.com/bstro/2436e7d3214e4f22544f872a56ad0512&gt; … hoping someone with some experience with `elm/parse` might be able to take a look? It seems like a relatively simple problem to solve overall, I'm just unfamiliar with types in general, let alone parser combinators.</text>
  </message>
  <message conversation_id="140">
    <ts>2019-01-15T01:34:47.345900</ts>
    <user>Lynne</user>
    <text>`&lt;http://Parser.int|Parser.int&gt;` will fail on dot. Instead of consuming digits one by one until it faces something else it just fails if complete string cannot be converted to integer</text>
  </message>
  <message conversation_id="140">
    <ts>2019-01-15T01:35:22.346100</ts>
    <user>Lynne</user>
    <text>Strategy here is to use `chompWhile` and then combine chomped characters into a number</text>
  </message>
  <message conversation_id="140">
    <ts>2019-01-15T01:36:55.346300</ts>
    <user>Lynne</user>
    <text>So basically your complete parser has to be built around your `dotDigit`</text>
  </message>
  <message conversation_id="140">
    <ts>2019-01-15T02:04:17.346500</ts>
    <user>Lynne</user>
    <text>Regarding the compilation errors. The first one says you are trying to return parsers which are capable of decoding into different types (from `Parser Int` to `Index` and from `Parser (Int, List Int)` to `Index`). All elements of a list should be of the same type</text>
  </message>
  <message conversation_id="140">
    <ts>2019-01-15T02:05:34.346700</ts>
    <user>Lynne</user>
    <text>Second one says that you are providing wrong value at right hand side of `|.`: it is expecting `Parser ignore` but you are giving it `Parser.andThen &amp;lt;function&amp;gt;`</text>
  </message>
  <message conversation_id="140">
    <ts>2019-01-15T02:05:48.346900</ts>
    <user>Lynne</user>
    <text>You should use `|&amp;gt;` when piping into `andThen`</text>
  </message>
  <message conversation_id="140">
    <ts>2019-01-15T02:16:32.347100</ts>
    <user>Lynne</user>
    <text>&lt;https://ellie-app.com/4stpQV6wb8xa1&gt;</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T03:09:32.347900</ts>
    <user>Nana</user>
    <text>hmm, `String.toTitleCase` doesn't capitalize åäö :disappointed:</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T03:09:58.348300</ts>
    <user>Nana</user>
    <text>I guess a PR would be in order?</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T03:10:58.348600</ts>
    <user>Nana</user>
    <text>`String.toUpper` works correctly though</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T03:16:12.349400</ts>
    <user>Hoa</user>
    <text>&lt;@Nana&gt;  As a temp workaround does CSS `text-transform: capitalize;` work for you?</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T03:25:30.351000</ts>
    <user>Nana</user>
    <text>aha, here's the source:
```
toTitleCase : String -&amp;gt; String
toTitleCase ws =
    let
        uppercaseMatch =
            Regex.replace (regexFromString "\\w+") (.match &amp;gt;&amp;gt; toSentenceCase)
    in
    ws
        |&amp;gt; Regex.replace
            (regexFromString "^([a-z])|\\s+([a-z])")
            (.match &amp;gt;&amp;gt; uppercaseMatch)
```
`[a-z]` only matches precisely a - z</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T03:54:58.352000</ts>
    <user>Nana</user>
    <text>hmm weird, even replacing it with `(.)` won't capitalize åäö! so there must be another problem as well</text>
  </message>
  <message conversation_id="142">
    <ts>2019-01-15T03:55:43.352400</ts>
    <user>Timika</user>
    <text>\w does not match those, so that needs to change as well.</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T03:56:00.352600</ts>
    <user>Nana</user>
    <text>aah right</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:13:13.353600</ts>
    <user>Nana</user>
    <text>ah, finally got it working. didn't quite understand how the original worked so I made this instead:
```
toTitleCase : String -&amp;gt; String
toTitleCase =
    Regex.replace (Regex.fromString "^(.)| (.)" |&amp;gt; Maybe.withDefault Regex.never) (.match &amp;gt;&amp;gt; String.toUpper)
```
seems good enough?</text>
  </message>
  <message conversation_id="142">
    <ts>2019-01-15T04:15:10.354100</ts>
    <user>Timika</user>
    <text>Maybe `\s` instead of just a space? Alternatively, `\S+` to match everything that is not a white space, and transform those chunks, similar to the way it was before?</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:22:07.355500</ts>
    <user>Nana</user>
    <text>aha! here's another version then, which more closely follows the behavior of the original, but works for extended alphabet:
```
toTitleCase : String -&amp;gt; String
toTitleCase ws =
    let
        uppercaseMatch =
            Regex.replace (Regex.fromString "\\S+" |&amp;gt; Maybe.withDefault Regex.never) (.match &amp;gt;&amp;gt; String.toSentenceCase)
    in
    ws
        |&amp;gt; Regex.replace
            (Regex.fromString "^([a-zà-ÿ])|\\s+([a-zà-ÿ])" |&amp;gt; Maybe.withDefault Regex.never)
            (.match &amp;gt;&amp;gt; uppercaseMatch)
```</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:22:58.356200</ts>
    <user>Nana</user>
    <text>(I found `[a-zà-ÿ]` was suggested to match all characters when googling)</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:29:05.356800</ts>
    <user>Nana</user>
    <text>hmm `[a-zà-ÿ]` doesn't work for Cyrillic though</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:29:47.357800</ts>
    <user>Nana</user>
    <text>it's quite a quest to find the correct Regex selector :stuck_out_tongue:</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:29:55.358000</ts>
    <user>Timika</user>
    <text>This is super tricky stuff, even though it does not look like it on the surface. I wonder if locales play a role here too. Different languages might capitalize differently, even though it’s the same character.</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:35:54.359500</ts>
    <user>Lynne</user>
    <text>Would not it be easier to split string by space and then manually capitalize each word with `String.toUpper`?</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:36:13.359900</ts>
    <user>Timika</user>
    <text>Related: &lt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase&gt;</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:36:21.360200</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; that's basically what my simpler version does</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:36:45.360500</ts>
    <user>Lynne</user>
    <text>But you want to harness regular expressions? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:37:07.361000</ts>
    <user>Timika</user>
    <text>&amp;gt; Also notice that conversion is not necessarily a 1:1 character mapping, as some characters might result in two (or even more) characters when transformed to upper-case. Therefore the length of the result string can differ from the input length.</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:37:17.361300</ts>
    <user>Nana</user>
    <text>I guess I could have done it with String.split yeah, it was just that the original used Regex :stuck_out_tongue:</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:37:39.361600</ts>
    <user>Lynne</user>
    <text>I can see the benefit of it... if only it worked</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:39:58.363400</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; this works pretty well:
```
toTitleCase : String -&amp;gt; String
toTitleCase =
    Regex.replace (Regex.fromString "^(.)|\\s(.)" |&amp;gt; Maybe.withDefault Regex.never) (.match &amp;gt;&amp;gt; String.toUpper)
```
It uppercases any character which is after line-start or a space, and should work for all alphabets (depending on how `String.toUpper` works)</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:42:37.364800</ts>
    <user>Lynne</user>
    <text>I would go mad though if I saw such code in project :smile:</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:48:06.366000</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; yeah regex is weird, how's this then? :slightly_smiling_face:
```
toTitleCase : String -&amp;gt; String
toTitleCase phrase =
    phrase |&amp;gt; String.split " " |&amp;gt; List.map String.toSentenceCase |&amp;gt; String.join " "
```
good enough for PR?</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:48:39.366600</ts>
    <user>Lynne</user>
    <text>I am not maintainer of `String.Extra`, can't say if it is good or not :slightly_smiling_face:</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:48:42.366700</ts>
    <user>Nana</user>
    <text>or maybe the Regex version is faster</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:48:56.366900</ts>
    <user>Nana</user>
    <text>or Regex might be slow, no idea</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T04:49:25.367400</ts>
    <user>Lynne</user>
    <text>Well, unless you run on 1k+ lists every other second it should not be a big deal</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T05:34:10.367800</ts>
    <user>Sadie</user>
    <text>Hello folks</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T05:34:25.368100</ts>
    <user>Sadie</user>
    <text>Once again I reach my limitation with Json decoders</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T05:34:46.368600</ts>
    <user>Sadie</user>
    <text>I would like to handle the case where a JSON property can be a nullable or an object or missing</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T05:34:58.369000</ts>
    <user>Sadie</user>
    <text>I started with something like this: `        |&amp;gt; optional "test" (nullable (Decode.map Just decodeTestInfo)) Nothing`</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T05:35:06.369300</ts>
    <user>Sadie</user>
    <text>(elm-json-decode-pipeline)</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T05:36:04.369700</ts>
    <user>Sadie</user>
    <text>Maybe `optional "test" (nullable decodeTestInfo) Nothing` is sufficient in that case?</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T05:38:53.370200</ts>
    <user>Lynne</user>
    <text>I think even `optional "test" (map Just decodeTestInfo) Nothing` should be sufficient</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T05:39:06.370600</ts>
    <user>Lynne</user>
    <text>`optional` already handles null and missing fields</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T05:42:50.371200</ts>
    <user>Lynne</user>
    <text>Unless you want null and missing cases to be represented differently in the model</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T06:19:56.372300</ts>
    <user>Sadie</user>
    <text>Thanks &lt;@Lynne&gt; i am going to try that</text>
  </message>
  <message conversation_id="143">
    <ts>2019-01-15T06:37:55.372500</ts>
    <user>Sadie</user>
    <text>It works</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T07:34:16.372800</ts>
    <user>Santina</user>
    <text>Damn. Thank you &lt;@Lynne&gt;, that was incredibly helpful and above and beyond what I expected. I really appreciate your help.</text>
  </message>
  <message conversation_id="141">
    <ts>2019-01-15T07:47:22.373000</ts>
    <user>Lynne</user>
    <text>You are welcome. Writing parsers is not an easy thing.</text>
  </message>
  <message conversation_id="144">
    <ts>2019-01-15T08:36:59.373300</ts>
    <user>Santina</user>
    <text>One question, out of curiosity: is it important that `numbersSoFar` is a record with one member, a property `ns` ?</text>
  </message>
  <message conversation_id="144">
    <ts>2019-01-15T08:39:35.373500</ts>
    <user>Lynne</user>
    <text>Absolutely not. It was a bit early in the morning and I just copied the code from my project where it was three fields</text>
  </message>
  <message conversation_id="144">
    <ts>2019-01-15T08:40:22.373700</ts>
    <user>Lynne</user>
    <text>In fact you could do conversion to `Index` in the `parseStep` function prior to returning `Done`</text>
  </message>
  <message conversation_id="144">
    <ts>2019-01-15T08:41:28.374000</ts>
    <user>Lynne</user>
    <text>So you would return `Parser (Step (List Int) Index)` from `parseStep`. Might be a good learning thing for you to try it actually :wink:</text>
  </message>
  <message conversation_id="145">
    <ts>2019-01-15T09:56:54.374300</ts>
    <user>Santina</user>
    <text>ah that is a super interesting idea</text>
  </message>
  <message conversation_id="145">
    <ts>2019-01-15T09:56:55.374500</ts>
    <user>Santina</user>
    <text>thanks a bunch!</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T10:59:06.376200</ts>
    <user>Allyn</user>
    <text>Hello. I was looking for a package to add same basic charts to an app. Is there a lib to create at least pie and histograms?</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:06:11.376500</ts>
    <user>Timika</user>
    <text>&lt;https://code.gampleman.eu/elm-visualization/&gt; might be what you’re looking for</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:07:00.377200</ts>
    <user>Agustin</user>
    <text>If you just want simple line charts then I can recommend &lt;https://github.com/terezka/line-charts&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:17:01.378300</ts>
    <user>Leoma</user>
    <text>Design pattern question:

Suppose I have an app with several “Page”s which are essentially different views/ui’s for a shared set of data.
Part of each Page is a search field, and that value should be shared among these Pages.

1. Solution: each Page has a search field, and navigations between pages transfer the search value.
Problem: if we jump to a non-search Page, then back, we lose the search

2. Solution: search value is stored in the top-level model, and not the pages.
Problem: Page search update -&amp;gt; dispatching an external message to parent -&amp;gt; parent getting a search value and setting in, then calling the page’s update with the new search value.
This is very “circular” and a bit confusing. There is nothing in the type system to enforce notifying the child during parent’s update (i.e. the parent sets its search field and forgets to do the work of notifying child components if they are interested.)

3. Solution: search value is part of a type that every page must be able to store.
Therefore, a Page can maintain it’s own search value, and the Main update can transfer the value between pages.
Problem: why does my Login page have a search value?!

4. Solution: our top-level model looks like:
{ ...
  page : PageModel
...
}

type PageModel =
  | Page1Model Page1.Model Page1Leftovers
  | Page2Model Page2.Model Page2Leftovers
  ...

where we are guaranteed to have:

searchValue : PageModel -&amp;gt; String

such that, if the PageX.Model is interested, it stores the search. If not, we store it in the “leftovers”.
Problem: ??? Is there a problem?</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:25:44.379400</ts>
    <user>Earlean</user>
    <text>&lt;@Leoma&gt; you could store the search value in the page and the top-level model and pass it in to pages and take it out of pages on navigation.</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:27:31.380200</ts>
    <user>Earlean</user>
    <text>that's essentially option 2 but only on navigation</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:29:06.380300</ts>
    <user>Allyn</user>
    <text>thank you, that's perfect!</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:35:41.383500</ts>
    <user>Leoma</user>
    <text>The thing I like about 4, is that when our top-level update gets a `SearchUpdated search` it has do to something with it. And if our top-level model has a `search : String` it’s easy to set it and think the work is over. Whereas if our top level model doesn’t have an explicit search field, we’re reminded by the type system that we have to figure out where it goes: the interested page, or in the leftover storage. However, this (seems at the moment) more complicated than it should be.</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:51:00.387800</ts>
    <user>Ashton</user>
    <text>Among the ones you listed, I would fight for 1. The problem is only that somes pages contain data they dont use. Seems perfectly fine to me. Theres nothing wrong with persisting data you dont use but expect to use later. Mostly importantly tho, its the simplest. Aside from imports and extracting/injecting this value, I think the impact on your case base could be merely one line:
```
, search : SearchModel
```
I dont see the other solutions as coming close in terms of simplicity.</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:52:24.388600</ts>
    <user>Leoma</user>
    <text>Right, so I think that’s 3… ?</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:52:52.389100</ts>
    <user>Leoma</user>
    <text>I do agree, that this is simplest. Maybe simplicity wins over “correctness” here.</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:52:56.389300</ts>
    <user>Ashton</user>
    <text>Regarding 4, what if you have three pages? Do you need `LeftOvers` types for every page it could have come from?</text>
  </message>
  <message conversation_id="146">
    <ts>2019-01-15T11:55:08.389400</ts>
    <user>Leoma</user>
    <text>So I think I’d create a toplevel function
`searchValue : PageModel -&amp;gt; String`.

And also, have each Page only store what it needs.

Then, the toplevel module is forced to figure out how to store the extra data to be able to satisfy the implementation of `searchValue`.

I like this mainly because I’m using the type system to enforce “things store only what they need, and but we must still store all the things”</text>
  </message>
  <message conversation_id="147">
    <ts>2019-01-15T12:46:56.389600</ts>
    <user>Tynisha</user>
    <text>There's also elm-vegalite - &lt;https://package.elm-lang.org/packages/gicentre/elm-vegalite/latest/&gt;

For example, here's the code to create a frequency histogram from some raw data:

```
bar2 : Spec
bar2 =
    let
        enc =
            encoding
                &amp;lt;&amp;lt; position X [ pName "IMDB_Rating", pMType Quantitative, pBin [] ]
                &amp;lt;&amp;lt; position Y [ pMType Quantitative, pAggregate opCount ]
    in
    toVegaLite
        [ dataFromUrl "&lt;https://vega.github.io/vega-lite/data/movies.json&gt;" []
        , bar []
        , enc []
        ]
```</text>
  </message>
  <message conversation_id="148">
    <ts>2019-01-15T16:00:15.390500</ts>
    <user>Jae</user>
    <text>Is there a way to install test dependencies with `elm install` or some other tool?</text>
  </message>
  <message conversation_id="148">
    <ts>2019-01-15T16:31:51.390800</ts>
    <user>Bert</user>
    <text>elm-test install</text>
  </message>
  <message conversation_id="148">
    <ts>2019-01-15T16:32:12.391000</ts>
    <user>Bert</user>
    <text>&lt;https://www.npmjs.com/package/elm-test&gt;</text>
  </message>
  <message conversation_id="148">
    <ts>2019-01-15T16:51:17.391800</ts>
    <user>Shelia</user>
    <text>Any idea what's going on here?

```The elm.json for elm-community/list-extra 2.0.0 got corrupted somehow.```

Happens on every attempt of `elm install hercules-ci/elm-dropdown`. I've tried `rm -fr elm-stuff ~/.elm`, still happens.</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:52:16.392200</ts>
    <user>Virgie</user>
    <text>list-extra is at version 8.1.0, 2.0.0 is probably not even for 0.19</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:52:30.392500</ts>
    <user>Virgie</user>
    <text>any idea how that dependency gets pulled in?</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:52:48.392800</ts>
    <user>Shelia</user>
    <text>We have a dependency in `elm.json` for `8.0.0`</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:53:17.393100</ts>
    <user>Shelia</user>
    <text>So not sure what's going on with that 2.0.0</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:55:15.394700</ts>
    <user>Shelia</user>
    <text>I think it might be this: &lt;https://github.com/hercules-ci/elm-dropdown/blob/1.0.0/elm.json#L15&gt;</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:55:24.395100</ts>
    <user>Shelia</user>
    <text>&lt;@Zachary&gt; :arrow_up:</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:56:15.396300</ts>
    <user>Virgie</user>
    <text>what you can try is removing all dependencies, and then adding them again from the command line</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:56:19.396600</ts>
    <user>Shelia</user>
    <text>Hmm, maybe not, `elm-community/json-extra` 3.0.0 still works on 0.19 and has no `list-extra` dependency...</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:56:20.396700</ts>
    <user>Bert</user>
    <text>Just to be sure, the `elm` you are calling is the 0.19 binary? </text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:56:35.397100</ts>
    <user>Shelia</user>
    <text>&lt;@Bert&gt; yea, `elm --version` reports 0.19</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:57:02.397800</ts>
    <user>Bert</user>
    <text>Okay good, keep on debugging! :) </text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:57:26.398300</ts>
    <user>Shelia</user>
    <text>Someone hit this before and apparently had to upgrade there `NoRedInk/elm-json-decode-pipeline`, I will try that (we do depend on that)</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T16:57:45.398600</ts>
    <user>Shelia</user>
    <text>Bah, no, that's up to date.</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:00:00.400700</ts>
    <user>Bert</user>
    <text>I would try what Folkert mentioned above: remove all deps from elm.json and then install again on the terminal </text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:00:34.401800</ts>
    <user>Bert</user>
    <text>Possibly also removing the cache dir in between </text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:00:42.402100</ts>
    <user>Shelia</user>
    <text>Ok, removing `        "elm-community/list-extra": "8.0.0"` at least lets `elm install` continue</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:00:47.402400</ts>
    <user>Shelia</user>
    <text>I'll try continuing with that and see what happens</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:01:12.402900</ts>
    <user>Shelia</user>
    <text>that is, removing that line from my `"direct"` `"dependencies"`</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:02:30.403300</ts>
    <user>Shelia</user>
    <text>Yea, that worked. Then re-adding `elm-community/list-extra` also worked. :shrug:</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:04:38.405300</ts>
    <user>Bert</user>
    <text>Well good. Could have been a strange dep range condition with maybe an incorrect error message</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:07:25.405900</ts>
    <user>Shelia</user>
    <text>&lt;@Zachary&gt; I don't think that was necessarily my problem, but I do need `json-extra` 4.0.0 anyway, so I can't use your library until you bump that</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:10:42.406200</ts>
    <user>Zachary</user>
    <text>&lt;@Shelia&gt; try 1.0.1</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:13:23.406700</ts>
    <user>Shelia</user>
    <text>Nice, that works with my old `elm.json` too - so the above error must have somehow come from that</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:13:54.407100</ts>
    <user>Shelia</user>
    <text>&lt;@Zachary&gt; works perfectly, thanks :tada:</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:14:02.407300</ts>
    <user>Zachary</user>
    <text>well thank you :slightly_smiling_face:</text>
  </message>
  <message conversation_id="149">
    <ts>2019-01-15T17:14:27.407500</ts>
    <user>Shelia</user>
    <text>thank us, how about that?</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:04:56.407800</ts>
    <user>Lucia</user>
    <text>Hello, as you can see my name is Luka and I'm new here. Like all of you (probably), I too believe that Elm is a "Delightful" language, so I would really like to contribute some work. I was wondering, whether basic data structures like Set, Stack, Queue are already implemented in Elm... If not, is there a reason why? Maybe any other idea how i could contribute?</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:05:09.408200</ts>
    <user>Lucia</user>
    <text>Thanks in advance for your answers :wink:</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:09:03.409600</ts>
    <user>Ruthann</user>
    <text>Welcome to the community &lt;@Lucia&gt; :wave:

Set is in core
The others I haven't used but there are likely existing packages which cover their functionality: &lt;https://package.elm-lang.org/&gt;</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:12:06.412300</ts>
    <user>Virgie</user>
    <text>`Set` is in core, and `Stack` is as well (our `List` is a linked-list, which behaves exactly like a stack).</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:12:23.412900</ts>
    <user>Lucia</user>
    <text>Thanks.. Yep, i did a little more research and found out the same. :slightly_smiling_face: I guess I'll have to find something else :smile:</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:12:54.413400</ts>
    <user>Virgie</user>
    <text>I think there are some queues. Note that elm is a functional language, and its purity make implementing datastructures less straightforward</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:15:46.414400</ts>
    <user>Ruthann</user>
    <text>a LIFO is trivial with a linked list</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:16:07.414900</ts>
    <user>Ruthann</user>
    <text>a FILO is trivial if it allows 2n space to store the reverse as well</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:17:03.415400</ts>
    <user>Virgie</user>
    <text>getting the performance/space consumption that imperative languages achieve can be a challenge</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:17:37.416000</ts>
    <user>Virgie</user>
    <text>on the other hand, in a future where elm runs on a platform with multiple threads, our data structures are thread safe by default</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:18:48.417000</ts>
    <user>Virgie</user>
    <text>As to where you can contribute: is there anything you are particularly interested in actually doing?</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:21:02.419200</ts>
    <user>Lucia</user>
    <text>I'm not really sure :smile: I'm a student, i had a subject, where we were programming in Elm and it was really interesting. I would really like to continue upgrading my knowledge in functional programming.</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:22:33.420300</ts>
    <user>Virgie</user>
    <text>well picking a subject you like can really help. For instance I've always liked projects with some visual output.</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:23:29.421200</ts>
    <user>Virgie</user>
    <text>and in that case I think it would be really valuable for some package authors to have a novice work with their package, documenting difficulties and implementing something fun</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:25:30.422300</ts>
    <user>Lucia</user>
    <text>Okay, great I'll look into that first, maybe i find something interesting and easy enough for me. :wink:</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:26:30.423500</ts>
    <user>Virgie</user>
    <text>there is one of those quotes at the slack startup saying roughly "not all contributions are code", in fact most contributions are/should not be in code</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:27:18.423900</ts>
    <user>Virgie</user>
    <text>and a newcomer's perspective is very valuable</text>
  </message>
  <message conversation_id="150">
    <ts>2019-01-15T18:32:23.428700</ts>
    <user>Lucia</user>
    <text>That's interesting. Well to be honest, I'm also new at Slack and the whole concept of open-source projects, so I didn't really know where to start. Anyway, thanks for giving me first tips :smile: I'll probably find something, or maybe even start some new project. We'll see...</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:14:54.432300</ts>
    <user>Fay</user>
    <text>hello, looking forward to get in touch with Elm closely, but faced one issue.
My plan is not to write views in the beginning but instead simply output model as-is using Microsoft/elm-json-tree-view
But the issue here that I can't output model (record) as a JSON to Decode it afterwards
Json.Encode also requires List (String, a) for encoding to JSON
 Anyone know how to Encode a record or I'm missing something obvious?</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:16:54.432600</ts>
    <user>Virgie</user>
    <text>records are encoded as a collection of fields</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:17:26.433000</ts>
    <user>Virgie</user>
    <text>for instance the example here &lt;https://package.elm-lang.org/packages/elm/json/latest/&gt; encodes the `Cause` record</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:20:40.435700</ts>
    <user>Fay</user>
    <text>&lt;@Virgie&gt; great
but what if I don't know the structure?
would be a little overkill to describe the whole model for encoding
for instance elm-json-tree-view produces Html msg on any form
my idea to use the same for model
Model -&amp;gt; ... -&amp;gt; Html msg</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:23:49.436200</ts>
    <user>Virgie</user>
    <text>I think the only generic way is to use `Debug.toString` on the model, then `Html.text` on that string</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:24:24.437300</ts>
    <user>Virgie</user>
    <text>normally you'd be able to use the debugger to inspect the model without actually drawing anything, but the debugger is not reliable in 0.19 so far</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:25:48.438900</ts>
    <user>Fay</user>
    <text>&lt;@Virgie&gt; that was the case for me, the only issue is that it prints model different
```{ content = { text = "Example" } }```
instead of JSON form
```{ "content": { "text": "Example" } }```</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:26:17.439400</ts>
    <user>Fay</user>
    <text>to I guess I need to make some regex work</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:26:35.439800</ts>
    <user>Virgie</user>
    <text>why do you want to display json strings?</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:27:25.440900</ts>
    <user>Fay</user>
    <text>I don't
I need Model to be usable to generate view by elm-json-tree-view</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:27:32.441300</ts>
    <user>Virgie</user>
    <text>because in essence there is no "free" way to turn an elm object into json. You have to write an encoder</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:27:55.441600</ts>
    <user>Fay</user>
    <text>I understand</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:28:27.442300</ts>
    <user>Fay</user>
    <text>even so
i guess encoder will require explicit field names etc.</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:29:29.442900</ts>
    <user>Virgie</user>
    <text>yes</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:30:11.443800</ts>
    <user>Fay</user>
    <text>which is not my case</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:30:25.444400</ts>
    <user>Virgie</user>
    <text>so while a tree-like view would be very nice, and will be possible once the debugger works reliably, for now I prefer Debug.log and Debug.toString</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:30:37.444600</ts>
    <user>Fay</user>
    <text>yep</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:31:31.445500</ts>
    <user>Fay</user>
    <text>the reason I was asking here
it sounds so weird not to have iterator for record fields that it made me stuck )</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:34:28.446100</ts>
    <user>Fay</user>
    <text>one more question
is there any Elm source code that I can fork and play around?</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:34:37.446300</ts>
    <user>Fay</user>
    <text>I found none</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:35:47.446600</ts>
    <user>Virgie</user>
    <text>for the compiler, or just an application written in elm?</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:37:23.446800</ts>
    <user>Earnest</user>
    <text>&lt;https://github.com/search?q=language%3AElm&gt;</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:46:27.447900</ts>
    <user>Lesli</user>
    <text>Is it not possible to make a port with no arguments? `port somePort : () -&amp;gt; Cmd msg` compilers but `somePort` doesn't show up in `app.ports` in JS side</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:47:31.448300</ts>
    <user>Virgie</user>
    <text>your port has to be used (in elm) to be visible</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:47:42.448700</ts>
    <user>Virgie</user>
    <text>if it's not used the dead code elimination will remove it</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:48:12.449200</ts>
    <user>Lesli</user>
    <text>Ugh that sounds like it, thanks &lt;@Virgie&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:48:21.449300</ts>
    <user>Earnest</user>
    <text>This has become the most asked question about ports since 0.19 came out...</text>
  </message>
  <message conversation_id="151">
    <ts>2019-01-15T19:53:19.449600</ts>
    <user>Virgie</user>
    <text>yea, 0.19 has some issues that I really would like to see fixed in a 0.19.1 release</text>
  </message>
  <message conversation_id="152">
    <ts>2019-01-15T20:06:17.450900</ts>
    <user>Earlean</user>
    <text>:coffee:</text>
  </message>
  <message conversation_id="152">
    <ts>2019-01-15T20:20:48.451700</ts>
    <user>Jenni</user>
    <text>Has anyone heard of Angular’s upcoming _Incremental DOM_? I wonder if the same approach will make sense in Elm. &lt;https://blog.nrwl.io/understanding-angular-ivy-incremental-dom-and-virtual-dom-243be844bf36&gt;</text>
  </message>
  <message conversation_id="153">
    <ts>2019-01-15T20:38:36.455800</ts>
    <user>Earlean</user>
    <text>It appears to require a domain specific language that then compiles to the incremental DOM code.  Which mean that you couldn't use Elm to describe your views, you'd use some other limited domain specific language. You certainly get speed, but you loose a large amount of developer ergonomics.</text>
  </message>
  <message conversation_id="154">
    <ts>2019-01-15T21:23:49.457600</ts>
    <user>Lesli</user>
    <text>Actually the port is being called..</text>
  </message>
  <message conversation_id="154">
    <ts>2019-01-15T21:24:00.457800</ts>
    <user>Lesli</user>
    <text>Is there anything else that could be afoot?</text>
  </message>
  <message conversation_id="154">
    <ts>2019-01-15T21:28:09.458000</ts>
    <user>Earnest</user>
    <text>This works for me: &lt;https://ellie-app.com/4sPQp6kD9mya1&gt;</text>
  </message>
  <message conversation_id="154">
    <ts>2019-01-15T21:32:40.458200</ts>
    <user>Lesli</user>
    <text>Thanks &lt;@Earnest&gt;, that's essetnially what we're doing as well. The other 4 ports work, it's just the one with the `() -&amp;gt; Cmd msg` signature that doesn't..</text>
  </message>
  <message conversation_id="154">
    <ts>2019-01-15T21:36:45.458400</ts>
    <user>Lesli</user>
    <text>Never mind got it, the app structure threw us off onto the wrong file... thanks again :slightly_smiling_face:</text>
  </message>
  <message conversation_id="155">
    <ts>2019-01-15T23:10:57.460200</ts>
    <user>Nana</user>
    <text>&lt;@Jenni&gt; Elm already produces the best tree-shakable code of all though
Elm's VDOM can probably be sped up further as well, looking at [Inferno.js](&lt;https://infernojs.org/&gt;) for example</text>
  </message>
  <message conversation_id="155">
    <ts>2019-01-15T23:23:07.460700</ts>
    <user>Jenni</user>
    <text>:thumbsup:</text>
  </message>
  <message conversation_id="156">
    <ts>2019-01-16T00:08:27.464100</ts>
    <user>Yolande</user>
    <text>I'm making a few demo project of a more-or-less mainstream JavaScript stack that approximates Elm. Of course it's not as nice, but my thought is that if I could get JS teams to this combination of stuff (React, Redux, Redux-Loop, Flow) then Elm would be an easier migration. Any ideas for catchy names for this JS stack?</text>
  </message>
  <message conversation_id="157">
    <ts>2019-01-16T00:40:20.466300</ts>
    <user>Jake</user>
    <text>Oh, how is Flow doing? I see there's a lot of push for TypeScript now.</text>
  </message>
  <message conversation_id="157">
    <ts>2019-01-16T00:42:23.468300</ts>
    <user>Jake</user>
    <text>"rrl" is free on npm :-)</text>
  </message>
  <message conversation_id="157">
    <ts>2019-01-16T00:43:39.468600</ts>
    <user>Leoma</user>
    <text>“almost-elm”</text>
  </message>
  <message conversation_id="157">
    <ts>2019-01-16T00:46:59.469300</ts>
    <user>Nana</user>
    <text>"Elmish", but that's already taken for F# :stuck_out_tongue:</text>
  </message>
  <message conversation_id="156">
    <ts>2019-01-16T00:54:36.473100</ts>
    <user>Yolande</user>
    <text>Flow is pretty good as an 80% kinda thing. Some parts are funny. For example, you can declare that a function takes a string and returns a two-element tuple of numbers, but your function can easily return more or less than two</text>
  </message>
  <message conversation_id="156">
    <ts>2019-01-16T00:55:40.474800</ts>
    <user>Colette</user>
    <text>Come join Me and another new Elm-er - We're going to this weekend game jam at Noisebridge in mission to  build a game in elm

&lt;https://www.meetup.com/SF-Bay-Area-Game-Jamming-Game-Design/events/257602179/&gt;

Heads up to anyone that wants to join!</text>
  </message>
  <message conversation_id="156">
    <ts>2019-01-16T00:57:24.476700</ts>
    <user>Yolande</user>
    <text>I don’t have a good sense of how Flow compares to TypeScript, but from reading about them it seemed like Flow is more Elm-like of the two. The fact that you can run Flow on vanilla JavaScript seems advantageous for my boil-the-frog approach</text>
  </message>
  <message conversation_id="156">
    <ts>2019-01-16T02:52:24.477500</ts>
    <user>Desire</user>
    <text>welcome, please see &lt;https://github.com/elm/projects&gt;</text>
  </message>
  <message conversation_id="158">
    <ts>2019-01-16T03:11:16.478700</ts>
    <user>Danika</user>
    <text>Flow is type annotations, typescript is a programming language </text>
  </message>
  <message conversation_id="159">
    <ts>2019-01-16T03:19:22.481500</ts>
    <user>Raymonde</user>
    <text>Hi folks, is there a way to cancel a http request? The situation is I have a list of checkbox, people toggle a checkbox will trigger a request with checked items as parameters, so when the user toggle multiple checkboxes quickly, it will fire multiple requests, I want to keep the last request and just ignore others.</text>
  </message>
  <message conversation_id="159">
    <ts>2019-01-16T03:21:53.482400</ts>
    <user>Earlean</user>
    <text>&lt;@Raymonde&gt; You can cancel a http request using  &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#cancel&gt; but you're probably better off not making multiple requests in the first place.</text>
  </message>
  <message conversation_id="159">
    <ts>2019-01-16T03:22:58.483200</ts>
    <user>Earlean</user>
    <text>since if you cancel a request you don't know whether it succeeded or failed or was never processed by the server</text>
  </message>
  <message conversation_id="159">
    <ts>2019-01-16T03:34:43.484800</ts>
    <user>Raymonde</user>
    <text>&lt;@Earlean&gt; I noticed `cancel` work on request based on a tracker, seems like the type of requests download files. Is any request can be tracked the progress?</text>
  </message>
  <message conversation_id="159">
    <ts>2019-01-16T03:39:27.485900</ts>
    <user>Nana</user>
    <text>&lt;@Danika&gt; well, typescript is still mostly just type annotations for js, it just has a few extra extensions I think</text>
  </message>
  <message conversation_id="160">
    <ts>2019-01-16T11:25:58.489800</ts>
    <user>Kayleigh</user>
    <text>Hello all! Did something change w/ decoding to a Tuple in elm@0.19? I’m getting the following compiler message (which I thought worked previously):
```Something went wrong while parsing an expression (in parentheses) in
subscriptions's definition.

281|                 (D.map2 (,) (D.succeed 0) (D.succeed 1))
                              ^
I was expecting:

  - an expression, like x or 42
  - a closing paren
  - a minus sign (-)
  - an infix operator, like (+) or (==)
```</text>
  </message>
  <message conversation_id="160">
    <ts>2019-01-16T11:26:27.490400</ts>
    <user>Virgie</user>
    <text>the `(,)` syntax got removed</text>
  </message>
  <message conversation_id="160">
    <ts>2019-01-16T11:26:44.490800</ts>
    <user>Earlean</user>
    <text>use `Tuple.pair`</text>
  </message>
  <message conversation_id="160">
    <ts>2019-01-16T11:27:15.491500</ts>
    <user>Kayleigh</user>
    <text>&lt;@Earlean&gt; got it thanks! I must have forgotten that</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:37:37.492600</ts>
    <user>Fabiola</user>
    <text>hi all. I have a problem with &lt;https://package.elm-lang.org&gt;
connection timed out =(
for this reason elm install doesn't work as well</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:38:28.493100</ts>
    <user>Virgie</user>
    <text>are you in Russia? I believe there are some issues with accessing the elm website from there</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:38:41.493300</ts>
    <user>Fabiola</user>
    <text>yep, in Russia</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:38:46.493600</ts>
    <user>Fabiola</user>
    <text>I see</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:40:34.494600</ts>
    <user>Fabiola</user>
    <text>but then why is &lt;http://elm-lang.org|elm-lang.org&gt; is working? That's kinda strange to block only second level domain</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:42:55.496100</ts>
    <user>Desire</user>
    <text>wasn't that like the whatsapp blocks aka some blocking some random cloud servers</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:43:28.496700</ts>
    <user>Virgie</user>
    <text>I don't know much more about it, only that this has been an issue (and that as far as I know there is nothing we the elm community can do about it)</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:44:02.497100</ts>
    <user>Fabiola</user>
    <text>I see</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:45:02.498200</ts>
    <user>Alicia</user>
    <text>russia blocked ~16 million IPs due to the ban of the Telegram messenger, some IPs from google cloud and AWS are included in there so it caused some collateral damage and blocked unrelated things as well</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:45:35.498600</ts>
    <user>Alicia</user>
    <text>if you have access to a VPN I think that is the easiest way though, it isn’t ideal I know :confused:</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T11:48:03.499600</ts>
    <user>Fabiola</user>
    <text>yeah, looks like VPN is an option to go</text>
  </message>
  <message conversation_id="161">
    <ts>2019-01-16T13:34:29.501000</ts>
    <user>Freida</user>
    <text>Does anyone know a good way to do mouse subs in v0.19</text>
  </message>
  <message conversation_id="162">
    <ts>2019-01-16T13:41:32.501500</ts>
    <user>Virgie</user>
    <text>the subscriptions moved to the `Browser` package, or are you looking for something more high-level?</text>
  </message>
  <message conversation_id="162">
    <ts>2019-01-16T14:06:47.503100</ts>
    <user>Freida</user>
    <text>Yeah I'm trying to get the coordinates of the mouse position, with the previous package it seemed to be a little bit easier. Currently I'm using JSON decoder to try to get the x and y, but haven't had any luck yet (well some luck, but the numbers are way off)</text>
  </message>
  <message conversation_id="162">
    <ts>2019-01-16T14:15:46.503200</ts>
    <user>Jae</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="163">
    <ts>2019-01-16T15:28:14.505100</ts>
    <user>Jae</user>
    <text>When run `elm install elm/file` I'm no longer able to run tests.  Instead I get this error
```The dependencies in your elm.json are not compatible.

Did you change them by hand? Try to change it back! It is much better to add
dependencies with elm install or the dependency management tool in elm reactor.```
I'm guessing `elm-explorations/test` relies on an older version of a package `elm/file` also uses.  How do I fix this?</text>
  </message>
  <message conversation_id="163">
    <ts>2019-01-16T15:30:38.505400</ts>
    <user>Virgie</user>
    <text>&lt;@Jae&gt; &lt;https://github.com/elm-explorations/test/issues/54&gt;</text>
  </message>
  <message conversation_id="163">
    <ts>2019-01-16T15:31:01.505700</ts>
    <user>Virgie</user>
    <text>tldr make elm/json a direct dependency</text>
  </message>
  <message conversation_id="163">
    <ts>2019-01-16T15:32:10.505900</ts>
    <user>Jae</user>
    <text>Yup, that works. Thanks!</text>
  </message>
  <message conversation_id="164">
    <ts>2019-01-16T16:38:46.507100</ts>
    <user>Yolande</user>
    <text>I'm not sure how I'm supposed to use elm/parser. This example helps (&lt;https://github.com/elm/parser/blob/1.1.0/examples/DoubleQuoteString.elm&gt;) but what is the `run` keyword?</text>
  </message>
  <message conversation_id="164">
    <ts>2019-01-16T16:39:16.507500</ts>
    <user>Yolande</user>
    <text>ah, `Parser.run`</text>
  </message>
  <message conversation_id="164">
    <ts>2019-01-16T16:39:27.507700</ts>
    <user>Virgie</user>
    <text>exactly</text>
  </message>
  <message conversation_id="164">
    <ts>2019-01-16T16:39:36.507900</ts>
    <user>Danika</user>
    <text>&lt;https://github.com/elm/parser/blob/1.1.0/src/Parser.elm#L95&gt;</text>
  </message>
  <message conversation_id="164">
    <ts>2019-01-16T16:39:50.508100</ts>
    <user>Danika</user>
    <text>^^</text>
  </message>
  <message conversation_id="164">
    <ts>2019-01-16T16:40:13.508500</ts>
    <user>Danika</user>
    <text>this is why exposing everything in an import is discouraged btw</text>
  </message>
  <message conversation_id="164">
    <ts>2019-01-16T16:40:38.509200</ts>
    <user>Danika</user>
    <text>that example would be much clearer if `import Parser exposing (run)` or `Parser.run` were used</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:09:04.509600</ts>
    <user>Yolande</user>
    <text>Can I make a type alias for `(Int, Int)`?</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:09:31.509800</ts>
    <user>Carman</user>
    <text>Sure</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:09:45.510300</ts>
    <user>Carman</user>
    <text>`type alias TwoIntegers = (Int, Int)`</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:10:13.510800</ts>
    <user>Carman</user>
    <text>aliases are alternate names for existing types</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:10:18.511100</ts>
    <user>Carman</user>
    <text>you can alias any type you want</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:10:29.511400</ts>
    <user>Carman</user>
    <text>if it can be seen in a type signature, it can be aliased</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:11:02.512200</ts>
    <user>Yolande</user>
    <text>Gotcha. Thought so. I think I'm also confused about how `succeed` works in elm/parser</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:11:03.512300</ts>
    <user>Carman</user>
    <text>even function types can be aliased: `type Predicate a = a -&amp;gt; Bool`</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:11:40.513500</ts>
    <user>Yolande</user>
    <text>`succeed TwoIntegers` gives "I cannot find a `TwoIntegers` constructor"</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:11:40.513600</ts>
    <user>Carman</user>
    <text>Note that you don't need a type alias to use parsers</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:11:53.514200</ts>
    <user>Yolande</user>
    <text>Didn't think so either, but good to know</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:12:05.514400</ts>
    <user>Carman</user>
    <text>`succeed` wants a function</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:12:25.515100</ts>
    <user>Carman</user>
    <text>when you alias records Elm will automatically create a constructor function of the same name</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:12:40.515500</ts>
    <user>Yolande</user>
    <text>ah but not tuples</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:13:05.515900</ts>
    <user>Carman</user>
    <text>To parse into a tuple you could use a lambda `succeed (\x y -&amp;gt; (x, y))`</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:13:31.516500</ts>
    <user>Carman</user>
    <text>or alternatively the tuple constructor from the core library `succeed Tuple.pair`</text>
  </message>
  <message conversation_id="165">
    <ts>2019-01-16T17:14:39.516800</ts>
    <user>Yolande</user>
    <text>nice, thanks!</text>
  </message>
  <message conversation_id="166">
    <ts>2019-01-16T19:24:34.516900</ts>
    <user>Freida</user>
    <text>Has anyone run into this error</text>
  </message>
  <message conversation_id="166">
    <ts>2019-01-16T19:25:36.517200</ts>
    <user>Earnest</user>
    <text>Is `Json` a module in your package? Did you mean `Json.Encode` or `Json.Decode`?</text>
  </message>
  <message conversation_id="166">
    <ts>2019-01-16T19:26:02.517400</ts>
    <user>Freida</user>
    <text>I'm trying to import elm/json</text>
  </message>
  <message conversation_id="166">
    <ts>2019-01-16T19:26:32.517600</ts>
    <user>Earnest</user>
    <text>There's no `Json` module in that project, just the two I mentioned above</text>
  </message>
  <message conversation_id="166">
    <ts>2019-01-16T19:26:52.517800</ts>
    <user>Earnest</user>
    <text>`import Json` doesn't import both of them, if that's what you were trying to do</text>
  </message>
  <message conversation_id="166">
    <ts>2019-01-16T19:27:20.518000</ts>
    <user>Earnest</user>
    <text>I usually do something like
```
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode exposing (Value)
```</text>
  </message>
  <message conversation_id="166">
    <ts>2019-01-16T19:28:27.518200</ts>
    <user>Freida</user>
    <text>So I'm assuming this does not work ``` Browser.Events.onClick (Json.map message (&lt;http://Json.at|Json.at&gt; ["offsetLeft"] &lt;http://Json.int|Json.int&gt;))```</text>
  </message>
  <message conversation_id="166">
    <ts>2019-01-16T19:28:50.518400</ts>
    <user>Earnest</user>
    <text>not unless you do `import Json.Decode as Json`</text>
  </message>
  <message conversation_id="166">
    <ts>2019-01-16T19:29:11.518600</ts>
    <user>Earnest</user>
    <text>then any use of Json in your code will refer to the Json.Decode module</text>
  </message>
  <message conversation_id="167">
    <ts>2019-01-16T23:19:30.519800</ts>
    <user>Marcus</user>
    <text>With Elm 0.19, does anyone know where the Http.uriEncode method went? I'm building a querystring and need to make sure the params I add to it will cooperate.</text>
  </message>
  <message conversation_id="167">
    <ts>2019-01-16T23:22:31.520100</ts>
    <user>Marcus</user>
    <text>Looks like it's in the Url package now.</text>
  </message>
  <message conversation_id="168">
    <ts>2019-01-17T01:26:54.520200</ts>
    <user>Maryrose</user>
    <text>The `Url.Builder` is the new way to build your urls. Or if that proves hard when migrating `percentEncode` is also available</text>
  </message>
  <message conversation_id="169">
    <ts>2019-01-17T01:45:37.520700</ts>
    <user>Zachary</user>
    <text>What is the best way to build elm package (not an application) on a CI?</text>
  </message>
  <message conversation_id="169">
    <ts>2019-01-17T01:50:27.520900</ts>
    <user>Earnest</user>
    <text>I just call elm-make: &lt;https://github.com/prikhi/paginate/blob/master/.travis.yml#L26&gt;</text>
  </message>
  <message conversation_id="169">
    <ts>2019-01-17T01:53:44.521300</ts>
    <user>Zachary</user>
    <text>Maybe I should use jq to extract all exposed modules</text>
  </message>
  <message conversation_id="169">
    <ts>2019-01-17T01:55:45.521600</ts>
    <user>Zachary</user>
    <text>Ah it requires all modules live in `src`</text>
  </message>
  <message conversation_id="169">
    <ts>2019-01-17T01:56:05.521800</ts>
    <user>Zachary</user>
    <text>:man-facepalming:</text>
  </message>
  <message conversation_id="169">
    <ts>2019-01-17T02:05:23.522200</ts>
    <user>Zachary</user>
    <text>there's no way to configure source-directories for packages?</text>
  </message>
  <message conversation_id="170">
    <ts>2019-01-17T03:05:56.524700</ts>
    <user>Yolande</user>
    <text>I'm confused about elm/color. Here's a repo: &lt;https://github.com/elm/color&gt;. Here it looks like it's part of the standard library: &lt;https://package.elm-lang.org/packages/elm-lang/core/latest/Color&gt;. `import Color` says "I cannot find that module!". `elm install elm/color` says PACKAGE NOT FOUND. How do I use elm/color in my project?</text>
  </message>
  <message conversation_id="170">
    <ts>2019-01-17T03:16:37.526200</ts>
    <user>Earlean</user>
    <text>&lt;@Yolande&gt; it was in core in Elm 0.18, it's was moved out of core, but never released</text>
  </message>
  <message conversation_id="170">
    <ts>2019-01-17T03:17:14.526700</ts>
    <user>Earlean</user>
    <text>&lt;https://package.elm-lang.org/packages/avh4/elm-color/latest/&gt; is a fork of that package</text>
  </message>
  <message conversation_id="170">
    <ts>2019-01-17T03:18:04.526800</ts>
    <user>Velia</user>
    <text>no

&lt;https://github.com/elm/compiler/blob/master/docs/elm.json/package.md&gt;</text>
  </message>
  <message conversation_id="169">
    <ts>2019-01-17T03:42:20.527200</ts>
    <user>Iona</user>
    <text>&lt;@Zachary&gt; I’ll get working on changing that</text>
  </message>
  <message conversation_id="169">
    <ts>2019-01-17T03:53:51.529400</ts>
    <user>Dorsey</user>
    <text>There uesd to be an archive of Elm Slack IIRC at &lt;https://elmlang.slackarchive.io/&gt; but now it redirects to the source repo on GitHub. Is there anything like that around? I need to find a link to the Ellie example I was discussing here few months ago :neutral_face:</text>
  </message>
  <message conversation_id="169">
    <ts>2019-01-17T03:56:36.529600</ts>
    <user>Zachary</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="171">
    <ts>2019-01-17T04:25:24.529900</ts>
    <user>Yolande</user>
    <text>cool, thanks &lt;@Earlean&gt;</text>
  </message>
  <message conversation_id="172">
    <ts>2019-01-17T04:44:33.530400</ts>
    <user>Yang</user>
    <text>what does it mean that elm has drag and drop support in the standard library? im watching this video: &lt;https://youtu.be/RFrKffrKCeU?t=281&gt;</text>
  </message>
  <message conversation_id="172">
    <ts>2019-01-17T04:48:57.531900</ts>
    <user>Lynne</user>
    <text>I think she means possibility to add arbitrary event handlers (with help of `Html.Events.on` and other functions from that module), possibly comparing with earlier versions of Elm where there was no such possibility (I am guessing)</text>
  </message>
  <message conversation_id="172">
    <ts>2019-01-17T04:51:19.532600</ts>
    <user>Lynne</user>
    <text>Or may be she refers to &lt;https://package.elm-lang.org/packages/norpan/elm-html5-drag-drop/&gt; for some reason calling it "standard library"</text>
  </message>
  <message conversation_id="172">
    <ts>2019-01-17T04:51:56.533200</ts>
    <user>Lynne</user>
    <text>The main thing here is that implementing drag and drop in Elm is possible nowadays without single line of JS code</text>
  </message>
  <message conversation_id="173">
    <ts>2019-01-17T05:04:46.533900</ts>
    <user>Rosalind</user>
    <text>&lt;@Dorsey&gt; - nope, once the message disappears behind the 10,000 limit you won't be able to see it</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:17:30.535400</ts>
    <user>Leonore</user>
    <text>Hey all, what would you name a ternary conditional function in Elm? So something that takes a condition and returns the second argument if true, and the third if not.</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:17:44.535700</ts>
    <user>Leonore</user>
    <text>The "?" operator in C# basically</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:18:54.536800</ts>
    <user>Virgie</user>
    <text>because `if` is an expression (and not a statement, like in most c-like languages) we can just use it as the ternary operator</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:18:57.537000</ts>
    <user>Danika</user>
    <text>if then else operates how the ternary does in other languages </text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:19:40.537700</ts>
    <user>Virgie</user>
    <text>and writing the `if` out is common and (in my opinion) clearer than hiding it behind a function</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:20:04.538100</ts>
    <user>Leonore</user>
    <text>But I want it on the same line :sweat_smile:</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:20:27.538500</ts>
    <user>Danika</user>
    <text>Then dont use elm format :sweat_smile:</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:22:10.538700</ts>
    <user>Nana</user>
    <text>&lt;@Leonore&gt; &lt;https://elmlang.slack.com/archives/C0CJ671HU/p1547661097665400&gt;</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:23:21.539800</ts>
    <user>Leonore</user>
    <text>Oh wow hahah</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:23:36.540300</ts>
    <user>Nana</user>
    <text>&lt;@Leonore&gt; there is an issue about it on GitHub, seems like the author of elm-format is willing to allow single-line ifs, someone just needs to update the code</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:23:49.540500</ts>
    <user>Leonore</user>
    <text>Ah cool</text>
  </message>
  <message conversation_id="174">
    <ts>2019-01-17T08:23:59.540700</ts>
    <user>Leonore</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="175">
    <ts>2019-01-17T12:53:13.541200</ts>
    <user>Elease</user>
    <text>Hi elm community! I’m co-organizing an elm conference in Chicago on April 26.

If you like talking about elm, then you should apply to speak at `Elm in the Spring`!

Our CFP is open for two more weeks (closing 1/31/19). Slots are 30 min and we’re reserving two of those spots for first-time speakers.

&lt;https://www.papercall.io/elm-in-the-spring-2019&gt;

Questions? Feel free to email &lt;mailto:hello@elminthespring.org|hello@elminthespring.org&gt;.</text>
  </message>
  <message conversation_id="175">
    <ts>2019-01-17T18:36:44.542400</ts>
    <user>Ruthann</user>
    <text>&lt;@Elease&gt; you should post this in &lt;#C0K384K4Y|news-and-links&gt; so it doesn’t get lost so quickly as it will in &lt;#C0CJ3SBBM|general&gt;</text>
  </message>
  <message conversation_id="176">
    <ts>2019-01-17T21:43:52.544400</ts>
    <user>Lesli</user>
    <text>Has anyone else run into a case where `preventDefaultOn` event helper doesn't work as expected? I have this code that I use as a generic `onPaste` event, it's meant to prevent the content being pasted into the target element but the JS equivalent of `e.preventDefault` doesn't occur..

```
onPaste : (Decode.Value -&amp;gt; msg) -&amp;gt; Html.Attribute msg
onPaste msg =
    preventDefaultOn "paste" &amp;lt;|
        Decode.map (\m -&amp;gt; ( m, True )) &amp;lt;|
            Decode.map msg &amp;lt;|
                &lt;http://Decode.at|Decode.at&gt; [ "clipboardData" ] Decode.value
```</text>
  </message>
  <message conversation_id="176">
    <ts>2019-01-17T21:48:35.544600</ts>
    <user>Lesli</user>
    <text>If the code is changed to say `preventDefaultOn "copy"` you're not able to copy the text from that element.</text>
  </message>
  <message conversation_id="176">
    <ts>2019-01-18T03:33:43.547300</ts>
    <user>Yang</user>
    <text>&lt;@Lesli&gt; this can mean the preventDefaultOn function is broken. Test if it works in pure js. If it does, then maybe use the `custom` function. This might not work also because with the HTML module, the event is placed on a specific DOM element - is not global. But if it works in js it should be a simple straight forward translation.</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:39:45.548500</ts>
    <user>Renda</user>
    <text>Can I somehow "watch" elm debugger from JavaScript? Like, getting events when stepping through the debugger? I do not want to send anything to Elm, but I would like to get the model in JS while using the debugger.</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:45:22.551800</ts>
    <user>Nana</user>
    <text>&lt;@Renda&gt; you could do this:
```
main =
    Browser.element
        { init = init
        , update = Debug.log "update" update
        , subscriptions = \_ -&amp;gt; Sub.none
        , view = view &amp;gt;&amp;gt; toUnstyled
        }
```</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:46:08.552200</ts>
    <user>Danika</user>
    <text>Oh hey thats pretty clever actually </text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:49:17.555100</ts>
    <user>Elyse</user>
    <text>Are you not logging the update function like this?
I figured it would have been something like this:
```
main =
    Browser.element
        { init = init
        , update = (\msg model -&amp;gt; Debug.log "update"  &amp;lt;| update msg model)
        , subscriptions = \_ -&amp;gt; Sub.none
        , view = view &amp;gt;&amp;gt; toUnstyled
        }
```
(but nice trick :+1:)</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:49:34.555400</ts>
    <user>Nana</user>
    <text>btw, another trick that I heard from &lt;@Carman&gt; is that you can wrap your update function so that it sends the model or part of the model to JS through a port on every update, enabling "observable" style stuff</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:51:01.557200</ts>
    <user>Renda</user>
    <text>Oh very cool stuff &lt;@Nana&gt; thank you. I did not think about Debug like it would be calling the update function, thought it was just some "magic" going on behind the scenes, this is great and makes sense even to a newbie like me :smile:</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:54:05.559500</ts>
    <user>Renda</user>
    <text>That port idea sounds good too. Since I am using a port to update my JS I could just re-use my code as it is now!</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:54:58.560200</ts>
    <user>Renda</user>
    <text>Maybe you could show an example on how &lt;@Carman&gt; ?</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:55:06.560300</ts>
    <user>Nana</user>
    <text>&lt;@Elyse&gt; ah right, yes it should be `update = \msg model -&amp;gt; Debug.log "update" &amp;lt;| update msg model`</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T04:59:48.562300</ts>
    <user>Nana</user>
    <text>although it just makes a huge mess in the console when your model is big :stuck_out_tongue: probably better to just log specific stuff in that case</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T05:24:59.566200</ts>
    <user>Nana</user>
    <text>&lt;@Renda&gt; here's an example of "watching" the model and sending to js :slightly_smiling_face:
&lt;https://ellie-app.com/4tRKwNW9F2Ja1&gt;</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T05:25:44.566900</ts>
    <user>Nana</user>
    <text>maybe it should be moved out into it's own function instead of `let..in` though</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T05:27:45.568100</ts>
    <user>Nana</user>
    <text>this "watch" approach would be perfect if you're using a pub/sub client in JS I think</text>
  </message>
  <message conversation_id="178">
    <ts>2019-01-18T06:21:31.568700</ts>
    <user>Charmaine</user>
    <text>can there by some kind of performance hit if a custom type has hundreds of constructors?</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:38:41.570000</ts>
    <user>Nana</user>
    <text>&lt;@Charmaine&gt; seems unlikely to me, I assume that's just like defining hundreds of top-level functions? they're not like a part of the type which gets instantiated</text>
  </message>
  <message conversation_id="178">
    <ts>2019-01-18T06:40:28.571300</ts>
    <user>Charmaine</user>
    <text>that makes sense - i'm autogenerating keys for i18n texts and wanted to check beforehand if it might have troubles</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:41:26.571900</ts>
    <user>Nana</user>
    <text>though if you were to case on them it could be an issue perhaps?</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:42:04.572400</ts>
    <user>Nana</user>
    <text>like "is this value one of these hundred things"</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:43:44.572800</ts>
    <user>Charmaine</user>
    <text>yeah it's gonna do the case when selecting the id so that's what i was worried about</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:45:51.573400</ts>
    <user>Charmaine</user>
    <text>it seems that elm case compiles to js switch statement so i guess i'll have to check potential performance issue there</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:52:35.574600</ts>
    <user>Huong</user>
    <text>In our current (0.18 still) env, we use a huge union type for i18n texts. There's a huge compile-time hit, but performance at runtime is not an issue at all.</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:53:31.574900</ts>
    <user>Huong</user>
    <text>(by huge, I mean ~1k constructors)</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:54:11.575500</ts>
    <user>Nana</user>
    <text>&lt;@Huong&gt; why a union type rather than a record?</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:54:20.575800</ts>
    <user>Huong</user>
    <text>Compile time in 0.19 shouldn't be an issue, though</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T06:55:42.577200</ts>
    <user>Huong</user>
    <text>Not sure, we've been doing it this way since Elm 0.15 or .16, and we haven't really had the courage to try and change it</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:04:36.578400</ts>
    <user>Timika</user>
    <text>&lt;@Huong&gt; That’s super interesting! Do you have some more details written down somewhere?</text>
  </message>
  <message conversation_id="179">
    <ts>2019-01-18T07:05:55.580500</ts>
    <user>Renda</user>
    <text>&lt;@Kaylee&gt; hey thanks for the Ellie example. However I think I did not explain myself correctly. What I wish to do is when I go through the debug timetravel I want the clicked state to be send through the port. So that I can update my JS to the time travelled state. Does that make sense?</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:06:26.581700</ts>
    <user>Danika</user>
    <text>does timetravel not trigger `update`</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:06:42.582100</ts>
    <user>Huong</user>
    <text>&lt;@Timika&gt; about the entire thing or just the translation system? (to be fair, I'm not super happy with it, and reworking that bit is on my every-expanding-todo-list :wink: )</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:07:13.582700</ts>
    <user>Timika</user>
    <text>I’m most interested in the t10n stuff as this is something we might have to do soon as well. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:08:29.584100</ts>
    <user>Timika</user>
    <text>Regardless of how awesome the solution is, having first-hand experience reports always helps when evaluating a possible solution.</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:08:50.584700</ts>
    <user>Renda</user>
    <text>&lt;@Danika&gt; it does not seem to trigger sending messages through a port. Take a look, this is the example Simon made for me, and I do not get console logs while going through the debugger:
&lt;https://ellie-app.com/4tRKwNW9F2Ja1&gt;</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:09:48.585000</ts>
    <user>Danika</user>
    <text>Oh interesting</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:10:01.585700</ts>
    <user>Danika</user>
    <text>Fire alarm just went off in the office so I’m away from a computer atm :dizzy_face:</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:10:33.586100</ts>
    <user>Renda</user>
    <text>Oh damn</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:11:05.586600</ts>
    <user>Danika</user>
    <text>Most oh damn is walking down four flights of stairs :joy:</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:11:40.587000</ts>
    <user>Renda</user>
    <text>Dying in fire or walking down its a though one</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:13:33.587800</ts>
    <user>Danika</user>
    <text>There’s probably not a fire, there’s construction work everywhere they probably just set it off by accident</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:13:47.588300</ts>
    <user>Danika</user>
    <text>Or maybe some undergrad has set something on fire in the electronics lab actually..</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:19:27.588400</ts>
    <user>Jin</user>
    <text>Sounds like &lt;https://www.gizra.com/content/elm-i18n-type-safety/&gt;</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T07:32:25.588700</ts>
    <user>Earlean</user>
    <text>The time traveling debugger doesn't run Cmds as this is unlikely to result in something that works.</text>
  </message>
  <message conversation_id="180">
    <ts>2019-01-18T07:53:16.589000</ts>
    <user>Renda</user>
    <text>Well thats unfortunate because I do have a usecase. What are my options then? Is it possible to expose the model read only to JS ? So I can see it change?</text>
  </message>
  <message conversation_id="180">
    <ts>2019-01-18T08:01:53.589200</ts>
    <user>Earlean</user>
    <text>There isn't. </text>
  </message>
  <message conversation_id="180">
    <ts>2019-01-18T08:02:28.589400</ts>
    <user>Earlean</user>
    <text>The thing you want to do isn't something the debugger was designed to support</text>
  </message>
  <message conversation_id="180">
    <ts>2019-01-18T08:15:49.589600</ts>
    <user>Renda</user>
    <text>Hm ok. I guess I just have to keep track of the model in both JS and Elm then.</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T10:21:37.591300</ts>
    <user>Anna</user>
    <text>Migrating a SPA to 0.19 I'm getting the following error: ``Something is off with the body of the `view` definition:

25|&amp;gt;    { title = "Gransden Show"
26|&amp;gt;    , body = body model
27|&amp;gt;    }

The body is a record of type:

    { body : List (Html Msg), title : String }

But the type annotation on `view` says it should be:

    Document Msg``</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T10:23:01.592100</ts>
    <user>Anna</user>
    <text>but the record type quoted looks exactly the same as Document to me</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T10:23:33.592500</ts>
    <user>Walton</user>
    <text>did you check the type of the function `body`</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T10:23:35.592700</ts>
    <user>Walton</user>
    <text>?</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T10:24:58.593100</ts>
    <user>Anna</user>
    <text>It's `body : Model -&amp;gt; List (Html Msg)`</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T10:29:09.593800</ts>
    <user>Elyse</user>
    <text>Are you using elm-css or elm/html?</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T10:29:27.594000</ts>
    <user>Anna</user>
    <text>Both</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T10:31:10.595400</ts>
    <user>Elyse</user>
    <text>I'm guessing your body returns elm-css's Html then, hence the confusion and a non-optimal error.
Try
```
body = [ toUnstyled &amp;lt;| div [] [ body model ] ]
```
(where `toUnstyled` is imported from `Html.Styled`)</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T10:35:08.596300</ts>
    <user>Anna</user>
    <text>Thank you, I was obviously been using elm-css in 0.18 without completely understanding it!</text>
  </message>
  <message conversation_id="177">
    <ts>2019-01-18T11:01:31.596600</ts>
    <user>Elease</user>
    <text>Will do, thanks!</text>
  </message>
  <message conversation_id="181">
    <ts>2019-01-18T12:45:36.600700</ts>
    <user>Allyn</user>
    <text>Hello. Is there a link between this thread: (&lt;https://discourse.elm-lang.org/t/input-select-not-available-in-elm-ui/2874&gt;) which basically explains dropdown are bad from a UX point of view, and the fact the select tag seems less well integrated in elm than other ones? By this I mean you have to use `on "change"`, as there is no "onChange" function in Html.events.</text>
  </message>
  <message conversation_id="182">
    <ts>2019-01-18T12:56:49.601400</ts>
    <user>Jalisa</user>
    <text>Hi everyone ! :grinning:
The Early Birds Tickets for the Elm Europe Conference are on ! And it’s happening right here : &lt;http://2019.elmeurope.org|2019.elmeurope.org&gt; ! :tada::champagne:
&lt;https://twitter.com/elm_europe/status/1086319592383922176&gt;</text>
  </message>
  <message conversation_id="181">
    <ts>2019-01-18T13:19:55.601800</ts>
    <user>Nana</user>
    <text>&lt;@Allyn&gt; you can use `onInput` on select elements &lt;https://ellie-app.com/4tZS6gHvRKFa1&gt;</text>
  </message>
  <message conversation_id="181">
    <ts>2019-01-18T14:49:21.602600</ts>
    <user>Allyn</user>
    <text>I definitely didn't know that! Thank you &lt;@Nana&gt;</text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-18T15:01:34.604800</ts>
    <user>Hyacinth</user>
    <text>I've got a parser that I've written to accept input and produce a url with specific formatting:
```
parser : Parser String
parser =
    succeed concat5
        |= scheme
        |= subdomain
        |= shopifyStore
        |= suffix
        |= admin
```

It works, but the `concat5` function is just taking the five string arguments and (++) them together. I wanted to use something like `String.concat` to make this better, but I couldn't figure out a way given that this constructor needs five arguments. Is there a simple solution that I'm overlooking?</text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-18T15:02:45.605100</ts>
    <user>Virgie</user>
    <text>yes, it's &lt;https://package.elm-lang.org/packages/elm/parser/latest/Parser#getChompedString&gt;</text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-18T15:03:20.605400</ts>
    <user>Hyacinth</user>
    <text>Ha, awesome. I even used that in one of the sub-parsers.</text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-18T15:03:22.605600</ts>
    <user>Hyacinth</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="184">
    <ts>2019-01-18T15:21:17.607100</ts>
    <user>Lindsey</user>
    <text>Is there some kind of feed someplace that shows new elm packages being published/updated?</text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-18T15:42:33.607900</ts>
    <user>Virgie</user>
    <text>don't think so. Could be a nice feature for `elm reactor` (or similar tools) to just see (based on your elm.json) if there are new releases of your dependencies</text>
  </message>
  <message conversation_id="185">
    <ts>2019-01-18T15:48:17.608300</ts>
    <user>Loida</user>
    <text>For this you can use &lt;https://www.npmjs.com/package/elm-outdated&gt;</text>
  </message>
  <message conversation_id="186">
    <ts>2019-01-18T17:42:57.609800</ts>
    <user>Sofia</user>
    <text>Is there a way to chain a `Task` into a `Cmd`?
Specifically, I need to get the current time, and then send a value through a port based on that current time. I'd love to use `Task.andThen` but I don't know how to pass in a `Cmd` to that</text>
  </message>
  <message conversation_id="186">
    <ts>2019-01-18T17:54:24.612200</ts>
    <user>Alleen</user>
    <text>It sounds like you need to create the Cmd in your update function. after you get the Time update, you return a new command

```
type Message
   = Time YourTime

update msg model =
    case msg of
        Time yourTime -&amp;gt;
            (model, YourCommand yourTime)
```</text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-19T02:15:03.615200</ts>
    <user>Marcelino</user>
    <text>I am thinking of creating a `elm/parser` cookbook that would hold a curated list of examples that illustrate how to use the `elm/parser` package. I am discussing it here to see if similar efforts are already well established, to see if there is any interest in a cookbook and if people are willing to contribute to it.</text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-19T02:15:33.615600</ts>
    <user>Marcelino</user>
    <text>So, would a `elm/parser` cookbook be of interest?</text>
  </message>
  <message conversation_id="187">
    <ts>2019-01-19T04:09:05.617100</ts>
    <user>Kyung</user>
    <text>That would be very helpful! Just today I ran into a problem with using the parser which I haven’t figured out yet. I’d be willing to help with some basic examples. </text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-19T04:12:33.617300</ts>
    <user>Bert</user>
    <text>Since ports are always just `Cmd`s and not `Task`s, you can't chain the effects. Only Tasks can be chained, and there's no way to "backtrack" from a Cmd to a Task.</text>
  </message>
  <message conversation_id="187">
    <ts>2019-01-19T04:14:07.617500</ts>
    <user>Bert</user>
    <text>That said, why not do the side effect in the port handling code, in JS? You can get the time there and do the rest of the port stuff then.</text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-19T06:03:12.619600</ts>
    <user>Bebe</user>
    <text>Definitely. Specially the docs and usage around backtracking, commit, are not very useful, and the advanced module is a bit daunting even though it seems very helpful</text>
  </message>
  <message conversation_id="183">
    <ts>2019-01-19T07:40:24.620100</ts>
    <user>Vilma</user>
    <text>I’d say so</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T07:46:45.621000</ts>
    <user>Danika</user>
    <text>on the topic of `elm/parser`, how difficult would it be to parse *and run* elm code</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T07:50:15.621800</ts>
    <user>Virgie</user>
    <text>it depends on what you want to run (and how). Evaluating simple expressions (like numbers, strings, ifs) would not be very hard.</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T07:50:32.622300</ts>
    <user>Virgie</user>
    <text>but type inference is non-trivial, and much of elm depends on kernel code which you'd have to re-implement</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T07:57:48.624900</ts>
    <user>Lynne</user>
    <text>Could anyone tell me how is it possible? I have an `on "focus" ...` handler which sends `SetFocus` message which logs a `Debug.log "UPDATE" model` when it is processed by `update`. I have also `Debug.log "VIEW" model` in the `view` function and I also see this message in the console. But for some weird reason VIEW message comes before the UPDATE message and, naturally, I see that outdated model is rendered.</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T07:58:17.625500</ts>
    <user>Lynne</user>
    <text>Why in the heaven `view` is not triggered after `update` has changed the model?</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T08:08:17.625600</ts>
    <user>Danika</user>
    <text>Essentially I'd like to embed a DSL into an Elm app I'm building. The scope would be tightened (only certain functions can be called in the DSL and a sequence/structure of calls is enforced) such that essentially if I had

```type alias A = 
  { bs : List B }

type alias B =
  { foo : Int, bar : String }
```

You'd be able to input in a textarea:

```
createA [
  createB 102 "hello",
  createB 0 "world",
  ...
}
```

Which should parse into valid data and sent on its merry way however I decide in Elm. This, i believe, is somewhat trivial to do with the parser, but consider I now have a function:

```
setFoo : Int -&amp;gt; B -&amp;gt; B
setFoo newFoo b =
  { b | foo = newFoo }
```

I'd like you to be able to write:

```createA [
  createB
  |&amp;gt; setFoo 1020201
  |&amp;gt; setBar "hello".
  createB 0 "world",
  ...
}
```

You can assume that the way `createB` and the `setX` functions are valid real Elm code you could write in my app.</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T08:13:36.625900</ts>
    <user>Virgie</user>
    <text>because elm is a statically typed language such a DSL would not be very flexible. For instance to call elm functions, you'd need a way of mapping the function name to the actual function</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T08:14:35.626100</ts>
    <user>Virgie</user>
    <text>and that is hard because you can't store it in a uniform way, like a `Dict String Function` because the function type is different between like `+` or `++`</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T08:15:14.626300</ts>
    <user>Virgie</user>
    <text>(you'd need some casting mechanism for this, or quantification, anyway more advanced type-level features than elm has)</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T08:15:35.626500</ts>
    <user>Virgie</user>
    <text>so mixing elm code with interpreted code in a flexible way is hard/not feasible</text>
  </message>
  <message conversation_id="188">
    <ts>2019-01-19T08:16:07.626700</ts>
    <user>Danika</user>
    <text>Hmm, that is discouraging but makes sense.</text>
  </message>
  <message conversation_id="189">
    <ts>2019-01-19T09:17:57.628100</ts>
    <user>Lynne</user>
    <text>So it must be connected to how Elm is batching model updates to only call `view` once per animation frame. Adding JS

```
        this.addEventListener('focus', () =&amp;gt; {
            setTimeout(() =&amp;gt; this.dispatchEvent(new CustomEvent('delayed-focus')), 5);
        });
```
and subscribing to `delayed-focus` in Elm fixes the issue</text>
  </message>
  <message conversation_id="189">
    <ts>2019-01-19T09:18:55.628700</ts>
    <user>Lynne</user>
    <text>Is anyone aware of any Github issue this could be added to?</text>
  </message>
  <message conversation_id="190">
    <ts>2019-01-19T10:17:24.629900</ts>
    <user>Jae</user>
    <text>Hi, I installed `NoRedInk/elm-debug-controls-without-datepicker` and now I'm consistently getting this error ```elm.exe: Map.!: given key is not an element in the map
CallStack (from HasCallStack):
  error, called at libraries\containers\Data\Map\Internal.hs:603:17 in containers-0.5.10.2:Data.Map.Internal
 @ ./src/index.js 2:0-33 4:0-3
 @ multi ../AppData/Local/Yarn/Data/global/node_modules/create-elm-app/config/polyfills.js ../AppData/Local/Yarn/Data/global/node_modules/create-elm-app/scripts/utils/webpackHotDevClient.js ../AppData/Local/Yarn/Data/global/node_modules/react-error-overlay/lib/index.js ./src/index.js```
Removing `elm-stuff` and clearing the package cache in appdata doesn't help.</text>
  </message>
  <message conversation_id="190">
    <ts>2019-01-19T10:20:51.632200</ts>
    <user>Earlean</user>
    <text>&lt;@Jae&gt; it's a known bug in the compiler. If you're using the `--debug` flag with the compiler then not using that may solve the problem.</text>
  </message>
  <message conversation_id="190">
    <ts>2019-01-19T10:22:17.634100</ts>
    <user>Earlean</user>
    <text>If you're not using the `--debug` flag and still seeing that error then you've encountered a version of the bug for which there isn't currently a work around.</text>
  </message>
  <message conversation_id="190">
    <ts>2019-01-19T10:23:43.634900</ts>
    <user>Jae</user>
    <text>Alright thanks, I'll try that</text>
  </message>
  <message conversation_id="190">
    <ts>2019-01-19T10:31:11.635900</ts>
    <user>Jae</user>
    <text>Yup that works. I guess it's a little ironic that installing a package designed to help with debugging has led me to disable the debugger</text>
  </message>
  <message conversation_id="191">
    <ts>2019-01-19T12:15:12.636600</ts>
    <user>Jenice</user>
    <text>Anyone have an update on this bug :sob:</text>
  </message>
  <message conversation_id="191">
    <ts>2019-01-19T12:21:27.638100</ts>
    <user>Virgie</user>
    <text>it has been very quiet on that front. Even if it were fixed today there are maybe some other things that it would also make sense to include in a 0.19.1 (adding/upgrading packages for instance) release so I'd guess it's not coming very soon</text>
  </message>
  <message conversation_id="192">
    <ts>2019-01-19T12:59:38.638700</ts>
    <user>Loyce</user>
    <text>Hi everyone - are there recommendations on best Elm book that covers SPAs in detail from the ground up in 0.19?</text>
  </message>
  <message conversation_id="193">
    <ts>2019-01-19T13:39:21.639000</ts>
    <user>Jana</user>
    <text>Yes!</text>
  </message>
  <message conversation_id="192">
    <ts>2019-01-19T14:27:20.639500</ts>
    <user>Allyn</user>
    <text>I would say “Practical Elm for a Busy Developer” &lt;https://korban.net/elm/book/&gt;</text>
  </message>
  <message conversation_id="193">
    <ts>2019-01-19T20:30:33.641500</ts>
    <user>Marlin</user>
    <text>how can I generate a random value for use in a Task? I see that &lt;https://package.elm-lang.org/packages/elm/random/latest/Random&gt; has a `generate` function that returns a `Cmd`, but I’m looking for a `Task`</text>
  </message>
  <message conversation_id="193">
    <ts>2019-01-19T20:34:03.641600</ts>
    <user>Marlin</user>
    <text>I also found &lt;https://gist.github.com/JoelQ/c93a8f6a81262ff12c93ab2ff859f8e5&gt; but as far as I can tell that produces the same value every time, it is not actually random at all</text>
  </message>
  <message conversation_id="193">
    <ts>2019-01-19T21:09:38.641800</ts>
    <user>Earlean</user>
    <text>&lt;@Marlin&gt; there isn't a way to do it as a Task and have the runtime manage the seed, but you can `step` and generator in a Task if you manage the seed yourself</text>
  </message>
  <message conversation_id="193">
    <ts>2019-01-19T21:18:07.642000</ts>
    <user>Marlin</user>
    <text>okay, thanks</text>
  </message>
  <message conversation_id="193">
    <ts>2019-01-19T21:42:14.642400</ts>
    <user>Carman</user>
    <text>&lt;@Marlin&gt; The gist you found (written for 0.18) uses the current time as the seed. It should give you different results every time unless you've frozen you clock somehow</text>
  </message>
  <message conversation_id="194">
    <ts>2019-01-19T21:48:35.642600</ts>
    <user>Carman</user>
    <text>Here's a working example for 0.19: &lt;https://ellie-app.com/4vCp7Vzz5cNa1&gt;</text>
  </message>
  <message conversation_id="194">
    <ts>2019-01-19T21:49:00.642800</ts>
    <user>Carman</user>
    <text>Note that I'm executing it via `Task.perform`, _not_ `Random.generate`</text>
  </message>
  <message conversation_id="193">
    <ts>2019-01-19T21:53:47.643100</ts>
    <user>Marlin</user>
    <text>ah, sorry I missed the time, I must have ~called it twice in one second~ been unlucky (and obviously I didn’t read it very carefully!)</text>
  </message>
  <message conversation_id="193">
    <ts>2019-01-19T21:54:06.643300</ts>
    <user>Marlin</user>
    <text>thanks for the updated example, this is helpful</text>
  </message>
  <message conversation_id="193">
    <ts>2019-01-19T21:56:12.643600</ts>
    <user>Marlin</user>
    <text>for now, I’m probably going to have to leave out randomness and keep a `TODO` comment, since it doesn’t really make sense for consumers of the module I’m writing to have to worry about helping manage the seed state</text>
  </message>
  <message conversation_id="195">
    <ts>2019-01-20T00:25:01.644300</ts>
    <user>Danika</user>
    <text>What does the module do</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:10:10.650300</ts>
    <user>Florencia</user>
    <text>I'm musing about what pattern is this... is it an `andThen`?
```
andThen : (model -&amp;gt; (model, cmd)) -&amp;gt; (model, cmd) -&amp;gt; (model, cmd)
andThen modelToModelCmdTuple (model, cmd) =
    let
        (newModel, anotherCmd) =
            modelToModelCmdTuple model
    in
        ( newModel
        , Cmd.batch [cmd, anotherCmd]
        )
```
ie.
```
model
    |&amp;gt; doStuffWithCmds
    -- we have `(model, cmd)` now
    -- but `doDifferentStuffWithCmds` needs a `model`
    -- so we use this combinator or whatever it is
    |&amp;gt; andThen doDifferentStuffWithCmds
```</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:11:11.651000</ts>
    <user>Florencia</user>
    <text>&lt;@Leoma&gt; &lt;@Ashton&gt; Maybe you folks have some insight into it, given our previous cmd-related discussions? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:13:15.652600</ts>
    <user>Florencia</user>
    <text>monadic `andThen` is `(a -&amp;gt; Monad b) -&amp;gt; Monad a -&amp;gt; Monad c`
ie. `Json.Decode.andThen : (a -&amp;gt; Decoder b) -&amp;gt; Decoder a -&amp;gt; Decoder b`
so ... the type signature probably checks out, right?</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:13:46.653400</ts>
    <user>Carrol</user>
    <text>You seem to have extra parans in the signature</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:14:08.654300</ts>
    <user>Florencia</user>
    <text>the right-associativity makes it a non-problem though I think</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:14:12.654500</ts>
    <user>Florencia</user>
    <text>it's interesting there's no `Cmd.andThen` in any of our packages! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:14:13.654600</ts>
    <user>Carrol</user>
    <text>`andThen` sounds right to me.</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:14:28.655000</ts>
    <user>Florencia</user>
    <text>but yeah I should fix the parens</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:14:58.655600</ts>
    <user>Carrol</user>
    <text>We have the same:
```
andThen fn ( model, cmd ) =
    let
        ( updatedModel, newCmd ) =
            fn model
    in
    ( updatedModel, Cmd.batch [ cmd, newCmd ] )
```</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:15:05.655700</ts>
    <user>Florencia</user>
    <text>&lt;@Zona&gt; How could have you missed this golden opportunity :troll:</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:19:23.656300</ts>
    <user>Florencia</user>
    <text>I stand corrected: there's one package that does this:
&lt;https://package.elm-lang.org/packages/the-sett/elm-update-helper/1.4.1/Update2#eval&gt;</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:20:02.656500</ts>
    <user>Carrol</user>
    <text>This one too &lt;https://package.elm-lang.org/packages/Fresheyeball/elm-return/latest/Return#andThen&gt;</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:21:30.656700</ts>
    <user>Florencia</user>
    <text>nice</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:21:37.657100</ts>
    <user>Florencia</user>
    <text>I wasn't good enough with the fuzzy search :upside_down_face:</text>
  </message>
  <message conversation_id="196">
    <ts>2019-01-20T16:25:56.657800</ts>
    <user>Florencia</user>
    <text>Well, now there's one more place for it :slightly_smiling_face: &lt;https://package.elm-lang.org/packages/Janiczek/cmd-extra/latest/Cmd-Extra#andThen&gt;</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:39:56.658200</ts>
    <user>Ashton</user>
    <text>Yeah looks like `andThen` to me.</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:51:44.660800</ts>
    <user>Ashton</user>
    <text>Theres probably some fancy FP word for an `andThen` that binds back onto the same type.</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:51:59.661300</ts>
    <user>Agustin</user>
    <text>`map`?</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:53:24.662500</ts>
    <user>Ashton</user>
    <text>No. I mean. The model/cmd tuple goes `(m -&amp;gt; M m) -&amp;gt; M m -&amp;gt; M m`. Lower case `m` all the way through. Unlike the normal case of going `a -&amp;gt; M b`, where it goes from type `a` to type `b`</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:53:55.663200</ts>
    <user>Florencia</user>
    <text>oh I see what you mean</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:54:05.663600</ts>
    <user>Florencia</user>
    <text>something-something-morphism :sweat_smile:</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:54:40.664800</ts>
    <user>Ashton</user>
    <text>Actually, I started a conversation a few months back in here asking if `(a -&amp;gt; a) -&amp;gt; M a -&amp;gt; M a` is still “mapping”. And there were disagreeing voices, but I think team “yes” won.</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:55:05.665200</ts>
    <user>Ashton</user>
    <text>Yeah exactly. Haha. A something-morphism.</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:55:08.665500</ts>
    <user>Ashton</user>
    <text>Endo-thing.</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:57:15.666500</ts>
    <user>Florencia</user>
    <text>Is this what ordinary programmers trying to look like category theorists look like? :joy:</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T16:57:28.666800</ts>
    <user>Florencia</user>
    <text>(honestly, I love this discussion)</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T17:01:06.667700</ts>
    <user>Carman</user>
    <text>Hmmm I think the term might be "monomorphic" (one shape)?</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T17:01:47.668300</ts>
    <user>Carman</user>
    <text>Although I've usually seen the term used for functions that had a concrete type like `String.map : (Char -&amp;gt; Char) -&amp;gt; String -&amp;gt; String`</text>
  </message>
  <message conversation_id="197">
    <ts>2019-01-20T17:04:39.668800</ts>
    <user>Agustin</user>
    <text>There is this theory… of the möbius… where the types become a loop.</text>
  </message>
  <message conversation_id="198">
    <ts>2019-01-20T17:09:22.671000</ts>
    <user>Jeniffer</user>
    <text>Is there a way to replace elm-community/elm-date-extra in 0.18 in preparation for 0.19? Specifically I need the utc/posix functionality in 0.18</text>
  </message>
  <message conversation_id="198">
    <ts>2019-01-20T18:08:24.674600</ts>
    <user>Erin</user>
    <text>&lt;@Jeniffer&gt;
I'm no Elm expert, but I spent many hours figuring out how to upgrade to 0.19 with all the date/time changes (I'm working on a calendar) as I talked about here:
&lt;https://discourse.elm-lang.org/t/no-longer-an-official-way-to-store-zoneless-times-in-0-19/2454&gt;

From that experience, I might suggest this library to answer your question (if I understand it correctly):
&lt;https://package.elm-lang.org/packages/justinmimbs/time-extra/latest/Time-Extra&gt;</text>
  </message>
  <message conversation_id="198">
    <ts>2019-01-20T18:38:06.675500</ts>
    <user>Jeniffer</user>
    <text>Thanks &lt;@Erin&gt; ! I’ll check it out!</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T20:55:00.675800</ts>
    <user>Zona</user>
    <text>there is a lot of attempts to try to fit monads into tea e.g. &lt;https://package.elm-lang.org/packages/Fresheyeball/elm-return/latest/Return#andThen&gt; but it’s imo not that practical since there are some limitations</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T20:55:54.676100</ts>
    <user>Zona</user>
    <text>it’s not. it isn’t monad</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T20:56:43.676400</ts>
    <user>Zona</user>
    <text>not even that. even map goes a -&amp;gt; b</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:03:59.676600</ts>
    <user>Zona</user>
    <text>not really. it doesn’t have domain and co-domain. This thing is usually called `update` in elm</text>
  </message>
  <message conversation_id="200">
    <ts>2019-01-20T21:07:32.677500</ts>
    <user>Chadwick</user>
    <text>hello all, has anyone added the FB group plugin embedded code into their Elm code?</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:08:22.677600</ts>
    <user>Chadwick</user>
    <text>I’ve added the top to my index.html and the bottom to the Elm code but I can’t get it compile</text>
  </message>
  <message conversation_id="200">
    <ts>2019-01-20T21:08:29.678000</ts>
    <user>Chadwick</user>
    <text>```
div
            [ class "fb-group", "data-href" "&lt;https://www.facebook.com/pettingzooocalafl&gt;", "data-width" "280", "data-show-social-context" "true", "data-show-metadata" "false" ]
            []
```</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:10:06.678300</ts>
    <user>Chadwick</user>
    <text>thanks in advance for your time! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:12:15.679400</ts>
    <user>Yolande</user>
    <text>&lt;@Chadwick&gt; do you have an HTML page that you’re inserting your Elm app info?</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:12:32.679800</ts>
    <user>Chadwick</user>
    <text>yes</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:12:42.680100</ts>
    <user>Chadwick</user>
    <text>just the index</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:13:35.681200</ts>
    <user>Chadwick</user>
    <text>```
view : Model -&amp;gt; Browser.Document Msg
```</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:13:57.681800</ts>
    <user>Yolande</user>
    <text>And where does the FB JS blob get pasted?</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:14:18.682000</ts>
    <user>Chadwick</user>
    <text>&lt;https://developers.facebook.com/docs/plugins/group-plugin#configurator&gt;</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:14:32.682600</ts>
    <user>Chadwick</user>
    <text>some in the head and some in the place where the div is going to be rendered</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:15:54.684800</ts>
    <user>Yolande</user>
    <text>Got it. Hmm. Maybe there’s some obstacle between their script and the DOM nodes that Elm is managing. When you inspect the div does it look like you specified?</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:15:58.685000</ts>
    <user>Earlean</user>
    <text>&lt;@Chadwick&gt; you'll need to use &lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Attributes#attribute&gt; for those 'data-' attributes</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:17:14.686300</ts>
    <user>Earlean</user>
    <text>eg. ```
div [ class "fb-group"
, attribute "data-href" "&lt;https://www.facebook.com/pettingzooocalafl&gt;"
, attribute "data-width" "280"
,  attribute "data-show-social-context" "true"
, attribute "data-show-metadata" "false" ] []
```</text>
  </message>
  <message conversation_id="199">
    <ts>2019-01-20T21:22:35.687100</ts>
    <user>Chadwick</user>
    <text>that did the trick! awesine! thanks &lt;@Earlean&gt;, `html-attribute` was the keyword I was looking for :slightly_smiling_face:</text>
  </message>
  <message conversation_id="201">
    <ts>2019-01-20T22:21:32.688300</ts>
    <user>Talisha</user>
    <text>Hey, I know I’ve seen other people have this issue as well, but can’t recall what the solution was.

Just upgraded an `elm 0.18` package that was at version 1.0.1 to `elm 0.19`  with a new package at version 2.0
&lt;https://package.elm-lang.org/packages/cmditch/elm-ethereum/2.0.0/&gt;
and getting this warning message `Warning! The latest version of this package is 1.0.1`
Any idea how to fix this?</text>
  </message>
  <message conversation_id="201">
    <ts>2019-01-20T23:05:28.689900</ts>
    <user>Earlean</user>
    <text>&lt;@Talisha&gt; seems fine now, I assume it was just a cache issue.</text>
  </message>
  <message conversation_id="201">
    <ts>2019-01-20T23:17:40.690200</ts>
    <user>Talisha</user>
    <text>ahh, thanks for checking</text>
  </message>
  <message conversation_id="202">
    <ts>2019-01-20T23:30:48.692800</ts>
    <user>Cletus</user>
    <text>Can anyone confirm that there is indeed no way to update a record in a similar way to the .accessor methods? e.g. for record `{ name : String }` you can use `.name record` to get the string, but you'd need to define your own `updateName : String -&amp;gt; { name : String} -&amp;gt; { name : String }` if you wanted to have a simple updater for it, right?</text>
  </message>
  <message conversation_id="202">
    <ts>2019-01-20T23:39:39.693100</ts>
    <user>Earnest</user>
    <text>Yup</text>
  </message>
  <message conversation_id="202">
    <ts>2019-01-21T02:56:54.693600</ts>
    <user>Jin</user>
    <text>There search isn’t good enough :slightly_smiling_face:</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T03:41:56.697100</ts>
    <user>Nana</user>
    <text>so I came up with a solution to my "problem" earlier regarding setting `RemoteData` to `Loading` not actually being tied to loading the data.

instead of having the usual:
`getFolder : FileContainer.ID -&amp;gt; Cmd Msg`
you can have:
`loadFolder : FileContainer.ID -&amp;gt; ( Model, Cmd Msg ) -&amp;gt; ( Model, Cmd Msg )`
and then instead of doing:
`({model | folder = Loading}, getFolder folderId)`
you do:
`(model, Cmd.none) |&amp;gt; loadFolder folderId`</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T03:44:04.697600</ts>
    <user>Nana</user>
    <text>is this a common pattern?</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T03:46:58.699200</ts>
    <user>Karissa</user>
    <text>I think so yes. I found it's really nice to have complex update functions implemented as a pipe of functions. You can even create a function `andThen` that abstracts the Cmd.batch mecanism.</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T03:52:35.702500</ts>
    <user>Karissa</user>
    <text>Something like:
```
andThen : (Model -&amp;gt; (Model, Cmd msg)) -&amp;gt; (Model, Cmd msg) -&amp;gt; (Model, Cmd msg)
andThen function (model, cmds) =
    let
        (newModel, extraCmds) =
            function model
    in
    (newModel, Cmd.batch [cmds, extraCmds])
```
That you can use like this: `(model, Cmd.none) |&amp;gt; andThen (loadFolder folderId) |&amp;gt; andThen otherFunction`.</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T05:23:37.703200</ts>
    <user>Agustin</user>
    <text>Ah but map can also go b -&amp;gt; a</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T05:24:05.703400</ts>
    <user>Agustin</user>
    <text>Its also my goto hack to convert things back to my global msg :joy:</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T06:43:44.704800</ts>
    <user>Niesha</user>
    <text>&lt;@Karissa&gt; I don't like that implementation. You're somehow hinting that `andThen` is sequential, where `Cmd.batch` doesn't guarantee that one.</text>
  </message>
  <message conversation_id="204">
    <ts>2019-01-21T06:43:59.705000</ts>
    <user>Niesha</user>
    <text>Or rather, I don't like the name.</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T06:52:30.705100</ts>
    <user>Ashton</user>
    <text>Cant the domain and co-domain be the same domain? Or, cant the domain and co-domain have the same type?</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T06:57:10.705300</ts>
    <user>Ashton</user>
    <text>I guess its just a matter of how you define it, but, a function can go `a -&amp;gt; a`. Thats not an issue. Maybe I dont understand functors enough, but I think endofunctors map back onto the sae domain.</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T07:03:57.707100</ts>
    <user>Alysa</user>
    <text>no guarantees for result ordering... but i think at least they would be issued in that order?</text>
  </message>
  <message conversation_id="205">
    <ts>2019-01-21T07:10:19.707300</ts>
    <user>Bert</user>
    <text>IIRC they are issued in the reverse order. As in, FILO for a recursive tree structure</text>
  </message>
  <message conversation_id="203">
    <ts>2019-01-21T07:11:27.707500</ts>
    <user>Karissa</user>
    <text>Yeah the name is chosen to be consistent with Maybe.andThen etc.</text>
  </message>
  <message conversation_id="206">
    <ts>2019-01-21T07:51:49.707800</ts>
    <user>Niesha</user>
    <text>The signature is, but the behavior isn't.</text>
  </message>
  <message conversation_id="206">
    <ts>2019-01-21T07:54:27.708000</ts>
    <user>Karissa</user>
    <text>I'd love other name suggestions, naming is hard ^^</text>
  </message>
  <message conversation_id="206">
    <ts>2019-01-21T08:00:11.708200</ts>
    <user>Niesha</user>
    <text>`map2` etc. sound appropriate here</text>
  </message>
  <message conversation_id="206">
    <ts>2019-01-21T08:16:56.709600</ts>
    <user>Karissa</user>
    <text>Without changing the signature it wouldn't be consistent. And I still like to convey the idea of chaining or piping changes to Model while retaining the ability to produce Cmds. Maybe `chain` or something like that.</text>
  </message>
  <message conversation_id="207">
    <ts>2019-01-21T08:17:10.710100</ts>
    <user>Jae</user>
    <text>Hi, I wanted to test the export/import feature in the debugger but whenever I try using it I get ```Cannot Import History

Looks like this history file is corrupt. I cannot understand it.```  I haven't made any changes between exporting and importing the history.</text>
  </message>
  <message conversation_id="207">
    <ts>2019-01-21T08:18:11.710300</ts>
    <user>Danika</user>
    <text>I think this is a known bug (?)</text>
  </message>
  <message conversation_id="207">
    <ts>2019-01-21T08:18:22.710500</ts>
    <user>Lynne</user>
    <text>Yep, it is not working</text>
  </message>
  <message conversation_id="207">
    <ts>2019-01-21T08:19:22.710600</ts>
    <user>Niesha</user>
    <text>It's basically about Applicative &amp;lt;=&amp;gt; Monad congruence. &lt;https://github.com/facebook/Haxl/issues/58&gt; - you're defining an `andThen` which doesn't follow the rules.</text>
  </message>
  <message conversation_id="207">
    <ts>2019-01-21T08:26:14.711000</ts>
    <user>Jae</user>
    <text>Is there a work around?</text>
  </message>
  <message conversation_id="207">
    <ts>2019-01-21T08:32:03.711100</ts>
    <user>Jae</user>
    <text>I checked the github issue for it and it doesn't look like there is.</text>
  </message>
  <message conversation_id="208">
    <ts>2019-01-21T08:53:22.711300</ts>
    <user>Zona</user>
    <text>it can but than it’s not general enough right?</text>
  </message>
  <message conversation_id="208">
    <ts>2019-01-21T08:55:13.711500</ts>
    <user>Zona</user>
    <text>that was the meaning of comment. that even map has independent domain and co-domain. Anyway there is a lot of things in stdlib which do `a -&amp;gt; a` - those functions are called `update`.</text>
  </message>
  <message conversation_id="209">
    <ts>2019-01-21T09:56:55.711900</ts>
    <user>Tashina</user>
    <text>```        Message -&amp;gt;
            ( model, Debuglog)```</text>
  </message>
  <message conversation_id="209">
    <ts>2019-01-21T09:57:04.712200</ts>
    <user>Tashina</user>
    <text>How can I do something like this?</text>
  </message>
  <message conversation_id="209">
    <ts>2019-01-21T10:03:17.713000</ts>
    <user>Tashina</user>
    <text>So I guess my question is actually: how can I create `Cmd Msg` that logs something</text>
  </message>
  <message conversation_id="209">
    <ts>2019-01-21T10:04:34.714300</ts>
    <user>Shenita</user>
    <text>`Debug.Log` is the only API for logging currently</text>
  </message>
  <message conversation_id="209">
    <ts>2019-01-21T10:04:56.714800</ts>
    <user>Shenita</user>
    <text>but you can make your own fairly straightforwardly using ports</text>
  </message>
  <message conversation_id="209">
    <ts>2019-01-21T10:06:04.715600</ts>
    <user>Shenita</user>
    <text>e.g. `port log : String -&amp;gt; Cmd msg` and then in JS `app.ports.log.subscribe(msg =&amp;gt; console.log(msg))`</text>
  </message>
  <message conversation_id="209">
    <ts>2019-01-21T10:09:05.716000</ts>
    <user>Tashina</user>
    <text>Ah okay, thanks!</text>
  </message>
  <message conversation_id="210">
    <ts>2019-01-21T10:37:22.716800</ts>
    <user>Danika</user>
    <text>The only time you’d really do this is if you wanted to build with `--optimize` right?</text>
  </message>
  <message conversation_id="210">
    <ts>2019-01-21T10:40:59.717500</ts>
    <user>Lynne</user>
    <text>Also if you send your logs to some other system and follow 12-factor approach</text>
  </message>
  <message conversation_id="210">
    <ts>2019-01-21T10:47:52.717800</ts>
    <user>Danika</user>
    <text>Ah i’d not heard of that before :slightly_smiling_face:</text>
  </message>
  <message conversation_id="211">
    <ts>2019-01-21T11:57:48.718900</ts>
    <user>Desire</user>
    <text>asking again, anyone else going to go to fosdem? it's free and at the start of feburary</text>
  </message>
  <message conversation_id="211">
    <ts>2019-01-21T14:33:02.720900</ts>
    <user>Forrest</user>
    <text>Is there an established pattern for having a kind of manifest file for a directory?

If I have something like `src/functions/`, I want to do something like:

```
-- src/functions/Index.elm

module Index exposing (..)

import Function.Increment exposing (increment)
import Function.StartsWithH exposing (startsWithH)
```

And then import like

```
-- src/Main.elm

...

import Functions.Index exposing (..)
```</text>
  </message>
  <message conversation_id="211">
    <ts>2019-01-21T15:08:37.721800</ts>
    <user>Earnest</user>
    <text>&lt;@Forrest&gt; It's more like `src/Functions/Submodules.elm` w/ a top-level `src/Functions.elm`</text>
  </message>
  <message conversation_id="212">
    <ts>2019-01-21T15:14:05.724700</ts>
    <user>Danika</user>
    <text>in js there is a common pattern of
```
functions/
  someFuncs.js
  someMoreFuncs.js
  index.js

// in index.js
import someFuncs from 'someFuncs.js'
import someMoreFuncs from 'someMoreFuncs.js

export default {
  someFuncs,
  someMoreFuncs
}

// somewhere else in the codebase
import { someFuncs } from '/functions'
```

I think they're asking if there is something similar in elm. There is not, afaik modules cant "export" things they import.</text>
  </message>
  <message conversation_id="212">
    <ts>2019-01-21T15:15:31.725900</ts>
    <user>Danika</user>
    <text>If you're finding that you want this sort of functionality in elm, it might be because you've prematurely split your code into modules when you don't need to. Elm files are naturally very tall; having seperate files for `Function.Increment` and `Function.StartsWithH` would be a code smell imo</text>
  </message>
  <message conversation_id="213">
    <ts>2019-01-21T15:30:50.726100</ts>
    <user>Leoma</user>
    <text>You can use ports to send basic types or anything you can convert to a JSON Value to the JS side and log there.</text>
  </message>
  <message conversation_id="213">
    <ts>2019-01-21T15:31:59.726300</ts>
    <user>Leoma</user>
    <text>The, possibly confusing thing, is that if you batch a bunch of Cmd Msg together, you have no guarantees about execution order. So your logs can become shuffled up. This may not be a concern based on your needs.</text>
  </message>
  <message conversation_id="211">
    <ts>2019-01-21T16:29:07.727000</ts>
    <user>Forrest</user>
    <text>That’s great, thank you!</text>
  </message>
  <message conversation_id="214">
    <ts>2019-01-21T16:34:12.727100</ts>
    <user>Ashton</user>
    <text>I dont understand. Not general enough for what?</text>
  </message>
  <message conversation_id="214">
    <ts>2019-01-21T16:40:36.728500</ts>
    <user>Sofia</user>
    <text>Does anyone have a recommended pattern for Attributes that are conditional? e.g.:
```
       div  (HtmlA.class "blah"
            :: (if model.hasStartedInteraction then
                    []

                else
                    [ HtmlE.onClick FirstInteraction ]
               )
        ) []

```

In other words, if I have a list of objects, what's a good way to make the _presence_ of an element conditional?</text>
  </message>
  <message conversation_id="214">
    <ts>2019-01-21T16:49:56.729900</ts>
    <user>Lavon</user>
    <text>Does anyone know what the documentation for the old 0.18 Focus library means when it says a Focus is not bidirectional? (&lt;https://package.elm-lang.org/packages/evancz/focus/2.0.2&gt;)</text>
  </message>
  <message conversation_id="214">
    <ts>2019-01-21T16:55:57.732000</ts>
    <user>Beau</user>
    <text>This is kind of a hack, but it's pretty easy to make a "no op" attribute. `nullAttr = Html.Attributes.attribute "" ""`, iirc</text>
  </message>
  <message conversation_id="214">
    <ts>2019-01-21T16:58:28.734200</ts>
    <user>Sofia</user>
    <text>Yeah, that's what I was thinking about -- just making a `none` for any time I need to do this</text>
  </message>
  <message conversation_id="214">
    <ts>2019-01-21T16:59:52.734400</ts>
    <user>Lavon</user>
    <text>Another option would be to do a filter on a list of `Maybe Attribute`. Something like `List.filterMap identity [Just (HtmlE.onClick FirstInteraction), Nothing]`. Not sure how well that would actually work, but you could probably define a function to make it more succinct.</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:19:36.735300</ts>
    <user>Liza</user>
    <text>is there someone who could add types to functions `andMap` and `end` &lt;https://ellie-app.com/4wqVkRRnMyta1&gt;</text>
  </message>
  <message conversation_id="214">
    <ts>2019-01-21T17:21:11.735800</ts>
    <user>Liza</user>
    <text>or maybe there is some editor / tool that can add those anototation</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:21:13.736000</ts>
    <user>Liza</user>
    <text>ANY…</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:21:27.736600</ts>
    <user>Danika</user>
    <text>if you load the module into the elm repl</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:21:29.736800</ts>
    <user>Liza</user>
    <text>because it compils..</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:21:31.736900</ts>
    <user>Danika</user>
    <text>and just call the function with no arguments</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:21:36.737200</ts>
    <user>Danika</user>
    <text>it will show you the inferred type annotation</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:22:42.737500</ts>
    <user>Liza</user>
    <text>how to do  that ?</text>
  </message>
  <message conversation_id="214">
    <ts>2019-01-21T17:23:07.737600</ts>
    <user>Nana</user>
    <text>&lt;@Beau&gt; that actually produces a runtime error though
`Uncaught DOMException: Failed to execute 'setAttribute' on 'Element': '' is not a valid attribute name.`</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:23:30.737800</ts>
    <user>Danika</user>
    <text>None</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:24:20.738400</ts>
    <user>Danika</user>
    <text>run `elm repl` wherever your elm.json is</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:25:27.738600</ts>
    <user>Liza</user>
    <text>tnx for hint ..</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:25:33.738900</ts>
    <user>Liza</user>
    <text>kind of got that hell.</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:25:37.739100</ts>
    <user>Liza</user>
    <text>now need to clean up..</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:25:38.739200</ts>
    <user>Ashton</user>
    <text>Yeah, `attribute "" ""` breaks everything. Ive heard `class ""` makes for a good `none` `Attribute` tho.</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:25:47.739400</ts>
    <user>Ashton</user>
    <text>Havent tried it myself however.</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:26:29.739900</ts>
    <user>Liza</user>
    <text>hmm if it is so easy.. why non of IDE uses that tool..</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:26:34.740100</ts>
    <user>Liza</user>
    <text>or im missing something</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:28:06.740900</ts>
    <user>Danika</user>
    <text>The elm extension for vscode shows function signature on hover, but I’m not sure whether it infers it if you haven’t already annotated it.</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:28:40.741400</ts>
    <user>Nana</user>
    <text>I think these look pretty nice:
```
attrIf : Bool -&amp;gt; Attribute msg -&amp;gt; Attribute msg
attrIf condition ifTrue =
    if condition then
        ifTrue

    else
        Attributes.classList []


nodeIf : Bool -&amp;gt; Html msg -&amp;gt; Html msg
nodeIf condition ifTrue =
    if condition then
        ifTrue

    else
        text ""
```
&lt;https://ellie-app.com/4wr3TWdWcrva1&gt;</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:31:44.741600</ts>
    <user>Nana</user>
    <text>and yeah I've been struggling a bit with making "elm html" readable too</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:32:28.742200</ts>
    <user>Liza</user>
    <text>0.18 had way to add annotations…</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:32:37.742600</ts>
    <user>Liza</user>
    <text>now it just reads it</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:36:58.742800</ts>
    <user>Danika</user>
    <text>hmm?</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:44:15.743200</ts>
    <user>Liza</user>
    <text>None</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:55:20.744900</ts>
    <user>Beau</user>
    <text>Dang, didn't know that blows up, might be new 0.19 behavior</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T17:55:51.746000</ts>
    <user>Beau</user>
    <text>I'd definitely go for `class ""` then</text>
  </message>
  <message conversation_id="216">
    <ts>2019-01-21T18:18:10.748100</ts>
    <user>Earnest</user>
    <text>Probably because the 0.18 compiler would spit out warnings and inferred types for functions without annotations</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T18:18:50.749000</ts>
    <user>Liza</user>
    <text>And yes- I’m fighting with this function already week - and tip about repl, will save me  other week - already found what is wrong..</text>
  </message>
  <message conversation_id="215">
    <ts>2019-01-21T18:21:18.751400</ts>
    <user>Liza</user>
    <text>Maybe we can vsc plugin can just use elm analyze, or simple regexp to find unannotation function and use repl to autocomple </text>
  </message>
  <message conversation_id="217">
    <ts>2019-01-21T20:13:21.754300</ts>
    <user>Bernardo</user>
    <text>Is there a way to concatenate two `Html` ?</text>
  </message>
  <message conversation_id="217">
    <ts>2019-01-21T20:13:52.754600</ts>
    <user>Bernardo</user>
    <text>(without wrapping them in another container node)</text>
  </message>
  <message conversation_id="217">
    <ts>2019-01-21T20:25:31.755300</ts>
    <user>Earlean</user>
    <text>&lt;@Bernardo&gt; put them in a list</text>
  </message>
  <message conversation_id="217">
    <ts>2019-01-21T20:27:38.756000</ts>
    <user>Bernardo</user>
    <text>&lt;@Earlean&gt; but then I’d get `List Html`, not an `Html`, no?</text>
  </message>
  <message conversation_id="217">
    <ts>2019-01-21T20:28:44.757200</ts>
    <user>Earlean</user>
    <text>Yep, a `Html msg` describes a single node in the DOM tree</text>
  </message>
  <message conversation_id="217">
    <ts>2019-01-21T20:30:29.757700</ts>
    <user>Bernardo</user>
    <text>Ah, yeah, I suppose that wouldn’t really make sense :slightly_smiling_face:</text>
  </message>
  <message conversation_id="217">
    <ts>2019-01-21T20:30:40.758000</ts>
    <user>Bernardo</user>
    <text>(to have multiple nodes under one `Html`)</text>
  </message>
  <message conversation_id="217">
    <ts>2019-01-21T20:32:16.758500</ts>
    <user>Earlean</user>
    <text>Yep, that's what a list is for.</text>
  </message>
  <message conversation_id="218">
    <ts>2019-01-21T21:23:03.758900</ts>
    <user>Jeanene</user>
    <text>Can anyone recommend a good way to do input masking?</text>
  </message>
  <message conversation_id="218">
    <ts>2019-01-21T21:23:54.759800</ts>
    <user>Jeanene</user>
    <text>My go-to would be to use `onInput` update function and regex/parser, but I’m running up against a deadline…thinking I’ll dip over to JS. :neutral_face:</text>
  </message>
  <message conversation_id="219">
    <ts>2019-01-21T21:48:43.759900</ts>
    <user>Leoma</user>
    <text>&lt;https://package.elm-lang.org/packages/indicatrix/elm-input-extra/latest/&gt; ?</text>
  </message>
  <message conversation_id="218">
    <ts>2019-01-21T21:59:21.760400</ts>
    <user>Jeanene</user>
    <text>It’s not up to date with 0.19. :(</text>
  </message>
  <message conversation_id="217">
    <ts>2019-01-21T22:23:03.760600</ts>
    <user>Earlean</user>
    <text>It is updated for 0.19, what are you seeing that makes you think otherwise?</text>
  </message>
  <message conversation_id="218">
    <ts>2019-01-21T22:30:52.760900</ts>
    <user>Jeanene</user>
    <text>&lt;https://github.com/abadi199/elm-input-extra&gt;</text>
  </message>
  <message conversation_id="218">
    <ts>2019-01-21T22:31:22.761800</ts>
    <user>Jeanene</user>
    <text>That’s the main package. I thought he was referencing that one. :) </text>
  </message>
  <message conversation_id="220">
    <ts>2019-01-22T01:39:34.762300</ts>
    <user>Lea</user>
    <text>You can also add the wrong annotation, the compiler will tell you the right one :slightly_smiling_face: . Not sure if this always works though,</text>
  </message>
  <message conversation_id="221">
    <ts>2019-01-22T01:49:10.762500</ts>
    <user>Bert</user>
    <text>I usually just deal with lists, and concatenate them </text>
  </message>
  <message conversation_id="221">
    <ts>2019-01-22T01:51:54.762700</ts>
    <user>Bert</user>
    <text>Especially if you consider that `Html a` is actually `VirtualDom.Node` underneath </text>
  </message>
  <message conversation_id="220">
    <ts>2019-01-22T03:01:15.763200</ts>
    <user>Liza</user>
    <text>it will - but if you have 2 arguments where second is big record, that is kind of recursion, it not really can correct you..</text>
  </message>
  <message conversation_id="220">
    <ts>2019-01-22T03:10:36.763500</ts>
    <user>Lea</user>
    <text>K right, I’ve only done it for some large records that don’t have a type alias</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T04:28:24.763800</ts>
    <user>Huong</user>
    <text>Some of my colleagues are, and I _might_ hop by as well, since I live in Belgium anyways</text>
  </message>
  <message conversation_id="220">
    <ts>2019-01-22T04:44:49.764100</ts>
    <user>Desire</user>
    <text>nice, if you do go, let me know</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:02:53.765000</ts>
    <user>Sadie</user>
    <text>Hello dear friends</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:03:16.765500</ts>
    <user>Sadie</user>
    <text>Once more I am seeking your precious advices</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:03:42.766000</ts>
    <user>Sadie</user>
    <text>I am building a SPA with Richard Feldman Elm Architecture (and the benefits of elm-kitchen)</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:04:02.766500</ts>
    <user>Sadie</user>
    <text>I have a url router</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:04:09.766700</ts>
    <user>Sadie</user>
    <text>In my session I have a bearer token</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:04:29.767600</ts>
    <user>Sadie</user>
    <text>I don't know exactly when to fetch the user profile related to this bearer token</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:04:49.768200</ts>
    <user>Sadie</user>
    <text>Shall I do it in all pages init command in case it is missing ?</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:07:00.769900</ts>
    <user>Lynne</user>
    <text>That's an option. An alternative might be to fetch it in your root `Main.elm` and store on that level, passing to `init` functions of each page</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:09:05.772100</ts>
    <user>Sadie</user>
    <text>Yes that kind what I wanted to do</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:09:17.772600</ts>
    <user>Sadie</user>
    <text>But then I need to add a step before using setRoute, right?</text>
  </message>
  <message conversation_id="223">
    <ts>2019-01-22T10:16:30.777600</ts>
    <user>Allyn</user>
    <text>Hello. I started using &lt;@Freda&gt;’s I18Next, and followed the given example (&lt;https://github.com/ChristophP/elm-i18next/tree/4.0.0&gt;) to pass the translations to the app using flags. It works well. Now I want to pass more than the translations to the app, so the translations would become a property of the flags (something like { translations : { english : ... }, user : { ... } }). It implies I write a Decoder, which will invoke I18Next’s provided one (translationsDecoder). My problem is I can’t say my decoder produces I18Next.Translations, because the Translations type is opaque (constructors are not exposed). So I can’t write something like :
```Decode.succeed Translations 
          |&amp;gt; requiredAt ["translations"] translationsDecoder ...```</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:18:35.778700</ts>
    <user>Carman</user>
    <text>Do you want to just decode the translations? or both the translations and the user?</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:18:42.778900</ts>
    <user>Allyn</user>
    <text>both</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:19:21.780300</ts>
    <user>Carman</user>
    <text>Then you want a function that can take a translation and a user and return some other structure such as a tuple</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:20:03.782200</ts>
    <user>Carman</user>
    <text>```
Decode.succeed (\translations user -&amp;gt; (translations, user))
  |&amp;gt; required "translations" traslationDecoder
  |&amp;gt; required "user" userDecoder
```</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:20:09.782400</ts>
    <user>Freda</user>
    <text>Glad your using the package. You'd have to do `Decode.succeed Model` instead of `Decode succeed Translations`</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:21:49.784000</ts>
    <user>Carman</user>
    <text>The important thing to understand with pipeline decoders is that the argument to `succeed` is a function that will build some structure out _n_ arguments from each of the piped lines below it</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:22:53.785000</ts>
    <user>Allyn</user>
    <text>I think I get it, i’ll try that now. Thank you &lt;@Carman&gt; and &lt;@Freda&gt;</text>
  </message>
  <message conversation_id="222">
    <ts>2019-01-22T10:22:55.785200</ts>
    <user>Allyn</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="224">
    <ts>2019-01-22T10:42:07.785300</ts>
    <user>Lynne</user>
    <text>Yes, you are right</text>
  </message>
  <message conversation_id="224">
    <ts>2019-01-22T10:42:40.785500</ts>
    <user>Lynne</user>
    <text>A positive thing here is that you don't have to deal with `Maybe Profile` in your other pages</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:16:56.791500</ts>
    <user>Bernardo</user>
    <text>So, I’ve been following the ‘life of a file’ approach (aka &lt;https://www.reddit.com/r/elm/comments/5jd2xn/how_to_structure_elm_with_multiple_models/dbuu0m4/&gt;), and I’ve ended up in a slightly awkward situation:
I split my model up with a union type (i.e. `model = FooModel FooRecord | BarModel BarRecord`),
then  later I split up my `Msg` type too (i.e. `type Msg = FooMsg Foos | BarMsg Bars`).

That all seemed well and fine (using `Cmd.map` and `Html.map`), but:
I’m increasingly running in to situations where I have to add an `otherwise -&amp;gt; (model, Cmd.none)` to handle cases where the `Msg` no longer makes sense with the `Model`. Is there a way around this, is it a smell?</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:24:09.793500</ts>
    <user>Nana</user>
    <text>Yeah I'm curious about this too. Although I'm guessing there might not be a perfect solution.
elm-spa-example uses cases like:
```
_ -&amp;gt;
    ( model, Log.error )
```
(Log.error sends a message to a error tracking service)</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:27:22.794900</ts>
    <user>Bernardo</user>
    <text>&lt;@Nana&gt; funny you should reference elm-spa-example, I just found elm-kitchen, which says:
&amp;gt; This is a modest attempt at providing a simplistic yet opinionated Elm SPA application skeleton based on rtfeldman’s Elm Example SPA,
And has a similar smoking gun, here: &lt;https://github.com/allo-media/elm-kitchen/blob/master/skeleton/src/Main.elm#L129&gt;</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:28:38.796000</ts>
    <user>Carman</user>
    <text>This is a hard problem. You want some messages to only come in when your're in certain states.</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:28:54.796400</ts>
    <user>Carman</user>
    <text>The fact that messages are asynchronous makes it even trickier</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:30:27.799900</ts>
    <user>Carman</user>
    <text>Consider firing off a slow HTTP request when your model is in the `FooModel ...` state. While the request is happening in the background, the user clicks a button and transitions the app into the `BarModel ...` state. _After_ that has happened, the HTTP request completes, giving you a `FooMsg ...`. How do you handle the situation?</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:32:36.803600</ts>
    <user>Bernardo</user>
    <text>Heh, I think your use of ‘a hard problem’ is very fitting, if you squint at “state” and “transitions” it does start to look a lot like “cache invalidation”, and of course: &lt;https://martinfowler.com/bliki/TwoHardThings.html&gt;</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:33:18.804900</ts>
    <user>Bert</user>
    <text>Here's another example for food of thought. Imagine that you have a messaging app. No matter which conversation the user is viewing, the app can get different Msgs, including new incoming texts from other conversations. You probably do want the texts to be added to the convos, even if you are viewing another one at the moment. </text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:34:00.805600</ts>
    <user>Bernardo</user>
    <text>Okay, it sounds like I’m not going crazy, and this is a ‘thing’. Has the Elm community come up with a name for it I wonder? :thinking_face:</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:34:55.806500</ts>
    <user>Carman</user>
    <text>I've heard "make invalid state transitions impossible" or variations on that</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:35:40.808000</ts>
    <user>Carman</user>
    <text>As far as I can tell, there is no way to do this at the type level</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:36:04.808500</ts>
    <user>Bernardo</user>
    <text>Yeah. It’s exactly the word ‘impossible’ which made me think I was doing something wrong. I’d gotten all giddy after watching &lt;@Leonie&gt;’s “making impossible states impossible” talk, and then was confronted with this ‘situation’ :grimacing:</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:36:15.808800</ts>
    <user>Carman</user>
    <text>&lt;https://discourse.elm-lang.org/t/can-phantom-types-be-used-to-restrict-the-possible-transitions-in-a-state-machine/508&gt;</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:37:50.811000</ts>
    <user>Nana</user>
    <text>&lt;@Bert&gt; yeah seems like the best is usually to have your "data stores" on your main model, rather than on a "page model"
which mirrors how you do things in React/Redux/Vue</text>
  </message>
  <message conversation_id="226">
    <ts>2019-01-22T13:40:35.811300</ts>
    <user>Danika</user>
    <text>How is redux different, sorry?</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:42:57.812800</ts>
    <user>Nana</user>
    <text>&lt;@Danika&gt; I meant, storing server data on a "page model" in Elm is like storing things on a component in React, whereas storing it on the main model is like storing it in Redux</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:46:06.813800</ts>
    <user>Carman</user>
    <text>Beware of creating invalid states and lots of maybes if you put all your data on the top-level model</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:50:00.815600</ts>
    <user>Nana</user>
    <text>&lt;@Carman&gt; hmm how would that create invalid states / lots of maybes? :thinking_face:</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:58:16.821900</ts>
    <user>Carman</user>
    <text>Imagine a multi-step form that asks for address info on page 1, payment info on page 2, and a coupon code on page 3. If you put it all on the top level you end up with something like:

```
type alias Model =
  { state : State, page : Page }

type Page
  = AddressPage
  | PaymentPage
  | CouponPage
  | SuccessPage

type alias State =
  { street : Maybe String
  , city : Maybe String
  , country : Maybe String
  , cardNumber : Maybe Int
  , couponCode : Maybe String
  }
```</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T13:58:21.822100</ts>
    <user>Carman</user>
    <text>This allows lots of invalid states (you shouldn't be able to go to payment if you don't have an address) and has lots of maybes.

Contrast with something like:
```
type alias Model =
  { page : Page, ... }

type alias Address = { street :  String, city :  String, country :  String }

type Page
  = AddressPage { street : Maybe String, city : Maybe String, country : Maybe String }
  | PaymentPage { address : Address, cardNumber : Maybe Int }
  | CouponPage  { address : Address, cardNumber : Int, couponCode : Maybe String }
  | SuccessPage  { address : Address }
```</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:02:54.823800</ts>
    <user>Nana</user>
    <text>&lt;@Carman&gt; ah, I was talking about server data, form data definitely makes more sense to store on the "page"</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:04:19.824500</ts>
    <user>Carman</user>
    <text>I think the same idea goes for server data. If there are some states where it shouldn't exist then it probably shouldn't be on the top-level model</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:06:00.826100</ts>
    <user>Carman</user>
    <text>```
type alias Model = { profile : Maybe ProfileFromServer, page : Page }

type Page = SignUp | ProfilePage | ...
```

versus

```
type Page
  = SignUp
  | ProfilePage ProfileFromServer
  | ...
```</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:09:31.827500</ts>
    <user>Bernardo</user>
    <text>Aye, I guess the choice is between:
1. Use tagged unions (`|`) in your model, or:
2. Don’t.</text>
  </message>
  <message conversation_id="227">
    <ts>2019-01-22T14:10:06.829000</ts>
    <user>Rosalee</user>
    <text>`type Choice = TaggedUnion | Dont`</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:10:07.829200</ts>
    <user>Nana</user>
    <text>hmm, but typically you first navigate to a profile page and *then* load the data</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:10:59.830900</ts>
    <user>Bernardo</user>
    <text>1. Necessitates that you might end up with a message which only makes sense on a ‘different’ side of the union (aka the problem I first came here asking about).
2. Eliminates 1., but introduces ‘invalid states’.</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:11:53.831900</ts>
    <user>Carman</user>
    <text>2 does not eliminate 1, it just obscures it</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:12:07.832200</ts>
    <user>Bernardo</user>
    <text>Uh, whoops, I put the numbers the wrong way around :joy:</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:12:27.832700</ts>
    <user>Nana</user>
    <text>and how would `ProfilePage ProfileFromServer` work with navigating through urls?</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:13:39.833500</ts>
    <user>Carman</user>
    <text>The problem &lt;@Bernardo&gt; was asking about earlier (handling messages that are unexpected given the current state of the model) exists no matter how you structure the app</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:14:50.834600</ts>
    <user>Bernardo</user>
    <text>&lt;@Carman&gt; yeah. I think it’s interesting how it manifests itself in different ways.</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:15:06.835000</ts>
    <user>Carman</user>
    <text>agreed :slightly_smiling_face:</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:17:00.837300</ts>
    <user>Bernardo</user>
    <text>So yeah, it’s:
1. Use tagged unions (`|`), and know you’re forced to end up (probably) with something like `otherwise -&amp;gt; ( model, Cmd.none )`, or:
2. Don’t use tagged unions, so you can always ‘find’ the value for which a message concerns, but accept that your model will inevitably allow inconsistent states to exist.</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:17:39.838100</ts>
    <user>Nana</user>
    <text>I think definitely use tagged unions for pages and such though</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:18:32.839000</ts>
    <user>Bernardo</user>
    <text>Thanks for the chat everyone, that was really productive! I have to lunch now though.</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:24:55.842000</ts>
    <user>Carman</user>
    <text>In my experience, you generally end up having to do `otherwise -&amp;gt; ( model, Cmd.none )` regardless of which approach you take</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:25:48.842900</ts>
    <user>Carman</user>
    <text>With tagged unions (`|`) it's usually at the end of a flat case statement on all the tags. Without them it's usually a compound case on a variety of maybes and booleans.</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:29:42.844600</ts>
    <user>Nana</user>
    <text>btw, the way I'm dealing with my server data, I don't consider it "wrong" to have data which is not relevant to the current page
for example, if you're viewing the profile of User A, having data stored for User B just means that if you then go back to User B's page, you don't have to fetch the data again</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:30:55.845500</ts>
    <user>Nana</user>
    <text>and it's always stored by ID, so User A's data would never overwrite User B's data</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:32:11.846200</ts>
    <user>Carman</user>
    <text>that sort of data makes sense to store on the top-level because you always want it around regardless of what page you're on</text>
  </message>
  <message conversation_id="225">
    <ts>2019-01-22T14:33:00.846500</ts>
    <user>Danika</user>
    <text>app data != page data ^^</text>
  </message>
  <message conversation_id="228">
    <ts>2019-01-22T15:18:38.849300</ts>
    <user>Leah</user>
    <text>Afternoon. Having difficulty integrating an elm Browser Element into an existing react app, mainly when it comes to configuring webpack. Is using react-elm-component package and elm-webpackloader the advisable way to go about all this.</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:44:54.849700</ts>
    <user>Melodee</user>
    <text>Which Github issue were you looking at? Are there any discussions on the thread? I’ve noticed the same thing (filed a possibly different bug) and would like to follow it as much as possible.</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:47:09.850500</ts>
    <user>Bernardo</user>
    <text>To be sure, there’s no way to pattern match against record syntax, is there?</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:47:27.850600</ts>
    <user>Bernardo</user>
    <text>I.e. I went from
```
Customers String (Maybe CustomerInfo)
```</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:47:40.850800</ts>
    <user>Bernardo</user>
    <text>to
```
Customers { filter: String, modal: Maybe CustomerInfo }
```</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:48:12.851000</ts>
    <user>Bernardo</user>
    <text>But now instead of:
```
Customers _ (Just _) -&amp;gt; False
```</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:48:42.851300</ts>
    <user>Bernardo</user>
    <text>I have to:
```
Customers page -&amp;gt; case page.modal of
  Just _ -&amp;gt; False
  Nothing -&amp;gt; True
```</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:49:22.851500</ts>
    <user>Bernardo</user>
    <text>Hmm, does Elm have `isJust`? :thinking_face: :haskell:</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:49:24.851700</ts>
    <user>Virgie</user>
    <text>you can match on a record, but can't match on the values in the record directly, so
``` 
case myPoint of 
    { x, y } -&amp;gt; ...
```</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:49:46.851900</ts>
    <user>Virgie</user>
    <text>no, though `Maybe.Extra` probably does</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:52:24.852100</ts>
    <user>Bernardo</user>
    <text>Oh, that’s good to know! So that would bind `x` to whatever is in `x` in the record?</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:53:55.852300</ts>
    <user>Bernardo</user>
    <text>It does, and `Maybe.Extra` does have it :tada:</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:53:59.852500</ts>
    <user>Bernardo</user>
    <text>```
Customers { modal } -&amp;gt; isJust modal
```</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:54:06.852700</ts>
    <user>Bernardo</user>
    <text>That’s a little nicer :sunglasses:</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:54:18.852900</ts>
    <user>Bernardo</user>
    <text>Thanks! :cookie:</text>
  </message>
  <message conversation_id="229">
    <ts>2019-01-22T17:55:17.853100</ts>
    <user>Virgie</user>
    <text>it's a little more limited than haskell can do, but this probably makes the totallity checker much easier. Also cramming more stuff into patterns might be bad style anyway</text>
  </message>
  <message conversation_id="230">
    <ts>2019-01-22T19:37:56.853800</ts>
    <user>Dexter</user>
    <text>How do you upgrade an elm dependency</text>
  </message>
  <message conversation_id="230">
    <ts>2019-01-22T19:48:39.854400</ts>
    <user>Lindsey</user>
    <text>The way I do it is try to remove the dependency manually from elm.json, then add it back again with elm install</text>
  </message>
  <message conversation_id="230">
    <ts>2019-01-22T19:50:39.856100</ts>
    <user>Lindsey</user>
    <text>as far as I know there's no elm command to remove or upgrade a dependency though.</text>
  </message>
  <message conversation_id="230">
    <ts>2019-01-22T19:58:06.856600</ts>
    <user>Dexter</user>
    <text>Thanks, that sound a bit backwards, but I’ll give it a shot :slightly_smiling_face:</text>
  </message>
  <message conversation_id="231">
    <ts>2019-01-22T20:23:34.858400</ts>
    <user>Dione</user>
    <text>I’ve been playing with the idea of writing a Dhall parser for Elm. My main reason is that I want to learn more about parsers but it would also be nice to use Dhall instead of JSON when communicating with a Haskell server.</text>
  </message>
  <message conversation_id="230">
    <ts>2019-01-23T01:58:40.858600</ts>
    <user>Jae</user>
    <text>I looked at this issue &lt;https://github.com/elm/compiler/issues/1828&gt;</text>
  </message>
  <message conversation_id="232">
    <ts>2019-01-23T03:39:17.859600</ts>
    <user>Garnett</user>
    <text>Anyone know where we can see the changes for `0.19.0-bugfix6`?</text>
  </message>
  <message conversation_id="232">
    <ts>2019-01-23T03:51:00.860200</ts>
    <user>Bert</user>
    <text>&lt;#C0K384K4Y|news-and-links&gt;, rtfeldman's post a little while ago</text>
  </message>
  <message conversation_id="232">
    <ts>2019-01-23T03:51:08.860400</ts>
    <user>Garnett</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="232">
    <ts>2019-01-23T03:51:21.860600</ts>
    <user>Bert</user>
    <text>Not in much detail though</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-23T09:22:12.862700</ts>
    <user>Jeanene</user>
    <text>The base repo is updated for 0.19 now. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="234">
    <ts>2019-01-23T10:25:18.862900</ts>
    <user>Melodee</user>
    <text>Yeah, that’s similar to what I saw :sleepy:</text>
  </message>
  <message conversation_id="234">
    <ts>2019-01-23T10:25:19.863100</ts>
    <user>Melodee</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="235">
    <ts>2019-01-23T19:04:16.866100</ts>
    <user>Desire</user>
    <text>any parcel or travis expert that gets whats going on here? &lt;https://travis-ci.org/Razzeee/htbah-character-creator&gt;</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T03:15:11.866900</ts>
    <user>Timika</user>
    <text>It seems you have to install `request` manually and add it to your `package.json`.</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T03:15:17.867100</ts>
    <user>Timika</user>
    <text>npm install request --save</text>
  </message>
  <message conversation_id="235">
    <ts>2019-01-24T04:24:06.867400</ts>
    <user>Desire</user>
    <text>but why?</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:26:23.867600</ts>
    <user>Timika</user>
    <text>One of your dependencies has a dependency that is no longer automatically installed, so you have to do that yourself. I don’t think it’s related to travis or parcel at all. I’ve just yesterday created a new parcel project from scratch and did not have to install that dependency.</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:26:46.867800</ts>
    <user>Timika</user>
    <text>You have a lot of webpack related stuff in your `devDependencies`, maybe it’s one of those?</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:27:03.868000</ts>
    <user>Timika</user>
    <text>&lt;https://docs.npmjs.com/cli/ls.html&gt;</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:27:17.868200</ts>
    <user>Timika</user>
    <text>Might give you a hint which package is causing this.</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:28:12.868400</ts>
    <user>Desire</user>
    <text>already tried, did not work but I'm guessing elm at the moment, that's why I'm confused</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:29:52.868600</ts>
    <user>Desire</user>
    <text>did try `npm ls request-promise` earlier</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:30:02.868800</ts>
    <user>Desire</user>
    <text>None</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:30:10.869200</ts>
    <user>Desire</user>
    <text>should have tried this</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:30:43.869400</ts>
    <user>Desire</user>
    <text>i think that was added in the new 0.19 rev6</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:31:10.869600</ts>
    <user>Timika</user>
    <text>That could be the case. But I wonder why I did not get the issue yesterday. :thinking_face:</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:32:24.869800</ts>
    <user>Desire</user>
    <text>well I don't like the design :confused:</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:32:36.870000</ts>
    <user>Timika</user>
    <text>BTW, I DM D&amp;amp;D 5e, nice to see another pen and paper player here! :wave:</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:34:30.870200</ts>
    <user>Desire</user>
    <text>nice, started a d&amp;amp;d round last year</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:34:44.870400</ts>
    <user>Desire</user>
    <text>also some c'thulu</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:35:14.870600</ts>
    <user>Timika</user>
    <text>```takodana:oslo-elm-day-19-cpu-emulation-demo malax$ npm ls request
oslo-elm-day-19-cpu-emulation-demo@1.0.0 /Users/malax/projects/malax/oslo-elm-day-19-cpu-emulation-demo
└─┬ elm@0.19.0-bugfix6
  └─┬ binwrap@0.2.0
    └── request@2.88.0```</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:35:30.870800</ts>
    <user>Timika</user>
    <text>that’s weird. It installed request automatically for me.</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:35:56.871000</ts>
    <user>Timika</user>
    <text>It’s a different binwrap version too.</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:36:36.871200</ts>
    <user>Desire</user>
    <text>maybe it's not the bugfix6 for me</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:37:00.871400</ts>
    <user>Timika</user>
    <text>Yeah, I just saw you don’t have that.</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:37:21.871600</ts>
    <user>Timika</user>
    <text>do you need `elm-webpack-loader` still when you use parcel?</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:37:33.871800</ts>
    <user>Timika</user>
    <text>I tend to install elm explicitly via npm.</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:38:42.872000</ts>
    <user>Desire</user>
    <text>i don't need the loader</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:39:44.872300</ts>
    <user>Desire</user>
    <text>screwed up yesterday, removed like 50 loaders due to the switch to parcel but forgotten the important ones</text>
  </message>
  <message conversation_id="233">
    <ts>2019-01-24T04:39:54.872500</ts>
    <user>Timika</user>
    <text>Happens to the best. :smile:</text>
  </message>
  <message conversation_id="236">
    <ts>2019-01-24T05:46:59.873500</ts>
    <user>Selene</user>
    <text>I need to focus an `input` element. Is there a way to do this in elm?
`autofocus` attribute only works for page-loads, so thats not an option</text>
  </message>
  <message conversation_id="236">
    <ts>2019-01-24T05:47:27.873700</ts>
    <user>Timika</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom#focus&gt;</text>
  </message>
  <message conversation_id="236">
    <ts>2019-01-24T05:48:06.874100</ts>
    <user>Selene</user>
    <text>ah thx, the dom package moved into browser :thumbsup:</text>
  </message>
  <message conversation_id="237">
    <ts>2019-01-24T05:56:05.876100</ts>
    <user>Ayesha</user>
    <text>Hi! Is there a way to subscribe to scroll events? There is the `Browser.Dom.getViewport` task. I could combine it with `onAnimationFrame`. Is there a more straight forward solution?</text>
  </message>
  <message conversation_id="237">
    <ts>2019-01-24T05:57:58.876600</ts>
    <user>Virgie</user>
    <text>&lt;@Ayesha&gt; is this something you would (in JS) use the `scroll` event for?</text>
  </message>
  <message conversation_id="237">
    <ts>2019-01-24T05:58:35.877100</ts>
    <user>Ayesha</user>
    <text>Yes. I need a Msg every time the viewport changes its position.</text>
  </message>
  <message conversation_id="237">
    <ts>2019-01-24T06:02:36.878800</ts>
    <user>Virgie</user>
    <text>there is this package that handles the `wheel` event which is similar &lt;https://package.elm-lang.org/packages/mpizenberg/elm-pointer-events/latest/Html-Events-Extra-Wheel&gt; (from a quick mdn search there are some differences though)

otherwise you can implement your own event listener to `scroll` using &lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Events#on&gt;</text>
  </message>
  <message conversation_id="237">
    <ts>2019-01-24T06:05:34.879300</ts>
    <user>Ayesha</user>
    <text>Thanks. I think the custom `on` event is the way to go.</text>
  </message>
  <message conversation_id="238">
    <ts>2019-01-24T07:12:41.888400</ts>
    <user>Nana</user>
    <text>so I looked into `elm-ui`a bit earlier, and really liked the padding/spacing/alignment model... but I've been fiddling with CSS for 10 years, and didn't really want to have to learn a new styling system at the same time as learning Elm. I've also had quite a mixed experience with CSS frameworks - you often end up fighting the system when you want something a bit custom...
but watching &lt;@Cornell&gt;'s talk right now, and it sounds really good! :grinning_face_with_star_eyes: I think I'm going to take the plunge and start converting some views into it</text>
  </message>
  <message conversation_id="238">
    <ts>2019-01-24T07:15:33.888600</ts>
    <user>Renda</user>
    <text>Update us on how it goes. Because I have seen the talks and been thinking about trying them out too :slightly_smiling_face:</text>
  </message>
  <message conversation_id="239">
    <ts>2019-01-24T07:36:46.889000</ts>
    <user>Desire</user>
    <text>did you meat to write elm-ui?</text>
  </message>
  <message conversation_id="238">
    <ts>2019-01-24T07:39:53.889300</ts>
    <user>Nana</user>
    <text>&lt;@Desire&gt; ah right thanks :smile: elm-css is what I've been using so far and it's been a little bit annoying actually with some of the limitations it has</text>
  </message>
  <message conversation_id="239">
    <ts>2019-01-24T07:57:38.889500</ts>
    <user>Desire</user>
    <text>interesting</text>
  </message>
  <message conversation_id="239">
    <ts>2019-01-24T07:58:34.889700</ts>
    <user>Desire</user>
    <text>and yes, elm-ui is exciting</text>
  </message>
  <message conversation_id="239">
    <ts>2019-01-24T09:38:54.889900</ts>
    <user>Renda</user>
    <text>Having spent most of my day on tweaking css with display: inline-block, flexbox and the occasional negative margin, I agree!</text>
  </message>
  <message conversation_id="238">
    <ts>2019-01-24T10:04:40.890300</ts>
    <user>Nana</user>
    <text>yeah even when you know all the tricks, CSS is still fiddly. &lt;@Leoma&gt;</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:11:29.891300</ts>
    <user>Sadie</user>
    <text>I am using `elm-json-decode-pipeline` and I am trying to use optional but with a default value</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:11:44.891700</ts>
    <user>Sadie</user>
    <text>If I use `optional "planning" (Decode.map Just decodePlanning) (Just Dict.empty)`</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:12:39.892200</ts>
    <user>Sadie</user>
    <text>It tells me ```The argument is: Decoder (Maybe Planning -&amp;gt; b)```</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:13:11.892500</ts>
    <user>Sadie</user>
    <text>Ok can I make it a maybe.with default ?</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:15:25.893200</ts>
    <user>Sadie</user>
    <text>I guess I should just remove all the Just and I should be fine</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:15:44.893500</ts>
    <user>Sadie</user>
    <text>`optional "planning" decodePlanning Dict.empty`</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:17:27.893800</ts>
    <user>Glenda</user>
    <text>would recommend elm-ui, it's awesome! writing CSS often comes down to how well you know all the tricks and loopholes... which is not how things should be :exploding_head:</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:23:22.894000</ts>
    <user>Zachary</user>
    <text>I can also recommend &lt;https://github.com/circuithub/elm-semantic-ui&gt;</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:24:52.894300</ts>
    <user>Leoma</user>
    <text>Even though elm-ui certainly has some gaps in features and a few bugs, I’m still 100% sold on it.
Knowledge of CSS can help work around some of elm-ui’s current (and reasonably minor) issues/limitations.</text>
  </message>
  <message conversation_id="238">
    <ts>2019-01-24T10:25:05.894500</ts>
    <user>Zachary</user>
    <text>Removing loaders is the best part when switching to parcel :smile:</text>
  </message>
  <message conversation_id="238">
    <ts>2019-01-24T10:31:27.894700</ts>
    <user>Nana</user>
    <text>&lt;@Zachary&gt; I think Elm-UI is way more interesting though, as it's more a language to replace CSS rather than just a set of predefined CSS classes</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T10:36:18.896600</ts>
    <user>Tracey</user>
    <text>I guess you must return a Maybe Dict with Dict.empty.</text>
  </message>
  <message conversation_id="238">
    <ts>2019-01-24T10:36:55.897600</ts>
    <user>Tracey</user>
    <text>The way you're doing you are returning only the Just part, without the Nothing.</text>
  </message>
  <message conversation_id="238">
    <ts>2019-01-24T10:47:26.902800</ts>
    <user>Tracey</user>
    <text>Folks, another question.
I found myself in a situation that I think the compiler can help me to avoid.
In a mistake I have a function A that returns function B then returns function A again.
As a human I know that this will lead me to a infinite loop. But  I'm wondering if there is a way we can make the compiler identify that misleading before it happen in runtime.</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:01:41.904000</ts>
    <user>Niesha</user>
    <text>&lt;@Tracey&gt; totality detection isn't possible with a Turing-complete language :disappointed:</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:06:28.904800</ts>
    <user>Timika</user>
    <text>More context: &lt;https://en.wikipedia.org/wiki/Halting_problem&gt;</text>
  </message>
  <message conversation_id="238">
    <ts>2019-01-24T11:12:51.906000</ts>
    <user>Simon</user>
    <text>You can detect some programs that won’t halt, you just can’t guarantee you’ll detect all of them.</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:13:28.906700</ts>
    <user>Simon</user>
    <text>So the compiler could tell you if you’ve created something known to be infinitely recursive; some languages do do this already</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:23:36.907800</ts>
    <user>Huong</user>
    <text>Elm does this for values (e.g. decoders, where people run into this fairly regularly)</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:24:15.908700</ts>
    <user>Huong</user>
    <text>it doesn't do this for functions, and that's actually something used in the implementations of functions like `never : Never -&amp;gt; a`</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:24:47.909300</ts>
    <user>Huong</user>
    <text>(which is pretty much `never (Never v) = never v` given `type Never = Never Never`)</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:28:35.910200</ts>
    <user>Karrie</user>
    <text>hello everyone! I’m having a weird error that I never encountered before:
```The `Http` module does not expose a `Request` type. These names seem close```</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:28:51.910500</ts>
    <user>Karrie</user>
    <text>this is my code:
```

import Http
import Url.Builder exposing (QueryParameter)


request :
    { body : Http.Body
    , expect : Http.Expect a
    , headers : List Http.Header
    , method : String
    , timeout : Maybe Float
    , url : String
    }
    -&amp;gt; Http.Request a
request =
    Http.request
        { body = config.body
        , expect = config.expect
        , headers = config.headers
        , method = config.method
        , timeout = config.timeout
        , url = config.url
        }
```</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:32:17.911400</ts>
    <user>Earnest</user>
    <text>There is no `Request` type in the Http module anymore: &lt;https://package.elm-lang.org/packages/elm/http/latest/Http&gt;</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:32:49.911500</ts>
    <user>Zona</user>
    <text>functor is defined for as `for all a b.` of course you can use it in case where `a = b` but you can't say that thing that supports only this case is functor. if so then everything would be functor because this is true for any data type. It can be defined as `map _ a = a`</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:33:15.911900</ts>
    <user>Zona</user>
    <text>therefore it doesn't even make sense to talk about this property at all.</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:33:16.912200</ts>
    <user>Earnest</user>
    <text>Check out the return type of `Http.request`: &lt;https://package.elm-lang.org/packages/elm/http/latest/Http&gt;</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:41:26.912600</ts>
    <user>Karrie</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:41:44.913000</ts>
    <user>Karrie</user>
    <text>is there a way to convert “2019-01-24T16:20:00Z” to a date time type?</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:41:57.913100</ts>
    <user>Simon</user>
    <text>I like the never type, though it should probably get first class type system treatment vs an interesting hack on the inference system. Then it’d free up Elm to help folks a little bit more in the other dimensions</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:42:29.913500</ts>
    <user>Virgie</user>
    <text>I think this is what you're looking for &lt;https://package.elm-lang.org/packages/rtfeldman/elm-iso8601-date-strings/latest/Iso8601&gt;</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:43:19.913800</ts>
    <user>Karrie</user>
    <text>brilliant! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:49:47.914000</ts>
    <user>Karrie</user>
    <text>how can I convert it to a readable datetime though? (from frontend)</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:53:18.914200</ts>
    <user>Virgie</user>
    <text>you mean more readable than YYYY-MM-DDTHH:mm:ss.SSSZ?</text>
  </message>
  <message conversation_id="240">
    <ts>2019-01-24T11:54:12.914400</ts>
    <user>Virgie</user>
    <text>it depends a little bit on what you want really. The readme of elm/time has an example &lt;https://package.elm-lang.org/packages/elm/time/latest/&gt;</text>
  </message>
  <message conversation_id="241">
    <ts>2019-01-24T12:51:28.915400</ts>
    <user>Dede</user>
    <text>Is the following worth reporting as a bug?
```$ elm make src/Router.elm 
elm: ./Data/Vector/Generic/Mutable.hs:703 (modify): index out of bounds (3,3)
CallStack (from HasCallStack):
  error, called at ./Data/Vector/Internal/Check.hs:87:5 in vector-0.12.0.1-IfIQAgrX0q07Xkx6bkYLRX:Data.Vector.Internal.Check
elm: thread blocked indefinitely in an MVar operation
```</text>
  </message>
  <message conversation_id="241">
    <ts>2019-01-24T12:51:59.915500</ts>
    <user>Dede</user>
    <text>My plan is to report it unless someone here says it's known/fixed upstream in which case I'll ignore it.</text>
  </message>
  <message conversation_id="241">
    <ts>2019-01-24T12:52:28.915700</ts>
    <user>Virgie</user>
    <text>does it happen consistently?</text>
  </message>
  <message conversation_id="241">
    <ts>2019-01-24T12:52:38.915900</ts>
    <user>Dede</user>
    <text>100% of the time with the file at this point.</text>
  </message>
  <message conversation_id="241">
    <ts>2019-01-24T12:53:24.916100</ts>
    <user>Virgie</user>
    <text>(that is relevant because MVars are used in distributing work over multiple cores)</text>
  </message>
  <message conversation_id="241">
    <ts>2019-01-24T12:53:58.916400</ts>
    <user>Virgie</user>
    <text>if there's not a duplicate then sure report it.</text>
  </message>
  <message conversation_id="241">
    <ts>2019-01-24T12:54:15.916600</ts>
    <user>Virgie</user>
    <text>and if you have a good reproducable example than share it regardless</text>
  </message>
  <message conversation_id="241">
    <ts>2019-01-24T12:58:15.916800</ts>
    <user>Dede</user>
    <text>I had initially thought there wasn't a duplicate, but focusing on the MVar helped.  This is probably what's going on: &lt;https://github.com/elm/compiler/issues/1748&gt;

Thanks.</text>
  </message>
  <message conversation_id="242">
    <ts>2019-01-24T13:20:58.917200</ts>
    <user>Nana</user>
    <text>&lt;@Karrie&gt; this is an excellent package for converting Time.Posix to Strings:
&lt;https://package.elm-lang.org/packages/ryannhg/date-format/latest/&gt;</text>
  </message>
  <message conversation_id="242">
    <ts>2019-01-24T13:57:03.917700</ts>
    <user>Karrie</user>
    <text>&lt;@Nana&gt; I will have a look into it! Thanks!</text>
  </message>
  <message conversation_id="243">
    <ts>2019-01-24T16:38:35.918500</ts>
    <user>Niesha</user>
    <text>Basically, one thread crashes with an exception because someone is using an unsafe operation, and then the deadlock detection kicks in - that's the MVar part.</text>
  </message>
  <message conversation_id="244">
    <ts>2019-01-24T17:02:45.918800</ts>
    <user>Freda</user>
    <text>Usually I've seen Evan tell people to create an issue if an SSCCE is available regardless whether one already exists in order to have more data on the matter.</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:20:54.920700</ts>
    <user>Bernardo</user>
    <text>Is it considered bad form to have an `init` which says, e.g. {model = []}, but also has a command which does some HTTP and sends back the ‘actual’ values for `model`?</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:21:49.921900</ts>
    <user>Bernardo</user>
    <text>Because: I’m having trouble with :arrow_up: , where the ‘actual’ values are loaded and sent back through a port (AFAICT from the JS side), but the model is never updated :disappointed:</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:22:43.923000</ts>
    <user>Bernardo</user>
    <text>It occurs to me now I could just defer initializing the Elm app and send the ‘actual’ values through as a flag, but I wanted to see if there’s a consensus on this? :thinking_face:</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:28:01.925400</ts>
    <user>Earlean</user>
    <text>&lt;@Bernardo&gt; that's fine. It's not uncommon to have `init` produce a value for the model that shows it in a loading state and http requests to fetch data</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:35:02.927900</ts>
    <user>Bernardo</user>
    <text>&lt;@Earlean&gt; okay. So now the mystery begins: I switched to the ‘just send an initial value in flags’ approach and it works fine, so:
Are there any known issue with having commands in initializers tripping over initial model values?</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:38:51.929100</ts>
    <user>Bernardo</user>
    <text>If I fire off the command via e.g. a button, it works just fine, it just fails to do anything when I use it in `init` :thinking_face:</text>
  </message>
  <message conversation_id="246">
    <ts>2019-01-24T19:40:10.930400</ts>
    <user>Carrol</user>
    <text>Is that the root `init`? If inside a module, maybe is not wired up with the top init</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:41:03.931300</ts>
    <user>Bernardo</user>
    <text>Yep, root `init`, I’m a bit of newbie, so this is my first Elm project, but still just one file and one `init` :slightly_smiling_face:</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:41:08.931600</ts>
    <user>Bernardo</user>
    <text>I’ll try to make a repro.</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:49:11.933700</ts>
    <user>Earlean</user>
    <text>&lt;@Bernardo&gt; commands aren't going to see you model value, the command will produce a Msg value that will be passed to your `update` function</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:50:00.935600</ts>
    <user>Earlean</user>
    <text>I see you mentioned you are using a port. Have you subscribed to the port in your `subscriptions`?</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:50:07.935800</ts>
    <user>Bernardo</user>
    <text>Yeah, so I _presume_ `update` gets the message back via the port call in JS (which is triggered by the command fired off in the init)</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:50:39.937100</ts>
    <user>Bernardo</user>
    <text>And that bit of `update` logic updates the model, but view doesn’t seem to change :grimacing:</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:50:55.937600</ts>
    <user>Earlean</user>
    <text>You send on a port with a command and receive from ports via `subscriptions`</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:51:05.937800</ts>
    <user>Bernardo</user>
    <text>Yep</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:51:05.938000</ts>
    <user>Bernardo</user>
    <text>What’s extra weird is: &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1548376731929100&gt;</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:52:08.939100</ts>
    <user>Earlean</user>
    <text>Do both the command and the button click produce the same Msg value?</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:54:15.940400</ts>
    <user>Earlean</user>
    <text>Look at the case for the Msg value that your command would produce in your `update`</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:58:26.940600</ts>
    <user>Bernardo</user>
    <text>Yeah, same Msg</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:58:37.940900</ts>
    <user>Bernardo</user>
    <text>I’m just whipping up a repro in Ellie</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T19:58:47.941200</ts>
    <user>Bernardo</user>
    <text>Of course I’m sure I won’t be able to repro :joy:</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T20:01:50.942300</ts>
    <user>Earlean</user>
    <text>Ah, are you sending to the port in JS immediately after initialising the Elm app?</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T20:03:02.943700</ts>
    <user>Earlean</user>
    <text>Sending to a port before Elm is ready doesn't work.</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T20:05:42.945100</ts>
    <user>Bernardo</user>
    <text>&lt;@Earlean&gt; so that’s what I was doing at first, and I had the same behavior, which made me thing, _I know, I’ll have a command fire in `init` to trigger the HTTP and port send back, that way I can be sure Elm is ready_. But that didn’t work :disappointed:</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T20:05:55.945500</ts>
    <user>Bernardo</user>
    <text>Aaaand, it works as expected in my Ellie app :grimacing: &lt;https://ellie-app.com/4xNRkmBRp2Va1&gt;</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T20:06:33.945900</ts>
    <user>Bernardo</user>
    <text>Who knows, I must have done something silly in my actual app.</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T20:06:40.946200</ts>
    <user>Bernardo</user>
    <text>Sorry and thanks for putting up with me!</text>
  </message>
  <message conversation_id="247">
    <ts>2019-01-24T23:14:41.947000</ts>
    <user>Bernardo</user>
    <text>This: &lt;https://github.com/elm/compiler/issues/774&gt;, specifically not being able to use a `type alias` as the key in a `Dict` seems crazy to me. Am I missing something?</text>
  </message>
  <message conversation_id="245">
    <ts>2019-01-24T23:20:49.948100</ts>
    <user>Earlean</user>
    <text>&lt;@Bernardo&gt; It's not related to `type alias` at all, it's about which types are `comparable`</text>
  </message>
  <message conversation_id="247">
    <ts>2019-01-24T23:21:42.949200</ts>
    <user>Earlean</user>
    <text>some of the built in types are `comparable`, they have some reasonable ordering. `Int`, `String` etc. are `comparable`</text>
  </message>
  <message conversation_id="247">
    <ts>2019-01-24T23:22:59.950600</ts>
    <user>Earlean</user>
    <text>By user defined types and records don't have a reasonable default ordering so you'd need some way to specify some how they should be ordered</text>
  </message>
  <message conversation_id="247">
    <ts>2019-01-24T23:23:56.951600</ts>
    <user>Kris</user>
    <text>Most do have a reasonable ordering, it's just not the way it works</text>
  </message>
  <message conversation_id="247">
    <ts>2019-01-24T23:25:49.953200</ts>
    <user>Earlean</user>
    <text>&lt;@Bernardo&gt; the way similar languages do this is by having types implement some kind of interface (a type class) that defines how values of that type should be ordered. Which leads us in to the discussion of why Elm doesn't have user definable or implementable type classes.</text>
  </message>
  <message conversation_id="247">
    <ts>2019-01-24T23:32:30.955200</ts>
    <user>Earlean</user>
    <text>There are a few packages that provide wrappers around `Dict` that take a function of `(k -&amp;gt; comparable)` so you can specify some function for converting your key values from some type to a type that is comparable. eg. &lt;https://package.elm-lang.org/packages/turboMaCk/any-dict&gt;</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T03:28:45.955500</ts>
    <user>Nana</user>
    <text>However, using `[]` to represent "waiting for data" is kind of bad form. &lt;http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html&gt;</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T03:43:28.955800</ts>
    <user>Desire</user>
    <text>not excited about the asset handling</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T06:25:56.956200</ts>
    <user>Nana</user>
    <text>&lt;@Renda&gt; I can report that elm-ui has been really nice so far! definitely the way to go for styling in Elm</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T06:29:24.956400</ts>
    <user>Nana</user>
    <text>especially compared to the alternatives (I was pretty happy with component-scoped Stylus in Vue, but I found elm-css quite awkward in comparison, and elm-css-modules seems more like a workaround for when you already have tons of stylesheets that you don't want to rewrite)</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T06:30:52.956600</ts>
    <user>Nana</user>
    <text>encountered one limitation so far: the tables currently don't support adding styles or event handlers to rows, only cells
I was able to work around it though</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T06:32:09.956800</ts>
    <user>Nana</user>
    <text>and the row/column/padding/spacing/align system is just perfect!</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:22:55.957200</ts>
    <user>Renda</user>
    <text>&lt;@Nana&gt; hey that's great to hear! I can't wait to try it! But do you feel Elm-UI is better than SFC + stylus in Vue? (Since you said Elm-css was worse)</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:26:24.957400</ts>
    <user>Nana</user>
    <text>&lt;@Renda&gt; yeah probably</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:27:01.957600</ts>
    <user>Nana</user>
    <text>and definitely if you don't have years of experience with css</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:27:14.957800</ts>
    <user>Renda</user>
    <text>I have not looked into it but how doesnt it actually work? Is the styling done via JavaScript and absolute positionings or is the output clever css?</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:27:46.958000</ts>
    <user>Renda</user>
    <text>I'm definetly worst at css :stuck_out_tongue:</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:29:04.958200</ts>
    <user>Nana</user>
    <text>it mostly uses css flexboxes, but with a nicer API</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:30:48.958400</ts>
    <user>Renda</user>
    <text>Ok cool :slightly_smiling_face:</text>
  </message>
  <message conversation_id="249">
    <ts>2019-01-25T07:45:17.959200</ts>
    <user>Juliann</user>
    <text>Hello! Is there a way to make it so Elm does not overwrite the value of inputs when `update` is called?</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:46:46.961000</ts>
    <user>Antonette</user>
    <text>&lt;@Juliann&gt; quite possibly, depending on what you mean by that. Is the problem that when you change your model, you have in your view inputs whose `value` attribute is set to the model's data?</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:46:55.961400</ts>
    <user>Juliann</user>
    <text>The value is unchanging</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:47:16.962100</ts>
    <user>Juliann</user>
    <text>Yet it is reset each time update is called</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:48:16.964100</ts>
    <user>Juliann</user>
    <text>I'm suddenly realising that maybe `Html.Keyed` will help here as without it Elm can't avoid re-rendering my entire view, let me quickly try that</text>
  </message>
  <message conversation_id="249">
    <ts>2019-01-25T07:48:19.964200</ts>
    <user>Antonette</user>
    <text>First thing that comes to mind is you could just not set the `value` attribute in your inputs. They won't change when the model changes.</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:49:09.964900</ts>
    <user>Antonette</user>
    <text>Why don't you want your inputs to reflect your model's data though?</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:51:07.965500</ts>
    <user>Juliann</user>
    <text>I need to set the initial value, can that be done without value?</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:51:27.966000</ts>
    <user>Juliann</user>
    <text>And because the value isn't used afterwards by Elm, it's a normal HTML form</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:52:07.966200</ts>
    <user>Antonette</user>
    <text>Ok.</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:53:42.968500</ts>
    <user>Earlean</user>
    <text>&lt;@Juliann&gt; all inputs in Elm are controlled inputs, the `view` is a reflection of the `model`</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:53:57.968800</ts>
    <user>Antonette</user>
    <text>You might have misunderstood something about the way Elm works ; the view is not just generated when you start the application. It's re-generated every time your model changes.</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:54:46.970200</ts>
    <user>Juliann</user>
    <text>Yes, but it does incremental rebuilding</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:55:10.971400</ts>
    <user>Juliann</user>
    <text>I thought that it would be smart enough to not rewrite this if the diff showed no change</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:55:13.971800</ts>
    <user>Antonette</user>
    <text>Which, in turns, means that if you don't change your model when you put something in your input fields, and the view sets the value from the model's data, then every time something in your model changes, your view will be updated back to the model's initial value.</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:55:22.972100</ts>
    <user>Juliann</user>
    <text>I'll try forcing it with lazy</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:55:25.972200</ts>
    <user>Earlean</user>
    <text>What problem are you seeing that you're trying to avoid?</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:57:13.972900</ts>
    <user>Juliann</user>
    <text>Input for which state have not changed are being re-rendered, causing their updated value to be reset</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:58:19.973400</ts>
    <user>Earlean</user>
    <text>if they're unchanged, aren't they at their reset value?</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T07:59:00.973700</ts>
    <user>Juliann</user>
    <text>No, because inputs can be updated outside of Elm</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:00:00.974500</ts>
    <user>Earlean</user>
    <text>inputs being updated will produce a `input` event that you can listen for in Elm</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:00:41.975200</ts>
    <user>Juliann</user>
    <text>And then I need to manage the state of this entire form, which would double the size of this program</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:00:48.975600</ts>
    <user>Juliann</user>
    <text>Elm used to support this -&amp;gt; &lt;https://github.com/elm/html/commit/4912804dadbb2e7cdb6effa8ee737d2e08a96247&gt;</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:01:09.975900</ts>
    <user>Earlean</user>
    <text>Yes, if you have a form that you're rendering from Elm you should be storing it's state in the Elm model</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:06:43.978200</ts>
    <user>Juliann</user>
    <text>I would agree if Elm did anything with it</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:06:57.978700</ts>
    <user>Juliann</user>
    <text>Elm is responsible for perhaps 5% of the state here, the rest is plain old HTML</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:07:03.978900</ts>
    <user>Juliann</user>
    <text>It's reinventing the wheel</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:07:17.979200</ts>
    <user>Juliann</user>
    <text>And until 0.19 this was supported</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:07:40.979500</ts>
    <user>Virgie</user>
    <text>you can recreate the defaultValue property yourself</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:09:20.980400</ts>
    <user>Virgie</user>
    <text>on the other hand: if elm renders it, then elm does do something with it right?</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:09:43.980800</ts>
    <user>Juliann</user>
    <text>It's a javascript element property, not a html property, so you cannot</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:10:27.981300</ts>
    <user>Juliann</user>
    <text>I may be stuck here, sadly</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:10:40.981900</ts>
    <user>Juliann</user>
    <text>I'm confused as to why `lazy` doesn't work</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:10:56.982300</ts>
    <user>Virgie</user>
    <text>I'm not sure what you mean by that? you can implement the `defaultValue` as it existed in 0.18 yourself in 0.19</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:12:26.983400</ts>
    <user>Juliann</user>
    <text>You cannot, it uses a Kernel module to set javascript properties on the virtual DOM. Only `elm/*` packages can do this</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:13:00.983900</ts>
    <user>Virgie</user>
    <text>e.g.
```
import VirtualDom

defaultValue : String -&amp;gt; Attribute msg	
defaultValue v =	
  VirtualDom.property "defaultValue" (Encode.string v)
```</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:13:48.984400</ts>
    <user>Virgie</user>
    <text>yes but the  kernel functionality is exposed, with exactly this sort of use case in mind</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:14:13.984800</ts>
    <user>Juliann</user>
    <text>ooh, that's different from the way it is defined in core</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:14:16.985100</ts>
    <user>Juliann</user>
    <text>let's try that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:14:36.985400</ts>
    <user>Virgie</user>
    <text>it should be similar to the way it was defined in 0.18</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:15:50.986100</ts>
    <user>Juliann</user>
    <text>In 0.18 it uses the Kernel module while other the other properties use the method you've shown</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:16:22.986500</ts>
    <user>Juliann</user>
    <text>It works, wonderful</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:16:24.986700</ts>
    <user>Juliann</user>
    <text>Thank you so much</text>
  </message>
  <message conversation_id="248">
    <ts>2019-01-25T08:16:44.987100</ts>
    <user>Juliann</user>
    <text>:heart:</text>
  </message>
  <message conversation_id="250">
    <ts>2019-01-25T08:58:28.987400</ts>
    <user>Velia</user>
    <text>And now also this:

&lt;https://package.elm-lang.org/packages/pzp1997/assoc-list/1.0.0/&gt;

which works with any type, without a `k -&amp;gt; comparable` function. Performance is different though.</text>
  </message>
  <message conversation_id="251">
    <ts>2019-01-25T10:31:02.988500</ts>
    <user>Chaya</user>
    <text>I'm trying to use elm-upgrade, but I get the following error message:
```
{ MaxRedirectsError: Redirected 10 times. Aborting.
    at ClientRequest.fn.request.res (/home/fredrik/.npm-global/lib/node_modules/elm-upgrade/node_modules/got/index.js:40:23)
    at Object.onceWrapper (events.js:315:30)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at Socket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  message: 'Redirected 10 times. Aborting.',
  host: '&lt;http://package.elm-lang.org|package.elm-lang.org&gt;',
  hostname: '&lt;http://package.elm-lang.org|package.elm-lang.org&gt;',
  method: 'GET',
  path: '/search.json',
  statusCode: 301,
  statusMessage: 'Moved Permanently' }
ERROR: Unable to connect to &lt;https://package.elm-lang.org&gt;.  Please try again later.
```
I am behind a corporate proxy, but `elm install` etc works fine.</text>
  </message>
  <message conversation_id="252">
    <ts>2019-01-25T10:32:20.989200</ts>
    <user>Lynne</user>
    <text>Try installing a package you never installed with `elm install` to verify it is not the proxy's issue.</text>
  </message>
  <message conversation_id="252">
    <ts>2019-01-25T10:33:08.990100</ts>
    <user>Lynne</user>
    <text>As of 0.19 `elm install` takes packages from local cache so it may not even need to go to Internet if package is cached already</text>
  </message>
  <message conversation_id="252">
    <ts>2019-01-25T10:34:19.990700</ts>
    <user>Lynne</user>
    <text>I can open `&lt;https://package.elm-lang.org/search.json&gt;` on my machine</text>
  </message>
  <message conversation_id="252">
    <ts>2019-01-25T10:35:08.991100</ts>
    <user>Lynne</user>
    <text>Getting 200, so it must be an issue with your corporate proxy</text>
  </message>
  <message conversation_id="251">
    <ts>2019-01-25T10:59:21.991300</ts>
    <user>Buffy</user>
    <text>Oh. My. Lord! That is awesome! love how he’s like, it’s “asymptotically slower than elm/core” but works well on small-ish Dict’s.
I was just going to add how irritable I was working with any-dict but I hadn’t heard of assoc-list! Woo!</text>
  </message>
  <message conversation_id="251">
    <ts>2019-01-25T11:00:51.991500</ts>
    <user>Velia</user>
    <text>Yes it's very useful, here is the announcement:

&lt;https://discourse.elm-lang.org/t/introducing-assoc-list-a-dict-substitute-with-custom-keys/2901&gt;</text>
  </message>
  <message conversation_id="251">
    <ts>2019-01-25T11:04:17.991800</ts>
    <user>Buffy</user>
    <text>Noice!</text>
  </message>
  <message conversation_id="251">
    <ts>2019-01-25T11:05:53.992000</ts>
    <user>Velia</user>
    <text>This might help if performance is acceptable for your use case:
 &lt;https://package.elm-lang.org/packages/pzp1997/assoc-list/1.0.0/&gt;</text>
  </message>
  <message conversation_id="253">
    <ts>2019-01-25T12:16:10.992500</ts>
    <user>Bernardo</user>
    <text>Yeah it all makes sense, it's just that in this case my life would have been a lot easier if I could have just `deriving Eq, Ord` on my `alias` :expressionless:</text>
  </message>
  <message conversation_id="253">
    <ts>2019-01-25T12:16:17.992700</ts>
    <user>Bernardo</user>
    <text>Perhaps I'm just spoiled by Elm</text>
  </message>
  <message conversation_id="253">
    <ts>2019-01-25T12:16:27.992900</ts>
    <user>Bernardo</user>
    <text>(expecting things to be so easy)</text>
  </message>
  <message conversation_id="253">
    <ts>2019-01-25T12:17:58.993200</ts>
    <user>Bernardo</user>
    <text>Love it &lt;@Nana&gt;!</text>
  </message>
  <message conversation_id="253">
    <ts>2019-01-25T12:18:58.993400</ts>
    <user>Bernardo</user>
    <text>Amusingly I actually use that
```
type RemoteData e a
    = NotAsked
    | Loading
    | Failure e
    | Success a
```
pattern elsewhere, when submitting a form. For some reason it didn't click that I could follow it for loading also :tada:</text>
  </message>
  <message conversation_id="253">
    <ts>2019-01-25T12:59:32.995400</ts>
    <user>Bernardo</user>
    <text>I remember seeing a few (IIRC) &lt;@Leonie&gt; talks which feature a slide showing a loop of (IIRC) Build :arrow_right: Learn :arrow_right: Refactor :rewind:.
Does this sound familiar to anyone?</text>
  </message>
  <message conversation_id="253">
    <ts>2019-01-25T14:02:35.995900</ts>
    <user>Lenore</user>
    <text>vaguely yes, though i think instead of Learn it was Discover</text>
  </message>
  <message conversation_id="253">
    <ts>2019-01-25T15:31:39.996900</ts>
    <user>Mammie</user>
    <text>&lt;@Bernardo&gt; Is it this one? &lt;https://youtu.be/x1FU3e0sT1I?t=2348&gt;</text>
  </message>
  <message conversation_id="253">
    <ts>2019-01-25T15:32:27.997600</ts>
    <user>Bernardo</user>
    <text>That's it! :tada: Thanks &lt;@Mammie&gt;, what a hero!</text>
  </message>
  <message conversation_id="254">
    <ts>2019-01-25T19:38:23.000200</ts>
    <user>Loyce</user>
    <text>Hi folks! I have a somewhat interesting question. I'm writing a parser (using `elm/parser`) for a fairly simple syntax I've written for commands, which is sort of like a command line if you will with the possibility of multiple statements. Some of those statements will ultimately mutate some of the global state (add items for example), and then future statements might refer to those items added. In an Elm-esque way, i'm trying to figure out how to have a sort of "new stuff created" stack as part of the parser, so that I can check the *real* state and also check the *will be created but not created yet* state to let the user know about potential errors prior to running their commands</text>
  </message>
  <message conversation_id="254">
    <ts>2019-01-25T19:38:45.000600</ts>
    <user>Loyce</user>
    <text>I'm not really sure how to go about that, somehow perhaps passing a simplistic model throughout all the parsers?</text>
  </message>
  <message conversation_id="254">
    <ts>2019-01-25T19:45:52.003400</ts>
    <user>Bebe</user>
    <text>I guess there are many ways to do the same thing but I would keep the parsers about just parsing and creating the AST and then I’d do the type checking or interpretation part, which would raise those errors you are talking about if everything parsed correctly </text>
  </message>
  <message conversation_id="254">
    <ts>2019-01-25T19:46:18.003800</ts>
    <user>Loyce</user>
    <text>So do a first pass</text>
  </message>
  <message conversation_id="254">
    <ts>2019-01-25T19:46:29.004000</ts>
    <user>Loyce</user>
    <text>Then run it through another piece that will take that and do a sort of "fake" execution</text>
  </message>
  <message conversation_id="254">
    <ts>2019-01-25T19:46:50.004200</ts>
    <user>Loyce</user>
    <text>and then assuming that checks out, do the real execution</text>
  </message>
  <message conversation_id="254">
    <ts>2019-01-25T19:47:12.004400</ts>
    <user>Loyce</user>
    <text>That makes sense I think; once I have my Statement objects etc and I run them through a checker, I would be able to keep whatever state necessary</text>
  </message>
  <message conversation_id="254">
    <ts>2019-01-25T19:47:58.004600</ts>
    <user>Loyce</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="255">
    <ts>2019-01-25T20:31:13.010200</ts>
    <user>Cammy</user>
    <text>Anyone have a better way of describing a graph (for web audio) where the nodes can multiple inputs or outputs than the following:

```
graph
   [ node "apple" data
   , node "banana" data
   , node "watermelon" data
   , node "pineapple" data
   ]
   [ connect {output = "apple", input= "banana"}
  , connect {output = "apple", input "watermelon"}
  , connect {output = "banana", input "pineapple"}
  , connect {output = "watermelon", input "apple"}
  ]
```</text>
  </message>
  <message conversation_id="255">
    <ts>2019-01-25T20:32:45.011400</ts>
    <user>Cammy</user>
    <text>or a less verbose version of `connect`: `connect ("banana", "apple")`

I’m looking more for another paradigm or structure.</text>
  </message>
  <message conversation_id="256">
    <ts>2019-01-25T21:47:48.011800</ts>
    <user>Carman</user>
    <text>Is this a directed graph?</text>
  </message>
  <message conversation_id="256">
    <ts>2019-01-25T21:51:52.013200</ts>
    <user>Carman</user>
    <text>I wonder if you could do something more concise like:
```
graph
   [ node "apple" data [ "banana", "watermelon" ]
   , node "banana" data [ "pineapple" ]
   , node "watermelon" data [ "apple" ]
   , node "pineapple" data []
   ]
```</text>
  </message>
  <message conversation_id="256">
    <ts>2019-01-25T21:52:16.013600</ts>
    <user>Carman</user>
    <text>where the third argument is a list of node ids you connect to</text>
  </message>
  <message conversation_id="257">
    <ts>2019-01-26T04:11:27.017800</ts>
    <user>Moshe</user>
    <text>Is there a way to encode a `Decode.value`? What I want to do is: `API request -&amp;gt; decode as Value, because I don't care about the structure, nor can I predict it -&amp;gt; Send this value through a port -&amp;gt; work with it in JS -&amp;gt; send the updated value back to elm`</text>
  </message>
  <message conversation_id="257">
    <ts>2019-01-26T04:12:08.018400</ts>
    <user>Lynne</user>
    <text>I think `Encode.Value` and `Decode.Value` are interchangeable</text>
  </message>
  <message conversation_id="257">
    <ts>2019-01-26T04:13:49.019800</ts>
    <user>Moshe</user>
    <text>Ok. Then I got at least that part right :smile: So how to use it in an encoder? I don’t know what to put at `???`: `Encode.object [ ("some_value", ??? obj.someValue ) ]`</text>
  </message>
  <message conversation_id="257">
    <ts>2019-01-26T04:15:24.021200</ts>
    <user>Lynne</user>
    <text>Does not it work with just putting this value into the tuple? In other words, if you have `someValue : Decode Value` can't you just use `Encode.object [("some_value", someValue)]`?</text>
  </message>
  <message conversation_id="257">
    <ts>2019-01-26T04:16:41.021700</ts>
    <user>Lynne</user>
    <text>`type alias Value = Json.Encode.Value`</text>
  </message>
  <message conversation_id="257">
    <ts>2019-01-26T04:16:44.021900</ts>
    <user>Moshe</user>
    <text>Well… beat me to it. Wait a moment ^^</text>
  </message>
  <message conversation_id="257">
    <ts>2019-01-26T04:16:45.022000</ts>
    <user>Lynne</user>
    <text>From `Decode.elm`</text>
  </message>
  <message conversation_id="257">
    <ts>2019-01-26T04:17:05.022300</ts>
    <user>Lynne</user>
    <text>This is the same type</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:33:02.024300</ts>
    <user>Rico</user>
    <text>Why is it idiomatic to make subscriptions `mySubscription : (value -&amp;gt; msg) -&amp;gt; Sub msg` instead of just returning a `Sub value` and expecting the caller to call `Sub.map` like we do for `Html` and `Cmd`?</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:37:27.026300</ts>
    <user>Earlean</user>
    <text>&lt;@Rico&gt; I'm not sure what you mean, it's far more common for functions to take a function that will convert a value to a `msg` than to use `Html.map` or `Cmd.map`</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:38:26.028100</ts>
    <user>Earlean</user>
    <text>Look at all the functions in the Html package or all the functions that return `Cmd msg` in the official packages</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:39:39.030400</ts>
    <user>Rico</user>
    <text>Ah okay apparently I've been structuring my code the nonstandard way.
My question still applies. What's the advantage of that way over `.map`?</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:42:03.032800</ts>
    <user>Earlean</user>
    <text>The advantage is less typing. It's shorter to pass in a function than to always `.map`, but the result is equivalent.</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:46:47.035900</ts>
    <user>Earlean</user>
    <text>Imagine of every time you used `Html` you had to `Html.map` it to your msg type. It ends up pretty messy</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:50:50.039200</ts>
    <user>Rico</user>
    <text>I guess I see that with like `onInput`, but I'm not sold on it more generally. But I have learned enough to get back to writing code. Thanks :)</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:53:05.042600</ts>
    <user>Earlean</user>
    <text>You see it in other places too, `Json.Encode.list` takes a function to encode the items in the list because you're always going to need to do that.</text>
  </message>
  <message conversation_id="259">
    <ts>2019-01-26T08:53:15.042900</ts>
    <user>Moshe</user>
    <text>&lt;@Lynne&gt; thanks again for the pointer… you were of course absolutely right about the interchangeability of the types. I don’t know how I missed the obvious there… :man-facepalming:</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:53:34.043100</ts>
    <user>Lynne</user>
    <text>It happens :slightly_smiling_face:</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:55:53.046000</ts>
    <user>Earlean</user>
    <text>&lt;@Rico&gt; in fact, if you're doing it with`Html` you'd be using `Attribute.map` on `onInput` for each attribute because different events produce different types of values</text>
  </message>
  <message conversation_id="258">
    <ts>2019-01-26T08:58:28.048700</ts>
    <user>Earlean</user>
    <text>&lt;@Rico&gt;  This is true of `Sub` and `Cmd` too. Try it out for yourself by always passing the `identity` to these kinds of functions and `.map` them all</text>
  </message>
  <message conversation_id="260">
    <ts>2019-01-26T11:53:37.049800</ts>
    <user>Cammy</user>
    <text>Yup, tried it on its feet and works really well. Thanks for the millionth time, Joel. </text>
  </message>
  <message conversation_id="261">
    <ts>2019-01-26T14:28:17.050000</ts>
    <user>Carman</user>
    <text>Glad to help! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="262">
    <ts>2019-01-27T11:31:58.053300</ts>
    <user>Chandra</user>
    <text>Is there an issues with responsive design mode in FF and Chrome and the values from `Browser.Dom.getViewport` and `Browser.Events.onResize` ?</text>
  </message>
  <message conversation_id="262">
    <ts>2019-01-27T11:36:46.054200</ts>
    <user>Chandra</user>
    <text>Like when "touch simulation" is enabled in FF it seems to report the wrong sizes.</text>
  </message>
  <message conversation_id="262">
    <ts>2019-01-27T11:39:37.055100</ts>
    <user>Chandra</user>
    <text>And with "touch simulation" disabled it works fine.</text>
  </message>
  <message conversation_id="262">
    <ts>2019-01-27T11:42:01.056500</ts>
    <user>Chandra</user>
    <text>In chrome I experienced something similar with desktop vs mobile mode, where mobile mode seemed to report inaccurate dimensions.</text>
  </message>
  <message conversation_id="263">
    <ts>2019-01-27T17:46:46.057800</ts>
    <user>Huong</user>
    <text>It _might_ be the "device pixel ratio" (DPR) kicking in, or vaguely related to that</text>
  </message>
  <message conversation_id="264">
    <ts>2019-01-27T18:00:15.060800</ts>
    <user>Evie</user>
    <text>Hey! :wave:
I am trying to integrate `billstclair/elm-geolocation` into my app. From what I read in the docs one of the things to do is to invoke  `PortFunnel.subscribe(app, {modules:  modules});` in my `index.js` where `app` is sth like ```const app = Elm.Main.init({
  node: document.getElementById('root'),
});```

my app is already working yet the `app` object (I haven't used before) seems to be an empty Object `{}`</text>
  </message>
  <message conversation_id="265">
    <ts>2019-01-27T18:57:30.061000</ts>
    <user>Cornell</user>
    <text>Oh, there might be something with needing to include:
```
&amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
```</text>
  </message>
  <message conversation_id="265">
    <ts>2019-01-27T18:57:34.061200</ts>
    <user>Cornell</user>
    <text>in the `head`</text>
  </message>
  <message conversation_id="262">
    <ts>2019-01-27T21:42:46.061500</ts>
    <user>Chandra</user>
    <text>I'll give it a shot, thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="262">
    <ts>2019-01-27T21:46:12.061800</ts>
    <user>Chandra</user>
    <text>Would that only be needed for testing. Like if I opened the page on a phone would it still need that I'm the head.</text>
  </message>
  <message conversation_id="264">
    <ts>2019-01-27T22:10:39.063500</ts>
    <user>Earlean</user>
    <text>&lt;@Evie&gt; they will be a `ports` field on `app` is your have ports defined in your Elm app that you're using.</text>
  </message>
  <message conversation_id="264">
    <ts>2019-01-27T22:12:00.065900</ts>
    <user>Earlean</user>
    <text>If you define ports but don't have any code that sends to them or subscribes to them then the dead code elimination the compiler does will remove them so they won't be available on `app.ports` in JS.</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:14:34.069900</ts>
    <user>Nana</user>
    <text>I'm thinking of setting up a CMS to store all the text for my app, so that it can easily be edited. Does anyone have a recommendation for a good "headless CMS"?
ie. it should probably produce JSON, and be configurable to store different kinds of info, like news posts, help texts, i18n dictionary and such, and the text should be easy to edit for non-programmers</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:15:26.070400</ts>
    <user>Nana</user>
    <text>or actually, maybe GraphQL would be better, together with `dillonkearns/elm-graphql` :thinking_face:</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:18:11.072100</ts>
    <user>Euna</user>
    <text>&lt;@Nana&gt; you can either injectit at compile time when you build the docker container,  as I do, or use airtable, which I do on some other projects XD</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:25:56.075100</ts>
    <user>Nana</user>
    <text>&lt;@Euna&gt; hmm haven't heard of Airtable :thinking_face: So is it like Jira + Confluence + database?</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:29:14.075400</ts>
    <user>Nana</user>
    <text>we're generally not allowed to use cloud services though :stuck_out_tongue:</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:30:42.075700</ts>
    <user>Nana</user>
    <text>looks kinda cool though</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:45:47.076000</ts>
    <user>Euna</user>
    <text>if youre not allowed to use cloud and can only on prem</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:46:09.076600</ts>
    <user>Euna</user>
    <text>dotCMS is the only thing that I can think of that isnt a blog cms</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:46:15.076800</ts>
    <user>Euna</user>
    <text>and can run on prem</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:46:19.077000</ts>
    <user>Euna</user>
    <text>other than doing it yourself</text>
  </message>
  <message conversation_id="266">
    <ts>2019-01-28T04:46:32.077500</ts>
    <user>Euna</user>
    <text>if you do, can't recommend gqlgen enough for graphql</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:29:47.081100</ts>
    <user>Olevia</user>
    <text>(&lt;https://pastebin.com/45QLqyf4&gt;) I have a snippet here which takes a rowindex and col index and attempts to update a `Array (Array a` (grid.rows). I feel like I'm doing it right but it's not working. The error message indicates that the argument is Row while it's expecting an Array of Cells. Which again makes sense because Row is a type alias with some extra state involved. My question is how can I change it so that it maps over the entire record but leaves everything except for the inner array as it was?</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:38:37.082600</ts>
    <user>Antonette</user>
    <text>@Sybil consider this :
```
updateAtIndex : (a -&amp;gt; a) -&amp;gt; Int -&amp;gt; Array a -&amp;gt; Array a
updateAtIndex transformation targetIndex =
    Array.indexedMap
        (\index item -&amp;gt;
            if index == targetIndex then
                transformation item

            else
                item
        )


updateCell : ( Int, Int ) -&amp;gt; String -&amp;gt; Grid -&amp;gt; Grid
updateCell ( row, col ) input grid =
    let
        updatedRows =
            grid.rows
                |&amp;gt; updateAtIndex (updateAtIndex (validateInput input) col) row
    in
    { grid | rows = updatedRows }
```</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:39:12.083100</ts>
    <user>Antonette</user>
    <text>(this is just a simple refactor extracting the index update mechanism)</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:41:06.084900</ts>
    <user>Antonette</user>
    <text>First thing I noticed that made me question what's happening here is that you were putting the updated rows in a var named `updatedGrid` ; I supposed that you had tried to return this (which is not a grid) instead of an updated version of your grid (which your function declares it returns), and fell back to returning the original grid when this was not working to your satisfaction (and probably not compiling).</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:41:46.085700</ts>
    <user>Olevia</user>
    <text>Exactly, but I also have the problem 1 level deeper</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:41:49.086000</ts>
    <user>Antonette</user>
    <text>Another thing that I noticed was that you were basically repeating the updating at an index pattern, hence the refactor.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:42:12.086800</ts>
    <user>Olevia</user>
    <text>so I kind of lied, since the rows isnt a Array (Array Cell) but rather a Array(Row) which is a record with Array Cell</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:42:14.087000</ts>
    <user>Antonette</user>
    <text>There might even be a function that allows you to update an array at an index in the standard lib if you want to go standard :wink:</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:42:39.087600</ts>
    <user>Olevia</user>
    <text>so that means i have to destructure a record somewhere in there aswell</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:42:47.087800</ts>
    <user>Antonette</user>
    <text>Yep :slightly_smiling_face:</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:43:20.088600</ts>
    <user>Antonette</user>
    <text>Let's do this then. Let's assume your row records have a `cells` field which are the cells.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:45:33.088800</ts>
    <user>Antonette</user>
    <text>```
updateAtIndex : (a -&amp;gt; a) -&amp;gt; Int -&amp;gt; Array a -&amp;gt; Array a
updateAtIndex transformation targetIndex =
    Array.indexedMap
        (\index item -&amp;gt;
            if index == targetIndex then
                transformation item

            else
                item
        )


updateCells : (b -&amp;gt; b) -&amp;gt; { a | cells : Array b } -&amp;gt; { a | cells : Array b }
updateCells transformation row =
    { row | cells = transformation row.cells }


updateCell : ( Int, Int ) -&amp;gt; String -&amp;gt; Grid -&amp;gt; Grid
updateCell ( row, col ) input grid =
    let
        updatedRows =
            grid.rows
                |&amp;gt; updateAtIndex (updateCells (updateAtIndex (validateInput input) col)) row
    in
    { grid | rows = updatedRows }
```</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:46:54.090200</ts>
    <user>Antonette</user>
    <text>(edited, we needed the transformation un `updateCells` to be from the same origin type to the same target type)</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:48:40.090700</ts>
    <user>Olevia</user>
    <text>seeing it makes it click, but there was no way i was going to do that all in one function block</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:48:56.091200</ts>
    <user>Olevia</user>
    <text>I tend to push to much into 1 function, big mistake</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:49:01.091400</ts>
    <user>Antonette</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:49:15.091800</ts>
    <user>Antonette</user>
    <text>Not necessarily, with proper composition it's not necessarily that hard.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:49:41.092300</ts>
    <user>Antonette</user>
    <text>Now using the same update pattern to update the grid, you can come up with something like this:
```
updateAtIndex : (a -&amp;gt; a) -&amp;gt; Int -&amp;gt; Array a -&amp;gt; Array a
updateAtIndex transformation targetIndex =
    Array.indexedMap
        (\index item -&amp;gt;
            if index == targetIndex then
                transformation item

            else
                item
        )


updateCells : (b -&amp;gt; b) -&amp;gt; { a | cells : Array b } -&amp;gt; { a | cells : Array b }
updateCells transformation row =
    { row | cells = transformation row.cells }


updateRows : (b -&amp;gt; b) -&amp;gt; { a | rows : Array b } -&amp;gt; { a | rows : Array b }
updateRows transformation grid =
    { grid | rows = transformation grid.rows }


updateCell : ( Int, Int ) -&amp;gt; String -&amp;gt; Grid -&amp;gt; Grid
updateCell ( row, col ) input =
    updateRows (updateAtIndex (updateCells (updateAtIndex (validateInput input) col)) row)
```</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:51:48.093300</ts>
    <user>Antonette</user>
    <text>(sorry for the multiple edits, I realized I misplaced a couple of parens along the way)</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:52:44.094800</ts>
    <user>Antonette</user>
    <text>Now, if you'd like to go even further into composition, there is a pattern you might want to discover... &lt;https://package.elm-lang.org/packages/arturopala/elm-monocle/latest&gt;</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:52:48.095000</ts>
    <user>Olevia</user>
    <text>no problem, i dont think this is somethign that I could've managed in a timely manner with without the help of this slack so thanks a lot</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:53:06.095500</ts>
    <user>Antonette</user>
    <text>My pleasure :slightly_smiling_face:</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:53:11.095700</ts>
    <user>Olevia</user>
    <text>i'll be sure to check out that package</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T05:53:49.096500</ts>
    <user>Antonette</user>
    <text>The idea is to package those kinds of "take something, put it back modified" into nice data structures that composes.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:00:21.102800</ts>
    <user>Antonette</user>
    <text>Which would give you something like:
```
arrayAt : Optional (Array a) a
...

cellsLens : Lens Row (Array Cell)
...

rowsLens : Lens Grid (Array Row)
...

cellInGridAt : (Int, Int) -&amp;gt; Optional Grid Cell
cellInGridAt (row, cell) =
    rowsLens
        |&amp;gt; Compose.lensWithOptional (arrayAt row)
        |&amp;gt; Compose.OptionalWithLens cellsLens
        |&amp;gt; Compose.OptionalWithOptional (arrayAt cell)

updateCell : (Int, Int) -&amp;gt; String -&amp;gt; Grid -&amp;gt; Grid
updateCell position input =
    Optional.modify (cellInGridAt position) (validateInput input)
```</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:02:12.104700</ts>
    <user>Antonette</user>
    <text>The idea with "optics" like you find in Monocle is that you wrap an "accessor" that can "zoom in (read and write into) a part of a structure and clip them together as lego bricks to make "deeper" and more specific accessors.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:03:41.106100</ts>
    <user>Antonette</user>
    <text>This can result in very readable code where you aren't too bothered about the nitty gritty of how to access a specific part of a data structure and put it back together (which I find is the main pain in everyday Elm) once you've written a few of these optics.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:07:49.106800</ts>
    <user>Olevia</user>
    <text>I apreciate it but that would be an insane amount of knowledge i need to absorb for just that functiom, i will definitely check it out though</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:09:06.107800</ts>
    <user>Antonette</user>
    <text>Sure, I didn't mean to push you to take it all in right now :wink: just giving you a little foretaste so you know what you can gain once you're fed up writing complicated accessors like that.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:10:02.108800</ts>
    <user>Antonette</user>
    <text>(which, in my case, came quick after writing yet another modify-at-index-in-field-at-index-in-otherfield-in-yetanotherthirdfield kind of function)</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:13:44.109100</ts>
    <user>Olevia</user>
    <text>yeah, seems like a problem that shows up a lot</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:17:10.110200</ts>
    <user>Antonette</user>
    <text>Anyways, have fun, and never hesitate reaching out here :slightly_smiling_face:</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:19:57.110300</ts>
    <user>Shenita</user>
    <text>yeah, you’ll want to include that tag always. The default behaviour on mobile is for browsers to layout the page as if it is desktop size and to then show it super zoomed out</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:20:02.110600</ts>
    <user>Shenita</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag&gt;</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:23:22.111800</ts>
    <user>Bert</user>
    <text>Wow, I have never in my life written a "modify-at-index-in-field-at-index-in-otherfield-in-yetanotherthirdfield kind of function". I suppose I've always kept my collections shallow.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:25:32.113300</ts>
    <user>Antonette</user>
    <text>That's what happens when you're using real-world complicated structures like a form composed of different types of questions which have in turn possible answers which can be composed of various fields which in turn may have multiple associated data.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:26:15.114200</ts>
    <user>Antonette</user>
    <text>(which happens to be the case that made me reach out for Elm-Monocle and even contribute to it occasionally)</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:27:56.115300</ts>
    <user>Bert</user>
    <text>I feel like I have dealt with real-world complicated structures (ref: &lt;https://www.futurice.com/blog/elm-in-the-real-world/&gt;)</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:28:55.116400</ts>
    <user>Antonette</user>
    <text>I didn't mean to imply you haven't. I meant to express that sometimes, you need deeply nested data structures.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:29:17.116900</ts>
    <user>Antonette</user>
    <text>(and with such cases, it's useful to have something that helps you traverse them)</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:31:51.119700</ts>
    <user>Antonette</user>
    <text>The case I'm referring to (for context) was such that we had an endpoint to pick up a form to edit, and an endpoint to save said form in its integrity. Making smaller endpoints to save only parts of the form and building it incrementally on the backend was not an option, so we had to have a structure that represented the form. Such a structure was deeply nested by design, and there was no way around it. Using optics helped us de-clutter the code tremendously.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:33:09.121100</ts>
    <user>Antonette</user>
    <text>Also, another place where optics came up really, really handy is video-games, where a whole world of data lives in a more or less deeply nested structure and accessing the parts you need can become tedious and error-prone really fast.</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:37:04.124100</ts>
    <user>Antonette</user>
    <text>And I agree &lt;@Bert&gt; that keeping things small and shallow is the way to avoid useless complications and build more robust software whenever you can :wink:</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:38:35.124600</ts>
    <user>Bert</user>
    <text>This was a great clarification! :+1:</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:41:11.126500</ts>
    <user>Antonette</user>
    <text>What I meant by "real-world complicated structures" was more akin to "cases where you can't cut the big tree of data into smaller logs to feed smaller interfaces using small endpoints" rather than "structures in a real world you haven't gone to" :wink:</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T06:41:56.127100</ts>
    <user>Antonette</user>
    <text>(and since written media carries tone poorly...)</text>
  </message>
  <message conversation_id="267">
    <ts>2019-01-28T08:12:19.128200</ts>
    <user>Chaya</user>
    <text>I wish people used threads more on this Slack. Replies to questions drown in answers to other questions, and if they don't @ me, I often won't notice an answer.</text>
  </message>
  <message conversation_id="268">
    <ts>2019-01-28T08:39:33.128600</ts>
    <user>Cammy</user>
    <text>100% agree. </text>
  </message>
  <message conversation_id="269">
    <ts>2019-01-28T09:45:42.129000</ts>
    <user>Earnest</user>
    <text>It's annoying to post/read any code in the tiny thread sidebar</text>
  </message>
  <message conversation_id="269">
    <ts>2019-01-28T09:45:56.129200</ts>
    <user>Earnest</user>
    <text>Especially on small monitors</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:20:19.130200</ts>
    <user>Phoebe</user>
    <text>How do you run `elm reactor` on specific ip address</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:20:52.130300</ts>
    <user>Bert</user>
    <text>Threads are almost better on the mobile app than on desktop, which is kinda backwards. </text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:22:15.130500</ts>
    <user>Dede</user>
    <text>```
$ elm reactor --help
The `reactor` command starts a local server on your computer:

    elm reactor

After running that command, you would have a server at &amp;lt;http://localhost:8000&amp;gt;
that helps with development. It shows your files like a file viewer. If you
click on an Elm file, it will compile it for you! And you can just press the
refresh button in the browser to recompile things.

You can customize this command with the following flags:

    --port=&amp;lt;port&amp;gt;
        The port of the server (default: 8000)
```</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:23:47.130700</ts>
    <user>Phoebe</user>
    <text>I do not see any help for address</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:24:16.130900</ts>
    <user>Dede</user>
    <text>Yeah, it's pretty clear it's just running on localhost.</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:24:45.131100</ts>
    <user>Phoebe</user>
    <text>i remember that in 0.18 you can run elm reactor on custom address</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:25:00.131300</ts>
    <user>Phoebe</user>
    <text>with --address flag i think</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:26:18.131500</ts>
    <user>Dede</user>
    <text>Elm doesn't seem to be afraid to shed capabilities when they're judged not to be good for the overall ecosystem.   As a workaround, if you're on Mac/Linux, I think you could probably set up a trivial port forwarder with `nc`.</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:26:29.131700</ts>
    <user>Dede</user>
    <text>I'm sure there's a windows equivalent.</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:30:24.131900</ts>
    <user>Phoebe</user>
    <text>I'm using linux but I dont have any experience using nc</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:35:08.132100</ts>
    <user>Dede</user>
    <text>something like `nc -s 0.0.0.0 -p 8080 localhost 8000`   Replace 0.0.0.0 with something more specific if you like.</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:37:25.132300</ts>
    <user>Dede</user>
    <text>Hang on, I don't think I got that right.</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:38:07.132500</ts>
    <user>Phoebe</user>
    <text>yes it didnt work</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:39:56.132700</ts>
    <user>Phoebe</user>
    <text>I would like to run on 0.0.0.0</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:46:23.132900</ts>
    <user>Dede</user>
    <text>Apologies for my dusty memory.  Several options are in this thread, probably makes more sense for you to reference it directly than for me to recapitulate it.  &lt;https://unix.stackexchange.com/questions/10428/simple-way-to-create-a-tunnel-from-one-local-port-to-another&gt;</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:46:43.133200</ts>
    <user>Dede</user>
    <text>An `nc` option is in the third answer, but requires a non-standard `nc` install on modern linux.</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:48:58.133500</ts>
    <user>Phoebe</user>
    <text>thanks a lot. I will give a try</text>
  </message>
  <message conversation_id="270">
    <ts>2019-01-28T10:53:37.133700</ts>
    <user>Phoebe</user>
    <text>omg it worked! thanks a lot</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:12:03.135100</ts>
    <user>Karrie</user>
    <text>hello everyone I’m having some issues javascript stuff I think</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:13:00.136100</ts>
    <user>Karrie</user>
    <text>I include `&amp;lt;.script src="./assets/scripts/modules/reservations.js"&amp;gt;&amp;lt;/script&amp;gt;`
and straight below I initialise my Elm app:
`Elm.Main.init({node: ….})`</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:13:28.136600</ts>
    <user>Karrie</user>
    <text>the issue is I get the following error: `ReferenceError: Elm is not defined`</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:15:07.137000</ts>
    <user>Karrie</user>
    <text>is this something you every came across?</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:15:54.137900</ts>
    <user>Antonette</user>
    <text>&lt;@Karrie&gt; Do you mean that you've put the `Elm.Main.init(...)` in your `reservations.js` file or in your html file?</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:16:10.138200</ts>
    <user>Karrie</user>
    <text>Elm.Main.init is my html file</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:17:17.139500</ts>
    <user>Antonette</user>
    <text>Is it possible that you show your `reservations.js` file? (like on a pastebin or something)</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:18:57.139800</ts>
    <user>Karrie</user>
    <text>&lt;@Antonette&gt; sure: here you go: &lt;https://pastebin.com/JiZULbDJ&gt;</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:19:06.140200</ts>
    <user>Antonette</user>
    <text>Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:23:23.140900</ts>
    <user>Karrie</user>
    <text>if I try to import the file into my main `theme.js` file I get the following error:
`TypeError: scope is undefined`</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:27:44.141400</ts>
    <user>Antonette</user>
    <text>What are you using to compile your JavaScript?</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:28:51.141800</ts>
    <user>Karrie</user>
    <text>the “normal” javascript or the Elm app?</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:29:37.142400</ts>
    <user>Karrie</user>
    <text>I’m trying to integrate my Elm app into a shopify template</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:30:34.142900</ts>
    <user>Karrie</user>
    <text>this is done via Slate (&lt;https://github.com/Shopify/slate/&gt;) which uses babel</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:33:13.144100</ts>
    <user>Antonette</user>
    <text>Ok ; I'm sorry but I'm about to have to leave my keyboard. Anyone else can help debug?</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:34:28.145400</ts>
    <user>Karrie</user>
    <text>&lt;@Antonette&gt; no worries! the elm file is created with `elm make src/Main.elm` and everything else is done using slate</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:34:38.145700</ts>
    <user>Karrie</user>
    <text>any help from anyone would be great!</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T11:35:02.146200</ts>
    <user>Antonette</user>
    <text>Good luck :slightly_smiling_face:</text>
  </message>
  <message conversation_id="271">
    <ts>2019-01-28T12:23:15.147800</ts>
    <user>Ashton</user>
    <text>Where is your script tag and where are is your `Elm.init` script &lt;@Karrie&gt;?</text>
  </message>
  <message conversation_id="272">
    <ts>2019-01-28T12:23:44.148500</ts>
    <user>Ashton</user>
    <text>I havent had a problem like that in a while, but I remember when I did I usually found the solution by fiddling with where the script tags are.</text>
  </message>
  <message conversation_id="272">
    <ts>2019-01-28T12:24:27.149400</ts>
    <user>Ashton</user>
    <text>Have you tried like
```
&amp;lt;head&amp;gt;
   &amp;lt;script src="./reservations.js"/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;script&amp;gt;
        Elm.init()
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
```</text>
  </message>
  <message conversation_id="272">
    <ts>2019-01-28T12:24:30.149600</ts>
    <user>Ashton</user>
    <text>?</text>
  </message>
  <message conversation_id="272">
    <ts>2019-01-28T12:25:05.150100</ts>
    <user>Ashton</user>
    <text>With the Elm initialization in the body.</text>
  </message>
  <message conversation_id="272">
    <ts>2019-01-28T12:41:26.150300</ts>
    <user>Alicia</user>
    <text>it could it be related to &lt;https://github.com/elm/core/issues/993&gt; if the subscription is conditional</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:25:08.151400</ts>
    <user>Freda</user>
    <text>Can anyone explain to me what the exact difference between `Parser.keyword`, `Parser.symbol` and `Parser.token` is?</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:25:37.152000</ts>
    <user>Freda</user>
    <text>I think from looking at the code in `Parser.Advanced` symbol and keyword are the same.</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:25:50.152300</ts>
    <user>Freda</user>
    <text>```symbol : Token x -&amp;gt; Parser c x ()
symbol =
token```</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:26:01.152600</ts>
    <user>Freda</user>
    <text>But what is the difference to `keyword` then?</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:27:07.153100</ts>
    <user>Cornell</user>
    <text>I think `keyword` peeks ahead a littlebit to ensure there’s whitespace afterwards.</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:28:07.153400</ts>
    <user>Cornell</user>
    <text>Or rather “not a letter, number, or underscore”</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:31:04.154600</ts>
    <user>Freda</user>
    <text>Ah ok, so it makes sure that it is what you were looking, and not more than that. Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:31:27.155200</ts>
    <user>Freda</user>
    <text>Any idea why there is a `token` and a `symbol` if they seem to be the same thing?</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:33:56.155700</ts>
    <user>Cornell</user>
    <text>I think it’s the same except it will give a different `Problem`: &lt;https://package.elm-lang.org/packages/elm/parser/latest/Parser#Problem&gt;</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:35:24.156900</ts>
    <user>Cornell</user>
    <text>I think `token` corresponds to `Expecting String`, while `symbol` corresponds to `ExpectingToken`</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:35:33.157200</ts>
    <user>Cornell</user>
    <text>Which could be useful for error reporting.</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:38:41.157700</ts>
    <user>Freda</user>
    <text>Ah ok, so apart from errors they are the same. Thanks Matt</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:39:03.157900</ts>
    <user>Cornell</user>
    <text>No problemo!</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:47:36.158000</ts>
    <user>Karrie</user>
    <text>after a long debugging session I found out that the problem wasn’t with my Elm component but with the stupid Shopify!</text>
  </message>
  <message conversation_id="273">
    <ts>2019-01-28T13:47:58.158200</ts>
    <user>Karrie</user>
    <text>Just got it fixed but thank you all! &lt;@Ashton&gt; &lt;@Antonette&gt;</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:20:53.159200</ts>
    <user>Euna</user>
    <text>anyone have any good idea on how to refresh short term access tokens and have it propogate down to children?</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:21:32.159800</ts>
    <user>Euna</user>
    <text>also:  is this explanation still relevant in .19?</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:21:32.159900</ts>
    <user>Euna</user>
    <text>&lt;https://www.reddit.com/r/elm/comments/48pqsh/updated_nested_child_components/d0n3n0v/&gt;</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:45:49.160700</ts>
    <user>Dede</user>
    <text>I feel like the most Elm-ish thing to do would be to keep the tokens at the top level of model and have the children just grab them from there, no?</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:50:57.161300</ts>
    <user>Carman</user>
    <text>There is no such thing as "component state" in Elm. All state lives on a single top-level model.</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:51:45.162000</ts>
    <user>Carman</user>
    <text>you may be passing different sub-chunks of that model into various view functions</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:51:58.162400</ts>
    <user>Carman</user>
    <text>which may feel like "component state" from other frameworks</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:52:34.162900</ts>
    <user>Carman</user>
    <text>but it's important to remember that at the end of the day it's a single big state</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:52:59.163300</ts>
    <user>Carman</user>
    <text>You generally want to keep that state DRY (Elm folks might say "make impossible states impossible")</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T14:53:33.163900</ts>
    <user>Carman</user>
    <text>So you'd want to avoid duplicating tokens all over your model. Ideally the token lives in a single place</text>
  </message>
  <message conversation_id="275">
    <ts>2019-01-28T15:03:33.164800</ts>
    <user>Euna</user>
    <text>guys, I mean that the whole point. What I'm saying is there a way to take the top level Msg (Result Err a) and update the child components without have to pattern match every sub model</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:04:20.165900</ts>
    <user>Euna</user>
    <text>I would like to avoid pattern matching two different Msg to every submodel</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:04:46.166600</ts>
    <user>Bert</user>
    <text>If you do have pages with their own Model and Msg types, this example app I have may be helpful: &lt;https://github.com/ohanhi/elm-shared-state&gt;</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:04:52.166800</ts>
    <user>Euna</user>
    <text>I've been using feldman's SPA app as reference, but as far as I can tell he doesn't update tokens during the session</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:08:40.168000</ts>
    <user>Earnest</user>
    <text>&lt;@Euna&gt; Store the token in your top-level `Model`, pass the token to the child `update` functions when you call them. Then you only have to update a single field when it changes.</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:15:05.168800</ts>
    <user>Dede</user>
    <text>&lt;@Euna&gt; When you say "component" -- do you mean pages in an SPA, or something more like datepickers?</text>
  </message>
  <message conversation_id="276">
    <ts>2019-01-28T15:15:18.169100</ts>
    <user>Dede</user>
    <text>Or something else?</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:16:21.169500</ts>
    <user>Euna</user>
    <text>&lt;@Dede&gt; i mean children/page sure</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:17:29.169800</ts>
    <user>Euna</user>
    <text>None</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:18:26.170800</ts>
    <user>Euna</user>
    <text>the reason this is coming up is that I have refreshing the tokens on a timed task, so its a top level subscription</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:20:23.172400</ts>
    <user>Dede</user>
    <text>In the rtfeldman SPA, I think you'd have the top level update function call `toSession` (is that right?  This is from memory) to get the session, update the token in the session, and then re-build the current page (probably another big `case` statement) passing in the new session.</text>
  </message>
  <message conversation_id="277">
    <ts>2019-01-28T15:21:46.173800</ts>
    <user>Jae</user>
    <text>Hi, there there a way to send a Cmd that doesn't do anything other than trigger a new update?  I know I can just call my `update` function directly but what I want is for the message to appear in the debugger history</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:23:05.174700</ts>
    <user>Euna</user>
    <text>&lt;@Jae&gt; you can make a cmd that takes in nothing, the NoOp causes a refresh iirc</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:23:19.175000</ts>
    <user>Euna</user>
    <text>* the NoOp from the elm-tutorial</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:24:31.175500</ts>
    <user>Velia</user>
    <text>```
send : msg -&amp;gt; Cmd msg
send msg =
    Task.succeed msg
        |&amp;gt; Task.perform identity
```
This is not good practice though.</text>
  </message>
  <message conversation_id="277">
    <ts>2019-01-28T15:24:39.175800</ts>
    <user>Earnest</user>
    <text>&lt;@Jae&gt; `Task.succeed () |&amp;gt; Task.perform (always &amp;lt;| myActualMsg)`</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:28:26.176100</ts>
    <user>Euna</user>
    <text>hot damn that's good</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:29:49.177000</ts>
    <user>Earnest</user>
    <text>Yeah, making it a `NoOp` won't do anything... I think they want to call the code from a specific update branch</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:30:07.177500</ts>
    <user>Euna</user>
    <text>oooo</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:30:23.177900</ts>
    <user>Earnest</user>
    <text>Well a proper NoOp at least, `NoOp -&amp;gt; (model, Cmd.none)`</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:30:59.178500</ts>
    <user>Earnest</user>
    <text>That said, I usually refactor the branch into a separate function and call it from both branches instead of recursive updates or sending Cmds.</text>
  </message>
  <message conversation_id="277">
    <ts>2019-01-28T15:34:30.179900</ts>
    <user>Jae</user>
    <text>Yup, that works. Thanks! (Don't worry, I plan to use it for debugging only)</text>
  </message>
  <message conversation_id="277">
    <ts>2019-01-28T15:34:49.180100</ts>
    <user>Jae</user>
    <text>That works, thanks!</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:42:02.180900</ts>
    <user>Euna</user>
    <text>&lt;@Dede&gt; he batches session changes as a subscription to each page in order to not redraw it</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:42:08.181100</ts>
    <user>Euna</user>
    <text>I think I might do that too</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:42:27.181600</ts>
    <user>Euna</user>
    <text>I don't think I'm fluent enough to come up with a more elegant solution</text>
  </message>
  <message conversation_id="274">
    <ts>2019-01-28T15:42:31.181700</ts>
    <user>Euna</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="278">
    <ts>2019-01-28T18:15:15.182800</ts>
    <user>Raylene</user>
    <text>I'm trying to install "elm/bytes", but I get the error: "WARNING: I normally check &amp;lt;https://package.elm-lang.org&amp;gt; for new packages
here, but my request failed. Are you offline? I will try to continue anyway."</text>
  </message>
  <message conversation_id="278">
    <ts>2019-01-28T18:21:38.183400</ts>
    <user>Earlean</user>
    <text>&lt;@Raylene&gt; are you behind a proxy server? </text>
  </message>
  <message conversation_id="279">
    <ts>2019-01-28T22:10:20.186300</ts>
    <user>Marcus</user>
    <text>I have a quick scaling/decomposition question. I have an app that does search. It allows a user to build a query and then it shows the results. The file is huge (several thousand lines), so I'm breaking it up into some modules. Specifically, I'm going to move the search results type into its own module, along with the decoders, http method, etc.</text>
  </message>
  <message conversation_id="279">
    <ts>2019-01-28T22:11:31.187700</ts>
    <user>Marcus</user>
    <text>My question is this. Getting the results depends upon the model in my Main file. I don't want to set up a circular dependency. Can I just be careful with my `exposings` and include `Main` in `SearchResults`, or do I need to move my model into its own file also?</text>
  </message>
  <message conversation_id="279">
    <ts>2019-01-28T22:17:33.188400</ts>
    <user>Earlean</user>
    <text>&lt;@Marcus&gt; if you've got code that depends on the Main model then it should probably be in the Main module.</text>
  </message>
  <message conversation_id="279">
    <ts>2019-01-28T22:18:02.189300</ts>
    <user>Marcus</user>
    <text>Well, everything is in the Main module now.</text>
  </message>
  <message conversation_id="279">
    <ts>2019-01-28T22:18:38.189900</ts>
    <user>Earlean</user>
    <text>But, if your model is a record type alias you could use the 'extensible record' syntax to depend only on the fields you need to</text>
  </message>
  <message conversation_id="279">
    <ts>2019-01-28T22:18:58.190500</ts>
    <user>Marcus</user>
    <text>Good point. I underuse that feature.</text>
  </message>
  <message conversation_id="279">
    <ts>2019-01-29T03:51:03.191600</ts>
    <user>Antonette</user>
    <text>&lt;@Marcus&gt; another way to see it is to decouple your model from your `Main` module, so it's accessible by both the `Main` module and the `SearchResults` without circular dependencies.</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:12:33.196400</ts>
    <user>Dorsey</user>
    <text>Hi! Do you know of any REPL in the browser solution?</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:12:37.196500</ts>
    <user>Dorsey</user>
    <text>If I understand correctly Ellie compiles Elm code on the client side. Is there something like that for REPL? The only thing I could find is this &lt;http://elmrepl.cuberoot.in/&gt;, but it seems to connect to some server to evaluate the code. Also I don't know what the terms of use are, is there a source code available, etc.</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:14:02.196700</ts>
    <user>Nana</user>
    <text>I just use &lt;https://ellie-app.com&gt;, even though it's not exactly a REPL</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:14:56.196900</ts>
    <user>Dorsey</user>
    <text>Me too, but I need something where I can evaluate simple expressions for teaching.</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:15:26.197100</ts>
    <user>Dorsey</user>
    <text>We will be using Ellie to build the app, but we also need REPL.</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:15:33.197300</ts>
    <user>Nana</user>
    <text>`main = myExpression |&amp;gt; Debug.toString |&amp;gt; text`</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:15:48.197500</ts>
    <user>Dorsey</user>
    <text>:thinking_face:</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:16:01.197700</ts>
    <user>Dorsey</user>
    <text>That's something worth considering.</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:16:17.197900</ts>
    <user>Dorsey</user>
    <text>You don't get type inference though.</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:17:11.198100</ts>
    <user>Nana</user>
    <text>that's true, hey that would be cool to have as a Debug function!</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:17:26.198300</ts>
    <user>Dorsey</user>
    <text>Yes it would :smile:</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:17:29.198500</ts>
    <user>Nana</user>
    <text>like `Debug.type`</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:17:59.198700</ts>
    <user>Dorsey</user>
    <text>I think it may be difficult. The types don't make it to the runtime, AFAIK.</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:18:58.198900</ts>
    <user>Nana</user>
    <text>yeah true</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:19:07.199100</ts>
    <user>Dorsey</user>
    <text>I dream of an Elm with Lisp-like powers, where you can evaluate Elm expressions within a running Elm program.</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:22:20.199400</ts>
    <user>Dorsey</user>
    <text>Ah, the source code is here: &lt;https://github.com/girishso/elm-repl-in-browser&gt;</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:23:05.199600</ts>
    <user>Dorsey</user>
    <text>As I thought, it's connecting to REPL running in a container. Not ideal, but I guess good enough.</text>
  </message>
  <message conversation_id="281">
    <ts>2019-01-29T04:47:14.199900</ts>
    <user>Huong</user>
    <text>Ellie also compiles server-side. The 0.19 compiler does tricks for efficiency which GHCJS can't handle.</text>
  </message>
  <message conversation_id="280">
    <ts>2019-01-29T04:47:35.200100</ts>
    <user>Dorsey</user>
    <text>Oh, I see. Thanks.</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T04:50:23.201800</ts>
    <user>Earnestine</user>
    <text>does anyone have a glue why the linear-algebra package does provide `add`, `sub` for vectors, but not `div` and `mul`? Am I missing something here?</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T04:52:16.201900</ts>
    <user>Antonette</user>
    <text>There is a reason why there is no vector division: &lt;https://physics.stackexchange.com/questions/111652/can-we-divide-two-vectors&gt;</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T04:52:31.202200</ts>
    <user>Antonette</user>
    <text>As for the products, all the products you need are there.</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T04:52:59.202400</ts>
    <user>Antonette</user>
    <text>&lt;https://package.elm-lang.org/packages/elm-explorations/linear-algebra/latest/Math-Vector2#scale&gt;</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T04:54:05.202600</ts>
    <user>Antonette</user>
    <text>(product with a scalar ; if you want to divide by said scalar, you can scale by a fraction)</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T04:54:14.202800</ts>
    <user>Antonette</user>
    <text>&lt;https://package.elm-lang.org/packages/elm-explorations/linear-algebra/latest/Math-Vector2#dot&gt;</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T04:56:01.203000</ts>
    <user>Antonette</user>
    <text>:point_up_2: And if you want to multiply two vectors between one another, there's the dot product.</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T04:56:03.203200</ts>
    <user>Antonette</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T04:56:56.203400</ts>
    <user>Antonette</user>
    <text>(does it answer your question?)</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:00:30.203600</ts>
    <user>Earnestine</user>
    <text>wait... I'll respond in a sec</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:02:21.203800</ts>
    <user>Velia</user>
    <text>related: &lt;https://github.com/elm/projects#in-browser-repl&gt;</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:03:17.204000</ts>
    <user>Antonette</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:04:02.204200</ts>
    <user>Dorsey</user>
    <text>Nice link. Thanks.</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:07:46.204400</ts>
    <user>Earnestine</user>
    <text>Ok, I see. I already assumed there's a reason. But in practice, how would you do this:
```
mousePos : Vec2

resolution : Vec2

normalizedMousePos : Vec2
normalizedMousePos = ?
```

of course, I can write a helper:
```
v2div : Vec2 -&amp;gt; Vec2 -&amp;gt; Vec2
v2div v1 v2 =
    vec2 (V2.getX v1 / V2.getX v2) (V2.getY v1 / V2.getY v2)
```
and then say:
```
normalizedMousePos = v2div mousePos resoltution
```

but maybe there's a better way..</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:17:54.204800</ts>
    <user>Antonette</user>
    <text>Well, there is :slightly_smiling_face:</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:18:34.205000</ts>
    <user>Earnestine</user>
    <text>cool, looking forward to hear...</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:18:55.205200</ts>
    <user>Antonette</user>
    <text>(or maybe not ; I'm not sure ; just a sec)</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:20:08.205400</ts>
    <user>Antonette</user>
    <text>Maybe I wouldn't use `normalize` in the name ; `normalize` already exists and consists in turning a vector of arbitrary length into a unit vector (length == 1) without changing its angle.</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:21:20.205600</ts>
    <user>Antonette</user>
    <text>Except for that, your v2div function is fine if that's what you want to achieve (i.e. having a vector representing the coordinates of the mouse relative to the screen width and height).</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:22:01.205900</ts>
    <user>Antonette</user>
    <text>I'm a little curious as to what you're trying to achieve with this, but if it makes sense in your situation, go for it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:24:02.206100</ts>
    <user>Antonette</user>
    <text>(and since there's no pre-built way to do this in the package, so there's no better way than your way as far as I know)</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:24:21.206400</ts>
    <user>Sadie</user>
    <text>Hello</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:24:35.206700</ts>
    <user>Sadie</user>
    <text>I am trying to port kallaspriit/elm-basic-auth to Elm 0.19</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:24:47.207100</ts>
    <user>Sadie</user>
    <text>It is working up to the elm-test part &lt;https://github.com/kallaspriit/elm-basic-auth/pull/2&gt;</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:25:02.207200</ts>
    <user>Antonette</user>
    <text>As for the naming, maybe `relativeMousePos` would make more sense.</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:25:11.207600</ts>
    <user>Sadie</user>
    <text>When I run it I get:
```
elm-basic-auth$ elm-test
elm-test internal error: got an unexpected result from 'elm make' when validating transitive dependencies.  Please report this at &lt;https://github.com/rtfeldman/node-test-runner/issues&gt;
```</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:25:41.208000</ts>
    <user>Sadie</user>
    <text>If I try to run elm-make on the file I get
```
$ elm make tests/Tests.elm 
-- UNKNOWN IMPORT ---------------------------------------------- tests/Tests.elm

The Tests module has a bad import:

    import Test

I cannot find that module! Is there a typo in the module name?

When creating a package, all modules must live in the src/ directory.

```</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:26:16.208300</ts>
    <user>Sadie</user>
    <text>I tried:
```
$ elm install elm-explorations/test
I found it in your elm.json file, but in the "test-dependencies" field.
Should I move it into "dependencies" for more general use? [Y/n]: 
Dependencies loaded from local cache.
Dependencies ready!                
rhubscher@NATIM-ThinkPad-T470s:~/elm/elm-basic-auth$ elm make tests/Tests.elm 
Dependencies loaded from local cache.
Dependencies ready!                
Success! Compiled 2 modules.   
```</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:26:22.208600</ts>
    <user>Sadie</user>
    <text>So I am a bit lost</text>
  </message>
  <message conversation_id="282">
    <ts>2019-01-29T05:26:24.208800</ts>
    <user>Sadie</user>
    <text>any idea ?</text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T05:50:40.209300</ts>
    <user>Danika</user>
    <text>you don't `make` your tests, you need the `elm-test` npm package.</text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T05:51:09.209400</ts>
    <user>Danika</user>
    <text>&lt;https://www.npmjs.com/package/elm-test&gt;</text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T06:09:01.209800</ts>
    <user>Bert</user>
    <text>This makes me think there's something funky with the elm.json or elm-stuff</text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T06:09:29.210000</ts>
    <user>Bert</user>
    <text>Did you try removing elm-stuff and re-running elm-test? </text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T06:10:45.210200</ts>
    <user>Bert</user>
    <text>That is what they are running (see the first code block) </text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T06:25:08.210400</ts>
    <user>Danika</user>
    <text>Oh yeah, oops!</text>
  </message>
  <message conversation_id="284">
    <ts>2019-01-29T06:29:07.210700</ts>
    <user>Earnestine</user>
    <text>mhhh... this is a bit unconvenient... From other languages I'm used to have this functions.. Having a `map` function would not be bad as well... Maybe a `linear-algebra-extra` package would make sense (?)</text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T06:30:15.210900</ts>
    <user>Antonette</user>
    <text>Sure :slightly_smiling_face: you can even propose it if you like (and don't find it already existing of course).</text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T06:31:20.211100</ts>
    <user>Antonette</user>
    <text>Also, it's possible to suggest a contribution to the existing package (through a pull request for example, maybe with an issue to start the conversation less abruptly).</text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T06:32:00.211300</ts>
    <user>Antonette</user>
    <text>But before that, there's nothing wrong with creating these functions in the scope of your project (they'll even give you the basic code if you want to send a PR or something).</text>
  </message>
  <message conversation_id="284">
    <ts>2019-01-29T06:32:08.211500</ts>
    <user>Earnestine</user>
    <text>jepp, also possible...</text>
  </message>
  <message conversation_id="284">
    <ts>2019-01-29T06:32:43.211700</ts>
    <user>Earnestine</user>
    <text>or is there maybe a way to archive the thing by using the Matrix module from the package?</text>
  </message>
  <message conversation_id="283">
    <ts>2019-01-29T06:33:32.211900</ts>
    <user>Antonette</user>
    <text>I would start there if I were you, if only to get familiar with it.</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T06:57:44.213300</ts>
    <user>Cameron</user>
    <text>Hi, I am using this package &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events&gt; to grab onMouseMove events</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T06:58:56.214600</ts>
    <user>Cameron</user>
    <text>but I would like to get position information and there is no documentation in the module's documentation on how is it possible to get position information out of the onMouseMoveEvent for example</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T06:59:00.214800</ts>
    <user>Cameron</user>
    <text>anybody got any idea ?</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T07:00:36.216500</ts>
    <user>Earlean</user>
    <text>&lt;@Cameron&gt; the idea of that API is that you provide a `Json.Decode.Decoder` that can grab the values you're interested in from the event object.</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T07:01:29.217800</ts>
    <user>Earlean</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/Events/mousemove&gt; is the documentation for the DOM mousemove event</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T07:01:36.218100</ts>
    <user>Cameron</user>
    <text>&lt;@Earlean&gt; thanks for your response but it's wird because to decode the values I need to now how the Java script event object looks like</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T07:02:20.218700</ts>
    <user>Cameron</user>
    <text>Oh now I get it</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T07:07:11.220100</ts>
    <user>Nana</user>
    <text>&lt;@Cameron&gt; easiest is to just type `addEventListener("click", console.log)` in the console :wink:</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T07:07:39.220500</ts>
    <user>Nana</user>
    <text>then you can just click on stuff and inspect the event object</text>
  </message>
  <message conversation_id="285">
    <ts>2019-01-29T07:08:50.221600</ts>
    <user>Cameron</user>
    <text>&lt;@Nana&gt; I think I am going to start with this aproach to get a better feeling thanks really apriciate your help</text>
  </message>
  <message conversation_id="286">
    <ts>2019-01-29T08:20:40.226400</ts>
    <user>Saran</user>
    <text>How often do you all pick apart the `(model, cmd)` return pair once constructed?</text>
  </message>
  <message conversation_id="286">
    <ts>2019-01-29T08:21:21.226600</ts>
    <user>Lynne</user>
    <text>Seldom</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:40:43.237400</ts>
    <user>Lilli</user>
    <text>Hey Folks! What's your go-to style for conditionally append items to a list?
something like
```
case (a. b) of
  (False, False) -&amp;gt; [ a, b, c ]
  (False, True) -&amp;gt; [ a, b, c, y ]
  (True, False) -&amp;gt; [ a, b, c, y ]
  (True, True) -&amp;gt; [ a, b, c, x, y]
```
I usually if/case with the different lists, but that may lead to a lot of duplication for the common static element of the lists;

I saw people having a list of `(Boolean, A)` or `Maybe A` and then call `List.filter`. What do you use? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="286">
    <ts>2019-01-29T11:41:29.237800</ts>
    <user>Kris</user>
    <text>I'd go for list of maybes</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:46:26.239600</ts>
    <user>Antonette</user>
    <text>Hey &lt;@Lilli&gt; :slightly_smiling_face: I usually go for the `List (Maybe a)` (usually more readable imo) ; you may want to use `Maybe.Extra.values : List (Maybe a) -&amp;gt; List a` that does pretty much what you would expect from its type signature.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:48:44.241200</ts>
    <user>Antonette</user>
    <text>&lt;https://package.elm-lang.org/packages/elm-community/maybe-extra/latest/Maybe-Extra#values&gt;</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:49:28.241700</ts>
    <user>Lilli</user>
    <text>&lt;@Antonette&gt; yea, i don't use it much because when you have a lot of common items you just end with too many "Just", in my example `[a, b, c]` are always there. But there are cases where it's super convenient and easy to read aswell</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:50:53.243100</ts>
    <user>Antonette</user>
    <text>The way I do it to avoid clutter is like:
```
[ somethingAlwaysThere |&amp;gt; Just
, somethingAlsoAlwaysThere |&amp;gt; Just
, somethingOptional
]
```</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:51:02.243300</ts>
    <user>Nana</user>
    <text>&lt;@Lilli&gt; wow I don't understand what that's supposed to do at all :sweat_smile:</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:52:08.243400</ts>
    <user>Lilli</user>
    <text>that alone won't do anything :smile: it's just a matter of coding style</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:52:35.243600</ts>
    <user>Lilli</user>
    <text>that's cute actually :smile:</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:54:42.243800</ts>
    <user>Nana</user>
    <text>ah I think I get it now, so would you do like that if you wanted do conditionally show an element, or conditionally add a style?</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:56:15.244000</ts>
    <user>Lilli</user>
    <text>yea, conditionally show elements, add classes, add rows to a table. Those are all possible applications</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:57:19.244200</ts>
    <user>Nana</user>
    <text>yeah it's tricky to make that look neat, often ends up messy</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T11:58:09.245000</ts>
    <user>Antonette</user>
    <text>The cutest I ever came up with in that situation :wink:</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:00:16.247500</ts>
    <user>Earnest</user>
    <text>I also do `List (Maybe a)` w/ filtermap, but you could also do something like
```
let extras = if List.all identity [a,b] then [x, y] else if List.any identity [a,b] then [y] else []
in [a,b,c] ++ extras
```
Or even just filtermap the optionals and append them</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:00:55.248300</ts>
    <user>Nana</user>
    <text>I usually do something like
```
[a, b, c]
    ++ (if something then
              [x, y] 
          else
              []
         )
```</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:01:02.248400</ts>
    <user>Antonette</user>
    <text>I did that for a while, but I find it less readable most of the times.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:01:23.248600</ts>
    <user>Antonette</user>
    <text>Aaaaand that is pretty ugly, no offense.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:01:45.248800</ts>
    <user>Nana</user>
    <text>yes it is :laughing:</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:02:52.249000</ts>
    <user>Lilli</user>
    <text>the thing [a,b,c] ++ extra ends up messy when the contidion if no straight forward. At least in my experience :smile:</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:05:38.250300</ts>
    <user>Antonette</user>
    <text>Yep. Even worse when you want the extra to appear at specific points. Even worse when there are lots of them.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:06:09.251000</ts>
    <user>Earnest</user>
    <text>At that point I'd start writing functions that handle the conditional testing or switch to Maybe</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:06:34.251600</ts>
    <user>Earnest</user>
    <text>And yeah if you need optional things in arbitrary positions instead of beginning or end, just use the filterMap</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:07:32.253300</ts>
    <user>Lilli</user>
    <text>sometimes i also do something like this
```
[ (a, True)
, (b, True)
, (c, True)
, (x, #someCondition)
, (y, #someOtherCondition)
] |&amp;gt; filterMap filterHelper
```

This way it's easy to read when things should be there or not</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:07:49.253700</ts>
    <user>Nana</user>
    <text>for html nodes in particular I have this function though:
```
nodeIf : Bool -&amp;gt; Html msg -&amp;gt; Html msg
nodeIf condition ifTrue =
    if condition then
        ifTrue

    else
        text ""
```
it's kinda nice I think</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:09:08.255100</ts>
    <user>Earnest</user>
    <text>You can also do `|&amp;gt; List.filter Tuple.second |&amp;gt; List.map Tupel.first` instead of writing `filterHelper`</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:09:22.255600</ts>
    <user>Nana</user>
    <text>so you can just do:
```
div []
  [ text "hello"
  , text "world"
  , nodeIf model.show (text "foo")
  ]
```</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:09:39.256000</ts>
    <user>Earnest</user>
    <text>Yeah that's common, also a `nodeMaybe : Maybe a -&amp;gt; (a -&amp;gt; Html msg) -&amp;gt; Html msg`</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:10:06.256200</ts>
    <user>Lilli</user>
    <text>in this case you can have a neutral element `text ""` but sometimes there is no such element :sweat_smile: but yea, this is the same approach of Maybe X, where the neutral element is Nothing</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:10:43.256900</ts>
    <user>Antonette</user>
    <text>Looks pretty ok too :slightly_smiling_face:</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:11:05.257400</ts>
    <user>Nana</user>
    <text>I've been thinking, I wonder if it'd be neater if html node/attribute lists were trees instead of lists, which were automatically flattened in the end</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:11:59.258100</ts>
    <user>Nana</user>
    <text>or if Elm had a "list spread operator" like `...` in JavaScript</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:12:46.258400</ts>
    <user>Nana</user>
    <text>a list spread operator would be pretty nice I think!</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:12:53.258500</ts>
    <user>Antonette</user>
    <text>I'm not a fan of "polluting" the dom tree with useless nodes ; at least the `List (Maybe a)` doesn't introduce long-living `Nothing` elements in a deep structure.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:14:48.260300</ts>
    <user>Antonette</user>
    <text>Still, if there was a value that says "this is technically an `Html msg` but don't put it in the dom tree please" I'd rather use that than a `List (Maybe a)`.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:15:15.261100</ts>
    <user>Antonette</user>
    <text>(like an `Hml.none` or something)</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:15:16.261300</ts>
    <user>Lilli</user>
    <text>&lt;@Rutha&gt; never thought of that. So far i never encountered a situation where a tree would be clearer to read compared to a list</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:15:26.261500</ts>
    <user>Nana</user>
    <text>then you could do:
```
[ a
, b
, c
, ... (if condition then
          [x, y]
      else []
      )
]
```</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:15:55.262300</ts>
    <user>Antonette</user>
    <text>Hmm. That's a great feature to have actually.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:16:27.264100</ts>
    <user>Carman</user>
    <text>nodes _are_ trees :slightly_smiling_face:</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:16:31.264400</ts>
    <user>Nana</user>
    <text>but not just that, you could create a generic "optional" function, like my `nodeIf` example, but which returned `[]` if False, so it'd work on all lists!</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:16:39.264700</ts>
    <user>Antonette</user>
    <text>Like `(::) : a -&amp;gt; List a -&amp;gt; List a` we could have a `(:?) : Maybe a -&amp;gt; List a -&amp;gt; List a` for example.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:17:27.266100</ts>
    <user>Carman</user>
    <text>They already work like how &lt;@Nana&gt; suggests except that you need to wrap the lists in a node</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:18:19.266900</ts>
    <user>Carman</user>
    <text>I guess it doesn't flatten though</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:18:56.267200</ts>
    <user>Nana</user>
    <text>so you could then write:
```
[ a
, b
, c
, ...  optional condition [x, y]
]
```</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:19:36.268200</ts>
    <user>Nana</user>
    <text>(`optional` being a function that returns `[]` if the first argument is `False`, otherwise returns the second argument)</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:20:11.269300</ts>
    <user>Nana</user>
    <text>(there's probably a better name though)</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:20:29.269900</ts>
    <user>Antonette</user>
    <text>I was thinking something along the lines of:
```
a
:: b
:: c
:? Just d -- will be appended
:? Nothing -- won't count
:? optionallyC -- optionallyC being a Maybe of the right type
:: []
```</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:22:01.271100</ts>
    <user>Carman</user>
    <text>You _could_ have something like
```
conditionalList
  [ hardcoded a
  , hardcoded b
  , hardcoded c
  , optional condition [x y]
  ]
```</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:22:31.272000</ts>
    <user>Antonette</user>
    <text>That's not very different from `Maybe.Extra.values`, is it &lt;@Carman&gt;?</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:22:47.272100</ts>
    <user>Lilli</user>
    <text>here you're basically creating many lists (one for each row). i'm not sure if there are some optimizations that could happen at runtime</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:22:58.272300</ts>
    <user>Antonette</user>
    <text>Oh, no.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:23:36.273000</ts>
    <user>Antonette</user>
    <text>Each element in this list is an item of the list (since `(::) : a -&amp;gt; List a -&amp;gt; List a` it just appends an item to the list).</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:24:12.274200</ts>
    <user>Antonette</user>
    <text>`(:?) : Maybe a -&amp;gt; List a -&amp;gt; List a` is different in that it takes a `Maybe a` and only appends to the list if it's a `Just` and not a `Nothing`.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:24:30.274800</ts>
    <user>Carman</user>
    <text>yes if you use a `Maybe` under the hood.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:24:33.275000</ts>
    <user>Nana</user>
    <text>what's nice about the spread operator though is that you wouldn't have to use `filterMap` or whatever on the list afterwards</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:24:59.276200</ts>
    <user>Lilli</user>
    <text>yea, but lists are immutable in elm. when you append to a list, you're actually creating a new list with 1 more item in the end</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:25:01.276400</ts>
    <user>Carman</user>
    <text>to allow multiple items you'd probably want `List` under the hood in which case `conditionalList` is `List.concat`</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:25:14.276900</ts>
    <user>Antonette</user>
    <text>Same with something like the `(:?)` idea.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:25:18.277100</ts>
    <user>Nana</user>
    <text>I feel like first constructing a list and then filtermapping it to a different type of list becomes kind of indirect</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:26:37.278600</ts>
    <user>Carman</user>
    <text>Needing to do logic inline in a list like that is a bit of a smell IMO. It's not _bad_ but when I see that I pause to see if I can move that elsewhere.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:26:46.278900</ts>
    <user>Antonette</user>
    <text>Sure ; it's an idea for cases where these are not very long lists though.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:26:48.279200</ts>
    <user>Carman</user>
    <text>Many conditionals can be pushed up higher in the decision tree</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:28:00.280700</ts>
    <user>Antonette</user>
    <text>(and it's only the case because Elm doesn't do optimization like in Haskell, in which `a : b : c` is the same as `[a, b, c]`, memory serves)</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:28:51.282000</ts>
    <user>Nana</user>
    <text>&lt;@Carman&gt; I think it makes sense for html nodes / attributes though
it's nice to have "linear" code where you don't have to jump around to read it</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:29:21.282800</ts>
    <user>Nana</user>
    <text>which I think is a bit of a problem with moving the logic elsewhere</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:29:25.283000</ts>
    <user>Antonette</user>
    <text>Plus, you can use names to push the specifics up in a `let` rather than putting the condition in the list itself.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:30:04.283900</ts>
    <user>Carman</user>
    <text>I agree but that leads me to the opposite conclusion :smile:. Having "linear" code in your view is why I like moving the logic up</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:31:40.284700</ts>
    <user>Nana</user>
    <text>I guess it's just because I'm so used to writing HTML templates :thinking_face: so I try to write Elm node lists in the same way</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:33:44.286300</ts>
    <user>Antonette</user>
    <text>(also, &lt;@Nana&gt;, you're entitled to your preferences as long as it fits your teams' :wink:)</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:38:55.292700</ts>
    <user>Carman</user>
    <text>I'm a big fan of the idea of separating conditional logic from the implementation of each path. This is especially powerful if you start repeating conditionals. For example:
```
message : Bool -&amp;gt; Html a
message condition =
  div (if condition then [class "active"] else [])
    (if condition then [ text "true" ] else [ text "false" ])
```

is much easier to read if we separate the conditional logic from the branches

```
message : Bool -&amp;gt; Html a
message condition =
  if condition then
    activeMessage
  else
    inactiveMessage

activeMessage : Html a
activeMessage =
  div [class "active"] [ text "true" ]

inactiveMessage : Html a
inactiveMessage =
  div [ ] [ text "false" ]
```</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:40:11.294100</ts>
    <user>Carman</user>
    <text>I guess this is related to the idea of keeping code in a function at a single level of abstraction</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:41:06.294800</ts>
    <user>Velia</user>
    <text>On a side note, beware, `nodeIf/viewIf` can be devastating for performance if it is used for a complex node (for example a full page with `elm-css` styling). Be sure to use a lazy version like &lt;https://package.elm-lang.org/packages/elm-community/html-extra/latest/Html-Extra#viewIfLazy&gt; for example when you want to avoid evaluating the node.</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:43:07.296600</ts>
    <user>Carman</user>
    <text>I take a similar approach to case statements:
```
case maybe of
  Nothing -&amp;gt; emptyState
  Just item -&amp;gt; viewItem item
```</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:43:57.297600</ts>
    <user>Carman</user>
    <text>Turns out doing this is super powerful, not just for views. Moving the conditional up in the decision tree removes a lot of the pain around working with Maybe</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:45:06.298400</ts>
    <user>Carman</user>
    <text>Tinkering with these ideas led to this article: &lt;https://robots.thoughtbot.com/problem-solving-with-maybe&gt; and this ElmEurope talk &lt;https://www.youtube.com/watch?v=43eM4kNbb6c&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:48:26.299100</ts>
    <user>Nana</user>
    <text>&lt;@Antonette&gt; I'm the only frontend dev :grin:</text>
  </message>
  <message conversation_id="287">
    <ts>2019-01-29T12:53:21.299300</ts>
    <user>Nana</user>
    <text>Good point!</text>
  </message>
  <message conversation_id="288">
    <ts>2019-01-29T13:40:47.300800</ts>
    <user>Nana</user>
    <text>&lt;@Antonette&gt; elm-ui, which I am in the process of switching to, actually has `Element.none`</text>
  </message>
  <message conversation_id="288">
    <ts>2019-01-29T13:41:15.301000</ts>
    <user>Antonette</user>
    <text>Yay for them :grin::+1:</text>
  </message>
  <message conversation_id="288">
    <ts>2019-01-29T13:41:45.301200</ts>
    <user>Antonette</user>
    <text>(I should have suggested we use elm-ui on my company's app)</text>
  </message>
  <message conversation_id="288">
    <ts>2019-01-29T13:42:31.301400</ts>
    <user>Nana</user>
    <text>yeah it's really nice</text>
  </message>
  <message conversation_id="288">
    <ts>2019-01-29T13:43:02.301600</ts>
    <user>Nana</user>
    <text>makes so much more sense than CSS</text>
  </message>
  <message conversation_id="288">
    <ts>2019-01-29T13:52:06.301900</ts>
    <user>Lorilee</user>
    <text>It can look a bit nicer if you hide the if/else behind a function and use List.concat to keep it all lined up

```
List.concat
    [ [a, b, c]
    , optionalItems
    , moreOptionals
    ]
```</text>
  </message>
  <message conversation_id="288">
    <ts>2019-01-29T13:55:10.302100</ts>
    <user>Nana</user>
    <text>&lt;@Lorilee&gt; good idea! might try that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T14:00:40.303300</ts>
    <user>Elliot</user>
    <text>can I call `elm make` from another directory? I just get `It looks like you are starting a new Elm project. elm init` message … I can’t discover any flags :confused:</text>
  </message>
  <message conversation_id="288">
    <ts>2019-01-29T14:02:00.304300</ts>
    <user>Carman</user>
    <text>You can make files at an arbitrary path but `elm make` must be run from the directory that contains the project's `elm.json`</text>
  </message>
  <message conversation_id="288">
    <ts>2019-01-29T14:02:47.304900</ts>
    <user>Elliot</user>
    <text>okay! thank you for confirming that :blush:</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T18:13:14.309200</ts>
    <user>Marcus</user>
    <text>I've got another question related to splitting things up. I had a giant `Main.elm`. It's an app for letting a user search and then displaying those search results. The seam I split the file apart on was on my SearchResults type. There are a bunch of types that it included in it and it's a nicely contained part of the app. The only place where there is some leakage is in my `getSearchResults` method. The signature for it is `getSearchResults : SearchQuery -&amp;gt; Cmd Msg`. `Msg` is defined in `Main.elm`. I'm not crazy about needing to pull `Msg` out into its own file to prevent circular dependencies. So, I think I have two options, leave `getSearchResults` in `Main.elm` or use a type placeholder for `Msg`. Any recommendations?</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T18:13:40.309700</ts>
    <user>Marcus</user>
    <text>Side note, I just tried the type placeholder approach and I'm still picking compiler errors out of my forehead.</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T18:21:42.312800</ts>
    <user>Huong</user>
    <text>You could try doing something like `getSearchResults : SearchQuery -&amp;gt; (SearchResults -&amp;gt; msg) -&amp;gt; Cmd msg`. Not sure if that's what you meant by 'type placeholder', but it seems like a decent API</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T18:24:30.313100</ts>
    <user>Marcus</user>
    <text>"Type variable" is what I meant.</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T18:25:30.314100</ts>
    <user>Marcus</user>
    <text>That does look like a good API. So, is the second param a function that takes a `SearchResults` and returns a message?</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T18:42:09.314700</ts>
    <user>Marcus</user>
    <text>Ah, I got it to work, although I don't understand the syntax entirely.</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T18:42:34.314900</ts>
    <user>Kris</user>
    <text>Which part?</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T18:53:08.316800</ts>
    <user>Elvis</user>
    <text>Hullo all - I'm implementing drag-and-drop that should interoperate with other software. In the past, I've used something like `onDragStart(e) =&amp;gt; e.dataTransfer.setData("custom/mime-type", value)` and `val = dataTransfer.getData("custom/mime-type")` over in the receiver but this is feeling pretty janky in Elm right now. Has anyone else solved this problem?</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T18:54:19.317000</ts>
    <user>Elvis</user>
    <text>In particular, I've noticed that I can use a gross manual HTML attribute to "shell out" and set the custom data on the dragStart event but it's not clear to me how I could decode the data out of the event on the flip side. Advice or links are welcome!</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T19:12:38.317200</ts>
    <user>Marcus</user>
    <text>&lt;@Kris&gt; The type definition. The definition of the method in my module is this:

```
getSearchResults : SearchQuery -&amp;gt; (Result Http.Error SearchResults -&amp;gt; msg) -&amp;gt; Cmd msg
```

and the way I call it is:

```
getSearchResults model.searchQuery NewResults
``

The second parameter of the method is tripping me up a bit.</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T19:13:35.318200</ts>
    <user>Kris</user>
    <text>It's just a function `Result Http.Error SearchResults -&amp;gt; msg` like you said</text>
  </message>
  <message conversation_id="289">
    <ts>2019-01-29T19:18:42.321300</ts>
    <user>Marcus</user>
    <text>Yeah, I just haven't internalized that syntax. I can give the definition of what it is doing, but can't give a nuanced explanation. It will come.</text>
  </message>
  <message conversation_id="290">
    <ts>2019-01-29T20:18:13.321900</ts>
    <user>Son</user>
    <text>anyone know why I would be getting this compile error?

```
-- NAMING ERROR -------- ./src/ui/src/elm/Conversion/ClickEnergy/Validations.elm

Module `Char` does not expose `isAlpha`

3| import Char exposing (isDigit, isAlpha)
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
```</text>
  </message>
  <message conversation_id="290">
    <ts>2019-01-29T20:18:36.322300</ts>
    <user>Son</user>
    <text>AFAIK, `Char` _does_ expose `isAlpha`…</text>
  </message>
  <message conversation_id="290">
    <ts>2019-01-29T20:27:50.323000</ts>
    <user>Earlean</user>
    <text>&lt;@Son&gt; `isAlpha` was added in Elm 0.19</text>
  </message>
  <message conversation_id="290">
    <ts>2019-01-29T20:28:45.323700</ts>
    <user>Earlean</user>
    <text>it looks like you're using Elm 0.18</text>
  </message>
  <message conversation_id="290">
    <ts>2019-01-29T20:31:13.324000</ts>
    <user>Son</user>
    <text>&lt;@Earlean&gt; ah, no equivalent in 0.18?</text>
  </message>
  <message conversation_id="290">
    <ts>2019-01-29T20:31:18.324200</ts>
    <user>Son</user>
    <text>will I just have to use a range?</text>
  </message>
  <message conversation_id="290">
    <ts>2019-01-29T20:33:56.324800</ts>
    <user>Earlean</user>
    <text>```
isAlpha : Char -&amp;gt; Bool
isAlpha char =
    Char.isLower char || Char.isUpper char
```</text>
  </message>
  <message conversation_id="291">
    <ts>2019-01-30T02:10:50.325500</ts>
    <user>Annika</user>
    <text>Nice tip. Adding this and a variation with two Maybe values really helped clean up my code.</text>
  </message>
  <message conversation_id="290">
    <ts>2019-01-30T02:18:06.325700</ts>
    <user>Annika</user>
    <text>```maybeView2 : (a -&amp;gt; b -&amp;gt; Html msg) -&amp;gt; Maybe a -&amp;gt; Maybe b -&amp;gt; Html msg
maybeView2 f maybeA maybeB =
    case ( maybeA, maybeB ) of
        ( Just a, Just b ) -&amp;gt;
            f a b

        _ -&amp;gt;
            div [] []```</text>
  </message>
  <message conversation_id="291">
    <ts>2019-01-30T02:42:03.326000</ts>
    <user>Annika</user>
    <text>Which I guess is equivalent to:</text>
  </message>
  <message conversation_id="291">
    <ts>2019-01-30T02:42:07.326200</ts>
    <user>Annika</user>
    <text>```maybeView2 : (a -&amp;gt; b -&amp;gt; Html msg) -&amp;gt; Maybe a -&amp;gt; Maybe b -&amp;gt; Html msg
maybeView2 f maybeA maybeB =
    Maybe.map2 f maybeA maybeB
        |&amp;gt; Maybe.withDefault (div [] [])```</text>
  </message>
  <message conversation_id="292">
    <ts>2019-01-30T03:11:46.327200</ts>
    <user>Norris</user>
    <text>Does anyone know which github repository the Debugger code is defined in?</text>
  </message>
  <message conversation_id="292">
    <ts>2019-01-30T03:14:56.327600</ts>
    <user>Earlean</user>
    <text>&lt;@Norris&gt; &lt;https://github.com/elm/browser/tree/master/src/Debugger&gt;</text>
  </message>
  <message conversation_id="292">
    <ts>2019-01-30T03:15:59.327800</ts>
    <user>Earlean</user>
    <text>and &lt;https://github.com/elm/browser/blob/master/src/Elm/Kernel/Debugger.js&gt;</text>
  </message>
  <message conversation_id="292">
    <ts>2019-01-30T03:17:55.329700</ts>
    <user>Norris</user>
    <text>ah thank you! I'm looking for it because there is an issue with the `File.Select.file` code on certain browsers (e.g. safari on iOS), and it appears the issue can be mitigated by temporarily appending an input element to the DOM and then removing it. I noticed that this is exactly what the Debugger kernel code does.</text>
  </message>
  <message conversation_id="292">
    <ts>2019-01-30T03:18:27.330400</ts>
    <user>Norris</user>
    <text>Here's the `elm/file` issue I'm referencing, which I just posted my quick-and-dirty fix in: &lt;https://github.com/elm/file/issues/4&gt;</text>
  </message>
  <message conversation_id="293">
    <ts>2019-01-30T03:40:36.330500</ts>
    <user>Saran</user>
    <text>is `text ""` even added to the dom?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T03:57:42.332400</ts>
    <user>Nana</user>
    <text>I heard there were plans to make the compiler detect functions and give a type error if you try to compare them? Could that also mean that all types which don't contain functions would be moved into `comparable`? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="293">
    <ts>2019-01-30T03:58:25.332800</ts>
    <user>Antonette</user>
    <text>That's a good question &lt;@Saran&gt; and I'm not sure. Still, I prefer having an `Element.none` that says it's no element than a `text ""` that's a little bit less clear on why it's here.</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T03:58:39.333200</ts>
    <user>Nana</user>
    <text>So then we could have native any-dicts!</text>
  </message>
  <message conversation_id="293">
    <ts>2019-01-30T03:59:57.333300</ts>
    <user>Nana</user>
    <text>&lt;@Antonette&gt; I actually considered defining `none = text ""` for myself hehe</text>
  </message>
  <message conversation_id="293">
    <ts>2019-01-30T04:00:53.333500</ts>
    <user>Saran</user>
    <text>yeah, it should be a zero element</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:02:36.335100</ts>
    <user>Earlean</user>
    <text>`comparable` is kind of a confusing name. It's types where `&amp;lt;` and `&amp;gt;` and `==` are defined</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:03:53.336800</ts>
    <user>Nana</user>
    <text>&lt;@Earlean&gt; indeed, but if you know there are no functions, you could use an internal function like `Debug.toString` and then maybe put it through a hashing function</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:05:31.337900</ts>
    <user>Nana</user>
    <text>or would it be too "weird" that users could use `&amp;gt;` and `&amp;lt;` on random types?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:06:35.339400</ts>
    <user>Norris</user>
    <text>`comparable` required ordering, and custom types don't have an order, unless the compiler assumes the order is the one in which they are defined, e.g. `type Custom = First | Second | Third`, and then `First &amp;lt; Second`</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:07:19.340200</ts>
    <user>Norris</user>
    <text>off the top of my head, that's how Haskell works if you define a custom data type with the `Ord` typeclass</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:08:16.340700</ts>
    <user>Nana</user>
    <text>&lt;@Norris&gt; I was thinking it would just be an arbitrary ordering, only really used for performance in data structures</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:09:07.341300</ts>
    <user>Nana</user>
    <text>maybe it could have an alternate API instead of `&amp;gt;` and `&amp;lt;` though</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:09:15.341500</ts>
    <user>Norris</user>
    <text>then you just want equality</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:09:21.341700</ts>
    <user>Norris</user>
    <text>not orderability</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:09:24.341900</ts>
    <user>Norris</user>
    <text>which Elm doesn't have</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:09:38.342300</ts>
    <user>Norris</user>
    <text>again to go back to Haskell, there's `Eq` and there's `Ord`</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:09:58.342700</ts>
    <user>Norris</user>
    <text>one gives you `==`, the other gives you `&amp;gt;` and `&amp;lt;`</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:10:02.343000</ts>
    <user>Norris</user>
    <text>but `Ord` requires `Eq`</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:10:45.344000</ts>
    <user>Nana</user>
    <text>&lt;@Norris&gt; but orderability can give you better performance for lookups
example: &lt;https://github.com/pzp1997/assoc-list/blob/master/Performance.md&gt;</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:27:53.345700</ts>
    <user>Lynne</user>
    <text>I think it is generally hard (if not impossible) to come with both fast and reliable hashing function for arbitrary data</text>
  </message>
  <message conversation_id="295">
    <ts>2019-01-30T04:29:28.346800</ts>
    <user>Lynne</user>
    <text>If you convert elements to string and use, say, md5 hash (or whatever else out there without collisions), creation and insertion will be a major bottleneck</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:31:03.347100</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; yeah that may be true</text>
  </message>
  <message conversation_id="295">
    <ts>2019-01-30T04:31:42.347500</ts>
    <user>Lynne</user>
    <text>Not to mention that comparing large strings is not that efficient</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:34:49.348700</ts>
    <user>Lynne</user>
    <text>In Java class designers are encouraged to provide `equals` and `hashCode` methods if they intend to use objects as Map keys</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:35:15.349100</ts>
    <user>Lynne</user>
    <text>It must have been done for a reason given the language's history</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:37:12.349700</ts>
    <user>Huong</user>
    <text>That requires information to be present at runtime which isn't present at runtime, such as the names of the constructors. With `--optimize`, those are stripped so you can have smaller artifacts. Additionally, the compiler does unboxing in `--optimize` mode, meaning something aren't even in a "box" anymore. I.e. `type Foo = Foo String` will result in plain, bare strings being used, rather than objects that contain a string.</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:37:20.349900</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; hmm, in other languages, Enums are often stored as Ints. perhaps something similar could be used for custom types?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:38:14.351100</ts>
    <user>Timika</user>
    <text>That is what Elm compiles them to when you don’t add values to them. If they carry values however, they become objects to allow for this. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:39:45.352700</ts>
    <user>Nana</user>
    <text>Debug.toString was just an example, it wouldn't have to be the actual name, just some kind of unique thing</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:39:56.353100</ts>
    <user>Timika</user>
    <text>So that would only work for _enum-like_ custom types. I can vaguely remember a discussion about this.</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:39:57.353200</ts>
    <user>Lynne</user>
    <text>Yeah, since we are talking only about custom types converting to ints might be a way to go if only they did not have arguments :slightly_smiling_face:</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:42:15.355100</ts>
    <user>Nana</user>
    <text>but if I had:
```
type Foo = Foo
type Bar a = Bar a
```
then `Bar Foo` could still probably be converted into a more clever thing than an object, maybe some mathematical operation combining the Int representations of `Foo` and `Bar` ?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:43:31.356800</ts>
    <user>Nana</user>
    <text>probably way faster than big String comparisons, though could still get slow on large structures</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:43:34.356900</ts>
    <user>Timika</user>
    <text>I was referring to smth like `type Foo = Bar Int | Baz String | Quu Gender`, where the solution is not obvious, at least to me.</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:43:41.357100</ts>
    <user>Lynne</user>
    <text>And in case of `Bar SomeLongRecord`?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:44:14.357800</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; yeah it could still get slow</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:44:33.358500</ts>
    <user>Lynne</user>
    <text>Not even slow, how would you assign a number in this case?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:45:11.359800</ts>
    <user>Lynne</user>
    <text>It is pretty simple when using enum-like types or types which only take enum-like types, but then such a restriction should appear in the language</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:45:33.360400</ts>
    <user>Timika</user>
    <text>I think this is one of the problems that look easy to solve until you dive a bit deeper, then they become super hard, especially when you factor in elegance of design and ergonomics.</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:45:39.360600</ts>
    <user>Lynne</user>
    <text>So pretty much extend `comparable` to enum-like types and we are good to go</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:45:58.361100</ts>
    <user>Lynne</user>
    <text>Still won't be super useful though :slightly_smiling_face:</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:48:41.362300</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; though it'd probably be bad to have this feature for enum-likes only. That'd make other custom types a bit of a second-class citizen, which would encourage worse code</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:49:11.362700</ts>
    <user>Nana</user>
    <text>so yeah :pensive:</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:49:16.362900</ts>
    <user>Lynne</user>
    <text>That's why I said it won't be super useful</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:49:34.363300</ts>
    <user>Lynne</user>
    <text>I use `Uuid` and would be happy having them as dict keys</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:49:52.363700</ts>
    <user>Lynne</user>
    <text>But `Uuid` is not an enum-like type</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:50:51.364600</ts>
    <user>Lynne</user>
    <text>And, generally speaking, it is not possible to come with an integer number for it, only some float (probably with double precision)</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:51:44.365000</ts>
    <user>Lynne</user>
    <text>(I mean an integer which would fit into `Int` type)</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:55:22.366400</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; hmm, so for you, `AssocList` could actually be faster than `Dict String Stuff` ? :thinking_face:</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:56:11.367100</ts>
    <user>Nana</user>
    <text>because `==` doesn't do a full string comparison to check wether too Uuids are equal, right?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:59:03.367600</ts>
    <user>Lynne</user>
    <text>How do you mean it does not do full string comparison?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:59:41.368500</ts>
    <user>Nana</user>
    <text>or maybe it does? don't know how it works</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T04:59:42.368600</ts>
    <user>Lynne</user>
    <text>If custom types are represented as JS objects then Kernel will do structural comparison, i.e. it will compare strings</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:00:28.369300</ts>
    <user>Lynne</user>
    <text>But I don't know how they are represented in 0.19. In 0.18 they were objects if I remember correctly</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:01:05.370000</ts>
    <user>Nana</user>
    <text>but with immutable datastructures, aren't you supposed to be able to check equality by just checking the top node?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:01:25.370200</ts>
    <user>Lynne</user>
    <text>Could you elaborate on this?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:02:18.371200</ts>
    <user>Earlean</user>
    <text>&lt;@Nana&gt; yes, you can do reference comparisons, but that's only helpful if these data structures are related in some way</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:02:23.371300</ts>
    <user>Timika</user>
    <text>They still are in cases where you have a value with them. Otherwise `--optimize` will make them numbers.</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:02:43.371700</ts>
    <user>Earlean</user>
    <text>eg. if one is a slightly modified version of the other</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:02:49.371800</ts>
    <user>Lynne</user>
    <text>Thanks, good to know :+1:</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:04:38.374300</ts>
    <user>Lynne</user>
    <text>Not sure I understood you &lt;@Earlean&gt;</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:04:53.374600</ts>
    <user>Bert</user>
    <text>If you have `a = [1, 2]` and `b = [1, 2]`, they will be two different references but equal in value.</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:05:25.375000</ts>
    <user>Lynne</user>
    <text>That's why there is structural comparison, right?</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:05:42.375600</ts>
    <user>Lynne</user>
    <text>`Basics.eq` is actually doing reference comparison as first step (pretty logical) before it dives deeper in the structure</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:05:56.376200</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; I just remember Immutable.js presenting this as an advantage</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:05:57.376500</ts>
    <user>Lynne</user>
    <text>I mean JS function which `Basics.eq` is backed by</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:06:19.377400</ts>
    <user>Nana</user>
    <text>&lt;@Bert&gt; yeah that makes sense, so I guess you can quickly prove a positive, but not a negative</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:06:29.377600</ts>
    <user>Lynne</user>
    <text>&lt;@Nana&gt; It is very possible I am just not sure I understood what "top node" is</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:06:59.378100</ts>
    <user>Bert</user>
    <text>Right. Think of an immutable linked list.</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:07:56.379100</ts>
    <user>Bert</user>
    <text>Prepend an item and you have a longer linked list, but the "top node" is now different</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:08:26.379900</ts>
    <user>Lynne</user>
    <text>If it is a graph node, then, yes, in case of immutable data structures simple reference comparison of the node says if you need to dive deeper to the children</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:12:15.381700</ts>
    <user>Nana</user>
    <text>right, so I guess when you use `==` on two `Uuid`s,  would it first check reference equality, but if that returns false, it'd to a full structural comparison? so when going through a list to find a match, you wouldn't get any benefit from it</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:12:38.382100</ts>
    <user>Lynne</user>
    <text>That's exactly what `Basics.eq` is doing</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:13:14.382400</ts>
    <user>Lynne</user>
    <text>&lt;https://github.com/elm/core/blob/22b2d7a235003a88af4e4af58c3d0edf43684bc9/src/Elm/Kernel/Utils.js#L35&gt;</text>
  </message>
  <message conversation_id="294">
    <ts>2019-01-30T05:17:25.383100</ts>
    <user>Nana</user>
    <text>thanks, this was an interesting discussion :slightly_smiling_face:</text>
  </message>
  <message conversation_id="296">
    <ts>2019-01-30T05:57:37.384400</ts>
    <user>Karrie</user>
    <text>hello everyone!
is it possible to pattern match on a string in elm?
say I have a string that has a well defined structure and would like to extract the separate info from it?</text>
  </message>
  <message conversation_id="296">
    <ts>2019-01-30T05:59:12.385400</ts>
    <user>Nana</user>
    <text>&lt;@Karrie&gt; ah, not like that, you'll have to parse it into a record or something first</text>
  </message>
  <message conversation_id="296">
    <ts>2019-01-30T06:01:16.385700</ts>
    <user>Nana</user>
    <text>or just use Regex, that might be the simplest</text>
  </message>
  <message conversation_id="296">
    <ts>2019-01-30T06:02:07.386100</ts>
    <user>Nana</user>
    <text>(by pattern match I assume you meant `case .. of`)</text>
  </message>
  <message conversation_id="296">
    <ts>2019-01-30T06:04:24.386600</ts>
    <user>Lynne</user>
    <text>Sadly, pattern matching in Elm is not as powerful as in Elixir yet</text>
  </message>
  <message conversation_id="296">
    <ts>2019-01-30T06:17:02.388200</ts>
    <user>Karrie</user>
    <text>&lt;@Nana&gt; in elixir you can do `def my_func("say:" &amp;lt;&amp;gt; &amp;lt;&amp;lt;digit::bytes-size(1)&amp;gt;&amp;gt; &amp;lt;&amp;gt; ":" &amp;lt;&amp;gt; thing) do ... end`</text>
  </message>
  <message conversation_id="296">
    <ts>2019-01-30T06:17:30.388800</ts>
    <user>Karrie</user>
    <text>but I guess it’s not possible in elm yet
thanks &lt;@Lynne&gt; and &lt;@Nana&gt;!</text>
  </message>
  <message conversation_id="296">
    <ts>2019-01-30T06:21:57.389600</ts>
    <user>Jin</user>
    <text>&lt;@Karrie&gt; You could write a parser using &lt;https://package.elm-lang.org/packages/elm/parser/latest/&gt; and pattern match on the result of `Parser.run`</text>
  </message>
  <message conversation_id="296">
    <ts>2019-01-30T06:22:51.390600</ts>
    <user>Karrie</user>
    <text>&lt;@Jin&gt; amazing! how did I know about this already?! thank you very much!!</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:37:06.393100</ts>
    <user>Daysi</user>
    <text>is there a way to trigger the `scrollIntoView()`-method of a DOM element rendered by Elm _without_ using ports (because ports need a full update -&amp;gt; view circle with a model and stuff but I want to trigger the `scrollIntoView()` on a simple view-component without state)?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:40:28.393600</ts>
    <user>Daysi</user>
    <text>help would be greatly appreciated</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:41:00.393900</ts>
    <user>Lynne</user>
    <text>That's not how Elm works, so not possible</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:41:19.394100</ts>
    <user>Daysi</user>
    <text>wow</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:42:12.396000</ts>
    <user>Nana</user>
    <text>hmm I think you can use `Browser.Dom.setViewPort` ?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:42:18.396200</ts>
    <user>Lynne</user>
    <text>You don't need model and stuff (can simply use `()` as your model) but you have to send some command to trigger side effects</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:43:11.397100</ts>
    <user>Lynne</user>
    <text>&lt;@Nana&gt;, it is a `Task`, still not possible with just a view</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:43:50.398100</ts>
    <user>Nana</user>
    <text>yeah not just with view, that'd be weird anyway :stuck_out_tongue:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:44:32.398500</ts>
    <user>Daysi</user>
    <text>the problem is I want to have a reusable state-less component, which handles the "onClick" independently from the client-code which uses it. Could I implement a "private" update-function on this component?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:45:06.399000</ts>
    <user>Daysi</user>
    <text>e.g. look at the scrollable TabBar example from material design here &lt;https://material-components.github.io/material-components-web-catalog/#/component/tabs&gt;</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:45:29.399800</ts>
    <user>Daysi</user>
    <text>I am implementing this right now and need the tabs to `scrollIntoView()` on click</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:45:45.400500</ts>
    <user>Daysi</user>
    <text>but I don't want to delegate this to the client-code every time</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:46:33.401400</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; yes, your view component can take a "message handler" as an argument, which lets you do stuff like that</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:47:05.402000</ts>
    <user>Daysi</user>
    <text>how so?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:47:12.402200</ts>
    <user>Lynne</user>
    <text>Shortly, there is no "private" update functions</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:47:56.403500</ts>
    <user>Daysi</user>
    <text>&lt;@Lynne&gt; no _exposed_ update function. You get what I mean... no?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:48:24.404100</ts>
    <user>Lynne</user>
    <text>All messages you send from your "subcomponents" (in Elm world there is a long-running discussion if "component" is an appropriate term at all) have to go via top-level program (client code in your terms  if I got you right)</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:48:58.404900</ts>
    <user>Lynne</user>
    <text>&lt;@Daysi&gt; I think I get, but, again, that's not how Elm works :slightly_smiling_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:49:17.405400</ts>
    <user>Daysi</user>
    <text>but it wouldn't make sense for the top-level program to handle stuff which belongs into the responsibilities of the view layer</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:49:25.405800</ts>
    <user>Lynne</user>
    <text>Who would be triggering this private function if it was there?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:49:37.406100</ts>
    <user>Daysi</user>
    <text>the user</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:49:48.406500</ts>
    <user>Lynne</user>
    <text>Programmaticaly</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:49:54.406800</ts>
    <user>Lynne</user>
    <text>Given the Elm runtime and stuff</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:50:19.407800</ts>
    <user>Lynne</user>
    <text>Well, the only thing top-level program needs to do in this case is to delegate certain messages to another module's `update` function</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:50:53.408600</ts>
    <user>Lynne</user>
    <text>So you still have separation of concerns, it is just the message flow which always starts from top</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:51:39.409400</ts>
    <user>Daysi</user>
    <text>but the top-level program shouldn't be aware that there are any messages which don't concern it, i.e. `scrollIntoView()`</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:52:40.410800</ts>
    <user>Daysi</user>
    <text>it should only care about business-related logic, not view-related logic</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:52:51.411100</ts>
    <user>Lynne</user>
    <text>Well, it does not have be aware of exact messages (is it `scrollIntoView` or `scrollOutOfView` should not concern it), but it has to be aware of the very presence of messages themselves</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:53:12.411400</ts>
    <user>Lynne</user>
    <text>I hear OO in what you are saying :slightly_smiling_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:56:30.412500</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; here's the most basic version of such a "component" &lt;https://ellie-app.com/4BfGmGPKKdva1&gt;</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T07:58:26.414200</ts>
    <user>Nana</user>
    <text>in the example it only returns it's new state, however it could also return other things like `(model, Cmd.msg)` which is how you can use Tasks like setting the viewport</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:00:47.414500</ts>
    <user>Daysi</user>
    <text>&lt;@Lynne&gt; *triggered*</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:00:48.414700</ts>
    <user>Daysi</user>
    <text>:smile:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:01:19.415400</ts>
    <user>Daysi</user>
    <text>no seriously, I don't know why you hear OO</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:02:01.416800</ts>
    <user>Daysi</user>
    <text>abstraction and encapsultion of reponsibility is a universal concept not related to OO or FP</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:02:16.417500</ts>
    <user>Daysi</user>
    <text>&lt;@Nana&gt; thanks</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:02:41.418300</ts>
    <user>Lynne</user>
    <text>"business-related logic", "view-related logic" are terms I've never heard since I started working with Elm</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:02:50.418800</ts>
    <user>Lynne</user>
    <text>People just tend to call things differently here</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:03:50.420700</ts>
    <user>Nana</user>
    <text>with this type of "mapping" you can do encapsulation in Elm, and it lets you create "components" that can have private state and do effects. it's just that they always have to "go through the parent"</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:03:57.421000</ts>
    <user>Daysi</user>
    <text>that is a big problem in complex software as you run into huge files ("where did I put xy...?") and naming difficulties. Also you mix up abstractions in your mind which can be puzzling</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:04:02.421300</ts>
    <user>Daysi</user>
    <text>&lt;@Lynne&gt;</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:06:59.423900</ts>
    <user>Lynne</user>
    <text>I don't really want to discuss abstraction, encapsulation and other stuff which may or may not be a universal concept. This is philosophy to very large extent.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:07:34.425500</ts>
    <user>Lynne</user>
    <text>Elm architecture is simple and straightforward: you have a model, you update the model, you render the model</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:07:35.425600</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; I don't think you should say "Elm doesn't do that" though. it does, it just works a little differently</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:07:53.426000</ts>
    <user>Lynne</user>
    <text>&lt;@Nana&gt; I did not say that</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:08:23.426500</ts>
    <user>Daysi</user>
    <text>to be fair, he said in Elm "People just tend to call things differently"</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:09:13.427900</ts>
    <user>Lynne</user>
    <text>&lt;@Daysi&gt; Then, if you have some business-related logic, you generally create a module with functions encapsulating this logic and modifying your model or part of it, returning new one</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:09:54.429800</ts>
    <user>Daysi</user>
    <text>but the abstraction problem remains: the tabs should always scroll into view when the user clicks on them, regardless of where (in which top-level program) they are used</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:10:28.431400</ts>
    <user>Daysi</user>
    <text>&lt;@Lynne&gt; yeah that is basic knowledge, no?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:10:30.431500</ts>
    <user>Nana</user>
    <text>&amp;gt; Sergey Zubtsovskiy [1:41 PM]
&amp;gt; That's not how Elm works, so not possible
I think it's better to say "You do that by mapping the update function" or something</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:10:53.432100</ts>
    <user>Dayna</user>
    <text>&lt;@Daysi&gt; Disregarding all philosophical discussions, here's how you can achieve what you want in Elm: Define a Msg type for your component, then define an update function for those messages, then in your main function add a message with type of something like `MessageFromComponent ComponentMsg` and in the update function add `case MessageFromComponent msg -&amp;gt; Component.update msg state` and you're done, that's all of the plumbing you have to do</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:11:30.432700</ts>
    <user>Daysi</user>
    <text>that's not very elegant</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:11:31.433000</ts>
    <user>Daysi</user>
    <text>:disappointed:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:11:45.433900</ts>
    <user>Lynne</user>
    <text>&lt;@Daysi&gt; that's true, I just wanted to address your concern about abstraction of business and view logic</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:11:54.434400</ts>
    <user>Daysi</user>
    <text>so I have to handle these cases every time I use the component in a view</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:12:17.435200</ts>
    <user>Dayna</user>
    <text>No need, you can have a single case for all components</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:12:34.435700</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; yeah it's a bit fiddly to set up, but it still seems the simplest solution for a pure functional language</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:12:45.436200</ts>
    <user>Daysi</user>
    <text>&lt;@Nana&gt; yeah</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:13:00.436800</ts>
    <user>Dayna</user>
    <text>If you just need a way to differentiate them, maybe make an opaque Id for each</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:13:10.437000</ts>
    <user>Daysi</user>
    <text>I think we have here a hot spot where FP and the DOM collide a little bit :confused:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:13:48.437800</ts>
    <user>Daysi</user>
    <text>I hate it since I love Elm otherwise and I wish there was a more elegant solution</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:14:24.439000</ts>
    <user>Lynne</user>
    <text>Why is this solution not elegant?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:14:26.439300</ts>
    <user>Dayna</user>
    <text>Well you do really mind adding 3 lines of boilerplate to your main file, if you really do then you're not going to like the rest of Elm either</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:14:55.439800</ts>
    <user>Daysi</user>
    <text>&lt;@Dayna&gt; I know Elm quite a bit by now and I can say for sure I love it</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:15:26.440800</ts>
    <user>Lynne</user>
    <text>It is just a way how single data flow is implemented. In React world there is Redux which does pretty much same thing.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:15:42.441200</ts>
    <user>Dayna</user>
    <text>To be fair you would never do that in react + redux</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:15:51.441400</ts>
    <user>Daysi</user>
    <text>yep</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:16:11.442300</ts>
    <user>Daysi</user>
    <text>I programmed with React and Redux for 6 years and I know it inside and out</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:16:51.443300</ts>
    <user>Daysi</user>
    <text>but I guess I have to bite the bullet in this case. If I come across a better approach I'll tell you guys.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:16:57.443600</ts>
    <user>Daysi</user>
    <text>Thank you for your helps!</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:17:16.444100</ts>
    <user>Lynne</user>
    <text>So in React+Redux you would just call the JS function?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:17:21.444200</ts>
    <user>Daysi</user>
    <text>&lt;@Myong&gt; seriously?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:19:04.445600</ts>
    <user>Dayna</user>
    <text>Even the most hardcore Elm-inspired redux people would probably call the js function before dispatching the action. There is no mechanism to treat the DOM API as a Task or side effect, you would have to do the wrapping yourself</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:20:39.446400</ts>
    <user>Lynne</user>
    <text>Yeah, I see, but anyway I mentioned Redux because it is generally built in a similar to Elm way.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:20:59.447200</ts>
    <user>Lynne</user>
    <text>Of course, it is not the same, I only meant idea of single data flow</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:21:18.447500</ts>
    <user>Dayna</user>
    <text>Even in Elm applications are stateful because the DOM has so much state, things like scroll positions, forms, media queries</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:22:50.448000</ts>
    <user>Lynne</user>
    <text>Well, that's a web application after all.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:27:42.448500</ts>
    <user>Daysi</user>
    <text>Maybe the `scrollIntoView` behav should even be in CSS :thinking_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:28:23.449000</ts>
    <user>Daysi</user>
    <text>idk</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:28:32.449400</ts>
    <user>Daysi</user>
    <text>boundaries are blurring these days...</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:29:45.451200</ts>
    <user>Daysi</user>
    <text>like `:active { scroll-into-view: true }` or something</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:29:53.451400</ts>
    <user>Dayna</user>
    <text>If we had a purely functional web (everything is data and in the model)  it would be absolutely amazing</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:31:21.452900</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; hmm those scrolling tabs in the example were pretty terrible though :grimacing: you have to click them one by one to inch the view to the right, unless you're on a phone or laptop where you have horizontal scrolling gestures I guess</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:31:52.453400</ts>
    <user>Daysi</user>
    <text>&lt;@Nana&gt; you can use Shift+Mouse Wheel</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:31:53.453600</ts>
    <user>Daysi</user>
    <text>^^</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:31:59.453800</ts>
    <user>Daysi</user>
    <text>pretty intuitive imo</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:32:04.454100</ts>
    <user>Daysi</user>
    <text>but that's just me</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:32:37.454800</ts>
    <user>Daysi</user>
    <text>touch pad: swiping left/right should do the job</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:32:48.455100</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; considering I didn't know that, I doubt many users know about that :stuck_out_tongue:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:32:55.455300</ts>
    <user>Daysi</user>
    <text>:thinking_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:33:41.456700</ts>
    <user>Daysi</user>
    <text>well, a couple of years ago I established an axiom for myself: If my mom can use it, anyone can use it</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:34:01.457100</ts>
    <user>Nana</user>
    <text>I think it's intuitive if you're making a mobile-only app, but otherwise I think it's pretty bad</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:34:16.457500</ts>
    <user>Daysi</user>
    <text>I'll show it to my mom over the weekend and get back in touch with you :blush:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:34:39.458100</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; show it to her on a desktop computer then, not a phone</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:35:24.458900</ts>
    <user>Daysi</user>
    <text>when she can use it, you should consider changing to another profession than programming, e.g. backend :wink:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:40:21.459500</ts>
    <user>Nana</user>
    <text>horizontal scrolling without scrollbars is highly unusual on the web</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:40:49.459800</ts>
    <user>Nana</user>
    <text>to me it looks like an oversight by the developer</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:43:51.460100</ts>
    <user>Daysi</user>
    <text>but the developer is google</text>
  </message>
  <message conversation_id="298">
    <ts>2019-01-30T08:44:50.460400</ts>
    <user>Danika</user>
    <text>What are you discussing?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:45:38.460700</ts>
    <user>Daysi</user>
    <text>material design scrollable tabs</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:46:02.461500</ts>
    <user>Nana</user>
    <text>&lt;@Danika&gt; the tabs at the bottom of this page &lt;https://material-components.github.io/material-components-web-catalog/#/component/tabs&gt;</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:46:08.461600</ts>
    <user>Daysi</user>
    <text>&lt;@Nana&gt; you actually might be right! In the design guide lines they say that you should provide an indicator that you can scroll</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:46:21.461800</ts>
    <user>Daysi</user>
    <text>&lt;https://material.io/design/components/tabs.html#scrollable-tabs&gt;</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:46:43.462300</ts>
    <user>Daysi</user>
    <text>but they don't show it in the development/web/ section!</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:46:51.462600</ts>
    <user>Daysi</user>
    <text>good catch actually :thinking_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:47:30.463000</ts>
    <user>Danika</user>
    <text>hmm</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:47:52.463800</ts>
    <user>Daysi</user>
    <text>but for this you would need JavaScript and were back at the start of our discussion again</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:47:58.464000</ts>
    <user>Danika</user>
    <text>I wasn't even paying attention and instinctively swiped to scroll. But that is horrible UX for desktop.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:48:06.464200</ts>
    <user>Daysi</user>
    <text>yeh</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:48:12.464500</ts>
    <user>Daysi</user>
    <text>agree</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:48:22.465000</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; told you :grin:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:48:28.465200</ts>
    <user>Danika</user>
    <text>I think it's very obvious these design guidelines are geared towards mobile development though</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:48:42.465600</ts>
    <user>Daysi</user>
    <text>&lt;@Danika&gt; both actually</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:48:44.465800</ts>
    <user>Daysi</user>
    <text>read on!</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:49:29.466300</ts>
    <user>Danika</user>
    <text>95% of the examples in the design spec are mobile layout</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:50:12.467000</ts>
    <user>Nana</user>
    <text>I'm not a huge fan of Material Design anyway, it's kind of weird to adopt another company's look and feel, unless you're specifically designing for Android</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:51:17.468700</ts>
    <user>Danika</user>
    <text>They addressed that with their refresh of Material that they launched, i want to say last year? It was never really fully intended to be cloned the way it was, and they've tried to make that clearer but not really succeeded</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:51:39.469300</ts>
    <user>Danika</user>
    <text>Also if you scroll down to the very very bottom and look at the actual design spec.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:51:45.469400</ts>
    <user>Danika</user>
    <text>None</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:51:59.470000</ts>
    <user>Danika</user>
    <text>It's very obvious this spec is for mobile and desktop is like "yeah you can make it look like that for desktop too."</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:53:32.470100</ts>
    <user>Daysi</user>
    <text>None</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:55:09.472100</ts>
    <user>Danika</user>
    <text>I don’t think the design intention here is that you scroll. You click the indicator</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:55:40.473200</ts>
    <user>Danika</user>
    <text>I don’t think this is particularly relevant discussion for &lt;#C0CJ3SBBM|general&gt; though ^^</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:56:05.473900</ts>
    <user>Daysi</user>
    <text>it is not possible to check in Elm if scrollWidth &amp;gt; clientWidth, yes?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:56:48.475100</ts>
    <user>Daysi</user>
    <text>only with js interop</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:56:53.475400</ts>
    <user>Daysi</user>
    <text>and ports</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:57:27.475900</ts>
    <user>Nana</user>
    <text>it's better with the indicator/scroll button, but even that looks pretty annoying to use. I'd only use it if I knew that in 80% of cases you wouldn't need to scroll, and have the indicator for those edge cases</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:58:48.476000</ts>
    <user>Earnest</user>
    <text>I would use `text ""` because that is literally nothing in HTML, while `div [] []` still adds a node</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T08:59:30.476300</ts>
    <user>Earnest</user>
    <text>And if you swap the order of arguments it might look nicer in use:
```
let 
  someConditionalHtml = maybeView2 maybeA maybeB &amp;lt;| \a b -&amp;gt;
      div [] [ text &amp;lt;| a ++ b ]
```</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:00:48.477200</ts>
    <user>Daysi</user>
    <text>it's such a bummer you cannot programmatically react to browser window rendering changes in Elm</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:00:56.477400</ts>
    <user>Daysi</user>
    <text>only through ports</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:01:47.478400</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; you don't need ports, there's a subscription for that</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:02:02.478900</ts>
    <user>Daysi</user>
    <text>otherwise you'd need some kind of dependency injection of the whole DOM into view component</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:02:08.479100</ts>
    <user>Cecile</user>
    <text>&lt;@Daysi&gt; by rendering changes, do you mean like viewport width/height?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:02:17.479300</ts>
    <user>Daysi</user>
    <text>&lt;@Cecile&gt;</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:02:19.479500</ts>
    <user>Daysi</user>
    <text>yea</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:02:43.480000</ts>
    <user>Daysi</user>
    <text>&lt;@Nana&gt; thanks! will look into it</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:02:54.480300</ts>
    <user>Cecile</user>
    <text>lol then I hope &lt;@Leanna&gt; is right</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T09:03:39.481100</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; `Browser.Events.onResize`</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:15:51.481600</ts>
    <user>Daysi</user>
    <text>yeah</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:16:18.482200</ts>
    <user>Daysi</user>
    <text>but you cannot check if scrollWidth &amp;gt; clientWidth of a specific element</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:17:49.483200</ts>
    <user>Daysi</user>
    <text>you'd have to make the roundtrip through ports</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:21:41.484500</ts>
    <user>Lynne</user>
    <text>&lt;@Daysi&gt; if it is a specific element you care about, you should be able to subscribe to `scroll` with `Html.Events.on`, extract both values and compare them, shouldn't you?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:23:14.485000</ts>
    <user>Lynne</user>
    <text>I did it in 0.18, this possibility is still there in 0.19</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:24:02.485500</ts>
    <user>Lynne</user>
    <text>Not exactly this, I was using `scrollTop` but that's just another property</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:32:45.486900</ts>
    <user>Daysi</user>
    <text>that's an interesting point but not quite what I was searching for. I need to render an element depending if scrollWidth &amp;gt; clientWidth of another element</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:34:02.488000</ts>
    <user>Lynne</user>
    <text>I see</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:35:11.489000</ts>
    <user>Daysi</user>
    <text>but maybe I don't see a solution because I'm not familiar enough with the Html.Events module?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:35:23.489500</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; first set up a subscription to `Browser.Events.onResize`, then in the response handler, use `Browser.Dom.getViewportOf`</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:35:33.489900</ts>
    <user>Nana</user>
    <text>pretty fiddly but that should work I tihnk</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:35:40.490000</ts>
    <user>Lynne</user>
    <text>Are you aware of `Browser.Dom.getViewportOf` &lt;@Daysi&gt;?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:35:51.490300</ts>
    <user>Daysi</user>
    <text>not until now</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:35:55.490500</ts>
    <user>Lynne</user>
    <text>Ah sorry &lt;@Nana&gt; did not see your message</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:36:57.491200</ts>
    <user>Lynne</user>
    <text>I  think that's what you need then &lt;@Daysi&gt;. At least docs name `clientWidth` as one of the things you may get from it</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:37:44.492000</ts>
    <user>Daysi</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom#getViewportOf&gt;</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:37:50.492200</ts>
    <user>Daysi</user>
    <text>interesting :thinking_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:39:56.493000</ts>
    <user>Daysi</user>
    <text>maybe this helps already</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:40:01.493200</ts>
    <user>Daysi</user>
    <text>Thanks guys!!</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:40:10.493700</ts>
    <user>Daysi</user>
    <text>&lt;@Myong&gt; oh shut up!</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:40:22.493900</ts>
    <user>Nana</user>
    <text>basically the same as in js really:
```
window.addEventListener("resize", () =&amp;gt;
  document.getElementById("myElement").scrollWidth etc...
)
```</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:40:51.494700</ts>
    <user>Nana</user>
    <text>I guess it's mostly the Msg system that makes it feel fiddlier :thinking_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:51:16.495300</ts>
    <user>Daysi</user>
    <text>oh</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:51:43.495900</ts>
    <user>Daysi</user>
    <text>what if I subscribe to "resize" and the event fires _before_ the Elm app is rendered?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:53:04.496700</ts>
    <user>Daysi</user>
    <text>well, I could fire it via Cmd on init to be sure :thinking_face:</text>
  </message>
  <message conversation_id="299">
    <ts>2019-01-30T10:54:14.497700</ts>
    <user>Dede</user>
    <text>Start your app w/  Browser.Dom.getViewport</text>
  </message>
  <message conversation_id="299">
    <ts>2019-01-30T10:54:25.497900</ts>
    <user>Dede</user>
    <text>Wait,</text>
  </message>
  <message conversation_id="299">
    <ts>2019-01-30T10:54:27.498200</ts>
    <user>Dede</user>
    <text>sorry</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:54:31.498500</ts>
    <user>Dede</user>
    <text>I see that in history.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T10:55:15.499100</ts>
    <user>Dede</user>
    <text>Well, I see getViewportOf in history.  getViewport will give you the Window dimensions.  I think if you combine that as an init-launched task with a subscription you should have total coverage.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T11:04:06.500600</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; yeah, same as in JS, whenever you add a listener to resize, you usually also need to run the code once right away</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T11:05:44.501800</ts>
    <user>Nana</user>
    <text>pretty common in JS:
```
const resizeHandler = () =&amp;gt; document.getElementById("myElement").scrollWidth etc...
resizeHandlar()
window.addEventListener("resize", resizeHandler)
```</text>
  </message>
  <message conversation_id="300">
    <ts>2019-01-30T11:28:08.503600</ts>
    <user>Daysi</user>
    <text>yeah right</text>
  </message>
  <message conversation_id="301">
    <ts>2019-01-30T11:53:26.505300</ts>
    <user>Jalisa</user>
    <text>Hello there, just wanted to tell you that our CFP for Elm Europe is open ! We wrote some guidelines this year, hoping it will make this process clearer/simpler for everyone. :slightly_smiling_face:
&lt;https://checkout.eventlama.com/#/events/elm-europe-2019/cfp&gt;
Guidelines
&lt;https://drive.google.com/file/d/1Yt_IdGObx6u3BO3alkhBXqaxQM4Zx9fM/view?usp=sharing&gt;</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T12:42:06.506900</ts>
    <user>Jin</user>
    <text>There is a typo in the guidelines. Should be 8th of March I guess. :slightly_smiling_face:
&amp;gt; You have until the 8th of February if you want to have feedback, 1 week before the end of the CFP then.</text>
  </message>
  <message conversation_id="301">
    <ts>2019-01-30T14:33:36.507500</ts>
    <user>Jalisa</user>
    <text>&lt;@Jin&gt; Absolutely, the changes have been made ! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="302">
    <ts>2019-01-30T17:40:51.509600</ts>
    <user>Alison</user>
    <text>Hello! It's been &amp;gt;1 year since I made a few tiny apps in Elm, and I'm curious if anyone has a good path for getting ramped back up again? Wanting to include Elm on an internal project at work once I am comfortable enough with it and patterns (project structure, etc). I'm going to Elm in the Spring in Chicago, as well, in April!</text>
  </message>
  <message conversation_id="303">
    <ts>2019-01-30T18:16:42.512000</ts>
    <user>Jenice</user>
    <text>Hi all, I almost know I'll get no response for this but does anyone know if there has any been any word on the `Map.!: given key is not an element..` bug? Because at this point i'm about ready to bail out of this language, which is really painful for me to say. I've invested a lot of time in it and I think its almost perfect, but it has been a relatively long time since 0.19 was released, and no matter how many times I try and get an answer, noone knows. Its a game breaking bug and noone seems to acknowledge its existence..

It goes against everything this language seems to stand for, friendliness to newcomers, helpful error messages. Its just a plain blocker to anyone new who uses the language.

It feels to me at this point, as someone who has been coding Elm extensively for the last few years, that noone seems to care anymore. I understand the lack of communication when developing a new feature set, but this is a bug, is there any reason why a bug in the compiler has sat unfixed for so long? And if so, why won't anyone tell the community? I'm very fed up with it, and I've actually been scared to write this message because I know I'll likely get a massive backlash, but when the github issue was locked and limited in November, what am I supposed to do? To me it isn't really the bug anymore, but the lack of communication over it. It feels like a big F you to the community that love the language, and a big F you to the newcomers who are sold by the amazing ideas that Elm gets so right, only to be confronted by a really unfriendly and unsolvable Haskell bug in the compiler when they use, for example, the elm style animation library (&lt;https://package.elm-lang.org/packages/mdgriffith/elm-style-animation/latest/Animation&gt;).. which is something newcomers probably want to do quite often.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:33:49.514800</ts>
    <user>Virgie</user>
    <text>It has been quiet, some news would be welcome. In any case, without the `--debug` flag you should be fine. Also, in any case even if that bug were fixed today, there might be other things that maybe also need to be done before a 0.19.1 release can happen. Releases don't happen often by design</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:34:30.516000</ts>
    <user>Virgie</user>
    <text>also I'd hope that `Map.!` won't be used in the compiler going forward. it shows exactly why elm's non-crashing is so nice</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:34:44.516300</ts>
    <user>Jenice</user>
    <text>If the bug has been fixed, why wait to release 0.19.1? Isn't that the reason we're using semantic versioning?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:36:45.518400</ts>
    <user>Virgie</user>
    <text>there is more. There are some problems with adding packages/version conflicts. Releases bundle a bunch of work because there is (a lot) of overhead to a release. Also I'm really not sure how much work it is to fix this bug (we know the cause).</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:37:21.519100</ts>
    <user>Jenice</user>
    <text>Okay, so given that, would it not be sensible to tell the community?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:37:42.519700</ts>
    <user>Ruthann</user>
    <text>is the only workaround to remove the `--debug` flag? i haven’t encountered it myself</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:38:17.520600</ts>
    <user>Ruthann</user>
    <text>ah… that’s because i don’t use the `--debug` flag :stuck_out_tongue:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:38:18.520700</ts>
    <user>Jenice</user>
    <text>Yes</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:38:27.521000</ts>
    <user>Virgie</user>
    <text>yes, just for full context the problem occurs when exposing a type alias for an internal (non-exposed) type</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:38:54.521800</ts>
    <user>Virgie</user>
    <text>something that many packages do, so this is a real problem in pretty much any elm app</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:39:21.522600</ts>
    <user>Jenice</user>
    <text>I'm not the most experienced developer, and i'm not as talented as probably yourself or Evan, but this bug must have turned off hundreds of people off of Elm</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:39:40.523300</ts>
    <user>Jenice</user>
    <text>Not everyone will come to this slack and even find the non `--debug` flag solution</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:40:53.524800</ts>
    <user>Ruthann</user>
    <text>eddy, can you continue without the --debug flag?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:41:03.525200</ts>
    <user>Jenice</user>
    <text>No</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:41:12.525500</ts>
    <user>Jenice</user>
    <text>On multiple projects</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:41:24.526100</ts>
    <user>Jenice</user>
    <text>Do you mean continue development?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:41:36.526700</ts>
    <user>Ruthann</user>
    <text>yeah, typically i use Debug.log</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:41:56.527800</ts>
    <user>Ruthann</user>
    <text>my state is so huge that having --debug on lags my app to unusability</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:42:03.528400</ts>
    <user>Ruthann</user>
    <text>so i haven’t been using that flag for the last 2 yrs</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:42:09.528600</ts>
    <user>Jenice</user>
    <text>I can muddle through without --debug yes, but I don't think that is the point i'm really trying to make here</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:42:29.529300</ts>
    <user>Virgie</user>
    <text>I would think those people would never even find the `--debug` flag. In any case: yes it is frustrating but I don't see a clear way forward that would be obviously better.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:42:40.529600</ts>
    <user>Jenice</user>
    <text>By default people are going to come to this language and turn on the `--debug` flag</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:43:25.530700</ts>
    <user>Jenice</user>
    <text>I'd prefer they even rip out the `--debug` option at this point. If I was a newcomer to Elm and I hit that Haskell bug, I think i would just stop and look for something else</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:44:43.531700</ts>
    <user>Virgie</user>
    <text>well, the whole debugger is somewhat flawed in its current form, and needs serious rethinking to be really practical.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:46:05.533800</ts>
    <user>Virgie</user>
    <text>it's great for finding the order in which messages happen for instance, but I don't think the whole "saving a session" thing has delivered so far. A big technical question is when to invalidate (change in model, change in Msg).</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:46:31.535000</ts>
    <user>Jenice</user>
    <text>I mean it’s enabled by default with create-elm-app..</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:47:00.536300</ts>
    <user>Jenice</user>
    <text>Aren’t we arguing about the wrong thing here? The worthiness of the bug seems almost irrelevant</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:47:35.537200</ts>
    <user>Virgie</user>
    <text>what is the right thing to argue about?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:48:03.538200</ts>
    <user>Jenice</user>
    <text>The lack of communication regarding if/when it will be fixed</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:49:49.541600</ts>
    <user>Ruthann</user>
    <text>i can hear the frustration in your voice and yeah it sucks to be where you’re at there. i’m not here to vouch for elm or for the core team’s communication of bugs, though personally i think they try their best.
if you can keep going without it then do so, elm has been a very practical and productive language for me.
if you can’t then you have to make the call here.

the way that I’ve worked is to find an acceptable workaround and keep going, i lead a team of 3 on a mid (60k loc) legacy rewrite and frankly i’m scared of what happens when this project ends and i have to go back to js…

if you think this needs to be better communicated, then be the person to better communicate it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:51:03.542800</ts>
    <user>Virgie</user>
    <text>right. understanding that requires that you follow elm-related discourse quite well I think: that communication has not worked out well in the past. It is just not productive for Evan to say "bug is hard, I'm working on it", and even less productive for him to spell out the details.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:53:44.547000</ts>
    <user>Jenice</user>
    <text>I just don’t subscribe to that, It seems very easy for somebody on core to acknowledge bug is hard, We’re working on it. Anyone in this slack knows people come here daily reporting this bug again and again. If that many come to slack reporting it, imagine how many don’t come to the slack, and just abandon ship. I honestly have no way to know that they are working on it? No acknowledgement from anybody for months at this point</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T18:55:09.548200</ts>
    <user>Jenice</user>
    <text>It’s not a language paradigm up for debate, I understand the arguments Evan makes in that regard, I just want to know if I can ever use the debugger again</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:01:14.552200</ts>
    <user>Virgie</user>
    <text>I hear that. I remember when Evan would post regular updates on the elm-dev mailing list (which were always fun to read), but also saw how the discussion around it didn't really work out.

Can we ever use the debugger again? probably, but who knows in what form. I sketched some of the issues with the debugger earlier, and maybe they're working on a larger rehaul of the system. In the spirit of "better do it right than right now".  We'd know if elm were abandoned (it isn't), so there will be something eventually</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:02:07.552400</ts>
    <user>Jenice</user>
    <text>It's just not enough for me I think</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:03:57.554100</ts>
    <user>Virgie</user>
    <text>I'm just trying to clarify the situation. There are underlying reasons for the current state of affairs. I would like an official statement on it, but (given the past) understand why that may be difficult.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:08:22.555800</ts>
    <user>Ruthann</user>
    <text>&amp;gt; but also saw how the discussion around it didn't really work out.

yeah, evan gets a lot of negativity and demands whenever he posts so he stopped posting. i also liked the little progress updates and insights into what he was working on next.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:18:20.560100</ts>
    <user>Cornell</user>
    <text>And also a lot of discussions that go all over the place.  Updates would be nice, though personally I’ve invested a lot in Elm because I have a lot of faith in Evan as a designer.  For me, an aspect of having faith in Evan as a designer is to have trust that he is managing himself and the technical direction of the project well.  He’s done it this far, and in my opinion has done exceedingly well.

So, I direct my energies elsewhere from putting requirements on him.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:19:38.561000</ts>
    <user>Jenice</user>
    <text>I hear that, but to me this isn't a design task, it's a bug in the design that i've already bought in to</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:19:43.561200</ts>
    <user>Jenice</user>
    <text>I'm sold on Elm</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:20:46.562600</ts>
    <user>Jenice</user>
    <text>Is there noone else in a core-ish capacity that could update the Elm community that a major bug was being worked on?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:24:13.565200</ts>
    <user>Nana</user>
    <text>I think I read a post somewhere saying they were totally reworking the debugger, so perhaps they're just ignoring the bug in favor of the new debugger :thinking_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:25:17.567400</ts>
    <user>Jenice</user>
    <text>If someone on core had told me what you just said ^ then I would feel quite a bit better</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:25:31.567800</ts>
    <user>Lashawnda</user>
    <text>We know about all of the bugs that have been brought up and they’re all being fixed. Some are already fixed but someone already brought up about batching releases so I won’t repeat </text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:26:11.568100</ts>
    <user>Alison</user>
    <text>hey, thanks for ellie btw :heart:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:27:23.570500</ts>
    <user>Jenice</user>
    <text>Thanks Luke, thats really the first time i've heard in the last few months that they're being fixed and I appreciate the update</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:27:31.570800</ts>
    <user>Lashawnda</user>
    <text>You’re welcome! It’s being transitioned to a new maintainer and I’m looking forward to the new perspective he’ll bring</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:27:56.571400</ts>
    <user>Jenice</user>
    <text>Could you maybe clarify the batching bit?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:28:01.571500</ts>
    <user>Alison</user>
    <text>Good on ya for that outlook. Looking forward to it</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:28:58.573600</ts>
    <user>Lashawnda</user>
    <text>There are a lot of secondary effects to doing a release that need to be managed for it to go well, so Evan tries to group stuff together in a cohesive way and release it all at once so that it’s nicer to communicate what has changed</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:30:09.574800</ts>
    <user>Nana</user>
    <text>ah, found the post I was talking about, although I don't know if it's still relevant : &lt;https://github.com/elm-lang/elm-reactor&gt;
&amp;gt; Since then (1) the internal implementation of Elm has changed a decent amount and (2) we have learned a lot about what production users need to use this tool seriously. So time travel is not available in elm-reactor right now, but it will be coming back with a new design focused on real workflows.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:30:25.575200</ts>
    <user>Lashawnda</user>
    <text>Basically, each release has a clearly stated goal</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:30:32.575400</ts>
    <user>Nana</user>
    <text>that sounds to me like a new debugger?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:31:11.576200</ts>
    <user>Nana</user>
    <text>and the readme was last edited by Evan, August 2018</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:31:42.577000</ts>
    <user>Lashawnda</user>
    <text>We’d like a more advanced debugger but I don’t think anyone is working on it. I was planning to but other stuff in life came up</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:36:15.581000</ts>
    <user>Dede</user>
    <text>Quoting from &lt;https://www.deconstructconf.com/2017/evan-czaplicki-on-storytelling&gt; :

“In my projects, I use a different approach, that I think is controversial. But it works well, in my opinion, which is that someone opens an issue, and we say, OK. And someone else opens another issue. And over time, we let these build up. And we do a more high level analysis of all of the concerns people have. And so when you look at them holistically, you can find one fix that addresses all those concerns in a way that’s clear.

“And I think this, in the end, leads to better design. But from the perspective of storytelling, it also means you have a stronger narrative. Each release is about-- we did this work on the compiler. Elm has an emphasis on developer experience. You get a broader narrative than 40 things happened…”</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:36:37.582200</ts>
    <user>Jenice</user>
    <text>I hear you about the stated goal of each release, but I don't see why a bugfix couldn't be released for the compiler if you have a fix? As I mentioned earlier I think the impact on newcomers to the language is probably pretty severe. There seems to be a potential fix here: &lt;https://elmlang.slack.com/archives/C13L7S5GR/p1547537552048900&gt;</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:39:41.586000</ts>
    <user>Jenice</user>
    <text>Sure, but that doesn't really make sense with bug fixes surely?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:40:39.587300</ts>
    <user>Lashawnda</user>
    <text>The way that we approach fixing stuff isn’t to just fix the one issue and release a patch. We do more of a structural analysis on all of the problems and look for a solution that works at the level of category rather than individual issue. In this case the work that fixes the debug flag also fixes other stuff and makes a bunch of improvements beyond the specific problem.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:42:18.589700</ts>
    <user>Nana</user>
    <text>I haven't found the debugger particularily necessary so far anyway, so seems like an easy solution to just run without `--debug`</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:43:45.593100</ts>
    <user>Nana</user>
    <text>and I think people are pretty used to struggling with Webpack etc. so a buggy debugger shouldn't be that bad :stuck_out_tongue:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:43:58.593600</ts>
    <user>Lashawnda</user>
    <text>Regarding the impact, I’m not sure that it actually is that widely used of a feature and it doesn’t feature too frequently in beginner educational materials that we’ve seen. My intuition is that the effects are pretty marginal. But if there’s evidence that isn’t the case we should consider it!</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:47:34.597100</ts>
    <user>Dede</user>
    <text>I think in this philosophy that even bug fixes fall into this bucket — sometimes the way to fix a bug is not a point fix but a larger rearchitecting.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:48:51.598200</ts>
    <user>Jenice</user>
    <text>I personally think the debugger should be the showcase of the language and architecture, time-travelling debugging (especially with the pure guarentees that TEA provides) is what sold me on elm originally.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:49:24.598900</ts>
    <user>Nana</user>
    <text>I feel like the time traveling is more "cool" than actually "useful" though</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:49:50.599500</ts>
    <user>Jenice</user>
    <text>I work a lot with websockets and I find it real useful</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:50:46.602000</ts>
    <user>Nana</user>
    <text>yeah I suppose in that case, or when making games, it could be pretty useful</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:51:00.602300</ts>
    <user>Jenice</user>
    <text>but regardless, I just think the communication levels could be improved, today I heard for the first time that the bug which hampered a lot of peoples development experience a lot was being worked on, which I appreciate.</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:51:18.603000</ts>
    <user>Lashawnda</user>
    <text>i actually agree with that sentiment which is why i was hoping to work on the debugger a lot more. the thing about it though is that the status quo debugger doesn't really accomplish that goal and it would be a long term project to do that. so in our calculus that doesn't justify treating the --debug flag bug as an emergency release</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:53:34.604300</ts>
    <user>Lashawnda</user>
    <text>&amp;gt; today I heard for the first time that the bug which hampered a lot of peoples development experience a lot was being worked on
this is just gonna happen to some folks from time to time. we actually communicate about this more frequently than some of us would personally care to, it's just that there are multiple forums, and they all have folds for content to fall behind, and we inevitably repeat stuff</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:56:28.606500</ts>
    <user>Lashawnda</user>
    <text>this is not the first public conversation that i've had about the --debug flag, and it's definitely not first time i've responded to the suggestion of doing a bugfix release for something</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:57:20.606600</ts>
    <user>Jenice</user>
    <text>Again I'm sorry I just don't subscribe to that, why not just remove the debug flag for now?</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:57:32.607000</ts>
    <user>Jenice</user>
    <text>I honestly think you should just remove the --debug flag for now</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:58:05.607800</ts>
    <user>Nana</user>
    <text>that seems a bit extreme :face_with_raised_eyebrow:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:58:40.609000</ts>
    <user>Jenice</user>
    <text>It just feels like a really bad experience to have as a newcomer</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:58:50.609500</ts>
    <user>Lashawnda</user>
    <text>but that also requires doing a bug fix release, which we have to implement, and then build and test on all the platforms, and then update all of the installers, and then write and distribute announcements</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:58:55.609800</ts>
    <user>Jenice</user>
    <text>maybe a bit extreme :see_no_evil:</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T19:59:08.610100</ts>
    <user>Lashawnda</user>
    <text>it's like multiple days of stuff for several people at minimum</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:00:15.611400</ts>
    <user>Jenice</user>
    <text>I guess its a choice between the work or the people who hit the bug</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:00:40.612200</ts>
    <user>Jenice</user>
    <text>I don't know enough about how the team structure work to comment really</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:01:37.613000</ts>
    <user>Lashawnda</user>
    <text>just to turn off a thing that people don't use very much in the first place and could proceed without, and then totally reverse some amount of time later when the bigger picture change is done</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:02:23.613200</ts>
    <user>Jenice</user>
    <text>Alright</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:02:49.613700</ts>
    <user>Jenice</user>
    <text>I appreciate the chat anyway, it has helped clear things up a bit</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:03:06.614200</ts>
    <user>Jenice</user>
    <text>I have got to go bed now really</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:03:21.614600</ts>
    <user>Jenice</user>
    <text>I hope you see mainly my comments come from a love for the community and language</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:03:36.615000</ts>
    <user>Lashawnda</user>
    <text>oh definitely, this was a good conversation!</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:03:53.615200</ts>
    <user>Jenice</user>
    <text>cheers</text>
  </message>
  <message conversation_id="297">
    <ts>2019-01-30T20:04:16.615700</ts>
    <user>Lashawnda</user>
    <text>good night!</text>
  </message>
  <message conversation_id="304">
    <ts>2019-01-30T20:26:45.617000</ts>
    <user>Dede</user>
    <text>I’m not the architect of the idea. But I think the notion is that even minor releases like that detract from the impact of the story of the major release.  </text>
  </message>
  <message conversation_id="305">
    <ts>2019-01-30T20:32:24.617300</ts>
    <user>Earlean</user>
    <text>The Elm guide is the best place to start</text>
  </message>
  <message conversation_id="305">
    <ts>2019-01-30T20:32:47.617500</ts>
    <user>Earlean</user>
    <text>&lt;https://guide.elm-lang.org/&gt;</text>
  </message>
  <message conversation_id="305">
    <ts>2019-01-30T20:33:59.617700</ts>
    <user>Earlean</user>
    <text>&lt;https://github.com/rtfeldman/elm-spa-example&gt; is one good example of a large Elm app.</text>
  </message>
  <message conversation_id="305">
    <ts>2019-01-30T20:34:51.617900</ts>
    <user>Earlean</user>
    <text>&lt;https://github.com/elm/package.elm-lang.org&gt; is another good example that does some things differently</text>
  </message>
  <message conversation_id="305">
    <ts>2019-01-30T20:38:41.618100</ts>
    <user>Alison</user>
    <text>Hi, jessta! Thanks. I read the guide a couple of years ago, and this is a great idea</text>
  </message>
  <message conversation_id="305">
    <ts>2019-01-30T20:39:21.618300</ts>
    <user>Alison</user>
    <text>I'll deffinitely check out those two projects. Thank you</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T04:55:12.619400</ts>
    <user>Selene</user>
    <text>anyone with tips on how to create ios8601 date strings with timezone offset?</text>
  </message>
  <message conversation_id="305">
    <ts>2019-01-31T04:58:31.619700</ts>
    <user>Earlean</user>
    <text>You can fork &lt;https://github.com/rtfeldman/elm-iso8601-date-strings/blob/1.1.2/src/Iso8601.elm#L405-L427&gt;</text>
  </message>
  <message conversation_id="307">
    <ts>2019-01-31T06:32:05.621200</ts>
    <user>Tyisha</user>
    <text>what about a warning in the console about using `--debug` that links to one of the github issues/discourse posts?</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:04:09.621700</ts>
    <user>Selene</user>
    <text>is there really no easy way to get the timezone offset with elm/time?</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:07:12.622000</ts>
    <user>Selene</user>
    <text>Zone is an opaque type, so i cant access its values</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:07:44.622400</ts>
    <user>Selene</user>
    <text>all i can use is `getZoneName` which gives me the zone name not the offset</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:21:23.623600</ts>
    <user>Bert</user>
    <text>I guess a convoluted way to get there would be to use `toHour` and `toMinute` with both `utc` and the current time zone. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:31:23.624200</ts>
    <user>Earlean</user>
    <text>That seems like a reasonable way to do it since the offset is specific time dependent</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:42:41.624600</ts>
    <user>Selene</user>
    <text>thx for the hint, i will try that</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:44:25.625400</ts>
    <user>Huong</user>
    <text>If you have a time, you can use &lt;https://package.elm-lang.org/packages/justinmimbs/time-extra/latest/Time-Extra#toOffset&gt; to calculate the offset for a given timezone at a certain point in time</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:44:49.625800</ts>
    <user>Huong</user>
    <text>Which probably does what &lt;@Bert&gt; suggested under the hood :smile:</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:48:04.626400</ts>
    <user>Selene</user>
    <text>this is exactly what i need. :raised_hands:</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:52:00.626900</ts>
    <user>Olevia</user>
    <text>if you compile in debug mode , does elm use Html.keyed for optimization or is that disabled?</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:54:09.628800</ts>
    <user>Earlean</user>
    <text>&lt;@Olevia&gt; `--debug` doesn't change the way your app works, it just enabled the debugger</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:54:51.629600</ts>
    <user>Olevia</user>
    <text>uh sorry i meant DEV mode</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:55:00.630200</ts>
    <user>Olevia</user>
    <text>the one where you get the message in the console saying so</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:55:11.630700</ts>
    <user>Earlean</user>
    <text>You shouldn't see any difference between compiling with `--optimize` and without it.</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:56:56.632900</ts>
    <user>Earlean</user>
    <text>Are you seeing something different?</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:57:25.633900</ts>
    <user>Olevia</user>
    <text>Just figuring out our options, we have  a pretty substantial grid and it feels sluggish</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:57:51.634900</ts>
    <user>Olevia</user>
    <text>And I'm using elm-ui so im pretty sure ever el is keyed by default</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:58:05.635300</ts>
    <user>Olevia</user>
    <text>so i was wondering if it wasnt enabled or something</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T07:58:11.635800</ts>
    <user>Olevia</user>
    <text>or rather, every el in col and row is keyed</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:00:13.638100</ts>
    <user>Shenita</user>
    <text>`Html.keyed` is mainly there to optimise when you have a list of items, and items might get inserted or removed or moved around</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:01:27.639300</ts>
    <user>Shenita</user>
    <text>so if you insert an item at the top of a list, elm knows not to just modify the existing node at the top of the list, but instead to create a brand new node for that first item and then to reuse the existing node for the second item</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:01:34.639500</ts>
    <user>Shenita</user>
    <text>if that makes sense?</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:02:26.640600</ts>
    <user>Shenita</user>
    <text>so making every node keyed is generally not ideal, only when you have dynamic lists of things</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:04:34.643000</ts>
    <user>Olevia</user>
    <text>nah i get it, i just thought they did it on every element by default</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:04:43.643400</ts>
    <user>Olevia</user>
    <text>but looking at the docs i can see they have that in a seperate module</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:04:46.643700</ts>
    <user>Shenita</user>
    <text>ah right fair</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:04:52.643900</ts>
    <user>Olevia</user>
    <text>so im gonna go and key some stuff and hope it boosts performance</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:05:02.644200</ts>
    <user>Shenita</user>
    <text>:+1:</text>
  </message>
  <message conversation_id="306">
    <ts>2019-01-31T08:05:06.644400</ts>
    <user>Shenita</user>
    <text>good luck :slightly_smiling_face:</text>
  </message>
  <message conversation_id="308">
    <ts>2019-01-31T08:37:19.645500</ts>
    <user>Antonette</user>
    <text>Hey everybody ; I've had that crazy notion of adding `Traversal`s and maybe `Fold`s to `Monocle` for quite some time already, but even though I have a rough idea of what they are and why I'd use them, I'm a bit uncertain on how to implement them "the right way" and can't seem to find any decent beginner-friendly explanation on the web. So here I am reaching out for someone(s) with either knowledge about them or ideas on how to implement them to have a chat and help me straighten the way somehow.</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:22:58.646000</ts>
    <user>Selene</user>
    <text>```
(modBy 180 60)
```</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:23:04.646200</ts>
    <user>Selene</user>
    <text>this should by `0` right? :thinking_face:</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:24:35.647000</ts>
    <user>Bert</user>
    <text>You're calculating 60 modulo 180 there</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:25:10.647700</ts>
    <user>Selene</user>
    <text>oh :flushed:</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:25:13.647900</ts>
    <user>Bert</user>
    <text>It's sort of "pipeline optimized" I guess</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:25:25.648500</ts>
    <user>Selene</user>
    <text>yeah i see</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:25:33.648800</ts>
    <user>Bert</user>
    <text>```
180 |&amp;gt; modBy 60
```</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:25:36.649000</ts>
    <user>Selene</user>
    <text>:github:</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:26:25.649700</ts>
    <user>Danika</user>
    <text>Can you infix or do you have to pipe if you wanted to write it like that?</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:30:45.650300</ts>
    <user>Bert</user>
    <text>No there's no infix syntax in Elm anymore. It used to work that way.</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:38:09.650600</ts>
    <user>Danika</user>
    <text>Ah cool</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:38:22.651000</ts>
    <user>Danika</user>
    <text>I personally dislike infixing functions `like this` anyway</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:38:31.651300</ts>
    <user>Danika</user>
    <text>oh yeah ofc slack will turn the backticks into code.. :')</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:39:53.651600</ts>
    <user>Florencia</user>
    <text>we know what you mean :smile:</text>
  </message>
  <message conversation_id="310">
    <ts>2019-01-31T09:43:18.651700</ts>
    <user>Mirian</user>
    <text>for optics there exists &lt;https://github.com/evancz/focus&gt; if you havent seen it already</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:44:11.652000</ts>
    <user>Antonette</user>
    <text>Nope, I hadn't :slightly_smiling_face: thank you, I'll look into it.</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:47:00.652200</ts>
    <user>Antonette</user>
    <text>Just looked. It's just another `Lens` implementation, but less complete than `Monocle` (&lt;https://package.elm-lang.org/packages/arturopala/elm-monocle/latest&gt;) to which I contributed and want to contribute by adding `Traversal`s.</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:47:42.652400</ts>
    <user>Mirian</user>
    <text>yeah sorry I just realized what you mean in your question</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:48:02.652600</ts>
    <user>Antonette</user>
    <text>It's ok, I do this too once in a while :wink:</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:48:48.652900</ts>
    <user>Danika</user>
    <text>^^ </text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:49:10.653100</ts>
    <user>Mirian</user>
    <text>maybe Edward Kmett talks will help you with this</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:49:25.653400</ts>
    <user>Mirian</user>
    <text>I remember he goes in quite a detail about optics</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:49:29.653700</ts>
    <user>Mirian</user>
    <text>and how they work</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:50:09.654600</ts>
    <user>Mirian</user>
    <text>&lt;https://www.youtube.com/watch?v=cefnmjtAolY&gt;</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:50:52.654800</ts>
    <user>Mirian</user>
    <text>not sure how beginner friendly it is though as I am not an expert on this :smile:</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:50:54.655000</ts>
    <user>Antonette</user>
    <text>Thanks :slightly_smiling_face: I'll see if it clicks for me.</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:51:40.655500</ts>
    <user>Dayna</user>
    <text>I've noticed that there are so many ports threads on discourse and not a single browser API suggestion (well, there's the media API one from &lt;@Cammy&gt;, but that's a very recent one).</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:53:33.657900</ts>
    <user>Dayna</user>
    <text>Would having a tc39-like proposal system for Elm work? I think it would be helpful to standardize the process</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:53:54.658200</ts>
    <user>Cammy</user>
    <text>In fairness, this is my fifth attempt in a year at that api. It’s an extreme uphill battle to perfect and get it accepted. I honestly don’t know if I would subject myself to it again. 

There have been others, too, canvas is the one I remember most vividly. </text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:54:25.658500</ts>
    <user>Dayna</user>
    <text>That doesn't sound... great.</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:55:35.660400</ts>
    <user>Agustin</user>
    <text>The BDFL proposal system is we get what we’re given :joy:</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:57:08.662400</ts>
    <user>Danika</user>
    <text>:joy:</text>
  </message>
  <message conversation_id="309">
    <ts>2019-01-31T09:58:14.664000</ts>
    <user>Cammy</user>
    <text>It’s tough. For one thing my timing was bad. My first proposal was a few weeks before the announcement of the no native policy. And I had no idea what the process would look like...and I’m not sure anyone else did either. 

I honestly think the discussion of ports will always remain (people who are learning want to push boundaries), but grow much smaller in volume as the platform expands. 

But I am frustrated at the lack of progress. All of the work is falling on Evan’s shoulders, and he’s doing an incredible job, but he’s just one man. I think it’s a situational challenge that needs to be figured out. 

I’m trying to do my part, and media api is my domain. But it’s been really hard.</text>
  </message>
  <message conversation_id="311">
    <ts>2019-01-31T10:14:01.664600</ts>
    <user>Dayna</user>
    <text>Thanks for taking your time to respond.</text>
  </message>
  <message conversation_id="312">
    <ts>2019-01-31T10:44:06.665000</ts>
    <user>Dede</user>
    <text>Elm's definitely on the curve described here: &lt;https://krausefx.com/blog/scaling-open-source-communities&gt;  There are natural tensions that are not easily resolved.</text>
  </message>
  <message conversation_id="313">
    <ts>2019-01-31T11:08:17.665200</ts>
    <user>Teddy</user>
    <text>Hey &lt;@Alison&gt; long time no see :wave:</text>
  </message>
  <message conversation_id="313">
    <ts>2019-01-31T11:27:27.665800</ts>
    <user>Claretta</user>
    <text>I think it's ok that there are not a lot of Browser API suggestions. Building nice APIs is really much much harder than it seems.  The `viewport` APIs in 0.19 are a really nice example of this IMO.  It's a wonderful API that my team recently used in working with tooltips that made the process far easier than it's ever been in JS, but my understanding is that it took many revisions and failed attempts to get to what we have now.</text>
  </message>
  <message conversation_id="313">
    <ts>2019-01-31T11:28:18.666000</ts>
    <user>Claretta</user>
    <text>I'm also hoping that more collaboration on building nice APIs with ports can help inform the process of planning native APIs</text>
  </message>
  <message conversation_id="313">
    <ts>2019-01-31T11:28:40.666500</ts>
    <user>Alison</user>
    <text>Hiya, Justin! Indeed</text>
  </message>
  <message conversation_id="314">
    <ts>2019-01-31T11:52:40.672700</ts>
    <user>Cammy</user>
    <text>I’m not sure the process needs to be standardized at the current scale. There was an attempt previously to do a committee and apparently it wound up very bureaucratic and unpleasant for all involved. 

Of course, processes are really hard and often need to change. Personally I think it’s something that could use improvement, either in how it works or at least how that’s communicated (but probably both). 

There’s definitely an advantage to going to meetups and being able to talk through it with  people in public, but that’s also a really big disadvantage to people who don’t live in big cities or near a person well-known and trusted in the community. </text>
  </message>
  <message conversation_id="315">
    <ts>2019-01-31T12:17:00.673200</ts>
    <user>Libby</user>
    <text>Hello all anyone have an example how to make kanban board in js</text>
  </message>
  <message conversation_id="315">
    <ts>2019-01-31T12:34:07.673700</ts>
    <user>Dede</user>
    <text>This Slack is mostly about making things in Elm rather than directly in JS.</text>
  </message>
  <message conversation_id="316">
    <ts>2019-01-31T13:54:13.674400</ts>
    <user>Alicia</user>
    <text>maybe &lt;https://github.com/manjula91/trello-vanilla-javascript&gt;</text>
  </message>
  <message conversation_id="316">
    <ts>2019-01-31T16:41:28.674800</ts>
    <user>Carman</user>
    <text>None</text>
  </message>
  <message conversation_id="316">
    <ts>2019-01-31T16:43:01.676300</ts>
    <user>Carman</user>
    <text>Inspired by this conversation yesterday with &lt;@Rutha&gt; and &lt;@Antonette&gt; on handling conditional logic in the view, I created a diagram with some of the principles discussed.</text>
  </message>
  <message conversation_id="316">
    <ts>2019-01-31T16:43:13.676400</ts>
    <user>Carman</user>
    <text>None</text>
  </message>
  <message conversation_id="316">
    <ts>2019-01-31T16:43:19.676800</ts>
    <user>Carman</user>
    <text>I like to think of these as forming 3 sides of a triangle. This is the same principle viewed from slightly different perspectives</text>
  </message>
  <message conversation_id="317">
    <ts>2019-01-31T17:24:13.677700</ts>
    <user>Bernardo</user>
    <text>This :arrow_down: mentions and links to `Browser.Env`, but it doesn’t exist? :thinking_face:
&lt;https://package.elm-lang.org/packages/elm/time/latest/Time#Zone&gt;</text>
  </message>
  <message conversation_id="317">
    <ts>2019-01-31T17:32:41.678200</ts>
    <user>Earnest</user>
    <text>&lt;@Bernardo&gt; Probably means `Browser.element` since you need to send a Cmd for `here`</text>
  </message>
  <message conversation_id="317">
    <ts>2019-01-31T17:35:42.678600</ts>
    <user>Bernardo</user>
    <text>Ah, that could make sense, so it’s just a typo? &lt;https://github.com/elm/time/commit/95b0e10bba9f01decfabf1dac68d7d126adaa0af#diff-9c6450089d61430cea09d4e9c512ad74R103&gt;</text>
  </message>
  <message conversation_id="317">
    <ts>2019-01-31T17:57:00.679800</ts>
    <user>Earlean</user>
    <text>&lt;@Bernardo&gt; I think it was something that was going to exist in Elm 0.19, but was decided against.</text>
  </message>
  <message conversation_id="317">
    <ts>2019-01-31T18:19:19.680200</ts>
    <user>Bernardo</user>
    <text>Aha! This: &lt;https://github.com/elm/package.elm-lang.org/pull/285&gt;</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T18:51:41.680300</ts>
    <user>Nana</user>
    <text>hmm, for such a simple thing I'd rather do this though:
```
message : Bool -&amp;gt; Html a
message condition =
  if condition then
    div [class "active"] [ text "true" ]
  else
    div [ ] [ text "false" ]
```
shorter and no jumping between definitions</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T18:53:22.680500</ts>
    <user>Nana</user>
    <text>the first example is definitely ugly though :stuck_out_tongue:</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T19:00:23.680700</ts>
    <user>Nana</user>
    <text>and it'd be arguably even uglier with elm-format :smile:</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T19:10:16.681000</ts>
    <user>Nana</user>
    <text>another issue with splitting things up into smaller functions (when it's not done for reuse) is that it makes the reader wonder "is this function also used elsewhere?", but when it's inline you know it's not</text>
  </message>
  <message conversation_id="319">
    <ts>2019-01-31T19:28:17.686400</ts>
    <user>Ruthann</user>
    <text>Modeling state and module imports after one’s app UI seems to be a fairly intuitive thing to do, but it’s the biggest mistake one can make in a elm app as it grows.

It then leads to problems like:
how to do parent child communication
  - exposing global Msgs
  - exposing type aliases and reaching into children state
how to pass state between routes
  - duplicate state
  - exposing internal states

I’ve observed this tendency in my predecessor’s code, my own code (after I refactored their code) and in others on my team.

I’m starting to think this is a big problem.</text>
  </message>
  <message conversation_id="319">
    <ts>2019-01-31T20:17:09.688500</ts>
    <user>Earnest</user>
    <text>&lt;@Ruthann&gt; If a child needs to communicate with an abstraction boundary beyond it's scope, I'll have it return a `Maybe OutMsg` type that the main update can case match against and make the given adjustments. For duplicate states, I'll keep anything re-usable between views in the top-level module and pass them to my views/updates as arguments, instead of keeping them in the subpage's model.</text>
  </message>
  <message conversation_id="319">
    <ts>2019-01-31T20:20:24.690500</ts>
    <user>Earnest</user>
    <text>Hiding the internals is only necessary if you need to ensure some variant holds for all potential values/transformations of the type.</text>
  </message>
  <message conversation_id="319">
    <ts>2019-01-31T21:08:58.691100</ts>
    <user>Euna</user>
    <text>&lt;@Ruthann&gt; I feel the same way, and have started using the the outMsg with a defined structure</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T21:09:08.691400</ts>
    <user>Euna</user>
    <text>works fairly well and doesnt add too much boilerplate</text>
  </message>
  <message conversation_id="319">
    <ts>2019-01-31T21:31:26.694300</ts>
    <user>Ruthann</user>
    <text>&amp;gt; If a child needs to communicate with an abstraction boundary beyond it’s scope,

then something like OutMsg is good, we have our own way of handing that which we call `Job a` that contains global msgs. Since we still have some 3+ level nesting, OutMsgs would have to repeat themselves on the way up to a distant cousin making it impractical.

However, I’m talking more about the process of thinking which ends up needing a OutMsg. Time and time again, I catch myself modelling close to or being affect by the UI when thinking about state.</text>
  </message>
  <message conversation_id="319">
    <ts>2019-01-31T21:32:56.695300</ts>
    <user>Ruthann</user>
    <text>Or modules rather… I prolly need to write this out, pretty vague atm.</text>
  </message>
  <message conversation_id="319">
    <ts>2019-01-31T21:34:10.696400</ts>
    <user>Ruthann</user>
    <text>It’s almost as if, there is just the ( init, update, Msg, type alias ) in one module and that is completely independent of UI or should be.
Then there is the ( view ) all by itself which is happily nested like the UI.</text>
  </message>
  <message conversation_id="319">
    <ts>2019-01-31T21:34:26.696700</ts>
    <user>Ruthann</user>
    <text>And I’m finding it hard to separate the two.</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T21:54:31.697300</ts>
    <user>Euna</user>
    <text>for that I use type wrappers to guarantee ui state</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T21:55:39.698000</ts>
    <user>Ruthann</user>
    <text>extensible record? `{ a | field : Type, ... }`</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T21:55:48.698100</ts>
    <user>Euna</user>
    <text>None</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T21:56:34.699100</ts>
    <user>Euna</user>
    <text>except you know more specific, not just Html msg</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T21:58:05.700100</ts>
    <user>Euna</user>
    <text>I've been considering makeing my top level model contain the subModel and do a Page.viewModel</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T21:58:15.700400</ts>
    <user>Euna</user>
    <text>that way I can pass callbacks up the padder</text>
  </message>
  <message conversation_id="318">
    <ts>2019-01-31T21:58:20.700500</ts>
    <user>Euna</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:20:32.701400</ts>
    <user>Karma</user>
    <text>Hello! I have been trying to find a way to start a subscription from the update function (I need to open a web socket after having aquired a token). Is this possible?</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:22:06.702300</ts>
    <user>Nana</user>
    <text>&lt;@Karma&gt; yes, update some value in the model, and then check that value in your subscriptions function</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:23:10.703500</ts>
    <user>Nana</user>
    <text>however, there's currently a bug with starting/stopping subscriptions, so it's better to just always have it turned on</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:23:33.703900</ts>
    <user>Nana</user>
    <text>it's actually not necessary to toggle subscriptions on/off anyway</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:24:54.705200</ts>
    <user>Karma</user>
    <text>The reason for starting it later is that I need to have the token to open the web socket. If I start it before I have the token, it's just retrying it without the token and failing every time</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:25:54.706500</ts>
    <user>Karma</user>
    <text>Unless there's a way to refresh the value or restart the subscription or something</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:25:58.706600</ts>
    <user>Nana</user>
    <text>if you only turn it on once, but never turn it off, it might be fine though</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:27:21.708400</ts>
    <user>Karma</user>
    <text>So far I've only tried having the subscription in `subscriptions` and nowhere else</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:28:47.709600</ts>
    <user>Lynne</user>
    <text>&lt;@Karma&gt; Try doing it as &lt;@Nana&gt; suggested: start from returning `Sub.none` and when you have your token in model return actual websocket subscription. If you see that messages from websocket are not coming, you can replace your `Sub.none` with something like `Time.every 1000000 (always NoOp)` which will hardly fire before you get your token :slightly_smiling_face:</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:29:08.710300</ts>
    <user>Lynne</user>
    <text>Also, since you are using websockets I assume you are on Elm 0.18, is that correct?</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:29:15.710600</ts>
    <user>Karma</user>
    <text>Yep!</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:29:24.710900</ts>
    <user>Lynne</user>
    <text>Then, there should not be any problem</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:29:43.711500</ts>
    <user>Lynne</user>
    <text>I am not aware of any problem with subscriptions in 0.18</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:29:49.711700</ts>
    <user>Karma</user>
    <text>Ok, I'll give it a go then! Thank you both for your help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="321">
    <ts>2019-02-01T06:38:09.712700</ts>
    <user>Karrie</user>
    <text>hello everyone!
I’m trying the example code for the `Broswer.Dom.setViewportOf` from &lt;https://package.elm-lang.org/packages/elm/browser/1.0.1/Browser-Dom#setViewportOf&gt;</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:38:38.713200</ts>
    <user>Karrie</user>
    <text>but I get an error:
```
This function cannot handle the argument sent through the (|&amp;gt;) pipe:

229|     Dom.getViewportOf id
230|         |&amp;gt; Task.andThen (\info -&amp;gt; Dom.setViewportOf id 0 info.scene.height)
231|         |&amp;gt; Task.perform (\_ -&amp;gt; NoOp)
                ^^^^^^^^^^^^^^^^^^^^^^^^
The argument is:

    Task.Task Dom.Error ()

But (|&amp;gt;) is piping it a function that expects:

    Task.Task Never ()
```</text>
  </message>
  <message conversation_id="321">
    <ts>2019-02-01T06:39:21.713800</ts>
    <user>Karrie</user>
    <text>is there a mistake in the docs?</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:39:29.714000</ts>
    <user>Agustin</user>
    <text>I believe you’re looking for `attempt` rather than `perform`</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:40:18.714400</ts>
    <user>Earlean</user>
    <text>Yeah, that example is wrong</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:40:34.714800</ts>
    <user>Karrie</user>
    <text>yep that works!</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:41:07.715400</ts>
    <user>Agustin</user>
    <text>Could file an issue about it to help out too :slightly_smiling_face:</text>
  </message>
  <message conversation_id="320">
    <ts>2019-02-01T06:41:22.715700</ts>
    <user>Karrie</user>
    <text>yes I’m actually doing that right now :slightly_smiling_face:</text>
  </message>
  <message conversation_id="322">
    <ts>2019-02-01T07:09:19.719000</ts>
    <user>Nana</user>
    <text>is Elm Europe already sold out? :open_mouth: or did someone just set the number of tickets to zero for the moment or something?
&lt;https://2018.elmeurope.org/#tickets&gt;</text>
  </message>
  <message conversation_id="322">
    <ts>2019-02-01T07:11:15.719200</ts>
    <user>Leonore</user>
    <text>Maybe because you are looking at Elm Europe 2018 :sweat_smile: Here is the '19 link: &lt;https://2019.elmeurope.org/#tickets&gt;</text>
  </message>
  <message conversation_id="322">
    <ts>2019-02-01T07:11:37.719400</ts>
    <user>Nana</user>
    <text>:face_palm:</text>
  </message>
  <message conversation_id="323">
    <ts>2019-02-01T07:37:33.722600</ts>
    <user>Daria</user>
    <text>I’m running into an issue with inputs and textareas losing focus when an error is triggered, adding an error banner higher up in the DOM. I’m not sure if this is an elm specific issue but I just wanted to hear if anybody has come across this before - do I have any other option than manually resetting the focus?</text>
  </message>
  <message conversation_id="323">
    <ts>2019-02-01T07:38:50.723200</ts>
    <user>Nana</user>
    <text>&lt;@Daria&gt; `Html.Keyed`should fix that I think</text>
  </message>
  <message conversation_id="323">
    <ts>2019-02-01T07:41:04.723600</ts>
    <user>Nana</user>
    <text>or `Html.Lazy`</text>
  </message>
  <message conversation_id="323">
    <ts>2019-02-01T07:46:27.724000</ts>
    <user>Daria</user>
    <text>&lt;@Nana&gt; thanks I’ll give that a shot</text>
  </message>
  <message conversation_id="323">
    <ts>2019-02-01T07:52:11.729700</ts>
    <user>Earlean</user>
    <text>&lt;@Daria&gt; this is an issue that exists in all virtual-dom implementations. If the view changes too much the virtual-dom is unable to match up existing DOM nodes with the new DOM nodes so they get deleted and recreated. The recreated DOM nodes no longer have focus. You'll see the same kind of issue with React.

If the view hasn't changed too much `Html.Keyed.node` can be helpful. But it doesn't always work. `Html.Lazy.lazy` what help with this.</text>
  </message>
  <message conversation_id="323">
    <ts>2019-02-01T08:46:17.731000</ts>
    <user>Daria</user>
    <text>&lt;@Earlean&gt; thanks for the insight, thats what I was suspecting</text>
  </message>
  <message conversation_id="323">
    <ts>2019-02-01T09:04:27.732200</ts>
    <user>Nana</user>
    <text>I agree that you should try to only check a condition / case once though :slightly_smiling_face:</text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T09:33:15.733200</ts>
    <user>Quyen</user>
    <text>Hello, my `create` func has the following annotation `create : String -&amp;gt; String -&amp;gt; String -&amp;gt; Cmd Msg`</text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T09:33:28.733500</ts>
    <user>Quyen</user>
    <text>now, I want to patter match `Cmd Msg` part</text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T09:33:50.734000</ts>
    <user>Quyen</user>
    <text>I'm utterly confused whether it's a right way and how one matches `Cmd Msg`</text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T09:34:15.734400</ts>
    <user>Quyen</user>
    <text>To be more specific, here's my func

```
create : String -&amp;gt; String -&amp;gt; String -&amp;gt; Cmd Msg
create email password u =
    Http.request
        { method = "POST"
        , headers = []
        , url = u
        , body =
            encode (User email password)
                |&amp;gt; Http.jsonBody
        , expect = expectUser Created
        , timeout = Nothing
        , tracker = Nothing
        }
```</text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T09:34:33.734800</ts>
    <user>Quyen</user>
    <text>now, I want to test it with elm-test, so I need to pattern match Cmd Msg, extract an Msg and test for the Http.request result...</text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T09:39:45.735100</ts>
    <user>Velia</user>
    <text>&lt;https://elmlang.slack.com/archives/C0CLGCMMF/p1548425420119000?thread_ts=1548345785.118900&amp;amp;cid=C0CLGCMMF&gt;</text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T09:59:29.735500</ts>
    <user>Bert</user>
    <text>Also, creating a `Cmd Msg` does not mean you run the effect that it holds. </text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T10:00:19.735900</ts>
    <user>Bert</user>
    <text>So there is no Msg to extract or HTTP request being made </text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T10:01:48.736100</ts>
    <user>Bert</user>
    <text>You could think of a Cmd as a meal order for the chef: it tells the kitchen personnel what to work on, but in the end it is just a note. </text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T10:02:06.736300</ts>
    <user>Bert</user>
    <text>The chef here being the Elm runtime</text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T10:03:32.736500</ts>
    <user>Quyen</user>
    <text>&lt;@Bert&gt; I've noticed that elm-test does not really do an Http.request. Is that what you want to say?</text>
  </message>
  <message conversation_id="324">
    <ts>2019-02-01T10:06:27.736700</ts>
    <user>Bert</user>
    <text>Kind of yes. See this thread &lt;https://github.com/elm-community/elm-test/issues/220&gt;</text>
  </message>
  <message conversation_id="325">
    <ts>2019-02-01T10:21:36.737000</ts>
    <user>Demetrius</user>
    <text>I'd like to chime in. We (and others from what I've read) are having a heck of a time upgrading to 0.19 and the debugger would be incredibly helpful.</text>
  </message>
  <message conversation_id="326">
    <ts>2019-02-01T10:31:13.737200</ts>
    <user>Quyen</user>
    <text>Thank you. I'm still looking for the best way to test http requests... :confused:</text>
  </message>
  <message conversation_id="326">
    <ts>2019-02-01T10:32:31.737400</ts>
    <user>Quyen</user>
    <text>I've found this: &lt;https://package.elm-lang.org/packages/rogeriochaves/elm-testable/4.1.1/&gt;</text>
  </message>
  <message conversation_id="326">
    <ts>2019-02-01T10:32:57.737600</ts>
    <user>Quyen</user>
    <text>What do you think?</text>
  </message>
  <message conversation_id="326">
    <ts>2019-02-01T10:43:14.737800</ts>
    <user>Bert</user>
    <text>If that works for you, great! :) </text>
  </message>
  <message conversation_id="326">
    <ts>2019-02-01T10:44:40.738000</ts>
    <user>Bert</user>
    <text>That's Elm 0.18, I don't know if you are on 0.19 or not. </text>
  </message>
  <message conversation_id="326">
    <ts>2019-02-01T10:45:40.738200</ts>
    <user>Bert</user>
    <text>Honestly speaking, I have never written tests for actual HTTP requests. In Elm or otherwise. </text>
  </message>
  <message conversation_id="326">
    <ts>2019-02-01T10:46:10.738400</ts>
    <user>Bert</user>
    <text>I have thought that's sort of covered with integration tests</text>
  </message>
  <message conversation_id="326">
    <ts>2019-02-01T10:51:48.738600</ts>
    <user>Quyen</user>
    <text>A ha! So you want to say that I should write tests exclusively for the front-end?</text>
  </message>
  <message conversation_id="327">
    <ts>2019-02-01T11:03:51.739500</ts>
    <user>Karrie</user>
    <text>hello!
can I scroll to the bottom of the page with `Dom.setViewport` and add a scroll down animation without a sudden jump?</text>
  </message>
  <message conversation_id="328">
    <ts>2019-02-01T11:32:01.740000</ts>
    <user>Corinne</user>
    <text>Hi. Anyone know about &lt;http://elm-tutorial.org&gt; being dead?</text>
  </message>
  <message conversation_id="326">
    <ts>2019-02-01T14:04:18.741100</ts>
    <user>Bert</user>
    <text>I am saying write tests for things that make sense to you. Sadly it might not be easy for Cmds. </text>
  </message>
  <message conversation_id="327">
    <ts>2019-02-01T15:07:06.742800</ts>
    <user>Sau</user>
    <text>I'm trying to get Elm installed. I've tried "npm install -g elm" w/ and w/o sudo. I'm getting and error: ERR Error extracting &lt;https://github.com/elm/compiler/releases/download/0.19.0/binaries-for-linux.tar.gz&gt; - Error: EACCES: permission denied, mkdir '/usr/local/lib/node_modules/elm/unpacked_bin'</text>
  </message>
  <message conversation_id="327">
    <ts>2019-02-01T15:07:29.743200</ts>
    <user>Sau</user>
    <text>Anyone know why/what I'm doing wrong?</text>
  </message>
  <message conversation_id="327">
    <ts>2019-02-01T15:18:23.743700</ts>
    <user>Alicia</user>
    <text>looks like a permissions issue on that folder, these docs have some good suggestions on it &lt;https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally&gt;</text>
  </message>
  <message conversation_id="327">
    <ts>2019-02-01T15:23:54.744100</ts>
    <user>Sau</user>
    <text>Thanks! I'll take a look</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T17:43:33.744400</ts>
    <user>Buffy</user>
    <text>Is there one of these for Set's yet?</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T17:43:38.744600</ts>
    <user>Buffy</user>
    <text>Does it need to be written?</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:12:35.744800</ts>
    <user>Velia</user>
    <text>A `Set a` is basically a `Dict a ()`, so it is really easy to implement using `assoc-list`.

I don't know if someone already published it. If not, publish it if you need it.</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:13:57.745000</ts>
    <user>Buffy</user>
    <text>I literally copy/pasted the code for Set from elm/core and replaced all the Set_builtin with the `Set` from `type Set a = Set (Dict a ())` and it's all working? Should / can I post it to elm packages for others?</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:14:11.745200</ts>
    <user>Buffy</user>
    <text>Or just so I don't have to hold onto it in my repo?</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:14:15.745400</ts>
    <user>Buffy</user>
    <text>Or how does that work?</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:18:53.745700</ts>
    <user>Velia</user>
    <text>I would add at least some notes in the README about the implementation based on `assoc-list` and the resulting performance. Also be sure to replace the `comparable` by `a`, else it's useless. At last the hardest part is finding a good name that can be found when searching a Set, this is the weak point of `assoc-list` in my opinion, it is not easy to find when searching a generic Dict.</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:19:21.745900</ts>
    <user>Buffy</user>
    <text>assoc-set?</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:20:10.746200</ts>
    <user>Buffy</user>
    <text>You also have the dual issue of naming like the existing packages that use `key -&amp;gt; comparable` functions to get their 'any-ness'</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:33:44.746600</ts>
    <user>Velia</user>
    <text>`assoc-set` is both easy to find when searching `set` and `assoc`, it's a good point. However its implementation does not really require an association at all, as the `()` is unused, so it is a little misleading. I don't know.</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:34:10.746900</ts>
    <user>Buffy</user>
    <text>That's fair, I'm open to ideas :slightly_smiling_face:</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:34:29.747200</ts>
    <user>Buffy</user>
    <text>awesome-set? sets-are-cool? Hahaha</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:34:38.747400</ts>
    <user>Buffy</user>
    <text>omni-set?</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:34:44.747600</ts>
    <user>Buffy</user>
    <text>set-a</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:34:52.747800</ts>
    <user>Velia</user>
    <text>I can't think of anything better unfortunately. Your call.</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:35:13.748000</ts>
    <user>Buffy</user>
    <text>Well I'll publish and then if people don't like it I can change it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="329">
    <ts>2019-02-01T18:59:39.748300</ts>
    <user>Buffy</user>
    <text>Haha! I published a package! &lt;https://package.elm-lang.org/packages/erlandsona/assoc-set/latest/&gt;
Okay okay I know I need to go update the docs and everything.
It's my first OS package, ever?!</text>
  </message>
  <message conversation_id="330">
    <ts>2019-02-01T21:47:30.750200</ts>
    <user>Rozanne</user>
    <text>platform.program had no view function.  is there an equivalent in 0.19's browser?</text>
  </message>
  <message conversation_id="330">
    <ts>2019-02-01T21:52:07.750400</ts>
    <user>Earlean</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/core/latest/Platform#worker&gt;</text>
  </message>
  <message conversation_id="330">
    <ts>2019-02-01T22:09:38.750600</ts>
    <user>Rozanne</user>
    <text>thank you</text>
  </message>
  <message conversation_id="331">
    <ts>2019-02-02T00:33:59.751800</ts>
    <user>Erin</user>
    <text>&lt;@Sau&gt; I had the same issues with elm-format... add the `--unsafe-perms` flag.</text>
  </message>
  <message conversation_id="332">
    <ts>2019-02-02T01:59:46.752300</ts>
    <user>Euna</user>
    <text>eyy anyone know how Cmd race conditions work, if any?</text>
  </message>
  <message conversation_id="332">
    <ts>2019-02-02T02:00:39.753200</ts>
    <user>Euna</user>
    <text>like if I have a Nav.load and a Port to save, to localstorage, do they get executed sequentially?</text>
  </message>
  <message conversation_id="332">
    <ts>2019-02-02T02:01:10.753600</ts>
    <user>Earlean</user>
    <text>&lt;@Euna&gt; `Cmd`s in a batch are unordered</text>
  </message>
  <message conversation_id="332">
    <ts>2019-02-02T02:01:50.754100</ts>
    <user>Earlean</user>
    <text>If you want to order them you need to explicitly order them by going through `update`</text>
  </message>
  <message conversation_id="332">
    <ts>2019-02-02T02:02:41.754900</ts>
    <user>Earlean</user>
    <text>ie. You have one `Cmd` produce a `Msg` and then have the next `Cmd` returned from the next `update`</text>
  </message>
  <message conversation_id="333">
    <ts>2019-02-02T04:25:41.755700</ts>
    <user>Desire</user>
    <text>seen people at fosdem wearing elm shirts :slightly_smiling_face:</text>
  </message>
  <message conversation_id="333">
    <ts>2019-02-02T04:25:52.756000</ts>
    <user>Desire</user>
    <text>or well one so far</text>
  </message>
  <message conversation_id="334">
    <ts>2019-02-02T05:47:46.759800</ts>
    <user>Lavada</user>
    <text>Question: How can I decode this JSON response from an API
```
query : {
  search: {
    [ 
      0: { title: "xyz" },
      1: {title: "elm"},  // and so on
    ]
  }
```
I am trying `field "query" (field "search")`, but how do I decode a list of objects?</text>
  </message>
  <message conversation_id="334">
    <ts>2019-02-02T05:48:23.760200</ts>
    <user>Lavada</user>
    <text>Oops should post it in beginners channel</text>
  </message>
  <message conversation_id="334">
    <ts>2019-02-02T05:49:56.760900</ts>
    <user>Hoa</user>
    <text>&lt;@Lavada&gt;  There's `list`: &lt;https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#list&gt;</text>
  </message>
  <message conversation_id="334">
    <ts>2019-02-02T05:50:50.762000</ts>
    <user>Hoa</user>
    <text>Which decodes a list of "things".  Basically you have to provide another decoder for each thing you are going to need</text>
  </message>
  <message conversation_id="335">
    <ts>2019-02-02T07:24:48.762300</ts>
    <user>Danika</user>
    <text>Oh how far Elm has come!</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T07:54:46.763300</ts>
    <user>Ema</user>
    <text>Anyone have any luck manually decoding `target.selectedOption` for select `onChange`?</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T07:55:09.763600</ts>
    <user>Ema</user>
    <text>```
onSelect : (Maybe ( String, String ) -&amp;gt; msg) -&amp;gt; Attribute msg
onSelect handler =
    on "change" (Decode.map handler optionParser)


optionParser : Decode.Decoder (Maybe ( String, String ))
optionParser =
    Decode.map
        (List.head &amp;lt;&amp;lt; Maybe.withDefault [] &amp;lt;&amp;lt; Debug.log "option")
        (Decode.maybe
            (Decode.at [ "target", "selectedOptions" ] (Decode.list optionDecoder))
        )
optionDecoder : Decode.Decoder ( String, String )
optionDecoder =
    Decode.map2 (\t v -&amp;gt; ( t, v ))
        (Decode.field "text" Decode.string)
        (Decode.field "value" Decode.string)
```</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T07:55:36.764200</ts>
    <user>Ema</user>
    <text>something like this - ignore all the maybes - that's just me trying to debug why it doesn't work.</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T07:58:08.765000</ts>
    <user>Ema</user>
    <text>Is the event elm gives us a faithful representation of the dom event or does it have some different structure?</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:01:05.765900</ts>
    <user>Lea</user>
    <text>It’s the same structure</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:01:41.766600</ts>
    <user>Ema</user>
    <text>So it seems to me that this part :</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:01:47.766800</ts>
    <user>Ema</user>
    <text>```
(Decode.maybe
            (&lt;http://Decode.at|Decode.at&gt; [ "target", "selectedOptions" ] (Decode.list optionDecoder))
        )
```</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:01:53.767100</ts>
    <user>Ema</user>
    <text>is giving me a `Nothing`</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:02:51.768200</ts>
    <user>Ema</user>
    <text>event if I change the optionDecoder to just spit out some dummy data. So very much appears like target.selectedOptions is the thing it doesn't like</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:06:52.769300</ts>
    <user>Lea</user>
    <text>This is about a `&amp;lt;select&amp;gt;` right?</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:10:14.770800</ts>
    <user>Ema</user>
    <text>correct</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:10:44.771400</ts>
    <user>Ema</user>
    <text>I can see the exact property I'm trying to dig out in the console but it doesn't seem to be coming through in the elm code,</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:10:51.771600</ts>
    <user>Huong</user>
    <text>&lt;https://package.elm-lang.org/packages/elm-community/json-extra/4.0.0/Json-Decode-Extra#collection&gt;</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:11:06.772000</ts>
    <user>Huong</user>
    <text>It's not a real array, so `Decode.list` doesn't like it</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:11:43.772600</ts>
    <user>Ema</user>
    <text>Ah - nasty! Thanks I'll give that a go.</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:13:33.774000</ts>
    <user>Huong</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedOptions&gt; - whenever MDN says it's "a `HTMLCollection` object", it means `Decode.list` won't quite cut it. Silly Web API's :smile:</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:14:21.775100</ts>
    <user>Hoa</user>
    <text>Hehehe. Never seen that `collection` before. Nice to know!</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:14:59.775700</ts>
    <user>Lea</user>
    <text>You can also use `Tuple.pair` for `(\t v -&amp;gt; ( t, v ))` in the `optionDecoder`</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:15:43.776300</ts>
    <user>Ema</user>
    <text>shame I can't just do `(,)` but we won't open _that_ can of worms! Thanks all!</text>
  </message>
  <message conversation_id="336">
    <ts>2019-02-02T08:21:10.776500</ts>
    <user>Ema</user>
    <text>works a treat. Great.</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:48:41.777100</ts>
    <user>Rhonda</user>
    <text>Hey folks, could someone clue me in on how to update a package?</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:48:55.777200</ts>
    <user>Rhonda</user>
    <text>I tried by hand and then running elm make, but that tells me to change it back</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:49:05.777400</ts>
    <user>Rhonda</user>
    <text>And when I try elm install it tells me it’s already installed</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:49:15.777700</ts>
    <user>Rhonda</user>
    <text>But it’s not the latest version</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:52:54.777900</ts>
    <user>Rhonda</user>
    <text>Specifically I’m trying to upgrade `elm-graphql`. I’m on `1.1.0` but I see that the latest version is `4.2.0`.</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:53:19.778100</ts>
    <user>Rhonda</user>
    <text>Removing the package from `elm.json` and then re-installing only brings me to `1.3.0`</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:55:54.778300</ts>
    <user>Earlean</user>
    <text>running `elm install` will install the latest version of a package that is compatible with all the packages currently listed in your elm.json file.</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:56:21.778600</ts>
    <user>Rhonda</user>
    <text>Oh I see, so I probably have an incompatible package. I don’t suppose there’s a way to see which one(s)?</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:57:16.778900</ts>
    <user>Earlean</user>
    <text>the Elm package program doesn't provide this information. But &lt;https://www.markuslaire.com/github/elm-dependencies-analyzer/&gt; is a good way to see this.</text>
  </message>
  <message conversation_id="337">
    <ts>2019-02-02T09:58:16.779100</ts>
    <user>Rhonda</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="338">
    <ts>2019-02-02T10:47:32.780500</ts>
    <user>Luz</user>
    <text>I wrote an issue about having a blessed style guide (in particular the differing output of `elm-format` and the code in the official guide)- &lt;https://github.com/evancz/guide.elm-lang.org/issues/189&gt; . Any thoughts on it?</text>
  </message>
  <message conversation_id="339">
    <ts>2019-02-02T11:04:06.780600</ts>
    <user>Jae</user>
    <text>Sounds reasonable to me!</text>
  </message>
  <message conversation_id="338">
    <ts>2019-02-02T11:58:51.780800</ts>
    <user>Earlean</user>
    <text>The previous answer Evan has given about why the core packages didn't follow elm-format was that he intended to start using elm-format once the style of elm-format settled. At the time there was a lot of changes to the elm-format style. But years later that reasoning probably no longer applies.</text>
  </message>
  <message conversation_id="338">
    <ts>2019-02-02T12:00:31.781000</ts>
    <user>Earlean</user>
    <text>There is a basic style guide that elm-format is based off. &lt;https://elm-lang.org/docs/style-guide&gt;</text>
  </message>
  <message conversation_id="338">
    <ts>2019-02-02T12:26:58.781300</ts>
    <user>Luz</user>
    <text>Thanks for the background! I've linked to your comment in the issue &lt;@Earlean&gt;</text>
  </message>
  <message conversation_id="340">
    <ts>2019-02-02T16:08:26.783300</ts>
    <user>Saran</user>
    <text>has anyone here had use of the fact that `Set` doesn't require a `comparable` type argument all of the time? Like `Set.empty` can be of type `Set Never` or `Set (Maybe Int)`. &lt;https://package.elm-lang.org/packages/elm/core/latest/Set&gt;</text>
  </message>
  <message conversation_id="340">
    <ts>2019-02-02T16:18:56.783400</ts>
    <user>Huong</user>
    <text>There's no real use to it, it's mostly a stylistic choice to only have it on signatures that require that constraint</text>
  </message>
  <message conversation_id="340">
    <ts>2019-02-02T16:20:10.783600</ts>
    <user>Saran</user>
    <text>Fair. I accidentally used a non-comparable type when mocking out a module, which is why I asked.</text>
  </message>
  <message conversation_id="341">
    <ts>2019-02-02T18:24:18.784300</ts>
    <user>Margie</user>
    <text>Is there a way to Benchmark elm code? </text>
  </message>
  <message conversation_id="341">
    <ts>2019-02-02T18:31:38.787300</ts>
    <user>Margie</user>
    <text>You might want to check my approach with used on “change” for a select. It’s on github/rebelwarrior don’t have a link as I’m on mobile it’s the elm-doc-builder repo the file drop down builder. </text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T18:44:34.787600</ts>
    <user>Velia</user>
    <text>There is this:
&lt;https://package.elm-lang.org/packages/elm-explorations/benchmark/latest/&gt;</text>
  </message>
  <message conversation_id="341">
    <ts>2019-02-02T20:10:28.789100</ts>
    <user>Margie</user>
    <text>Thank you, I’ve been trying to use it. The examples seem to be old and I haven’t been able to make it work. Have you used it successfully?</text>
  </message>
  <message conversation_id="343">
    <ts>2019-02-02T21:05:38.790200</ts>
    <user>Cherryl</user>
    <text>Does anyone have that website handy for searching Elm packages by type? The eq. to Hoogle?</text>
  </message>
  <message conversation_id="343">
    <ts>2019-02-02T21:06:46.790500</ts>
    <user>Cherryl</user>
    <text>Ah, found it. :slightly_smiling_face: &lt;https://klaftertief.github.io/elm-search/&gt; it’s linked on the package site, doh</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:00:56.792000</ts>
    <user>Leoma</user>
    <text>I have an error “the function cannot handle the argument …” …
Argument is Foo A B
but the function expects
Foo a b.

This is strange to me, a function that expects a `Foo a b ` can accept a `Foo A B`, no?

I have a feeling the error message is misleading. Has anyone seen this?</text>
  </message>
  <message conversation_id="341">
    <ts>2019-02-02T23:04:45.793400</ts>
    <user>Margie</user>
    <text>Was able to get it running by using Benchmark Runner but the documentation wasn’t too helpful. </text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:11:21.794800</ts>
    <user>Horace</user>
    <text>&lt;@Leoma&gt; can you show the code? lowercase in type definition says it can accept any type of arguments but it can be false depends on you function body</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:11:55.795400</ts>
    <user>Horace</user>
    <text>for example if you using `A` in place of `a` argument - it definitely can’t be any type, but only `A`.</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:12:33.796000</ts>
    <user>Leoma</user>
    <text>I can’t. Too much. I don’t have an SSCCE.</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:13:12.797300</ts>
    <user>Leoma</user>
    <text>But the type variables tell me this message doesn’t make sense. I should be looking elsewhere. I thought someone might have seen similar.</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:13:18.797500</ts>
    <user>Horace</user>
    <text>So just error maybe?</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:14:59.799300</ts>
    <user>Leoma</user>
    <text>Looks like loads of code I’ve written over the past 6 months based on a convention i use. But this time it fails.</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:16:20.799500</ts>
    <user>Horace</user>
    <text>So it’s really not possible to say anything if you even don’t want to post error from compiler</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:24:46.800700</ts>
    <user>Leoma</user>
    <text>Oh sorry! Ya.. I’ll post the error shortly. Away from desk.</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-02T23:38:36.800900</ts>
    <user>Horace</user>
    <text>:thumbsup:</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T00:54:30.801500</ts>
    <user>Leoma</user>
    <text>```
TYPE MISMATCH
This function cannot handle the argument sent through the (|&amp;gt;) pipe:
...
The argument is:

    ComponentResult.ComponentResult
        BergView.Model
        BergView.Msg
        BergView.ExternalMsg
        err

But (|&amp;gt;) is piping it a function that expects:

    ComponentResult.ComponentResult BergView.Model msg externalMsg err
```</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T00:54:46.801900</ts>
    <user>Leoma</user>
    <text>So… the function expects something more general?! How is that a problem?</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T00:55:57.802600</ts>
    <user>Leoma</user>
    <text>I mean, it’s most likely I have an issue with my code …. but this error message doesn’t seem helpful, does it?</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T01:14:49.802700</ts>
    <user>Sharon</user>
    <text>I'll be there this morning. (Sorry for the late notice :P)</text>
  </message>
  <message conversation_id="342">
    <ts>2019-02-03T04:15:55.803800</ts>
    <user>Huong</user>
    <text>If could be that `msg` and `externalMsg` are constrained in that context</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T08:49:03.812100</ts>
    <user>Nana</user>
    <text>&lt;@Leoma&gt; hmm yeah I've seen that too. I was using a function that wanted a "toString" function as an argument, but since my data already was a list of strings, I just passed `identity`
it complained that `identity` was `a -&amp;gt; a`, while it should be `String -&amp;gt; String`
turns out there was an error somewhere else, but somehow it got confused</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T11:52:49.812500</ts>
    <user>Ema</user>
    <text>Thanks I will take a look. I got it working with the Json.Extra package but I'd be interested in other approaches</text>
  </message>
  <message conversation_id="345">
    <ts>2019-02-03T13:13:04.813200</ts>
    <user>Shelli</user>
    <text>is there V.19 in the wild with support for Effect Managers?</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:39:16.813500</ts>
    <user>Mozella</user>
    <text>wierd type error happening for me</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:39:20.813700</ts>
    <user>Mozella</user>
    <text>```
The 1st argument to `sandbox` is not what I expect:

31| main = Browser.sandbox { init = startingStatus, update = update, view = view }
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This argument is a record of type:

    { init : Model, update : Model -&amp;gt; Model, view : Model -&amp;gt; Html Model }

But `sandbox` needs the 1st argument to be:

    { init : Model, update : Model -&amp;gt; Model, view : Model -&amp;gt; Html Model }
```</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:39:55.814000</ts>
    <user>Mozella</user>
    <text>None</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:40:03.814500</ts>
    <user>Mozella</user>
    <text>here is the full file</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:40:56.815100</ts>
    <user>Huong</user>
    <text>If you only want Html, you can do `main = p [] [ text (DependecyGraph.toString g) ]` - no need to set up a dummy program</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:41:13.815800</ts>
    <user>Mozella</user>
    <text>im building from a dummy program to areal one</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:41:18.816100</ts>
    <user>Ashton</user>
    <text>The type signature for `update` looks off. Tho, I dont know why the compiler doesnt catch that.</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:41:25.816600</ts>
    <user>Ashton</user>
    <text>Should be `Msg -&amp;gt; Model -&amp;gt; Model`, not just `Model -&amp;gt; Model`</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:41:29.817000</ts>
    <user>Ashton</user>
    <text>(right?)</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:41:44.817300</ts>
    <user>Huong</user>
    <text>Ah, right, indeed</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:42:06.817600</ts>
    <user>Mozella</user>
    <text>Yep that fixes it</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:42:15.818000</ts>
    <user>Mozella</user>
    <text>its still an obtuse compiler error though</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:43:23.818700</ts>
    <user>Ashton</user>
    <text>Yeah, thats a weird one.</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T13:43:28.818900</ts>
    <user>Huong</user>
    <text>Yeah, I'd go ahead and log it in the error message catalog (&lt;https://github.com/elm/error-message-catalog&gt;)</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T14:08:25.819300</ts>
    <user>Nana</user>
    <text>&lt;@Ashton&gt; it also says `view : Model -&amp;gt; Html Model`</text>
  </message>
  <message conversation_id="346">
    <ts>2019-02-03T14:09:38.820200</ts>
    <user>Nana</user>
    <text>which I guess would actually work together with `update : Model -&amp;gt; Model` :stuck_out_tongue:</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T14:17:54.822500</ts>
    <user>Ashton</user>
    <text>Huh, yeah. I recall some funny type signature stuff leading to some confusing error messages before. One time we had a confusing error message, because none of us could see that for `f : a -&amp;gt; b`, one possible value for `b` is `c -&amp;gt; d -&amp;gt; e -&amp;gt; f`, which means that `a -&amp;gt; c -&amp;gt; d -&amp;gt; e -&amp;gt; f` is a kind of `a -&amp;gt; b`.</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T14:21:52.823700</ts>
    <user>Nana</user>
    <text>tried making an app with `view : Model -&amp;gt; Html Model` :stuck_out_tongue:
&lt;https://ellie-app.com/4D8KssZknm9a1&gt;</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T14:22:32.824300</ts>
    <user>Nana</user>
    <text>turned out update became `update : Model -&amp;gt; Model -&amp;gt; Model` though</text>
  </message>
  <message conversation_id="347">
    <ts>2019-02-03T15:24:50.824800</ts>
    <user>Desire</user>
    <text>so I guess we missed us, I at least talked to a follow elm user at one point</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:42:25.826400</ts>
    <user>Garnet</user>
    <text>Hrm. I used ```elm install elm-community/list-extra``` and it installed. Now I'm trying to install ```elm-lang/lazy``` and it goes</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:42:33.826500</ts>
    <user>Garnet</user>
    <text>None</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:44:05.827100</ts>
    <user>Virgie</user>
    <text>note the version, it' s 2.0.0, but list-extra is at 8.1.0 (maybe higher)</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:44:20.827500</ts>
    <user>Virgie</user>
    <text>I think you can fix it by putting the correct (latest) version in your elm.json</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:44:42.827800</ts>
    <user>Garnet</user>
    <text>It is, amusingly</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:45:08.828000</ts>
    <user>Garnet</user>
    <text>None</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:45:36.828500</ts>
    <user>Garnet</user>
    <text>elm-lang/lazy is at 2.0.0 though</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:47:41.828700</ts>
    <user>Garnet</user>
    <text>Guess lazy won't work anymore then</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:48:10.828900</ts>
    <user>Virgie</user>
    <text>ow, right it doesn' t</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:48:16.829100</ts>
    <user>Virgie</user>
    <text>at least, in 0.19</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:49:02.830100</ts>
    <user>Garnet</user>
    <text>Is HamT array still a thing?</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:49:12.830300</ts>
    <user>Virgie</user>
    <text>it was removed basically for simplicity; you can often use thunks (so `\_ -&amp;gt; loadsOfWork` ) to prevent expensive computations when they are not used</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:49:22.830600</ts>
    <user>Virgie</user>
    <text>HAMT is now the core `Array`</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:50:03.831400</ts>
    <user>Virgie</user>
    <text>the other thing that lazy did was memoization (so, requesting an answer twice would only compute it once, then store it) and that is not possible implicitly any more</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:50:18.831600</ts>
    <user>Garnet</user>
    <text>Hm, shame ^^</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:50:34.832000</ts>
    <user>Garnet</user>
    <text>And okay, benchmark still a thing? The git repo seems to suggest it's only 0.18</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:50:47.832300</ts>
    <user>Virgie</user>
    <text>it moved to `elm-explorations/benchmark`</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:51:06.832500</ts>
    <user>Garnet</user>
    <text>Ah ^^ Thanks</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:53:33.833600</ts>
    <user>Nana</user>
    <text>&lt;@Virgie&gt; oh so Elm used to have built-in memoization? :open_mouth: hope it will come back</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:55:34.835500</ts>
    <user>Virgie</user>
    <text>it sounds useful, but using it well was/is hard. If I remember correctly the number of practical use cases wasn't that large and it required some js tricks to make it work. Taking into account future garbage collection it was deemed not useful enough</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:55:53.835600</ts>
    <user>Garnet</user>
    <text>Sorry for so many questions, but "import Time" fails? Says it's part of core though, so I'm confused.</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:56:14.835900</ts>
    <user>Virgie</user>
    <text>it's a separate package now</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:56:22.836100</ts>
    <user>Garnet</user>
    <text>Hm</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:56:27.836300</ts>
    <user>Virgie</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/time/latest/&gt;</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:56:47.836600</ts>
    <user>Virgie</user>
    <text>also the API has changed quite a bit</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:57:09.837000</ts>
    <user>Garnet</user>
    <text>I see, how would I get that info? &lt;https://package.elm-lang.org/packages/elm-lang/core/5.1.1/&gt; seems to still list Time</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:58:12.837400</ts>
    <user>Virgie</user>
    <text>right, so `elm-lang` moved to`elm` , so it's `elm/core`  now</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T16:58:48.837600</ts>
    <user>Garnet</user>
    <text>Oh, I see</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:08:54.838200</ts>
    <user>Garnet</user>
    <text>Hm, old native Canvas seemed a bit more powerful. Seems I might have to mod this a bit to draw individual pixels well</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:12:22.838700</ts>
    <user>Garnet</user>
    <text>Or not sure how good making a single rect for each pixel would be</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:12:34.839000</ts>
    <user>Virgie</user>
    <text>I think there are canvas custom elements available too</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:12:47.839200</ts>
    <user>Garnet</user>
    <text>custom elements?</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:13:17.839700</ts>
    <user>Virgie</user>
    <text>yea, in current browsers (last couple of years) you can create your own html tags/elements from JS</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:13:40.840400</ts>
    <user>Virgie</user>
    <text>and these can be instantiated from elm, and given input via attributes</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:13:51.840800</ts>
    <user>Virgie</user>
    <text>which the element (via some js) can turn into whatever</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:14:07.841100</ts>
    <user>Garnet</user>
    <text>Hm, well the normal Canvas in JS alraedy has pixel-setting functions, but seems elm doesn't expose those</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:14:17.841300</ts>
    <user>Ashton</user>
    <text>Did you solve this? I think youre getting your error is because `elm-lang/lazy` is not upgraded to Elm 0.19</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:15:06.842600</ts>
    <user>Virgie</user>
    <text>exactly, but rather than hacking the elm api, you can use a custom element and some JS to keep the image generation in pure elm, but the precise rendering logic (setting pixels etc) in JS. "hacking" the elm api to draw individual pixels will likely be awkward</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:15:07.842800</ts>
    <user>Garnet</user>
    <text>I might just try with rects and see if its okay</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:15:33.843400</ts>
    <user>Ashton</user>
    <text>Funny that you guys are talking about this, I just did a ports experiment for canvas: &lt;https://github.com/Chadtech/elm-canvas-ports-experiment&gt;</text>
  </message>
  <message conversation_id="344">
    <ts>2019-02-03T17:16:27.844300</ts>
    <user>Ashton</user>
    <text>My project seems to work. But, also joakin has a great package out there Canvas that doesnt have any ports at all called joakin/elm-canvas</text>
  </message>
  <message conversation_id="348">
    <ts>2019-02-03T22:13:03.847200</ts>
    <user>Jana</user>
    <text>Just looked at `joakin/elm-canvas` and  the examples; &lt;https://chimeces.com/elm-canvas/&gt;

`Fabulous!!`</text>
  </message>
  <message conversation_id="349">
    <ts>2019-02-04T01:06:59.849800</ts>
    <user>Lizabeth</user>
    <text>Does anyone have experience with a `doctest` equivalent for elm? Where you can write unit tests as comments above the function where it’s implemented.

Had a quick look around and &lt;https://github.com/stoeffel/elm-verify-examples&gt; seemed like the nicest implementation, is there any others that I should consider?</text>
  </message>
  <message conversation_id="349">
    <ts>2019-02-04T01:09:51.850200</ts>
    <user>Clarisa</user>
    <text>I am based in egypt and when visiting &lt;https://guide.elm-lang.org/install.html&gt; the browser states it cannot reach that site</text>
  </message>
  <message conversation_id="349">
    <ts>2019-02-04T01:46:37.853600</ts>
    <user>Eloise</user>
    <text>This is a bit of a stretch, but here goes: I remember seeing a post in &lt;#C0LUAGWRK|jobs&gt; by a Berlin-based company (as far as I remember they were a web agency). They had open-sourced their employee handbook, and it looked amazing. However, I can’t remember the name of the company, and I really want to look at their employee handbook as inspiration…

Anybody who works for this company, or by chance know which company I’m talking about? Any help is greatly appreciated :pray:</text>
  </message>
  <message conversation_id="350">
    <ts>2019-02-04T02:03:41.853900</ts>
    <user>Ruthann</user>
    <text>have you looked at the pinned items on that channel?</text>
  </message>
  <message conversation_id="350">
    <ts>2019-02-04T02:03:48.854100</ts>
    <user>Ruthann</user>
    <text>&lt;@Eloise&gt;</text>
  </message>
  <message conversation_id="350">
    <ts>2019-02-04T02:04:30.854500</ts>
    <user>Eloise</user>
    <text>&lt;@Ruthann&gt; I have not, but will immediately. Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="350">
    <ts>2019-02-04T02:05:29.855500</ts>
    <user>Ruthann</user>
    <text>because slack has archived them, it will appear as you can’t see the whole msg, but this is not true, if you go to try and delete that msg, you’ll get the whole msg with a confirmation to delete. this is a way to see the whole msg, of course don’t delete it</text>
  </message>
  <message conversation_id="350">
    <ts>2019-02-04T02:07:04.856000</ts>
    <user>Eloise</user>
    <text>Hah, that’s a nice hack :smile: I found it. Thanks a lot!</text>
  </message>
  <message conversation_id="350">
    <ts>2019-02-04T02:13:41.856500</ts>
    <user>Eloise</user>
    <text>(in case anyone wonder, this is it: &lt;https://diesdas.digital/wiki/about-this-wiki&gt;)</text>
  </message>
  <message conversation_id="351">
    <ts>2019-02-04T03:36:49.859700</ts>
    <user>Hwa</user>
    <text>I’m working on a spa. There’s a page with all kinds of filters, and I want to add those filter values as query parameters to the url, but without re-initializing the page, because that would trigger some api requests that are only needed once on init. What would be a good way to do that?</text>
  </message>
  <message conversation_id="351">
    <ts>2019-02-04T03:57:11.860100</ts>
    <user>Nana</user>
    <text>&lt;@Hwa&gt; `Browser.Navigation.replaceUrl` should do that for you</text>
  </message>
  <message conversation_id="351">
    <ts>2019-02-04T03:57:43.860700</ts>
    <user>Hwa</user>
    <text>No, that re-initializes the page through the router.</text>
  </message>
  <message conversation_id="351">
    <ts>2019-02-04T03:58:43.861300</ts>
    <user>Nana</user>
    <text>&lt;@Hwa&gt; hmm, that shouldn't be necessary though I think</text>
  </message>
  <message conversation_id="351">
    <ts>2019-02-04T03:59:22.862000</ts>
    <user>Nana</user>
    <text>I think that depends on how you've written your code</text>
  </message>
  <message conversation_id="351">
    <ts>2019-02-04T03:59:39.862600</ts>
    <user>Simon</user>
    <text>Wondering if your router can be aware that no page transition is needed and send the path update messages in via a non init mechanism</text>
  </message>
  <message conversation_id="351">
    <ts>2019-02-04T04:10:34.864800</ts>
    <user>Hwa</user>
    <text>I wouldn’t know how. `replaceUrl` and `pushUrl` both cause the `onUrlChange` message set in `Browser.application`, and there’s only a `Url` attached to that.</text>
  </message>
  <message conversation_id="351">
    <ts>2019-02-04T04:12:55.866000</ts>
    <user>Hwa</user>
    <text>I could save the Url to the model, and on url change check whether `.path` stays the same. That would catch any changes to the query parameters.</text>
  </message>
  <message conversation_id="351">
    <ts>2019-02-04T04:29:03.868800</ts>
    <user>Simon</user>
    <text>Just because you have a new url doesn’t mean you have to have a new model, per Simons point. Your router needn’t start by tossing the old model if the path should show the same page. Then you can pass a message into that pages update to reflect the query params in question </text>
  </message>
  <message conversation_id="352">
    <ts>2019-02-04T09:36:35.874300</ts>
    <user>Agustin</user>
    <text>Some people have reported issues with accessing Elm’s sites from countries where Telegram being blocked, (e.g Russia). Elm is hosted on AWS within the same ip range, and theres not a lot that can be done about that!

The usual advice is to use a VPN :slightly_smiling_face:</text>
  </message>
  <message conversation_id="353">
    <ts>2019-02-04T13:47:04.876000</ts>
    <user>Garnet</user>
    <text>I think it is due to that, yeah. I just dropped it.</text>
  </message>
  <message conversation_id="354">
    <ts>2019-02-04T14:42:14.877000</ts>
    <user>Sofia</user>
    <text>How can I find the structure of the JSON sent for `onMouseMove`? The documentation just lists it as a Decoder... &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events#onMouseMove&gt;</text>
  </message>
  <message conversation_id="354">
    <ts>2019-02-04T14:44:23.877400</ts>
    <user>Nana</user>
    <text>&lt;@Sofia&gt; put this in your console :wink: `addEventListener("mousemove", console.log)`</text>
  </message>
  <message conversation_id="354">
    <ts>2019-02-04T14:44:44.877800</ts>
    <user>Sofia</user>
    <text>Ah -- I just wasn't positive it used the default event JSON, or if it was modifying it.</text>
  </message>
  <message conversation_id="354">
    <ts>2019-02-04T14:45:29.878800</ts>
    <user>Sofia</user>
    <text>And I can't figure out how to print the raw JSON from inside Elm. `Debug.log` only shows `&amp;lt;internals&amp;gt;` when logging a `Decode.value` :disappointed:</text>
  </message>
  <message conversation_id="354">
    <ts>2019-02-04T15:24:40.881300</ts>
    <user>Huong</user>
    <text>Yeah, it's tricky because it also isn't serialisable (cyclic structure). It's just the raw event tho, so mdn can help figure out what to use and what to stay away from :)</text>
  </message>
  <message conversation_id="355">
    <ts>2019-02-04T15:42:46.881700</ts>
    <user>Euna</user>
    <text>how do you guys handle localstorage?</text>
  </message>
  <message conversation_id="355">
    <ts>2019-02-04T15:43:10.882400</ts>
    <user>Euna</user>
    <text>do you pass in a message to the port and dispatch it on subscription recieve</text>
  </message>
  <message conversation_id="355">
    <ts>2019-02-04T15:43:21.882700</ts>
    <user>Euna</user>
    <text>or make different ports per purpose</text>
  </message>
  <message conversation_id="355">
    <ts>2019-02-04T15:43:30.883100</ts>
    <user>Euna</user>
    <text>ie. clear storage, credentials etc</text>
  </message>
  <message conversation_id="355">
    <ts>2019-02-04T15:50:02.883600</ts>
    <user>Randee</user>
    <text>&lt;@Euna&gt; one of the examples here is localstorage &lt;https://github.com/MattCheely/elm-port-examples&gt;</text>
  </message>
  <message conversation_id="355">
    <ts>2019-02-04T15:51:21.884700</ts>
    <user>Randee</user>
    <text>also this video I believe describes the recommended way to design ports &lt;https://www.youtube.com/watch?v=P3pL85n9_5s&gt;  which is to say don’t make specific ports for every function/interaction in a library</text>
  </message>
  <message conversation_id="355">
    <ts>2019-02-04T15:51:24.884900</ts>
    <user>Euna</user>
    <text>ty ty</text>
  </message>
  <message conversation_id="355">
    <ts>2019-02-04T19:53:52.887300</ts>
    <user>Erlene</user>
    <text>&lt;@Euna&gt; with a port.</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:17:28.888900</ts>
    <user>Danika</user>
    <text>tl;dw for that video? I’ve seen its idiomatic to have basically one port in and one out, but that feels odd to me. </text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:19:43.889200</ts>
    <user>Lynne</user>
    <text>I think it was more about changing the mindset</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:21:00.890300</ts>
    <user>Lynne</user>
    <text>I don't think it really matters if you have one port for incoming and one port for outgoing data. Depending on your requirements you can have plenty of them. What's more important is to stop treating JS part as if it is an HTTP backend</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:21:23.890700</ts>
    <user>Lynne</user>
    <text>That's my conclusion at least :slightly_smiling_face:</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:23:24.892100</ts>
    <user>Lynne</user>
    <text>But since most of the time I am sending values to JS and get values from JS having different ports is just a way to tag messages. Which can also be done with type at Elm side and strings at JS side</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:24:30.892700</ts>
    <user>Earlean</user>
    <text>&lt;@Danika&gt; really it's "one port for each thing you want to communicate with"</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:25:35.893800</ts>
    <user>Earlean</user>
    <text>imagine you have a server and you've got 10 connections to it and you're sending messages to it over those 10 connections, it's going to be hard to send those messages in any kind of order</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:26:34.894900</ts>
    <user>Earlean</user>
    <text>with 1 connection you can send a batch of messages and then wait for a reply</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:27:40.896000</ts>
    <user>Danika</user>
    <text>Ah yes that’s reassuring </text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:27:42.896100</ts>
    <user>Earlean</user>
    <text>but if you have 20 servers you need to have 20 connections and you're generally not going to expect to be able to maintain an order in the messaging between all 20 servers</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:28:54.896900</ts>
    <user>Earlean</user>
    <text>The way Elm ports are designed is the 'actor model', it's what Erlang does.</text>
  </message>
  <message conversation_id="356">
    <ts>2019-02-05T03:29:39.897400</ts>
    <user>Earlean</user>
    <text>it's asynchronous communication between multiple processes.</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:26:05.900500</ts>
    <user>Saran</user>
    <text>how far are mutually recursive values/functions banned in 0.19? I have values wrapped in `\() -&amp;gt; ...` lambdas, but that doesn't seem to help</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:27:58.901300</ts>
    <user>Virgie</user>
    <text>the obvious case `x = x` is always banned, and more intricate cases are only allowed in top-level definitions</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:28:11.901600</ts>
    <user>Virgie</user>
    <text>so inside let-bindings there are further checks</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:30:56.901900</ts>
    <user>Saran</user>
    <text>`Elm will allow recursive definitions as long as there is at least one lambda before you get back to yourself.` but I have that</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:31:32.902700</ts>
    <user>Saran</user>
    <text>like, `let a = (\() -&amp;gt; b); b = (\() -&amp;gt; a) in a` is banned?</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:31:47.903000</ts>
    <user>Teddy</user>
    <text>iirc, there are some exceptions to that rule with `let` nesting.</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:32:00.903500</ts>
    <user>Teddy</user>
    <text>I don't remember why, I just know I've seen it happen.</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:32:13.903900</ts>
    <user>Dede</user>
    <text>When I was playing with this awhile back it seemed inconsistent.  I suspect the compiler is not entirely consistent on this yet.</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:32:45.904200</ts>
    <user>Saran</user>
    <text>switching it over to `a () = b` works</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:33:08.904700</ts>
    <user>Saran</user>
    <text>but only if both are of that form, if either is a lambda, it fails</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:42:13.906600</ts>
    <user>Virgie</user>
    <text>the underlying reason is future garbage collection. top-level recursion is fine because these definitions are allocated once and are kept around, but when recursive definitions are defined in let-blocks then they have to be garbage-collected when the function returns. it is hard to correctly free a recursive definition</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:45:02.906900</ts>
    <user>Saran</user>
    <text>what are my options then? y combinator?</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:45:08.907100</ts>
    <user>Saran</user>
    <text>giving up?</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:45:24.907300</ts>
    <user>Saran</user>
    <text>:confused:</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:45:43.907600</ts>
    <user>Danika</user>
    <text>Why would you need this?</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:47:38.908400</ts>
    <user>Saran</user>
    <text>I'm building an interpreter, so I need the environment to contain a reference to the function I'm executing, so I can call it recursively</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:49:10.908800</ts>
    <user>Teddy</user>
    <text>I'd go the y combinator route myself.</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:49:35.909300</ts>
    <user>Saran</user>
    <text>how would you express mutual recursion in terms of the y combinator in elm?</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:49:50.909500</ts>
    <user>Teddy</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:49:55.909700</ts>
    <user>Saran</user>
    <text>:tada:</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:50:21.910100</ts>
    <user>Saran</user>
    <text>if I had higher-kinded types I could write a type class for it</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T10:54:47.911100</ts>
    <user>Saran</user>
    <text>why do I keep hurting myself like this? :joy::sob::joy::sob::joy:</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T11:05:39.911400</ts>
    <user>Saran</user>
    <text>I broke it
```
This `inlineFunctions` value is a:

    Expr -&amp;gt; Expr

But `map` needs the 1st argument to be:

    Expr -&amp;gt; b
```</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T11:20:29.912200</ts>
    <user>Dede</user>
    <text>&lt;@Saran&gt;if you're still looking for feedback, could you put a toy example of your recursion problem into Ellie?</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T11:21:52.913100</ts>
    <user>Saran</user>
    <text>&lt;@Dede&gt; I'm trying to get it to a state where I can show it to other people, will put it on github</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T11:22:01.913300</ts>
    <user>Dede</user>
    <text>Gotcha.</text>
  </message>
  <message conversation_id="358">
    <ts>2019-02-05T11:25:49.913900</ts>
    <user>Danika</user>
    <text>Oh that’s awesome, i’d love to see what you’re working on at some point</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T11:28:57.915000</ts>
    <user>Danika</user>
    <text>Once I finish this paper I’m working on I’m going to start implementing a new language and was going to use elm as the parser</text>
  </message>
  <message conversation_id="359">
    <ts>2019-02-05T11:31:55.915700</ts>
    <user>Niesha</user>
    <text>That was usually the Haskell Hello World - implement your own language.</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T11:44:57.916000</ts>
    <user>Saran</user>
    <text>what are you going to use that language for?</text>
  </message>
  <message conversation_id="358">
    <ts>2019-02-05T11:55:13.916300</ts>
    <user>Danika</user>
    <text>Music programming / live coding :slightly_smiling_face:</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T11:57:42.916700</ts>
    <user>Saran</user>
    <text>cool, what kind of type system are you going to use?</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T12:02:53.917400</ts>
    <user>Danika</user>
    <text>weak/implicit/dynamic. You typically don’t want to be worrying about types as a musician or performer</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T12:04:30.917600</ts>
    <user>Cammy</user>
    <text>Please keep me in the loop about this. I’m a big fan of multimedia languages.</text>
  </message>
  <message conversation_id="357">
    <ts>2019-02-05T12:07:36.917800</ts>
    <user>Danika</user>
    <text>Well do! The audio graph things I’ve been working on in elm are part of the ground work i need to do first :slightly_smiling_face: My research is all about music programming languages ^^</text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T14:30:19.918800</ts>
    <user>Saran</user>
    <text>solved it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="361">
    <ts>2019-02-05T16:02:53.922700</ts>
    <user>Bebe</user>
    <text>Are there any JSON encoding benchmarks? Couldn’t find anything. Wondering for the special case where you need to encode lots of data to pass to JS (either vía ports or web component prop). It is probably a very niche use case, still thinking about doing some tests myself if I can’t find anything</text>
  </message>
  <message conversation_id="362">
    <ts>2019-02-05T16:22:55.924300</ts>
    <user>Ammie</user>
    <text>Hi, is there a way to use Elm to generate js code, not just for the front end, for node for example? Thanks</text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:30:55.926100</ts>
    <user>Danika</user>
    <text>Not really. You could try using `Process.worker` and try running the js bundle in node and see what happens </text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:32:48.926900</ts>
    <user>Jin</user>
    <text>You can run a headless `Platform.worker` program in Node and communicate via ports.
&lt;https://package.elm-lang.org/packages/elm/core/latest/Platform#worker&gt;</text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:33:00.927300</ts>
    <user>Danika</user>
    <text>Oh it does actually work in node?! </text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:33:13.927700</ts>
    <user>Danika</user>
    <text>I wasn’t sure how coupled the elm runtime was to the browser </text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:34:12.928500</ts>
    <user>Jin</user>
    <text>There is no view there, no DOM dependency. People use it to build CLIs.</text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:34:57.928600</ts>
    <user>Huong</user>
    <text>`elm-test` is a good example of a place where most people use it without realizing</text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:35:29.929000</ts>
    <user>Jin</user>
    <text>Like &lt;https://github.com/stil4m/elm-analyse&gt; or &lt;https://github.com/zwilias/elm-xref&gt;</text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:37:14.929700</ts>
    <user>Cammy</user>
    <text>Elm/http becomes an issue, tho. </text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:48:29.929900</ts>
    <user>Danika</user>
    <text>Yo that's awesome</text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:51:35.930700</ts>
    <user>Ammie</user>
    <text>&lt;@Jin&gt; Good point, it looks like Analyser.elm is using the worker way. I'll look into that. Thanks.</text>
  </message>
  <message conversation_id="360">
    <ts>2019-02-05T16:53:11.930900</ts>
    <user>Danika</user>
    <text>This has changed everything! :smile:</text>
  </message>
  <message conversation_id="363">
    <ts>2019-02-06T01:58:48.932700</ts>
    <user>Isabel</user>
    <text>Hello :wave: 
I'm wondering if there's a way to search for packages that are 0.19 compatible on &lt;https://package.elm-lang.org&gt;? I've been working a bit with posix and dates and keep getting 0.18 packages.</text>
  </message>
  <message conversation_id="363">
    <ts>2019-02-06T02:02:06.933400</ts>
    <user>Earlean</user>
    <text>&lt;@Isabel&gt; if you search on &lt;https://package.elm-lang.org&gt; you'll only get packages that are compatible with 0.19</text>
  </message>
  <message conversation_id="363">
    <ts>2019-02-06T02:03:08.934100</ts>
    <user>Earlean</user>
    <text>the 0.18 packages are hidden from the search but can still be accessed and found via google etc.</text>
  </message>
  <message conversation_id="363">
    <ts>2019-02-06T03:06:02.935800</ts>
    <user>Isabel</user>
    <text>Thanks &lt;@Earlean&gt;, i must have been confused with my Google searching</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:24:32.937700</ts>
    <user>Nana</user>
    <text>Does Node Elm have events/update cycle? Or is it only like a "single run"?</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:26:40.937800</ts>
    <user>Liza</user>
    <text>&lt;https://dmy.github.io/elm-0.18-packages/&gt; isn’t ?</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:32:04.939400</ts>
    <user>Danika</user>
    <text>Its not “Node Elm”, its just a Platform.worker which is just an Elm app with no view function</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:32:19.940200</ts>
    <user>Danika</user>
    <text>So yeah you get the elm runtime with msgs/update</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:32:32.940800</ts>
    <user>Liza</user>
    <text>ports and subs too</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:32:55.941400</ts>
    <user>Huong</user>
    <text>It can - you just don't get messages from views (because there are none). Other than that, you still have ports, subs and the other builtin effects like Time or random, etc</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:33:24.942100</ts>
    <user>Nana</user>
    <text>oh right, cool :open_mouth: so I guess you would just go through Node with ports for everything?</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:33:45.942900</ts>
    <user>Nana</user>
    <text>and Node can talk to everyhing :smile:</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:35:08.944500</ts>
    <user>Huong</user>
    <text>Pretty much, though it really depends on what you need to do. To be clear, Elm is primarily made for the browser/web, but (through `worker`) it _can_ be used in different situations, too. It's just not as smooth an experience.</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:36:06.945500</ts>
    <user>Danika</user>
    <text>My query about how tied to the browser the elm runtime is was because I thought the whole thing ran in a requestanimationframe</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:37:25.946600</ts>
    <user>Nana</user>
    <text>yeah, I'm probably not going to try making a server with it :stuck_out_tongue:</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:38:49.947600</ts>
    <user>Liza</user>
    <text>it depends on how much do you need from server, if there is more logic than api than it can easy done, problem - is when you need lot of ports..</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:39:12.948100</ts>
    <user>Liza</user>
    <text>then “elm-server” become 90% ports and 10% elm</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:44:33.950500</ts>
    <user>Liza</user>
    <text>&lt;https://github.com/justgook/p2pElm&gt; not best example - but here is elm used as worker (server in browser) + express app for communication, and elm app for client, so you can start server in browser, then by using express-app find other players, and connect between using webRTC (all connects to one elm.worker)</text>
  </message>
  <message conversation_id="365">
    <ts>2019-02-06T03:46:10.950800</ts>
    <user>Danika</user>
    <text>W-what </text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:57:31.951300</ts>
    <user>Liza</user>
    <text>&lt;https://justgook.github.io/p2pElm/#/&gt; - have no clue - does it work today…</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T03:58:35.951800</ts>
    <user>Liza</user>
    <text>From chrome same browser can connect two tabs..</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T04:00:04.952700</ts>
    <user>Earlean</user>
    <text>Isn't?</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T04:00:39.953400</ts>
    <user>Liza</user>
    <text>also there is zero images, forgot to mention using &lt;https://developer.mozilla.org/en-US/docs/Web/API/EventSource&gt; to get handshake from clients (no WS / longpooling)</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T04:01:39.953800</ts>
    <user>Earlean</user>
    <text>Ah, the question I answered was deleted</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T04:01:41.954000</ts>
    <user>Liza</user>
    <text>i mean - each time when you search for some 0.18 package it suggest you to jump to this link and you can find all 0.18 packages here..</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T04:02:28.954900</ts>
    <user>Renda</user>
    <text>Neato. Does switching browser tabs stop P2P from working if you are the "server" ?</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T04:05:41.955100</ts>
    <user>Liza</user>
    <text>have no clue..</text>
  </message>
  <message conversation_id="364">
    <ts>2019-02-06T04:06:11.955700</ts>
    <user>Liza</user>
    <text>that was just PoC - that i can create p2p communication using webrtc and elm</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:19:48.957300</ts>
    <user>Else</user>
    <text>Hello, everyone! Couldn't you point out the best way to send and receive WebSockets in Elm? I know there is an official package but it's currently outdated</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:21:13.958700</ts>
    <user>Antonette</user>
    <text>&lt;@Else&gt; there's bad news, and kinda good news on that front: the bad news is that there isn't in pure elm anymore. The good news is that you can totally do it with JavaScript and use ports to communicate with your elm app.</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:22:01.959700</ts>
    <user>Desire</user>
    <text>should we update &lt;https://en.wikipedia.org/wiki/Elm_(programming_language)&gt; a bit? kinda feels weird that tea is not referenced</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:22:26.960300</ts>
    <user>Antonette</user>
    <text>Tea?</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:22:27.960400</ts>
    <user>Danika</user>
    <text>Even calling it a DSL seems off imo </text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:22:31.960600</ts>
    <user>Danika</user>
    <text>The elm architecture </text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:22:36.960800</ts>
    <user>Antonette</user>
    <text>Oh. TEA.</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:22:48.961100</ts>
    <user>Desire</user>
    <text>sorry :smile:</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:22:52.961300</ts>
    <user>Antonette</user>
    <text>:wink:</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:23:09.961700</ts>
    <user>Antonette</user>
    <text>I'd say it deserves an update indeed.</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:23:41.961800</ts>
    <user>Else</user>
    <text>Thanks. Anywhere I can look up how to do it with js?</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:25:14.962200</ts>
    <user>Antonette</user>
    <text>In pure JS: &lt;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications&gt;</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:25:54.962900</ts>
    <user>Liza</user>
    <text>btw -  for websockets would be nice have `task port` :drevil:</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:27:05.964500</ts>
    <user>Antonette</user>
    <text>The frontend side is not really complicated, the most complicated thing you might have to do is keep the socket alive by sending messages from time to time so it doesn't die (and I recommand keeping this in pure JS because there's not much advantages writing it in Elm).</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:28:29.966900</ts>
    <user>Liza</user>
    <text>websockets stay alive by it self.. problem is that you don’t know when they die..</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:28:32.967100</ts>
    <user>Else</user>
    <text>Haha, yeah definitely only using ports it is possible. Will try to write an article on how to use WS in elm</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:28:59.967800</ts>
    <user>Else</user>
    <text>(If I manage to get it working...)</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:30:56.968900</ts>
    <user>Liza</user>
    <text>&amp;gt; WS in elm

```app.ports.send.subscribe (ws.send)
ws.onmessage(app.ports.receive.send)```</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:31:16.969300</ts>
    <user>Liza</user>
    <text>where `ws` - is your always-live-ws</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:33:54.970500</ts>
    <user>Liza</user>
    <text>&lt;https://github.com/justgook/PrintersWorkshopUI/blob/develop/src/js/Connection.js&gt; - found example - about how to keep WS always live..</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:35:02.971400</ts>
    <user>Else</user>
    <text>Lovely. Will try the examples when I am home</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:37:05.972100</ts>
    <user>Liza</user>
    <text>* that example is 3y old - but i think it is kind of clear how it works (maybe for me - because i wrote it… )</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:38:46.972300</ts>
    <user>Antonette</user>
    <text>:wink:</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:39:08.972400</ts>
    <user>Antonette</user>
    <text>Looks like this is taken care of already :wink:</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:40:07.972800</ts>
    <user>Liza</user>
    <text>cannot find ping example,..</text>
  </message>
  <message conversation_id="366">
    <ts>2019-02-06T04:46:04.974100</ts>
    <user>Liza</user>
    <text>but my examples will be not best - im game dev - and `pings`  for me is also source of data (how long singnals from server is delayed, and how much all stuff must be predicted..)</text>
  </message>
  <message conversation_id="367">
    <ts>2019-02-06T04:46:30.974500</ts>
    <user>Liza</user>
    <text>but not all application running 60fps</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T11:40:51.979100</ts>
    <user>Dorsey</user>
    <text>I'm trying to _proxy_ a union type and it's constructors from one module to another so that consumers of my module don't have to import the 3rd party module (it can stay an indirect dependency), but I'm getting a ```
-- BAD EXPORT ------ /[...]/src/Website.elm

The (..) syntax is for exposing union type constructors. It cannot be used with
a type alias like `TextVariant` though.

6|     , TextVariant(..)
         ^^^^^^^^^^^^^^^
Remove the (..) and you should be fine!
``` The message seems perfectly clear, but is there really no way to do this?</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T11:42:02.979700</ts>
    <user>Dorsey</user>
    <text>The definition of the `TextVariant` is as follows: ```
type alias TextVariant =
    Mark.Style
```</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T11:42:07.980000</ts>
    <user>Danika</user>
    <text>so `type alias TextVariant = SomeUnionType`?</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T11:42:18.980200</ts>
    <user>Huong</user>
    <text>Nope, no can do</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T11:42:18.980300</ts>
    <user>Danika</user>
    <text>Ha, beat me to it</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T11:48:02.981000</ts>
    <user>Dorsey</user>
    <text>Ok, thanks :neutral_face:</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T11:52:09.981200</ts>
    <user>Dorsey</user>
    <text>According to &lt;@Huong&gt; it's not possible: &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1549471338980200&gt; . I wonder if it's a technical limitation or is there some fundamental reason for that?</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T12:04:12.981500</ts>
    <user>Huong</user>
    <text>It's just not something the langauge supports - you can expose an alias, but an alias is just that - another name for an existing thing. Re-exposing imports is supported in some languages, but Elm has chosen not to add that. I don't know if there's a fundamental reason.

Although, perhaps, there is one case where this could get mightily confusing:

let's say I have package X, where I define `type Foo = Foo | Bar`

I now create package Y, where I "reexpose" that `type Foo`.

Now, I publish a new major version of package X, with `type Foo = Foo | Bar | Baz`.

For the sake of argument, let's say I have `"package-x": "1.0.0 &amp;lt;= v &amp;lt; 3.0.0"` in package Y: Now the values exposed by package Y depend on the version of package X you happen to have installed. I'm not sure how that should even show up on the package website :smile:</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T12:04:36.981700</ts>
    <user>Huong</user>
    <text>so, you can only expose an alias, which says nothing about the implementation details of what happens in some other module or even package</text>
  </message>
  <message conversation_id="368">
    <ts>2019-02-06T12:05:45.981900</ts>
    <user>Dorsey</user>
    <text>Thanks &lt;@Huong&gt;. Insightful as always :smile:</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T12:54:48.984000</ts>
    <user>Myung</user>
    <text>My `Url.Parser.fragment` decoder is working, however with a url like `/#foo%20bar` it’s parsing as `foo%20bar`. I’m expecting `foo bar`. How can I decode the uri component? [Http.uriDecode](&lt;https://package.elm-lang.org/packages/evancz/elm-http/latest/Http#uriDecode&gt;) is gone in the new elm/http</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T12:57:24.984700</ts>
    <user>Myung</user>
    <text>I could make a `port` just for the native `decodeURIComponent` but I feel like I’m just doing something wrong</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T12:58:54.986300</ts>
    <user>Bert</user>
    <text>&lt;@Myung&gt; You are looking for `Url.percentDecode`</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T12:59:41.987900</ts>
    <user>Myung</user>
    <text>When I use `Url.Builder.custom` to make the url, `custom Relative [] [] (Just "foo bar")` it automatically encodes the component `/#foo%20bar`</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:00:00.988800</ts>
    <user>Myung</user>
    <text>&lt;@Bert&gt; ooo checking it out, thanks</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:00:38.990000</ts>
    <user>Myung</user>
    <text>interesting, it says to use Url.Parser instead in the docs</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:01:03.991000</ts>
    <user>Myung</user>
    <text>i think Url.Parser.fragment should decode by default… this is maybe an oversight?</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:01:10.991300</ts>
    <user>Myung</user>
    <text>the query parameter decoders automatically do it</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:01:27.991800</ts>
    <user>Bert</user>
    <text>I noticed the same thing with my app a little while ago, and Evan is looking for evidence at this point. So if you know a popular framework that automatically does URI decoding for fragments, feel free to respond in this thread. </text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:02:01.992100</ts>
    <user>Myung</user>
    <text>i don’t use other frameworks</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:02:10.992400</ts>
    <user>Myung</user>
    <text>i think the behavior should be consistent though</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:02:48.993600</ts>
    <user>Myung</user>
    <text>1) Url.Builder automatically encodes the fragment, so 2) I would expect Url.Parser to automatically decode as well</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:03:01.994500</ts>
    <user>Bert</user>
    <text>Yeah. I actually don't know if path sections are decoded or not. </text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:03:12.994800</ts>
    <user>Myung</user>
    <text>and 3) if the query builder/parser already has this behaviour, i think the fragment builder/parser should have the same behavior</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:03:24.995200</ts>
    <user>Myung</user>
    <text>so those are my official responses :smile:</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:20:55.996700</ts>
    <user>Myung</user>
    <text>&lt;@Bert&gt; i lied, `Url.Builder` does not automatically encode</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:21:27.997200</ts>
    <user>Myung</user>
    <text>`Url.Builder.custom Url.Builder.Relative [] [] (Just "foo bar")` yields `"#foo bar"`</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:21:53.997600</ts>
    <user>Myung</user>
    <text>`Url.Builder.custom Url.Builder.Relative [] [] (Just (Url.percentEncode "foo bar"))` yields the intended `"#foo%20bar"`</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:22:11.998100</ts>
    <user>Myung</user>
    <text>so this is okay, albeit a pain in the ass</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:23:07.999000</ts>
    <user>Myung</user>
    <text>can’t imagine why the _url builder_ doesn’t do this for us</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T13:23:27.999500</ts>
    <user>Myung</user>
    <text>but my builder/parser is working now . thank you</text>
  </message>
  <message conversation_id="370">
    <ts>2019-02-06T15:29:30.002100</ts>
    <user>Dorsey</user>
    <text>Is it possible to create a `Url.Parser` that consumes arbitrarily deep paths and return them as a `String`? Like `/a` or `/a/b` or `/a/b/c`. I thought `Url.Parser.custom` will do that, but apparently not.</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:37:24.003500</ts>
    <user>Myung</user>
    <text>&lt;@Dorsey&gt; I imagine you’d do that with something like `&amp;lt;/&amp;gt; string` to match `/a/b/c/*` and then do additional parsing on the total match of `a/b/c*`</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:38:24.004800</ts>
    <user>Myung</user>
    <text>if you want to match a variadic path, you’d have to capture all of the paths  and then handle case for 0, 1, or more</text>
  </message>
  <message conversation_id="370">
    <ts>2019-02-06T15:38:34.005000</ts>
    <user>Dorsey</user>
    <text>:thinking_face: but wouldn't `&amp;lt;/&amp;gt; string` capture only `a`?</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:39:43.005500</ts>
    <user>Myung</user>
    <text>&lt;@Dorsey&gt; ah sure enough, it says it only matches “one segment”</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:41:36.006600</ts>
    <user>Myung</user>
    <text>never tried to do something like this</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:42:03.007800</ts>
    <user>Dorsey</user>
    <text>Yes. I thought to do some magic with `List.foldl`, but I would need `andThen` to carry result of one parser to another.</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:42:06.007900</ts>
    <user>Myung</user>
    <text>i’ll think about it over lunch :green_salad:</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:42:26.008500</ts>
    <user>Myung</user>
    <text>yeah i was thinking about a recursive or folding parser too..</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:42:38.009000</ts>
    <user>Dorsey</user>
    <text>Enjoy your lunch. I just ate supper :stuck_out_tongue:</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:42:45.009200</ts>
    <user>Myung</user>
    <text>i’m thinking the solution will surprise us</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:43:10.009800</ts>
    <user>Myung</user>
    <text>it _should_ be simple</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:43:19.010100</ts>
    <user>Dorsey</user>
    <text>Let's hope it will be a happy surprise.</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:43:24.010400</ts>
    <user>Myung</user>
    <text>haha yeah</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:45:10.011000</ts>
    <user>Dorsey</user>
    <text>The only example where multiple segments are captured is for `map`. Maybe that's the key.</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T15:51:44.011900</ts>
    <user>Nana</user>
    <text>hmm, what's the point of parsing an url and then returning it as a string? why not just use the original string then?</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T16:00:08.013700</ts>
    <user>Dorsey</user>
    <text>To match against arbitrary paths, e.g. pointing to files in a filesystem. There are certain rules about what paths are valid, but the depth of the path is variadic.</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T16:01:49.015300</ts>
    <user>Dorsey</user>
    <text>Also, I want to have the part "below" a certain path. Like: `/file/**/*.txt` to give me `File "whatever/path/was/matched.txt"`.</text>
  </message>
  <message conversation_id="371">
    <ts>2019-02-06T16:35:14.015500</ts>
    <user>Agustin</user>
    <text>:wave: Where did you learn the term variadic?</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T16:48:12.015700</ts>
    <user>Dorsey</user>
    <text>From &lt;@Myung&gt; &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1549485504004800&gt;</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T16:48:16.016000</ts>
    <user>Dorsey</user>
    <text>:smile:</text>
  </message>
  <message conversation_id="371">
    <ts>2019-02-06T16:49:00.016200</ts>
    <user>Agustin</user>
    <text>:joy:</text>
  </message>
  <message conversation_id="371">
    <ts>2019-02-06T16:49:10.016400</ts>
    <user>Agustin</user>
    <text>&lt;@Myung&gt; were did you learn that term?</text>
  </message>
  <message conversation_id="369">
    <ts>2019-02-06T16:49:34.016600</ts>
    <user>Dorsey</user>
    <text>I think we used it correctly, didn't we?</text>
  </message>
  <message conversation_id="371">
    <ts>2019-02-06T16:50:02.016800</ts>
    <user>Agustin</user>
    <text>I ask as I’ve only seen it once before, in a Ruby PR, and the author was like “its obvious, everyone knows this” and myself and another Ruby dev both with over 10 years of experience had never heard of it before</text>
  </message>
  <message conversation_id="371">
    <ts>2019-02-06T16:50:24.017000</ts>
    <user>Agustin</user>
    <text>So I’m keen to learn were it’s been introduced to others, feel like I’m missing out</text>
  </message>
  <message conversation_id="371">
    <ts>2019-02-06T16:50:52.017200</ts>
    <user>Agustin</user>
    <text>Always be learning etc</text>
  </message>
  <message conversation_id="371">
    <ts>2019-02-06T16:51:34.017400</ts>
    <user>Dorsey</user>
    <text>I think I heard / saw the word before, but it probably wouldn't come to my mind without a prompt from Ohko. I probably couldn't explain it's meaning without some lookup.</text>
  </message>
  <message conversation_id="371">
    <ts>2019-02-06T16:52:42.017600</ts>
    <user>Dorsey</user>
    <text>Once you are familiar with some term, it's difficult to asses how well known it is in general.</text>
  </message>
  <message conversation_id="371">
    <ts>2019-02-06T18:02:45.018500</ts>
    <user>Myung</user>
    <text>&lt;@Dorsey&gt; i thought about it a little more, but i’m sad to say i don’t have a great recommendation</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:03:12.019000</ts>
    <user>Myung</user>
    <text>if i had your problem i would use either a query param or the fragment</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:03:27.019300</ts>
    <user>Myung</user>
    <text>but only because i don’t know of a “better” way to do it</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:04:20.020600</ts>
    <user>Myung</user>
    <text>`/download?p=/foo/bar/file` or `/download#/foo/bar/file`</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:05:12.021600</ts>
    <user>Dorsey</user>
    <text>Yeah, that won't work for me. I'm thinking about generating a long list of parsers using `map`.</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:05:33.022400</ts>
    <user>Dorsey</user>
    <text>I'm not there yet, but I think I'm getting close.</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:05:34.022500</ts>
    <user>Myung</user>
    <text>yeah you could have parsers that match 1 segment, 2, 3, up to N segments</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:05:37.022700</ts>
    <user>Myung</user>
    <text>and then error out after that</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:06:11.023400</ts>
    <user>Myung</user>
    <text>Now that I say this out loud, it sounds like the Elm way to do things</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:06:24.023800</ts>
    <user>Myung</user>
    <text>kinda like you see with map map3 map4 etc</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:06:35.024100</ts>
    <user>Dorsey</user>
    <text>Mhm.</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:07:14.024800</ts>
    <user>Myung</user>
    <text>&lt;@Dorsey&gt; thanks for sharing your issue. would you mind pinging me if you come up with something else?</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:07:47.025000</ts>
    <user>Dorsey</user>
    <text>Sure.</text>
  </message>
  <message conversation_id="372">
    <ts>2019-02-06T18:11:04.025400</ts>
    <user>Dorsey</user>
    <text>&lt;@Myung&gt; are you affiliated with the elm/url somehow?</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:29:11.026000</ts>
    <user>Kimiko</user>
    <text>Is there a way to figure out why `elm install elm/http` wants to install 1.0.0 if 2.0.0 is the latest?</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:29:56.026200</ts>
    <user>Ruthann</user>
    <text>check your elm.json?</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:33:18.026800</ts>
    <user>Kimiko</user>
    <text>What do I check for, exactly? `elm/http` isn't mentioned explicitly in it</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:34:28.027800</ts>
    <user>Dorsey</user>
    <text>&lt;@Kimiko&gt; it's probably because of other packages depending on `1.0.0`. Try removing and installing everything again.</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:35:11.028400</ts>
    <user>Dorsey</user>
    <text>E.g. you may have older version of `elm/core` and it depends on `http 1.0.0`.</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:36:41.029400</ts>
    <user>Kimiko</user>
    <text>Ah, yes, I guess it was `elm/core` pinning the dependency. Thanks. And I guess from your reply there's no automatic way to find which package is responsible, I just have to bisect my dependencies or something?</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:39:43.030200</ts>
    <user>Dorsey</user>
    <text>I don't think there is. Dependency management needs some more love, I guess :wink:</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:39:56.030400</ts>
    <user>Kimiko</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:42:17.030500</ts>
    <user>Lorilee</user>
    <text>There’s a third-party project that can help with it. I’ll see if I can find it!</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:45:11.030700</ts>
    <user>Lorilee</user>
    <text>&lt;https://www.markuslaire.com/github/elm-dependencies-analyzer/&gt;</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:45:25.030900</ts>
    <user>Lorilee</user>
    <text>This is a pretty helpful project. I just used it to find updates etc</text>
  </message>
  <message conversation_id="373">
    <ts>2019-02-06T18:48:31.031100</ts>
    <user>Kimiko</user>
    <text>Very cool, thanks!</text>
  </message>
  <message conversation_id="374">
    <ts>2019-02-06T19:19:27.031700</ts>
    <user>Dorsey</user>
    <text>Hey, I almost got it. Actually I got it if I hardcode the type of the parser, but I want it to be parametrized. Here is the whole code (not working): ```
module Routes exposing
    ( Route(..)
    , parse
    , parser
    )

import Url exposing (Url)
import Url.Parser as Parser exposing (..)


type Route
    = Home
    | Content String
    | NotFound


parser : Parser (Route -&amp;gt; Route) Route
parser =
    let
        content =
            Parser.custom "Content"
                (\path -&amp;gt;
                    case String.split "." path of
                        [ base, "html" ] -&amp;gt;
                            Just base

                        _ -&amp;gt;
                            Nothing
                )

        variadic last =
            10
                |&amp;gt; List.range 1
                |&amp;gt; List.foldl
                    (\_ parser_ -&amp;gt;
                        Parser.oneOf
                            [ parser_
                            , Parser.map
                                (\parent path -&amp;gt;
                                    parent ++ "/" ++ path
                                )
                                (Parser.string &amp;lt;/&amp;gt; parser_)
                            ]
                    )
                    last
    in
    Parser.oneOf
        [ Parser.map Home &lt;http://Parser.top|Parser.top&gt;
        , Parser.map Content (variadic content)
        ]


parse : Url -&amp;gt; Route
parse url =
    url
        |&amp;gt; Parser.parse parser
        |&amp;gt; Maybe.withDefault NotFound
```</text>
  </message>
  <message conversation_id="374">
    <ts>2019-02-06T19:21:31.031900</ts>
    <user>Dorsey</user>
    <text>And here is a working example (with hardcoded type): ```
module Routes exposing
    ( Route(..)
    , parse
    , parser
    )

import Url exposing (Url)
import Url.Parser as Parser exposing (..)


type Route
    = Home
    | Content String
    | NotFound


parser : Parser (Route -&amp;gt; Route) Route
parser =
    let
        content =
            Parser.custom "Content"
                (\path -&amp;gt;
                    case String.split "." path of
                        [ base, "html" ] -&amp;gt;
                            Just (Content base)

                        _ -&amp;gt;
                            Nothing
                )

        variadic last =
            10
                |&amp;gt; List.range 1
                |&amp;gt; List.foldl
                    (\_ parser_ -&amp;gt;
                        Parser.oneOf
                            [ parser_
                            , Parser.map
                                (\parent child -&amp;gt;
                                    case child of
                                        Content path -&amp;gt;
                                            Content (parent ++ "/" ++ path)

                                        _ -&amp;gt;
                                            NotFound
                                )
                                (Parser.string &amp;lt;/&amp;gt; parser_)
                            ]
                    )
                    last
    in
    Parser.oneOf
        [ Parser.map Home &lt;http://Parser.top|Parser.top&gt;
        , variadic content
        ]


parse : Url -&amp;gt; Route
parse url =
    url
        |&amp;gt; Parser.parse parser
        |&amp;gt; Maybe.withDefault NotFound
```</text>
  </message>
  <message conversation_id="374">
    <ts>2019-02-06T19:23:36.032100</ts>
    <user>Dorsey</user>
    <text>Thanks for sharing &lt;@Lorilee&gt;</text>
  </message>
  <message conversation_id="374">
    <ts>2019-02-06T19:24:51.032400</ts>
    <user>Dorsey</user>
    <text>The signature of `Parser.map` is really bizarre. I'm trying to wrap my head around it.</text>
  </message>
  <message conversation_id="375">
    <ts>2019-02-06T19:45:57.033100</ts>
    <user>Ruthann</user>
    <text>```
-- CORRUPT BINARY - /Users/…/Lookup.elmo

The binary data at
/Users/…/elm-stuff/0.19.0/Lookup.elmo is corrupt.
```

Couldn’t find an issue on elm/compiler about it</text>
  </message>
  <message conversation_id="375">
    <ts>2019-02-06T19:46:29.033600</ts>
    <user>Ruthann</user>
    <text>nuking elm-stuff works, wonder if this is a known/tracked issue</text>
  </message>
  <message conversation_id="375">
    <ts>2019-02-06T19:47:06.033800</ts>
    <user>Ruthann</user>
    <text>i take that back, mentioned here: &lt;https://github.com/elm/compiler/issues/1853#issuecomment-440618037&gt;</text>
  </message>
  <message conversation_id="376">
    <ts>2019-02-06T22:29:12.036100</ts>
    <user>Dede</user>
    <text>I have a form with (so far) 5 text input fields.  Initially I had one `Msg` for each field, e.g. `EmailUpdated String`.  However, I realized I could get away with a single message that packs a closure, `UpdateInput (String -&amp;gt; Model -&amp;gt; Model) String`.  The closure then gets defined right at the relevant input, instead of over in the update function.  Are there reasons this might be a bad idea?</text>
  </message>
  <message conversation_id="376">
    <ts>2019-02-06T22:29:27.036200</ts>
    <user>Dede</user>
    <text>Snippet:
```type alias Model =
    { username : String
    , full_name : String
    , display_name : String
    , email : String
    , password : String
    }


type Msg
    = SignupPressed
    | UpdateInput (String -&amp;gt; Model -&amp;gt; Model) String


view model =
    div []
        [ input
            [ placeholder "Full name"
            , value model.full_name
            , onInput
                UpdateInput
                (\full_name model -&amp;gt; { model | full_name = full_name })
            ]
        , ...
        ]


update model msg =
    case msg of
        UpdateInput updater value -&amp;gt;
            ( model |&amp;gt; updater value, Cmd.none )

        SignupPressed -&amp;gt;
            ( model, Cmd.none )

        ...```</text>
  </message>
  <message conversation_id="376">
    <ts>2019-02-06T23:14:07.036600</ts>
    <user>Earlean</user>
    <text>&lt;@Dede&gt; it's certainly something you can do. But it breaks the debugger and can make it harder to know what happens when a Msg is passed to `update`</text>
  </message>
  <message conversation_id="376">
    <ts>2019-02-06T23:26:10.036800</ts>
    <user>Dede</user>
    <text>Breaks the debugger completely, or just produces opaque closure values all over?</text>
  </message>
  <message conversation_id="377">
    <ts>2019-02-07T00:36:37.037100</ts>
    <user>Earlean</user>
    <text>The debugger can't serialise functions do storing functions in msgs or the model breaks the debugger</text>
  </message>
  <message conversation_id="377">
    <ts>2019-02-07T00:37:52.037300</ts>
    <user>Earlean</user>
    <text>`UpdateInput Email "some@email"` is an operation that avoids having functions in the msg</text>
  </message>
  <message conversation_id="377">
    <ts>2019-02-07T00:38:57.037500</ts>
    <user>Earlean</user>
    <text>You just need a type for the form that has constructors for each field and provide a mapping between the field indentification value and a function to update the model</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:15:12.039700</ts>
    <user>Corinne</user>
    <text>Hi all. Am I right in thinking there's no way to combine extensible records (à la _Intersection Types_ in TypeScript or _multiple bounds_ in Java even)?</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:18:56.041200</ts>
    <user>Corinne</user>
    <text>None</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:22:22.041500</ts>
    <user>Karissa</user>
    <text>You can do something like this:
```
type alias WithId m =
 { m | id : Int }

type alias WithName m =
 { m | name : String }

type alias User =
 WithId (WithName { age : Int })
```</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:24:33.041700</ts>
    <user>Corinne</user>
    <text>Interesting! Is that then compatible with just a plain record of `{name="foo", id="bar"}` ?</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:24:45.041900</ts>
    <user>Karissa</user>
    <text>Your example would be:
```
type alias Named a = { a | name : String }
type alias Aged a = { a | age : Int }

type alias NamedAndAged = Named (Aged {})
```</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:25:16.042200</ts>
    <user>Karissa</user>
    <text>there `NamedAndAged` is basically a `{ name : String, age : Int }`.</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:25:25.042400</ts>
    <user>Corinne</user>
    <text>awesome!</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:25:33.042600</ts>
    <user>Corinne</user>
    <text>Thanks, I'll try this out</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:26:02.042800</ts>
    <user>Karissa</user>
    <text>I'm curious what the type of `NamedAndAged` would be when used as a constructor function</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:26:18.043000</ts>
    <user>Corinne</user>
    <text>It would be cool to support something like `Named &amp;amp; Aged` to avoid excess aliases (there could be a lot of combinations...)</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:26:35.043300</ts>
    <user>Karissa</user>
    <text>If you can do `NamedAndAged "Bob" 42`</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:27:26.043500</ts>
    <user>Karissa</user>
    <text>Oh you can combined them and still be generic like:
`type alias NamedAndAged a = Named (Aged a)`</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:27:52.043700</ts>
    <user>Karissa</user>
    <text>and then `type alias User = NamedAndAged { id : Int }` for example.</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:28:13.043900</ts>
    <user>Karissa</user>
    <text>never actually used these trick in a application though.</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:28:27.044100</ts>
    <user>Karissa</user>
    <text>But it was fun to find out you could do it.</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:31:47.044400</ts>
    <user>Karissa</user>
    <text>Hmm, I tried this in the elm repl, it seems elm doesn't provide constructor functions for records defined like this.</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:33:33.044600</ts>
    <user>Karissa</user>
    <text>```
&amp;gt; type alias Named a = { a | name : String }
&amp;gt; type alias Aged a = { a | age : Int }
&amp;gt; type alias NamedAndAged a = Named (Aged a)
&amp;gt; type alias User = NamedAndAged { id : Int }
&amp;gt; User
-- NAMING ERROR ------------------------------------------------------------ elm

I cannot find a `User` constructor:

8|   User
     ^^^^
These names seem close though:

    EQ
    Err
    Just
    False

Hint: Read &amp;lt;https://elm-lang.org/0.19.0/imports&amp;gt; to see how `import`
declarations work in Elm.


&amp;gt; type alias Test = { test : Int }
&amp;gt; Test
&amp;lt;function&amp;gt; : Int -&amp;gt; Test
```</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:37:12.045500</ts>
    <user>Danika</user>
    <text>Give me a minute to hop onto my laptop.</text>
  </message>
  <message conversation_id="379">
    <ts>2019-02-07T04:46:14.046100</ts>
    <user>Danika</user>
    <text>I don't think extensible records get a constructor the same way records do</text>
  </message>
  <message conversation_id="379">
    <ts>2019-02-07T04:46:25.046300</ts>
    <user>Liza</user>
    <text>they dont</text>
  </message>
  <message conversation_id="379">
    <ts>2019-02-07T04:46:42.046500</ts>
    <user>Liza</user>
    <text>that is main disadvantage</text>
  </message>
  <message conversation_id="379">
    <ts>2019-02-07T04:47:32.046700</ts>
    <user>Danika</user>
    <text>I wonder how useful/necessary they (extensible records) are in practice</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:47:37.046900</ts>
    <user>Karissa</user>
    <text>I guess these type aliases are not meant to be used to define values, but rather to constraint function signatures.</text>
  </message>
  <message conversation_id="379">
    <ts>2019-02-07T04:48:15.047100</ts>
    <user>Karissa</user>
    <text>At least that's the only use of extensible record I know of.</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:50:01.047300</ts>
    <user>Liza</user>
    <text>&lt;https://github.com/justgook/platformer/blob/revision3/lib/elm-tiled/src/Tiled/Object.elm#L22-L28&gt; - here is example - on how i moved away from  `extensible record` to custom types</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:50:17.047500</ts>
    <user>Danika</user>
    <text>It seems like a hacky use to get some sort of typeclass functionality to work. I think you're better off avoiding extensible records unless you have a really obvious usecase for them</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:50:38.047700</ts>
    <user>Danika</user>
    <text>^ You can generally just make your own type that covers all your use cases if you think about it hard enough</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:52:28.048000</ts>
    <user>Liza</user>
    <text>&amp;gt;I wonder how useful/necessary they (extensible records) are in practice

&lt;https://github.com/justgook/platformer/blob/revision3/lib/elm-tiled/src/Tiled/Tileset.elm#L455&gt; - btw - here is example on real-live usage of them.. but maybe is point move to some custom type ..</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:54:42.048400</ts>
    <user>Liza</user>
    <text>and missing constructor is other problem.. for creating such data - you need to write constructor by your self, and as 0.19 you cannot “inject” new fields to record - they become kind of pointless..</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:54:56.048600</ts>
    <user>Liza</user>
    <text>`merge: TilesDataPlain {}  -&amp;gt; a -&amp;gt; TilesDataPlain a` kind of not not possible today</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:57:27.049000</ts>
    <user>Liza</user>
    <text>0.18 was - `merge {prop1,prop2} rest =  {rest | prop1 = prop1, prop2= prop2}`</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:58:50.049200</ts>
    <user>Liza</user>
    <text>now You must reconstruct that record fully, and as you don’t know structure of `a` you can’t do it any more..</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T04:59:25.049400</ts>
    <user>Liza</user>
    <text>extensible record:
0.18 - better not
0.19 - don’t - that is pain</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T05:03:52.049700</ts>
    <user>Corinne</user>
    <text>Also, I think i'm seeing that `NamedAndAged` isn't compatible with `Named`</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T05:07:55.050000</ts>
    <user>Danika</user>
    <text>Are you doing this for any specific purpose, or just curiosity</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T05:14:50.050200</ts>
    <user>Tamra</user>
    <text>You can turn that `UpdateInput (String -&amp;gt; Model -&amp;gt; Model) String` into an `UpdateInput Model` easily:

```
view model =
    -- ...
    onInput (\full_name -&amp;gt; UpdateInput { model | full_name = full_name })
    -- ...
```</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T05:24:32.050400</ts>
    <user>Corinne</user>
    <text>It seemed very much like the right thing to do in order to abstract away from concrete types in an algorithm. Perhaps the same reason you'd code to interfaces in an OOP</text>
  </message>
  <message conversation_id="378">
    <ts>2019-02-07T05:37:32.050700</ts>
    <user>Danika</user>
    <text>&amp;gt; It seems like a hacky use to get some sort of typeclass functionality to work.

Elm doesn't work like Haskell or something. Its totally OK to have `Maybe.map` and `List.map` as completely separate functions, instead of have Maybe and List implement some Functor (in this example) typeclass like you would in Haskell.

Elm doesn't have this sort of ad hoc polymorphism (we were talking about this yesterday in &lt;#C192T0Q1E|beginners&gt; I think).</text>
  </message>
  <message conversation_id="380">
    <ts>2019-02-07T08:32:03.051800</ts>
    <user>Danika</user>
    <text>I think this is an obvious answer. But assuming identical functionality do `browser.element .document .application` and `platform.worker` produce different sized bundles?</text>
  </message>
  <message conversation_id="380">
    <ts>2019-02-07T08:52:03.051900</ts>
    <user>Huong</user>
    <text>Not really. `Platform` doesn't require `elm/browser` and `elm/html`, so you save out on a couple of dependencies and indirect dependencies. Even with function-level dead code elimination, I think `browser` bundles will still be a little larger</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:22:39.052400</ts>
    <user>Carman</user>
    <text>Using extensible records to model an inheritance hierarchy tends to be clunky in Elm.</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:22:56.052600</ts>
    <user>Carman</user>
    <text>There are a few other ways to get similar flexibility, depending on what your problem is</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:26:08.052800</ts>
    <user>Dede</user>
    <text>&lt;@Earlean&gt; Thanks.  The reason I am playing with the closures is that it isolates the update logic closer to the use point; I don’t love the profusion of entries in `update` and `view` that come with lots of form elements.  The secondary tag style doesn’t really solve that.</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:26:29.053000</ts>
    <user>Carman</user>
    <text>1. Your problem might be able to be solved with a _regular custom type_, possibly with a type variable
2. You may want to _compose_ some custom types. This approach is nice because it allows you to nest just like the  extensible record but the `a` can be _anything_, not just a record.
3. You may want to _derive_ a common structure from disparate types</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:26:45.053200</ts>
    <user>Dede</user>
    <text>&lt;@Tamra&gt; Due to the asynchronous nature of updates, you can get in trouble closing over the model available to you at the time you click the button.</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:28:02.053400</ts>
    <user>Carman</user>
    <text>Example of approach 2
```
type Named a = Named String a
type Aged a = Aged Int a

type alias NamedAndAged a = Named (Aged a)
```</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:29:05.053600</ts>
    <user>Liza</user>
    <text>`type Aged a = Aged Int a` - you mean</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:29:32.054000</ts>
    <user>Carman</user>
    <text>good catch. fixed :+1:</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:31:10.054200</ts>
    <user>Carman</user>
    <text>An actual value might look like:
```
Named "city hall" (Aged 42 myBuilding)
```</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:31:52.054400</ts>
    <user>Carman</user>
    <text>This approach is very flexible and allows you to do some things with Elm's parametric polymorphism but can be annoying to unwrap, particularly when you're nesting deeply</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:32:17.054600</ts>
    <user>Carman</user>
    <text>I find it's most helpful when wrapping some extra context around a value</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:32:42.054800</ts>
    <user>Carman</user>
    <text>such as `Maybe User` or `Toggleable User`</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:34:45.055000</ts>
    <user>Carman</user>
    <text>You can see some more examples in this discourse thread: &lt;https://discourse.elm-lang.org/t/extension-types/2762/3&gt;</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:35:27.055200</ts>
    <user>Carman</user>
    <text>I wrote a bit about approach 3 (derive data) here: &lt;https://thoughtbot.com/blog/gamedev-with-elm-types#composition-vs-inheritance&gt;</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:49:07.055600</ts>
    <user>Earlean</user>
    <text>&lt;@Dede&gt; 'isolating the update logic' also couples it to the view, the general recommendation is for Msgs to describe events that happened and `update` handles what to do in response to that event. </text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:50:43.055800</ts>
    <user>Earlean</user>
    <text>Eg. You may want to do something in addition to updating the model in response to input on a field</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:50:46.056000</ts>
    <user>Dede</user>
    <text>In general I think that advice is sound.  It’s only in this specific case where “update text to equal text” is such a recurrent pattern that the signal/noise ratio started to feel too low to me.  But as you can tell by my putting out the question, I’m not super confident in the call :wink:</text>
  </message>
  <message conversation_id="381">
    <ts>2019-02-07T09:51:18.056200</ts>
    <user>Dede</user>
    <text>And yeah, i see what you mean about potentially wanting to do something more (autocomplete results fetch, etc.) than just update the text field on the model.</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:54:09.056400</ts>
    <user>Earlean</user>
    <text>Doing `UpdateInput Email "some@email"` allows you to move the 'noise' in to a function and put it in a module and not worry about it much.</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:54:37.056900</ts>
    <user>Niesha</user>
    <text>I can't create new channels? I wanted to make a #purescript one for occasional lost souls.</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:55:19.057000</ts>
    <user>Dede</user>
    <text>Fair enough.  I think I’m sold.  Thank you.</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:55:21.057200</ts>
    <user>Timika</user>
    <text>Nope, only &lt;@Deja&gt; can.</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T09:56:00.057400</ts>
    <user>Niesha</user>
    <text>Time to wait then.</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T10:00:58.057600</ts>
    <user>Liza</user>
    <text>```type alias Point3d = Point2dPlus { z : Int }``` I would create it as `type alias Point3d = Point2dPlus Z` where `type alias Z = Int`</text>
  </message>
  <message conversation_id="383">
    <ts>2019-02-07T10:09:35.057900</ts>
    <user>Antonette</user>
    <text>How can a soul who enjoys purescript be lost? :wink:</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T10:10:39.058100</ts>
    <user>Niesha</user>
    <text>They're lost on this slack :smile:</text>
  </message>
  <message conversation_id="383">
    <ts>2019-02-07T10:12:37.058300</ts>
    <user>Antonette</user>
    <text>When you're lost, just follow the `&amp;gt;&amp;gt;=`.</text>
  </message>
  <message conversation_id="383">
    <ts>2019-02-07T10:12:45.058500</ts>
    <user>Antonette</user>
    <text>:stuck_out_tongue_winking_eye:</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T10:31:26.058900</ts>
    <user>Huong</user>
    <text>&lt;@Niesha&gt; We have a bit of a surplus of channels, at the moment, most of which see no use whatsoever. As a result, we tend to create channels when we notice that a certain topic is beginning to drown out regular conversation in the existing channels</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T10:32:24.059100</ts>
    <user>Niesha</user>
    <text>So start talking about purescript more?</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T10:34:12.059500</ts>
    <user>Huong</user>
    <text>If the goal is to drown out regular conversation, that's unlikely to result in a channel :wink:</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T10:42:01.059800</ts>
    <user>Niesha</user>
    <text>But that's the requirement for a new channel, right?</text>
  </message>
  <message conversation_id="382">
    <ts>2019-02-07T10:43:44.060000</ts>
    <user>Niesha</user>
    <text>Or is that more of a "don't overdo it"</text>
  </message>
  <message conversation_id="384">
    <ts>2019-02-07T11:11:30.061600</ts>
    <user>Cammy</user>
    <text>Anyone have thoughts on naming incoming/outgoing ports. I’ve settled on “elmToJs” and “jsToElm” which is descriptive, but not super satisfying.

I’m not a fan of inbound/outbound, because when I’m on the JS side I have to send stuff back through the “inbound,” which causes me some cognitive dissonance.</text>
  </message>
  <message conversation_id="384">
    <ts>2019-02-07T11:17:52.062700</ts>
    <user>Randee</user>
    <text>&lt;@Cammy&gt; small nit but `toElm` and `toJS`  might be better then?  `jsToElm` when you are already in JS and know where you are is redundant</text>
  </message>
  <message conversation_id="384">
    <ts>2019-02-07T11:18:16.063000</ts>
    <user>Cammy</user>
    <text>That’s a good point. Still feel like we can name better.</text>
  </message>
  <message conversation_id="384">
    <ts>2019-02-07T11:20:08.063600</ts>
    <user>Randee</user>
    <text>hopefully you wrap the port communication in higher level functions/api and dont have to think about it too much</text>
  </message>
  <message conversation_id="384">
    <ts>2019-02-07T11:25:09.064000</ts>
    <user>Claretta</user>
    <text>This is similar to what I do, usually some version of `toFoo` and `fromFoo` I also tend to use separate pairs of ports for independent systems in JS.  So I might have `toStorage` and `fromStorage` or `toWebSocket` and `fromWebSocket`</text>
  </message>
  <message conversation_id="385">
    <ts>2019-02-07T11:42:15.064400</ts>
    <user>Agustin</user>
    <text>I name them by what they do</text>
  </message>
  <message conversation_id="384">
    <ts>2019-02-07T12:07:55.065100</ts>
    <user>Cammy</user>
    <text>Yeah, it works. I’m not totally satisfied with t tho. </text>
  </message>
  <message conversation_id="386">
    <ts>2019-02-07T12:11:42.065300</ts>
    <user>Huong</user>
    <text>Talking about some topic more with the express purpose of artificially drowning out regular conversation just so a channel will be created is definitely not what I'm recommending here. If we notice a bunch of people seem eager to discuss a topic, and we feel like it would be helpful to give them a specific space to discuss, then we're more than happy to give them a space. Good examples of this are &lt;#C0RSQNQ92|graphql&gt; and &lt;#C4F9NBLR1|elm-ui&gt; which have plenty of action.

I don't feel like there is enough discussion about purescript to warrant creating a channel for it and seeing it die within a few weeks. It seems to pop up every now and then, and that seems perfectly fine to me. Last but not least, we do prefer keeping (new) channels on this Slack to be about Elm. That doesn't seem controversial, given that this is the Elm slack.</text>
  </message>
  <message conversation_id="386">
    <ts>2019-02-07T12:22:58.066000</ts>
    <user>Ashton</user>
    <text>I do `toJs` and `fromJs` on the Elm side, and then I often compose a `toElm` helper on the JS side.</text>
  </message>
  <message conversation_id="384">
    <ts>2019-02-07T12:23:42.066900</ts>
    <user>Ashton</user>
    <text>```
function toElm(type, payload) {
    app.ports.fromJs.send({
        type: type,
        payload: payload
    })
}
```</text>
  </message>
  <message conversation_id="387">
    <ts>2019-02-07T12:45:38.067400</ts>
    <user>Danika</user>
    <text>you could even just do `const toElm = app.ports.fromJs.send`</text>
  </message>
  <message conversation_id="388">
    <ts>2019-02-07T15:40:39.069100</ts>
    <user>Ashton</user>
    <text>Yeah but `toElm("hello", null)` is still less typing than `toElm({type: "hello", payload: null})`, altho I guess character count isnt anyone’s priority.</text>
  </message>
  <message conversation_id="384">
    <ts>2019-02-07T15:50:18.070400</ts>
    <user>Danika</user>
    <text>You can also enforce (as much as js will let you, at least) the structure of the data sending. My example doesn’t do that, you’re right! </text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:11:22.071600</ts>
    <user>Olene</user>
    <text>How i transform Http.get into Task? (cant finf it in the docs)</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:14:37.072900</ts>
    <user>Jin</user>
    <text>You can’t turn a `Cmd` into a `Task`, only the other way around. There is &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#task&gt; to create a `Task` describing a Http request.</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:19:17.073500</ts>
    <user>Brady</user>
    <text>&lt;@Olene&gt; You can use `Http.task`</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:22:12.075700</ts>
    <user>Brady</user>
    <text>&lt;https://github.com/elm/http/blob/2.0.0/src/Http.elm#L820&gt;</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:22:34.076000</ts>
    <user>Olene</user>
    <text>is it normal to do this? (they say that "This should be quite rare.") my goal is to send get data from some API but i need to send couple of requests that are depends one on the one before</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:23:08.076500</ts>
    <user>Brady</user>
    <text>Yes that's what it is intended for</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:25:36.078500</ts>
    <user>Jin</user>
    <text>If you need to use `Cmd`s (e.g. for process tracking) and also chain requests you have to keep track of the results of each request in you model.</text>
  </message>
  <message conversation_id="390">
    <ts>2019-02-07T16:32:02.080400</ts>
    <user>Estela</user>
    <text>&lt;@Karrie&gt; Did you ever have any luck on this? `Dom.setViewport` works in my situation but I am interested in a solution for the lack of easing( i.e. it’s jumping).</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:32:54.081400</ts>
    <user>Earnest</user>
    <text>&lt;@Olene&gt; &lt;https://package.elm-lang.org/packages/prikhi/http-tasks/latest/Http-Tasks#get&gt;</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:33:58.081500</ts>
    <user>Karrie</user>
    <text>Yeah I didn't have any luck implementing an animation</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:34:35.081700</ts>
    <user>Karrie</user>
    <text>Eventually, after not finding a solution, I resorted to ports and JavaScript</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:35:18.082100</ts>
    <user>Karrie</user>
    <text>Basically I have an outgoing port that will "tell" js that he needs to scroll down or up</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:35:41.082700</ts>
    <user>Karrie</user>
    <text>You can pass all the parameters you want to the port, depending on your case</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:36:12.083400</ts>
    <user>Olene</user>
    <text>Tanks  &lt;@Earnest&gt; i will look into this one.</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:36:21.083600</ts>
    <user>Olene</user>
    <text>Thanks*</text>
  </message>
  <message conversation_id="389">
    <ts>2019-02-07T16:42:12.088000</ts>
    <user>Olene</user>
    <text>its looks like there was Http.toTask in the 0.18 version. I wonder why it was removed. is it better to keep track of the different requests (used as partial steps)
as part of the model (i.e. different Msg for different request) then using chaining task one after another and then create the final Msg (just want to know how to approach that problem without polluting the model too much)</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T16:59:46.088400</ts>
    <user>Lupita</user>
    <text>any talks to move elm to use webasm?</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:02:59.089100</ts>
    <user>Ashton</user>
    <text>Yes. I think at least three of us have done little Elm to wasm projects, but I dont think anything has taken off.</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:10:58.089700</ts>
    <user>Lupita</user>
    <text>i'm so super intrigued with elm. coming from vue, it's an interesting experience but still total noob</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:11:26.090300</ts>
    <user>Lupita</user>
    <text>work in c# and omg i want to wring the necks of some of the devs who think functional is bad</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:12:59.091500</ts>
    <user>Lupita</user>
    <text>was there a particular reason that elm uses currying?</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:14:36.092800</ts>
    <user>Ashton</user>
    <text>Uh, I dont know. Good question. Elm looks a lot like Haskell, which also has partial application and currying. Seems like its just second nature to functional programming languages. So theres a lot of history there.</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:14:40.093000</ts>
    <user>Ashton</user>
    <text>But, it is super useful.</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:14:47.093200</ts>
    <user>Ashton</user>
    <text>I think.</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:15:34.094000</ts>
    <user>Lupita</user>
    <text>i get it makes stuff like mapping easier</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:20:10.095100</ts>
    <user>Danika</user>
    <text>Currying leads to partially applying functions </text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:22:25.095900</ts>
    <user>Lupita</user>
    <text>a poor mans dependency injection :slightly_smiling_face:</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:24:35.096800</ts>
    <user>Danika</user>
    <text>I think you’d offend a lot of people saying that ^^ </text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:26:00.099200</ts>
    <user>Bert</user>
    <text>I gotta admit I got a bit riled up, but then decided one can think what one wants :) </text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:26:04.099300</ts>
    <user>Lupita</user>
    <text>well not sure how else i would put it.</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:26:30.100000</ts>
    <user>Danika</user>
    <text>Curried functions is a mathematical concept that predates dependency injection </text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:27:38.100900</ts>
    <user>Lupita</user>
    <text>ok so DI is an example of currying.</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:29:36.103200</ts>
    <user>Bert</user>
    <text>Currying (or partial application) is a function level thing. You apply some of the arguments of a function, but not all. That's it. </text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:30:11.104400</ts>
    <user>Danika</user>
    <text>You’re gonna offend just as many people equating currying to partial application :smirk:</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:30:47.105000</ts>
    <user>Bert</user>
    <text>Not as many :smile: </text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:32:40.106100</ts>
    <user>Lupita</user>
    <text>it's an interesting discussion but nothing to get offended about. i choose to look at it in practical terms</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:33:59.107800</ts>
    <user>Danika</user>
    <text>I dont think many *here* will be offended, and i think its silly to get all anal about it. But FP has its roots deeeeep in maths and academia and so you get a lot of people that take everything too seriously</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:35:02.108900</ts>
    <user>Lupita</user>
    <text>i get it.  i'll tread lightly.  really the only functional lang i've seen is erlang/exlixir before elm.</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:35:15.109700</ts>
    <user>Danika</user>
    <text>We dont mind here, we’re a fun bunch </text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:35:37.110600</ts>
    <user>Lupita</user>
    <text>but makes sense when you see it done in js and then realize that's how all that redux is done</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:36:42.112700</ts>
    <user>Huong</user>
    <text>Partial application can be used to do DI. That's a given. It's a limiting view to consider it only that, though.</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:37:20.112900</ts>
    <user>Danika</user>
    <text>^^ one of the nice things about Elm is that its designed to be used, not talked about :D let the mathematicians worry about category theory, we can think about if we any to but it doesnt get in the way </text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:37:43.113300</ts>
    <user>Danika</user>
    <text>Want*, not any</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:39:44.115200</ts>
    <user>Lupita</user>
    <text>well to be honest, it makes sense to use functional in webpage because of all the different thinks that can happen</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:39:50.115500</ts>
    <user>Lupita</user>
    <text>things</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:41:06.116000</ts>
    <user>Lupita</user>
    <text>i've pulled my hair out years ago with some jquey stuff and vowed never again</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:45:25.117300</ts>
    <user>Huong</user>
    <text>(One could say "DI is needed to make up for the lack of partial application", and that would be an equally incomplete-yet-not-completely-incorrect statement)</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:46:11.117800</ts>
    <user>Lupita</user>
    <text>very reasonable definition</text>
  </message>
  <message conversation_id="392">
    <ts>2019-02-07T17:50:37.118800</ts>
    <user>Agustin</user>
    <text>Dependency Injection is something C# and Java developers made up to fix other problems :joy:</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:51:51.120000</ts>
    <user>Lupita</user>
    <text>just nixed a ton of DI in my c# code base,  it wasn't needed an tbh, made the code much more inflexible</text>
  </message>
  <message conversation_id="391">
    <ts>2019-02-07T17:54:17.120900</ts>
    <user>Lupita</user>
    <text>the only reason i see using it is because of mocking.</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:56:30.121300</ts>
    <user>Agustin</user>
    <text>Ruby went through a period of fascination with formal DI</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:56:42.121600</ts>
    <user>Agustin</user>
    <text>Where you’d configure and use things rather than constants</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:56:59.122000</ts>
    <user>Agustin</user>
    <text>But it was symptom of it not being functional enough to pass in your collaborators properly</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:57:12.122300</ts>
    <user>Agustin</user>
    <text>Not enough SoC</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:57:14.122500</ts>
    <user>Lupita</user>
    <text>have they fixed it in rails?</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:57:36.122800</ts>
    <user>Agustin</user>
    <text>No and they shouldn’t</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:57:45.123000</ts>
    <user>Agustin</user>
    <text>Thats not what Rails is for</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:58:06.123500</ts>
    <user>Agustin</user>
    <text>If you want to go functional and use a Rails like framework, theres Phoenix :troll:</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:58:12.123700</ts>
    <user>Lupita</user>
    <text>what is SoC mean?</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:58:21.124100</ts>
    <user>Agustin</user>
    <text>Separation of Concerns</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:58:26.124500</ts>
    <user>Lupita</user>
    <text>gotcha</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:58:38.125000</ts>
    <user>Lupita</user>
    <text>i love phoenix so far</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:58:52.125300</ts>
    <user>Agustin</user>
    <text>Yeah Phoenix is my current goto</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:58:57.125500</ts>
    <user>Agustin</user>
    <text>But Rails has a place too</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T17:59:23.126000</ts>
    <user>Agustin</user>
    <text>Just like wordpress does</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:00:02.126400</ts>
    <user>Lupita</user>
    <text>we're using aspcore net for work apps</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:01:02.127100</ts>
    <user>Agustin</user>
    <text>I’m sure they had legitimate reasons for that decision, I just can’t imagine what they are.</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:01:17.127500</ts>
    <user>Agustin</user>
    <text>Beyond my cynical biased ones.</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:01:27.127700</ts>
    <user>Lupita</user>
    <text>c# on the brain here</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:03:55.128800</ts>
    <user>Lupita</user>
    <text>the service i'm working on is super simple,  node js express would have been faster to develop and get working</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:04:59.129500</ts>
    <user>Lupita</user>
    <text>so things i do like with c# but overall it's a pain</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:06:34.130400</ts>
    <user>Rosalee</user>
    <text>I just got a job where all they do is C#, coming from Laravel</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:06:45.130900</ts>
    <user>Nana</user>
    <text>&lt;@Lupita&gt; F# seems pretty nice though</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:07:06.131400</ts>
    <user>Rosalee</user>
    <text>I haden’t written a line of c# before last week. Lets just say I’m not sold.</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:07:24.131800</ts>
    <user>Rosalee</user>
    <text>But I have to grind through it grr</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:07:56.133100</ts>
    <user>Rosalee</user>
    <text>&lt;@Lupita&gt; If you have any good resources for getting up to speed with &lt;http://asp.net|asp.net&gt; core mvc let me know</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:08:11.133400</ts>
    <user>Lupita</user>
    <text>well, i'm not a huge fan of static typing at all because i think it just lengthens your dev time</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:08:41.134200</ts>
    <user>Rosalee</user>
    <text>After using Elm, the type system in C# feels so clunky</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:08:54.134600</ts>
    <user>Lupita</user>
    <text>json is cake in perl, python, js :slightly_smiling_face:</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:09:27.135200</ts>
    <user>Lupita</user>
    <text>&lt;@Ike&gt; yes, i will have to look up a tutorial that i liked.  are you doing EF?</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:09:54.135900</ts>
    <user>Rosalee</user>
    <text>&lt;@Lupita&gt; I’ll dm you</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:12:30.139300</ts>
    <user>Nana</user>
    <text>well, in languages like Java (and I assume C#), you're forced to type annotate everything, and you still get null pointer exceptions, which is probably the number one type error</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:12:34.139500</ts>
    <user>Ruthann</user>
    <text>&lt;@Rosalee&gt; if you’re completely new to &lt;http://asp.net|asp.net&gt; mvc, i’d suggest doing a 4-5 hr pluralsight course, they are taught by very experienced ppl and made me a intermediate over night. of course then you have to go and use it.</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:13:11.140400</ts>
    <user>Rosalee</user>
    <text>I checked them out, and started a course only to realize it was out of date.</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:14:14.141200</ts>
    <user>Ruthann</user>
    <text>they were following the latest mvc releases when i was looking at it back then… 4, 5, but i haven’t personally looked in a while… long while</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:18:13.142900</ts>
    <user>Lupita</user>
    <text>&lt;@Nana&gt; yes it's crazy but i try use it as simply as possible, if i don't need it , i don't use it.  a common practice is hiding a lot of what something is doing by doing clever OO tricks</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:19:42.144000</ts>
    <user>Nana</user>
    <text>and you can also get unhandled exceptions</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:20:06.144500</ts>
    <user>Nana</user>
    <text>so yeah then it kinda feels like you might as well go without static types</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:20:38.145200</ts>
    <user>Nana</user>
    <text>but if static types actually mean that your application never crashes, then it's pretty cool</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:22:43.148100</ts>
    <user>Lupita</user>
    <text>i did a whole project in perl, no static types all functions were just hashes as parameters.  was extremely maintainable.</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T18:23:13.148700</ts>
    <user>Huong</user>
    <text>I feel like we need to make the distinction between java-like type systems (~ subtyping) and ML-like type systems (hindley milner based, like what we use in Elm). They give you very different things. In Elm, they mean the compiler can really help you figure things out and guide you through huge refactors that would be a pain without that type system, and essentially mean you won't have runtime exceptions.</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:23:37.149000</ts>
    <user>Lupita</user>
    <text>yes i get that</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:23:53.149400</ts>
    <user>Huong</user>
    <text>Both static types, but a completely different set of guarantees</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:26:59.152600</ts>
    <user>Lupita</user>
    <text>i did a c# project where everything i got from sql db was either a dictionary&amp;lt;string, string&amp;gt;  or a list of dictionaries all strings and then i didn't have to worry about objects.  I just did type conversion when needed for ints, dates, floats and had a reasonable about of teritary code to avoid exceptions and never had any issues with it.  dev time was a fraction of what it would have been otherwise</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:29:22.154000</ts>
    <user>Lupita</user>
    <text>i have about 4 or 5 generic functions that could query  any sql and return that.  and then was able to use linq to get what i needed.  it was stupid simple</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:33:07.157600</ts>
    <user>Huong</user>
    <text>That's cool that that worked for you! I usually mess up big time in such situations, and really appreciate the compiler helping me make sure everything has the shape I want it to be - no possibility of surprises.</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T18:33:26.158100</ts>
    <user>Huong</user>
    <text>But hey, to each their own, and who knows, it might grow on you, too :wink:</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:35:02.159600</ts>
    <user>Lupita</user>
    <text>i wrote that system in about 2 weeks. start to finish and it was super ez to maintain.  poor man's ef is what i called it</text>
  </message>
  <message conversation_id="393">
    <ts>2019-02-07T18:40:26.162900</ts>
    <user>Lupita</user>
    <text>the only issue i hate with it was it was a WCF service that i called and i had to use a stupid service reference</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:04:23.173200</ts>
    <user>Marcus</user>
    <text>Quick design question. I have a `model`. The `model` has a `query` type attached to it. The `query` has a `filters` type. The `filters` type has a bunch of properties like `inStock`, `bpaFree`, etc. Those filters are implemented by a type called `BooleanFilter`. Visually, it looks a bit like this:

```
model
    query
        filters
            inStock
            bpaFree
```

I omitted a bunch of other properties on the `model`, `query`, and `filters` types.

I have a lot of repeated code that handles toggling the filters. It looks something like this:

```
let
    query =
        model.query

    filters =
        model.query.filters
in
filters.inStock
    |&amp;gt; (\filter -&amp;gt; BooleanFilter (not filter.value))
    |&amp;gt; (\updatedFilter -&amp;gt; { filters | inStock = updatedFilter })
    |&amp;gt; (\updatedFilters -&amp;gt; { query | filters = updatedFilters })
    |&amp;gt; (\updatedQuery -&amp;gt; { model | query = updatedQuery })
```

I have this block of code for each of the properties on `filters`. There are a lot of them. How would you go about DRYing this up?</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:23:22.174100</ts>
    <user>Earnest</user>
    <text>You can pull everything but the `.inStock` and `\updateFilter -&amp;gt; ...` out.</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:25:35.176000</ts>
    <user>Earnest</user>
    <text>So I'd make my call something like
```
toggleFilter : (Filters -&amp;gt; Bool) -&amp;gt; (Filters -&amp;gt; Bool -&amp;gt; Filters) -&amp;gt; Model -&amp;gt; Model

-- usage
model
  |&amp;gt; toggleFilter  .inStock (\f v -&amp;gt; { f | inStock = v }) 
```</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:26:47.176200</ts>
    <user>Marcus</user>
    <text>Ah, I like it.</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:27:16.176600</ts>
    <user>Marcus</user>
    <text>I always forget about the `.inStock` syntax.</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:27:27.176800</ts>
    <user>Marcus</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:32:52.177800</ts>
    <user>Lupita</user>
    <text>i need to learn that ^</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:35:41.179700</ts>
    <user>Marcus</user>
    <text>You can access a property on a record like `filters.inStock` or like `(.inStock filters)`. So, you can pass the accessor around like a function (since it is).</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:36:16.180200</ts>
    <user>Marcus</user>
    <text>In the example above, `.inStock` is passed in as a parameter.</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:52:22.180800</ts>
    <user>Lupita</user>
    <text>i'd have to see the code.  i'm sorry, i'm just a noob</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:52:33.181000</ts>
    <user>Marcus</user>
    <text>Me too :slightly_smiling_face:</text>
  </message>
  <message conversation_id="394">
    <ts>2019-02-07T21:52:42.181300</ts>
    <user>Marcus</user>
    <text>I'm happy I just recognized the syntax.</text>
  </message>
  <message conversation_id="395">
    <ts>2019-02-08T04:01:29.183200</ts>
    <user>Karrie</user>
    <text>I’m going to ask this here as I don’t know where else to go :sweat_smile: is there a way to message the admin/moderators discourse? I have a few questions that I would like to ask them</text>
  </message>
  <message conversation_id="396">
    <ts>2019-02-08T04:31:54.183300</ts>
    <user>Huong</user>
    <text>You can send a message to ElmModerationTeam through &lt;https://discourse.elm-lang.org/about&gt;</text>
  </message>
  <message conversation_id="396">
    <ts>2019-02-08T04:33:19.183500</ts>
    <user>Karrie</user>
    <text>from Discourse, there’s no way to send them a message to ElmModerationTeam or anyone else that is a moderator or admin</text>
  </message>
  <message conversation_id="396">
    <ts>2019-02-08T04:42:03.183800</ts>
    <user>Karrie</user>
    <text>but I DM ElmModerationTeam here on Slack</text>
  </message>
  <message conversation_id="397">
    <ts>2019-02-08T06:34:45.185000</ts>
    <user>Earnestine</user>
    <text>any recommendation for an editor equipped with a good elm19 mode? (for linux)</text>
  </message>
  <message conversation_id="396">
    <ts>2019-02-08T06:37:01.186100</ts>
    <user>Agustin</user>
    <text>vim :joy:</text>
  </message>
  <message conversation_id="397">
    <ts>2019-02-08T06:37:50.187000</ts>
    <user>Nana</user>
    <text>&lt;@Earnestine&gt; I'm using VSCode which has a pretty nice Elm plugin
I think the Elm plugin for Atom is slightly more advanced, but I had some issues with it, plus VSCode has better performance and I'm just more used to it</text>
  </message>
  <message conversation_id="398">
    <ts>2019-02-08T07:46:28.187900</ts>
    <user>Estela</user>
    <text>Okay. Thanks for the update!</text>
  </message>
  <message conversation_id="398">
    <ts>2019-02-08T08:19:23.188100</ts>
    <user>Estela</user>
    <text>So I am now leaning toward the CSS based solution. How have I not know about this until now?
&lt;https://css-tricks.com/snippets/jquery/smooth-scrolling/&gt;</text>
  </message>
  <message conversation_id="398">
    <ts>2019-02-08T08:20:36.188700</ts>
    <user>Danika</user>
    <text>They said editor, not portal to the shadow realm </text>
  </message>
  <message conversation_id="398">
    <ts>2019-02-08T08:29:56.189000</ts>
    <user>Agustin</user>
    <text>But the shadow realm has monads</text>
  </message>
  <message conversation_id="399">
    <ts>2019-02-08T10:41:16.189400</ts>
    <user>Danika</user>
    <text>```{- This is a **really** ugly hack since Elm 0.19 doesn't allow `Debug.crash` any more.
   Hopefully this will never get executed, but if it does, it will make your browser
   hang (or hopefully give a stack overflow error).
   The only justification for this is that it *should* never get called, and there are
   no sensible default cases if we do get there.
-}


crashHack : String -&amp;gt; a
crashHack msg =
    crashHack msg```</text>
  </message>
  <message conversation_id="399">
    <ts>2019-02-08T10:41:34.189700</ts>
    <user>Danika</user>
    <text>:’) amazing</text>
  </message>
  <message conversation_id="399">
    <ts>2019-02-08T10:43:28.189800</ts>
    <user>Huong</user>
    <text>I'll admit to having done a similar thing</text>
  </message>
  <message conversation_id="399">
    <ts>2019-02-08T10:43:29.190000</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/zwilias/elm-holey-zipper/blob/master/src/List/Holey/Zipper.elm#L87-L98&gt;</text>
  </message>
  <message conversation_id="399">
    <ts>2019-02-08T10:46:50.190200</ts>
    <user>Niesha</user>
    <text>What would you need to encode in the type system to not require the `unsafe` here? GADTs?</text>
  </message>
  <message conversation_id="399">
    <ts>2019-02-08T10:49:31.190400</ts>
    <user>Danika</user>
    <text>It’s especially cheeky given this is `elm-community/graph`</text>
  </message>
  <message conversation_id="399">
    <ts>2019-02-08T10:57:56.190600</ts>
    <user>Huong</user>
    <text>&lt;@Niesha&gt; that would work. Alternatively, something like
```
type Full a = Full a
type Hole = Hole

type Zipper t a = Zipper (List a) t (List a)
``` would work, but I didn't like the prospect of passing around a `Zipper (Full a) a`. Not sure why exactly I decided against it, though :sweat_smile:</text>
  </message>
  <message conversation_id="399">
    <ts>2019-02-08T12:14:11.190900</ts>
    <user>Hilma</user>
    <text>It would be better if crashHack wasn't tail recursive. Because this gets translated to a while loop and doesn't crash the browser, it just makes it unresponsive.
I'm sure there is a way to write it in a non tail recursive way, but I can't figure it out right now.</text>
  </message>
  <message conversation_id="400">
    <ts>2019-02-08T12:31:25.191200</ts>
    <user>Lynne</user>
    <text>`msg ++ crashHack msg` would do it</text>
  </message>
  <message conversation_id="399">
    <ts>2019-02-08T16:59:30.192700</ts>
    <user>Charity</user>
    <text>I found that elm/file is currently broken in IE.  These MRs should fix it.  If anyone is available to give a quick read, I'd appreciate it.
&lt;https://github.com/elm/file/pull/9&gt;
&lt;https://github.com/elm/json/pull/12&gt;</text>
  </message>
  <message conversation_id="400">
    <ts>2019-02-08T17:33:10.192800</ts>
    <user>Hilma</user>
    <text>&lt;@Lynne&gt; that wouldn't work because `msg : String` and `crashHack msg : a`</text>
  </message>
  <message conversation_id="400">
    <ts>2019-02-08T17:40:38.193000</ts>
    <user>Hilma</user>
    <text>This works, but I'm sure there is a simpler solution:
```
crash : a -&amp;gt; a
crash a =
    crash (crash a)

crashHack : String -&amp;gt; a
crashHack msg =
    crash (crashHack msg)
```</text>
  </message>
  <message conversation_id="401">
    <ts>2019-02-08T18:11:20.193200</ts>
    <user>Virgie</user>
    <text>there were some recent threads on the discourse regarding elm/file where Evan was quite active. Maybe you can open your own thread there?</text>
  </message>
  <message conversation_id="401">
    <ts>2019-02-08T18:18:44.193400</ts>
    <user>Huong</user>
    <text>Since we're clearly on a terrible, horrible track here... might as well abuse a bug</text>
  </message>
  <message conversation_id="401">
    <ts>2019-02-08T18:18:55.193600</ts>
    <user>Huong</user>
    <text>`crashHack x = x |&amp;gt; crashHack`</text>
  </message>
  <message conversation_id="401">
    <ts>2019-02-08T18:31:37.193800</ts>
    <user>Charity</user>
    <text>that's a good idea.  I saw those along the way.</text>
  </message>
  <message conversation_id="402">
    <ts>2019-02-08T18:42:31.195700</ts>
    <user>Halina</user>
    <text>Hi, is it possible to configure the from elm code compiled javascript to be human-readable? I'd like to introduce Elm in my company in a manner that devs without Elm skills can maintain the javascript version of elm source...</text>
  </message>
  <message conversation_id="403">
    <ts>2019-02-08T18:45:44.197000</ts>
    <user>Virgie</user>
    <text>I would not want to work with/maintain JS code generated by the elm compiler. The main issue (beside style) is that you'd need a really thorough understanding of the elm runtime (how/when commands are executed)</text>
  </message>
  <message conversation_id="401">
    <ts>2019-02-08T18:47:39.199000</ts>
    <user>Huong</user>
    <text>It would also make it essentially impossible to recompile the Elm code without losing manual changes, so once you start editing the compiled JS, you lose the ability to Elm. together with any and all advantages Elm offers. For what it's worth, I've noticed that people don't need a whole lot of time to get productive in Elm, especially when they have some prior programming experience.</text>
  </message>
  <message conversation_id="401">
    <ts>2019-02-08T18:50:16.200500</ts>
    <user>Charity</user>
    <text>&lt;@Halina&gt; - I suggest helping the team learn Elm. We've got a junior JS dev that learned Elm and they didn't have any problems.</text>
  </message>
  <message conversation_id="404">
    <ts>2019-02-08T20:11:24.200900</ts>
    <user>Hoyt</user>
    <text>Hi, folks! :wave::skin-tone-3: Back to working on a side project in Elm! YAY!</text>
  </message>
  <message conversation_id="405">
    <ts>2019-02-08T23:16:13.201200</ts>
    <user>Kris</user>
    <text>I disagree about calling this such an ugly "hack"</text>
  </message>
  <message conversation_id="405">
    <ts>2019-02-08T23:16:52.201400</ts>
    <user>Kris</user>
    <text>You can't do much more against these kind of situations, it's either using this or uselessly return maybes</text>
  </message>
  <message conversation_id="404">
    <ts>2019-02-09T06:58:22.202500</ts>
    <user>Lory</user>
    <text>Tell us about this project of yours.</text>
  </message>
  <message conversation_id="401">
    <ts>2019-02-09T08:47:19.203300</ts>
    <user>Halina</user>
    <text>ah, ok thanks everyone!</text>
  </message>
  <message conversation_id="406">
    <ts>2019-02-09T09:52:28.204200</ts>
    <user>Mirian</user>
    <text>Hi everyone, is there a list of Web APIs supported by elm somewhere on the Internet?</text>
  </message>
  <message conversation_id="406">
    <ts>2019-02-09T09:53:13.204700</ts>
    <user>Mirian</user>
    <text>If no, do you think a resource like this would be useful to have in the community?</text>
  </message>
  <message conversation_id="406">
    <ts>2019-02-09T09:55:32.205600</ts>
    <user>Mirian</user>
    <text>The goal would be to keep track of the state of Elm support for these - something kinda similar to Rust's &lt;https://www.arewewebyet.org/&gt; and &lt;http://arewegameyet.com/&gt;</text>
  </message>
  <message conversation_id="407">
    <ts>2019-02-09T11:15:20.206000</ts>
    <user>Chandra</user>
    <text>Correct me if I'm wrong, but doesn't ports make this a non issue. I mean you can't access every webapi directly in elm, but elm does not prevent you from interacting with them threw ports.</text>
  </message>
  <message conversation_id="407">
    <ts>2019-02-09T11:15:33.206200</ts>
    <user>Hoyt</user>
    <text>&lt;https://kitty-tea-party.com/&gt;
It is called Kitty Tea Party. It is a cryptokitty-related project. Some blockchain-interactions, some api calls. Perfect for Elm! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="407">
    <ts>2019-02-09T11:15:59.206400</ts>
    <user>Hoyt</user>
    <text>I’ve currently got the system interfacing with metamask to get your wallet address, then querying the cryptokitty api for your cryptokitties :slightly_smiling_face:</text>
  </message>
  <message conversation_id="407">
    <ts>2019-02-09T11:16:47.206600</ts>
    <user>Hoyt</user>
    <text>I am hoping to start to have a lot more time next week to continue working on it, as it looks like I should be down to 3 days of work a week, so I’ll have days to dedicate.</text>
  </message>
  <message conversation_id="407">
    <ts>2019-02-09T11:17:16.206800</ts>
    <user>Hoyt</user>
    <text>I used to do a lot of Elm (used it full-time at our work), but haven’t in the past bit of time while I’ve bee working on other stuff. I’m VERY happy to be back using it.</text>
  </message>
  <message conversation_id="408">
    <ts>2019-02-09T12:06:53.207100</ts>
    <user>Mirian</user>
    <text>Sure I can, but I guess folks generally would prefer to do this in elm directly?</text>
  </message>
  <message conversation_id="408">
    <ts>2019-02-09T12:11:24.208800</ts>
    <user>Earnestine</user>
    <text>trying to migrate a library from elm18 to elm19... it was in version 1.0.2 - `elm publish` tells me now that the package has not been published yet and wants me to set up the version to 1.0.0 , I'd rather expect it to be 2.0.0</text>
  </message>
  <message conversation_id="408">
    <ts>2019-02-09T12:27:08.209900</ts>
    <user>Agustin</user>
    <text>There was a bug around that but just as a :rubberduck: the package name has to be the same, if you’re forking someone elses package it’s your `1.0.0` I believe.</text>
  </message>
  <message conversation_id="408">
    <ts>2019-02-09T12:33:15.210600</ts>
    <user>Earnestine</user>
    <text>mhh, the name is exactly the same in my case.. I wonder if I should publish the 1.0.0 or not... looks not right to me...</text>
  </message>
  <message conversation_id="408">
    <ts>2019-02-09T12:33:35.210800</ts>
    <user>Earnestine</user>
    <text>it's no fork</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-09T13:31:19.212000</ts>
    <user>Lynn</user>
    <text>Anyone know whether elm-xref supports 0.18</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-09T13:31:31.212300</ts>
    <user>Lynn</user>
    <text>&lt;@Huong&gt; ^^</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-09T13:32:24.212800</ts>
    <user>Huong</user>
    <text>&lt;@Lynn&gt; elm-xref@0.2.2 does!</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-09T13:32:37.213000</ts>
    <user>Lynn</user>
    <text>aha - let me try</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-09T13:50:13.214400</ts>
    <user>Earnestine</user>
    <text>is it possible in elm18 to read out the image data (pixels) from a response of a http request (jpg/png..).</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-09T13:50:41.214500</ts>
    <user>Chandra</user>
    <text>Yeah prob, Yeah it makes sense.</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-09T14:09:33.215200</ts>
    <user>Lynn</user>
    <text>thanks &lt;@Huong&gt; seems to have worked perfectly</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-09T14:09:53.215800</ts>
    <user>Lynn</user>
    <text>on Monday I've got about 60 functions to remove</text>
  </message>
  <message conversation_id="410">
    <ts>2019-02-09T14:18:41.215900</ts>
    <user>Virgie</user>
    <text>pretty sure you'd need ports to do that (barring very dirty hacks where you can somehow turn a string back into the bytes of the image and then decode it into pixel data).

In 0.19 it should be possible given that you create a decoder for images (which would be very useful)</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-10T03:55:41.218000</ts>
    <user>Earnestine</user>
    <text>would appreciate a lot if someone has a hint here.
it's about this package: &lt;https://github.com/thought2/elm-wikimedia-commons&gt;
it existed for elm 18 from the versions 1.0.0 to 1.1.0.
the master branch of the repo now contains the code for elm19. (currently tagged with 2.0.0)</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-10T04:38:36.219200</ts>
    <user>Lynn</user>
    <text>wow, just started to examine the results of xref: it's really smart</text>
  </message>
  <message conversation_id="409">
    <ts>2019-02-10T04:39:24.219400</ts>
    <user>Earnestine</user>
    <text>To me it looks that elm18 libraries, that have been published after the release of elm19 don't appear in `&lt;https://package.elm-lang.org/all-packages&gt;`.</text>
  </message>
  <message conversation_id="411">
    <ts>2019-02-10T04:43:40.219900</ts>
    <user>Leatrice</user>
    <text>is it just me or ellie isn’t working?</text>
  </message>
  <message conversation_id="411">
    <ts>2019-02-10T04:45:06.220200</ts>
    <user>Lynne</user>
    <text>Safari swears at SSL certificate</text>
  </message>
  <message conversation_id="411">
    <ts>2019-02-10T04:45:34.220500</ts>
    <user>Lynne</user>
    <text>Chrome also</text>
  </message>
  <message conversation_id="412">
    <ts>2019-02-10T05:57:12.223800</ts>
    <user>Desire</user>
    <text>do we have official docs about blockline comments vs annotation comments? I'm assuming `{- comment -}` is different from `{-| annotation -}`</text>
  </message>
  <message conversation_id="412">
    <ts>2019-02-10T06:00:07.225400</ts>
    <user>Danika</user>
    <text>`{-| -}` and `--|` can be used to generate documentation and so can contain markdown, other than that there’s no reason to use one over the other. Unless you’re publishing a package, in which case anything your package exposes needs to have doc comments.</text>
  </message>
  <message conversation_id="412">
    <ts>2019-02-10T06:42:57.227200</ts>
    <user>Desire</user>
    <text>My question is basically if there is official documentation about that</text>
  </message>
  <message conversation_id="412">
    <ts>2019-02-10T06:43:55.227400</ts>
    <user>Danika</user>
    <text>&lt;https://package.elm-lang.org/help/documentation-format&gt; maybe ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="412">
    <ts>2019-02-10T06:51:36.228600</ts>
    <user>Desire</user>
    <text>Thx, we got to many official sources floating around :/</text>
  </message>
  <message conversation_id="413">
    <ts>2019-02-10T06:56:16.228700</ts>
    <user>Huong</user>
    <text>It's kind of interesting that it's really not all that clever :smile:</text>
  </message>
  <message conversation_id="413">
    <ts>2019-02-10T06:59:56.228900</ts>
    <user>Lynn</user>
    <text>hmm. it works out that things are dead even when referred to but not in a meaningful way. </text>
  </message>
  <message conversation_id="413">
    <ts>2019-02-10T07:02:00.229100</ts>
    <user>Huong</user>
    <text>Yep. It creates a callgraph from the entrypoint(s) of your application. Any function that does not appear in the callgraph is unused.</text>
  </message>
  <message conversation_id="413">
    <ts>2019-02-10T07:03:23.229300</ts>
    <user>Lynn</user>
    <text>but it also seemed to find messages that were used in update function, but not in view/subscriptions ie that were unreachable</text>
  </message>
  <message conversation_id="413">
    <ts>2019-02-10T07:04:19.229500</ts>
    <user>Huong</user>
    <text>Yeah, it only counts function calls - appearing in a pattern match doesn't "call" anything, so it doesn't count those</text>
  </message>
  <message conversation_id="414">
    <ts>2019-02-10T08:54:30.234100</ts>
    <user>Else</user>
    <text>Hello. What are the current best practices of building reusable UIs in elm?</text>
  </message>
  <message conversation_id="414">
    <ts>2019-02-10T08:54:44.234300</ts>
    <user>Else</user>
    <text>Also, some people create stylesheets separately in .css file, others use elm-css. When one method can outweigh another?</text>
  </message>
  <message conversation_id="415">
    <ts>2019-02-10T10:42:46.235600</ts>
    <user>Jonah</user>
    <text>not just you</text>
  </message>
  <message conversation_id="414">
    <ts>2019-02-10T11:14:06.237300</ts>
    <user>Lynn</user>
    <text>I think one way of summarising is to say write reusable functions that update state, and reusable functions that produce Dom sections, but don't write reusable UI</text>
  </message>
  <message conversation_id="416">
    <ts>2019-02-10T11:48:33.239600</ts>
    <user>Bert</user>
    <text>I have been doing frontend for a decade, with all kinds of frameworks. I still have a hard time understanding what reusable UI would look like, barring button look&amp;amp;feel etc. </text>
  </message>
  <message conversation_id="417">
    <ts>2019-02-10T12:56:12.240000</ts>
    <user>Lynn</user>
    <text>is there a special incantation to get xref to examine my tests directory. I tried running it in the tests directory and it said it was looking at `.` but it didn't report anything, which might be correct but I doubt it</text>
  </message>
  <message conversation_id="415">
    <ts>2019-02-10T12:58:53.240200</ts>
    <user>Huong</user>
    <text>I'm not entirely sure what you mean. Could you describe a particular scenario? :thinking_face:</text>
  </message>
  <message conversation_id="417">
    <ts>2019-02-10T13:00:33.240600</ts>
    <user>Lynn</user>
    <text>I have dead code in my tests directory too (at least at I presume I do). can xref be used to find that?</text>
  </message>
  <message conversation_id="417">
    <ts>2019-02-10T13:06:20.240800</ts>
    <user>Huong</user>
    <text>Not currently (I honestly hadn't considered that use case yet!) in the sense that it doesn't know to consider exposed `Test` values as entrypoints. Feel free to open an issue, though I  should mention that I don't know if I'll also be implementing this for 0.18</text>
  </message>
  <message conversation_id="416">
    <ts>2019-02-10T15:42:52.241200</ts>
    <user>Maida</user>
    <text>There are all kinds of business needs where there is a need for something that people have seen somewhere else and already know how to use.

You can have reusable widgets on the simpler side like a dropdown and you can have complex widgets like a virtual table data editor.

Some of these widgets, like an autocomplete widget are surprisingly complex to implement. Using a readily made library where someone solved all the quirks saves a lot of time. Of course, using a poorly implemented library can waste a lot of time because one would have to deal with the problems introduced by the library.</text>
  </message>
  <message conversation_id="416">
    <ts>2019-02-10T15:44:45.241400</ts>
    <user>Maida</user>
    <text>Also, when people reach for “reusable widgets”, in some of the cases they are not actually looking for reusability but for abstraction. They want to abstract away some hairy piece of the UI in order to be able to think clearly about the rest of the UI.</text>
  </message>
  <message conversation_id="415">
    <ts>2019-02-10T16:16:37.243300</ts>
    <user>Leoma</user>
    <text>I have an app that has a type of view with data presented in “cards”. I also, have another view, which is made up of multiple simultaneous instances of the previous view.
I’m reusing the “card” data view, as well as re-using the subview.
I also made a reusable date-picker from scratch.
And a reusable “undoable” text editor component.
I’m using a package I built &lt;https://package.elm-lang.org/packages/z5h/component-result/latest/&gt; to make this all glue together rather well.
I’m not convinced we shouldn’t call an (init/update/view) tuple a component (and by component I mean the standard english definition of being a smaller part of a larger thing).
For me, this style hasn’t created any more problems than I’d expect with any other style.</text>
  </message>
  <message conversation_id="418">
    <ts>2019-02-10T16:34:52.243700</ts>
    <user>Earlean</user>
    <text>Why use the word 'component' when the word 'module' is already part of the Elm language?</text>
  </message>
  <message conversation_id="418">
    <ts>2019-02-10T17:09:55.245900</ts>
    <user>Leoma</user>
    <text>In Elm, module is a keyword with a different meaning.</text>
  </message>
  <message conversation_id="418">
    <ts>2019-02-10T17:21:02.247400</ts>
    <user>Leoma</user>
    <text>I might have a module for parsing various numerical formats, and formatting numbers. But it’s not exactly a component.</text>
  </message>
  <message conversation_id="415">
    <ts>2019-02-10T18:00:26.247700</ts>
    <user>Simon</user>
    <text>&lt;@Leoma&gt; I’m with you on this, by far and large this pattern has worked over and over for us</text>
  </message>
  <message conversation_id="419">
    <ts>2019-02-10T21:35:52.248100</ts>
    <user>Nicolasa</user>
    <text>Elm blog says RealWorld app can be as little as 29kb for the whole app. I’m curious what’s the size of a hello world? Trying to compare what it would be like against something like Preact for something really simple. </text>
  </message>
  <message conversation_id="415">
    <ts>2019-02-10T23:31:38.000600</ts>
    <user>Nga</user>
    <text>How do you do "onInput" for firing a msg when a select dropdown changes value? onInput doesn't seem to fire it.</text>
  </message>
  <message conversation_id="420">
    <ts>2019-02-10T23:43:28.001000</ts>
    <user>Ruthann</user>
    <text>we use Html.Events.onInput, there must be something else at play with your code</text>
  </message>
  <message conversation_id="415">
    <ts>2019-02-10T23:44:51.001500</ts>
    <user>Ruthann</user>
    <text>I don’t think the Keyed part makes a diff &lt;@Nga&gt;
```
|&amp;gt; Html.Keyed.node "select" [ HE.onInput onSelect ]
```</text>
  </message>
  <message conversation_id="415">
    <ts>2019-02-10T23:45:26.002000</ts>
    <user>Nga</user>
    <text>Yeah you're right &lt;@Ruthann&gt;, silly me had it on the options field in my loop instead of the select. Thank you.</text>
  </message>
  <message conversation_id="415">
    <ts>2019-02-10T23:45:56.002500</ts>
    <user>Ruthann</user>
    <text>nw, sometimes to confirm something actually works makes all the difference</text>
  </message>
  <message conversation_id="421">
    <ts>2019-02-11T00:48:20.002700</ts>
    <user>Maida</user>
    <text>```
elm make src/Main.elm --optimize --output=elm.js
elm-minify elm.js
gzip elm.min.js
```
gives you a 2.7kb elm.min.gz</text>
  </message>
  <message conversation_id="422">
    <ts>2019-02-11T03:36:47.003100</ts>
    <user>Shaunta</user>
    <text>Hello all! I'm not sure there are a lot of people on &lt;#C0JA8SJ2V|elm-reactor&gt;, so I'm sharing this here, if anyone has an answer :slightly_smiling_face:</text>
  </message>
  <message conversation_id="422">
    <ts>2019-02-11T03:54:24.004800</ts>
    <user>Lea</user>
    <text>This must be due to the Markdown library changing `sanitize` to be True as default since 0.19. Which means all html gets escaped</text>
  </message>
  <message conversation_id="422">
    <ts>2019-02-11T03:55:42.005900</ts>
    <user>Lea</user>
    <text>You could file an issue, this is where you want to use `toHtmlWith` &lt;https://github.com/elm/compiler/blob/master/reactor/src/Index/Skeleton.elm#L37&gt;</text>
  </message>
  <message conversation_id="422">
    <ts>2019-02-11T04:12:50.006000</ts>
    <user>Shaunta</user>
    <text>Thanks &lt;@Lea&gt;, I'll have a look and try to open an issue :slightly_smiling_face:</text>
  </message>
  <message conversation_id="422">
    <ts>2019-02-11T04:25:30.006200</ts>
    <user>Shaunta</user>
    <text>Hum, not sure issues are the good way to go, the contribution guidelines indicates that it's for bugs only, so I'll maybe make a Discourse post later today</text>
  </message>
  <message conversation_id="423">
    <ts>2019-02-11T04:44:31.006500</ts>
    <user>Sadie</user>
    <text>Hello</text>
  </message>
  <message conversation_id="423">
    <ts>2019-02-11T04:44:50.007000</ts>
    <user>Sadie</user>
    <text>I reach this error with Elm 0.19
```
Success! Compiled 2 modules.                                         
elm: Map.!: given key is not an element in the map
CallStack (from HasCallStack):
  error, called at ./Data/Map/Internal.hs:610:17 in containers-0.5.11.0-K2TDqgYtGUcKxAY1UqVZ3R:Data.Map.Internal
```</text>
  </message>
  <message conversation_id="422">
    <ts>2019-02-11T04:45:06.007100</ts>
    <user>Lea</user>
    <text>An undocumented change of behaviour could be seen as a bug. Also html is valid in Markdown. That said, discourse seems fine as well :slightly_smiling_face: . I think html is also disabled on &lt;http://package.elm-lang.org|package.elm-lang.org&gt;, so it’s probably be deliberate.</text>
  </message>
  <message conversation_id="423">
    <ts>2019-02-11T04:46:28.007500</ts>
    <user>Sadie</user>
    <text>For some reasons running elm make kinda fixed it</text>
  </message>
  <message conversation_id="423">
    <ts>2019-02-11T04:50:24.008000</ts>
    <user>Lynne</user>
    <text>That's a known issue. People say running `elm make` without `--debug` fixes it so it might be your case as well.</text>
  </message>
  <message conversation_id="423">
    <ts>2019-02-11T05:37:55.008400</ts>
    <user>Sadie</user>
    <text>Yes, but then I cannot use the debugger anymore :confused:</text>
  </message>
  <message conversation_id="423">
    <ts>2019-02-11T06:16:55.009000</ts>
    <user>Lynn</user>
    <text>yes, its a real problem for many many 0.19 users.</text>
  </message>
  <message conversation_id="423">
    <ts>2019-02-11T06:17:03.009300</ts>
    <user>Lynn</user>
    <text>there is a patched compiler via &lt;https://github.com/tomstejskal/compiler&gt;</text>
  </message>
  <message conversation_id="423">
    <ts>2019-02-11T06:17:39.010000</ts>
    <user>Lynn</user>
    <text>Evan has stated that he’s working on a bunch of compiler bugs, but I’ve never seen a timetable for the fixes to land</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:09:36.010300</ts>
    <user>Renda</user>
    <text>Bug fixes in Elm do come out asap and not with the next version right? :sweat_smile:</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:09:44.010500</ts>
    <user>Renda</user>
    <text>Version as in Elm 0.20</text>
  </message>
  <message conversation_id="423">
    <ts>2019-02-11T07:12:50.010700</ts>
    <user>Lynn</user>
    <text>I’d rather leave that to ‘inner-circle’ people to answer as I’m not sure</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:18:17.012100</ts>
    <user>Cammy</user>
    <text>Just based on past-precedent, there are sometimes 0.x.1 bug fixes. There may well be a 0.19.1 that’s just bug fixes. </text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:19:48.012900</ts>
    <user>Garnett</user>
    <text>Speaking of the compiler, are there some up-to-date instructions on building the `elm` binaries ourselves? E.g. so I could try &lt;https://github.com/elm/compiler/pull/1850&gt;</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:22:45.013800</ts>
    <user>Lynn</user>
    <text>None</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:23:28.014300</ts>
    <user>Garnett</user>
    <text>Thank you &lt;@Lynn&gt;!</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:23:56.014400</ts>
    <user>Garnett</user>
    <text>Starred too :wink:</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:27:09.015100</ts>
    <user>Lynn</user>
    <text>don’t forget to use `.lazy` :wink:</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:33:33.015600</ts>
    <user>Emilee</user>
    <text>hmm, it *can* be a bit frustrating not to be able to use `Url` as a key for dicts^^'</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:47:47.016200</ts>
    <user>Nana</user>
    <text>&lt;@Emilee&gt; you can use &lt;https://package.elm-lang.org/packages/pzp1997/assoc-list&gt; for that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="425">
    <ts>2019-02-11T07:52:28.016500</ts>
    <user>Emilee</user>
    <text>seems like access times are pretty meh for that, though?</text>
  </message>
  <message conversation_id="425">
    <ts>2019-02-11T07:52:50.016700</ts>
    <user>Emilee</user>
    <text>and insertions</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:54:00.017500</ts>
    <user>Emilee</user>
    <text>i guess i can just use it and see if it's a problem</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:54:02.017800</ts>
    <user>Nana</user>
    <text>&lt;@Emilee&gt; there's also this one which should be faster: &lt;https://package.elm-lang.org/packages/turboMaCk/any-dict&gt;</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:54:09.018100</ts>
    <user>Emilee</user>
    <text>most of our operations are probably going to be filters anyway</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:54:30.018600</ts>
    <user>Nana</user>
    <text>however it stores a function in the model, which I think breaks debugging</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:55:02.019500</ts>
    <user>Emilee</user>
    <text>yeah, the problem with any-dict is that it stores the comparator in the datastructure afair. that's not so nice for storing in the model</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:55:07.019700</ts>
    <user>Emilee</user>
    <text>yeah^^</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:55:16.020000</ts>
    <user>Emilee</user>
    <text>and probably hot-reloading too</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:55:18.020200</ts>
    <user>Nana</user>
    <text>but if your dict isn't more than a few hundred items I doubt the performance matters</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:55:30.020500</ts>
    <user>Emilee</user>
    <text>you're probably right</text>
  </message>
  <message conversation_id="424">
    <ts>2019-02-11T07:55:48.020900</ts>
    <user>Emilee</user>
    <text>i'll use assoc-list for now and see where that takes me :slightly_smiling_face:</text>
  </message>
  <message conversation_id="426">
    <ts>2019-02-11T08:09:44.023200</ts>
    <user>Earnestine</user>
    <text>is there a way to use elm19 packages inside a elm18 project? maybe there's a transpiler or so?</text>
  </message>
  <message conversation_id="426">
    <ts>2019-02-11T08:12:20.024100</ts>
    <user>Earlean</user>
    <text>&lt;@Le&gt; there is not</text>
  </message>
  <message conversation_id="426">
    <ts>2019-02-11T08:18:12.026100</ts>
    <user>Antonette</user>
    <text>&lt;@Earnestine&gt; depending on how hard the transition would be, maybe you'd be better migrating to 0.19 altogether ; else you could consider getting an earlier version of the module(s) you need, maybe copy some of the later functionalities and adapt them or something.</text>
  </message>
  <message conversation_id="426">
    <ts>2019-02-11T08:18:36.026600</ts>
    <user>Antonette</user>
    <text>What is your use case though? Maybe we can give a better (less generic) advice depending on the situation.</text>
  </message>
  <message conversation_id="426">
    <ts>2019-02-11T08:19:09.026900</ts>
    <user>Maida</user>
    <text>or maybe the package has a `0.18` version :slightly_smiling_face:</text>
  </message>
  <message conversation_id="426">
    <ts>2019-02-11T08:26:20.028900</ts>
    <user>Earnestine</user>
    <text>well the use case is converting a very large code base to 19 :slightly_smiling_face:
And of course it would be preferable to do this in chunks. So the idea was to factor out parts into a elm19 library, and then (if there was the magic transpiler) already use this from our 18 project.</text>
  </message>
  <message conversation_id="427">
    <ts>2019-02-11T08:34:32.033900</ts>
    <user>Luba</user>
    <text>Have anyone implemented an algorithm to generate pagination items? It seems like a common problem (When there are many pages so you only want to show some of them), but elm bootstrap doesn't seem to have implemented it.</text>
  </message>
  <message conversation_id="428">
    <ts>2019-02-11T08:45:43.034400</ts>
    <user>Iona</user>
    <text>This may help: &lt;https://discourse.elm-lang.org/t/backslide-scripts-for-incremental-0-19-upgrade/1819/2&gt;</text>
  </message>
  <message conversation_id="427">
    <ts>2019-02-11T08:47:33.034900</ts>
    <user>Nana</user>
    <text>&lt;@Luba&gt; there are some packages if your search for "paginate"</text>
  </message>
  <message conversation_id="427">
    <ts>2019-02-11T08:59:44.037300</ts>
    <user>Luba</user>
    <text>&lt;@Nana&gt; Seems like those are more complete packages with overlapping functionality of elm-bootstrap. Couldn't really find any with just the items generation. One of them generated bootstrap HTML though, so might use that one</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:12:53.037700</ts>
    <user>Sadie</user>
    <text>How am I supposed to use that?</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:18:35.038200</ts>
    <user>Sadie</user>
    <text>Does anyone know of steps to compile the compiler from the source code?</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:18:44.038400</ts>
    <user>Niesha</user>
    <text>Depends on the compiler</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:18:55.038800</ts>
    <user>Sadie</user>
    <text>I'd like to try the patched version here: &lt;https://github.com/elm/compiler/pull/1850&gt;</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:19:18.039000</ts>
    <user>Sadie</user>
    <text>#MissingDebug</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:19:55.039100</ts>
    <user>Garnett</user>
    <text>&lt;@Sadie&gt;</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:20:42.039400</ts>
    <user>Garnett</user>
    <text>The repository layout has changed a little, so the `.cabal` file is in the root</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:20:57.039600</ts>
    <user>Garnett</user>
    <text>fwiw I haven’t successfully had `stack build` work</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:21:19.040300</ts>
    <user>Niesha</user>
    <text>I'd go with installing stack (from &lt;http://stackage.org|stackage.org&gt;), `stack init` and then `stack install`</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:21:23.040600</ts>
    <user>Niesha</user>
    <text>might work just fine</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:21:51.041300</ts>
    <user>Sadie</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:21:53.041500</ts>
    <user>Niesha</user>
    <text>There's currently a holy war going on between cabal (package manager) and stack (package set manager) in Haskell land :disappointed:</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:22:31.042000</ts>
    <user>Garnett</user>
    <text>Anyone had it successfully compile on macOS, and wouldn’t mind uploading the binaries?</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:30:31.042300</ts>
    <user>Earnestine</user>
    <text>yeah... this is very helpful. I'm wondering why this is not published as a 18 package? Anything against me publishing these files as `elm-future19` or so?</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:33:04.042500</ts>
    <user>Sadie</user>
    <text>&lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1549887765013800&gt;</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:37:12.042800</ts>
    <user>Lynn</user>
    <text>those instructions worked a charm for me. It makes 0.19 possible for us now, but still a lot of code to migrate</text>
  </message>
  <message conversation_id="430">
    <ts>2019-02-11T10:38:42.043500</ts>
    <user>Emilee</user>
    <text>hmm, `Decode.datetime` doesn't work for me for some reason O.o
```
(3) Problem with the value at json.creationDate:
    
        "2019-02-11T15:33:22.588Z"
    
    Expecting a STRING
```
^ shouldn't this be valid?</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:39:58.044000</ts>
    <user>Emilee</user>
    <text>ah, it's not a valid format apparently</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:40:08.044300</ts>
    <user>Emilee</user>
    <text>but still, the error message seems weird</text>
  </message>
  <message conversation_id="430">
    <ts>2019-02-11T10:41:05.044900</ts>
    <user>Emilee</user>
    <text>it seems the thing i'm trying to parse is not a date string but a `Date` value... is there any way I can decode that without converting it to a string on the js side?</text>
  </message>
  <message conversation_id="430">
    <ts>2019-02-11T10:43:38.045000</ts>
    <user>Earnestine</user>
    <text>None</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T10:54:53.045800</ts>
    <user>Niesha</user>
    <text>&lt;@Garnett&gt; &lt;@Sadie&gt; I remember someone having a stack.yaml flying around, I'll see if I can find it - with that, it should be a breeze</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T10:55:52.045900</ts>
    <user>Denae</user>
    <text>&lt;@Garnett&gt; You need to use the proper resolver for stack, the most recent one doesn't work. I think lts-11.20 should work &lt;https://lisplog.org/building_the_elm_compiler.html&gt;</text>
  </message>
  <message conversation_id="430">
    <ts>2019-02-11T10:58:07.046500</ts>
    <user>Emilee</user>
    <text>I created a monster
```
dateDecoder : Decoder Time.Posix
dateDecoder =
    Decode.value
        |&amp;gt; Decode.andThen
            (\val -&amp;gt;
                Encode.encode 0 val
                    |&amp;gt; Decode.decodeString Decode.datetime
                    |&amp;gt; Result.mapError Decode.errorToString
                    |&amp;gt; Decode.fromResult
            )
```</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:02:17.046700</ts>
    <user>Garnett</user>
    <text>Ah okay!</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:02:37.047100</ts>
    <user>Carman</user>
    <text>Hmmm I'm not sure I understand why that's necessary?</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:02:50.047400</ts>
    <user>Nicolasa</user>
    <text>Thanks. That is quite impressive. </text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:03:19.047600</ts>
    <user>Carman</user>
    <text>You have a string coming in through a port?</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:05:19.048400</ts>
    <user>Huong</user>
    <text>date as a string (but not a json string) parsed through ports, I'm guessing</text>
  </message>
  <message conversation_id="429">
    <ts>2019-02-11T11:06:22.049000</ts>
    <user>Huong</user>
    <text>anyway</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:06:40.049400</ts>
    <user>Huong</user>
    <text>that still looks equivalent to `dateDecoder = Decode.dateTime`</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:07:46.049800</ts>
    <user>Huong</user>
    <text>&amp;gt; not a date string but a `Date` value...

Ah, should've read up</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:09:37.050500</ts>
    <user>Carman</user>
    <text>hmmm I didn't realize date objects were valid `Value`s?</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:09:56.050900</ts>
    <user>Huong</user>
    <text>Anything is a valid `Value` if it's coming through a port</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:11:21.051700</ts>
    <user>Carman</user>
    <text>I see. But it's unusable unless you stringify it, hence that `Encode.encode`?</text>
  </message>
  <message conversation_id="432">
    <ts>2019-02-11T11:15:23.053300</ts>
    <user>Candance</user>
    <text>Hey folks! I'm new to Elm, just installed it today. What do you think about &lt;http://package.elm-lang.org|package.elm-lang.org&gt; being blocked in Russia? It's some kind of blocker for new users. Of course we can all use VPNs and proxies but...</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:16:19.053800</ts>
    <user>Agustin</user>
    <text>Theres not a lot that can be done about it I believe</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:17:02.055000</ts>
    <user>Agustin</user>
    <text>Its due to the blocking of a large part of AWS in order to disable telegram</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:17:03.055400</ts>
    <user>Agustin</user>
    <text>AFAIK</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:17:12.055600</ts>
    <user>Agustin</user>
    <text>I may be misinformed</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:21:03.057800</ts>
    <user>Candance</user>
    <text>I see two ways of solving this issue:
1. Move to non-blocked IP inside of Amazon/DigitalOcean/whatever. Lot's of IP is still available and they (government) unblocked 20 millions of Amazon IPs recently.
2. Build local mirrors for such "problematic" regions as Russia, China, Iran, etc</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:21:43.058500</ts>
    <user>Candance</user>
    <text>By the way, Telegram is still working fine :slightly_smiling_face:</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:22:04.058900</ts>
    <user>Agustin</user>
    <text>The attempt to block Telegram then :stuck_out_tongue:</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:22:22.059400</ts>
    <user>Agustin</user>
    <text>1. Is difficult, as it relies on trial and error to get an ip that isn’t blocked
2. Requires some one to volunteer to do so</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:22:48.059800</ts>
    <user>Agustin</user>
    <text>Everyone agrees it’s sub optimal :confused:</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:23:21.060500</ts>
    <user>Candance</user>
    <text>Is there a way to "plug-n-play" a mirror or we need to develop a solution?</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:24:30.061500</ts>
    <user>Agustin</user>
    <text>I think you’d need some way to indicate the dns</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:24:56.061800</ts>
    <user>Candance</user>
    <text>Also list of mirrors should be built in elm binary, and then it should select one with minimal ping</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:25:15.062400</ts>
    <user>Candance</user>
    <text>I believe Debian works like this</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:25:19.062500</ts>
    <user>Agustin</user>
    <text>Yes I think you’d have to do something like that</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:26:30.063700</ts>
    <user>Agustin</user>
    <text>Another problem is Elm is basically a one person project, so we are limited by Evans bandwidth</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:27:16.064100</ts>
    <user>Agustin</user>
    <text>In short, vpn is easier :slightly_smiling_face:</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:27:58.064200</ts>
    <user>Candance</user>
    <text>What do you mean? Indicate dns?</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:28:49.064400</ts>
    <user>Candance</user>
    <text>I can resolve &lt;http://package.elm-lang.org|package.elm-lang.org&gt; to 159.89.227.162, even can ping it, but can't `curl` it or open with browser</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:30:19.064700</ts>
    <user>Agustin</user>
    <text>What you then elaborate on later</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:30:38.064900</ts>
    <user>Agustin</user>
    <text>You need someway for elm to know where the packages are</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:32:57.065100</ts>
    <user>Emilee</user>
    <text>yep^^' at least i'm not sure how else i could parse it. I'm just thankful the `toString` of `Date` seems safe</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:34:05.065800</ts>
    <user>Candance</user>
    <text>Isn't it an opensource project? I believe we are all welcome to contribute :slightly_smiling_face:</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:36:46.066300</ts>
    <user>Carman</user>
    <text>It sounds like it might be better to stringify on the JS side of things? Then you have control over how the date gets serialized instead of hoping `Encode.encode` does the right thing for a JS date object.</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:36:57.066700</ts>
    <user>Desire</user>
    <text>yes, still there are multiple ways to contribute</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:38:06.067800</ts>
    <user>Desire</user>
    <text>I feel like evan has too many other repos that are not the compiler, like the packages website under only his hand</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:38:51.068000</ts>
    <user>Agustin</user>
    <text>BDFL</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:39:10.068100</ts>
    <user>Emilee</user>
    <text>the problem there is that this date is deep within a data structure we use as redux state. i'm trying to build a parser that can take the verbatim redux state and convert it to a strongly typed elm record, so we can slowly switch our application state to elm</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:40:02.068900</ts>
    <user>Desire</user>
    <text>not sure if that is really what BDFL is about</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:40:33.069100</ts>
    <user>Candance</user>
    <text>Benevolent Dictator For Life</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:40:43.069300</ts>
    <user>Candance</user>
    <text>like Guido in Python</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:43:02.070600</ts>
    <user>Candance</user>
    <text>by the way why all of the stuff is built with Haskell? I feel that it would be much simpler with Python, at least packages website</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:44:42.072400</ts>
    <user>Candance</user>
    <text>(I'm from procedural or OOP world)</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:44:43.072500</ts>
    <user>Nana</user>
    <text>&lt;@Candance&gt; well, since Elm is a ML-family language, and the compiler is written in Haskell, it makes sense that other stuff is written in those languages as well (plus that's what Evan knows I guess)</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:45:06.073100</ts>
    <user>Danika</user>
    <text>simple is subjective</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:49:10.074400</ts>
    <user>Saran</user>
    <text>Hey everyone, how often do you all add fields to records? Like, use the `{ myRecord | newField = 42 }` syntax? I haven't needed to use that in a long time, but I'm aware that I'm not using elm like most elm devs do.</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:50:45.075100</ts>
    <user>Danika</user>
    <text>You mean adding a new field?</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:51:25.075600</ts>
    <user>Danika</user>
    <text>Doesn't seem like something you'd want to do very often unless you were leaning into extensible records a lot, which isn't common</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:51:40.075800</ts>
    <user>Saran</user>
    <text>yeah, adding a new field</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:51:47.076300</ts>
    <user>Nana</user>
    <text>hmm I thought that wasn't allowed anymore</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:52:54.077700</ts>
    <user>Saran</user>
    <text>I'd expect it to be used heavily for the model? That most apps use a huge flat record as its state, and that people update fields using record update syntax, but not that people add fields dynamically</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:53:06.077900</ts>
    <user>Danika</user>
    <text>I've never tried it / needed to, but it does seem like something not very elm-like.</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:53:36.078500</ts>
    <user>Danika</user>
    <text>This seems *horrible* to be doing to your model. Every update your models type would change :')</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T11:53:45.078800</ts>
    <user>Saran</user>
    <text>fair enough, it doesn't seem to be supported in 0.19 anymore "The `a` record does not have a `y` field:"</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:54:07.079300</ts>
    <user>Saran</user>
    <text>eh, we've got type variables, right? :wink:</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:54:23.080200</ts>
    <user>Agustin</user>
    <text>You can change them, but not add them I believe</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:54:29.080600</ts>
    <user>Saran</user>
    <text>ok, nobody's using it, and I didn't notice for 8 months that support for them was removed</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:54:31.080800</ts>
    <user>Saran</user>
    <text>cool</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:54:31.080900</ts>
    <user>Nana</user>
    <text>&lt;@Saran&gt; yeah you can update records, and you can use extensible records for type signatures, but you can't add fields like that</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:54:31.081000</ts>
    <user>Danika</user>
    <text>Seems like if it was ever allowed, that it was just a consequence of how it handled record updating</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:55:26.081800</ts>
    <user>Nana</user>
    <text>I think it used to be possible, but no one used it, and it would make future garbage collection much harder, so it was removed</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T11:57:34.082200</ts>
    <user>Emilee</user>
    <text>uuuuuh... what?
```
This argument is an anonymous function of type:

    Skin -&amp;gt; Element.Element msg

But `Element` needs the 1st argument to be:

    #Skin# -&amp;gt; Element.Element msg
```</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T12:00:15.082700</ts>
    <user>Emilee</user>
    <text>oh, i get what's wrong. but the compiler message still makes no sense</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T12:04:03.082900</ts>
    <user>Danika</user>
    <text>what was the problem?</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T12:07:17.084500</ts>
    <user>Agustin</user>
    <text>Input translation output rotation</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T12:07:46.085000</ts>
    <user>Denae</user>
    <text>The feature to add/remove fields to records was in Elm until 0.17 I believe. The reasoning for removing them as far as I remember was that it added quite a bit of complexity to the type checker and the implementation relied on JS prototype chains, the usage apparently wasn't very high so they opted to remove it.</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T12:11:48.085500</ts>
    <user>Denae</user>
    <text>~&amp;gt; &lt;https://github.com/elm/compiler/issues/985&gt;</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T12:17:03.086200</ts>
    <user>Saran</user>
    <text>whoa, so I haven't used it since 0.17 then?</text>
  </message>
  <message conversation_id="433">
    <ts>2019-02-11T12:17:13.086600</ts>
    <user>Emilee</user>
    <text>Elm actually wanted the whole upper signature to be `Skin`</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T12:17:31.087100</ts>
    <user>Emilee</user>
    <text>Which is to say, I forgot an argument </text>
  </message>
  <message conversation_id="434">
    <ts>2019-02-11T13:22:02.087900</ts>
    <user>Teddy</user>
    <text>Welcome back and wooooo!</text>
  </message>
  <message conversation_id="434">
    <ts>2019-02-11T13:26:47.088900</ts>
    <user>Bebe</user>
    <text>Does anyone know of an example of list items drag and drop reordering for mobile browsers (touch)?</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T14:00:58.089300</ts>
    <user>Hoyt</user>
    <text>I’m so excited to be back. Should be back to spending a lot of time in Elm next week, once I finish this ruby tapas episode.</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T14:03:29.089600</ts>
    <user>Teddy</user>
    <text>Awesome. I'll look forward to that too :wink:</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T14:07:21.091100</ts>
    <user>Hoyt</user>
    <text>Working on an episode (probably a two-parter) on polymorphic custom attributes in rails, following some of the episodes on whole values.</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T14:08:01.091800</ts>
    <user>Earnestine</user>
    <text>i think `elm reactor` is a nice tool. However, once you need to add a port to your elm file, it's pretty much much useless, right?
Do you have some tricks what to do then before starting to setup a whole build process?</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T14:17:03.092400</ts>
    <user>Danika</user>
    <text>Check out parcel, supports elm out if the box </text>
  </message>
  <message conversation_id="435">
    <ts>2019-02-11T14:20:50.092700</ts>
    <user>Teddy</user>
    <text>Ohhhh! Those will be fun.</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T14:52:31.093500</ts>
    <user>Velia</user>
    <text>&lt;https://www.npmjs.com/package/elm-live&gt; is a way.</text>
  </message>
  <message conversation_id="436">
    <ts>2019-02-11T14:54:02.094200</ts>
    <user>Earnestine</user>
    <text>looks very nice and works here for elm19... however, I'd need it for 18 now, does anyone know how to make this work?</text>
  </message>
  <message conversation_id="435">
    <ts>2019-02-11T15:49:18.094500</ts>
    <user>Lynne</user>
    <text>My own HTML5 D&amp;amp;D implementation works nice with this polyfill: &lt;https://github.com/Bernardo-Castilho/dragdroptouch&gt;</text>
  </message>
  <message conversation_id="435">
    <ts>2019-02-11T15:49:56.094700</ts>
    <user>Lynne</user>
    <text>norpan/elm-html5-drag-drop recommends using it also</text>
  </message>
  <message conversation_id="431">
    <ts>2019-02-11T16:22:33.096100</ts>
    <user>Florencia</user>
    <text>parcel works from 0.19 onwards I think but there is elm-live etc.(old versions will work with0.18)</text>
  </message>
  <message conversation_id="437">
    <ts>2019-02-11T17:08:24.096400</ts>
    <user>Bebe</user>
    <text>Thanks Sergey</text>
  </message>
  <message conversation_id="437">
    <ts>2019-02-11T17:10:57.097100</ts>
    <user>Bebe</user>
    <text>I found the norpan one, do you have a link for yours?</text>
  </message>
  <message conversation_id="438">
    <ts>2019-02-11T18:02:29.098500</ts>
    <user>Bernardina</user>
    <text>Is it possible to import CSS file into Elm code, or somehow instruct a compiler to include it in the generated `index.html`?</text>
  </message>
  <message conversation_id="438">
    <ts>2019-02-11T18:08:21.098600</ts>
    <user>Van</user>
    <text>You can use `Browser.element` as app root, build `js` bundle by your own and write down html file where you can include whatever you need</text>
  </message>
  <message conversation_id="438">
    <ts>2019-02-11T18:32:01.098800</ts>
    <user>Desire</user>
    <text>not limited to Browser.element btw</text>
  </message>
  <message conversation_id="438">
    <ts>2019-02-11T18:33:31.099500</ts>
    <user>Bernardina</user>
    <text>Is `elm reactor` suitable for production - i.e. can it be used to serve files in production?</text>
  </message>
  <message conversation_id="438">
    <ts>2019-02-11T18:33:44.099800</ts>
    <user>Bernardina</user>
    <text>Or should I use some other HTML server</text>
  </message>
  <message conversation_id="438">
    <ts>2019-02-11T18:40:25.101400</ts>
    <user>Alleen</user>
    <text>personally I would dump it to an html file and serve it via nginx, but if you’re okay with exposing the Reactor UI to anyone visiting your site, go right ahead.</text>
  </message>
  <message conversation_id="439">
    <ts>2019-02-11T18:49:13.103600</ts>
    <user>Jana</user>
    <text>Just published a package (`jxxcarlson/elm-stat`) on the package manager.  The README refers to an image.  It shows up locally and also on Github. /But on the package manager there is a the "broken image" icon.  Here is the relevant markdown text:

![Image](./image/dataviewer.png)</text>
  </message>
  <message conversation_id="438">
    <ts>2019-02-11T18:53:58.104100</ts>
    <user>Danika</user>
    <text>how would one go about decoding a Map: &lt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&gt;</text>
  </message>
  <message conversation_id="438">
    <ts>2019-02-11T19:29:00.105400</ts>
    <user>Lindsey</user>
    <text>&lt;@Bernardina&gt; I'd compile to index.html and then put it on &lt;http://github.io|github.io&gt;.  If you don't really need any server side stuff that's pretty easy.</text>
  </message>
  <message conversation_id="439">
    <ts>2019-02-11T19:52:18.106100</ts>
    <user>Earlean</user>
    <text>&lt;@Danika&gt; perhaps &lt;https://package.elm-lang.org/packages/elm-community/json-extra/latest/Json-Decode-Extra#collection&gt; will work.</text>
  </message>
  <message conversation_id="440">
    <ts>2019-02-11T19:54:43.106600</ts>
    <user>Danika</user>
    <text>Hmm</text>
  </message>
  <message conversation_id="440">
    <ts>2019-02-11T19:55:29.106900</ts>
    <user>Danika</user>
    <text>Maps aren’t array-like unfortunately</text>
  </message>
  <message conversation_id="440">
    <ts>2019-02-11T19:56:23.107100</ts>
    <user>Danika</user>
    <text>I think I’m SOL/</text>
  </message>
  <message conversation_id="440">
    <ts>2019-02-11T19:57:40.108300</ts>
    <user>Danika</user>
    <text>It wouldn’t be a problem but I’m dealing with some quite complex data structures that I don’t have much control over. I can call `toArray` on all necessary items directly but it’s going to make the js quite messy. Bummer ^^</text>
  </message>
  <message conversation_id="441">
    <ts>2019-02-12T00:32:06.109400</ts>
    <user>Bert</user>
    <text>Markdown doesn't really specify how relative URLs should be handled. I've seen this happen on some other git sites besides GitHub, too. </text>
  </message>
  <message conversation_id="441">
    <ts>2019-02-12T00:34:01.110900</ts>
    <user>Bert</user>
    <text>How do you get a Map through to Elm land though? Ports with Json.Decode.Value?</text>
  </message>
  <message conversation_id="442">
    <ts>2019-02-12T01:22:31.111000</ts>
    <user>Iona</user>
    <text>You’d probably just need to get the go ahead from the NoRedInk guys, as a formality but I think that it should be fine</text>
  </message>
  <message conversation_id="440">
    <ts>2019-02-12T01:46:41.111500</ts>
    <user>Danika</user>
    <text>Yes </text>
  </message>
  <message conversation_id="443">
    <ts>2019-02-12T02:52:09.111600</ts>
    <user>Lynne</user>
    <text>My implementation is not packaged and it is not better than norpan's package. It is just a direct implementation via event handlers which I did when I did not know that package existed.</text>
  </message>
  <message conversation_id="442">
    <ts>2019-02-12T03:04:36.111900</ts>
    <user>Velia</user>
    <text>In my opinion, running `elm reactor` in production could be a security and performance risk. I would not do it. Use a web server that is scrutinized for security issues and optimized.</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:34:32.113500</ts>
    <user>Earnestine</user>
    <text>elm-grove / elm-github-install... both work only for elm18 currently. Any ideas which one of them is more likely to be migrated to 19 soon?</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:34:58.113700</ts>
    <user>Shirley</user>
    <text>-- CORRUPT JSON ----------------------------------------------------------------

The elm.json for elm-community/list-extra 2.0.0 got corrupted somehow.

I removed it from my file cache, so if it was some transient error it should be
fixed if you try the same thing again. Please report this if it seems like an
Elm problem though!</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:35:39.114100</ts>
    <user>Shirley</user>
    <text>-- CORRUPT JSON ----------------------------------------------------------------

The elm.json for elm-community/list-extra 2.0.0 got corrupted somehow.

I removed it from my file cache, so if it was some transient error it should be
fixed if you try the same thing again. Please report this if it seems like an
Elm problem though!</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:36:12.115000</ts>
    <user>Shirley</user>
    <text>Sorry for the poor formatting, I'm trying to get it right but I'm new to slack. I keep getting the above error message when trying to install any package</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:41:14.115600</ts>
    <user>Lynne</user>
    <text>Latest version of `elm-community/list-extra` is 8.1.0, how come `elm` is trying to install 2.0.0?</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:41:40.116000</ts>
    <user>Velia</user>
    <text>I don't think any of those will be updated. AFAIK the author does not use elm anymore.

There is this though if you cannot live with a monorepo:
&lt;https://github.com/Skinney/elm-git-install&gt;</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:41:50.116300</ts>
    <user>Lynne</user>
    <text>Could you paste contents of your `elm.json` (in a thread please)?</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:44:54.117000</ts>
    <user>Shirley</user>
    <text>Sure, give me a minute or two for figuring out creating a thread. Thank you for your quick reply</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:45:10.117200</ts>
    <user>Lynne</user>
    <text>Here is a thread :slightly_smiling_face:</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:45:32.117500</ts>
    <user>Lynne</user>
    <text>Just hover mouse over message and you'll see an action pane to the right</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:46:04.117700</ts>
    <user>Shirley</user>
    <text>{
    "type": "application",
    "source-directories": [
        "src"
    ],
    "elm-version": "0.19.0",
    "dependencies": {
        "direct": {
            "NoRedInk/elm-json-decode-pipeline": "1.0.0",
            "elm/browser": "1.0.0",
            "elm/core": "1.0.0",
            "elm/html": "1.0.0",
            "elm/json": "1.0.0",
            "elm-community/list-extra": "8.1.0",
            "mdgriffith/elm-ui": "1.1.0",
            "ohanhi/keyboard": "1.0.0",
            "stoeffel/editable": "2.0.1",
            "tortus/elm-array-2d": "2.1.2"
        },
        "indirect": {
            "elm/time": "1.0.0",
            "elm/url": "1.0.0",
            "elm/virtual-dom": "1.0.2"
        }
    },
    "test-dependencies": {
        "direct": {},
        "indirect": {}
    }
}</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:46:10.118100</ts>
    <user>Shirley</user>
    <text>Thank you :slightly_smiling_face:</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:46:22.118300</ts>
    <user>Lynne</user>
    <text>Oh, a lot of stuff</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:46:47.118500</ts>
    <user>Lynne</user>
    <text>So apparently some of your dependencies depends on some outdated version of `list-extra`</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:47:41.118700</ts>
    <user>Shirley</user>
    <text>Ahh, thanks! I hadn't thought of that, looks like I'll be going through my packages to see which one uses this outdated version</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:47:51.118900</ts>
    <user>Lynne</user>
    <text>Wait</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:48:27.119100</ts>
    <user>Lynne</user>
    <text>This tool does not see any conflict: &lt;https://www.markuslaire.com/github/elm-dependencies-analyzer/&gt;</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:50:19.119300</ts>
    <user>Lynne</user>
    <text>By the way, there are some rather outdated versions</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:50:37.119500</ts>
    <user>Lynne</user>
    <text>I would actually remove everything and start adding dependencies one-by-one from scratch if I were you</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:50:58.119700</ts>
    <user>Shirley</user>
    <text>mmm, alright I'll start with doing that, thanks!</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T03:54:27.119900</ts>
    <user>Lynne</user>
    <text>Well, there is no surprise Elm is saying that `elm.json` is corrupt for `list-extra 2.0.0` because there is no `elm.json` for that version of the package :slightly_smiling_face:</text>
  </message>
  <message conversation_id="444">
    <ts>2019-02-12T04:07:53.120100</ts>
    <user>Shirley</user>
    <text>It seems that there was something wrong with a package I tried to install. Using another fork of the package worked. Thanks for your suggestions :slightly_smiling_face:</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:08:22.120300</ts>
    <user>Lynne</user>
    <text>What was the package if I may ask?</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:09:25.120800</ts>
    <user>Lynn</user>
    <text>Yikes, I had not expected this:
```
Date.fromString "Cisco 6807"
Ok &amp;lt;Mon Jan 01 6807 00:00:00 GMT+0100 (Central European Standard Time)&amp;gt;
    : Result.Result String Date.Date
```</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:09:56.121100</ts>
    <user>Lynn</user>
    <text>I had expected this would return an Err</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:11:25.121300</ts>
    <user>Shirley</user>
    <text>The problematic package was: thebritican/elm-autocomplete. In the issues on github I found that it had been forked to: ContaSystemer/elm-menu. I've now installed the latter and the installation succeeded</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:12:00.122000</ts>
    <user>Lynn</user>
    <text>I see that it reflects what js does though</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:12:18.122400</ts>
    <user>Yelena</user>
    <text>i'm new to elm</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:12:29.122700</ts>
    <user>Yelena</user>
    <text>can anyone tell me from where can i start</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:14:27.122800</ts>
    <user>Lynne</user>
    <text>I see. That package itself is for Elm 0.18 (you can be sure of it whenever you see `elm-package.json` and don't see `elm.json` in the source) so I am wondering why `elm install` did not say anything about it</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:14:55.123000</ts>
    <user>Antonette</user>
    <text>Why, yes, there are many resources for new developers ; one which will guide you through the process of discovering and building a few examples  is the official documentation, it's easy to read and encourages you to practice to get the basics.</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:15:09.123200</ts>
    <user>Antonette</user>
    <text>&lt;https://guide.elm-lang.org/install.html&gt;</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:16:10.123600</ts>
    <user>Antonette</user>
    <text>Also, if you forgive this shameless promotion, yours truly has made a blog with his ducky that's aimed at beginners to dig a bit deeper and understand the underlying principles all through easily readable and hopefully digestible bites of 3-5 minutes reads.</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:16:20.124000</ts>
    <user>Antonette</user>
    <text>&lt;https://medium.com/wat-the-elm-ist&gt;</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:16:22.124200</ts>
    <user>Antonette</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:17:16.125400</ts>
    <user>Charmaine</user>
    <text>I'm trying out Vue.js for writing a prototype for a tentative service (which is almost approaching full complexity of an actual product as prototypes always do), and I'm sorely missing custom types for modeling states.</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:18:03.125500</ts>
    <user>Antonette</user>
    <text>Also, asking questions is a great way to go past road blocks, so if you do feel so blocked, I cannot recommend enough asking your question here, especially in the &lt;#C192T0Q1E|beginners&gt; channel which is dedicated to help newcomers.</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:18:33.126000</ts>
    <user>Antonette</user>
    <text>I feel for you &lt;@Charmaine&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:19:06.126600</ts>
    <user>Antonette</user>
    <text>(and I'm also working on some crummy old legacy JS just as we speak)</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:33:45.127100</ts>
    <user>Huong</user>
    <text>Yeah, not all browsers will do that. Hence why `Date.fromString` was removed in 0.19 - it's not a pure function, since it depends on (a) browser and (b) timezone. So with the same input, that function can return different things in different clients. Pretty annoying!</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T04:50:39.129200</ts>
    <user>Danika</user>
    <text>I saw there are babel plugins for a pipe operator |&amp;gt;, function composition &amp;gt;&amp;gt; &amp;lt;&amp;lt;, partial application ?, and pattern matching. 

Has anyone tried any of them? </text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T04:56:37.129700</ts>
    <user>Lewis</user>
    <text>how can you do partial application with C syntax?</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T04:56:48.130100</ts>
    <user>Nana</user>
    <text>&lt;@Charmaine&gt; TypeScript has pseudo-discriminated unions but they're not very pretty... &lt;https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions&gt;</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T04:57:31.130200</ts>
    <user>Lewis</user>
    <text>`… |&amp;gt; my_two_arg_function(10, _)`, or something, I guess?</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:09:50.130900</ts>
    <user>Danika</user>
    <text>&lt;https://github.com/tc39/proposal-partial-application/blob/master/README.md&gt;</text>
  </message>
  <message conversation_id="445">
    <ts>2019-02-12T05:10:03.131400</ts>
    <user>Danika</user>
    <text>```const addOne = add(1, ?); // apply from the left
addOne(2); // 3

const addTen = add(?, 10); // apply from the right
addTen(2); // 12

// with pipeline
let newScore = player.score
  |&amp;gt; add(7, ?)
  |&amp;gt; clamp(0, 100, ?); // shallow stack, the pipe to `clamp` is the same frame as the pipe to `add`.
```</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:12:18.131600</ts>
    <user>Lewis</user>
    <text>aaah! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:12:54.131900</ts>
    <user>Danika</user>
    <text>&lt;https://github.com/tc39/proposal-pipeline-operator/blob/master/README.md&gt;</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:13:47.132200</ts>
    <user>Danika</user>
    <text>&lt;https://www.npmjs.com/package/babel-plugin-functional-composition&gt;</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:14:05.132500</ts>
    <user>Lewis</user>
    <text>cool. today I learned.</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:14:10.132800</ts>
    <user>Danika</user>
    <text>&lt;https://github.com/tc39/proposal-pattern-matching&gt;</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:14:15.133100</ts>
    <user>Danika</user>
    <text>!! Really cool</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:14:43.133300</ts>
    <user>Lewis</user>
    <text>yeah :star-struck:</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:20:12.134800</ts>
    <user>Danika</user>
    <text>Sorry for the link spam, I was trying to paste them all before i lost signal on the underground :sweat_smile:</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T05:41:58.135700</ts>
    <user>Danika</user>
    <text>I feel like ts plus the babel plugins I just mentioned is a really solid step towards solid FP in js</text>
  </message>
  <message conversation_id="446">
    <ts>2019-02-12T06:05:41.136300</ts>
    <user>Leopoldo</user>
    <text>hello, i m having an issue with my models,</text>
  </message>
  <message conversation_id="447">
    <ts>2019-02-12T06:06:32.136600</ts>
    <user>Leopoldo</user>
    <text>can you please look at &lt;https://elmlang.slack.com/archives/C192T0Q1E/p1549967822373700&gt; ?</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T07:26:15.137600</ts>
    <user>Niesha</user>
    <text>Ok, local issue. `stack init &amp;amp;&amp;amp; stack build` work just fine.</text>
  </message>
  <message conversation_id="447">
    <ts>2019-02-12T07:27:55.138500</ts>
    <user>Niesha</user>
    <text>&lt;@Leopoldo&gt; I'd also need the type of `WebData` and `findPageById`</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T07:28:06.138800</ts>
    <user>Niesha</user>
    <text>Ah, second one is there.</text>
  </message>
  <message conversation_id="449">
    <ts>2019-02-12T09:21:06.139600</ts>
    <user>Salvador</user>
    <text>Is there a way to convert a `Html.Html msg` into a string in the repl?</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:24:39.140400</ts>
    <user>Antonette</user>
    <text>`Debug.toString` is your friend, as long as you're not pushing it into production :wink:</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:25:05.140700</ts>
    <user>Antonette</user>
    <text>(warning, the results may not be very readable)</text>
  </message>
  <message conversation_id="449">
    <ts>2019-02-12T09:30:39.142100</ts>
    <user>Earlean</user>
    <text>&lt;@Salvador&gt; `elm/html` doesn't expose the `Html msg` type in a way that it can be converted in to a string. But &lt;https://package.elm-lang.org/packages/zwilias/elm-html-string/2.0.1/&gt; provides a similar API and has a `toString` function</text>
  </message>
  <message conversation_id="449">
    <ts>2019-02-12T09:31:51.143200</ts>
    <user>Salvador</user>
    <text>I saw that, but it doesn’t help as you can not turn an `Html.Html` into an `Html.String.Html`, unless I missed something.</text>
  </message>
  <message conversation_id="449">
    <ts>2019-02-12T09:32:51.144200</ts>
    <user>Huong</user>
    <text>Yeah, it requires changing your imports - there's no way to convert `Html.Html msg` into anything, since it's an opaque type</text>
  </message>
  <message conversation_id="449">
    <ts>2019-02-12T09:34:06.145300</ts>
    <user>Salvador</user>
    <text>I was afraid so, I was trying to generate a QRCode and output it’s svg in the repl. I’ll have to display it then.</text>
  </message>
  <message conversation_id="450">
    <ts>2019-02-12T09:42:15.147600</ts>
    <user>Sadie</user>
    <text>Hello</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:42:39.148400</ts>
    <user>Sadie</user>
    <text>I have a elm SPA app (built from elm-kitchen) and I have a question regarding the routing : &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Route.elm#L32&gt;</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:42:46.148800</ts>
    <user>Sadie</user>
    <text>I have a list of things that I can filter / #faceting)</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:43:17.149400</ts>
    <user>Sadie</user>
    <text>I am considering adding this facets selection into the URL</text>
  </message>
  <message conversation_id="449">
    <ts>2019-02-12T09:43:39.150000</ts>
    <user>Sadie</user>
    <text>So that people can save or share them</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:44:14.150400</ts>
    <user>Sadie</user>
    <text>Does anyone already did something like that with the Url Parser?</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:45:53.151200</ts>
    <user>Earlean</user>
    <text>&lt;@Sadie&gt; the `#` part of the url is called the 'fragment', &lt;https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#fragment&gt;</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:46:41.152300</ts>
    <user>Sadie</user>
    <text>Yes I know, I am a bit reluctant to add a querystring inside the fragment</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:47:06.153100</ts>
    <user>Sadie</user>
    <text>I am also reluctant to add null values in the URL</text>
  </message>
  <message conversation_id="449">
    <ts>2019-02-12T09:47:34.153800</ts>
    <user>Dorthey</user>
    <text>I’m trying to figure out a nice way to tween between values. As an example: I have a view that displays a dollar amount “$1234” and when I get an update to that value I want to animate between the old value and the new value.</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:47:53.154200</ts>
    <user>Sadie</user>
    <text>:confused: `#/things/filterStatus=open/filterOP=True/`</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:48:37.154400</ts>
    <user>Velia</user>
    <text>What's wrong with queries? Maybe you could use something like `https://...?filter=foo+bar+whatever`?</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:49:21.154600</ts>
    <user>Bert</user>
    <text>How do you imagine the animation happening? </text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:50:17.154800</ts>
    <user>Bert</user>
    <text>Just to make sure: this is a major feature for the app, yes? </text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:51:33.155100</ts>
    <user>Dorthey</user>
    <text>I’m imagining it would work something like `mdgriffith/elm-style-animation` but instead of animating a style I can animate a generic property on my model that I can display in my view.</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:51:38.155300</ts>
    <user>Dorthey</user>
    <text>&lt;https://github.com/mdgriffith/elm-style-animation&gt;</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:52:14.155500</ts>
    <user>Dorthey</user>
    <text>And yes – unfortunately this is a major feature for the app. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:53:27.155700</ts>
    <user>Sadie</user>
    <text>I am trying to see if we could do that with elm-animation and some css</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:54:12.156200</ts>
    <user>Sadie</user>
    <text>Something like that &lt;https://css-tricks.com/animating-the-content-property/#article-header-id-1&gt;</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:54:14.156500</ts>
    <user>Florencia</user>
    <text>hah, I've been doing that "animated numbers" feature for my previous employer. Not in Elm back then though :upside_down_face:</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:54:51.157300</ts>
    <user>Emilee</user>
    <text>hmm, i'm running into an unexpected type error
I've got this aliasing going on:
```
type alias Attribute msg =
    Attr () msg


type Attr decorative msg
    = Attr (Skin -&amp;gt; Element.Attr decorative msg)
```

and when I try to mix these in a list I get this:

```
This `roundEach` call produces:

    #Attribute msg#

But all the previous elements in the list are:

    #Attr decorative msg#
```</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:55:02.157600</ts>
    <user>Bert</user>
    <text>I guess it depends on what the animation should look like. I am imagining a scrolling flip number thing, which is probably very hard to do no matter the tech</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:55:12.158000</ts>
    <user>Emilee</user>
    <text>I would think `Attr () msg` and `Attr decorative msg` would be compatible? O.o</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:55:21.158100</ts>
    <user>Sadie</user>
    <text>&lt;https://css-tricks.com/reverse-text-color-mix-blend-mode/&gt;</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:55:49.158600</ts>
    <user>Dorthey</user>
    <text>&lt;@Bert&gt; It doesn’t need to be that fancy. Just a text node that counts up the value over the course of a second or two.</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:56:34.159400</ts>
    <user>Antonette</user>
    <text>Depending on what `decorative` is, not necessarily.</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:56:58.160000</ts>
    <user>Emilee</user>
    <text>`decorative` isn't bound anywhere</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:57:46.161800</ts>
    <user>Earlean</user>
    <text>It's bound to `()` in that list</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:57:47.161900</ts>
    <user>Antonette</user>
    <text>For example, if my list is filled with `Attr Int Msg` and I want to add an `Attribute Msg`, I will attempt to add an `Attr () Msg` in a list of `Attr Int Msg`.</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:58:20.162600</ts>
    <user>Antonette</user>
    <text>So, if you want your list to remain unbound, you can't put an `Attribute Msg` inside.</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:58:54.163300</ts>
    <user>Emilee</user>
    <text>the list:
```
[ Background.color skin.primaryColor
                    , Border.roundEach
                        { topLeft = 5
                        , bottomLeft = 5
                        , topRight = 0
                        , bottomRight = 0
                        }
                    ]
```
the types:
`color : Color -&amp;gt; Attr decorative msg`
```
roundEach :
    { topLeft : Int
    , topRight : Int
    , bottomLeft : Int
    , bottomRight : Int
    }
    -&amp;gt; Attribute msg
```</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:59:38.164000</ts>
    <user>Emilee</user>
    <text>`color` does not bind the `attribute` type variable, so I would assume it will be bound to `()`</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T09:59:48.164300</ts>
    <user>Emilee</user>
    <text>in both instances</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:00:28.165100</ts>
    <user>Antonette</user>
    <text>Maybe the binding is done higher up in your definitions.</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:03:07.167600</ts>
    <user>Emilee</user>
    <text>huh, apparently recompiling often enough fixed it?</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:03:31.168000</ts>
    <user>Sadie</user>
    <text>You mean using the fragment for page routing and the querystring for filters?</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:03:32.168200</ts>
    <user>Antonette</user>
    <text>That's suspicious... maybe you hadn't saved your file on the previous compile?</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:03:44.168400</ts>
    <user>Emilee</user>
    <text>pretty sure i did</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:03:48.168600</ts>
    <user>Emilee</user>
    <text>but you never know</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:04:12.169300</ts>
    <user>Emilee</user>
    <text>at least it works now. if that hadn't worked it would've thrown my whole project overboard pretty much</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:04:37.170100</ts>
    <user>Emilee</user>
    <text>and would have had me question a lot of things</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:04:51.170300</ts>
    <user>Antonette</user>
    <text>As long as it works :wink:</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:05:12.170400</ts>
    <user>Velia</user>
    <text>I was thinking  paths for routing and queries for filter. But I may have misunderstood your requirements, it might be easier with some examples.</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:06:47.170600</ts>
    <user>Sadie</user>
    <text>Apparently there is an open issue for elm-style-animation and content &lt;https://github.com/mdgriffith/elm-style-animation/issues/43&gt;</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:06:51.170800</ts>
    <user>Sadie</user>
    <text>But it is not there yet</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:08:55.171000</ts>
    <user>Sadie</user>
    <text>With elm-spa, the route looks like that:

- #/
- #/login
- #/logout
- #/settings
- #/profile/{username}
- #/register
- #/article/{article-slug}
- #/editor
- #/editor/{article-slug}</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:11:08.171200</ts>
    <user>Garnett</user>
    <text>I think I’ve just got a wrong version of Haskell or something installed</text>
  </message>
  <message conversation_id="451">
    <ts>2019-02-12T10:13:28.171400</ts>
    <user>Dorthey</user>
    <text>&lt;@Sadie&gt; Thank! I appreciate your help. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:14:13.171800</ts>
    <user>Florencia</user>
    <text>&lt;@Dorthey&gt; Re animated number, would this work? &lt;https://ellie-app.com/4J5h5j4n6TWa1&gt;</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:17:27.173000</ts>
    <user>Dorthey</user>
    <text>&lt;@Florencia&gt; thank you! That’s a very good start for me. I’m thinking I might need a way also to update a currently running animation.</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:18:04.173700</ts>
    <user>Florencia</user>
    <text>that's easy to do - do something in `update &amp;gt; StartAnimatingTo &amp;gt; Animating` :slightly_smiling_face:</text>
  </message>
  <message conversation_id="448">
    <ts>2019-02-12T10:18:51.174500</ts>
    <user>Florencia</user>
    <text>it could use some polishing, ie. caching the intermediate calculations inside the Animating record and just multiplying the delta by that on each tick</text>
  </message>
  <message conversation_id="451">
    <ts>2019-02-12T10:20:54.174900</ts>
    <user>Dorthey</user>
    <text>&lt;@Florencia&gt; thanks! I’ll have a go with it. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="452">
    <ts>2019-02-12T10:26:50.175100</ts>
    <user>Niesha</user>
    <text>stack doesn't care about that</text>
  </message>
  <message conversation_id="452">
    <ts>2019-02-12T10:29:52.175500</ts>
    <user>Velia</user>
    <text>IIRC hash routing is imposed by spa-example, but I would not use it if I had the choice. Anyway you can also mix hash routes and queries.</text>
  </message>
  <message conversation_id="452">
    <ts>2019-02-12T10:32:21.175700</ts>
    <user>Garnett</user>
    <text>Fair enough, though it is now working after switching to 8.2.2 and using `stack init --resolver lts-11.20`, but I may have changed something else in my environment :man-shrugging::skin-tone-3:</text>
  </message>
  <message conversation_id="452">
    <ts>2019-02-12T10:32:32.175900</ts>
    <user>Garnett</user>
    <text>It just built! Thanks for your help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="453">
    <ts>2019-02-12T10:35:58.176100</ts>
    <user>Sadie</user>
    <text>I could do something like `#/articles?category=tech`</text>
  </message>
  <message conversation_id="453">
    <ts>2019-02-12T10:36:15.176400</ts>
    <user>Sadie</user>
    <text>And use the queryparser on top of the fragment</text>
  </message>
  <message conversation_id="454">
    <ts>2019-02-12T11:29:56.177100</ts>
    <user>Bert</user>
    <text>I'll try a quick ellie when I get home </text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:17:56.177800</ts>
    <user>Yang</user>
    <text>hey everybody, im tr ying to construct an autorasizable textarea like here.: &lt;https://jsfiddle.net/0wnoe5rd/&gt;</text>
  </message>
  <message conversation_id="453">
    <ts>2019-02-12T12:18:56.178100</ts>
    <user>Yang</user>
    <text>&lt;https://jsfiddle.net/0wnoe5rd/1/&gt;</text>
  </message>
  <message conversation_id="453">
    <ts>2019-02-12T12:19:04.178500</ts>
    <user>Yang</user>
    <text>last link is better.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:19:34.179200</ts>
    <user>Yang</user>
    <text>So what im doing .. is that for each onInput event - i grab the scrollHeight with a decoder like tis one:</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:19:55.179500</ts>
    <user>Yang</user>
    <text>```
onInput : (ScrollHeight -&amp;gt; String -&amp;gt; Msg) -&amp;gt; Html.Attribute Msg
onInput tagger =
    HtmlEvents.stopPropagationOn "input"
        (JD.map2 (\scrollHeight value -&amp;gt; ( tagger (ScrollHeight scrollHeight) value, True ))
            (&lt;http://JD.at|JD.at&gt; [ "target", "scrollHeight" ] &lt;http://JD.int|JD.int&gt;)
            (&lt;http://JD.at|JD.at&gt; [ "target", "value" ] JD.string)
        )
```</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:20:27.180000</ts>
    <user>Yang</user>
    <text>but for each onInput key pressed.. the scrollHeight increases by 2</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:20:34.180200</ts>
    <user>Yang</user>
    <text>and i endup with this effect:</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:23:23.180600</ts>
    <user>Lupita</user>
    <text>at some point will you set a max size and then go to scrollbars/</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:27:54.180700</ts>
    <user>Yang</user>
    <text>scrollHeight keeps growing by 2</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:28:52.181800</ts>
    <user>Yang</user>
    <text>im not sure i understand.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:29:32.182600</ts>
    <user>Yang</user>
    <text>&lt;@Lupita&gt; i set max height .. then i set height?</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:30:15.183100</ts>
    <user>Yang</user>
    <text>i dont want scroll bars.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:32:10.183400</ts>
    <user>Florencia</user>
    <text>&lt;@Yang&gt; can you put it in Ellie?</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:32:43.183900</ts>
    <user>Yang</user>
    <text>gonna try. last time i did it crashed my computer since i dont have enough ram.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:33:33.184100</ts>
    <user>Florencia</user>
    <text>or gist or anywhere, really</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:33:52.184700</ts>
    <user>Florencia</user>
    <text>I tried to whip this up in Elm but seem to not be able to read `scrollHeight` property</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:34:09.184900</ts>
    <user>Florencia</user>
    <text>maybe it's Ellie+iframe thing, dunno</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:34:39.185300</ts>
    <user>Yang</user>
    <text>hmm :thinking_face:</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:34:59.185700</ts>
    <user>Lupita</user>
    <text>i understand you don't want scrollbars but at some point you run out of screen, right? would love to see this in elm</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:35:22.186000</ts>
    <user>Bonnie</user>
    <text>paddings can cause this effect</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:38:30.187600</ts>
    <user>Bonnie</user>
    <text>I tried to do this kind of thing in elm, but it was not a very good experience. Well, if the only requirement is to grow then fine, but you might also want to shink it when you remove code, then you're in trouble</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:39:39.188400</ts>
    <user>Florencia</user>
    <text>ah I think I know where my error is. I was trying to read the scrollHeight thing from the `input` event itself, but in the jQuery example you're reading it from the element</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:39:45.188700</ts>
    <user>Florencia</user>
    <text>dang JS :smile:</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:43:21.189100</ts>
    <user>Lupita</user>
    <text>hmm</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:44:01.189300</ts>
    <user>Yang</user>
    <text>&lt;https://ellie-app.com/4J7ysW9qD7ya1&gt;</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:44:48.189700</ts>
    <user>Yang</user>
    <text>the ellie app indeed has the same effect</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:44:56.190000</ts>
    <user>Yang</user>
    <text>im using elm-ui</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:45:02.190400</ts>
    <user>Yang</user>
    <text>and Keyed.el</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:45:09.190700</ts>
    <user>Yang</user>
    <text>which complicates the issue</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:45:13.190900</ts>
    <user>Yang</user>
    <text>but in ellie is simple</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:46:05.191200</ts>
    <user>Yang</user>
    <text>i used : `, HtmlAttributes.style "height" "150px"` instead of min-height .. same.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:46:33.191600</ts>
    <user>Lupita</user>
    <text>oh, that is getting json from somewhere</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:47:24.192000</ts>
    <user>Lupita</user>
    <text>my box is getting bigger with every letter i type</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:48:42.193100</ts>
    <user>Florencia</user>
    <text>my try has a similar problem: it's expanding just fine, but shrinking very slowly
&lt;https://ellie-app.com/4J7CLfvQ6yDa1&gt;</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:48:43.193200</ts>
    <user>Yang</user>
    <text>yes. so i used the `outerHeight` property like in here:
&lt;https://jsfiddle.net/0wnoe5rd/2/&gt;  - this is js.
this is supposedly the exact same code in elm:
&lt;https://ellie-app.com/4J7F823Chsqa1&gt;
They dont do the same thing at all.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:48:43.193300</ts>
    <user>Pauletta</user>
    <text>looks like is growing by 12 px you are adding in teh view</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:51:12.194100</ts>
    <user>Pauletta</user>
    <text>BTW `elm-ui` has this built in I think, it worked nicely when I tried</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:52:33.195200</ts>
    <user>Yang</user>
    <text>&lt;@Pauletta&gt; thanks. im gonna check it out. &lt;@Florencia&gt; thanks, looking at it now.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:57:24.196300</ts>
    <user>Pauletta</user>
    <text>&lt;https://package.elm-lang.org/packages/mdgriffith/elm-ui/1.1.0/Element-Input#multiline&gt;</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T12:59:35.197500</ts>
    <user>Yang</user>
    <text>&lt;@Pauletta&gt;  not rely. I removed the 12 px and still has the same growing behaviour. Is rely wired actually. im gona use &lt;@Florencia&gt; solution. Elm-ui has this problem that it doesnt grow.. it brings a vertical scroll bar. Gonna look it up one more time before i switch.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:03:59.197600</ts>
    <user>Bert</user>
    <text>Well, Ellie doesn't want to load for me. But I would make a subscription to `onAnimationFrame` (or delta) and sort of manually interpolate: `interpolateNumber { oldValue = 1234, newValue = 651 } (millisPassed / animationTotalMillis)`
&lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events#onAnimationFrame&gt;</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:07:46.197800</ts>
    <user>Bert</user>
    <text>The interpolation function could be using one of these: &lt;https://github.com/elm-community/easing-functions&gt;</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:11:05.199100</ts>
    <user>Pauletta</user>
    <text>Try setting 'Element.height Element.shrink' in your multiline</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:11:59.200300</ts>
    <user>Pauletta</user>
    <text>Then it should grow. Just checked our prod app</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:14:33.200800</ts>
    <user>Yang</user>
    <text>oh ok.. so you mean this shrink should be set on the multipline element?</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:14:41.201000</ts>
    <user>Yang</user>
    <text>or on its parent?</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:15:03.201300</ts>
    <user>Yang</user>
    <text>and thanks :smile: :hugging_face:</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:25:49.203300</ts>
    <user>Daria</user>
    <text>&lt;@Pauletta&gt; thats interesting, does the elm-ui multiline grow and shrink? We tried getting this to work a while ago but at that point it required some cumbersome ports</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:26:36.204300</ts>
    <user>Yang</user>
    <text>aaaa one thing i forgot to mention.  very important. Yes indeed it works like expected if you type enter. But i just tested it and if you keep pressing aaaaaaa.. then it doesnt work.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:28:10.206500</ts>
    <user>Yang</user>
    <text>None</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:28:12.206900</ts>
    <user>Yang</user>
    <text>on my setup i mean</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:28:32.207900</ts>
    <user>Yang</user>
    <text>here im pressing aaa and it supposed to grow like my js example does.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:28:51.208600</ts>
    <user>Yang</user>
    <text>i also figured out it grows by 4px</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:29:19.209600</ts>
    <user>Pauletta</user>
    <text>Ok I should check that then :smile:. &lt;@Daria&gt; yes it shrinks. If I remember looking at the code it was counting the lines and multiplying for the line size, which may explain the problem &lt;@Yang&gt; was explaining. I guess there is not an easy solution :persevere:</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:29:23.209700</ts>
    <user>Yang</user>
    <text>on the previous setup i had. not sure why 4px.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T13:33:40.209800</ts>
    <user>Yang</user>
    <text>None</text>
  </message>
  <message conversation_id="456">
    <ts>2019-02-12T13:58:40.212100</ts>
    <user>Earnestine</user>
    <text>is it good practice (does it even work?) to publish a package that lives under `me/elm-pkg-name` on github, however would be named as `me/pkg-name` (added to the name field in the elm.json)
to me on my github account the `elm-` namespacing makes sense, but on the actual 'elm' package list not really.. ?</text>
  </message>
  <message conversation_id="456">
    <ts>2019-02-12T14:02:35.212500</ts>
    <user>Danika</user>
    <text>Could always try and see what elm has to say about it when you go to publish.</text>
  </message>
  <message conversation_id="456">
    <ts>2019-02-12T14:03:15.213100</ts>
    <user>Danika</user>
    <text>I think sometimes the `elm-` makes sense, like `elm-css` says to me that this is an elm way of doing css, or `elm-markup`</text>
  </message>
  <message conversation_id="456">
    <ts>2019-02-12T14:04:22.213700</ts>
    <user>Danika</user>
    <text>`elm-hex` or `elm-round` makes not as much sense, but imo the elm- prefix is fine for everything</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T14:31:38.214100</ts>
    <user>Alicia</user>
    <text>&lt;@Yang&gt; it is the `box-sizing` that is missing, check out &lt;https://ellie-app.com/4J9b7kvBgKda1&gt;</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T14:36:24.215600</ts>
    <user>Yang</user>
    <text>&lt;@Alicia&gt; omg thanks a lot :slightly_smiling_face: :beer::beer::beer:.. freaking grazy .. i was spending hours on this .. auch. completly forgot about box-sizing... hmm..</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T14:43:40.216700</ts>
    <user>Yang</user>
    <text>@Micha  i consider `elm-` as beeing the official version of something. Since there are many packages doing the same thing.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-12T14:59:08.216900</ts>
    <user>Huong</user>
    <text>No, that won't work, they have to match at the moment :slightly_smiling_face:</text>
  </message>
  <message conversation_id="457">
    <ts>2019-02-13T03:23:23.219700</ts>
    <user>Nana</user>
    <text>what I've done previously to make expanding textareas is to put the textarea as `position: absolute` inside an element with the same padding, font-size etc. and have that element display the same text as the textarea :slightly_smiling_face:</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-13T04:10:33.220100</ts>
    <user>Danika</user>
    <text>Yeah this is the way to do it</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-13T04:40:33.221300</ts>
    <user>Rochell</user>
    <text>You have to look at the namespace. `elm/something` is official, but calling it `elm-something` isn't. Lots of unofficial packages start with `elm-`, and I don't think any of the official ones do.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-13T04:42:58.221700</ts>
    <user>Rochell</user>
    <text>I guess `elm-explorations/something` is official too, right?</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-13T04:43:33.222700</ts>
    <user>Rochell</user>
    <text>Just more experimental and less likely to be in its final form.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-13T04:43:37.222900</ts>
    <user>Timika</user>
    <text>Those are “blessed” packages made by the community that require native code and are at least considered to become part of Elm some day.</text>
  </message>
  <message conversation_id="455">
    <ts>2019-02-13T04:43:51.223300</ts>
    <user>Rochell</user>
    <text>Ah, okay. So semi-official, I guess hehe</text>
  </message>
  <message conversation_id="458">
    <ts>2019-02-13T13:15:11.225300</ts>
    <user>Valorie</user>
    <text>Hey folks, about to start a new project, been using 0.18 so far, does 0.19 have good enough support to use now? I remember trying to use it once and many libraries wouldn’t work.</text>
  </message>
  <message conversation_id="458">
    <ts>2019-02-13T13:16:06.225500</ts>
    <user>Iona</user>
    <text>shouldn’t be a problem now</text>
  </message>
  <message conversation_id="458">
    <ts>2019-02-13T13:16:43.226000</ts>
    <user>Valorie</user>
    <text>I’m gonna try setting it up tonight see how it goes! Thanks!</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:15:27.226700</ts>
    <user>Agustin</user>
    <text>As long as you don’t need websockets :joy:</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:28:25.227400</ts>
    <user>Florencia</user>
    <text>Wasn't there `Fuzz.lazy`? Can't find it. Need it (or something similar) for my recursive data structure fuzzer</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:29:35.227600</ts>
    <user>Florencia</user>
    <text>eg.
```
exprFuzzer : Fuzzer Expr
exprFuzzer =
    let
        lazyExprFuzzer =
            ???
    in
    Fuzz.oneOf
        [ Fuzz.map Int_ &lt;http://Fuzz.int|Fuzz.int&gt;
        , Fuzz.map Negate lazyExprFuzzer
        , Fuzz.map2 Plus lazyExprFuzzer lazyExprFuzzer
        , Fuzz.map List_ (Fuzz.list lazyExprFuzzer)
        ]
```</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:31:07.228100</ts>
    <user>Florencia</user>
    <text>as `Fuzz.andThen` is no longer with us, I don't know how to proceed
```
lazyExprFuzzer : Fuzzer Expr
lazyExprFuzzer =
    Fuzz.succeed ()
        |&amp;gt; Fuzz.andThen (always exprFuzzer) -- :(
```</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:34:12.228200</ts>
    <user>Valorie</user>
    <text>Why?</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:34:37.228500</ts>
    <user>Alleen</user>
    <text>the websocket library from 0.18 has not been updated for 0.19</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:36:45.229100</ts>
    <user>Florencia</user>
    <text>ports are still an option (I'm using them in my Elm SaaS just fine)</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:37:19.229500</ts>
    <user>Agustin</user>
    <text>Yes me too, but its probably the most common complaint</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:38:55.229700</ts>
    <user>Florencia</user>
    <text>I'll probably have to try `Fuzz.custom`.</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:38:59.230000</ts>
    <user>Valorie</user>
    <text>I see</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:52:33.236200</ts>
    <user>Renda</user>
    <text>I really like using the pipe operator in my update function A LOT, so I often find myself having functions of the type ```
Model -&amp;gt; Model
```
But I am beginning to realize that having Model as the output type restricts me a lot occasionally.
So now I am considering to have "normal" functions and some called ```pipeSomethingSomething : Model -&amp;gt; Model``` for the update function.
Any better suggestions?
Is there a way to swap around arguments?</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:54:42.237300</ts>
    <user>Florencia</user>
    <text>you can have functions working on a subtype - no problem! I'd just create an additional function that wraps it into the `Model -&amp;gt; Model` structure. That way you have both</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:55:06.237900</ts>
    <user>Florencia</user>
    <text>of course, depends on the situation and sometimes it might not be the best idea ... :shrug: viewer discretion advised</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:55:37.238400</ts>
    <user>Earnest</user>
    <text>You can restrict the fields a function has access to:
`modifyLocation : SomeOtherArg -&amp;gt; { a | currentLocation : Location } -&amp;gt; { a | currentLocation : Location }`</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:55:43.238700</ts>
    <user>Renda</user>
    <text>On a subtype? Do you mean ```let something = model.something in ... ```</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:56:21.239300</ts>
    <user>Renda</user>
    <text>:open_mouth: never seen that before !</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:56:22.239500</ts>
    <user>Florencia</user>
    <text>subtype - eg. a field of the model</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:56:24.239600</ts>
    <user>Earnest</user>
    <text>where
`type alias Model = { currentLocation : Location, ...other fields... }`</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:56:43.240100</ts>
    <user>Renda</user>
    <text>I think I just found the next thing to read about hehe</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:57:04.240700</ts>
    <user>Renda</user>
    <text>Im a little worried Ill go wild and my entire codebase is gonna read Model -&amp;gt; Model :joy:</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:57:32.241300</ts>
    <user>Florencia</user>
    <text>the `update` function will probably read smooth like butter though :thinking_face:</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:57:47.241700</ts>
    <user>Florencia</user>
    <text>what I'm trying to say: maybe that's a good thing :smile:</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:58:15.242100</ts>
    <user>Renda</user>
    <text>Haha so far it does seem really nice!!</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T14:59:26.243200</ts>
    <user>Renda</user>
    <text>Im trying to imagine what I would do in OOP if I want to add some AI logic to my game next. Here I just add a few new functions to the pipeline :stuck_out_tongue: :clap::skin-tone-2:</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T15:04:27.243600</ts>
    <user>Earnest</user>
    <text>&lt;https://i.imgur.com/1AraF4i.jpg&gt;</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T15:15:29.244000</ts>
    <user>Renda</user>
    <text>Yes, game "AI" = which is just dumb if statement stuff indeed. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="459">
    <ts>2019-02-13T15:33:51.245100</ts>
    <user>Florencia</user>
    <text>well I'll be damned, my shrinker really works. in the last week I conquered parsers and shrinkers, two things I usually avoided :muscle:</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:38:36.247200</ts>
    <user>Jude</user>
    <text>Can anyone point me to the best place to ask a question about Json.Decode.Pipeline?</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:39:48.247900</ts>
    <user>Jude</user>
    <text>Basically, I have a model where I want to decode `buildNumber` but it might be in Json as `build` or `buildNumber` and I'm struggling to figure out how to do that.</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:41:05.248100</ts>
    <user>Noelle</user>
    <text>&lt;#C192T0Q1E|beginners&gt;  :slightly_smiling_face:</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:42:04.248700</ts>
    <user>Carman</user>
    <text>&lt;@Jude&gt; what kind of value are you trying to parse this as? Are they both integers?</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:42:32.249400</ts>
    <user>Carman</user>
    <text>Do you know what situations lead it to being in one place or another?</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:43:13.250000</ts>
    <user>Jude</user>
    <text>string or null. basically I'm hitting an API that has versioned and not all data has updated. what we had before when it was just `buildNumber` was this:</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:43:16.250200</ts>
    <user>Jude</user>
    <text>`|&amp;gt; Json.Decode.Pipeline.optional "buildNumber" (Decode.nullable Decode.string) Nothing`</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:43:39.250700</ts>
    <user>Jude</user>
    <text>but now the property might be at `build` instead of `buildNumber` so I want to check both before using `Nothing`</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:45:04.251500</ts>
    <user>Carman</user>
    <text>Are there any rules that guide whether it might be in one place or another? Is it random? Can both be present?</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:45:30.251800</ts>
    <user>Jude</user>
    <text>one or the other, or neither</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:46:09.252500</ts>
    <user>Jude</user>
    <text>Old data will have `buildNumber`, or nothing, new data will have `build` or nothing</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:46:39.252800</ts>
    <user>Carman</user>
    <text>When you make a request do you know if you're dealing with old or new data?</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:47:04.253000</ts>
    <user>Jude</user>
    <text>no</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:50:27.254500</ts>
    <user>Carman</user>
    <text>You can build a decoder that uses the first location that works:
```
oldOrNewBuildNumber : Decoder String
oldOrNewBuildNumber =
  Decode.oneOf
    [ Decode.field "buildNumber" Decode.string
    , Decode.field "build" Decode.string
    ]
```</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:50:47.255000</ts>
    <user>Carman</user>
    <text>You can then plug this into a pipeline using `Json.Decode.Pipeline.custom`</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:51:09.255400</ts>
    <user>Carman</user>
    <text>```
|&amp;gt; Json.Decode.Pipeline.custom oldOrNewBuildNumber
```</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:58:55.255700</ts>
    <user>Jude</user>
    <text>hey that got me really close! thanks!</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:59:05.256000</ts>
    <user>Jude</user>
    <text>I needed nullables to match up, but that's it</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T16:59:14.256300</ts>
    <user>Jude</user>
    <text>```
Decode.oneOf
                [ Decode.field "buildNumber" (Decode.nullable Decode.string)
                , Decode.field "build" (Decode.nullable Decode.string)
                ]
```</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T17:04:36.257000</ts>
    <user>Carman</user>
    <text>You may want to move the nullable out one level</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T17:04:49.257300</ts>
    <user>Carman</user>
    <text>```
|&amp;gt; Json.Decode.Pipeline.custom (Decode.nullable oldOrNewBuildNumber)
```</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T17:05:15.257900</ts>
    <user>Carman</user>
    <text>This allows the `oldOrNewBuildNumber` decoder to be used in both nullable and non-nullable contexts</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T17:05:52.258600</ts>
    <user>Jude</user>
    <text>That makes sense, thanks.</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T17:05:58.258900</ts>
    <user>Jude</user>
    <text>I really appreciate the help</text>
  </message>
  <message conversation_id="461">
    <ts>2019-02-13T17:06:56.259100</ts>
    <user>Kayleigh</user>
    <text>Hi All. Is there a know best way to scroll to an anchor on an elm SPA?</text>
  </message>
  <message conversation_id="461">
    <ts>2019-02-13T17:10:06.259300</ts>
    <user>Noelle</user>
    <text>Hello. Here are some functions to work with the dom &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom&gt;</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T17:10:25.259500</ts>
    <user>Noelle</user>
    <text>Maybe this is what you are looking for? &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom#setViewportOf&gt;</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T17:16:37.261100</ts>
    <user>Lorilee</user>
    <text>A quick-and-easy approach is to focus on it: &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom#focus&gt;</text>
  </message>
  <message conversation_id="462">
    <ts>2019-02-13T17:17:30.261900</ts>
    <user>Hiedi</user>
    <text>Hi, i have been slowly trying to go through the spa example (&lt;https://github.com/rtfeldman/elm-spa-example&gt;) by implementing one myself and I cannot figure out a user gets redirected after Login. Anyone can explain me ?</text>
  </message>
  <message conversation_id="461">
    <ts>2019-02-13T17:18:21.262000</ts>
    <user>Kayleigh</user>
    <text>Thanks &lt;@Lorilee&gt;! That will get me what I need.</text>
  </message>
  <message conversation_id="462">
    <ts>2019-02-13T17:18:22.262200</ts>
    <user>Noelle</user>
    <text>Is because of the subscription. Is subscribed to session changes with a message `GotSession`</text>
  </message>
  <message conversation_id="462">
    <ts>2019-02-13T17:18:52.262400</ts>
    <user>Hiedi</user>
    <text>I saw that but how is the session changed after Login ?</text>
  </message>
  <message conversation_id="462">
    <ts>2019-02-13T17:20:00.262600</ts>
    <user>Noelle</user>
    <text>If the log in is success, you have a CMD that communicates to the port that is defined in the html/index.js (elm initialization)</text>
  </message>
  <message conversation_id="460">
    <ts>2019-02-13T17:20:35.262900</ts>
    <user>Noelle</user>
    <text>That port sends back the session through a port. And the Login page is subscribed to listen to those changes</text>
  </message>
  <message conversation_id="462">
    <ts>2019-02-13T17:22:08.263300</ts>
    <user>Noelle</user>
    <text>``` CompletedLogin (Ok viewer) -&amp;gt;
            ( model
            , Viewer.store viewer
            )```</text>
  </message>
  <message conversation_id="462">
    <ts>2019-02-13T17:22:29.263500</ts>
    <user>Noelle</user>
    <text>Viewer: ```store : Viewer -&amp;gt; Cmd msg
store (Viewer avatarVal credVal) =
    Api.storeCredWith
        credVal
        avatarVal```</text>
  </message>
  <message conversation_id="462">
    <ts>2019-02-13T17:22:32.263700</ts>
    <user>Hiedi</user>
    <text>Oh ok so that's that, I read the code and I didn't get it triggered a sub</text>
  </message>
  <message conversation_id="462">
    <ts>2019-02-13T17:24:19.264000</ts>
    <user>Hiedi</user>
    <text>Thx a lot &lt;@Noelle&gt;!</text>
  </message>
  <message conversation_id="462">
    <ts>2019-02-13T17:24:38.264200</ts>
    <user>Noelle</user>
    <text>No problem!</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T18:44:15.268400</ts>
    <user>Bernardina</user>
    <text>What's the best option for defining CSS in elm and in general in styling the page?</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T18:51:14.269400</ts>
    <user>Nana</user>
    <text>&lt;@Bernardina&gt; best option for defining CSS in Elm : elm-css
best option for styling/layout in general: probably elm-ui

&lt;https://package.elm-lang.org/packages/rtfeldman/elm-css/latest&gt;
&lt;https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest&gt;</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T18:57:34.270500</ts>
    <user>Carrol</user>
    <text>I like to work with something like Tailwind.css as much as I can &lt;https://tailwindcss.com/docs/what-is-tailwind/&gt;</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T18:57:41.270900</ts>
    <user>Carrol</user>
    <text>Then use `elm-css` for special cases</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T18:58:14.271600</ts>
    <user>Carrol</user>
    <text>But I haven't use `elm-ui`, I hear great things about it all the time</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T18:59:00.271900</ts>
    <user>Noelle</user>
    <text>I’m learning tailwind. Seems good so far</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T18:59:03.272100</ts>
    <user>Noelle</user>
    <text>I liked BassCSS</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T18:59:30.272300</ts>
    <user>Carrol</user>
    <text>Yeah, BassCss is great too, but tailwind improves on that idea</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T19:01:20.272500</ts>
    <user>Noelle</user>
    <text>Yes, bass stopped to being developed :disappointed:</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T19:01:40.272700</ts>
    <user>Noelle</user>
    <text>I’m making a pokedex with elm lol</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:19:17.273300</ts>
    <user>Bernardina</user>
    <text>I am actually struggling with changing button background color on mouse hover</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:20:03.273900</ts>
    <user>Bernardina</user>
    <text>is this possible to do with elm's Html.Attributes style?</text>
  </message>
  <message conversation_id="463">
    <ts>2019-02-13T19:21:25.274900</ts>
    <user>Nana</user>
    <text>&lt;@Bernardina&gt; `Html.Attributes style` is just like setting inline CSS styles, which doesn't support things like hover</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:22:38.275800</ts>
    <user>Bernardina</user>
    <text>So in this case I either include external .css file, or I use `elm-css`?</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:22:40.275900</ts>
    <user>Nana</user>
    <text>if you're not a CSS expert I would highly recommend elm-ui, it's way easier</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:23:03.276200</ts>
    <user>Nana</user>
    <text>but yes elm-css or external css file also works</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:23:37.276600</ts>
    <user>Bernardina</user>
    <text>Well, I have something based on `elm-bootstrap`</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:23:41.276900</ts>
    <user>Bernardina</user>
    <text>&lt;http://elm-bootstrap.info/&gt;</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:23:59.277300</ts>
    <user>Bernardina</user>
    <text>I am not sure if I can use with it `elm-ui`</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:27:48.277800</ts>
    <user>Nana</user>
    <text>ah no elm-ui shouldn't really be combined with a css framework like Bootstrap</text>
  </message>
  <message conversation_id="464">
    <ts>2019-02-13T19:30:15.278800</ts>
    <user>Nana</user>
    <text>though I'm also not sure how well elm-css would interact with Bootstrap - that's kind of the problem with CSS, when you start layering styles on top of each other</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:32:33.281300</ts>
    <user>Anderson</user>
    <text>Morning Everyone. I'm implementing a kind of i18n into an elm application. I have a question that could seems dumb. I am storing the formatting for a currency in the main Elm object. Now everytime someone wants to use CurrencyFormat needs to pass the main model. Is there a best practise to avoid passing the main model around ?</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:38:24.281400</ts>
    <user>Lynne</user>
    <text>You don't have to pass the whole model to functions which need only currency format. Write functions accepting your CurrencyFormat record and pass only that field when calling them</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:39:29.281700</ts>
    <user>Lynne</user>
    <text>Something like:
```
displayCurrency : CurrencyFormat -&amp;gt; Float -&amp;gt; String
displayCurrency = ...

...
displayCurrency model.currencyFormat value
```</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:41:54.282700</ts>
    <user>Anderson</user>
    <text>Thanks, I believe I still need to pass the model to who is using displayCurrency</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:42:56.282900</ts>
    <user>Lynne</user>
    <text>Well, it depends on your app structure. The point is you can structure it the way when you pass only relevant data to helper functions</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:44:09.283100</ts>
    <user>Lynne</user>
    <text>You can't have global variables, so properly structuring your app is the only way to avoid passing the complete model everywhere</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:45:01.283300</ts>
    <user>Lynne</user>
    <text>Unless your format is constant, of course. Then you can just have another module with function returning it</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:48:26.285000</ts>
    <user>Anderson</user>
    <text>I am just not used to depends on a main model. </text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:48:53.286000</ts>
    <user>Anderson</user>
    <text>Thanks for the info.. ill try to pass the correct data in the right function</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:49:05.286200</ts>
    <user>Lynne</user>
    <text>I understand that, and, I believe, it is not a super good practice to pass it everywhere as it complicates refactoring</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:49:11.286400</ts>
    <user>Maida</user>
    <text>there is a structure that goes by various names but in essence implies that there is a Context in which things happen. This context data is held in a record or some Custom Type and is passed around.</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:51:43.286600</ts>
    <user>Maida</user>
    <text>you can take a look at &lt;https://github.com/ohanhi/elm-shared-state&gt;</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:51:47.286800</ts>
    <user>Maida</user>
    <text>for inspiration</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:52:00.287000</ts>
    <user>Anderson</user>
    <text>in my example I have a Main with Locale that contains { Translations, Formatting }</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T04:52:02.287200</ts>
    <user>Anderson</user>
    <text>ill have a look</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T05:02:59.287500</ts>
    <user>Anderson</user>
    <text>that's was really interesting! thanks! And I believe you can create multiple different sharedState based on the module you are in.</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T05:03:17.287700</ts>
    <user>Anderson</user>
    <text>so you only have the dependencies you need in the right place</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T05:03:49.287900</ts>
    <user>Lynne</user>
    <text>I think the point of SharedState is that it is shared between all modules</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T05:04:12.288100</ts>
    <user>Lynne</user>
    <text>So you should not need different shared states</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T05:04:35.288300</ts>
    <user>Lynne</user>
    <text>Only if your app is split into groups of modules but that's most likely an overkill</text>
  </message>
  <message conversation_id="465">
    <ts>2019-02-14T05:15:55.289900</ts>
    <user>Maida</user>
    <text>Yes, the idea of the SharedState is that it acts like a context for all the places of the app. You can have partitions within this state that handle various aspects.</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:18:46.291300</ts>
    <user>Teri</user>
    <text>Howdy everyone!

I wanted to inspect the VirtualDom Kernel code because I am getting it to crash. I would like to make some modifications to it locally in order to fix it.

The problem is - I can not find the source code that actually gets compiled. I am using `elm/virtual-dom@1.0.2`. In the chromium inspector it shows me the line that crashed to be right below
```
	// tag must be 1 or 2 at this point

	var vKids = vNode.e;```</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:20:03.292600</ts>
    <user>Teri</user>
    <text>But in the source code of virtualDominside `~/.elm/___/virtual-dom/1.0.2/` it says
```

	// tag must be __2_NODE or __2_KEYED_NODE at this point

	var vKids = vNode.__kids;
```
And when I try modifying this file it does not arrive in the browser when using elm-make.</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:20:39.293000</ts>
    <user>Teri</user>
    <text>While googling for `tag must be 1 or 2 at this point` I only got three hits on google which seems really weird.</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:21:51.293700</ts>
    <user>Teri</user>
    <text>the hits on google are the compiled results from elm-make.</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:22:30.295100</ts>
    <user>Lynne</user>
    <text>It seems like that first excerpt is an optimized version of the second (constants are replaced with values, field name is shortened)</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:22:33.295300</ts>
    <user>Teri</user>
    <text>I grepped everything for the comment that virtualdom is crashing on. I can also confirm that the virtual-dom@1.0.2 is the one in my elm.json plus the only one installed in the local ~/.elm directory</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:22:58.295400</ts>
    <user>Teri</user>
    <text>I was thinking that too - but does it optimize comments?</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:23:22.295700</ts>
    <user>Lynne</user>
    <text>Well, it depends on the optimizer. It can just replace by regex and don't care if it is comment or not</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:23:55.295900</ts>
    <user>Teri</user>
    <text>I am wondering if the optimized code is cached somewhere.</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:24:05.296200</ts>
    <user>Lynne</user>
    <text>I am wondering that also</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:24:18.296600</ts>
    <user>Teri</user>
    <text>Because that's what I would need to clear then. I tried clearing `elm-stuff` and also `~/.elm`</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:24:24.297000</ts>
    <user>Florencia</user>
    <text>&lt;@Teri&gt; maybe there is some minification going on</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:24:29.297200</ts>
    <user>Lynne</user>
    <text>That should be enough</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:25:08.298200</ts>
    <user>Florencia</user>
    <text>ie. `__kids` -&amp;gt; `e` and `__2_NODE` and `__2_KEYED_NODE` (which are also variable names, not just parts of the comment) -&amp;gt; `1` and `2`?</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:25:26.298300</ts>
    <user>Lynne</user>
    <text>But how do you run your app? What you see in the browser is some bundle. Who is producing this bundle?</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:25:51.298900</ts>
    <user>Lynne</user>
    <text>&lt;@Florencia&gt; I mentioned exactly that two lines above :slightly_smiling_face:</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:25:57.299300</ts>
    <user>Lynne</user>
    <text>Welcome to the thread</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:26:13.299700</ts>
    <user>Teri</user>
    <text>Yeah.. I was just double checking it's not inside ~/.elm</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:26:23.299900</ts>
    <user>Teri</user>
    <text>(the cached optimized stuff)</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:27:11.300300</ts>
    <user>Florencia</user>
    <text>&lt;@Lynne&gt; ah, you're right! I totally skipped your comment :sweat_smile:</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:28:38.300900</ts>
    <user>Teri</user>
    <text>Hmm</text>
  </message>
  <message conversation_id="467">
    <ts>2019-02-14T05:42:06.302600</ts>
    <user>Salvador</user>
    <text>I am doing something wrong, but I don’t see why:
```
type Msg
 = SomeMsg
 | SubMsg SubMsgType

type SubMsgType
 = Msg1 Bool
 | Msg2 String

view: Model -&amp;gt; Html Msg
view model =
  div [] 
  [ input [type_ "radio", onClick (SubMsg (Msg1 True))] []
  , input [type_ "text", onInput (SubMsg Msg2)] []
 ]
```
fails with, the first argument to `SubMsg` is not what I expect.
This `Msg2` value is a:
  String -&amp;gt; SubMsgType
But `SubMsg` needs the 1st argument to be:
  SubMsgType</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:42:58.302700</ts>
    <user>Teri</user>
    <text>I am using create-elm-app</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:43:04.302900</ts>
    <user>Teri</user>
    <text>sorry I missed this thread :man-facepalming:</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:43:10.303100</ts>
    <user>Lynne</user>
    <text>Np</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:43:18.303300</ts>
    <user>Lynne</user>
    <text>If I remember correctly it is using webpack</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:43:24.303500</ts>
    <user>Teri</user>
    <text>Yes indeed</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:43:43.303700</ts>
    <user>Lynne</user>
    <text>And I am pretty sure it is not watching your `~/.elm` folder</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:43:48.303900</ts>
    <user>Teri</user>
    <text>But it's also just running the elm compiler - and I think elm does these optimizations - not webpack</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:43:58.304100</ts>
    <user>Teri</user>
    <text>I tried restarting everything</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:44:03.304300</ts>
    <user>Teri</user>
    <text>Agreed</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:44:05.304500</ts>
    <user>Lynne</user>
    <text>Still no luck?</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:45:37.304900</ts>
    <user>Teri</user>
    <text>no</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:47:41.305600</ts>
    <user>Lynne</user>
    <text>Ok,I don't know</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:48:27.306400</ts>
    <user>Lynne</user>
    <text>`onInput (SubMsg &amp;lt;&amp;lt; Msg2)` should do it</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:48:38.306800</ts>
    <user>Danika</user>
    <text>beat me to it  :smile:</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:49:04.307300</ts>
    <user>Salvador</user>
    <text>Damn, I knew it had to be something simple. Thanks!</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:49:08.307400</ts>
    <user>Teri</user>
    <text>Thank you for the support though</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:49:12.307600</ts>
    <user>Teri</user>
    <text>this was very helpful already</text>
  </message>
  <message conversation_id="466">
    <ts>2019-02-14T05:51:58.308100</ts>
    <user>Danika</user>
    <text>I often forget about composition tbh, oops!</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:05:59.309000</ts>
    <user>Jonna</user>
    <text>Hey folks!
Considering a json like :
```{
    "results": [
        {
            "type": "type1",
            ..
        },
        {
            "type": "type2",
            ..
        },
        {
            "type": "type2",
            ..
        }
    ]
}```
that I'd like to map to something like:
```type alias Results =
    { type1 : {..}
    , type2: List {..}
    }```
The question is: do you see a way to map this easily, or should I use an intermediate representation?</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:12:06.310800</ts>
    <user>Jonna</user>
    <text>looks like &lt;https://package.elm-lang.org/packages/elm-community/json-extra/latest/Json-Decode-Extra#when&gt; is my answer</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:12:09.311000</ts>
    <user>Jonna</user>
    <text>sort of</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:14:02.311900</ts>
    <user>Danika</user>
    <text>Oooh this is an interesting one</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:15:20.313200</ts>
    <user>Danika</user>
    <text>Is the shape/length of results known</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:15:26.313700</ts>
    <user>Danika</user>
    <text>I’m guessing not</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:15:27.313800</ts>
    <user>Jonna</user>
    <text>I've been scratching my head for 1 or 2 hours, and I always end up needing to first decode somehow the list, then building the record</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:15:58.314900</ts>
    <user>Jonna</user>
    <text>there is a indeed a length field for the number of results</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:16:25.315600</ts>
    <user>Sharon</user>
    <text>do you want to make an ellie with an example type and json? I would like to give it a try</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:17:49.317300</ts>
    <user>Danika</user>
    <text>Yes my suggestion would be decode the list and then fold that into a record. Although I would probably make the resulting record
```
{ type1: List { ... }
, type2: List { ... }
}```

Unless you know for a fact there is only ever one `type1` in your results array</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:20:03.317700</ts>
    <user>Danika</user>
    <text>Yeah make an ellie this could be a fun thing to figure out ^^</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:24:37.318100</ts>
    <user>Jonna</user>
    <text>it's a 0.18 app</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:24:55.318400</ts>
    <user>Jonna</user>
    <text>as far as i know, ellie is 0.19 only</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:25:11.318600</ts>
    <user>Danika</user>
    <text>boo</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:25:20.318800</ts>
    <user>Jonna</user>
    <text>&lt;https://ellie-app.com/4JVmhfg68qJa1&gt;</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:25:30.319000</ts>
    <user>Jonna</user>
    <text>won't change the logic</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:26:57.319600</ts>
    <user>Danika</user>
    <text>and you’re sure there’s only ever one `foo` type in your results json?</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:29:18.320200</ts>
    <user>Jonna</user>
    <text>yes, it has to be here</text>
  </message>
  <message conversation_id="469">
    <ts>2019-02-14T07:31:40.320800</ts>
    <user>Sharon</user>
    <text>&amp;gt; I always end up needing to first decode somehow the list, then building the record
is that a problem, though?</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:32:46.321800</ts>
    <user>Jonna</user>
    <text>well, it sucks but if there is no alternative... honnestly, the json is so bad I'm on the verge to sen dit to a port and deal with it there...</text>
  </message>
  <message conversation_id="468">
    <ts>2019-02-14T07:58:29.323500</ts>
    <user>Sharon</user>
    <text>&lt;@Jonna&gt; &lt;https://ellie-app.com/4JVQbY2vgRBa1&gt; an alternative, maybe not as ideal as you hoped, or maybe it is. Do with it what you want :sweat_smile:</text>
  </message>
  <message conversation_id="469">
    <ts>2019-02-14T08:00:46.324800</ts>
    <user>Donya</user>
    <text>I'm wondering if for Navigation I can directly send out a `LinkClicked` msg via an `onClick` html attribute, or whether one always needs an a tag to send out the ´LinkClicked´ msg</text>
  </message>
  <message conversation_id="469">
    <ts>2019-02-14T08:07:00.325600</ts>
    <user>Donya</user>
    <text>For my use case, I wanted to navigate to an internal page when a row in a table is clicked, but there is no simple way to wrap a table row in an anchor tag</text>
  </message>
  <message conversation_id="469">
    <ts>2019-02-14T08:09:37.326000</ts>
    <user>Nana</user>
    <text>&lt;@Donya&gt; that should work</text>
  </message>
  <message conversation_id="469">
    <ts>2019-02-14T08:12:07.326700</ts>
    <user>Donya</user>
    <text>&lt;@Nana&gt; ah, maybe I can call `pushUrl` on `onClick`?</text>
  </message>
  <message conversation_id="469">
    <ts>2019-02-14T08:24:13.328200</ts>
    <user>Donya</user>
    <text>&lt;@Nana&gt; okay, i got it to work.  ´onClick´ sends out an Update ´Msg´ which in turn calls ´Nav.pushUrl´ to send out a UrlChanged Cmd, and then it`s all good!</text>
  </message>
  <message conversation_id="470">
    <ts>2019-02-14T10:01:27.332000</ts>
    <user>Kathlyn</user>
    <text>What is the expected behaviour of the integer division operator `//` for large numbers? The documentation does not mention anything about integer division not working about the numbers above the maximum safe int. E.g. this in the Repl:

`599616000000 // 8 =&amp;gt; 1937555968 : Int`

where I expected the result `74952000000`</text>
  </message>
  <message conversation_id="470">
    <ts>2019-02-14T10:02:11.332300</ts>
    <user>Kathlyn</user>
    <text>Where if I do:
```
&amp;gt; toFloat 599616000000 / toFloat 8 |&amp;gt; round
74952000000 : Int
```</text>
  </message>
  <message conversation_id="470">
    <ts>2019-02-14T10:05:12.332900</ts>
    <user>Danika</user>
    <text>Expected behaviour is whatever happens in javascript I suppose</text>
  </message>
  <message conversation_id="470">
    <ts>2019-02-14T10:07:08.333500</ts>
    <user>Kathlyn</user>
    <text>Well there is no such thing as an Integer in Javascript so you tell me</text>
  </message>
  <message conversation_id="470">
    <ts>2019-02-14T10:09:36.333700</ts>
    <user>Huong</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/core/latest/Basics#Int&gt; &lt;@Kathlyn&gt;</text>
  </message>
  <message conversation_id="470">
    <ts>2019-02-14T10:10:37.333900</ts>
    <user>Kathlyn</user>
    <text>Cool thanks</text>
  </message>
  <message conversation_id="471">
    <ts>2019-02-14T12:58:14.335400</ts>
    <user>Verena</user>
    <text>What is the best way to handle url updates when the app is separated into multiple modules? Are there any nice examples around?</text>
  </message>
  <message conversation_id="472">
    <ts>2019-02-14T14:10:05.335900</ts>
    <user>Leopoldo</user>
    <text>&lt;#C192T0Q1E|beginners&gt; </text>
  </message>
  <message conversation_id="472">
    <ts>2019-02-14T14:39:50.336000</ts>
    <user>Milda</user>
    <text>Late to the party: somewhere, the docs recommend writing a function that takes a depth and returns a fuzzer of things up to that depth.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:47:00.338800</ts>
    <user>Marcus</user>
    <text>Quick naming question, since I suspect more than one person here has gone down this path. I created a search interface. I want to model the `SearchResults` type as a union type that looks something like this:

```
type SearchResults
    = Loading
    | Results Foo
```

The question is what would you call `Foo`. For some context, it's a record that holds information like the hits, the current page, how many total results there are, etc.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:47:46.339700</ts>
    <user>Marcus</user>
    <text>FWIW, right now, my model has a `searchResults` property that is a `Maybe SearchResults`. I'm moving that to a Union type.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:48:14.340200</ts>
    <user>Marcus</user>
    <text>I could go with something like `SearchResultsData`, but that feels wrong.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:48:20.340400</ts>
    <user>Marcus</user>
    <text>Does anyone have any ideas?</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:48:34.340700</ts>
    <user>Marcus</user>
    <text>Just brainstorming here.</text>
  </message>
  <message conversation_id="474">
    <ts>2019-02-14T17:55:00.342000</ts>
    <user>Leopoldo</user>
    <text>hello, anyone worked with `Http.Error` before? I m facing issue
``` 
createErrorMessage : Http.Error -&amp;gt; String
createErrorMessage httpError =
    case httpError of
        Http.BadUrl message -&amp;gt;
            message

        Http.Timeout -&amp;gt;
            "Server is taking too long to respond. Please try again later."

        Http.NetworkError -&amp;gt;
            "It appears you don't have an Internet connection right now."

        Http.BadStatus response -&amp;gt;
            (response.status)
        Http.BadBody response -&amp;gt;
            response
```
This is not a record, so it has no fields to access!
460|             (response.status)
                  ^^^^^^^^
This `response` value is a:
    Int
But I need a record with a status field!</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:55:15.342100</ts>
    <user>Noelle</user>
    <text>I always use `(List eachData)`</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:55:25.342300</ts>
    <user>Noelle</user>
    <text>`Results (List Pokemon)`</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:56:52.342600</ts>
    <user>Marcus</user>
    <text>&lt;@Noelle&gt; I'd do that too, except there's a lot of metadata that tags along with the results, like how many total pages there are, which page we are on, available facets, etc.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:57:24.342800</ts>
    <user>Earlean</user>
    <text>`SearchResultsData` is a fine name for that type</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:58:48.343000</ts>
    <user>Noelle</user>
    <text>Can this work?
```type alias Metadata = { totalPages : Int, ... }```</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:58:57.343300</ts>
    <user>Noelle</user>
    <text>Then, `Results (List Metadata)`</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T17:58:59.343500</ts>
    <user>Marcus</user>
    <text>LOL. Yeah, I'm not coming up with anything better.</text>
  </message>
  <message conversation_id="474">
    <ts>2019-02-14T17:59:08.343900</ts>
    <user>Earlean</user>
    <text>&lt;@Leopoldo&gt; &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#Error&gt; yep it's an `Int`</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:00:00.344300</ts>
    <user>Earlean</user>
    <text>In elm/http 1.0 is was a `Response string` (&lt;https://package.elm-lang.org/packages/elm/http/1.0.0/Http#Error&gt;)</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:01:11.345200</ts>
    <user>Rosalee</user>
    <text>I’m not sure why it was changed, I sometimes use &lt;https://package.elm-lang.org/packages/jzxhuang/http-extras/latest/Http-Detailed&gt; now to get the details</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:01:49.345300</ts>
    <user>Marcus</user>
    <text>Hmmmm... Maybe I'm not following you. The search results are comprised of a single record of metadata and a list of the records for the actual hits. It would look something like this:

```
type alias Foo =
    { metadata: Metadata
    , products: List Product
    }
````</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:04:10.345500</ts>
    <user>Claretta</user>
    <text>I would typically change the naming strategy slightly and do something like:
```
type SearchRequest
   = Loading
   | Successful SearchResults
   | Error SearchError
```</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:04:33.345700</ts>
    <user>Marcus</user>
    <text>I like that</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:05:03.345900</ts>
    <user>Noelle</user>
    <text>Ohh I misunderstood</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:13:58.351500</ts>
    <user>Marcus</user>
    <text>Quick question about union types and JSON decoding. I moved all of my HTTP code into a module. Within that module, I have a method called `getSearchResults`. That method builds the URL to call to get the search results. The line that does the work is:

```
Http.send msg (Http.get url searchDecoder)
```

searchDecoder looks something like this:

```
searchDecoder : Decoder SearchResultsData
searchDecoder =
    Decode.succeed SearchResultsData
        |&amp;gt; required "hitCount" int
```

That's simplified, but you get the idea.

What I actually want is for searchDecoder to return a SearchResults type, where its definition looks like:

```
type SearchResults
    = Loading
    | Results SearchResultsData
    | Error String
```

I haven't wrapped the results of an http call in a union type yet. Can anyone point me to an example or clue me in on the right syntax?</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:15:48.352700</ts>
    <user>Marcus</user>
    <text>Side note, I realize that searchDecoder won't directly return a SearchResults type, but ultimately the call to `getSearchResults` hits a case in my `update` and I want the type that accompanies the update to be the union type.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:18:46.353500</ts>
    <user>Earlean</user>
    <text>&lt;@Marcus&gt; `Http.send` has the type `send : (Result Error a -&amp;gt; msg) -&amp;gt; Request a -&amp;gt; Cmd msg` the key to your problem is the function ` (Result Error a -&amp;gt; msg) `</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:21:19.355400</ts>
    <user>Marcus</user>
    <text>Ah, I think I see.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:21:50.356000</ts>
    <user>Earlean</user>
    <text>```
resultToSearchResults result = case result of
    Ok value -&amp;gt;
      Results value
    Err error -&amp;gt;
      Error error
```</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:23:27.357600</ts>
    <user>Marcus</user>
    <text>I'll give that a shot. Seems clear enough.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:24:10.358300</ts>
    <user>Earlean</user>
    <text>oh, actually. The `error` variable there isn't a string, you'll need to also have a function to convert the `Http.Error` in to a `String`</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:24:43.359000</ts>
    <user>Marcus</user>
    <text>That's no problem. So long as the large bits of plumbing are wired up, I can fill in the gaps.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:27:38.359400</ts>
    <user>Marcus</user>
    <text>&lt;@Earlean&gt; What would the type annotation be on that function?</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:28:50.360100</ts>
    <user>Earlean</user>
    <text>`resultToSearchResults: (Result Http.Error SearchResultData) -&amp;gt; SearchResult`</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:29:09.360300</ts>
    <user>Marcus</user>
    <text>Sweet. Thanks.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T18:46:00.363500</ts>
    <user>Marcus</user>
    <text>I'm a little out of my depth on this one.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:01:10.366900</ts>
    <user>Marcus</user>
    <text>I think I've got this narrowed down. Last question. When I call `getSearchResults`, I want to tell it which Msg to call. I'm trying this type definition:

```
getSearchResults : SearchQuery -&amp;gt; (SearchResults -&amp;gt; msg) -&amp;gt; Cmd msg
```

where my `Msg` type resembles:

```
type Msg
    = NewResults SearchResults
    ...
```

My intention is to call it like:

```
getSearchResults searchQuery NewResults
```

I'm getting type errors. Do the type annotations above look sane?</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:02:23.368100</ts>
    <user>Marcus</user>
    <text>Note that the implementation of `getSearchResults` is in a module. `Msg` and the calls to `getSearchResults` are in my main module.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:04:48.369400</ts>
    <user>Nana</user>
    <text>&lt;@Marcus&gt; you could also go with this package: &lt;https://package.elm-lang.org/packages/krisajenkins/remotedata/latest/RemoteData&gt;
it's a generic datatype for remote data, plus some nice functions like `fromResult`, `map2` etc.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:06:10.370500</ts>
    <user>Marcus</user>
    <text>I'll check it out. I want to get my approach working though. I feel like seeing it through is going to make something click in my understanding of Elm. There's something in the wiring of this that I'm close to understanding, but not quite there.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:12:39.371100</ts>
    <user>Earlean</user>
    <text>&lt;@Marcus&gt; what type error do you see?</text>
  </message>
  <message conversation_id="475">
    <ts>2019-02-14T19:13:33.372100</ts>
    <user>Earlean</user>
    <text>The compiler usually provides very good error messages, read the errors carefully</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:14:05.372500</ts>
    <user>Marcus</user>
    <text>Good question. It's shifted around as I've been working on it.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:14:38.372900</ts>
    <user>Marcus</user>
    <text>Right now, it says:

```
-- TYPE MISMATCH ----------------------------------------- src/SearchResults.elm

Something is off with the 1st branch of this `case` expression:

209|             callback (Results newResults)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This `callback` call produces:

    msg

But the type annotation on `httpResponseToSearchResults` says it should be:

    SearchResults

Hint: Your type annotation uses type variable `msg` which means ANY type of
value can flow through, but your code is saying it specifically wants a
`SearchResults` value. Maybe change your type annotation to be more specific?
Maybe change the code to be more general?

Read &amp;lt;https://elm-lang.org/0.19.0/type-annotations&amp;gt; for more advice!

```</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:15:31.373900</ts>
    <user>Marcus</user>
    <text>I named the `(SearchResults -&amp;gt; msg)` parameter `callback`. Probably not the right name, but that's what it is right now.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:16:36.374300</ts>
    <user>Marcus</user>
    <text>I think the signature of httpResponseToSearchResults was off.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:18:00.375200</ts>
    <user>Marcus</user>
    <text>I just changed it to:

```
httpResponseToSearchResults : (SearchResults -&amp;gt; msg) -&amp;gt; Result Http.Error SearchResultsData -&amp;gt; msg
httpResponseToSearchResults callback result =
    ...
```

And that made the error go away.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:18:18.375700</ts>
    <user>Marcus</user>
    <text>Question though, is there a more idiomatic name than `callback` for that parameter?</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:18:44.376400</ts>
    <user>Marcus</user>
    <text>Or, a more idiomatic way to indicate what should be called, in the end?</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:19:28.377400</ts>
    <user>Earlean</user>
    <text>It's common to call a function intended to produce a msg value `toMsg`</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:20:01.377800</ts>
    <user>Marcus</user>
    <text>That makes sense.</text>
  </message>
  <message conversation_id="473">
    <ts>2019-02-14T19:25:32.378100</ts>
    <user>Marcus</user>
    <text>Gotta run. I'm getting close. Thanks for everyone's help.</text>
  </message>
  <message conversation_id="476">
    <ts>2019-02-14T21:17:44.379100</ts>
    <user>Nga</user>
    <text>How can I convert a `input [typ_="date"][]` value to a Posix? Seems like elm gets the value as a string when you use onInput (in the format of "YYYY-MM-DD")</text>
  </message>
  <message conversation_id="476">
    <ts>2019-02-14T21:18:02.379400</ts>
    <user>Nga</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/time/latest/Time&gt; -- I'm seeing nothing here for converting a string or pieces of a string to a Posix</text>
  </message>
  <message conversation_id="476">
    <ts>2019-02-14T21:18:31.379800</ts>
    <user>Nga</user>
    <text>The old elm stuff has this: &lt;https://package.elm-lang.org/packages/elm-lang/core/latest/Date&gt; -- I can't find a Date package in the latest core.</text>
  </message>
  <message conversation_id="476">
    <ts>2019-02-14T21:30:04.381100</ts>
    <user>Earlean</user>
    <text>&lt;@Nga&gt; yep, `elm/time` doesn't provide any parsers for handling string encoded date formats. There are other packages for parsing strings in to `Time.Posix`.</text>
  </message>
  <message conversation_id="476">
    <ts>2019-02-14T21:33:02.381600</ts>
    <user>Nga</user>
    <text>&lt;@Earlean&gt; when you say "other packages" do you mean stdlib, or third party?</text>
  </message>
  <message conversation_id="476">
    <ts>2019-02-14T21:36:38.383200</ts>
    <user>Nga</user>
    <text>I'm assuming you mean third-party, like this: &lt;https://package.elm-lang.org/packages/rtfeldman/elm-iso8601-date-strings/latest/&gt;

It's a shame that I have to rely on outside packages for something like this :disappointed: Shouldn't Elm support the date input type more thoroughly, and so give us a way to convert a iso8601 to posix? What am I missing here? Seems like an odd decision to exclude this functionality.</text>
  </message>
  <message conversation_id="476">
    <ts>2019-02-14T21:41:42.383900</ts>
    <user>Earlean</user>
    <text>&lt;@Nga&gt; if you scroll down to the 'iso8601' section of the Readme you can read the justification for why it's not supported.</text>
  </message>
  <message conversation_id="476">
    <ts>2019-02-14T21:41:42.384100</ts>
    <user>Earlean</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/time/latest/&gt;</text>
  </message>
  <message conversation_id="476">
    <ts>2019-02-14T21:47:35.387000</ts>
    <user>Nga</user>
    <text>&lt;@Earlean&gt; Thanks. I'd say that argument makes a lot of sense if there weren't such a thing as a date input which has very vast browser support. It would also make it easier for people to create custom datepickers. Even just a Posix constructor would be a sufficient work-around, and then people could parse the strings themselves and feed ints to a constructor.</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:19:01.387800</ts>
    <user>Lupita</user>
    <text>is anyone building a comprehensive widget lib for elm?</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:19:36.388200</ts>
    <user>Lupita</user>
    <text>scrolling thru vue and react and omg so much there</text>
  </message>
  <message conversation_id="478">
    <ts>2019-02-14T22:47:19.390300</ts>
    <user>Dede</user>
    <text>&lt;http://package.elm-lang.org|package.elm-lang.org&gt; turns up a few hits on the term ‘widget’.  Is there something specific you’re looking for?</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:48:55.391700</ts>
    <user>Lupita</user>
    <text>no really specific, just doesn't seem to maturing like you would think</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:49:52.392800</ts>
    <user>Dede</user>
    <text>A huge number of widget implementations aren’t really needed anymore as the web standards have improved.  E.g., flexbox has solved a number of problems.  It’s often not that hard to just… write the exact thing you want.</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:50:35.394500</ts>
    <user>Lupita</user>
    <text>well yes, i write some custom vue stuff all the time. we still use vuetify and others though</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:50:36.394700</ts>
    <user>Dede</user>
    <text>Now, elm-ui is a fascinating package that I personally love — it abstracts away html entirely and presents a rather nicer design language to work with.</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:51:01.395100</ts>
    <user>Lupita</user>
    <text>i need to mess with it more.  been following this article  &lt;https://medium.com/@mickey.vip/an-approach-to-nested-reusable-view-functions-in-elm-a1531b9abaf3&gt;</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:52:02.396100</ts>
    <user>Earlean</user>
    <text>Elm has a very small community compared to Vue or React, there was previously a package for 'Material Design Lite' but it wasn't updated for Elm 0.19 and 'Material Design Lite' was discontinued.</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:52:53.396800</ts>
    <user>Lupita</user>
    <text>sure i understand it's still relatively new</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:54:08.397400</ts>
    <user>Lupita</user>
    <text>so going back to that article,  would you mind if i ask a few questions?</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:56:20.399800</ts>
    <user>Lupita</user>
    <text>the code that does event.onInput how do i know what parameters it's going to throw if i'm not familiar with that</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:56:21.399900</ts>
    <user>Dede</user>
    <text>I’m happy to take a shot at answers.  I’m a relative newbie and not core, there are people (e.g. @ jessta) who can give much more informed answers too if they’re around.</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:57:13.400400</ts>
    <user>Dede</user>
    <text>The core documentation is generally pretty good:  &lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Events#onInput&gt;</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T22:58:44.401300</ts>
    <user>Dede</user>
    <text>So you’d start by seeing that it’s called `Evt.onInput` in the file, scroll to the top to see that `Evt` is defined by `import Html.Events as Evt`, then go look for the docs on the `Html` package by searching &lt;https://package.elm-lang.org/&gt; for `Html`</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T23:14:01.402800</ts>
    <user>Lupita</user>
    <text>that article is quite involved but gives some good info</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T23:15:03.403100</ts>
    <user>Dede</user>
    <text>If you haven’t written Elm yet, the article’s a bit of a deep-end dive.</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T23:16:00.404100</ts>
    <user>Lupita</user>
    <text>well makes sense and the partial application of the toInt with default waiting for the string parameter is cool but not easy to get until you look at it several time</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T23:20:40.404900</ts>
    <user>Lupita</user>
    <text>maybe i should write my vue application that does a table sort by clicking on a column heard in elm and see how far i get</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T23:22:36.405600</ts>
    <user>Dede</user>
    <text>There was an elm-sortable-table package in 0.18 that forked in 0.19 — there are at least 3 forks on packages, e.g. &lt;https://package.elm-lang.org/packages/NoRedInk/elm-sortable-table/latest/&gt;</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T23:24:06.407100</ts>
    <user>Lupita</user>
    <text>yeah but more interested in figuring out the pieces, this has a sort, click handlers that pass to the sort and a way to get json data from a website.  &lt;https://github.com/rschneiderman0123/vue-table-sort&gt;.   ofc, i know vue much better than when i wrote this.</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T23:25:42.407800</ts>
    <user>Lupita</user>
    <text>oh and has a computed function</text>
  </message>
  <message conversation_id="477">
    <ts>2019-02-14T23:27:53.408700</ts>
    <user>Lupita</user>
    <text>anyways, back again tomorrow</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T00:27:15.409100</ts>
    <user>Leopoldo</user>
    <text>hello, what field can i match this with? &lt;https://gist.github.com/afidegnum/41ad46240fcf442b27cca862e482ee3a#file-main-elm-L460&gt;</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T00:27:41.409400</ts>
    <user>Leopoldo</user>
    <text>i m having an error, ``` This is not a record, so it has no fields to access!

460|             response.status
                 ^^^^^^^^
This `response` value is a:

    Int

But I need a record with a status field!

```</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T00:30:41.410500</ts>
    <user>Earlean</user>
    <text>&lt;@Leopoldo&gt; the answer is the same as it was 7 hours ago. You're using `elm/http 2.0.0` but your that code was written for `elm/http 1.0.0`</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T00:31:01.410700</ts>
    <user>Earlean</user>
    <text>```
Http.BadStatus statusCode -&amp;gt;
   String.fromInt statusCode
```</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T00:32:43.411200</ts>
    <user>Earlean</user>
    <text>^ will work with `elm/http 2.0.0`</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T00:34:20.411700</ts>
    <user>Leopoldo</user>
    <text>ok, thanks, it works</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T00:34:31.412000</ts>
    <user>Leopoldo</user>
    <text>i will fun a test to find out</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T01:04:18.414000</ts>
    <user>Leopoldo</user>
    <text>i m finding hard to solve this nuance .. &lt;https://gist.github.com/afidegnum/41ad46240fcf442b27cca862e482ee3a#file-main-elm-L497&gt;
``` The 3rd element of this list does not match all the previous elements:
494|          [viewHeader
495|          , pg.content
496|          , viewFooter ]
                ^^^^^^^^^^
This `viewFooter` value is a:
    Route -&amp;gt; List (Html.Html msg)
But all the previous elements in the list are:
    List (Html.Html msg)
```
Adding `Route` type signature to the other designated ones breaks the whole structure, but `viewFooter` can't go away with the *Router*
what do you suggest ?</text>
  </message>
  <message conversation_id="480">
    <ts>2019-02-15T01:06:30.414400</ts>
    <user>Ruthann</user>
    <text>do you have the route at this point in time?</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T01:07:02.414900</ts>
    <user>Leopoldo</user>
    <text>yes,</text>
  </message>
  <message conversation_id="480">
    <ts>2019-02-15T01:07:11.415100</ts>
    <user>Ruthann</user>
    <text>from your code, looks like you can just change ln497 to `++ viewFooter model.route` no?</text>
  </message>
  <message conversation_id="479">
    <ts>2019-02-15T01:09:50.415400</ts>
    <user>Leopoldo</user>
    <text>ok, i believe that works :slightly_smiling_face:</text>
  </message>
  <message conversation_id="481">
    <ts>2019-02-15T03:25:39.415800</ts>
    <user>Nana</user>
    <text>It's not optimal for a custom datepicker to return an ISO-string though. Better that they return a `Date` (from the justinmimbs/date package for example, which I think most Elm datepickers are already using :slightly_smiling_face:)</text>
  </message>
  <message conversation_id="481">
    <ts>2019-02-15T03:28:08.416000</ts>
    <user>Nana</user>
    <text>Btw there is a ISO8601 package already, it's just not a core language library</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:02:32.424500</ts>
    <user>Antonette</user>
    <text>Hey beautiful people and vigilant bots, I have a growing problem and don't know how to address it: my team and I started adding bits and pieces of Elm in an existing app with the ambition to join them in one glorious SPA as soon as we cover all urls. So far, so good. Except for one thing: we're using `elm-webpack-loader`, and we have a main JS file to attach all our elm programs to the nodes they're allowed to squat in the app, and *every time we save one file, all the elm files are re-compiled and added to the main JS file* which is a very long process.
So, is there a way to explain to `elm-webpack-loader` (or webpack?) that it only needs to re-build the parts that have changed and not those who aren't part of the changes? If so, how do I go about it? If not, what is your advice to turn this around? I can provide code samples but not the repo itself (and it's quite wide anyways so it'd be better if you tell me what you'd like to inspect anyways).</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:04:24.424600</ts>
    <user>Huong</user>
    <text>That sounds sort of similar to the situation NoRedInk was in, when they decided to build jetpack (&lt;https://github.com/NoRedInk/jetpack&gt;)</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:05:04.424800</ts>
    <user>Antonette</user>
    <text>Thanks for the lead :slightly_smiling_face:</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:08:20.425000</ts>
    <user>Antonette</user>
    <text>Arf :neutral_face: It looks like it doesn't handle anything expect for Elm and CoffeeScript and we're also using Stylus to make our css stylesheets.</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:12:39.425200</ts>
    <user>Agustin</user>
    <text>I’m using `elm-webpack-loader` and it doesn’t seem to have this issue? But I might be mistaken.</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:18:11.426200</ts>
    <user>Danika</user>
    <text>`parcel` might be another option, basically 0 config, plays nice with ore processors </text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:27:57.426400</ts>
    <user>Antonette</user>
    <text>Thanks &lt;@Danika&gt;, I'll have a look :slightly_smiling_face:</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:29:03.426600</ts>
    <user>Antonette</user>
    <text>While I'm happy for you that you don't seem to encounter that problem, I have to admit this doesn't help much &lt;@Agustin&gt;... :wink:</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:29:27.426800</ts>
    <user>Agustin</user>
    <text>&lt;@Antonette&gt; I was confirming which package you are using?</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:30:00.427000</ts>
    <user>Agustin</user>
    <text>e.g. try `elm-webpack-loader` rather than `webpack-elm`</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:30:08.427200</ts>
    <user>Antonette</user>
    <text>Yep, I'm using `elm-webpack-loader` indeed.</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:30:49.427400</ts>
    <user>Antonette</user>
    <text>(and it seems I gave a false indication in my original post, my bad)</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:30:50.427600</ts>
    <user>Agustin</user>
    <text>Ah ok, your original post made it sound like you weren’t using it, apologies</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:31:27.427900</ts>
    <user>Lilli</user>
    <text>i'm also using `elm-webpack-loader` but i don't have this issue :thinking_face:</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:32:03.428100</ts>
    <user>Antonette</user>
    <text>Have you configured it in another way? Or are you building an SPA? (with only one elm entry point)</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:33:37.428300</ts>
    <user>Antonette</user>
    <text>(here's my original configuration if you see something I did wrong):
```
{
  test: /\.elm$/,
  exclude: [/elm-stuff/, /node_modules/],
  loader: 'elm-webpack-loader?cwd=webpack/client'
}
```</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:35:41.428600</ts>
    <user>Lilli</user>
    <text>I have a single entry point, a simple JS file that handles the app initialization. This file loads the main elm file and from there on, further loading is done on the Elm side</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:35:42.428800</ts>
    <user>Agustin</user>
    <text>```
      {
        exclude: [/elm-stuff/, /env/, /node_modules/],
        test: /\.elm$/,
        use: {
          loader: 'elm-webpack-loader',
          options: { files: glob.sync("src/**/*.elm") }
        }
      },

```</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:37:56.429000</ts>
    <user>Antonette</user>
    <text>Thanks &lt;@Agustin&gt;, I'll try it right away :wink:</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:38:42.429200</ts>
    <user>Antonette</user>
    <text>Just one thing though, I take it loading from the JS file is different with this `file` option?</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:39:17.429400</ts>
    <user>Antonette</user>
    <text>(the Elm compiled file to import might not be named as it was or something?)</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:40:08.429600</ts>
    <user>Agustin</user>
    <text>I’m still doing a `import { Elm } from './Main.elm';` in my bundle?</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:40:54.429800</ts>
    <user>Antonette</user>
    <text>And I take it your `Main.elm` is one in the many programs?</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:42:14.430000</ts>
    <user>Antonette</user>
    <text>(because my problem stems from the whole app having many programs we attach to various pages and not an SPA with only one program in a `Main.elm` file)</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:44:08.430200</ts>
    <user>Antonette</user>
    <text>Like, in my case, I have a `Page` directory with many `.elm` files that each have a `Program`, and in my `index.js` file I do a `require('./Pages/NameOfTheProgramIWant.elm')` for each `Program` file.</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:47:24.430500</ts>
    <user>Antonette</user>
    <text>So, if I do that, I'll have a "virtual" `./Main.elm` file to load that will be a compilation of all my `./Page/*.elm` files or something? (and `./Main.elm` is a convention of `elm-webpack-loader`?)</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:57:26.430900</ts>
    <user>Antonette</user>
    <text>Ok, so I did this:
```
      {
        test: /\.elm$/,
        exclude: [/elm-stuff/, /node_modules/],
        loader: 'elm-webpack-loader',
        options: {
          cwd: 'webpack/client',
          files: path.resolve(glob.sync('webpack/client/Pages/**/*.elm'))
        }
      }
```</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:58:24.431100</ts>
    <user>Antonette</user>
    <text>And my main js file has this:
```
const Elm = require("./elm/Main");

console.log(Elm);
```</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:58:59.431300</ts>
    <user>Antonette</user>
    <text>And I get this from webpack:
```
ERROR in ./index.js
Module not found: Error: Can't resolve './elm/Main' in '/src/webpack/client'
```</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T05:59:20.431500</ts>
    <user>Antonette</user>
    <text>What do you think I did wrong?</text>
  </message>
  <message conversation_id="483">
    <ts>2019-02-15T07:12:41.432200</ts>
    <user>Logan</user>
    <text>Hey, how do you concatenate two strings in Elm?</text>
  </message>
  <message conversation_id="483">
    <ts>2019-02-15T07:13:45.432600</ts>
    <user>Tamra</user>
    <text>&lt;@Logan&gt; `someString ++ anotherString`</text>
  </message>
  <message conversation_id="483">
    <ts>2019-02-15T07:16:57.432900</ts>
    <user>Logan</user>
    <text>TIL thank you!</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T07:43:46.433200</ts>
    <user>Lynne</user>
    <text>&lt;@Antonette&gt; where is your `elm` folder physically located compared to `index.js`?</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T07:44:11.433400</ts>
    <user>Lynne</user>
    <text>It seems like you need to `require('../../elm/Main')` instead</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T07:52:39.433600</ts>
    <user>Antonette</user>
    <text>(sorry &lt;@Lynne&gt; I've been away for lunch :sweat_smile:)</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T07:54:56.433800</ts>
    <user>Antonette</user>
    <text>So, here's the gist of it:
```
- webpack.config.js
- webpack/client/index.js // the base file that compiles to the final complete js file
- webpack/client/Pages/**/*.elm // the base files for elm pages live here
```</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T07:58:54.434400</ts>
    <user>Olimpia</user>
    <text>Is there a way to get  cryptographically secure random number  native or do I need to use a port?</text>
  </message>
  <message conversation_id="482">
    <ts>2019-02-15T07:58:57.434600</ts>
    <user>Olimpia</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:06:19.435100</ts>
    <user>Virgie</user>
    <text>there is nothing official, so I think ports would be the best solution</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:10:38.435400</ts>
    <user>Olimpia</user>
    <text>tnx</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:24:00.438100</ts>
    <user>Nana</user>
    <text>PSA to anyone using Elm with Webpack : I managed to hack proper color highlighting of type errors back in
&lt;https://github.com/rtfeldman/node-elm-compiler/issues/91&gt;
been using it for a day now, and it's so much nicer :relieved:
(just edit the file in your node_modules folder)
maybe someone can figure out how to do it properly later</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:25:30.438300</ts>
    <user>Antonette</user>
    <text>Oooooh! That's nice!</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:25:59.438400</ts>
    <user>Agustin</user>
    <text>Sorry &lt;@Antonette&gt;  I misunderstood your problem, I have checked my config against multiple Elm endpoints and it is compiling both</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:26:06.438600</ts>
    <user>Agustin</user>
    <text>Worse it seems to make them both the same size</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:26:12.438800</ts>
    <user>Agustin</user>
    <text>Suggesting its a combined bundle.</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:26:21.439000</ts>
    <user>Agustin</user>
    <text>Apologies for wasting your time</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:28:32.439200</ts>
    <user>Antonette</user>
    <text>It's ok &lt;@Agustin&gt;, I really appreciate you taking the time to try and help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:28:47.439400</ts>
    <user>Antonette</user>
    <text>(and I'm sorry for having been a bit obnoxious originally)</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:30:12.441300</ts>
    <user>Nana</user>
    <text>(I guess it might apply to Parcel users as well, if Parcel uses node-elm-compiler too, haven't tried it)</text>
  </message>
  <message conversation_id="485">
    <ts>2019-02-15T08:30:31.441400</ts>
    <user>Logan</user>
    <text>&lt;@Tamra&gt; Thank you for the fast response. This miss placed and too simple question was part of my presentation on :elm: .  I asked the question in the middle of the presentation. The point of the question was to point out how polite the elm-community is and how fast you can get help even with stupid questions that would normally almost anywhere else get a response like "did you try to google it".</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:30:48.441600</ts>
    <user>Logan</user>
    <text>You did very well :clap:</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:32:34.441900</ts>
    <user>Logan</user>
    <text>Actually, the audience suspected that this was arranged and you got paid :smile:</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:47:16.442600</ts>
    <user>Lynne</user>
    <text>And where does your `Main.elm` live &lt;@Antonette&gt;? The one, you are trying to `require` I mean</text>
  </message>
  <message conversation_id="486">
    <ts>2019-02-15T08:48:35.443200</ts>
    <user>Lynne</user>
    <text>Do I understand correctly that you have single `Main.elm` per page? Meaning, there is basically an Elm app per page (this follows from your original post if I got it right)</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:48:37.443400</ts>
    <user>Antonette</user>
    <text>That's the problem: I don't have a `Main.elm`. I have *many* such files in my `webpack/client/Pages` directory.</text>
  </message>
  <message conversation_id="486">
    <ts>2019-02-15T08:48:42.443700</ts>
    <user>Lynne</user>
    <text>I see</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:48:53.444100</ts>
    <user>Lynne</user>
    <text>So you have to require and `init` each of them separately</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:49:16.444600</ts>
    <user>Antonette</user>
    <text>The problem is that I don't have an SPA (yet) and the cost of migrating all those separate pages to an SPA is too high for now.</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:49:21.444800</ts>
    <user>Antonette</user>
    <text>Indeed :slightly_smiling_face:</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:49:29.445100</ts>
    <user>Lynne</user>
    <text>I understand, that should not be a problem</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:49:42.445500</ts>
    <user>Antonette</user>
    <text>I would rather it wasn't too :wink:</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:50:14.445800</ts>
    <user>Lynne</user>
    <text>Webpack simply follows your `require` statements and when it discovers an Elm file, it hands over its processing to `elm-webpack-loader`</text>
  </message>
  <message conversation_id="486">
    <ts>2019-02-15T08:50:16.446100</ts>
    <user>Dayna</user>
    <text>What is everyone's opinion on calling update within update to reuse behaviour? I've found it very useful as it creates less indirection than moving the return value in a function and reusing that function.</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:50:31.446200</ts>
    <user>Antonette</user>
    <text>Maybe we messed up on that front.</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:50:39.446400</ts>
    <user>Antonette</user>
    <text>We factored the part which requires the files.</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:51:20.446600</ts>
    <user>Lynne</user>
    <text>So if you `require('./Pages/MySuperPage/Main')` (or whatever your page entry module is called) you should be able to call `init` on the required object</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:51:38.446800</ts>
    <user>Antonette</user>
    <text>```
function withNodeAndPage(nodeId, pageName, doStuffWith) {
  const node = document.getElementById(nodeId);
  if (node) {
    const pages = require("./Pages/" + pageName + ".elm").Elm.Pages;
    const page = pageName
        .split("/")
        .reduce(
        function(accumulator, property) { return accumulator[property]; },
        pages
      );
    doStuffWith(node, page);
  }
};
```</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:52:12.447100</ts>
    <user>Rosa</user>
    <text>do it all the time</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:52:42.447200</ts>
    <user>Lynne</user>
    <text>Emmm... Do you have your pages defined as `module Pages.XXXX`?</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:52:51.447400</ts>
    <user>Antonette</user>
    <text>Yep.</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:52:54.447600</ts>
    <user>Lynne</user>
    <text>I see</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:53:11.447800</ts>
    <user>Lynne</user>
    <text>But anyways, does this function work?</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:53:16.448000</ts>
    <user>Antonette</user>
    <text>Sure.</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:53:19.448200</ts>
    <user>Lynne</user>
    <text>It is rather different from what you posted above</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:53:24.448400</ts>
    <user>Lynne</user>
    <text>Ok, so do you still have the problem?</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:53:29.448600</ts>
    <user>Antonette</user>
    <text>(before I attempted to add the configuration for webpack that is)</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:56:11.448900</ts>
    <user>Antonette</user>
    <text>Just so we're on the same page:
- my initial problem is that every time a file is touched, webpack recompiles every page which takes a lot of time ; I'd rather it only recompiled only the pages that are concerned
- in order to attempt to solve the problem, I modified my configuration following the advice given to use the `files` option and attempting to load only one file (the `elm/Main`) ; apparently that does not work since there is no `elm/Main` in my project</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:57:04.449100</ts>
    <user>Lynne</user>
    <text>Aha, so we can drop the second part and only focus on the first one</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:57:11.449300</ts>
    <user>Antonette</user>
    <text>Sure.</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:57:49.449500</ts>
    <user>Antonette</user>
    <text>So, I stashed all the changes, and it compiles just fine (if unbearably slowly).</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:58:06.449700</ts>
    <user>Lynne</user>
    <text>I see</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:58:44.449900</ts>
    <user>Lynne</user>
    <text>I must admit I don't have ideas regarding this</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:59:03.450100</ts>
    <user>Lynne</user>
    <text>In my setup there is a single entry point</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T08:59:13.450300</ts>
    <user>Antonette</user>
    <text>Arf.</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T09:03:00.450500</ts>
    <user>Agustin</user>
    <text>I wonder if you can export your apps</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T09:03:05.450700</ts>
    <user>Agustin</user>
    <text>And let elm do the compile</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T09:03:23.450900</ts>
    <user>Agustin</user>
    <text>eg have a main module that exports the individual pages</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T09:03:56.451100</ts>
    <user>Antonette</user>
    <text>Maaaaybe? How would one go about it?</text>
  </message>
  <message conversation_id="484">
    <ts>2019-02-15T09:04:11.451300</ts>
    <user>Antonette</user>
    <text>(because I certainly would try this but I don't know where to start)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:23:32.453400</ts>
    <user>Carmon</user>
    <text>I had this idea for building a page from the contents of a database and building the DOM elements on the fly, but my model would have included something like `thePage: List (Html msg)` which is disallowed. Am I barking up the wrong tree?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:26:08.453700</ts>
    <user>Danika</user>
    <text>`Browser.document` is what you want</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:27:01.454400</ts>
    <user>Danika</user>
    <text>The view function now has the following signature: `view : model -&amp;gt; Document msg` where document is:

```type alias Document msg =
    { title : String
    , body : List (Html msg)
    }```</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:29:29.455700</ts>
    <user>Earlean</user>
    <text>&lt;@Carmon&gt; storing `Html msg` in your model it generally a bad idea, it's better to keep your `Html msg` in your `view` and store a value in your model that you can calculate that `Html msg` from.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:32:29.456000</ts>
    <user>Danika</user>
    <text>Oh yeah, and that :')</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:32:44.456200</ts>
    <user>Danika</user>
    <text>What's the reasoning behind that</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:34:06.456500</ts>
    <user>Carmon</user>
    <text>OK - Thank you! I think I get it</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:34:27.456600</ts>
    <user>Tamra</user>
    <text>Really? :joy:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:34:38.456800</ts>
    <user>Tamra</user>
    <text>Glad to help!</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:39:07.457000</ts>
    <user>Nana</user>
    <text>Storing html in the model kind of breaks the whole reactive/declarative UI idea</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:41:42.457200</ts>
    <user>Logan</user>
    <text>Yup. An answer in a minute or less. That was great :grinning:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:42:06.457400</ts>
    <user>Nana</user>
    <text>Plus I'm guessing maybe there could be serialization issues depending on the internal implementation of the html lib?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:44:04.457600</ts>
    <user>Danika</user>
    <text>Not all UI needs to be reactive.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:45:44.457900</ts>
    <user>Danika</user>
    <text>I think really the point is to not store _functions_ in the model, not so much html in particular</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:46:59.458100</ts>
    <user>Nana</user>
    <text>But then you're no longer following the Elm Architecture</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:48:39.458300</ts>
    <user>Nana</user>
    <text>Although maybe some clever stuff could be achieved by storing html :thinking_face: could be worth exploring</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:50:15.458500</ts>
    <user>Nana</user>
    <text>But if it's for performance reasons, `Html.lazy` would usually be a better (and faster) solution</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:53:07.458900</ts>
    <user>Antonette</user>
    <text>&lt;@Agustin&gt;?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:55:11.459100</ts>
    <user>Agustin</user>
    <text>Well a normal module with the pages exposed, but I think it would depend if the compiler supports it</text>
  </message>
  <message conversation_id="488">
    <ts>2019-02-15T09:56:08.459400</ts>
    <user>Huong</user>
    <text>compiler needs a `main`.

&lt;@Antonette&gt; I assume you've tried the `files` approach pointing at all files that have a `main`?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T09:59:02.459700</ts>
    <user>Antonette</user>
    <text>You mean using the `files` option in `webpack.config.js`? When I did just try what I explained that did not work with it (and I did not have a special main file but multiple page files).</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:00:46.460000</ts>
    <user>Antonette</user>
    <text>&lt;@Agustin&gt; I don't quite know what the normal module with the pages exposed would look like ; if you can point to an example I'd be happy to try :)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:03:50.460200</ts>
    <user>Huong</user>
    <text>Yeah, I think the core issue is that you want elm-webpack-load to understand that `require("./Pages/App1.elm")` should be resolved to the same bundle as `require("./Pages/App2.elm")`. I don't know if `elm-webpack-loader` has some magic around that :thinking_face:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:04:29.460400</ts>
    <user>Huong</user>
    <text>otoh</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:04:40.460600</ts>
    <user>Huong</user>
    <text>you don't need to `require` them separately</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:05:49.460800</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/elm-community/elm-webpack-loader#files-default---path-to-required-file&gt;

So if I follow that, having `files` with a list of the actual Elm modules that expose a `Main`, you can import any one of those and the resulting `Elm` export should have all the modules in it</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:14:19.461000</ts>
    <user>Antonette</user>
    <text>Cool, thanks &lt;@Huong&gt; :) trying that right away.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:27:52.461300</ts>
    <user>Antonette</user>
    <text>Ok, so I did something similar to what I had done last time:
```
// in webpack.config.js
      {
        test: /\.elm$/,
        exclude: [/elm-stuff/, /node_modules/],
        loader: 'elm-webpack-loader',
        options: {
          cwd: 'webpack/client',
          files: [
            path.resolve(__dirname, "webpack/client/Pages/SomeIndex.elm"),
            path.resolve(__dirname, "webpack/client/Pages/OtherIndex.elm")
          ]
        }
      }

// in my index.js
const SomeIndex = require("./Pages/SomeIndex.elm").Elm.Pages.SomeIndex;
const OtherIndex = require("./Pages/OtherIndex.elm").Elm.Pages.OtherIndex;
...
```</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:28:40.461600</ts>
    <user>Antonette</user>
    <text>Good thing: it compiles and it works.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:29:21.461800</ts>
    <user>Antonette</user>
    <text>Less good thing: it re-compiles everything every time I change one file, even the modules I don't need re-compiled :confused:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:29:49.462000</ts>
    <user>Antonette</user>
    <text>(so it's just more configuration that seems to have no impact on what I'm trying to achieve as far as I can tell)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:33:55.462200</ts>
    <user>Antonette</user>
    <text>Nota bene: it still works even if I give an empty array to the `files` option in `webpack.config.js`. Is this option even doing anything relevant?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:35:04.462400</ts>
    <user>Huong</user>
    <text>Quick check: Are you still `require`ing them separately, or do you have one single `require`, whose value is reused?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:35:33.462600</ts>
    <user>Antonette</user>
    <text>I am still requireing them separately. I don't know how to do all in one require.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:37:14.462800</ts>
    <user>Antonette</user>
    <text>(because I don't know what the string I should give this special one-time require should be ; I tried `"elm/Main"`, `"elm/Main.elm"`, `"Main.elm"` `"Main"`, `"./elm/Main.elm"`, `"./elm/Main"`, `"./Main.elm"`, `"./Main"`, all to no avail)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:42:26.463100</ts>
    <user>Huong</user>
    <text>```const Pages = require("./Pages/SomeIndex.elm").Elm.Pages;
SomeIndex = Pages.SomeIndex;
OtherIndex = Pages.OtherIndex;
``` I think something like this</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:43:12.463300</ts>
    <user>Antonette</user>
    <text>Yep. Nope. I only have `SomeIndex` in `Pages` and not `OtherIndex`.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:45:23.463500</ts>
    <user>Huong</user>
    <text>Hm it _should_ have both :thinking_face:  (at least, according to the `elm-webpack-loader` docs)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:45:51.463800</ts>
    <user>Antonette</user>
    <text>Assuming those are up-to-date and not buggy to begin with :confused:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:46:19.464000</ts>
    <user>Antonette</user>
    <text>(which I'm beginning to reasonably doubt to be honest :sweat_smile:)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:47:40.464200</ts>
    <user>Antonette</user>
    <text>Since it still works (albeit needing multiple require) when I empty the `files` option array, maybe the paths I was giving it are failing silently?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:54:42.466600</ts>
    <user>Chae</user>
    <text>Does anyone know if there’s a zip/unzip package yet? I wasn’t finding anything in the packages list. Since I couldn’t find one I started looking into making one but got a little stuck on how to got about implementing &lt;https://en.wikipedia.org/wiki/DEFLATE&gt; as it says to look at the individual bits but `elm/bytes` seems to only handle bytes. Sorry if I’m misunderstanding anything.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T10:58:18.467100</ts>
    <user>Carman</user>
    <text>&lt;@Jana&gt; has a tar package that might do what you need &lt;https://package.elm-lang.org/packages/jxxcarlson/elm-tar/latest/&gt;</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:03:13.467200</ts>
    <user>Earnest</user>
    <text>I always pull out the code for the target branch into a function and just call it from both branches</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:06:46.467600</ts>
    <user>Huong</user>
    <text>&lt;https://gist.github.com/zwilias/18c2e87777197450146728e9b8626dcd&gt;

So I adapted the examples from the repo</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:07:11.467900</ts>
    <user>Huong</user>
    <text>added `Other.elm` (which just has `module Other exposing (main)` and `main = Html.text "foo"`)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:07:22.468100</ts>
    <user>Huong</user>
    <text>and in my console I see this:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:07:37.468300</ts>
    <user>Huong</user>
    <text>None</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:08:21.468700</ts>
    <user>Huong</user>
    <text>So it definitely _is_ possible to get multiple Elm `main` modules with a single `require`, using the `files` option for the loader</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:14:53.468900</ts>
    <user>Antonette</user>
    <text>Thanks ; I did exactly that except for the `debug: true` (adding it right now) and that my directory structure is a bit different.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:15:03.469100</ts>
    <user>Antonette</user>
    <text>Could it be a version issue?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:15:25.469300</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/zwilias/elm-webpack-loader-example&gt; figured I'd bundle it up for reproduction. The `debug` shouldn't matter, but this makes it a little easier to play around with</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:15:49.469500</ts>
    <user>Antonette</user>
    <text>Yep ; I'll see what it tells me about what it does maybe I'll gain insights.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:18:20.469700</ts>
    <user>Huong</user>
    <text>Cool, I hope you'll be able to figure it out! It does sound like perhaps the paths you're giving to `files` aren't quite right for whatever reason!</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:18:59.469900</ts>
    <user>Antonette</user>
    <text>Well, looks like the `debug: true` didn't do squat :confused:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:19:17.470100</ts>
    <user>Antonette</user>
    <text>I'm seeing the same feedback (maybe it was already in debug mode because I'm in development mode).</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:20:12.470300</ts>
    <user>Huong</user>
    <text>debug should only impact whether `elm` receives the `--debug` flag (enabling the time traveling debugger)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:20:58.470500</ts>
    <user>Huong</user>
    <text>(I've never worked with webpack, so I'm sorry I can't be of more help!)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:21:00.470700</ts>
    <user>Antonette</user>
    <text>Wait... arf. Ok. Got it. I needed to reload the webpack server every time I changed the config apparently...</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:21:30.471300</ts>
    <user>Modesto</user>
    <text>does anyone write elm in an idiomatic Haskell way?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:21:42.471500</ts>
    <user>Modesto</user>
    <text>trying to use typeclasses?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:21:49.471600</ts>
    <user>Huong</user>
    <text>Haha</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:22:00.471800</ts>
    <user>Antonette</user>
    <text>Don't feel bad, I guess I'm paying for my team and my inexperience at the time we started working with Elm.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:22:04.472000</ts>
    <user>Huong</user>
    <text>Yeah, it doesn't reload that, I've noticed :sweat_smile:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:22:34.472500</ts>
    <user>Virgie</user>
    <text>elm does not have typeclasses. Do you mean it the other way around?</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:22:55.473100</ts>
    <user>Modesto</user>
    <text>like this packages</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:22:56.473300</ts>
    <user>Modesto</user>
    <text>&lt;https://package.elm-lang.org/packages/arowM/elm-monoid/latest/Monoid&gt;</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:23:14.473700</ts>
    <user>Antonette</user>
    <text>Well, at least I know why what I was doing didn't seem to have any effect on the results whatsoever :sweat_smile:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:23:33.474300</ts>
    <user>Virgie</user>
    <text>that doesn't really work for the more interesting typeclasses, because in elm a type parameter has to be of kind Type (also written as *)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:24:03.474900</ts>
    <user>Antonette</user>
    <text>Thanks for the serendipitous influence :wink:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:24:05.475100</ts>
    <user>Virgie</user>
    <text>so while that approach works for Monoid, and would for Semigroup, it doesn't work for Monad, Functor, Applicative, Foldable, Traversable, ect.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:25:00.476100</ts>
    <user>Antonette</user>
    <text>Well, you know what it f-ing works!</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:25:05.476400</ts>
    <user>Virgie</user>
    <text>because those all take a type parameter `f`, like in `Functor f =&amp;gt; ` then the `f` is applied to another type. Elm does not currently support that</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:25:18.476500</ts>
    <user>Antonette</user>
    <text>(at least I can one-require the modules)</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:25:32.476700</ts>
    <user>Antonette</user>
    <text>Thanks a bunch for all of that y'all :wink:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:25:48.477100</ts>
    <user>Modesto</user>
    <text>ok</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:25:54.477400</ts>
    <user>Modesto</user>
    <text>thank you</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:26:07.477800</ts>
    <user>Modesto</user>
    <text>I was planning to make a Complex Numbers package</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:26:19.478200</ts>
    <user>Modesto</user>
    <text>and wanted the type to implement Monoid</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:26:55.479400</ts>
    <user>Modesto</user>
    <text>off the top of my head I don't know how relavent the other typeclasses are</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:27:02.479600</ts>
    <user>Virgie</user>
    <text>monoid for numbers is extra weird because there are two sensible instances. Having an explicit name for both operations will be much nicer I think</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:27:55.480500</ts>
    <user>Virgie</user>
    <text>general tip: look at the elm-geometry api. It takes some really abstract concepts and tries to give good names to the operations you might want to do.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:28:43.480600</ts>
    <user>Huong</user>
    <text>Now the real question is whether a change that should only impact one `main` module will recompile them all or not!</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:29:13.481100</ts>
    <user>Antonette</user>
    <text>Yep ; and that's what I've started to investigate :wink:</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:29:36.481500</ts>
    <user>Antonette</user>
    <text>But already not compiling X times the file is a big deal.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:29:56.481900</ts>
    <user>Modesto</user>
    <text>so the Monoid typeclasses doesn't require a higher kind of type</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:30:21.482300</ts>
    <user>Modesto</user>
    <text>thank you for another perspective on it</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T11:56:22.489300</ts>
    <user>Floy</user>
    <text>hey,
wanted to talk/ask about one thing. Recently in my project I encountered rather peculiar situation. We had a model for the user that may have the role and permissions against resources. You know, sth along `role: "admin", permissions: []`. So the domain of the problem suggested that admin does not need to have any permissions because he can do anything he likes while user can have certain permissions. That's why I modeled the user along this:

```
type alias User = {name: String, permissions: Permissions}
type Permissions
  = AdminPerm
  | UserPerm (Dict Key Permission)
```

don't mind the argument for UserPerm. The point is that I discarded the `role` from the data model in favor of union type with permissions. I wanted to avoid a danger that someone sets the permissions for the admin, which was not suppose to be possible in the light of requirements.

One problem down, another pops up. In view I gotta support changing the user role as well as changing permissions. For the ease of my mind, for now, I had created `type Role = Admin | User` which are only possible to be created manually in the view or derived from existing `User` with a function. However I still feel like I am lacking sth or doing one thing in two places even though you cannot use `Role` directly in the User record.

My question, therefore, is perhaps not related to Elm strictly, more to data modeling with types which, as far as I can tell, is encouraged in Elm.
I am just trying to get ahold of some ideas I might have missed. Wonder if someone had to model user related models in quite a safe way to avoid any weird modifications or states a user can end up. My goal is to make it somehow harder to operate on volatile data behind User model.</text>
  </message>
  <message conversation_id="487">
    <ts>2019-02-15T11:57:57.489600</ts>
    <user>Floy</user>
    <text>I'm putting thread here, in case someone wants to share some experiences :slightly_smiling_face:</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T11:59:56.489900</ts>
    <user>Floy</user>
    <text>and as usual, thank you for any feedback :+1:</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:05:43.490100</ts>
    <user>Dede</user>
    <text>I'm more used to seeing permissions assigned to roles, and then roles to users who get the union of permissions of their roles.  Is there a reason an entity needs both?</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:07:02.490300</ts>
    <user>Dede</user>
    <text>E.g. I'm used to seeing more like this:
```type Permission = Create | Read | ...;

type Role = Role { name: String, permissions: List Permission};

type User = User {name: String, roles: List Role};
```</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:07:56.490500</ts>
    <user>Dede</user>
    <text>You can put Resource in at the Permission or Role level, if you need per-resource control.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:12:44.491500</ts>
    <user>Nana</user>
    <text>I think it's not that uncommon to have a system with just permissions and no roles, except an Admin Boolean</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:14:11.491700</ts>
    <user>Nana</user>
    <text>I'd probably model it like this:
```
type alias User = {name: String, role: Role}
type Role
  = Admin
  | NonAdmin (Dict Key Permission)
```</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:17:15.492300</ts>
    <user>Dede</user>
    <text>Yeah, that's also perfectly reasonable.  It's just seems unusual to me to try to have both.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:17:22.492500</ts>
    <user>Dede</user>
    <text>But maybe I misunderstood the original intent.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:27:21.492700</ts>
    <user>Floy</user>
    <text>our case defines two roles (admin, user (non admin)) where regular users may have defined permissions (READ, WRITE, DELETE) against resources of specific type identified via ID</text>
  </message>
  <message conversation_id="490">
    <ts>2019-02-15T12:36:05.493700</ts>
    <user>Emilee</user>
    <text>are there any good examples for using the config pipeline pattern? especially with configs that have multiple mutually exclusive options?</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:37:06.493800</ts>
    <user>Dede</user>
    <text>```type Permission = Read | Write | Delete

type Resource = ...

type Role = AdminRole | UserRole { permissions: List Permission, resources: List Resource}

type User = User { name: String, role: Role}
```</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:38:21.494000</ts>
    <user>Nana</user>
    <text>&lt;@Dede&gt; that wouldn't allow a user to have different permissions for different resources though</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:38:41.494200</ts>
    <user>Dede</user>
    <text>Sure.  I read &lt;@Floy&gt; as asking for this structure.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:38:49.494400</ts>
    <user>Dede</user>
    <text>If it's per-resource, then it's a minor change:</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:40:14.494600</ts>
    <user>Dede</user>
    <text>```type ResourceAuth = ResourceAuth Resource (List Permission)

tuple Role = AdminRole | UserRole {auths: List ResourceAuth}
```</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:40:37.494800</ts>
    <user>Dede</user>
    <text>You could use a record with named fields for ResourceAuth.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:40:52.495000</ts>
    <user>Dede</user>
    <text>You could replace Lists with a set implementation that can handle these types (they're not comparable so stock `set` won't do it.)</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:40:56.495200</ts>
    <user>Dede</user>
    <text>etc.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:47:31.496400</ts>
    <user>Floy</user>
    <text>we've been using `Dict.Any` library and actually filled in quite nice</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:47:46.496600</ts>
    <user>Floy</user>
    <text>`Nothing` returned from there mean for us that user has no permissions against the resource</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:47:53.496800</ts>
    <user>Floy</user>
    <text>which is quite nice to have by default</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:48:31.497000</ts>
    <user>Floy</user>
    <text>anyway, you're both recommending to actually play around with renaming but also to keep just one type that suggest if user is an admin or not</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:49:16.497200</ts>
    <user>Floy</user>
    <text>that's quite ok, unless I have to change the user role in the view</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:49:41.497400</ts>
    <user>Floy</user>
    <text>while it works nice for the admin, for user it requires me to create an empty dict inside the view and pass it along the update's msg</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:49:51.497600</ts>
    <user>Floy</user>
    <text>or to have a auxilary type, pure view related, to handle that</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:50:49.497800</ts>
    <user>Floy</user>
    <text>unless, maybe I can write down changing the role as sort of a toggle, therefore I don't have to pass permissions inside the update's msg, I just change the role to the opposite one</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:51:03.498000</ts>
    <user>Floy</user>
    <text>that sort of makes sense I guess</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:51:19.498200</ts>
    <user>Floy</user>
    <text>does it? &lt;@Dede&gt; &lt;@Nana&gt;?</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:55:05.498400</ts>
    <user>Dede</user>
    <text>`UserRole` requires the additional data of what are the resources and what are the permissions.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:55:18.498600</ts>
    <user>Dede</user>
    <text>Presumably you have a bunch of checkboxes or something onscreen that provide that info.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:55:38.498800</ts>
    <user>Dede</user>
    <text>Anyhow, however you're denoting it, it's ultimately on your model.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:56:10.499000</ts>
    <user>Dede</user>
    <text>So when you go from AdminRole -&amp;gt; UserRole, you just send a small message from view, and then in your update bit handling the message, you look at the model to pick off the matrix of permissions and resources.</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:56:33.499200</ts>
    <user>Dede</user>
    <text>`view = ... button [onClick = SetUserRoleClicked]`</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T12:57:19.499400</ts>
    <user>Dede</user>
    <text>`update = ... case SetUserRoleClicked -&amp;gt; ({model | user = {model.user | role = UserRole (computePermissionsFromModel model)...`</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T13:04:43.499600</ts>
    <user>Floy</user>
    <text>ok, guess I will have to make another go on that</text>
  </message>
  <message conversation_id="489">
    <ts>2019-02-15T13:04:58.499800</ts>
    <user>Floy</user>
    <text>thanks for time that you spent with me :+1:</text>
  </message>
  <message conversation_id="491">
    <ts>2019-02-15T14:02:12.504700</ts>
    <user>Zaida</user>
    <text>Hi all! I'm having a problem with the newUrl function in the deprecated Navigation module. I need to navigate to an external url and it doesn't work. I tried the sample from &lt;https://github.com/sircharleswatson/elm-navigation-example&gt; which is perfectly working, changed the url parameter of the newUrl function to "&lt;http://google.com&gt;" in the update.elm file and the links are now not working. What am I doing wrong?</text>
  </message>
  <message conversation_id="492">
    <ts>2019-02-15T21:10:53.505800</ts>
    <user>Jana</user>
    <text>Yes, I have package `elm-tar`. Does tar without compression. There are two functions, `createArchive` and `extractArchive`.  There is a bug in the latter which hope to have fixed in the next day or two.  (It sometimes leaves trailing null bytes_.</text>
  </message>
  <message conversation_id="493">
    <ts>2019-02-16T03:57:17.506200</ts>
    <user>Stormy</user>
    <text>Hi all, is there an editable tree view library available in Elm on Github? I mean a way to add or delete nodes to a tree via UI.</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T04:52:48.509800</ts>
    <user>Cathey</user>
    <text>Hi all,
a question about `Browser.Event.on`
As we are living in the virtual dom, creating a load event is not possible. Am I right?
I have this custom event:
```
onLoad : msg -&amp;gt; Attribute msg
onLoad message =
    on "load" (Decode.succeed message)
```
and run it in my renderer:
```
section
        [ class "hscroller"
        , onLoad (Init identifier)
        ]
```
and have properly set up the message in my update function.
But the message is not send… so: Am I’m doing something wrong, or not possible at all</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T04:54:02.509900</ts>
    <user>Lea</user>
    <text>Not all elements dispatch the onload event &lt;https://www.w3schools.com/jsref/event_onload.asp&gt;</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T04:54:16.510200</ts>
    <user>Lea</user>
    <text>These do `&amp;lt;body&amp;gt;, &amp;lt;frame&amp;gt;, &amp;lt;iframe&amp;gt;, &amp;lt;img&amp;gt;, &amp;lt;input type="image"&amp;gt;, &amp;lt;link&amp;gt;, &amp;lt;script&amp;gt;, &amp;lt;style&amp;gt;`</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T04:55:18.510400</ts>
    <user>Cathey</user>
    <text>oh! crazy… had a look in the MDN documentation and they said: Element… so did not know. that. Thanks for the hint!</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T04:56:39.510800</ts>
    <user>Earlean</user>
    <text>yeah, it only works on element for which 'load' is meaningful. ie. an img tag can load it's src image.</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T04:56:50.511000</ts>
    <user>Earlean</user>
    <text>`&amp;lt;section&amp;gt;` has nothing to load</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:00:40.511200</ts>
    <user>Cathey</user>
    <text>hmm… ok then. Well I probably have a more archittectural problem. I want to do some initializationo stuff during runtim of my app. So not on launch. Because the initialization stuff triggers some Dom.getViewportOf, which can only be determined, when it exists…</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:04:16.511400</ts>
    <user>Earlean</user>
    <text>You can do that in `init`, the functions in `Browser.Dom` will wait for the next animation frame</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:06:48.511600</ts>
    <user>Cathey</user>
    <text>You mean `Browser.application.init`?</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:07:50.511900</ts>
    <user>Cathey</user>
    <text>It not possible to do it there, as this is only triggered once on app launnch… i thought…:thinking_face:</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:08:13.512200</ts>
    <user>Earlean</user>
    <text>yes, it is.</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:08:33.512400</ts>
    <user>Earlean</user>
    <text>if you're not doing it at initialisation then you're doing it in `update`</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:09:46.512600</ts>
    <user>Cathey</user>
    <text>yes. I would do it in my update function. But I need a Msg to trigger that update function, right?</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:10:37.512800</ts>
    <user>Earlean</user>
    <text>yep, but you need a `Msg` to `update` for the `view` to change at all</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:10:51.513000</ts>
    <user>Cathey</user>
    <text>So as soon as it’s rendered, it should throw a message to do stuff …</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:11:06.513200</ts>
    <user>Earlean</user>
    <text>since the `view` only represents the `model` and you can't change the `model` except in response to some event</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:12:15.513400</ts>
    <user>Earlean</user>
    <text>before any element is rendered in the `view` there was an event that updated to `model` to a state that would result in that element being rendered in the `view`, that is when you do it.</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:12:26.513600</ts>
    <user>Cathey</user>
    <text>exactly. So I need an event first. And I thought the `load`would do it, but that is not triggered according to the specs…</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:13:21.513900</ts>
    <user>Cathey</user>
    <text>I can make a port and subscribe to that… but thats some kind of ugly…</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:13:51.514200</ts>
    <user>Earlean</user>
    <text>what `model` change results in you displaying that `section` element?</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:14:38.514400</ts>
    <user>Earlean</user>
    <text>what event results in the `model` being in that state?</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:14:42.514600</ts>
    <user>Cathey</user>
    <text>```
Init id -&amp;gt;
            let
                _ =
                    Debug.log "initialized hScroller" id
            in
            ( hScroller
            , Cmd.batch
                [ Random.generate
                    NewRandom
                    (&lt;http://Random.int|Random.int&gt; 0 2)
                , Dom.getViewportOf id
                    |&amp;gt; Task.andThen (\_ -&amp;gt; setViewportToX id hScroller.viewport.viewport.x)
                    |&amp;gt; Task.attempt (\_ -&amp;gt; NoOp)
                ]
            )
```</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:15:25.514800</ts>
    <user>Earlean</user>
    <text>there are no `model` changes there</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:15:38.515000</ts>
    <user>Cathey</user>
    <text>I basically want to check the size of the section. with CMD</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:15:56.515200</ts>
    <user>Earlean</user>
    <text>in response to what?</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:16:06.515400</ts>
    <user>Cathey</user>
    <text>so no model update. I have to trigger some Cmd’s first, and those responses will update my model then…</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:17:27.515600</ts>
    <user>Cathey</user>
    <text>Yes that’s the problem. It should be the response of “that the sectino is now rendered and availlable”…</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:18:49.515800</ts>
    <user>Cathey</user>
    <text>The model has a viewport. And this should be set as soon as the section is createtd.</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:19:28.516000</ts>
    <user>Cathey</user>
    <text>As the content is variable, I dont know it in advance</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:19:47.516200</ts>
    <user>Earlean</user>
    <text>You're trying to have an event produced when the `section` appears in the `view`, but whether the `section` appears in the `view` is dependent on whether the `model` contains a certain value. So you should be asking, when does the model contain such a value?</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:21:05.516400</ts>
    <user>Earlean</user>
    <text>It's common in ReactJS to do things like `componentDidMount` etc. this isn't how it's done in Elm. Because `view` elements in Elm can't hold state.</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:21:20.516600</ts>
    <user>Earlean</user>
    <text>the state is in the model</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:22:33.516900</ts>
    <user>Cathey</user>
    <text>Right! Then I need a state in the model, which  controls the visibility of the view… thats the way round….</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:31:56.517200</ts>
    <user>Cathey</user>
    <text>But however, at some point it has to be triggered by a message… which an elm app can never send itself but only by a Browser.Event or Dom function, HTML request or any other elm function that interacts with the outer world… conclussionn: what I want is not possible in elm, except with binding it to a port and subscribe to that…</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:55:05.517400</ts>
    <user>Earlean</user>
    <text>if you had a port, when would you send to it?</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:56:22.517600</ts>
    <user>Earlean</user>
    <text>I think you're missing the key point, either you `model` contains a value that would result in that `section` being in the `view` at `init` or some event happens that changes the `model` so that the `section` is in your `view`</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T05:57:09.517800</ts>
    <user>Earlean</user>
    <text>if the value is there at `init` then `section` will be in the `view` at `init` so you can do this at `init`</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:01:25.518000</ts>
    <user>Cathey</user>
    <text>yes. totally agree. But I did end up myself in a dead-end. I totally messed up my architecture. it works, but does not follow this pattern strictly… :disappointed:</text>
  </message>
  <message conversation_id="495">
    <ts>2019-02-16T06:09:50.520200</ts>
    <user>Jonna</user>
    <text>Hi folks, I was under the assumption that `Html.lazy` would only be called if the passed value changed, but from this scsee &lt;https://ellie-app.com/4KMM8RhbVpva1&gt; it appears that lazy have no effect (it's called on each frame, not every second as it should).</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:11:45.520800</ts>
    <user>Earlean</user>
    <text>&lt;@Jonna&gt; the function that you passed to `Html.lazy` is a different function each time</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:13:25.522500</ts>
    <user>Earlean</user>
    <text>the trick to `Html.Lazy.lazy` is that it does 'reference comparison' rather than the usual 'value comparison' in the rest of Elm. This is an optimisation, doing a full value comparison would be very costly and would make the optimisation worthless.</text>
  </message>
  <message conversation_id="495">
    <ts>2019-02-16T06:17:46.523000</ts>
    <user>Jonna</user>
    <text>ok</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:17:54.523400</ts>
    <user>Earlean</user>
    <text>&lt;@Jonna&gt; &lt;https://ellie-app.com/4KMW5QMCfxna1&gt; is `Html.Lazy.lazy` functioning as expected</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:17:58.523600</ts>
    <user>Jonna</user>
    <text>I didn't knew the function reference counted as well</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:19:14.524600</ts>
    <user>Earlean</user>
    <text>it must, otherwise providing a different function wouldn't result in a change</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:19:26.524900</ts>
    <user>Earlean</user>
    <text>which would be very unexpected</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:19:34.525200</ts>
    <user>Jonna</user>
    <text>he idea was to throttle as an answer to : &lt;https://discourse.elm-lang.org/t/many-messages-causes-slow-rendering/3150&gt;</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:20:12.525800</ts>
    <user>Jonna</user>
    <text>but it's not working as I thought it would (and am pretty sure it was a few years ago)</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:20:46.526200</ts>
    <user>Earlean</user>
    <text>`Html.Lazy.lazy` has always been reference comparison</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:21:51.526900</ts>
    <user>Jonna</user>
    <text>yes, for the value, but for the function I am fairly sure that in 0.15-ish it wasn't checking</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:22:10.527100</ts>
    <user>Jonna</user>
    <text>anyways</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:22:27.527500</ts>
    <user>Jonna</user>
    <text>thanks for the clarification :slightly_smiling_face:</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:23:14.528400</ts>
    <user>Earlean</user>
    <text>The thing about `Html.Lazy.lazy` is that it's a transparent optimisation, it works the same whether or not the optimisation is happening or not.</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:25:31.529800</ts>
    <user>Earlean</user>
    <text>if it didn't compare against the function then it would produce a different result than if it was just `identity` which would be very broken</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:31:09.532600</ts>
    <user>Allyn</user>
    <text>Hello. I’m discovering the rtfeldman/elm-css package. I can’t figure how to use the transparent color value. This code does not compile because transparent has not the same type as hex “EEE”:
```
    let
        rowColor =
            if item.even then
                hex "EEE"

            else
                transparent
    in
    div
        [ css [
            backgroundColor rowColor
            ]
        ]
    &amp;lt;| ...
```</text>
  </message>
  <message conversation_id="494">
    <ts>2019-02-16T06:41:35.533800</ts>
    <user>Allyn</user>
    <text>An example in ellie: &lt;https://ellie-app.com/4KNfXGNtWnVa1&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T06:42:35.533900</ts>
    <user>Cathey</user>
    <text>But thanks for your support :slightly_smiling_face:</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T06:47:07.535100</ts>
    <user>Agustin</user>
    <text>I think you need `ColorValue (hex "EEE")`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T06:47:51.535800</ts>
    <user>Agustin</user>
    <text>Or make one somehow</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:48:31.536500</ts>
    <user>Lynne</user>
    <text>&lt;@Allyn&gt; Try this instead:
```
rowBgColor =
  if item.even then
    backgroundColor (hex "EEE")
  else
    backgroundColor transparent

...

div [css [rowBgColor]] [...]
```</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T06:52:41.537900</ts>
    <user>Leopoldo</user>
    <text>are fragments of views not functions?
&lt;https://gist.github.com/afidegnum/d855c6201c855b1798e2a1826695df43#file-main-elm-L660&gt;
gives me errors of
``` The `newPageForm` value is not a function, but it was given 1 argument.
660|         , (newPageForm page)
                ^^^^^^^^^^^
Are there any missing commas? Or missing parentheses?
```</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:53:01.538300</ts>
    <user>Allyn</user>
    <text>&lt;@Lynne&gt; it works, but I  don’t understand why</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:53:21.538900</ts>
    <user>Agustin</user>
    <text>Becuase `backgroundColor` accepts `ColorValue compatible`</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:53:26.539200</ts>
    <user>Lynne</user>
    <text>As you mentioned `hex "EEE"` and `transparent` have different types</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:53:27.539300</ts>
    <user>Agustin</user>
    <text>and returns the same thing, regardless of which colorvalue</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:53:54.540300</ts>
    <user>Allyn</user>
    <text>OK, I get it! Thank you for your help</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:53:55.540400</ts>
    <user>Lynne</user>
    <text>`backgroundColor` accepts any of these and is of type `Style` regardless of colour</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T06:55:39.540700</ts>
    <user>Earlean</user>
    <text>&lt;@Leopoldo&gt; &lt;https://gist.github.com/afidegnum/d855c6201c855b1798e2a1826695df43#file-main-elm-L540-L541&gt; it's not a function</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:56:20.541200</ts>
    <user>Earlean</user>
    <text>you can tell by the type signature, if it was a function then it's type would contain `-&amp;gt;`</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:56:49.541700</ts>
    <user>Earlean</user>
    <text>eg. `String -&amp;gt; Html msg` is a function, `Html msg` isn't a function</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:58:24.541900</ts>
    <user>Leopoldo</user>
    <text>oh ok, :slightly_smiling_face:</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T06:58:30.542100</ts>
    <user>Leopoldo</user>
    <text>still learning :slightly_smiling_face:</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T07:18:28.542400</ts>
    <user>Leopoldo</user>
    <text>what's wrong with this code ? ``` onePage : Page -&amp;gt; Html msg
onePage page =
       li [] [ text page.title
           , a [ href page.id ] [ text page.title ]
           , a [ href page.id ] [ text "Edit" ]
           , a [ href page.id ] [ text "Delete" ]
           ]```</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T07:19:28.542600</ts>
    <user>Leopoldo</user>
    <text>`The function expects 2 arguments, but it got 3 instead.`</text>
  </message>
  <message conversation_id="496">
    <ts>2019-02-16T07:23:10.543300</ts>
    <user>Earlean</user>
    <text>&lt;@Leopoldo&gt; which function is that message about?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T07:24:02.543500</ts>
    <user>Leopoldo</user>
    <text>&lt;https://gist.github.com/afidegnum/a9bb35747aab5f598ef12cd277cce84f#file-main-elm-L441&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T07:24:34.543700</ts>
    <user>Leopoldo</user>
    <text>it's ok, i have got it,</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T07:24:43.543900</ts>
    <user>Leopoldo</user>
    <text>some intruding tag :smile:</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T07:32:31.545200</ts>
    <user>Leopoldo</user>
    <text>appending lists via `,` or `++` doesn't seems to work at &lt;https://gist.github.com/afidegnum/01faa688eb35104d2a0aa19b820132cc#file-main-elm-L436-L440&gt;
`The (++) operator cannot append these two values:`
or
```
The 2nd element of this list does not match all the previous elements:
438|             ul [] [(List.map onePage pages)
439|&amp;gt;             , a [ href "/posts/new" ] [ text "Create new post" ]
440|              ]
This `a` call produces:
    Html.Html msg
But all the previous elements in the list are:
    List (Html.Html msg)
```</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:30:01.545500</ts>
    <user>Leopoldo</user>
    <text>any insight ?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:54:51.545900</ts>
    <user>Agustin</user>
    <text>`ul` takes two lists</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:55:11.546500</ts>
    <user>Agustin</user>
    <text>The second list must contain `Html.Html msg`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:55:17.546900</ts>
    <user>Agustin</user>
    <text>You’re trying to have a sub list</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:55:20.547100</ts>
    <user>Agustin</user>
    <text>You can’t do that</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:55:35.547500</ts>
    <user>Agustin</user>
    <text>You need to do `(List.map onePage pages) ++ [a [] []]`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:55:49.547900</ts>
    <user>Agustin</user>
    <text>And you will probably need `()` around it to keep the compiler happy</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:58:15.548200</ts>
    <user>Leopoldo</user>
    <text>i did that but the compiler won't budge :slightly_smiling_face:</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:58:30.548500</ts>
    <user>Agustin</user>
    <text>You need to split yours lists like I said</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:58:48.549000</ts>
    <user>Agustin</user>
    <text>if you remove `(List.map onePage pages),` from your first snippet it will compile</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:59:23.549500</ts>
    <user>Agustin</user>
    <text>`ul [] ((List.map onePage pages) ++ [a [href "/posts/new" ] [text "Create new post"]])`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:59:33.549800</ts>
    <user>Agustin</user>
    <text>Note the lack of outer `[` brackets on the map</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T08:59:49.550200</ts>
    <user>Leopoldo</user>
    <text>``` The 2nd element of this list does not match all the previous elements:

438|             ul [] [(List.map onePage pages)
439|&amp;gt;             , a [ href "/posts/new" ] [ text "Create new post" ]
440|              ]

This `a` call produces:
    Html.Html msg
But all the previous elements in the list are:
    List (Html.Html msg)

```</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:00:21.550700</ts>
    <user>Agustin</user>
    <text>`ul [] ((List.map onePage pages) ++ [a [href "/posts/new" ] [text "Create new post"]])`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:00:26.551000</ts>
    <user>Leopoldo</user>
    <text>that's the new modification &lt;https://gist.github.com/afidegnum/04b9d7eae8f68c6016a1347a00d4ddd5#file-main-elm-L436&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:00:44.551500</ts>
    <user>Agustin</user>
    <text>No you can’t do that</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:00:49.551700</ts>
    <user>Leopoldo</user>
    <text>??</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:00:50.551800</ts>
    <user>Agustin</user>
    <text>`,` works only in `[]`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:01:11.552200</ts>
    <user>Agustin</user>
    <text>And `[List.map a b]` produces `[[]]`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:01:16.552400</ts>
    <user>Agustin</user>
    <text>Which is what you need to be trying to avoid</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:01:23.552600</ts>
    <user>Leopoldo</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:03:01.553800</ts>
    <user>Leopoldo</user>
    <text>but by the way, here the link is at the buttom of the list, instead of top, that's why i wanted to move a href to the top before `ul`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:17:23.554000</ts>
    <user>Agustin</user>
    <text>&lt;https://ellie-app.com/4KQFCc87zBSa1&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:17:26.554200</ts>
    <user>Agustin</user>
    <text>This is your code compiling</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:17:44.554600</ts>
    <user>Agustin</user>
    <text>It doesn’t run because ellie seems to be missing Elm, no idea why.</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:23:19.556600</ts>
    <user>Agustin</user>
    <text>This is it running but it won’t run in ellie &lt;https://ellie-app.com/4KQL2CmQCqxa1&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:25:53.558400</ts>
    <user>Raye</user>
    <text>Anyone else using the elm/file package.  I am trying to use File.Select.files but the file browser that comes up is a single file select browser.  I checked the kernel js code and it seems legit as it sets the multiple attribute to an empty string.  BTW I couldn't find the installed elm packages src in my project directory (not in elm-stuff or couldn't find with a linux find command.  If there is a way to access it,  please let me know.</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:27:45.558900</ts>
    <user>Agustin</user>
    <text>Look in `~/.elm/0.19.0/package/elm/file/`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:28:13.559400</ts>
    <user>Agustin</user>
    <text>Are you sure its a single file browser? What happens if you hit shift while clicking</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:35:04.561500</ts>
    <user>Raye</user>
    <text>yeah i'm sure.  I tried it on my mac and android phone.</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:35:26.562000</ts>
    <user>Leopoldo</user>
    <text>&lt;@Leonor&gt; it needs to sent `Http.requests` which is not i believe that could be the error, there are additional compilation errors i m trying to fix as well</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:35:46.562400</ts>
    <user>Agustin</user>
    <text>&lt;@Leopoldo&gt; yes I changed a fair amount to make it compile</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:36:51.562700</ts>
    <user>Leopoldo</user>
    <text>what other errors did you encountered ?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:37:34.563200</ts>
    <user>Agustin</user>
    <text>Not properly namespaced Decoders, Frame has the wrong type sig, etc</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:37:39.563400</ts>
    <user>Agustin</user>
    <text>Just grab the ellie src and diff it</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:38:26.563800</ts>
    <user>Leopoldo</user>
    <text>ah, ok, then let me use yours :slightly_smiling_face: thanks a lot,</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:38:53.564300</ts>
    <user>Leopoldo</user>
    <text>well, this is my named "ELM Rest Sheet"</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:39:04.564600</ts>
    <user>Leopoldo</user>
    <text>which can be used for any Rest based operations :slightly_smiling_face:</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:39:16.564900</ts>
    <user>Leopoldo</user>
    <text>i m preparing a blog about it as well</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:41:03.565400</ts>
    <user>Leopoldo</user>
    <text>&lt;@Leonor&gt; Gracias, it successfully compiled thanks a lot</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:42:47.565600</ts>
    <user>Earlean</user>
    <text>It's just 'Elm', like the name of the type of tree. It's not an acronym so no need to put it in all uppercase.</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:42:59.565900</ts>
    <user>Leopoldo</user>
    <text>what do you think needs improving ?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T09:44:01.566000</ts>
    <user>Leopoldo</user>
    <text>ok, thanks for the correction, I have a bad habit of uppercasing sentences :smile:</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:10:31.566500</ts>
    <user>Leopoldo</user>
    <text>why is `elm-live` giving me file not found error ?</text>
  </message>
  <message conversation_id="498">
    <ts>2019-02-16T10:10:51.566800</ts>
    <user>Regenia</user>
    <text>Can you share a little more context?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:12:28.567000</ts>
    <user>Leopoldo</user>
    <text>`$ elm-live src/Main.elm --open`
`Success! Compiled 1 module.`
from localhost:8000
I have a ```file not found``` error</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:13:36.567700</ts>
    <user>Regenia</user>
    <text>Hmmm and an index.html was output?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:14:19.567900</ts>
    <user>Leopoldo</user>
    <text>no i didn't add the `index.html`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:14:27.568100</ts>
    <user>Leopoldo</user>
    <text>maybe let me try that</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:14:57.569200</ts>
    <user>Regenia</user>
    <text>Well with the command you ran the index.html should be generated for you. I was wondering if it was actually output</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:16:24.569400</ts>
    <user>Leopoldo</user>
    <text>wow.. no html markup when i view source</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:17:36.571000</ts>
    <user>Regenia</user>
    <text>Okay there might just be an bug in the source it sometimes happens. Did you install elm-live in your project using npm or globally?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:17:50.571200</ts>
    <user>Leopoldo</user>
    <text>yes i did</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:18:04.571700</ts>
    <user>Regenia</user>
    <text>Locally or globally?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:18:13.571900</ts>
    <user>Leopoldo</user>
    <text>npm -g</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:18:21.572300</ts>
    <user>Leopoldo</user>
    <text>ok, i m getting somewhere</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:18:39.572900</ts>
    <user>Leopoldo</user>
    <text>`Cannot GET /pages`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:19:32.573800</ts>
    <user>Regenia</user>
    <text>So in your project files was the index.html created now?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:19:46.574000</ts>
    <user>Leopoldo</user>
    <text>yes,</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:20:14.574200</ts>
    <user>Leopoldo</user>
    <text>apparently the index file is created but i believe the error is from communicating the rest server</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:22:00.574400</ts>
    <user>Leopoldo</user>
    <text>the server is able to output the result,</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:22:15.574700</ts>
    <user>Leopoldo</user>
    <text>but i don't know why i m having error here</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:22:46.575700</ts>
    <user>Regenia</user>
    <text>Okay so is the error happening on the root url or when you are trying to navigate to another url in your project?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:23:37.575900</ts>
    <user>Leopoldo</user>
    <text>on the root url i have a `file not found` error but to another error, i have a `Cannot GET /pages` error</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T10:25:52.576200</ts>
    <user>Leopoldo</user>
    <text>do i have to fetch data from the `Model` or `Page` ?
&lt;https://gist.github.com/afidegnum/6192caed9ff5cf85e50d441d1fe269f4#file-main-elm-L445-L452&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:02:16.577000</ts>
    <user>Leopoldo</user>
    <text>any insight? consistently facing a `file not found` on elm-live</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:05:00.578600</ts>
    <user>Lynne</user>
    <text>You don't have a `main` function in your module, so no JS file is even generated</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:05:31.579600</ts>
    <user>Regenia</user>
    <text>Okay don't have to time to go through that all right now, but one thing I would do to make sure it is a code problem not an elm-live problem is try running your project in elm reactor and if you are getting the same issues it would be a code issue and you could start and new thread in the help channel to focus on that. :blush:</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:06:06.579800</ts>
    <user>Leopoldo</user>
    <text>elm reactor ?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:06:24.580300</ts>
    <user>Leopoldo</user>
    <text>I m using `Main.elm`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:06:48.580700</ts>
    <user>Lynne</user>
    <text>It has to expose `main` function for the runtime to run it</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:07:02.580900</ts>
    <user>Leopoldo</user>
    <text>give me an example</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:07:19.581100</ts>
    <user>Lynne</user>
    <text>&lt;https://guide.elm-lang.org&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:08:41.581500</ts>
    <user>Leopoldo</user>
    <text>this is what i have done `module Main exposing (..)`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:09:20.581800</ts>
    <user>Lynne</user>
    <text>On this gist there is no `main` function in the `Main` module: &lt;https://gist.github.com/afidegnum/6192caed9ff5cf85e50d441d1fe269f4#file-main-elm-L445-L452&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:09:38.582200</ts>
    <user>Lynne</user>
    <text>It does not matter that you wrote `exposing (..)` if there is no function it can't be exposed</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:12:34.582400</ts>
    <user>Leopoldo</user>
    <text>wow! lol</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:17:56.582500</ts>
    <user>Leopoldo</user>
    <text>ok, it's working now, as suggested adding `main` works</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:33:47.583500</ts>
    <user>Leopoldo</user>
    <text>request successfully gone and response fetched but they are not loaded into the view.
&lt;https://gist.github.com/afidegnum/8ec22478549ceef6e6d4a7b0f8d0ae80#file-main-elm-L405-L700&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:42:06.583900</ts>
    <user>Leopoldo</user>
    <text>and also requests are sent multiple times i don't understand why</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:44:02.584600</ts>
    <user>Florencia</user>
    <text>&lt;@Leopoldo&gt; I'd check if the same Msgs fire multiple times. (ie. with `update msg model = case Debug.log "msg" msg of ...`)</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:44:22.585000</ts>
    <user>Florencia</user>
    <text>if ie. SubmitNewPage fires multiple times, that would send the request multiple times.</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:45:09.585800</ts>
    <user>Leopoldo</user>
    <text>yes, i believe that could be an issue but it supposed to be when a new event occured,</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:45:27.586400</ts>
    <user>Leopoldo</user>
    <text>but fetchlist should fetch requsts once.</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:45:46.586900</ts>
    <user>Leopoldo</user>
    <text>for the moment views are not loaded yet,</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:46:49.587400</ts>
    <user>Leopoldo</user>
    <text>&lt;@Florencia&gt; where do i place the Debug.log ?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:47:20.587600</ts>
    <user>Florencia</user>
    <text>in the `case msg of` in update</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:48:16.588000</ts>
    <user>Florencia</user>
    <text>`case Debug.log "msg" msg of`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:49:48.588700</ts>
    <user>Leopoldo</user>
    <text>``` FetchPages -&amp;gt;
                       ( { model | pages = RemoteData.Loading }, fetchPagesCommand Debug.log "msg" msg of)```
or a new branch?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:50:27.589100</ts>
    <user>Florencia</user>
    <text>&lt;https://gist.github.com/afidegnum/8ec22478549ceef6e6d4a7b0f8d0ae80#file-main-elm-L304&gt;
here. change the line `case msg of` to `case Debug.log "msg" msg of`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:51:01.589300</ts>
    <user>Leopoldo</user>
    <text>ok</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:52:15.589500</ts>
    <user>Leopoldo</user>
    <text>strange, no output</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:53:01.589800</ts>
    <user>Leopoldo</user>
    <text>except the old `Compiled in DEV mode. Follow the advice at &lt;https://elm-lang.org/0.19.0/optimize&gt; for better performance and smaller assets.`</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:53:20.590100</ts>
    <user>Florencia</user>
    <text>well then, no Msgs are probably firing?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:53:25.590300</ts>
    <user>Florencia</user>
    <text>can you show how your main looks?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:53:34.590600</ts>
    <user>Florencia</user>
    <text>(I can't find it in the source you posted)</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T11:59:48.591100</ts>
    <user>Leopoldo</user>
    <text>&lt;@Florencia&gt; &lt;https://gist.github.com/afidegnum/2e91cfbaac056defad93f1cff389a8ed#file-main-elm-L304&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T12:00:41.591700</ts>
    <user>Florencia</user>
    <text>do you have the `main` value defined somewhere?</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T12:00:58.591900</ts>
    <user>Leopoldo</user>
    <text>yes, hold a sec</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T12:11:45.592600</ts>
    <user>Florencia</user>
    <text>Anybody knows why running `elm-test` fails in Travis CI?
&lt;https://travis-ci.org/GlobalWebIndex/class-namespaces/builds/494264002&gt;
&lt;https://github.com/GlobalWebIndex/class-namespaces/blob/with-states/.travis.yml&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T12:21:02.592900</ts>
    <user>Leopoldo</user>
    <text>&lt;@Florencia&gt; it works now :slightly_smiling_face:</text>
  </message>
  <message conversation_id="497">
    <ts>2019-02-16T12:21:15.593500</ts>
    <user>Leopoldo</user>
    <text>now trying to fix other parts</text>
  </message>
  <message conversation_id="499">
    <ts>2019-02-16T13:26:38.594500</ts>
    <user>Desire</user>
    <text>whos using elm-format and windows? please weight in here &lt;https://github.com/avh4/elm-format/issues/596&gt;</text>
  </message>
  <message conversation_id="499">
    <ts>2019-02-16T14:55:03.594800</ts>
    <user>Lula</user>
    <text>Dunno if this belongs to the &lt;#C192T0Q1E|beginners&gt;. Posting it here anyways for the reference.</text>
  </message>
  <message conversation_id="500">
    <ts>2019-02-16T15:13:55.594900</ts>
    <user>Lula</user>
    <text>...</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T15:35:05.595900</ts>
    <user>Florencia</user>
    <text>How do you folks remember the order of `foldl` / `foldr`'s lambda? (ie. `newVal acc` or `acc newVal`)</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T15:35:14.596100</ts>
    <user>Florencia</user>
    <text>I always have to look it up</text>
  </message>
  <message conversation_id="499">
    <ts>2019-02-16T15:49:03.596800</ts>
    <user>Huong</user>
    <text>In Elm, "the thing being modified" is usually last, for pipeline-friendliness</text>
  </message>
  <message conversation_id="499">
    <ts>2019-02-16T15:49:55.597700</ts>
    <user>Huong</user>
    <text>so `v -&amp;gt; acc -&amp;gt; acc` :shrug:</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T15:52:51.599900</ts>
    <user>Florencia</user>
    <text>Right, kinda makes sense, even though I wouldn't mentally connect that lambda with pipeline-style functions. But yeah, it's adhering to a language-wide convention. Thx!</text>
  </message>
  <message conversation_id="499">
    <ts>2019-02-16T15:55:14.601800</ts>
    <user>Huong</user>
    <text>Yeah, for some reason, I occasionally visualise folds as long pipelines with the values being folded over being the argument on consecutive lines. So `List.foldl f acc [ 1, 2, 3 ]` becomes `acc |&amp;gt; f 1 |&amp;gt; f 2 |&amp;gt; f 3` :smile:</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:09:23.602200</ts>
    <user>Florencia</user>
    <text>&lt;@Modesto&gt;
```
15208275*592256471*3
&amp;gt; 27021597844492572
3*592256471*15208275
&amp;gt; 27021597844492576
```</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:09:37.602700</ts>
    <user>Florencia</user>
    <text>JS console</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:09:42.602900</ts>
    <user>Florencia</user>
    <text>this is a problem with JS numbers</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:09:48.603100</ts>
    <user>Modesto</user>
    <text>o ok</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:09:50.603300</ts>
    <user>Modesto</user>
    <text>thank you</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:10:04.603600</ts>
    <user>Florencia</user>
    <text>if you need bigger precision there is a bigint package I think</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:10:15.603800</ts>
    <user>Florencia</user>
    <text>&lt;https://package.elm-lang.org/packages/cmditch/elm-bigint/latest/BigInt&gt;</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:10:21.604000</ts>
    <user>Modesto</user>
    <text>ok thank you</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:10:26.604200</ts>
    <user>Modesto</user>
    <text>was just running some tests</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:10:35.604500</ts>
    <user>Modesto</user>
    <text>updated elm-monoid</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:10:39.604700</ts>
    <user>Modesto</user>
    <text>to .19</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:10:58.605100</ts>
    <user>Modesto</user>
    <text>but was also trying to wrap my head around what monoid is</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:11:15.605300</ts>
    <user>Modesto</user>
    <text>with the tests</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:12:23.606000</ts>
    <user>Florencia</user>
    <text>Did you figure it out, or do you want some help? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:12:41.606200</ts>
    <user>Modesto</user>
    <text>I think i'm ok</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:12:59.606700</ts>
    <user>Modesto</user>
    <text>using elm-monoid to write a complex number package for elm</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:14:14.607800</ts>
    <user>Huong</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/core/1.0.2/Basics#Int&gt; Also has a note on the ranges for which operations are safe :slightly_smiling_face:</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:14:28.608100</ts>
    <user>Modesto</user>
    <text>thank you</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:14:38.608400</ts>
    <user>Modesto</user>
    <text>maybe ill round down in my test</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:15:39.609500</ts>
    <user>Florencia</user>
    <text>So, in this case the numbers were different because `List.product` and `List.foldr` start from different sides (`List.product` uses `List.foldl`) and in this extreme case (big numbers) the associativity law breaks down. JS numbers are floats under the hood.</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:16:35.610500</ts>
    <user>Florencia</user>
    <text>most libraries' approach to "what to do when you the numbers get really big or really small" is "don't care" - that's a possibility for you too. Just use the operators you've been given and inherit their weaknesses</text>
  </message>
  <message conversation_id="502">
    <ts>2019-02-16T16:38:20.613200</ts>
    <user>Valentin</user>
    <text>How can I decode html page? I'm writing a simple blog that internally grubs posts from some urls. For some reason Http.get gives html rather than plain text (`Accept: text/plain` doesn't help), so I guess html decoding might do the thing, though quite painfully</text>
  </message>
  <message conversation_id="502">
    <ts>2019-02-16T16:40:23.613900</ts>
    <user>Nana</user>
    <text>&lt;@Valentin&gt; this package should probably help: &lt;https://package.elm-lang.org/packages/hecrj/html-parser/latest/Html-Parser&gt;</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:41:47.614400</ts>
    <user>Florencia</user>
    <text>&lt;@Valentin&gt; yeah if you managed to get it in JSON or XML it would be definitely less painful :slightly_smiling_face:</text>
  </message>
  <message conversation_id="501">
    <ts>2019-02-16T16:42:53.615700</ts>
    <user>Florencia</user>
    <text>maybe you will have luck with parsing the HTML as XML but I'm not sure it would work. Anyways, the XML packages have more tooling (decoders etc.) around than the HTML one</text>
  </message>
  <message conversation_id="502">
    <ts>2019-02-16T16:42:54.615800</ts>
    <user>Valentin</user>
    <text>&lt;@Nana&gt; seems it doesn't parse to elm/html type :disappointed:</text>
  </message>
  <message conversation_id="502">
    <ts>2019-02-16T16:43:08.616200</ts>
    <user>Florencia</user>
    <text>&lt;@Valentin&gt; it parses to its own but you can convert from that one to elm/html</text>
  </message>
  <message conversation_id="502">
    <ts>2019-02-16T16:43:22.616500</ts>
    <user>Florencia</user>
    <text>&lt;https://package.elm-lang.org/packages/hecrj/html-parser/latest/Html-Parser-Util#toVirtualDom&gt;</text>
  </message>
  <message conversation_id="502">
    <ts>2019-02-16T16:44:52.616800</ts>
    <user>Valentin</user>
    <text>Oh, missed that, thanks!</text>
  </message>
  <message conversation_id="503">
    <ts>2019-02-16T19:02:50.621300</ts>
    <user>Leopoldo</user>
    <text>&lt;https://gist.github.com/afidegnum/4347506487ddfdd90ea91d2665c43a1e#file-main-elm-L459-L461&gt;
i m having error here
``` Type mismatch. Required: (Route, String, String) Found: (Msg, String, String)```</text>
  </message>
  <message conversation_id="503">
    <ts>2019-02-17T01:34:41.622900</ts>
    <user>Moshe</user>
    <text>Hey &lt;@Leopoldo&gt; your problem seems to be `DeletePage`.  `DeletePage` is defined inside your `Msg` type. The thing you want to pass there seems to be `PageDelete` :slightly_smiling_face:</text>
  </message>
  <message conversation_id="503">
    <ts>2019-02-17T01:36:41.623200</ts>
    <user>Leopoldo</user>
    <text>ok thanks</text>
  </message>
  <message conversation_id="503">
    <ts>2019-02-17T04:00:53.623600</ts>
    <user>Leopoldo</user>
    <text>None</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:09:36.623900</ts>
    <user>Iona</user>
    <text>viewPages is expecting 2 arguments, you’re only provided 1. pass the route in as well</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:10:06.624200</ts>
    <user>Iona</user>
    <text>i.e. model.route</text>
  </message>
  <message conversation_id="503">
    <ts>2019-02-17T04:13:20.624400</ts>
    <user>Leopoldo</user>
    <text>what about line 457?</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:21:36.624600</ts>
    <user>Iona</user>
    <text>the expression on the right of (::) needs to be a list, so wrap the entire list.map expression in parenthesis or use (&amp;lt;|)</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:21:47.624800</ts>
    <user>Iona</user>
    <text>the compiler error message says this as well</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:30:08.625000</ts>
    <user>Leopoldo</user>
    <text>it didnt worked out. &lt;https://gist.github.com/afidegnum/57a63d81f0273e52f6a858282c573734#file-main-elm-L458&gt;</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:37:34.626300</ts>
    <user>Moshe</user>
    <text>Do we have any mitigation strategies for the error `elm: Map.!: given key is not an element in the map` when using the webpack / rollup loader for elm modules? I found &lt;https://github.com/elm/compiler/issues/1851&gt; but I have not found a workaround to this problem.</text>
  </message>
  <message conversation_id="503">
    <ts>2019-02-17T04:43:35.626400</ts>
    <user>Leopoldo</user>
    <text>this is what i have done and the new error
&lt;https://gist.github.com/afidegnum/76daeb299a593dd4bd4ab9b3e79b165b#file-main-elm-L454-L463&gt;
``` I am having trouble with this (::) operator:
457|&amp;gt;       (text page.title
458|&amp;gt;         :: (List.map (viewLinkOrText currentRoute)
459|&amp;gt;           [ (ReadPage page.id,   "Read", (String.fromInt page.id))
460|&amp;gt;           , (EditPage page.id,   "Edit",     (String.fromInt page.id))
461|&amp;gt;           , (PageDelete page.id, "Delete",   (String.fromInt page.id))
462|&amp;gt;           ] )
The left side of (::) is:
    Html.Html msg
But you are trying to put that into a list filled with:
    String -&amp;gt; String -&amp;gt; Html.Html msg
Lists need ALL elements to be the same type though.
-- TYPE MISMATCH -------------------------------------------------- src/Main.elm
The 2nd argument to `map` is not what I expect:
458|          :: (List.map (viewLinkOrText currentRoute)
459|&amp;gt;           [ (ReadPage page.id,   "Read", (String.fromInt page.id))
460|&amp;gt;           , (EditPage page.id,   "Edit",     (String.fromInt page.id))
461|&amp;gt;           , (PageDelete page.id, "Delete",   (String.fromInt page.id))
462|&amp;gt;           ] )
This argument is a list of type:
    List ( Route, String, String )
But `map` needs the 2nd argument to be:
    List Route

-- TYPE MISMATCH -------------------------------------------------- src/Main.elm
The 3rd element of this list does not match all the previous elements:
213|         [ UP.map ListPage &lt;http://UP.top|UP.top&gt;
214|         , UP.map AddPage (UP.s "add")
215|&amp;gt;        , UP.map ReadPage (UP.s "id") -- page id
216|         , UP.map EditPage (UP.s "edit") -- Page id
217|         ]
This `map` call produces:
    UP.Parser ((PageId -&amp;gt; Route) -&amp;gt; c) c
But all the previous elements in the list are:
    UP.Parser (Route -&amp;gt; c) c
```</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:45:59.627900</ts>
    <user>Lynne</user>
    <text>&lt;@Moshe&gt; I think there are two major workarounds: do not use the `--debug` flag and build compiler from forked repo where this bug is fixed as a temporary solution</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:48:10.628300</ts>
    <user>Lynne</user>
    <text>There is a PR: &lt;https://github.com/elm/compiler/pull/1850&gt; and the respective repo: &lt;https://github.com/tomstejskal/compiler&gt;</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:48:19.628600</ts>
    <user>Lynne</user>
    <text>In PR there are instructions on how to build it</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:48:48.629000</ts>
    <user>Leopoldo</user>
    <text>&lt;@Lynne&gt; hi, can you please lend a hand ?</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T04:57:18.629800</ts>
    <user>Moshe</user>
    <text>&lt;@Lynne&gt; awesome! Thanks for the links.</text>
  </message>
  <message conversation_id="504">
    <ts>2019-02-17T05:05:54.629900</ts>
    <user>Moshe</user>
    <text>&lt;@Leopoldo&gt; You are trying to `cons` / `::` a new element to a list. The element is a `Html msg` and the compiler is complaining the other elements in the list are `String -&amp;gt; String -&amp;gt; Html msg`.

This tells us, that the function `viewLinkOrText` is expecting other arguments than what you are handing over.

In your case the function `viewLinkOrText` would need the function signature `viewLinkOrText : Route -&amp;gt; (Route,  String, String) -&amp;gt; Html msg` to fullfil your contract.

So either: you change the function signature of `viewLinkOrText`, or you build a helper function that takes a triplet of `(Route, String, String)` and calls your `viewLinkOrText` function with the unwrapped parameters. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="505">
    <ts>2019-02-17T06:43:50.636500</ts>
    <user>Leopoldo</user>
    <text>hi</text>
  </message>
  <message conversation_id="506">
    <ts>2019-02-17T07:45:56.637300</ts>
    <user>Vilma</user>
    <text>I’m having the ports undefined problem in a mini-project. I believe this is because I must declare AND use a port in the Elm code?</text>
  </message>
  <message conversation_id="506">
    <ts>2019-02-17T07:48:54.637800</ts>
    <user>Earlean</user>
    <text>&lt;@Vilma&gt; if you don't use a port the compiler will consider it dead code and remove it</text>
  </message>
  <message conversation_id="506">
    <ts>2019-02-17T07:49:06.638100</ts>
    <user>Vilma</user>
    <text>yes I read about that</text>
  </message>
  <message conversation_id="506">
    <ts>2019-02-17T07:49:20.638600</ts>
    <user>Vilma</user>
    <text>just now in the forum</text>
  </message>
  <message conversation_id="506">
    <ts>2019-02-17T07:49:33.638900</ts>
    <user>Vilma</user>
    <text>so I must call the port function in the Elm code?</text>
  </message>
  <message conversation_id="506">
    <ts>2019-02-17T07:49:39.639100</ts>
    <user>Vilma</user>
    <text>also is that a bug? :thinking_face:</text>
  </message>
  <message conversation_id="506">
    <ts>2019-02-17T07:49:57.639500</ts>
    <user>Earlean</user>
    <text>It's intentional</text>
  </message>
  <message conversation_id="506">
    <ts>2019-02-17T07:51:36.641200</ts>
    <user>Earlean</user>
    <text>if it's an outgoing port then you'll need to have some code that sends to it, if it's an incoming port then you'll need to subscribe to it in your  `subscriptions` function</text>
  </message>
  <message conversation_id="507">
    <ts>2019-02-17T09:32:54.641900</ts>
    <user>Moshe</user>
    <text>&lt;@Leopoldo&gt; did this solve your problem?</text>
  </message>
  <message conversation_id="507">
    <ts>2019-02-17T09:33:18.642100</ts>
    <user>Leopoldo</user>
    <text>yes, i have a full working page &lt;https://gist.github.com/afidegnum/a26cae4270961855e197188c2430f293&gt;</text>
  </message>
  <message conversation_id="507">
    <ts>2019-02-17T09:33:38.642300</ts>
    <user>Leopoldo</user>
    <text>i m now trying to open a form and interact with individual items of the list</text>
  </message>
  <message conversation_id="507">
    <ts>2019-02-17T09:34:01.642500</ts>
    <user>Moshe</user>
    <text>have fun :slightly_smiling_face:</text>
  </message>
  <message conversation_id="507">
    <ts>2019-02-17T09:34:16.642700</ts>
    <user>Leopoldo</user>
    <text>thanks a lot for your help</text>
  </message>
  <message conversation_id="507">
    <ts>2019-02-17T09:34:33.642900</ts>
    <user>Moshe</user>
    <text>I hope you had some rest in between :smile: and no problem :slightly_smiling_face:</text>
  </message>
  <message conversation_id="507">
    <ts>2019-02-17T09:35:07.643100</ts>
    <user>Leopoldo</user>
    <text>yes, but i want to finish this at once, rest a bit, move to the next chapter :slightly_smiling_face:</text>
  </message>
  <message conversation_id="507">
    <ts>2019-02-17T10:03:24.645800</ts>
    <user>Leopoldo</user>
    <text>I have CORS enabled, i have been able to fetch the items, but when Posting a new form, i have a `Cannot GET /page` error. there is now GET `page` request on the server,</text>
  </message>
  <message conversation_id="507">
    <ts>2019-02-17T10:03:32.646100</ts>
    <user>Leopoldo</user>
    <text>what can be the cause?</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:22:29.646400</ts>
    <user>Dorethea</user>
    <text>You need to be more explicit, do you explicitly send a POST request from Elm code? How do you send the post request from Elm code?</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:23:28.646600</ts>
    <user>Dorethea</user>
    <text>furthermore seems like needs to be asked on &lt;#C192T0Q1E|beginners&gt;</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:23:42.646800</ts>
    <user>Leopoldo</user>
    <text>i think the POST is sent from line 175</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:28:07.647000</ts>
    <user>Dorethea</user>
    <text>in line 138 you are concatanating `links` and `"page"` and `pageid` you do not use any slash, maybe you are passing pageid blank string, that's why it is trying to GET `/page` ?</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:28:35.647200</ts>
    <user>Dorethea</user>
    <text>You should use `/` btw if i'm not wrong?</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:29:01.647400</ts>
    <user>Leopoldo</user>
    <text>well, there have not been a POST request call from the server,</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:29:07.647600</ts>
    <user>Leopoldo</user>
    <text>only GET all along</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:34:46.647800</ts>
    <user>Leopoldo</user>
    <text>&lt;@Dorethea&gt; you are right  `/page` made it work</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:35:08.648000</ts>
    <user>Leopoldo</user>
    <text>it even returned `OPTIONS` i don't know why</text>
  </message>
  <message conversation_id="508">
    <ts>2019-02-17T13:37:49.648300</ts>
    <user>Leopoldo</user>
    <text>but i m still facing the `Cannot GET /pages` error</text>
  </message>
  <message conversation_id="509">
    <ts>2019-02-17T14:21:41.648500</ts>
    <user>Dorethea</user>
    <text>When you are initializing your app you are issueing fetchPages command, which sends a get request to `/pages` so Elm works</text>
  </message>
  <message conversation_id="509">
    <ts>2019-02-17T14:21:57.648700</ts>
    <user>Dorethea</user>
    <text>Why your server doesn't work the way you want it to IDK</text>
  </message>
  <message conversation_id="509">
    <ts>2019-02-17T14:23:45.649000</ts>
    <user>Leopoldo</user>
    <text>it's now working, except the `Cannot GET /page` error i don't understand and after submitting the form the url redirects to  localhot:9000/page?</text>
  </message>
  <message conversation_id="510">
    <ts>2019-02-17T17:01:29.649200</ts>
    <user>Valorie</user>
    <text>Are there any plans to make this part of the debugger resizable? Am I missing something?</text>
  </message>
  <message conversation_id="510">
    <ts>2019-02-17T17:11:16.649500</ts>
    <user>Martin</user>
    <text>You can hover the lines and it'll tooltip it for you</text>
  </message>
  <message conversation_id="510">
    <ts>2019-02-17T17:11:21.649700</ts>
    <user>Martin</user>
    <text>not great, but works</text>
  </message>
  <message conversation_id="510">
    <ts>2019-02-17T17:15:21.650000</ts>
    <user>Valorie</user>
    <text>that’s better</text>
  </message>
  <message conversation_id="510">
    <ts>2019-02-17T17:15:32.650200</ts>
    <user>Valorie</user>
    <text>but still displays an ellipsis if the message is too long</text>
  </message>
  <message conversation_id="511">
    <ts>2019-02-17T17:24:04.650500</ts>
    <user>Lizabeth</user>
    <text>I usually end up removing the `width` property from the `sidebar`/whatever the css class for it is so it goes width 100%.</text>
  </message>
  <message conversation_id="512">
    <ts>2019-02-17T19:50:01.653700</ts>
    <user>Charmaine</user>
    <text>I did a workaround ellipsis in 0.18 by changing some Elm codes. The file path would be different, but there shouldn‘t be a significant change to the code. 
&lt;https://harfangk.github.io/2018/07/28/display-entire-text-in-elm-debugger.html&gt;</text>
  </message>
  <message conversation_id="512">
    <ts>2019-02-17T22:55:56.654300</ts>
    <user>Zaida</user>
    <text>yanngib</text>
  </message>
  <message conversation_id="511">
    <ts>2019-02-18T04:52:04.663900</ts>
    <user>Antonette</user>
    <text>So, thanks to you fine gentlepeople we got from 1min 5s compilation time to about 25s :slightly_smiling_face: thanks.</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T12:52:07.667200</ts>
    <user>Elza</user>
    <text>Hello, I have a listing with multiple cards. I was thinking about making cards modular by moving a local state in their own model. no problem for init or views, but how would I target the right subModel in an update function? Is this a good pattern?</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T12:53:30.668300</ts>
    <user>Elza</user>
    <text>I have thought about adding the subModel to the msg, but I do not see a way of updating the parent Model</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T12:58:11.670400</ts>
    <user>Lynne</user>
    <text>&lt;@Elza&gt; Introducing "child" triplets (i.e. modules with their own init/update/view and Model/Msg) is generally not considered as a good pattern but it depends on your app and its structure. For example, it is very practical having single pages in an SPA as stand-alone triplets.</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T12:59:03.671100</ts>
    <user>Lynne</user>
    <text>I doubt it is a good idea for cards though.</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T12:59:07.671300</ts>
    <user>Elza</user>
    <text>yes that is what I am using in single pages</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T12:59:16.671500</ts>
    <user>Elza</user>
    <text>but I hear you for smaller components</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T12:59:23.671700</ts>
    <user>Elza</user>
    <text>I am considering alternatives</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T12:59:44.671900</ts>
    <user>Elza</user>
    <text>ok</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T13:00:12.672100</ts>
    <user>Elza</user>
    <text>will be using a `Set` instead to mark instances I need instead of submodules/child triplets</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T13:00:35.672400</ts>
    <user>Lynne</user>
    <text>`Set` can only contain comparables</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T13:00:46.672600</ts>
    <user>Lynne</user>
    <text>You are probably after the `List`</text>
  </message>
  <message conversation_id="513">
    <ts>2019-02-18T13:36:26.672800</ts>
    <user>Elza</user>
    <text>sorry i meant a `List` containing models, with a `Set` to tag some of them by `id`</text>
  </message>
  <message conversation_id="514">
    <ts>2019-02-18T14:01:13.673800</ts>
    <user>Leopoldo</user>
    <text>hello, my brain just emptied... i am having hard time incorporating `viewOnepage` &lt;https://ellie-app.com/4LPyRxJvFcBa1&gt;</text>
  </message>
  <message conversation_id="514">
    <ts>2019-02-18T14:01:42.674200</ts>
    <user>Leopoldo</user>
    <text>i wanted to fetch and load content of a single page ID</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T18:46:43.675000</ts>
    <user>Marcus</user>
    <text>Has anyone seen any info on how to create an interface like this using native Elm (i.e., not using ports)? I don't have a specific application, it just looks like it would be cool to make.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T18:47:13.675700</ts>
    <user>Marcus</user>
    <text>BTW, that's a shot from Twilio Studio - a tool for visually creating messaging flows.</text>
  </message>
  <message conversation_id="516">
    <ts>2019-02-18T19:10:21.676200</ts>
    <user>Vashti</user>
    <text>I'd be interested in that, I'm looking to build a graph (nodes and edges) editor in Elm</text>
  </message>
  <message conversation_id="516">
    <ts>2019-02-18T19:10:50.676700</ts>
    <user>Vashti</user>
    <text>I'm not sure how to describe such an interface</text>
  </message>
  <message conversation_id="516">
    <ts>2019-02-18T19:11:14.677300</ts>
    <user>Vashti</user>
    <text>"canvas interfaces" maybe (as in the user can somewhat arbitrarily place and move objects on a canvas)</text>
  </message>
  <message conversation_id="516">
    <ts>2019-02-18T19:11:27.677700</ts>
    <user>Vashti</user>
    <text>but the word canvas already has a specific meaning when it comes to webdev</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:11:41.679700</ts>
    <user>Marcus</user>
    <text>I'm not sure either. FWIW, the implementation of that interface is all SVG. I was worried it might be HTML Canvas, but that's not the case, fortunately.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:15:01.680200</ts>
    <user>Marcus</user>
    <text>I'd probably describe it as a workflow editor.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:19:06.680800</ts>
    <user>Marcus</user>
    <text>This gets close, but looks like a piece of a larger platform, not a stand-alone component: &lt;https://www.totaljs.com/flow/&gt;</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:36:56.681400</ts>
    <user>Vashti</user>
    <text>&lt;@Marcus&gt; I guess you could build the svg based on input messages using elm/svg somehow and then render that</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:37:24.682000</ts>
    <user>Vashti</user>
    <text>the problem is you'd somehow have to keep track exactly of where every element in the svg is on the page?</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:37:40.682300</ts>
    <user>Vashti</user>
    <text>so that you can correctly interpret a click</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:37:55.682700</ts>
    <user>Vashti</user>
    <text>which sounds scarily like it could get very platform dependent quickly</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:53:34.686800</ts>
    <user>Marcus</user>
    <text>&lt;@Vashti&gt; I think you are right about the implementation. You'd need to store the x,y location of each node in the workflow. The edges between them could be calculated on the fly. I'd probably set the center of the design surface to be 0,0 and allow nodes to be placed anywhere in relation to that. The messages would be something like `AddNode`, `DeleteNode`, `NodeDragging`, and `NodeDropped`. I'm shooting from the hip a bit there, but that's where I'd start.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:55:21.687000</ts>
    <user>Vashti</user>
    <text>yup, sounds about right</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:55:49.687600</ts>
    <user>Vashti</user>
    <text>my only worry is converting window level coordinates that the browser sends you on a click to surface coordinates</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:56:00.688100</ts>
    <user>Vashti</user>
    <text>I'd need to be certain the SVG was being drawn _exactly_ where I thought</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T20:56:20.688500</ts>
    <user>Vashti</user>
    <text>and I kind of have a hunch that's a dangerous assumption to make</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:16:41.689500</ts>
    <user>Marcus</user>
    <text>I don't have my head around that one either. The examples I've seen of drag-and-drop functionality with Elm haven't been great.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:21:30.690000</ts>
    <user>Vashti</user>
    <text>&lt;@Marcus&gt; got any examples you could share off the top of your head?</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:21:44.690500</ts>
    <user>Vashti</user>
    <text>I may have to move away from elm, or just use ports for that component of the UI</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:32:08.690800</ts>
    <user>Marcus</user>
    <text>One sec. I'll see if I can find it.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:33:17.691000</ts>
    <user>Marcus</user>
    <text>&lt;https://github.com/wintvelt/elm-sortable-list&gt;</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:33:42.691600</ts>
    <user>Marcus</user>
    <text>There's one. There's another that I'm thinking of though. I feel like it came with the old Elm mouse event library.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:34:41.691900</ts>
    <user>Marcus</user>
    <text>This just came up in my search: &lt;https://www.youtube.com/watch?v=YbzNit_D98Y&gt;</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:34:45.692100</ts>
    <user>Marcus</user>
    <text>That looks interesting.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:34:59.692400</ts>
    <user>Vashti</user>
    <text>thanks very much</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:35:37.693200</ts>
    <user>Marcus</user>
    <text>I feel like `elm/browser` got some updates in 0.19 that might help. Unconfirmed though.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:37:17.693700</ts>
    <user>Vashti</user>
    <text>oh that talk is _very_ interesting</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:37:55.694400</ts>
    <user>Vashti</user>
    <text>I don't know if it's something supported natively by the svg package but they can set mouse event attributes directly on their svg nodes</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:38:26.694600</ts>
    <user>Marcus</user>
    <text>Interesting. I didn't know that.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:38:37.694900</ts>
    <user>Marcus</user>
    <text>I need to improve my SVG knowledge.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:39:36.695100</ts>
    <user>Vashti</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/svg/latest/Svg-Events#onClick&gt;</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:39:48.695400</ts>
    <user>Vashti</user>
    <text>well, that means it's considerably easier than I expected</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:40:23.695900</ts>
    <user>Marcus</user>
    <text>Yeah, the `onMouseDown` and `onMouseUp` seem like they would do the trick.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:40:42.696100</ts>
    <user>Vashti</user>
    <text>that's very nice</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:42:48.698300</ts>
    <user>Marcus</user>
    <text>Thinking out loud, when a new node is added to the design surface, I'd record its x,y coordinates in my model. On `onMouseDown`, I'd record the node that was selected and subscribe to `onMouseMove` events. As `onMouseMove` events come in, I'd update the x,y coordinates. On `onMouseUp`, I'd unsubscribe from the `onMouseMove` event.</text>
  </message>
  <message conversation_id="515">
    <ts>2019-02-18T21:44:04.698900</ts>
    <user>Marcus</user>
    <text>I'm not sure what the algorithm is for drawing the edge between nodes. It's probably not that complex.</text>
  </message>
  <message conversation_id="517">
    <ts>2019-02-19T00:49:28.701100</ts>
    <user>Jacquelyn</user>
    <text>Anybody know how to have an incoming port with no input? From Firebase, I want to let my Elm app know that the user logged out, so I have this in my JS:
```
app.ports.loggedOut.send()
```
And this in my Elm:
```
port loggedOut : msg -&amp;gt; Sub msg

subscriptions model = loggedOut LoggedOut
```

But that syntax is wrong…</text>
  </message>
  <message conversation_id="517">
    <ts>2019-02-19T00:50:14.701200</ts>
    <user>Jacquelyn</user>
    <text>I couldn’t find in the Elm documentation how to do this</text>
  </message>
  <message conversation_id="517">
    <ts>2019-02-19T00:54:07.701400</ts>
    <user>Lizabeth</user>
    <text>We do

```
port loggedOut : (() -&amp;gt; msg) -&amp;gt; Sub msg

subscriptions model = loggedOut (\_ -&amp;gt; LoggedOut)

```

JS:

```
app.ports.loggedOut.send(null);
```</text>
  </message>
  <message conversation_id="517">
    <ts>2019-02-19T00:54:35.701600</ts>
    <user>Dede</user>
    <text>Is it possible the JSON decoder is required even for a null argument?</text>
  </message>
  <message conversation_id="517">
    <ts>2019-02-19T00:55:40.701800</ts>
    <user>Dede</user>
    <text>If &lt;@Lizabeth&gt;’s answer doesn’t resolve it, you could try a port with the full signature `(Json.Decode.Value -&amp;gt; msg) -&amp;gt; Sub msg`.  You can probably just use `Json.Decode.succeed` for the decoder in that case.</text>
  </message>
  <message conversation_id="517">
    <ts>2019-02-19T00:59:51.702200</ts>
    <user>Lizabeth</user>
    <text>I’ve updated my answer to check properly what we were doing.</text>
  </message>
  <message conversation_id="517">
    <ts>2019-02-19T01:04:00.702500</ts>
    <user>Lizabeth</user>
    <text>But I’m not sure if that is the proper way to do it, it just worked for us, so I kept using it.</text>
  </message>
  <message conversation_id="517">
    <ts>2019-02-19T01:05:59.703200</ts>
    <user>Dede</user>
    <text>AFAICT the implementation of Elm is the specification, so by definition if it worked it’s a proper way :wink:</text>
  </message>
  <message conversation_id="518">
    <ts>2019-02-19T03:16:19.703600</ts>
    <user>Timika</user>
    <text>Have you seen kite by &lt;@Reuben&gt; yet?  &lt;https://github.com/erkal/kite&gt;</text>
  </message>
  <message conversation_id="518">
    <ts>2019-02-19T03:31:04.704000</ts>
    <user>Walton</user>
    <text>&lt;@Marcus&gt; Check this one &lt;https://github.com/erkal/kite&gt;</text>
  </message>
  <message conversation_id="519">
    <ts>2019-02-19T03:41:19.704700</ts>
    <user>Jannet</user>
    <text>Is the [measureText](&lt;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText&gt;) function available in any way in Elm 0.19?</text>
  </message>
  <message conversation_id="519">
    <ts>2019-02-19T03:45:34.705400</ts>
    <user>Bebe</user>
    <text>No. Use ports, works well</text>
  </message>
  <message conversation_id="519">
    <ts>2019-02-19T03:55:23.705700</ts>
    <user>Jannet</user>
    <text>Do you measure text somehow in `elm-canvas`? &lt;@Bebe&gt;</text>
  </message>
  <message conversation_id="519">
    <ts>2019-02-19T03:57:47.706800</ts>
    <user>Jannet</user>
    <text>Okay I see how you did it &lt;https://github.com/joakin/elm-canvas/blob/589fc02f427e5f192ef060292e65c64c91f6c477/public/dynamic-particles.html#L20&gt;</text>
  </message>
  <message conversation_id="519">
    <ts>2019-02-19T03:58:08.707300</ts>
    <user>Bebe</user>
    <text>Not supported, it is hard to fit into a functional paradigm. Ports work great</text>
  </message>
  <message conversation_id="519">
    <ts>2019-02-19T03:59:52.708800</ts>
    <user>Bebe</user>
    <text>Yes that example does the initial calculations and point creation in JS, passes things to elm in flags. Works well too :+1:</text>
  </message>
  <message conversation_id="519">
    <ts>2019-02-19T04:01:09.709000</ts>
    <user>Jannet</user>
    <text>Thanks for elm-canvas, I'll try something else. Ports and javascript don't work for me. Text is created dynamically and I don't want to produce top-level messages for text that changes every frame and can be used in rendering nested data</text>
  </message>
  <message conversation_id="520">
    <ts>2019-02-19T04:52:51.709300</ts>
    <user>Marcus</user>
    <text>&lt;@Walton&gt; Hey, that's super cool. Thanks for pointing that out.</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T05:41:31.713900</ts>
    <user>Renda</user>
    <text>What is the philosophy on "duck typing" in Elm?
```
someFunction: { hasProp: String }
someFunction x =
    -- ...
    x

type alias A = { hasProp: String }
type alias B = { hasProp: String }


someFunction A

someFunction B
```
I don't think this is possible at the moment.
And I can see the argument for explicitness vs reusablity. But on the other hand... Its very handy.
Would like some opinions on the matter. Does this break some stuff and remove any sort of type safety? I do not think it does.
If this does already exist then please tell me so I can delete this question :stuck_out_tongue:</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T05:42:58.714600</ts>
    <user>Niesha</user>
    <text>I think you can do that with extensible records, although that functionality has been pruned in 0.19. Btw, I think the term you're looking for is "structural typing"</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T05:43:12.715000</ts>
    <user>Niesha</user>
    <text>It's basically duck typing, but with types</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T05:43:15.715200</ts>
    <user>Niesha</user>
    <text>As opposed to nominal typing</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T05:45:46.715800</ts>
    <user>Sharon</user>
    <text>shouldn't that code just work since the type aliases are the same?</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T05:46:16.716000</ts>
    <user>Lynne</user>
    <text>Exactly, &lt;https://ellie-app.com/4M6STzJLzXka1&gt;</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T05:47:08.716400</ts>
    <user>Lynne</user>
    <text>type aliases are replaced with actual types before compilation</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T06:01:17.717700</ts>
    <user>Leopoldo</user>
    <text>on my SPA example, i have been able to move to new page by clicking on the link but i can't type the url of that new link. i am facing `Cannot GET /page/50` error if i type &lt;http://localhost:8000/page/50&gt;</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T06:07:19.720100</ts>
    <user>Renda</user>
    <text>&lt;@Niesha&gt; &lt;@Sharon&gt; &lt;@Lynne&gt; ahh so this does actually work. I did not know that ^^. Also did not know that structural typing is the typed word for duck typing, thanks!
So is this ok to use? I find it quite useful to type this way.</text>
  </message>
  <message conversation_id="522">
    <ts>2019-02-19T06:07:51.721200</ts>
    <user>Renda</user>
    <text>Or are the caveeats to watch out for?</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T06:08:57.722300</ts>
    <user>Earlean</user>
    <text>&lt;@Leopoldo&gt; if you type a url then there will be a request to the server, your server needs to be able the handle those urls and respond with your elm app. </text>
  </message>
  <message conversation_id="522">
    <ts>2019-02-19T06:10:37.723100</ts>
    <user>Lynne</user>
    <text>&lt;@Renda&gt; I think at some point your records will become so large that you will prefer coming with type aliases for them</text>
  </message>
  <message conversation_id="522">
    <ts>2019-02-19T06:10:56.723500</ts>
    <user>Lynne</user>
    <text>Especially if you will want same record in and out</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T06:18:58.724700</ts>
    <user>Leopoldo</user>
    <text>&lt;@Earlean&gt; is there any guide on elm url mapping to server and REST api ?</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T06:22:21.727900</ts>
    <user>Leopoldo</user>
    <text>now my SPA app is on localhost:8000 and my local rest server is on port 9000 but if i have to move my app to a remote host, what are the guidelines? does it mean for my previous issue, i will need to make provision for a custom app (views) for the custom page i.e newpage.elm for page/{id} ?</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T06:23:50.729000</ts>
    <user>Lynne</user>
    <text>&lt;@Leopoldo&gt; It really has nothing to do with Elm. Your Elm app is compiled to JavaScript and served as regular JS file, which, in turn, is linked from some HTML page (typically, `index.html`).</text>
  </message>
  <message conversation_id="522">
    <ts>2019-02-19T06:24:24.729700</ts>
    <user>Lynne</user>
    <text>What you should look for and learn is how web content is served, what is HTTP and how it connects your browser and a remote server</text>
  </message>
  <message conversation_id="522">
    <ts>2019-02-19T06:26:45.732300</ts>
    <user>Lynne</user>
    <text>Browser never loads any Elm file or module, it loads an HTML page (unless server returns something else, but that's a more advanced topic)</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T06:27:44.734100</ts>
    <user>Leopoldo</user>
    <text>yes, i was referring to the compiled `elm`</text>
  </message>
  <message conversation_id="522">
    <ts>2019-02-19T06:31:13.737100</ts>
    <user>Nana</user>
    <text>&lt;@Renda&gt; Also, if you write the function type definition like this: 
`someFunction : {r | hasProp: String } -&amp;gt; String` it will work on any record which has `hasProp: String`, not just those that look exactly like `{ hasProp: String }`</text>
  </message>
  <message conversation_id="523">
    <ts>2019-02-19T06:50:19.737300</ts>
    <user>Renda</user>
    <text>Ohhhh I thought that was what the others meant. Because that is what I tried to accomplish!</text>
  </message>
  <message conversation_id="523">
    <ts>2019-02-19T06:50:24.737500</ts>
    <user>Renda</user>
    <text>Thanks man!</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T08:07:58.739500</ts>
    <user>Vashti</user>
    <text>I hadn't, thanks very much</text>
  </message>
  <message conversation_id="524">
    <ts>2019-02-19T09:15:55.741600</ts>
    <user>Kizzie</user>
    <text>is there a way with elm/time to set a day/month/year??</text>
  </message>
  <message conversation_id="524">
    <ts>2019-02-19T09:34:37.742000</ts>
    <user>Ashton</user>
    <text>Has anyone whos upgrade to 0.19 had a problem with browser extentions? We just got our front end to 0.19, and now we are trying to build our whole product and get user testing, and we (might have) got some feedback that appeared to be a big virtual dom problem.</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:35:52.743400</ts>
    <user>Ashton</user>
    <text>A difference in our upgrade, is that we were rendering in something like `&amp;lt;div id="root"/&amp;gt;` before, and now we are using `&amp;lt;body/&amp;gt;`, and so we are wondering what happens when a browser extention wants to stick something in the body.</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:41:46.745800</ts>
    <user>Ashton</user>
    <text>(Before it might just put it above or below the root div, which might not clash with the virtual dom, but now interfering with the body might in fact clash with the virtual dom, since it would be injecting html next to the Elm rendered html)</text>
  </message>
  <message conversation_id="524">
    <ts>2019-02-19T09:43:12.746100</ts>
    <user>Nana</user>
    <text>&lt;@Kizzie&gt; you can use the justinmimbs/time-extra package</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:43:51.746500</ts>
    <user>Agustin</user>
    <text>&lt;@Ashton&gt; this has been an issue for some people</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:49:46.746700</ts>
    <user>Ashton</user>
    <text>Yeah? Okay, thats interesting. You wouldnt happen to know of any information on this topic?</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:50:09.746900</ts>
    <user>Ashton</user>
    <text>Have people had to implement any solutions to this?</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:50:22.747100</ts>
    <user>Ashton</user>
    <text>We are just encountering the problem, so I dont have a sense of how severe it is.</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:51:17.747300</ts>
    <user>Velia</user>
    <text>related: &lt;https://discourse.elm-lang.org/t/javascript-exception-cannot-read-property-childnodes-of-undefined-with-extension-dark-reader/2748/5?u=dmy&gt;</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:53:16.747500</ts>
    <user>Jacquelyn</user>
    <text>Thank you &lt;@Lizabeth&gt; and &lt;@Dede&gt;, Got it working with &lt;@Lizabeth&gt;’s suggestion… just changed `loggedOut (always LoggedOut)` for the subscription</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:54:37.747700</ts>
    <user>Agustin</user>
    <text>All anecdotal I’m afraid but I’ve seen multiple people complain about dom behaviour caused by browser extensions messing about with the dom.</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:55:27.748000</ts>
    <user>Rosa</user>
    <text>Grammarly is pretty notorious for messing with SPA apps.</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:55:42.748200</ts>
    <user>Ashton</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:56:00.748400</ts>
    <user>Agustin</user>
    <text>Thats the big one, couldn’t recall the name</text>
  </message>
  <message conversation_id="521">
    <ts>2019-02-19T09:57:24.748600</ts>
    <user>Ashton</user>
    <text>Okay. Thank you. Maybe if we just render every document with a `div []` at the top, then it will be protected from browser extensions adding things to the bottom, since the Elm virtual dom will never care about things below the solitary top `div []`</text>
  </message>
  <message conversation_id="525">
    <ts>2019-02-19T10:16:02.748800</ts>
    <user>Kizzie</user>
    <text>Thanks, i'll give it a try</text>
  </message>
  <message conversation_id="526">
    <ts>2019-02-19T11:04:00.753800</ts>
    <user>Earnestine</user>
    <text>if you add an `type alias` for a record, Elm gives you a positional constructor for free to create it. this is extremely useful for applicative style json parsing (e.g. with the json-pipeline package)
What do you think, are there other use cases where the the constructor should be used? Concretely, would you create larger records like
```
type alias User = { name: String, age: Int, active: Bool, items: List Product, sessionId: Id }
```
rather like this:
`user = User "Me" 33 True [] (Id "235423")`
or
`user = { name = "Me", age = 33, active = True, items = [] , sessionId = Id "34321" }`</text>
  </message>
  <message conversation_id="526">
    <ts>2019-02-19T11:05:52.754500</ts>
    <user>Rosa</user>
    <text>its used in Decoders, but other than I prefer the record style, even for small ones</text>
  </message>
  <message conversation_id="526">
    <ts>2019-02-19T11:08:24.755900</ts>
    <user>Lynne</user>
    <text>The downside of using this constructor is much worse readability. Also, if you have, say, two adjacent `Int` or `String` or whatever fields, it is very easy to put them in wrong order and compiler won't help you with it</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T11:12:46.756500</ts>
    <user>Paulita</user>
    <text>Hi Chad! I am using 0.19.0 and I haven't run into any issue so far.. what problem exactly you're facing?</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T11:56:02.760100</ts>
    <user>Romona</user>
    <text>Hopefully someone could answer that. I'm using parcel to bundle code and I've got an issue with assets.

I'm using assets as suggested in elm-spa example : &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Asset.elm&gt;

However parcel does not bundle any of these images. The following library does load them to dist : &lt;https://github.com/tiaanduplessis/parcel-plugin-asset-copier&gt;

but image names are suffixed with hashes and Elm code does not know that files are being suffixed.</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T12:03:34.761400</ts>
    <user>Timika</user>
    <text>Something like `parcel build --no-content-hash src/index.html` could help you a bit. Files will still have a hash to them, but it _will not change_ based on the content but is static as long as the path to them does not change.</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T12:05:16.762600</ts>
    <user>Timika</user>
    <text>AFAIK there is now way for parcel to know that you use your assets and cannot rename paths to them in your Elm code. So this (together with `parcel-plugin-asset-copier`) might be a decent workaround.</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T12:06:31.763500</ts>
    <user>Timika</user>
    <text>(Disclaimer: I’ve never used `--no-content-hash` with `parcel-plugin-asset-copier` in production, this is merely an idea)</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T12:09:05.765100</ts>
    <user>Timika</user>
    <text>(More disclaimer: This will also mess with HTTP caching if you serve your assets with an nearly-infinite `max-age` which is what is usually done when using content-aware hashes. This can be circumvented by using a different cache strategy though.)</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T12:12:58.767700</ts>
    <user>Timika</user>
    <text>Alternatively, you could `import` your assets in your JS bootstrap code and pass the paths to Elm via flags and use them in your app instead. This way you don’t have to mess around with plugins, can keep content aware hashes and nearly-infinite `max-age` caching with the cost of handling flags, passing around your image paths to every view that uses them and more (albeit simple) javascript.  Let me know if anything above helps. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T12:16:12.768100</ts>
    <user>Donella</user>
    <text>I'm using a JS module containing imports of the assets and an Elm module with the type for the assets and a JSON decoder. Then I pass the assets to Elm application through the flags.</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T12:21:47.770000</ts>
    <user>Donella</user>
    <text>I wrote myself a little tool in Haskell to help me generate these modules from a directory content.</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T12:23:56.770700</ts>
    <user>Romona</user>
    <text>Ah pity there's nothing that would handle that by default.

I'll try to use flags as you've suggested and see where it will lead. Thanks &lt;@Timika&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="527">
    <ts>2019-02-19T12:33:31.772100</ts>
    <user>Danika</user>
    <text>I have used flags for this, and seen flags recommended more than once. Seems like the common solution. </text>
  </message>
  <message conversation_id="528">
    <ts>2019-02-19T12:42:33.772200</ts>
    <user>Ashton</user>
    <text>I just have a screenshot from someone who tried out our new system, from the console saying over and over again about a `childNode` being missing, and the tester clearly has a lot of browser extensions.</text>
  </message>
  <message conversation_id="529">
    <ts>2019-02-19T12:52:05.772500</ts>
    <user>Elina</user>
    <text>hey folks. can anyone help me with a naming question?

there's a fairly common pattern I've seen where a custom type is used to make a record opaque to the client code that uses it:

```
type State =
    State InnerState

type alias InnerState =
    { foo : String
    , bar : String
    }
```

is there any good naming convention for these? "inner" seems a little off to me, and if there's something the community uses, I'd be happy to prefer that.</text>
  </message>
  <message conversation_id="529">
    <ts>2019-02-19T12:52:23.772600</ts>
    <user>Noelle</user>
    <text>I use `Internals`</text>
  </message>
  <message conversation_id="529">
    <ts>2019-02-19T12:52:35.772800</ts>
    <user>Noelle</user>
    <text>I don’t rememer where I saw it</text>
  </message>
  <message conversation_id="529">
    <ts>2019-02-19T13:02:45.774000</ts>
    <user>Timika</user>
    <text>Or just don’t alias it at all, depending on your module, this works well. </text>
  </message>
  <message conversation_id="530">
    <ts>2019-02-19T13:29:28.774400</ts>
    <user>Carman</user>
    <text>I often use some variation on `State` for the internal value and something more descriptive for the outer one.</text>
  </message>
  <message conversation_id="530">
    <ts>2019-02-19T13:32:34.774600</ts>
    <user>Carman</user>
    <text>An interesting example is this type from a tower-defense game that has several tags, each of which wrap some kind of state record:
```
type Game
    = IntroPhase IntroState
    | TowerPlacementPhase PlacementState
    | AttackPhase GameState
    | Victory GameState
    | Defeat GameState
```</text>
  </message>
  <message conversation_id="530">
    <ts>2019-02-19T13:33:06.774900</ts>
    <user>Carman</user>
    <text>&lt;https://github.com/JoelQ/safe-tea/blob/master/Game.elm#L38-L66&gt;</text>
  </message>
  <message conversation_id="530">
    <ts>2019-02-19T13:41:52.775200</ts>
    <user>Dede</user>
    <text>I use `Rep`, short for `Representation`.</text>
  </message>
  <message conversation_id="530">
    <ts>2019-02-19T13:42:42.775400</ts>
    <user>Dede</user>
    <text>&lt;http://web.mit.edu/6.005/www/fa15/classes/13-abstraction-functions-rep-invariants/&gt;</text>
  </message>
  <message conversation_id="531">
    <ts>2019-02-19T14:36:14.775600</ts>
    <user>Reuben</user>
    <text>different vertex shapes are on the road map</text>
  </message>
  <message conversation_id="531">
    <ts>2019-02-19T14:36:21.775800</ts>
    <user>Reuben</user>
    <text>&lt;https://github.com/erkal/kite/projects/1#card-13685869&gt;</text>
  </message>
  <message conversation_id="531">
    <ts>2019-02-19T14:42:41.776000</ts>
    <user>Reuben</user>
    <text>What exactly do you want to do? Maybe I will have time in a week to work on Kite.</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:17:11.787900</ts>
    <user>Kathlyn</user>
    <text>Big trouble with browser extensions and  third-party trackers and other scripts.

We have a bit of a problem. We finally after several weeks of hard work were able to convert from 0.18 -&amp;gt; 0.19. We use a fullscreen elm application to be able to control navigation etc. We deployed and people starting complaining about nothing showing up in the browser! Oh no!

Turns out that these people had browser extensions that injected things into the &amp;lt;body&amp;gt; tag of every page (Yikes). But that is unfortunately “the real world” where people have crap like that. Adding anything not controlled by Elm to the body will make Elm throw errors over and over - which is fair.

Unfortunately this completely stops the application from running, and means you cannot make a website based on Elm fullscreen - it simply might not show for many users :S

It also means that you cannot use some tools like Hubspot or Drift for forms and analytics, because you often have no control over where they inject their iframe tag (meaning the end body usually).

A solution is to use an embedded Elm application, but that limits navigation in your elm app, which is a huge sacrifice to make. The best solution in my mind, would be that Elm fullscreen applications could be added to a top level wrapper element in body, and Elm would ignore anything outside that.

Does anyone have any suggestions or have solved similar problems?</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:33:16.788100</ts>
    <user>Velia</user>
    <text>You are not alone:
&lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1550586877742000&gt;

I think that this issue has been underestimated because it was not that bad in 0.18.

It could help to open an issue on github and post again on discourse until the problem gravity is correctly assessed. Then maybe something will be done.

I think that Elm takes the whole body with `application` to be sure that it is alone handling navigation. But this indeed backfires with extensions.</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:36:46.788400</ts>
    <user>Velia</user>
    <text>This mainly happen with `Browser.application` that takes the whole body. See also &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1550607431787900&gt;</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:38:39.788900</ts>
    <user>Simon</user>
    <text>&lt;@Kathlyn&gt; yes,</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:38:43.789300</ts>
    <user>Simon</user>
    <text>same issue</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:39:00.789700</ts>
    <user>Simon</user>
    <text>I used our gulp pipeline to hack the elm output to take the “fullscreen app” and sandbox it an element down</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:39:09.790000</ts>
    <user>Simon</user>
    <text>so we could continue to work w/ all popular integrations</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:39:41.790200</ts>
    <user>Simon</user>
    <text>```
// Monkey patch step to work around Elm's Browser.application deficiencies.
// Please see VENDORHACKS.md for more details
gulp.task("build:scripts:elm:monkey-patch", () =&amp;gt; {
  const originalApplicationBodyLoadingCode = "var bodyNode = _VirtualDom_doc.body;"
  const isolatedApplicationBodyLoadingCode = 'var bodyNode = _VirtualDom_doc.getElementById("elmIsolationContainer");'

  return gulp
    .src(output)
    .pipe($.replace(originalApplicationBodyLoadingCode, isolatedApplicationBodyLoadingCode))
    .pipe(gulp.dest(outputPath))
})
```</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:40:24.790800</ts>
    <user>Simon</user>
    <text>this gives you the best of both worlds, the full-screen full on Elm mode in 19, but isolation to work with Intercom, Hubspot (presumably Drift etc)</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:40:52.791400</ts>
    <user>Simon</user>
    <text>we also have a little runtime dance to get around ad blockers preventing Segment&amp;amp;Elm from loading as well</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:40:56.791600</ts>
    <user>Simon</user>
    <text>happy to share more if interested</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:41:30.792100</ts>
    <user>Simon</user>
    <text>Note: this is a different issue from browser extensions messing w/ other parts of the Dom, we have punted on that for now</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:42:59.793000</ts>
    <user>Simon</user>
    <text>I believe I filed a bug for this (if folks want to upvote it)  - Elm is too opinionated on its fullpage mode to work w/ normal B2B addons</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:43:56.793500</ts>
    <user>Kathlyn</user>
    <text>I am very interested in knowing more</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:44:01.793900</ts>
    <user>Kathlyn</user>
    <text>Sounds horrible</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:44:19.794500</ts>
    <user>Kathlyn</user>
    <text>I am reopening the Elm discussion in the forum</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:44:47.794900</ts>
    <user>Velia</user>
    <text>But the whole `&amp;lt;body&amp;gt;` control is new to 0.19, and only `Browser.application`. So maybe Evan is not conscious yet of the issues raised. It does not look good from the various reports.</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:45:49.796000</ts>
    <user>Simon</user>
    <text>I recall bringing it up and being dismissed months ago. Constructively, I’d like to encourage the folks who shepherd that feedback to be a little more curious, I’m unsure how to achieve that</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:46:33.796200</ts>
    <user>Kathlyn</user>
    <text>&lt;https://discourse.elm-lang.org/t/fullscreen-elm-app-in-0-19-childnode-issue-reopened/3174&gt;</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:47:17.796600</ts>
    <user>Simon</user>
    <text>original filing if interested: &lt;https://discourse.elm-lang.org/t/browser-application-doesnt-work-with-popular-analytics-approaches/2659/6&gt;</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:47:42.796900</ts>
    <user>Simon</user>
    <text>related conversation in Slack lost to sands of time of course :slightly_smiling_face:</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:48:37.797100</ts>
    <user>Kathlyn</user>
    <text>Like always</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:49:32.798100</ts>
    <user>Kathlyn</user>
    <text>&lt;@Simon&gt; You said is was dismissed? You remember why?</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:50:25.798800</ts>
    <user>Simon</user>
    <text>Emotional memory says the vibe was not sacrificing Elm’s correctness for broader ecosystem impurity</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T15:50:49.799300</ts>
    <user>Simon</user>
    <text>If you think this is the worst hack we’ve done, ask me about my compiler hackers :wink:</text>
  </message>
  <message conversation_id="533">
    <ts>2019-02-19T16:10:59.799400</ts>
    <user>Vashti</user>
    <text>&lt;@Reuben&gt; I'm building an interface for this language: &lt;https://timothyatkinson.github.io/gettingstarted.html&gt; so I just need a simple editor that I can query the state of to "compile" my program, and also control the state of to apply a few invariants to the rules, and produce output graphs</text>
  </message>
  <message conversation_id="533">
    <ts>2019-02-19T16:14:36.799700</ts>
    <user>Ashton</user>
    <text>Haha, yep. Not a coincedence either.</text>
  </message>
  <message conversation_id="533">
    <ts>2019-02-19T16:17:19.799900</ts>
    <user>Velia</user>
    <text>I see. I was suspecting that :wink:</text>
  </message>
  <message conversation_id="532">
    <ts>2019-02-19T16:25:55.802300</ts>
    <user>Kathlyn</user>
    <text>That is problematic view imo. If Elm is to be used in real applications like ours, we have to face the facts and balance purity and pragmatism. This effectively makes any Elm applications unusable by a large segment of users</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:45:05.802700</ts>
    <user>Agustin</user>
    <text>You can work around it easily enough I think?</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:45:24.803200</ts>
    <user>Agustin</user>
    <text>You need to either add a wrapper div, or use element with an external wrapper div.</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:47:11.804700</ts>
    <user>Kathlyn</user>
    <text>&lt;@Agustin&gt;That’s just it. You can’t. Fullscreen will always use the entire body element in 0.19. If you embed you app in a wrapper you cannot control navigation, which means you cannot to a SPA like ours</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:48:12.805000</ts>
    <user>Agustin</user>
    <text>Ah so just the first option applies then</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:48:21.805300</ts>
    <user>Agustin</user>
    <text>You can add the wrapper div inside your elm app</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:49:36.805900</ts>
    <user>Agustin</user>
    <text>I believe</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:49:50.806500</ts>
    <user>Agustin</user>
    <text>The virtual dom then doesn’t get out of sync and it doesn’t blow up</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:49:56.806900</ts>
    <user>Simon</user>
    <text>&lt;@Edwin&gt; it won’t work, because if another JS package has written to Body, elm will overwrite it once it “boots”</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:49:59.807000</ts>
    <user>Agustin</user>
    <text>Similar to how the “web components” hack works</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:50:07.807300</ts>
    <user>Simon</user>
    <text>so it’s also a bit of a timing issue</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:51:24.809400</ts>
    <user>Kathlyn</user>
    <text>Jon you have no control of the external scripts or extensions. I cannot wrap them if that is what you are suggesting. I am not sure how web components fit in here.</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:51:26.809600</ts>
    <user>Simon</user>
    <text>(as an aside, we make extensive use of web components elsewhere and are fond of the technique; we use it for avatar img fallbacks, algolia-based search, ChartJS fully implemented in Elm types but rendered via web component etc)</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T16:51:53.810000</ts>
    <user>Kathlyn</user>
    <text>We use webcomponents for Code Mirror and Charting</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T17:09:00.812000</ts>
    <user>Shondra</user>
    <text>&lt;@Edwin&gt; you can control navigation using `element`, here's a tutorial &lt;https://github.com/elm/browser/blob/1.0.0/notes/navigation-in-elements.md&gt; , it's not as pretty but it's possible</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T17:12:52.814200</ts>
    <user>Kathlyn</user>
    <text>Ludat thanks for the link, and sure, but we have a huge app that is fully Elm. The page starts with (Many companies introduce Elm gradually.). This is how we did in 0.18, and would prefer hacking the resulting Js like &lt;@Simon&gt; compared to this - which is a complete departure from the new navigation api.</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T17:28:24.816100</ts>
    <user>Agustin</user>
    <text>&lt;@Kathlyn&gt; web components work because you have an element created by elm, and they manipulate the insides, the vdom is happy.</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:28:50.816700</ts>
    <user>Agustin</user>
    <text>I’m suggesting a work around whereby you add an elmement at the top of the vdom, so it stays happy when other elements are added alongside it</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T17:29:09.817100</ts>
    <user>Agustin</user>
    <text>AFAIK its the getting out of sync that makes it unhappy</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:29:34.817400</ts>
    <user>Agustin</user>
    <text>You are welcome to ignore me though, just trying to help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:30:16.818500</ts>
    <user>Agustin</user>
    <text>Sorry that sounded passive aggressive, what I mean is, I’m trying to help, but if I’m not thats ok :slightly_smiling_face:</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T17:31:02.819400</ts>
    <user>Kathlyn</user>
    <text>I did not mean to sound ungrateful. :smile: I just genuinely do not see how it would help. And how adding more items (through the vdom would help)</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:31:43.820900</ts>
    <user>Agustin</user>
    <text>It’s a trick for sure</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:31:43.821000</ts>
    <user>Ashton</user>
    <text>Wrapping stuff in a div is only going to protect against stuff getting added to the bottom of the `&amp;lt;body&amp;gt;` right? It wont protect from things getting added to the top.</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:32:05.821600</ts>
    <user>Ashton</user>
    <text>Thats my suspicion. It would be cool to confirm this.</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:33:30.823100</ts>
    <user>Ashton</user>
    <text>(if you render just `&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;stuff&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;` The vdom is going to look for the first element, find it, and be happy, it wont care about any sibling elements since it doesnt believe they exist, but, if something else is first, it will find the something else, which it wont expect, and subsequently crash).</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:34:17.823400</ts>
    <user>Agustin</user>
    <text>yes thats my belief</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:34:25.823700</ts>
    <user>Agustin</user>
    <text>born out of experience with web components</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:34:55.824200</ts>
    <user>Agustin</user>
    <text>the vdom cares about what it knows about, and ignores that it doesnt, but if the “streams cross” it gets mad</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:36:22.824400</ts>
    <user>Kathlyn</user>
    <text>```
&amp;lt;body&amp;gt;
    &amp;lt;div id="root"&amp;gt;ELM APP STUFF HERE&amp;lt;/div&amp;gt;
    &amp;lt;div id="injected-extension"&amp;gt;ELEMENT INJECTED BY EXTENSION&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
```

Where do web components come into this picture?</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:42:46.825600</ts>
    <user>Kathlyn</user>
    <text>This is correct. But take something like google tag manager, it will add things at the start of the body. Then you are screwed.</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:43:08.825900</ts>
    <user>Stacee</user>
    <text>this is weird question but does this js port code look weird to you ?</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:44:25.827300</ts>
    <user>Stacee</user>
    <text>context: I am working with a pretty gigantic SPA, and with the elm debugger not working so I am debugging things randomly to understand what is going on</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:45:21.829300</ts>
    <user>Stacee</user>
    <text>the problem: I can’t get the onEventSteam port to fire again if I reload the page but if I get there by being routed (i.e.e elm changing the url) then it works :confused:</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T17:45:22.829400</ts>
    <user>Kathlyn</user>
    <text>Looks fine. The only thing is you are sending error and event directly to Elm. Do you have full control over the content of those and are they the same format?</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:46:27.830600</ts>
    <user>Stacee</user>
    <text>&lt;@Kathlyn&gt; thanks for the anwer! Jes the are Values and I just do a ghetto try two decoders one for the data and one for the error and return a custom type :smile:</text>
  </message>
  <message conversation_id="535">
    <ts>2019-02-19T17:47:06.830700</ts>
    <user>Ashton</user>
    <text>Yes</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T18:33:13.834800</ts>
    <user>Kathlyn</user>
    <text>For completion I am adding my solution to the browser extension problem above. It is a dirty hack as suggested by &lt;@Simon&gt;. But it does exactly what we need, nests the fullscreen app one level down from body. It is a webpack loader that transforms the resulting js source. Use at your own peril! And lets pray for the elm gods to find this despicable enough to merit a patch.</text>
  </message>
  <message conversation_id="534">
    <ts>2019-02-19T18:33:28.835000</ts>
    <user>Kathlyn</user>
    <text>```
const findBodySnippet = "var bodyNode = _VirtualDom_doc.body;"
const findRootDivSnippet = 'var bodyNode = _VirtualDom_doc.getElementById("root");'

const createBodyElementSnippet = "var nextNode = _VirtualDom_node('body')";
const createDivElementSnippet = "var nextNode = _VirtualDom_node('div')";

module.exports = function(source) {
  return (
    source
      .replace(findBodySnippet, findRootDivSnippet)
      .replace(createBodyElementSnippet, createDivElementSnippet)
  );
}
```</text>
  </message>
  <message conversation_id="536">
    <ts>2019-02-20T02:54:51.836500</ts>
    <user>Huong</user>
    <text>We went with `element` and use navigation through ports. It's pretty easy to set up :shrug:</text>
  </message>
  <message conversation_id="537">
    <ts>2019-02-20T03:22:06.836700</ts>
    <user>Reuben</user>
    <text>Well, it seems to me that Kite can be useful to you</text>
  </message>
  <message conversation_id="537">
    <ts>2019-02-20T03:26:24.836900</ts>
    <user>Reuben</user>
    <text>I plan to add the feature “Importing/Exporting .DOT files”: &lt;https://en.wikipedia.org/wiki/DOT_(graph_description_language)&gt;</text>
  </message>
  <message conversation_id="537">
    <ts>2019-02-20T03:26:50.837200</ts>
    <user>Reuben</user>
    <text>Will it be enough for your purposes?</text>
  </message>
  <message conversation_id="537">
    <ts>2019-02-20T03:28:59.837400</ts>
    <user>Reuben</user>
    <text>Your compiler can export graphs in DOT format. Then, Kite can import them and visualize.</text>
  </message>
  <message conversation_id="537">
    <ts>2019-02-20T03:35:27.840500</ts>
    <user>Krista</user>
    <text>If Alex Korban is here: thank you so much for your blog post on combining tasks, huge eye opener for me. Very clear explanation, just concise enough so it stays understandable, but not to much so it becomes to hard to reuse. Perfect job :100: </text>
  </message>
  <message conversation_id="537">
    <ts>2019-02-20T03:38:46.842000</ts>
    <user>Rheba</user>
    <text>I’m getting this error when trying to install packages in Elm 0.18. It’s been like this for the last few hours.
```
Error: The following HTTP request failed.
&amp;lt;http://package.elm-lang.org/all-packages?elm-package-version=0.18&amp;gt;

FailedConnectionException2 "&lt;http://package.elm-lang.org|package.elm-lang.org&gt;" 80 False connect: does not exist (Host is down)
```
Any ideas? Are there any workarounds? Strangely when I put that url in a web browser, it has no problem downloading some json data.</text>
  </message>
  <message conversation_id="537">
    <ts>2019-02-20T03:40:44.842400</ts>
    <user>Rheba</user>
    <text>It’s looking like it might be a firewall issue.</text>
  </message>
  <message conversation_id="537">
    <ts>2019-02-20T03:42:17.843300</ts>
    <user>Rheba</user>
    <text>That was it! I was using Little Snitch, which was blocking it for some reason. I have no idea why it _suddenly_ started blocking the server, but I have a fix, yay!</text>
  </message>
  <message conversation_id="537">
    <ts>2019-02-20T03:44:09.843400</ts>
    <user>Timika</user>
    <text>&lt;@Sari&gt; ping.</text>
  </message>
  <message conversation_id="538">
    <ts>2019-02-20T06:45:49.844500</ts>
    <user>Sherill</user>
    <text>hi guys, I'm trying to compile the `elm/compiler` version that's on master</text>
  </message>
  <message conversation_id="538">
    <ts>2019-02-20T06:46:28.845100</ts>
    <user>Sherill</user>
    <text>and i'm running into this issue:

```
Notice: installing into a sandbox located at /elm/.cabal-sandbox
Configuring elm-0.19.0...
Building elm-0.19.0...
Failed to install elm-0.19.0
Build log ( /elm/.cabal-sandbox/logs/ghc-8.2.2/elm-0.19.0-5MMS6LtL8sV8JLlYZKbYv2.log ):
cabal: Entering directory '.'
Configuring elm-0.19.0...
Preprocessing executable 'elm' for elm-0.19.0..
cabal: can't find source for Elm/Project in compiler/src, builder/src,
terminal/src, dist/dist-sandbox-3e8f4b96/build/elm/autogen,
dist/dist-sandbox-3e8f4b96/build/global-autogen

cabal: Leaving directory '.'
cabal: Error: some packages failed to install:
elm-0.19.0-5MMS6LtL8sV8JLlYZKbYv2 failed during the building phase. The
exception was:
ExitFailure 1
```</text>
  </message>
  <message conversation_id="538">
    <ts>2019-02-20T06:47:00.845600</ts>
    <user>Sherill</user>
    <text>i'm using GHC 8.2.2 and cabal 2.2.0.0</text>
  </message>
  <message conversation_id="538">
    <ts>2019-02-20T06:47:26.846200</ts>
    <user>Sherill</user>
    <text>unfortunately it seems I can't run build the project at all using stack, since I'm not able to generate a valid `stack.yml`</text>
  </message>
  <message conversation_id="538">
    <ts>2019-02-20T07:00:58.847300</ts>
    <user>Leigha</user>
    <text>Talk on a similar-to-Elm approach to making cross platform mobile apps: &lt;https://youtu.be/DTzfe98pFvs?list=WL&amp;amp;t=1160&gt; (first 18 minutes or so introduces Elm Architecture so can be skipped!)</text>
  </message>
  <message conversation_id="538">
    <ts>2019-02-20T07:12:57.847800</ts>
    <user>Niesha</user>
    <text>&lt;@Sherill&gt; `stack init` works pretty well here.</text>
  </message>
  <message conversation_id="539">
    <ts>2019-02-20T07:20:28.847900</ts>
    <user>Vashti</user>
    <text>That sounds ideal, thanks very much! (One of the main aims of this editor is to use the DOT format, as opposed to the internal gp2 graph format, to aid portability)</text>
  </message>
  <message conversation_id="539">
    <ts>2019-02-20T07:21:13.848100</ts>
    <user>Vashti</user>
    <text>Do you think I'd be able to do it in the other direction? (User edits graphs in kite, and I pass these to the compiler as gp2 rule graphs)</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:09:57.000900</ts>
    <user>Kizzie</user>
    <text>How is a function named that has this signature? `List (M a) -&amp;gt; M (List a)` :thinking_face:</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:14:27.001300</ts>
    <user>Jin</user>
    <text>`sequence`, or maybe `combine`</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:16:59.001400</ts>
    <user>Kizzie</user>
    <text>thanks, i think sequence fits here :slightly_smiling_face:</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:17:46.001600</ts>
    <user>Niesha</user>
    <text>You could also call it `switch`, if you're feeling adventurous in your naming. For switching types, as in `f (g a) -&amp;gt; g (f a)`.</text>
  </message>
  <message conversation_id="541">
    <ts>2019-02-20T08:23:22.002300</ts>
    <user>Teri</user>
    <text>Hey there - I am running into this issue even though it should be fixed.. :confused:</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:23:23.002500</ts>
    <user>Teri</user>
    <text>&lt;https://github.com/elm/compiler/issues/1711&gt;</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:23:38.003100</ts>
    <user>Teri</user>
    <text>Means the init port command is fired before I can subscribe to it.</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:24:26.004600</ts>
    <user>Teri</user>
    <text>Anyone else dealt with this before? Am I doing something wrong? Subscribe is defo called after init...</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:24:28.004700</ts>
    <user>Inger</user>
    <text>What’s everyone using as a backend to handle URL correctly in Elm SPAs that use client-side routing?</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:24:45.004800</ts>
    <user>Teri</user>
    <text>I'm hosting on &lt;http://netlify.com|netlify.com&gt;</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:24:54.005000</ts>
    <user>Teri</user>
    <text>It's dead simple, free, fast and so on</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:25:22.005200</ts>
    <user>Teri</user>
    <text>You can just put ```/*  /index.html  200
``` in a redirects file and you're good</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:27:05.005500</ts>
    <user>Teri</user>
    <text>Redirecting stuff to an api is also a one-liner.</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:27:18.005700</ts>
    <user>Teri</user>
    <text>For local development I use create-elm-app</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:28:19.005900</ts>
    <user>Inger</user>
    <text>Nice. Is this what you mention -&amp;gt; &lt;https://www.netlify.com/docs/redirects/#rewrites-and-proxying&gt; ?</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:31:13.006200</ts>
    <user>Teri</user>
    <text>yeah</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:31:15.006400</ts>
    <user>Inger</user>
    <text>Yes, I have very similar setup using create-elm-app but I have a custom backend. I have it setup to serve `index.html` as a fallback but it doesn’t know which url to 404, or 300 and my only choice is to 200 all incoming URLs, serve `index.html` and handle those at Elm side of things.

So was wondering if there’s a more elegant solution w/r to that situation</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:31:46.006700</ts>
    <user>Teri</user>
    <text>If your custom backend does API stuff you can leave it where it is and proxy to it</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:31:52.006900</ts>
    <user>Teri</user>
    <text>leave the hosting to netlify..</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:32:50.007100</ts>
    <user>Inger</user>
    <text>Cool I’ll try it out.

Seems even netlify recommends the same approach :joy:
`/*    /index.html   200`</text>
  </message>
  <message conversation_id="540">
    <ts>2019-02-20T08:49:02.000600</ts>
    <user>Teri</user>
    <text>Yeah that's where I got it from.</text>
  </message>
  <message conversation_id="542">
    <ts>2019-02-20T09:39:56.001200</ts>
    <user>Sherill</user>
    <text>i didn't quite understand what version of haskell I'm supposed to use</text>
  </message>
  <message conversation_id="542">
    <ts>2019-02-20T09:40:10.001400</ts>
    <user>Sherill</user>
    <text>btw, 8.2.2 with cabal seems to be working fine</text>
  </message>
  <message conversation_id="542">
    <ts>2019-02-20T09:46:01.001600</ts>
    <user>Niesha</user>
    <text>Then do that. `stack init` finds you the correct version.</text>
  </message>
  <message conversation_id="543">
    <ts>2019-02-20T10:29:05.002200</ts>
    <user>Michelle</user>
    <text>when will all the speakers be announced for &lt;https://www.elminthespring.org/&gt;</text>
  </message>
  <message conversation_id="543">
    <ts>2019-02-20T10:48:52.003200</ts>
    <user>Danika</user>
    <text>Speakers are confirmed on the 22nd, so probably not long after that </text>
  </message>
  <message conversation_id="543">
    <ts>2019-02-20T11:17:47.003400</ts>
    <user>Danika</user>
    <text>&amp;gt; 2/22/19 - Speakers notified (by this date)
&amp;gt; 2/28/19 - Speakers announced (by this date)</text>
  </message>
  <message conversation_id="544">
    <ts>2019-02-20T11:32:59.003500</ts>
    <user>Gale</user>
    <text>I re-posted in &lt;#C0MU81TEC|conferences&gt; for visibility :wink:</text>
  </message>
  <message conversation_id="544">
    <ts>2019-02-20T11:33:23.003700</ts>
    <user>Reuben</user>
    <text>If you write a DOT -&amp;gt; gp2 and a gp2 -&amp;gt; DOT converter. This would make it for you possible to use Kite as well as other graph drawing software.</text>
  </message>
  <message conversation_id="544">
    <ts>2019-02-20T11:36:41.003900</ts>
    <user>Reuben</user>
    <text>I have put “DOT file import/export” to the top of my to do list for Kite: &lt;https://github.com/erkal/kite/projects/1#card-17893413&gt; But if you want to write parsers in elm, than you could do it, too. Because I will probably not have time for doing this for a while.</text>
  </message>
  <message conversation_id="545">
    <ts>2019-02-20T14:25:59.004700</ts>
    <user>Sari</user>
    <text>&lt;@Krista&gt; Thank you, that's great to hear.</text>
  </message>
  <message conversation_id="545">
    <ts>2019-02-20T14:36:10.005400</ts>
    <user>Janiece</user>
    <text>For anyone curious, the post in question is &lt;https://korban.net/posts/elm/2019-02-15-combining-http-requests-with-task-in-elm/&gt; and it is indeed very good!</text>
  </message>
  <message conversation_id="545">
    <ts>2019-02-20T14:38:27.006700</ts>
    <user>Janiece</user>
    <text>And &lt;@Sari&gt; I'm glad to see from your future post about `elm-ui` in November 2019 that we will still be able to "Forget CSS and enjoy creating UIs in pure Elm"  several months from now :stuck_out_tongue:</text>
  </message>
  <message conversation_id="546">
    <ts>2019-02-20T14:58:18.007800</ts>
    <user>Alyce</user>
    <text>Whats is the quote of evancz related to docs ?</text>
  </message>
  <message conversation_id="547">
    <ts>2019-02-20T15:22:54.008500</ts>
    <user>Janiece</user>
    <text>"It's not done until the docs are great"? &lt;https://twitter.com/czaplic/status/928359227541798912?s=19&gt;</text>
  </message>
  <message conversation_id="548">
    <ts>2019-02-20T20:08:05.012700</ts>
    <user>Jacquelyn</user>
    <text>With the help of &lt;@Lizabeth&gt; and &lt;@Dede&gt; I see the way to make inbound JS ports that have no payload (nullary functions or functions without arguments) is `port signedOut : (() -&amp;gt; msg) -&amp;gt; Sub msg` along with a subscription of `signedOut (always SignedOut)`.

What is the expected way we should use outbound nullary functions? Is it `port signOut : () -&amp;gt; Cmd msg` and in the `update` function: `( model, signOut () )`?</text>
  </message>
  <message conversation_id="548">
    <ts>2019-02-20T20:20:31.013400</ts>
    <user>Earlean</user>
    <text>&lt;@Jacquelyn&gt; yep, but it's generally an anti-pattern to not send a value on your port</text>
  </message>
  <message conversation_id="548">
    <ts>2019-02-20T20:22:36.014900</ts>
    <user>Earlean</user>
    <text>It's recommended to have 1 outgoing and 1 incoming port for each 'process' (aka. actor) you're communicating with. You shouldn't try to have one port for each JS function you want to call</text>
  </message>
  <message conversation_id="548">
    <ts>2019-02-20T20:29:42.015900</ts>
    <user>Jacquelyn</user>
    <text>I see, thank you for the recommendation</text>
  </message>
  <message conversation_id="548">
    <ts>2019-02-20T20:31:00.016100</ts>
    <user>Earlean</user>
    <text>&lt;https://youtu.be/P3pL85n9_5s&gt; is a great talk about ports</text>
  </message>
  <message conversation_id="549">
    <ts>2019-02-20T23:06:40.017600</ts>
    <user>Tonda</user>
    <text>Hey y’all, is there a good “get help” channel? In the last day or so we’ve started seeing some crashes in compiled elm code, in recursive calls to `eqHelp`. I know we do some funny stuff so it’s probably mostly an us problem but some guidance on how to track it down would be super helpful!</text>
  </message>
  <message conversation_id="549">
    <ts>2019-02-20T23:12:46.018500</ts>
    <user>Ruthann</user>
    <text>i'd start with debug.log statements around suspected recursions, this channel's got the most eyes</text>
  </message>
  <message conversation_id="550">
    <ts>2019-02-20T23:43:02.019400</ts>
    <user>Lizabeth</user>
    <text>There's &lt;#C0K8VHA6B|help&gt;, though with less :eyes: than here</text>
  </message>
  <message conversation_id="548">
    <ts>2019-02-21T03:00:47.021800</ts>
    <user>Lizabeth</user>
    <text>Anyone else getting the following error in the console when hitting and it not progressing past the loading screen?

&lt;https://ellie-app.com/new&gt;

```
Unchecked runtime.lastError: The message port closed before a response was received.
```</text>
  </message>
  <message conversation_id="548">
    <ts>2019-02-21T03:05:23.022300</ts>
    <user>Augustus</user>
    <text>I believe that error message is caused by a browser extension &lt;https://github.com/mozilla/webextension-polyfill/issues/130&gt;</text>
  </message>
  <message conversation_id="548">
    <ts>2019-02-21T03:07:14.023200</ts>
    <user>Lizabeth</user>
    <text>Thanks it was uBlock Origin in my case, which happened to be the only extension that I had running incognito &amp;amp; firefox as well.</text>
  </message>
  <message conversation_id="548">
    <ts>2019-02-21T03:07:52.023800</ts>
    <user>Augustus</user>
    <text>do you know it was blocking by chance? I have ublock as well but it loads for me</text>
  </message>
  <message conversation_id="551">
    <ts>2019-02-21T09:25:38.026400</ts>
    <user>Nancy</user>
    <text>hi everyone, where should json decoders go when creating custom types that you don't want to expose outside the module? I end up always creating cycles with this...</text>
  </message>
  <message conversation_id="551">
    <ts>2019-02-21T09:29:18.028000</ts>
    <user>Jin</user>
    <text>Just keep them in the module where you define the custom type. You can’t keep the type opaque otherwise.
It’s in general a good idea to keep types and functions using those types close together.</text>
  </message>
  <message conversation_id="551">
    <ts>2019-02-21T09:31:28.028700</ts>
    <user>Nancy</user>
    <text>and I guess other methods like view functions should go on the same module, right?</text>
  </message>
  <message conversation_id="551">
    <ts>2019-02-21T09:33:01.029500</ts>
    <user>Jin</user>
    <text>Yes. But you can of course factor out general view helpers. A relevant talk is &lt;https://www.youtube.com/watch?v=XpDsk374LDE&gt;</text>
  </message>
  <message conversation_id="551">
    <ts>2019-02-21T09:34:05.030000</ts>
    <user>Nancy</user>
    <text>but to write the view function you need to be able to case on the custom type internals</text>
  </message>
  <message conversation_id="551">
    <ts>2019-02-21T09:38:14.031800</ts>
    <user>Jin</user>
    <text>Sure, functions using the custom type should live there. With general view helpers I meant something like layout wrapper, views that take some Html and wrap it in some other Html.</text>
  </message>
  <message conversation_id="551">
    <ts>2019-02-21T09:38:35.032000</ts>
    <user>Nancy</user>
    <text>right</text>
  </message>
  <message conversation_id="551">
    <ts>2019-02-21T09:42:24.032100</ts>
    <user>Lynne</user>
    <text>As it's been mentioned below there is a &lt;#C0K8VHA6B|help&gt; channel. Also, this is probably what you are after:
&lt;https://github.com/elm/core/blob/5dcec7f6cd46599f9de95ca5f1cef386f0dc767d/src/Elm/Kernel/Utils.js#L27&gt;</text>
  </message>
  <message conversation_id="551">
    <ts>2019-02-21T09:54:52.032600</ts>
    <user>Jillian</user>
    <text>The first videos from elm oslo day are online:

Ossi Hanhinen – Being human in the Elm community
&lt;https://www.youtube.com/watch?v=l-brxQKJnfw&gt;

Luca Mugnaini – Elm at large (companies)
&lt;https://www.youtube.com/watch?v=yH6o322S8XQ&gt;

Richard Feldman – Exploring elm-spa-example
&lt;https://www.youtube.com/watch?v=RN2_NchjrJQ&gt;

Teodor Lunaas Heggelund – Lessons learned teaching Elm to kids
&lt;https://www.youtube.com/watch?v=FSec8QmgEWo&gt;

Einar W. Høst – Picture combinators and recursive fish
&lt;https://www.youtube.com/watch?v=jOu2hISeO5M&gt;

Tessa Kelly – Color Coding with Elm
&lt;https://www.youtube.com/watch?v=UzvCX-8bTDs&gt;

Ju Liu - Do Parsers dream of Electric Guitars?
&lt;https://www.youtube.com/watch?v=suSAfow2rmM&gt;

Jonas Berdal - On the Elm Track with NSB
&lt;https://www.youtube.com/watch?v=yE9PKFI19RM&gt;

Dan Abrams - Audio, Video, and Elm – Best Practices for Multimedia
&lt;https://www.youtube.com/watch?v=8jW58fXuuOk&gt;

Manuel Fuchs - Emulating the Nintendo Game Boy CPU with Elm
&lt;https://www.youtube.com/watch?v=vI30OvU3QW0&gt;

Matthew Griffith -A Markup for the Statically Typed
&lt;https://www.youtube.com/watch?v=8Zd3ocr9Di8&gt;

Kris Jenkins - Slaying a UI Antipattern
&lt;https://www.youtube.com/watch?v=NLcRzOyrH08&gt;

Brian Hicks - Joyful Particles in Elm
&lt;https://www.youtube.com/watch?v=goL7LeDHFi4&gt;

Emma Tsujimoto Cunningham - Parsing lexical ambiguity with Elm and expressive types
&lt;https://www.youtube.com/watch?v=sLh-7E-iOto&gt;

Robin Heggelund Hansen - The Extensibility Problem
&lt;https://www.youtube.com/watch?v=4QwI_QWoUK0&gt;

If you are old school and prefer RSS feeds over subscriptions, here is the one for elm oslo day:
&lt;https://www.youtube.com/feeds/videos.xml?channel_id=UCe8Jqmf-R82Zm0nPOxFLqkg&gt;</text>
  </message>
  <message conversation_id="552">
    <ts>2019-02-21T10:13:48.033100</ts>
    <user>Timika</user>
    <text>They seem to come in one-by-one now. :slightly_smiling_face: :tada:</text>
  </message>
  <message conversation_id="552">
    <ts>2019-02-21T10:41:03.035200</ts>
    <user>Cammy</user>
    <text>There are advantages to this:

1) you can release as their finished instead of holding the up until done. 

2) as long as you don’t spread it out too much, you can keep people’s attention for a longer period of time.</text>
  </message>
  <message conversation_id="553">
    <ts>2019-02-21T10:53:39.035600</ts>
    <user>Tonda</user>
    <text>thanks! Yes we’re seeing a crash in this code</text>
  </message>
  <message conversation_id="554">
    <ts>2019-02-21T11:28:43.036200</ts>
    <user>Waylon</user>
    <text>We're publishing as fast as we can :slightly_smiling_face: &lt;@Ashleigh&gt; and &lt;@Moon&gt; is hard at work uploading.</text>
  </message>
  <message conversation_id="554">
    <ts>2019-02-21T11:29:55.036500</ts>
    <user>Timika</user>
    <text>:tada: Can’t wait to watch robin’s talk</text>
  </message>
  <message conversation_id="554">
    <ts>2019-02-21T11:34:43.037100</ts>
    <user>Cammy</user>
    <text>Agreed. Glad Luca’s is up already too. </text>
  </message>
  <message conversation_id="555">
    <ts>2019-02-21T13:36:06.043100</ts>
    <user>Rosaria</user>
    <text>Hey folks. I'm staring at a problem in Elm where there seems to exist no great way to integrate gRPC. There are indeed no libraries that solve the problem, although there are two protocol buffer libraries that could be leveraged to help.

My problem is that grpc-web (the protocol that we'd need to implement) is obviously low level javascript-y http/2 type stuff. The definition of kernel code. Is there some process by which I can begin developing a module that's intended to fit into the kernel of Elm? And would it ever be accepted? Is there any process for this?</text>
  </message>
  <message conversation_id="555">
    <ts>2019-02-21T13:39:50.043800</ts>
    <user>Moon</user>
    <text>almost done now!</text>
  </message>
  <message conversation_id="555">
    <ts>2019-02-21T14:21:07.045600</ts>
    <user>Lynne</user>
    <text>&lt;@Rosaria&gt; I think Evan mentioned somewhere that he prefers seeing posts at discourse/Reddit where the needs are stated and some feedback is gathered. It could be a good place to start and see if there are people who are interested in having Elm gRPC implementation as well.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:22:05.046600</ts>
    <user>Agustin</user>
    <text>Have you considered a port that wraps anything you can’t do in Elm due to browser apis?</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:22:33.047400</ts>
    <user>Agustin</user>
    <text>You have access to some http request stuff, but maybe make a http 2 equivalent?</text>
  </message>
  <message conversation_id="555">
    <ts>2019-02-21T14:22:38.047600</ts>
    <user>Rosaria</user>
    <text>The comment about browser APIs is a limiting factor to implement gRPC in pure javascript and doesn't really concern elm fwiw. Port or no port you still can't do it.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:22:55.048000</ts>
    <user>Rosaria</user>
    <text>Hence grpc-web protocol is a stop-gap to enable clients to talk "a form" of grpc</text>
  </message>
  <message conversation_id="555">
    <ts>2019-02-21T14:23:16.048700</ts>
    <user>Agustin</user>
    <text>If you can do it in JS you can do it in ports.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:23:19.048800</ts>
    <user>Rosaria</user>
    <text>Being that it's not possible to implement grpc in pure javascript, the proposal would target grpc-web instead.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:23:42.049100</ts>
    <user>Rosaria</user>
    <text>Yes, you're getting confused with what that statement meant. I'm trying to clarify.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:23:43.049300</ts>
    <user>Rosaria</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:24:12.049900</ts>
    <user>Rosaria</user>
    <text>It's an important distinction that there are two protocols, and one is impossible in pure JS and hence impossible with a port.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:24:21.050200</ts>
    <user>Rosaria</user>
    <text>And that we'd be targetting the one that IS possible in pure JS &amp;amp; ports. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:26:10.051800</ts>
    <user>Rosaria</user>
    <text>&lt;@Agustin&gt; Also fwiw the purpose of grpc is to have low latency and performant serialization. Using a port forces me to serialize to json, which then gets converted into an object in JS land, which then is serialized to binary. Not very efficient :confused:</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:27:56.052500</ts>
    <user>Agustin</user>
    <text>If its impossible in pure js without a port it’s impossible in elm</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:28:04.052800</ts>
    <user>Rosaria</user>
    <text>I literally said that.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:28:06.053000</ts>
    <user>Rosaria</user>
    <text>I'm not arguing.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:28:07.053200</ts>
    <user>Rosaria</user>
    <text>lol.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:28:47.053700</ts>
    <user>Agustin</user>
    <text>Ok cool, going back to your original statement I think Elm isn’t the right choice for you.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:28:53.054000</ts>
    <user>Agustin</user>
    <text>There is no way to do what you want.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:29:15.054400</ts>
    <user>Agustin</user>
    <text>Short of Evan blessing you with an exploration repo. You can’t do it.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:29:36.054800</ts>
    <user>Agustin</user>
    <text>And there are very little active exploration repos</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:29:56.055300</ts>
    <user>Agustin</user>
    <text>Not even WebGl has made it to core, and websockets got left behind in 0.18</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:30:40.055900</ts>
    <user>Rosaria</user>
    <text>Websockets being left behind is a little concerning.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:31:02.056400</ts>
    <user>Rosaria</user>
    <text>But it sounds like this is simply a people problem. Perhaps it can be solved with discussion like Sergey mentions.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:31:17.056600</ts>
    <user>Rosaria</user>
    <text>Also - I'm already fairly invested in Elm.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:31:25.056900</ts>
    <user>Rosaria</user>
    <text>This is a change we want to make on the backend.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:31:45.057400</ts>
    <user>Rosaria</user>
    <text>So Elm either comes along for the ride or we'll have to abandon the idea and try something strictly worse. Like REST/JSONAPI/Swagger.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:32:00.057800</ts>
    <user>Agustin</user>
    <text>GraphQL</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:32:14.058400</ts>
    <user>Agustin</user>
    <text>There are beautiful GraphQL libraries in Elm, run on standard protocols</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:32:21.058700</ts>
    <user>Rosaria</user>
    <text>Standard protocols are the strictly worse part.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:32:36.059100</ts>
    <user>Agustin</user>
    <text>The beauty of GraphQL is its not wedded to them</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:32:53.059500</ts>
    <user>Agustin</user>
    <text>It runs on them but when HTTP/2 HTTP/3 is ready it’ll run on them too</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:33:06.059800</ts>
    <user>Rosaria</user>
    <text>HTTP/2 is ready and I'd be concerned if it didn't run on them :confused:</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:33:33.060500</ts>
    <user>Agustin</user>
    <text>Not all webservers etc…</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:33:37.060600</ts>
    <user>Rosaria</user>
    <text>etc.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:34:09.061300</ts>
    <user>Rosaria</user>
    <text>Does GraphQL solve the problem of describing an APIs methods/serialization?</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:34:22.061600</ts>
    <user>Rosaria</user>
    <text>I know precious little about it.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:34:28.061900</ts>
    <user>Rosaria</user>
    <text>But that's the root of the problem we're trying to solve.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:34:30.062200</ts>
    <user>Agustin</user>
    <text>You describe a schema of what is available</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:34:50.062700</ts>
    <user>Agustin</user>
    <text>You write queries / mutations / subscriptions to pull / change / stream that data</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:35:02.063100</ts>
    <user>Agustin</user>
    <text>You specify what the api supports, and what your client needs</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:35:19.063500</ts>
    <user>Agustin</user>
    <text>Serialisation is standardised based on the schema</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:35:37.064000</ts>
    <user>Agustin</user>
    <text>docs for fields / objects are returned via introspection</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:36:15.064800</ts>
    <user>Rosaria</user>
    <text>I'll look into it. Maybe it's another solution to the problem.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:37:20.066200</ts>
    <user>Rosaria</user>
    <text>Though it still seems like it'll have the same old performance as a random rest API. One of the reasons for choosing gRPC was specifically that.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:37:26.066700</ts>
    <user>Rosaria</user>
    <text>Will have to evaluate. Thanks for your input.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:37:40.067100</ts>
    <user>Agustin</user>
    <text>It runs over any protocol</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:37:57.067700</ts>
    <user>Agustin</user>
    <text>So its common to use websockets etc to improve the push -&amp;gt; pull time</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:38:07.068000</ts>
    <user>Rosaria</user>
    <text>But those were abandoned in Elm 0.18 :disappointed:</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:38:27.068400</ts>
    <user>Agustin</user>
    <text>No because its trivial to use ports for them</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:38:47.069300</ts>
    <user>Agustin</user>
    <text>(Theres no deserialisation overhead, as its sent straight to the websocket)</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:39:19.070200</ts>
    <user>Agustin</user>
    <text>but yes websockets use json, and not some binary format</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:39:22.070300</ts>
    <user>Rosaria</user>
    <text>How is that possible? If it goes through the port it must be serialized somehow no?</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:39:28.070500</ts>
    <user>Agustin</user>
    <text>sure</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:39:37.071100</ts>
    <user>Agustin</user>
    <text>it just does it before the port</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:39:40.071400</ts>
    <user>Agustin</user>
    <text>rather than after</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:39:50.071900</ts>
    <user>Agustin</user>
    <text>its going to be serialised if you send it over a websocket</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:39:51.072100</ts>
    <user>Agustin</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:39:51.072200</ts>
    <user>Rosaria</user>
    <text>So the json object the port is carrying is just a string then?</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:40:21.072700</ts>
    <user>Rosaria</user>
    <text>And de/serialiaztion happens on the elm side?</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:40:31.072900</ts>
    <user>Agustin</user>
    <text>Totally</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:40:42.073200</ts>
    <user>Agustin</user>
    <text>I send some pretty hefty data that way</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:40:58.073900</ts>
    <user>Agustin</user>
    <text>(basicall graphql’d equivalent of 100mb csvs)</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:41:07.074200</ts>
    <user>Agustin</user>
    <text>The bottleneck is not my ports I can assure you</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:41:33.074900</ts>
    <user>Agustin</user>
    <text>(it may help my data is streamed)</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:42:08.075700</ts>
    <user>Rosaria</user>
    <text>Okay, so we're at least in theory avoiding double encoding (though I don't think that's true because somewhere that string is still probably going to get a `JSON.stringify` to go through the port, though it may be trivial performance wise even for large data).</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:42:51.076300</ts>
    <user>Rosaria</user>
    <text>Anyway, all besides the point.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:43:50.078200</ts>
    <user>Danika</user>
    <text>There’s no stringify that happens when going through ports. </text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:43:50.078300</ts>
    <user>Rosaria</user>
    <text>&lt;@Agustin&gt; The most important thing however that you haven't touched on is is there code generation for these GraphQL things? Do I have to write clients for it by hand with support libraries?</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:44:31.079100</ts>
    <user>Agustin</user>
    <text>No, the most popular library generates elm for your graphql</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:44:39.079500</ts>
    <user>Agustin</user>
    <text>You still have to couple that to your code</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:44:42.079700</ts>
    <user>Rosaria</user>
    <text>Okay, that's a huge relief.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:44:46.080000</ts>
    <user>Agustin</user>
    <text>But the “decoding” is handled</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:46:38.081300</ts>
    <user>Rosaria</user>
    <text>&lt;@Danika&gt; Ah I see. Before the json passing in ports occurred, elm had hardcode support for its basic types through ports.</text>
  </message>
  <message conversation_id="556">
    <ts>2019-02-21T14:46:40.081500</ts>
    <user>Rosaria</user>
    <text>That's excellent news.</text>
  </message>
  <message conversation_id="557">
    <ts>2019-02-21T15:32:23.084100</ts>
    <user>Cherish</user>
    <text>Hey there, I am searching for the complete schema of "--report=json" compiler flag... is that JSON schema just the same for every type of error/warning/message ?</text>
  </message>
  <message conversation_id="557">
    <ts>2019-02-21T15:33:35.084900</ts>
    <user>Cherish</user>
    <text>currently I am reengineering the schema from concrete error messages, but that seems somewhat inefficient and tedious..</text>
  </message>
  <message conversation_id="558">
    <ts>2019-02-21T16:10:23.089500</ts>
    <user>Velia</user>
    <text>This didn't help?

&lt;https://package.elm-lang.org/packages/elm/project-metadata-utils/latest/Elm-Error&gt;</text>
  </message>
  <message conversation_id="559">
    <ts>2019-02-21T16:16:44.094000</ts>
    <user>Kaitlin</user>
    <text>TLDR; contextually rendered UI loses bindings in IE 11

Hi there, I have the singular misfortune of having to support IE11 for our app, and while it works reasonably well, there is an issue where the app seems to lose its binding for overlays, i.e DOM that is rendered contextually based on a user interaction.

I can verify that if I render the overlay on page load, I can interact with it ( (I can verify the responsiveness by watching the elm debugger), but when I close it and reopen it the overlay eventually loses it bindings, and becomes non-responsive. By eventually, I mean that I can reopen and close the overlay 0 or more times, but typically no more than 5, so this suggests that perhaps the issue is in IE’s event loop handling of the runtime, which, well, is not a cause for much optimism that this issue is easily fixable.

Has anyone else experienced this issue with IE11 and if so, how did you mitigate it.
thanks all!</text>
  </message>
  <message conversation_id="559">
    <ts>2019-02-21T16:20:33.095600</ts>
    <user>Huong</user>
    <text>By loses bindings, do you mean there are no event handlers registered, or do you see errors in the console when interacting?</text>
  </message>
  <message conversation_id="559">
    <ts>2019-02-21T16:21:11.096200</ts>
    <user>Kaitlin</user>
    <text>there are no console errors or elm debugger updates</text>
  </message>
  <message conversation_id="559">
    <ts>2019-02-21T16:23:09.098400</ts>
    <user>Huong</user>
    <text>That's pretty weird! I've had issues where events would result in errors due to some weird edge case with html.map that only pops up in IE 11, but haven't run into a complete lack of interaction!</text>
  </message>
  <message conversation_id="559">
    <ts>2019-02-21T16:26:11.098800</ts>
    <user>Kaitlin</user>
    <text>yeah, it’s very weird!</text>
  </message>
  <message conversation_id="559">
    <ts>2019-02-21T16:49:03.102400</ts>
    <user>Kaitlin</user>
    <text>&lt;@Huong&gt; you are a genius. your comment about Html.map inspired me to look at how I was constructing the DOM where the overlay was rendered, and indeed I was doing something rather weird with Html.map

basically I was doing this:
```div [] &amp;lt;|
    List.map (Html.map myFooMsg)
        [ viewNode1
        , viewOverlay
        , viewNode2
        , viewNode3
        ]```

when I should have been doing this :

```Html.map myFooMsg
    &amp;lt;| div [] 
        [ viewNode1
        , viewOverlay
        , viewNode2
        , viewNode3
        ]```</text>
  </message>
  <message conversation_id="559">
    <ts>2019-02-21T16:50:27.103400</ts>
    <user>Kaitlin</user>
    <text>using the latter structure makes my overlay 100% functional.</text>
  </message>
  <message conversation_id="559">
    <ts>2019-02-21T16:51:29.104400</ts>
    <user>Kaitlin</user>
    <text>I’m not sure why that would be the case, but i know the original way I was doing it is obviously not idiomatic</text>
  </message>
  <message conversation_id="559">
    <ts>2019-02-21T17:00:10.106700</ts>
    <user>Huong</user>
    <text>Yeah, that's actually the bug I was referring to. Having an indirection between the node and the mapped contents seems to make this problematic, for whatever reason. Anyway, glad that helped!</text>
  </message>
  <message conversation_id="560">
    <ts>2019-02-21T17:09:42.106800</ts>
    <user>Cherish</user>
    <text>&lt;@Velia&gt; great!
I just can't produce this for testing:
`ModuleProblems (List BadModule)`

I have 2 Modules, each of which have 1 error, but I get only 1 "BadModule" from the json-report

this is what never produced something more than one element:
&lt;https://github.com/elm/project-metadata-utils/blob/1d43c1a660c4f7dca9f14e64a050ac3971141221/src/Elm/Error.elm#L69&gt;</text>
  </message>
  <message conversation_id="561">
    <ts>2019-02-21T17:17:34.107300</ts>
    <user>Cherish</user>
    <text>ah.. I think I just got it:
there will be &amp;gt;1 module-errors only, if I compile multiple _independent_ modules
if I use moduleB in moduleA (that is, moduleA imports moduleB !), only the first error is reported, and which depends on whichever module will be checked by the compiler first</text>
  </message>
  <message conversation_id="562">
    <ts>2019-02-21T17:52:53.108300</ts>
    <user>Wendell</user>
    <text>Really great talks from Oslo Elm Day. Almost finished watching all of them.</text>
  </message>
  <message conversation_id="562">
    <ts>2019-02-21T18:14:36.110900</ts>
    <user>Kathlyn</user>
    <text>What is the best way to call an Elm function from Js. I have a parser implemented in Elm and would really love to be able to call the function synchronously from Js so I don’t have to reimplement the same thing in Js.</text>
  </message>
  <message conversation_id="562">
    <ts>2019-02-21T18:17:52.111400</ts>
    <user>Kathlyn</user>
    <text>I am perfectly fine with encoding and decoding stuff as needed.</text>
  </message>
  <message conversation_id="562">
    <ts>2019-02-21T18:19:16.111600</ts>
    <user>Cammy</user>
    <text>Send the text to be parsed in through a port, encode a JSON object of the AST or whatever and send it back out.</text>
  </message>
  <message conversation_id="562">
    <ts>2019-02-21T18:20:09.111800</ts>
    <user>Kris</user>
    <text>You have mostly 2 options for doing it synchronously, something like this: &lt;https://medium.com/@jjant/making-elm-unsafe-cc6435495af2&gt; or using a trick with decoding/encoding a proxy</text>
  </message>
  <message conversation_id="562">
    <ts>2019-02-21T18:20:34.112000</ts>
    <user>Kris</user>
    <text>These are not the officially recommended options etc etc</text>
  </message>
  <message conversation_id="562">
    <ts>2019-02-21T18:22:21.112200</ts>
    <user>Kathlyn</user>
    <text>&lt;@Cammy&gt; Yeah, was hoping for an sync way of doing it as the thing I have to integrate with requires it. Thanks all the same</text>
  </message>
  <message conversation_id="563">
    <ts>2019-02-21T19:01:40.114100</ts>
    <user>Dexter</user>
    <text>Is the current state of running elm with the debugger enabled that you can’t use Lists in your Msg’s? If been reading on the bug reports but they mainly talk about the usage of Arrays and opt to convert them in to lists for your messages, but a List also reports ```elm: Map.!: given key is not an element in the map```</text>
  </message>
  <message conversation_id="562">
    <ts>2019-02-22T01:10:08.115900</ts>
    <user>Maida</user>
    <text>Unfortunately yes.  There is a fork of the compiler that fixes this issue:
&lt;https://github.com/tomstejskal/compiler&gt;

The official fix will be part of `0.19.1` but there are other issues being fixed that will delay that release some more time.</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:41:44.116400</ts>
    <user>Chi</user>
    <text>How to iterate over struct</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:45:01.116500</ts>
    <user>Elza</user>
    <text>you mean over the fields of a struct? If so, it is not possible as that would mean iterate over values of different types.</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:45:44.116700</ts>
    <user>Iona</user>
    <text>&lt;@Chi&gt; what are you wanting to do?</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:47:20.116900</ts>
    <user>Chi</user>
    <text>struct have different type lets say struct {data:List String, id: int}</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:48:04.117200</ts>
    <user>Iona</user>
    <text>yes?</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:48:47.117500</ts>
    <user>Chi</user>
    <text>i want to iterate over it List of struct</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:51:53.117800</ts>
    <user>Allyn</user>
    <text>What do you whant to do in the iteration? Applying a function to the records? A filter? something else?</text>
  </message>
  <message conversation_id="565">
    <ts>2019-02-22T02:53:12.119100</ts>
    <user>Allyn</user>
    <text>Hello. I struggle to apply a list of filters to a list of values. I made a simplified example in ellie: &lt;https://ellie-app.com/4NpDSmYhdvMa1&gt;</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:54:21.119200</ts>
    <user>Chi</user>
    <text>want to apply funtion</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:55:33.119400</ts>
    <user>Allyn</user>
    <text>So use List.map: &lt;https://package.elm-lang.org/packages/elm/core/latest/List#map&gt;</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T02:57:59.119600</ts>
    <user>Sharon</user>
    <text>I'm just going to give you the answer. But feel free to ask any questions so we can help you understand it
```
applyFilters : List Int -&amp;gt; List (Int -&amp;gt; Bool)  -&amp;gt; List Int
applyFilters values filters =
    List.foldl (\filter remainingValues -&amp;gt; List.filter filter remainingValues) values filters
```</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T03:01:16.119900</ts>
    <user>Allyn</user>
    <text>It doesn’t seem to produce the expected result in my example</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T03:01:17.120100</ts>
    <user>Allyn</user>
    <text>&lt;https://ellie-app.com/4NpPhpwLXZfa1&gt;</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T03:02:37.120300</ts>
    <user>Sharon</user>
    <text>oh I thought all filters had to be applied,sorry :slightly_smiling_face:</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T03:03:04.120500</ts>
    <user>Sharon</user>
    <text>so if any filter returns true, the element can stay</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T03:03:32.120700</ts>
    <user>Allyn</user>
    <text>No, it’s my example which is bad, your solution is OK</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T03:03:41.121000</ts>
    <user>Allyn</user>
    <text>sorry</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T03:03:55.121200</ts>
    <user>Allyn</user>
    <text>And thank you for your help</text>
  </message>
  <message conversation_id="564">
    <ts>2019-02-22T03:05:36.121500</ts>
    <user>Lynne</user>
    <text>Just in case you are interested in OR filters, there is a function in `list-extra` which may be helpful: `List.Extra.lift2`</text>
  </message>
  <message conversation_id="566">
    <ts>2019-02-22T03:38:47.122200</ts>
    <user>Niesha</user>
    <text>You could patch out the check about which repos are allowed to produce kernel code.</text>
  </message>
  <message conversation_id="566">
    <ts>2019-02-22T03:39:04.122400</ts>
    <user>Niesha</user>
    <text>But you'd be on  your own writing kernel code.</text>
  </message>
  <message conversation_id="567">
    <ts>2019-02-22T03:56:46.123000</ts>
    <user>Teri</user>
    <text>Hey peeps - Is there a way to generate inline styles with elm-css?</text>
  </message>
  <message conversation_id="567">
    <ts>2019-02-22T03:56:56.123200</ts>
    <user>Teri</user>
    <text>Can't find it in the docs nor issues?</text>
  </message>
  <message conversation_id="567">
    <ts>2019-02-22T03:58:06.123300</ts>
    <user>Teri</user>
    <text>It is actually interleaved with installed modules. If you put the consumed modules in your source directory rather than the elm packages directory the error goes away.</text>
  </message>
  <message conversation_id="568">
    <ts>2019-02-22T06:14:31.130500</ts>
    <user>Shelia</user>
    <text>Is &lt;http://package.elm-lang.org|package.elm-lang.org&gt; broken for anyone else? &lt;https://package.elm-lang.org/packages/jinjor/elm-debounce/latest/Debounce&gt; I can't click any links, I just get

```
elm.js?1538874483:3779 Uncaught TypeError: Cannot read property 'childNodes' of undefined
    at _VirtualDom_addDomNodesHelp (elm.js?1538874483:3779)
```

Over and over again in my console</text>
  </message>
  <message conversation_id="568">
    <ts>2019-02-22T06:14:59.130800</ts>
    <user>Shelia</user>
    <text>If I refresh the page, the first console error is `Unchecked runtime.lastError: The message port closed before a response was received.`</text>
  </message>
  <message conversation_id="568">
    <ts>2019-02-22T06:15:11.131000</ts>
    <user>Shelia</user>
    <text>That seems to happen whenever I move the mouse</text>
  </message>
  <message conversation_id="568">
    <ts>2019-02-22T06:17:29.132600</ts>
    <user>Shelia</user>
    <text>Ok, looks like it's my Stay Focused Chrome extension</text>
  </message>
  <message conversation_id="568">
    <ts>2019-02-22T06:17:48.133000</ts>
    <user>Earlean</user>
    <text>&lt;@Shelia&gt; yep, that error is the result of something outside Elm messing with Elm's part of the DOM</text>
  </message>
  <message conversation_id="568">
    <ts>2019-02-22T06:20:53.134000</ts>
    <user>Lewis</user>
    <text>perhaps Stay Focused should be mentioned as an example here? &lt;https://discourse.elm-lang.org/t/fullscreen-elm-app-in-0-19-childnode-issue-reopened/3174/9&gt; (if &lt;http://package.elm-lang.org|package.elm-lang.org&gt; is using `Browser.application`)</text>
  </message>
  <message conversation_id="569">
    <ts>2019-02-22T07:39:06.137100</ts>
    <user>Nana</user>
    <text>How many frontend devs does NoRedInk have? Working on a presentation about Elm :slightly_smiling_face:</text>
  </message>
  <message conversation_id="570">
    <ts>2019-02-22T09:03:11.140100</ts>
    <user>Charley</user>
    <text>Hello all! We're under threat from a decision-maker for our use of Elm so we're writing a big post on *"Why Choose Elm in 2019"*. We would _very much appreciate your help_ with a :+1: and sharing any success stories and challenges you've had on this post with our outline so we can make it comprehensive :hearts:  &lt;https://github.com/dwyl/learn-elm/issues/129&gt;</text>
  </message>
  <message conversation_id="570">
    <ts>2019-02-22T09:04:10.140300</ts>
    <user>Charley</user>
    <text>&lt;@Nana&gt; Looks like their website doesn't differentiate between front end and back end, just roughly 25 engineers: &lt;https://www.noredink.com/about/team&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="570">
    <ts>2019-02-22T09:15:20.141800</ts>
    <user>Nana</user>
    <text>Oh, that's kind of what I'm doing too! Although for me it's actually more our Java developers. My boss was more "reliability sounds good"</text>
  </message>
  <message conversation_id="570">
    <ts>2019-02-22T09:20:04.142100</ts>
    <user>Nana</user>
    <text>Ah thanks, I see :thinking_face:</text>
  </message>
  <message conversation_id="570">
    <ts>2019-02-22T09:20:37.142300</ts>
    <user>Charley</user>
    <text>&lt;@Nana&gt; We're dedicating our time to it next week without fail so maybe we could share ideas as we go through? If you could put the word out maybe we could collect some wider experience for everyone!</text>
  </message>
  <message conversation_id="571">
    <ts>2019-02-22T09:45:41.143200</ts>
    <user>Randi</user>
    <text>Hi! Does anyone know the algorithm used for the Elm type checker?</text>
  </message>
  <message conversation_id="570">
    <ts>2019-02-22T09:47:30.143300</ts>
    <user>Nana</user>
    <text>I think it's based on this: &lt;https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system&gt;</text>
  </message>
  <message conversation_id="570">
    <ts>2019-02-22T09:55:35.143600</ts>
    <user>Nana</user>
    <text>&lt;@Charley&gt; I just heard from &lt;@Carl&gt; (Microsoft) they are going to be recording for the next episode of the elm-town podcast today</text>
  </message>
  <message conversation_id="572">
    <ts>2019-02-22T10:46:37.144500</ts>
    <user>Sherilyn</user>
    <text>We don't differentiate internally either</text>
  </message>
  <message conversation_id="572">
    <ts>2019-02-22T10:49:05.144700</ts>
    <user>Sherilyn</user>
    <text>Eg I used to do mostly Backend and now I write a lot of elm.</text>
  </message>
  <message conversation_id="573">
    <ts>2019-02-22T11:35:42.145400</ts>
    <user>Hoa</user>
    <text>Having big names always help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="573">
    <ts>2019-02-22T11:44:14.147000</ts>
    <user>Lavon</user>
    <text>Does anyone know if its possible to change the location of the elm-stuff directory? (Not to be confused with the .elm directory.) I'm trying to work around some unfortunate read-only drive problems and it would be great if I could move it to another location.</text>
  </message>
  <message conversation_id="573">
    <ts>2019-02-22T11:45:47.148000</ts>
    <user>Huong</user>
    <text>`elm-stuff` is always created in the same directory as your `elm.json`. However, you might be able to move your `elm.json` and update its `source-directories` entry accordingly?</text>
  </message>
  <message conversation_id="573">
    <ts>2019-02-22T11:47:00.148600</ts>
    <user>Carl</user>
    <text>while we do use Elm at Microsoft, we're just a small team inside a huge company. I don't think the TypeScript people or VSCode people are even aware of what our team is doing</text>
  </message>
  <message conversation_id="573">
    <ts>2019-02-22T11:48:16.149600</ts>
    <user>Lavon</user>
    <text>If I can automate copying it to another location and updating the source-directories list dynamically that might work...</text>
  </message>
  <message conversation_id="573">
    <ts>2019-02-22T11:49:27.150100</ts>
    <user>Huong</user>
    <text>If namedropping is the goal - there's a team at adobe that uses Elm, and Amazon AWS had a job-listing for Elm engineers too, a year or so ago.</text>
  </message>
  <message conversation_id="573">
    <ts>2019-02-22T11:49:29.150300</ts>
    <user>Crissy</user>
    <text>You could copy the whole source directory from the read only drive to one with write access?</text>
  </message>
  <message conversation_id="573">
    <ts>2019-02-22T11:52:05.152000</ts>
    <user>Lavon</user>
    <text>Yeah, that's an option too. I was hoping I could just change an environment variable to make it all work, but it looks like I'll have to do more than that :confused:</text>
  </message>
  <message conversation_id="574">
    <ts>2019-02-22T16:23:35.155200</ts>
    <user>Karan</user>
    <text>hi, i'm trying to build the elm compiler from its source. i tried to build it using stack, but `stack init` fails because it does not find a suitable resolver. any hints?</text>
  </message>
  <message conversation_id="574">
    <ts>2019-02-22T16:30:24.155600</ts>
    <user>Garnet</user>
    <text>Is there some component/package to use the bluetooth web API in Elm?</text>
  </message>
  <message conversation_id="575">
    <ts>2019-02-22T17:17:22.155900</ts>
    <user>Bert</user>
    <text>I don't think so, but you can use ports to interact with any browser API</text>
  </message>
  <message conversation_id="576">
    <ts>2019-02-23T04:01:00.157800</ts>
    <user>Salvador</user>
    <text>Has anyone seen this error before?
```
ERROR in ./src/Planning.elm
Module build failed (from ./node_modules/elm-webpack-loader/index.js):
Error: Compiler process exited with error Compilation failed
Success!
elm: Map.!: given key is not an element in the map
CallStack (from HasCallStack):
  error, called at libraries/containers/Data/Map/Internal.hs:603:17 in containers-0.5.10.2:Data.Map.Internal

    at ChildProcess.&amp;lt;anonymous&amp;gt; (/Users/herman/Projects/_customer/tranman/elm/node_modules/node-elm-compiler/index.js:149:27)
    at ChildProcess.emit (events.js:160:13)
    at maybeClose (internal/child_process.js:943:16)
    at Socket.stream.socket.on (internal/child_process.js:363:11)
    at Socket.emit (events.js:160:13)
    at Pipe._handle.close [as _onclose] (net.js:562:12)
 @ ./js/elm.js 1:0-41 3:13-16
```
It happens on running webpack with --development, not with --production. And it just started all of a sudden between 1 compile and the other.</text>
  </message>
  <message conversation_id="576">
    <ts>2019-02-23T04:02:49.158200</ts>
    <user>Salvador</user>
    <text>never mind, I deleted elm-stuff and it went away.</text>
  </message>
  <message conversation_id="576">
    <ts>2019-02-23T04:07:33.159600</ts>
    <user>Lynne</user>
    <text>&lt;@Salvador&gt; That's a compiler issue, on Github there are few threads discussing it. If it comes again and removing `elm-stuff` won't help you can try running `elm make` without `--debug` if it suits you or build elm compiler from a forked repo where this bug is fixed</text>
  </message>
  <message conversation_id="576">
    <ts>2019-02-23T04:08:52.160500</ts>
    <user>Salvador</user>
    <text>&lt;@Lynne&gt; Aha, thanks for the info. For the moment it’s compiling fine. But I’ll put it on my list.</text>
  </message>
  <message conversation_id="575">
    <ts>2019-02-23T04:31:10.160700</ts>
    <user>Garnet</user>
    <text>Yeah, just wondered if thers some Elm package ^^</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T12:46:35.162500</ts>
    <user>Santina</user>
    <text>I'm using Visual Studio Code and just started a new elm project, but I can't seem to get it to reformat my code on save like it used to in my old project. Anything in particular I need to do? I'm using the Krzysztof-Cieslak/vscode-elm extension</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T12:52:18.164800</ts>
    <user>Monnie</user>
    <text>Does it format manually ?  (Shift+Alt+F)
in that case it must be your settings.. there is a Format on save settings in vsCode.. There is also a timer soewhere... I found that it has to be set more than defaul 1s.. when I changed mine to 5s it works every time..</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T12:58:45.165100</ts>
    <user>Santina</user>
    <text>Hmm. It just doesn't seem to like my code. Compiler errors.</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T12:58:50.165300</ts>
    <user>Santina</user>
    <text>does elm compiler require a Main.elm?</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T12:59:05.165500</ts>
    <user>Santina</user>
    <text>I'm starting my writing the shape of my data</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T12:59:33.165700</ts>
    <user>Santina</user>
    <text>didnt want to dive into wiring the boilerplate yet</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:00:01.165900</ts>
    <user>Monnie</user>
    <text>not sure.. never tried without main :slightly_smiling_face:</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:01:29.167300</ts>
    <user>Santina</user>
    <text>Does elm compiler require a Main.elm to exist before elm-format will function? I'm starting by writing out the shape of my data and wanted it typechecked as well as the benefit of elm-format, so i've started writing some real basic static data, but elm-format shows me compiler errors with *very* basic data that *should* compile okay</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:02:50.167800</ts>
    <user>Dede</user>
    <text>Compiler will compile any file you point it at.  The errors are probably real</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:03:37.168000</ts>
    <user>Santina</user>
    <text>example: &lt;https://gist.github.com/bstro/22585039e6b61211a245b335131c27ef&gt;</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:03:56.168400</ts>
    <user>Santina</user>
    <text>In the past, elm-format would rejigger that `data = ...` clause to be pretty and compile</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:04:24.168700</ts>
    <user>Santina</user>
    <text>I guess it does compile correctly if I put it all on one line.</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:05:44.169200</ts>
    <user>Dede</user>
    <text>You just can’t have the comma immediately after the newline.</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:05:51.169500</ts>
    <user>Dede</user>
    <text>Put a space in front of it, and elm-format will take over from there.</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:06:14.169800</ts>
    <user>Santina</user>
    <text>Just got it going, for some reason I have to now explicitly tell VSCode about elm-format with `"elm.formatCommand": "./node_modules/.bin/elm-format"`</text>
  </message>
  <message conversation_id="577">
    <ts>2019-02-23T13:06:47.170300</ts>
    <user>Santina</user>
    <text>for some reason that i don't understand, my previous project does not require that.</text>
  </message>
  <message conversation_id="578">
    <ts>2019-02-23T13:26:45.170600</ts>
    <user>Vilma</user>
    <text>does anyone have any idea on how I can solve this: &lt;https://github.com/NoRedInk/elm-json-decode-pipeline/issues/9&gt; ?</text>
  </message>
  <message conversation_id="578">
    <ts>2019-02-23T13:34:39.170700</ts>
    <user>Huong</user>
    <text>I haven't encountered that error yet. Just to be sure - ~/.elm isn't mapped, right?

The edge case I'm a little worried about is having `elm-stuff` from the host VM having to correspond to `~/.elm` on the guest. This shouldn't be a problem is the `elm-stuff` on the host is never touched (i.e. _all_ `elm` interactions happen exclusively on the guest), but you never know.</text>
  </message>
  <message conversation_id="578">
    <ts>2019-02-23T13:35:13.171500</ts>
    <user>Huong</user>
    <text>In other words, does clearing `elm-stuff` on the host (and perhaps `~/.elm` on the guest) help, or is this a persistent issue?</text>
  </message>
  <message conversation_id="578">
    <ts>2019-02-23T13:36:47.173400</ts>
    <user>Nana</user>
    <text>Ah yeah if you have elm-format, I think you can put commas etc. on the beginning of a line, and it'll fix it, but if you don't, you get a compiler error</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T13:54:42.173900</ts>
    <user>Malinda</user>
    <text>Since 0.19 I have issues with auto format on save both in Atom and VS Code</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T13:55:23.174100</ts>
    <user>Malinda</user>
    <text>I just run a batch script once in a while for reformatting all of my files.</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T13:55:41.174300</ts>
    <user>Malinda</user>
    <text>Or sometimes call elm-format from the terminal of Atom</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T13:56:05.174500</ts>
    <user>Malinda</user>
    <text>I'm on Windows 7 though</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T13:58:07.174700</ts>
    <user>Monnie</user>
    <text>I'm on windows 10 and 0.19.. I also had problems. But after changing the "Format On Save Timeout" to 5000ms in vscode settings it has been working on every sngle save for a few months :slightly_smiling_face:</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T13:58:46.174900</ts>
    <user>Malinda</user>
    <text>hmm let me try that</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T14:01:29.175100</ts>
    <user>Malinda</user>
    <text>I don't even see that setting :open_mouth:</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T14:01:38.175300</ts>
    <user>Malinda</user>
    <text>None</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T14:02:34.175700</ts>
    <user>Malinda</user>
    <text>I get this error on saving:</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T14:02:43.175900</ts>
    <user>Malinda</user>
    <text>None</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T14:03:05.176300</ts>
    <user>Monnie</user>
    <text>Here is mine.. not elm format settings.. but vs code settings</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T14:04:29.176700</ts>
    <user>Monnie</user>
    <text>im in vs code... and using elm-format globally installed by npm...</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T14:04:45.176900</ts>
    <user>Malinda</user>
    <text>I installed it globally ofc</text>
  </message>
  <message conversation_id="579">
    <ts>2019-02-23T14:05:11.177100</ts>
    <user>Malinda</user>
    <text>but Atom (and VS code) does not seem to find the executable otherwise but specifying full path</text>
  </message>
  <message conversation_id="580">
    <ts>2019-02-23T14:32:41.178000</ts>
    <user>Charley</user>
    <text>&lt;@Huong&gt; Not so much name-dropping as knowing who to go to for a few more stories/back up on why Elm is the right choice for a plethora of use cases</text>
  </message>
  <message conversation_id="580">
    <ts>2019-02-23T14:33:01.178200</ts>
    <user>Charley</user>
    <text>Showing growth always helps!</text>
  </message>
  <message conversation_id="580">
    <ts>2019-02-23T14:34:18.178400</ts>
    <user>Huong</user>
    <text>Oh, yeah, I didn't mean to use that as a pejorative term - showing that established organizations use Elm is never a bad idea! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="581">
    <ts>2019-02-23T17:29:04.179900</ts>
    <user>Karan</user>
    <text>I'm trying to build the elm compiler and `cabal build` says "can't find source for Elm/PerUserCache"</text>
  </message>
  <message conversation_id="581">
    <ts>2019-02-23T17:29:21.180200</ts>
    <user>Karan</user>
    <text>has anyone run into this?</text>
  </message>
  <message conversation_id="581">
    <ts>2019-02-23T17:30:11.180300</ts>
    <user>Huong</user>
    <text>&lt;#C0VHPC4F3|compiler&gt; is probably a better channel for this kind of question. As a general note - `master` isn't stable - you might have better luck building the 0.19.0 tag</text>
  </message>
  <message conversation_id="581">
    <ts>2019-02-23T17:33:59.180500</ts>
    <user>Karan</user>
    <text>ok, thank you</text>
  </message>
  <message conversation_id="582">
    <ts>2019-02-24T02:11:34.181000</ts>
    <user>Mozella</user>
    <text>I want to publish an elm package</text>
  </message>
  <message conversation_id="582">
    <ts>2019-02-24T02:11:43.181400</ts>
    <user>Mozella</user>
    <text>How should I structure the json?</text>
  </message>
  <message conversation_id="582">
    <ts>2019-02-24T02:11:46.181600</ts>
    <user>Mozella</user>
    <text>is there any guide?</text>
  </message>
  <message conversation_id="582">
    <ts>2019-02-24T02:23:32.181700</ts>
    <user>Lea</user>
    <text>Have you seen this &lt;https://github.com/elm/compiler/blob/master/docs/elm.json/package.md&gt; ?</text>
  </message>
  <message conversation_id="582">
    <ts>2019-02-24T02:51:37.182400</ts>
    <user>Mozella</user>
    <text>Okay, so now I am at the point where it is asking me to tag my release</text>
  </message>
  <message conversation_id="582">
    <ts>2019-02-24T02:52:07.183000</ts>
    <user>Mozella</user>
    <text>I ran the commands that the command line recommended and I see a "release" on github</text>
  </message>
  <message conversation_id="582">
    <ts>2019-02-24T02:56:15.183200</ts>
    <user>Mozella</user>
    <text>aaand I figured it out</text>
  </message>
  <message conversation_id="582">
    <ts>2019-02-24T02:57:26.183400</ts>
    <user>Mozella</user>
    <text>&lt;https://github.com/bowbahdoe/elm-history/releases&gt;</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T03:49:03.185000</ts>
    <user>Lea</user>
    <text>Is this a bug? &lt;https://ellie-app.com/4Pj7WpKzTHKa1&gt; The iframe embedded through the markdown package always reloads if you run any update</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T03:49:45.185500</ts>
    <user>Lea</user>
    <text>Keying the node makes no difference</text>
  </message>
  <message conversation_id="582">
    <ts>2019-02-24T03:50:11.186100</ts>
    <user>Mozella</user>
    <text>&lt;https://package.elm-lang.org/packages/bowbahdoe/elm-history/latest/&gt;</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T03:50:21.186500</ts>
    <user>Lea</user>
    <text>Embedding with `iframe [] []` works fine</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T03:50:22.186600</ts>
    <user>Mozella</user>
    <text>(happy for myself)</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T03:52:33.187500</ts>
    <user>Earlean</user>
    <text>&lt;@Lea&gt; because you're just inserting a string of HTML the virtual DOM doesn't know about it so it can't do the diffing that it would normally do</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T03:58:19.189500</ts>
    <user>Lea</user>
    <text>I expected keying the node to would prevent this behavior. Since Markdown.toHtml returns Html msg, I also expect it to behave like a Virtual Dom node</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T03:58:42.190000</ts>
    <user>Lea</user>
    <text>(I understand why it doesn’t)</text>
  </message>
  <message conversation_id="584">
    <ts>2019-02-24T04:16:30.190800</ts>
    <user>Huong</user>
    <text>Does making it lazy help?</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T04:20:11.191000</ts>
    <user>Lea</user>
    <text>Nope</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T04:22:50.192000</ts>
    <user>Lea</user>
    <text>If I read this correctly, it should also compare the provided String &lt;https://github.com/elm-explorations/markdown/blob/1.0.0/src/Elm/Kernel/Markdown.js#L37&gt;</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T04:28:46.192400</ts>
    <user>Lea</user>
    <text>But Virtual dom ‘custom nodes’ compares the nodes before it compares the diff &lt;https://github.com/elm/virtual-dom/blob/1.0.2/src/Elm/Kernel/VirtualDom.js#L817&gt;</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T04:29:43.192600</ts>
    <user>Lea</user>
    <text>Which will always be true, because of the creation of a new node by `_Markdown_render` &lt;https://github.com/elm-explorations/markdown/blob/1.0.0/src/Elm/Kernel/Markdown.js#L33&gt;</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T04:58:24.193600</ts>
    <user>Huong</user>
    <text>Right. So easy way out - wrapping it in a lazy div :sweat_smile: this doesn't sound intentional, though - probably fair to log a bug on the markdown  repo :thinking_face:</text>
  </message>
  <message conversation_id="583">
    <ts>2019-02-24T05:17:54.193900</ts>
    <user>Lea</user>
    <text>K, I’ll file a bug, thanks for taking a look!</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:22:35.194100</ts>
    <user>Huong</user>
    <text>Hold on, it should work with lazy :neutral_face:</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:22:54.194300</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/elm/virtual-dom/blob/1.0.2/src/Elm/Kernel/VirtualDom.js#L733&gt; which should end up in there</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:24:14.194500</ts>
    <user>Huong</user>
    <text>&lt;https://ellie-app.com/4PkzsFfMLksa1&gt;
&lt;https://ellie-app.com/4PkBNVJsKnka1&gt;</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:24:42.194700</ts>
    <user>Huong</user>
    <text>appears to work, as long as all params are constants (which makes sense, since that's how lazy is supposed to work)</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:25:00.194900</ts>
    <user>Lea</user>
    <text>Ah you’re right</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:26:41.195100</ts>
    <user>Lea</user>
    <text>I did &lt;https://ellie-app.com/4PkDx6XdYq6a1&gt;</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:29:59.195300</ts>
    <user>Huong</user>
    <text>```(Markdown.toHtmlWith
                { defaultOptions | sanitize = False }
                []
            )``` won't evaluate to a referentially equal result every time it runs, though</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:31:33.195500</ts>
    <user>Huong</user>
    <text>in other words, `lazy (fn arg) otherArg` and `lazy2 fn arg otherArg` do different things. Additionally, `{ defaultOptions | sanitize = False }` also evaluates to a new record every time it is evaluated, so that also doesn't quite work</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:33:12.195700</ts>
    <user>Lea</user>
    <text>K cool</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:37:01.195900</ts>
    <user>Lea</user>
    <text>Still file a bug?</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:43:52.196100</ts>
    <user>Huong</user>
    <text>It seems to work the way _I_ would expect it to, but if that doesn't match your expectations, it's still fair to file a bug - perhaps we need to explain how `lazy` and `Markdown.toHtml*` work together better</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:47:46.196300</ts>
    <user>Lea</user>
    <text>A note in the `Markdown` docs might be nice indeed</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:49:13.196600</ts>
    <user>Lea</user>
    <text>I’m always having a hard time figuring out referential equality</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T05:50:12.196800</ts>
    <user>Lea</user>
    <text>Mostly because I never took the time to look it up _and_ understand it :sweat_smile:</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T06:13:28.197000</ts>
    <user>Huong</user>
    <text>Yeah, it's a very weird case. Knowing the implementation of things, it's rather predictable, but I can't think of a very simple guideline that doesn't have a whole bunch of exceptions. Like "expressions evaluate to new values" isn't universally true - `identity foo` evaluates to something that is referentially equal to `foo`. "Only top level values" isn't true either - things could perfectly well come from your model and work just fine. Hm. This is a tough problem :sweat_smile:</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T06:33:34.197400</ts>
    <user>Lea</user>
    <text>Ye, that’s what I’m missing, it’ll might end up being an intuition thing at some point after seeing a lot of cases</text>
  </message>
  <message conversation_id="585">
    <ts>2019-02-24T09:51:24.197800</ts>
    <user>Janiece</user>
    <text>Looks pretty nice! API seems pretty clean and readable</text>
  </message>
  <message conversation_id="586">
    <ts>2019-02-24T09:51:30.198000</ts>
    <user>Janiece</user>
    <text>And :thumbsup: for taking the time to write good docs</text>
  </message>
  <message conversation_id="586">
    <ts>2019-02-24T09:52:10.198200</ts>
    <user>Janiece</user>
    <text>Did you take a look at existing packages like &lt;https://package.elm-lang.org/packages/elm-community/undo-redo/latest/&gt;?</text>
  </message>
  <message conversation_id="587">
    <ts>2019-02-24T12:32:06.201400</ts>
    <user>Moriah</user>
    <text>Hello. I’m encountering some performance problems when running `Browser.Dom.getElement` on about 30-40 elements using `Task.sequence`. It seems like Elm is scheduling all the tasks in the sequence to be run one at a time, one on every animationFrame. Can someone confirm or deny that?</text>
  </message>
  <message conversation_id="587">
    <ts>2019-02-24T12:49:03.202400</ts>
    <user>Donella</user>
    <text>&lt;@Moriah&gt; the documentation says the tasks will be run in order one-by-one</text>
  </message>
  <message conversation_id="587">
    <ts>2019-02-24T12:50:51.203500</ts>
    <user>Moriah</user>
    <text>I’ve read that as well. I just wasn’t sure that it would run them at the speed on 1 task per animationFrame.</text>
  </message>
  <message conversation_id="587">
    <ts>2019-02-24T12:53:50.205200</ts>
    <user>Moriah</user>
    <text>It basically means that for every 60 tasks that sequence I will have to wait an extra second for the resulting `Cmd` to finish, if it turns out that my assumptions are correct.</text>
  </message>
  <message conversation_id="586">
    <ts>2019-02-24T14:51:20.205700</ts>
    <user>Mozella</user>
    <text>The other package named elm-history has a pretty non open-source license
&lt;https://github.com/iodevs/elm-history/blob/1.0.0/LICENSE&gt;</text>
  </message>
  <message conversation_id="586">
    <ts>2019-02-24T14:53:18.205900</ts>
    <user>Mozella</user>
    <text>And that package, while it does do a good deal more than what my package does, exposes the internals of the type</text>
  </message>
  <message conversation_id="586">
    <ts>2019-02-24T14:58:33.206100</ts>
    <user>Mozella</user>
    <text>The benefit of an opaque type here is that i can treat it somewhat like an interface and potentially add optional features like size caps without breaking consumer (my) code</text>
  </message>
  <message conversation_id="586">
    <ts>2019-02-24T15:00:48.206500</ts>
    <user>Mozella</user>
    <text>That being said... I didn't really do my due dilligence</text>
  </message>
  <message conversation_id="586">
    <ts>2019-02-24T15:01:03.206700</ts>
    <user>Mozella</user>
    <text>Egg on my face</text>
  </message>
  <message conversation_id="586">
    <ts>2019-02-24T15:01:51.206900</ts>
    <user>Mozella</user>
    <text>I just saw the other elm-history plugin's restrictive license last night and was kind of... reactionary</text>
  </message>
  <message conversation_id="588">
    <ts>2019-02-24T15:30:37.207300</ts>
    <user>Tamiko</user>
    <text>`elm make` is producing blank html pages, I’m running `0.19`. Anybody else experiencing this? I have no issue running `elm reactor`</text>
  </message>
  <message conversation_id="588">
    <ts>2019-02-24T15:59:25.208200</ts>
    <user>Virgie</user>
    <text>do you have a `main` function? if there is no main, the elm compiler will not produce any output &lt;@Tamiko&gt;</text>
  </message>
  <message conversation_id="589">
    <ts>2019-02-24T21:49:47.213000</ts>
    <user>Earlean</user>
    <text>&lt;@Moriah&gt; `Task.sequence` will run a list of tasks one after another. `Browser.Dom.getElement` gives you a Task that waits for the next animation frame before querying the DOM. The behaviour of `Browser.Dom.getElement` is like that so that you can return it from `update` and have it act on an element that will be in the DOM after the next call to `view`.</text>
  </message>
  <message conversation_id="589">
    <ts>2019-02-24T21:51:12.213900</ts>
    <user>Earlean</user>
    <text>&lt;@Moriah&gt; doing `Browser.Dom.getElement` for 40 elements doesn't seem like a common use case, can you expand on what you're trying to achieve?</text>
  </message>
  <message conversation_id="589">
    <ts>2019-02-25T02:02:18.214300</ts>
    <user>Moriah</user>
    <text>Thank you for your reply. I’m working on a drag-and-drop thing. I use `getElement` to get the positions and dimensions of potential drop targets.</text>
  </message>
  <message conversation_id="589">
    <ts>2019-02-25T02:04:30.214500</ts>
    <user>Moriah</user>
    <text>I managed to work around the problem using ports.</text>
  </message>
  <message conversation_id="590">
    <ts>2019-02-25T04:32:12.216400</ts>
    <user>Elza</user>
    <text>Hello! I published a second version of a package, but it is not listed in the version list. I used `elm bump`, tagged the commit, pushed it and did `elm publish`... What did I do wrong?</text>
  </message>
  <message conversation_id="590">
    <ts>2019-02-25T04:34:01.216900</ts>
    <user>Jin</user>
    <text>Might be cache related. What is the package?</text>
  </message>
  <message conversation_id="590">
    <ts>2019-02-25T04:34:18.217100</ts>
    <user>Elza</user>
    <text>&lt;https://package.elm-lang.org/packages/adauguet/elm-spanned-string&gt;</text>
  </message>
  <message conversation_id="590">
    <ts>2019-02-25T04:34:30.217400</ts>
    <user>Elza</user>
    <text>there should be a `1.0.1`</text>
  </message>
  <message conversation_id="590">
    <ts>2019-02-25T04:34:44.217800</ts>
    <user>Elza</user>
    <text>you can actually see it in the search</text>
  </message>
  <message conversation_id="590">
    <ts>2019-02-25T04:35:11.218200</ts>
    <user>Jin</user>
    <text>I’m seeing `1.0.1` there.</text>
  </message>
  <message conversation_id="590">
    <ts>2019-02-25T04:36:42.218600</ts>
    <user>Elza</user>
    <text>cache-related it was, sorry for asking</text>
  </message>
  <message conversation_id="590">
    <ts>2019-02-25T04:37:39.219500</ts>
    <user>Jin</user>
    <text>This question comes up every now and then. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T07:36:32.222000</ts>
    <user>Emilee</user>
    <text>have any of you people had experience with using entity component systems for "databases"? We need a global datastore in our application that stores "needs". those can be in many different configurations, so it's hard to model the whole system with sum-types (they can be loaded, loading, failed to load, they can be owned or not owned, they can have different types, and, technically, multiple of them....)</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T07:37:03.222800</ts>
    <user>Emilee</user>
    <text>i'm trying to weigh how many guarantees i lose or gain by using this modeling method, vs how easy it is to use for developers</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T07:38:54.223200</ts>
    <user>Emilee</user>
    <text>also, there's the question of how composable selectors on this structure would be</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T07:51:53.223500</ts>
    <user>Maida</user>
    <text>&lt;@Emilee&gt; maybe this talk could be useful: &lt;https://www.youtube.com/watch?v=28OdemxhfbU&gt;</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T07:53:01.224600</ts>
    <user>Emilee</user>
    <text>yep, i know the talk, but it has more to do with relations, not composable types i think. of course those compositions could be modeled as relations, but that's basically what i would do for an ecs^^</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T08:41:12.225700</ts>
    <user>Emilee</user>
    <text>i feel like we have a backend that's radically opposed to strong typing^^' (everything's rdf)</text>
  </message>
  <message conversation_id="592">
    <ts>2019-02-25T09:04:27.229400</ts>
    <user>Iva</user>
    <text>How’s your Norwegian skills? Not directly elm related but this talk discusses using a flat “triple” format over the wire and how to work with it. Might provide some inspiration. &lt;https://vimeo.com/289851906&gt; (if you don’t understand anything you might be able to get some meaning from the slides around 15 mins until 22 mins) </text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T09:05:02.230000</ts>
    <user>Emilee</user>
    <text>ummm.... not^^ but i'll look into it, thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T09:06:03.230200</ts>
    <user>Emilee</user>
    <text>our wire format is rdf, and our frontend so far has been a mashup of jsonld and pseudodefined data, so i guess the topic applies^^</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T10:42:10.231100</ts>
    <user>Danika</user>
    <text>Nothing to add but its cool to hear sem-web things being used in the “real world” </text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T11:34:48.231700</ts>
    <user>Emilee</user>
    <text>well... "real world", we're an industry-oriented research studio</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T11:35:55.233000</ts>
    <user>Emilee</user>
    <text>&lt;http://matchat.org|matchat.org&gt; &amp;lt;&amp;lt; our current proof of concept application, written in angular 1.x and redux.
I'm working on bringing it to elm, which is proving to be quite difficult because of the interplay with angular, and the untyped nature^^</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T11:36:33.233300</ts>
    <user>Danika</user>
    <text>awesome, thanks for the link :slightly_smiling_face:</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T11:36:39.233700</ts>
    <user>Danika</user>
    <text>are you doing any sparql things?</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T11:37:29.234700</ts>
    <user>Emilee</user>
    <text>our backend is. we have some small parts in the frontend, but the js implementations seem quite slow, so our current app state is jsonld which is treated as json, and some other javascript derived data</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T11:38:10.235400</ts>
    <user>Emilee</user>
    <text>but for our application to run entirely in elm i *will* have to create at least an rdf library, maybe with querying capabilities</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T11:39:28.236000</ts>
    <user>Danika</user>
    <text>I TA a semantic web class for my supervisor, I always struggle when students ask my why they should really care</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T11:40:18.236400</ts>
    <user>Emilee</user>
    <text>it's a hard question to answer, because most of the benefits can feel kind of esoteric</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T11:40:33.236900</ts>
    <user>Emilee</user>
    <text>(maybe we should move that conversation to &lt;#C0CJ671HU|random&gt; ^^)</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T11:41:04.237300</ts>
    <user>Danika</user>
    <text>#semanticweb the people demand it!</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T11:52:33.239100</ts>
    <user>Karan</user>
    <text>Looking at `elm-spa-example` I see a lot of type variables being used (compared to what I'm used to in Haskell). Is there a convention or rationale behind this?</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T11:53:33.239500</ts>
    <user>Danika</user>
    <text>I think a lot of haskell code goes out of its way to be incredibly terse or “clever”</text>
  </message>
  <message conversation_id="591">
    <ts>2019-02-25T11:59:28.240300</ts>
    <user>Karan</user>
    <text>Maybe, but why would I not constrain types as much as possible?</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T12:00:59.240700</ts>
    <user>Danika</user>
    <text>can you give an example on elmspa?</text>
  </message>
  <message conversation_id="594">
    <ts>2019-02-25T12:13:52.240900</ts>
    <user>Lea</user>
    <text>Ah you’re right, I didn’t expect it to behave like that. If you don’t mind getting each element individually you could Cmd.batch a list of them &lt;https://ellie-app.com/4PTCnfvTMRda1&gt;</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T12:15:32.241800</ts>
    <user>Karan</user>
    <text>&lt;@Danika&gt; For example here: &lt;https://github.com/rtfeldman/elm-spa-example/blob/c8c3201ec0488f17c1245e1fd2293ba5bc0748d5/src/Api.elm#L138&gt;</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T12:18:04.242300</ts>
    <user>Danika</user>
    <text>I can see why it is like that, but I don’t know enough about Elm to explain to you why that makes sense</text>
  </message>
  <message conversation_id="594">
    <ts>2019-02-25T12:18:27.242800</ts>
    <user>Nana</user>
    <text>I think giving `Model` and `Msg` as concrete types would create a circular dependency between Api and Main</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T12:18:45.243300</ts>
    <user>Danika</user>
    <text>if you look where that is actually used:

```main : Program Value Model Msg
main =
    Api.application Viewer.decoder
        { init = init
        , onUrlChange = ChangedUrl
        , onUrlRequest = ClickedLink
        , subscriptions = subscriptions
        , update = update
        , view = view
        }```

You can see the unbound `model` and `msg` types become concrete</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T12:19:11.243400</ts>
    <user>Nana</user>
    <text>it could ofc. be solved by moving them from Main to their own files, but I guess he didn't want to do that</text>
  </message>
  <message conversation_id="593">
    <ts>2019-02-25T12:22:01.245000</ts>
    <user>Karan</user>
    <text>I saw that. I was just wondering, because `Api.application` is only called once (i.e. the concrete types are known).</text>
  </message>
  <message conversation_id="595">
    <ts>2019-02-25T13:41:52.245700</ts>
    <user>Saran</user>
    <text>is it possible to expose a type alias without exposing the type it's an alias of?</text>
  </message>
  <message conversation_id="595">
    <ts>2019-02-25T13:45:21.246100</ts>
    <user>Virgie</user>
    <text>yes</text>
  </message>
  <message conversation_id="595">
    <ts>2019-02-25T13:45:52.246500</ts>
    <user>Virgie</user>
    <text>often happens when a module exposes an alias for a type defined in an `*.Internal` module</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:10:05.247400</ts>
    <user>Jae</user>
    <text>Hi, I'm getting this exception when running tests ```The dependencies in your elm.json are not compatible.

Did you change them by hand? Try to change it back! It is much better to add
dependencies with elm install or the dependency management tool in elm reactor.```
It happened after I installed some new packages (though not by hand).</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:10:41.247500</ts>
    <user>Jae</user>
    <text>I sort of remember having this error before. Someone was nice and solved it for me but I've since forgotten the solution and the answer is probably past the 10k message limit</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:14:31.247700</ts>
    <user>Lynne</user>
    <text>Try removing your `elm-stuff` folder to start with</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:14:54.247900</ts>
    <user>Lynne</user>
    <text>You don't have separate `elm.json` in your `tests/` directory, do you?</text>
  </message>
  <message conversation_id="597">
    <ts>2019-02-25T14:20:33.248100</ts>
    <user>Kathlyn</user>
    <text>Sure. The point is to improve fullscreen, so you don’t have to work around the nice new API to get a working real world application &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:22:21.248400</ts>
    <user>Huong</user>
    <text>Oh, not disagreeing, merely pointing out options to unblock yourself, and sharing my experience with a workaround</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:24:54.248600</ts>
    <user>Jae</user>
    <text>No, just one elm.json</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:25:45.248900</ts>
    <user>Jae</user>
    <text>Deleting elm-stuff didn't change the error</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:26:08.249100</ts>
    <user>Lynne</user>
    <text>Both good and bad</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:26:22.249300</ts>
    <user>Lynne</user>
    <text>Try this tool: &lt;https://www.markuslaire.com/github/elm-dependencies-analyzer/&gt;</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:26:34.249500</ts>
    <user>Lynne</user>
    <text>It will show if there are conflicting dependencies</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:27:17.249700</ts>
    <user>Lindsey</user>
    <text>worst case scenario is a new elm.json and install each package with elm install</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:27:20.249900</ts>
    <user>Lynne</user>
    <text>If it does not help, then the only (tedious but bullet-proof way) is to remove all deps from `elm.json` and start adding them one-by-one with `elm install`</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:27:34.250100</ts>
    <user>Lynne</user>
    <text>Yep</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:28:46.250400</ts>
    <user>Jae</user>
    <text>`Selected versions have no conflicts.`</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:29:02.250600</ts>
    <user>Lynne</user>
    <text>Well...</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:29:04.250800</ts>
    <user>Jae</user>
    <text>I guess it's the tedious way then!</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:29:09.251000</ts>
    <user>Lynne</user>
    <text>I hope you don't have that many deps :slightly_smiling_face:</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:29:46.251200</ts>
    <user>Jae</user>
    <text>I have a few but I know which commit caused the issue so I only need to look at the packages I installed there</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:29:47.251400</ts>
    <user>Lindsey</user>
    <text>Seems like it would be possible to cook up a shell script to do it semi automatically... maybe one rainy afternoon.</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:29:50.251600</ts>
    <user>Lynne</user>
    <text>Don't forget to clear indirect deps also</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:31:30.251800</ts>
    <user>Jae</user>
    <text>Alright, thanks. I'm going to put it off for now but I'll need to sort that out eventually</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:47:54.252100</ts>
    <user>Jae</user>
    <text>Once I've figured out which package causes the tests to no longer work, do I just have to never use that package?</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:49:10.252300</ts>
    <user>Lynne</user>
    <text>Hopefully, that's just a version conflict</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:49:45.252500</ts>
    <user>Jae</user>
    <text>How do I figure out what the version conflict is if the dependency analyzer says there are no conflicts?</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:49:53.252700</ts>
    <user>Lynne</user>
    <text>If not there are few options: upgrade/degrade other packages or skip using that one, at least until it is upgraded (not necessarily never)</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:51:02.252900</ts>
    <user>Lynne</user>
    <text>Well, I am curious why dependency analyzer says there are no conflicts, but honestly it is not the first time it says this but in fact there is a conflict</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:51:26.253100</ts>
    <user>Lynne</user>
    <text>So hopefully `elm install` will just resolve it for you</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:52:11.253300</ts>
    <user>Lynne</user>
    <text>I can't say that dependency analyzer is 100% reliable unfortunately and it is not official tool</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:53:13.253500</ts>
    <user>Jae</user>
    <text>How do I tell `elm install` which version of a package to use?</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:58:25.253800</ts>
    <user>Lynne</user>
    <text>There is no way to do it, it always installs latest version which is compatible with your other dependencies</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:59:17.254100</ts>
    <user>Jae</user>
    <text>Well, I tried to two possible versions of the test incompatible package and neither worked so I guess I can't use that package anymore.  At least it's not really important</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:59:20.254300</ts>
    <user>Lynne</user>
    <text>You can however try upgrading or degrading a package by manually changing version in `elm.json`</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:59:34.254500</ts>
    <user>Lynne</user>
    <text>Yeah, that may be true</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:59:40.254700</ts>
    <user>Lynne</user>
    <text>What was the package if I may ask?</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T14:59:54.254900</ts>
    <user>Jae</user>
    <text>`noahzgordon/elm-color-extra`</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T15:01:25.255100</ts>
    <user>Lynne</user>
    <text>I don't see anything criminal with it but if removing it helps you resolve your issue, that's great</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T15:01:59.255300</ts>
    <user>Lynne</user>
    <text>What version of `elm-explorations/test` are you using?</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T15:02:21.255500</ts>
    <user>Jae</user>
    <text>1.2.0</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T15:05:53.255700</ts>
    <user>Lynne</user>
    <text>It must be something not related to versions, may be some module names are clashing?</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T15:06:02.255900</ts>
    <user>Lynne</user>
    <text>Could not find proof for it though</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T15:07:55.256100</ts>
    <user>Jae</user>
    <text>Installing `elm-color-extra` installs `elm/regex` and `fredcy/elm-parseint` so it might be something wrong with those instead</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T15:18:29.256300</ts>
    <user>Lynne</user>
    <text>Yeah</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T15:27:54.256500</ts>
    <user>Jae</user>
    <text>I tried creating a new project with elm init and then installing elm-color-extra.  I still got the same error after trying to run tests</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T16:05:48.257100</ts>
    <user>Lynne</user>
    <text>So it may be an answer</text>
  </message>
  <message conversation_id="596">
    <ts>2019-02-25T16:13:34.257400</ts>
    <user>Janiece</user>
    <text>May or may not be relevant: &lt;https://github.com/rtfeldman/node-test-runner/issues/277&gt;</text>
  </message>
  <message conversation_id="598">
    <ts>2019-02-25T21:11:30.259800</ts>
    <user>Raymonde</user>
    <text>Hi folks, I’m implementing a debounce search feature, and encounter a problem that if a previous search response is slow it may override a current search result. Any good ideas to handle this? Thanks.</text>
  </message>
  <message conversation_id="598">
    <ts>2019-02-25T21:33:52.259900</ts>
    <user>Noelle</user>
    <text>There are two packages to make the debouncing. I personally haven’t used them but FYI.
&lt;https://package.elm-lang.org/packages/Gizra/elm-debouncer/latest/&gt;
&lt;https://package.elm-lang.org/packages/jinjor/elm-debounce/latest/&gt;</text>
  </message>
  <message conversation_id="598">
    <ts>2019-02-25T21:35:57.260100</ts>
    <user>Raymonde</user>
    <text>&lt;@Noelle&gt; The debounce functionality is ok, the problem is the response handle logic.</text>
  </message>
  <message conversation_id="598">
    <ts>2019-02-25T21:42:22.260500</ts>
    <user>Earlean</user>
    <text>Lots of ways to add ordering to the responses, you can add a timestamp of the request time and drop responses for earlier requests, or have the response include the value of the request and check it still makes sense</text>
  </message>
  <message conversation_id="599">
    <ts>2019-02-26T06:40:33.265600</ts>
    <user>Karma</user>
    <text>Hello, am working with websockets (0.18). In what cases is the web socket connection with the server closed or restarted?</text>
  </message>
  <message conversation_id="599">
    <ts>2019-02-26T06:43:13.266400</ts>
    <user>Lynne</user>
    <text>For example, when network connection is dropped. Also, server may decide to close connection for whatever reason.</text>
  </message>
  <message conversation_id="599">
    <ts>2019-02-26T06:44:01.266900</ts>
    <user>Lynne</user>
    <text>It just can go wrong at any point in time :slightly_smiling_face:</text>
  </message>
  <message conversation_id="599">
    <ts>2019-02-26T06:54:18.268000</ts>
    <user>Karma</user>
    <text>Good to know, thanks :slightly_smiling_face: Also, does refreshing the page break the connection?</text>
  </message>
  <message conversation_id="599">
    <ts>2019-02-26T07:02:56.268200</ts>
    <user>Lynne</user>
    <text>Definitely</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T08:38:33.269300</ts>
    <user>Leonore</user>
    <text>Has anybody found upgrading to the new http library a bit troublesome? :sweat_smile:</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T08:44:03.270300</ts>
    <user>Karma</user>
    <text>Another web socket related question: I want to send a message from the client to the server every time the connection is started. Is this possible?</text>
  </message>
  <message conversation_id="599">
    <ts>2019-02-26T08:47:55.270500</ts>
    <user>Jin</user>
    <text>Yes, it was somehow harder then switching from Elm 0.18 to Elm 0.19</text>
  </message>
  <message conversation_id="599">
    <ts>2019-02-26T08:48:53.270700</ts>
    <user>Jin</user>
    <text>but mostly because of dependencies</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T08:49:16.270900</ts>
    <user>Karma</user>
    <text>I already have a Cmd action that sends the message but have been having trouble figuring out how to link it to the websocket connection opening :shrug:</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:17:28.271100</ts>
    <user>Lynne</user>
    <text>If I remember correctly Elm's Websocket module queues messages you send if there is no connection and sends them as soon as it is established</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:18:48.271300</ts>
    <user>Lynne</user>
    <text>Ah, you want to send on restarts also</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:19:50.271500</ts>
    <user>Karma</user>
    <text>Yes. The idea is that the first message that I send it a token that the server can validate. So I need to send it every time the connection is restarted</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:20:18.271700</ts>
    <user>Lynne</user>
    <text>You may want using `Websocket.LowLevel` then. `Websocket` does not notify you when opening or reopening happens</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:21:33.271900</ts>
    <user>Karma</user>
    <text>I looked into that library a bit, but what confused me about it was how to make a subscription out of the functions there</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:21:49.272100</ts>
    <user>Lynne</user>
    <text>Though it probably means you would need to provide your own effect module</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:22:01.272300</ts>
    <user>Lynne</user>
    <text>Which is hard, not documented and not supported anymore :slightly_smiling_face:</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:22:45.272500</ts>
    <user>Karma</user>
    <text>Well then, I'll try and find another solution to my problem :stuck_out_tongue:</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:22:45.272700</ts>
    <user>Lynne</user>
    <text>I would say send a "hello" message from server when the connection is opened if you own the backend</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:22:58.272900</ts>
    <user>Lynne</user>
    <text>Then you could react on it in the client requesting a token</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:23:14.273100</ts>
    <user>Karma</user>
    <text>Yes, I do. I was thinking of something along those lines.</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:23:26.273300</ts>
    <user>Karma</user>
    <text>Thank you for your help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:23:32.273500</ts>
    <user>Lynne</user>
    <text>Welcome :slightly_smiling_face:</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:34:16.279900</ts>
    <user>Moshe</user>
    <text>Do you have recommendations on how to handle dropdowns?

If I see it correctly there are currently three packages for 0.19 that provide such functionality. Hence I wondered, if these are what anyone is using OR if everyone is rolling their own OR if most are simply using the standard html `&amp;lt;select&amp;gt;`</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:35:26.280400</ts>
    <user>Carman</user>
    <text>Use the standard HTML `&amp;lt;select&amp;gt;` unless you have a good reason to do something else</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:36:31.281000</ts>
    <user>Moshe</user>
    <text>I suspect “the designer does not like it” is not a sufficiently good reason, right? :smile:</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:38:33.282000</ts>
    <user>Iona</user>
    <text>depending on the supported browsers, the datalist could work</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:38:48.282600</ts>
    <user>Iona</user>
    <text>&lt;https://www.w3schools.com/tags/tag_datalist.asp&gt;</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:39:28.283400</ts>
    <user>Carman</user>
    <text>Well, I guess that's a conversation you need to have with them. Why do they not like the standard `&amp;lt;select&amp;gt;`? Is it just the look and feel? Is there some extra functionality they want (e.g. searchable)? What about accessibility/keyboard support concerns?</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:43:18.286700</ts>
    <user>Moshe</user>
    <text>Well the comment was a little tounge in cheek, sorry :wink: Actually the main problem, most of the times, seems to be additional wishes for the look and feel. The typical request I get is “we need an Icon next to this option”, and I can see how this can be problematic when you have strict rules on corporate identity</text>
  </message>
  <message conversation_id="601">
    <ts>2019-02-26T09:43:49.287000</ts>
    <user>Niesha</user>
    <text>A specific icon, or one of the unicode set?</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:46:23.288200</ts>
    <user>Moshe</user>
    <text>A specific icon, a specific background color for the overlay. There are different scenarios really</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:52:44.288600</ts>
    <user>Carman</user>
    <text>I have a form that needs to:
• auto-save on blur
• run validations server-side and show errors client-side (but don't prevent saving)
• dynamically add an arbitrary number of child forms
• intersperse form fields with some other markup and display-only values that are not part of the form</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:52:52.288900</ts>
    <user>Carman</user>
    <text>What are people's thoughts on &lt;https://package.elm-lang.org/packages/hecrj/composable-form/latest/&gt; for this? I like its approach to building forms but my use-case departs significantly from its defaults. The package provides the ability to add custom fields and behavior although it looks like I may need to do some significant work to meet my needs.</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:52:56.289100</ts>
    <user>Carman</user>
    <text>Alternatively, I'm looking at just building my own form from scratch but I'm afraid I may end up duplicating a lot of the customization work I would have done with the package solution above so I'm questioning if it's worth it. Thoughts? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:57:34.292200</ts>
    <user>Dede</user>
    <text>It's open source?  Clone it into your project and hack it until it fits?</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:58:51.293100</ts>
    <user>Jin</user>
    <text>I really liked playing around with composable-form in its default state, also with custom view functions. But building custom fields was really not that simple. iirc there are plans to improve the experience for that. The motivation to play around with the library was to possibly switch away from a different one. My current stand is to build my own form, pulling out functionality on the way.</text>
  </message>
  <message conversation_id="600">
    <ts>2019-02-26T09:59:49.293200</ts>
    <user>Carman</user>
    <text>The package is built to be extensible. My concern is around whether its worth doing the work to extend versus just rolling my own form since my use-case is so different than normal</text>
  </message>
  <message conversation_id="602">
    <ts>2019-02-26T11:29:56.293800</ts>
    <user>Valeria</user>
    <text>Hello everybody.

We still need speakers for elm europe
&lt;https://checkout.eventlama.com/#/events/elm-europe-2019/cfp&gt;
if you have something interesting (and diverse) to say, don’t hesitate to apply !
We are especially interested by “real world” feedback
as in :
How is it to do full time elm in an organization
How did you handle complexity in a team where elm is not totally sold to all the team
How do you manage big elm projects
Is agile still necessary in an elm powered company
How did we manage to do … in elm</text>
  </message>
  <message conversation_id="602">
    <ts>2019-02-26T11:30:27.293900</ts>
    <user>Lorilee</user>
    <text>I like to keep a request index on the model. Whenever I send a new search, I bump the index on the model and curry that new index onto the response Msg. It looks something like this:

```
Search query -&amp;gt;
    ({ model | searchRequestIndex  = model.searchRequestIndex + 1,
    , Api.Search query (SearchResults model.searchRequestIndex + 1)
    )
SearchResults requestIndex results -&amp;gt;
    if requestIndex /= model.searchRequestIndex then
        (model, Cmd.none)
    else
        ( { model |  results = results}, Cmd.none)
```</text>
  </message>
  <message conversation_id="602">
    <ts>2019-02-26T12:15:01.294600</ts>
    <user>Valeria</user>
    <text>And … one little thing :
we just released an early bird workshop on elm graphql with Dillon Kearns !

&lt;http://2019.elmeurope.org/#tickets&gt;</text>
  </message>
  <message conversation_id="603">
    <ts>2019-02-26T12:56:56.296700</ts>
    <user>Dorsey</user>
    <text>Hey! For two of my projects I need a spring-based animation system. I remember there was some talk about it last year, but I couldn't find any package for that. Am I just bad at searching?</text>
  </message>
  <message conversation_id="603">
    <ts>2019-02-26T12:58:01.297900</ts>
    <user>Dorsey</user>
    <text>Yesterday I actually rolled my own and I'm considering publishing it, but if there is a prior work available, then maybe I should not duplicate it.</text>
  </message>
  <message conversation_id="603">
    <ts>2019-02-26T13:05:25.298100</ts>
    <user>Dede</user>
    <text>&lt;https://package.elm-lang.org/packages/mdgriffith/elm-style-animation/latest/&gt;</text>
  </message>
  <message conversation_id="603">
    <ts>2019-02-26T13:05:37.298400</ts>
    <user>Dede</user>
    <text>Uses springs internally.</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:02:01.299800</ts>
    <user>Salley</user>
    <text>Is it not possible to upgrade a package? I have a project running elm/http at 1.0.0 and I want to upgrade that to 2.0.0. I see no commands for updating when running `elm install --help`. I seem to vaguely remember having upgraded packages in the past…</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:04:36.300300</ts>
    <user>Dede</user>
    <text>Manually remove it from elm.json and reinstall it with `elm install`</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:05:12.300600</ts>
    <user>Salley</user>
    <text>Then I get ```dev // 19:58:50 🍔  elm install elm/http
Here is my plan:
  
  Add:
    elm/http    1.0.0

Would you like me to update your elm.json accordingly? [Y/n]: ```</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:06:11.301600</ts>
    <user>Hoyt</user>
    <text>is there another package with an explicit dependency on 1.0.0 ?</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:06:22.301900</ts>
    <user>Dorsey</user>
    <text>Yes. Try removing `elm/core`.</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:06:31.302200</ts>
    <user>Dorsey</user>
    <text>And installing it again.</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:06:42.302500</ts>
    <user>Dorsey</user>
    <text>Possibly some other, like `elm/json`.</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:08:17.303500</ts>
    <user>Salley</user>
    <text>Yeah it seems to be one of my dependencies that are requiring and older version of elm/http. Any way to check which one?</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:08:27.303900</ts>
    <user>Hoyt</user>
    <text>You can also look in the lock file to get a sense</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:13:08.304200</ts>
    <user>Claretta</user>
    <text>This tool is helpful for finding conflicts: &lt;https://github.com/malaire/elm-dependencies-analyzer&gt;</text>
  </message>
  <message conversation_id="604">
    <ts>2019-02-26T14:13:43.304700</ts>
    <user>Salley</user>
    <text>Ah, turns out it was elm-http-builder that was requiring elm-http version 1</text>
  </message>
  <message conversation_id="605">
    <ts>2019-02-26T14:28:19.304800</ts>
    <user>Bebe</user>
    <text>Is it ok to send multiple cfps?</text>
  </message>
  <message conversation_id="606">
    <ts>2019-02-26T14:54:51.306200</ts>
    <user>Dorsey</user>
    <text>To publish a package, do I have to host my source code on GitHub or can I use other git servers? I'm specifically thinking about GitLab.</text>
  </message>
  <message conversation_id="606">
    <ts>2019-02-26T14:55:55.306300</ts>
    <user>Bebe</user>
    <text>I think it is just GitHub right now</text>
  </message>
  <message conversation_id="607">
    <ts>2019-02-26T15:47:19.307000</ts>
    <user>Kris</user>
    <text>Are there any up-to-date elm vs react benchmarks?</text>
  </message>
  <message conversation_id="607">
    <ts>2019-02-26T18:17:53.307400</ts>
    <user>Valeria</user>
    <text>Yep</text>
  </message>
  <message conversation_id="607">
    <ts>2019-02-26T18:18:01.307800</ts>
    <user>Valeria</user>
    <text>As much as you want</text>
  </message>
  <message conversation_id="607">
    <ts>2019-02-26T18:18:59.309000</ts>
    <user>Valeria</user>
    <text>Please concentrate on pure elm and no js (as much as possible)</text>
  </message>
  <message conversation_id="607">
    <ts>2019-02-26T19:12:23.309300</ts>
    <user>Carrol</user>
    <text>For us was the change in the Error type, it drops important information about errors</text>
  </message>
  <message conversation_id="608">
    <ts>2019-02-26T21:26:16.310200</ts>
    <user>Grady</user>
    <text>does anyone know what the preferred SVG library for 0.19 is? Since it seems that elm-lang/svg/2.0.0 does not work with 0.19</text>
  </message>
  <message conversation_id="608">
    <ts>2019-02-26T21:35:53.310500</ts>
    <user>Earlean</user>
    <text>&lt;@Grady&gt; &lt;https://package.elm-lang.org/packages/elm/svg/latest/&gt;</text>
  </message>
  <message conversation_id="608">
    <ts>2019-02-26T21:36:13.311000</ts>
    <user>Earlean</user>
    <text>all the `elm-lang/` packages moved to `elm/` in 0.19</text>
  </message>
  <message conversation_id="608">
    <ts>2019-02-26T21:43:55.311600</ts>
    <user>Grady</user>
    <text>ah makes sense. thanks &lt;@Earlean&gt;!</text>
  </message>
  <message conversation_id="609">
    <ts>2019-02-27T01:09:10.314900</ts>
    <user>Raymonde</user>
    <text>That’s nice, thanks</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T03:32:19.321000</ts>
    <user>Shaina</user>
    <text>I have a built a EnhancedTextarea module that is basically a Html.textarea with some additional functionality. One of them is to do some special processing in Javascript when copying and pasting, for which purpose I have a `Json.Decode.Value -&amp;gt; Cmd msg)` port for sending pasted data out to javascript and a `(Json.Decode.Value -&amp;gt; msg) -&amp;gt; Sub msg` port to get the processed data back. This is all great, except for when I have multiple `EnhancedTextarea`s on one page. After sending data out through the first port, I have no way of deciding which textarea was actually pasted into when the subscription is triggered. I don't want to mess with the Json.Decode.Value too much, because I have to run `event.clipboardData.getData("text/html")` on it on the javascript file (which it seems like I cannot do on the elm side).</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T03:32:48.321700</ts>
    <user>Shaina</user>
    <text>Is there a good way of specifying which of my multiple textareas the pasted data should actually go into?</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T03:33:45.322800</ts>
    <user>Shaina</user>
    <text>Is it possible to turn my ports into `(Json.Decode.Value, TextareaId) -&amp;gt; Cmd msg`, etc. and how would the handling look on the javascript file (I've had a hard time getting tuples in ports to work in the past)?</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T03:44:31.324400</ts>
    <user>Huong</user>
    <text>You could extract the id of the target on the JS side, or use the tuple solution (which becomes an array on the JS side)</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T03:44:56.324800</ts>
    <user>Nana</user>
    <text>&lt;@Shaina&gt; when I make http calls, I partially apply the return message with an id like:
```
Http.get
    { url = "&lt;https://elm-lang.org/assets/public-opinion.txt&gt;"
    , expect = Http.expectString (GotStuff myId)
    }
```</text>
  </message>
  <message conversation_id="611">
    <ts>2019-02-27T03:45:07.325000</ts>
    <user>Nana</user>
    <text>I think you could do the same?</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T03:46:06.326000</ts>
    <user>Huong</user>
    <text>It's a little harder with ports because there's no (direct) correspondence between the "request" and "response"</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T03:46:33.326700</ts>
    <user>Shaina</user>
    <text>Exactly. But I think it may be possible to extract the id like you suggested, &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T03:46:59.327000</ts>
    <user>Nana</user>
    <text>oh you're right, forgot about that :thinking_face:</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T04:07:27.327600</ts>
    <user>Shaina</user>
    <text>&lt;@Huong&gt; Using the event.target.id worked beautifully.</text>
  </message>
  <message conversation_id="610">
    <ts>2019-02-27T04:07:32.327800</ts>
    <user>Shaina</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T04:51:01.329200</ts>
    <user>Selena</user>
    <text>I'm trying to upgrade my project to 0.19, but I used Bogdanp/elm-time package which is not upgraded yet. What are the best alternatives on 0.19?</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T04:52:31.329300</ts>
    <user>Elza</user>
    <text>Have you considered `elm/time`? &lt;https://package.elm-lang.org/packages/elm/time/latest/&gt;</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T04:55:45.329700</ts>
    <user>Lynne</user>
    <text>There are also few alternatives mentioned at the fork of `elm-community/elm-time` (which is now deprecated): &lt;https://package.elm-lang.org/packages/isaacseymour/deprecated-time/latest&gt;</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:02:56.329900</ts>
    <user>Selena</user>
    <text>&lt;@Elza&gt; I think we tried it at first but Bogdans package worked better for us, but now I will sure reconsider it. Thank you</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:03:39.330100</ts>
    <user>Selena</user>
    <text>&lt;@Lynne&gt; None of the links is working for me :thinking_face:</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:04:24.330300</ts>
    <user>Lynne</user>
    <text>Not for me either...</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:04:42.330500</ts>
    <user>Lynne</user>
    <text>It is weird but if you search by package name you will definitely find them at least on Github</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:04:53.330700</ts>
    <user>Lynne</user>
    <text>For example, &lt;https://github.com/justinmimbs/date&gt;</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:06:02.330900</ts>
    <user>Selena</user>
    <text>Thank you, I'll surely check them out</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:06:21.331100</ts>
    <user>Leonore</user>
    <text>&lt;@Carrol&gt; makes you handle it yourself with ```expectStringResponse```</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:09:14.331300</ts>
    <user>Leonore</user>
    <text>There are many ways that made it difficult for me. No more toTask, changing every request I had since I can't prepare and send them afterwards like how it used to be. And some other things...</text>
  </message>
  <message conversation_id="613">
    <ts>2019-02-27T05:25:24.331500</ts>
    <user>Lynne</user>
    <text>Actually, `Bogdanp/elm-time` is a fork of `elm-community/elm-time`. If you don't want to change how you work with time now, using Isaac's fork can be enough, perhaps.</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:27:42.331700</ts>
    <user>Selena</user>
    <text>Yep I did that and I seems like its ok solution, but I think i will need to find another solution in the future. Thank you.</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T05:28:35.332700</ts>
    <user>Selena</user>
    <text>If you are using Bogdanp/elm-time and you want to upgrade your project to 0.19 this package &lt;https://package.elm-lang.org/packages/isaacseymour/deprecated-time/latest&gt; may be a good temporary solution.</text>
  </message>
  <message conversation_id="613">
    <ts>2019-02-27T05:43:29.333300</ts>
    <user>Fonda</user>
    <text>Has anyone implemented GDRP cookie consent logic to enable/disable Google Analytics in an ELM application?</text>
  </message>
  <message conversation_id="613">
    <ts>2019-02-27T10:03:00.334000</ts>
    <user>Reuben</user>
    <text>Good news! &lt;@Kristle&gt; has written a .DOT parser and published as package: &lt;https://github.com/erkal/kite/issues/4#issuecomment-467639803&gt;</text>
  </message>
  <message conversation_id="612">
    <ts>2019-02-27T10:21:58.335100</ts>
    <user>Kristle</user>
    <text>:smile: i still have a few problems to solve! once i figure those out, i'll write some docs and truly publish it to the package manager</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T12:59:07.336900</ts>
    <user>Karrie</user>
    <text>hello everyone!
I have a basic question about `Json.Decode`
I need to decode a field from a `json` that can be a string (`"theValue"`) or a list (`["value_1", "value_1"]`)</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T12:59:24.337300</ts>
    <user>Karrie</user>
    <text>how can I do that? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T13:00:03.337700</ts>
    <user>Carman</user>
    <text>You'll want to use `Decode.oneOf`</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T13:01:45.339600</ts>
    <user>Carman</user>
    <text>e.g.
```
oneOrMany : Decoder (List String)
oneOrMany =
  Decode.oneOf [ singleItem, manyItems ]

singleItem : Decoder (List String)
singleItem =
  Decode.map (\str -&amp;gt; [ str ]) Decode.string

manyItems : Decoder (List String)
manyItems =
  Decode.list Decode.string
```</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T13:02:29.340300</ts>
    <user>Karrie</user>
    <text>what if the value in elm is just `List (String)` and not `List (String) | String` ?</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T13:02:53.340800</ts>
    <user>Carman</user>
    <text>That's what the `Decode.map (\str -&amp;gt; [ str ])` part handles</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T13:03:04.341300</ts>
    <user>Karrie</user>
    <text>oh yes! :smile:</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T13:03:05.341400</ts>
    <user>Carman</user>
    <text>if there is a single string, it will wrap it in a list :slightly_smiling_face:</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T13:03:17.341800</ts>
    <user>Karrie</user>
    <text>thanks a lot &lt;@Carman&gt;! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="614">
    <ts>2019-02-27T13:03:59.342000</ts>
    <user>Johna</user>
    <text>Go with less dependencies I guess? </text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T14:04:05.343000</ts>
    <user>Karrie</user>
    <text>is there a way I can decode the value `1` (Int) to `"1"` (String) ?</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T14:05:05.343800</ts>
    <user>Carman</user>
    <text>```
intAsString : Decoder String
intAsString =
  Decode.map String.fromInt &lt;http://Decode.int|Decode.int&gt;
```</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T14:05:57.344600</ts>
    <user>Carman</user>
    <text>You can think of `Decode.map` as a way to apply some post-processing to the value decoded</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T14:07:48.346400</ts>
    <user>Kris</user>
    <text>Or if you want to *only* decode `1` as a string:
```
&lt;http://Decode.int|Decode.int&gt;
  |&amp;gt; Decode.andThen (\int -&amp;gt; if int == 1 then Decode.succeed 1 else Decode.fail "wrong number" )
  |&amp;gt; Decode.map String.fromInt
```</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T14:08:22.346600</ts>
    <user>Kris</user>
    <text>You can collapse the `map` inside the `andThen`, but it's the same</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T14:11:22.347000</ts>
    <user>Karrie</user>
    <text>love you!</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T14:11:32.347200</ts>
    <user>Karrie</user>
    <text>hahah</text>
  </message>
  <message conversation_id="616">
    <ts>2019-02-27T15:31:03.349600</ts>
    <user>Gabriele</user>
    <text>On json decode found that this afternoon &lt;https://github.com/zwilias/elm-demystify-decoders&gt;</text>
  </message>
  <message conversation_id="616">
    <ts>2019-02-27T15:33:24.352200</ts>
    <user>Buffy</user>
    <text>Anyone here know of or have any opinions or company conventions on when to track the state of a page via the URL? It’s sort of along the lines of the problem domain of SPA’s &amp;amp; SEO but more about linkability.
I’m trying to put together an Elm talk for my company with a tongue in cheek title “Using Elm to solve all your problems” or “I got `undefined is not a function` problems but Elm ain’t one!”
My coworker was interested if there was a convention for “tracking resource/object state” via the url so links would take you to the correct state in a SPA.</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T15:38:12.352400</ts>
    <user>Simon</user>
    <text>we do some of this</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T15:38:16.352600</ts>
    <user>Simon</user>
    <text>(just beginning)_</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T15:38:37.353100</ts>
    <user>Simon</user>
    <text>in general changing page state by way of URL is “most correct” (in b2b case at least) - because people like to open in new windows etc</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T15:38:55.353500</ts>
    <user>Simon</user>
    <text>we have some common params emerging (Sorts, filters etc) &amp;amp; pages obviously have specific ones</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T15:39:09.353900</ts>
    <user>Simon</user>
    <text>we have our Route’s take a record of the appropriate type and the URL parser populates accordingly</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T15:39:36.354600</ts>
    <user>Simon</user>
    <text>conversely, the “toRoute” function takes optional params, if not provided, comes up w/ sensible defaults (usually no query params) otherwise populates</text>
  </message>
  <message conversation_id="615">
    <ts>2019-02-27T15:39:51.355100</ts>
    <user>Simon</user>
    <text>and the pages themselves continuously update URL accordingly as page state changes</text>
  </message>
  <message conversation_id="617">
    <ts>2019-02-27T21:31:26.356500</ts>
    <user>Brittney</user>
    <text>Any examples on of really simple but good Elm in use?</text>
  </message>
  <message conversation_id="618">
    <ts>2019-02-27T21:39:01.356800</ts>
    <user>Lizabeth</user>
    <text>I'm a fan of &lt;https://package.elm-lang.org&gt;</text>
  </message>
  <message conversation_id="619">
    <ts>2019-02-28T00:35:04.001500</ts>
    <user>Floy</user>
    <text>hey there,

did someone ever modeled the filters? I am looking for a filter model that supports
- multiple values selected per filter
- tracking which values are in fact selected in order to get them displayed on the top of all filters</text>
  </message>
  <message conversation_id="620">
    <ts>2019-02-28T01:39:46.001600</ts>
    <user>Lea</user>
    <text>Have you seen this one? &lt;https://www.youtube.com/watch?v=XpDsk374LDE&gt;</text>
  </message>
  <message conversation_id="620">
    <ts>2019-02-28T01:41:25.001800</ts>
    <user>Lea</user>
    <text>I think the examples used throughout the talk will be useful for designing something you need</text>
  </message>
  <message conversation_id="621">
    <ts>2019-02-28T03:22:44.002800</ts>
    <user>Adrian</user>
    <text>is there a way to show only packages compatible with 0.19?</text>
  </message>
  <message conversation_id="621">
    <ts>2019-02-28T03:22:50.003000</ts>
    <user>Adrian</user>
    <text>on &lt;http://packages.elm-lang.org|packages.elm-lang.org&gt;</text>
  </message>
  <message conversation_id="621">
    <ts>2019-02-28T03:24:07.004400</ts>
    <user>Earlean</user>
    <text>&lt;@Amee&gt; if you go to &lt;http://packages.elm-lang.org|packages.elm-lang.org&gt; the list of packages are all only 0.19 packages</text>
  </message>
  <message conversation_id="621">
    <ts>2019-02-28T03:24:44.005200</ts>
    <user>Earlean</user>
    <text>You can only find 0.18 package via Google searches or accessing their page directly</text>
  </message>
  <message conversation_id="621">
    <ts>2019-02-28T03:37:09.005400</ts>
    <user>Adrian</user>
    <text>oh :slightly_smiling_face:</text>
  </message>
  <message conversation_id="621">
    <ts>2019-02-28T03:39:32.005700</ts>
    <user>Velia</user>
    <text>Or here for those that have not migrated yet:
&lt;https://dmy.github.io/elm-0.18-packages/&gt;</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:25:56.008000</ts>
    <user>Lucius</user>
    <text>I find `Html.Lazy` (and `Element.Lazy`) hard to use in some situations, because they rely on referential equality. I would like an alternative with deep (value-based) equality checks on the input arguments instead. Is that possible?</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:27:52.009000</ts>
    <user>Yolando</user>
    <text>can anyone explain this?

``` 
minus3 a = a -3
```
gives
```
&amp;lt;function&amp;gt; : (number -&amp;gt; a) -&amp;gt; a
```

But ``` minus3 a = a - 3 ``` gives ```&amp;lt;function&amp;gt; : number -&amp;gt; number```.</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:28:05.009200</ts>
    <user>Yolando</user>
    <text>in `elm repl`</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:29:02.009900</ts>
    <user>Lewis</user>
    <text>`-3` is a number, so `a` must be a function of type `number -&amp;gt; a` since you apply the number `-3` to (the function) `a`.</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:29:20.010500</ts>
    <user>Lewis</user>
    <text>but `a - 3` is the result of subtracting 3 from `a`, so `a` must be a number in that case.</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:31:24.011100</ts>
    <user>Lewis</user>
    <text>```
&amp;gt; 3
3 : number
&amp;gt; -3
-3 : number
```</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:35:01.012000</ts>
    <user>Velia</user>
    <text>Yep, the first one might be clearer written as:
```
applyToNeg3 f  = f (-3)
```</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:36:07.012100</ts>
    <user>Yolando</user>
    <text>What's shadowing?
```
 &amp;gt; a bb = bb + 4
&amp;lt;function&amp;gt; : number -&amp;gt; number

&amp;gt; minus3 aa = a -3
&amp;lt;function&amp;gt; : a -&amp;gt; number

&amp;gt; minus3 5
1 : number

&amp;gt; minus4 a = a -4

-- SHADOWING --------------------------------------------------------------- elm

The name `a` is first defined here:

3| a bb = bb + 4
   ^
But then it is defined AGAIN over here:

5| minus4 a = a -4
          ^
Think of a more helpful name for one of them and you should be all set!

Note: Linters advise against shadowing, so Elm makes “best practices” the
default. Read &amp;lt;https://elm-lang.org/0.19.0/shadowing&amp;gt; for more details on this choice.
```</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:36:48.012400</ts>
    <user>Yolando</user>
    <text>I tried making `a` a function.

But `a` cannot be taken as input to another function `minus4`.</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:37:04.012600</ts>
    <user>Yolando</user>
    <text>i.e. I cannot write `minus4 a = a -4`.</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:37:23.012800</ts>
    <user>Yolando</user>
    <text>Thanks mate!</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:38:56.013000</ts>
    <user>Yolando</user>
    <text>can you please have a look at this?

&amp;lt;
(&lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1551346567012100?thread_ts=1551346142.009900&amp;amp;cid=C0CJ3SBBM&gt;)&amp;gt;</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:39:22.013300</ts>
    <user>Velia</user>
    <text>shadowing is when you redefine a function or constant already defined previously.</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:39:35.013500</ts>
    <user>Lewis</user>
    <text>```
&amp;gt; myFunction x = x + 4
&amp;lt;function&amp;gt; : number -&amp;gt; number
&amp;gt; minus4 a = a -4
&amp;lt;function&amp;gt; : (number -&amp;gt; a) -&amp;gt; a
&amp;gt; minus4 myFunction
0 : number
```</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:40:14.013700</ts>
    <user>Velia</user>
    <text>`a` is already a function defined as:
```
a bb = bb + 4
```
so you cannot use it again as a parameter in
```
minus4 a = a -4
```</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:40:41.013900</ts>
    <user>Velia</user>
    <text>you can do `:reset` to clear previous definitions in `elm repl`. See `:help`.</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:41:24.014100</ts>
    <user>Lewis</user>
    <text>_shadowing_ means that you “hide” another name. since you already had the name `a` in your scope, when you also declare a parameter named `a` for a function, the outer `a` will be hidden (“shadowed”) within that function.</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:43:27.014400</ts>
    <user>Lynne</user>
    <text>No, it is not possible. The point of `Html.Lazy` is to avoid calculations when input does not change. Doing value-based equality partially defeats the purpose. I think it is more beneficial to put effort into refactoring so using `Html.Lazy` won't be hard.</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:46:11.014700</ts>
    <user>Sherill</user>
    <text>hi everyone</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:46:51.015000</ts>
    <user>Sherill</user>
    <text>i'm using this library (&lt;https://package.elm-lang.org/packages/ryannhg/date-format/2.3.0/&gt;) to format dates</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:47:05.015500</ts>
    <user>Sherill</user>
    <text>and I'm having difficulties in passing a custom timezone for formatting purposes</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:47:29.016100</ts>
    <user>Sherill</user>
    <text>it seems like the only zones we can have using the official `Time` package are `utc` and the local one (using the task `now`)</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:47:35.016400</ts>
    <user>Sherill</user>
    <text>am I getting this correctly? thanks</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:48:41.016600</ts>
    <user>Lynne</user>
    <text>That is correct &lt;@Sherill&gt;</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:49:10.017400</ts>
    <user>Lynne</user>
    <text>You can build your own `Zone` objects using `Time.customZone` however</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:49:45.017800</ts>
    <user>Sherill</user>
    <text>okay so for example, if I am developing a finance webapp that shows different times/dates from different timezones all over the world</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:50:07.018300</ts>
    <user>Sherill</user>
    <text>I have to develop a `customZone`, which seems intended for package developers only</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:50:08.018500</ts>
    <user>Sherill</user>
    <text>am I right?</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:50:44.019200</ts>
    <user>Lynne</user>
    <text>It is not that you have to develop a `customZone` it is that Elm currently does not have built-in support for such use case</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:51:24.020100</ts>
    <user>Lynne</user>
    <text>You can however use &lt;https://package.elm-lang.org/packages/isaacseymour/deprecated-time/latest&gt; until an official package appears</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:51:33.020300</ts>
    <user>Huong</user>
    <text>&lt;https://package.elm-lang.org/packages/justinmimbs/timezone-data/latest/&gt;</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:51:52.020600</ts>
    <user>Lynne</user>
    <text>Oh great, I did not know about it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:52:39.021100</ts>
    <user>Huong</user>
    <text>It's (predictably) rather large, though, but it also lists alternatives :slightly_smiling_face:</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:53:44.021900</ts>
    <user>Lynne</user>
    <text>I think if one wants playing with different time zones there is no alternative to loading IANA db (be it this package or something like moment-tz). Or is there extended support in JS for such cases?</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:57:54.022100</ts>
    <user>Huong</user>
    <text>There are a few things in the proposal stage, but I don't think the TC39 committee have committed to anything yet</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T04:59:19.022300</ts>
    <user>Yolando</user>
    <text>oh. Okay. Thanks!</text>
  </message>
  <message conversation_id="622">
    <ts>2019-02-28T05:06:46.022600</ts>
    <user>Lucius</user>
    <text>Ok, thank you! I've already started refactoring :slightly_smiling_face:</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T05:56:37.024000</ts>
    <user>Dorsey</user>
    <text>Hey! I'm trying to preview docs, as described here: &lt;https://elm-doc-preview.netlify.com/&gt; . I'm running `elm make --docs=docs.json src/Spring.elm` and the output is `Success! Compiled 1 module.`, but I can't find the `docs.json` file anywhere. Am I missing something?</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T06:02:48.024700</ts>
    <user>Dorsey</user>
    <text>Oh, wait. I think I'm missing the docs markup. Silly me.</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T06:03:59.025000</ts>
    <user>Huong</user>
    <text>Assuming this is a package:
- add the module to the exposed-modules field in your elm.json
- add docs (elm will complain if you don't :wink: )
- `elm make --docs=docs.json` should do the trick, it's intelligent enough to pick up the exposed modules</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T06:04:59.025200</ts>
    <user>Dorsey</user>
    <text>Aha. So I can't export docs for application?</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T06:26:49.025400</ts>
    <user>Velia</user>
    <text>Unfortunately not yet.
```
$ elm make --help
...
    --docs=&amp;lt;json-file&amp;gt;
        Generate a JSON file of documentation for a package. Eventually it will
        be possible to preview docs with `reactor` because it is quite hard to
        deal with these JSON files directly.
```
Note the *`for a package`*.

Also see this:
&lt;https://github.com/elm/compiler/issues/1835#issuecomment-440080525&gt;</text>
  </message>
  <message conversation_id="624">
    <ts>2019-02-28T08:02:04.028200</ts>
    <user>Leonore</user>
    <text>Hey all! What do you think would be the advantage of using a `Request` instead of a `Task` when making Http requests? You can chain, map tasks much easier.</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:03:09.028700</ts>
    <user>Huong</user>
    <text>The latest incarnation of `elm/http` did away with the `Request` type :slightly_smiling_face: &lt;https://package.elm-lang.org/packages/elm/http/latest/Http&gt;</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:04:39.029100</ts>
    <user>Leonore</user>
    <text>Ok sure but you can still create a `request` instead of a `task`</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:05:32.029500</ts>
    <user>Huong</user>
    <text>Well, you can either create a `Cmd` or a `Task`</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:06:16.030600</ts>
    <user>Huong</user>
    <text>The advantage being that most requests have no benefit from going through the extra step of being a `Task` first, since they need to be executed eventually</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:07:22.031000</ts>
    <user>Leonore</user>
    <text>I guess I don't understand why that is an advantage</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:11:13.034100</ts>
    <user>Huong</user>
    <text>Let's make sure we're on the same page, though. The current API allows (very straightforwardly) to create a simple request to get/post/whatever something over HTTP by means of a `Cmd msg`. Sometimes, more complex scenarios are required, where requests need to be chained. For that scenario, it also allows creating a lower level `Task x a`. Does that make sense?</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:11:41.034300</ts>
    <user>Leonore</user>
    <text>Yes</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:12:44.035900</ts>
    <user>Huong</user>
    <text>Alright, so can you re-frame your question with that information in mind? I'm having a hard time understanding what the question means, right now :sweat_smile:</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:19:44.041300</ts>
    <user>Leonore</user>
    <text>Haha. Well, ok an example might make more sense. Let's say I have a request that grabs some element `Item` depending on an `id`. Some parts of the code I know what the `id` is so I just use that. In some other cases I have to grab the `ids` from another request and then sequence the requests to grab each `Item`. I can only do that with `task`s. Now, I have an `Api` module that contains all the get/post etc. There, I have to add new ones just for the tasks and write `Resolver`s just for them instead of `Expect`s. My question was that what if I just scrap that and use tasks for everything? What are the reasons not to do that if any? Note that I have to write some type of `expect` anyways because we also lose data on the errors with the new api.</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:29:58.047600</ts>
    <user>Huong</user>
    <text>It's quite possible that for your use-case, using `Tasks` for all requests and converting to `Cmd` as required is more convenient. In my experience, chaining requests isn't a very common requirement (it sounds like the API isn't really making it easy to work with it :sweat_smile: ), so I definitely see the advantage in the "make the simple things easy, make complex things possible" approach that was used for the 2.0.0 version of the library. The main difference between a `Resolver` and an `Expect` (in the lower level interface you have to use if you need the body from a failed request) is that you have to provide the `(Result x a -&amp;gt; msg)` when setting up the `Expect`, while you only supply that same function to `Task.attempt` when dealing with a `Resolver`. So the building blocks are the same, the difference is in where you need to supply them</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:31:16.048900</ts>
    <user>Leonore</user>
    <text>Yes, but there are also some other cases like maybe you want to make the call after some delay.</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:31:20.049100</ts>
    <user>Leonore</user>
    <text>Then you need a Task again</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:31:51.050100</ts>
    <user>Leonore</user>
    <text>Thanks, I was just wondering if there was an advantage to using the `request`s</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:32:31.051100</ts>
    <user>Leonore</user>
    <text>Upgrading to 2.0.0 increased the code for me :sweat_smile:</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:32:37.051300</ts>
    <user>Huong</user>
    <text>Yeah, or using 2 messages, for people who prefer to stick to `Cmd`'s. Fair question, though!</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:34:25.053400</ts>
    <user>Huong</user>
    <text>I think you may be able to refactor that quite a bit by sharing the `(Response String -&amp;gt; Result x a)` functions, and setting up some higher level helper functions for constructing your requests as tasks or as commands as you see fit. I'll be honest, I haven't upgraded our primary project to elm/http@2.x yet, because I know it'll be quite a bit of work :smile:</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:37:57.053600</ts>
    <user>Leonore</user>
    <text>Yeah, fair enough</text>
  </message>
  <message conversation_id="623">
    <ts>2019-02-28T08:38:04.053800</ts>
    <user>Leonore</user>
    <text>:smile:</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:53:48.054700</ts>
    <user>Yang</user>
    <text>hey everybody. Im confused about the polimorfic type of the error here:
`</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:53:49.054900</ts>
    <user>Yang</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/time/latest/Time#here&gt;</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:54:04.055100</ts>
    <user>Yang</user>
    <text>it sais: `here : Task x Zone`</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:54:13.055500</ts>
    <user>Yang</user>
    <text>i want to know exactly what x is</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:54:27.056100</ts>
    <user>Yang</user>
    <text>such that in my Msg i have: TimeZoneFailed x</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:54:31.056300</ts>
    <user>Kris</user>
    <text>It's polymorphic because it can't fail</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:54:32.056400</ts>
    <user>Yang</user>
    <text>where x is not polimorfic</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:54:42.056700</ts>
    <user>Yang</user>
    <text>hmm..</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:54:43.056800</ts>
    <user>Kris</user>
    <text>You don't need to handle a failure</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:55:04.057300</ts>
    <user>Kris</user>
    <text>You can use &lt;https://package.elm-lang.org/packages/elm/core/latest/Task#perform&gt; for that</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:55:11.057500</ts>
    <user>Yang</user>
    <text>`Time.here
|&amp;gt; Task.attempt (\result -&amp;gt;
                case result of
                  Ok timeZone -&amp;gt;
                    TimeZoneSuceeded timeZone
                  Err error -&amp;gt;
                    TimeZoneError error
              )`</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:55:22.057800</ts>
    <user>Yang</user>
    <text>aha ok</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:55:25.058100</ts>
    <user>Yang</user>
    <text>so is like never</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:55:29.058400</ts>
    <user>Kris</user>
    <text>Yep</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:56:02.059200</ts>
    <user>Kris</user>
    <text>As an analogy, `res : Result x Int` means the same thing, that it can't be an `Err`</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:57:08.059700</ts>
    <user>Yang</user>
    <text>im gonna test it but i think it will not compile since `x` is not `Never`</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:57:29.060200</ts>
    <user>Yang</user>
    <text>it supposed to be a Never such that it mapps the type asked by Task.attempt</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:57:32.060500</ts>
    <user>Yang</user>
    <text>i think</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T10:59:31.061200</ts>
    <user>Kris</user>
    <text>Well, it's polymorphic, so you can specialise the type variable to whatever you want</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T11:00:03.062000</ts>
    <user>Kris</user>
    <text>I.e, ```myHere : Task Never Time
myHere = Time.here``` should compile just fine</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T11:00:34.062500</ts>
    <user>Yang</user>
    <text>aha so hmm.. ok we are going form general to specific that why. Ok thanks for explaining :smile:</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T11:00:38.062700</ts>
    <user>Yang</user>
    <text>:hugging_face:</text>
  </message>
  <message conversation_id="625">
    <ts>2019-02-28T11:01:03.062900</ts>
    <user>Kris</user>
    <text>No problem!</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T11:57:07.065300</ts>
    <user>Jae</user>
    <text>Hi, is there a reason why it's not possible to do the following?
```
someConstantValue = 5

foo a = 
    case a of
        someConstantValue -&amp;gt; "5"
        _ -&amp;gt; ""
```
I'm wondering if there is some theoretical reason behind disallowing this or if it's just low priority to add it.</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T11:58:37.066600</ts>
    <user>Kris</user>
    <text>Adding it in general cases means you can't check for exhaustiveness</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T11:59:19.068100</ts>
    <user>Jae</user>
    <text>I'm referring to just the cases where the function is a compile time constant value though</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T11:59:25.068300</ts>
    <user>Kris</user>
    <text>because of stuff like
```
foo a b =
  case (a, b) of
    (x, x) -&amp;gt; ..
```</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T11:59:26.068400</ts>
    <user>Shondra</user>
    <text>also you'd need some way to disambiguate if you mean binding `a` to `someConstantValue` or having it equal to `someConstantValue`</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:00:00.068800</ts>
    <user>Shondra</user>
    <text>(syntactically)</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:00:18.069500</ts>
    <user>Jae</user>
    <text>Ah, I understand. Yeah that makes sense</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:00:31.069900</ts>
    <user>Kris</user>
    <text>Yeah, there's no reason for not allowing that for compile time stuff, other than it being ugly</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:01:01.070300</ts>
    <user>Shondra</user>
    <text>erlang/elixir have that feature, they use the `^` operator</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:01:52.071200</ts>
    <user>Shondra</user>
    <text>`case x of ^y` means if x equals y, but then again, in erlang/elixir there is no exhaustive checking</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:02:51.072800</ts>
    <user>Kris</user>
    <text>You can do it in haskell with template haskell
```
someQ = ... something equivalent to 5...

case x of
  $(someQ) -&amp;gt; "5"
```</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:03:17.073300</ts>
    <user>Kris</user>
    <text>(TemplateHaskell is Haskell's compile time macro system)</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:03:53.074100</ts>
    <user>Jae</user>
    <text>I understand the desire to minimize the amount of syntax but right now I wish I had something like that so that I can reuse the same constant string in multiple case statements to reduce the risk of typos</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:04:56.074700</ts>
    <user>Carman</user>
    <text>Would it make sense to use `if ... then ... else` ?</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:05:00.074800</ts>
    <user>Kris</user>
    <text>Yeah I can sympathize</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:05:12.075300</ts>
    <user>Kris</user>
    <text>Perhaps you can factor that out in some other way</text>
  </message>
  <message conversation_id="626">
    <ts>2019-02-28T12:05:48.076000</ts>
    <user>Jae</user>
    <text>&lt;@Carman&gt; That's a good point. In this instance I can do that. Thanks!</text>
  </message>
  <message conversation_id="627">
    <ts>2019-02-28T12:47:25.079500</ts>
    <user>Elvis</user>
    <text>Hey there -- I'm a bit disappointed that the built in elm/browser and elm/html mouse events don't decode the various fields available on the JS event and am considering which package to use as an alternative. Is there one folks here prefer or recommend? I think I'm leaning towards &lt;https://github.com/mpizenberg/elm-pointer-events&gt;</text>
  </message>
  <message conversation_id="628">
    <ts>2019-02-28T14:14:09.079700</ts>
    <user>Paula</user>
    <text>Haskell has another way to do this: the PatternSynonyms extension. See &lt;https://ocharles.org.uk/posts/2014-12-03-pattern-synonyms.html&gt;</text>
  </message>
  <message conversation_id="628">
    <ts>2019-02-28T14:20:04.080000</ts>
    <user>Paula</user>
    <text>So you could write:
```
someConstant = 5
pattern SomeConstant = someConstant

case x of
   SomeConstant -&amp;gt; whatever
```</text>
  </message>
  <message conversation_id="628">
    <ts>2019-02-28T14:29:15.080600</ts>
    <user>Kris</user>
    <text>Ah, true, I’d forgotten about those. They’re great </text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:34:55.084000</ts>
    <user>Dayna</user>
    <text>There is something that has been bothering me for a long time, is there a way to model my Elm app as a state machine so that the compiler can know that the app is already in some state and I can skip checking for impossible states? For example: (1) an action can be dispatched only if the user presses a button, (2) that button is shown only if the data has been loaded from the server, (3) therefore I don't have to check if the data is loading in the update for that action. I know doing that in Elm is probably impossible but I'm really interested in learning about tools that enable that.</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:39:43.086000</ts>
    <user>Carman</user>
    <text>It's tricky if your system is asynchronous like Elm. Consider the following scenario:
1. A user clicks a button when the app is in state `A`. This fires a (slow) HTTP request in the background
2. While the request is happening, the user clicks another button, transitioning the app to state `B`
3. The HTTP request finally completes, triggering a message</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:40:44.087000</ts>
    <user>Carman</user>
    <text>Normally you'd only expect the message to come in when the app is in state `A` but because messages are asynchronous it could definitely come in during state `B` (or `C`, etc)</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:41:49.087800</ts>
    <user>Carman</user>
    <text>I think that in a state machine with asynchronous events, any message _could_ happen in any state</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:42:59.089700</ts>
    <user>Dayna</user>
    <text>Well if modelling such state transitions was possible then surely you could model the possible transitions that can happen during loading of the request</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:43:21.090200</ts>
    <user>Alleen</user>
    <text>if your `Model` is an enum you could do something like

```
case (model, msg) of
    (ModelStateOne stateOne, MsgOne) -&amp;gt;
        -- handle this case
        (model, Cmd.none)

    _ -&amp;gt;
        (model, Cmd.none)
```

it’s not as clean as you’re hoping, but it could work</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:43:37.090400</ts>
    <user>Alleen</user>
    <text>enum =&amp;gt; custom type</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:43:42.090600</ts>
    <user>Alleen</user>
    <text>i’m too used to Rust right now</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:44:38.091800</ts>
    <user>Dayna</user>
    <text>Sure, but I'm more interested in a way to model the transitions upfront and then have the compiler force me to prove that the model is in the correct state (request loaded etc)</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:49:12.096400</ts>
    <user>Dayna</user>
    <text>The only practical solution I can think of right now is to put the button click message inside the model and when the request is loaded to partially apply the response data to the message so that when the view renders the response: (1) view is forced to pattern match on the response to extract the message it should send and (2) the update will also get the response data from the message, not the model and it will be confirmed to exist. This is all very theoretical and hacky, of course, but I can see myself playing with the idea</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:49:45.097400</ts>
    <user>Nana</user>
    <text>Right, so the issue is that you have two values - model and msg - and you need to combine their types in some way :thinking_face:</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:56:52.101700</ts>
    <user>Dayna</user>
    <text>The more I think about it, the better it sounds :smile: I'd imagine a model with
`article : WebData (Article, { editArticle : Msg })` where the editArticle message constructor is actually `Article -&amp;gt; Msg` but the update function will partially apply the data when it's returned from the server. The view will pattern match on the article in the model to extract the message for the edit button and the update will grab the article by pattern matching the message.</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T15:59:04.103400</ts>
    <user>Leoma</user>
    <text>So, if your model only represents legal states, and you write a transition, you can’t possibly have a problem.
You can’t write a transition that accepts an illegal state, or creates one.
Can you tell us more about the problems you’re solving and why you focused on this idea of a state machine?</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T16:01:10.105800</ts>
    <user>Dayna</user>
    <text>The problem is that 90% of the code I write (and I imagine most boring CRUD apps are like that) is requesting data, showing stuff on the screen and sending requests when the user presses something. On every `XButtonClicked` message I have to pattern match on the request to get the data and since the request could be loading, I have to add a branch like in &lt;@Alleen&gt;’s example</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T16:03:41.108900</ts>
    <user>Nana</user>
    <text>&lt;@Dayna&gt; you could get the data from the view like `onClick (DoStuff loadedData)` but I think that can cause some concurrency issues?</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T16:04:32.109800</ts>
    <user>Dayna</user>
    <text>That's also a way to do it, but I think the theoretical API I showed above is a bit more reliable and also it doesn't involve the view knowing what data the update needs</text>
  </message>
  <message conversation_id="629">
    <ts>2019-02-28T16:16:11.110500</ts>
    <user>Paula</user>
    <text>Seems it'd be nice if there were an easy generic way to escape variables in patterns though, to say that they should be evaluated rather than bound.</text>
  </message>
  <message conversation_id="630">
    <ts>2019-03-01T02:15:00.119000</ts>
    <user>Valeria</user>
    <text>&lt;@Dayna&gt; you could also use websockets and subscribe to graphql queries :)</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:20:29.120100</ts>
    <user>Deane</user>
    <text>How do I make this code typecheck?
```
type alias Foo = { hello : Int }

updateFoo : Foo -&amp;gt; Int -&amp;gt; Foo
updateFoo foo num = { foo | hello = num }

type Things =
    Good Foo
    | Bad Foo

makeUpdater : Things -&amp;gt; Int -&amp;gt; (a -&amp;gt; Int -&amp;gt; a) -&amp;gt; Things
makeUpdater things newNum updater =
    case things of
       Good foo 
         -&amp;gt; updater foo newNum
       Bad foo
         -&amp;gt; things
```</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:20:48.120400</ts>
    <user>Deane</user>
    <text>The compiler tells me this:
```
The 1st argument to `updater` is not what I expect:

35|          -&amp;gt; updater foo newNum
                        ^^^
This `foo` value is a:

    Foo

But `updater` needs the 1st argument to be:

    a
```</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:21:06.120700</ts>
    <user>Deane</user>
    <text>But updater IS being used correctly, no?</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:25:43.121200</ts>
    <user>Lynne</user>
    <text>&lt;@Deane&gt; `type` is not the same as `type alias`</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:26:33.122000</ts>
    <user>Lynne</user>
    <text>You have defined new type and given it a `Maybe` constructor (shadowing the one imported implicitly)</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:28:09.123200</ts>
    <user>Lynne</user>
    <text>Also, even if you used `type alias` it would not work because you would be returning `Foo` but `makeUpdater` says it should be `Maybe Foo`</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:28:38.123800</ts>
    <user>Deane</user>
    <text>right, my example doesn't demonstrate the issue I thought it did</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:28:49.124100</ts>
    <user>Deane</user>
    <text>I'll try to come up with another one</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:30:29.125200</ts>
    <user>Selene</user>
    <text>anyone got experience with an elm SPA and googles crawler?
I am seeing the following error in the console: `Uncaught SyntaxError: Unexpected token ,`
Would be nice if i could rule out elm as the problem here</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:31:31.125900</ts>
    <user>Deane</user>
    <text>&lt;@Lynne&gt; I've "corrected" the example to show the right error</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:34:20.126700</ts>
    <user>Lynne</user>
    <text>&lt;@Deane&gt; I pointed to the problem in my last statement :slightly_smiling_face: You return `Foo` but `makeUpdater` says it should be `Things` (either `Good Foo` or `Bad Foo`)</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:35:17.127400</ts>
    <user>Lynne</user>
    <text>So you should have written, for example, `Good &amp;lt;| updater foo newNum` in your first branch</text>
  </message>
  <message conversation_id="631">
    <ts>2019-03-01T03:37:41.129300</ts>
    <user>Lynne</user>
    <text>And I think it still won't compile because `a` is too generic in your case and compiler will force you changing signature of `updater` to `(Foo -&amp;gt; Int -&amp;gt; Foo)`. If you want a generic signature you should write something like:
```
type Things a 
  = Good a
  | Bad a

makeUpdater : Things a -&amp;gt; Int -&amp;gt; (a -&amp;gt; Int -&amp;gt; a) -&amp;gt; Things a
```</text>
  </message>
  <message conversation_id="632">
    <ts>2019-03-01T04:04:43.129600</ts>
    <user>Gale</user>
    <text>I agree with &lt;@Johna&gt; - if you are asking the question... roll your own. In my experience, extensible means trying to fit too many use cases. Is usually better to do exactly what you need.</text>
  </message>
  <message conversation_id="632">
    <ts>2019-03-01T04:07:43.129900</ts>
    <user>Yolando</user>
    <text>Thank you !</text>
  </message>
  <message conversation_id="632">
    <ts>2019-03-01T04:11:56.130100</ts>
    <user>Johna</user>
    <text>:point_up:</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:52:08.132900</ts>
    <user>Daysi</user>
    <text>Hi. I currently trying to upgrade from 0.18 to 0.19 and ran into a package dependency thing. I used elm-upgrade for the job and now I swapped the packages which don't support the new elm (sortable-data-tables and date-format) manually for their new forks:
"evancz/elm-sortable-table": "1.0.1 &amp;lt;= v &amp;lt; 2.0.0", -&amp;gt; "billstclair/elm-sortable-table": "1.1.1 &amp;lt;= v &amp;lt; 2.0.0",
"mgold/elm-date-format": "1.6.0 &amp;lt;= v &amp;lt; 2.0.0" -&amp;gt; "ryannhg/date-format": "1.6.0 &amp;lt;= v &amp;lt; 2.0.0"</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:54:57.133600</ts>
    <user>Daysi</user>
    <text>now I'm stuck in this situation:</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:55:40.134600</ts>
    <user>Daysi</user>
    <text>so elm-upgrade says "dependencies are fine", `elm make` says "dependencies are not good"</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:56:00.134900</ts>
    <user>Daysi</user>
    <text>can someone point me in the right direction?</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:56:09.135300</ts>
    <user>Daysi</user>
    <text>Help is appreciated</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:56:25.136000</ts>
    <user>Jin</user>
    <text>&lt;https://www.markuslaire.com/github/elm-dependencies-analyzer/&gt; is a tool to help you work out dependency issues</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:56:41.136400</ts>
    <user>Deane</user>
    <text>&lt;@Lynne&gt; yes, you're correct when you say "And I think it still won't compile because `a` is too generic in your case and compiler will force you changing signature of `updater` to `(Foo -&amp;gt; Int -&amp;gt; Foo)`"</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:57:29.137000</ts>
    <user>Deane</user>
    <text>And yes looks like the solution is basically that `Things` will become `Things a`</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:57:30.137200</ts>
    <user>Deane</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:58:10.137400</ts>
    <user>Jin</user>
    <text>elm-upgrade will only check that your dependencies are Elm 0.19 ready, afaik. Elm will check if the dependency constraints fit.</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:58:21.137700</ts>
    <user>Lynne</user>
    <text>You are welcome &lt;@Deane&gt;</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:58:36.137800</ts>
    <user>Daysi</user>
    <text>thanks! but the tool says "Only application elm.json is supported, not package elm.json.
If you would find it useful to also support package elm.json,
please open an issue at GitHub repository." when I upload my elm.json</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:59:32.138000</ts>
    <user>Daysi</user>
    <text>I thought elm-upgrade automatically upgraded the file to the correct structure but maybe there is an error?</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:59:33.138200</ts>
    <user>Jin</user>
    <text>You have to put in the elm.json of the full application, not of one of the depemdencies.</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:59:41.138400</ts>
    <user>Daysi</user>
    <text>I did</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T04:59:52.138600</ts>
    <user>Jin</user>
    <text>maybe, yes. your elm.json must be of type application</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T05:00:10.138800</ts>
    <user>Jin</user>
    <text>and your versions there must be fixed, no ranges</text>
  </message>
  <message conversation_id="633">
    <ts>2019-03-01T05:00:36.139000</ts>
    <user>Velia</user>
    <text>If nothing helps, remove all dependencies from your `elm.json` and install them again. Not ideal but not that long.</text>
  </message>
  <message conversation_id="634">
    <ts>2019-03-01T05:41:00.144300</ts>
    <user>Tawnya</user>
    <text>Hey beautiful people. I have the task at hand of given a sentence in a string, get all urls in the sentence.
I found out that elm/Url parser accepts things like &lt;http://word&gt; as valid urls, which doesn't work for us.

In writing a Url parser I arrived at a point where I have a big list of domain extension names (.com, .org, .gov) and need to match against that.
I'd like to do it without backtracking to keep things fast, so I'm thinking of building a *prefix tree* out of my list and will create my parser out of that.

Is there a better way to do the matching against the list? If not, could anyone recommend a library to build prefix trees? The rluiten/trie doesn't seem to allow the mapping from Trie -&amp;gt; Parser that I need.</text>
  </message>
  <message conversation_id="634">
    <ts>2019-03-01T06:06:45.145200</ts>
    <user>Lynne</user>
    <text>&lt;@Tawnya&gt; Is not `Parser.oneOf [keyword ".com", keyword ".org", keyword ".gov"]` sufficient?</text>
  </message>
  <message conversation_id="634">
    <ts>2019-03-01T06:10:53.146400</ts>
    <user>Tawnya</user>
    <text>But from what I understand `Parser.oneOf [ keyword ".com",  keyword ".&lt;http://co.uk|co.uk&gt;" ]` would fail for `.&lt;http://co.uk|co.uk&gt;` values</text>
  </message>
  <message conversation_id="634">
    <ts>2019-03-01T06:11:02.146600</ts>
    <user>Tawnya</user>
    <text>Unless I used backtracking.</text>
  </message>
  <message conversation_id="634">
    <ts>2019-03-01T06:11:16.146800</ts>
    <user>Tawnya</user>
    <text>Is that right?</text>
  </message>
  <message conversation_id="634">
    <ts>2019-03-01T06:13:40.147600</ts>
    <user>Lynne</user>
    <text>Not sure, why would it? .com and .&lt;http://co.uk|co.uk&gt; don't have a common "superstring"</text>
  </message>
  <message conversation_id="634">
    <ts>2019-03-01T06:14:01.148000</ts>
    <user>Lynne</user>
    <text>Meaning there is no string for which both .com and .&lt;http://co.uk|co.uk&gt; are substrings</text>
  </message>
  <message conversation_id="634">
    <ts>2019-03-01T06:16:35.148800</ts>
    <user>Lynne</user>
    <text>From what I see from `Parser.Advanced.keyword`'s definition, it does not progress if there is no match, so no backtracking is needed</text>
  </message>
  <message conversation_id="634">
    <ts>2019-03-01T06:24:50.149100</ts>
    <user>Tawnya</user>
    <text>:thumbsup:  Nice. Thanks!</text>
  </message>
  <message conversation_id="635">
    <ts>2019-03-01T08:07:40.150800</ts>
    <user>Donya</user>
    <text>Hello everyone! I have an image that I am loading with `img [ src "/images/myImage.png"] []`. When I `Browser.Navigation.pushUrl` for a new url, the link breaks.  Why might this be the case?</text>
  </message>
  <message conversation_id="635">
    <ts>2019-03-01T08:10:04.151100</ts>
    <user>Donya</user>
    <text>ah, nm, it started working all of a sudden. strange!</text>
  </message>
  <message conversation_id="636">
    <ts>2019-03-01T08:45:56.152500</ts>
    <user>Dorsey</user>
    <text>Hey! I'm trying to publish my package, but I'm getting this: ```
I will now verify that everything is in order...

  ● Found README.md
  ● Found LICENSE
  ● All packages start at version 1.0.0
  ✗ Version 1.0.0 is not tagged on GitHub!

-- NO TAG ----------------------------------------------------------------------

Packages must be tagged in git, but I cannot find a 1.0.0 tag.

These tags make it possible to find this specific version on GitHub.
To tag the most recent commit and push it to GitHub, run this:

    git tag -a 1.0.0 -m "new release"
    git push origin 1.0.0

The -m flag is for a helpful message. Try to make it more informative!
``` The tag is there (&lt;https://github.com/tad-lispy/elm-springs/releases/tag/1.0.0&gt;) so what's going on?</text>
  </message>
  <message conversation_id="636">
    <ts>2019-03-01T08:49:20.153400</ts>
    <user>Virgie</user>
    <text>I believe this is some sort of caching issue with the github api.</text>
  </message>
  <message conversation_id="636">
    <ts>2019-03-01T08:52:08.153700</ts>
    <user>Dorsey</user>
    <text>Shall I just try again later?</text>
  </message>
  <message conversation_id="636">
    <ts>2019-03-01T08:55:29.154300</ts>
    <user>Virgie</user>
    <text>try that first, you can also force untag and then tag again</text>
  </message>
  <message conversation_id="636">
    <ts>2019-03-01T09:06:01.155000</ts>
    <user>Daysi</user>
    <text>i use 0.19 to `elm build` a module and it tells me</text>
  </message>
  <message conversation_id="637">
    <ts>2019-03-01T09:06:40.155900</ts>
    <user>Daysi</user>
    <text>can one not use explicit imports of that kind anymore?</text>
  </message>
  <message conversation_id="636">
    <ts>2019-03-01T09:08:36.158100</ts>
    <user>Daysi</user>
    <text>Elm told me to write `import Bla exposing (Blubb(..))` instead of `(Blubb(Foo))` just before that. I corrected it but now Elm says something isn't right in an Elm package that should work ... So I wanted to ask.</text>
  </message>
  <message conversation_id="636">
    <ts>2019-03-01T09:09:16.158600</ts>
    <user>Virgie</user>
    <text>in 0.19 you either import all variants/constructors, or none of them.</text>
  </message>
  <message conversation_id="636">
    <ts>2019-03-01T09:09:47.159300</ts>
    <user>Virgie</user>
    <text>this makes sense if you pattern match on a value of the custom type: you need all constructors to make the pattern match exhaustive</text>
  </message>
  <message conversation_id="636">
    <ts>2019-03-01T09:10:17.159800</ts>
    <user>Virgie</user>
    <text>on the other hand it is now a little harder to see where a name comes from</text>
  </message>
  <message conversation_id="638">
    <ts>2019-03-01T09:48:14.161500</ts>
    <user>Toni</user>
    <text>Hello folks, I was trying to write a `port` and did not write it correctly I guess, so the compiler told me :
```
Hint: Ports are not a traditional FFI for calling JS functions directly. They
need a different mindset! Read &amp;lt;https://elm-lang.org/0.19.0/ports&amp;gt; to learn how
to use ports effectively.
```
But the page looks empty to me. Is it just me or ?
Thank you :slightly_smiling_face:</text>
  </message>
  <message conversation_id="638">
    <ts>2019-03-01T09:49:11.161900</ts>
    <user>Carman</user>
    <text>There are several links in the compiler hints that are broken :disappointed:</text>
  </message>
  <message conversation_id="638">
    <ts>2019-03-01T09:49:27.162500</ts>
    <user>Carman</user>
    <text>Here's the official guide page on ports: &lt;https://guide.elm-lang.org/interop/ports.html&gt;</text>
  </message>
  <message conversation_id="638">
    <ts>2019-03-01T09:49:36.162800</ts>
    <user>Toni</user>
    <text>oh, sorry to hear that, can I open an issue or help in some way ?</text>
  </message>
  <message conversation_id="638">
    <ts>2019-03-01T09:49:51.163000</ts>
    <user>Toni</user>
    <text>thanks for the link</text>
  </message>
  <message conversation_id="638">
    <ts>2019-03-01T09:55:23.163500</ts>
    <user>Carman</user>
    <text>Hmm looking at the repo it looks like it's present but empty :thinking_face: &lt;https://github.com/elm/elm-lang.org/blob/master/src/pages/0.19.0/ports.elm&gt;</text>
  </message>
  <message conversation_id="638">
    <ts>2019-03-01T10:01:46.163800</ts>
    <user>Nana</user>
    <text>&lt;@Toni&gt; here's a basic example :slightly_smiling_face:
&lt;https://ellie-app.com/4HH7pySpmpVa1&gt;</text>
  </message>
  <message conversation_id="638">
    <ts>2019-03-01T10:02:31.164300</ts>
    <user>Toni</user>
    <text>Thank you ! I was just missing the `port` declaration on top of my module :slightly_smiling_face:</text>
  </message>
  <message conversation_id="638">
    <ts>2019-03-01T10:38:25.166000</ts>
    <user>Toni</user>
    <text>the issue already exists, actually : &lt;https://github.com/elm/elm-lang.org/issues/798&gt;</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:38:38.166100</ts>
    <user>Dorsey</user>
    <text>Hey, I'm still trying to publish. I've waited long and even deleted and re-created the GitHub repo, but it is still saying that the tag is not there. Can it be some local cache?</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:43:19.166500</ts>
    <user>Dorsey</user>
    <text>Nah, I just tried running it from a container and it's the same.</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:45:00.167300</ts>
    <user>Daysi</user>
    <text>can someone point me to an in-dept explaination of the elm.json? &lt;https://github.com/elm/compiler/blob/master/docs/elm.json/application.md&gt; is not enough for me</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:45:55.168000</ts>
    <user>Mindy</user>
    <text>what are you missing ?</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:46:37.169100</ts>
    <user>Mindy</user>
    <text>because there isn't anything more to elm.json than this and the &lt;https://github.com/elm/compiler/blob/master/docs/elm.json/package.md&gt; version</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:47:35.170100</ts>
    <user>Daysi</user>
    <text>why?
A: I get "module not found" errors when `elm make`ing all Elm-apps for my big, multipage app. The "source-directories" in my elm.json are just like in the old elm-package.json. But now the compiler doesn't find modules anymore ...</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:48:15.170300</ts>
    <user>Dorsey</user>
    <text>Aw, silly me. The repository name did not match package name!</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:48:32.170500</ts>
    <user>Daysi</user>
    <text>None</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:49:07.170900</ts>
    <user>Daysi</user>
    <text>"source-directories": [
        "app/fas_ui",
        "app/fas_ui/demo"
    ],</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:50:10.172400</ts>
    <user>Daysi</user>
    <text>so it should just work. After all Elm starts to compile files in the `app/fas_ui` directory but doesn't find modules which live in the same directory and subdirectory.</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:51:16.173500</ts>
    <user>Dorsey</user>
    <text>I think the message from `elm publish` could be improved and say something like `no repository by this name on &lt;http://github.com|github.com&gt;`.</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:51:31.174200</ts>
    <user>Mindy</user>
    <text>Do those directories directly contain your elm files ?</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:51:38.174700</ts>
    <user>Daysi</user>
    <text>does Elm try to look not in the project root but takes the node_modules/.bin/elm as root and looks for node_modules/.bin/elm/app/fas_ui  or something?</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:51:54.175100</ts>
    <user>Mindy</user>
    <text>Maybe you should put `app/fas_ui/src/elm` in your `source-directories`</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:51:56.175200</ts>
    <user>Daysi</user>
    <text>the elm files are in subdirectories</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:52:04.175500</ts>
    <user>Daysi</user>
    <text>of these directories</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:53:02.176000</ts>
    <user>Mindy</user>
    <text>I think you should put the whole path up to the topmost elm module</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:54:21.176200</ts>
    <user>Daysi</user>
    <text>that changed the error message at least :smile:</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:55:22.176400</ts>
    <user>Daysi</user>
    <text>now it doesn't find a module which lives in a symlinked directory (we do translations this way by symlinking to the different language directories and building for every language)</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:56:04.176700</ts>
    <user>Daysi</user>
    <text>None</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:56:53.177500</ts>
    <user>Daysi</user>
    <text>..../elm/I18n is a symlink to a folder</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T10:57:42.178000</ts>
    <user>Daysi</user>
    <text>so maybe I have to adjust the bash `find` command in `node_modules/.bin/elm make $(find app/fas_ui/src/elm/Fas/Apps -name '*.elm' -type f)`</text>
  </message>
  <message conversation_id="639">
    <ts>2019-03-01T11:00:33.178300</ts>
    <user>Daysi</user>
    <text>no idea though how to  do that</text>
  </message>
  <message conversation_id="640">
    <ts>2019-03-01T11:01:15.179200</ts>
    <user>Daysi</user>
    <text>isn't there an easy way to say "hey elm: you see that folder? Find all apps in there and bundle them individually into another folder."</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T11:59:49.179900</ts>
    <user>Buffy</user>
    <text>So I just had a random stupid idea… but has anyone seen this sort of thing before or are there good / bad reasons to structure code like this?
&lt;https://ellie-app.com/4RGFp2Snr8ca1&gt;</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:05:36.181400</ts>
    <user>Buffy</user>
    <text>Yeh update just becomes function application :confused: &lt;https://ellie-app.com/4RGJFvfGbzSa1&gt; ???</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:06:02.181900</ts>
    <user>Buffy</user>
    <text>Someone tell me this is stupid before I go and build an app like this, kek.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:07:21.182700</ts>
    <user>Dorsey</user>
    <text>Why would you do that? What's the intended benefit?</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:07:26.183100</ts>
    <user>Nana</user>
    <text>&lt;@Buffy&gt; yeah I had that idea too and people told me it was bad :sweat_smile:</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:08:18.183200</ts>
    <user>Nana</user>
    <text>The benefit would be reduced boilerplate I think</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:09:16.183500</ts>
    <user>Dorsey</user>
    <text>Well, IMO the readability of the code is very much reduced that way. This is of course subjective, but the impression is strong on me.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:09:40.183800</ts>
    <user>Buffy</user>
    <text>No good reason, the idea just popped into my head last night and I was just curious.
I watched this… and was curious.
&lt;https://www.youtube.com/watch?v=jVeGoqyq5Fs&gt;</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:10:11.184000</ts>
    <user>Rosalee</user>
    <text>What about this: &lt;https://ellie-app.com/4RGMXYWs5gka1&gt;</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:11:36.184200</ts>
    <user>Buffy</user>
    <text>It’s sort of like how in elm-ui, there used to be a “Seperation” of “styles” and “layout”, but after a while mdgriffith decided against the separation and moved toward co-locating, with a nicer api, styles and layout? Or something?</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:11:53.184400</ts>
    <user>Buffy</user>
    <text>&lt;@Rosalee&gt; did you see the second link I posted?
&lt;https://ellie-app.com/4RGJFvfGbzSa1&gt;</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:13:18.184600</ts>
    <user>Buffy</user>
    <text>I’m just wondering what sorts of issues might crop up from colocating business logic and views.
Seems very anti SOC but I’m curious if I’ve been brainwashed by OOP to think a certain way and actually it might be better for some things?</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:13:58.184800</ts>
    <user>Buffy</user>
    <text>&lt;@Dorsey&gt; heard.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:15:09.185000</ts>
    <user>Rosalee</user>
    <text>I like it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:16:34.185200</ts>
    <user>Buffy</user>
    <text>Not sure I do… but I’d be curious to see what it looks like a little bigger…</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:18:27.186100</ts>
    <user>Buffy</user>
    <text>Nice thing about MSG being a union is you can do different things based on the type, but you could still do that here…
I’m just not sure how confusing it’d be having business logic mixed in with the views…
Like the Elm compiler would still be nice to work with but I’d see business logic issues colocated with view logic issues?</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:19:03.187500</ts>
    <user>Buffy</user>
    <text>I’m wondering if anyone who knew elm before like v0.16 could chime in on this, I have to imagine this sort of thing is something people would’ve already tried?</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:19:14.187600</ts>
    <user>Dede</user>
    <text>Two problems to look out for:
1) The debugger doesn't (presently) have good visibility into closures, so using them in messages or the model can make debugging harder.
2) You must be disciplined in never caching model state inside a closure as part of the update, because there can be delays from when messages are sent to when update handles them and you don't  want race conditions.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:20:10.188400</ts>
    <user>Buffy</user>
    <text>Bam! :exploding_head: there it is! FTW &lt;@Dede&gt;!</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:21:06.189500</ts>
    <user>Buffy</user>
    <text>I almost feel a bit of remorse for asking as if I might’ve brought up memories of past pains. Apologies if that’s the case.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:21:22.189800</ts>
    <user>Dede</user>
    <text>The debugger problem is just an artifact of the moment; hopefully it will go away in time.  The other one is more subtle and pernicious :wink:</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:21:38.190300</ts>
    <user>Dede</user>
    <text>I went down a similar road recently, no major pain incurred before redirecting.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:22:02.190800</ts>
    <user>Buffy</user>
    <text>And to clarify, when you say caching… are you referring to using like Html.lazy or the like?</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:22:11.190900</ts>
    <user>Nana</user>
    <text>Yeah I tried something similar and encountered race conditions</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:22:34.191400</ts>
    <user>Dede</user>
    <text>No, something slightly different.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:23:11.191600</ts>
    <user>Buffy</user>
    <text>Wow fascinating. I wonder if either of y’all could provide an ellie example? Maybe we could start like an anti-patterns page in Elm that people could look up for answers to similar questions like this in the future?</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:25:48.192800</ts>
    <user>Dede</user>
    <text>Now that I look closer, you implemented the race condition I had in mind :wink:</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:25:56.193200</ts>
    <user>Dede</user>
    <text>Imagine someone mashed the button 10 times.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:26:04.193500</ts>
    <user>Dede</user>
    <text>So fast that all 10 happened before the first message made it to update.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:26:18.193900</ts>
    <user>Dede</user>
    <text>The closure is referring to the external model, not to the argument m.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:26:28.194200</ts>
    <user>Dede</user>
    <text>So you only wind up incrementing 1 time instead of 10.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:26:54.194600</ts>
    <user>Dede</user>
    <text>`(\m -&amp;gt; {m | count = model.count + 1}) ` should not refer to `model` but to `m` to avoid this.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:28:26.195900</ts>
    <user>Dede</user>
    <text>If some of your closures  capture model info and are delayed until some slow http request returns, you could wind up applying really stale bits of the model, out of order, when the closures finally do run.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:28:29.196100</ts>
    <user>Dede</user>
    <text>Does that make sense?</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:28:45.196500</ts>
    <user>Dede</user>
    <text>So an anti-pattern is certainly closing over `model` in `view`.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:38:32.197100</ts>
    <user>Buffy</user>
    <text>Man, that’s clear as a summer day! Makes perfect sense!</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:39:38.198200</ts>
    <user>Buffy</user>
    <text>That’d be a super easy mistake to make… In which case giving each function their own signature ala the constructors in the Msg union eliminates that ambiguity.</text>
  </message>
  <message conversation_id="641">
    <ts>2019-03-01T12:40:03.198800</ts>
    <user>Buffy</user>
    <text>Yay! More proof TEA is awesome!</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T13:04:31.199000</ts>
    <user>Carman</user>
    <text>See also the discussion on this discourse thread: &lt;https://discourse.elm-lang.org/t/message-types-carrying-new-state/2177&gt;</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T13:05:07.199300</ts>
    <user>Carman</user>
    <text>Richard Feldman's response in particular is worth reading</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T13:07:30.199500</ts>
    <user>Carman</user>
    <text>I started writing Elm in v0.15. Happy to answer questions about how things were done in "the old days"</text>
  </message>
  <message conversation_id="643">
    <ts>2019-03-01T14:42:00.200300</ts>
    <user>Angella</user>
    <text>In elm/time, why is `now` a `Task x Posix` and not a `Task Never Posix`?</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T14:47:22.201000</ts>
    <user>Carman</user>
    <text>It makes it easier to combine with other tasks</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T14:48:33.201900</ts>
    <user>Carman</user>
    <text>A `Task x Posix` can never fail (similarly to how a `Maybe a` must be nothing and a `List a` must be empty)</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T14:49:24.202600</ts>
    <user>Carman</user>
    <text>Taking `List a` as an example:
```
empty1 : List a
empty1 =
  []

empty2 : List Never
empty2 =
  []
```</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T14:50:51.203800</ts>
    <user>Carman</user>
    <text>`empty1` can more easily be combined with other types of lists. You could easily say `[1, 2, 3] ++ empty1` or `List.sum empty1`</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T14:51:43.204300</ts>
    <user>Carman</user>
    <text>while if you wanted to do that with `empty2` you'd have to first map the `never` function</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T14:52:29.205100</ts>
    <user>Carman</user>
    <text>This is the same reason Html snippets with no event handlers are usually given the type `Html a` rather than `Html Never`</text>
  </message>
  <message conversation_id="644">
    <ts>2019-03-01T15:08:53.210700</ts>
    <user>Angella</user>
    <text>It would be nice if we could write a version of Task.perform that could somehow understand that. How might that work? I guess the type would need to somehow say, "I'll only accept something with an unspecified type parameter"? I'm trying to wrap my brain around that.</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T15:17:50.210900</ts>
    <user>Carman</user>
    <text>It does?</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T15:18:11.211100</ts>
    <user>Carman</user>
    <text>`Task.perform` works with `Time.now` even though it is a `Task x Posix`</text>
  </message>
  <message conversation_id="642">
    <ts>2019-03-01T15:18:19.211300</ts>
    <user>Carman</user>
    <text>See &lt;https://ellie-app.com/4RKDqH89v4Sa1&gt; for a live demo</text>
  </message>
  <message conversation_id="645">
    <ts>2019-03-01T16:56:01.214400</ts>
    <user>Jarvis</user>
    <text>the autolocking of topics on Elm's Discourse after 10 days seems a bit aggressive. example: i just watched Dan Abrams' talk in Oslo from 1 week ago and was compelled to explore his ideas further, but couldn't post in his reference topic that's just 1 month old: &lt;https://discourse.elm-lang.org/t/elm-media-control-api-proposal/3006&gt;</text>
  </message>
  <message conversation_id="645">
    <ts>2019-03-01T17:10:03.218100</ts>
    <user>Jarvis</user>
    <text>another example is that i used someone's Parent-Child proposal heavily in production and i had some feedback, found the Discourse topic where they debuted it, but was unable to provide feedback because it was a couple months old.</text>
  </message>
  <message conversation_id="646">
    <ts>2019-03-01T17:24:42.223800</ts>
    <user>Flossie</user>
    <text>can anyone point me on the right direction, I am trying to convert someone else's library that never was updated from 0.18.  In the 0.18 code they were encoding a list of Value (JSON "Value") using Encode.list [ Value, Value  etc. ].  The 0.19 version of Encode requires you to supply the encoder and list.  What encoder would be used to encode a list of JSON Value?</text>
  </message>
  <message conversation_id="645">
    <ts>2019-03-01T17:27:34.224300</ts>
    <user>Jarvis</user>
    <text>&lt;@Pam&gt; E.list takes (a -&amp;gt; Value) so wouldn't identity function be sufficient?</text>
  </message>
  <message conversation_id="645">
    <ts>2019-03-01T17:27:53.224700</ts>
    <user>Jarvis</user>
    <text>you have List Value, so you need a function (Value -&amp;gt; Value)</text>
  </message>
  <message conversation_id="646">
    <ts>2019-03-01T17:28:26.225300</ts>
    <user>Flossie</user>
    <text>I'm not sure .. I will try it.</text>
  </message>
  <message conversation_id="646">
    <ts>2019-03-01T17:30:50.226500</ts>
    <user>Flossie</user>
    <text>Yeah, that did satisfy the compiler.  No idea yet if the end result is correct, but thanks.  At least I have something to work with.</text>
  </message>
  <message conversation_id="645">
    <ts>2019-03-02T02:25:10.229000</ts>
    <user>Jarvis</user>
    <text>it's one thing i like about this sort of type system. you see the signature `list : (a -&amp;gt; Value) -&amp;gt; List a -&amp;gt; Value`, you know you have a List Value, so you substitute the other `a` with `Value` and see you just need a function `Value -&amp;gt; Value`.</text>
  </message>
  <message conversation_id="645">
    <ts>2019-03-02T02:25:57.229900</ts>
    <user>Jarvis</user>
    <text>as opposed to shopping for a method on the datastructures that might do what you want</text>
  </message>
  <message conversation_id="645">
    <ts>2019-03-02T02:26:52.230100</ts>
    <user>Jarvis</user>
    <text>for some reason it took me a while to appreciate it</text>
  </message>
  <message conversation_id="647">
    <ts>2019-03-02T05:19:27.231600</ts>
    <user>Jae</user>
    <text>Hi, I'm using the elm/svg package and I want to render an image inside some svg.  I figured something like this would work
`Svg.image [ Html.Attributes.src "image.png", Html.Attributes.width 100, Html.Attributes.height 100 ] []` but nothing appears.  I looked at some html examples online and they seem to be including an `xlink:href="image.png"` attribute in their image. The `Html.Attributes` module doesn't seem to have that so what do I do instead?</text>
  </message>
  <message conversation_id="645">
    <ts>2019-03-02T05:20:36.232300</ts>
    <user>Lynne</user>
    <text>&lt;@Jae&gt; you can use `Html.Attributes.attribute` to put any arbitrary attribute</text>
  </message>
  <message conversation_id="647">
    <ts>2019-03-02T05:20:55.232600</ts>
    <user>Jae</user>
    <text>Ah, I didn't notice that. Thanks!</text>
  </message>
  <message conversation_id="647">
    <ts>2019-03-02T05:23:01.234700</ts>
    <user>Jae</user>
    <text>Oh, also there is a Html.Attributes.href (not xlink:href) but when I use that I get a runtime exception with the message "TypeError: Cannot assign to read only property 'href' or object '#&amp;lt;SVGImageElement&amp;gt;'". Is this a known bug?</text>
  </message>
  <message conversation_id="647">
    <ts>2019-03-02T05:26:40.235600</ts>
    <user>Lynne</user>
    <text>I don't know much about SVG but I can imagine that one is required putting a namespaced attribute (xlink:href) and hence setting just href may be prohibited</text>
  </message>
  <message conversation_id="647">
    <ts>2019-03-02T05:28:38.236200</ts>
    <user>Lynne</user>
    <text>There is also `Svg.Attributes.xlinkHref` - that might by something you are actually after &lt;@Jae&gt;</text>
  </message>
  <message conversation_id="647">
    <ts>2019-03-02T05:30:17.236800</ts>
    <user>Jae</user>
    <text>That can't be used inside Svg.image though. Svg.image expects Html.Attributes</text>
  </message>
  <message conversation_id="647">
    <ts>2019-03-02T05:32:28.237600</ts>
    <user>Lynne</user>
    <text>Both `Html.Attribute` and `Svg.Attribute` are type aliases for `VirtualDom.Attribute`, so that can't be true &lt;@Jae&gt;</text>
  </message>
  <message conversation_id="647">
    <ts>2019-03-02T05:33:28.238200</ts>
    <user>Jae</user>
    <text>Dang, I never realized that. That solved my problem then, the image appears.  Thanks!</text>
  </message>
  <message conversation_id="648">
    <ts>2019-03-02T06:25:23.242700</ts>
    <user>Winnie</user>
    <text>I'm looking for approaches to lazily populating my model based on the view. In short, one of my views needs to display the asciidoc-generated HTML from a string in my model. The natural place to request the (relatively expensive) generation is when the view actually needs it, but since generation requires sending a message out a port, the view - as far as I can tell - can't make the request. Other approaches I can think of (e.g. having my update determine when a URL change will require the generation) require putting knowledge about specific views in places besides the view. Any ideas on how I can make the generation request only when the view actually needs that data?</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:33:44.243100</ts>
    <user>Lynne</user>
    <text>Do you parse URL in your `view` function now and render something depending on what you parsed? Or how does your app work currently?</text>
  </message>
  <message conversation_id="648">
    <ts>2019-03-02T06:36:37.243300</ts>
    <user>Winnie</user>
    <text>yes, the URL is stored in the model and I sort out what to render in the view based on that. It's all taken pretty directly from the navigation documentation for 0.19.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:36:48.243500</ts>
    <user>Lynne</user>
    <text>I see</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:38:43.243700</ts>
    <user>Lynne</user>
    <text>Well, `view` is supposed to render your model so there is basically no option to moving knowledge about specific views to it and doing URL parsing in `update` instead</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:39:13.243900</ts>
    <user>Lynne</user>
    <text>I mean, if you want to request data only when it is actually needed</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:39:29.244100</ts>
    <user>Lynne</user>
    <text>Why do you think it is bad if I may ask?</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:40:11.244300</ts>
    <user>Winnie</user>
    <text>Because it means that if I change my view such that asciidoc HTML is displayed in other places, I need to update the `update` function as well.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:40:53.244500</ts>
    <user>Winnie</user>
    <text>Basically, `update` needs to know specifically under which conditions the generation needs to happen.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:41:13.244700</ts>
    <user>Lynne</user>
    <text>And these conditions do not exist in URL, is it correct?</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:41:51.244900</ts>
    <user>Winnie</user>
    <text>I can examine the URL to determine if it will need the generation, but only because</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:42:06.245100</ts>
    <user>Winnie</user>
    <text>but only by encoding that knowledge in `update`.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:42:25.245300</ts>
    <user>Winnie</user>
    <text>It's essentially view-specific details leaking to other parts of the program.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:43:34.245500</ts>
    <user>Lynne</user>
    <text>I understand your concern but in Elm core of program is model, not view. So what you have said about `update` is how it should be done when we are talking about the Elm architecture</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:44:26.245700</ts>
    <user>Lynne</user>
    <text>In other words view is a product of model, not vice versa</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:44:31.245900</ts>
    <user>Winnie</user>
    <text>well...only because they've taken away native modules. That's how I used to do it.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:44:56.246100</ts>
    <user>Winnie</user>
    <text>Your point is true, though, so I guess my hands are tied.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:45:04.246300</ts>
    <user>Lynne</user>
    <text>You may consider custom components instead if it is that critical</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:45:46.246500</ts>
    <user>Winnie</user>
    <text>I wouldn't say critical. It's just frustrating that something so conceptually straightforward requires such gymnastics.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:46:01.246700</ts>
    <user>Winnie</user>
    <text>Anyhow, thanks for you help on this.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:46:15.246900</ts>
    <user>Lynne</user>
    <text>You are welcome :slightly_smiling_face:</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:46:26.247100</ts>
    <user>Winnie</user>
    <text>I'll look into custom components, but I imagine I'll just go the standard route.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:47:17.247300</ts>
    <user>Lynne</user>
    <text>Apart from possible inconveniences the standard way also gives some nice opportunities like displaying the "Loading..." screen while your picture is being rendered</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T06:52:53.247500</ts>
    <user>Winnie</user>
    <text>Right. I wouldn't have a problem with standard approach if the view could somehow trigger the port itself. That would plug the leak.</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T09:22:35.247900</ts>
    <user>Tamra</user>
    <text>You could always generate `Html` in `update`, store it in your `Model` and just return it in `view`. I am not sure if that is a good idea though :sweat_smile: .</text>
  </message>
  <message conversation_id="650">
    <ts>2019-03-02T09:24:22.248100</ts>
    <user>Lynne</user>
    <text>It has a disadvantage of potentially doing unnecessary job as several `update` calls may happen before `view` which only happens on each animation frame</text>
  </message>
  <message conversation_id="649">
    <ts>2019-03-02T09:24:46.248300</ts>
    <user>Lynne</user>
    <text>Therefore, if your model is updated often, generating Html and storing it in the model will be a waste</text>
  </message>
  <message conversation_id="651">
    <ts>2019-03-02T10:27:44.249900</ts>
    <user>Lynn</user>
    <text>what do people think is the easiest replacement for the 0.18 websockets library for a migration to 0.19? I looked at PortFunnel and it seemed to be more sophisticated (and hence more complex) to implement</text>
  </message>
  <message conversation_id="651">
    <ts>2019-03-02T10:28:59.250700</ts>
    <user>Lynn</user>
    <text>I’d prefer to have the same basic api, so I can focus (at least initially) on wiring up the ports that will be needed</text>
  </message>
  <message conversation_id="651">
    <ts>2019-03-02T11:43:42.256300</ts>
    <user>Lynn</user>
    <text>&amp;lt;wishful-thinking&amp;gt;I guess the ideal would be that someone was allowed to port the existing (native) code to 0.19 and put it on elm-explorations so that we could all use while the new version is worked on&amp;lt;/wishful-thinking&amp;gt;</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T12:02:25.257200</ts>
    <user>Dorsey</user>
    <text>Hey! Our workshop at the University of Utrecht (the Netherlands) starts on Monday and a lot of people signed up today. If any of you fine folks will be around please give us a hand as a coach. Even a single evening will be appreciated. The schedule is here: &lt;http://software.garden/test-run.html&gt;</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T12:10:53.257600</ts>
    <user>Dede</user>
    <text>It’s all on GitHub...</text>
  </message>
  <message conversation_id="653">
    <ts>2019-03-02T12:16:21.257900</ts>
    <user>Allyn</user>
    <text>Hello. I wrote a parser to parse something like ” = some random text” and I need to get “some random text” from it, whatever are the characters after the “=” symbol.

```
stringParser : Parser String
stringParser =
    getChompedString &amp;lt;| chompWhile (\c -&amp;gt; True)


stringEqualityParser : Parser String
stringEqualityParser =
    succeed identity
        |. spaces
        |. symbol "="
        |. spaces
        |= stringParser
```

This does the job, but is there a more elegant solution?</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T12:24:01.258900</ts>
    <user>Virgie</user>
    <text>what is inelegant to you here? it is quite understandable I think.</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T12:25:00.259800</ts>
    <user>Virgie</user>
    <text>How do you intend to use this, the `stringParser` will just keep on chomping till the end of the input, so you can't really use this at the moment in a larger parser</text>
  </message>
  <message conversation_id="653">
    <ts>2019-03-02T13:33:06.260400</ts>
    <user>Allyn</user>
    <text>I don’t need to use it in a larger parser</text>
  </message>
  <message conversation_id="653">
    <ts>2019-03-02T13:37:14.261500</ts>
    <user>Allyn</user>
    <text>I was wondering if there wasn’t any shorter solution which did not imply to create the `stringParser` function</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T13:38:45.262000</ts>
    <user>Virgie</user>
    <text>you can always inline that function, but this is good code</text>
  </message>
  <message conversation_id="653">
    <ts>2019-03-02T13:39:49.262900</ts>
    <user>Allyn</user>
    <text>that was definitely not what I was thinking of :wink:</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T13:39:55.263200</ts>
    <user>Hoyt</user>
    <text>Could you do something like `keep zeroOrMore `</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T13:40:22.263800</ts>
    <user>Virgie</user>
    <text>&lt;@Hoyt&gt; that is not part of the API any more since 0.19</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T13:40:41.264500</ts>
    <user>Hoyt</user>
    <text>ah, okay, I”m looking at old docs. Haven’t looked at changes to the parser for 0.19</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T13:41:13.265000</ts>
    <user>Virgie</user>
    <text>one improvement is - if you can find a character that will never occur in your code like NUL, to use `chompUntilEndOr "\0"`</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T13:41:25.265400</ts>
    <user>Virgie</user>
    <text>this will drop down into JS and be a little more efficient I think</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T13:41:34.265700</ts>
    <user>Hoyt</user>
    <text>ah, I see. Looking at the updated ones</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T13:45:46.266200</ts>
    <user>Allyn</user>
    <text>It does not accept “\0” as a parameter, but “\t” works</text>
  </message>
  <message conversation_id="652">
    <ts>2019-03-02T14:02:22.267000</ts>
    <user>Virgie</user>
    <text>elm format rewrites `\0`  to `"\u{0000}"` which I think it should accept. anyway `\t` also does the job</text>
  </message>
  <message conversation_id="653">
    <ts>2019-03-02T14:03:22.267500</ts>
    <user>Allyn</user>
    <text>It works indeed, but I prefer “\t” for readability</text>
  </message>
  <message conversation_id="654">
    <ts>2019-03-02T16:51:28.267700</ts>
    <user>Lynn</user>
    <text>Google could not find anything obvious, hence why I asked
</text>
  </message>
  <message conversation_id="654">
    <ts>2019-03-02T16:53:57.267900</ts>
    <user>Lynn</user>
    <text>None</text>
  </message>
  <message conversation_id="655">
    <ts>2019-03-02T17:39:48.269600</ts>
    <user>Cleveland</user>
    <text>how can i call play method on video/audio element with elm?
is it possible?</text>
  </message>
  <message conversation_id="655">
    <ts>2019-03-02T17:42:07.270300</ts>
    <user>Verlene</user>
    <text>`elm-use` doesn't seem to support 0.19 yet. Does anyone know why? Haven't gotten around to it yet? Is it in the works?</text>
  </message>
  <message conversation_id="655">
    <ts>2019-03-02T17:45:08.271800</ts>
    <user>Huong</user>
    <text>I didn't even know that existed :smile: I tend to use `npm i` and `npx` to run project-local stuff, though there are a few tools for elm version management around, including `elmv` and various `asdf` plugins, amongst others (presumably)</text>
  </message>
  <message conversation_id="655">
    <ts>2019-03-02T17:46:44.272600</ts>
    <user>Verlene</user>
    <text>Yeah, I just stumbled upon it now, and figured it seemed sensible to be able to easily switch between versions. I'd prefer to stay out of npm-land if I can. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="655">
    <ts>2019-03-02T17:52:08.272700</ts>
    <user>Dede</user>
    <text>I meant you can hack up your own version of Elm if not having something native is a showstopper:  &lt;https://github.com/elm/&gt;</text>
  </message>
  <message conversation_id="656">
    <ts>2019-03-02T18:45:39.274200</ts>
    <user>Jarvis</user>
    <text>&lt;@Cleveland&gt; you can make a port that tells JS to document.querySelector(#id).play() at the very least. prob need to wrap in rAF</text>
  </message>
  <message conversation_id="656">
    <ts>2019-03-02T18:48:32.276600</ts>
    <user>Jarvis</user>
    <text>i have a thumbnail gallery that opens a &amp;lt;video&amp;gt; in a modal when user clicks respective thumbnail. but i want videos to initialize at volume=0. for now i use a mutation observer on document.body that sets node.volume=0 on new &amp;lt;video&amp;gt; nodes.</text>
  </message>
  <message conversation_id="656">
    <ts>2019-03-02T18:51:01.276900</ts>
    <user>Jarvis</user>
    <text>so, the sky's the limit :smile:</text>
  </message>
  <message conversation_id="657">
    <ts>2019-03-02T19:30:00.279700</ts>
    <user>Allyn</user>
    <text>Dan Abrams just made a talk about this: &lt;https://www.youtube.com/watch?v=8jW58fXuuOk&gt;</text>
  </message>
  <message conversation_id="657">
    <ts>2019-03-02T19:36:53.279900</ts>
    <user>Allyn</user>
    <text>He created a wrapper around HTML5 apis: &lt;https://github.com/danabrams/elm-media&gt;</text>
  </message>
  <message conversation_id="656">
    <ts>2019-03-03T01:45:32.280500</ts>
    <user>Dorsey</user>
    <text>I'm thinking about a data structure for a question with single choice answer, like:

```
What is the value of 2 + 2?

  ( ) 3
  (*) 4
  ( ) 5
```

I'd like to make invalid states impossible, so the requirements are following:

1.  There must always be exactly one correct answer

    That could be satisfied with a `NonEmptyList` where the first element is the correct answer.

2.  Answers must be unique

    A Set would work, assuming there will be no additional data in the answer (like an id).

For the UX:

3.  It must be possible to re-order the options

    It's not much fun if the first option is always correct.

Best candidate I can think of so far is the `AssocList` (&lt;https://package.elm-lang.org/packages/pzp1997/assoc-list/latest/&gt;) with keys being the options and values indexes for ordering, so `AssocList.Dict Option Int`. Then to check if a given answer is correct I would test if it's the head of the `AssocList.keys`, and to render I would do `AssocList.toList &amp;gt;&amp;gt; sortBy Tuple.second`. The only downside I see is that the AssocList can be empty, which would violate requirement 1. I think I could live with that, but maybe I should make a `NonEmptyAssocList`. Is there anything else I should consider?</text>
  </message>
  <message conversation_id="658">
    <ts>2019-03-03T02:06:30.284000</ts>
    <user>Krista</user>
    <text>Thinking about your problem, what comes to mind is that you always need a good answer and a few bad ones. So maybe you could use something like `Question String (List String)`, and then it's only a matter of displaying a random number of bad answers, then the correct answer, then the remaining bad answers?</text>
  </message>
  <message conversation_id="658">
    <ts>2019-03-03T02:07:06.284800</ts>
    <user>Krista</user>
    <text>I mean, not conflate the data and its representation</text>
  </message>
  <message conversation_id="656">
    <ts>2019-03-03T02:35:19.286700</ts>
    <user>Dorsey</user>
    <text>That would work, but I'd like the order to be explicit (i.e. not random). Also the uniqueness is not guaranteed - I'd have to check for that at runtime.</text>
  </message>
  <message conversation_id="659">
    <ts>2019-03-03T02:42:53.287200</ts>
    <user>Cammy</user>
    <text>There’s a much better wrapper coming this month. </text>
  </message>
  <message conversation_id="659">
    <ts>2019-03-03T02:45:24.288900</ts>
    <user>Cammy</user>
    <text>Right now this is the way to do it but I’ll be releasing a wrapper very soon that avoids reaching into virtual dom like this. </text>
  </message>
  <message conversation_id="659">
    <ts>2019-03-03T02:45:53.289400</ts>
    <user>Cammy</user>
    <text>Why not just use a volume or muted attribute on the video dom nodes, instead of a mutation observer?</text>
  </message>
  <message conversation_id="658">
    <ts>2019-03-03T03:02:26.291400</ts>
    <user>Krista</user>
    <text>Maybe `Question String Int (List String)` with the Int being the index of the correct answer?</text>
  </message>
  <message conversation_id="658">
    <ts>2019-03-03T03:02:39.291700</ts>
    <user>Krista</user>
    <text>not sure what you meant about uniqueness</text>
  </message>
  <message conversation_id="658">
    <ts>2019-03-03T03:19:31.293200</ts>
    <user>Dorsey</user>
    <text>Yeah, that's interesting. Uniqueness of the answers, so that it's not possible to do ```
How much is 2 + 2

- ( ) 4
- (*) 4
- ( ) 5
```</text>
  </message>
  <message conversation_id="658">
    <ts>2019-03-03T03:22:20.295300</ts>
    <user>Dorsey</user>
    <text>I guess I could use `AssocSet` (it's ordered and guarantees that values are unique).</text>
  </message>
  <message conversation_id="658">
    <ts>2019-03-03T03:23:04.295700</ts>
    <user>Dorsey</user>
    <text>But there can still be collision between correct and one of the incorrect answers.</text>
  </message>
  <message conversation_id="658">
    <ts>2019-03-03T03:23:10.295900</ts>
    <user>Dorsey</user>
    <text>:thinking_face:</text>
  </message>
  <message conversation_id="658">
    <ts>2019-03-03T03:31:29.298700</ts>
    <user>Krista</user>
    <text>Ah, that is yet another concern that should maybe not be conflated with the data and its representation. Maybe the wrong answers can be manually provided, if not then you will need some kind of generation, some kind of fuzzing...</text>
  </message>
  <message conversation_id="660">
    <ts>2019-03-03T05:41:53.299600</ts>
    <user>Shena</user>
    <text>Created a PR to add Elm to &lt;https://zeit.co/new&gt;
I used create-elm-app for that: &lt;https://github.com/zeit/now-examples/pull/291&gt;</text>
  </message>
  <message conversation_id="660">
    <ts>2019-03-03T05:42:39.299700</ts>
    <user>Shena</user>
    <text>Was unsure whether it belongs to "Programming Languages" or "Frameworks and Libraries"</text>
  </message>
  <message conversation_id="660">
    <ts>2019-03-03T05:44:22.299900</ts>
    <user>Shena</user>
    <text>Actually I should probably add a few words about deploying to now in the readme.md</text>
  </message>
  <message conversation_id="661">
    <ts>2019-03-03T06:10:15.302400</ts>
    <user>Ashton</user>
    <text>Are the number of answers fixed? Like to 3 or something?</text>
  </message>
  <message conversation_id="661">
    <ts>2019-03-03T06:14:43.306500</ts>
    <user>Ashton</user>
    <text>```
type alias Answer =
    { value : String
    , order : Int
    }

type alias Question =
    { value : String
    , rightAnswer : Answer
    , wrongAnswers : List Answer
    }

answers : Question -&amp;gt; List Answer
answers { rightAnswer, wrongAnswers } =
    List.sortBy .order (rightAnswer :: wrongAnswers)
```</text>
  </message>
  <message conversation_id="661">
    <ts>2019-03-03T06:14:54.306700</ts>
    <user>Earnest</user>
    <text>&lt;@Dorsey&gt; I'd just do `type Question = Question { question : String, correctIndex : Int, answers : (List String) }` in a `Question` module and expose the `Question` type(not the constructor) as well as a `makeQuestion :  String -&amp;gt; Int -&amp;gt; List String -&amp;gt; Maybe Question` function that makes sure the `Int` is a valid index of the `List String` and that the list contains no duplicates(or something similar, like filter out dupes and check the length).</text>
  </message>
  <message conversation_id="661">
    <ts>2019-03-03T06:19:50.307700</ts>
    <user>Earnest</user>
    <text>If you add &amp;amp; expose other functions like `shuffleAnswers : Question -&amp;gt; Question`, just make sure they maintain the invariants you've set in the `makeQuestion` function.</text>
  </message>
  <message conversation_id="661">
    <ts>2019-03-03T07:28:46.311900</ts>
    <user>Edie</user>
    <text>&lt;@Dorsey&gt; you could write a version of Selectlist can is for a Set.

&lt;https://package.elm-lang.org/packages/rtfeldman/selectlist/latest/SelectList&gt;

The Set will guarantee rhe uniqueness and the data structure will guarantee at least one selected item (the correct answer).

Then you can have a type like `type Question = Question String (SelectSet Answer)`</text>
  </message>
  <message conversation_id="662">
    <ts>2019-03-03T07:33:14.313000</ts>
    <user>Edie</user>
    <text>`Answer` could be simplified as a String to not over complicate the data structure.</text>
  </message>
  <message conversation_id="663">
    <ts>2019-03-03T07:56:53.318700</ts>
    <user>Susanna</user>
    <text>I'd like to insert a little elm component into an existing js/typescript/java legacy app that is build using maven and npm/grunt plugins. Grunt seems deprecated and so I don't expect the grunt-elm plugin to be maintained any further. Can anyone suggest an approach to integrating the elm build into this maven-driven (with npm and grunt plugins) project? Thanks in advance.</text>
  </message>
  <message conversation_id="662">
    <ts>2019-03-03T08:10:07.319500</ts>
    <user>Lynne</user>
    <text>I am pretty sure grunt is capable of running shell commands, so you can just call `elm make` from your grunt pipeline</text>
  </message>
  <message conversation_id="662">
    <ts>2019-03-03T08:12:27.320000</ts>
    <user>Lynne</user>
    <text>If you want to run it by Maven instead, there is a plugin to execute shell commands for it: &lt;https://search.maven.org/artifact/org.codehaus.mojo/exec-maven-plugin/1.6.0/maven-plugin&gt;</text>
  </message>
  <message conversation_id="662">
    <ts>2019-03-03T08:19:36.320200</ts>
    <user>Lynne</user>
    <text>Or this one &lt;https://search.maven.org/artifact/org.apache.maven.plugins/maven-invoker-plugin/3.2.0/maven-plugin&gt;</text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T09:07:55.320400</ts>
    <user>Dorsey</user>
    <text>That's very cool! I didn't know about `SelectList`, so thanks a lot. It's no surprise that it comes from &lt;@Leonie&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T09:12:46.320600</ts>
    <user>Cleveland</user>
    <text>&lt;@Jarvis&gt; i was thinking of safe and typed version of `document.querySelector(#id).play()`</text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T09:12:50.320800</ts>
    <user>Cleveland</user>
    <text>&lt;@Cammy&gt; looking forward too that</text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T09:15:00.322300</ts>
    <user>Cammy</user>
    <text>You have to be very careful with your id’s doing it with querySelector. That doesn’t sound hard, but in practice, I spend a lot of time helping people with this. </text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T09:20:32.322500</ts>
    <user>Cleveland</user>
    <text>that one of the reasons i don't want to do this with ids

because then in order to have arbitrary number of players on page i need to somehow keep track of player ids
which is much simple in js then elm i am guessing</text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T09:23:13.322800</ts>
    <user>Cleveland</user>
    <text>&lt;@Cammy&gt; so that you are doing is for audio/video and not for DOM APIs in general right?</text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T09:25:01.324300</ts>
    <user>Cammy</user>
    <text>Around the media playback parts of the DOM API (play, pause, etc), as well as the other media apis. </text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T09:53:36.326700</ts>
    <user>Cammy</user>
    <text>This is what I talked about at Oslo elm day. 

Can I ask, what’s the use-case for having a lot of players on one page as opposed to one that switches sources? There’s a limit to the number of players some browsers can load on a page. </text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T09:55:21.328500</ts>
    <user>Cammy</user>
    <text>By the way, the way I solved this in an earlier incarnation was generating an opaque type that contained the id, and using a Dict if I had multiple on the page. That was better than strings, but not 100%, at least through ports. </text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T10:22:54.329100</ts>
    <user>Cleveland</user>
    <text>if i can't have multiple players that would mean player is singleton which is just wrong

as for examples where you need more then one player take a look at &lt;http://coub.com|coub.com&gt;

or this &lt;http://tv.myvideo.ge/&gt; this is tv streaming built with react it has main player and on the left side if you hover over some channels they have preview of stream in a mini player

in my code mini player and main player is same component with different options passed to them

screenshot &lt;https://imgur.com/a/Ax6kOMH&gt;</text>
  </message>
  <message conversation_id="664">
    <ts>2019-03-03T10:57:44.339600</ts>
    <user>Cammy</user>
    <text>So coub (atleast in the iOS app version) seems to only have one player at a time, which is the way something like that should work. I’ll have to take a look at how it works on a desktop browser later, but I see where this would be difficult to do with the current virtual dom implementation, but my new library should make this much easier while adhering to best practices for a good user experience, and increase performance over using 20+ individual media elements on a page. 

I’m not sure, however, that we have the necessary capabilities in Elm currently to do this properly, the way that it works in the iOS native app. I really want to see what they’re doing in a desktop browser. 

For previews, yeah, that’s a good use case, but I might suggest instead of having an arbitrary number of media elements, you only need two. The most videos that can be playing simultaneously is two: a main video and one preview at a time, assuming the previews only appear on mouseover. 

If you have 40 linked videos on the page, you don’t want to load every preview at page load, it’ll eat a ton of bandwidth, and use a ton of bandwidth. Just load the appropriate preview as you mouseover...use fMP4 and encode the previews really small, and they should load quickly. This is generally the better of the two ways I’ve seen it done on sites like YouTube (the other is image sequences). </text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:09:00.340100</ts>
    <user>Wendell</user>
    <text>Any packages for manipulating the RGB values of images?</text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:09:39.340700</ts>
    <user>Wendell</user>
    <text>Or HSL, I guess. I’m color space agnostic.</text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:09:49.341000</ts>
    <user>Cammy</user>
    <text>You mean like making a color image black and white or something?</text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:10:20.341200</ts>
    <user>Wendell</user>
    <text>Sure, that’s a good example</text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:12:38.343900</ts>
    <user>Cammy</user>
    <text>Don’t quote me on this, but for raw pixel manipulation, you probably need canvas. However, you can do a lot with css filters and svg filters. I suppose you could also write a jpeg or png decoder using elm/bytes, manipulate the data, then create a blob or something, but that seems nuts. </text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:13:21.344200</ts>
    <user>Wendell</user>
    <text>Yeah I was thinking there might be something that you can do with elm/bytes</text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:14:02.345200</ts>
    <user>Cammy</user>
    <text>In theory there is, and if you write a jpeg or png decoder/encoder I’ll definitely use it, but it’s a big job. </text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:14:35.346300</ts>
    <user>Cammy</user>
    <text>Unless you’re just looking to glitch a random pixel, in which case you probably could do in a day with elm/bytes. </text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:18:46.346600</ts>
    <user>Wendell</user>
    <text>Nah I’m thinking about new ideas for packages and wanted to make sure I am not duplicating work. Now I’m going to read the png/jpeg spec to see how big a job it really is. I believe ppm is an easy format to parse but obviously it is much less useful than png/jpg. I might start there though just to see what the library would do before deciding to invest in decoding compressed images :slightly_smiling_face:.</text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:19:59.347600</ts>
    <user>Cammy</user>
    <text>I think it’s great. I’ve been thinking about JPEG for a while but just don’t have the time. </text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:20:15.347800</ts>
    <user>Wendell</user>
    <text>Yeah it seems like it could be a real monster of a project.</text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:20:29.348000</ts>
    <user>Wendell</user>
    <text>We’ll see what my initial research yields</text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:21:44.348400</ts>
    <user>Cammy</user>
    <text>It would be awesome. </text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:25:47.349200</ts>
    <user>Cammy</user>
    <text>If you do it, I’m sure you’ll have no problem with dct, but if you do, hit me up, I’ve done it before. </text>
  </message>
  <message conversation_id="665">
    <ts>2019-03-03T11:26:23.349400</ts>
    <user>Wendell</user>
    <text>Thanks, I’ll keep that in mind</text>
  </message>
  <message conversation_id="666">
    <ts>2019-03-03T11:32:53.349700</ts>
    <user>Cleveland</user>
    <text>mini player is constructed on mouse over and is re used when mouse moves to another channel so there is only 2 HLS players max in the application (mini/preview player and main player)
there is extra one for playing ads so that stream is pre loaded by the time ad is ended

so that's 3 players already

at some point there was an idea of having pined preview like picture in picture and to allow up to 4-5 pined previews

or there may be game with sound effects as separate mp3 files and you may need to play arbitrary number of sound tracks at same time

so of course there are reasons for not playing 40 videos at same time but that's up to application developer and there should not be limitation from language/library API</text>
  </message>
  <message conversation_id="666">
    <ts>2019-03-03T11:41:12.349900</ts>
    <user>Susanna</user>
    <text>Sometimes I make things more complicated than they need to be :slightly_smiling_face:</text>
  </message>
  <message conversation_id="666">
    <ts>2019-03-03T11:59:37.350100</ts>
    <user>Lynne</user>
    <text>You are not alone in it :smile:</text>
  </message>
  <message conversation_id="667">
    <ts>2019-03-03T13:57:55.351200</ts>
    <user>Tamiko</user>
    <text>I’ve been following: &lt;https://github.com/rtfeldman/elm-spa-example&gt;
which uses `Html.map`. However in the docs it says to use `Html.map` sparingly. Is this spa example still a good one?</text>
  </message>
  <message conversation_id="667">
    <ts>2019-03-03T14:06:14.352000</ts>
    <user>Lynne</user>
    <text>Yes, it shows when using `Html.map` is ok. Don't try to use it more often without good reason.</text>
  </message>
  <message conversation_id="667">
    <ts>2019-03-03T16:31:26.354800</ts>
    <user>Deb</user>
    <text>&lt;@Tamiko&gt; Richard touches on that very question in a recent talk, with a lovely analogy. &lt;https://www.youtube.com/watch?v=RN2_NchjrJQ&amp;amp;t=32m43s&gt;</text>
  </message>
  <message conversation_id="668">
    <ts>2019-03-03T19:36:43.355100</ts>
    <user>Edie</user>
    <text>No problem! I used it heavily on my last application that was a wizard driven set of questions.</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-03T20:40:39.356000</ts>
    <user>Loriann</user>
    <text>Hi!  happy to be here and working with elm</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-03T20:42:43.357300</ts>
    <user>Loriann</user>
    <text>Is there any case where a 200 response from a server would trigger an Err message from elm in a branch?</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-03T20:43:10.357600</ts>
    <user>Loriann</user>
    <text>This is my response body</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-03T20:43:33.357700</ts>
    <user>Loriann</user>
    <text>None</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-03T20:44:03.358200</ts>
    <user>Loriann</user>
    <text>header status is 200</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-03T20:44:27.358800</ts>
    <user>Loriann</user>
    <text>Thank you in advance</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-03T20:44:53.359500</ts>
    <user>Earlean</user>
    <text>&lt;@Loriann&gt; sure, you'll get an error if the decoder fails</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-03T21:13:53.360500</ts>
    <user>Loriann</user>
    <text>&lt;@Earlean&gt; Thank you!  that makes sense, I overlooked the decoder.  I was thinking a level higher</text>
  </message>
  <message conversation_id="670">
    <ts>2019-03-03T21:14:49.361400</ts>
    <user>Earlean</user>
    <text>The error would have included this information including the reason the decoder failed</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-03T21:17:21.362200</ts>
    <user>Loriann</user>
    <text>Thank you, saw the bad body error in the elm debugger.  &lt;@Earlean&gt;, i appreciate your help</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:43:12.363600</ts>
    <user>Loriann</user>
    <text>Alright, I finally figured out what the issue was, but I'm not sure how to solve it.   it looks like the issue is with "Request header field content-type is not allowed by Access-Control-Allow-Headers" when initiating a webhook via a post request like so:</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:44:43.363700</ts>
    <user>Loriann</user>
    <text>None</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:48:57.365500</ts>
    <user>Earlean</user>
    <text>&lt;@Loriann&gt; if you look at the network tab in developer tools you'll be able to see an 'options' request to '&lt;http://hooks.zapier.com|hooks.zapier.com&gt;', have a look at that `Access-Control-Allow-Headers` header in the response to that request</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:50:17.366600</ts>
    <user>Earlean</user>
    <text>For security reasons cross origin requests are only allowed by the browser if the cross origin server gives permission by including CORS headers</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:50:54.366900</ts>
    <user>Earlean</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&gt; gives a good introduction to CORS</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:51:50.367900</ts>
    <user>Earlean</user>
    <text>&lt;http://hooks.zapier.com|hooks.zapier.com&gt; may not allow cross origin requests in which case you won't be able to make that request from within a browser</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:52:47.368700</ts>
    <user>Loriann</user>
    <text>&lt;@Earlean&gt; Thank you, I think I understand what you mean.   My understanding of HTTP requests is growing.</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:54:20.370000</ts>
    <user>Loriann</user>
    <text>It looks like the request that I am sending from the machine is setting a content type even though I thought I was able to override headers from the Http.request function.   Any good resources on Elm and CORS?  It's been slightly challenging to get answers . on that from the docs.   Thanks in advance.</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:57:52.372200</ts>
    <user>Earlean</user>
    <text>It's not an Elm specific issues, CORS handled and enforced by the browser</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T01:59:44.373500</ts>
    <user>Loriann</user>
    <text>Ahh, I see what you mean, but elm is creating the request.  Elm is generating a request of Content-Type: application/json</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:00:03.374200</ts>
    <user>Earlean</user>
    <text>yep, you're sending json so it needs a content type of json</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:00:09.374300</ts>
    <user>Loriann</user>
    <text>from the article you shared</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:00:17.374400</ts>
    <user>Floy</user>
    <text>hey &lt;@Lea&gt;</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:00:25.374600</ts>
    <user>Floy</user>
    <text>thanks for reply, haven't noticed the reply</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:00:27.374800</ts>
    <user>Loriann</user>
    <text>None</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:00:41.375200</ts>
    <user>Floy</user>
    <text>watched that, but I guess need to watch it again in context of ,y problem</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:00:57.375800</ts>
    <user>Loriann</user>
    <text>Do you know how I can set this manually?</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:01:35.377100</ts>
    <user>Earlean</user>
    <text>can you show us the full error message you're seeing on the web dev console?</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:03:14.379700</ts>
    <user>Earlean</user>
    <text>setting the content type to something other than json and trying to send json will just have the server reject the request because it's expecting json</text>
  </message>
  <message conversation_id="671">
    <ts>2019-03-04T02:03:23.380000</ts>
    <user>Floy</user>
    <text>hey, is is possible to model a problem where I have a phantom type describing the filter
```
type alias Filter a msg = {label: String, selected: List a, all: List a, selectMsg: a -&amp;gt; msg}
type alias Filters = List Filter ? ?
```
problem lies in storing all filters in a list. I mean I can have a lot of filters carrying different sort of data (and I'd love to avoid casting to string back and forth)
I suppose different msg will not be problematic

any ideas? Thx for help in advanced :+1:</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:05:04.380100</ts>
    <user>Floy</user>
    <text>maybe a little of context</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:05:46.380300</ts>
    <user>Floy</user>
    <text>I need this to be able to produce 3 different functions that will render that data into 2 different views as well as apply the filtering based on stored filters</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:06:11.380500</ts>
    <user>Loriann</user>
    <text>For sure</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:06:22.380700</ts>
    <user>Floy</user>
    <text>based loosely on sortable-table, no data of filters stored inside the model (parent or own), everything built up in view</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:06:37.380900</ts>
    <user>Loriann</user>
    <text>This is the request I am sending from Postman in JS to test</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:06:38.381100</ts>
    <user>Loriann</user>
    <text>xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
xhr.setRequestHeader("cache-control", "no-cache");</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:08:18.381300</ts>
    <user>Loriann</user>
    <text>from origin '&lt;http://localhost:4000&gt;' has been blocked by CORS policy: Request header field content-type is not allowed by Access-Control-Allow-Headers in preflight response.</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:09:24.381600</ts>
    <user>Earlean</user>
    <text>Yep, looks at the 'preflight' request, it's an 'options' request to the same url</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:10:40.381800</ts>
    <user>Loriann</user>
    <text>Hmmm, maybe expectJson is setting that in the request header</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:12:27.382000</ts>
    <user>Earlean</user>
    <text>It is setting the content-type header because you need it set to be sending json</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:13:29.382200</ts>
    <user>Earlean</user>
    <text>If you looks at the headers of the preflight request you'll be able to see what content-types this server allows</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:14:23.382400</ts>
    <user>Earlean</user>
    <text>It's very possible that what you want to do is impossible, I don't know if &lt;http://hooks.zapier.com|hooks.zapier.com&gt; even allows cross origin requests</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:14:49.382600</ts>
    <user>Loriann</user>
    <text>I see what you mean.  The proper request type when sending this is request is application/x-www-form-urlencoded and it works through postman and zapier when sent manually, but I'm not sure how to set this that way with elm.</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:16:13.382800</ts>
    <user>Loriann</user>
    <text>This happens when trying to send data to the Zapier webhooks from inside a web browser and altering the Content-Type header during the process. Because of Cross Browser Security restrictions, your browser will reject these requests. To combat this, do not set a custom Content-Type header in the request.</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:17:11.383000</ts>
    <user>Loriann</user>
    <text>&lt;https://zapier.com/help/common-problems-webhooks/&gt;</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:18:20.383300</ts>
    <user>Loriann</user>
    <text>Thank you for your help, I will hunt through the source to see where that is getting set.  Have a good night ( im so sleepy )</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:26:26.383500</ts>
    <user>Earlean</user>
    <text>Ah.....so zapiers API is just badly implemented.</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:28:55.383700</ts>
    <user>Earlean</user>
    <text>You could try using &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#stringBody&gt; with the first parameter as "text/plain"</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:40:24.383900</ts>
    <user>Loriann</user>
    <text>yeah... the API has some flaws, but it sure talks to alot</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:40:42.384100</ts>
    <user>Loriann</user>
    <text>I found the answer with your help after some digging:</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:40:45.384300</ts>
    <user>Loriann</user>
    <text>&lt;https://github.com/elm/http/blob/master/src/Http.elm&gt;</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:41:13.384500</ts>
    <user>Loriann</user>
    <text>{-| Put some JSON value in the body of your `Request`. This will automatically
add the `Content-Type: application/json` header.
-}</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:41:44.384700</ts>
    <user>Loriann</user>
    <text>At least I know, thank you for your timo</text>
  </message>
  <message conversation_id="669">
    <ts>2019-03-04T02:41:46.384900</ts>
    <user>Loriann</user>
    <text>time</text>
  </message>
  <message conversation_id="672">
    <ts>2019-03-04T03:07:50.385300</ts>
    <user>Nana</user>
    <text>using custom elements for this sounds terrible though :grimacing: I think they should only be at the edge of your system, not integrated inte core stuff like that</text>
  </message>
  <message conversation_id="672">
    <ts>2019-03-04T03:08:40.385500</ts>
    <user>Nana</user>
    <text>I agree that having the view determine what data you fetch is a nice thing though, that's how our Vue app works</text>
  </message>
  <message conversation_id="672">
    <ts>2019-03-04T03:10:54.385700</ts>
    <user>Nana</user>
    <text>&lt;@Tamra&gt; saw someone had actually made an example of that, seems like a bit of an extreme solution though :stuck_out_tongue:</text>
  </message>
  <message conversation_id="672">
    <ts>2019-03-04T04:29:32.386000</ts>
    <user>Floy</user>
    <text>ok, I guess I managed to figure it out</text>
  </message>
  <message conversation_id="673">
    <ts>2019-03-04T04:30:46.386200</ts>
    <user>Floy</user>
    <text>the trick was to do some transformation for the sake of data structure of the filter</text>
  </message>
  <message conversation_id="674">
    <ts>2019-03-04T04:35:30.387000</ts>
    <user>Eleanor</user>
    <text>hi, guys, how it is possible to send object through port?</text>
  </message>
  <message conversation_id="672">
    <ts>2019-03-04T04:41:54.387500</ts>
    <user>Nana</user>
    <text>&lt;@Eleanor&gt; I think you have to use a JSON encoder/decoder</text>
  </message>
  <message conversation_id="672">
    <ts>2019-03-04T04:42:18.387800</ts>
    <user>Eleanor</user>
    <text>thanks</text>
  </message>
  <message conversation_id="674">
    <ts>2019-03-04T04:57:34.389800</ts>
    <user>Hoa</user>
    <text>Anybody here with experience in `elm-style-animation`?  I would like to know if there’s an obvious way to send a message when the animation is finished. I believe it is something that `Animation.Messenger` can do, but how ?</text>
  </message>
  <message conversation_id="674">
    <ts>2019-03-04T04:59:47.390600</ts>
    <user>Hoa</user>
    <text>Uhm. Looks like &lt;https://github.com/mdgriffith/elm-style-animation/blob/master/examples/SimpleSendMsg.elm#L53&gt; you can chain animation and the send msg.</text>
  </message>
  <message conversation_id="674">
    <ts>2019-03-04T05:00:53.391200</ts>
    <user>Hoa</user>
    <text>So I have to use `Animation.queue`</text>
  </message>
  <message conversation_id="674">
    <ts>2019-03-04T05:03:01.391400</ts>
    <user>Cornell</user>
    <text>Or `Animation.interrupt`</text>
  </message>
  <message conversation_id="674">
    <ts>2019-03-04T05:04:43.391900</ts>
    <user>Hoa</user>
    <text>OK, thank you Matthew!</text>
  </message>
  <message conversation_id="674">
    <ts>2019-03-04T05:04:55.392100</ts>
    <user>Cornell</user>
    <text>No problem :smile:</text>
  </message>
  <message conversation_id="675">
    <ts>2019-03-04T07:10:50.398400</ts>
    <user>Tanesha</user>
    <text>hi, is there some naming convention for `Msg` when it comes to making HTTP requests? Example `fetch/update` some kind of "settings".
```
FetchSettings - initiate request
ReceiveSettings(...) - handle response from above ^
UpdateSettings(...) - initiate request to update settings
ChangeSettings(...) - handle response from above ^
```
I wish naming where clearer.</text>
  </message>
  <message conversation_id="675">
    <ts>2019-03-04T07:30:57.401100</ts>
    <user>Leonore</user>
    <text>I always tend to name my `Msg`s after the events that happened not the other way around. Say you trigger fetching settings from a button click. Then I would name it something like `RetrieveButtonClicked`. This is also much useful when you are handling the responses. Your second `Msg` can be then called `RetrievedSettings`.</text>
  </message>
  <message conversation_id="676">
    <ts>2019-03-04T08:22:31.402200</ts>
    <user>Marlys</user>
    <text>Is anybody here using elm with haskell servant?</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:42:59.404700</ts>
    <user>Moshe</user>
    <text>Can we determine which `Html.Attribute` *values* are passed to a function? I would like determine if something is `disabled` without adding additional parameters (in order to keep the API for a custom function the same as for a standard html element).</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:43:29.404800</ts>
    <user>Moshe</user>
    <text>Actually I’m currently thinking about it. Let me know if it works for you :smile:</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:45:05.405000</ts>
    <user>Marlys</user>
    <text>The official packages on Hackage are broken. I'm trying out the NoRedInk forks:
- &lt;https://github.com/NoRedInk/elm-export&gt;
- &lt;https://github.com/NoRedInk/servant-elm&gt;
These seem working</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:49:55.405200</ts>
    <user>Moshe</user>
    <text>Hmmm… that’s a little disappointing. I was hoping for some more straight forward integration.

Are you using stack to manage your project?</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:52:04.405400</ts>
    <user>Marlys</user>
    <text>yes</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:52:11.405600</ts>
    <user>Marlys</user>
    <text>it's easy to integrate those packages with stack</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:52:40.405800</ts>
    <user>Marlys</user>
    <text>add:

- github: NoRedInk/elm-export
  commit: a6b7a9a315bd24cde663012fcbb5fd35d1129a72
- github: NoRedInk/servant-elm
  commit: 84cb393969305d539daed2c10850b8a40f3fb398

to the extra-deps in the stack.yaml</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:52:56.406000</ts>
    <user>Marlys</user>
    <text>you can replace the commit hash with a newer one from github</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:53:49.406300</ts>
    <user>Marlys</user>
    <text>stack will automatically resolve the right dependencies in your package.yaml</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:56:22.406500</ts>
    <user>Marlys</user>
    <text>awesome... it's working :^&amp;gt;</text>
  </message>
  <message conversation_id="677">
    <ts>2019-03-04T08:56:36.406700</ts>
    <user>Marlys</user>
    <text>:heart:</text>
  </message>
  <message conversation_id="678">
    <ts>2019-03-04T09:15:36.407100</ts>
    <user>Lynne</user>
    <text>No,  that's not possible &lt;@Moshe&gt;</text>
  </message>
  <message conversation_id="678">
    <ts>2019-03-04T10:10:10.407300</ts>
    <user>Moshe</user>
    <text>aah nice :slightly_smiling_face: congrats!</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:13:18.409700</ts>
    <user>Sherill</user>
    <text>hi everyone, I'm struggling to have webpack 4 working with elm 0.19, in production mode</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:13:52.410500</ts>
    <user>Sherill</user>
    <text>it works perfectly fine in dev, while in prod (with and without uglifyjs optimizations described on elm blog) it raises this error on a blank page:</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:13:55.410700</ts>
    <user>Sherill</user>
    <text>`Uncaught TypeError: Cannot read property 'Elm' of undefined`</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:14:08.411000</ts>
    <user>Sherill</user>
    <text>the stack trace points here</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:14:16.411400</ts>
    <user>Sherill</user>
    <text>```
function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}
```</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:17:30.411700</ts>
    <user>Van</user>
    <text>it’s not related to elm</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:19:45.411900</ts>
    <user>Sherill</user>
    <text>yeah the stacktrace starts from the .js file where I import the main elm module...</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:21:21.412100</ts>
    <user>Noelle</user>
    <text>I have something working with webpack and elm</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:21:22.412300</ts>
    <user>Noelle</user>
    <text>&lt;https://github.com/romariolopezc/elm-webpack-4-starter/blob/master/src/index.js&gt;</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:21:35.412500</ts>
    <user>Noelle</user>
    <text>Be sure that the index.html is importing the generated JS file</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:26:29.412700</ts>
    <user>Sherill</user>
    <text>well, i'm importing the main module like this: `import { Elm } from "../elm/Crash.elm";`</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:26:54.412900</ts>
    <user>Sherill</user>
    <text>and then initing like this: `const app = Elm.Crash.init({})`</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:27:27.413100</ts>
    <user>Sherill</user>
    <text>inside `index.html`i'm including the bundle</text>
  </message>
  <message conversation_id="680">
    <ts>2019-03-04T11:32:08.413300</ts>
    <user>Noelle</user>
    <text>What minimizer do you use?</text>
  </message>
  <message conversation_id="680">
    <ts>2019-03-04T11:32:29.413500</ts>
    <user>Noelle</user>
    <text>UglifyJS doesn’t support ES6</text>
  </message>
  <message conversation_id="680">
    <ts>2019-03-04T11:32:39.413700</ts>
    <user>Noelle</user>
    <text>Change to TerserJS and try it</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:33:04.414000</ts>
    <user>Sherill</user>
    <text>oh, ok</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T11:48:56.415000</ts>
    <user>Sherill</user>
    <text>it doesn't seem to be working either with TerserJS :confused:</text>
  </message>
  <message conversation_id="680">
    <ts>2019-03-04T12:01:56.415200</ts>
    <user>Noelle</user>
    <text>Hmm copy paster the webpack template config and index.js and index.html haha</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T12:04:17.415400</ts>
    <user>Sherill</user>
    <text>sure, will do tomorrow</text>
  </message>
  <message conversation_id="679">
    <ts>2019-03-04T12:04:19.415600</ts>
    <user>Sherill</user>
    <text>thanks again!</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T12:58:00.416000</ts>
    <user>Shelli</user>
    <text>I do a fresh installation: `npm i elm@0.18 -g`
I try to build using: `elm-make ./src/scripts/MainModule.elm`
I get: “elm-make: elm-package.json: openBinaryFile: does not exist (No such file or directory)”
But the `elm-package.json` file is right in the directory where i’m calling `elm-make` from.
Thoughts?</text>
  </message>
  <message conversation_id="682">
    <ts>2019-03-04T13:31:49.417400</ts>
    <user>Milda</user>
    <text>Is `elm-make` in your PATH? Is `elm`? Does your shell cache the command names from PATH (for ex zsh does this)?</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:45:24.417900</ts>
    <user>Shelli</user>
    <text>```
mac-mini:frontend admin$ which elm
/Users/admin/.nvm/versions/node/v9.4.0/bin/elm
mac-mini:frontend admin$ which elm-make
/Users/admin/.nvm/versions/node/v9.4.0/bin/elm-make
```
Does this answer the first two?</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:45:57.418100</ts>
    <user>Shelli</user>
    <text>How do I check for your third question?</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:46:30.418400</ts>
    <user>Milda</user>
    <text>If you're using `zsh` then running `exec zsh` might help for the current shell. Newly started ones should be fine.</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:46:55.418600</ts>
    <user>Milda</user>
    <text>If it's bash or something else/something Mac-specific, I don't think this will happen.</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:47:32.418800</ts>
    <user>Shelli</user>
    <text>it’s regular mac bash shell</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:47:43.419000</ts>
    <user>Shelli</user>
    <text>fresh machine installation</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:48:49.419200</ts>
    <user>Shelli</user>
    <text>Stack Overflow here: &lt;https://stackoverflow.com/q/54989374/592641&gt;</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:48:51.419500</ts>
    <user>Milda</user>
    <text>And it's an `elm-package.json` not an `elm.json`, right?</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:49:11.419800</ts>
    <user>Shelli</user>
    <text>Discourse here: &lt;https://discourse.elm-lang.org/t/elm-make-elm-package-json-openbinaryfile-does-not-exist/3260?u=birowsky&gt;</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:49:29.420000</ts>
    <user>Shelli</user>
    <text>correct</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:50:51.420200</ts>
    <user>Milda</user>
    <text>And does `$(which elm-make) ./src/scripts/MainModule.elm` have the same issue?</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:51:31.420400</ts>
    <user>Shelli</user>
    <text>yes, just tried</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:52:40.420700</ts>
    <user>Milda</user>
    <text>Other commands open it just fine? Ex `wc elm-package.json`?</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:53:00.420900</ts>
    <user>Shelli</user>
    <text>i tried nano, works fine</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:56:36.421100</ts>
    <user>Milda</user>
    <text>:thinking_face:  You didn't rename/move the directory or something like that?</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:58:35.421300</ts>
    <user>Milda</user>
    <text>(That's a real stretch but I'm failing to come up with anything else that could be wrong.)</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T13:59:13.421500</ts>
    <user>Milda</user>
    <text>(If it's Mac specific I'll probably have no way to know. Also don't know how nvm might affect things. Sorry.)</text>
  </message>
  <message conversation_id="681">
    <ts>2019-03-04T14:01:21.421700</ts>
    <user>Shelli</user>
    <text>thanx for trying nonetheless!</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-04T14:29:39.422300</ts>
    <user>Leoma</user>
    <text>Any good options beyond Electron for using Elm in a native app?</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-04T14:32:05.422800</ts>
    <user>Ashton</user>
    <text>I think the answer is no. Is electron giving you trouble?</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-04T14:34:22.423700</ts>
    <user>Leoma</user>
    <text>I haven’t yet started! Just wanted to know what else I should consider. I recall there being some other more “lightweight” options. And I thought I saw something on HN recently.</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-04T14:36:47.424500</ts>
    <user>Milda</user>
    <text>&lt;https://crates.io/crates/web-view&gt; might be the thing you saw (or it might be smth else)</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-04T14:38:00.425500</ts>
    <user>Milda</user>
    <text>This will have some engine differences between platforms though.</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-04T14:38:31.426200</ts>
    <user>Sabra</user>
    <text>&lt;https://deskgap.com/&gt; is an interesting project that uses the platform’s built-in webview rather than bringing in all of chromium</text>
  </message>
  <message conversation_id="684">
    <ts>2019-03-04T15:17:23.427400</ts>
    <user>Desire</user>
    <text>theres also the go option that was announced at fosdem, but not ready for long. and if you ask me not very promissing</text>
  </message>
  <message conversation_id="685">
    <ts>2019-03-04T18:40:17.440900</ts>
    <user>Monnie</user>
    <text>&lt;@Leoma&gt; You can make a dead simple native wrapper with only a single fixed webView that opens your elm webapp?  You can easily talk to native ios or android via ports. That is the most lightweight solution possible. And you have access to everyting on the native side via ports. I am doing this for an Augmented reality app I develop. (Camera is show  on native side, and a fullscreen transperent elm webpage loads on top of the videoStream)</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:45:00.444300</ts>
    <user>Danika</user>
    <text>&lt;https://twitter.com/horse_js/status/1102688550972284929?s=21&gt;</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:45:05.444600</ts>
    <user>Danika</user>
    <text>Well this doesn’t bode well</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:46:05.445400</ts>
    <user>Danika</user>
    <text>although the whole webcomponent system is a big clusterf*ck anyway. V0 support has been dropped</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:48:45.446600</ts>
    <user>Jae</user>
    <text>There doesn't seem to be any `Array.insert` in the core library or in `elm-community/array-extra`. Is there a different name for it or another library that includes it?</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:49:19.446700</ts>
    <user>Jae</user>
    <text>Specifically, I want to be able to insert a value into an array at a given index.</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:51:32.446900</ts>
    <user>Lynne</user>
    <text>There is `Array.set`</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:52:01.447100</ts>
    <user>Jae</user>
    <text>That replaces the value at a given index though?</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:52:09.447300</ts>
    <user>Lynne</user>
    <text>Yes, it does</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:53:35.447500</ts>
    <user>Jae</user>
    <text>I'd like to be able to do this
`['a','c'] |&amp;gt; Array.fromList |&amp;gt; Array.insert 1 'b' -- Equals ['a','b','c'] not ['a', 'b']`</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:53:55.447700</ts>
    <user>Lynne</user>
    <text>Inserting without replacing would effectively mean reconstructing array as other items need to be shifted as well</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:54:47.447900</ts>
    <user>Lynne</user>
    <text>You may use `toIndexedList`, `foldl`/`foldr` and `fromList`  to implement it yourself</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:54:57.448100</ts>
    <user>Huong</user>
    <text>or `slice` and `append`</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:55:05.448300</ts>
    <user>Lynne</user>
    <text>Right</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:55:56.448600</ts>
    <user>Jae</user>
    <text>Even if there are performance concerns it surprises me that it isn't included in array-extra.  I'll implement it myself then, thanks!</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:56:00.448800</ts>
    <user>Huong</user>
    <text>```insertAt : Int -&amp;gt; a -&amp;gt; Array a -&amp;gt; Array a
insertAt index val values =
    let
        before =
            Array.slice 0 index values

        after =
            Array.slice index (Array.length values) values
    in
    Array.append (Array.push val before) after```</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:56:21.449000</ts>
    <user>Jae</user>
    <text>(or I'll just use your code)</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:56:38.449200</ts>
    <user>Lynne</user>
    <text>Might also be good to create PR in array-extra with it :wink:</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:56:52.449600</ts>
    <user>Jae</user>
    <text>Good point!</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:57:32.449800</ts>
    <user>Huong</user>
    <text>Feel free - I just adapted that from some other code where I do a similar thing and happen to use arrays under the hood :slightly_smiling_face:</text>
  </message>
  <message conversation_id="683">
    <ts>2019-03-05T03:57:39.450000</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/zwilias/elm-reorderable/blob/1.2.0/src/Reorderable.elm#L146-L156&gt;</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T04:57:08.451500</ts>
    <user>Karrie</user>
    <text>hello everyone!
is there a way I can encode a list of records that looks like this `[{ name = "filter", value = "" }, { name = "paginate", value = "yes" }]`
to a json looking like this: `{"filter": "no", "paginate": "yes"}` ?</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T04:57:22.451800</ts>
    <user>Karrie</user>
    <text>any help is appreciated</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:01:06.453300</ts>
    <user>Sherill</user>
    <text>i've downgraded to webpack 3, using the configuration that worked for elm 0.18, and it gives the very same error, both on webpack 3 and 4...</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:01:33.454100</ts>
    <user>Lynne</user>
    <text>`Encode.object (List.map (\{name, value} -&amp;gt; (name, Encode.string value)) records)`</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:01:34.454300</ts>
    <user>Sherill</user>
    <text>it really looks to be a problem with elm 0.19 and how it needs to be imported... I've even disabled any kind of optimization/mangling</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:01:47.454500</ts>
    <user>Lynne</user>
    <text>Also convert empty string to "no" but that's a simple `if` expression</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:03:16.454900</ts>
    <user>Lynne</user>
    <text>I use webpack 4 with Elm 0.19 and Babel and don't have any problem</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:03:30.455100</ts>
    <user>Lynne</user>
    <text>So there is something with your libs/config</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:03:48.455300</ts>
    <user>Lynne</user>
    <text>Did you upgrade `elm-webpack-loader` and replace `elm-hot-loader` with `elm-webpack-hot-loader`?</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:04:41.455600</ts>
    <user>Sherill</user>
    <text>straight out of my `package.json`</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:04:49.455800</ts>
    <user>Sherill</user>
    <text>```
"elm-hot-webpack-loader": "^1.0.2",
 "elm-webpack-loader": "^5.0"
```</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:05:06.456000</ts>
    <user>Lynne</user>
    <text>Same</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:05:08.456200</ts>
    <user>Sherill</user>
    <text>but really I'm not using HMR in dev, I'm serving development bundle from phoenix (elixir)</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:05:16.456400</ts>
    <user>Sherill</user>
    <text>and my dev config works fine</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:05:26.456600</ts>
    <user>Lynne</user>
    <text>Right, I remember now</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:05:30.456800</ts>
    <user>Sherill</user>
    <text>in prod, it gives that very same error I posted yesterday</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:05:45.457000</ts>
    <user>Lynne</user>
    <text>And you are not using Babel?</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:05:58.457200</ts>
    <user>Sherill</user>
    <text>yes I am</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:06:07.457400</ts>
    <user>Sherill</user>
    <text>would you mind if I post my webpack config?</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:06:10.457600</ts>
    <user>Sherill</user>
    <text>it's very small</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T05:06:17.457800</ts>
    <user>Lynne</user>
    <text>Nope, I was about to ask about it</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:47:26.459500</ts>
    <user>Nana</user>
    <text>we're planning to send an entire dataset to the browser, and filtering it there. I'm thinking if I should set up a webworker to do the fetching and filtering, in order to avoid blocking the UI</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:48:40.459600</ts>
    <user>Nana</user>
    <text>the maximum amount of data would be around 50.000 rows, with a decent amount of data per row</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:50:31.459800</ts>
    <user>Nana</user>
    <text>anyone tried something like this?</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:53:14.460100</ts>
    <user>Lynne</user>
    <text>Our app became unresponsive at amounts around 5000 objects (rows)</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:53:26.460300</ts>
    <user>Lynne</user>
    <text>So in your case having a webworker is a must I think</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:55:09.460500</ts>
    <user>Nana</user>
    <text>Only 5000? :fearful: Are they huge objects then?</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:57:08.460700</ts>
    <user>Lynne</user>
    <text>Well, not that big but not small either. About ten fields with several child objects about ten fields each. Sometimes there were hundreds of those child objects though.</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:57:41.460900</ts>
    <user>Lynne</user>
    <text>The point is that processing even that big lists took time, in your case it will take even longer</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:59:04.461100</ts>
    <user>Lynne</user>
    <text>In our case unresponsiveness was caused mostly by other reasons, it does not mean that Elm/JS can't work with thousands of objects</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:59:14.461300</ts>
    <user>Lynne</user>
    <text>But if you do it on the UI thread it will be noticeable</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:59:36.461500</ts>
    <user>Lynne</user>
    <text>It won't take 16 ms, I can guarantee that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T06:59:59.461700</ts>
    <user>Lynne</user>
    <text>And you'll start skipping frames at least</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T07:00:57.461900</ts>
    <user>Nana</user>
    <text>Yeah, so a webworker seems like the way to go then</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T07:01:05.462100</ts>
    <user>Lynne</user>
    <text>I think so</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T07:05:26.462300</ts>
    <user>Nana</user>
    <text>there's no way to send Lists of Records between Elm apps without using a JSON decoder, right?</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T07:07:23.462500</ts>
    <user>Lynne</user>
    <text>If these records does not contain custom types you could probably rely on default serialization/deserialization</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T07:07:48.462700</ts>
    <user>Nana</user>
    <text>although actually I can probably just use the same decoder as for the http</text>
  </message>
  <message conversation_id="686">
    <ts>2019-03-05T07:08:34.462900</ts>
    <user>Lynne</user>
    <text>Probably, and at some point you'll want to have more control over deserialization so I would probably use some shared model even</text>
  </message>
  <message conversation_id="687">
    <ts>2019-03-05T07:29:47.464700</ts>
    <user>Toni</user>
    <text>Hi there, just a :wave: to say thanks for the feature of assets loading in elm-reactor relative to root path of the project detailed here : &lt;https://blog.ilias.xyz/elm-reactor-and-custom-html-9e7143553807&gt;  Idk how I missed the info in the docs, but it's a really cool feature, can load images and stuff, good job</text>
  </message>
  <message conversation_id="688">
    <ts>2019-03-05T07:44:16.465000</ts>
    <user>Huong</user>
    <text>I should probably update that article, though. The "magic compiled Elm code" hack isn't a thing anymore.</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:08:06.466500</ts>
    <user>Genia</user>
    <text>Hi folks, I encountered runtime error when I test the ‘travel planner’ example in billstclair/elm-sortable-table. The runtime “TypeError: Argument 1 (‘node’) to Node.appendChild must be an instance of Node” occurred, when clicking on ‘Rating’ column after clicking on ‘Price’ column. The gif is attached.
Is this a known elm bug?</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:10:40.467300</ts>
    <user>Jin</user>
    <text>Do you have any browser extensions installed that might modify the DOM?</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:12:44.468800</ts>
    <user>Genia</user>
    <text>Oh yeah, &lt;@Jin&gt; you are right, that could be the reason. I will test again, thank you for the pointer.</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:17:54.470300</ts>
    <user>Genia</user>
    <text>&lt;@Jin&gt; oh no, still the same  error when I tried in google chrome and firefox safe mode.</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:21:52.470500</ts>
    <user>Toni</user>
    <text>Ah maybe, I didn't try that part. Just the "everything in the directory is exposed through elm-reactor"</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:26:08.472200</ts>
    <user>Jin</user>
    <text>Hm, I can reproduce the error.</text>
  </message>
  <message conversation_id="690">
    <ts>2019-03-05T08:27:07.473200</ts>
    <user>Danika</user>
    <text>does the elm architecture still fit under the "functional reactive programming" vibe. I know pre 0.17(?) elm was all-in on FRP and that TEA emerged from that, is it safe to say that the elm architecture is a type or implementation of FRP?</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:32:16.473300</ts>
    <user>Nana</user>
    <text>&amp;gt; So is Elm about FRP anymore? No. Those days are over now. Elm is just a functional language that takes concurrency very seriously. And from a user's perspective, Elm is just a friendly functional language!</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:32:27.473500</ts>
    <user>Nana</user>
    <text>&lt;https://elm-lang.org/blog/farewell-to-frp&gt;</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:33:04.473700</ts>
    <user>Nana</user>
    <text>Although I've also heard React and Vue being called "FRP" :man-shrugging:</text>
  </message>
  <message conversation_id="690">
    <ts>2019-03-05T08:35:57.473900</ts>
    <user>Danika</user>
    <text>They are, which is why I'm trying to place TEA.</text>
  </message>
  <message conversation_id="690">
    <ts>2019-03-05T08:36:37.474100</ts>
    <user>Niesha</user>
    <text>So FRP is now about as a well-defined word as OOP?</text>
  </message>
  <message conversation_id="690">
    <ts>2019-03-05T08:37:08.474300</ts>
    <user>Danika</user>
    <text>&amp;gt; Somebody really needs to write a "Functional Reactive Programming For Dummies" for all us autodidacts out here. Every resource I've found, even Elm, seems to assume you've gotten a Master's in CS in the last five years. Those knowledgable about FRP seem to have completely lost the ability to see the matter from the naive viewpoint, something critical to teaching, training and evangelizing. – TechZen May 4 '14 at 13:48

Basically this.</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:38:24.474500</ts>
    <user>Niesha</user>
    <text>Ah, the Monad curse</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:38:32.474700</ts>
    <user>Nana</user>
    <text>My guess is that if you're not mapping/folding over time, then it's not "real" FRP in the academic sense</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:39:02.474900</ts>
    <user>Danika</user>
    <text>The gist of it is I'm working on my own programming language, focused on music programming. I'd like to apply TEA to this context but it's hard to talk about it without just referring to the elm docs.</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:43:34.475200</ts>
    <user>Nana</user>
    <text>Wikipedia:
&amp;gt; Functional reactive programming (FRP) is a programming paradigm for reactive programming (asynchronous dataflow programming) using the building blocks of functional programming (e.g. map, reduce, filter).</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:43:59.475400</ts>
    <user>Nana</user>
    <text>by that definition TEA, React and Vue are not FRP</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:44:56.475600</ts>
    <user>Danika</user>
    <text>react and vue aren't the _functional_ part</text>
  </message>
  <message conversation_id="690">
    <ts>2019-03-05T08:45:41.475800</ts>
    <user>Danika</user>
    <text>But they're both built on Rxjs (at least I think react is) which definitely is frp</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:49:37.476000</ts>
    <user>Nana</user>
    <text>neither uses Rxjs, Vue uses it's own Observables, and I think React just uses simple callbacks or something</text>
  </message>
  <message conversation_id="690">
    <ts>2019-03-05T08:52:38.476200</ts>
    <user>Danika</user>
    <text>&amp;gt;.&amp;gt;</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:52:51.476400</ts>
    <user>Danika</user>
    <text>regardless the concept of observables is pretty central to frp</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:55:44.477800</ts>
    <user>Leonore</user>
    <text>Have anybody heard any news regarding the elm-format not working on save problem?</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:56:22.478000</ts>
    <user>Leonore</user>
    <text>&lt;https://github.com/Krzysztof-Cieslak/vscode-elm/issues/275&gt;</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T08:58:47.478400</ts>
    <user>Leonore</user>
    <text>Or any solutions other than running elm-format with every build</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T09:13:25.478800</ts>
    <user>Agustin</user>
    <text>You can run it in a git hook</text>
  </message>
  <message conversation_id="689">
    <ts>2019-03-05T09:15:51.480000</ts>
    <user>Leonore</user>
    <text>I specifically want it for development, it was very convenient to save and format the code while still coding</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:22:18.480300</ts>
    <user>Agustin</user>
    <text>Use a file system watcher that runs in on save?</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:22:34.480700</ts>
    <user>Agustin</user>
    <text>Wont’ show back up in vscode unless that supports automatically picking up the changes tho</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:22:48.481100</ts>
    <user>Agustin</user>
    <text>Or you can set your path so that elm-format is picked up in vscode</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:23:32.481400</ts>
    <user>Danika</user>
    <text>vscode will reflect changes in the file</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:23:39.481600</ts>
    <user>Danika</user>
    <text>shouldn't it?</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:23:47.481700</ts>
    <user>Agustin</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:23:59.482300</ts>
    <user>Agustin</user>
    <text>Not all editors pick up file changes automatically</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:24:03.482400</ts>
    <user>Nana</user>
    <text>yep I've often used VSCode to view log files</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:30:46.482600</ts>
    <user>Agustin</user>
    <text>Install `entr`</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:30:49.482800</ts>
    <user>Agustin</user>
    <text>And run: `find src/ -name '*.elm' | entr npx elm-format --yes /_`</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:31:07.483200</ts>
    <user>Agustin</user>
    <text>On OS X `brew install entr` is available</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:31:38.483700</ts>
    <user>Marlys</user>
    <text>Does anybody here use Haskell Persistent models with elm-export?</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:31:48.484100</ts>
    <user>Leonore</user>
    <text>Interesting, I will have a look</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:31:49.484300</ts>
    <user>Leonore</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:32:13.485000</ts>
    <user>Leonore</user>
    <text>I don't think the elm-format problem is there for OS X anyways</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:33:40.487000</ts>
    <user>Leonore</user>
    <text>The path is set just fine, that's not the problem btw</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:35:13.487500</ts>
    <user>Agustin</user>
    <text>I think `entr` is available on linux</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:35:27.487900</ts>
    <user>Agustin</user>
    <text>According to the issue you linked it is, vscode can’t find the command so can’t run it.</text>
  </message>
  <message conversation_id="692">
    <ts>2019-03-05T09:36:16.489400</ts>
    <user>Lanita</user>
    <text>So thanks to &lt;@Maida&gt; who helped in the beginners channel I have decided to use elm’s interop as a means to solve an issue on a project I am building for a client that requires PDF creation.

I think I narrowed it down to either jspdf, pdfkit or pdfmake. Wondering if anyone has had experience working with any of these and would be willing to share their opinion or recommendations</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:36:20.489600</ts>
    <user>Nana</user>
    <text>Observables are definitely "reactive programming", but not necessarily FRP I think</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:36:38.490100</ts>
    <user>Leonore</user>
    <text>Yeah, that's what it says but it doesn't make sense</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:37:00.490600</ts>
    <user>Leonore</user>
    <text>I can run elm-format from the terminal in vscode just fine</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:40:10.491300</ts>
    <user>Agustin</user>
    <text>What os are you on?</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:40:15.491600</ts>
    <user>Leonore</user>
    <text>Windows 7</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:40:24.491900</ts>
    <user>Agustin</user>
    <text>Yeah, then thats not guarentee</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:40:37.492200</ts>
    <user>Agustin</user>
    <text>You need your system wide path to have elm-format available</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:40:44.492500</ts>
    <user>Leonore</user>
    <text>It is available</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:40:53.492800</ts>
    <user>Agustin</user>
    <text>Its not or it would work</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:41:08.493200</ts>
    <user>Agustin</user>
    <text>Just because thing b can access it doesnt mean your path is right</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:41:36.493800</ts>
    <user>Agustin</user>
    <text>Windows has multiple path environments</text>
  </message>
  <message conversation_id="691">
    <ts>2019-03-05T09:41:56.494000</ts>
    <user>Nana</user>
    <text>and maybe Elm/TEA can be said to be "Functional and Reactive" but not "Functional Reactive" :smile:</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:23:05.496600</ts>
    <user>Karrie</user>
    <text>hello everyone!
is there a setTimeout equivalent in Elm?</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:25:42.496800</ts>
    <user>Rosalee</user>
    <text>Yes! &lt;https://package.elm-lang.org/packages/elm/core/latest/Process#sleep&gt;</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:25:54.497000</ts>
    <user>Karrie</user>
    <text>oh…</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:26:19.497600</ts>
    <user>Karrie</user>
    <text>I remember Elm 0.18 had a Time module but couldn’t find it in Elm 0.19</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:26:29.497900</ts>
    <user>Karrie</user>
    <text>I guess this is the new implementation</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:26:34.498100</ts>
    <user>Karrie</user>
    <text>thanks &lt;@Rosalee&gt;</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:30:14.499200</ts>
    <user>Shenita</user>
    <text>the Time module is still around but it's in its own package now: `elm/time`</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:31:08.500100</ts>
    <user>Shenita</user>
    <text>but for getting update msgs it only has `Time.every` (&lt;https://package.elm-lang.org/packages/elm/time/latest/Time#every&gt;) which gives you a subscription rather than a one-off cmd</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:35:10.501000</ts>
    <user>Karrie</user>
    <text>I just have some html that I need remove after X seconds</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:35:35.501300</ts>
    <user>Karrie</user>
    <text>so Process.sleep will work</text>
  </message>
  <message conversation_id="693">
    <ts>2019-03-05T10:39:35.502700</ts>
    <user>Leonore</user>
    <text>I actually played around with the extension to see what was the reason. Anyways adding `.cmd` after `elm-format` fixed the issue</text>
  </message>
  <message conversation_id="694">
    <ts>2019-03-05T11:09:06.504600</ts>
    <user>Emilee</user>
    <text>i've just noticed that a majority of our integration test build time comes down to installing the elm compiler from npm. is there a way to speed this up? (i'm not sure if I can get npm caching to work^^')</text>
  </message>
  <message conversation_id="694">
    <ts>2019-03-05T11:09:36.504800</ts>
    <user>Emilee</user>
    <text>specifically the `binwrap-install` part</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:07:58.505600</ts>
    <user>Marlys</user>
    <text>Checkin the binaries </text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:09:14.506800</ts>
    <user>Marlys</user>
    <text>and reference the local binary for your integration tests </text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:20:56.507100</ts>
    <user>Huong</user>
    <text>Write more tests :shrug:</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:22:12.507300</ts>
    <user>Jae</user>
    <text>&lt;@Huong&gt;
I tried running your code with the following
`insertAt (-1) 'b' (Array.fromList [ 'a', 'c' ])`
and I can't understand why it returns
`[ 'a', 'b', 'c' ]`
instead of
`[ 'b', 'a', 'c' ]`.
I tried it with other negative values and they all return `[ 'b', 'a', 'c' ]`.</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:26:49.507500</ts>
    <user>Lynne</user>
    <text>I am not Ilias but dare to answer :slightly_smiling_face: This is due to `Array.slice` which treats negative indices as offset from the end of array.</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:28:32.507700</ts>
    <user>Lynne</user>
    <text>So `before` becomes `['a']`, `after` becomes `['c']` and after pushing `'b'` it becomes `['a', 'b', 'c']`</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:28:32.507900</ts>
    <user>Huong</user>
    <text>If you want `[ 'b', 'a', 'c' ]`, you'd have to `max 0 idx` or something. The main reason it behaves this way is because `slice` allows (both) indexes to be negative. so say you give it `-1`, you get `before = Array.slice 0 -1 [ 'a', 'c' ] = [ 'a' ]` and `after = Array.slice -1 2 [ 'a', 'c' ] = [ 'c' ]`</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:28:42.508100</ts>
    <user>Huong</user>
    <text>yeah, exactly that</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:29:28.508300</ts>
    <user>Lynne</user>
    <text>I am sorry for jumping in :slightly_smiling_face:</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:29:41.508500</ts>
    <user>Huong</user>
    <text>to put it another way, the `insertAt` I "proposed" should (I think) also work with negative indexes, just wrapping around the end.</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:29:51.508700</ts>
    <user>Huong</user>
    <text>I haven't tested it, tho</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:30:04.508900</ts>
    <user>Huong</user>
    <text>Nah, I liked your explanation better :shrug:</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:32:11.509100</ts>
    <user>Huong</user>
    <text>```&amp;gt; insertAt -2 "item" (Array.fromList ["a", "b", "c", "d" ])
Array.fromList ["a","b","item","c","d"]
    : Array.Array String
&amp;gt; insertAt -3 "item" (Array.fromList ["a", "b", "c", "d" ])
Array.fromList ["a","item","b","c","d"]
    : Array.Array String```</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:32:26.509300</ts>
    <user>Huong</user>
    <text>yeah, seems to work roughly the way I think it should :smile:</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:33:35.509500</ts>
    <user>Huong</user>
    <text>(I'm _almost_ sad it doesn't `push` with `-0`)</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:35:21.509700</ts>
    <user>Lynne</user>
    <text>It does push but from the LEFT side of the beginning (chuckle)</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:36:11.509900</ts>
    <user>Huong</user>
    <text>Yeah, pretty much, I suppose ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:43:03.511700</ts>
    <user>Tawnya</user>
    <text>Hey beautiful people!
I have a parser that happens to parse urls. Given a sentence I would like to get all urls in the sentence. Similar to `regex.match` in JS
How would I go about doing that?</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:46:02.512100</ts>
    <user>Niesha</user>
    <text>I'd start by picking a parser library via &lt;https://package.elm-lang.org/&gt;</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:47:16.512400</ts>
    <user>Carman</user>
    <text>There is an official regex package: &lt;https://package.elm-lang.org/packages/elm/regex/latest/&gt;</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:47:40.512900</ts>
    <user>Carman</user>
    <text>You can also write a parser with &lt;https://package.elm-lang.org/packages/elm/parser/latest&gt;</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:49:07.514200</ts>
    <user>Carman</user>
    <text>Are you looking to do something like:
```
parseUrls : String -&amp;gt; List Url
```

or something more like:
```
type Content
  = Text String
  | Link Url

parseContent : String -&amp;gt; List Content
```</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:49:41.514400</ts>
    <user>Tawnya</user>
    <text>The second</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:50:03.514900</ts>
    <user>Tawnya</user>
    <text>The second one is exactly what I need.</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:50:15.515300</ts>
    <user>Tawnya</user>
    <text>I have a `Parser Url`</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:50:50.516100</ts>
    <user>Tawnya</user>
    <text>How could I implement a function `parseMayTimes: Parser a -&amp;gt; String -&amp;gt; List a`?</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:52:30.516400</ts>
    <user>Carman</user>
    <text>You may want `Parser.loop`</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:52:32.516600</ts>
    <user>Alicia</user>
    <text>does it happen if you cache `node_modules` as well between builds?</text>
  </message>
  <message conversation_id="695">
    <ts>2019-03-05T12:52:32.516800</ts>
    <user>Carman</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop&gt;</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:53:00.517300</ts>
    <user>Carman</user>
    <text>Probably with one of the chomp functions to consume non-url strings</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:53:53.518100</ts>
    <user>Virgie</user>
    <text>and `backtrackable` so you can try to parse a url, but then if the first character looks like a url but then it actually isn't, you can fall back to chomping</text>
  </message>
  <message conversation_id="696">
    <ts>2019-03-05T12:55:34.518800</ts>
    <user>Tawnya</user>
    <text>Thanks guys. I will give it a try.</text>
  </message>
  <message conversation_id="697">
    <ts>2019-03-05T13:35:06.519000</ts>
    <user>Jae</user>
    <text>Sorry, late reply but thanks for the explanation. I personally think that `Array.slice` behaves unintuitively but at least it's not a bug.</text>
  </message>
  <message conversation_id="698">
    <ts>2019-03-05T13:56:34.519500</ts>
    <user>Jin</user>
    <text>&lt;@Tawnya&gt; This talk might help. &lt;https://www.youtube.com/watch?v=suSAfow2rmM&gt;</text>
  </message>
  <message conversation_id="699">
    <ts>2019-03-05T14:08:33.520600</ts>
    <user>Salvador</user>
    <text>I just finished migrating to elm/http 2.0, phew!  Once you get your head around it, it is much easier.</text>
  </message>
  <message conversation_id="699">
    <ts>2019-03-05T14:08:48.520900</ts>
    <user>Salvador</user>
    <text>But it was a lot of work.</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:34:28.523500</ts>
    <user>Rufina</user>
    <text>Hello! Hopefully this is the right place to ask this.

I have just been working with the elm-form library and once I fixed all the errors in my code, the compilation seems to fail with no errors. Its rather confusing.

I've uploaded it to Ellie here: &lt;https://ellie-app.com/4Tw5fDwx8v6a1&gt;

If anyone has any ideas I would be thankful!</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:38:49.525600</ts>
    <user>Bert</user>
    <text>So based on the Ellie it seems the compilation succeeds, but the generated JS is not good. It's that what's happening? </text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:39:23.526000</ts>
    <user>Carman</user>
    <text>Ellie reports the compilation as succeeding but it doesn't seem to actually succeed :thinking_face:</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:39:37.526300</ts>
    <user>Carman</user>
    <text>I notice most functions don't have signatures</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:39:48.526600</ts>
    <user>Carman</user>
    <text>adding those is usually my first step to debugging compiler weirdness</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:41:06.527200</ts>
    <user>Bert</user>
    <text>That's a great point</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:41:08.527300</ts>
    <user>Rufina</user>
    <text>ok, I will try to figure those out :stuck_out_tongue:</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:42:55.529700</ts>
    <user>Bert</user>
    <text>Sometimes the compiler can come up with super strange types that technically would work but aren't what I meant at all, if I have no type annotations in the code. </text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:44:10.531200</ts>
    <user>Bert</user>
    <text>And those super strange types might be grounds for unexplored bugs in the compiler</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T14:44:22.531400</ts>
    <user>Rufina</user>
    <text>interesting. It's probably a good habit to get into anyway</text>
  </message>
  <message conversation_id="701">
    <ts>2019-03-05T15:08:24.532400</ts>
    <user>Vilma</user>
    <text>is there a way to tell `elm/parser` it has to parse two lines besides using `|. symbol "\n"` in the place where the line change is expected?</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T15:09:37.532700</ts>
    <user>Kris</user>
    <text>&lt;@Rufina&gt; You dont have a main</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T15:10:08.533100</ts>
    <user>Kris</user>
    <text>so the code compiles yielding nothing</text>
  </message>
  <message conversation_id="701">
    <ts>2019-03-05T15:28:06.534100</ts>
    <user>Virgie</user>
    <text>&lt;@Vilma&gt; how do you mean, just "fast-forward" until two newlines have been encountered, or stop at the second newline, or something else?</text>
  </message>
  <message conversation_id="700">
    <ts>2019-03-05T18:01:18.535000</ts>
    <user>Rufina</user>
    <text>Now I feel stupid. Thanks for finding the problem!</text>
  </message>
  <message conversation_id="702">
    <ts>2019-03-05T18:35:04.537300</ts>
    <user>Jacquelyn</user>
    <text>Is there a way to make a `&amp;lt;script&amp;gt;` tag in Elm? For Algolia with InstantSearch, I need a `&amp;lt;script&amp;gt;` tag with a specific `type` and `id`:
```
Html.node "script" [ attribute "type" "text/html", attribute "id" "hit-template" ] [...]
```
However, that creates a `&amp;lt;p&amp;gt;` tag instead of a `&amp;lt;script&amp;gt;` for some reason…</text>
  </message>
  <message conversation_id="702">
    <ts>2019-03-05T18:37:40.538200</ts>
    <user>Earlean</user>
    <text>&lt;@Jacquelyn&gt; the virtual dom package intentionally prevents the creation of script tags</text>
  </message>
  <message conversation_id="702">
    <ts>2019-03-05T18:38:18.538600</ts>
    <user>Jacquelyn</user>
    <text>I see… hmm, so I can’t use InstantSearch then?</text>
  </message>
  <message conversation_id="702">
    <ts>2019-03-05T18:39:09.538900</ts>
    <user>Jacquelyn</user>
    <text>I can try to make it work as a custom element</text>
  </message>
  <message conversation_id="703">
    <ts>2019-03-05T19:00:38.540200</ts>
    <user>Adrian</user>
    <text>I've realised that, more than once, I've done something badly in Elm because I've not fully understood TEA. Is there a particularly good in-depth explanation anywhere that is worth watching before creating large elm apps?</text>
  </message>
  <message conversation_id="704">
    <ts>2019-03-05T20:24:21.540700</ts>
    <user>Jarvis</user>
    <text>&lt;@Cammy&gt; that works? i was looking for an attribute based approach but they didn't seem to work. i'll look again. btw, loved your oslo talk. i wish your discourse thread wasn't locked (10 days idle)</text>
  </message>
  <message conversation_id="704">
    <ts>2019-03-05T20:33:28.541000</ts>
    <user>Euna</user>
    <text>anyone gotten this before?</text>
  </message>
  <message conversation_id="704">
    <ts>2019-03-05T20:33:28.541200</ts>
    <user>Euna</user>
    <text>elm: not enough bytes
CallStack (from HasCallStack):
  error, called at libraries/binary/src/Data/Binary.hs:212:21 in binary-0.8.5.1:Data.Binary</text>
  </message>
  <message conversation_id="704">
    <ts>2019-03-05T20:43:33.541800</ts>
    <user>Ruthann</user>
    <text>that’s a known issue, `rm -rf elm-stuff/` and rebuild</text>
  </message>
  <message conversation_id="704">
    <ts>2019-03-05T21:08:09.544100</ts>
    <user>Cammy</user>
    <text>Yes, it does work. If memory serves there’s a volume attribute in html.attributes, and muted can be created. If needed, hit me up later in the week and I’ll make the custom attributes. You can also find them in my 0.18 elm-media package and can copy and paste. </text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T22:43:17.544900</ts>
    <user>Lupita</user>
    <text>am i going to get in trouble if i cross post?  i have a very simple question  in beginners and no one around</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T22:51:48.545400</ts>
    <user>Ruthann</user>
    <text>general has more :eyes:s what’s the question &lt;@Lupita&gt;</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T22:55:57.546400</ts>
    <user>Lupita</user>
    <text>i want to put in logic to change the color when &amp;gt; 0 or &amp;lt; 0  sorry , i know my color logic is wrong, complete noob</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T22:55:59.546600</ts>
    <user>Lupita</user>
    <text>&lt;https://ellie-app.com/4TFLKgyyvKNa1&gt;</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T23:56:10.548400</ts>
    <user>Ruthann</user>
    <text>geesh, no one on general either:
```
div []
    [ button [ onClick Decrement ] [ text "-" ]
    , div [style "color" model.color] [ text (String.fromInt model.count) ]
    , button [ onClick Increment ] [ text "+" ]
    , button [ onClick Reset ] [ text "Reset" ]
    ]

-- change the second div 

let
    textColor =
        if model.count &amp;gt; 0 then
            model.color
        else
            model.otherColor
in        
div []
    [ button [ onClick Decrement ] [ text "-" ]
    , div [style "color" textColor] [ text (String.fromInt model.count) ]
    , button [ onClick Increment ] [ text "+" ]
    , button [ onClick Reset ] [ text "Reset" ]
    ]
```

&lt;@Lupita&gt;</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T23:58:07.548600</ts>
    <user>Lupita</user>
    <text>tx</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T23:58:22.549000</ts>
    <user>Lupita</user>
    <text>was an interesting beginner exercise.</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T23:58:59.549600</ts>
    <user>Lupita</user>
    <text>should there be an in in that statement?</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T23:59:03.549800</ts>
    <user>Ruthann</user>
    <text>in general, anything that does not rely on changing the state of your app will go into the `view` function</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T23:59:08.550000</ts>
    <user>Ruthann</user>
    <text>yes, hang on… added, thx</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-05T23:59:30.550600</ts>
    <user>Lupita</user>
    <text>computed values go into view</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:00:02.551600</ts>
    <user>Lupita</user>
    <text>so used to c#, js which i code in that it's hard to come back to functional</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:00:05.551700</ts>
    <user>Ruthann</user>
    <text>yep, views cannot mutate your state, they get the read only version</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:00:36.552500</ts>
    <user>Lupita</user>
    <text>been watch richard feldman on youtube.  he's great</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:01:03.553500</ts>
    <user>Ruthann</user>
    <text>took me a while to get comfortable with it, if you ever get to the point in C# where you’re declaring static classes and static methods… then you know you need functional in your life</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:01:07.553700</ts>
    <user>Lupita</user>
    <text>such a simple plan for the web.  have to laugh tbh, i've seen some dozies</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:01:46.554500</ts>
    <user>Lupita</user>
    <text>our app is dependency injected to hell</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:01:51.554800</ts>
    <user>Ruthann</user>
    <text>:smile:</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:02:08.555600</ts>
    <user>Ruthann</user>
    <text>his video on ‘impossible state’ is pretty good</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:02:23.556000</ts>
    <user>Lupita</user>
    <text>makes me SMH everytime i see it.  and the thing is that it's only one depencency, it never changes</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:03:52.557500</ts>
    <user>Lupita</user>
    <text>i mean i sort of get it on parameters from config file for different environments. but if you only have one path from message received to database, what's the point</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:04:21.557700</ts>
    <user>Lupita</user>
    <text>off soap box</text>
  </message>
  <message conversation_id="705">
    <ts>2019-03-06T00:04:51.558100</ts>
    <user>Lupita</user>
    <text>i did ask about let and in and now i understand. what a good night</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T06:41:35.560800</ts>
    <user>Chaya</user>
    <text>Is there a way to replace portions of a string with &amp;lt;span&amp;gt; tags? Specifically, I get a piece of valid HTML from the server, and I want to embed that in the page. Previously one could use `Html.Attributes.property "innerHTML" (Json.Encode.string displayText`, but not in 0.19.</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T06:43:27.560900</ts>
    <user>Huong</user>
    <text>Essentially three ways to handle this:
- use `Markdown` (since html is valid markdown)
- parse and convert to `Html` in Elm, using `hecrj/html-parser`
- use a custom element that can (validate and) render html string literals</text>
  </message>
  <message conversation_id="707">
    <ts>2019-03-06T06:56:46.564400</ts>
    <user>Genesis</user>
    <text>Hi!
I am using a _dynamic_ `subscriptions` (I subscribe to different things depending on the model), and I was wondering when are the subscriptions _updated_?
I expected the subscriptions to update right after `update` is done just when the new model is accessible from the app's point of view, but that doesn't seem to be the case.</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T06:58:24.564500</ts>
    <user>Chaya</user>
    <text>Thank you &lt;@Huong&gt;, the html-parser worked perfectly! I'll explore the third option as well</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T06:59:52.564700</ts>
    <user>Huong</user>
    <text>I'd say the parse/convert is probably the safer one - you can create a `validate : List Node -&amp;gt; Result Whatever (List Node)` function to throw in the pipeline and do validation of the content (allowed tags, attributes, etc)</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T07:02:13.566300</ts>
    <user>Huong</user>
    <text>That _should_ be the case, however... &lt;https://github.com/elm/compiler/issues/1776&gt; might be biting you?</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T07:02:35.566500</ts>
    <user>Huong</user>
    <text>In short - if subscriptions change in response to a command from `init`, things go wrong</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T07:06:47.566700</ts>
    <user>Genesis</user>
    <text>Interesting! It might be similar, it is right after `init` but I'm doing something else right after.
I am using a _fake_ `Cmd Msg` (no effects, just a pure `Msg`), and the subscriptions still don't update then.</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T07:08:23.566900</ts>
    <user>Genesis</user>
    <text>I'll try to write a small Ellie to show what I'm doing</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T07:17:59.567100</ts>
    <user>Genesis</user>
    <text>&lt;https://ellie-app.com/4TPqzg9L9dya1&gt;</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T07:40:25.567600</ts>
    <user>Genesis</user>
    <text>That's actually a lot more similar to the issue you linked to than I first thought. Thanks! I'll follow the issue!</text>
  </message>
  <message conversation_id="708">
    <ts>2019-03-06T07:57:03.567800</ts>
    <user>Huong</user>
    <text>easy workaround (for your Ellie) is to ensure the task is "asynchronous": &lt;https://ellie-app.com/4TPZjWDyrcLa1&gt;</text>
  </message>
  <message conversation_id="708">
    <ts>2019-03-06T07:59:59.568000</ts>
    <user>Emilee</user>
    <text>i'm not sure how to do that in our (old) jenkins build setup. i think an issue is that our maven build installs its own npm version, so the global `.npm` doesn't contain elm either...</text>
  </message>
  <message conversation_id="708">
    <ts>2019-03-06T08:13:47.568200</ts>
    <user>Emilee</user>
    <text>okay, to install the job cacher plugin we'd need to update our jenkins install, which is postponed to next wednesday because of the associated risk^^'</text>
  </message>
  <message conversation_id="706">
    <ts>2019-03-06T08:13:51.568400</ts>
    <user>Genesis</user>
    <text>Oh, I didn't know about this trick! Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:37:54.569600</ts>
    <user>Corinne</user>
    <text>Hi. Any reason the Elm (0.19) runtime might complain that
```
Error: What node should I take over? In JavaScript I need something like:

    Elm.Main.init({
        node: document.getElementById("elm-node")
    })

You need to do this with any Browser.sandbox or Browser.element program.
```
even though it's clearly injecting itself into the page (successfully). I'm using Webpack 4 and a few plugins...</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:39:07.570500</ts>
    <user>Corinne</user>
    <text>Initialising normally with a `Browser.element` on the Elm side and
```
const app = Elm.Main.init({
        node: document.getElementById('main')
    });
```
on the JS side</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:39:44.571200</ts>
    <user>Lynne</user>
    <text>Does node with ID 'main' exist on the page?</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:39:58.571600</ts>
    <user>Corinne</user>
    <text>Yep - and it's filling the view succesfully</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:40:47.572200</ts>
    <user>Salvador</user>
    <text>Maybe a second Elm.Main.init somewhere?</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:41:11.573100</ts>
    <user>Lynne</user>
    <text>Yep, seems like it is initialized twice and can't find the node after first initialization</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:41:20.573300</ts>
    <user>Corinne</user>
    <text>Interesting &lt;@Salvador&gt;, this sounds like the kind of thing WebPack could do :slightly_smiling_face:</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:42:29.574300</ts>
    <user>Corinne</user>
    <text>Bingo! A leftover manual `&amp;lt;script&amp;gt;` tag (pre-Webpackification I guess). Thanks &lt;@Lynne&gt; &lt;@Salvador&gt;</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:42:32.574400</ts>
    <user>Lynne</user>
    <text>I would not blame on Webpack. I use Webpack 4 and have not ever seen this problem</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:42:50.574800</ts>
    <user>Corinne</user>
    <text>(no - it's my _knowledge_ of Webpack that's the problem :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:43:21.575300</ts>
    <user>Corinne</user>
    <text>in fairness I think it's the move to `HtmlWebpackPlugin` that did it</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:44:10.576200</ts>
    <user>Lynne</user>
    <text>Well, it depends on how it was performed. So the issue has been addressed, hasn't it?</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:44:40.576500</ts>
    <user>Corinne</user>
    <text>Yep (see above). Thanks</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:44:49.576700</ts>
    <user>Lynne</user>
    <text>Great :+1:</text>
  </message>
  <message conversation_id="709">
    <ts>2019-03-06T08:44:54.576900</ts>
    <user>Corinne</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="710">
    <ts>2019-03-06T09:23:28.577900</ts>
    <user>Yang</user>
    <text>Hey everybody, im confused about why is tupple not considered a type here?
```
decoder : JD.Value -&amp;gt; Decoder ( ChunkId, Chunk )

x = JD.decodeValue Chunk.decoder val
```</text>
  </message>
  <message conversation_id="710">
    <ts>2019-03-06T09:23:39.578000</ts>
    <user>Yang</user>
    <text>None</text>
  </message>
  <message conversation_id="710">
    <ts>2019-03-06T09:26:31.578800</ts>
    <user>Huong</user>
    <text>The issue is that `decodeValue` excepts the argument to be a `Decoder`, you pass it a function which returns a `Decoder`</text>
  </message>
  <message conversation_id="710">
    <ts>2019-03-06T09:31:57.579300</ts>
    <user>Yang</user>
    <text>aaa ok thanks. pff cant think properly today :smile:</text>
  </message>
  <message conversation_id="710">
    <ts>2019-03-06T09:35:49.579700</ts>
    <user>Yang</user>
    <text>worked :slightly_smiling_face:</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:32:08.581400</ts>
    <user>Yang</user>
    <text>i have a wired excention error when using js ports. Does this look familiar to anyone?</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:32:23.581500</ts>
    <user>Yang</user>
    <text>None</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:32:30.581900</ts>
    <user>Yang</user>
    <text>found this: &lt;https://github.com/elm/compiler/issues/1686&gt;</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:35:41.582800</ts>
    <user>Simon</user>
    <text>One another note re ports: if you don’t subscribe to them in your Elm, the compiler shakes them out, which can cause problems if the JS side is still expecting the functions to be there</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:35:55.583200</ts>
    <user>Simon</user>
    <text>I think Elm should never shake those out given possible external dependencies, but YMMV</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:36:09.583700</ts>
    <user>Simon</user>
    <text>we run into this because we have standard ports for a couple apps, not all app use all of them</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:36:11.583800</ts>
    <user>Yang</user>
    <text>yes seen that as well.</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:36:43.584800</ts>
    <user>Kris</user>
    <text>yeh, that bug's taking a long time to fix</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:37:25.585100</ts>
    <user>Huong</user>
    <text>that's assuming it's really considered a bug, or just a side-effect of tree shaking</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:38:08.585700</ts>
    <user>Yang</user>
    <text>thats not the issue though. i do ave the subscriptions wired up - and the issue appears whhen im calling this.</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:38:47.586400</ts>
    <user>Yang</user>
    <text>```
/// more code above.
elmHandles.syncLabels.send(labels);
```
So without this line - ports work. as soon as i call this send function it crashes.</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:38:48.586500</ts>
    <user>Kris</user>
    <text>It's literally tree shaking *used* code, so I don't think you can consider it not a bug</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:39:19.587000</ts>
    <user>Kris</user>
    <text>Sounds like you have some recursive loop on the handling side</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:40:16.587100</ts>
    <user>Yang</user>
    <text>None</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:40:36.587800</ts>
    <user>Huong</user>
    <text>Just to make sure we're on the same page, we're talking about a `port foo : (x -&amp;gt; Sub msg) -&amp;gt; Sub msg` where there is nothing in Elm using `foo`, right?</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:40:38.588000</ts>
    <user>Yang</user>
    <text>that means what more exactly ? I have recursive functions ?</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:40:50.588400</ts>
    <user>Yang</user>
    <text>or you refer to a data type</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:40:58.588600</ts>
    <user>Kris</user>
    <text>I meant on the elm side of things</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:41:05.588900</ts>
    <user>Yang</user>
    <text>hmm ok.</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:41:09.589100</ts>
    <user>Kris</user>
    <text>But I can't be sure without looking at the code</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:41:36.589200</ts>
    <user>Kris</user>
    <text>Yes</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:42:39.590200</ts>
    <user>Yang</user>
    <text>where you suggest i look first time? can this be anywere or is more likely to be in the  decoders/subscription code&amp;gt;?</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:42:49.590500</ts>
    <user>Yang</user>
    <text>im gonna look there first</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:43:07.590900</ts>
    <user>Kris</user>
    <text>Yeah, maybe `update` too, where you're handling the message from the port</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:43:23.591200</ts>
    <user>Yang</user>
    <text>aha ok. so the entrie pathway then.</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T12:44:11.591300</ts>
    <user>Huong</user>
    <text>I'd argue that if the compiled artifact is guaranteed to not ever respond to `...ports.foo.send(something)`, it could be considered useful to not allow calling that.</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T13:07:54.599300</ts>
    <user>Yang</user>
    <text>wired error. I've solve it. I think it came form the fact that elm cashes files and doesn't compile them if not necessary. I've changed the meaning of the Label.decoder  in the Label module - and here in the Label.Database the change wasn't detected. The entire project compiled just fine. Gonna look more into it but so far this is my understanding. Code was:
```
syncLabels : (List Label -&amp;gt; msg) -&amp;gt; Sub msg
syncLabels tagger =
    portIn_LabelDatabase_syncLabels
        (\labels -&amp;gt;
            labels
                |&amp;gt; List.map Label.decoder   // here. this now doesn't compile once i opened this file. But it compiled just fine before. I think it keeps files chched.  
                                                             // is not possible to map a label with a decoder since a decoder is not a function. Was a function before. Something like 
                                                            Label.decoder : String -&amp;gt; Label .. but now that it become an actual decoder  .. 
                                                            Label.decoder :  Decoder Label ..  it obviously doesn't compile. Anyway .. i was hoping this stuff is supposed to be choucht by compiler. Gonna look more into it.
                
               |&amp;gt; tagger
        )
```</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T13:08:46.599600</ts>
    <user>Yang</user>
    <text>thanks everyone for trying to help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T13:12:32.600900</ts>
    <user>Brady</user>
    <text>&lt;@Yang&gt; happens sometimes, if you run into weird bugs like this delete  `elm-stuff` and recompile</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T13:13:36.601700</ts>
    <user>Yang</user>
    <text>yep i did get a error about elm stuff just few mins ago. Was pointed right to Main.elm on line 1.</text>
  </message>
  <message conversation_id="712">
    <ts>2019-03-06T14:02:27.601800</ts>
    <user>Randee</user>
    <text>js code could probably check if `ports.foo` is defined</text>
  </message>
  <message conversation_id="713">
    <ts>2019-03-06T15:06:17.603100</ts>
    <user>Margo</user>
    <text>How does one verify an email address in the simplest way in Elm?</text>
  </message>
  <message conversation_id="713">
    <ts>2019-03-06T15:07:51.603300</ts>
    <user>Rosa</user>
    <text>&lt;https://package.elm-lang.org/packages/rtfeldman/elm-validate/latest/Validate#isValidEmail&gt;</text>
  </message>
  <message conversation_id="713">
    <ts>2019-03-06T15:08:24.603500</ts>
    <user>Huong</user>
    <text>Yeah, I copy pasted that regex into my own project, too</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T15:17:40.603700</ts>
    <user>Carman</user>
    <text>You may want to look at &lt;https://github.com/kdeldycke/awesome-falsehood#emails&gt; before going too far down the path of validating emails</text>
  </message>
  <message conversation_id="713">
    <ts>2019-03-06T15:18:56.603900</ts>
    <user>Margo</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="713">
    <ts>2019-03-06T15:21:56.604100</ts>
    <user>Huong</user>
    <text>Yeah, emails are notoriously hard to validate. I have some addresses that get rejected on a bunch of websites (apparently not all devs think .xyz should be a valid tld or something?)

And yet, I'd rather have "validation that covers 98% of what my users enter" over no validation at all</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T15:31:34.604400</ts>
    <user>Carman</user>
    <text>The best validation is emailing the user a confirmation link (AKA "double opt in")</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T15:32:03.605300</ts>
    <user>Kris</user>
    <text>No one likes to allow all correct emails either </text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T16:21:59.606400</ts>
    <user>Huong</user>
    <text>&lt;@Carman&gt; sure, when we're talking about entering your own email address, that works. Even then, it makes sense to do a sanity check first - there's no point in trying to send an email to `foobar`. Then, there are obvious misspellings, and people being rather bad at noticing their own typos.

In our specific case - and this might have something to do with our customer base - support queries went down drastically after adding stricter validation to some email input fields. Turns out, people are really sloppy, and tend to think "the system did something wrong" before considering they might have entered nonsense.</text>
  </message>
  <message conversation_id="714">
    <ts>2019-03-06T16:24:16.606600</ts>
    <user>Franklin</user>
    <text>Was that stronger validation than basically `*@*.*`?</text>
  </message>
  <message conversation_id="713">
    <ts>2019-03-06T16:24:24.606800</ts>
    <user>Huong</user>
    <text>While `"hello there"@gmail` might be a valid email address according to the rfc, I _highly_ doubt that if one of our users enters that, they did it intentionally</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T16:28:26.607000</ts>
    <user>Franklin</user>
    <text>I'd be curious to try doing validating as a warning as opposed to an error. e.g. "That doesn't look like a valid email." and present a link similar to "No that's correct, that's my email". Less validation, more... correctness-hinting? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T16:34:54.607200</ts>
    <user>Huong</user>
    <text>Yeah, might do that at some point. I checked our regex against the entire DB, and didn't encounter any false negatives, so I didn't want to complicate the design by adding an extra concept. But yeah, that sounds like a good idea to me, either way. I also like `mailcheck` which offers suggestions for possible typos (e.g. &lt;http://gmail.co|gmail.co&gt; -&amp;gt; &lt;http://gmail.com|gmail.com&gt;)</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T16:35:28.607400</ts>
    <user>Huong</user>
    <text>(there's an Elm version)</text>
  </message>
  <message conversation_id="711">
    <ts>2019-03-06T16:43:11.607600</ts>
    <user>Wiley</user>
    <text>there are a lot of websites that think one of my `.io` email addresses should actually be `.it`</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:19:16.611700</ts>
    <user>Luther</user>
    <text>Hey newbie question. Is there a way to add an extra parameter to the classic `view : Model -&amp;gt; Html Msg` that complies?
For example `view : ExtraParameter -&amp;gt; Model  -&amp;gt; Html Msg`</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:19:59.611900</ts>
    <user>Kris</user>
    <text>No </text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:20:07.612200</ts>
    <user>Kris</user>
    <text>Why would you want that? </text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:20:37.613000</ts>
    <user>Kris</user>
    <text>You can do `view model = viewHelp extraParam model` or something like that </text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:20:49.613400</ts>
    <user>Kris</user>
    <text>And have the helper function have the type you want</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:29:09.615100</ts>
    <user>Luther</user>
    <text>The extra parameter I want to insert is a paginated list to populate my table</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:31:48.616700</ts>
    <user>Jarvis</user>
    <text>&lt;@Luther&gt; the Browser functions like Browser.sandbox and Browser.program require a certain signature for the top level `view` function. but of course, internally, your html-returning functions can have any signature.</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:33:47.617400</ts>
    <user>Jarvis</user>
    <text>where does the list come from?</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:42:39.621100</ts>
    <user>Luther</user>
    <text>My list comes from this function ``` filterAndSortThings : Model -&amp;gt; PaginatedList String
filterAndSortThings model =
    let
        sort =
            if model.reversed then
                List.reverse

            else
                identity

        filter =
            if model.query == "" then
                identity

            else
                List.filter (\thing -&amp;gt; String.contains model.query thing)
    in
    Paginate.map (filter &amp;gt;&amp;gt; sort) model.things
```
When I change `view : Model -&amp;gt; Html Msg` to `view : PaginatedList String -&amp;gt; Html Msg` and the higher definition to `view = filterAndSortThings &amp;gt;&amp;gt; view` it works.</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:44:05.622300</ts>
    <user>Luther</user>
    <text>.... the problem is I still need to do this whist having access to `Model` in the `view`</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:47:39.623700</ts>
    <user>Earlean</user>
    <text>&lt;@Luther&gt; you should just call `filterAndSortThings` from inside your `view`</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:49:58.624200</ts>
    <user>Jarvis</user>
    <text>for example, imagine if the first line of your `view` was `let sortedThings = filterAndSortThings model.query model.reversed model.things in`</text>
  </message>
  <message conversation_id="715">
    <ts>2019-03-06T20:59:45.625600</ts>
    <user>Luther</user>
    <text>Thank you thank you thank you &lt;@Jarvis&gt; &lt;@Earlean&gt; :grin::+1:</text>
  </message>
  <message conversation_id="716">
    <ts>2019-03-07T00:11:58.627000</ts>
    <user>Janita</user>
    <text>I'm currently use http 1 in my project but I need to install http 2 </text>
  </message>
  <message conversation_id="716">
    <ts>2019-03-07T00:12:07.627300</ts>
    <user>Janita</user>
    <text>How I can do that </text>
  </message>
  <message conversation_id="716">
    <ts>2019-03-07T00:13:37.628200</ts>
    <user>Janita</user>
    <text>And also I can't change it in elm.json manually </text>
  </message>
  <message conversation_id="716">
    <ts>2019-03-07T00:18:18.629200</ts>
    <user>Janita</user>
    <text>I found http 2 installed in cash but how to force app to use it </text>
  </message>
  <message conversation_id="716">
    <ts>2019-03-07T00:29:20.631100</ts>
    <user>Earlean</user>
    <text>&lt;@Janita&gt; `elm install` will install the latest version of a package that is compatible with all your existing packages. Most likely you'll need to update `elm/core` and `elm/json` first Try removing `elm/core`, `elm/json` and `elm/http` from your elm.json file and then run `elm install elm/http`</text>
  </message>
  <message conversation_id="717">
    <ts>2019-03-07T04:09:17.632300</ts>
    <user>Karrie</user>
    <text>good morning!
does elm 0.19 still have html5 drag and features?</text>
  </message>
  <message conversation_id="717">
    <ts>2019-03-07T04:15:32.632800</ts>
    <user>Jin</user>
    <text>Yes, I found &lt;https://package.elm-lang.org/packages/norpan/elm-html5-drag-drop/latest/&gt; really easy to use.</text>
  </message>
  <message conversation_id="717">
    <ts>2019-03-07T04:27:24.633000</ts>
    <user>Elissa</user>
    <text>&lt;https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/latest/&gt;</text>
  </message>
  <message conversation_id="717">
    <ts>2019-03-07T04:28:51.633200</ts>
    <user>Elissa</user>
    <text>Eric Timms wrote there: "This package provides an API to help converting between Elm values and bytes by implementing Protocol Buffers. elm-protocol-buffers also opens the door to add support for the communication protocol gRPC, which could be an interesting next step."</text>
  </message>
  <message conversation_id="718">
    <ts>2019-03-07T05:20:40.634300</ts>
    <user>Karrie</user>
    <text>i was looking at that one already! :slightly_smiling_face: but was hoping to not add another dependency to the project and trying to do it myself</text>
  </message>
  <message conversation_id="717">
    <ts>2019-03-07T05:21:04.634800</ts>
    <user>Karrie</user>
    <text>but I guess it’s just way faster if I use an external package</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:26:05.635600</ts>
    <user>Racquel</user>
    <text>Hi. I'm trying to save a list of about 3000 strings (which I get from http request) to the model
But getting «Main.elm:9136 Uncaught RangeError: Maximum call stack size exceeded» exception.
What can be done about this?

This snippet is from my update function:
```
GotChain chainResponse -&amp;gt;
    case chainResponse of
        Success chain -&amp;gt;
            -- This causes the exception
            ({ model | branches = chain.branches }, Cmd.none)
        _ -&amp;gt; 
            ( model, Cmd.none)
```</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:38:42.639500</ts>
    <user>Racquel</user>
    <text>Sometimes it is being saved, but then, when I try to load another chain, and replace this long list with the new one (even if the new list contains only of 5 strings for example), I get this exception again.</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:39:11.640000</ts>
    <user>Lynne</user>
    <text>That's super weird. Record update shouldn't cause this error. What type does `chain.branches` have? Is it `List String`? Do you use this field anywhere, in `view` for example?</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:43:00.643300</ts>
    <user>Racquel</user>
    <text>Yes, it is `List String`, and no, I don't use it anywhere. I've removed it completely from everywhere, except of this branch of `update`.</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:44:09.643600</ts>
    <user>Lynne</user>
    <text>Could you hit a kernel bug? Did you search for something similar in `elm/compiler` or `elm/core` repos?</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:48:42.644100</ts>
    <user>Racquel</user>
    <text>I've seen this thread
&lt;https://github.com/elm/compiler/issues/1521&gt;

But it was closed. And I have elm 0.19.</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:48:50.644400</ts>
    <user>Huong</user>
    <text>&lt;@Racquel&gt; can you try without `--debug`?</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:51:15.644500</ts>
    <user>Lynne</user>
    <text>Do you have a stracktrace?</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:52:05.644700</ts>
    <user>Lynne</user>
    <text>Evan said it was fixed, that's why it was closed</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:52:19.644900</ts>
    <user>Lynne</user>
    <text>So it may be that they broke it again</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:53:28.645100</ts>
    <user>Lynne</user>
    <text>Ping &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:53:45.645300</ts>
    <user>Huong</user>
    <text>It is fixed. My guess is that &lt;@Racquel&gt; may be using `--debug`. When the debugger is active, it serializes every message, and when messages are very large, that can cause issues, sadly.</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T07:54:18.645500</ts>
    <user>Lynne</user>
    <text>Yeah, I saw in the thread that was fixed. Hopefully your guess about `--debug` is correct</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T08:11:19.645700</ts>
    <user>Racquel</user>
    <text>Yes, it was `--debug`. Without it everything works just fine. Thanks!</text>
  </message>
  <message conversation_id="719">
    <ts>2019-03-07T08:25:22.645900</ts>
    <user>Huong</user>
    <text>Great, thanks for confirming &lt;@Racquel&gt;!</text>
  </message>
  <message conversation_id="720">
    <ts>2019-03-07T10:00:14.647000</ts>
    <user>Oliver</user>
    <text>Hi all i am trying to update my elm package from 0.18 to 0.19. when i use elm publish it is saying package has not been published yet. Any suggestions. Thanks</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T10:11:14.647300</ts>
    <user>Janita</user>
    <text>I deleted the elm.json and re-install the packages again this fix the issue </text>
  </message>
  <message conversation_id="722">
    <ts>2019-03-07T10:58:33.648000</ts>
    <user>Paulita</user>
    <text>Hi ELM community!!
I am studying the best was to create a sort of right side menu with a *grid of images with text*, as I highlighted on the attached image.
I considered using &lt;http://elm-bootstrap.info/grid&gt; to do so, but I'm not sure if that's the way to go.
Would you have any suggestion for me to start with?
Thanksss</text>
  </message>
  <message conversation_id="722">
    <ts>2019-03-07T11:12:18.648300</ts>
    <user>Chae</user>
    <text>Are you using anything for styling right now (elm-css, separate css/sass/less, something else)? What are your target browsers? Depending on those, it could be possible for you to use css grid &lt;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&gt;</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:43:40.648600</ts>
    <user>Dede</user>
    <text>If you're not committed to CSS/HTML, using elm-ui is pretty sweet.</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:43:46.648800</ts>
    <user>Dede</user>
    <text>(There's a whole channel, &lt;#C4F9NBLR1|elm-ui&gt;)</text>
  </message>
  <message conversation_id="723">
    <ts>2019-03-07T11:50:03.649000</ts>
    <user>Huong</user>
    <text>When 0.19 was released, it appears that publishing 0.18 packages causes some weird behaviour. What happens when you try to publish your package as 1.0.0 on 0.19? What exact error do you get?</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:51:31.649300</ts>
    <user>Oliver</user>
    <text>To publish package as 1.0.0 i have to edit git tag 1.0.0 and going forward i have to edit all git tags which may conflict with 0.18 versions.</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:51:55.649500</ts>
    <user>Oliver</user>
    <text>So I  am thinking of new git repository is there any other way?</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:52:37.649700</ts>
    <user>Huong</user>
    <text>So, as far as you know, are there any users using the 0.18 version of your package?</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:53:32.649900</ts>
    <user>Oliver</user>
    <text>i don't think so but 0.18 verison is being used in my company old app which we are updating</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:53:56.650100</ts>
    <user>Huong</user>
    <text>I wouldn't _generally_ recommend this, but given that the package was first published after the 0.19 release, chances are that you are aware of all users of the 0.18 version. In that case, removing the existing tags (except perhaps for the last published 0.18 version which is still in use) might be an option</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:54:47.651000</ts>
    <user>Huong</user>
    <text>It's a bit of a pain, for sure</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:54:50.651200</ts>
    <user>Earnestine</user>
    <text>`elm-test init &amp;amp;&amp;amp; elm-test` -&amp;gt; `The dependencies in your elm.json are not compatible. [...]` ??</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:55:16.651300</ts>
    <user>Oliver</user>
    <text>ok thanks</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T11:57:41.652100</ts>
    <user>Huong</user>
    <text>&lt;@Earnestine&gt; can you try `elm install elm/json` and see if that fixes it?</text>
  </message>
  <message conversation_id="724">
    <ts>2019-03-07T11:59:14.652900</ts>
    <user>Earnestine</user>
    <text>hi, thanks for the tipp.. but it does not fix it...</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T12:02:13.653400</ts>
    <user>Huong</user>
    <text>&lt;@Earnestine&gt; can you share your `elm.json`?</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T12:02:29.653700</ts>
    <user>Huong</user>
    <text>also, what version of `elm-test` exactly?</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T12:03:09.653800</ts>
    <user>Earnestine</user>
    <text>None</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T12:03:40.654200</ts>
    <user>Earnestine</user>
    <text>version: `0.19.0-rev5`</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T12:27:11.658200</ts>
    <user>Huong</user>
    <text>&lt;@Earnestine&gt; okay, you're facing a rather special compound issue.
- `elm/json` needs to be a direct dependency
- `elm-explorations/test` cannot be an indirect dependency
In this case, it's because `noahzgordon/elm-color-extra` has it as a dependency, though I don't quite know why. If you do `elm install elm/json` and then manually remove the indirect dependency, `elm-test` is happy. However, `elm install` will always add back that indirect dependency, so to get this working consistently, `noahzgordon/elm-color-extra` would need to drop `elm/explorations` as a dependency :thinking_face:</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T12:28:29.658700</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/noahzgordon/elm-color-extra/pull/2&gt; there's already an issue for it, I added a note on how this breaks stuff down the line</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T13:38:22.659100</ts>
    <user>Huong</user>
    <text>&lt;@Earnestine&gt; seems like Noah's about to release that PR, so upgrading that package in a little while should help :)</text>
  </message>
  <message conversation_id="721">
    <ts>2019-03-07T13:41:47.659300</ts>
    <user>Earnestine</user>
    <text>wow, thanks for the detailed response, I'll try this in a while..!</text>
  </message>
  <message conversation_id="725">
    <ts>2019-03-07T17:53:31.660100</ts>
    <user>Kris</user>
    <text>Does anyone have a good gif illustrating the elm architecture?</text>
  </message>
  <message conversation_id="725">
    <ts>2019-03-07T17:57:43.660900</ts>
    <user>Wiley</user>
    <text>&lt;https://media.giphy.com/media/it6W8D4FfvaPC/giphy.gif&gt;</text>
  </message>
  <message conversation_id="725">
    <ts>2019-03-07T17:57:48.661300</ts>
    <user>Wiley</user>
    <text>this one's pretty good</text>
  </message>
  <message conversation_id="725">
    <ts>2019-03-07T17:58:12.661700</ts>
    <user>Jin</user>
    <text>This one is not a gif, so not animated, but it’s floating around every now and then :slightly_smiling_face:
&lt;https://github.com/w0rm/creating-a-fun-game-with-elm/blob/master/assets/the-elm-architecture1.jpg&gt;</text>
  </message>
  <message conversation_id="725">
    <ts>2019-03-07T17:58:43.661900</ts>
    <user>Jin</user>
    <text>Illustrated by &lt;https://twitter.com/01k&gt;</text>
  </message>
  <message conversation_id="725">
    <ts>2019-03-07T19:38:29.662100</ts>
    <user>Danna</user>
    <text>Not a gif, but the slidedeck that &lt;@Nikki&gt; shared a while back has a click-by-click walk-through. I think this was Elm 0.18, so minor details have changed. Check slides 45-47:</text>
  </message>
  <message conversation_id="725">
    <ts>2019-03-07T19:38:31.662300</ts>
    <user>Danna</user>
    <text>&lt;https://docs.google.com/presentation/d/14rYuf7BzCZj8qjxGGRWpT1YVWdo_rG-FFiwNSEmFBV4/edit#slide=id.g29715b5cf0_0_189&gt;</text>
  </message>
  <message conversation_id="725">
    <ts>2019-03-07T19:49:26.662700</ts>
    <user>Kris</user>
    <text>Thanks a lot! That's pretty helpful</text>
  </message>
  <message conversation_id="726">
    <ts>2019-03-07T20:53:36.663000</ts>
    <user>Albertine</user>
    <text>Nice! This makes it very easy to understand how the runtime fits into the picture. :taco:</text>
  </message>
  <message conversation_id="727">
    <ts>2019-03-07T23:09:21.664900</ts>
    <user>Sade</user>
    <text>Here's a diagram I made, hope it's helpful! &lt;https://incrementalelm.com/learn/architecture&gt;</text>
  </message>
  <message conversation_id="728">
    <ts>2019-03-08T03:55:54.666000</ts>
    <user>Sadie</user>
    <text>How to handle optional with elm-json-pipeline ?</text>
  </message>
  <message conversation_id="728">
    <ts>2019-03-08T03:56:02.666300</ts>
    <user>Sadie</user>
    <text>I tried

 ```        (Decode.field "notification" &amp;lt;|
            Decode.oneOf
                [ Decode.maybe decodeNotification
                , Decode.succeed Nothing
                ]
        )```</text>
  </message>
  <message conversation_id="728">
    <ts>2019-03-08T03:56:05.666500</ts>
    <user>Sadie</user>
    <text>With no luck</text>
  </message>
  <message conversation_id="727">
    <ts>2019-03-08T04:03:05.667000</ts>
    <user>Sadie</user>
    <text>I just eventually used elm-decode-pipeline... but out of curisosity it doesn't seems that simple</text>
  </message>
  <message conversation_id="728">
    <ts>2019-03-08T04:21:50.668000</ts>
    <user>Nana</user>
    <text>&lt;@Sadie&gt; `(Decode.maybe (Decode.field "notification" decodeNotification))`</text>
  </message>
  <message conversation_id="728">
    <ts>2019-03-08T04:26:03.668400</ts>
    <user>Sadie</user>
    <text>Oh yeah, I remember we already talked about that now</text>
  </message>
  <message conversation_id="728">
    <ts>2019-03-08T04:26:04.668600</ts>
    <user>Sadie</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="728">
    <ts>2019-03-08T05:14:25.670100</ts>
    <user>Lynne</user>
    <text>In `elm-json-decode-pipeline` there is an `optional` function &lt;@Sadie&gt;</text>
  </message>
  <message conversation_id="728">
    <ts>2019-03-08T05:25:29.670500</ts>
    <user>Sadie</user>
    <text>&lt;@Lynne&gt; Yes I know I was just asking out of curiosity</text>
  </message>
  <message conversation_id="729">
    <ts>2019-03-08T10:15:22.671400</ts>
    <user>Carman</user>
    <text>This image (IIRC created by &lt;@Dorotha&gt;) is probably the best visualization of TEA I've seen :heart:</text>
  </message>
  <message conversation_id="729">
    <ts>2019-03-08T10:15:40.671600</ts>
    <user>Carman</user>
    <text>None</text>
  </message>
  <message conversation_id="730">
    <ts>2019-03-08T10:37:29.673500</ts>
    <user>Dorotha</user>
    <text>This is not created by me. Kolja is the author &lt;https://mobile.twitter.com/01k&gt; </text>
  </message>
  <message conversation_id="728">
    <ts>2019-03-08T11:00:12.674500</ts>
    <user>Kitty</user>
    <text>Finally got round to upgrading our website to 0.19, half a day flew by super fast, and the half the bundle size disappeared too :slightly_smiling_face:</text>
  </message>
  <message conversation_id="731">
    <ts>2019-03-08T12:29:54.675700</ts>
    <user>Florencia</user>
    <text>Does anybody remember languages other than Rust that took inspiration from Elm error messages?</text>
  </message>
  <message conversation_id="731">
    <ts>2019-03-08T12:30:13.676200</ts>
    <user>Florencia</user>
    <text>I think there was some GCC 8 post but I can't find it and don't know if it mentioned Elm specifically...</text>
  </message>
  <message conversation_id="731">
    <ts>2019-03-08T12:33:51.676700</ts>
    <user>Cammy</user>
    <text>Reasonml. </text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T12:51:54.677200</ts>
    <user>Dorine</user>
    <text>hi, `talqu@pc:[~/Projects/learn-elm/src]: elm make Main.elm`   says I cannot find it though! Is there a typo? (edited)
it only works from the root dir: `elm make src/Main.elm`
what is happening here?</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T12:53:47.677500</ts>
    <user>Kris</user>
    <text>I think purescript as well</text>
  </message>
  <message conversation_id="731">
    <ts>2019-03-08T12:55:19.677700</ts>
    <user>Florencia</user>
    <text>&lt;@Kris&gt; Do you think there's a link acknowledging this?</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T12:59:54.681300</ts>
    <user>Florencia</user>
    <text>&lt;@Dorine&gt; IIRC the compiler looks for `elm.json` to see which directories are `source_directories`, and exits early if it doesn't find it?</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:01:37.681600</ts>
    <user>Leoma</user>
    <text>Not having had too much experience with parsing, and none with elm-parser, I’m wondering what the best way is to get going. Recommended tutorials?
What I need (ultimately) is something akin to a very minimal version of markdown. (Yes, I know about elm-markup, and the various markdown packages and they won’t cut it.)</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:03:13.681800</ts>
    <user>Dede</user>
    <text>Have you seen &lt;https://www.youtube.com/watch?v=M9ulswr1z0E&gt; ?</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:03:21.682000</ts>
    <user>Dede</user>
    <text>(and/or were you in the room? ;-)</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:03:45.682200</ts>
    <user>Dede</user>
    <text>Huh, Slack didn't unroll that.  It's ""Demystifying Parsers" by Tereza Sokol"</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:03:53.682400</ts>
    <user>Leoma</user>
    <text>No and no. I know Tereza’s work. This looks good</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:15:54.682600</ts>
    <user>Cammy</user>
    <text>I’ve heard clojure people comment on how much they like the Elm error messages, but don’t know if it’s an official thing they’re striving for.</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:16:44.682800</ts>
    <user>Dorine</user>
    <text>i have started a basic elm template with `elm init`, and have "source-directories": `[ "src" ],` in my json file. However, inside the src dir executing `elm make` fails. That's is weird, without that i cant compile the file from the editor</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:18:48.683000</ts>
    <user>Florencia</user>
    <text>yes, you need to run the compiler from the directory `elm.json` is in</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:19:17.683200</ts>
    <user>Florencia</user>
    <text>The editor's Elm plugin should help you do that. What editor do you use?</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:19:27.683400</ts>
    <user>Dorine</user>
    <text>emacs</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:20:33.683600</ts>
    <user>Dorine</user>
    <text>im trying these basic things right now, and everything seems to work very nicely with emacs, except the compilation of the file and the generation of tags (which  does not work either)</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:23:28.683800</ts>
    <user>Florencia</user>
    <text>`jcollard/elm-mode` doesn't seem to work with 0.19 automatically, but setting this should help you: &lt;https://github.com/jcollard/elm-mode/blob/27a96ae99c8573b3e2f38b35021b46b30189dda6/elm-util.el#L44-L49&gt;</text>
  </message>
  <message conversation_id="732">
    <ts>2019-03-08T13:24:14.684000</ts>
    <user>Dorine</user>
    <text>nice thanks</text>
  </message>
  <message conversation_id="733">
    <ts>2019-03-08T14:14:04.686200</ts>
    <user>Abel</user>
    <text>I'm seeing an interesting behavior with `Browser.Navigation.back`. When running the `Nav.back navKey 1` command, two URL change message are firing: one with the current URL, quickly followed by the previous URL in the browser history. Is this known/expected behavior?</text>
  </message>
  <message conversation_id="733">
    <ts>2019-03-08T14:18:32.686600</ts>
    <user>Kris</user>
    <text>No, sorry </text>
  </message>
  <message conversation_id="734">
    <ts>2019-03-08T16:00:04.687200</ts>
    <user>Broderick</user>
    <text>Anyone know of the best datetime lib to use as of now for .19?</text>
  </message>
  <message conversation_id="734">
    <ts>2019-03-08T16:02:52.687800</ts>
    <user>Florencia</user>
    <text>&lt;@Broderick&gt; `elm/time` does work quite well, ocassionally I go for a few functions from `waratuman/time-extra`</text>
  </message>
  <message conversation_id="734">
    <ts>2019-03-08T16:24:07.689200</ts>
    <user>Lorilee</user>
    <text>`justinmimbs/date` is perfect for when you want to represent just a date and not a point in time. `justinmimbs/time-extra` is also solid for helping with creating and modifying times. `ryannhg/date-format` for displaying times.</text>
  </message>
  <message conversation_id="735">
    <ts>2019-03-08T16:27:58.692300</ts>
    <user>Bert</user>
    <text>The only ones I've used are `elm/time` and `ryannhg/date-format`. They've done everything I need (besides parsing ISO8601 strings) </text>
  </message>
  <message conversation_id="735">
    <ts>2019-03-08T16:30:08.692400</ts>
    <user>Jarvis</user>
    <text>also this is useful: &lt;https://github.com/elm/parser/blob/master/semantics.md&gt;</text>
  </message>
  <message conversation_id="735">
    <ts>2019-03-08T17:04:47.693100</ts>
    <user>Agustin</user>
    <text>`rtfeldman/elm-iso8601-date-strings` is a good base for parsing ISO8601 strings if you only care about the canonical time (I had to vendor it because I care about local time)</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T20:42:38.696200</ts>
    <user>Alia</user>
    <text>Is there a way to optimise the DOM-ification of large lists in the view function? i.e. if you add one item to a list in the model, to have the view function not re-generate the entire list worth of (virtual) DOM elements.</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T20:45:58.696900</ts>
    <user>Alia</user>
    <text>Actually it seems `Html.Keyed` might be the recommended solution here</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T20:54:29.698100</ts>
    <user>Alia</user>
    <text>though technically this still requires a virtual DOM element to be created for each item, and a key comparison with each of the (actual) DOM elements</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T20:54:41.698500</ts>
    <user>Alia</user>
    <text>i.e. it doesn't really understand an "insert"</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T20:55:19.698800</ts>
    <user>Alia</user>
    <text>until it stumbles onto it whilst comparing keys</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T21:01:17.700400</ts>
    <user>Augustus</user>
    <text>`Html.Lazy` can be good if building the DOM is the expensive part, the gotcha is that it uses JS referential equality on the comparison, so you have to be careful to not to break that</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T21:02:06.701100</ts>
    <user>Augustus</user>
    <text>in the case where you are modifying a list you won't be able to use `Lazy` on the list as a whole in most cases, but you can on the individual list items</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T21:03:10.702000</ts>
    <user>Augustus</user>
    <text>and pair that with `Html.Keyed` to simplify things during diffing</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T21:05:40.702400</ts>
    <user>Alia</user>
    <text>yeah that sounds like a good approach</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T21:05:51.702700</ts>
    <user>Alia</user>
    <text>it will do :slightly_smiling_face:</text>
  </message>
  <message conversation_id="737">
    <ts>2019-03-08T22:06:48.703500</ts>
    <user>Kris</user>
    <text>That’s not true </text>
  </message>
  <message conversation_id="737">
    <ts>2019-03-08T22:06:58.704000</ts>
    <user>Kris</user>
    <text>You can’t break stuff using lazy </text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T23:00:21.705000</ts>
    <user>Jarvis</user>
    <text>i think they are referring to invalidating lazy equality by doing things like creating a new object per render</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T23:00:53.705700</ts>
    <user>Jarvis</user>
    <text>like repackaging downstream arguments into a `let ctx = { a = ..., b = ... } in` that is part of your Lazy equality comparison</text>
  </message>
  <message conversation_id="736">
    <ts>2019-03-08T23:02:54.706600</ts>
    <user>Jarvis</user>
    <text>you can create pointless Lazy application if you don't understand the caveat</text>
  </message>
  <message conversation_id="738">
    <ts>2019-03-09T06:15:45.707500</ts>
    <user>Vilma</user>
    <text>can anyone tell me how I can get this into an anonymous function?
```
getChompedString &amp;lt;| succeed () |. chompUntil " "
```</text>
  </message>
  <message conversation_id="738">
    <ts>2019-03-09T06:16:00.707900</ts>
    <user>Vilma</user>
    <text>it seems `\() -&amp;gt; getChompedString &amp;lt;| succeed () |. chompUntil " "` is wrong</text>
  </message>
  <message conversation_id="738">
    <ts>2019-03-09T06:18:49.708600</ts>
    <user>Vashti</user>
    <text>&lt;@Vilma&gt; What arguments do you want this anonymous function to take?</text>
  </message>
  <message conversation_id="738">
    <ts>2019-03-09T06:19:18.708800</ts>
    <user>Marlys</user>
    <text>Does elm-css incur any unreasonable performance hit?</text>
  </message>
  <message conversation_id="738">
    <ts>2019-03-09T06:20:09.708900</ts>
    <user>Vilma</user>
    <text>I just want to insert it into a parser pipeline :thinking_face: so maybe it takes another parser?</text>
  </message>
  <message conversation_id="738">
    <ts>2019-03-09T06:26:52.709900</ts>
    <user>Vashti</user>
    <text>hmm, could you maybe post more code showing how you'd use the anonymous function, so we can understand why you want to create it and what you want to do with it?</text>
  </message>
  <message conversation_id="739">
    <ts>2019-03-09T07:02:21.710100</ts>
    <user>Earlean</user>
    <text>It's hard to say without knowing what you're comparing it to and what you consider unreasonable</text>
  </message>
  <message conversation_id="740">
    <ts>2019-03-09T10:34:53.712500</ts>
    <user>Dorine</user>
    <text>hi, for those using emacs with elm-mode, how did you get generating tags working and also `elm-package-catalog` which gives this error `-map-indexed: Wrong type argument: listp, (1602/elm-feather . ["1.0.0" "1.0.1" "1.0.2" "2.0.0" "2.0.1" "2.1.0" "2.2.0" "2.3.0" "2.3.1" "2.3.2" ...])`</text>
  </message>
  <message conversation_id="741">
    <ts>2019-03-09T14:54:16.714500</ts>
    <user>Leoma</user>
    <text>RE parsing…
I’m parsing something akin to markdown, where I’d like to allow nested //italic// **bold** __underline__ styles.

Seems I need backtrackable if I don’t know if or not I’ll find a matching /,_,* after some amount of content. Is that right? I can only “commit” to parsing an opening italic / if I know there will be a closing one. Otherwise I’ll treat the / as a literal /. For example.
Is that an appropriate use of backtrackable?</text>
  </message>
  <message conversation_id="740">
    <ts>2019-03-09T15:41:23.715000</ts>
    <user>Virgie</user>
    <text>It's appropriate, but also exhibits the behavior that the docs warn for (O(n^2) time complexity in the worst case). I don't see a nice way around it here though. Maybe have a look at what other parsers do.</text>
  </message>
  <message conversation_id="740">
    <ts>2019-03-09T15:42:55.716700</ts>
    <user>Virgie</user>
    <text>because basically if you first parse an opening token, then do a lot of work, and it turns out that there is no correct closing token, backtrackable will go all the way back and the "doing a lot of work" part is repeated.</text>
  </message>
  <message conversation_id="740">
    <ts>2019-03-09T15:44:06.718000</ts>
    <user>Huong</user>
    <text>One option is to decide what to do once you find a token that isn't allowed in the context of bolding something, and "unwrap" a level of context while inserting the appropriate textual token where the current level of context started. Not as easy as it sounds, but theoretically possible</text>
  </message>
  <message conversation_id="740">
    <ts>2019-03-09T18:24:12.720000</ts>
    <user>Leoma</user>
    <text>Well, it sounds like it’s not an inappropriate choice. I’ll probably go with it and do something like disallow styles to wrap past newlines. So worst case O(n^2) over a bunch of single lines should be OK. Thanks.</text>
  </message>
  <message conversation_id="742">
    <ts>2019-03-09T19:57:39.721800</ts>
    <user>Dede</user>
    <text>You could alternately just declare an unclosed token to be an error.</text>
  </message>
  <message conversation_id="743">
    <ts>2019-03-10T03:34:41.724900</ts>
    <user>Lynn</user>
    <text>I’m trying to use &lt;@Granville&gt;’s websocket library, but although its is in my elm.json, I keep getting ```The PortFunnels module has a bad import:

    import PortFunnel```</text>
  </message>
  <message conversation_id="743">
    <ts>2019-03-10T03:35:20.725600</ts>
    <user>Lynn</user>
    <text>that’s an import from PortFunnels.elm which I copied over from the example directory, per the instructions</text>
  </message>
  <message conversation_id="743">
    <ts>2019-03-10T03:36:27.725900</ts>
    <user>Lynn</user>
    <text>` "billstclair/elm-port-funnel": "1.1.4",` is listed in my indirect dependencies</text>
  </message>
  <message conversation_id="743">
    <ts>2019-03-10T03:39:37.726200</ts>
    <user>Lynn</user>
    <text>ok, so moving it to the direct dependencies fixed it</text>
  </message>
  <message conversation_id="743">
    <ts>2019-03-10T04:43:29.726700</ts>
    <user>Lynn</user>
    <text>I don’t seem to be able to get any further than a willopen message</text>
  </message>
  <message conversation_id="743">
    <ts>2019-03-10T04:43:34.726800</ts>
    <user>Lynn</user>
    <text>None</text>
  </message>
  <message conversation_id="743">
    <ts>2019-03-10T04:44:02.727400</ts>
    <user>Lynn</user>
    <text>the websocket is not actually being opened. Any ideas?</text>
  </message>
  <message conversation_id="744">
    <ts>2019-03-10T09:45:50.730300</ts>
    <user>Carroll</user>
    <text>hello there, is it possible somehow to ignore the end of uri during parsing? currently I have the next function:
```
gitHubInfo : Parser (String -&amp;gt; String -&amp;gt; Int -&amp;gt; a) a
gitHubInfo =
    string &amp;lt;/&amp;gt; string &amp;lt;/&amp;gt; s "pull" &amp;lt;/&amp;gt; int
```
but I want that it will parse any link, which starts with this pattern, not only exactly like in the patter. Is it possible to write something like `string &amp;lt;/&amp;gt; string &amp;lt;/&amp;gt; s "pull" &amp;lt;/&amp;gt; int &amp;lt;/&amp;gt; whatever` ?</text>
  </message>
  <message conversation_id="744">
    <ts>2019-03-10T10:05:14.731100</ts>
    <user>Virgie</user>
    <text>the `whatever` can't be a `string` (that you ignore), i.e. it can have `/` characters in it?</text>
  </message>
  <message conversation_id="744">
    <ts>2019-03-10T10:08:37.732500</ts>
    <user>Carroll</user>
    <text>yep, it can contain the rest of uri. I found a simple way - just add cleaning of uri before putting it to this function. Thank you!</text>
  </message>
  <message conversation_id="745">
    <ts>2019-03-10T13:03:41.732900</ts>
    <user>Millie</user>
    <text>This talk about labels in property based tests is very helpful and describes how to work with property based tests if you're used to write unit tests. &lt;https://youtu.be/NcJOiQlzlXQ&gt;

Now I'm thinking if there is a way to have fuzz tests in `elm-test` with labels to follow the advice John Hughes was giving at lambda days. Nice talk :slightly_smiling_face:</text>
  </message>
  <message conversation_id="746">
    <ts>2019-03-10T15:27:13.736000</ts>
    <user>Leoma</user>
    <text>Could someone walk me through implementing a “mini-markdown” parser with elm/parser? I could send a bit of $$ your way if that would help. OR I can put the work (with attribution) towards an open source wysiwyg editor component I have an idea for. (edited)</text>
  </message>
  <message conversation_id="747">
    <ts>2019-03-10T15:58:08.736100</ts>
    <user>Ann</user>
    <text>Hey if you figure out how to do this, I'd love to know as well!</text>
  </message>
  <message conversation_id="746">
    <ts>2019-03-10T15:58:56.736600</ts>
    <user>Leoma</user>
    <text>Ya, I’m working on it until I figure it out, or get help.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:24:02.741900</ts>
    <user>Dede</user>
    <text>I’m not qualified enough to ask for $$ but happy to bang my head on problems you want to post here :wink:</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:27:12.742200</ts>
    <user>Velia</user>
    <text>I also need something similar, at least the bold/italic/underline part, and will work on it soon, but maybe not right now.

I intent to get inspiration from &lt;https://github.com/jgm/cheapskate&gt;, as advised here:
&lt;https://github.com/elm/projects/blob/master/README.md#markdown-parser&gt;
and would advise you to do the same. I gave it a look and I'm pretty sure you can implement it without backtracking.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:32:26.742600</ts>
    <user>Dede</user>
    <text>Thinking about the backtracking question: informally, imagine
```
succeed tidleOrItalics  
  |. token "~~"
  |= getChompedString chompWhile notNewlineOrTwoTildes
  |= getChompedString &amp;lt;| chompNewlineOrTwoTildes
```
Then `tildeOrItalics` can look at the third argument to decide what to do with the string and the leading tildes.

Does that make sense?</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:32:39.742800</ts>
    <user>Dede</user>
    <text>Nesting obviously gets more complex.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:34:11.743000</ts>
    <user>Leoma</user>
    <text>So, this is my AST:
```
type Styled
    = Plain String
    | URL String
    | Bold Styled
    | Italic Styled
    | Underline Styled
    | StyledList (List Styled)


type Content
    = StyledContent Styled
    | NewLine

```</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:35:08.743200</ts>
    <user>Leoma</user>
    <text>Importantly I can parse plain text, URL, and lists of these things. Then a style item can be bold,italic,underline and part of a list that has other styles applied</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:35:25.743400</ts>
    <user>Leoma</user>
    <text>Ultimately I’d want a `Parser (List Content)`</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:37:03.744400</ts>
    <user>Leoma</user>
    <text>The plan is that `/` followed by non-whitespace indicated start-italic, and non-whitespace followed by `/` closes italics. `_` for underline, and `*` for bold.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:38:03.745200</ts>
    <user>Dede</user>
    <text>`/italic/  _underline_ *bold*  *_/confusingBroken?`</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:38:05.745500</ts>
    <user>Leoma</user>
    <text>stuff like `/this is italic and (6/2=3)/` should be all italic.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:38:19.746000</ts>
    <user>Dede</user>
    <text>`/*boldOrItalicOrWhat/* ?`</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:38:26.746200</ts>
    <user>Velia</user>
    <text>I believe you need something like:
```
type Markdown
    = Markdown (List Text)

type Text
    = Literal String
    | Bold Markdown
    | Italic Markdown
    | Underlined Markdown
```</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:38:27.746400</ts>
    <user>Leoma</user>
    <text>`_*/all3/*_` is fine</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:39:44.747600</ts>
    <user>Velia</user>
    <text>This is close to the haskell version:
&lt;https://github.com/jgm/cheapskate/blob/49b2d9dcc4a32c7304ec545c2d1ef45ecf5ee3de/Cheapskate/Types.hs#L47&gt;

```

-- | Inline elements.
data Inline = Str Text
            | Space
            | SoftBreak
            | LineBreak
            | Emph Inlines
            | Strong Inlines
            | Code Text
            | Link Inlines Text {- URL -} Text {- title -}
            | Image Inlines Text {- URL -} Text {- title -}
            | Entity Text
            | RawHtml Text
            deriving (Show, Data, Typeable)

type Inlines = Seq Inline
```</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:41:12.748800</ts>
    <user>Florencia</user>
    <text>I have an interesting conundrum, essentially I think I'm in need of a Maybe-unwrapping `if-let`,  if that makes sense:
```
try* : X -&amp;gt; Maybe Y -- let's say those are expensive
use : Y -&amp;gt; Z
fallback : Z

fn x : X -&amp;gt; Z
fn x =
    if-let (try1 x) as y then
        use y
    else if-let (try2 x) as y then
        use y
    else if-let (try3 x) as y then
        use y
    else if-let (try4 x) as y then
        use y
    else
        fallback
```
now that's a made-up syntax but I don't know how to get to a similar effect with what Elm offers.
```
fn x =
    try1 x
    |&amp;gt; Maybe.Extra.orElse (try2 x)
    |&amp;gt; Maybe.Extra.orElse (try3 x)
    |&amp;gt; Maybe.Extra.orElse (try4 x)
    |&amp;gt; Maybe.map use
    |&amp;gt; Maybe.withDefault fallback
```
has the disadvantage that it runs all four `try` functions eagerly
```
fn x =
    case try1 x of
        Just y -&amp;gt;
            use x
        Nothing -&amp;gt;
            case try2 x of
                ...
```
has a shape fireballing out of control...</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:42:07.750100</ts>
    <user>Leoma</user>
    <text>Can you make an orElse that takes a thunk?</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:42:34.751000</ts>
    <user>Leoma</user>
    <text>`orElse (\() -&amp;gt; try2 x)`</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:43:12.751700</ts>
    <user>Florencia</user>
    <text>Now that I think of it, probably the best thing to do here is
```
getY : X -&amp;gt; Maybe Y
getY x =
    -- probably something like
    if ... then
        ...
    else if ... then
        ...
    else if ... then
        ...
    else if ... then
        ...
    else
        Nothing

fn x =
    getY x
    |&amp;gt; Maybe.map use
    |&amp;gt; Maybe.withDefault fallback
```</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:43:19.752000</ts>
    <user>Florencia</user>
    <text>I probably can</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:45:15.752400</ts>
    <user>Huong</user>
    <text>(`orElseLazy` is a thing, too, btw)</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:47:51.752600</ts>
    <user>Leoma</user>
    <text>Anyway I think the tricky part is a gracefully failing parser. Like, `/not italic *this is bold*` should at least show the bold stuff as bold.
So, seeing `/not ...` isn’t enough to commit to italics.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:48:58.752800</ts>
    <user>Velia</user>
    <text>You should only commit when closing a style.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:50:46.753000</ts>
    <user>Leoma</user>
    <text>Right. So, I need lot’s of `Parser.backtrackable`</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:51:06.753200</ts>
    <user>Leoma</user>
    <text>It’ll be fine as the styles are per line. So complexity shouldn’t get out of hand.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:51:08.753400</ts>
    <user>Dede</user>
    <text>I still disagree.  Working on a grammar.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:52:33.753600</ts>
    <user>Velia</user>
    <text>I believe backtrackable is not needed, an `andThen` when closing a style to finalize it should be enough. It's still not trivial to organize the lists of texts with potential styles though. But I'm pretty sure the haskell version does something very similar (just a guess).</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:54:40.754100</ts>
    <user>Dede</user>
    <text>This is a sort of ad hoc LALR style grammar:
```
-- A line is an element and a newline
line = element newline
 | element whitespace newline

-- element has no whitespace at its edges
element = italic
 | bold
 | underlined
 | nonWhitespace
 | element whitespace element

italic = "/" element "/"
bold = ...

```</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:55:06.754400</ts>
    <user>Dede</user>
    <text>Implementing this manually, you maintain a lot of undecided state on the stack.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:56:06.754600</ts>
    <user>Dede</user>
    <text>I see at least one bug in my grammar, working…</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:56:18.754800</ts>
    <user>Velia</user>
    <text>You can only have 3 undecided states, as nested bold for example is not possible (the same style cannot be nested).</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:58:04.755900</ts>
    <user>Leoma</user>
    <text>Ahhh ok. I see. We don’t need backtrackable but it might make code simpler.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T16:58:54.756400</ts>
    <user>Leoma</user>
    <text>Back online in a few hours</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T17:01:25.756600</ts>
    <user>Dede</user>
    <text>Yeah, I gotta run as well.</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T17:03:49.757600</ts>
    <user>Lupita</user>
    <text>so far liking what i see in elm.  it's almost too simple,</text>
  </message>
  <message conversation_id="749">
    <ts>2019-03-10T17:49:09.758300</ts>
    <user>Kris</user>
    <text>Haskell uses alternative's `&amp;lt;|&amp;gt;` for that</text>
  </message>
  <message conversation_id="749">
    <ts>2019-03-10T17:49:21.758700</ts>
    <user>Kris</user>
    <text>`a &amp;lt;|&amp;gt; b &amp;lt;|&amp;gt; c &amp;lt;|&amp;gt; d` returns the first maybe that's a just</text>
  </message>
  <message conversation_id="748">
    <ts>2019-03-10T18:53:01.759300</ts>
    <user>Niesha</user>
    <text>`asum [a, b, c, d]` in short :smile:</text>
  </message>
  <message conversation_id="750">
    <ts>2019-03-10T19:20:59.761200</ts>
    <user>Kyung</user>
    <text>In an effort to understand how the Elm compiler works, I forked it to add support for compiling Kernel modules for local apps - &lt;https://github.com/Checksum/elm-compiler&gt;. I'm sure it's been done before, but I was pleasantly surprised at how Haskell felt familiar thanks to Elm! This is the first line of Haskell code I've ever written in my life :slightly_smiling_face:

*This is just an experiment by an Elm beginner. Please don't actually use this!*</text>
  </message>
  <message conversation_id="750">
    <ts>2019-03-10T19:31:34.762200</ts>
    <user>Lupita</user>
    <text>i'm trying a base project for Browser.elements.  i'm not how to now initiate an http request &lt;https://ellie-app.com/4WNFh2BnTKHa1&gt;</text>
  </message>
  <message conversation_id="750">
    <ts>2019-03-10T19:31:50.762500</ts>
    <user>Lupita</user>
    <text>getting a compile error</text>
  </message>
  <message conversation_id="750">
    <ts>2019-03-10T19:34:21.762900</ts>
    <user>Kris</user>
    <text>`{ ... } =&amp;gt; ( ... )` in init</text>
  </message>
  <message conversation_id="750">
    <ts>2019-03-10T19:36:03.763800</ts>
    <user>Kyung</user>
    <text>Is anyone else getting just the loading screen on Ellie? I can't seem to access it the last couple of days (tried the usual clear cache, private window, etc)</text>
  </message>
  <message conversation_id="750">
    <ts>2019-03-10T19:37:25.764000</ts>
    <user>Lupita</user>
    <text>ok, changed to ()</text>
  </message>
  <message conversation_id="750">
    <ts>2019-03-10T19:46:47.764500</ts>
    <user>Lupita</user>
    <text>ok works,  is this a good base for all projects now?  &lt;https://ellie-app.com/4WP4XkvFfsqa1&gt;</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-10T20:09:39.764600</ts>
    <user>Delois</user>
    <text>Evan did a presentation talking about improving compiler errors. He said the creator of scala was there taking notes. I don’t recall where I heard him mention it. If I had to guess I’d say it was:
&lt;https://player.fm/series/elixir-fountain/elixir-fountain-evan-czaplicki-2016-07-11&gt;

But I could be totally wrong about the source.</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-10T20:17:16.767700</ts>
    <user>Al</user>
    <text>Can someone demystify the `Parser` type for me? Both the Url parser docs (&lt;https://package.elm-lang.org/packages/elm/url/latest/Url-Parser&gt;) and the guide glance over this `Parser a b` type, but it's so prevalent in any code associated to Url parsing. More specifically, what does the `a` represent and what does the `b` represent in `Parser a b`?

As a follow up, if i have a parser of type `Parser (Route -&amp;gt; a) a` (like the one in the Url parsing guide), and i call `parse`on this parser (which has a signature of `Parser (a -&amp;gt; a) a -&amp;gt; Url -&amp;gt; Maybe a)`, don't I get a `Maybe Route`? This further seems to confuse me</text>
  </message>
  <message conversation_id="750">
    <ts>2019-03-10T21:44:31.769300</ts>
    <user>Tom</user>
    <text>&lt;@Kyung&gt; I haven't been able to access it for the last few days either</text>
  </message>
  <message conversation_id="750">
    <ts>2019-03-10T22:28:09.769700</ts>
    <user>Lupita</user>
    <text>finished my example  &lt;https://ellie-app.com/4WRcGdhshcGa1&gt;</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-10T22:40:36.769800</ts>
    <user>Hoyt</user>
    <text>nice. I’d recommend looking into RemoteData for your text</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-10T22:51:22.770000</ts>
    <user>Lupita</user>
    <text>oh man, just another thing to learn.</text>
  </message>
  <message conversation_id="752">
    <ts>2019-03-10T22:52:58.770200</ts>
    <user>Lupita</user>
    <text>is this something that you use?</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-10T23:11:07.770400</ts>
    <user>Hoyt</user>
    <text>Pretty much always when I’m loading data from an external endpoint</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-10T23:12:28.770600</ts>
    <user>Hoyt</user>
    <text>Here’s a really great video to watch about it &lt;https://www.youtube.com/watch?v=NLcRzOyrH08&gt;   Definitely helps getting into the elm mindset</text>
  </message>
  <message conversation_id="752">
    <ts>2019-03-10T23:15:50.770800</ts>
    <user>Lupita</user>
    <text>thanks!!</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-11T00:40:52.771100</ts>
    <user>Dede</user>
    <text>OK, here’s a more detailed shot at a permissive grammar.  This is not in a formal grammar language, it’s just an illustrative ad hoc approach.
```
whitespaceChar = CHARS IN ['\t', ' ']


whitespace = 
 whitespaceChar 
 | whitespace whitespaceChar


plainChar = CHARS NOT IN ['\t', ' ', '/', '*']


plain = 
 plainChar 
 | plain plainChar
 | plain '*' plainChar    -- handle * in middle of text
 | plain '/' plainChar    -- handle / in middle of text
 

atom =
 plain 
 | bold
 | italic
 | '*'  -- handle free-standing *
 | '/'  -- handle free-standing /
 | atom whitespace atom
 | atom '*' -- handle trailing '*' with no opener -- see conflict note (1) below
 | atom '/' -- handle trailing '/' with no opener -- see conflict note (2) below


openItalic = '/' body


openBold = '*' body


body = 
 atom 
 | openItalic
 | openBold
 | body whitespace atom
 | body whitespace openItalic
 | body whitespace openBold


bold = openBold '*' -- see conflict note (1) below

italic = openItalic '/' -- see conflict note (2) below

lineContent = 
 atom 
 | openItalic
 | openBold

line =
 lineContent newline
 | lineContent whitespace newline
 | whitespace lineContent newline
 | whitespace lineContent whitespace newline


-- Conflict notes
-- 
-- 1) There are conflicts in the two rules flagged by this note.  For the input "*hello*", 
--    one potential match is 
--
--    (bold = openBold '*') where (openBold = '*' body) where (body = atom) where (atom = plain("hello"))
-- 
--    another potential match is
--
--    (openBold = '*' body) where (body = atom) where (atom = atom '*') where (atom = plain("hello")
--
--    Since we prefer the first rule, our implementation should give it precedence when both are applicable.
--
-- 2) Same exact comment as above, except for italics
```</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-11T00:44:52.771300</ts>
    <user>Dede</user>
    <text>A traditional parser generator like bison would take something like this and turn it into a state machine that could parse  the input in a non-backtracking manner.

Since this grammar is mostly simple, you can probably implement it in a fairly straightforward way translating to Elm parser.  The area I highlighted with comments is where there’s some rule ambiguity that you’ll have to specifically address.</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-11T00:45:34.771500</ts>
    <user>Dede</user>
    <text>Bison and its ilk generally look at the next “token” in the stream to decide which rule(s) could be applicable.  Even hand-coded, that approach might be profitable here.</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-11T00:58:15.771700</ts>
    <user>Dede</user>
    <text>There’s probably more ambiguities that I haven’t identified.  E.g. I think you’ll need to address what to do with “/where do the /italics start/?”</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-11T00:58:33.771900</ts>
    <user>Dede</user>
    <text>Bedtime here, I should be around on and off tomorrow.</text>
  </message>
  <message conversation_id="751">
    <ts>2019-03-11T00:58:47.772100</ts>
    <user>Dede</user>
    <text>I hope this is helpful and not (just) bloviating.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:02:04.772300</ts>
    <user>Carlota</user>
    <text>Good question!</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:02:07.772500</ts>
    <user>Carlota</user>
    <text>Let's dig in.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:03:52.772700</ts>
    <user>Carlota</user>
    <text>"Turn URLs like /blog/42/cat-herding-techniques into nice Elm data."</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:04:09.772900</ts>
    <user>Carlota</user>
    <text>That's what the `type Parser a b` type says under it.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:04:56.774200</ts>
    <user>Isaias</user>
    <text>You know you've been converted when you opine the joys of functional programming to your mates in programming classes</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:06:36.774300</ts>
    <user>Carlota</user>
    <text>So, you can pretty much ignore the type, I reckon.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:06:41.774500</ts>
    <user>Carlota</user>
    <text>and look at the examples.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:08:54.774700</ts>
    <user>Carlota</user>
    <text>... if you look at the type of `parse`, which runs a parser, it becomes a bit more apparent why it's not that important: `parse : Parser (a -&amp;gt; a) a -&amp;gt; Url -&amp;gt; Maybe a`</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:09:38.775000</ts>
    <user>Carlota</user>
    <text>So it takes some `Parser (a -&amp;gt; a) a` and a `Url` and gives you back a `Maybe a`. Super confusing.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:12:06.775200</ts>
    <user>Carlota</user>
    <text>If you look at the example for `parse` it's more helpful...</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:12:26.775400</ts>
    <user>Carlota</user>
    <text>... and let's take the `search` example in `&amp;lt;/&amp;gt;`:

```
search : Parser (String -&amp;gt; a) a
search =
  s "search" &amp;lt;/&amp;gt; string
```</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:14:11.775600</ts>
    <user>Carlota</user>
    <text>so the `Parser a b` type there is where `a` is `String -&amp;gt; a` (different `a` tho, let's not get confused) and `b` is `a`. If we rename `Parser a b` to `Parser x y` temporarily it's easier: `Parser x y` means `x` is `String -&amp;gt; a` and `y` is `a`.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:14:40.775800</ts>
    <user>Carlota</user>
    <text>If we look at that side by side with this:

```
type Route = Home | Blog Int | NotFound

route : Parser (Route -&amp;gt; a) a
route =
  oneOf
    [ map Home top
    , map Blog (s "blog" &amp;lt;/&amp;gt; int)
    ]

toRoute : String -&amp;gt; Route
toRoute string =
  case Url.fromString string of
    Nothing -&amp;gt;
      NotFound

    Just url -&amp;gt;
      Maybe.withDefault NotFound (parse route url)
```</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:16:58.776000</ts>
    <user>Carlota</user>
    <text>... then things start becoming clearer, coz they have a `route : (Route -&amp;gt; a) a`... and they're using `map` to map the `Route` type's constructors over the ordinary parsers: for `Home` they're mapping over `top`, which parses nothing out, so that works coz `Home` takes no arguments. For `Blog`, which takes a single `int`, they've got `s "blog" &amp;lt;/&amp;gt; int"` which is a parser of `Parser (String -&amp;gt; a) a` (as we saw in the example above for  `search : Parser (String -&amp;gt; a) a` which is `s "search" &amp;lt;/&amp;gt; string`.)</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:23:29.776400</ts>
    <user>Carlota</user>
    <text>below, in `toRoute`, we can see they're using `parse route url` to match the function `route` as type `Parser (a -&amp;gt; a) a`. `route` has type `Parser (Route -&amp;gt; a) a` so that totally matches.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:24:26.776600</ts>
    <user>Carlota</user>
    <text>The thing about this Parser type is you should *actively ignore* the `a b` stuff. It's opaque, which means they don't want you to "look inside". Unfortunately, the pieces it exposes are necessary to make the type system able to write our actual code, so we have to have these ugly exposed type parameters.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:25:24.776800</ts>
    <user>Carlota</user>
    <text>You can think of the `a b` part of `Parser a b` as the internal parser state, though, if you like — ie what it's holding on to to do its job — which is to track all the segments of the route that have matched or not, and the functions you want to use to do the parsing with.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:26:24.777000</ts>
    <user>Carlota</user>
    <text>&amp;gt; As a follow up, if i have a parser of type `Parser (Route -&amp;gt; a) a` (like the one in the Url parsing guide), and i call `parse`on this parser (which has a signature of `Parser (a -&amp;gt; a) a -&amp;gt; Url -&amp;gt; Maybe a)`, don't I get a `Maybe Route`? This further seems to confuse me

Yeah, that's right.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:29:05.777200</ts>
    <user>Carlota</user>
    <text>Basically, you can't see into what it's doing by trying to look at the types, which is why this is confusing from the outside.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:40:05.777400</ts>
    <user>Carlota</user>
    <text>It helps to know that a `Parser a b` in the `Url` sense combined with the `parse` function is a function from `String` to a `Maybe a`, where you decide what `a` is. It does this by keeping lists of internal state matchers. When you use the `&amp;lt;/&amp;gt;` function, you're combining these state matchers with a kind of `andThen` on the prior success of the previous parsers and their result succeeding.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:40:31.777600</ts>
    <user>Carlota</user>
    <text>But, IMO, it's best to just build it up by using it with examples, bit by bit until you have an intuition about how to use them.</text>
  </message>
  <message conversation_id="753">
    <ts>2019-03-11T02:41:23.777800</ts>
    <user>Carlota</user>
    <text>If you want to dig into the internals, they're there... but they probably won't be *terribly* helpful to understanding how to use it. The examples are tho :slightly_smiling_face:</text>
  </message>
  <message conversation_id="754">
    <ts>2019-03-11T05:16:32.780300</ts>
    <user>Dorsey</user>
    <text>Hey! Elm module names must match the file path, right? It's more or less compiler's requirement. Also they need to be under one of `source-directories` specified in `elm.json`. Is it mentioned anywhere in the documentation? I'm trying to provide a link but can't find it.</text>
  </message>
  <message conversation_id="754">
    <ts>2019-03-11T05:20:22.781200</ts>
    <user>Carrol</user>
    <text>I cannot open &lt;https://ellie-app.com/&gt; anymore, in Chrome and Firefox it stays stuck in the Ellie logo. Anyone seeing this?</text>
  </message>
  <message conversation_id="754">
    <ts>2019-03-11T05:22:20.782400</ts>
    <user>Lynne</user>
    <text>&lt;@Dorsey&gt; It is mentioned here &lt;https://guide.elm-lang.org/webapps/modules.html&gt; under "Using modules", there is also a link to the structure of `elm.json` for applications which describes what "source-directories" is</text>
  </message>
  <message conversation_id="754">
    <ts>2019-03-11T05:22:43.782600</ts>
    <user>Dorsey</user>
    <text>Oh, thanks!</text>
  </message>
  <message conversation_id="754">
    <ts>2019-03-11T05:22:46.782800</ts>
    <user>Lynne</user>
    <text>Works for me. Might be some temporary issue depending on where you are</text>
  </message>
  <message conversation_id="754">
    <ts>2019-03-11T05:22:50.783000</ts>
    <user>Dorsey</user>
    <text>:heart:</text>
  </message>
  <message conversation_id="754">
    <ts>2019-03-11T05:22:58.783100</ts>
    <user>Carrol</user>
    <text>ok, thanks</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T05:41:30.783400</ts>
    <user>Monty</user>
    <text>How to make List of Headers from List of Strings?</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T05:43:43.784400</ts>
    <user>Kitty</user>
    <text>Is it some undocumented feature that when I use a `Browser.application` that it replaces all the nodes in the `body` element for my application?</text>
  </message>
  <message conversation_id="754">
    <ts>2019-03-11T05:44:09.784600</ts>
    <user>Lynne</user>
    <text>`headers = [Http.header "Access-Control-Allow-Origin" "&lt;http://localhost:8080&gt;"]`</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T05:44:48.785200</ts>
    <user>Lynne</user>
    <text>Yes, unfortunately</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T05:49:27.785600</ts>
    <user>Kitty</user>
    <text>that really caught me off guard, I cant find it in the documentation anywhere</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T05:52:30.786500</ts>
    <user>Lynne</user>
    <text>Same. And at least few others here as well. &lt;@Simon&gt; Suggested a workaround here: &lt;https://discourse.elm-lang.org/t/browser-application-doesnt-work-with-popular-analytics-approaches/2659/7&gt;</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T05:53:12.787100</ts>
    <user>Nana</user>
    <text>I wouldn't say totally undocumented, as it uses
```
type alias Document msg =
  { title : String
  , body : List (Html msg)
  }
```
and the guide says "This gives you control over the &amp;lt;title&amp;gt; and the &amp;lt;body&amp;gt; of the document"</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T05:55:30.787500</ts>
    <user>Nana</user>
    <text>and the docs also link to this post: &lt;https://github.com/elm/browser/blob/1.0.0/notes/navigation-in-elements.md&gt;</text>
  </message>
  <message conversation_id="756">
    <ts>2019-03-11T06:19:34.788000</ts>
    <user>Monty</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T06:24:27.789500</ts>
    <user>Kitty</user>
    <text>well `body` is a bit ambiguous in development, but sure. I must say it feels a bit counter-intuitive when you still run your application from JS like this:
```
var app = Elm.Main.init({ node: mountNode, })  
```</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T06:25:27.789900</ts>
    <user>Kitty</user>
    <text>let me read that link</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T06:26:36.790500</ts>
    <user>Kitty</user>
    <text>Ah I guess I dont need that node argument anymore :slightly_smiling_face:</text>
  </message>
  <message conversation_id="757">
    <ts>2019-03-11T08:36:05.799500</ts>
    <user>Al</user>
    <text>This is really good! :clap: :clap: :clap:  thank u!</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T10:02:14.799700</ts>
    <user>Granville</user>
    <text>I’ll need to see at least some of your code to understand what’s going on. Did you copy the `PortFunnels.elm` module from the example? Did you call `PortFunnels.makeFunnelDict` to create a table with your `socketHandler`? Seeing that function may help me.

Of course, it would also help to know that your websocket server, at `&lt;ws://localhost:3000/ws/ui&gt;` is actually getting the connection request and properly connecting. Can you add some print statements there to see what’s going on? Do you have another client, perhaps written in Node.js that can successfully connect?</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T10:05:18.799900</ts>
    <user>Granville</user>
    <text>It can also be useful to aim your client code at an echo server, e.g. &lt;wss://echo.websocket.org&gt;, or the simple JS echo server I included with the example.

You may also not have the ports configured properly. You should be able to set breakpoints in `site/js/PortFunnel/WebSocket.js` to see the commands come in, e.g. the `dispatcher` function.</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T10:09:15.800300</ts>
    <user>Granville</user>
    <text>And you can instrument the values coming back from the port code. In the example, this would be the `update` branch for the `Process` message, adding `Debug.log`:

```
        Process value -&amp;gt;
            case
                PortFunnels.processValue funnelDict (Debug.log "Process" value) model.state model
```</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T11:06:41.800800</ts>
    <user>Leoma</user>
    <text>So, with fresh eyes I’m thinking the following.
my AST looks like:
```
type Style
    = Bold
    | Italic
    | Underline


type Styled
    = Text String (Set Style)
    | URL String (Set Style)
```
Yes, I have a Set implementation that works on `==`.
Ok, so, something like `&amp;lt;whitespace&amp;gt;/&amp;lt;not-whitespace&amp;gt;` will always add Italic to my styles. It’s not a stack, so the next `&amp;lt;not-whitespace&amp;gt;/&amp;lt;whitespace&amp;gt;` pops it off. All styles are popped off at a newline.</text>
  </message>
  <message conversation_id="758">
    <ts>2019-03-11T11:07:00.801000</ts>
    <user>Leoma</user>
    <text>It’s much simpler and more forgiving (I think). I’ll play with this and see how it goes.</text>
  </message>
  <message conversation_id="758">
    <ts>2019-03-11T11:18:59.801300</ts>
    <user>Leoma</user>
    <text>I feel like I can more easily tokenize this with some simple regexps, then parse the output, but can I easily make elm/parser work with tokens instead of strings?</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T11:37:32.801600</ts>
    <user>Dede</user>
    <text>If you use elm parser for the tokenization, you can just do
```
star = symbol "*"
```
and then use star as a "token"</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T11:57:11.801900</ts>
    <user>Lynn</user>
    <text>hmm, I don’t think I did PortFunnels.makeFunnelDict so I’ll see if that helps</text>
  </message>
  <message conversation_id="755">
    <ts>2019-03-11T12:16:40.802100</ts>
    <user>Dede</user>
    <text>Thinking more -- `run` is defined specifically w.r.t. a String, so you have to tokenize within the Parser framework to use it.</text>
  </message>
  <message conversation_id="759">
    <ts>2019-03-11T13:43:26.803400</ts>
    <user>Maura</user>
    <text>:wave: Where are the docs regarding creating a elm-package.json for a package? I remember seeing a while ago, but can't seem to find it now.</text>
  </message>
  <message conversation_id="759">
    <ts>2019-03-11T13:44:49.803800</ts>
    <user>Maura</user>
    <text>Ah, it's called `elm.json` now isn't it.</text>
  </message>
  <message conversation_id="759">
    <ts>2019-03-11T13:45:58.804400</ts>
    <user>Maura</user>
    <text>I found it! Sorry for the noise.

&lt;https://github.com/elm/compiler/blob/master/docs/elm.json/package.md&gt;</text>
  </message>
  <message conversation_id="759">
    <ts>2019-03-11T13:46:29.805000</ts>
    <user>Lindsey</user>
    <text>My approach is pretty much getting some other project's elm.json and copying it.  Then keep fixing stuff while trying to publish until it works...</text>
  </message>
  <message conversation_id="759">
    <ts>2019-03-11T13:47:30.806000</ts>
    <user>Lindsey</user>
    <text>There's a gadget out there for viewing your generated docs before publishing, but I forget what it was.  A good thing to do before publishing.</text>
  </message>
  <message conversation_id="759">
    <ts>2019-03-11T13:47:56.806300</ts>
    <user>Lindsey</user>
    <text>here it is:  &lt;https://elm-doc-preview.netlify.com/&gt;</text>
  </message>
  <message conversation_id="759">
    <ts>2019-03-11T14:07:13.806900</ts>
    <user>Maura</user>
    <text>Oh, that's cool.</text>
  </message>
  <message conversation_id="759">
    <ts>2019-03-11T15:41:57.807400</ts>
    <user>Leoma</user>
    <text>That kind of seem like a limitation, but, whatever…</text>
  </message>
  <message conversation_id="760">
    <ts>2019-03-11T16:56:12.808300</ts>
    <user>Leoma</user>
    <text>Has anyone seen something like Prolog’s DCG parsing ported to a pure functional language?</text>
  </message>
  <message conversation_id="761">
    <ts>2019-03-11T21:16:44.808500</ts>
    <user>Carlota</user>
    <text>Oh I'm glad. I was really worried it was going to confuse the stuffing out of you.</text>
  </message>
  <message conversation_id="761">
    <ts>2019-03-11T21:32:12.808700</ts>
    <user>Carlota</user>
    <text>You might want to investigate parsers and pretty printers — two sides of the same coin. There are quite a few articles about such things... seems also related to recursions schemes (with catamorphisms &amp;amp; anamorphisms utilising Algebras and Coalgebras). &lt;http://hackage.haskell.org/package/syntax&gt;</text>
  </message>
  <message conversation_id="762">
    <ts>2019-03-12T02:05:55.817500</ts>
    <user>Yang</user>
    <text>hey everyone .. an architecture question here. I keep having this need in elm to create an an object and a container of objects. I would like to keep them separate. For example i have An Exchange module.. and I want to create a container that will keep a bunch of this Exchanges in a container of some sort. It can be a list or dict or what not. In some projects i done the equivalent of `module Exchange.Container exposing(..` and in others `module Excahges` in the previous case i have the normal folder structure `/Exchange/Container.elm` and in the other one i have `/Main.elm`, `Exchange.elm` and `Exchanges.elm`

The name-spacing works but conceptually is misleading. Is like having the container of exchanges inside the Exchange.. when in fact the Exchange data structure is a child of this container.
On the other hand in big apps having all this Exchange, and Exchanges in the main folder starts feeling clunky.. there are usually many such named data structures that live in containers of some kind.
What are some good ways you people figured out to structure this conceptual parent child relation at  module level? Im thinking is possible there is no right answer but maybe someone has a nicer way of dealing with this which is better then mine.</text>
  </message>
  <message conversation_id="762">
    <ts>2019-03-12T02:06:51.817900</ts>
    <user>Yang</user>
    <text>thanks:)</text>
  </message>
  <message conversation_id="762">
    <ts>2019-03-12T02:08:39.818200</ts>
    <user>Earlean</user>
    <text>`module Exchange.Container` seems fine to me</text>
  </message>
  <message conversation_id="762">
    <ts>2019-03-12T02:09:38.819000</ts>
    <user>Earlean</user>
    <text>I don't find it misleading at all, the name spacing of modules as nothing to do with how you use the values of types defined in those modules</text>
  </message>
  <message conversation_id="762">
    <ts>2019-03-12T02:14:00.820500</ts>
    <user>Yang</user>
    <text>hmm ok, i like it better as well just worried other people might think diferently.</text>
  </message>
  <message conversation_id="762">
    <ts>2019-03-12T02:14:39.821400</ts>
    <user>Yang</user>
    <text>for me is about finding all things related to something in 1 folder.</text>
  </message>
  <message conversation_id="762">
    <ts>2019-03-12T02:14:51.821800</ts>
    <user>Yang</user>
    <text>increases discovery</text>
  </message>
  <message conversation_id="762">
    <ts>2019-03-12T02:15:57.822800</ts>
    <user>Earlean</user>
    <text>`module Exchange` is a module that contains code to do with `Exchanges`, It's not strange at all to find code in there that relates to collections of `Exchanges`</text>
  </message>
  <message conversation_id="762">
    <ts>2019-03-12T02:16:25.823000</ts>
    <user>Yang</user>
    <text>ok, thanks for insight.</text>
  </message>
  <message conversation_id="763">
    <ts>2019-03-12T05:15:24.825400</ts>
    <user>Leonore</user>
    <text>Finally started using the `elm/file` package. Feels good to delete all the js we used to have :smile:</text>
  </message>
  <message conversation_id="764">
    <ts>2019-03-12T06:27:38.826800</ts>
    <user>Valeria</user>
    <text>Hello everybody, you still have 2 days to do a CFP to elmeurope</text>
  </message>
  <message conversation_id="764">
    <ts>2019-03-12T06:27:51.827000</ts>
    <user>Valeria</user>
    <text>&lt;https://checkout.eventlama.com/#/events/elm-europe-2019/cfp&gt;</text>
  </message>
  <message conversation_id="764">
    <ts>2019-03-12T06:29:40.828400</ts>
    <user>Valeria</user>
    <text>We are looking for weird stuff (webrtc / maths / realtime explorations for example) as well as real world companies running on elm and how teams work with elm</text>
  </message>
  <message conversation_id="765">
    <ts>2019-03-12T07:05:48.828600</ts>
    <user>Teri</user>
    <text>Reactionary hacks are the best hacks</text>
  </message>
  <message conversation_id="766">
    <ts>2019-03-12T07:36:51.831200</ts>
    <user>Sueann</user>
    <text>Hi people, I am new with ELM and need a help from the community. I have definitions:
```
type Form a
    = Form FormData


type alias FormData =
    List ( Field, String )


type Field
    = FirstName String
    | LastName String
    | Gender String
    | Address { street : String, city : String }

...


initialFormData : FormData
initialFormData =
    [ ( FirstName "", "" )
    , ( LastName "", "" )
    , ( Gender "male", "" )
    ]


init : () -&amp;gt; ( Model, Cmd Msg )
init _ =
    ( { form = Form initialFormData }, Cmd.none )

...

```

view:
```
...
                [ renderFormInput "First name" &amp;lt;|
                    Html.input
                        [ Attr.type_ "text"
                        , Events.onInput (UpdateFormField &amp;lt;&amp;lt; FirstName)
                        ]
                        []
...
```

```
updateFormField : Field -&amp;gt; Form a -&amp;gt; Form a
updateFormField field form =
    case field of
        FirstName value -&amp;gt;
            Debug.log "updateFormField"
            { form | field = value } &amp;lt;------------------------------------HERE IS THE QUESTION
        LastName value -&amp;gt;
            form
        Gender value -&amp;gt;
            form
        Address value -&amp;gt;
            form
```

How can I update the model form state in marked place????? Please help</text>
  </message>
  <message conversation_id="766">
    <ts>2019-03-12T08:03:11.832100</ts>
    <user>Bert</user>
    <text>```
updateFormField : Field -&amp;gt; Form a -&amp;gt; Form a
updateFormField field (Form form) =
    case field of
        FirstName value -&amp;gt;
            Form { form | firstName = value }
        -- ...
```</text>
  </message>
  <message conversation_id="766">
    <ts>2019-03-12T08:04:53.833200</ts>
    <user>Bert</user>
    <text>Wait, your form data was a list and not a record</text>
  </message>
  <message conversation_id="766">
    <ts>2019-03-12T08:06:04.833700</ts>
    <user>Bert</user>
    <text>I don't understand what the `( Field, String )` means.</text>
  </message>
  <message conversation_id="766">
    <ts>2019-03-12T08:06:17.834000</ts>
    <user>Bert</user>
    <text>What does the string hold?</text>
  </message>
  <message conversation_id="766">
    <ts>2019-03-12T08:08:44.835600</ts>
    <user>Bert</user>
    <text>Anyways, the code I posted would work had your FormData been like this:
```
type alias FormData = 
    { firstName : String
    , lastName : String
    , gender : String
    }
```</text>
  </message>
  <message conversation_id="766">
    <ts>2019-03-12T08:13:08.836300</ts>
    <user>Sueann</user>
    <text>May be String holds an error message of the validation function</text>
  </message>
  <message conversation_id="766">
    <ts>2019-03-12T08:14:19.836800</ts>
    <user>Sueann</user>
    <text>So you advise to move from tuples to the records in defenitions?</text>
  </message>
  <message conversation_id="767">
    <ts>2019-03-12T09:27:27.837900</ts>
    <user>Valeria</user>
    <text>Elm europe is not a standard conference. We love emotion, people, and deep feelings. Don’t hesitate if you have something you are passionate about that you want to share with us.</text>
  </message>
  <message conversation_id="767">
    <ts>2019-03-12T09:32:31.838700</ts>
    <user>Kris</user>
    <text>The $400 travel budget is sadly quite restrictive for many of us </text>
  </message>
  <message conversation_id="767">
    <ts>2019-03-12T09:36:25.838900</ts>
    <user>Valeria</user>
    <text>I understand, but we can’t afford more, sorry</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:40:51.839200</ts>
    <user>Dede</user>
    <text>So I totally got sniped by this little challenge problem.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:40:59.839500</ts>
    <user>Dede</user>
    <text>I have written something which is mostly working for bold and italics.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:41:02.839700</ts>
    <user>Dede</user>
    <text>I'm not particularly happy with it.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:41:05.839900</ts>
    <user>Dede</user>
    <text>Yet.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:41:39.840100</ts>
    <user>Dede</user>
    <text>What I wound up doing, at least so far, is using Elm Parser just to tokenize, and then hand-writing the parsing functions that consume the tokens to produce the document.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:43:31.840300</ts>
    <user>Dede</user>
    <text>You can do a lot without backtracking given one token of lookahead, but if you work entirely in the Elm framework chomping the first character of that lookahead token immediately puts you in backtracking land.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:44:04.840500</ts>
    <user>Leoma</user>
    <text>I went down a HUGE rabbit hole and read &lt;http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf&gt; and started implementing my own parser from scratch. I was starting to parse the kind of stuff I wanted but performance was abysmal even for small bits of text.
Back to elm/parser with some ideas I got form the process.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:44:34.840700</ts>
    <user>Leoma</user>
    <text>I’m very much in agreement (now) that I can avoid backtracking.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:44:58.841000</ts>
    <user>Dede</user>
    <text>I'm not sure you can using just elm-parser, is the thing :wink:</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:46:57.841200</ts>
    <user>Hoa</user>
    <text>What a thread, dudes :slightly_smiling_face:</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:48:25.841400</ts>
    <user>Leoma</user>
    <text>Maybe I should go back to optimizing my monadic parsers. :man-facepalming:</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:48:58.841700</ts>
    <user>Virgie</user>
    <text>elm/parser is a monadic parser. Are there advantages to looking at the internals?</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:50:29.842100</ts>
    <user>Leoma</user>
    <text>Right, it has andThen. Which I can build a bunch of other stuff with. Maybe I need more primitives to make expressing my grammar easier. I just feel like I’m going in circles.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:54:06.842300</ts>
    <user>Leoma</user>
    <text>It seems there are the right pieces in elm/parser, I just can’t seem to fit them together in a way that gets me what I need. Honestly, I’d just pay someone for the right solution so I can get on with the rest of my work.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:55:08.842500</ts>
    <user>Dede</user>
    <text>So here's what I have in progress:
&lt;https://github.com/jhbrown94/elmish-minimarkdown&gt;</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:55:20.842700</ts>
    <user>Dede</user>
    <text>pull, run elm reactor, navigate to src/Main.elm</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:55:24.842900</ts>
    <user>Dede</user>
    <text>I put it all under MIT license.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:55:30.843100</ts>
    <user>Dede</user>
    <text>Maybe it'll at least give you ideas.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:55:54.843300</ts>
    <user>Dede</user>
    <text>I have a strong urge to refactor the hell out of it, so it will change quickly if I don't abandon it :wink:</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T10:56:40.843500</ts>
    <user>Leoma</user>
    <text>Thanks. Getting a 404. Is the repo private?</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:01:56.843800</ts>
    <user>Virgie</user>
    <text>So what is the problem exactly? what is the minimal grammar that has the problem?
does this still have it?

```
bold ::= '**' (text | italic)* '**'

italic ::= '*' (text | bold)* '*' 

text ::= (\c -&amp;gt; c /= '*')*
```</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:02:39.844200</ts>
    <user>Dede</user>
    <text>It was private, I made it public</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:02:46.844400</ts>
    <user>Dede</user>
    <text>I'm getting weird 404s on and off.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:02:54.844600</ts>
    <user>Leoma</user>
    <text>&lt;@Virgie&gt; I want to correctly parse stuff like `/italic *and bold* and just italic/ and 4/2=2 and here is a url: &lt;http://foo.bar.com&gt;`</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:03:18.844800</ts>
    <user>Dede</user>
    <text>I'm not sure if there's a settling period, if github's having trouble, or if there's some data issue with my specific repo.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:06:29.845200</ts>
    <user>Leoma</user>
    <text>In any case, &lt;@Virgie&gt;, for whatever reason, I’m having trouble putting my thoughts into Elm + elm/parser code.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:06:59.845400</ts>
    <user>Dede</user>
    <text>The hard part isn't the grammar for correctly formatted code.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:07:08.845600</ts>
    <user>Dede</user>
    <text>The hard part is tolerating malformatted code cleanly.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:07:15.845800</ts>
    <user>Dede</user>
    <text>"*hello world*" is easy</text>
  </message>
  <message conversation_id="769">
    <ts>2019-03-12T11:07:23.846000</ts>
    <user>Dede</user>
    <text>"*hello world /how are you/" is less so</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:08:14.846200</ts>
    <user>Dede</user>
    <text>Can you try the repo again?</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:08:23.846400</ts>
    <user>Dede</user>
    <text>I just had to flush my github cookies and log in again and things settled down.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:08:37.846600</ts>
    <user>Dede</user>
    <text>changing private-&amp;gt;public may be rare enough that they cache some bad state?</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:08:38.846800</ts>
    <user>Dede</user>
    <text>I don't know.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:10:44.847000</ts>
    <user>Leoma</user>
    <text>I can see it. Thanks.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:11:30.847600</ts>
    <user>Dede</user>
    <text>Awesome.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:11:55.848000</ts>
    <user>Dede</user>
    <text>It is not pretty at all.  I have ideas, but feedback is always welcome.</text>
  </message>
  <message conversation_id="770">
    <ts>2019-03-12T11:14:44.849900</ts>
    <user>Shavonda</user>
    <text>Hi! I found a bug in a package, and was able to fix it by modifying the downloaded package source. I forked the project on github to create a pull request. But I can’t figure out how to get my main Elm project to use the forked version of the package to test that my fix actually works. Is there a way to do this?</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:16:37.852000</ts>
    <user>Leoma</user>
    <text>Ya, I have similar-ish ideas.
```
type Style
    = Bold
    | Italic
    | Underline

type Styles = Set Style
```

then
```
parseText : Styles -&amp;gt; Parser Styled
```

so if parseText encounters a ` close italic/` but Italic isn’t in Styles, then it’s treated as text.

Then, if I see an openItalic, and I’m not italic, then do one of (parse openItalic, parse Styled content, parse close italics) OR (parse the open italic as text, parse styled content)</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:17:21.853000</ts>
    <user>Jin</user>
    <text>The only way is to remove the original package from the `elm.json` and manually add the forked package into your source directory. You can use the `"source-directories"` field there to e.g. to add a `"vendor"` directory.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:17:50.853600</ts>
    <user>Leoma</user>
    <text>But I don’t have compiling code at the moment. Just a pile of half-coded thoughts.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:18:25.855200</ts>
    <user>Jin</user>
    <text>Or you could publish your fork as a package, but that would clutter the ecosystem.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:18:26.855400</ts>
    <user>Shavonda</user>
    <text>Ok, thanks. I suspected that might be the answer, but I couldn’t find any documentation about this.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:18:58.855800</ts>
    <user>Shavonda</user>
    <text>Yes, I don’t want to do that, I just want to check my work before creating the pull request.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:19:30.856000</ts>
    <user>Shavonda</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:19:36.856200</ts>
    <user>Corinne</user>
    <text>Anyone know why `Elm.main.init({})`might return an empty object every time (and thus `app.ports is undefined`)?  I'm using 0.19, Webpack 4 and a few plugins, `Browser.application`...</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:20:15.856900</ts>
    <user>Jin</user>
    <text>Do you actually use the port in you Elm code?</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:21:01.857600</ts>
    <user>Jin</user>
    <text>Otherwise the dead code elimination will remove it.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:21:14.857900</ts>
    <user>Corinne</user>
    <text>The whole App?</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:22:02.858500</ts>
    <user>Jin</user>
    <text>The port, so it won’t appear in `app.ports`.</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:22:13.858800</ts>
    <user>Corinne</user>
    <text>but `app.ports` is `undefined`</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:22:31.859400</ts>
    <user>Corinne</user>
    <text>Unless.. .that's expected?</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:23:43.859700</ts>
    <user>Rosa</user>
    <text>you gotta wire them up on the Elm side</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:25:11.861000</ts>
    <user>Corinne</user>
    <text>Ah, right so a completely empty object for `app` is normal</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:25:55.861900</ts>
    <user>Mindy</user>
    <text>If you never use any incoming port in your `subscriptions` function used in `main` nor any outgoing port in `init` or `update`, then `app.ports` will be undefined because the elm compiler will have optimized those away (as they are never called)</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:26:58.862700</ts>
    <user>Corinne</user>
    <text>Cool, thanks. I guess I was expecting _something_ to be in that object, or maybe a `[]` for `ports`, but I see now</text>
  </message>
  <message conversation_id="768">
    <ts>2019-03-12T11:30:55.865500</ts>
    <user>Mindy</user>
    <text>Basically, `app` is just an object that may or may not have a `ports` field and `app.ports` is an object with one field per port called in the elm side.
If it is an outgoing port, it will have access to a `subscribe` and an `unsubscribe` method. If it is an incoming port it will have a `send` method.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:39:27.865900</ts>
    <user>Virgie</user>
    <text>using `/` as the italic symbol in combination with `/` as division and `//` in url's isn't possible normally. Why is `/` the symbol for italic (thought it was a single `*`, or `_`)</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:42:42.866100</ts>
    <user>Leoma</user>
    <text>None</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:42:47.866500</ts>
    <user>Leoma</user>
    <text>&lt;@Virgie&gt; &lt;https://bear.app&gt; parses this way :point_up:. It’s more intuitive for people who don’t understand markdown.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:43:52.867000</ts>
    <user>Dede</user>
    <text>In my implementation, modifiers (/*) only count if the modifiers have whitespace on the left-but-not-right to open, and right-but-not-left to close.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:43:55.867200</ts>
    <user>Dede</user>
    <text>It covers most cases.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:44:09.867400</ts>
    <user>Dede</user>
    <text>`(5 / 4) ` also parses fine with that.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:44:27.867700</ts>
    <user>Leoma</user>
    <text>My math is a bit off. :blush:</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:44:33.867900</ts>
    <user>Virgie</user>
    <text>my guess is then that the url is parsed differently</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:44:45.868200</ts>
    <user>Virgie</user>
    <text>as in, a url is not text, it is its own thing</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:44:58.868400</ts>
    <user>Leoma</user>
    <text>Yes.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:45:44.868600</ts>
    <user>Leoma</user>
    <text>But it can also be styled.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:45:50.868800</ts>
    <user>Leoma</user>
    <text>None</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:46:00.869200</ts>
    <user>Virgie</user>
    <text>does something like `ftp://` also parse as a url? or just `http[s]`?</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:48:10.870100</ts>
    <user>Leoma</user>
    <text>I mean, once one has a the code for one, the other is easy to add. My target is very simple markdown I can explain to non-savvy users is a single example. `"*this will be bold* /this will be italic/" &lt;http://clickme.com&gt;"` I think most people won’t know or care about ftp.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:50:51.872600</ts>
    <user>Leoma</user>
    <text>Anyway, I have some pseudo code I like. Off to the battlefield to see where this goes. Back in a bit and thanks to everyone for their help so far.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:51:33.873300</ts>
    <user>Kymberly</user>
    <text>is there any way to "namespace" a bunch of type constructors?  I want to import a type `S` but have the type constructors accessed on `S`, e.g. `S.Value`.  Maybe there's a clever trick that I don't know...
```
module Values exposing (S(..))

type S = A | B | C
...
module Main

import Values exposing (S)

defaultModel =
    S.A
```</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:53:37.874000</ts>
    <user>Hoa</user>
    <text>To my knowledge constructors are on the same level of visibility of the type.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:55:20.875600</ts>
    <user>Hoa</user>
    <text>If you constructors have generic names consider to add a suffix or prefix to them. E.g. `type BlendMode = MultiplyMode | OverlayMode | ... ` instead of generic `Multiply` or `Overlay`.</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:56:20.876200</ts>
    <user>Hoa</user>
    <text>In your example I would write `Values.A`</text>
  </message>
  <message conversation_id="771">
    <ts>2019-03-12T11:58:54.876900</ts>
    <user>Carman</user>
    <text>Constructors are namespaced by the name of their module, not their type :+1:</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:07:20.878700</ts>
    <user>Brady</user>
    <text>Any package for AES Symmetric Encryption?</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:08:23.879600</ts>
    <user>Brady</user>
    <text>I want to exchange keys with node.js and send encrypted messages between server and Elm app</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:08:49.880200</ts>
    <user>Brady</user>
    <text>I can use ports, but I'd like to do that in Elm if possible</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:11:21.881400</ts>
    <user>Dorsey</user>
    <text>Is there any tool that checks if dependencies listed in `elm.json` are actually used?</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:11:51.882000</ts>
    <user>Brady</user>
    <text>&lt;@Dorsey&gt; &lt;https://github.com/stil4m/elm-analyse&gt;</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:12:21.882800</ts>
    <user>Dede</user>
    <text>Elm parser question:  how would one implement a grammar fragment of this form?
```
textSquence = textNoWhitespace | textSequence whitespace textNoWhitespace
```</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:12:33.883200</ts>
    <user>Dede</user>
    <text>(idiomatically?)</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:12:38.883400</ts>
    <user>Hoa</user>
    <text>&lt;@Brady&gt; Other ppl are using this: &lt;https://package.elm-lang.org/packages/billstclair/elm-crypto-aes/latest/&gt;</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:13:06.884000</ts>
    <user>Hoa</user>
    <text>Not expert, tho. Might well be it has limits  :slightly_smiling_face:</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:13:40.884600</ts>
    <user>Brady</user>
    <text>&lt;@Hoa&gt; I was looking at that but cannot figure how to import shared key, but thanks!</text>
  </message>
  <message conversation_id="772">
    <ts>2019-03-12T12:29:42.884700</ts>
    <user>Dorsey</user>
    <text>Thanks &lt;@Brady&gt; (and &lt;@Shea&gt; of course)</text>
  </message>
  <message conversation_id="773">
    <ts>2019-03-12T12:30:46.884900</ts>
    <user>Dede</user>
    <text>Test case question:  `/* hello*/`   Does this get italics or not? :wink:</text>
  </message>
  <message conversation_id="773">
    <ts>2019-03-12T12:35:48.885200</ts>
    <user>Leoma</user>
    <text>So, I’m not super fussy about edge cases, but I suspect the simplest parser that mostly works will parse that as `Italic "* hello*"` (or however the type is represented)</text>
  </message>
  <message conversation_id="773">
    <ts>2019-03-12T12:58:37.886700</ts>
    <user>Dede</user>
    <text>Broader question:  Elm Parser mostly advertises itself as a replacement for regexps, rather than, say, for BNF-driven parser generators (e.g. yacc/bison.)  Do people use it in the latter manner as well, or mostly hand-write parsing once the Parser has handled tokenization?</text>
  </message>
  <message conversation_id="774">
    <ts>2019-03-12T14:20:42.886800</ts>
    <user>Leoma</user>
    <text>Update: I believe I’ve found a fast manual way to to this without Parser or Regexp. Will share if/when it works. (Very Fermat-esque statement.)</text>
  </message>
  <message conversation_id="775">
    <ts>2019-03-12T14:52:37.887100</ts>
    <user>Huong</user>
    <text>parser combinators are usually used to parse straight into an AST, so no separate lexer/parser, thing. So yeah, elm/parser type parsers are definitely used as a replacement for BNF-driven parser generators</text>
  </message>
  <message conversation_id="775">
    <ts>2019-03-12T14:57:28.887400</ts>
    <user>Dede</user>
    <text>Thanks.  Formally does that wind up being in the LL top-down family of parsers, then?</text>
  </message>
  <message conversation_id="775">
    <ts>2019-03-12T15:05:26.887600</ts>
    <user>Huong</user>
    <text>Yeah, pretty much</text>
  </message>
  <message conversation_id="775">
    <ts>2019-03-12T15:06:39.887800</ts>
    <user>Huong</user>
    <text>As a nontrivial example of something that's parsed using parser combinators: our dearly beloved `elm` compiler parses Elm using parser combinators :slightly_smiling_face:</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T16:02:38.888100</ts>
    <user>Dede</user>
    <text>:wink:</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T16:48:12.888500</ts>
    <user>Dede</user>
    <text>In Haskell or elm?</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T16:49:33.888700</ts>
    <user>Huong</user>
    <text>Haskell, though Elm can be parsed using `elm/parser`, in Elm, too - `stil4m/elm-syntax` does just that</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T16:51:47.890000</ts>
    <user>Kymberly</user>
    <text>I'm trying to get the error message out of `Json.Decode.fromValue`, and the docs _say_ it's a `Result String a` but when I `Debug.log` it it's `Err (Failure "Expecting an OBJECT with a field named `accessTokens`" &amp;lt;internals&amp;gt;)`</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T16:52:13.890400</ts>
    <user>Kymberly</user>
    <text>are the docs misleading or am I doing something wrong there?</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T16:54:02.891600</ts>
    <user>Kymberly</user>
    <text>```
-- decodeValue : Decoder a -&amp;gt; Value -&amp;gt; Result String a

decodedJson =
    userJson
        |&amp;gt; D.decodeValue
            (D.map3 User
                (D.field "name" D.string)
                (D.field "id" D.string)
                (D.field "username" D.string)
            )

updatedModel =
    case Debug.log "decodedJson" decodedJson of
        Ok value -&amp;gt; -- great!
        Err error -&amp;gt; -- error should be a string, right?
```</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T16:56:04.892100</ts>
    <user>Kymberly</user>
    <text>if I add `D.Failure` to the pattern, I get some clues...
```
Missing possibilities include:

    Err (Field _ _)
    Err (Index _ _)
    Err (OneOf _)
```</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T16:58:05.892500</ts>
    <user>Earlean</user>
    <text>&lt;@Kymberly&gt; &lt;https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#Error&gt;</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T16:58:21.893100</ts>
    <user>Earlean</user>
    <text>You must be looking at the wrong package docs</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T17:02:27.893500</ts>
    <user>Kymberly</user>
    <text>dang I must've checked that I was on latest a dozen times - but prob on another package page.</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T17:02:29.893700</ts>
    <user>Kymberly</user>
    <text>thx!</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T17:03:03.894200</ts>
    <user>Kymberly</user>
    <text>Huh, I was looking at &lt;https://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode&gt;</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T17:05:17.895200</ts>
    <user>Earlean</user>
    <text>Yep, that's docs for the core package for Elm 0.18</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T17:08:00.896100</ts>
    <user>Kymberly</user>
    <text>oh yikes - I'll have to keep an eye for "packages/elm-lang" - it shows up in a google search. :confused:</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T17:14:34.897200</ts>
    <user>Earlean</user>
    <text>If you search via &lt;https://packages.elm-lang.org&gt; you'll only get 0.19 packages</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T17:15:02.897800</ts>
    <user>Earlean</user>
    <text>Older packages will come up in Google searches</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T17:31:54.898100</ts>
    <user>Millie</user>
    <text>&lt;@Kymberly&gt; &lt;https://github.com/elm/package.elm-lang.org/issues/275&gt;</text>
  </message>
  <message conversation_id="777">
    <ts>2019-03-12T17:32:09.898200</ts>
    <user>Dede</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="777">
    <ts>2019-03-12T17:33:20.898400</ts>
    <user>Leoma</user>
    <text>About to have dinner, but I’ll leave you with this &lt;https://gist.github.com/z5h/493423f87f77bbdcf886159b21a3dc87&gt;

Should I feel bad I’m now using regexs? I think I’m using them responsibly.</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T17:50:47.898700</ts>
    <user>Dede</user>
    <text>Does it work?  Is it maintainable?  If so, it’s good enough for prod :wink:</text>
  </message>
  <message conversation_id="776">
    <ts>2019-03-12T18:39:19.900200</ts>
    <user>Leoma</user>
    <text>Eventually yes and yes. But I’m mildly um bothered by the fact the elm/parser didn’t make it easier.</text>
  </message>
  <message conversation_id="779">
    <ts>2019-03-12T18:55:50.900400</ts>
    <user>Velia</user>
    <text>I don't think that such a markdown can have very simple rules and be very practical at the same time.
For example have a look at the commonMark specification that tries to give a synthesis of the reasonable rules:
&lt;https://spec.commonmark.org/0.28/#emphasis-and-strong-emphasis&gt;

Not that simple...

I would not go the regexs route for performance reasons (you should test what you did on the biggest/more complex document supported by the software) and because you will have tons of edge cases that you will fix, progressively making the regexs more and more complicated, and their maintenance impossible without breaking something.

Anyway, just to show that something is possible with elm/parser:
&lt;https://ellie-app.com/4XGvnPg32fYa1&gt;

The rules are very strict, and therefore most likely not very practical:
• Delimiters are '/', '*' and '_' for italic, bold and underline (the '/' choice is quite risky in my opinion)
• You can nest them but if one is not closed inside another, it will be cancelled

That's it. I did not implement any space before/after things, line breaks or url handling.
You could add an url parser before every others to handle them without conflicting with the styles.
However I did not really understand what you wanted about accepting some divisions like "5/2" without conflicting.

The code  is a little obfuscated by the usage of `loop` to avoid stack issues (so it uses tail-call elimination),.
Anyway this is just for demo purposes, and there may be bugs. The performance should be reasonable though.</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T19:23:06.900700</ts>
    <user>Dede</user>
    <text>I just pushed a big overhaul to &lt;https://github.com/jhbrown94/elmish-minimarkdown&gt;  It’s still not a pure Elm Parser implementation, but it’s a lot cleaner than the first pass.s</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T19:23:57.900900</ts>
    <user>Dede</user>
    <text>(As before, right now it just supports italic and bold.)</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T19:24:10.901100</ts>
    <user>Dede</user>
    <text>But it handles all the goofy cases reasonably well IMHO.</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T19:27:35.902200</ts>
    <user>Jeanene</user>
    <text>Think this is a readable function?
```
is18 : Int -&amp;gt; String -&amp;gt; Bool
is18 currentTime dobStr =
    let
        ( month, day, year ) =
            dobStr |&amp;gt; String.split "/" |&amp;gt; listToTuple3
    in
    case Iso8601.toTime (year ++ "-" ++ month ++ "-" ++ day) of
        Ok value -&amp;gt;
            -- 568025136000 is 18 years in miliseconds
            568025136000 &amp;lt; (currentTime - Time.posixToMillis value)

        _ -&amp;gt;
            False


listToTuple3 : List String -&amp;gt; ( String, String, String )
listToTuple3 list =
    case list of
        [ a, b, c ] -&amp;gt;
            ( a, b, c )

        _ -&amp;gt;
            ( "", "", "" )
```
where `dobStr` is a `mm/dd/yyyy` string
I suppose I could ensure that that string is formatted as a iso8601 string first, but wanna start here…</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T19:31:18.902700</ts>
    <user>Hoyt</user>
    <text>I might do something like
```
Iso8601.toTime (year ++ "-" ++ month ++ "-" ++ day)
    |&amp;gt; Result.map (\value -&amp;gt; 568025136000 &amp;lt; (currentTime - Time.posixToMillis value))
    |&amp;gt; Result.withDefault False
```</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T19:33:35.903900</ts>
    <user>Hoyt</user>
    <text>Although I would probably pull that lambda into an actually function like `greaterThan18` to make it more clear what that is comparing</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T19:34:04.904500</ts>
    <user>Hoyt</user>
    <text>Or at least something like
```
millisecondsIn18years = 568025136000
```</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T19:35:18.904900</ts>
    <user>Jeanene</user>
    <text>I’ll try this out tomorrow and report back! </text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T20:06:51.907000</ts>
    <user>Chae</user>
    <text>&lt;@Jeanene&gt; that milliseconds seems wrong. For example 568,015,222,000 &amp;lt; 568,025,136,000, but it's exactly 18 years ago today</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T20:08:17.907700</ts>
    <user>Jeanene</user>
    <text>today != now…I think I got the ms from `18.years.ago.to_i` in ruby :smile: :sweat_smile:</text>
  </message>
  <message conversation_id="778">
    <ts>2019-03-12T20:09:58.908400</ts>
    <user>Chae</user>
    <text>That's a variable number due to leap years</text>
  </message>
  <message conversation_id="780">
    <ts>2019-03-13T00:55:41.908900</ts>
    <user>Leoma</user>
    <text>None</text>
  </message>
  <message conversation_id="780">
    <ts>2019-03-13T00:56:04.909300</ts>
    <user>Leoma</user>
    <text>The regex parser lives: &lt;https://gist.github.com/z5h/493423f87f77bbdcf886159b21a3dc87&gt;
Parsing and rendering in 216 lines, even after a painful lesson &lt;https://github.com/elm/regex/issues/10&gt;</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:08:32.911400</ts>
    <user>Nga</user>
    <text>Is there an easy way to get a zero value'd record without making it myself? i.e.: ```type alias Thing = { x : Int, y : Maybe String }```, then ```getZeroValue Thing``` returns ```{x=0, y=Nothing}```. I strongly feel like the answer is no, but I'm praying otherwise :stuck_out_tongue:</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:10:01.911900</ts>
    <user>Lynne</user>
    <text>503 God's service not available at this time</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:10:36.912200</ts>
    <user>Lynne</user>
    <text>The answer is no, sorry :slightly_smiling_face:</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:11:14.912400</ts>
    <user>Nga</user>
    <text>awwww, heh. thanks</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:17:34.913200</ts>
    <user>Earlean</user>
    <text>&lt;@Nga&gt; a 'zero value' isn't meaningful for a lot of types</text>
  </message>
  <message conversation_id="782">
    <ts>2019-03-13T03:18:27.914200</ts>
    <user>Earlean</user>
    <text>What would you use this behaviour for?</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:21:03.916500</ts>
    <user>Nga</user>
    <text>&lt;@Earlean&gt; I have a bunch of record types that define API responses. When I don't have an API response, I have it as `Maybe ApiRespObj`, but once I've received the object I transition my state from a `Maybe ApiRespObj` to just a `ApiRespObj`, so that it's easier to work with in my views. The conversion from the Maybe to the not-maybe is where I'm having a headache, because when I'm casing on my `MaybeApiRespObj` to determine whether I can convert it, if it's Nothing, I need to fall back to some zero-initd default value. It's programmed in a way that the case is never hit, but it still needs to be there because Elm needs to cover all cases.</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:24:32.918700</ts>
    <user>Earlean</user>
    <text>Ah, that is a common mistake. Don't convert a Maybe to a nonsense default value. Just use `Maybe.map` etc. to work with the Maybe</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:35:54.920500</ts>
    <user>Nga</user>
    <text>Right. it's a bit of a shame because I've modeled the data in such a way that it can only ever have a correct value at that point (we have a union type that declares the state of the app, whether its Loading, Loaded, an error, etc). By using Maybe's as my Loaded values it doesn't make a lot of sense since that's not actually something that can ever happen. Not sure where this indicates the real problem is with the approach we've taken.</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:36:33.920800</ts>
    <user>Nga</user>
    <text>Or if it's just a limitation problem that we have to accept.</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T03:58:52.921100</ts>
    <user>Sharon</user>
    <text>A `Maybe a` that can't be Nothing should just be an `a`, right?
I'm just guessing of course, but I'd look higher up if the Maybe can be avoided before giving it to the function that doesn't expect any Nothings.</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T04:01:40.922400</ts>
    <user>Nga</user>
    <text>&lt;@Sharon&gt; We have something like: `{settings = Maybe ApiSettingsResponse, profile = Maybe ApiProfileResponse}`. Can't set them to just `a` because then it's the same problem again (zero initialization before the API request returns).</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T04:06:02.923600</ts>
    <user>Lynne</user>
    <text>Settings and Profile seems like something which you get once at the very start. If that is the case it may be a good idea to postpone initialization of page/view which depends on these and only init it when you  receive them. In this case you won't need `Maybe`s.</text>
  </message>
  <message conversation_id="781">
    <ts>2019-03-13T04:18:26.926200</ts>
    <user>Earlean</user>
    <text>&lt;@Nga&gt; so if they can't be Nothing when you're `Loaded` then that's the time to unwrap them, if any of them are Nothing then you're still in the `Loading` state</text>
  </message>
  <message conversation_id="784">
    <ts>2019-03-13T05:10:29.927500</ts>
    <user>Salvador</user>
    <text>I succeeded in uploading a file together with other data, I thought this might be interesting. &lt;https://discourse.elm-lang.org/t/how-i-uploaded-a-file/3309?u=hermanverschooten&gt;</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:19:56.930400</ts>
    <user>Donnetta</user>
    <text>I finally upgraded to 0,19. I tried to remove npx from my building script `npx elm make Apps/AccountDetails.elm --output ../app/assets/javascripts/passare_elm.js`, but I get an error about elm-package.json not existing (I had removed it). What do I need to do for the upgrade to be permanent? I had understood that npx was for a temporary change</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:20:37.931300</ts>
    <user>Huong</user>
    <text>You'll need to globally install elm 0.19</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:20:56.931800</ts>
    <user>Huong</user>
    <text>in order for your build script to refer to `elm` without any path indication</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:21:46.933000</ts>
    <user>Huong</user>
    <text>`npx` tries to find a binary in your node_modules first, which is why this trick works. Without `npx`, it needs to be on your path, so easiest solution is to install it globally :slightly_smiling_face:</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:22:56.933500</ts>
    <user>Donnetta</user>
    <text>&lt;@Huong&gt; Thanks, would you use npm?</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:23:22.934000</ts>
    <user>Danika</user>
    <text>May as well if you already have it installed</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:23:23.934100</ts>
    <user>Huong</user>
    <text>Depends on how you and your team, and CI services prefer to work</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:25:15.934700</ts>
    <user>Donnetta</user>
    <text>I see, thanks &lt;@Danika&gt; &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:29:17.935400</ts>
    <user>Donnetta</user>
    <text>&lt;@Danika&gt;, do you know if `npm install -g elm` should work to upgrade or is there another command?</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:30:00.935600</ts>
    <user>Danika</user>
    <text>that'll work</text>
  </message>
  <message conversation_id="783">
    <ts>2019-03-13T09:30:20.936000</ts>
    <user>Donnetta</user>
    <text>Thanks &lt;@Danika&gt;</text>
  </message>
  <message conversation_id="785">
    <ts>2019-03-13T10:10:20.938300</ts>
    <user>Donnetta</user>
    <text>I have one last issue with the new datepicker &lt;https://package.elm-lang.org/packages/CurrySoftware/elm-datepicker/latest/&gt;. If I enter a date from the datePicker, it works fine. However, if I want to remove the date, I can't. Here is the code to update the datePicker    ```            let
                (( newDatePicker,  mDate )) =
                    DatePicker.update defaultSettings datePickerMsg model.datePicker

                date =
                    case mDate of
                        DatePicker.Picked changedDate -&amp;gt;
                            Just changedDate

                        _ -&amp;gt;
                            model.date

                newOrg =
                    updateOrganization model.organization (ChgContractDate (formatMaybeDate date))
            in
            ( { model | date = date, datePicker = newDatePicker, organization = newOrg }, Cmd.none )```</text>
  </message>
  <message conversation_id="785">
    <ts>2019-03-13T10:11:40.939800</ts>
    <user>Donnetta</user>
    <text>I don't know how to do it so that if the people remove the date from the input, then the date should be nothing. Since the input code is in the library. With the old datepicker, it worked</text>
  </message>
  <message conversation_id="785">
    <ts>2019-03-13T10:13:24.940800</ts>
    <user>Donnetta</user>
    <text>To be cleared, the issue is about saving, I can remove the date saved previously manually and hit save, but when I reload the page, it is still there</text>
  </message>
  <message conversation_id="785">
    <ts>2019-03-13T10:15:42.941700</ts>
    <user>Donnetta</user>
    <text>also with the elm-community datepicker, I could change the date in the input and save, then the date would be preserved</text>
  </message>
  <message conversation_id="785">
    <ts>2019-03-13T10:17:54.942100</ts>
    <user>Donnetta</user>
    <text>is my only solution to copy the repo and change it?</text>
  </message>
  <message conversation_id="785">
    <ts>2019-03-13T10:28:46.942500</ts>
    <user>Lynne</user>
    <text>Should not you provide `Nothing` to `DatePicker.initFromDates` as second argument when there is no date?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:37:01.944500</ts>
    <user>Daysi</user>
    <text>I have a problem with domain modeling and "Polymorphism":  the `LessThan` from the `type NatNumCondition` shadows the `LessThan` from the `type PercentCondition` and the `type AmountCondition`. What can I do? The label's names are accurate from the business perspective but should hold different types of values (NatNum, Percent and Amount). Whereas `IncreasedByPercent` should hold only `Percent` in all three distinct types.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:37:11.945000</ts>
    <user>Daysi</user>
    <text>help would be appreciated.</text>
  </message>
  <message conversation_id="785">
    <ts>2019-03-13T10:37:11.945100</ts>
    <user>Donnetta</user>
    <text>&lt;@Lynne&gt; The problem is that if I put noting instead of model.date, every time the user click on the input field and doesn't pick a date, it will become nothing</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:41:39.946300</ts>
    <user>Lynne</user>
    <text>Ok, there is apparently more to know about this library. :slightly_smiling_face: Sorry, I don't have experience with this package and can't be helpful here.</text>
  </message>
  <message conversation_id="785">
    <ts>2019-03-13T10:42:02.946900</ts>
    <user>Donnetta</user>
    <text>Thanks for trying</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:43:12.948200</ts>
    <user>Earnest</user>
    <text>&lt;@Daysi&gt; You can add some prefixes or suffixes like `NatNumLessThan` or maybe refactor into something like this:

```
type BaseCondition a
  = LessThan a
  | GreaterThan a
  | Equals a 
  | IncreasePercent Percent
  | DecreasePercent Percent

type NatNumCondition = NatNumCondition (BaseCondition NatNum)
-- or 
type alias NatNumCondition = BaseCondition NatNum

type AmountCondition
  = AmountBaseCondition (BaseCondition Amount)
  | IncreasedByAmount Amount
  | DecreasedByAmount Amount
```</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:45:35.949500</ts>
    <user>Earnest</user>
    <text>Or put them in different modules &amp;amp; only use them with qualifiers
```
case nnCond of NatNum.LessThan -&amp;gt; ...
```</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:46:45.949600</ts>
    <user>Daysi</user>
    <text>yeah, I already refactored it in a similar manner (good idea btw!) but access to the condition's payload becomes unclear then: take e.g. the `AmountCondition`: you'd have to do a nested pattern match to find out is it either a `AmountBaseCondition` or `IncreasedByAmount` or `DecreasedByAmount`.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:47:28.949800</ts>
    <user>Daysi</user>
    <text>could you explain?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:47:43.950000</ts>
    <user>Earnest</user>
    <text>You can un-nest in a single case:
```
case cond of 
  AmountBaseCondition (LessThan amt) -&amp;gt; ...
  IncreasedByAmount amt -&amp;gt; ...
```</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:48:23.950200</ts>
    <user>Daysi</user>
    <text>but could you, since BaseCondition can be multiple things...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:49:06.950400</ts>
    <user>Daysi</user>
    <text>you'd have to
```
case cond of 
  AmountBaseCondition (LessThan amt) -&amp;gt; ...
  AmountBaseCondition (GreaterThan amt) -&amp;gt; ...
  ...
  IncreasedByAmount amt -&amp;gt; ...
```</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:49:13.950600</ts>
    <user>Daysi</user>
    <text>no?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:49:41.950800</ts>
    <user>Earnest</user>
    <text>```
module NatNum exposing (..)

type NatNumCondition 
  = LessThan NatNum
  | ...
```
```
module SomewhereElse exposing (..)

import NatNum exposing (NatNum, NatNumCondition)

someFunc : NatNumCondition -&amp;gt; SomethingElse
someFunc c = case c of
  NatNum.LessThan nn -&amp;gt; ...
```</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:50:19.951000</ts>
    <user>Earnest</user>
    <text>yup</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:50:33.951200</ts>
    <user>Earnest</user>
    <text>You'll have the same number of case branches either way</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:50:42.951400</ts>
    <user>Daysi</user>
    <text>ahh. Hmm. :thinking_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:51:22.951600</ts>
    <user>Daysi</user>
    <text>but all BaseConditions with the "AmountBaseCondition" thing infront...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:51:29.951800</ts>
    <user>Earnest</user>
    <text>Then you can also have `Amount.LessThan amt -&amp;gt; ...` in the same module without conflicts</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:51:41.952000</ts>
    <user>Earnest</user>
    <text>Yup</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:52:06.952200</ts>
    <user>Daysi</user>
    <text>I guess there's no other way to do this in Elm...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:52:23.952400</ts>
    <user>Daysi</user>
    <text>hmmmm</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:53:22.952600</ts>
    <user>Daysi</user>
    <text>I'm conflicted. Creating one entire module just for one type you need on one page of your app? :thinking_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:53:47.952800</ts>
    <user>Earnest</user>
    <text>Well you could just have `NNLessThan` &amp;amp; `PCLessThan` or whatever</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:53:55.953000</ts>
    <user>Earnest</user>
    <text>just doesn't read as nicely</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:54:16.953200</ts>
    <user>Daysi</user>
    <text>that feels so weird. Maybe I'm too prejudiced from other languages and from a misunderstanding of "The life of a file" video?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:54:57.953400</ts>
    <user>Daysi</user>
    <text>(aka: be lazy when deciding to create modules)</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:55:33.953800</ts>
    <user>Daysi</user>
    <text>:thinking_strongly:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:55:40.953900</ts>
    <user>Earnest</user>
    <text>Yeah I probably wouldn't make a new module if that's the only thing that'll be in it, especially if it's only going to be used in one moudle</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:56:16.954100</ts>
    <user>Daysi</user>
    <text>but this would solve the naming issue ...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:57:35.954300</ts>
    <user>Earnest</user>
    <text>I'd go with BaseCondition if you think you'll be writing a function like `BaseCondition a -&amp;gt; whatever`. Because otherwise you'd have to make 3 functions to do that for all three condition types.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:58:13.954500</ts>
    <user>Earnest</user>
    <text>Otherwise I'd probably just go with some prefixes.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:58:58.954700</ts>
    <user>Daysi</user>
    <text>to be typesafe, I don't wanna write `a`</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T10:59:12.954900</ts>
    <user>Daysi</user>
    <text>so I have to make three functions anyways...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:00:25.955100</ts>
    <user>Daysi</user>
    <text>well, you could argue that, if it's a `BaseCondition` it's already clear that it's in this module and only holds types `NatNum`, `Percent` and `Amount`</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:00:53.955300</ts>
    <user>Daysi</user>
    <text>hmmmm but `a` seems so generic... I am really hesitant.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:01:45.955500</ts>
    <user>Earnest</user>
    <text>The generic-ness of `a` limits the scope of what you can do with it as well</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:03:08.955800</ts>
    <user>Daysi</user>
    <text>so I can constuct a `BaseCondition String`. But I don't want to allow it :confused:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:12:50.956200</ts>
    <user>Daysi</user>
    <text>I think using different modules is the only choice I have that is somewhat consistent :disappointed:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:14:18.957200</ts>
    <user>Daysi</user>
    <text>modeling domain logic in Elm is really ugly, verbose and unelegant sadly if it's more than a ToDo app. I am disappointed. I really like the elegance of the language for simpler tasks though...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:19:03.957600</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; as opposed to Haskell or something?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:19:28.958100</ts>
    <user>Daysi</user>
    <text>maybe... I lately read about ad-hoc polymorphism with type-classes :thinking_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:19:42.958300</ts>
    <user>Daysi</user>
    <text>Haskell has it</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:20:06.958700</ts>
    <user>Daysi</user>
    <text>this could be a use case for that!</text>
  </message>
  <message conversation_id="787">
    <ts>2019-03-13T11:22:32.959100</ts>
    <user>Latina</user>
    <text>@translate</text>
  </message>
  <message conversation_id="787">
    <ts>2019-03-13T11:24:54.960700</ts>
    <user>Danika</user>
    <text>This article is a bit old, but worth a read</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:24:54.960900</ts>
    <user>Danika</user>
    <text>&lt;https://medium.com/@eeue56/why-type-classes-arent-important-in-elm-yet-dd55be125c81&gt;</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:26:24.962400</ts>
    <user>Timika</user>
    <text>&amp;gt; modeling domain logic in Elm is really ugly, verbose and unelegant sadly if it’s more than a ToDo app.
I would disagree here. I would even say that domain modelling is one of Elm’s strengths. I agree that Elm is no silver bullet for everything, but frankly - what technology is? Saying Elm is `really ugly, verbose and unelegant` in every case that is more than a todo-app does not cross me as a fair assessment - even if it might be true for some cases.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:30:12.967400</ts>
    <user>Daysi</user>
    <text>&lt;@Latina&gt; as far as I understood it, type-classes enable you to define a method with the same name which does the same thing for different types. It is as if you had a utility-class in Java with only static methods which you overload for each type you want. Like for example `equals` for types String, Int, Cat, Dog ... So the program uses the correct function on runtime but gives you compile time errors if you pass e.g. `Horse` to the `equals` function because you haven't defined it yet for the `type Horse`.
Correct @ anybody?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:31:59.968400</ts>
    <user>Timika</user>
    <text>That is roughly correct. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:33:05.970200</ts>
    <user>Timika</user>
    <text>&lt;https://en.wikipedia.org/wiki/Ad_hoc_polymorphism&gt; describes the general concept very well IMO.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:33:08.970500</ts>
    <user>Daysi</user>
    <text>&lt;@Timika&gt; well, I can tell you I thought like 5 days how to solve my problem which is: you have different criteria which have _specific_ dependant conditions, which in turn have _specific_ dependent Values (NatNum, Amount, Percent or Status). I didn't find one satisfying solution. I tried around 10.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:34:22.971600</ts>
    <user>Daysi</user>
    <text>Maybe I don't know a trick for _dependent_ types in Elm...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:34:57.971800</ts>
    <user>Kris</user>
    <text>Type classes are Java interfaces, give or take, more than classes</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:34:57.972000</ts>
    <user>Daysi</user>
    <text>Ah nice :smile: well, it's a start...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:36:20.972500</ts>
    <user>Daysi</user>
    <text>yea, but &lt;@Latina&gt; think not in _instances_ since there are no instances in functional programming. Really think of static methods rather...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:36:27.972800</ts>
    <user>Timika</user>
    <text>I’m not dismissing the fact that there might not be a solution for your problem that satisfies you. :slightly_smiling_face: I’m just saying that the broad assessment that modelling domain logic in Elm is ugly verbose and inelegant in _every_ case. Nothing more nothing less. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:37:07.973800</ts>
    <user>Daysi</user>
    <text>It is not. For ToDo apps :stuck_out_tongue_winking_eye:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:38:28.975200</ts>
    <user>Carman</user>
    <text>Elm doesn't have dependent types. Some things can't be proven by the compiler. The solution is usually to create a opaque type whose only constructor runs validations and returns a `Result`, and then fuzz-test it. While this is a run-time check, the compiler can help give you confidence that all values have been validated.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:39:00.976200</ts>
    <user>Carman</user>
    <text>FWIW, any language that has Algebraic Data Types (e.g. Elm's custom types) is automatically in the "modeling things elegantly" club IMO :heart: . Add in the Haskell/Elm syntax to keep it terse (as opposed to Scala's ultra-verbose syntax) and it makes modeling super fun! :grinning_face_with_star_eyes:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:39:59.977800</ts>
    <user>Daysi</user>
    <text>well &lt;@Carman&gt; for smaller, less complex domain logic I agree.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:41:01.979800</ts>
    <user>Daysi</user>
    <text>But in my company we are using it for a really complex software and it is exactly perceived as I wrote: ugly, verbose and unelegant. But ofc the compiler errors and the testing tools are really nice!</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:41:50.981100</ts>
    <user>Nana</user>
    <text>&lt;@Daysi&gt; what language do you think has a better type system then?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:42:00.981400</ts>
    <user>Carman</user>
    <text>I don't know if there are any languages that offer dependent types on the front-end. They are kind of extreme for a type system :thinking_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:42:15.982100</ts>
    <user>Kris</user>
    <text>PS does get near though</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:42:21.982400</ts>
    <user>Kris</user>
    <text>Although with all the ugly hacks of haskell</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:42:24.982500</ts>
    <user>Daysi</user>
    <text>I really WISH I could say better things. That's why I asked above if anyone has an elegant solution for my problem. Because I really like a lot about the language.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:43:02.983900</ts>
    <user>Daysi</user>
    <text>maybe I am just not educated enough and miss a thing...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:43:24.984600</ts>
    <user>Huong</user>
    <text>Honestly, we don't know enough about the domain and specific issues you're facing. Personally, depending on the domain, I think it might make sense to group conditions by how the function, and say which condition types can have what kind of conditions in them.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:43:43.985000</ts>
    <user>Huong</user>
    <text>Something like ```type NatNumCondition
    = NatNumCompare (ComparativeCondition NatNum)
    | NatNumPercentChange PercentChange


type PercentCondition
    = PercentCompate (ComparativeCondition Percent)
    | PercentChange PercentChange


type AmountCondition
    = AmountCompare (ComparativeCondition Amount)
    | AmountPercentChange PercentChange
    | IncreasedByAmount Amount
    | DecreasedByAmount Amount

type PercentChange
    = IncreasedByPercent Percent
    | DecreasedByPercent Percent

type ComparativeCondition a
    = LessThan a
    | Equals a
    | LessThan a``` for example.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:44:12.985700</ts>
    <user>Daysi</user>
    <text>that was one of my approaches, yes</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:44:32.986100</ts>
    <user>Huong</user>
    <text>Them again, that may be painful to work with, but that really depends on your domain, what you need to model, and perhaps more importantly, what you wish to do with it</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:45:34.987300</ts>
    <user>Donnetta</user>
    <text>I used to be able to modify libraries I added through packages. Is it something that cannot be done anymore in 0.19? I am looking for DatePicker.elm since I have the package CurrySoftware/datepicker imported, but don't seem to be able to access it.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:46:09.988600</ts>
    <user>Daysi</user>
    <text>I just wish I could model the domain without thinking about name spaces/shadowing, modules and all the stuffs. Just pure domain logic. But in this case, this seems to be impossible...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:46:21.988900</ts>
    <user>Huong</user>
    <text>You can still put the code in a folder and add that folder to the source-directories :slightly_smiling_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:46:39.989600</ts>
    <user>Huong</user>
    <text>let's continue in a thread</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:46:41.989800</ts>
    <user>Daysi</user>
    <text>*pulls out sad violin in order to play on it*</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:49:39.991400</ts>
    <user>Nickole</user>
    <text>Does anybody know how to avoid losing my `id` of the div with Elm app?
I am using `Browser.element`, creating `&amp;lt;div id="root"&amp;gt;&amp;lt;/div&amp;gt;` in `index.html` and initializing Elm app in it. But after it is initialized, I always lose `id="root"` from that element which I need to use later.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:51:15.992600</ts>
    <user>Danika</user>
    <text>add it to the root element of your view function?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:51:15.992700</ts>
    <user>Nana</user>
    <text>&lt;@Nickole&gt; I think you just need to add `Html.Attributes.id "root"` in Elm</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:52:47.993800</ts>
    <user>Nickole</user>
    <text>&lt;@Nana&gt; But it will add it just to the child element and I need to keep it for the whole `div` where Elm app runs :thinking_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:54:15.994800</ts>
    <user>Huong</user>
    <text>So, I think disambiguating between the different constructors you need to accurately represent your domain logic in terms of custom types, is something you can't really get around.. _generally_. It's honestly quite amazing what you _can_ encode in the type system, but it's not always clear how to best go about that, exactly. This really does depend on what you want to _do_ with stuff!

Examples of stuff you can do with types:
- elm-css has some pretty amazing things that make it so `display none` is valid but `fontSize none` is not
- &lt;https://gist.github.com/zwilias/ccd72ee7925b27e8c41176ebe7d33564&gt; a balanced binary tree- you cannot construct a binary tree using those types that is NOT properly balanced
- &lt;https://github.com/zwilias/tic-tac-toe&gt; a game of tic tac toe where the type system guarantees quite a few semantics of the game

That said, it is not always a great idea to encode all of the semantics in your domain into the types - very often, what you need is a module whose interface encodes those semantics, while the types themselves allow some more leeway. An example of this is a `type PositiveInt = Positive Int` - as long as their is a constructor `fromInt : Int -&amp;gt; Maybe PositiveInt` and the actual constructor isn't exposed, you _can_ make a whole bunch of guarantees already!</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:54:21.995000</ts>
    <user>Nickole</user>
    <text>&lt;@Danika&gt; Yes, but as I mentioned above, I want to keep it on a higher level. That’s probably not possible anymore</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:54:55.996000</ts>
    <user>Danika</user>
    <text>Indeed, it seems odd that the div loses its id in the first place</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:55:02.996300</ts>
    <user>Nana</user>
    <text>&lt;@Nickole&gt; Elm replaces the node, there shouldn't be any wrapper node like you say</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:55:02.996400</ts>
    <user>Danika</user>
    <text>interesting design choice by elm there :’)</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:56:44.998000</ts>
    <user>Nana</user>
    <text>&lt;@Nickole&gt; example: &lt;https://ellie-app.com/4XZp2FCXWgva1&gt;
there's no extra node there</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:56:47.998200</ts>
    <user>Nickole</user>
    <text>Yes, it used to work fine in 0.18. But probably I will have to solve it in Elm in `Main.view`. I was just curious if anybody faced the same problem.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:57:00.998400</ts>
    <user>Huong</user>
    <text>it used to work differently. People complained, and suggested it be changed. It was changed. People complain that it works the way people suggested. :shrug:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:57:20.999200</ts>
    <user>Timika</user>
    <text>I think the change that Elm takes over ‘&amp;lt;body&amp;gt;’ came up a couple of times since 0.19 came out.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:57:34.999500</ts>
    <user>Daysi</user>
    <text>&lt;@Nickole&gt; why you wanna keep it? Can you pass it via flags and keep it in the state?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T11:58:50.000600</ts>
    <user>Nickole</user>
    <text>&lt;@Nana&gt; Hm, looks good. I tried it before but probably did something a little bit different. Thanks.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:00:23.002400</ts>
    <user>Nickole</user>
    <text>&lt;@Daysi&gt; I’m operating with whole element later when I need to add another element after it and I don’t want to use `getElementById` again.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:01:09.002500</ts>
    <user>Daysi</user>
    <text>I wonder why Elm doesn't namespace union-type-constructors so that `type Bla = Blubb String` becomes `Bla.Blubb "a string"` later on in the same module...</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:02:10.002700</ts>
    <user>Daysi</user>
    <text>in other cases on the other hand, union-type-labels *are* encapsulated: `exposing Bla(Blubb)`</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:03:22.003500</ts>
    <user>Danika</user>
    <text>I’m not particularly opinionated either way, what were the original complains?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:03:26.003800</ts>
    <user>Daysi</user>
    <text>can you store a reference to the Element on first call to `getElementById` and use this reference later?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:04:02.004100</ts>
    <user>Nickole</user>
    <text>I tried it and I had it wrapped it the extra `div`:
```
&amp;lt;div data-elm-hot="true"&amp;gt;&amp;lt;div id="root"&amp;gt; ELM &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
```</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:04:11.004300</ts>
    <user>Huong</user>
    <text>mostly "redundant nesting" and the inability to have a clean dom structure - instead, the entire app would always live inside a single `div`</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:04:19.004600</ts>
    <user>Jin</user>
    <text>I believe som people did not want to have a wrapping element for aesthetic reasons.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:04:28.005100</ts>
    <user>Huong</user>
    <text>which you'd embed in a div</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:04:37.005300</ts>
    <user>Huong</user>
    <text>so 2 divs really :smile:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:05:12.006200</ts>
    <user>Danika</user>
    <text>Reasonable enough I suppose!</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:05:26.006400</ts>
    <user>Daysi</user>
    <text>None</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:05:30.006800</ts>
    <user>Nickole</user>
    <text>&lt;@Daysi&gt; But I’m still working wit this element in JS and not in Elm so I would like to avoid sending it back and forth.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:05:59.006900</ts>
    <user>Huong</user>
    <text>Namespacing only ever happens by module (or alias), it mostly keeps the language a little simpler. But I really wouldn't worry about creating a module just for a type and a bunch of functions that only work on that type. I saw you referenced life of a file earlier - that talk also encourages developing modules around types, which I feel might be relevant here</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:07:58.007500</ts>
    <user>Nickole</user>
    <text>Yes, I do it exactly like this. Then I initialize Elm there but the element lose the `id` so when I want to use the `node` again, it cannott be found.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:08:32.007700</ts>
    <user>Daysi</user>
    <text>why would you need id if you already have a reference to `node`?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:08:42.007900</ts>
    <user>Danika</user>
    <text>Elm replaces the node</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:08:52.008100</ts>
    <user>Daysi</user>
    <text>oh</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:08:54.008300</ts>
    <user>Daysi</user>
    <text>I see</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:09:00.008500</ts>
    <user>Daysi</user>
    <text>that's unfortunate</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:09:11.008800</ts>
    <user>Nana</user>
    <text>ah that's because of elm-hot-webpack-loader</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:09:21.009000</ts>
    <user>Nana</user>
    <text>it's only during development</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:09:46.009200</ts>
    <user>Daysi</user>
    <text>has `app` a memeber which references the node?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:12:51.009400</ts>
    <user>Nickole</user>
    <text>&lt;@Daysi&gt; I’m sorry, but how do you mean that?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:12:59.009600</ts>
    <user>Daysi</user>
    <text>&lt;@Nickole&gt; what about that?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:15:29.010000</ts>
    <user>Nickole</user>
    <text>Hm,, but I need to append and remove the after element multiple times later so it won’t work then.</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:15:30.010200</ts>
    <user>Daysi</user>
    <text>I mean if `app` has a property which points to `node` (or the updated version of it).</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:17:02.010400</ts>
    <user>Daysi</user>
    <text>no problem. `appendChild` returns the reference to the appended child :slightly_smiling_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:17:26.010600</ts>
    <user>Daysi</user>
    <text>so you can store it and do stuff with it later (like removing it)</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:18:16.010800</ts>
    <user>Daysi</user>
    <text>just write `const appended = parent.appendChild(document.createElement("div"));` and you can use `appended` later</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:18:52.011000</ts>
    <user>Daysi</user>
    <text>e.g. `appended.remove()`</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:19:56.011200</ts>
    <user>Daysi</user>
    <text>so you think it might be suitable to create modules for the types?</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:20:14.011400</ts>
    <user>Daysi</user>
    <text>&lt;@Huong&gt;</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:21:54.011600</ts>
    <user>Huong</user>
    <text>It might be, if it helps getting the constraints you need without running into shadowing issues :thumbsup:</text>
  </message>
  <message conversation_id="786">
    <ts>2019-03-13T12:22:16.011800</ts>
    <user>Daysi</user>
    <text>might be a good option here. Thanks! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="788">
    <ts>2019-03-13T13:17:38.012100</ts>
    <user>Dede</user>
    <text>One more question re. Parser:  is there an idiomatic way to pass data or state downward?  For instance, if I'm parsing a 'let' type structure, I might make a symbol table entry when I see a name, raising an error if the name is already in the symbol table.  Or is Parser purely for generating an AST and that level of semantic check happens afterward?</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:49:03.012800</ts>
    <user>Kymberly</user>
    <text>Is this the right place to post a compiler error message?  ```elm: Map.!: given key is not an element in the map
CallStack (from HasCallStack):
  error, called at libraries/containers/Data/Map/Internal.hs:603:17 in containers-0.5.10.2:Data.Map.Internal
```</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:49:20.013200</ts>
    <user>Kymberly</user>
    <text>I've got it narrowed down to a conversion from `List` to `Array`</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:50:28.013600</ts>
    <user>Virgie</user>
    <text>this is a known issue that in most cases is solved by not using the `--debug` flag.</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:50:32.013900</ts>
    <user>Kymberly</user>
    <text>ah ok</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:51:21.014900</ts>
    <user>Virgie</user>
    <text>the actual issue is using a module that exposes a type alias of an unexposed type. Many packages do this.</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:51:46.015400</ts>
    <user>Kymberly</user>
    <text>oh yikes - ok, so if I access Array as `Array.Array` will I be better off?</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:52:39.016100</ts>
    <user>Virgie</user>
    <text>no, only if you don't actually import `Array` will it work. which is unrealistic for any decently sized project</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:53:13.016500</ts>
    <user>Virgie</user>
    <text>if not `Array` specifically one of your dependencies will probably do this</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:53:39.016800</ts>
    <user>Kymberly</user>
    <text>k - so just avoid --debug for now then</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:58:04.017000</ts>
    <user>Huong</user>
    <text>It could be done in the parser, though in general you wouldn't want to do that. Doing that kind of analysis on the ast makes it easier to report (multiple) errors</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:58:18.017200</ts>
    <user>Dede</user>
    <text>Fair.</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:58:31.017400</ts>
    <user>Dede</user>
    <text>Since asking the question I realized andThen could be used to push data along.</text>
  </message>
  <message conversation_id="789">
    <ts>2019-03-13T14:59:11.017600</ts>
    <user>Huong</user>
    <text>Exactly :thumbsup: </text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:09:44.017800</ts>
    <user>Dede</user>
    <text>Nice.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:10:37.018000</ts>
    <user>Leoma</user>
    <text>I applaud your continued efforts with proper parsing.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:10:51.018200</ts>
    <user>Dede</user>
    <text>I'm actually just putting down my pen.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:10:57.018400</ts>
    <user>Leoma</user>
    <text>ha</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:11:49.018600</ts>
    <user>Dede</user>
    <text>My conclusion from working with Elm parser is that you actually need two passes.  (And this isn't Elm parser's fault.)   You can reasonably use Elm parser to turn the input into a list of tokens  TEXT, WHITESPACE, OPENBOLD, OPENITALIC, CLOSEBOLD, CLOSEITALIC.  But then you need a second pass over that list, with the ability to modify it, to properly apply the tolerant markup semantics.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:15:05.018800</ts>
    <user>Dede</user>
    <text>I think you could probably work the two phases together within the parser.  Not sure how much it's worth it.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:15:14.019000</ts>
    <user>Dede</user>
    <text>I'm curious -- do your regexps backtrack?</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:17:19.019200</ts>
    <user>Leoma</user>
    <text>They did, but, JS regexp backtracking isn’t implemented across all major browsers. So I did a hack where I capture (pre-match)(actual-match)(post-match) then hold on to the sub-match I want.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:17:39.019400</ts>
    <user>Dede</user>
    <text>Wheee.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:17:45.019600</ts>
    <user>Velia</user>
    <text>I don't think you need two passes with elm/parser, see my previous Ellie example (I just reverse all the lists after because everything is built in reverse, but this could be improved):

&lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1552431350900400?thread_ts=1552246033.736000&amp;amp;cid=C0CJ3SBBM&gt;

&lt;https://ellie-app.com/4XGvnPg32fYa1&gt;

This is O(n) (the size of the input).

I didn't handle white spaces though, but I doubt this compromises the one pass.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:20:38.020000</ts>
    <user>Dede</user>
    <text>You're targetting a simpler grammar there, I think.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:20:44.020200</ts>
    <user>Dede</user>
    <text>Nesting isn't supposed to be permitted.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:21:42.020400</ts>
    <user>Leoma</user>
    <text>I allow/support nesting like `/italic and *bold*/`</text>
  </message>
  <message conversation_id="791">
    <ts>2019-03-13T15:22:15.020600</ts>
    <user>Dede</user>
    <text>Right, but you want `/hello /world/ there/` to render as
/hello _world_ there/
right?</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:22:30.020900</ts>
    <user>Leoma</user>
    <text>I suspect I’m O(n^2) but with native regexp it’s plenty fast for reasonable documents.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:22:55.021100</ts>
    <user>Dede</user>
    <text>At least, that would be the most markdown-ish behavior.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:23:37.021300</ts>
    <user>Leoma</user>
    <text>So, once you “open” a style, we just look for a closing tag. So in that case the `hello /world`would be italic</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:23:58.021500</ts>
    <user>Velia</user>
    <text>&amp;gt; You're targetting a simpler grammar there, I think.

I support nesting too though.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:24:13.021700</ts>
    <user>Dede</user>
    <text>Perhaps I took markdown too literally as a target.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:24:21.021900</ts>
    <user>Dede</user>
    <text>*this *is* markdown*</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:24:35.022100</ts>
    <user>Dede</user>
    <text>`*this *is* markdown*`</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:24:38.022300</ts>
    <user>Dede</user>
    <text>It doesn't nest.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:24:54.022600</ts>
    <user>Dede</user>
    <text>Excuse me, it doesn't nest within a single style.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:24:59.022800</ts>
    <user>Dede</user>
    <text>You can nest italics w/in bold and soforth.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:25:14.023000</ts>
    <user>Dede</user>
    <text>But only the innermost opening/closing tags for a style are applied, the rest are rendered as literals.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:27:04.023200</ts>
    <user>Dede</user>
    <text>Although looking at this Ellie, I do see much more intelligent use of andThen than I had done.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:27:10.023400</ts>
    <user>Dede</user>
    <text>Maybe just 15 more minutes :wink:</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:27:13.023600</ts>
    <user>Velia</user>
    <text>Nesting is harder than not nesting.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:35:15.023800</ts>
    <user>Velia</user>
    <text>And I believe &lt;@Leoma&gt;  wanted nesting. Anyway this was an interesting exercise, and I may need it later. It's great if you implemented what you wanted, your rules are likely more user friendly than mines.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:36:42.024000</ts>
    <user>Dede</user>
    <text>Nothing I've done is fully usable.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:37:59.024200</ts>
    <user>Dede</user>
    <text>This has been an excuse for me to learn something about Elm parser.</text>
  </message>
  <message conversation_id="790">
    <ts>2019-03-13T15:38:19.024400</ts>
    <user>Dede</user>
    <text>Thanks for sharing your implementation.</text>
  </message>
  <message conversation_id="791">
    <ts>2019-03-13T15:46:04.024700</ts>
    <user>Velia</user>
    <text>&lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1552504950020900?thread_ts=1552246033.736000&amp;amp;cid=C0CJ3SBBM&gt;

I suspect you are O(input size^complexity of the input) , whatever that means, but this can go high and it's typical of regexs (very hard to evaluate the complexity once you have several nested ones). This might be enough for your use case though (at first, as users love to abuse features).</text>
  </message>
  <message conversation_id="791">
    <ts>2019-03-13T16:02:14.025900</ts>
    <user>Velia</user>
    <text>Anyway, what's great with SPA/Elm is that all CPU is taken from the client, so it matters a lot less than server side computing, as long as interactivity is reasonable.</text>
  </message>
  <message conversation_id="791">
    <ts>2019-03-13T16:17:10.026300</ts>
    <user>Velia</user>
    <text>Also to be fair, I may not be O(n) as I omitted the lists operations from the complexity, but this might not change much the result given the operations I do.</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T16:51:42.027300</ts>
    <user>Kellee</user>
    <text>is elm being actively worked on?</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T16:51:48.027500</ts>
    <user>Danika</user>
    <text>Yes</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T16:53:08.028600</ts>
    <user>Kellee</user>
    <text>Trying to convince my team to try it out for a project. They saw that the releases have slowed down and there hasn’t been that much work on core. Is there a roadmap or even a good blog post that would be alleviate some of this concern?</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T16:54:30.029400</ts>
    <user>Virgie</user>
    <text>yea, the roadmap &lt;https://github.com/elm/projects/blob/master/roadmap.md&gt; is that there is no timeline</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T16:54:40.029700</ts>
    <user>Kris</user>
    <text>Elm has a particularly slow development rate</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T16:54:56.030300</ts>
    <user>Kris</user>
    <text>It’s of course ongoing, but that’s what it is </text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T16:56:06.031500</ts>
    <user>Virgie</user>
    <text>on the other hand, it is pretty great right now, and absolutely will continue going. Not having new features and releases (that you now have to update to) every couple of months can actually be seen as a feature</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T17:18:16.032300</ts>
    <user>Rochell</user>
    <text>I think a sign of the pace might be that the roadmap is still pointing to 0.19 as the next version. :wink:</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T17:21:29.034100</ts>
    <user>Nana</user>
    <text>0.19 seems like the perfect time to get into Elm though, with the huge compile time improvements!</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T17:22:12.034700</ts>
    <user>Rochell</user>
    <text>I started with 0.19, and I'm enjoying it quite a bit at least. Though I'm pretty sure my SPA could use some structural improvement hehe.</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T17:22:15.034900</ts>
    <user>Rochell</user>
    <text>But I'm learning!</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T17:22:41.035200</ts>
    <user>Kellee</user>
    <text>Anyone played around with elm and gojs? Or maybe just canvas?</text>
  </message>
  <message conversation_id="792">
    <ts>2019-03-13T17:38:50.036600</ts>
    <user>Nana</user>
    <text>&lt;@Kellee&gt; for custom visualizations I would go with elm/svg or elm-visualizations rather than canvas. Shouldn't be a problem to interop with GoJS via ports</text>
  </message>
  <message conversation_id="793">
    <ts>2019-03-13T19:43:06.037500</ts>
    <user>Velia</user>
    <text>&lt;@Leoma&gt;, whatever the mean, what is great also is how you got a WYSIWYG editor. Did you use an hidden input or a content editable?</text>
  </message>
  <message conversation_id="793">
    <ts>2019-03-13T19:51:57.037700</ts>
    <user>Velia</user>
    <text>This is really cool :grinning:</text>
  </message>
  <message conversation_id="794">
    <ts>2019-03-13T21:37:10.038200</ts>
    <user>Latina</user>
    <text>@translate</text>
  </message>
  <message conversation_id="795">
    <ts>2019-03-14T02:46:04.039200</ts>
    <user>Deane</user>
    <text>Is anyone here familiar with `elm-ui`? How do I combine `Element.below` and `Element.onRight` to get something to display to the bottom right of another element?</text>
  </message>
  <message conversation_id="795">
    <ts>2019-03-14T03:00:59.039600</ts>
    <user>Chaya</user>
    <text>&lt;@Deane&gt; If you don't get answers here, try the &lt;#C4F9NBLR1|elm-ui&gt; channel :slightly_smiling_face:</text>
  </message>
  <message conversation_id="795">
    <ts>2019-03-14T03:04:15.039800</ts>
    <user>Deane</user>
    <text>oh ok, thanks!</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:05:35.041500</ts>
    <user>Dorsey</user>
    <text>Hello! I need my app to handle URL queries, but I don't care about the path (I don't know where it will be deployed, so the URL path can be very different). Is there a way to use Url.Query.Parser while ignoring the path?</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:07:21.042700</ts>
    <user>Dorsey</user>
    <text>Unrelated: huge, enthusiastic shout out to &lt;@Virgie&gt; for helping us at the workshop last friday. You are awesome!</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:09:54.043500</ts>
    <user>Lea</user>
    <text>&lt;@Dorsey&gt; No you can’t unfortunately</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:10:09.043800</ts>
    <user>Dorsey</user>
    <text>That what I thought :disappointed:</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:10:14.044100</ts>
    <user>Lea</user>
    <text>&lt;https://github.com/elm/url/issues/9&gt;</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:12:15.045100</ts>
    <user>Lea</user>
    <text>It’s not the first time it’s requested, another issue might be useful to show some interest in this :slightly_smiling_face:</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:16:24.046900</ts>
    <user>Dorsey</user>
    <text>Yeah, for that I have a hack that gets up to 10 segmnts of a path in a `List String`. It goes like this: ```
variadic last =
    10
        |&amp;gt; List.range 1
        |&amp;gt; List.foldl
            (\_ parser_ -&amp;gt;
                Parser.oneOf
                    [ parser_
                    , Parser.map
                        (\parent child -&amp;gt;
                            case child of
                                Content path -&amp;gt;
                                    Content (parent :: path)

                                _ -&amp;gt;
                                    NotFound
                        )
                        (Parser.string &amp;lt;/&amp;gt; parser_)
                    ]
            )
            last
```</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:17:15.047700</ts>
    <user>Dorsey</user>
    <text>But in my current case I simply don't care about the path, so I was hoping I don't have to employ this spaghetti.</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:19:25.048600</ts>
    <user>Huong</user>
    <text>If you really just don't care about the path at all, just set it to `"/"` in the `Url` you pass to the parser</text>
  </message>
  <message conversation_id="796">
    <ts>2019-03-14T04:26:54.049500</ts>
    <user>Dorsey</user>
    <text>Haha, yeah! That's so obvious once you said it :face_palm:</text>
  </message>
  <message conversation_id="797">
    <ts>2019-03-14T04:50:01.050400</ts>
    <user>Lea</user>
    <text>Good one!</text>
  </message>
  <message conversation_id="798">
    <ts>2019-03-14T05:11:05.050500</ts>
    <user>Virgie</user>
    <text>thanks so much! it was a lot of fun to talk to everyone</text>
  </message>
  <message conversation_id="799">
    <ts>2019-03-14T07:33:57.051900</ts>
    <user>Janna</user>
    <text>Anyone know if there's a spec of whitepaper or something for Elm? Feels like I've seen one before, but can't find it. Going to write a tech spec for another project, but want some inspo</text>
  </message>
  <message conversation_id="799">
    <ts>2019-03-14T07:34:14.052000</ts>
    <user>Dorsey</user>
    <text>Glad to hear that. We will schedule the first monthly meeting soon. I'll keep you posted.</text>
  </message>
  <message conversation_id="800">
    <ts>2019-03-14T08:10:08.052500</ts>
    <user>Timika</user>
    <text>Are you looking for Evan’s thesis? (&lt;https://www.seas.harvard.edu/sites/default/files/files/archived/Czaplicki.pdf&gt;)</text>
  </message>
  <message conversation_id="800">
    <ts>2019-03-14T08:27:05.053300</ts>
    <user>Selene</user>
    <text>has anyone tried to update a pages metadata? any tips on best practices?
javascript only solution?
ports?</text>
  </message>
  <message conversation_id="800">
    <ts>2019-03-14T08:27:47.053700</ts>
    <user>Simon</user>
    <text>We’ve used ports</text>
  </message>
  <message conversation_id="800">
    <ts>2019-03-14T08:45:03.053900</ts>
    <user>Shena</user>
    <text>I have used ports as well:
&lt;https://github.com/olpeh/onkometrorikki/blob/8401b813e0e662e8e78435abb8dc1eb1be364cb2/src/index.js#L44-L77&gt;</text>
  </message>
  <message conversation_id="799">
    <ts>2019-03-14T09:45:29.054300</ts>
    <user>Dorthey</user>
    <text>Thanks &lt;@Florencia&gt; for the help a couple of weeks ago with the animated numbers. I ended up tweaking your solution a tiny bit but thank you for giving me a great starting point. :raised_hands:</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T10:13:49.055300</ts>
    <user>Latina</user>
    <text>invite @translate</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T10:13:57.055600</ts>
    <user>Latina</user>
    <text>@translate</text>
  </message>
  <message conversation_id="802">
    <ts>2019-03-14T10:22:54.056400</ts>
    <user>Kris</user>
    <text>Can you share your solution? :smile:</text>
  </message>
  <message conversation_id="802">
    <ts>2019-03-14T10:44:14.057200</ts>
    <user>Florencia</user>
    <text>&lt;@Dorthey&gt; Exciting, and looking slick!</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:06:13.063100</ts>
    <user>Russel</user>
    <text>What is the status of sending Union types through ports? This issue was closed in favor of an issue moved to `elm-plans` but `elm-plans` is now deprecated, so it looks like this issue is no longer under discussion. &lt;https://github.com/elm/compiler/issues/490&gt;
&lt;https://github.com/elm-lang/elm-plans/issues&gt;</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:13:16.063600</ts>
    <user>Timika</user>
    <text>You can always push a `Value` though ports, encoding your types exactly as you want them to be encoded. IIRC, you cannot use non-primitives in ports in 0.19.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:14:16.063900</ts>
    <user>Lynne</user>
    <text>Oh really? I think in guide it is mentioned that records are still supported</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:14:17.064100</ts>
    <user>Wendy</user>
    <text>I cannot find a `Cmd` constructor:</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:14:37.064200</ts>
    <user>Wendy</user>
    <text>how do i call first update after init?</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:14:42.064300</ts>
    <user>Timika</user>
    <text>:point_up: That can very well be. Good catch.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:15:16.064600</ts>
    <user>Russel</user>
    <text>I think I understand that point. So, maybe my architecture is non-idiomatic. Is it crazy to try to store an entire model in localStorage if I don’t want to reimplement Encode and Decode for the entire tree? Or maybe I’m making that a bigger deal than it has to be.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:16:50.064800</ts>
    <user>Lynne</user>
    <text>It might be not crazy at all, depending on your requirements, but imagine that data in local storage got somehow corrupted. Having your own decoder you will manage it much better than Elm would</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:17:19.065000</ts>
    <user>Russel</user>
    <text>I mentioned this in &lt;#C192T0Q1E|beginners&gt;,
In the answer credited here, it looks like in order to support JE/JD after adding 1 union type in their model type, they need to reimplement the entire record JD/JE &lt;https://stackoverflow.com/questions/37999504/how-to-pass-union-types-through-elm-ports&gt;</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:17:42.065300</ts>
    <user>Russel</user>
    <text>In this case, they are looking at storing their model in localStorage through ports</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:17:49.065500</ts>
    <user>Lynne</user>
    <text>That's correct, here is the list of what is supported out of the box: &lt;https://guide.elm-lang.org/interop/flags.html#verifying-flags&gt;</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:17:57.065700</ts>
    <user>Timika</user>
    <text>For flags I think the consensus that `Value` is preferred for the reasons Sergey stated.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:19:49.066100</ts>
    <user>Timika</user>
    <text>It might be a huge undertaking to write encoders and decoders for you whole model, but with that you have the certainty that if your model somehow changes you have a way to provide backwards compat with old local storage versions of your model for example.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:20:38.066400</ts>
    <user>Timika</user>
    <text>Personally, I don’t want to worry renaming fields and stuff because it might break some public JSON API (like in your case)</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:21:28.066600</ts>
    <user>Timika</user>
    <text>What I am saying: It requires some manual effort but you also gain something. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:23:20.067800</ts>
    <user>Timika</user>
    <text>This sounds like an X Y problem, what are you trying to achieve with this? (If you really want to do this, you can simply call update within init, its a function like any other.)</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:24:01.068000</ts>
    <user>Russel</user>
    <text>It sounds like it would be easier to reason about if I did not try to put a part of my model into local storage, and simply have my own `PersistentState` type which could be a record of `Maybe`s that I send over the ports for local storage and receive back through flags</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:24:42.068200</ts>
    <user>Russel</user>
    <text>Mainly, I’d just need to have tokens stored for now</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:24:47.068400</ts>
    <user>Timika</user>
    <text>If your whole model is not what you _really_ need to persist, this seems more reasonable.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:25:03.068700</ts>
    <user>Russel</user>
    <text>Thanks &lt;@Timika&gt;</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:26:17.070000</ts>
    <user>Lynne</user>
    <text>&lt;https://ellie-app.com/4YsDM2LML9ja1&gt;</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:26:27.070400</ts>
    <user>Lynne</user>
    <text>Just tried out sending and receiving non-primitives :slightly_smiling_face:</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:26:37.070700</ts>
    <user>Frieda</user>
    <text>Am I correct that sending port message from JS to Elm is a synchronous operation?</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:29:52.071100</ts>
    <user>Russel</user>
    <text>&lt;@Lynne&gt; I’ve seen this working, I think I was tripped up when attempting to use union types. But as &lt;@Timika&gt; pointed out, if your model structure changes or types get renamed, and you are relying on the default JD/JE implementations, then it could easily break compatibility. So, I settled on the idea of keeping only a small part of my state in LocalStorage which could be a record of maybe types, then I won’t have to reimplement JD/JE for that specific part of the app.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:30:31.071300</ts>
    <user>Wendy</user>
    <text>How do i specify init that will call an update?</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:30:53.071400</ts>
    <user>Russel</user>
    <text>This may lead to some duplication in my model, or I will not store this state in my model and only use it as a flag</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:31:32.072100</ts>
    <user>Lynne</user>
    <text>Nah, I am not questioning what &lt;@Timika&gt; said (on contrary, I am fully supporting it). The Ellie was to check if the docs were up-to date because I got concerned about what &lt;@Timika&gt; said about dropped support for sending non-primitives to ports</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:31:42.072500</ts>
    <user>Huong</user>
    <text>calling `update` from `init` sounds like an attempted solution to a problem. There may be other, better solutions to that problem.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:31:50.072600</ts>
    <user>Lynne</user>
    <text>Sadly, but sometimes docs are not saying true</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:31:54.072800</ts>
    <user>Timika</user>
    <text>Yup, i was wrong about that :smile:</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:32:04.073000</ts>
    <user>Huong</user>
    <text>yes</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:32:22.073500</ts>
    <user>Frieda</user>
    <text>thank you</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:33:53.074800</ts>
    <user>Timika</user>
    <text>Is this knowledge about an implementation detail or part of the “spec”?</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:34:33.075700</ts>
    <user>Frieda</user>
    <text>&lt;@Wendy&gt; `update` is just a function which may modify model and produce a command. Init has same power as it can modify the model and produce a command. If you want to reuse some update model logic then you can extract the logic in a helper function and use the helper function in both init and update functions.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:35:29.075900</ts>
    <user>Huong</user>
    <text>It was consciously changed in 0.19, to make it possible to pass certain things (like event data) through ports and react to those, which must (in many cases) happen synchronously</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:35:31.076100</ts>
    <user>Frieda</user>
    <text>I checked the source code briefly it all it does is just pure function calls.</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:36:08.076300</ts>
    <user>Huong</user>
    <text>so as far as I'm concerned, that's "spec", in the sense that it's not a coincidence</text>
  </message>
  <message conversation_id="801">
    <ts>2019-03-14T12:36:33.076500</ts>
    <user>Timika</user>
    <text>Yeah, same for me. Thank you for elaborating this! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:16:53.076900</ts>
    <user>Dede</user>
    <text>Agreed, that is super cool.</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:17:16.077200</ts>
    <user>Dede</user>
    <text>For what it's worth, I did one last pass and made my markdown system work entirely within the Parser operation.</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:18:07.077500</ts>
    <user>Dede</user>
    <text>There is no large-scale backtracking, although backtracking is used in tokenization.  Most of it could be squeezed out if it were a performance issue.</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:18:15.077700</ts>
    <user>Dede</user>
    <text>My completed homework assignment is here:  &lt;https://github.com/jhbrown94/elmish-minimarkdown&gt;</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:18:21.077900</ts>
    <user>Dede</user>
    <text>Now back to the primary project :wink:</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:19:04.078100</ts>
    <user>Velia</user>
    <text>How to make two work days disappear :laughing:</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:19:23.078300</ts>
    <user>Dede</user>
    <text>Oh yeah.</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:19:25.078500</ts>
    <user>Dede</user>
    <text>Brainsnipe.</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:19:34.078700</ts>
    <user>Dede</user>
    <text>But I had been looking for an excuse to learn Elm Parser.</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:20:00.078900</ts>
    <user>Velia</user>
    <text>This will pay back I'm sure.</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:20:05.079100</ts>
    <user>Dede</user>
    <text>:wink:</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:20:30.079300</ts>
    <user>Dede</user>
    <text>All said and done, I think I still prefer parser-generator systems (e.g. Bison/Yacc) because the domain-specific language is so well tailored to parsing.</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:20:31.079500</ts>
    <user>Wendy</user>
    <text>&lt;@Frieda&gt; i ended up having let in init functions and gradually built the model structure. The function that was used in init model now can take model as the argument and i can refactor my code</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T13:26:19.079700</ts>
    <user>Dede</user>
    <text>(Also:  I'll bet the regexp version wins for performance because it's probably a C implementation somewhere deep inside Node.)</text>
  </message>
  <message conversation_id="803">
    <ts>2019-03-14T14:44:30.080300</ts>
    <user>Jeanene</user>
    <text>This ended up being v nice.</text>
  </message>
  <message conversation_id="804">
    <ts>2019-03-14T14:45:48.080500</ts>
    <user>Jeanene</user>
    <text>For the purposes of validating whether somebody is 18, that constant-time check works well _enough_…and it provides a fairly clear/terse implementation IMO. Would love to know how to do it properly for leap years and whatnot, but I feel like this will check the vast majority…and if somebody fails a `is18` check, they can come back in a day or less and pass. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="805">
    <ts>2019-03-14T15:45:50.080800</ts>
    <user>Hoyt</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="805">
    <ts>2019-03-14T15:56:23.082000</ts>
    <user>Dorsey</user>
    <text>Is elm-community/html-test-runner 0.19-compatible? Or is there something else to run tests in the browser? I was hoping to use Parcel to compile my tests and have them running in a tab next to my app.</text>
  </message>
  <message conversation_id="806">
    <ts>2019-03-14T16:26:42.082200</ts>
    <user>Bebe</user>
    <text>See &lt;https://github.com/elm-explorations/test&gt;</text>
  </message>
  <message conversation_id="806">
    <ts>2019-03-14T16:27:03.082400</ts>
    <user>Bebe</user>
    <text>you can use npm install -g elm-test and then elm-test --watch</text>
  </message>
  <message conversation_id="806">
    <ts>2019-03-14T16:28:48.083200</ts>
    <user>Dorsey</user>
    <text>That’s for the terminal, right? </text>
  </message>
  <message conversation_id="806">
    <ts>2019-03-14T16:31:34.083400</ts>
    <user>Bebe</user>
    <text>yep</text>
  </message>
  <message conversation_id="806">
    <ts>2019-03-14T16:31:47.083600</ts>
    <user>Bebe</user>
    <text>i didn't realise you meant the html runner</text>
  </message>
  <message conversation_id="806">
    <ts>2019-03-14T16:32:35.084600</ts>
    <user>Dorsey</user>
    <text>Yeah. Thanks for offering help :)</text>
  </message>
  <message conversation_id="806">
    <ts>2019-03-14T16:33:31.084800</ts>
    <user>Bebe</user>
    <text>This seems to exist and be 0.19 compatible &lt;https://package.elm-lang.org/packages/jgrenat/elm-html-test-runner/1.0.1/&gt;</text>
  </message>
  <message conversation_id="806">
    <ts>2019-03-14T17:08:51.085300</ts>
    <user>Dorsey</user>
    <text>That's interesting. Thanks!</text>
  </message>
  <message conversation_id="807">
    <ts>2019-03-14T17:47:03.086300</ts>
    <user>Natalie</user>
    <text>i've been out of the elm world for a bit and it looks like `toString` is gone. what's the best way to convert a `List a` to a `String` now (assuming I can convert `a -&amp;gt; String`)?</text>
  </message>
  <message conversation_id="807">
    <ts>2019-03-14T17:49:26.088500</ts>
    <user>Earlean</user>
    <text>&lt;@Natalie&gt; if it's for debugging purposes then `Debug.toString` is still there</text>
  </message>
  <message conversation_id="807">
    <ts>2019-03-14T17:49:48.089600</ts>
    <user>Simon</user>
    <text>First map the list to a string list with that function, then look into the “join” function (either on list module or string module)</text>
  </message>
  <message conversation_id="807">
    <ts>2019-03-14T17:52:20.090100</ts>
    <user>Natalie</user>
    <text>ah yeah, somehow i missed `join`</text>
  </message>
  <message conversation_id="807">
    <ts>2019-03-14T17:52:58.090500</ts>
    <user>Natalie</user>
    <text>is there any syntax like `filter (_ &amp;gt;= 0)` in PureScript?</text>
  </message>
  <message conversation_id="807">
    <ts>2019-03-14T17:53:17.090900</ts>
    <user>Natalie</user>
    <text>or is `\x -&amp;gt; x &amp;gt;= 0` the way to go?</text>
  </message>
  <message conversation_id="807">
    <ts>2019-03-14T17:58:51.092000</ts>
    <user>Earlean</user>
    <text>Yeah, no infix partial application of operators</text>
  </message>
  <message conversation_id="808">
    <ts>2019-03-14T20:04:26.094900</ts>
    <user>Al</user>
    <text>What's the simplest way to embed working Elm code into a static webpage? For context, I am writing a blog post about elm and want working elm code in that blog post. Want something like &lt;https://repl.it&gt; embeds</text>
  </message>
  <message conversation_id="808">
    <ts>2019-03-14T20:05:04.095700</ts>
    <user>Al</user>
    <text>i guess i could just compile `Browser.sandbox` for all the different examples and then embed that JS?</text>
  </message>
  <message conversation_id="809">
    <ts>2019-03-14T21:52:57.096100</ts>
    <user>Carlota</user>
    <text>Isn't there Browser.embed?</text>
  </message>
  <message conversation_id="809">
    <ts>2019-03-14T21:53:25.096300</ts>
    <user>Carlota</user>
    <text>Ah, apparently not.</text>
  </message>
  <message conversation_id="810">
    <ts>2019-03-14T22:02:19.097100</ts>
    <user>Rosaria</user>
    <text>Hey folks. Trying to deal with nested data structures (namely updating them) and getting frustrated that `{ myRecord.data | thing = 5 }` sort of syntax isn't possible. As it seems pretty reasonable as to what that would do.</text>
  </message>
  <message conversation_id="810">
    <ts>2019-03-14T22:02:31.097600</ts>
    <user>Rosaria</user>
    <text>Am I missing something?</text>
  </message>
  <message conversation_id="810">
    <ts>2019-03-14T22:09:20.098200</ts>
    <user>Rosaria</user>
    <text>FWIW I've looked around a bit and seen the distate for deeply nested data structures. I really only have 1-2 levels max.</text>
  </message>
  <message conversation_id="810">
    <ts>2019-03-14T22:09:35.098600</ts>
    <user>Rosaria</user>
    <text>So I'm hoping there's a solution for not-deeply-nested-but-still-a-bit-nested.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T22:17:04.100400</ts>
    <user>Dede</user>
    <text>Helper functions, mostly.  E.g.
```
setThing value data = {data | thing = value}

{myRecord | data = setThing myRecord.data} 
```</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T22:28:46.101900</ts>
    <user>Dede</user>
    <text>Or even:
```
setThing value data = {data | thing = value}
setData data record = { record | data = data }

myRecord |&amp;gt; setData (myRecord.data |&amp;gt; setThing 5) 
```</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T22:29:24.102500</ts>
    <user>Dede</user>
    <text>Whether or not that’s an improvement is probably in the eye of the beholder.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T22:37:44.103000</ts>
    <user>Rosaria</user>
    <text>&lt;@Dede&gt; I appreciate the reply. It is an improvement, but it seems so unnecessary. Wish Elm could help a bit more here.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T22:41:19.103100</ts>
    <user>Al</user>
    <text>I'm going to try doing a "Literate Elm" file</text>
  </message>
  <message conversation_id="812">
    <ts>2019-03-14T22:52:24.103900</ts>
    <user>Hoyt</user>
    <text>&amp;gt; `{ myRecord.data | thing = 5 }`
&amp;gt; As it seems pretty reasonable as to what that would do

This is a conversation that happens a lot. I’m always curious what you think the reasonable thing would be?
For example, what would the return value of that expression be?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T22:57:54.105500</ts>
    <user>Rosaria</user>
    <text>&lt;@Hoyt&gt; It seems fairly obvious to me that the record would return `myRecord` as that's the main thing you're modifying. It's no different than doing:
```
let newData = { oldData | thing = 5 }
in
  { myRecord | data = newData }
```</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T22:58:21.105900</ts>
    <user>Rosaria</user>
    <text>newData is throwaway. You almost never need it and when you do you can simply break it up as above.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:03:38.110700</ts>
    <user>Rosaria</user>
    <text>I'm actually curious what you think it would return. As there doesn't seem to be any other logical thing for it to return. Keep in mind too that this behavior was intuited by someone learning Elm for the first time, they thought this syntax would just work and were shocked that it didn't. Only to learn that the above code or something like it is instead necessary.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:04:32.111300</ts>
    <user>Rosaria</user>
    <text>So it makes me believe more strongly that that syntax is actually the right thing to be doing.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:07:16.112200</ts>
    <user>Hoyt</user>
    <text>It seems like it could also be argued that it would return `data`, since that is what is on the left-side of `|`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:07:46.112800</ts>
    <user>Hoyt</user>
    <text>I don’t have a preference either way, mostly just curious what is the “reasonable” thing different people think</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:07:59.113200</ts>
    <user>Hoyt</user>
    <text>The value on the left of `|` is what is updated</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:08:08.113400</ts>
    <user>Rosaria</user>
    <text>I think that if you return data it loses most of its utility.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:08:17.113600</ts>
    <user>Rosaria</user>
    <text>Since if you had data, and wanted to update and return data</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:08:23.113800</ts>
    <user>Rosaria</user>
    <text>You would only be doing `{ data | ... }`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:08:51.114700</ts>
    <user>Hoyt</user>
    <text>But then we have a bit of syntax dissonance. Generally { x | … } updates `x` and returns `x`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:09:10.115500</ts>
    <user>Hoyt</user>
    <text>But in this case, we are updating a nested property of `x` and yet returning `x`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:09:32.116800</ts>
    <user>Hoyt</user>
    <text>`{ x | attribute = newValue }`
updates `x` and returns `x`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:09:54.117900</ts>
    <user>Hoyt</user>
    <text>But
` { x.prop | attribute = newValue }`
updates `prop` but returns `x`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:10:18.119100</ts>
    <user>Hoyt</user>
    <text>I’m not arguing either way, just pointing out that there are different ways to lookat it</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:10:41.120100</ts>
    <user>Earlean</user>
    <text>eg. `{ someRecord | data = {myRecord.data | thing = 5 }}` is also a common thing to want to be able to do</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:10:44.120300</ts>
    <user>Hoyt</user>
    <text>I find `{ x.prop | attribute = newValue }` to be returning `x` to be less than obvious</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:11:02.120800</ts>
    <user>Hoyt</user>
    <text>I like that the value on the left of `|` is what is updated and returned</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:11:27.121400</ts>
    <user>Rosaria</user>
    <text>The reason I find it obvious is because the value you're modifying isn't actually prop. It's the x. Which just happens to contain a prop.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:11:44.121900</ts>
    <user>Rosaria</user>
    <text>You must return the thing that's modified</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:11:45.122200</ts>
    <user>Rosaria</user>
    <text>Which is indeed x</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:11:55.122500</ts>
    <user>Hoyt</user>
    <text>I would argue that you aren’t updating `x`, you are updating the value of `prop`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:12:55.124200</ts>
    <user>Rosaria</user>
    <text>That's simply incorrect though. Because if x isn't updated, then prop can't be updated. One is contained by the other.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:13:30.124900</ts>
    <user>Hoyt</user>
    <text>:slightly_smiling_face: I could respond with you being simple incorrect :slightly_smiling_face:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:13:45.125600</ts>
    <user>Hoyt</user>
    <text>One person’s “this is obvious and reasonable” is another person’s “the other thing is”</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:13:57.126200</ts>
    <user>Hoyt</user>
    <text>`prop` is being updated, so `prop` should be returned.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:14:20.126800</ts>
    <user>Rosaria</user>
    <text>You could, but that would also be incorrect. It's not a matter of opinion. It's just how memory of a computer works. Props memory lives as part of Xs memory. We don't have pointers in Elm.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:14:45.127400</ts>
    <user>Hoyt</user>
    <text>HAHA! This compiles to javascript. The idea of “this is how memory works” is very far removed :slightly_smiling_face:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:14:46.127600</ts>
    <user>Rosaria</user>
    <text>The values are intertwined and unless explicitly separated, live together.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:14:52.127800</ts>
    <user>Hoyt</user>
    <text>I would argue that both approaches are “reasonable”</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:15:10.128500</ts>
    <user>Hoyt</user>
    <text>Actually, since we are working with persistent data structures, `x` doesn’t get updated at all</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:15:23.129000</ts>
    <user>Rosaria</user>
    <text>Well, Elm doesn't go so far as to have a document like "The Go memory model" so we can't say anything about anything truly :stuck_out_tongue:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:15:30.129200</ts>
    <user>Hoyt</user>
    <text>it has a pointer to a nested structure in memory. `x` never get changed at all</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:15:43.129600</ts>
    <user>Hoyt</user>
    <text>The memory locations that represent `x` don’t get touched</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:15:48.130000</ts>
    <user>Hoyt</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:15:54.130300</ts>
    <user>Hoyt</user>
    <text>if you build it in a certain way</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:16:14.131000</ts>
    <user>Hoyt</user>
    <text>But, again, both ways are “reasonable”</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:16:19.131200</ts>
    <user>Rosaria</user>
    <text>That's also correct, but as far as Elm's concerned that wouldn't add up. Because as I said there's no pointers there. X is just a giant block of memory.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:16:31.131600</ts>
    <user>Rosaria</user>
    <text>One value that gets passed around</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:16:58.132800</ts>
    <user>Hoyt</user>
    <text>It doesn’t have to be “a giant block of memory”</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:17:21.133300</ts>
    <user>Hoyt</user>
    <text>In any case, it is late. My point is that both expectations are perfectly reasonable.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:17:23.133600</ts>
    <user>Rosaria</user>
    <text>&amp;gt; eg. `{ someRecord | data = {myRecord.data | thing = 5 }}` is also a common thing to want to be able to do</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:17:30.133900</ts>
    <user>Rosaria</user>
    <text>I need to stare at this for a second.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:17:44.134500</ts>
    <user>Hoyt</user>
    <text>Also, there are design considerations that I would argue that ` { x.prop | value = newValue }` is a design issue :slightly_smiling_face:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:17:48.134700</ts>
    <user>Hoyt</user>
    <text>But that’s another discussion.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:18:09.135500</ts>
    <user>Hoyt</user>
    <text>I’ve built a handful of elm systems, and, to be honest, I’ve never wanted to do `{ x.prop | value = newValue }`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:18:21.136000</ts>
    <user>Hoyt</user>
    <text>I generally consider that a flag that I’m missing an abstraction somewhere :slightly_smiling_face:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:18:41.136600</ts>
    <user>Hoyt</user>
    <text>So I appreciate the lack of that syntax, because it helps me identify those places</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:18:41.136700</ts>
    <user>Rosaria</user>
    <text>You've -never- wanted to do it? Not even once?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:18:44.136900</ts>
    <user>Hoyt</user>
    <text>nope</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:18:50.137300</ts>
    <user>Rosaria</user>
    <text>I can't imagine that.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:19:07.138200</ts>
    <user>Rosaria</user>
    <text>My models are relatively flat. They at most have 1 level deep.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:19:14.138500</ts>
    <user>Rosaria</user>
    <text>But it's quite often a necessity.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:19:18.138800</ts>
    <user>Hoyt</user>
    <text>I like to have 1- to 2-level nesting</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:19:28.139200</ts>
    <user>Rosaria</user>
    <text>Why I would build a bunch of helper functions to deal with setting those nested values is beyond me</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:19:43.139800</ts>
    <user>Rosaria</user>
    <text>To me it doesn't say I'm missing an abstraction</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:19:47.140200</ts>
    <user>Rosaria</user>
    <text>It just represents extra work</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:19:56.140700</ts>
    <user>Hoyt</user>
    <text>And I would say that both opinions are reasonable</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:20:22.141900</ts>
    <user>Hoyt</user>
    <text>My functions for updating the nested properties generally come about because I have an abstraction that represents updating those</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:20:27.142100</ts>
    <user>Rosaria</user>
    <text>I find it hard to believe that if the syntax didn't exist since Elm's inception, that you would have avoided it in favor of "abstractions".</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:20:35.142300</ts>
    <user>Hoyt</user>
    <text>That’s okay</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:20:45.142600</ts>
    <user>Hoyt</user>
    <text>It is perfectly fine to find it hard to believe</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:21:06.143300</ts>
    <user>Hoyt</user>
    <text>Because the way you design thing is almost assuredly perfectly reasonable, as well :slightly_smiling_face:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:21:22.143600</ts>
    <user>Rosaria</user>
    <text>Well it's not, because I'm forced to make all these helper functions that aren't helpful</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:21:38.144100</ts>
    <user>Rosaria</user>
    <text>It's irony :disappointed:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:21:41.144200</ts>
    <user>Hoyt</user>
    <text>Ah, then maybe not. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:22:30.146100</ts>
    <user>Rosaria</user>
    <text>I don't feel like I'm missing any abstraction or anything. I have a model for my page, and a response object that comes from the server.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:22:33.146400</ts>
    <user>Rosaria</user>
    <text>I put the response in the model</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:22:38.146700</ts>
    <user>Rosaria</user>
    <text>And then want to update it at some point</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:22:44.147100</ts>
    <user>Rosaria</user>
    <text>And my problem exists right away.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:22:52.147800</ts>
    <user>Rosaria</user>
    <text>It's not a complicated problem.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:23:09.148600</ts>
    <user>Rosaria</user>
    <text>Simply one that I have no tools to solve succintly.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:23:18.148900</ts>
    <user>Hoyt</user>
    <text>Maybe direct mapping the server response to a nested record w/o an abstraction is something to think about</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:23:44.149600</ts>
    <user>Rosaria</user>
    <text>The server objects are used bidirectionally. It simplifies a lot of things. Tearing apart would only mean more code to put it back together.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:24:03.150100</ts>
    <user>Rosaria</user>
    <text>If I want to update that object, I change a part of it and send it back.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:24:10.150400</ts>
    <user>Rosaria</user>
    <text>Hence needing to update nested objects.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:24:14.150500</ts>
    <user>Hoyt</user>
    <text>That’s what encoder/decoder pairs are for</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:24:39.151300</ts>
    <user>Hoyt</user>
    <text>Perhaps decoding it on the download into something appropriate, then encoding it back to the wire protocol</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:24:47.151800</ts>
    <user>Hoyt</user>
    <text>But, again, I don’t know your situation, so I can’t say what you should do</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:24:51.152000</ts>
    <user>Rosaria</user>
    <text>I'm already doing that.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:24:58.152400</ts>
    <user>Rosaria</user>
    <text>But</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:25:07.152800</ts>
    <user>Rosaria</user>
    <text>The key is that the server response/request objects are generated code</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:25:24.153200</ts>
    <user>Rosaria</user>
    <text>So modifying them or assimilating them into a completely flattened model isn't really feasible.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:25:26.153400</ts>
    <user>Rosaria</user>
    <text>Nor desirable.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:25:31.153600</ts>
    <user>Hoyt</user>
    <text>ok</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:25:58.154200</ts>
    <user>Rosaria</user>
    <text>They serialize back and forth, and encompass all the types the server understands.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:26:00.154400</ts>
    <user>Rosaria</user>
    <text>It's a very nice model tbh.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:26:05.154600</ts>
    <user>Hoyt</user>
    <text>I believe it</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:26:16.155000</ts>
    <user>Rosaria</user>
    <text>But when you go to update these objects inside your model</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:26:24.155400</ts>
    <user>Rosaria</user>
    <text>One of your eyes always twitches a few times</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:26:31.155600</ts>
    <user>Hoyt</user>
    <text>:slightly_smiling_face: your = my :slightly_smiling_face:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:27:33.157000</ts>
    <user>Hoyt</user>
    <text>Different designs are optimized for different situations</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:28:08.157800</ts>
    <user>Rosaria</user>
    <text>Can I ask how you handle the problem for your own stuff?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:28:15.158100</ts>
    <user>Rosaria</user>
    <text>You've mentioned abstractions</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:28:19.158400</ts>
    <user>Rosaria</user>
    <text>But that's fairly abstract.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:28:32.158900</ts>
    <user>Hoyt</user>
    <text>I generally have a module representing working with whatever the nested value represents</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:28:47.159400</ts>
    <user>Hoyt</user>
    <text>If I find I need to update it, then I generally find I need to do other things with it</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:29:00.159800</ts>
    <user>Hoyt</user>
    <text>So, I usually end up with (and, of course, specific context matters)</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:29:20.160300</ts>
    <user>Hoyt</user>
    <text>```
{ model | prop = Abstraction.doSomethingWith model.prop }
```</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:29:44.160900</ts>
    <user>Hoyt</user>
    <text>There is usually a reason I’m updating a specific aspect of the nested structure. I try to map the update to that reason</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:30:06.161600</ts>
    <user>Hoyt</user>
    <text>But, again, very abstract explanation and it always comes down to the specific context of the codebase</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:30:11.161800</ts>
    <user>Rosaria</user>
    <text>Right.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:30:18.162100</ts>
    <user>Hoyt</user>
    <text>So, there isn’t a “one size fits all”</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:30:35.162800</ts>
    <user>Hoyt</user>
    <text>but I will say that I don’t find myself needing `{ model.prop | attribute = newValue }`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:30:52.163400</ts>
    <user>Hoyt</user>
    <text>Because my module’s “doSomethingWith” receives the `prop` and updates it</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:30:58.163700</ts>
    <user>Hoyt</user>
    <text>So, I don’t need the nested syntax</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:31:35.165000</ts>
    <user>Hoyt</user>
    <text>I try to build in terms of the behaviours, rather than the data, so I generally find myself with these functions</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:31:51.165700</ts>
    <user>Hoyt</user>
    <text>I’m sure there are impacts of this style in other aspects</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:32:07.166300</ts>
    <user>Hoyt</user>
    <text>that perhaps over-complicate things in other parts of my system. ¯\_(ツ)_/¯ So many trade-offs</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:32:24.166600</ts>
    <user>Rosaria</user>
    <text>Always is in programming.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:32:28.166800</ts>
    <user>Hoyt</user>
    <text>for sure</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:32:44.167400</ts>
    <user>Hoyt</user>
    <text>Why I always try to say “there’s no best design, only better design for the context”</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:33:47.168300</ts>
    <user>Rosaria</user>
    <text>It's generated code, so we could generate the helpers as well.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:33:50.168600</ts>
    <user>Rosaria</user>
    <text>It just seems like such a waste</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:34:07.169100</ts>
    <user>Rosaria</user>
    <text>Adding potentially thousands of helper functions, most of which would never be used</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:34:11.169300</ts>
    <user>Hoyt</user>
    <text>There are some utilities that generate the nested helpers, for sure</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:34:14.169600</ts>
    <user>Rosaria</user>
    <text>Add compile times etc.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:34:24.170000</ts>
    <user>Hoyt</user>
    <text>Luckily we won’t compile in the functions that aren’t used</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:34:45.170400</ts>
    <user>Rosaria</user>
    <text>Does 0.19 do DCE?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:34:57.170800</ts>
    <user>Rosaria</user>
    <text>My memory is fuzzy on that.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:34:59.170900</ts>
    <user>Hoyt</user>
    <text>yeah</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:35:02.171100</ts>
    <user>Rosaria</user>
    <text>I see.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:35:08.171600</ts>
    <user>Hoyt</user>
    <text>(as per my understanding)</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:35:35.171900</ts>
    <user>Earlean</user>
    <text>yep, function and type level DCE</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:36:33.172500</ts>
    <user>Hoyt</user>
    <text>In any case, thanks &lt;@Rosaria&gt; for the chat. I’m a bit drunk and ready for bed. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:37:23.173000</ts>
    <user>Hoyt</user>
    <text>I’m always intrigued by people’s thoughts on these things</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:37:31.173400</ts>
    <user>Hoyt</user>
    <text>I appreciate your explaining where youa re coming from</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:38:01.174100</ts>
    <user>Rosaria</user>
    <text>I'll probably gather a bunch of data and attempt to write a proposal on the Discourse. There's certainly enough data pointing to this as a problem. But unlike the verbosity of JSON decoders this one seems solvable to me.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:38:19.174600</ts>
    <user>Rosaria</user>
    <text>Also thanks for the counter-example &lt;@Earlean&gt;</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:38:29.175000</ts>
    <user>Hoyt</user>
    <text>awesome. I’ll be interested in reading it.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:38:58.176000</ts>
    <user>Hoyt</user>
    <text>There is definitely value in “I design this way, because this is the facility I have”</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:39:18.176800</ts>
    <user>Earlean</user>
    <text>It's been something that has been discussed for a few years now and Evan doesn't seem interested in changing it</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:39:20.176900</ts>
    <user>Hoyt</user>
    <text>Or, rather, “definitely something there”</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:39:34.177800</ts>
    <user>Hoyt</user>
    <text>I like hearing people’s thoughts on it</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:39:43.178300</ts>
    <user>Rosaria</user>
    <text>&lt;@Earlean&gt; Ahh, the benevolent dictator. Only so benevolent I suppose.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:39:52.178700</ts>
    <user>Hoyt</user>
    <text>It often boils down to people’s design philosophies, so I like hearing them.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:39:59.179000</ts>
    <user>Hoyt</user>
    <text>Whether it is leading to a change or not</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:40:14.179500</ts>
    <user>Earlean</user>
    <text>`{myRecord.data | field = value}` (where it returns `data`) not working was originally considered a bug in the compiler</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:40:21.179700</ts>
    <user>Rosaria</user>
    <text>&lt;@Hoyt&gt; I like these sorts of discussions too, as a kind of language nerd myself.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:40:44.180200</ts>
    <user>Earlean</user>
    <text>and was not fixed because it was considered that code doing that was worse code</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:41:20.180800</ts>
    <user>Rosaria</user>
    <text>&lt;@Earlean&gt; And how about code that's returning `myRecord` instead? Does that make it better? :smile:</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:42:58.182500</ts>
    <user>Earlean</user>
    <text>it was generally considered to be a bit of a confusing thing to do `{myrecord | ...}` updates `myrecord`, but `{myRecord.data| }` doesn't update `data`, that's weird...</text>
  </message>
  <message conversation_id="813">
    <ts>2019-03-14T23:43:33.183100</ts>
    <user>Earlean</user>
    <text>should `{(someFunction someValue) | field = value}`  work?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:43:54.183600</ts>
    <user>Earlean</user>
    <text>if so, what part of the value does the update apply to?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:45:04.184800</ts>
    <user>Earlean</user>
    <text>do we need some other different syntax for when I want to update `myRecord.data` without first assigning `myRecord.data` to a variable in a `let`?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:45:56.185900</ts>
    <user>Earlean</user>
    <text>if Elm supports both cases then won't people get them confused</text>
  </message>
  <message conversation_id="813">
    <ts>2019-03-14T23:45:56.186000</ts>
    <user>Ruthann</user>
    <text>just latching on to the last part of the convo, i would love to see a setter syntax just like how we currently have the getter `.` syntax</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:49:56.188300</ts>
    <user>Rosaria</user>
    <text>&lt;@Ruthann&gt; I think everyone would love that :stuck_out_tongue:</text>
  </message>
  <message conversation_id="813">
    <ts>2019-03-14T23:50:31.188900</ts>
    <user>Earlean</user>
    <text>```
setData: a -&amp;gt; {b | data: a} -&amp;gt; b
setData a b = {b | data = a}

(setData someData myRecord)
```</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:51:14.189900</ts>
    <user>Rosaria</user>
    <text>&lt;@Earlean&gt; But it does update `data`. But immediately it assigns that to `myRecord.data` as it's specified there in the update statement. But it returns `myRecord` because ultimately you have modified that. And if you do not return that, you've lost part of your update.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:52:26.191100</ts>
    <user>Rosaria</user>
    <text>Also I would think that `{(someFunction someValue) | field = value}` is outside of the scope of this conversation</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:52:34.191500</ts>
    <user>Earlean</user>
    <text>&lt;@Rosaria&gt; yeah, but why should it do that? I passed the `data` value to it, why should it care about `myRecord`?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:52:55.191900</ts>
    <user>Rosaria</user>
    <text>&lt;@Earlean&gt; You passed `myRecord's` `.data` to it. Therefore it must care.</text>
  </message>
  <message conversation_id="813">
    <ts>2019-03-14T23:53:26.192700</ts>
    <user>Rosaria</user>
    <text>It depends how you perceive the `{ | }` syntax I suppose.</text>
  </message>
  <message conversation_id="813">
    <ts>2019-03-14T23:53:55.193600</ts>
    <user>Earlean</user>
    <text>```
let
  data = myRecord.data
in
  {data | field = value}
```
^ data is the same value there</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:53:55.193700</ts>
    <user>Rosaria</user>
    <text>To me I find it a magical beast that defies the very nature of Elm. It barely has a place in the language. It works with almost no constructs that work everywhere else in Elm.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:54:07.194000</ts>
    <user>Rosaria</user>
    <text>Right, but at that point you're only passing data</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:54:11.194200</ts>
    <user>Rosaria</user>
    <text>And it would only return data</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:54:17.194500</ts>
    <user>Rosaria</user>
    <text>And if you wanted it to behave that way, that's the code you would write.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:54:35.195200</ts>
    <user>Rosaria</user>
    <text>I believe that that use case is far less used (though I'd have to get the data to prove that)</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:54:45.195700</ts>
    <user>Earlean</user>
    <text>what if I wanted the above behaviour? would I have to do the `let..in`?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:54:56.196000</ts>
    <user>Rosaria</user>
    <text>Yep. As you have to do now.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:55:08.196300</ts>
    <user>Rosaria</user>
    <text>Since no `.` is accepted anywhere in the record update syntax.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:55:21.196600</ts>
    <user>Earlean</user>
    <text>so why one behaviour instead of the other?</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:55:39.197000</ts>
    <user>Rosaria</user>
    <text>&amp;gt; I believe that that use case is far less used (though I'd have to get the data to prove that)</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:55:52.197200</ts>
    <user>Rosaria</user>
    <text>I'd actually like to see the data</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:56:02.197500</ts>
    <user>Rosaria</user>
    <text>I wonder if it's possible to comb some elm repositories</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:56:05.197700</ts>
    <user>Rosaria</user>
    <text>Looking for these exact patterns</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:56:13.197900</ts>
    <user>Rosaria</user>
    <text>And produce meaningful statistics on it.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:58:16.199900</ts>
    <user>Rosaria</user>
    <text>I'd additionally say that, it's harder to do the opposite if you want it. Consider the two use cases:
```
-- Update nested data
let data = myRecord.data
      newData = { data | thing = 5 }
in { myRecord | data = newData }

-- Update nested data without updating each level of nest
let
  data = myRecord.data
in
  {data | field = value}
```</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-14T23:58:49.200400</ts>
    <user>Rosaria</user>
    <text>This of course becomes even more clear when you have more levels of nesting (though I still discourage deeply nested hierarchies)</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:00:08.202000</ts>
    <user>Earlean</user>
    <text>```
let 
  data = myRecord.data
in 
  { myRecord | data =  { data | thing = 5 } }
```</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:00:47.202400</ts>
    <user>Rosaria</user>
    <text>Ah of course. Silly me.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:01:23.203200</ts>
    <user>Earlean</user>
    <text>3 levels deep and I'd agree, but at that point you're writing worse code</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:02:07.203900</ts>
    <user>Rosaria</user>
    <text>Perhaps. Perhaps not. Sometimes it might not even be something you wrote!</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:02:17.204200</ts>
    <user>Rosaria</user>
    <text>But regardless, those are the reasons that I'd choose one return over the other.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:02:25.204500</ts>
    <user>Rosaria</user>
    <text>I think one has genuinely more impact and utility.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:02:37.204900</ts>
    <user>Rosaria</user>
    <text>Whereas the other is less frequently used and easier to deal with when it does arise</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:02:48.205400</ts>
    <user>Rosaria</user>
    <text>And I'm happy to have someone call me out for a lack of data on that</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:02:57.205700</ts>
    <user>Rosaria</user>
    <text>It's just my anecdotes.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:02:59.205800</ts>
    <user>Earlean</user>
    <text>It's also one of those things where it's not a lot of code..but if it is then you write a function and use that function</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:03:25.206100</ts>
    <user>Rosaria</user>
    <text>But it's a trivial function. It's not something deserving of your time.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:03:34.206300</ts>
    <user>Rosaria</user>
    <text>It doesn't enhance readability particularly.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:03:38.206500</ts>
    <user>Rosaria</user>
    <text>It doesn't add value.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:03:43.206700</ts>
    <user>Rosaria</user>
    <text>It just exists.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:03:51.207000</ts>
    <user>Rosaria</user>
    <text>And detracts from the real problem you're trying to solve.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:04:36.207600</ts>
    <user>Earlean</user>
    <text>it usefully names the change you're making to `data`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:05:07.208200</ts>
    <user>Rosaria</user>
    <text>There's nothing hidden in the syntax I'm proposing. It also usefully displays exactly what is occurring.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:05:26.208900</ts>
    <user>Rosaria</user>
    <text>Without having to have a collection of helper functions in the file / in a separate file relating to that type.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:05:44.209500</ts>
    <user>Rosaria</user>
    <text>Whether or not having a name is useful I think is fairly debatable.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:05:49.209800</ts>
    <user>Earlean</user>
    <text>it displays what field you're updating, but doesn't explain why</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:05:53.210000</ts>
    <user>Rosaria</user>
    <text>Because the `=` says quite a lot about what's occurring.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:06:32.210900</ts>
    <user>Rosaria</user>
    <text>I'd say that the setter displays equal amounts of what, but no why at all.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:06:40.211100</ts>
    <user>Rosaria</user>
    <text>Neither explains the reason behind the change</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:06:44.211400</ts>
    <user>Rosaria</user>
    <text>Simply that it's occurring.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:07:27.212400</ts>
    <user>Earlean</user>
    <text>assumably the why of your update to `data` is explained in a function name of a function for `myRecord`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:07:40.212700</ts>
    <user>Rosaria</user>
    <text>Let's take an example: `setAge`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:07:48.212900</ts>
    <user>Rosaria</user>
    <text>Just a generic, boring assignment setter.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:07:50.213100</ts>
    <user>Rosaria</user>
    <text>No reasoning</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:07:53.213300</ts>
    <user>Rosaria</user>
    <text>No why.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:07:59.213600</ts>
    <user>Rosaria</user>
    <text>It just sets a value to be equal to another.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:08:15.214000</ts>
    <user>Earlean</user>
    <text>`setAge` isn't a good example, `age` is not a complex data structure</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:08:29.214600</ts>
    <user>Earlean</user>
    <text>there isn't any nesting in `age`</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:08:32.214800</ts>
    <user>Rosaria</user>
    <text>You're right, but that's the setter for the more complex data structure of `user`.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:08:40.215000</ts>
    <user>Rosaria</user>
    <text>```setAge user 5```</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:09:13.215600</ts>
    <user>Rosaria</user>
    <text>Remember that this is the other side of the evil for a nested record update.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:09:34.216100</ts>
    <user>Rosaria</user>
    <text>My model contains a user object, it needs its age updated as the user has dictated</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:09:38.216400</ts>
    <user>Rosaria</user>
    <text>There's nothing fancy about it</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:09:47.216700</ts>
    <user>Rosaria</user>
    <text>Just an integer needs to be set.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:09:51.216900</ts>
    <user>Rosaria</user>
    <text>But this is a real use case.</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:14:15.217700</ts>
    <user>Rosaria</user>
    <text>Thanks for the chat &lt;@Earlean&gt;. Nice to bounce ideas around. I'm going to do some other things. Have a good night/day wherever you are :slightly_smiling_face:</text>
  </message>
  <message conversation_id="814">
    <ts>2019-03-15T00:23:58.219500</ts>
    <user>Dede</user>
    <text>I acknowledge that {foo.bar | baz = 5 } is kind of confusing in terms of whether it returns modified-foo or modified-bar.  I wonder if a new syntax could solve this.  Has anyone looked at something like ```{foo | bar | baz = 5}``` ?</text>
  </message>
  <message conversation_id="814">
    <ts>2019-03-15T00:25:31.221100</ts>
    <user>Dede</user>
    <text>I feel like the problem is that imperative programmers have assumptions about what happens if you say `foo.bar.baz = 5` because it just mutated baz in place.  New syntax could avoid preconceptions.</text>
  </message>
  <message conversation_id="814">
    <ts>2019-03-15T00:25:36.221200</ts>
    <user>Nga</user>
    <text>was there a problem with ```{data | object = { object | thing = 5 }}``` ? That seems like it could be a reasonable alternative too.</text>
  </message>
  <message conversation_id="814">
    <ts>2019-03-15T00:26:26.221800</ts>
    <user>Dede</user>
    <text>You have weird namespace stuff there, because in current code the first and second usage of `object` refer to different things.</text>
  </message>
  <message conversation_id="814">
    <ts>2019-03-15T00:27:04.222800</ts>
    <user>Dede</user>
    <text>The second one refers to `object` in the containing scope.  (So I guess my point is what you wrote has pre-existing semantics that it would be confusing to change.)</text>
  </message>
  <message conversation_id="811">
    <ts>2019-03-15T00:29:33.224600</ts>
    <user>Nga</user>
    <text>Fair enough. I'd love to see Aaron's example or yours, or something like it make its way in. Googling the issue there's no shortage of people trying to work around this.</text>
  </message>
  <message conversation_id="814">
    <ts>2019-03-15T01:17:26.225900</ts>
    <user>Ruthann</user>
    <text>&amp;gt; That seems like it could be a reasonable alternative too.

you also have to declare the second ‘object’ as a variable, either through destructuring it or in a let block. it get verbose quickly when setting records, not so when getting them. `data.object.thing`</text>
  </message>
  <message conversation_id="815">
    <ts>2019-03-15T04:58:45.227300</ts>
    <user>Rubi</user>
    <text>Hello, is there a method like next for types ? Like if I have type Color = Green | Red | Yellow, and I have Green, the next would be Red</text>
  </message>
  <message conversation_id="815">
    <ts>2019-03-15T04:59:37.227600</ts>
    <user>Lynne</user>
    <text>There is no such method &lt;@Rubi&gt;</text>
  </message>
  <message conversation_id="815">
    <ts>2019-03-15T05:00:42.228600</ts>
    <user>Rubi</user>
    <text>Thank you &lt;@Lynne&gt;, I'll just implement a custom one.</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:29:55.229500</ts>
    <user>Jarod</user>
    <text>Hi. I have a design question:
I have a type which looks like this...</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:31:14.230100</ts>
    <user>Jarod</user>
    <text>now I have a constructor function `fromValue`
, which takes a AmountCondition and a String. It then determines if the string should be parsed as a Percent or an Amount.</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:31:20.230300</ts>
    <user>Jarod</user>
    <text>So far so good.</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:32:13.230500</ts>
    <user>Jarod</user>
    <text>But now I have to pass a `type Currency = EUR | USD` to construct an `Amount`.</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:33:17.230700</ts>
    <user>Jarod</user>
    <text>I want to pass the currency to the constructor function `fromValue` _only_ if needed. How can I do that?</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:37:25.231100</ts>
    <user>Jarod</user>
    <text>```
type Currency
    = EUR
    | USD


type Amount
    = Amount Currency Float


amount : Currency -&amp;gt; Float -&amp;gt; Amount
amount currency float =
    Amount currency float


amountFromStr : Currency -&amp;gt; String -&amp;gt; Maybe Amount
amountFromStr currency string =
    Maybe.map (amount currency) (String.toFloat string)

```</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:39:24.231500</ts>
    <user>Jarod</user>
    <text>```
type Percent
    = Percent Int


percentFromStr : String -&amp;gt; Maybe Percent
percentFromStr str =
    Maybe.map percent (String.toInt str)
```</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:40:10.231700</ts>
    <user>Jarod</user>
    <text>so only the `amountFromStr` function needs one extra argument `Currency` but not the `percentFromStr` function.</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:41:11.231900</ts>
    <user>Jarod</user>
    <text>Any ideas?</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:44:18.232100</ts>
    <user>Jarod</user>
    <text>The trickiness lies in that the `type AmountCondition` can hold one of two types of values: an amount or a percentage.</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:48:42.232300</ts>
    <user>Jarod</user>
    <text>we have one function, which can construct a `AmountCondition` which uses the constructors of an amount or an percentage.
The constructor for `Amount` needs one additional argument: a currency. But only the main program knows the concrete currency. The `module AmountCondition` is unaware of what particular currency is used at runtime.</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T05:49:25.232500</ts>
    <user>Jarod</user>
    <text>the main program only _uses_ `module AmountCondition`.</text>
  </message>
  <message conversation_id="817">
    <ts>2019-03-15T05:59:55.232700</ts>
    <user>Bert</user>
    <text>I'm having a bit of a hard time understanding. Could you make a full example on Ellie that portrays the issue you are facing?</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:37:33.233200</ts>
    <user>Jarod</user>
    <text>I cannot use the Html.input in Elliapp</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:37:41.233500</ts>
    <user>Jarod</user>
    <text>do I do something wrong?</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:44:10.234000</ts>
    <user>Nana</user>
    <text>&lt;@Jarod&gt; &lt;https://ellie-app.com/37gW7sj9wPVa1&gt;</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:44:13.234100</ts>
    <user>Leonore</user>
    <text>What is the problem you are having?</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:51:11.234700</ts>
    <user>Jarod</user>
    <text>I removed `Html.Attributes._type "number"` from the List of attributes. Now it works.</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:51:19.234800</ts>
    <user>Jarod</user>
    <text>Here you go &lt;https://ellie-app.com/4YNppQkxTrna1&gt;</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:51:24.235000</ts>
    <user>Jarod</user>
    <text>&lt;@Bert&gt;</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:53:31.235600</ts>
    <user>Jarod</user>
    <text>before there was an error message:</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:55:40.235900</ts>
    <user>Jarod</user>
    <text>I reduced the real scenario to the gist</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:56:35.236900</ts>
    <user>Nana</user>
    <text>@lorenz it should be `type_`</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:56:35.237000</ts>
    <user>Liza</user>
    <text>`_type` wasent it `type_`?</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:56:40.237200</ts>
    <user>Liza</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:57:05.237600</ts>
    <user>Liza</user>
    <text>in elm you cannot start variable with `_`</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:57:10.237800</ts>
    <user>Liza</user>
    <text>as i remember..</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:57:30.238100</ts>
    <user>Jarod</user>
    <text>:scream:</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:57:35.238300</ts>
    <user>Jarod</user>
    <text>your right!</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:57:43.238500</ts>
    <user>Jarod</user>
    <text>lol</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:58:21.238700</ts>
    <user>Jarod</user>
    <text>thanks! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T06:59:25.238800</ts>
    <user>Jarod</user>
    <text>if you have any questions....</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T07:08:02.239000</ts>
    <user>Bert</user>
    <text>Thanks! So your problem was that you always need a Currency for the `conditionFromValue` function?</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T07:12:05.239200</ts>
    <user>Jarod</user>
    <text>yup! I need to pass a Currency to every function that might or might not output something with an `Amount`</text>
  </message>
  <message conversation_id="816">
    <ts>2019-03-15T07:12:54.239400</ts>
    <user>Jarod</user>
    <text>Though this is possible, I search for a more elegant solution. It is a design question I think... Maybe you have an idea?</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:20:21.239600</ts>
    <user>Lynne</user>
    <text>Why was `AmountCondition` defined this way? Right now it contains variants which are not mutually exclusive. For example, `GreaterThan` and `IncreasedByPercent` will be true at the same time. It makes me thinking that you could benefit from changing design if the modeling was different.</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:20:56.239800</ts>
    <user>Lynne</user>
    <text>Long story short, which problem are you solving by having `AmountCondition`?</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:25:06.240100</ts>
    <user>Jarod</user>
    <text>well, this would make a short story actually long. In the real app I have two other `Condition` types like `AmountCondition`.
How do you mean "`GreaterThan` and `IncreasedByPercent` will be true at the same time."? They are mutually exclusive...</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:25:41.240300</ts>
    <user>Lynne</user>
    <text>If a value is greater than another value by some percent, it is also just greater than that value :slightly_smiling_face:</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:26:00.240500</ts>
    <user>Lynne</user>
    <text>Like 3 is 2 increased by 50% and 3 is greater than 2 - both statements are true</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:26:02.240700</ts>
    <user>Jarod</user>
    <text>ah! You mean from a purely logical point of view :smile:</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:26:07.240900</ts>
    <user>Lynne</user>
    <text>Yep</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:26:15.241100</ts>
    <user>Jarod</user>
    <text>yes! You're right!</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:26:29.241300</ts>
    <user>Jarod</user>
    <text>But the businesslogic demands this distinction :slightly_smiling_face:</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:27:14.241500</ts>
    <user>Lynne</user>
    <text>So is your problem accommodating for some weird API?</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:27:24.241700</ts>
    <user>Jarod</user>
    <text>yes :despair:</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:27:33.241900</ts>
    <user>Jarod</user>
    <text>._.</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:27:36.242100</ts>
    <user>Lynne</user>
    <text>Ok, but then just pass currency always</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:28:07.242300</ts>
    <user>Lynne</user>
    <text>It is hard to do something more elegant than that given you are restricted by API</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:28:10.242500</ts>
    <user>Jarod</user>
    <text>yep. I think this is the best alternative :disappointed: ugly but explicit and stupid (KISS)</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:28:20.242700</ts>
    <user>Lynne</user>
    <text>Well, that's life</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:28:22.242900</ts>
    <user>Lynne</user>
    <text>Nothing is perfect</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:28:45.243100</ts>
    <user>Jarod</user>
    <text>you know? Programming would be such a bliss without that darn user!</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:28:47.243300</ts>
    <user>Jarod</user>
    <text>:smile:</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:28:53.243500</ts>
    <user>Lynne</user>
    <text>For sure</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:29:02.243700</ts>
    <user>Lynne</user>
    <text>Also useless but who cares :smile:</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:29:10.243900</ts>
    <user>Jarod</user>
    <text>yep!</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:29:21.244100</ts>
    <user>Jarod</user>
    <text>userless = useless</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:29:25.244300</ts>
    <user>Jarod</user>
    <text>:))</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:29:33.244500</ts>
    <user>Lynne</user>
    <text>:+1:</text>
  </message>
  <message conversation_id="818">
    <ts>2019-03-15T07:29:40.244700</ts>
    <user>Jarod</user>
    <text>Thank you two!!</text>
  </message>
  <message conversation_id="819">
    <ts>2019-03-15T11:07:08.246700</ts>
    <user>Fay</user>
    <text>Hello everyone, have a question regarding full dev stack.
How do you do "Web design" to Elm?
Programmers are coding interface after web designers provided raw HTML?
Thank you</text>
  </message>
  <message conversation_id="819">
    <ts>2019-03-15T11:29:26.248600</ts>
    <user>Bert</user>
    <text>&lt;@Fay&gt; I've never worked with a "web designer" that does HTML, but I would argue they can very well learn the Elm syntax for HTML too! </text>
  </message>
  <message conversation_id="819">
    <ts>2019-03-15T11:36:07.250400</ts>
    <user>Nana</user>
    <text>yeah if they know html and css, they can at least learn to write "static" Elm
there's also this tool that converts HTML to Elm
&lt;https://mbylstra.github.io/html-to-elm/&gt;</text>
  </message>
  <message conversation_id="820">
    <ts>2019-03-15T11:41:23.251300</ts>
    <user>Lynne</user>
    <text>Actually, at my previous place our UX expert was able to implement her ideas in Elm&amp;amp;CSS :slightly_smiling_face:</text>
  </message>
  <message conversation_id="819">
    <ts>2019-03-15T11:44:20.251700</ts>
    <user>Fay</user>
    <text>Hmm thank you</text>
  </message>
  <message conversation_id="821">
    <ts>2019-03-15T15:30:18.252700</ts>
    <user>Leopoldo</user>
    <text>hello, how do i implement parallax in elm ?</text>
  </message>
  <message conversation_id="821">
    <ts>2019-03-15T17:12:16.253900</ts>
    <user>Florencia</user>
    <text>&lt;@Leopoldo&gt; What do you mean by parallax? Objects in distance moving slower than objects in front?</text>
  </message>
  <message conversation_id="821">
    <ts>2019-03-15T17:12:46.254500</ts>
    <user>Florencia</user>
    <text>Oh - I was thinking about it in gamedev terms, but you're probably talking about something like scrolling on websites :sweat_smile: that's more likely</text>
  </message>
  <message conversation_id="821">
    <ts>2019-03-15T17:30:38.255600</ts>
    <user>Lindsey</user>
    <text>You project a line from the users approximate eye location through the screen to your object!  Truncate that line at the screen surface.  Or, render with webgl?</text>
  </message>
  <message conversation_id="821">
    <ts>2019-03-15T17:33:24.256300</ts>
    <user>Kris</user>
    <text>&lt;@Leopoldo&gt; You should be able to easily port this to elm &lt;https://link.medium.com/VkVJECzs5U&gt;</text>
  </message>
  <message conversation_id="821">
    <ts>2019-03-15T17:33:42.256700</ts>
    <user>Kris</user>
    <text>Although fairly basic, it should work </text>
  </message>
  <message conversation_id="822">
    <ts>2019-03-15T17:43:52.256800</ts>
    <user>Nana</user>
    <text>you can even do it with pure CSS!
&lt;https://alligator.io/css/pure-css-parallax/&gt;</text>
  </message>
  <message conversation_id="822">
    <ts>2019-03-15T17:49:01.257400</ts>
    <user>Lindsey</user>
    <text>has anyone implemented a scripting language in elm?  I think that would be neat.</text>
  </message>
  <message conversation_id="821">
    <ts>2019-03-15T17:49:36.257800</ts>
    <user>Kris</user>
    <text>What do you mean? Like a bash dsl?</text>
  </message>
  <message conversation_id="822">
    <ts>2019-03-15T17:52:37.259000</ts>
    <user>Lindsey</user>
    <text>Like in games where there's a simple script to run the AI in npcs, or to implement a turtle drawing language</text>
  </message>
  <message conversation_id="823">
    <ts>2019-03-15T18:08:16.259700</ts>
    <user>Leopoldo</user>
    <text>ok, thanks,</text>
  </message>
  <message conversation_id="821">
    <ts>2019-03-15T18:26:19.260300</ts>
    <user>Danika</user>
    <text>I will be soon</text>
  </message>
  <message conversation_id="824">
    <ts>2019-03-16T04:07:17.261800</ts>
    <user>Salvador</user>
    <text>Is there something else aside of `Float` I can use to calculate with?</text>
  </message>
  <message conversation_id="824">
    <ts>2019-03-16T04:10:30.264100</ts>
    <user>Salvador</user>
    <text>I need to round a number to 2 decimal digits. so I do
```
number = 561.295
round (number *100) |&amp;gt; modBy 100
```
this should give me `30`, but I get `29`… because `number*100 /= 56129.5`, but `561129.4999999999`.</text>
  </message>
  <message conversation_id="822">
    <ts>2019-03-16T04:38:05.264700</ts>
    <user>Jin</user>
    <text>Sounds like &lt;https://package.elm-lang.org/packages/myrho/elm-round/latest/&gt; could do the job. </text>
  </message>
  <message conversation_id="824">
    <ts>2019-03-16T06:44:08.264900</ts>
    <user>Earnest</user>
    <text>There's a decimal package you could use: &lt;https://package.elm-lang.org/packages/prikhi/decimal/latest/Decimal#round&gt;</text>
  </message>
  <message conversation_id="822">
    <ts>2019-03-16T07:00:51.266200</ts>
    <user>Bebe</user>
    <text>elm-round is very nice. It rounds using strings I believe, so it doesn’t have those issues</text>
  </message>
  <message conversation_id="822">
    <ts>2019-03-16T07:02:47.268400</ts>
    <user>Bebe</user>
    <text>It would be very useful to have something 
Iike the JS Number.prototype.toFixed in Basics at some point. I end up installing elm-round in most elm apps</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T07:48:00.268700</ts>
    <user>Marlys</user>
    <text>are the debug tools gone from elm reactor?</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T07:48:29.269100</ts>
    <user>Virgie</user>
    <text>there is currently a bug when `--debug` is enabled that crashes the compiler</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T07:49:07.269500</ts>
    <user>Virgie</user>
    <text>so I think it might be discouraged/hard to find info about it.</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T07:49:14.269800</ts>
    <user>Marlys</user>
    <text>there was this small window where I could introspect all previous executed actions</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T07:50:01.270300</ts>
    <user>Virgie</user>
    <text>yes, use `elm make --debug src/Main.elm` (or similar) to get that. but for many applications this will crash the compiler</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T07:51:12.271200</ts>
    <user>Marlys</user>
    <text>I mean with the "elm reactor"</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T07:55:02.272000</ts>
    <user>Virgie</user>
    <text>not sure, if you really wanted to you could do something like `elm make --debug src/Main.elm --output=index.html`, then open `index.html` with `elm reactor`</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T07:55:44.272500</ts>
    <user>Marlys</user>
    <text>Thank you, I'll try it out</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T09:15:39.273700</ts>
    <user>Maida</user>
    <text>&lt;@Marlys&gt; you could use a build manager like parcel or, if you don’t have any external dependencies, you could use `elm-live` (for example `elm-live src/Main.elm -- --debug`)</text>
  </message>
  <message conversation_id="826">
    <ts>2019-03-16T12:00:28.275200</ts>
    <user>Elden</user>
    <text>I was wondering - is it possible to use elm with a different renderer, outside of the Browser? I'm thinking of using it to bind to GTK (via yue for example) or something like that</text>
  </message>
  <message conversation_id="826">
    <ts>2019-03-16T12:13:51.275600</ts>
    <user>Kris</user>
    <text>Not officially supported, yes-ish in theory</text>
  </message>
  <message conversation_id="826">
    <ts>2019-03-16T12:14:53.276700</ts>
    <user>Kris</user>
    <text>But it means that you'd've to reimplement a lot of things like virtual dom and else, I believe</text>
  </message>
  <message conversation_id="826">
    <ts>2019-03-16T12:26:20.277200</ts>
    <user>Elden</user>
    <text>are there any other renderers than the Browser available?</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T15:05:35.278900</ts>
    <user>Marlys</user>
    <text>Do I need to decode the Event object (&lt;https://developer.mozilla.org/en-US/docs/Web/API/Event&gt;) when subscribing to Browser.Events?</text>
  </message>
  <message conversation_id="827">
    <ts>2019-03-16T16:56:13.280600</ts>
    <user>Al</user>
    <text>Folks who develop with webpack, do you have hot module replacement set up and working accross all your elm files? I'm for some reason unable to get any file except `Main.elm` to reload / recompile while developing</text>
  </message>
  <message conversation_id="827">
    <ts>2019-03-16T17:04:05.280700</ts>
    <user>Lynne</user>
    <text>Yes, if you are writing your own event handler</text>
  </message>
  <message conversation_id="827">
    <ts>2019-03-16T17:04:28.280900</ts>
    <user>Lynne</user>
    <text>Works for me in any file</text>
  </message>
  <message conversation_id="827">
    <ts>2019-03-16T17:07:54.281100</ts>
    <user>Arlinda</user>
    <text>I had some problems using webpack HMR plugin. Try using parcel js instead. HMR works there out of the box.</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T17:21:05.281300</ts>
    <user>Marlys</user>
    <text>I'm using elm-live and it works flawlessly so far</text>
  </message>
  <message conversation_id="828">
    <ts>2019-03-16T17:49:47.281600</ts>
    <user>Teri</user>
    <text>using create-elm-app on a 10k line app and no issues. You can copy the config from their repo</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T18:14:25.283000</ts>
    <user>Marlys</user>
    <text>So in the Browser.Events doc there is this note: "Unsubscribe if you do not need these events!". Is there a specific way to unsubscribe or is it enough if my Msg changes and I'm not accessing the branch where the event listener is?</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T18:17:00.283100</ts>
    <user>Huong</user>
    <text>Unsubscribe means "no longer return the subscription from your `subscriptions` function"</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T18:17:28.283300</ts>
    <user>Huong</user>
    <text>That way, the related event listener is actually removed from the document, completely :slightly_smiling_face:</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T18:18:04.283500</ts>
    <user>Huong</user>
    <text>remember that `subscriptions : Model -&amp;gt; Sub Msg`, so you can decide - based on the state of your application - whether you should be subscribing to some event</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T18:18:23.283700</ts>
    <user>Huong</user>
    <text>(the subscriptions are always checked right after your `update` runs)</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-16T18:22:54.283900</ts>
    <user>Marlys</user>
    <text>I see. Thanks!</text>
  </message>
  <message conversation_id="829">
    <ts>2019-03-16T20:43:09.284200</ts>
    <user>Mozella</user>
    <text>There are not, and I think for good reason. Elm focuses on the Browser as a platform and that has led the ecosystem to become very well suited to that task over the years.</text>
  </message>
  <message conversation_id="829">
    <ts>2019-03-16T20:43:35.284400</ts>
    <user>Mozella</user>
    <text>This is talked about as part of this talk here &lt;https://www.youtube.com/watch?v=o_4EX4dPppA&gt;</text>
  </message>
  <message conversation_id="830">
    <ts>2019-03-16T22:50:36.285300</ts>
    <user>Lupita</user>
    <text>i love watching elm vids with richard feldman.</text>
  </message>
  <message conversation_id="825">
    <ts>2019-03-17T07:09:57.286100</ts>
    <user>Frieda</user>
    <text>Are unused record fields removed with DCE?</text>
  </message>
  <message conversation_id="831">
    <ts>2019-03-17T07:27:28.287100</ts>
    <user>Huong</user>
    <text>No</text>
  </message>
  <message conversation_id="832">
    <ts>2019-03-17T07:55:37.288000</ts>
    <user>Earlean</user>
    <text>How do you have an 'unused record field'?</text>
  </message>
  <message conversation_id="832">
    <ts>2019-03-17T07:58:46.288300</ts>
    <user>Virgie</user>
    <text>only written to, never read?</text>
  </message>
  <message conversation_id="832">
    <ts>2019-03-17T07:59:16.288800</ts>
    <user>Virgie</user>
    <text>the problem is of course is that assigning will evaluate the thing you assign it to</text>
  </message>
  <message conversation_id="832">
    <ts>2019-03-17T08:00:09.289600</ts>
    <user>Virgie</user>
    <text>But, in release mode where all functions are pure, there is no way to know so in theory I think you could remove record fields that are never read</text>
  </message>
  <message conversation_id="832">
    <ts>2019-03-17T08:01:13.290600</ts>
    <user>Virgie</user>
    <text>but I don't think the benefit is that high; record fields are renamed to be as short as possible anyway, unlikely that removing them completely has a large effect</text>
  </message>
  <message conversation_id="833">
    <ts>2019-03-17T09:21:59.292400</ts>
    <user>Marlys</user>
    <text>is it possible to destructure model properties while retaining the model reference?</text>
  </message>
  <message conversation_id="833">
    <ts>2019-03-17T09:22:21.293000</ts>
    <user>Marlys</user>
    <text>foo model@{prop1, prop2} &amp;lt;- something like that?</text>
  </message>
  <message conversation_id="833">
    <ts>2019-03-17T09:24:28.293700</ts>
    <user>Dede</user>
    <text>```
let
    ({prop1, prop2} as foo) = computeIt ...
```</text>
  </message>
  <message conversation_id="833">
    <ts>2019-03-17T09:24:43.294200</ts>
    <user>Marlys</user>
    <text>cool thanks</text>
  </message>
  <message conversation_id="833">
    <ts>2019-03-17T09:27:28.297200</ts>
    <user>Jin</user>
    <text>And if your record is contained in a custom type with a single constructor you can also restructure that directly. 

```
let
    ((Bar {prop1, prop2} as foo) as bar) = computeIt ...
```</text>
  </message>
  <message conversation_id="833">
    <ts>2019-03-17T09:28:38.297500</ts>
    <user>Marlys</user>
    <text>even cooler, awesome!</text>
  </message>
  <message conversation_id="834">
    <ts>2019-03-17T14:04:19.297800</ts>
    <user>Lynn</user>
    <text>this is what I have in init
```
WebSocket.makeOpen (Debug.log "url" &amp;lt;| SocketHelpers.mkSocketUrl host)
                |&amp;gt; Debug.log "makeOpen"
                |&amp;gt; WebSocket.send PortFunnels.cmdPort
```</text>
  </message>
  <message conversation_id="834">
    <ts>2019-03-17T14:05:09.298000</ts>
    <user>Lynn</user>
    <text>which leads to</text>
  </message>
  <message conversation_id="834">
    <ts>2019-03-17T14:05:13.298200</ts>
    <user>Lynn</user>
    <text>None</text>
  </message>
  <message conversation_id="834">
    <ts>2019-03-17T14:23:16.298600</ts>
    <user>Lynn</user>
    <text>Ok, so I think i can see some progress now</text>
  </message>
  <message conversation_id="835">
    <ts>2019-03-17T15:20:27.299600</ts>
    <user>Nancey</user>
    <text>How do I report abuse for a user on the Elm slack group?</text>
  </message>
  <message conversation_id="835">
    <ts>2019-03-17T15:22:56.300200</ts>
    <user>Kris</user>
    <text>&lt;@Nancey&gt; try at &lt;#C3FKL0A8H|admin-help&gt;</text>
  </message>
  <message conversation_id="835">
    <ts>2019-03-17T15:23:17.300500</ts>
    <user>Nancey</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T16:43:23.303300</ts>
    <user>Marlys</user>
    <text>How can I remove an element from the DOM?

```
case ( dragState, dragItem ) of
    ( Moving, Just item ) -&amp;gt;
        rectangle item.width item.height x y

    ( _, _ ) -&amp;gt;
        div [] []
```

I want a new rectangle each time I hit the first catch block and dispose it otherwise. Right now, I'm getting a copy of the last rectangle when re-entering ( Moving, Just item ) but instead I want a new rectangle.</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T16:44:42.303800</ts>
    <user>Kris</user>
    <text>You just don’t return it from your function </text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T16:44:55.304300</ts>
    <user>Kris</user>
    <text>Elm takes care of rerendering stuff automatically </text>
  </message>
  <message conversation_id="837">
    <ts>2019-03-17T16:54:59.304600</ts>
    <user>Annamarie</user>
    <text>Hey ya'll, does anyone know how to set up vscode-elm to work with a WSL installation of elm? Is it even possible or should I just install elm in windows? The only reason I started using windows as a development environment is WSL, so I'd rather not go down that path</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T16:56:49.305000</ts>
    <user>Marlys</user>
    <text>&lt;@Kris&gt; I don't understand</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T16:59:20.306400</ts>
    <user>Marlys</user>
    <text>I'm setting the dragItem to Nothing in between Msgs and create a new one. My intuition was that a new element will be added to the DOM.</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T17:04:00.307600</ts>
    <user>Kris</user>
    <text>Where does this `rectangle` come from?</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T17:04:23.308300</ts>
    <user>Marlys</user>
    <text>it's a function that returns a div</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T17:04:40.308700</ts>
    <user>Kris</user>
    <text>To clarify, just *calling* a function that returns some `Html msg` won't place that in the dom, you have to put that somewhere in your view</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T17:05:49.310400</ts>
    <user>Kris</user>
    <text>If that's not what you're asking, perhaps you can setup an ellie example so I can understand better</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T17:05:59.310600</ts>
    <user>Marlys</user>
    <text>yes I'll do that</text>
  </message>
  <message conversation_id="837">
    <ts>2019-03-17T17:14:35.311500</ts>
    <user>Isaias</user>
    <text>Who do i talk to to discuss pull requests for the elm package manager?</text>
  </message>
  <message conversation_id="836">
    <ts>2019-03-17T17:16:54.312000</ts>
    <user>Kris</user>
    <text>&lt;@Isaias&gt; Probably &lt;#C13L7S5GR|elm-dev&gt; or &lt;#C2QPJLU2X|elm-discuss&gt;</text>
  </message>
  <message conversation_id="838">
    <ts>2019-03-17T20:00:21.312600</ts>
    <user>Annamarie</user>
    <text>Bump: anybody know how to configure vscode-elm to work with WSL?</text>
  </message>
  <message conversation_id="839">
    <ts>2019-03-17T23:13:37.313900</ts>
    <user>Frieda</user>
    <text>I’m working on two different Elm projects in parallel. And after one project is compiled the second one could not be compiled. It always gives following error.
```
-- error: CORRUPT BINARY - /Users/akoppela/.elm/0.19.0/package/ContaSystemer/elm-menu/1.0.0/objs.dat:1

The binary data at
/Users/akoppela/.elm/0.19.0/package/ContaSystemer/elm-menu/1.0.0/objs.dat is
corrupt.

Elm caches build artifacts in the following directories:

    /Users/akoppela/.elm
    elm-stuff/

Maybe you recently installed a command line tool or editor plugin that messes
with them? They definitely should not be doing that, but you never know! So
maybe try deleting them? Everything will be rebuilt from scratch. This may help
reveal the corrupting influence.
```</text>
  </message>
  <message conversation_id="839">
    <ts>2019-03-17T23:14:08.314600</ts>
    <user>Frieda</user>
    <text>So I have to clean Elm stuff every time I switch projects. If anyone experience the same thing?</text>
  </message>
  <message conversation_id="840">
    <ts>2019-03-18T00:20:30.315200</ts>
    <user>Carrol</user>
    <text>It happens to me each time I switch between running Elm in Webpack or the CLI</text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:16:34.316100</ts>
    <user>Monte</user>
    <text>Are there any resources for teaching Elm as first language?
Or anyone who has some real-world experience teaching Elm as first language?</text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:24:12.316800</ts>
    <user>Jin</user>
    <text>&lt;@Dorsey&gt; did &lt;http://software.garden&gt; just recently. There is also &lt;http://outreach.mcmaster.ca&gt;. They used the old Graphics package do teach programming to kids, then switched to a cutom package using SVG. You might find some information in here &lt;https://package.elm-lang.org/packages/MacCASOutreach/graphicsvg/latest/&gt;</text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:24:56.317100</ts>
    <user>Monte</user>
    <text>Thanks, awesome! =D</text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:26:40.319400</ts>
    <user>Dorsey</user>
    <text>Yup, you can talk to us (me and &lt;@Ayesha&gt;). We just did first run a week ago. It went better than expected :smile: </text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:27:27.320200</ts>
    <user>Dorsey</user>
    <text>&lt;@Jin&gt; thanks for mentioning us :heart: </text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:27:27.320400</ts>
    <user>Jin</user>
    <text>(I knew you were not alone, but I forgot &lt;@Ayesha&gt;’s name.)</text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:27:46.320900</ts>
    <user>Monte</user>
    <text>I don't think my friend can invest 500 EUR, but I'm reading all the posted info :smiley:</text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:28:30.321900</ts>
    <user>Dorsey</user>
    <text>Also &lt;@Virgie&gt; and &lt;@Danilo&gt; helped us. </text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:29:52.323600</ts>
    <user>Dorsey</user>
    <text>You are welcome to the materials. We also offer one on one couching. You can DM us about it. </text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T04:30:56.323800</ts>
    <user>Monte</user>
    <text>Cool thanks!</text>
  </message>
  <message conversation_id="842">
    <ts>2019-03-18T04:49:18.324100</ts>
    <user>Jana</user>
    <text>&lt;@Leoma&gt; I believe I saw a post of yours where you were doing some live editing-rendering with your markdown language.  Could you point me to it?</text>
  </message>
  <message conversation_id="842">
    <ts>2019-03-18T09:05:23.324700</ts>
    <user>Leoma</user>
    <text>&lt;@Jana&gt; &lt;https://elmlang.slack.com/archives/C0CJ671HU/p1552497726223800&gt;</text>
  </message>
  <message conversation_id="842">
    <ts>2019-03-18T09:08:19.325000</ts>
    <user>Leoma</user>
    <text>So this is working pretty well, EXCEPT, there are two elements working together here, a transparent textarea and a div. I’m just having some CSS struggles with how these resize in sync with each other.
Wasn’t working on the weekend, but back at it today.</text>
  </message>
  <message conversation_id="842">
    <ts>2019-03-18T09:13:16.328200</ts>
    <user>Rosa</user>
    <text>Richard has some workshops that might help. One specifically for beginners</text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T09:42:42.328800</ts>
    <user>Monte</user>
    <text>Is it something that can be done online?</text>
  </message>
  <message conversation_id="841">
    <ts>2019-03-18T09:44:45.329000</ts>
    <user>Dorsey</user>
    <text>Richard's course on Frontend Masters is on-line. If you are asking about our service, then yes. We can use video calls with screen sharing. I currently work with &lt;@Robyn&gt; that way. You can ask him about his experience :smile:</text>
  </message>
  <message conversation_id="843">
    <ts>2019-03-18T10:23:42.329700</ts>
    <user>Robyn</user>
    <text>I’m a very happy customer!</text>
  </message>
  <message conversation_id="843">
    <ts>2019-03-18T10:26:32.329900</ts>
    <user>Dorsey</user>
    <text>:heart:</text>
  </message>
  <message conversation_id="844">
    <ts>2019-03-18T11:35:28.330600</ts>
    <user>Lindsey</user>
    <text>What's the worst name for a scheme written in elm?</text>
  </message>
  <message conversation_id="844">
    <ts>2019-03-18T11:38:18.330700</ts>
    <user>Lindsey</user>
    <text>so far I've got schelme.</text>
  </message>
  <message conversation_id="845">
    <ts>2019-03-18T11:44:11.332800</ts>
    <user>Tawnya</user>
    <text>Hey beautiful people.

I've got chat, and I load more messages above the current ones (like slack).
I want to keep the scroll position as the messages are added.
I am being able to successfully do that, but I have a flash of one frame where the scroll position is wrong before it being corrected.
This is the code I'm using
```
{-| Maintain scroll position after adding elements
above the current view.
-}
anchorScrollPosition : String -&amp;gt; Viewport -&amp;gt; Task Browser.Dom.Error ()
anchorScrollPosition id before =
    let
        distanceToBottom vp =
            vp.scene.height - vp.viewport.y

        adjustScroll after =
            Browser.Dom.setViewportOf id 0 (after.scene.height - distanceToBottom before)
    in
    Browser.Dom.getViewportOf id
        |&amp;gt; Task.andThen adjustScroll
```</text>
  </message>
  <message conversation_id="845">
    <ts>2019-03-18T11:45:03.333900</ts>
    <user>Tawnya</user>
    <text>I suspect this is happening because Elm is using `requestAnimationFrame` on `getViewportOf` and `setViewportOf`, which means that it draws stuff, I get the viewport, and only in the next frame is the scroll adjusted.</text>
  </message>
  <message conversation_id="845">
    <ts>2019-03-18T11:46:02.335600</ts>
    <user>Tawnya</user>
    <text>What I would really need is to force a reflow by getting the new scroll position and setting it to the right value *after* the content is there, but *before* it is rendered on screen.</text>
  </message>
  <message conversation_id="845">
    <ts>2019-03-18T11:46:09.336000</ts>
    <user>Tawnya</user>
    <text>Is that possible?</text>
  </message>
  <message conversation_id="845">
    <ts>2019-03-18T11:46:27.336500</ts>
    <user>Huong</user>
    <text>That is correct. One thing you might want to look into is using `position: sticky` in CSS, though I don't know what browser compatibility is like</text>
  </message>
  <message conversation_id="845">
    <ts>2019-03-18T11:47:18.337200</ts>
    <user>Tawnya</user>
    <text>&lt;@Huong&gt; What do you mean? How could that help?</text>
  </message>
  <message conversation_id="845">
    <ts>2019-03-18T12:00:08.337300</ts>
    <user>Delois</user>
    <text>I’d try handling all of this with css.
I think the way you’re trying to do things won’t work without some convoluted solution.

You’ll definitely want:
- Html.Keyed.ol

You may need:
- Flex Column Reverse (This allows the user to load a page, at the very bottom.)</text>
  </message>
  <message conversation_id="846">
    <ts>2019-03-18T12:19:24.337700</ts>
    <user>Velia</user>
    <text>schelme-on-you ?</text>
  </message>
  <message conversation_id="846">
    <ts>2019-03-18T12:40:57.337900</ts>
    <user>Lindsey</user>
    <text>welp, its out there as schelme now.</text>
  </message>
  <message conversation_id="846">
    <ts>2019-03-18T12:45:22.338100</ts>
    <user>Velia</user>
    <text>I meant scheme-on-you, but schelme is most likely bad enough :laughing: I don't understand it though, my English is lacking. Is it related to the German word?</text>
  </message>
  <message conversation_id="846">
    <ts>2019-03-18T12:45:40.338300</ts>
    <user>Velia</user>
    <text>Or another word play?</text>
  </message>
  <message conversation_id="846">
    <ts>2019-03-18T12:58:38.338500</ts>
    <user>Lindsey</user>
    <text>its just scheme with an extra L!  its scheme with elm inside, but technically it should be the other way around</text>
  </message>
  <message conversation_id="846">
    <ts>2019-03-18T12:59:21.338700</ts>
    <user>Velia</user>
    <text>:man-facepalming:of course</text>
  </message>
  <message conversation_id="847">
    <ts>2019-03-18T14:36:33.344100</ts>
    <user>Tabatha</user>
    <text>I am running into this a lot at work. Think it has to do with the the fact our projects have slightly different versions of elm compiler. Elm-bugfix2, bugfix5, bugfix6 etc. Have been thinking of setting ELM_HOME env variable per project but have not tried it yet. Tell me how it goes if you try it...</text>
  </message>
  <message conversation_id="846">
    <ts>2019-03-18T14:37:45.344500</ts>
    <user>Tabatha</user>
    <text>See: &lt;https://github.com/elm/compiler/issues/1846&gt;</text>
  </message>
  <message conversation_id="848">
    <ts>2019-03-18T15:41:43.346600</ts>
    <user>Lorilee</user>
    <text>I handled this same situation in JS with a mutation observer that tracked when elements were added and adjusted the scroll position</text>
  </message>
  <message conversation_id="849">
    <ts>2019-03-18T21:24:43.350500</ts>
    <user>Paulita</user>
    <text>*[Only for those who program in Java too]*

*Custom Types* from ELM VS *Enums* from Java

Hi!

Reading the appendix* from the guide I did not really find there is a difference in terms of cardinality between a custom type from ELM and an Enum from Java. Both will give no room for invalid inputs. I agree it is easier to create a custom type though.

What are your thoughts on this guys?

* Source:
&lt;https://guide.elm-lang.org/appendix/types_as_sets.html&gt;

Thank you!</text>
  </message>
  <message conversation_id="849">
    <ts>2019-03-18T21:34:19.352700</ts>
    <user>Ruthann</user>
    <text>i can't remember if java enums are simple Ints, if so then there's one difference, a custom type can hold state or other custom types.

however the biggest difference is the handling of custom types by the compiler. Elm will fail to compile if in a case statement, you do not handle all cases of a custom type. I believe java does not do this? ( sorry, no longer program in java )</text>
  </message>
  <message conversation_id="849">
    <ts>2019-03-18T21:46:59.354200</ts>
    <user>Dede</user>
    <text>IIRC, under the hood, each value in a Java Enum is just a singleton object.  They can’t carry data because they’re all constructed at startup.  And the type checking definitely isn’t detailed enough to ensure comprehensive switch coverage.</text>
  </message>
  <message conversation_id="849">
    <ts>2019-03-18T21:48:00.354800</ts>
    <user>Dede</user>
    <text>Like so much of Java, it’s really just syntactic sugar on objects.</text>
  </message>
  <message conversation_id="849">
    <ts>2019-03-18T21:49:57.355700</ts>
    <user>Shondra</user>
    <text>I wish, under the hood they are just Ints, if they were proper objects maybe they could carry some state</text>
  </message>
  <message conversation_id="849">
    <ts>2019-03-18T21:54:21.356700</ts>
    <user>Dede</user>
    <text>Hilariously, they are objects, and they can carry methods, and they can even carry the data with which they are constructed.  Just.. .construction only happens once, so that comparison is just object comparison.</text>
  </message>
  <message conversation_id="849">
    <ts>2019-03-18T21:54:28.356900</ts>
    <user>Dede</user>
    <text>&lt;https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html&gt;</text>
  </message>
  <message conversation_id="849">
    <ts>2019-03-18T21:56:41.358200</ts>
    <user>Ruthann</user>
    <text>&lt;@Paulita&gt; maybe this proxy is closer to ADTs in Java than Enums: &lt;https://github.com/spotify/dataenum&gt;</text>
  </message>
  <message conversation_id="849">
    <ts>2019-03-18T22:06:06.358900</ts>
    <user>Kris</user>
    <text>They can, those are c enums</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T01:51:13.359900</ts>
    <user>Shondra</user>
    <text>I think I've found a bug in the compiler, what's the course of action?</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T01:59:52.360700</ts>
    <user>Earlean</user>
    <text>&lt;@Shondra&gt; write a &lt;http://www.sscce.org/&gt; that triggers the bug and report it at &lt;https://github.com/elm/compiler/issues&gt;</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T02:00:43.361600</ts>
    <user>Earlean</user>
    <text>once you have a sscce you might want to post it here first to see if anyone knows anything about it</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T02:46:21.362600</ts>
    <user>Shondra</user>
    <text>this breaks with elm: `Map.!: given key is not an element in the map`</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T02:46:27.362900</ts>
    <user>Shondra</user>
    <text>sure, what I've found tinkering around is that it only happens if I put types from a library into a Msg type of my own</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T02:49:42.363300</ts>
    <user>Shondra</user>
    <text>where Form comes from elm-form 4.0.0</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T02:49:53.363600</ts>
    <user>Shondra</user>
    <text>but if I use it in a record it works</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T03:18:05.364600</ts>
    <user>Earlean</user>
    <text>&lt;@Shondra&gt; ah, that's a well known one. It's being worked on at the moment.</text>
  </message>
  <message conversation_id="851">
    <ts>2019-03-19T03:19:07.365800</ts>
    <user>Earlean</user>
    <text>if you're using `--debug` it's likely you can workaround this issue by not using `--debug`</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T03:25:11.366200</ts>
    <user>Shondra</user>
    <text>yep, that "fixes" it</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T03:27:05.367200</ts>
    <user>Shondra</user>
    <text>&lt;@Earlean&gt; is there a issue I can follow so I can know when it's fixed?</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T03:29:13.367500</ts>
    <user>Earlean</user>
    <text>&lt;https://github.com/elm/compiler/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+map.%21&gt; there are a bunch of issues reported</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T03:33:44.368600</ts>
    <user>Shondra</user>
    <text>oh :disappointed:, in my madness I downloaded and compiled elm, maybe I'll try to take a stab at it later :simple_smile:</text>
  </message>
  <message conversation_id="850">
    <ts>2019-03-19T06:25:56.369000</ts>
    <user>Garnett</user>
    <text>I wouldn’t say that’s the part that’s madness, madness is that this bug has gone so long without being fixed :wink:</text>
  </message>
  <message conversation_id="852">
    <ts>2019-03-19T07:56:04.371300</ts>
    <user>Paulita</user>
    <text>Indeed &lt;@Ruthann&gt;, maybe this proxy is closer to a Custom Type from ELM. There is even a comparison with Data types from Haskell.</text>
  </message>
  <message conversation_id="853">
    <ts>2019-03-19T08:23:40.372100</ts>
    <user>Danika</user>
    <text>Elms non-reactionary development is intentional, if not frustrating </text>
  </message>
  <message conversation_id="853">
    <ts>2019-03-19T08:26:38.372400</ts>
    <user>Nana</user>
    <text>bug fixes ought to be treated differently than features though?</text>
  </message>
  <message conversation_id="853">
    <ts>2019-03-19T08:37:52.373000</ts>
    <user>Virgie</user>
    <text>the fix here is simple (do not use `--debug`) and therefore it did not warrant a patch release (so far)</text>
  </message>
  <message conversation_id="853">
    <ts>2019-03-19T08:38:34.373500</ts>
    <user>Virgie</user>
    <text>the debug mode needs a lot of work anyway so patching it up now (while it is not  really that useful) doesn't make sense</text>
  </message>
  <message conversation_id="853">
    <ts>2019-03-19T08:56:46.377500</ts>
    <user>Maida</user>
    <text>&lt;@Virgie&gt; I use the debugger extensively. Moving to `0.19` I had a significant drop in the quality of my debugging. Up until last week I used a fork that solved some of the issues with `Map.!:` but that fork stopped working too.</text>
  </message>
  <message conversation_id="853">
    <ts>2019-03-19T09:04:27.378600</ts>
    <user>Virgie</user>
    <text>how is it useful for you? my issues are 1) cannot read full message name/contents, 2) I get swamped by messages I don't need, hard to find the one I want</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:20:39.379400</ts>
    <user>Todd</user>
    <text>hey everyone! I work on an enterprise project using Elm and it has a pretty large codebase</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:21:17.380300</ts>
    <user>Todd</user>
    <text>build times have become pretty unhealthy over time and I was wondering if some of you could share your build times (without previous build cache) and approx. lines of code? I'm interested to see if ours is a unique issue</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:21:58.380900</ts>
    <user>Earlean</user>
    <text>&lt;@Todd&gt; are you on Elm 0.19?</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:22:27.381400</ts>
    <user>Todd</user>
    <text>not yet, but I can't imagine the difference between the two versions to be that critically huge, especially with larger codebases</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:22:59.382000</ts>
    <user>Earlean</user>
    <text>It's quite a huge difference</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:23:17.382300</ts>
    <user>Nana</user>
    <text>I heard it can be around 40x? :smile:</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:24:10.383300</ts>
    <user>Earlean</user>
    <text>0.18 has some pathologic cases with n^2 complex</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:26:45.384400</ts>
    <user>Earlean</user>
    <text>If compile time is your biggest concern then moving to 0.19 should be a high priority. </text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:27:37.385400</ts>
    <user>Todd</user>
    <text>it is a high priority, but we also suspect that there are problems coming from modules that have too many dependencies/dependents</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:27:59.386200</ts>
    <user>Todd</user>
    <text>I also wanted to see what kind of experiences others have with big codebases</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:31:59.390200</ts>
    <user>Earlean</user>
    <text>In terms of relationships between modules you want to structure your app so that modules that change often have few modules dependent on them because all modules that depend on a changed module need recompiling</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:33:31.392400</ts>
    <user>Earlean</user>
    <text>A common mistake is to make too many modules depedent on a module that changes often. Eg. A shared Msg or Model module imported by every other module</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:34:10.393900</ts>
    <user>Todd</user>
    <text>Yes, we recently realized how much of a problem this has become. When our codebase was small, it was not a big deal, but it quickly snowballed and we didn't even notice</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:35:20.395000</ts>
    <user>Earlean</user>
    <text>Or putting modules containing views/css (that designers are changing often)  at the very bottom of a dependency chain of modules</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:37:10.396500</ts>
    <user>Huong</user>
    <text>as a datapoint, our codebase went from 8 minutes -&amp;gt; 12 seconds</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:37:53.396700</ts>
    <user>Huong</user>
    <text>(for a clean compile, that is)</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:39:22.396900</ts>
    <user>Todd</user>
    <text>how large is this codebase?? :anguished:</text>
  </message>
  <message conversation_id="854">
    <ts>2019-03-19T09:41:49.397100</ts>
    <user>Velia</user>
    <text>There are a few numbers out there:
- &lt;https://discourse.elm-lang.org/t/our-experience-upgrading-to-0-19-at-humio/3258&gt;: 81kLOC, from 77s to 2.73s
- &lt;https://discourse.elm-lang.org/t/contasystemer-as-current-stats-and-thank-you-the-community/3348/2&gt;, 2.2s for 20.7kLOC
- &lt;https://elm-lang.org/blog/small-assets-without-the-headache&gt;, 49kLOC in 1.9s
- there are more that I cannot find right now

I would seriously port to 0.19 before refactoring anything. I have not yet heard of anyone having compilation time issues with 0.19.</text>
  </message>
  <message conversation_id="855">
    <ts>2019-03-19T09:58:35.397700</ts>
    <user>Teri</user>
    <text>I found this read really valuable recently</text>
  </message>
  <message conversation_id="855">
    <ts>2019-03-19T09:58:35.397900</ts>
    <user>Teri</user>
    <text>&lt;https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to&gt;</text>
  </message>
  <message conversation_id="855">
    <ts>2019-03-19T10:07:10.398300</ts>
    <user>Huong</user>
    <text>62630loc (excluding blanks and comments)</text>
  </message>
  <message conversation_id="855">
    <ts>2019-03-19T10:07:31.398500</ts>
    <user>Huong</user>
    <text>which includes a couple of very large `case..of` statements, which makes a big difference</text>
  </message>
  <message conversation_id="855">
    <ts>2019-03-19T10:16:59.398900</ts>
    <user>Todd</user>
    <text>wow, that is fascinating! thank you for telling me this, it's going to make the upgrade a lot easier to sell hopefully</text>
  </message>
  <message conversation_id="856">
    <ts>2019-03-19T10:21:54.399100</ts>
    <user>Granville</user>
    <text>Can’t say I totally understand what you’re seeing there, but it appears that your open command is getting to the JS code. Don’t know if you’ve instrumented things enough to see if its getting to your socket server, and coming back to your handler through `PortFunnels.cmdPort`.</text>
  </message>
  <message conversation_id="856">
    <ts>2019-03-19T10:37:57.399500</ts>
    <user>Lynn</user>
    <text>Thanks Bill. I can see some data coming through now. As I’m sure you experienced, it takes a lot more wiring up than for 0.18</text>
  </message>
  <message conversation_id="857">
    <ts>2019-03-19T10:55:50.400700</ts>
    <user>Frieda</user>
    <text>Sometimes I know I have compilation errors but the Elm code is compiled without any unless I go to the file with error and save it to trigger the compilation process.</text>
  </message>
  <message conversation_id="857">
    <ts>2019-03-19T10:56:05.401100</ts>
    <user>Frieda</user>
    <text>Why that happen?</text>
  </message>
  <message conversation_id="857">
    <ts>2019-03-19T10:56:35.401600</ts>
    <user>Frieda</user>
    <text>It happens with webpack elm loader in watch mode</text>
  </message>
  <message conversation_id="857">
    <ts>2019-03-19T11:04:58.402000</ts>
    <user>Dede</user>
    <text>I think it's a known bug in the compiler.  I find myself deleting elm-stuff in its entirety a few times a day.</text>
  </message>
  <message conversation_id="857">
    <ts>2019-03-19T11:06:31.402900</ts>
    <user>Nana</user>
    <text>it used to happen to me a lot, but then it stopped and doesn't happen at all now, don't remember what I changed :thinking_face: (using webpack, elm-webpack-loader and elm-hot-webpack-loader)</text>
  </message>
  <message conversation_id="857">
    <ts>2019-03-19T11:06:41.403100</ts>
    <user>Dede</user>
    <text>&lt;https://github.com/elm/compiler/issues/1809&gt;</text>
  </message>
  <message conversation_id="858">
    <ts>2019-03-19T11:27:04.403500</ts>
    <user>Frieda</user>
    <text>Thank you</text>
  </message>
  <message conversation_id="859">
    <ts>2019-03-19T12:07:05.403600</ts>
    <user>Maida</user>
    <text>I have rather short message names and minimal nesting.</text>
  </message>
  <message conversation_id="859">
    <ts>2019-03-19T12:07:25.403800</ts>
    <user>Maida</user>
    <text>also, the main thing I’m interested in is the state of the model.</text>
  </message>
  <message conversation_id="859">
    <ts>2019-03-19T12:08:34.404000</ts>
    <user>Maida</user>
    <text>I would love if I would also have the full message above the model representation BUT, between what I have in the sidebar and what I have in the model, I have access to a lot of information.</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T13:32:28.406700</ts>
    <user>Rosaria</user>
    <text>Anyone been creating an SPA with Browser.application and realized suddenly that any given http request fired is still active after navigation? Do people then put trackers on all requests and cancel them?</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T13:46:16.407000</ts>
    <user>Hoyt</user>
    <text>Any elm folks in Budapest? I’m going to be there next week.</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T13:55:31.407100</ts>
    <user>Dede</user>
    <text>I just have per-page message wrappers, and discard messages intended for a page that isn't current.</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:00:03.407400</ts>
    <user>Rosaria</user>
    <text>That's what we did too. But some messages are gloablly handled and it was creating race conditions.</text>
  </message>
  <message conversation_id="861">
    <ts>2019-03-19T14:01:46.407600</ts>
    <user>Dede</user>
    <text>Hm.  Can you provide more detail?</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:11:46.407800</ts>
    <user>Rosaria</user>
    <text>On init API requests fly out on a given page. If one comes back 401 then we redirect the user to a 404 page with the ability to login there. But a second in flight request triggers the same thing and we get redirected a second time.</text>
  </message>
  <message conversation_id="862">
    <ts>2019-03-19T14:21:02.408000</ts>
    <user>Nana</user>
    <text>I think having login/access denied as a "route" and using redirects is always awkward</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:21:59.408200</ts>
    <user>Rosaria</user>
    <text>Open to suggestions. It's not so much a route as it's a global message that is handled in Main, it's handled with a redirect in Main however.</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:22:40.408400</ts>
    <user>Nana</user>
    <text>nicer to just have it as a conditonal view - ie. if current route requires auth and auth is missing, display login screen. if auth is pending, display a loading indicator, if everything is fine, display the actual page</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:23:06.408600</ts>
    <user>Rosaria</user>
    <text>Interesting approach.</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:28:51.408800</ts>
    <user>Nana</user>
    <text>that was the advice for routing in Meteor, which I've followed since</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:30:21.409000</ts>
    <user>Rosaria</user>
    <text>I'll consider that. Thanks :smile:</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:32:18.409200</ts>
    <user>Rosaria</user>
    <text>Ah, although there is a problem with that. We don't duplicate our authentication logic on the client side.</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:32:40.409400</ts>
    <user>Rosaria</user>
    <text>We just let the server throw 401s back at us when the user needs to be authed and so we know.</text>
  </message>
  <message conversation_id="860">
    <ts>2019-03-19T14:32:45.409600</ts>
    <user>Rosaria</user>
    <text>Will have to look at other workarounds :disappointed:</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:23:11.410000</ts>
    <user>Marlys</user>
    <text>Is it possible to perform a Task ignoring failure cases?</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:25:03.410400</ts>
    <user>Virgie</user>
    <text>performing a task must fire a message, but you can ignore that message</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:25:29.411000</ts>
    <user>Virgie</user>
    <text>but I don't think a `Task SomeError a -&amp;gt; Task Never a` exists</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:25:38.411200</ts>
    <user>Marlys</user>
    <text>Hmm ok</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:26:10.411400</ts>
    <user>Kris</user>
    <text>You can </text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:26:55.412600</ts>
    <user>Kris</user>
    <text>Use `mapError boom` to get a `Task Never something` and then use perform </text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:27:06.413000</ts>
    <user>Kris</user>
    <text>`boom x = boom x`</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:27:56.413500</ts>
    <user>Kris</user>
    <text>It crashes your app if the task fails though </text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:28:07.413800</ts>
    <user>Marlys</user>
    <text>yea, that's not what I want :smile:</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:31:28.413900</ts>
    <user>Dede</user>
    <text>Thought:  keep an `epoch` number in your model.  You increment it whenever something happens that invalidates outstanding messages, e.g. a completed redirect.  You embed it in every message associated with an outstanding request.  When you receive a completed request response if the embedded epoch doesn’t match `model.epoch` you don’t act on it.  It’s easier than putting a UID on every outstanding request and less subject to weird races.</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:37:48.414100</ts>
    <user>Rosaria</user>
    <text>Also an interesting suggestion.</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:37:56.414300</ts>
    <user>Rosaria</user>
    <text>I'll consider that a bit more, thanks for your efforts guys.</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T15:59:59.415000</ts>
    <user>Mary</user>
    <text>should bad error messages be reported in the issue tracker? if yes, where?</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T16:00:28.415300</ts>
    <user>Kris</user>
    <text>&lt;https://github.com/elm/error-message-catalog&gt;</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T16:17:13.415900</ts>
    <user>Mary</user>
    <text>Done :slightly_smiling_face: &lt;https://github.com/elm/error-message-catalog/issues/291&gt;</text>
  </message>
  <message conversation_id="863">
    <ts>2019-03-19T16:17:49.416100</ts>
    <user>Mary</user>
    <text>(Ping &lt;@Cristie&gt; as author of the line-charts library, not sure if the API design could have an influence with regard to error messages)</text>
  </message>
  <message conversation_id="864">
    <ts>2019-03-19T17:20:26.416300</ts>
    <user>Slyvia</user>
    <text>Could you pick a single api request to send on init and just sit there waiting for it to come back? If it's 401 then redirect, if it's 200 then process the information and send out the other requests?
This is presuming you have a way to distinguish the first request on a specific Msg</text>
  </message>
  <message conversation_id="864">
    <ts>2019-03-19T17:23:48.416600</ts>
    <user>Slyvia</user>
    <text>And assuming a valid session will stay alive during the time between receiving the first response and the other requests hitting the server, which seems reasonable</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:48:34.418500</ts>
    <user>Nancy</user>
    <text>hi everyone, would anyone else find it useful to be able to refer to a value that is not meant to be used with a variable starting with underscore, instead of just the `_`, same as elixir? &lt;https://hexdocs.pm/elixir/master/naming-conventions.html#underscore-_foo&gt;</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:51:42.419600</ts>
    <user>Tom</user>
    <text>maybe not for a prod release, but while I'm developing sometimes I ignore a variable but might use it later and it's good to keep it's semantic name</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:53:00.421100</ts>
    <user>Nancy</user>
    <text>has this been discussed before? where would be the best place to propose it?</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:54:57.423100</ts>
    <user>Ashton</user>
    <text>If its not meant to be used, why does it exist at all?</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:55:32.424300</ts>
    <user>Ruthann</user>
    <text>or why name something that’s not meant to be used?</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:55:59.426400</ts>
    <user>Kymberly</user>
    <text>`case result of ... Err _ -&amp;gt;` ?</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:56:09.426900</ts>
    <user>Ruthann</user>
    <text>you can declare `_` as the variable for more than one expression if that helps</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:56:10.427000</ts>
    <user>Ashton</user>
    <text>I guess sometimes I do like:
```
    case result of
        Err error -&amp;gt;
            -- Some code that doesnt use 'error'
```
But then, I dont know why I need to further signify that “error” is not used.</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:56:15.427500</ts>
    <user>Kymberly</user>
    <text>if you've never written that, you have my hat tip and disbelief :wink:</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:56:30.427800</ts>
    <user>Kymberly</user>
    <text>`Err _err -&amp;gt;` is what I would do there</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:56:34.428000</ts>
    <user>Kymberly</user>
    <text>or `Err _` ofc</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:56:38.428200</ts>
    <user>Jacquelyn</user>
    <text>what’s the simplest way to create a function that squares a number? In Haskell it would be `(^2)`, but that doesn’t work in Elm.</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:56:59.428600</ts>
    <user>Kymberly</user>
    <text>`(**) 2` should do it</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:57:03.428800</ts>
    <user>Ruthann</user>
    <text>prolly just `square = ^`</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:57:04.429000</ts>
    <user>Kymberly</user>
    <text>wait no it won't</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:57:17.429200</ts>
    <user>Jillian</user>
    <text>I have come across a few cases (especially String -&amp;gt; Maybe SomeType) functions where I had to specify the case _ -&amp;gt; Nothing. Then later I would forget to come back and handle a new case.
Case statements are exhaustive on the input type but not on the output type. What if we had the possibilty to specify that we expect the output of a case statement to cover all possibilities of a type. Would something like that even be possible and would you find it useful?</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:57:56.429600</ts>
    <user>Jacquelyn</user>
    <text>`square` wouldn’t square any arguments though. It would take 2 arguments, just like `^`</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:58:03.429800</ts>
    <user>Kymberly</user>
    <text>`\n -&amp;gt; n^2` is the only way I think</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:58:25.430100</ts>
    <user>Jacquelyn</user>
    <text>Does Elm not have a `flip` function?</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:58:32.430300</ts>
    <user>Kymberly</user>
    <text>used to but doesn't any more</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:58:33.430500</ts>
    <user>Ruthann</user>
    <text>used to in 0.18</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:58:42.430700</ts>
    <user>Jacquelyn</user>
    <text>I could do `flip (^) 2` if it did</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:58:48.430900</ts>
    <user>Jacquelyn</user>
    <text>`flip` was removed?</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:59:09.431100</ts>
    <user>Kymberly</user>
    <text>and a few other functions that were just too easy to write as an anonymous function.</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:59:34.431300</ts>
    <user>Kymberly</user>
    <text>decrease clutter i guess - but they might exist in the elm-extras packages</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T19:59:36.431500</ts>
    <user>Jacquelyn</user>
    <text>ok, so &lt;@Kymberly&gt; looks like you’re right, `\n -&amp;gt; n^2` is the way to go…</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:00:57.432900</ts>
    <user>Kymberly</user>
    <text>&lt;https://github.com/elm-community/basics-extra&gt; has the `flip` function</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:01:15.433800</ts>
    <user>Ruthann</user>
    <text>that’s a very interesting case ( mind the pun ) and i would definitely find it useful for decoding our backend enums which comes as strings into custom types</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:01:17.434000</ts>
    <user>Kymberly</user>
    <text>(fixed link)</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:01:36.434700</ts>
    <user>Ruthann</user>
    <text>instead now we have console errors and when i get them, the errors point me to the right file to update the enums</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:03:22.436400</ts>
    <user>Ruthann</user>
    <text>i mean i’ve used flip before:
```
sqr = flip (^) 2
```

but it seems a lot clearer to just write
```
sqr x = x ^ 2
```</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:03:37.437000</ts>
    <user>Nancy</user>
    <text>one case I would find useful would be in context to extracting part of a custom type, ie.

```
type A
  = A1 Int Int
  | A2 Int Int

aIndex : A -&amp;gt; Int
aIndex a =
case a of
  A1 index _count -&amp;gt;
    index
  A2 index _count -&amp;gt;
    index
```</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:04:02.437900</ts>
    <user>Ruthann</user>
    <text>firstly you don’t know what order of args the `(^)` function has, then you have to mentally swap the order you’ve just worked out.</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:04:14.438300</ts>
    <user>Nancy</user>
    <text>I would find it useful to know the other options available in context to the case statment, not to forget the context of the function</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:04:54.439600</ts>
    <user>Ruthann</user>
    <text>i suppose you can make `count_` a convention in your code?</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:05:36.440900</ts>
    <user>Jillian</user>
    <text>Well the syntax would probably not be straight forward as you need to be able specify which type exactly you would like to cover exhaustively. Eg if your are doing String -&amp;gt; Result Html.Error MyType you would not want to cover all possible cases of Html.Error but maybe MyType</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:05:47.441100</ts>
    <user>Nancy</user>
    <text>another case would be functions like `List.indexedMap (\_index value -&amp;gt; value)` - I know this is not a good example given that `List.map` exists, but just to represent the use case</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:06:21.441200</ts>
    <user>Nancy</user>
    <text>tools like elm-analyse would still warn about this</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:07:18.441500</ts>
    <user>Jillian</user>
    <text>But maybe they are open to respecting this in the future</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:08:51.441700</ts>
    <user>Ruthann</user>
    <text>ah hehe, can’t help you there.
the way i think about it, Elm gives you the ability to name variables you care about, and `_` to name any numbers of variables you don’t care about for destructuring. Your requirement is somewhat ambiguous, do you care about _count or not? if yes just name it `count`, if not, then `_`.</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:10:28.442000</ts>
    <user>Nancy</user>
    <text>found this &lt;https://github.com/elm/compiler/issues/1218#issuecomment-218835877&gt;</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:12:15.442100</ts>
    <user>Ruthann</user>
    <text>actually, i realise the way to do this is to write the reverse function first `MyType -&amp;gt; String` then use that in reverse  to resolve the string ( by manually listing out all values of MyType or just having it as a compile time flag )</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:13:47.442300</ts>
    <user>Jacquelyn</user>
    <text>definitely `sqr x = x ^ 2` is nicer. However, I wanted to write this inline: `map (flip (^) 2) myList` vs `map (\n -&amp;gt; n ^ 2) myList`. There, I like `flip` slightly more. Not a big deal though. More a curiosity about Elm syntax.</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-19T20:21:29.442500</ts>
    <user>Earlean</user>
    <text>if you want `flip` you can easily write it</text>
  </message>
  <message conversation_id="866">
    <ts>2019-03-20T03:25:22.442800</ts>
    <user>Bert</user>
    <text>Removing backticks, flip, custom operators etc. all contribute to the fact that people who know the concepts of Elm can truly read and understand anyone's code </text>
  </message>
  <message conversation_id="866">
    <ts>2019-03-20T03:31:03.443000</ts>
    <user>Bert</user>
    <text>The lack of type classes and qualified imports by default help a lot too, I think: the types are very explicit everywhere in typical Elm code. You can't confuse `Maybe` with `Task` in any way. As a Haskell beginner, I often get confused when dealing with e.g. `IO (Maybe String)`. </text>
  </message>
  <message conversation_id="867">
    <ts>2019-03-20T06:09:49.446500</ts>
    <user>Epifania</user>
    <text>Hi, I'm trying to upgrade some app to 0.19; so far I did all the work manually, now I'd like to try elm-upgrade.
Unfortunately I'm working behind a firewall; I believe this may be the reason for this error:
```{ MaxRedirectsError: Redirected 10 times. Aborting.
    at ClientRequest.fn.request.res (/home/admin/app/node_modules/got/index.js:40:23)
    at Object.onceWrapper (events.js:315:30)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at Socket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at Socket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
  message: 'Redirected 10 times. Aborting.',
  host: '&lt;http://package.elm-lang.org|package.elm-lang.org&gt;',
  hostname: '&lt;http://package.elm-lang.org|package.elm-lang.org&gt;',
  method: 'GET',
  path: '/search.json',
  statusCode: 301,
  statusMessage: 'Moved Permanently' }```
I already:
- set http_proxy and https_proxy
- set up the root certificate (this was needed to let npm work properly)
I also tried to debug the connection using node
```const caw = require('caw');
const got = require('got');
got('&lt;http://packages.elm-lang.org|packages.elm-lang.org&gt;', { agent: caw() }, ()=&amp;gt; {});
```
the result was
```(node:17607) UnhandledPromiseRejectionWarning: RequestError: tunneling socket could not be established, statusCode=502```
so looks like a problem with the firewall setup
Any suggestion? Thanks a lot in advance

EDIT:
looks like the "caw" package can't properly tunnel our corporate proxy.
or at least I can't configure node to work properly</text>
  </message>
  <message conversation_id="867">
    <ts>2019-03-20T09:37:41.451000</ts>
    <user>Chaya</user>
    <text>I have a best practice-question: How do you handle cases where based upon something in the model you should either show something or nothing. This applies to for example error messages.

I often end up with something like this:
```
            if model.somethingWentWrong then
                showErrorMessage

            else
                text ""
```

There might be nothing wrong with doing it this way, but for me the else-branch feels off.</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T09:42:32.452100</ts>
    <user>Jin</user>
    <text>This is ok. You could also return a `List (Html msg)`, with `[]` as the void case.</text>
  </message>
  <message conversation_id="868">
    <ts>2019-03-20T09:51:17.453400</ts>
    <user>Contessa</user>
    <text>Hey folks, I was checking this repository &lt;https://github.com/noahzgordon/elm-jsonapi&gt; and they used an operator i can’t found from the Elm documentation which is `:=` like in
```
userDecoder : Json.Decode.Decoder User
userDecoder =
  Json.Decode.object2 User
    ("username" := Json.Decode.string)
    ("email" := Json.Decode.string)

```
I can see it is expoed from `import Json.Decode exposing ((:=))` but I can’t find any documentation</text>
  </message>
  <message conversation_id="868">
    <ts>2019-03-20T09:52:56.454000</ts>
    <user>Nana</user>
    <text>&lt;@Contessa&gt; I think that's from 0.18</text>
  </message>
  <message conversation_id="868">
    <ts>2019-03-20T09:54:30.454800</ts>
    <user>Nana</user>
    <text>looks like it's equivalent to what's now called `Decode.field`</text>
  </message>
  <message conversation_id="868">
    <ts>2019-03-20T09:55:19.454900</ts>
    <user>Contessa</user>
    <text>You’re right I found it in the 4.0.5 docs of Json.Decode, I didn’t check since the json api docs says it’s 0.19 compatible. Thank you!</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T10:14:44.455600</ts>
    <user>Dede</user>
    <text>That's a dicey assumption.   I mean, depending on your load, it could happen a lot of times per day.  If you care,  you have to design for the user experience of it...</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T10:28:31.462700</ts>
    <user>Kay</user>
    <text>I'm thinking about making something similar to &lt;http://robowiki.net/wiki/Robocode&gt;, but in javascript running in the browser.
For the api for the user coded bots, I would like a bit more typesafety than vanilla js offers.

Would love to hear what people think about making something like this using Elm? Is it possible? Would it be possible to compile and run user entered code in a way that makes sense? Any other tips, advice, suggestions? :) </text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T10:29:13.464100</ts>
    <user>Kay</user>
    <text>(haven't played with elm before, so it would also be a øn interesting way to learn it.. I hope ;p) </text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T10:30:03.464200</ts>
    <user>Rosa</user>
    <text>&lt;https://www.youtube.com/watch?v=WQFwnKVLDdI&gt;

really cool talk on Robots and Elm</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T10:38:01.464500</ts>
    <user>Nana</user>
    <text>it should be theoretically possible to compile user written code into an Elm app which controls a robot, and you could set up ports from JS to Elm that send "sensor data" to the Elm app and receives commands</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T10:39:26.464700</ts>
    <user>Nana</user>
    <text>probably a lot of work though, and it'd be mostly JS stuff rather than Elm code</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T10:46:32.464900</ts>
    <user>Rosa</user>
    <text>afair thats the gist of the talk. johnny-five node sdk, and ports i believe</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T10:49:17.465100</ts>
    <user>Kay</user>
    <text>Robocode is not actual robots :stuck_out_tongue: It's kind of a game, where you can code a Robots ai, and then you dump 2 or more robot ai's into an arena, and they fight until a winner is found :slightly_smiling_face:

So I'm planning on doing a bunch of Canvas stuff to show the battle :slightly_smiling_face:</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T11:00:36.465300</ts>
    <user>Velia</user>
    <text>Also have a look (including the source) at:

&lt;https://package.elm-lang.org/packages/elm-community/html-extra/latest/Html-Extra#nothing&gt;

and

&lt;https://package.elm-lang.org/packages/elm-community/html-extra/latest/Html-Extra#viewIf&gt;

and the Lazy variant.</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T11:29:22.465700</ts>
    <user>Nana</user>
    <text>another option is to use elm-svg, simpler than Canvas I think</text>
  </message>
  <message conversation_id="865">
    <ts>2019-03-20T11:30:07.465900</ts>
    <user>Nana</user>
    <text>and it lets you write more Elm instead of JS :wink:</text>
  </message>
  <message conversation_id="869">
    <ts>2019-03-20T12:42:53.467500</ts>
    <user>Genesis</user>
    <text>Is it possible to get `Bytes` from `elm/bytes` through a port? It doesn't seem to be part of the supported types, what is the recommended way to get `Bytes` across? :smile:</text>
  </message>
  <message conversation_id="869">
    <ts>2019-03-20T12:43:32.467900</ts>
    <user>Genesis</user>
    <text>(I have a `UInt8Array` in JS)</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:00:32.468100</ts>
    <user>Timika</user>
    <text>I guess you want to push them from Elm to JS?</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:01:40.468400</ts>
    <user>Timika</user>
    <text>In any case, you cannot reasonably interact with typed JS arrays using Elm yet. You have to create some form of intermediate format.</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:02:24.468600</ts>
    <user>Genesis</user>
    <text>The other way around, I want to subscribe audio data being played to create a visualisation (similar to &lt;https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API&gt;).</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:02:49.468900</ts>
    <user>Genesis</user>
    <text>I was wondering, is going via `String` reasonable?</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:02:58.469100</ts>
    <user>Timika</user>
    <text>I use array of ints for that.</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:03:42.469300</ts>
    <user>Timika</user>
    <text>(and in one case even putting multiple values into one int which can house 4 bytes)</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:03:49.469500</ts>
    <user>Genesis</user>
    <text>Doesn't that make me send ~8 times as much data through the port? From memory JS integers are encoded using doubles</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:04:00.469700</ts>
    <user>Timika</user>
    <text>Yes, it’s bad for performance. Or at least not optimal. But you can go some distance with that approach.</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:04:42.469900</ts>
    <user>Genesis</user>
    <text>I'll see if it's good enough. Any reason to stay away from String as the intermediary type?</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:05:09.470200</ts>
    <user>Timika</user>
    <text>I haven’t thought about strings TBH, that’s an interesting idea!</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:05:26.470400</ts>
    <user>Timika</user>
    <text>I might benchmark this when I get home. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:06:02.470600</ts>
    <user>Genesis</user>
    <text>Looking at the `elm/bytes` API, I should be able to do `String -&amp;gt; Bytes` then `Bytes -&amp;gt; Array Int` (decoded as uint8)</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:06:38.470900</ts>
    <user>Timika</user>
    <text>As of now, I push 1426500 ints per second from Elm to JS via arrays of int, a minimal improvement would accumulate to a lot I guess :smile:</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:07:25.471300</ts>
    <user>Timika</user>
    <text>If you get some insight by trail and error, I would love to hear your experience :smile:</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:08:05.471500</ts>
    <user>Genesis</user>
    <text>For you, I guess it would depend on what range of values you use in your ints. If you use the full range then Strings won't help size wise</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:09:13.471800</ts>
    <user>Huong</user>
    <text>The main issue is that not every stream of bytes is valid UT8</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:09:40.472000</ts>
    <user>Timika</user>
    <text>But maybe serialisation/deserialisation is faster or whatnot. I learned _not to trust_ my intuition about performance and just benchmark the hell out of ideas like this.</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:10:29.472200</ts>
    <user>Genesis</user>
    <text>Right! &lt;@Huong&gt; Does the `elm/bytes` `String -&amp;gt; Bytes` encoder do any checking? Or do you think the issue is on the JS side?</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:10:59.472400</ts>
    <user>Timika</user>
    <text>&lt;@Huong&gt; do you have an example from the top of your head where that might be the case?</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:11:07.472600</ts>
    <user>Genesis</user>
    <text>I don't have much benchmarking experience in Elm, I'll have to look into setting that up</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:11:22.472800</ts>
    <user>Timika</user>
    <text>Shameless plug: &lt;https://github.com/Malax/elmboy/tree/master/benchmarks&gt;</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:11:34.473000</ts>
    <user>Timika</user>
    <text>this is a very bare-bones setup you can just steal</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:12:00.473200</ts>
    <user>Huong</user>
    <text>`0xf0 0x00` would do it</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:12:05.473400</ts>
    <user>Timika</user>
    <text>With ports, things get tricker to benchmark tho.</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:12:15.473700</ts>
    <user>Genesis</user>
    <text>Ah! You're the `elmboy` person! Great talk (I watched it on youtube) :slightly_smiling_face:</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:12:58.474000</ts>
    <user>Huong</user>
    <text>(i.e. "broken" surrogate pairs)</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:13:44.474200</ts>
    <user>Timika</user>
    <text>And JS will error out with broken UTF8? (which makes sense, I don’t miss the days of `char*` at all :P)</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:15:43.474400</ts>
    <user>Genesis</user>
    <text>Alright, thanks for your recommendations! The array of int route seems simpler to start with. :smile:</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:16:13.474600</ts>
    <user>Huong</user>
    <text>not sure - JS uses UTF-16 so there's another conversion involved there :sweat_smile:</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T13:29:24.474800</ts>
    <user>Huong</user>
    <text>Right, so nothing will explode, however, the bytes representation won't quote match the bytes it came from.  And even that is only because bitshifting `NaN` produces 0 :joy:</text>
  </message>
  <message conversation_id="871">
    <ts>2019-03-20T15:22:17.476000</ts>
    <user>Rosanne</user>
    <text>Does anyone here use Google's Bazel for building their code (either personally or at work)?</text>
  </message>
  <message conversation_id="870">
    <ts>2019-03-20T15:54:03.476800</ts>
    <user>Huong</user>
    <text>I don't though I was just looking at an issue related to it - &lt;https://github.com/elm/compiler/issues/1908&gt;</text>
  </message>
  <message conversation_id="872">
    <ts>2019-03-20T16:15:44.478900</ts>
    <user>Laurena</user>
    <text>I think I've read something about it before but can't seem to find it...what are the bug fixes in the Elm npm package related to? The Elm compiler or the package itself? Example: `0.19.0-bugfix6`. &lt;https://www.npmjs.com/package/elm&gt;</text>
  </message>
  <message conversation_id="872">
    <ts>2019-03-20T16:17:05.479100</ts>
    <user>Laurena</user>
    <text>The last related commit I've found is this one for `0.19.0-bugfix2`: &lt;https://github.com/elm/compiler/commit/964c62ffd6ac108d8cc004040c43bdc6acb3e7e3&gt;.</text>
  </message>
  <message conversation_id="872">
    <ts>2019-03-20T16:20:27.479300</ts>
    <user>Huong</user>
    <text>Only relevant to the npm installer itself, the binaries have not changed</text>
  </message>
  <message conversation_id="872">
    <ts>2019-03-20T16:21:12.479600</ts>
    <user>Laurena</user>
    <text>Thanks &lt;@Huong&gt;!</text>
  </message>
  <message conversation_id="872">
    <ts>2019-03-20T16:21:58.479800</ts>
    <user>Huong</user>
    <text>(the actual changes to the npm installer are related to upgrading the `binwrap` installer, in order to not trigger npm audit warnings)</text>
  </message>
  <message conversation_id="872">
    <ts>2019-03-20T16:22:15.480000</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/elm/compiler/pull/1884/files#diff-b88b915bb43bc1305102fc9079bf9907&gt;</text>
  </message>
  <message conversation_id="872">
    <ts>2019-03-20T16:23:44.480200</ts>
    <user>Laurena</user>
    <text>Ah, thank you for the details! Those warnings were unnecessarily ominous. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="872">
    <ts>2019-03-20T16:26:48.480400</ts>
    <user>Rosanne</user>
    <text>Ooh, interesting, thanks</text>
  </message>
  <message conversation_id="873">
    <ts>2019-03-20T19:12:24.481500</ts>
    <user>Vashti</user>
    <text>&lt;https://github.com/elm/compiler/issues/984&gt; anyone know if there's any chance this will get revived? Some of the ideas in there (especially rtfeldman's curried update syntax) seem really nice, but I don't know if things have changed since then.</text>
  </message>
  <message conversation_id="874">
    <ts>2019-03-21T00:45:43.482400</ts>
    <user>Yetta</user>
    <text>I was reading [this](&lt;https://www.infoq.com/presentations/software-languages-panel&gt;), and they talked about elm in such nice terms that I wanted to share it with you:</text>
  </message>
  <message conversation_id="874">
    <ts>2019-03-21T00:45:44.482600</ts>
    <user>Yetta</user>
    <text>&amp;gt; Phelps: I think one thing I wanted to touch on is that Rust and Elm - Elm is a programming language designed for the web - I think they both collectively have kind of played off of each other. I don't want to give one more credit than the other. I'm not sure which came first.

&amp;gt; Williams: No, Rust 100% borrowed from Elm. We copied them shamelessly and we thank them daily.

&amp;gt; Phelps: I thought so, but I didn't want to say it.

&amp;gt; Williams: It's true.

&amp;gt; Phelps: But Elm, in hindsight, it's kind of like, “Duh”. But essentially, Elm, this programming language that was designed for the web, it's kind of like a gateway drug to Haskell, but yes, but it's much much simpler. Sorry about the drug metaphor, I guess.

&amp;gt; Williams: It's cool. It's like hurting cats up here.

&amp;gt; Phelps: I know it. But anyway, it did something novel that is laughable, but that it actually gave us real good air messages. It actually did not only give you a short description that you could google, but also a long description that a human would read, and pointed you exactly to the line of code and in a lot of cases, gave you examples of what you should probably do, what it thinks you meant or what you might want to put here instead. And that was a number of years ago when it first did that. If you're fairly new to programming, you might not have noticed because in the last many years, four or five years, other languages have borrowed from that philosophy. And I just think that that's a huge thing. It really set the bar just totally different. And it's funny, because if you write a lot of Javascript, you still to this day get undefined is not a function errors.</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T04:26:05.485000</ts>
    <user>Sibyl</user>
    <text>Hi Suppose I have Msg type like this -&amp;gt;</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T04:26:49.485100</ts>
    <user>Sibyl</user>
    <text>None</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T04:27:22.486000</ts>
    <user>Sibyl</user>
    <text>How do I send (Submit 5 Nothing) with the onclick.</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T04:28:06.487200</ts>
    <user>Sibyl</user>
    <text>I tried using onClick FeedMsg &amp;lt;&amp;lt; (Submit 5 Nothing) But could not make it work</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T04:28:47.487500</ts>
    <user>Jin</user>
    <text>`onClick (FeedMsg (Submit 5 Nothing))` should work</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T04:30:44.488200</ts>
    <user>Sibyl</user>
    <text>Thank you. It works.</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T04:30:45.488300</ts>
    <user>Jin</user>
    <text>See e.g. here &lt;https://faq.elm-community.org/operators.html&gt;
&amp;gt; Function application (by adjacency) is higher priority than all operators and is left-associative:</text>
  </message>
  <message conversation_id="876">
    <ts>2019-03-21T06:23:50.490800</ts>
    <user>Shirley</user>
    <text>Hello, I'm having a hard time wrapping my head around routing in elm. I think I (roughly) understand the principles of parsing a Route, however, I don't understand how to actually show the desired content, instead of saving the current URL. In the documentation (&lt;https://guide.elm-lang.org/webapps/url_parsing.html&gt;), this exact part is missing (it still has a TODO in the example code block).</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T06:42:32.493800</ts>
    <user>Jin</user>
    <text>The documentation in &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser#application&gt; should help, it also links to the elm-spa-example. The main idea is that you parse a `Url` into some kind of `Route`, and then use this route to update you model. A route often corresponds to a parametrised `Page`.  See the main module in the spa-example, specifically &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L156&gt;.</text>
  </message>
  <message conversation_id="876">
    <ts>2019-03-21T06:43:07.494200</ts>
    <user>Shirley</user>
    <text>Thank you for your reply, I will have a look at the material you provided</text>
  </message>
  <message conversation_id="876">
    <ts>2019-03-21T06:44:58.494900</ts>
    <user>Caron</user>
    <text>Anyone has heard of a lib implementing a datastore in elm ?</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T09:29:01.495700</ts>
    <user>Dede</user>
    <text>Well, there’s this: &lt;https://package.elm-lang.org/packages/billstclair/elm-localstorage/latest/&gt;</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T09:29:40.496200</ts>
    <user>Dede</user>
    <text>But also this page talks about using ports to access localstorage and why one might _not_ want to copy the entire localstorage API: &lt;https://guide.elm-lang.org/interop/ports.html&gt;</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T09:30:01.496600</ts>
    <user>Dede</user>
    <text>(above is for &lt;@Caron&gt;’s question from ~3 hours ago)</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T09:30:50.496800</ts>
    <user>Caron</user>
    <text>Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T09:31:36.496900</ts>
    <user>Dede</user>
    <text>As another example, I’ll point you at &lt;https://github.com/jhbrown94/experimental-elm-spa-skeleton/blob/master/src/Route.elm&gt; and &lt;https://github.com/jhbrown94/experimental-elm-spa-skeleton/blob/master/src/Router.elm&gt;

This approach makes a distinction between Route (the parsed URL) and the Page you end up on (which could vary due to, e.g., authentication.)   It’s a work in progress so I’d caution careful consideration before totally cloning it, but maybe looking at it will help clarify how things work generally…?</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T09:34:59.498800</ts>
    <user>Caron</user>
    <text>I'm not sure that's what I needed, but maybe my initial message was not clear.
What I'm looking for is a lib that wraps a type of data and lets you store that type of data from different origins, in order to avoid data duplication and automate gc for the store.</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T09:35:53.499400</ts>
    <user>Agustin</user>
    <text>What your use case? I mean implementing that is non trivial and the cost of downloading the library would probably outweigh the benefit in most cases…</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T10:01:28.500500</ts>
    <user>Caron</user>
    <text>we load the same data for separate reasons, and need a single storage to make sure that modified data is correctly modified in each use case</text>
  </message>
  <message conversation_id="875">
    <ts>2019-03-21T10:03:54.503000</ts>
    <user>Caron</user>
    <text>for reasons unrelated we don't want data to be pushed from the server, so we can't just make a roundtrip with the backend to update data.</text>
  </message>
  <message conversation_id="877">
    <ts>2019-03-21T10:15:01.507600</ts>
    <user>Shenita</user>
    <text>normalised data &amp;amp; garbage collection is a bit of a pain with the elm architecture (or redux)</text>
  </message>
  <message conversation_id="877">
    <ts>2019-03-21T10:15:22.508100</ts>
    <user>Shenita</user>
    <text>logic for what data is in use is probably highly specific to your app and very brittle</text>
  </message>
  <message conversation_id="877">
    <ts>2019-03-21T10:15:42.508600</ts>
    <user>Shenita</user>
    <text>probs best just denormalising in a sensible way if memory usage is an issue?</text>
  </message>
  <message conversation_id="878">
    <ts>2019-03-21T10:26:44.510300</ts>
    <user>Alicia</user>
    <text>we do something similar with ports, we send updates out to localstorage, store it, and send the new state back into Elm.  Inside elm it is a read-only cache that we can look things up in, to modify it you have to go out a port.  You can also avoid localstorage if you want and just keep an in-memory cache in Elm that you pass around</text>
  </message>
  <message conversation_id="878">
    <ts>2019-03-21T10:27:13.510600</ts>
    <user>Alicia</user>
    <text>we put it in our `Session` model that was passed everywhere</text>
  </message>
  <message conversation_id="879">
    <ts>2019-03-21T10:41:01.514700</ts>
    <user>Caron</user>
    <text>&amp;gt; logic for what data is in use is probably highly specific to your app and very brittle
The general logic is complex, but what it's really is a set of rules and each is simple.
For instance, say we store meetings. Some meetings are not scheduled.
So one rule would be to say that the meetings scheduled this month are in the store, a second rule would be to say that all the unscheduled meetings created recently are in the store, and a third rule would be that the last 3 meetings returned by the search module are in store.
In a read model, you can completely separate these 3 requirements, but as soon as you write, the last search result may be modified from the monthly planning. So we need one store representation.</text>
  </message>
  <message conversation_id="879">
    <ts>2019-03-21T10:43:18.517600</ts>
    <user>Caron</user>
    <text>The idea for such a store would be to say that you have a `Store Meeting` to which you can add rules saying what data is appropriate in the store, and what data is relevant to a given rule (e.g. ask the store all the meetings that are in the month). Also you could modify any data in the store without caring about where it is from...</text>
  </message>
  <message conversation_id="879">
    <ts>2019-03-21T10:44:04.518200</ts>
    <user>Caron</user>
    <text>I had the wild hope that one such lib existed, but I'll code it myself otherwise :slightly_smiling_face:</text>
  </message>
  <message conversation_id="879">
    <ts>2019-03-21T11:02:23.519100</ts>
    <user>Shenita</user>
    <text>ah ok, that sounds like a good approach</text>
  </message>
  <message conversation_id="879">
    <ts>2019-03-21T11:02:58.519700</ts>
    <user>Shenita</user>
    <text>if you were to have highly relational data though I think that's where you would run into trouble</text>
  </message>
  <message conversation_id="880">
    <ts>2019-03-21T11:22:15.524800</ts>
    <user>Elina</user>
    <text>hi all! question for everyone. I watched Evan's "The Life of a File" talk two years ago and certainly agree with his premise of building files around a type, its API, and related helper functions, and not trying to keep files artificially short. however, I work on a large Elm codebase and I'm curious about the practical upper limits of file length. how long is too long, and what do you think is practical? do you think code should only be modularized when reuse is a goal?</text>
  </message>
  <message conversation_id="880">
    <ts>2019-03-21T11:30:31.528200</ts>
    <user>Dayna</user>
    <text>&lt;@Elina&gt; I like small single purpose files, for example for a Page I have a `Model.elm, Update.elm, View.elm, Api.elm` etc, unfortunately Elm doesn't allow circular references, so this style of separating your files in almost impossible and you're forced to group things together.</text>
  </message>
  <message conversation_id="881">
    <ts>2019-03-21T11:31:27.528700</ts>
    <user>Amie</user>
    <text>Hey, all! I've written up a blog post on how I'm handling form fields and abstracting them nicely that I believe could be useful to my fellow newbies. I'd appreciate your expert feedback -- especially on ways to improve what I've got! Thanks very much!

&lt;https://lytedev.io/blog/elm-form-fields-abstractions/&gt;</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:06:52.529100</ts>
    <user>Maida</user>
    <text>too long might have more to do with code complexity than with the actual lines of code.</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:07:11.529300</ts>
    <user>Maida</user>
    <text>some code just takes a lot of vertical space but it is simple code.</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:07:12.529500</ts>
    <user>Elina</user>
    <text>i've run into that too. we approach it by making Api the file that doesn't import from the others</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:08:19.529700</ts>
    <user>Maida</user>
    <text>when implementing an webapp, I like to keep all the code belonging to a page in a single file. The largest I have in my largest app is a little bit over 1k lines.</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:10:48.529900</ts>
    <user>Elina</user>
    <text>totally. we're considering a similar approach on the team i'm on, but some of our page files would be over 6k lines if we did it. so i'm curious what the tradeoffs are, and whether my hesitation to make files that long is actually justified or not</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:11:05.530100</ts>
    <user>Maida</user>
    <text>with this approach in mind I then proceed in extracting code based on domain. I like to keep the Business Objects each in their own module in a `Data` folder. These modules implement a lot of things related to the module’s object like Json Decoding and Encoding, queries and mutations for things that might be too complex.</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:12:11.530300</ts>
    <user>Maida</user>
    <text>then there is a module that captures most of the interaction with the backend, this is where queries are defined. Most functions take a message creator the credentials and produce a Cmd.</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:13:03.530500</ts>
    <user>Maida</user>
    <text>there is also a folder with all sorts of helpers. Things that should be in some `elm-community/*-extra` kind of a package.</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:14:39.530700</ts>
    <user>Maida</user>
    <text>and then there is the `Widgets` folder that holds complex widgets that I feel are complex enough to warrant their own module. For example, an autocomplete  widget or the sidebar (which has some interactivity).</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:15:49.530900</ts>
    <user>Maida</user>
    <text>If a page has a complex enough subpart, I also create a folder with the name of that page and extract the complex part into its own module. e.g. I have `Pages.Foo` and `Pages.Foo.Subfoo`</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:16:24.531100</ts>
    <user>Elina</user>
    <text>&lt;@Maida&gt; it's like you're describing our codebase—so similar it's scary!</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:16:42.531300</ts>
    <user>Maida</user>
    <text>This is similar to how `elm-spa-example` used to be structured</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T12:17:11.531500</ts>
    <user>Maida</user>
    <text>I expect that a lot of codebases somehow end up in this kind of a structure.</text>
  </message>
  <message conversation_id="883">
    <ts>2019-03-21T14:28:21.533100</ts>
    <user>Brooke</user>
    <text>hey all, is anyone else seeing problems with Elm installing packages at the moment?

We're seeing fairly regular instances of:

```
The following HTTP request failed:

        &amp;lt;https://github.com/elm/json/zipball/1.1.3/&amp;gt;

    Here is the error message I was able to extract:

        HttpExceptionRequest Request { host = "&lt;http://codeload.github.com|codeload.github.com&gt;" port = 443 secure = True requestHeaders =[("Cookie","logged_in=no"),("User-Agent","elm/0.19.0"),("Accept-Encoding","gzip")] path = "/elm/json/legacy.zip/1.1.3" queryString = "" method = "GET" proxy =Nothing rawBody = False redirectCount = 10 responseTimeout = ResponseTimeoutDefault requestVersion = HTTP/1.1 } (StatusCodeException (Response {responseStatus = Status {statusCode = 500, statusMessage =
```</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T14:53:40.533200</ts>
    <user>Katharyn</user>
    <text>I haven’t experienced that personally today. I just tried again installing several packages in the elm/ namespace without a problem</text>
  </message>
  <message conversation_id="882">
    <ts>2019-03-21T15:01:17.533400</ts>
    <user>Huong</user>
    <text>That looks like GitHub giving 500 errors - fingers crossed it's temporary service degradation</text>
  </message>
  <message conversation_id="883">
    <ts>2019-03-21T15:03:47.533600</ts>
    <user>Huong</user>
    <text>&lt;@Brooke&gt; if this is a recurring/long-term thing, it's probably a good idea to contact gh support - they might be able to look into it :)</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T15:42:54.534000</ts>
    <user>Floy</user>
    <text>hey, can someone point me to some discourse or anything similar explaining why `elm/http` was changed the way it is. I am kinda puzzled by the fact that previously I had a possibility to simply have a single function making my request and either mapping that to `Cmd` or `Task` if necessary. Now it seems a lot like I have to write two functions not to mention that Task path does not offer json decoding by default from what I can tell.</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T15:45:07.534100</ts>
    <user>Floy</user>
    <text>I am aware there is a package `remotedata-http` that seems to be helping with that</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T15:45:14.534300</ts>
    <user>Floy</user>
    <text>just being curious about the design reasons</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T15:45:19.534500</ts>
    <user>Floy</user>
    <text>previous API seemed flexible and nice</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T15:45:26.534700</ts>
    <user>Floy</user>
    <text>new one...it's not IMHO</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:01:46.535000</ts>
    <user>Huong</user>
    <text>&lt;https://elm-lang.org/blog/working-with-files&gt; Evan wrote a little about it here.

You claim working with `Request` was simple, but there is also the factor of familiarity. Agreed that it's a bunch harder to work with requests as tasks right now. Making requests as a command - which in my experience is the most common use of elm/http, by far - is a lot less circumspect now, though.</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:04:25.535200</ts>
    <user>Floy</user>
    <text>yeah, although I have bunch of places in my app where the same request is used somewhere as command while being used as cmd (often paired with other requests) in view initialization</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:04:41.535400</ts>
    <user>Floy</user>
    <text>i.e. `MyView.init -&amp;gt; Task.Task Err MyView.Model`</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:04:56.535600</ts>
    <user>Floy</user>
    <text>it kinda makes an upgrade super hard :confused:</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:05:17.535800</ts>
    <user>Floy</user>
    <text>to the point where I am thinking if there's any real benefit in doing that :wink:</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:05:25.536100</ts>
    <user>Floy</user>
    <text>is there?</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:07:34.536300</ts>
    <user>Floy</user>
    <text>I am asking for an opinion from people who migrated</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:09:11.536600</ts>
    <user>Huong</user>
    <text>I'm currently in the process of building a single abstraction layer for all http stuff in our app, because I want to upgrade to elm/http@2.0.0. The main reasons I want to be able to do so:
- at some point, elm/http@1.0.0 simply won't be supported anymore, and I don't want to hit that wall
- support for sending multipart messages with files means we can get rid of the hacks we currently have for file-uploads</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:35:17.536900</ts>
    <user>Floy</user>
    <text>yeah, I don't really do uploading, just downloading :confused:</text>
  </message>
  <message conversation_id="884">
    <ts>2019-03-21T16:35:20.537100</ts>
    <user>Floy</user>
    <text>and just in one place</text>
  </message>
  <message conversation_id="885">
    <ts>2019-03-21T17:26:48.539200</ts>
    <user>Isaias</user>
    <text>Is there a fundamental difference between `Task.perform mytask` and `Task.perform (Process.spawn mytask)`?</text>
  </message>
  <message conversation_id="885">
    <ts>2019-03-21T18:18:55.541300</ts>
    <user>Earlean</user>
    <text>&lt;@Isaias&gt; the `Process` module isn't really finished. `spawn` gives you a `Task` that won't produce a result.</text>
  </message>
  <message conversation_id="886">
    <ts>2019-03-21T18:29:28.542200</ts>
    <user>Nana</user>
    <text>&lt;@Earlean&gt; btw, is the intention that processes will eventually run in web workers?</text>
  </message>
  <message conversation_id="886">
    <ts>2019-03-21T18:31:44.543800</ts>
    <user>Earlean</user>
    <text>I think that may have been the plan. There was also talk of a port of Elm to the Erlang BEAM VM</text>
  </message>
  <message conversation_id="886">
    <ts>2019-03-21T18:50:04.544100</ts>
    <user>Lory</user>
    <text>Here's the project page for Elm Beam &lt;https://kofi.sexy/blog/elm-beam.html&gt;</text>
  </message>
  <message conversation_id="885">
    <ts>2019-03-21T19:04:13.544300</ts>
    <user>Isaias</user>
    <text>Interesting</text>
  </message>
  <message conversation_id="887">
    <ts>2019-03-21T19:07:31.545200</ts>
    <user>Lizabeth</user>
    <text>Isn't there also elchemy which indirectly gets Elm code running on the BEAM (via elixir)?

&lt;https://github.com/wende/elchemy&gt;</text>
  </message>
  <message conversation_id="888">
    <ts>2019-03-21T22:47:07.545500</ts>
    <user>Yolando</user>
    <text>Could you paste the code on Github Gist?

Ellie does not work on my (browser) machine.</text>
  </message>
  <message conversation_id="888">
    <ts>2019-03-21T23:49:56.546500</ts>
    <user>Dede</user>
    <text>Ports question:  is there any way to get a return value when calling into JS from Elm?  I’m not seeing one in the Guide, but perhaps I’m overlooking it.</text>
  </message>
  <message conversation_id="889">
    <ts>2019-03-21T23:53:22.547400</ts>
    <user>Dede</user>
    <text>I guess I have to set up a second port to subscribe to from Elm and handle this fully asynchronously, even though the JS subroutine is synchronous.</text>
  </message>
  <message conversation_id="889">
    <ts>2019-03-21T23:56:06.547800</ts>
    <user>Kris</user>
    <text>Yup, that’s right </text>
  </message>
  <message conversation_id="889">
    <ts>2019-03-21T23:56:25.548300</ts>
    <user>Lizabeth</user>
    <text>I've found this to be a wonderful resource (for elm in general), but this particular section goes into your question a fair bit:

&lt;https://elmprogramming.com/receiving-data-from-javascript.html&gt;</text>
  </message>
  <message conversation_id="889">
    <ts>2019-03-21T23:58:04.549300</ts>
    <user>Earlean</user>
    <text>&lt;@Dede&gt; Elm ports are based on the 'actor model' of concurrency. It's fully asynchronous.</text>
  </message>
  <message conversation_id="889">
    <ts>2019-03-22T00:00:36.550000</ts>
    <user>Dede</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="890">
    <ts>2019-03-22T02:00:02.553400</ts>
    <user>Buffy</user>
    <text>Given a model following Feldman's immutable relational data, how then does that affect how people store/interact with their data on the back end?
I know people use various languages and such but I'm wondering about normalized / denormalized, graphdb's, graphql, firebase even?
What have been some successful approaches for people w/ reg. to building API's for consumption by an Elm front end?</text>
  </message>
  <message conversation_id="891">
    <ts>2019-03-22T02:28:04.555100</ts>
    <user>Valeria</user>
    <text>Hi everybody, it's the last day of earlybird. &lt;https://elmeurope.org&gt;, because tomorrow we release the speakers ! And if you like good content you'll be happy :)</text>
  </message>
  <message conversation_id="892">
    <ts>2019-03-22T03:54:38.555500</ts>
    <user>Exie</user>
    <text>What would be the right way to handle links like `a [] [ href "&lt;mailto:some@email.com&gt;"]` in `Browser.application`? I'm getting clicks on these links as `Browser.External "mailto..."` messages. But I don't want to do `Browser.Navigation.load` which leaves the page. But I still want it to open email client. Not sure how to achieve that.. Anyone else encountered this?</text>
  </message>
  <message conversation_id="893">
    <ts>2019-03-22T04:16:18.556100</ts>
    <user>Lynne</user>
    <text>May providing `target "_blank"` solve the issue for you?</text>
  </message>
  <message conversation_id="892">
    <ts>2019-03-22T04:52:25.556600</ts>
    <user>Exie</user>
    <text>Yes, that works for me. Thanks for the tip</text>
  </message>
  <message conversation_id="894">
    <ts>2019-03-22T05:05:09.560100</ts>
    <user>Arie</user>
    <text>I plan to implement pagination. I'm looking at the jschomay elm-paginate 3.1.1 package. I my case, I fetch data from a rest API with support for pagination (Spring).  Is it beneficial to use the elm-paginate package? It seems I must provide a full list of data to it, instead of fetching page by page from the REST API...</text>
  </message>
  <message conversation_id="895">
    <ts>2019-03-22T06:51:42.560400</ts>
    <user>Chi</user>
    <text>elm-formate --version
throw er; // Unhandled 'error' event
      ^

Error: spawn /Users/Documents/workspace/node_modules/elm-format/unpacked_bin/elm-format ENOENT</text>
  </message>
  <message conversation_id="895">
    <ts>2019-03-22T06:52:01.560800</ts>
    <user>Chi</user>
    <text>any fix for this issue</text>
  </message>
  <message conversation_id="895">
    <ts>2019-03-22T06:53:26.561200</ts>
    <user>Shenita</user>
    <text>maybe try deleting node_modules and re-installing?</text>
  </message>
  <message conversation_id="895">
    <ts>2019-03-22T06:56:21.562400</ts>
    <user>Liza</user>
    <text>Just stupid question is it possible in elm create int / float that is just infinity ?</text>
  </message>
  <message conversation_id="895">
    <ts>2019-03-22T07:04:53.562900</ts>
    <user>Sharon</user>
    <text>`String.toFloat "Infinity"` &lt;https://ellie-app.com/53Vfxqf6nFCa1&gt;</text>
  </message>
  <message conversation_id="895">
    <ts>2019-03-22T07:09:31.563200</ts>
    <user>Timika</user>
    <text>`1 / 0` is another way.</text>
  </message>
  <message conversation_id="895">
    <ts>2019-03-22T07:16:44.564100</ts>
    <user>Liza</user>
    <text>So there is isInfinity but no const for it ? </text>
  </message>
  <message conversation_id="895">
    <ts>2019-03-22T07:17:13.565100</ts>
    <user>Timika</user>
    <text>Yeah, no constant yet.</text>
  </message>
  <message conversation_id="895">
    <ts>2019-03-22T07:17:19.565400</ts>
    <user>Liza</user>
    <text>1/0 - that is what I’m thinking how to create that..</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T07:53:25.567800</ts>
    <user>Bert</user>
    <text>Interesting, the `1 // 0` resulting in an `Infinity` with a type of `Int` has been fixed in Elm 0.19:
```
&amp;gt; 1 // 0
0 : Int
```</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T07:58:58.567900</ts>
    <user>Nana</user>
    <text>is 0 really better than including Infinity as an Int though? :thinking_face:

with Infinity `1 // 0 &amp;gt; 1 // 1` would be True, which seems like a good thing</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T08:00:20.568100</ts>
    <user>Nana</user>
    <text>but I guess not having Infinity makes interop with other languages more consistent</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T09:38:26.568500</ts>
    <user>Huong</user>
    <text>The reason it was removed for `//` is that `Infinity` has type `Float`</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T09:40:08.568700</ts>
    <user>Huong</user>
    <text>so it shouldn't be result of integer division</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T09:41:38.568900</ts>
    <user>Nana</user>
    <text>&lt;@Huong&gt; wouldn't it be up to Elm to decide though? JS just has `Number` after all</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T09:42:39.569100</ts>
    <user>Huong</user>
    <text>Sure, but that decision also means opening another can of worms :shrug:</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T09:46:45.569400</ts>
    <user>Nana</user>
    <text>&lt;@Huong&gt; actually Ints can still be Infinity :open_mouth:
&lt;https://ellie-app.com/53XHgmkRzDva1&gt;</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T09:47:05.569600</ts>
    <user>Huong</user>
    <text>Yeah, there;'s still a bunch of bugs related to that :disappointed:</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T09:47:53.569800</ts>
    <user>Nana</user>
    <text>maybe `round (1/0)` should return `Number.MAX_SAFE_INTEGER`</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T09:48:47.570000</ts>
    <user>Nana</user>
    <text>I guess that could also be an option for `1 // 0`, or maybe that'd be weird :thinking_face:</text>
  </message>
  <message conversation_id="896">
    <ts>2019-03-22T10:23:24.570500</ts>
    <user>Kymberly</user>
    <text>There's no good value for `x/0` - sometimes it's `Infinity`, but other times it's 0 or a real number (calculating the derivative of a function is an example of a "zero denominator", but a sensible number comes out).  Having a "safe division" function that returns `Indeterminate | Real num` is one solution, but there's not really a reason to prefer `1//0 -&amp;gt; Infinity` over `1//0 -&amp;gt; 0` if you want a pragmatic division operator.</text>
  </message>
  <message conversation_id="897">
    <ts>2019-03-22T10:27:53.570700</ts>
    <user>Amie</user>
    <text>Absolutely! &lt;@Yolando&gt;: &lt;https://gist.github.com/lytedev/d1f22b44875f97f8f7f3100d97cdde9e&gt;</text>
  </message>
  <message conversation_id="897">
    <ts>2019-03-22T10:36:20.571000</ts>
    <user>Hoa</user>
    <text>This passed on Slack not too long ago: &lt;https://www.hillelwayne.com/post/divide-by-zero/&gt;</text>
  </message>
  <message conversation_id="897">
    <ts>2019-03-22T10:36:59.571400</ts>
    <user>Hoa</user>
    <text>I cannot understand it all, but it gives some context.</text>
  </message>
  <message conversation_id="898">
    <ts>2019-03-22T12:16:51.572600</ts>
    <user>Kymberly</user>
    <text>I'm happy using elm/html but boy was it hard to hand over to a designer yesterday.  What're people's thoughts on elmx (or other options)?</text>
  </message>
  <message conversation_id="898">
    <ts>2019-03-22T12:20:45.572700</ts>
    <user>Shelli</user>
    <text>what do you mean, what sort of handover are you talking about</text>
  </message>
  <message conversation_id="898">
    <ts>2019-03-22T12:34:52.572900</ts>
    <user>Kymberly</user>
    <text>I've got the "beta" version of a dashboard written in Elm, now it's time to make it look decent.  Our designer was not excited about (aka "willing to") write Elm code to add css classes and such.</text>
  </message>
  <message conversation_id="898">
    <ts>2019-03-22T12:35:33.573100</ts>
    <user>Kymberly</user>
    <text>He wants an html file / templating language that looks like html. :confused:</text>
  </message>
  <message conversation_id="898">
    <ts>2019-03-22T12:36:22.573300</ts>
    <user>Augustus</user>
    <text>We use zeplin, the designers publish designs from sketch into it, and we use that to build the elm</text>
  </message>
  <message conversation_id="898">
    <ts>2019-03-22T12:42:15.574000</ts>
    <user>Danika</user>
    <text>There are extensions for vscode that convert html into elm “in place” </text>
  </message>
  <message conversation_id="899">
    <ts>2019-03-22T12:42:41.574900</ts>
    <user>Danika</user>
    <text>Rather than elmx which is old and unmaintained afaik</text>
  </message>
  <message conversation_id="898">
    <ts>2019-03-22T12:42:42.575100</ts>
    <user>Nana</user>
    <text>I think elmx is a pretty bad idea, it's an extra build step that can go wrong, you lose things like IDE support, and very few people seem to use it</text>
  </message>
  <message conversation_id="898">
    <ts>2019-03-22T12:44:33.575400</ts>
    <user>Nana</user>
    <text>start with a html-&amp;gt;elm tool, and maybe soon your designer will realize that the mapping between html and elm-html is actually pretty simple</text>
  </message>
  <message conversation_id="900">
    <ts>2019-03-22T13:39:54.575600</ts>
    <user>Yolando</user>
    <text>Danke!</text>
  </message>
  <message conversation_id="901">
    <ts>2019-03-22T14:31:00.577900</ts>
    <user>Vallie</user>
    <text>Is there any documentation on what goes in the elm.json file? For instance, what is the difference between the direct and indirect dependencies and the differences between the contents for the application and package types.</text>
  </message>
  <message conversation_id="901">
    <ts>2019-03-22T14:33:45.578000</ts>
    <user>Lynne</user>
    <text>&lt;https://github.com/elm/compiler/blob/0.19.0/docs/elm.json/application.md&gt;</text>
  </message>
  <message conversation_id="901">
    <ts>2019-03-22T14:33:55.578200</ts>
    <user>Lynne</user>
    <text>&lt;https://github.com/elm/compiler/blob/0.19.0/docs/elm.json/package.md&gt;</text>
  </message>
  <message conversation_id="901">
    <ts>2019-03-22T14:34:07.578400</ts>
    <user>Lynne</user>
    <text>Shortly, direct dependencies are ones installed by you</text>
  </message>
  <message conversation_id="901">
    <ts>2019-03-22T14:34:28.578600</ts>
    <user>Lynne</user>
    <text>Indirect dependencies are ones required by the direct dependencies</text>
  </message>
  <message conversation_id="901">
    <ts>2019-03-22T14:34:42.578800</ts>
    <user>Lynne</user>
    <text>`elm install` handles them on its own</text>
  </message>
  <message conversation_id="901">
    <ts>2019-03-22T14:35:39.579000</ts>
    <user>Vallie</user>
    <text>OK. Thanks for that.</text>
  </message>
  <message conversation_id="902">
    <ts>2019-03-22T14:58:31.579300</ts>
    <user>Dede</user>
    <text>I’m accustomed to the flow going the other way — designer hands over images developed in designer toolchain (e.g. photoshop, etc.), developer implements the images using the dev toolchain.</text>
  </message>
  <message conversation_id="902">
    <ts>2019-03-22T14:59:15.579600</ts>
    <user>Dede</user>
    <text>Is that an option in your circumstances?</text>
  </message>
  <message conversation_id="902">
    <ts>2019-03-22T14:59:46.579800</ts>
    <user>Alicia</user>
    <text>I think they are separate disciplines and the designer should not be responsible for implementing their designs in code.

I could see converting HTML to Elm for a static page, but adding animations and interactivity will blur the line between design and development, how would a designer add something like a fade-out effect when a panel closes? It would likely require some changes in Elm state to keep the component around in the DOM until the animation finishes</text>
  </message>
  <message conversation_id="902">
    <ts>2019-03-22T15:00:36.580000</ts>
    <user>Alicia</user>
    <text>if you haven’t seen it check out &lt;https://zeplin.io/&gt; &lt;@Dede&gt;, it is like the old photoshop mocks on steroids, you can measure things, see colors, generated CSS, and a lot more</text>
  </message>
  <message conversation_id="902">
    <ts>2019-03-22T15:01:32.580300</ts>
    <user>Dede</user>
    <text>I hadn’t seen that one, although there’s plenty of others I have seen — Photoshop was just a handy go-to :wink:</text>
  </message>
  <message conversation_id="902">
    <ts>2019-03-22T15:01:38.580500</ts>
    <user>Alicia</user>
    <text>ah true :slightly_smiling_face:</text>
  </message>
  <message conversation_id="903">
    <ts>2019-03-22T15:39:56.580700</ts>
    <user>Huong</user>
    <text>&amp;gt; blur the line between design and development
Is that a bad thing?</text>
  </message>
  <message conversation_id="903">
    <ts>2019-03-22T15:52:10.580900</ts>
    <user>Alicia</user>
    <text>depends on your situation, on a smaller team I don’t think it is so bad</text>
  </message>
  <message conversation_id="903">
    <ts>2019-03-22T15:53:45.581100</ts>
    <user>Alicia</user>
    <text>in a larger organization I would consider it a sign of poor organization, presumably your developers are better at development than the designers, and the designers are better at designing things than the developers.  Having them trade jobs would be inefficient for both</text>
  </message>
  <message conversation_id="904">
    <ts>2019-03-22T15:59:54.582300</ts>
    <user>Rosann</user>
    <text>Have someone tried 2 or 3 different datetime pickers who can recommend me one good datetime picker?</text>
  </message>
  <message conversation_id="904">
    <ts>2019-03-22T16:06:04.582400</ts>
    <user>Dede</user>
    <text>At almost any size, the tools designers want to use to iterate fast during their design process differ significantly than the tools developers want to use to implement.</text>
  </message>
  <message conversation_id="903">
    <ts>2019-03-22T16:25:08.582600</ts>
    <user>Huong</user>
    <text>Sure. I just don't see why it would be a problem or inherently inefficient for someone to be able to do both. I wish I had enough time to teach my UI/UX coworkers Elm and help them explore how their designs translate to reality.</text>
  </message>
  <message conversation_id="905">
    <ts>2019-03-22T16:50:44.582800</ts>
    <user>Earlean</user>
    <text>Designers are smart people, the syntax of Elm in your `view` is quick to learn but nobody will be happy if you just turn up one day with a pile of code in a syntax they've never seen and expect them to do the hard work of learning in a hurry.  You should have got buy in for the designer earlier on before going down the Elm path. Allocated them specific learning time and addressed and acknowledged their tooling needs.</text>
  </message>
  <message conversation_id="906">
    <ts>2019-03-22T17:04:19.583000</ts>
    <user>Shelli</user>
    <text>^WHAT SHE SAYS! Love your designers!</text>
  </message>
  <message conversation_id="907">
    <ts>2019-03-23T07:03:39.587700</ts>
    <user>Janna</user>
    <text>Trying to setup Atom for Elm for a friend, but it keeps complaining that elm-format doesn't know which version of Elm we're using. Any idea how to fix this? Thanks :heart:</text>
  </message>
  <message conversation_id="906">
    <ts>2019-03-23T07:19:49.588100</ts>
    <user>Lynne</user>
    <text>Is `elm` command on PATH?</text>
  </message>
  <message conversation_id="906">
    <ts>2019-03-23T07:20:36.588500</ts>
    <user>Lynne</user>
    <text>Also, is working directory pointing to where `elm.json` is?</text>
  </message>
  <message conversation_id="908">
    <ts>2019-03-23T07:49:54.588700</ts>
    <user>Maida</user>
    <text>You could take the output of your elm program and save that as HTML, then give that to your designer.

You could then diff what you gave them against what they give you back and make the appropriate changes in Elm.</text>
  </message>
  <message conversation_id="906">
    <ts>2019-03-23T07:56:36.589300</ts>
    <user>Janna</user>
    <text>&lt;@Lynne&gt; `elm` works in cmd and git bash, so yes. I'm not sure about working directory, but I'll check it out. Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:00:45.590100</ts>
    <user>Corine</user>
    <text>Hey! was wondering if it is possible to implement this in elm?</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:00:46.590300</ts>
    <user>Corine</user>
    <text>&lt;http://www.haskellforall.com/2012/05/scrap-your-type-classes.html&gt;</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:01:24.591100</ts>
    <user>Corine</user>
    <text>tried to do it... ended up a mess...</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:02:00.591900</ts>
    <user>Virgie</user>
    <text>it also doesn't work for stuff like `Functor`, because in elm all type variables are of kind `*`/`Type` (currently)</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:02:30.592500</ts>
    <user>Corine</user>
    <text>so * -&amp;gt; * is not possible?</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:02:41.592700</ts>
    <user>Virgie</user>
    <text>right</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:02:57.593400</ts>
    <user>Corine</user>
    <text>going to past my code snippet, its a disaster...</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:03:00.593500</ts>
    <user>Virgie</user>
    <text>limits it to `Monoid` and `Semigroup` really</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:03:22.593700</ts>
    <user>Corine</user>
    <text>i see</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:03:58.593800</ts>
    <user>Corine</user>
    <text>None</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:04:08.594200</ts>
    <user>Corine</user>
    <text>tried to force it</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:04:46.594700</ts>
    <user>Virgie</user>
    <text>well trying to make anything do something it wasn't designed for is going to be ugly</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:08:57.596100</ts>
    <user>Corine</user>
    <text>this means recursive data types are also not possible?</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:09:04.596300</ts>
    <user>Corine</user>
    <text>Custom List?</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:09:45.596900</ts>
    <user>Virgie</user>
    <text>no, `type L a = N | S a (L a)` is possible, because `L a` is of kind `*`</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:10:49.597400</ts>
    <user>Corine</user>
    <text>ah cool, right...</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:13:25.597700</ts>
    <user>Corine</user>
    <text>thanks for the help :smile: !</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:13:50.597900</ts>
    <user>Corine</user>
    <text>wait NO!</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:14:13.598500</ts>
    <user>Corine</user>
    <text>been looking into the haskell Miso framework, inspired by Elm architecture</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:14:18.598800</ts>
    <user>Corine</user>
    <text>any experience with it?</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:15:01.599700</ts>
    <user>Virgie</user>
    <text>not really, big problem with it is that the haskell runtime (in full) has to be compiled and distributed with it</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:15:19.600100</ts>
    <user>Virgie</user>
    <text>which is overkill for the vast majority of apps</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:16:15.600900</ts>
    <user>Corine</user>
    <text>makes sense, is it only a viable option for small - mid apps?</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:16:32.601200</ts>
    <user>Corine</user>
    <text>or not at all?</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:17:41.601900</ts>
    <user>Janna</user>
    <text>&lt;@Lynne&gt; Doesn't seem to work. I created the project with `create-elm-app` and opened it in Atom, so I assume the working directory is the elm.json directory? Can I set it manually somehow?</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:19:15.602600</ts>
    <user>Virgie</user>
    <text>I'd recommend Purescript if you want the haskell type/typeclass features in the browser</text>
  </message>
  <message conversation_id="909">
    <ts>2019-03-23T08:20:04.602900</ts>
    <user>Corine</user>
    <text>i see, ok thanks for the inights!</text>
  </message>
  <message conversation_id="910">
    <ts>2019-03-23T11:14:04.603900</ts>
    <user>Kris</user>
    <text>Agree about purescript, ghcjs is an ugly monster sadly </text>
  </message>
  <message conversation_id="911">
    <ts>2019-03-23T17:58:34.605500</ts>
    <user>Niesha</user>
    <text>&lt;https://reasonablypolymorphic.com/blog/elm-is-wrong&gt;</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T06:43:27.606800</ts>
    <user>Moriah</user>
    <text>I think I’m losing my mind. Would someone want to explain to me why the following Ellie will not compile?

If I’m using an extensible record, and I have a function that takes `Extensible a`, surely an `Extensible Something` would work, no?

&lt;https://ellie-app.com/54NfSGxYCWpa1&gt;</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T06:48:09.607800</ts>
    <user>Huong</user>
    <text>&lt;@Moriah&gt; what if I pass it a function `Extensible { foo : Int } -&amp;gt; Extensible { foo : Int }` that updates the `foo` field?</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T06:49:23.609000</ts>
    <user>Huong</user>
    <text>Which is entirely valid according to your type signature, but of course wouldn't work since your records don't have a `foo : Int` field</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T06:53:26.610700</ts>
    <user>Huong</user>
    <text>My recommendation would be not to use extensible records for this, and group the common things in a regular record</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T06:55:10.611900</ts>
    <user>Moriah</user>
    <text>Yes, that’s true. So is it even possible to create a function that takes a function that only operates on the `Extensible` part of `Extensible a`?</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T06:55:51.612900</ts>
    <user>Moriah</user>
    <text>I will follow that recommendation, I’m just trying to understand where my thinking went wrong.</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T06:57:53.614500</ts>
    <user>Huong</user>
    <text>Not in Elm, but it _can_ be done in languages where you can be more specific with regards to quantification, e.g. purescript</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T06:59:22.615300</ts>
    <user>Moriah</user>
    <text>Ok. Thank you &lt;@Huong&gt;, you saved me a lot of time.</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T07:03:33.615400</ts>
    <user>Huong</user>
    <text>so what you're trying to is something like this:

You have a function like so:
```
updateCount : Extensible a -&amp;gt; Extensible a
updateCount r = { r | count = r.count + 1 }
```

With explicit quantification, that could be written as
```
updateCount : ∀ a. Extensible a -&amp;gt; Extensible a
updateCount r = { r | count = r.count + 1 }
``` meaning that which function works regardless of what `a` is: it is valid for all values of `a`

What you're trying to write now is a way of embedding that signature in another signature, which means it _should_ look like this:
`(∀ a. Extensible a -&amp;gt; Extensible a) -&amp;gt; State -&amp;gt; State`

But Elm doesn't let you do that, and instead you end up with `∀ a. (Extensible a -&amp;gt; Extensible a) -&amp;gt; State -&amp;gt; State` which doesn't mean the same thing :slightly_smiling_face:</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T07:09:48.615700</ts>
    <user>Moriah</user>
    <text>Is `∀` like `forall` in Haskell?</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T07:11:49.615900</ts>
    <user>Huong</user>
    <text>yes, it's exactly that</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T07:12:29.616100</ts>
    <user>Huong</user>
    <text>&lt;https://gist.github.com/zwilias/f9f5f8fa7c6b2dbcadcc537c982035cd&gt; so this would be a valid purescript implementation of your idea :slightly_smiling_face:</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T07:15:13.616300</ts>
    <user>Huong</user>
    <text>&lt;http://try.purescript.org/?gist=f9f5f8fa7c6b2dbcadcc537c982035cd&gt;</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T07:16:01.616500</ts>
    <user>Huong</user>
    <text>(you can see what happens when you move the `forall a.` out to where it would end up in Elm)</text>
  </message>
  <message conversation_id="913">
    <ts>2019-03-24T09:07:33.618000</ts>
    <user>Vallie</user>
    <text>With a Keyed.node are the children's ids only stored in the virtual Dom and not actually present in the actual Dom?</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T09:12:16.618800</ts>
    <user>Huong</user>
    <text>Yeah, they're not `id` attributes, they're just internal identifiers used by the virtual-dom</text>
  </message>
  <message conversation_id="913">
    <ts>2019-03-24T09:25:46.623800</ts>
    <user>Vallie</user>
    <text>Ok, then can you have a look at the issue raised on billstclair/elm-sortable-table (the elm 0.19 version of Evan's) which has a problem with the sorting. It appears to be flipping out the virtual Dom patching code and seems to be thoroughly reproducible. It is very worrying to my mind. Sorting by the Name column works fine. Then sorting by Price is OK too. But then trying to sort by Rating causes errors and bad output. Alternatively sorting by Name, then Rating, then Price gives NO ERRORS, but displays one row TWICE. I think this needs to raised as an Elm compiler issue, as there does not appear to be any problem with the code in elm-sortable-table (and indeed there shouldn't be a way to write Elm code that causes this problem). I just don't know where else to raise this.</text>
  </message>
  <message conversation_id="913">
    <ts>2019-03-24T09:45:44.624700</ts>
    <user>Earlean</user>
    <text>&lt;@Vallie&gt; what are you using for the node key?</text>
  </message>
  <message conversation_id="913">
    <ts>2019-03-24T10:01:14.627100</ts>
    <user>Vallie</user>
    <text>.name</text>
  </message>
  <message conversation_id="913">
    <ts>2019-03-24T10:02:51.628100</ts>
    <user>Vallie</user>
    <text>It only appears to be a problem when sorting by a column of floats, followed by a different column of floats.</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T10:20:58.628500</ts>
    <user>Huong</user>
    <text>Oh</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T10:21:23.629200</ts>
    <user>Huong</user>
    <text>The example uses an outdated version of `elm/html`/`elm/virtual-dom`</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T10:23:02.630500</ts>
    <user>Huong</user>
    <text>Bumping the (indirect) dependency on `elm/virtual-dom` to 1.0.2 fixes the example.</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T10:24:41.630900</ts>
    <user>Huong</user>
    <text>&lt;@Vallie&gt; ^ (just making sure you see this :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="912">
    <ts>2019-03-24T13:13:03.633200</ts>
    <user>Vallie</user>
    <text>Well, I never would have thought of that. Thanks for restoring my belief in Elm's infallibility :grinning: I'll update the issue if you haven't already.</text>
  </message>
  <message conversation_id="914">
    <ts>2019-03-24T13:34:51.633700</ts>
    <user>Leopoldo</user>
    <text>hello, i can't locate the package but how do i make a sticky header on scroll?</text>
  </message>
  <message conversation_id="915">
    <ts>2019-03-24T14:45:41.634100</ts>
    <user>Dede</user>
    <text>If you’re working with HTML, just use CSS:  &lt;https://developer.mozilla.org/en-US/docs/Web/CSS/position&gt;</text>
  </message>
  <message conversation_id="914">
    <ts>2019-03-24T14:55:44.636000</ts>
    <user>Leopoldo</user>
    <text>&lt;@Dede&gt; that's static positionning i believe but i have 2 type of menus set. one static one which is embeded in the Hero Div layout, then another sticky ones which should appear when scrolled down</text>
  </message>
  <message conversation_id="914">
    <ts>2019-03-24T14:56:13.636500</ts>
    <user>Leopoldo</user>
    <text>so i need to track the scrolling as i scroll the page down, the sticky one should appear</text>
  </message>
  <message conversation_id="915">
    <ts>2019-03-24T15:05:18.637200</ts>
    <user>Dede</user>
    <text>Look at `position: sticky` and see if it does the job.  </text>
  </message>
  <message conversation_id="914">
    <ts>2019-03-24T15:10:49.637500</ts>
    <user>Leopoldo</user>
    <text>how do i run the test conditions?</text>
  </message>
  <message conversation_id="914">
    <ts>2019-03-24T15:16:00.638000</ts>
    <user>Dede</user>
    <text>I don’t understand the question sorry...</text>
  </message>
  <message conversation_id="914">
    <ts>2019-03-24T15:16:17.638600</ts>
    <user>Dede</user>
    <text>Check out the examples on the link I sent?</text>
  </message>
  <message conversation_id="914">
    <ts>2019-03-24T16:08:24.641900</ts>
    <user>Leopoldo</user>
    <text> &lt;@Dede&gt;  Let's say. `position : static` _on_scroll_ `position : sticky` </text>
  </message>
  <message conversation_id="916">
    <ts>2019-03-24T16:10:17.642200</ts>
    <user>Marlys</user>
    <text>is Basics.Array faster than Basics.List?</text>
  </message>
  <message conversation_id="914">
    <ts>2019-03-24T16:16:14.642500</ts>
    <user>Dede</user>
    <text>Why not just set `position:sticky`?  I don’t understand.</text>
  </message>
  <message conversation_id="914">
    <ts>2019-03-24T16:17:03.642900</ts>
    <user>Dede</user>
    <text>Like, it’s static until you hit the top and then it’s absolute.  That’s kind of perfect usually.  &lt;https://developer.mozilla.org/en-US/docs/Web/CSS/position#Sticky_positioning&gt;</text>
  </message>
  <message conversation_id="917">
    <ts>2019-03-24T16:49:34.643100</ts>
    <user>Huong</user>
    <text>Depends on what you're using it for. If one was better for everything, we'd only have the one :)</text>
  </message>
  <message conversation_id="917">
    <ts>2019-03-24T16:51:04.643300</ts>
    <user>Huong</user>
    <text>Ah, I see you already got replies in &lt;#C192T0Q1E|beginners&gt;. Try not to cross post, tho.</text>
  </message>
  <message conversation_id="917">
    <ts>2019-03-24T16:53:31.643900</ts>
    <user>Leopoldo</user>
    <text>Ok let me play with it</text>
  </message>
  <message conversation_id="918">
    <ts>2019-03-24T18:48:25.644400</ts>
    <user>Danika</user>
    <text>So signals were dropped from the core a while ago now</text>
  </message>
  <message conversation_id="918">
    <ts>2019-03-24T18:48:35.644700</ts>
    <user>Danika</user>
    <text>Any third-party libraries for FRP in elm?</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:34:27.645300</ts>
    <user>Euna</user>
    <text>anyone got any advice on handling credentials?</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:37:11.645600</ts>
    <user>Earlean</user>
    <text>&lt;@Euna&gt; credentials for what?</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:43:08.646100</ts>
    <user>Euna</user>
    <text>refresh + short lived accesstoken</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:43:45.647100</ts>
    <user>Euna</user>
    <text>I'm not sure if I should have main handle it, and pass them in as a session into the view</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:43:58.647500</ts>
    <user>Euna</user>
    <text>or have the pages handle it</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:44:08.647800</ts>
    <user>Euna</user>
    <text>or whatever sub component</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:45:27.649500</ts>
    <user>Earlean</user>
    <text>My advice is to use cookies if you can. But if you can't having the current page store the access token is a good model</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:49:00.650300</ts>
    <user>Euna</user>
    <text>nah I'm running full oidc, so cookies are out of the question</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:49:48.650900</ts>
    <user>Euna</user>
    <text>its just that when the pages own the session data its kinda ugly how to remake the pages on urlChange</text>
  </message>
  <message conversation_id="919">
    <ts>2019-03-25T02:50:14.651100</ts>
    <user>Euna</user>
    <text>and I don't really want to go the nuclear option yet like rtfeldman's spa app</text>
  </message>
  <message conversation_id="920">
    <ts>2019-03-25T03:11:25.652100</ts>
    <user>Kimbery</user>
    <text>Is there any way to receive http streams in Elm? (chunked response/http2) Obviously ports is an option but is there an Elm api that would do the job?</text>
  </message>
  <message conversation_id="920">
    <ts>2019-03-25T03:37:30.653700</ts>
    <user>Earlean</user>
    <text>&lt;@Kimbery&gt; the http packages doesn't provide a streaming interface. You'll need to use a port</text>
  </message>
  <message conversation_id="921">
    <ts>2019-03-25T03:37:47.654100</ts>
    <user>Leopoldo</user>
    <text>hi, this is what i was referring to yesterday, how do i convert this to elm?
```    //Sticky scroll navbar
    if ($('.navbar-wrapper.navbar-fade').length) {
        $(".navbar-wrapper.navbar-fade").wrap('&amp;lt;div class="navbar-placeholder"&amp;gt;&amp;lt;/div&amp;gt;');
        $(".navbar-placeholder").height(jQuery(".navbar-wrapper.navbar-fade").outerHeight());
        $(window).on('scroll', function() {    // this will work when your window scrolled.
            var height = $(window).scrollTop();  //getting the scrolling height of window
            if(height  &amp;gt; 65) {
                $(".navbar-wrapper.navbar-fade").removeClass('navbar-fade').addClass('translateDown navbar-sticky');
            } else{
                $(".navbar-wrapper.navbar-sticky").removeClass('translateDown navbar-sticky').addClass('navbar-fade');
            }
        });
    } ```</text>
  </message>
  <message conversation_id="921">
    <ts>2019-03-25T04:23:04.654800</ts>
    <user>Leopoldo</user>
    <text>any insight  ?</text>
  </message>
  <message conversation_id="921">
    <ts>2019-03-25T04:26:57.655600</ts>
    <user>Euna</user>
    <text>use a preprocessor, what you are describing in this can be done in stylus or sass</text>
  </message>
  <message conversation_id="921">
    <ts>2019-03-25T04:29:24.655800</ts>
    <user>Leopoldo</user>
    <text>how?</text>
  </message>
  <message conversation_id="921">
    <ts>2019-03-25T04:32:24.656700</ts>
    <user>Leopoldo</user>
    <text>the sass version i saw was a lone sticky menu, but here, the menu had to change style on-scroll</text>
  </message>
  <message conversation_id="921">
    <ts>2019-03-25T04:42:44.657000</ts>
    <user>Lynne</user>
    <text>That's your job to find a solution. Read documentation, examine StackOverflow or other parts of the Internet for similar cases, think, try, fail, repeat.</text>
  </message>
  <message conversation_id="921">
    <ts>2019-03-25T04:43:43.657200</ts>
    <user>Lynne</user>
    <text>You'll most likely get an answer if you show what you have done and what did not work, why do you think it did not work and what you think you are missing.</text>
  </message>
  <message conversation_id="921">
    <ts>2019-03-25T04:44:51.657400</ts>
    <user>Lynne</user>
    <text>Just asking "how?" implies you just want a solution. That's not what community is for.</text>
  </message>
  <message conversation_id="921">
    <ts>2019-03-25T05:09:15.658200</ts>
    <user>Hoa</user>
    <text>&lt;@Leopoldo&gt; Do you have an online demo to show similar to the behaviour you are after ?</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:22:05.658400</ts>
    <user>Hoa</user>
    <text>I guess we are after something like this: &lt;https://css-tricks.com/scroll-fix-content/&gt; - in you case there are some fading but it’s a fx applied via css. So I guess one would use viewport to figure out where the scroll pos  actually is. &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom#getViewport&gt;</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:29:10.659000</ts>
    <user>Leopoldo</user>
    <text>&lt;@Hoa&gt; here is an example &lt;https://bulkitv2.cssninja.io/landing-kits/kit-1/index.html&gt;</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:37:19.659300</ts>
    <user>Dorsey</user>
    <text>I'm trying to extract coverage information from `elm-coverage` for further processing. I see that `--report json` gives me nice information about complexity, but I can't find what was actually covered by tests. The data is there in the HTML output (the red vs green code), but it's hard to extract. Am I missing something? &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:39:43.662500</ts>
    <user>Huong</user>
    <text>Yeah, the coverage information isn't super straightforward for humans to read. Using the codecov reporter, you can get a json file that should conform to this schema: &lt;https://github.com/zwilias/elm-coverage/blob/master/docs/elm-coverage.json&gt;</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:39:57.662800</ts>
    <user>Robyn</user>
    <text>The use case is: have a flag that is similar to `--cov-fail-under` in pytest, which makes the elm-coverage exit with non-zero status. This is great for using CI to making sure people are not pushing commits that decrease the coverage.</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:40:45.664000</ts>
    <user>Robyn</user>
    <text>And hence get slow incremental increase in test coverage</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:40:50.664200</ts>
    <user>Maida</user>
    <text>&lt;@Leopoldo&gt; I think you can implement that by simply setting a class based on viewport data. Here is an example on how to do this: &lt;https://ellie-app.com/55dpwC5Xxcva1&gt;</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:41:04.664300</ts>
    <user>Huong</user>
    <text>&amp;gt; The goal of the reports generated by elm-coverage is to help you visualize what parts of your code are being evaluated when running your tests, and to try and guide you towards writing tests that focus specifically on the more complex functions in your codebase.
&amp;gt;
&amp;gt;The goal is not to condense that information down into a single metric. It is too easy to write tests that don't make meaningful assertions about your code and its behaviour, but only serve to increase the coverage.
&amp;gt;
&amp;gt;The only thing worse than having no tests is having tests that provide a false sense of security.</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:41:09.664500</ts>
    <user>Huong</user>
    <text>I feel very strongly about that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:42:17.664700</ts>
    <user>Robyn</user>
    <text>It is very reasonable</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:43:09.665100</ts>
    <user>Robyn</user>
    <text>do you have a recommendation on an alternative way to have a computer do a basic “this PR has enough tests” check and inform the author, before I start the manual code review?</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:46:46.665600</ts>
    <user>Huong</user>
    <text>If you're using GitHub, the codecov integration can help with that a little - &lt;https://github.com/zwilias/json-decode-exploration/pull/5&gt;

Though in a general sense, I suspect that some human judgement is required still. :thinking_face:</text>
  </message>
  <message conversation_id="922">
    <ts>2019-03-25T05:48:02.665800</ts>
    <user>Robyn</user>
    <text>oh cool, thanks!</text>
  </message>
  <message conversation_id="923">
    <ts>2019-03-25T06:52:46.666100</ts>
    <user>Lynn</user>
    <text>Is there a way around this npm audit error? I’m building for 0.18 so the recommendation is not a solution</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T07:16:10.667100</ts>
    <user>Valeria</user>
    <text>I have a BIG problem : &lt;https://discourse.elm-lang.org/t/server-side-problem/3389&gt; and would love to have feedback</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T07:19:53.667500</ts>
    <user>Agustin</user>
    <text>I would not attempt to use elm on the server side thats for sure.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T07:20:24.668100</ts>
    <user>Agustin</user>
    <text>If you’re set on using GraphQL you’re going to have to map database rows to its types, thats part of how it works.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T07:20:41.668500</ts>
    <user>Agustin</user>
    <text>If you don’t want to build that there are several “GraphQL as a Service” providers.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T07:21:37.669400</ts>
    <user>Agustin</user>
    <text>I am surprised you haven’t considered Elixir and Phoenix/Absinthe. Its a very popular combination for backend, its immutable, and functional, just not strictly typed.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T07:23:28.669600</ts>
    <user>Valeria</user>
    <text>You’re right :slightly_smiling_face:</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T07:23:33.669800</ts>
    <user>Valeria</user>
    <text>Just added it to the list</text>
  </message>
  <message conversation_id="925">
    <ts>2019-03-25T07:41:45.670600</ts>
    <user>Joan</user>
    <text>I got the requirement to provide an elm app as "Widget" (&lt;https://www.w3.org/TR/widgets/&gt;). Is there something in elm so that I don't have to do everything manually?</text>
  </message>
  <message conversation_id="925">
    <ts>2019-03-25T07:57:59.670700</ts>
    <user>Denae</user>
    <text>Never heard of it and seems to be on its way to be deprecated &lt;https://github.com/w3c/transitions/issues/65&gt; so I doubt that there is anything else than maybe something on NPM for JS</text>
  </message>
  <message conversation_id="925">
    <ts>2019-03-25T08:35:02.670900</ts>
    <user>Joan</user>
    <text>Yeah - still AGL is using it for custom apps. So I'll cough up some build magic :slightly_smiling_face:</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:14:49.674600</ts>
    <user>Dede</user>
    <text>&lt;@Valeria&gt; I think it’s worth your time to look at Rust.  I agree with &lt;@Agustin&gt; that Elixir/Phoenix will feel very familiar coming from Elm, but the lack of a strong compile-time type checker is super painful.  Rust’s type system is actually very Elm-ish.   I haven’t looked into Redis options, but the ORM support in the Diesel library is excellent and solves a lot of the problems you mentioned.  There are several web server frameworks to choose from with Rust, an overwhelming number really, but you can probably narrow your focus to Rocket and Actix without missing out too much.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:15:18.675100</ts>
    <user>Dede</user>
    <text>(Would you prefer to have this conversation in Discourse or is it OK to chatter here?)</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:20:47.675300</ts>
    <user>Nana</user>
    <text>Rust seems pretty cool, but for general app development I'd think you'd rather not have manual memory management?</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:21:05.675500</ts>
    <user>Dede</user>
    <text>Rust has done an amazing job of making it not painful.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:21:47.675700</ts>
    <user>Dede</user>
    <text>And the runtime performance is spectacular.  &lt;@Valeria&gt; specifically mentioned performance issues as a concern, which immediately elevates Rust to top-tier candidate IMHO.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:23:17.676000</ts>
    <user>Dede</user>
    <text>For many tasks, most of the memory management still happens automagically behind the scenes based on baked-in RAII &amp;lt;https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization&amp;gt;</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:23:47.676200</ts>
    <user>Dede</user>
    <text>That said, Rust has a much more substantial learning curve than most other languages because it has a pretty unique memory/pointer management model and that takes some getting used to.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:24:09.676400</ts>
    <user>Nana</user>
    <text>more than C++?</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:24:30.676600</ts>
    <user>Dede</user>
    <text>The model is much better than C++’s.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:24:50.676800</ts>
    <user>Dede</user>
    <text>But there are significant differences.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:25:00.677100</ts>
    <user>Niesha</user>
    <text>It also inhibits random memory access, which makes non-FP bearable to FP people.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:25:08.677300</ts>
    <user>Niesha</user>
    <text>Sadly, no effect system though</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:25:10.677500</ts>
    <user>Dede</user>
    <text>I should maybe write a Rust tutorial for Elmists.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:25:35.677700</ts>
    <user>Dede</user>
    <text>Yeah, most of the core is written in a way that lets you write FP.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:26:53.677900</ts>
    <user>Nana</user>
    <text>so it has lambdas and proper closures?</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:27:04.678100</ts>
    <user>Dede</user>
    <text>“It’s complicated” :wink:</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:27:22.678300</ts>
    <user>Dede</user>
    <text>Mostly the answer is “yes”.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:27:38.678500</ts>
    <user>Dede</user>
    <text>Actually:  it’s a full yes, but subject to the borrow checker.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:29:10.678700</ts>
    <user>Dede</user>
    <text>So you can write this, where the `||` is a closure taking no arguments and `|req|` is a closure taking one argument:
```
     my.code(|| {
                service_fn(move |req| {
                    serve_https(config, req)
                })
```</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:29:49.678900</ts>
    <user>Dede</user>
    <text>But there are two complexities that come up.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:30:05.679400</ts>
    <user>Dede</user>
    <text>`config` and `req` are captured variables.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:30:48.680200</ts>
    <user>Dede</user>
    <text>Let’s say `req` isn’t referenced from anywhere else after this.  Then the data can `move` into the closure — thus the keyword in front of `|req|`</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:31:21.680700</ts>
    <user>Dede</user>
    <text>But say `config` is — then you have a problem that this closure doesn’t control the lifetime of `config` necessarily.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:31:44.680900</ts>
    <user>Dede</user>
    <text>Now, if `config` is of a type that implements `Copy` trait, no problem, the compiler will automatically copy it.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:31:48.681100</ts>
    <user>Dede</user>
    <text>But realistically, it is not.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:31:49.681300</ts>
    <user>Timika</user>
    <text>&lt;@Valeria&gt; We use Scala (as a FP language, not a better Java) with Sangria (&lt;https://github.com/sangria-graphql/sangria&gt;), but I sadly cannot recommend it fully. But it might be worth to check it out - just in case it fits nonetheless.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:32:03.681400</ts>
    <user>Dede</user>
    <text>So you wind up writing this:
```
   my.code(move || {
                let config = config.clone();
                service_fn(move |req| {
                    let config = config.clone();
                    serve_https(config, req)
                })
            })
```</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:32:11.681600</ts>
    <user>Dede</user>
    <text>That’s the level at which manual management can bite.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:32:16.681800</ts>
    <user>Dede</user>
    <text>“manual”</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:33:08.682300</ts>
    <user>Dede</user>
    <text>The borrow checker warns you — without the extra ` clone` calls the code won’t compile.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:35:43.682500</ts>
    <user>Kris</user>
    <text>Rust feels too low level for most applications </text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:35:54.683100</ts>
    <user>Dede</user>
    <text>~It’s actually not.~</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:36:01.683500</ts>
    <user>Dede</user>
    <text>Let me retract that.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:36:03.683700</ts>
    <user>Kris</user>
    <text>I would recommend purescript if you want something Elm like for a backend </text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:36:05.683900</ts>
    <user>Dede</user>
    <text>That has not been my experience.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:36:48.684200</ts>
    <user>Dede</user>
    <text>Once the learning curve is achieved, I have not found it to be notably less productive than ‘higher level’ languages.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:43:15.684500</ts>
    <user>Niesha</user>
    <text>I've coded Scala for 4 years (now full PureScript), tell me your pains so I can add them to my list :smile:</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:45:27.685000</ts>
    <user>Timika</user>
    <text>Yeah, it’s far from perfect. We had Scala at our company before switching to pure-FP some time ago. In that sense, having Scala already established was a big help. But now we’re looking for something better… But if I would say one thing about Scala I dislike the most, it’s “implicit hell”, especially with libraries like `cats`.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:46:49.687400</ts>
    <user>Caron</user>
    <text>&lt;@Valeria&gt; if you want I can show a small bootstrap of what we currently use at a future meetup.
We currently use Haskell, without complicated extensions, it's quite close to Elm overall.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:48:37.687600</ts>
    <user>Timika</user>
    <text>We had code break at runtime because an implicit was missing. Compiled fine, but had totally different runtime result. :disappointed:</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:50:03.687800</ts>
    <user>Timika</user>
    <text>I’m interested in a Haskell setup that is close to Elm - can you elaborate a bit what you think are do’s and dont’s? You mentioned complicated extensions, what qualifies as a complicated extension for you personally?</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:50:54.688200</ts>
    <user>Kris</user>
    <text>Most of them? :stuck_out_tongue:</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:51:01.688500</ts>
    <user>Timika</user>
    <text>Do you enforce this by some guideline document or is just every developer on the same page and tradeoffs between complexity and gain are made on the fly?</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:51:44.689100</ts>
    <user>Timika</user>
    <text>I heard that `OverloadedStrings` is basically a _must_. Do you think that’s true?</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:52:07.689800</ts>
    <user>Kris</user>
    <text>Yeah </text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:52:22.690200</ts>
    <user>Timika</user>
    <text>_Someone_ needs to write a blogpost about this. *cough* *cough*</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:54:02.691900</ts>
    <user>Luba</user>
    <text>I have a lot of requests to a service that uses authentication. Sometimes the token expires and I get a 401 responsen and then I need to make a refresh request, update local storage though ports and the redo the initial request. Do anyone have a _good_ solution for this? I have tried one where I use Task so make a chain of requests with refresh and retry and then in the response sets both the response to the request and new session credentials in i got some. But it feels complex and I need to add credentials to every msg I have.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:54:20.692000</ts>
    <user>Kris</user>
    <text>I was joking when I said most of them, when you read about them you can recognize which are "complicated", some are required for specific libraries, etc</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:55:03.692200</ts>
    <user>Kris</user>
    <text>Tbh, there are _tons_ of blog posts explaining extensions, see &lt;https://ocharles.org.uk/pages/2014-12-01-24-days-of-ghc-extensions.html&gt; for a pretty cool one</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:55:30.692400</ts>
    <user>Timika</user>
    <text>I find it incredibly hard to get into Haskell, not the language, but the ecosystem and best practices.</text>
  </message>
  <message conversation_id="924">
    <ts>2019-03-25T09:56:13.693200</ts>
    <user>Kris</user>
    <text>Yes, the ecosystem (package management and stuff) is terrible in my opinion.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:57:04.694100</ts>
    <user>Timika</user>
    <text>We had a “getting started with haskell” brownbag session. And most folks had to compile IDE support (&lt;https://github.com/haskell/haskell-ide-engine&gt;) from source and we basically did not do anything. It was very telling.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:57:33.694800</ts>
    <user>Luba</user>
    <text>And another question. Is there a differens between Http.request and Http.task. When using Http.task I get a 403 from the server even though the arguments are identical (except that task doesn't take "tracker").</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:59:12.695100</ts>
    <user>Kris</user>
    <text>Yup, that's pretty much it, I use nix which alleviates some of that (it has binary caches with prevent you from having to build some things from source) but it's still quite flaky</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T09:59:19.695300</ts>
    <user>Caron</user>
    <text>Our setup on the backend is Servant + Elm-export (it generates elm equivalent types to your haskell types, and all the encoders/decoders you need). We then basicly only use the very basic things : custom types, maps, folds, etc.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:00:09.695500</ts>
    <user>Caron</user>
    <text>There is, indeed a bit of complexity in a part of our system which I won't name (it starts with M), but people don't need to manipulate it when creating new feature.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:02:03.696200</ts>
    <user>Luba</user>
    <text>And I had to implement my own resolver like this:
```resolveJson : Json.Decode.Decoder a -&amp;gt; Http.Resolver Http.Error a
resolveJson decoder =
    Http.stringResolver &amp;lt;|
        \response -&amp;gt;
            case response of
                Http.BadUrl_ url -&amp;gt;
                    Err (Http.BadUrl url)

                Http.Timeout_ -&amp;gt;
                    Err Http.Timeout

                Http.NetworkError_ -&amp;gt;
                    Err Http.NetworkError

                Http.BadStatus_ metadata body -&amp;gt;
                    Err (Http.BadStatus metadata.statusCode)

                Http.GoodStatus_ metadata body -&amp;gt;
                    case Json.Decode.decodeString decoder body of
                        Ok value -&amp;gt;
                            Ok value

                        Err err -&amp;gt;
                            Err (Http.BadBody (Json.Decode.errorToString err))
```</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:02:21.696300</ts>
    <user>Caron</user>
    <text>We use lots of extensions, but they don't really require knowledge (OverloadedStrings, DeriveGeneric, FlexibleContexts, etc).</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:03:24.697000</ts>
    <user>Luba</user>
    <text>It fails on the OPTIONS request that it seems like my browser automatically makes when doing a POST</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:03:44.697100</ts>
    <user>Caron</user>
    <text>&amp;gt; We had a “getting started with haskell” brownbag session. And most folks had to compile IDE support
The problem with that is that many people doing Haskell are vi/Emacs users. The guy who does IDE support is a great person, but many in the community are used to generic dev tooling.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:04:31.698000</ts>
    <user>Cindie</user>
    <text>yes, it will send OPTIONS pre-flight, make sure your server can handle it</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:06:05.698800</ts>
    <user>Luba</user>
    <text>A wonder if perhaps "allow origin" or something like that is different. It doesn't seem like Chromium shows everything in the developer console</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:11:23.699500</ts>
    <user>Cindie</user>
    <text>you can google more on this issue</text>
  </message>
  <message conversation_id="927">
    <ts>2019-03-25T10:12:05.699800</ts>
    <user>Luba</user>
    <text>What more specifically do you mean?</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:12:19.700200</ts>
    <user>Luba</user>
    <text>Is it a known issue with Elm?</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:14:26.701200</ts>
    <user>Cindie</user>
    <text>I mean google for more on "allow origin" and OPTIONS</text>
  </message>
  <message conversation_id="928">
    <ts>2019-03-25T10:19:42.701600</ts>
    <user>Jin</user>
    <text>This is a good CORS guide.
&lt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&gt;</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:23:26.702900</ts>
    <user>Luba</user>
    <text>Yeah. I know about that. But I would expect Elm to handle Http.task and Http.request identically. </text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:24:23.703000</ts>
    <user>Valeria</user>
    <text>I would love to have that &lt;@Caron&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:26:19.704500</ts>
    <user>Caron</user>
    <text>Ok.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:26:58.705800</ts>
    <user>Luba</user>
    <text>As far as I could tell Elm set those three headers the same. But I'm not 100%. I'm no longer at my computer at the moment, so I will need to double check that the next time I have a chabce. </text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:42:35.706200</ts>
    <user>Niesha</user>
    <text>wtf, never had that one</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:42:56.706400</ts>
    <user>Niesha</user>
    <text>Our team is now at PureScript - it works. Not as fast as Rust, but pleasant to work with</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:44:18.706600</ts>
    <user>Niesha</user>
    <text>A bit newer guideline on which extensions to use: &lt;https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/&gt;</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:45:09.706900</ts>
    <user>Niesha</user>
    <text>`stack` solved most of our ecosystem issues. The IDE support still isn't great.</text>
  </message>
  <message conversation_id="926">
    <ts>2019-03-25T10:45:28.707200</ts>
    <user>Niesha</user>
    <text>At least compared to PureScript</text>
  </message>
  <message conversation_id="929">
    <ts>2019-03-25T14:08:44.708700</ts>
    <user>Tisa</user>
    <text>Hi all - how can I `uriEncode` a string?  `Http` 1.x had this function but it has been removed in 2.x.</text>
  </message>
  <message conversation_id="929">
    <ts>2019-03-25T14:24:20.708900</ts>
    <user>Dede</user>
    <text>Check out &lt;https://package.elm-lang.org/packages/elm/url/latest/Url-Builder#QueryParameter&gt;</text>
  </message>
  <message conversation_id="929">
    <ts>2019-03-25T14:24:36.709100</ts>
    <user>Dede</user>
    <text>Maybe you can fake something out of that?</text>
  </message>
  <message conversation_id="929">
    <ts>2019-03-25T14:25:39.709300</ts>
    <user>Dede</user>
    <text>Wait, better answer:  &lt;https://package.elm-lang.org/packages/elm/url/latest/Url#percentEncode&gt;</text>
  </message>
  <message conversation_id="930">
    <ts>2019-03-25T15:30:31.710000</ts>
    <user>Kris</user>
    <text>Is there any package for rendering graphs which supports click/touch to drag stuff?</text>
  </message>
  <message conversation_id="930">
    <ts>2019-03-25T15:39:18.711300</ts>
    <user>Virgie</user>
    <text>do you want this to be force-directed? elm-visualization has an example where you can drag the nodes, but then the force-direction kicks in and make the layout a little nicer. see also &lt;https://erkal.github.io/kite/&gt;</text>
  </message>
  <message conversation_id="930">
    <ts>2019-03-25T15:40:13.711500</ts>
    <user>Virgie</user>
    <text>elm-visualization example: &lt;https://code.gampleman.eu/elm-visualization/ForceDirectedGraph/&gt;</text>
  </message>
  <message conversation_id="930">
    <ts>2019-03-25T15:54:11.711800</ts>
    <user>Kris</user>
    <text>Yes, that's a pretty cool example</text>
  </message>
  <message conversation_id="930">
    <ts>2019-03-25T15:54:15.712000</ts>
    <user>Kris</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="930">
    <ts>2019-03-25T16:17:08.713000</ts>
    <user>Agustin</user>
    <text>`terezka/line-charts` supports clicks and dragging with some setup, see &lt;https://terezka.github.io/line-charts/&gt;</text>
  </message>
  <message conversation_id="931">
    <ts>2019-03-25T16:18:34.713800</ts>
    <user>Kris</user>
    <text>I'll check it out, that kite looks like what I need but it doesn't provide that as a library, but as the whole project</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T17:49:36.714300</ts>
    <user>Floy</user>
    <text>hey everyone
any idea how to do jsonp request in Elm ?</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T17:53:28.714600</ts>
    <user>Floy</user>
    <text>basically am trying to access wakatime embedables</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T17:53:59.714800</ts>
    <user>Floy</user>
    <text>and that nasty thing works over jsonp...as far as I can tell from the snippet on their page</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:08:18.715300</ts>
    <user>Huong</user>
    <text>Hm, I appear to get plain old JSON responses :thinking_face:</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:08:22.715500</ts>
    <user>Huong</user>
    <text>e.g. &lt;https://wakatime.com/share/@731fa8ee-eb30-4de1-912a-bbea6fcef812/4cfa1d8c-45e2-431d-affe-29638cef24e2.json&gt;</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:16:18.715700</ts>
    <user>Floy</user>
    <text>yeah....it is</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:16:26.715900</ts>
    <user>Floy</user>
    <text>but in elm I get `Network failure` :confused:</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:16:36.716100</ts>
    <user>Floy</user>
    <text>no sorry</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:16:39.716300</ts>
    <user>Floy</user>
    <text>`NetworkError`</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:16:57.716600</ts>
    <user>Floy</user>
    <text>which doesn't make any sense</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:17:04.716800</ts>
    <user>Floy</user>
    <text>since I am on this slack</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:17:13.717000</ts>
    <user>Floy</user>
    <text>+ Netflix is running</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:17:14.717200</ts>
    <user>Floy</user>
    <text>:confused:</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:18:14.717400</ts>
    <user>Floy</user>
    <text>&lt;@Huong&gt; URL is 100% correct, I can copy it into the browser and everything is ok</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:20:49.717600</ts>
    <user>Floy</user>
    <text>Am I not looking at CORS request?</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:23:36.717800</ts>
    <user>Floy</user>
    <text>oh...bugger...in the old code I've been using `jsonp` node module to do this request :confused:</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:26:00.718000</ts>
    <user>Earlean</user>
    <text>You'll get `Network Failure` if CORS doesn't allow the request.</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:33:23.718200</ts>
    <user>Floy</user>
    <text>that's really inconvienient</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:33:40.718400</ts>
    <user>Floy</user>
    <text>wonder if the only way is to port the module to Elm via ports or is there some header to set ;/</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:38:48.718600</ts>
    <user>Earlean</user>
    <text>The browser doesn't allow even JS to know the difference between a CORS problem and a network failure</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T18:43:57.718800</ts>
    <user>Earlean</user>
    <text>With CORS, it's up to the server to respond with headers that tell the browser it can allow the request. Inspect the headers of the response to see what the server's requirements are for the request.</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T19:18:11.719100</ts>
    <user>Floy</user>
    <text>there are none in browser...</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T19:18:24.719300</ts>
    <user>Floy</user>
    <text>but there's a bunch of when I execute it via `httpie`</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T19:18:50.719500</ts>
    <user>Floy</user>
    <text>setting cookies etc.</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T19:20:26.719700</ts>
    <user>Floy</user>
    <text>an alternative is to talk with the API</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T19:22:39.720000</ts>
    <user>Floy</user>
    <text>nvm...I though that might be easy stuff with something obvious missing, but apparently it's not :confused:</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T19:22:46.720200</ts>
    <user>Floy</user>
    <text>anyway, thx for help</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T19:23:15.720400</ts>
    <user>Earlean</user>
    <text>it's easy stuff as long as their server supports CORS</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T19:23:37.720600</ts>
    <user>Earlean</user>
    <text>if not, then it's impossible stuff. But it would be impossible with JS too.</text>
  </message>
  <message conversation_id="932">
    <ts>2019-03-25T19:24:33.720800</ts>
    <user>Earlean</user>
    <text>if you have JS that talks to wakatime then inspect the requests and response it gets</text>
  </message>
  <message conversation_id="933">
    <ts>2019-03-25T20:30:13.722200</ts>
    <user>Bebe</user>
    <text>You can also set up a cors proxy in a trusted server of yours, and query that.</text>
  </message>
  <message conversation_id="933">
    <ts>2019-03-25T20:30:45.723000</ts>
    <user>Bebe</user>
    <text>Don’t use third party cors servers with sensitive requests</text>
  </message>
  <message conversation_id="934">
    <ts>2019-03-25T21:15:43.723200</ts>
    <user>Carlota</user>
    <text>BTW &lt;@Todd&gt; there's a &lt;#C7075S0GY|compile-time&gt; that you might be interested in.</text>
  </message>
  <message conversation_id="935">
    <ts>2019-03-26T00:11:21.723600</ts>
    <user>Leopoldo</user>
    <text>Thanks a lot for the assistance, i wasn't online to continue, i m now going to try it</text>
  </message>
  <message conversation_id="936">
    <ts>2019-03-26T02:49:25.724400</ts>
    <user>Luba</user>
    <text>Solved it. The problem was that i made a mistake creating the URL. I got a CORS error instead of a 404. A bit confusing, but there might be good reasons for doing it that way I guess.</text>
  </message>
  <message conversation_id="936">
    <ts>2019-03-26T03:08:30.724600</ts>
    <user>Leopoldo</user>
    <text>why the `(Json.succeed SyncViewport)` ?</text>
  </message>
  <message conversation_id="937">
    <ts>2019-03-26T03:30:15.725900</ts>
    <user>Euna</user>
    <text>hows does everyone manage not re-initing nested components on the OnChangeUrl?</text>
  </message>
  <message conversation_id="937">
    <ts>2019-03-26T03:30:31.726400</ts>
    <user>Euna</user>
    <text>I feel as though I am missing some key philosophy</text>
  </message>
  <message conversation_id="937">
    <ts>2019-03-26T03:40:14.727500</ts>
    <user>Euna</user>
    <text>like if you change url from /profile/something  to -&amp;gt;  /profile/anotherthing how do you maintain consistent state</text>
  </message>
  <message conversation_id="937">
    <ts>2019-03-26T03:45:15.729100</ts>
    <user>Ashton</user>
    <text>I havent done routing in a while, but when that `OnChangeUrl` `Msg` comes in, you should be able to handle the `Route` like this:
```
    Route.Profile id -&amp;gt;
            case model.page of
                Page.profile subModel -&amp;gt;
                    if subModel.id == id then
                        model -- Dont do anything
```</text>
  </message>
  <message conversation_id="937">
    <ts>2019-03-26T03:45:48.729700</ts>
    <user>Ashton</user>
    <text>This is an extreme case where you literally dont want to do anything at all, and no state is changed, but in other cases you can do different things.</text>
  </message>
  <message conversation_id="938">
    <ts>2019-03-26T04:53:05.730400</ts>
    <user>Todd</user>
    <text>wow, thank you so much for the reply, these are some very impressive numbers</text>
  </message>
  <message conversation_id="939">
    <ts>2019-03-26T05:42:11.730700</ts>
    <user>Denae</user>
    <text>^.^</text>
  </message>
  <message conversation_id="940">
    <ts>2019-03-26T05:52:01.730900</ts>
    <user>Reuben</user>
    <text>Hi. I am working on Kite. Could you describe to me what you do with Kite? I kind of lack user data. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="940">
    <ts>2019-03-26T05:54:20.731100</ts>
    <user>Reuben</user>
    <text>if you have a particular need (from Kite), I can increase its priority in the roadmap: &lt;https://github.com/erkal/kite/projects/1&gt;</text>
  </message>
  <message conversation_id="940">
    <ts>2019-03-26T05:54:57.731300</ts>
    <user>Reuben</user>
    <text>or maybe add it, if it is not already there</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:25:35.732000</ts>
    <user>Zachary</user>
    <text>Hi all, has anyone done some design on mapping Parent -&amp;gt; Children?</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:25:36.732100</ts>
    <user>Maida</user>
    <text>you need a decoder for a message and since I don’t want to do anything with the event, the simplest way to express the fact that I want `SyncViewport` message to be generated on that event is to just `Json.succeed SyncViewport`</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:26:18.733100</ts>
    <user>Zachary</user>
    <text>I'm currently using a `Dict Id Child.Model` to track model changes, is there something more abstract out there?</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:26:57.733500</ts>
    <user>Maida</user>
    <text>I later thought about the proposed solution and realized that it is broken.</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:28:03.734700</ts>
    <user>Leopoldo</user>
    <text>It works on ellie but i also noticed it only works on mousewheel</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:28:28.735300</ts>
    <user>Leopoldo</user>
    <text>Provisions have to be made for arrows and scrollbars dragging</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:28:36.735600</ts>
    <user>Lilli</user>
    <text>it really depends on your specific case. why `Dict Id Child.Model` doesn't fit your needs?</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:28:51.735700</ts>
    <user>Leopoldo</user>
    <text>I m yet to incorporate into my existing code and see</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:31:05.736100</ts>
    <user>Zachary</user>
    <text>it's quite some massaging to get it in</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:31:11.736300</ts>
    <user>Zachary</user>
    <text>but it does the job :slightly_smiling_face:</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:42:07.745200</ts>
    <user>Lilli</user>
    <text>questions that arise in my head after reading such a generic question:
1) mapping parent -&amp;gt; children. Recursive tuples? json? nested maps/dicts? List of (id, record model, nullable parent id)?
2) what is your model made of? is each element unique?
3) tracking changes... maybe create a distinct model that acts as a index? can your model be hashed?
4) are performances a deciding factor?

I don't want to appear polemic, but it feels like someone asked me how to carry "things" from a city to an other. If it's small enough, even a pigeon might do it :stuck_out_tongue:</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:44:32.745500</ts>
    <user>Niesha</user>
    <text>TCP/IP over pidgeon?</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:45:57.745600</ts>
    <user>Maida</user>
    <text>&lt;https://ellie-app.com/55HbSQ9mD6Na1&gt;</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:46:02.745800</ts>
    <user>Maida</user>
    <text>this should work OK</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:46:33.746000</ts>
    <user>Maida</user>
    <text>I have moved the handling of the scroll in JS.</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:48:49.746800</ts>
    <user>Lilli</user>
    <text>if there is no kind of electric power, it might be the only choice :smile:</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:49:06.747000</ts>
    <user>Lilli</user>
    <text>it's all about context</text>
  </message>
  <message conversation_id="941">
    <ts>2019-03-26T06:59:40.747200</ts>
    <user>Maida</user>
    <text>I have also created a discourse topic about this:
&lt;https://discourse.elm-lang.org/t/is-it-possible-to-handle-scroll-events-in-elm-without-the-use-of-ports/3396&gt;</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:09:53.748500</ts>
    <user>Miguelina</user>
    <text>Regarding Parsers: How to chomp until different character than last one?</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:32:33.749200</ts>
    <user>Gertrude</user>
    <text>Question regarding generic record types and JSON decoding: can I?</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:35:21.750700</ts>
    <user>Velia</user>
    <text>This is not as easy as it sounds, this should work:
```
module Chomp exposing (chompWhileUnique)

import Parser exposing (..)


chompWhileUnique : Parser ()
chompWhileUnique =
    loop Nothing chompWhileUniqueLoop


chompWhileUniqueLoop : Maybe Char -&amp;gt; Parser (Step (Maybe Char) ())
chompWhileUniqueLoop maybeChar =
    oneOf
        [ case maybeChar of
            Just char -&amp;gt;
                getChompedString (chompIf (\c -&amp;gt; char /= c))
                    |&amp;gt; andThen chompWhileUniqueNextChar

            Nothing -&amp;gt;
                getChompedString (chompIf (\c -&amp;gt; True))
                    |&amp;gt; andThen chompWhileUniqueNextChar
        , succeed (Done ())
        ]


chompWhileUniqueNextChar : String -&amp;gt; Parser (Step (Maybe Char) ())
chompWhileUniqueNextChar str =
    case String.uncons str of
        Nothing -&amp;gt;
            succeed (Done ())

        Just ( c, _ ) -&amp;gt;
            succeed (Loop (Just c))
```
For example in `elm repl`:
```
&amp;gt; run (getChompedString chompWhileUnique) ""
Ok "" : Result (List DeadEnd) String
&amp;gt; run (getChompedString chompWhileUnique) "abcefg"
Ok "abcefg" : Result (List DeadEnd) String
&amp;gt; run (getChompedString chompWhileUnique) "abccefg"
Ok "abc" : Result (List DeadEnd) String
```</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:38:34.752100</ts>
    <user>Gertrude</user>
    <text>ie I have a type like this:
```
type Project task =
    Project
        { id : Identifier
        , name : String
        , tasks : List task
        , closed : Bool
        }
```

Can I write a decoder in a generic way to handle `task` as one of several possible options? I've also tried instead creating a `Task` enum with all the types of task records that can be in there, but this seems to fail</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:38:35.752200</ts>
    <user>Nana</user>
    <text>&lt;@Gertrude&gt; it's possible to write fully generic JSON decoder, have a look at : &lt;https://package.elm-lang.org/packages/Microsoft/elm-json-tree-view/latest/&gt;</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:39:16.752400</ts>
    <user>Nana</user>
    <text>ah nvm</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:39:42.753000</ts>
    <user>Miguelina</user>
    <text>Thx... this will take a while to absorb...</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:39:50.753400</ts>
    <user>Niesha</user>
    <text>&lt;@Gertrude&gt; Elm cannot generically derive decoders, no. However, you can ask it to try a few different decoders.</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:40:37.754300</ts>
    <user>Nana</user>
    <text>you could write `projectDecoder : Decoder a -&amp;gt; Decoder (Project a)`
just like `Decode.list`etc. work</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:42:01.755100</ts>
    <user>Gertrude</user>
    <text>~~Hmm. I'm wondering if the issue is how to pass the right constructor to Decode.succeed. I guess enum record types don't create the same kind of constructor as a type alias~~ (wrong avenue)</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:42:41.755500</ts>
    <user>Danika</user>
    <text>Ms doing elm dev??</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:42:55.755600</ts>
    <user>Velia</user>
    <text>Well the use of `loop` makes it look more complicated than it is, but this avoids stack issues. It would look simpler by using a recursive parser.</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:43:44.756300</ts>
    <user>Nana</user>
    <text>&lt;@Danika&gt; yup it's &lt;@Carl&gt; at MS</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:44:36.757300</ts>
    <user>Sharon</user>
    <text>you don't have to use a constructor if it doesn't fit. you can write your own function there that takes the parameters and composes a value of the right type</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:45:37.758300</ts>
    <user>Gertrude</user>
    <text>So I have my `Project` decoder defined like this:

```
projectDecoder : Decoder (Project task)
projectDecoder =
    Decode.succeed mkProject
        |&amp;gt; required "id" int
        |&amp;gt; required "name" string
        |&amp;gt; required "tasks" (Decode.oneOf [list reportableTaskDecoder, list markableTaskDecoder])
        |&amp;gt; required "closed" bool
```

And it complains about that `oneOf`, because the result is a mismatched list</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:47:15.758600</ts>
    <user>Miguelina</user>
    <text>No, no... loop is totally fine! I just used it for building a list. It's just that I'm very new (2h) to parsers.</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:49:30.758800</ts>
    <user>Velia</user>
    <text>Ok, anyway here is the recursive version without tail-call elimination:
```
chompWhileUnique : Parser ()
chompWhileUnique =
    chompWhileUniqueHelp Nothing


chompWhileUniqueHelp : Maybe Char -&amp;gt; Parser ()
chompWhileUniqueHelp maybeChar =
    oneOf
        [ case maybeChar of
            Just char -&amp;gt;
                getChompedString (chompIf (\c -&amp;gt; char /= c))
                    |&amp;gt; andThen chompWhileUniqueNextChar

            Nothing -&amp;gt;
                getChompedString (chompIf (\c -&amp;gt; True))
                    |&amp;gt; andThen chompWhileUniqueNextChar
        , succeed ()
        ]


chompWhileUniqueNextChar : String -&amp;gt; Parser ()
chompWhileUniqueNextChar str =
    case String.uncons str of
        Nothing -&amp;gt;
            succeed ()

        Just ( c, _ ) -&amp;gt;
            chompWhileUniqueHelp (Just c)
```</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:51:16.760500</ts>
    <user>Sharon</user>
    <text>`reportableTaskDecoder` and `markableTaskDecoder` both have their own task-type instead of the generic `task` ?</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:52:39.761300</ts>
    <user>Gertrude</user>
    <text>Yes. They're both record types, though similar, and the API is guaranteed to only ever have same type lists (ie. all projects have a list of only markable, or only reportable tasks)</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:53:27.762200</ts>
    <user>Miguelina</user>
    <text>Thx!!</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:54:13.763100</ts>
    <user>Gertrude</user>
    <text>I can express this potentially with an enum as well, but this gets cumbersome because I need to write constructor functions  for each, which is a lot of code for only two record types possible, and also wrong, because a `type Task = Reportable | Markable` or similar enum would allow mixed type lists of tasks</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:56:12.763500</ts>
    <user>Sharon</user>
    <text>Well your function is trying to implement both `Decoder (Project ReportableTask)` and `Decoder (Project MarkableTask)` at once, but you can't do that because they are different types.
I think the easiest is to just make 2 different functions. Then maybe see if you can extract common logic afterwards</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:56:19.763600</ts>
    <user>Nana</user>
    <text>&lt;@Gertrude&gt;
```
projectDecoder : Decoder task -&amp;gt; Decoder (Project task)
projectDecoder taskDecoder =
    Decode.succeed mkProject
        |&amp;gt; required "id" int
        |&amp;gt; required "name" string
        |&amp;gt; required "tasks" (list taskDecoder)
        |&amp;gt; required "closed" bool
```</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T07:59:33.765800</ts>
    <user>Sharon</user>
    <text>Yea, like that. But the problem of the mixed types comes from the `oneOf` (which is extracted out here), that will need to be separated anyway</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T08:03:41.767400</ts>
    <user>Gertrude</user>
    <text>Yeah. Extracting that out to a different function still has the same problem. I think maybe this is not expressable how I think</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T08:05:13.769000</ts>
    <user>Gertrude</user>
    <text>It's not lists' fault, it's that they types make no sense. a non-list decoder would have to look like `or : Parser a -&amp;gt; Parser b -&amp;gt; Parser ?` which makes no sense.</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T08:09:32.770200</ts>
    <user>Gertrude</user>
    <text>Ah! I get it now. I missed the point of &lt;@Nana&gt;'s code. We make taskDecoder an  argument, and pass the right decoder when I need it, which thankfully works for this.</text>
  </message>
  <message conversation_id="942">
    <ts>2019-03-26T08:31:39.771100</ts>
    <user>Leopoldo</user>
    <text>Good will read. I m trying to avoid the use of ports though</text>
  </message>
  <message conversation_id="943">
    <ts>2019-03-26T08:55:16.771400</ts>
    <user>Maida</user>
    <text>That was the point of the discourse post, to find a solution without ports. In any case, if ports is the way, then use ports.</text>
  </message>
  <message conversation_id="943">
    <ts>2019-03-26T08:56:36.771600</ts>
    <user>Maida</user>
    <text>based on my experience, extreme avoidance of ports is not a good thing. Minimize the use of ports but if the ports solve your problem, use them.</text>
  </message>
  <message conversation_id="943">
    <ts>2019-03-26T09:03:04.771800</ts>
    <user>Leopoldo</user>
    <text>Ok</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:54:40.772500</ts>
    <user>Daysi</user>
    <text>can anyone recommend me a way to cast a 1 len String to Char?</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:57:52.773100</ts>
    <user>Nga</user>
    <text>&lt;@Daysi&gt; `String.toList x |&amp;gt; List.head`</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:57:54.773300</ts>
    <user>Huong</user>
    <text>`String.uncons &amp;gt;&amp;gt; Maybe.map Tuple.first` gives you a `Maybe Char` representing the first unicode codepoint</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:57:56.773500</ts>
    <user>Nga</user>
    <text>would give you a Maybe char</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:58:10.773700</ts>
    <user>Huong</user>
    <text>`toList &amp;gt;&amp;gt; head` would also work, inded</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:58:25.774500</ts>
    <user>Nga</user>
    <text>there's also uncons</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:58:37.774900</ts>
    <user>Daysi</user>
    <text>what are uncons?</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:59:02.775600</ts>
    <user>Huong</user>
    <text>It's a function `String -&amp;gt; Maybe (Char, String)` that takes the first character off</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:59:16.775900</ts>
    <user>Huong</user>
    <text>(if the string isn't empty)</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:59:38.776300</ts>
    <user>Daysi</user>
    <text>Ok</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:59:47.776600</ts>
    <user>Niesha</user>
    <text>You could also write a `NonEmptyString` newtype</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T09:59:55.776900</ts>
    <user>Niesha</user>
    <text>Which would be `(Char, String)`</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T10:00:57.777600</ts>
    <user>Nga</user>
    <text>Anyone know how I can refactor this into a single line?

```let
   ( newSession, newCmd ) =
      Session.redirectWithFlash session
   in
   ( { model | divShown = True }, newSession, newCmd )
```</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T10:01:58.778000</ts>
    <user>Niesha</user>
    <text>&lt;https://klaftertief.github.io/elm-search/?q=c%20-%3E%20(a%2C%20b)%20-%3E%20(c%2C%20a%2C%20b)&gt;</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T10:03:29.778300</ts>
    <user>Nga</user>
    <text>Oh yeah :stuck_out_tongue: That'll do it. Thanks.</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T10:03:53.778400</ts>
    <user>Lewis</user>
    <text>`Session.redirectWithFlash session |&amp;gt; \(newSession, newCmd) -&amp;gt; ({model | divShown = True}, newSession, newCmd)`</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T10:04:25.778600</ts>
    <user>Nga</user>
    <text>Thanks, that also works :slightly_smiling_face:</text>
  </message>
  <message conversation_id="944">
    <ts>2019-03-26T11:00:36.782500</ts>
    <user>Nga</user>
    <text>Elm is supposed to return all headers from a HTTP request right? For some reason the only header I can see is `content-type`, however I can see in my browser console that it has lots of headers like content-length, etc. I'm outputting the headers like so: `Debug.log (String.concat &amp;lt;| Dict.keys metadata.headers) x`, and the only output I get is: `content-type: &amp;lt;function&amp;gt;`. I know it's not a problem with the debug line, because I can do `String.concat ["one","two"]` in my debug line and I'll see "onetwo" in the console, so it seems Elm just isn't getting all headers in its headers dict? Unless I'm missing something weird :confused:. This is for a `Http.BadStatus_`, inside the metadata it has.</text>
  </message>
  <message conversation_id="945">
    <ts>2019-03-26T11:10:53.783000</ts>
    <user>Jin</user>
    <text>Are you doing a CORS request?</text>
  </message>
  <message conversation_id="945">
    <ts>2019-03-26T11:11:02.783200</ts>
    <user>Nga</user>
    <text>Yes I am.</text>
  </message>
  <message conversation_id="945">
    <ts>2019-03-26T11:12:12.784100</ts>
    <user>Jin</user>
    <text>You then have to expose additional header explicitely, see &lt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers&gt;</text>
  </message>
  <message conversation_id="945">
    <ts>2019-03-26T11:12:37.784500</ts>
    <user>Nga</user>
    <text>Thanks. Man, I've been bitten by CORS so many times!</text>
  </message>
  <message conversation_id="945">
    <ts>2019-03-26T11:14:09.785100</ts>
    <user>Nga</user>
    <text>So why can the browser see those headers but Elm can't? Hmm.</text>
  </message>
  <message conversation_id="945">
    <ts>2019-03-26T11:15:56.786100</ts>
    <user>Nga</user>
    <text>Elm will only allow you to access headers exposed with Expose-Headers, but the browser doesn't care?</text>
  </message>
  <message conversation_id="945">
    <ts>2019-03-26T11:17:48.787200</ts>
    <user>Nana</user>
    <text>&lt;@Nga&gt; it's protection against malicious scripts, but you as a user can still see them</text>
  </message>
  <message conversation_id="945">
    <ts>2019-03-26T11:18:12.787400</ts>
    <user>Nga</user>
    <text>Ah, that makes sense.</text>
  </message>
  <message conversation_id="946">
    <ts>2019-03-26T13:24:33.788600</ts>
    <user>Christia</user>
    <text>is `type alias Model = String` the correct way to say that my model is just a string? Because something is going on about it being a `a -&amp;gt; String`?</text>
  </message>
  <message conversation_id="946">
    <ts>2019-03-26T13:34:28.788900</ts>
    <user>Kris</user>
    <text>Yes, that’s correct </text>
  </message>
  <message conversation_id="946">
    <ts>2019-03-26T13:34:40.789400</ts>
    <user>Kris</user>
    <text>Fwiw, you don’t even need to write that type alias </text>
  </message>
  <message conversation_id="947">
    <ts>2019-03-26T17:12:41.791400</ts>
    <user>Cherish</user>
    <text>Elm's help for make tells me, that I can compile more than one file:
```
elm make --help
The `make` command compiles Elm code into JS or HTML:

    elm make &amp;lt;zero-or-more-elm-files&amp;gt;

```

..but what is the usecase for compiling more than the Main-module ?</text>
  </message>
  <message conversation_id="947">
    <ts>2019-03-26T17:16:27.793200</ts>
    <user>Huong</user>
    <text>&lt;@Cherish&gt; you can have multiple Elm apps, each with their own `main` function, and bundle them into a single artifact. So you get a single JS file, with dead code elimination and deduplication applied, that contains exactly what you need to use those apps on a page.</text>
  </message>
  <message conversation_id="947">
    <ts>2019-03-26T17:17:15.793900</ts>
    <user>Huong</user>
    <text>It's especially useful for folks who are embedding multiple small Elm apps on a single page</text>
  </message>
  <message conversation_id="947">
    <ts>2019-03-26T17:20:10.795900</ts>
    <user>Cherish</user>
    <text>Ok, I see.. so embedding these multiple independent Elm Apps (== multiple main functions) in a page via JS is like
```
Elm.Main.init(...)

Elm.Main2.init(...)

Elm.Main3.init(...)
```</text>
  </message>
  <message conversation_id="947">
    <ts>2019-03-26T17:20:40.796600</ts>
    <user>Cherish</user>
    <text>all included in one JS, the output of compiling multiple Main modules ?</text>
  </message>
  <message conversation_id="947">
    <ts>2019-03-26T17:24:15.796900</ts>
    <user>Cherish</user>
    <text>great, thx</text>
  </message>
  <message conversation_id="948">
    <ts>2019-03-26T18:10:36.797800</ts>
    <user>Christia</user>
    <text>Is putting `let _ = Debug.log "alksdfjak" in` at the beginning of my update function supposed to log something to the console if the update function is called?</text>
  </message>
  <message conversation_id="948">
    <ts>2019-03-26T18:13:35.798400</ts>
    <user>Virgie</user>
    <text>yes</text>
  </message>
  <message conversation_id="948">
    <ts>2019-03-26T18:13:47.798900</ts>
    <user>Chae</user>
    <text>`Debug.log` takes 2 arguments and returns the 2nd argument. Could that be causing issues?</text>
  </message>
  <message conversation_id="948">
    <ts>2019-03-26T18:13:52.799100</ts>
    <user>Virgie</user>
    <text>well, you need two arguments to `Debug.log`</text>
  </message>
  <message conversation_id="948">
    <ts>2019-03-26T18:13:59.799400</ts>
    <user>Virgie</user>
    <text>`Debug.log "some name" someValue`</text>
  </message>
  <message conversation_id="948">
    <ts>2019-03-26T18:15:37.799700</ts>
    <user>Christia</user>
    <text>Oh right, that explains it. Thanks.</text>
  </message>
  <message conversation_id="948">
    <ts>2019-03-26T18:22:37.801200</ts>
    <user>Earlean</user>
    <text>&lt;@Christia&gt; while it's common to use `Debug.log`  in a `let` and ignore the return value, you're less likely to make the above mistake if you use it inline and use it's result.</text>
  </message>
  <message conversation_id="948">
    <ts>2019-03-26T18:32:25.801600</ts>
    <user>Christia</user>
    <text>Oh yeah that's super handy to use it inline</text>
  </message>
  <message conversation_id="948">
    <ts>2019-03-26T20:16:19.801800</ts>
    <user>Jana</user>
    <text>There is some real wisdom here:

```
If we see 'lines of code' as 'lines spent', then when we delete lines of code, we are lowering the cost of maintenance. Instead of building re-usable software, we should try to build disposable software.
```</text>
  </message>
  <message conversation_id="949">
    <ts>2019-03-26T23:16:06.805100</ts>
    <user>Jacquelyn</user>
    <text>Is there a way to send data through a port where a field might not exist and not have to use JSON encoders/decoders?
JavaScript:
```
app.ports.updateDeck.send({name: 'my deck', photo: null})
```
Elm:
```
port updateDeck : (Deck -&amp;gt; msg) -&amp;gt; Sub msg
type alias Deck = { name : String, photo : Maybe String }
```
That doesn’t work. Is my only option JSON encoders/decoders?</text>
  </message>
  <message conversation_id="949">
    <ts>2019-03-26T23:21:01.806000</ts>
    <user>Earlean</user>
    <text>&lt;@Jacquelyn&gt; ports will automatically handle `Maybe String`, what isn't working about your code?</text>
  </message>
  <message conversation_id="949">
    <ts>2019-03-27T00:59:50.806300</ts>
    <user>Jacquelyn</user>
    <text>&lt;@Earlean&gt; I get the following error:
```
Uncaught Error: Trying to send an unexpected type of value through port `updateDeck`:
[object Object]
    at _Debug_crash (Deck.js:750)
```
But now that you tell me it should work, I’m going to see if it’s not something else causing this error…</text>
  </message>
  <message conversation_id="949">
    <ts>2019-03-27T01:01:42.806500</ts>
    <user>Jacquelyn</user>
    <text>In fact, I was passing `photoURL` instead of `photo`! My mistake… Thank you &lt;@Earlean&gt; for letting me know this should’ve worked.</text>
  </message>
  <message conversation_id="949">
    <ts>2019-03-27T01:01:59.806700</ts>
    <user>Earlean</user>
    <text>:+1:</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:39:25.807900</ts>
    <user>Leopoldo</user>
    <text>hello, i have an error of ``` You are declaring port `fromJS` in a normal module.
13| port fromJS : (() -&amp;gt; msg) -&amp;gt; Sub msg
         ^^^^^^
It needs to be in a `port` module.
``` but `import port exposing (..)` seems not to find the port module, what's the correct import ?</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:47:12.808600</ts>
    <user>Ruthann</user>
    <text>the module name needs to be prepended with `ports`</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:47:35.809100</ts>
    <user>Ruthann</user>
    <text>ie:
```
ports module abc exposing ...

port fromJS ...
```</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:49:05.809400</ts>
    <user>Ruthann</user>
    <text>&lt;https://guide.elm-lang.org/interop/ports.html#outgoing-messages&gt; &lt;@Leopoldo&gt;</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:52:05.810100</ts>
    <user>Leopoldo</user>
    <text>&lt;@Ruthann&gt; this popped up
`ports module Test exposing (..)`
`port fromJS : (() -&amp;gt; msg) -&amp;gt; Sub msg`
``` 15| ports module Test exposing (..)
          ^
I was expecting:
  - an argument, like `name` or `total`
  - the "has type" symbol (:) followed by a type
  - an equals sign (=)
```</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:52:45.810400</ts>
    <user>Leopoldo</user>
    <text>oh, wait</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:52:45.810600</ts>
    <user>Leopoldo</user>
    <text>sorry</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:52:50.810800</ts>
    <user>Leopoldo</user>
    <text>port instead of ports</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:53:27.811000</ts>
    <user>Ruthann</user>
    <text>yep, my bad</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:53:31.811200</ts>
    <user>Leopoldo</user>
    <text>15| port module Test exposing (..)
         ^
I was expecting to see a lower-case variable, like `x` or `user`</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:53:42.811400</ts>
    <user>Ruthann</user>
    <text>what's above line 15?</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:54:06.811900</ts>
    <user>Ruthann</user>
    <text>your module line should be the first line ( assuming the 15 is the line number )</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:54:35.812200</ts>
    <user>Leopoldo</user>
    <text>``` import Browser
import Browser.Dom exposing (Viewport)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Json.Decode as Json
import Task

port module Test exposing (..)

port fromJS : (() -&amp;gt; msg) -&amp;gt; Sub msg

type alias Model =
    { viewport : Viewport }```</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:55:03.812800</ts>
    <user>Ruthann</user>
    <text>move your module line to the first line, your imports go under it, this isn't JS!!!! :smile:</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:55:58.813200</ts>
    <user>Ruthann</user>
    <text>wait.. that's only 9 lines, is there something else in those 6 lines you're not showing me</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:56:51.813600</ts>
    <user>Leopoldo</user>
    <text>i have readjusted it, that's all the code &lt;https://gist.github.com/afidegnum/b6e09fb8c137fe281a6be59f37a12026&gt;</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:58:05.814100</ts>
    <user>Earlean</user>
    <text>`module Test exposing (..)` on the first line should be `port module Test exposing (..)`</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:58:22.814500</ts>
    <user>Leopoldo</user>
    <text>so port is replacing module, right ?</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:58:40.814900</ts>
    <user>Earlean</user>
    <text>you're declaring that this is a 'port module' not a regular 'module'</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T02:58:46.815100</ts>
    <user>Leopoldo</user>
    <text>ah, ok</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T03:00:48.815400</ts>
    <user>Leopoldo</user>
    <text>thanks a lot, everything is good now</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T03:08:14.815700</ts>
    <user>Leopoldo</user>
    <text>since a lot can be accomplished in elm, when do we use ports?</text>
  </message>
  <message conversation_id="950">
    <ts>2019-03-27T03:12:37.816900</ts>
    <user>Ruthann</user>
    <text>places where we do it:
- localstorage
- opening a new tab
- saving file to disk
- calling 3rd party js lib
- focusing on html element ( can do this inside elm in 19 )</text>
  </message>
  <message conversation_id="951">
    <ts>2019-03-27T05:08:13.819100</ts>
    <user>Yang</user>
    <text>hy everyone. is something wrong with the elm-test watch command? when i start it first time, by doing `elm-test --watch` in my project folder  it shows me my tests and everything is ok - but when i make a change  - and save the file - it doesnt detect that change. It doesnt watch basically ..  am i doing something wrong here? Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="952">
    <ts>2019-03-27T05:15:29.819200</ts>
    <user>Huong</user>
    <text>If you're on windows, that's a known issue that got introduced by upgrading the chokidar dependency to 2.0. There's an issue for it, so it'll get resolved!</text>
  </message>
  <message conversation_id="951">
    <ts>2019-03-27T05:22:01.819400</ts>
    <user>Yang</user>
    <text>hmm ok, is there any temporary hack available?</text>
  </message>
  <message conversation_id="953">
    <ts>2019-03-27T06:08:48.821200</ts>
    <user>Caron</user>
    <text>Doing some tests right now, and I would really like to be able to make some exports visible for tests only.
Has anyone found a better solution to this thing than using repulsive names like INTERNAL or KILLSKITTEN for this kind of exported things ?</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:28:53.821600</ts>
    <user>Virgie</user>
    <text>you mean in a package?</text>
  </message>
  <message conversation_id="953">
    <ts>2019-03-27T06:33:40.824000</ts>
    <user>Antonette</user>
    <text>&lt;@Caron&gt; I bumped into the same kind of problem and found no better solution than either work around it (not using the internals in tests) or use an ugly trick (making a module that holds the internals that only the tests see, then exposing what I wanted exposed to the outside in a public module that is just a proxy for the actual internal module).</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:33:59.824300</ts>
    <user>Antonette</user>
    <text>If you find a better way, I'm interested :slightly_smiling_face:</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:39:37.824700</ts>
    <user>Caron</user>
    <text>I don't find a better way :disappointed:</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:41:25.826700</ts>
    <user>Antonette</user>
    <text>Then unless you really have a good reason to put internals into tests (i.e. testing that data is constructed in the exact way you want on an opaque type) I suggest you consider the first route (making tests that work just like a user would and not look into the innards of your library).</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:42:06.827500</ts>
    <user>Caron</user>
    <text>&lt;@Virgie&gt; no, I mean inside of an app, if you have a module that exposes some things for general purpose and some things for test only.</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:43:32.828600</ts>
    <user>Caron</user>
    <text>&lt;@Antonette&gt; I agree with you on a general basis, but I need to test the internal logic of the module itself, because it is not trivial.</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:44:13.829700</ts>
    <user>Caron</user>
    <text>and I don't want to package it away considering the other problems introduced by that route.</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:44:39.830200</ts>
    <user>Antonette</user>
    <text>Ok. Since it's something inside your own app, there's no shame in exposing things you wouldn't in a library anyways.</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:44:58.830700</ts>
    <user>Antonette</user>
    <text>(opaque types and such are best used in libs imo)</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:46:21.832200</ts>
    <user>Caron</user>
    <text>The offender is indeed an opaque type. I feel like the application is best served by having it, in order to mark clearly that thing as not for use everywhere (it used to be, and it was a mess).</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:48:18.834400</ts>
    <user>Antonette</user>
    <text>Maybe this opaque type would be better extracted in a lib then :smiling_imp:</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:48:56.835100</ts>
    <user>Antonette</user>
    <text>(ok, this may very well be pushing it a bit far depending on context which I don't know)</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:49:19.835500</ts>
    <user>Nana</user>
    <text>one way to do it could be:
```
type Opaque = Opaque

privateFn = stuff

testExports = { opaque = Opaque, privateFn = privateFn }
```</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:50:01.836000</ts>
    <user>Nana</user>
    <text>(not technically idiot-proof but makes it pretty clear what you're allowed to use in regular code)</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:50:41.836300</ts>
    <user>Caron</user>
    <text>Oooh that's a nice way of doing things</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T06:57:37.836900</ts>
    <user>Antonette</user>
    <text>Nice way to wrap those for tests indeed.</text>
  </message>
  <message conversation_id="955">
    <ts>2019-03-27T07:07:04.837000</ts>
    <user>Miguelina</user>
    <text>I tried the loop variantion with some modifications and wrapped it in another loop to parse a string like this: "aAAABBBCC  " and create and output:  ["a", "AAA", "BBB", "CC", "  "] but it ends up in an infinite loop. Any hints? &lt;https://gist.github.com/ni-ko-o-kin/68793b1b9bd76f454028a56f2e6264cc&gt;</text>
  </message>
  <message conversation_id="955">
    <ts>2019-03-27T07:42:52.837500</ts>
    <user>Velia</user>
    <text>It's because the parser always succeeds (chomping `""` on an empty string or end of string), so it never stops in a loop.</text>
  </message>
  <message conversation_id="955">
    <ts>2019-03-27T07:49:17.837800</ts>
    <user>Velia</user>
    <text>It behaves like &lt;https://package.elm-lang.org/packages/elm/parser/latest/Parser#chompWhile&gt;, see the note about it never failing.</text>
  </message>
  <message conversation_id="954">
    <ts>2019-03-27T08:37:12.838200</ts>
    <user>Velia</user>
    <text>It should be modified to fail on empty strings, like this:
```
chompWhileSameLoop : Maybe Char -&amp;gt; Parser (Step (Maybe Char) ())
chompWhileSameLoop maybeChar =
    case maybeChar of
        Just char -&amp;gt;
            oneOf
                [ getChompedString (chompIf (\c -&amp;gt; char == c))
                    |&amp;gt; andThen chompWhileSameNextChar
                , succeed (Done ())
                ]

        Nothing -&amp;gt;
            getChompedString (chompIf (\_ -&amp;gt; True))
                |&amp;gt; andThen chompWhileSameNextChar
```
Because `chompIf (\_ -&amp;gt; True)` will then fail on end of string.

Here is the full module:
```
module Same exposing (chompWhileSame, groupSame, zeroOrMore)

import Parser exposing (..)


groupSame : Parser (List String)
groupSame =
    zeroOrMore (getChompedString chompWhileSame)


zeroOrMore : Parser a -&amp;gt; Parser (List a)
zeroOrMore item =
    loop [] (zeroOrMoreHelp item)


zeroOrMoreHelp : Parser a -&amp;gt; List a -&amp;gt; Parser (Step (List a) (List a))
zeroOrMoreHelp item revItems =
    oneOf
        [ succeed (\a -&amp;gt; Loop (a :: revItems))
            |= item
        , succeed ()
            |&amp;gt; map (\_ -&amp;gt; Done (List.reverse revItems))
        ]


chompWhileSame : Parser ()
chompWhileSame =
    loop Nothing chompWhileSameLoop


chompWhileSameLoop : Maybe Char -&amp;gt; Parser (Step (Maybe Char) ())
chompWhileSameLoop maybeChar =
    case maybeChar of
        Just char -&amp;gt;
            oneOf
                [ getChompedString (chompIf (\c -&amp;gt; char == c))
                    |&amp;gt; andThen chompWhileSameNextChar
                , succeed (Done ())
                ]

        Nothing -&amp;gt;
            getChompedString (chompIf (\_ -&amp;gt; True))
                |&amp;gt; andThen chompWhileSameNextChar

chompWhileSameNextChar : String -&amp;gt; Parser (Step (Maybe Char) ())
chompWhileSameNextChar str =
    case String.uncons str of
        Nothing -&amp;gt;
            succeed (Done ())

        Just ( c, _ ) -&amp;gt;
            succeed (Loop (Just c))
```
Then in `elm repl`:
```
&amp;gt; run groupSame  "aAAABBBCC  "
Ok ["a","AAA","BBB","CC","  "]
    : Result (List DeadEnd) (List String)

&amp;gt; run groupSame  ""
Ok [] : Result (List DeadEnd) (List String)
```</text>
  </message>
  <message conversation_id="956">
    <ts>2019-03-27T11:31:38.840500</ts>
    <user>Celestina</user>
    <text>&lt;https://www.slant.co/topics/558/~best-functional-languages-to-learn-for-web-frontend-development&gt;</text>
  </message>
  <message conversation_id="956">
    <ts>2019-03-27T11:37:50.841000</ts>
    <user>Kris</user>
    <text>I didn’t even know there were 12 </text>
  </message>
  <message conversation_id="956">
    <ts>2019-03-27T11:42:00.841600</ts>
    <user>Teddy</user>
    <text>There are exactly 12, so clearly, they are the best.</text>
  </message>
  <message conversation_id="957">
    <ts>2019-03-27T11:50:15.841900</ts>
    <user>Sadie</user>
    <text>Doesn't anyone uses Elm and Firebase together ?</text>
  </message>
  <message conversation_id="956">
    <ts>2019-03-27T11:51:14.842200</ts>
    <user>Rosa</user>
    <text>I do with ports, or firebase rest api. there was a elm-firebase package but i dont know its current status</text>
  </message>
  <message conversation_id="956">
    <ts>2019-03-27T11:51:57.842500</ts>
    <user>Chae</user>
    <text>I have as a PoC using ports and I really enjoyed it</text>
  </message>
  <message conversation_id="956">
    <ts>2019-03-27T11:53:03.842700</ts>
    <user>Sadie</user>
    <text>Are you using the subscription API for that?</text>
  </message>
  <message conversation_id="956">
    <ts>2019-03-27T11:55:48.842900</ts>
    <user>Lynne</user>
    <text>I am using Firestore via ports, works fine :+1: Tried both one time fetching and subscriptions - all ok</text>
  </message>
  <message conversation_id="956">
    <ts>2019-03-27T12:01:34.843300</ts>
    <user>Sadie</user>
    <text>If one of you would have a bit of time to write a small article about this setup it might be really useful :+1:</text>
  </message>
  <message conversation_id="958">
    <ts>2019-03-27T12:14:38.843700</ts>
    <user>Ashton</user>
    <text>I made a message board with firebase + Elm. Heres the repo; this is the JS code specifically showing what the ports on the JS side look like: &lt;https://github.com/Chadtech/Tieugra/blob/master/src/app.js&gt;</text>
  </message>
  <message conversation_id="958">
    <ts>2019-03-27T12:19:39.843900</ts>
    <user>Teddy</user>
    <text>&lt;@Sadie&gt; Someone on my team was just working on a blog post that covers this, I'll let you know when they've finished it and we've published it.</text>
  </message>
  <message conversation_id="956">
    <ts>2019-03-27T12:19:54.844100</ts>
    <user>Sadie</user>
    <text>Awesome thanks</text>
  </message>
  <message conversation_id="958">
    <ts>2019-03-27T12:21:45.844300</ts>
    <user>Ashton</user>
    <text>Theres a pattern to how I went about using the firebase SDK, and how Ive gone about using other SDKs, which I guess is just, a direct correlation of Elm ports to fundamental operations I want to use the SDK for.</text>
  </message>
  <message conversation_id="958">
    <ts>2019-03-27T12:22:07.844500</ts>
    <user>Ashton</user>
    <text>And then there has to be a port back into Elm with the response.</text>
  </message>
  <message conversation_id="958">
    <ts>2019-03-27T12:22:42.844700</ts>
    <user>Ashton</user>
    <text>All the important logic is in Elm, and then a lot of tedious code that just ties the SDK api to Elm, for the most part.</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T13:18:28.846200</ts>
    <user>Florencia</user>
    <text>I wonder if a `Dict.get` with flipped parameters would be worth having at least in `dict-extra`. It (and `Set.member`) is consistently the one reason I resort to using `flip`</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T13:18:57.846800</ts>
    <user>Florencia</user>
    <text>```
getIn : Dict comparable a -&amp;gt; comparable -&amp;gt; Maybe a
getIn dict key =
    Dict.get key dict
```</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T13:19:54.847700</ts>
    <user>Florencia</user>
    <text>reason being I have to do some work to get to the key, and then the code wants to be `|&amp;gt; Maybe.map (Dict.get dict)` but I have to do `|&amp;gt; Maybe.map (flip Dict.get dict)`</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T13:36:38.850800</ts>
    <user>Huong</user>
    <text>I think there's a point to be made for changing it in the core package. We put the "thing to transform" last for pipeline friendliness. Based on my experience, it's the key that's usually being transformed, not the dict.</text>
  </message>
  <message conversation_id="960">
    <ts>2019-03-27T13:36:55.851200</ts>
    <user>Huong</user>
    <text>So long story short - yeah, agreed</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T13:39:12.851800</ts>
    <user>Florencia</user>
    <text>Glad to hear!</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T13:40:13.852800</ts>
    <user>Florencia</user>
    <text>I think I can at least search for existing and/or create an issue, so that the Evan has it somewhere back in his head :slightly_smiling_face:</text>
  </message>
  <message conversation_id="961">
    <ts>2019-03-27T14:31:43.853000</ts>
    <user>Elisabeth</user>
    <text>Thx a lot for the great help! Much appreciated! :grinning:</text>
  </message>
  <message conversation_id="961">
    <ts>2019-03-27T14:34:40.853200</ts>
    <user>Velia</user>
    <text>You're welcome. I just realized I misread your initial question and my function was doing the reverse of what your were asking:sweat_smile:</text>
  </message>
  <message conversation_id="962">
    <ts>2019-03-27T15:25:35.855300</ts>
    <user>Leopoldo</user>
    <text>i have changed the current function to package a list of div rather so i can incorporate an additional one at &lt;https://gist.github.com/afidegnum/8dffd22101f52283b603111f8377eb0c#file-bulkit-elm-L287&gt;
but i tried my best to changed the previous html elements to a list even changed their type signature but it wasn't successful, please what do i change for this error to go?
``` 
This `pageContent` value is a:
    List (Html Msg)
But all the previous elements in the list are:
    Html msg

```</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:27:03.856000</ts>
    <user>Florencia</user>
    <text>&lt;@Leopoldo&gt; which line does the compiler complain about?</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:27:40.856300</ts>
    <user>Leopoldo</user>
    <text>the compiler is complaining about &lt;https://gist.github.com/afidegnum/8dffd22101f52283b603111f8377eb0c#file-bulkit-elm-L188&gt;</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:31:46.857300</ts>
    <user>Florencia</user>
    <text>in there, you have a list with `Html msg` inside (`mainNav ...`) and next to it `List (Html msg)` (that's the `pageContent`)</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:32:02.857800</ts>
    <user>Florencia</user>
    <text>in Elm, all elements of lists have to be of the same type</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:32:24.858300</ts>
    <user>Florencia</user>
    <text>think of it as `[1, [2, 3]]`</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:32:42.858700</ts>
    <user>Florencia</user>
    <text>so either you can do `1 :: [2, 3]` or `[1] ++ [2, 3]`</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:32:51.859200</ts>
    <user>Leopoldo</user>
    <text>that' too didn't work</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:32:54.859300</ts>
    <user>Florencia</user>
    <text>to get `[1, 2, 3]`</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:32:59.859500</ts>
    <user>Leopoldo</user>
    <text>wait, where?</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:33:13.859800</ts>
    <user>Leopoldo</user>
    <text>for `1 :: [2, 3]` or `[1] ++ [2, 3]`</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:33:30.860400</ts>
    <user>Florencia</user>
    <text>in line 188, you have to somehow cobine `mainNav ...` and `pageContent` into one list</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:33:50.860800</ts>
    <user>Florencia</user>
    <text>either `mainNav ... :: pageContent` or `[mainNav ...] ++ pageContent`</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:34:22.861100</ts>
    <user>Leopoldo</user>
    <text>ok, let me check that</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:34:38.861600</ts>
    <user>Florencia</user>
    <text>(sorry, that metaphor with numbers probably didn't help :sweat_smile: )</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:34:41.861800</ts>
    <user>Leopoldo</user>
    <text>i was rather coning or concatenating at other sections</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:36:13.862100</ts>
    <user>Leopoldo</user>
    <text>oh, it went bad again</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:36:28.862500</ts>
    <user>Leopoldo</user>
    <text>The 1st argument to `heroDiv` is not what I expect:
188|             [ heroDiv [ mainNav model.route model.viewport :: pageContent ] ]
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This argument is a list of type:
    List (List (Html Msg))
But `heroDiv` needs the 1st argument to be:
    List (Html Msg)</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:37:07.863100</ts>
    <user>Leopoldo</user>
    <text>that's what has been happening, i have been rotating or juggling signatures and lists,</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:38:35.863700</ts>
    <user>Florencia</user>
    <text>`mainNav ... :: pageContent` creates a list</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:38:42.864000</ts>
    <user>Florencia</user>
    <text>and you're wrapping that in yet another list</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:38:46.864300</ts>
    <user>Florencia</user>
    <text>so that outer one can go away</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:38:53.864500</ts>
    <user>Florencia</user>
    <text>(eg. be replaced with parentheses)</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:39:22.864800</ts>
    <user>Leopoldo</user>
    <text>OK</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:48:22.865000</ts>
    <user>Leopoldo</user>
    <text>thanks a lot, it works</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:49:30.865600</ts>
    <user>Florencia</user>
    <text>you're welcome :slightly_smiling_face: the error messages usually give you all the info you need!</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:52:12.865900</ts>
    <user>Leopoldo</user>
    <text>some infos are tough to decrypt :slightly_smiling_face:</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T15:58:39.868800</ts>
    <user>Yang</user>
    <text>im trying to create a custom fuzzer for a union type. Say i have `Number = One | Two | Three` how can i create a function - which generates a list of all elements as in: `[One, Two, Three]` but i want this list built programmatically? I want to not think about adding `Four` to the list manually because for sure im gonna forget it. I much rather let the compiler do it for me. So how is this possible?</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:02:18.869700</ts>
    <user>Nery</user>
    <text>why can't i `{ guy.address | city = "San Francisco" }`</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:02:51.870400</ts>
    <user>Nery</user>
    <text>i must instead do
```
let
   addr = guy.address
in
   { addr | city = "San Fran" }
```</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:04:05.872000</ts>
    <user>Florencia</user>
    <text>&lt;@Nery&gt; IIRC there"s no reason it shouldn't be technically possible, it's just language syntax decision</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:04:28.872900</ts>
    <user>Florencia</user>
    <text>can't find the discussion with the rationale though</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:04:33.873100</ts>
    <user>Nery</user>
    <text>ultimately i'd like `{ guy | address = { guy.address | city = "SF" }}`
thx &lt;@Florencia&gt; you thinking purposeful decision or incidental</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:04:39.873300</ts>
    <user>Nery</user>
    <text>ah k purposeful.. thx</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:07:07.877200</ts>
    <user>Florencia</user>
    <text>&lt;@Yang&gt; you can't create it programatically (I'd also love it if that was possible). Create the list yourself and have a function nearby that pattern matches on the type and returns "Yes I've added a new element to the enumeration above" :D (The compiler will warn you when you add `Four` to the type, because of that function)</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:08:55.878500</ts>
    <user>Florencia</user>
    <text>```
numCheck : Number -&amp;gt; String
numCheck num =
    case num of
        One -&amp;gt; "I swear I did it"
        ...
```</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:11:30.879300</ts>
    <user>Yang</user>
    <text>yep, thanks did that for now.. hmm would be awesome to have some more meta-programming abilities in elm :smile:</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:15:02.881000</ts>
    <user>Hang</user>
    <text>Hi,
I wanted to as about decoding `json` to `dict`. Specifically why, when I run the decoder, there is `Dict.fromList` rather then `Dict`?</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:15:53.881600</ts>
    <user>Huong</user>
    <text>You mean when using `Debug.log`?</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:16:43.881800</ts>
    <user>Hang</user>
    <text>Well that was when I've noticed it, now, I've tried to replicate it in repl and it appears to still be there</text>
  </message>
  <message conversation_id="959">
    <ts>2019-03-27T16:20:46.882500</ts>
    <user>Huong</user>
    <text>Right, that's just the way Dict's are shown in human readable form</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:21:26.882700</ts>
    <user>Huong</user>
    <text>It's either that, or using made-up syntax which doesn't exist in Elm, or exposing the internal implementation details (which would be strange)</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:21:41.882900</ts>
    <user>Huong</user>
    <text>So don't worry about it, it's just Elm trying to be helpful :slightly_smiling_face:</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:22:24.883100</ts>
    <user>Huong</user>
    <text>There is one more option - if you don't mind writing an exhaustive function and calling it with a helper - &lt;https://ellie-app.com/56jJ646mszfa1&gt;</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:22:34.883300</ts>
    <user>Yang</user>
    <text>we could potentially show a dict like this:
```
"one"  |  1
"two"  |  2
```
But would b a pain in the ass to parse. If you copy paste the Dict.fromList example you endup with valid elm code. What i have above is not elm syntax .. is just something easy to see. So is not useful as code. Maybe this is part of the reason.</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:23:10.883500</ts>
    <user>Huong</user>
    <text>you can still mess it up, of course, but at least the compiler can remind you</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:31:27.883700</ts>
    <user>Hang</user>
    <text>Ok. thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="963">
    <ts>2019-03-27T16:34:51.883900</ts>
    <user>Florencia</user>
    <text>yeah those two ways essentially just buy the compiler check</text>
  </message>
  <message conversation_id="964">
    <ts>2019-03-27T18:53:00.885700</ts>
    <user>Carter</user>
    <text>what are popular remoting / RPC alternatives for elm except JSON RPC. Preferably something that has an Interface Description Language (IDL) ?</text>
  </message>
  <message conversation_id="965">
    <ts>2019-03-27T23:44:34.000100</ts>
    <user>Nana</user>
    <text>GraphQL?</text>
  </message>
  <message conversation_id="966">
    <ts>2019-03-28T01:32:04.000800</ts>
    <user>Nga</user>
    <text>```&amp;gt; x = -2175897600000                  
-2175897600000 : number
&amp;gt; x // 1000
2119069696 : Int
&amp;gt; x / 1000          
-2175897600 : Float```

can someone please explain this output to me? the bottom number is the correct value, but I want it as an Int. Thought // was the way to do that, but it gives a different value. Don't really understand that value though. It should be the same value AFAIK.</text>
  </message>
  <message conversation_id="966">
    <ts>2019-03-28T01:33:18.001100</ts>
    <user>Nga</user>
    <text>Is this an Elm bug or am I misunderstanding //?</text>
  </message>
  <message conversation_id="966">
    <ts>2019-03-28T01:40:51.001800</ts>
    <user>Nga</user>
    <text>Interesting. Apparently that's causing a silent overflow wrap. Found this: &lt;https://github.com/elm/compiler/issues/1832&gt;

```This was "solved" by defining -2^31 to 2^31 - 1 as safe range for Int math operations. Time.posixToMillis returns larger values, so math operations on those values are not safe.```

That answers my question.</text>
  </message>
  <message conversation_id="967">
    <ts>2019-03-28T03:31:53.003200</ts>
    <user>Kami</user>
    <text>Hey peeps, not sure if this is the correct channel for this but I have noticed that there is no `South African` channel on this elm slack. Any others from South Africa that would be keen to have a channel where we could post meetups and get the community together over here?</text>
  </message>
  <message conversation_id="966">
    <ts>2019-03-28T04:32:12.003900</ts>
    <user>Earnest</user>
    <text>I think you can request new channels in &lt;#C3FKL0A8H|admin-help&gt;</text>
  </message>
  <message conversation_id="968">
    <ts>2019-03-28T05:24:00.004900</ts>
    <user>Kimbery</user>
    <text>Is there any way to get a task from a random generator on 0.19?</text>
  </message>
  <message conversation_id="968">
    <ts>2019-03-28T05:24:38.005300</ts>
    <user>Kimbery</user>
    <text>(I saw &lt;https://package.elm-lang.org/packages/NoRedInk/elm-random-extra/latest/Random-Task&gt; but it's 0.18)</text>
  </message>
  <message conversation_id="968">
    <ts>2019-03-28T05:28:34.005400</ts>
    <user>Huong</user>
    <text>There is, but it's not something I'd recommend, as it essentially means the "random" result is just a function of time.

The trick is to use `Time.now`, turn that into an Int (`Time.posixToMillis`), into a seed (`Random.initialSeed`) and run the generator with that</text>
  </message>
  <message conversation_id="968">
    <ts>2019-03-28T05:29:21.005600</ts>
    <user>Huong</user>
    <text>0.16 even :smile:</text>
  </message>
  <message conversation_id="968">
    <ts>2019-03-28T05:30:40.005800</ts>
    <user>Kimbery</user>
    <text>ahaha, right</text>
  </message>
  <message conversation_id="968">
    <ts>2019-03-28T05:32:50.007500</ts>
    <user>Kimbery</user>
    <text>On a related note, when you land on a package via google there's currently no way of knowing which versions of elm it's compatible with (e.g. &lt;https://package.elm-lang.org/packages/NoRedInk/elm-random-extra/latest/Random-Task&gt;). AFAICT clicking through to the repo and checking elm-package.json or elm.json is the fastest way to find out. Has there been any discussion about adding the elm versions to the package page?</text>
  </message>
  <message conversation_id="969">
    <ts>2019-03-28T06:22:11.008700</ts>
    <user>Allie</user>
    <text>what do folks use to write tests for json decoders?  elm test (elm-explorations/test) or something else? Thx</text>
  </message>
  <message conversation_id="969">
    <ts>2019-03-28T06:24:35.008800</ts>
    <user>Timika</user>
    <text>I haven’t tested my decoders, but elm-test would be my way to go.</text>
  </message>
  <message conversation_id="969">
    <ts>2019-03-28T06:25:24.009000</ts>
    <user>Huong</user>
    <text>if you have matching encoder/decoder pairs, a fun test is to generate random data, encode it, decode it, and check that the decoded result is equal to the original input</text>
  </message>
  <message conversation_id="969">
    <ts>2019-03-28T06:26:27.009200</ts>
    <user>Allie</user>
    <text>&lt;@Timika&gt; thanks</text>
  </message>
  <message conversation_id="969">
    <ts>2019-03-28T06:27:21.009400</ts>
    <user>Allie</user>
    <text>&lt;@Huong&gt; nice idea.  Don't have the (function + inverse) pattern unfortunately but thanks for suggestion</text>
  </message>
  <message conversation_id="970">
    <ts>2019-03-28T06:49:14.009700</ts>
    <user>Velia</user>
    <text>&lt;https://discourse.elm-lang.org/t/put-a-banner-on-elm-lang-packages-mentioning-0-18-version/3341/2&gt;</text>
  </message>
  <message conversation_id="970">
    <ts>2019-03-28T06:50:06.009900</ts>
    <user>Velia</user>
    <text>&lt;https://github.com/elm/package.elm-lang.org/pull/285&gt;</text>
  </message>
  <message conversation_id="971">
    <ts>2019-03-28T08:41:19.010800</ts>
    <user>Nga</user>
    <text>Is there an easier way to do something like this? Making a function that compares two types but ignores values

```match : Route -&amp;gt; Route -&amp;gt; Bool
match one two =
    case one of
        Home _ _ -&amp;gt;
            case two of
                Home _ _-&amp;gt;
                    True
                _ -&amp;gt;
                    False

        Blog _ -&amp;gt;
            case two of
                Blog _ -&amp;gt;
                    True
                _ -&amp;gt;
                    False
```</text>
  </message>
  <message conversation_id="971">
    <ts>2019-03-28T08:45:23.012100</ts>
    <user>Jin</user>
    <text>You can match on a tuple of `one` and `two`, like
```
match : Route -&amp;gt; Route -&amp;gt; Bool
match one two =
    case (one, two) of
        (Home _ _, Home _ _) -&amp;gt; ...
```</text>
  </message>
  <message conversation_id="971">
    <ts>2019-03-28T08:47:01.012700</ts>
    <user>Sharon</user>
    <text>Home and Blog are actually values here, not types, but we get what you mean</text>
  </message>
  <message conversation_id="971">
    <ts>2019-03-28T08:48:17.013400</ts>
    <user>Nga</user>
    <text>It's a worthwhile distinction actually, because I need a value to do comparisons. Thanks &lt;@Jin&gt; that does help.</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:20:48.014200</ts>
    <user>Sharri</user>
    <text>is there a String size limit or a limit to a string size when set over the program Flags ?</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:21:09.014700</ts>
    <user>Sharri</user>
    <text>I'm having a weird issue where I send a large blob of text as flags and only parts of the string get to Elm</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:24:29.014800</ts>
    <user>Huong</user>
    <text>It's just passed along, so that would be the string size limit of the JS VM. Which large enough you're exceedingly unlikely to bump into it</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:25:15.015500</ts>
    <user>Huong</user>
    <text>That seems weird. Is it actual text, or ..? How are you checking the contents and noticing the difference?</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:26:08.016400</ts>
    <user>Sharri</user>
    <text>I'm taking some text I output from the server into a div, reading the text with .innerHTML, decoding html entities and the passing it to elm</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:26:28.016900</ts>
    <user>Sharri</user>
    <text>I can print the text with `console.log` before passing it and it is exactly what I expect</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:27:38.017500</ts>
    <user>Sharri</user>
    <text>probably it has to do with wrong html decoding, but I just find weird that the string is just truncated on th elm side with no warning</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:28:27.018500</ts>
    <user>Huong</user>
    <text>Elm doesn't do random string truncation, as far as I'm aware. if you could try to get a minimal example of your issue running on Ellie, I'd be happy to take a look!</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:29:05.018900</ts>
    <user>Sharri</user>
    <text>I need to take a break now, but I'll get to it when I'm back</text>
  </message>
  <message conversation_id="972">
    <ts>2019-03-28T09:29:09.019100</ts>
    <user>Sharri</user>
    <text>thanks for your help</text>
  </message>
  <message conversation_id="973">
    <ts>2019-03-28T10:39:53.019900</ts>
    <user>Gertrude</user>
    <text>so uh, fun warning: Firefox 66 breaks websockets on localhost. If you find your hot reloading stop working ... that might be why. &lt;https://support.mozilla.org/en-US/questions/1253577&gt;</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:40:38.023600</ts>
    <user>Yang</user>
    <text>hey everyone, im trying to make a function that counts how many digits exist after dot  in a floting point number.
i have 2 tests:
```
-- 8 digits
    , test "1.12345678 has 8 digits after dot" &amp;lt;|
        \() -&amp;gt;
            Utils.countDigitsAfterDot 1.12345678
                |&amp;gt; Expect.equal 8

 -- 9 digits
    , test "1.123456789 has 9 digits after dot" &amp;lt;|
        \() -&amp;gt;
            Utils.countDigitsAfterDot 1.123456789
                |&amp;gt; Expect.equal 9
```
The function is:
```
countDigitsAfterDot : Float -&amp;gt; Int
countDigitsAfterDot float =
    let
        recursiveCreature : Float -&amp;gt; Int -&amp;gt; Int
        recursiveCreature nr acc =
            if exactFloat nr then
                -- we reached the end
                acc

            else
                recursiveCreature (nr * 10) (acc + 1)
    in
    recursiveCreature float 0


exactFloat : Float -&amp;gt; Bool
exactFloat f =
    toFloat (floor f) == f
```
This is my implementation. But is not working for the 9 digit. It sais i have 14 digits. not 9. So how is this possible? I mention that it works for all cases but only up until 8. As soon as i reach 9 digits its messed up. Any insight into whats happening here?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:40:46.023800</ts>
    <user>Yang</user>
    <text>thanks:)</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:43:39.023900</ts>
    <user>Nana</user>
    <text>could it be because of binary/decimal conversion?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:43:59.024100</ts>
    <user>Nana</user>
    <text>for example `0.1 + 0.2 == 0.30000000000000004`</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:45:36.024300</ts>
    <user>Yang</user>
    <text>yep just tested a few of this.. is rely wired. for example - a `0.00000000000001` has 14 digits but it sais it has 30..</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:46:33.024500</ts>
    <user>Yang</user>
    <text>and if you go over 15 .. elm format removes them, and doesnt let you type a higher number.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:47:32.024700</ts>
    <user>Yang</user>
    <text>actually no. over around 30  seems like.  is when elm format removes it.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:47:48.024900</ts>
    <user>Nana</user>
    <text>I think recursively dividing by 10 is bound to cause problems</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:48:52.025200</ts>
    <user>Nana</user>
    <text>better to convert it to a String and then count the digits</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:49:15.025400</ts>
    <user>Yang</user>
    <text>need to think of a differen timplementation then.. let me know if you have a better suggestion :slightly_smiling_face:</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:49:25.025600</ts>
    <user>Yang</user>
    <text>aha.. ok gonna see if that works.</text>
  </message>
  <message conversation_id="975">
    <ts>2019-03-28T11:57:11.029400</ts>
    <user>Linda</user>
    <text>Hey all, I'm trying to understand how virtualized lists can work in Elm. A virtual list being a list that doesn't show all it's rows at the same time.

Is there something like this (&lt;http://bvaughn.github.io/react-virtualized/#/components/List&gt;) that already exists for dynamically sized content?

Imagine a chat room, with a bunch of messages. Basically a list with each row being a message of text. The rows are dynamically sized because we don't know the size until the browser renders it.

The current virtual list implementations I've seen require knowing the size of the rows. Which doesn't work for this problem. Is there some other project I've missed, or is there another way of doing this?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T11:59:14.029500</ts>
    <user>Yang</user>
    <text>pff disaster, it oconverts it to floating scientific notation..:
```
&amp;gt; 0.00000001 |&amp;gt; String.fromFloat
"1e-8" : String
```</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:01:34.030000</ts>
    <user>Ghislaine</user>
    <text>You could create a capped list, don’t you?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:02:03.030200</ts>
    <user>Linda</user>
    <text>What is a capped list? Do you mean just truncating the list?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:02:29.030400</ts>
    <user>Ghislaine</user>
    <text>Yeah</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:03:42.030600</ts>
    <user>Ghislaine</user>
    <text>I mean, its not the same as having a virtualized list of components but it could do the job.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:04:01.030800</ts>
    <user>Linda</user>
    <text>That's not quite what I want. The user should be able to scroll all the way up to the first message, and then all the way down to the last message. They should have access to all the items in the list. The VirtualList would do the hard work of just rendering just the visible rows.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:04:05.031000</ts>
    <user>Ghislaine</user>
    <text>if someone scrolls to the top then u load the older messages</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:04:27.031200</ts>
    <user>Ghislaine</user>
    <text>and so on</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:04:32.031400</ts>
    <user>Linda</user>
    <text>But if they keep scrolling to the top, we want to stop rendering the newer messages</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:04:41.031600</ts>
    <user>Linda</user>
    <text>since it's expensive to keep all these nodes around</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:05:04.031800</ts>
    <user>Ghislaine</user>
    <text>that’s why you will always keep this capped list synced with context</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:05:43.032000</ts>
    <user>Lynne</user>
    <text>So you basically want to prevent list from changing its width when it is scrolled, is it correct?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:06:13.032200</ts>
    <user>Linda</user>
    <text>height* if you imagine a vertical list with dynamically sized rows</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:06:43.032400</ts>
    <user>Linda</user>
    <text>If you have this capped list, your scrolling would be broken I think</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:06:57.032600</ts>
    <user>Yang</user>
    <text>from what i see - 2 concerns get mixed up here. 1. is what content we show to the user. 2. what elements we actually have in the list.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:06:58.032800</ts>
    <user>Ghislaine</user>
    <text>if the user is not at the very bottom of the chat then u dont need to append the new messages to the shown capped list but instead to a recent messages list (hidden) maybe</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:07:08.033100</ts>
    <user>Lynne</user>
    <text>Ah, okey, so you want the chat window to have the same height all the time?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:07:09.033300</ts>
    <user>Linda</user>
    <text>Basically it should look like all the content is there to the user, but under the hood it should be efficient in how it is displayed.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:07:33.033500</ts>
    <user>Linda</user>
    <text>Yes. With an inner scroll</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:07:47.033700</ts>
    <user>Lynne</user>
    <text>Why not fixing it some value then?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:08:02.033900</ts>
    <user>Linda</user>
    <text>Because the content is dynamically sized.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:08:07.034100</ts>
    <user>Linda</user>
    <text>Look at this demo: &lt;http://bvaughn.github.io/react-virtualized/#/components/List&gt;</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:08:21.034300</ts>
    <user>Linda</user>
    <text>and click the "Use dynamic row heights"</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:08:57.034500</ts>
    <user>Linda</user>
    <text>Slack does this to display their chat messages</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:09:09.034700</ts>
    <user>Ghislaine</user>
    <text>why would the scroll be broken?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:09:10.034900</ts>
    <user>Lynne</user>
    <text>Well, this example has fixed height</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:09:27.035100</ts>
    <user>Lynne</user>
    <text>`style="box-sizing: border-box; direction: ltr; height: 300px; position: relative; width: 2528px; will-change: transform; overflow: auto;"`</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:09:50.035300</ts>
    <user>Ghislaine</user>
    <text>i’ve used that kind of solution with react but I think this will really over complicate an ELM implementation for such issue</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:09:51.035500</ts>
    <user>Corinne</user>
    <text>&lt;@Yang&gt; I don't think you'll ever escape the limitations of IEEE 754 floating point in JS. Have you considered a BigDecimal-type library approach e.g. &lt;http://mikemcl.github.io/decimal.js&gt; ?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:10:52.035900</ts>
    <user>Linda</user>
    <text>&lt;@Lynne&gt; I'm talking about the heights of the row, not the container</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:11:07.036100</ts>
    <user>Lynne</user>
    <text>I see</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:11:45.036300</ts>
    <user>Linda</user>
    <text>&lt;@Ghislaine&gt; Hmm, so do you think it would need some native js hacking to do this properly in elm?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:12:13.036500</ts>
    <user>Ghislaine</user>
    <text>yeah, I wouldn’t recommend it tbh</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:12:37.036700</ts>
    <user>Linda</user>
    <text>Is there another solution? Rendering all the items in the list isn't feasible</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:12:45.036900</ts>
    <user>Lynne</user>
    <text>I may miss some crucial points of why it has to be done this way but in my imagination there is absolutely no problem doing this in Elm</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:13:22.037100</ts>
    <user>Yang</user>
    <text>you sugest i should buuild the equivalent of this library in elm? or use ports? I cant use ports since this is part of an algoritm that needs to be done in 1 go - i cant wait for async stuff. Still working on the string implementation. Gonna extract that value out of the scientific notation. ex "1e-8" -&amp;gt; 8. since is pretty easy. Gonna see if it passes all my tests. Feels like a hack actually.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:13:33.037300</ts>
    <user>Lynne</user>
    <text>For example, I don't understand why it has some inner scroll container with changing height and absolutely positioning elements with top offset</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:13:55.037500</ts>
    <user>Linda</user>
    <text>That's part of the virtualization</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:14:09.037700</ts>
    <user>Linda</user>
    <text>Not all the items in the list are really there on the dom</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:14:38.037900</ts>
    <user>Lynne</user>
    <text>I understand this, but that's very easy to do in Elm: just do not generate `div`s for elements you don't want to show</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:15:24.038100</ts>
    <user>Yang</user>
    <text>gonna take a break. thanks:)</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:15:28.038300</ts>
    <user>Linda</user>
    <text>hmm, sorry that I'm not expressing myself properly, and thanks for your help.

If you don't generate the divs for elements you don't want to show the size of the scroll container will be incorrect</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:15:29.038500</ts>
    <user>Ghislaine</user>
    <text>that’s basically what I said :stuck_out_tongue:</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:15:36.038700</ts>
    <user>Lynne</user>
    <text>Ah, with dynamic height you won't be able to determine which elements to show correctly</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:15:38.038900</ts>
    <user>Ghislaine</user>
    <text>capped list, show only a subset of data and there u go</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:15:40.039100</ts>
    <user>Lynne</user>
    <text>Now I understand</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:16:11.039300</ts>
    <user>Linda</user>
    <text>&lt;@Ghislaine&gt; a capped list isn't right, because you want to reserve the space for the rows that aren't rendered</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:16:23.039500</ts>
    <user>Linda</user>
    <text>Look at the slack chat, The messages above your messages aren't rendered</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:17:08.039700</ts>
    <user>Linda</user>
    <text>but the scroll shows that you are near the bottom. If you move near the top, the messages at the bottom will disappear from the dom. Even though they've disappeared the scroll size of the container and the scroll bar haven't changed</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:17:36.039900</ts>
    <user>Lynne</user>
    <text>Yep, that's why you need that large container</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:17:41.040100</ts>
    <user>Lynne</user>
    <text>Interesting</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:18:56.040300</ts>
    <user>Linda</user>
    <text>android's recycler view does this, ios' list view does this. Angular has a virtual scroll ...</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:19:02.040500</ts>
    <user>Linda</user>
    <text>Lot's of folks find this pretty darn useful</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:19:34.040700</ts>
    <user>Linda</user>
    <text>Other examples: &lt;https://github.com/domenic/infinite-list-study-group/tree/master/studies&gt;</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:19:48.040900</ts>
    <user>Lynne</user>
    <text>Well, given the popularity of the tools you have mentioned it is not surprising</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:20:48.041100</ts>
    <user>Linda</user>
    <text>&lt;https://package.elm-lang.org/packages/FabienHenon/elm-infinite-list-view/latest&gt;</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:20:53.041300</ts>
    <user>Linda</user>
    <text>Is what I've found for elm</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:21:07.041500</ts>
    <user>Lynne</user>
    <text>Well, you can use that React component I think and build it in your Elm app via custom element</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:21:37.041700</ts>
    <user>Lynne</user>
    <text>Then if you get data in Elm you can send it to port and update your React component with it</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:22:40.042100</ts>
    <user>Lynne</user>
    <text>May work</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:24:05.042300</ts>
    <user>Lynne</user>
    <text>The Elm package you found supports variable height, but you have to calculate it inside your Elm app. I suppose this is not suitable, right?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:24:07.042500</ts>
    <user>Lorilee</user>
    <text>I’ve got to solve this same problem very soon. I’m not really sure how to do it in elm either. I’ve sen that infinite list package you posted, but I can’t tell if it will be easy to work with</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:25:11.042700</ts>
    <user>Linda</user>
    <text>It's not feasible to precalculate the height of markdown-ish text</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:25:29.042900</ts>
    <user>Linda</user>
    <text>It seems really hard to hack this even if you shell out to react</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:25:40.043100</ts>
    <user>Lorilee</user>
    <text>For the item height, there should be some kind of heuristic for a “minimum height”. Say, height of the text</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:26:08.043300</ts>
    <user>Nana</user>
    <text>it'd be exactly the same in JS as in Elm I think</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:26:19.043500</ts>
    <user>Lorilee</user>
    <text>font size of 14px, means that each message will be at minimum 14px</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:26:23.043700</ts>
    <user>Linda</user>
    <text>right, but then you have to take into account code blocks, or formatting options. Then take into account user accessibility settings</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:26:43.043900</ts>
    <user>Lynne</user>
    <text>Well, but as soon as item is rendered first time you can know its height and record it in the app</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:26:55.044100</ts>
    <user>Linda</user>
    <text>yep</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:26:57.044300</ts>
    <user>Lorilee</user>
    <text>As long as the item height is only used as a decision for how soon to load data, it doesn’t have to be exact</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:27:19.044500</ts>
    <user>Linda</user>
    <text>it used to figure out scrolling height and scroll behavior</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:27:44.044700</ts>
    <user>Linda</user>
    <text>Here's a well thought out blurb about this: &lt;https://github.com/bvaughn/react-window/issues/6&gt;</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:29:36.045000</ts>
    <user>Lorilee</user>
    <text>For my current infinite-scroll in an inverted-chat-like-scroll window, I use a mutation observer to change the scroll appropriately when items are added. I wonder if that could be useful. It could be adapted to fire custom DOM events on the scroll container when certain things happen. Lots of JS, but it might be better than a custom element because you could still use elm to display the children.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:29:51.045200</ts>
    <user>Lynne</user>
    <text>So would it work if you started with some heuristics about default height, and then updated it when the item is rendered by the browser?</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:34:25.045900</ts>
    <user>Linda</user>
    <text>yeah that's a decent strategy.</text>
  </message>
  <message conversation_id="974">
    <ts>2019-03-28T12:47:21.046300</ts>
    <user>Lorilee</user>
    <text>As you work on this problem, would you mind sharing what works for you? I’m probably going to see what I can do with the mutation observer path.</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T13:04:37.046500</ts>
    <user>Nana</user>
    <text>I decided to take a shot at it :slightly_smiling_face:
&lt;https://ellie-app.com/56HF2PXcTgga1&gt;</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T13:04:57.046700</ts>
    <user>Nana</user>
    <text>seems to work</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T13:18:10.047000</ts>
    <user>Linda</user>
    <text>sure</text>
  </message>
  <message conversation_id="977">
    <ts>2019-03-28T14:05:06.047300</ts>
    <user>Yang</user>
    <text>hey :smile: passed all my 18 tests :smile: thanks. But i seen 1.45e+33... returns 0. Gonna look more into if thats normal. Maybe my tests are not very good yet. But thanks again.</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T14:20:46.047600</ts>
    <user>Nana</user>
    <text>1.45e33 doesn't have any decimals</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T14:22:17.047800</ts>
    <user>Nana</user>
    <text>no number with a positive exponent should have</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T14:29:02.048000</ts>
    <user>Janiece</user>
    <text>1.234567e3 has a positive exponent but definitely has decimals :slightly_smiling_face:</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T14:29:53.048200</ts>
    <user>Nana</user>
    <text>but it doesn't stay in that format</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T14:30:42.048400</ts>
    <user>Nana</user>
    <text>it converts to 1234.567</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T14:31:01.048600</ts>
    <user>Janiece</user>
    <text>&lt;@Yang&gt; I think the only solution that makes sense is to use a small tolerance in `exactFloat` (and maybe rename it to `isApproximatelyIntegral` or something)</text>
  </message>
  <message conversation_id="978">
    <ts>2019-03-28T14:37:42.048800</ts>
    <user>Janiece</user>
    <text>I wonder what the actual heuristic is for how `String.fromFloat` chooses whether to use scientific notation</text>
  </message>
  <message conversation_id="978">
    <ts>2019-03-28T14:38:02.049000</ts>
    <user>Janiece</user>
    <text>But even if it works, it seems like a pretty hacky solution</text>
  </message>
  <message conversation_id="976">
    <ts>2019-03-28T15:58:04.049400</ts>
    <user>Nana</user>
    <text>&lt;@Janiece&gt; hmm yeah that might work better actually, that way you can avoid the `0.1 + 0.2 == 0.30000000000000004` problem</text>
  </message>
  <message conversation_id="979">
    <ts>2019-03-28T16:19:56.049600</ts>
    <user>Yang</user>
    <text>thank you everybody, ive settled on a solution aproximate to what is in ellie. Plus an using the exactFloat  as i had in the code above. It passes all the tests i have built. As &lt;@Rutha&gt; pointed out any e+ number is actually converted to its dot notation when stringified. So spliting  by "." works. Feels like a huge hack though..</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:12:50.051300</ts>
    <user>Kent</user>
    <text>Hi. I have updated my elm version (npm install elm --global) but have noticed that the elm repl no longer returns the type signatures of functions. Did I mess up somewhere?</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:13:08.051700</ts>
    <user>Kent</user>
    <text>(+) returns &amp;lt;function&amp;gt;</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:13:52.052300</ts>
    <user>Kent</user>
    <text>When I run elm --version I get 0.19.0</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:14:53.053000</ts>
    <user>Huong</user>
    <text>Is there any chance you have a color scheme that's perhaps hiding it?</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:15:21.053500</ts>
    <user>Huong</user>
    <text>as in, it show up for me, but it's not super obvious</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:16:11.053900</ts>
    <user>Kent</user>
    <text>&lt;@Huong&gt; did not make any change there...</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:16:35.054500</ts>
    <user>Kent</user>
    <text>it also does not like it when I type :help</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:18:27.055200</ts>
    <user>Huong</user>
    <text>In what way? Also, just to double check, you're running `elm repl`, not `elm-repl`, right?</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:19:06.055300</ts>
    <user>Kent</user>
    <text>None</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:19:24.055800</ts>
    <user>Kent</user>
    <text>yes I type elm repl</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:20:21.056400</ts>
    <user>Kent</user>
    <text>the update command returned the following:
npm install elm --global
/usr/local/bin/elm -&amp;gt; /usr/local/lib/node_modules/elm/bin/elm

&amp;gt; elm@0.19.0-bugfix6 install /usr/local/lib/node_modules/elm
&amp;gt; binwrap-install

+ elm@0.19.0-bugfix6
updated 1 package in 14.925s</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:20:43.057100</ts>
    <user>Huong</user>
    <text>That's what `:help` is supposed to look like, so that's okay</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:21:16.057700</ts>
    <user>Kent</user>
    <text>&lt;@Huong&gt; so sorry, you are right...</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:21:21.057900</ts>
    <user>Huong</user>
    <text>No worries!</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:22:52.058700</ts>
    <user>Huong</user>
    <text>It's weird you're not seeing the full signature, though. Can you verify by copy pasting the output that it really does not have `&amp;lt;function&amp;gt; : number -&amp;gt; number -&amp;gt; number`? :thinking_face:</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:25:15.059300</ts>
    <user>Kent</user>
    <text>you are right &lt;@Huong&gt; &amp;lt;function&amp;gt; : number -&amp;gt; number -&amp;gt; number</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:25:43.060100</ts>
    <user>Kent</user>
    <text>I don't get how this could have happened?</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:26:47.061000</ts>
    <user>Huong</user>
    <text>My guess is that the color codes it uses happen to coincide with the background color in your shell.. I'm not sure what the best course of action is!</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:28:22.061400</ts>
    <user>Kent</user>
    <text>&lt;@Huong&gt; thank you for taking the time to help me!</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:34:23.062200</ts>
    <user>Huong</user>
    <text>&lt;@Kent&gt; you can try `elm repl --no-colors`, if my guess is right and this is because of the colors colliding, that should help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:35:43.062600</ts>
    <user>Kent</user>
    <text>:bow: thank you sir!</text>
  </message>
  <message conversation_id="980">
    <ts>2019-03-28T17:35:52.062900</ts>
    <user>Kent</user>
    <text>:fireworks:</text>
  </message>
  <message conversation_id="981">
    <ts>2019-03-28T18:30:06.063500</ts>
    <user>Broderick</user>
    <text>If my Browser.element doesnt use any flags, what type should I put for flags?</text>
  </message>
  <message conversation_id="981">
    <ts>2019-03-28T18:31:03.063900</ts>
    <user>Chae</user>
    <text>`()`</text>
  </message>
  <message conversation_id="981">
    <ts>2019-03-28T18:31:32.064500</ts>
    <user>Broderick</user>
    <text>&lt;@Chae&gt; Ahh, forgot about that unit.. thanks!</text>
  </message>
  <message conversation_id="982">
    <ts>2019-03-28T20:00:54.066400</ts>
    <user>Lindsey</user>
    <text>If I subscribe to onAnimatinoFrame, but my app is slow, what happens to the missing frame messages?  Is there a backlog of frames?</text>
  </message>
  <message conversation_id="983">
    <ts>2019-03-29T03:33:54.067000</ts>
    <user>Carrie</user>
    <text>Recently, in learning elm, I have encountered a difficult problem in how to change the URL of the page to achieve the goal of reloading. Can anyone recommend a learning route?</text>
  </message>
  <message conversation_id="984">
    <ts>2019-03-29T03:43:48.067100</ts>
    <user>Jin</user>
    <text>I would start with &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser#application&gt; and then read the linked examples. Also make sure to read &lt;https://guide.elm-lang.org/webapps/navigation.html&gt;</text>
  </message>
  <message conversation_id="985">
    <ts>2019-03-29T03:53:50.067300</ts>
    <user>Nana</user>
    <text>there's no backlog</text>
  </message>
  <message conversation_id="985">
    <ts>2019-03-29T03:54:53.067500</ts>
    <user>Nana</user>
    <text>if your app is slow, the framerate will be lower, so fewer onAnimationFrame events will be dispatched</text>
  </message>
  <message conversation_id="983">
    <ts>2019-03-29T03:57:32.067700</ts>
    <user>Carrie</user>
    <text>thank you very much</text>
  </message>
  <message conversation_id="983">
    <ts>2019-03-29T04:59:38.068000</ts>
    <user>Carrie</user>
    <text>I read this code "( Model key url, Cmd.none )" .It means how to operate the Model?</text>
  </message>
  <message conversation_id="984">
    <ts>2019-03-29T05:02:58.068200</ts>
    <user>Jin</user>
    <text>`(Model, Cmd Msg)` is usually the return type of the `init` and `update` function in an Elm application. The `Cmd Msg` is an opaque thing to tell the Elm runtime about side-effects it should do. A `Msg` value will be passed to the `update` function to return a new `Model`.</text>
  </message>
  <message conversation_id="986">
    <ts>2019-03-29T05:45:30.069900</ts>
    <user>Jae</user>
    <text>I've noticed that multiline strings cause any compiler error messages in the same file to appear on the wrong line.  Is this a known bug?</text>
  </message>
  <message conversation_id="987">
    <ts>2019-03-29T06:04:35.070100</ts>
    <user>Lea</user>
    <text>Maybe this one &lt;https://github.com/elm/compiler/issues/1900&gt;</text>
  </message>
  <message conversation_id="987">
    <ts>2019-03-29T06:05:29.070300</ts>
    <user>Jae</user>
    <text>Yep, that's the bug. Thanks</text>
  </message>
  <message conversation_id="988">
    <ts>2019-03-29T10:54:04.072200</ts>
    <user>Jana</user>
    <text>What do you good people use/recommend for backend server + DB?</text>
  </message>
  <message conversation_id="984">
    <ts>2019-03-29T11:19:55.075100</ts>
    <user>Leonardo</user>
    <text>Flask (Python), with mypy if you want static type checking, and PostgreSQL</text>
  </message>
  <message conversation_id="988">
    <ts>2019-03-29T11:19:57.075300</ts>
    <user>Corinne</user>
    <text>&lt;@Jana&gt; depends on your needs / previous experience really. Anything should be fine from Ruby to Python to Haskell to Java to Go to Rust to Elixir. Obviously there's a certain familiarity if it's Haskell... :slightly_smiling_face:</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T11:38:12.076600</ts>
    <user>Niesha</user>
    <text>PureScript :smile:</text>
  </message>
  <message conversation_id="990">
    <ts>2019-03-29T11:46:40.076800</ts>
    <user>Shenita</user>
    <text>What are you building?</text>
  </message>
  <message conversation_id="988">
    <ts>2019-03-29T11:48:50.077000</ts>
    <user>Jana</user>
    <text>I’m starting a new app “Logger”.  So far I’ve been using Elixir/Phoenix, and am quite happy with that combo (though I miss the types).  Curious if there is something else that would be better.</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T11:56:51.077300</ts>
    <user>Shenita</user>
    <text>Yeah, I’m in a similar boat of wanting something functional for server but with static types (so not elixir) and better tooling than haskell</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T11:57:22.077500</ts>
    <user>Niesha</user>
    <text>@sam literally the reason we're using PureScript.</text>
  </message>
  <message conversation_id="990">
    <ts>2019-03-29T11:57:24.077700</ts>
    <user>Shenita</user>
    <text>I think maybe ocaml could fit that gap? But I’ve never tried it</text>
  </message>
  <message conversation_id="990">
    <ts>2019-03-29T11:58:22.077900</ts>
    <user>Shenita</user>
    <text>ah okay, how is the interop with node packages though?</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T11:58:45.078100</ts>
    <user>Niesha</user>
    <text>We're using an express server</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T11:58:55.078300</ts>
    <user>Niesha</user>
    <text>Works, but you gotta write the FFI yourself.</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T11:59:02.078500</ts>
    <user>Shenita</user>
    <text>Using flow with js before you lose all type safety as soon as you pull in an untyped module</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T11:59:18.078700</ts>
    <user>Niesha</user>
    <text>PureScript doesn't allow for untyped code. Gotta type all FFI</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:00:05.078900</ts>
    <user>Shenita</user>
    <text>ah okay, that’s probably better than having `any` everywhere</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:00:30.079100</ts>
    <user>Shenita</user>
    <text>might give it a try next time I get to make that choice :smile:</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:06:32.083100</ts>
    <user>Dede</user>
    <text>Rust has Elm-like typing.</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:06:36.083400</ts>
    <user>Dede</user>
    <text>I am using Rust and Postgresql.</text>
  </message>
  <message conversation_id="991">
    <ts>2019-03-29T12:06:56.083800</ts>
    <user>Nikia</user>
    <text>Hey guys, I'm brand new to using Elm and I'm currently trying to make a game. What I'm trying to accomplish right now is to have a specific element removed from a list, so I experimented with different list functions in the REPL. Ill do something like , x = [1,2,3,4,5]
x.filter isEven
 and then get an error " you gave me a list number, I need a record with a remove field". Im probably making a dumb mistake but I'm not sure what to do.</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:07:06.084000</ts>
    <user>Dede</user>
    <text>Rust has several good webserver options.</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:07:46.084200</ts>
    <user>Dede</user>
    <text>You probably want
`List.filter isEven x`</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:08:16.084400</ts>
    <user>Dede</user>
    <text>In some contexts it might be clearer to write
```
x |&amp;gt; List.filter isEven
  |&amp;gt; nextTransformation
  |&amp;gt; nextTransformation
```</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:08:48.084700</ts>
    <user>Dede</user>
    <text>Core point, though, is that Elm doesn't attach operations to data.  You have to explicitly call functions.</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:09:00.085100</ts>
    <user>Dede</user>
    <text>So `List.filter` calls the `filter` function defined in the `List` module.</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:09:26.085800</ts>
    <user>Florencia</user>
    <text>&lt;@Nikia&gt; So, you're trying to chain stuff like `myValue.method args` - but in Elm it happens through function application: `fn args myValue` etc.</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:09:58.086300</ts>
    <user>Nikia</user>
    <text>ahhh I see, that helps a lot!</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:09:59.086500</ts>
    <user>Florencia</user>
    <text>even if `myValue` is a List, you can't use `List.filter` like `myValue.filter foo`</text>
  </message>
  <message conversation_id="989">
    <ts>2019-03-29T12:10:10.086800</ts>
    <user>Nikia</user>
    <text>Thanks everyone! Makes sense now</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:01:04.088600</ts>
    <user>Dorsey</user>
    <text>Hello! I seem to remember a discussion about a tool that can extract tests from doc comments, similar to how it works in Elixir. Is there a tool like this or did I dream it up?</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:01:28.088800</ts>
    <user>Florencia</user>
    <text>&lt;@Dorsey&gt; Probably this :slightly_smiling_face: &lt;https://github.com/stoeffel/elm-verify-examples&gt;</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:03:03.089400</ts>
    <user>Dorsey</user>
    <text>Nice. Thanks &lt;@Florencia&gt;! Do you have any experience with it?</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:03:08.089600</ts>
    <user>Dorsey</user>
    <text>Is it good?</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:03:24.089900</ts>
    <user>Florencia</user>
    <text>Yeah, it's great :slightly_smiling_face:</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:04:31.091100</ts>
    <user>Huong</user>
    <text>I use it to make sure the examples in documentation of my packages are actually correct. Note that this isn't meant to replace regular tests, but rather as a verification of correctness of examples :slightly_smiling_face:</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:05:03.091900</ts>
    <user>Dorsey</user>
    <text>Yeah, I know. But it looks like a great complementary.</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:06:02.093000</ts>
    <user>Huong</user>
    <text>Oh absolutely. It's just easy to forgo writing actual tests, and before you know it, you're writing examples that test edge-case behaviour :smile:</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:06:52.094600</ts>
    <user>Huong</user>
    <text>I have to remind myself that the examples are just that: examples. I can verify their correctness. To check that they code they demonstrate is correct, I (should) write actual tests</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:07:21.095500</ts>
    <user>Dorsey</user>
    <text>I suppose for edge-cases fuze tests are great. I had a lot of fun writing them lately!</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:07:44.096200</ts>
    <user>Huong</user>
    <text>Oh yeah, always fun :smile:</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:09:10.097600</ts>
    <user>Yang</user>
    <text>i just found this out. is it corect to consider this should produce a compile error?
```
import E.P.B as SPrice exposing (BPrice)
import E.P.S as SPrice exposing (SPrice)

```
note i have `SPrice` twice and i have no compilation error. Can this be considered a bug? Since is a mistake. the correct version should be:
```
import E.P.B as BPrice exposing (BPrice)
import E.P.S as SPrice exposing (SPrice)
```
I was hoping elm compiler helps me here. Thought to ask people before creating an issue.</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:09:36.097900</ts>
    <user>Dorsey</user>
    <text>I think it's intended and I like it a lot.</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:09:46.098500</ts>
    <user>Florencia</user>
    <text>It's not a problem because the exposed values don't collide</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:09:53.099000</ts>
    <user>Florencia</user>
    <text>if they did, Elm compiler would tell you</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:10:07.099500</ts>
    <user>Florencia</user>
    <text>(instead of just picking one, which would be :scream: )</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:10:22.099800</ts>
    <user>Dorsey</user>
    <text>What I often do is ```
import Maybe
import Maybe.Extra as Maybe

Maybe.or a b
```</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:11:19.100500</ts>
    <user>Florencia</user>
    <text>yup!</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:11:23.100700</ts>
    <user>Shenita</user>
    <text>I suppose as soon as you try to use `BPrice.funcFromBPrice` elm will throw an error</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:11:27.100900</ts>
    <user>Huong</user>
    <text>(sidenote: it only yells when you try to use a colliding value)</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:11:44.101300</ts>
    <user>Shenita</user>
    <text>possibly a confusing error but there will be one :slightly_smiling_face:</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:12:36.101800</ts>
    <user>Huong</user>
    <text>oh, the error should be pretty good</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:12:48.102300</ts>
    <user>Huong</user>
    <text>```This usage of `H.class` is ambiguous.

36|         [ button [ H.class "hi", onClick Increment ] [ text "+1" ]
                       ^^^^^^^
It could refer to a variable from either of these imports:

    import Html.Attributes as H
    import Svg.Attributes as H
``` that sort of stuff</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:13:23.102900</ts>
    <user>Yang</user>
    <text>&lt;@Dorsey&gt;  thats interesting. didnt think to use maybe extra. Maybe i should. would be wired if `Maybe.iShould`  is an actual function :smile:</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:13:59.103600</ts>
    <user>Dorsey</user>
    <text>Ha ha :laughing:</text>
  </message>
  <message conversation_id="992">
    <ts>2019-03-29T13:14:19.103900</ts>
    <user>Dorsey</user>
    <text>It's in `Maybe.Extra.Extra`.</text>
  </message>
  <message conversation_id="993">
    <ts>2019-03-29T15:55:24.106600</ts>
    <user>Nikia</user>
    <text>Hi everyone, I have this function here which is returning the error:
The (::) operator can only add elements onto lists.

32|                       (x::xs) -&amp;gt; if x == fruit then xs else x :: removeOne xs
                                                                     ^^^^^^^^^^^^
This `removeOne` call produces:

    List Fruit -&amp;gt; List Fruit

But (::) needs a List on the right.
My objective is to write a function that searches for a "fruit" in the list and removes it if it is found.</text>
  </message>
  <message conversation_id="993">
    <ts>2019-03-29T15:58:21.107400</ts>
    <user>Lashawnda</user>
    <text>`removeOne` expects two arguments but you're only giving it one in the recursive call</text>
  </message>
  <message conversation_id="993">
    <ts>2019-03-29T15:58:56.108100</ts>
    <user>Lashawnda</user>
    <text>try `if x == fruit then xs else x :: removeOne fruit xs`</text>
  </message>
  <message conversation_id="993">
    <ts>2019-03-29T16:24:19.108900</ts>
    <user>Nikia</user>
    <text>Thanks a lot Luke!</text>
  </message>
  <message conversation_id="993">
    <ts>2019-03-29T16:43:26.111200</ts>
    <user>Lashawnda</user>
    <text>You’re welcome. Whenever I see `_ needs a _ on the right/left` errors I always look for an arrow in what the call produces. Usually the compiler can tell when you forgot an argument to a function but there are a couple cases like this one where it can’t </text>
  </message>
  <message conversation_id="994">
    <ts>2019-03-29T17:16:04.114100</ts>
    <user>Izola</user>
    <text>Hi all, I have this list:
```[ A, B, X, X, A, D, D, D, A, B, X, A, C, C, A, A, B, B, B, B, B ]```
and I want to transform it into:
```[ [A, B], [X], [X], [A, D, D, D], [A, B], [X], [A, C, C], [A], [A, B, B, B, B, B] ]```
Is the recursive function with two arguments (like: `fn : List a -&amp;gt; List (List a) -&amp;gt; List (List a)`) the way to go, or is there an easier way?</text>
  </message>
  <message conversation_id="994">
    <ts>2019-03-29T17:22:30.114600</ts>
    <user>Kris</user>
    <text>Have a look at groupWhile from the list extra package</text>
  </message>
  <message conversation_id="994">
    <ts>2019-03-29T17:24:46.114800</ts>
    <user>Izola</user>
    <text>Thanks, I'll check it out</text>
  </message>
  <message conversation_id="995">
    <ts>2019-03-29T18:53:04.115200</ts>
    <user>Jana</user>
    <text>Thanks all for your suggestions!</text>
  </message>
  <message conversation_id="993">
    <ts>2019-03-29T21:34:23.116000</ts>
    <user>Lashawnda</user>
    <text>hey everyone! follow elm-conf on instagram for extremely good posts related to this year's upcoming elm-conf &lt;https://www.instagram.com/stories/elmconf/&gt;</text>
  </message>
  <message conversation_id="996">
    <ts>2019-03-29T22:31:02.117400</ts>
    <user>Florentina</user>
    <text>Hey! I was just about to start off with my first Elm projects that uses WebSockets. I just wanted to know whether `elm-lang/websocket` would work with `0.19`.</text>
  </message>
  <message conversation_id="996">
    <ts>2019-03-29T22:32:54.118200</ts>
    <user>Earlean</user>
    <text>&lt;@Florentina&gt; it doesn't work with 0.19.  you need to use ports instead</text>
  </message>
  <message conversation_id="996">
    <ts>2019-03-29T22:33:26.119100</ts>
    <user>Earlean</user>
    <text>&lt;https://package.elm-lang.org/packages/billstclair/elm-websocket-client/latest/&gt; is a package that makes using ports for websockets a bit easier. </text>
  </message>
  <message conversation_id="996">
    <ts>2019-03-29T22:33:50.119500</ts>
    <user>Florentina</user>
    <text>I see. Thanks for the quick reply! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="997">
    <ts>2019-03-30T05:08:33.119600</ts>
    <user>Denae</user>
    <text>If you want something that's more like Elm with better tooling than haskell why not try F#? You can do class-oriented but you don't need to. Have a look at what SAFE does server side (giraffe+saturn+Elmish) &lt;https://safe-stack.github.io/docs/intro/&gt;</text>
  </message>
  <message conversation_id="997">
    <ts>2019-03-30T05:09:22.120000</ts>
    <user>Denae</user>
    <text>+ postgres obviously ^.^</text>
  </message>
  <message conversation_id="998">
    <ts>2019-03-30T06:24:01.127300</ts>
    <user>Mireya</user>
    <text>I am starting an iOS/Android project that accesses a local SQLite database and I would like to use Elm. Is this feasible? What would be the best tool to use with it (Capacitor/Cordova/React Native)?</text>
  </message>
  <message conversation_id="998">
    <ts>2019-03-30T06:24:46.127600</ts>
    <user>Lynne</user>
    <text>&lt;@Hsiu&gt; may have something to say about it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="998">
    <ts>2019-03-30T06:36:26.129600</ts>
    <user>Monnie</user>
    <text>&lt;@Mireya&gt; I use plain xcode and android studio.. just open a fullscreen webview and does the rest in elm.. native code can easily be called with ports..</text>
  </message>
  <message conversation_id="998">
    <ts>2019-03-30T07:23:45.132400</ts>
    <user>Mireya</user>
    <text>I’m not sure I would call it “easy”. Are you saying I can go directly from Elm to Swift/Java and back with ports? Is there a tutorial on that?</text>
  </message>
  <message conversation_id="997">
    <ts>2019-03-30T07:29:06.132600</ts>
    <user>Monnie</user>
    <text>You need an incoming/outgoing port  set up in Elm, native ios/android can send messages to elm directly, but you will need to add a small function in javascript to forward messages from elm to native.... after that you just add messages on swift and elm side when you need more functionallity..  Searching for javascript interop Wkwebview or android webview should give your some guides.. its pretty slimilar... An example for IOS: &lt;https://medium.com/@JillevdWeerd/creating-links-between-wkwebview-and-native-code-8e998889b503&gt;</text>
  </message>
  <message conversation_id="997">
    <ts>2019-03-30T07:39:13.132900</ts>
    <user>Monnie</user>
    <text>Using ports to native swift/java code is actually pretty similar as interop between elm and javascript.</text>
  </message>
  <message conversation_id="997">
    <ts>2019-03-30T07:41:08.133100</ts>
    <user>Monnie</user>
    <text>My current application is augmented reality.. So I show the camera nativly fullscreen and load a transparent webview on top of the video.. the rest of the userinterface/overlay is done in elm.</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:25:36.134000</ts>
    <user>Nikia</user>
    <text>Hey everyone, I am currently trying to create an app where a certain key in the dictionary has an updated value upon clicking. I am almost sure that I have more than a couple problems with my current code. But right now I am getting an error with my init function. This is the error : I was not expecting this equals sign while parsing an expression (in
parentheses) in init's definition.

15| init flags url = ( fruits={ Apple : 0 , Grapes : 0 }  , Cmd.none ) -- add init model

Im pretty stuck and some guidance would help. Thanks!</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:30:08.134700</ts>
    <user>Timika</user>
    <text>First, your `Dict` is missing the types it uses for key and value. After that is done, the other issues can be solved, I am happy to assist if necessary. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:31:24.135400</ts>
    <user>Timika</user>
    <text>`type alias Model = { fruits : Dict }` From what I can guess from the code is, that you want to store fruit quantities? Sadly, you cannot use custom types for the key, as your keys have to be `comparable`, so we need to find a different solution there. If the amount of different fruits is not too large and does not change often, you can just use a record instead.</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:32:31.136100</ts>
    <user>Nikia</user>
    <text>yes exactly, I changed it to fruits : Dict Fruits Int
However, I'm still getting the same error.</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:33:17.136700</ts>
    <user>Timika</user>
    <text>Yeah, the construction of your `Model` value is wildly different from what the compiler expects.</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:34:12.137500</ts>
    <user>Timika</user>
    <text>`{ fruits = Dict.fromList [("Apple", 1), ("Grapes", 0) ]}`</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:34:52.138100</ts>
    <user>Timika</user>
    <text>(Note that I used `String` here, not “Fruits” due to the issue explained in my previous comment)</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:36:13.140000</ts>
    <user>Nikia</user>
    <text>Would it possibly be a good idea to create a function that gives each fruit a string name</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:36:36.140600</ts>
    <user>Jin</user>
    <text>&lt;https://package.elm-lang.org/packages/pzp1997/assoc-list/latest/&gt; is a 1:1 replacement for the core `Dict` that also supports non-comparable keys. Though it has different performance characteristics.</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:38:28.140700</ts>
    <user>Timika</user>
    <text>“wildly different” even. :smile:</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:39:19.141500</ts>
    <user>Timika</user>
    <text>I try to avoid strings for logic in my programs when I can. Though it would work, I guess.</text>
  </message>
  <message conversation_id="999">
    <ts>2019-03-30T15:59:43.142600</ts>
    <user>Nikia</user>
    <text>Yeah so far I just tried using the Dict.fromList line that you posted above to see how I might be able to change it but I'm still getting an error on that line</text>
  </message>
  <message conversation_id="1000">
    <ts>2019-03-30T17:25:05.142900</ts>
    <user>Hsiu</user>
    <text>I am using react native, but it could be an overkill if you already have native code for the views... I guess at the point is that you want to run Elm in a webview and exchange some data. Probably a subset of the react native bridge should be enough, though I have no idea how to implement it :man-facepalming:</text>
  </message>
  <message conversation_id="1000">
    <ts>2019-03-30T19:55:27.143300</ts>
    <user>Dede</user>
    <text>At 10 items, it probably doesn’t matter.  At 100 items, it probably does.  At 1000 items…</text>
  </message>
  <message conversation_id="1001">
    <ts>2019-03-30T21:37:27.143800</ts>
    <user>Tamiko</user>
    <text>`elm make` produces a blank html page</text>
  </message>
  <message conversation_id="1002">
    <ts>2019-03-30T23:37:14.145700</ts>
    <user>Carrie</user>
    <text>I want to convert the maybe-type URL from Url. fromString to Url-type url. What should I do?</text>
  </message>
  <message conversation_id="1001">
    <ts>2019-03-30T23:38:46.146600</ts>
    <user>Dede</user>
    <text>```
case Url.fromString value of
   Just url -&amp;gt;  handleUrl url
   Nothing -&amp;gt; handleInvalidUrlString value
```</text>
  </message>
  <message conversation_id="1001">
    <ts>2019-03-30T23:40:19.148500</ts>
    <user>Dede</user>
    <text>Depending on your use case, you might instead do something like this:
```
stringValue |&amp;gt; Url.fromString  |&amp;gt; Maybe.map handleUrl |&amp;gt; Maybe.withDefault (handleInvalidUrlString stringValue)
```</text>
  </message>
  <message conversation_id="1001">
    <ts>2019-03-30T23:40:54.149000</ts>
    <user>Carrie</user>
    <text>thank you very much</text>
  </message>
  <message conversation_id="1003">
    <ts>2019-03-31T04:21:17.154900</ts>
    <user>Natosha</user>
    <text>Out of curiosity, how am I able to use a view function that returns Svg msg with Browser.element, which expects its view function to return Html msg?</text>
  </message>
  <message conversation_id="1003">
    <ts>2019-03-31T04:25:33.156000</ts>
    <user>Lynne</user>
    <text>I think you would use `Svg.svg` in your `view` which creates `&amp;lt;svg&amp;gt;` node in HTML but still returns `Html msg`, thus making it suitable for `Browser.element`</text>
  </message>
  <message conversation_id="1003">
    <ts>2019-03-31T04:26:26.156700</ts>
    <user>Lynne</user>
    <text>In fact, both `Svg` and `Html` are just aliases for `VirtualDom.Node`</text>
  </message>
  <message conversation_id="1003">
    <ts>2019-03-31T04:52:06.157400</ts>
    <user>Natosha</user>
    <text>Thanks &lt;@Lynne&gt;.</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-03-31T10:18:50.158800</ts>
    <user>Kimiko</user>
    <text>I see a lot of recent commits in the elm/compiler repo, is a new compiler version due out any time soon?</text>
  </message>
  <message conversation_id="1005">
    <ts>2019-03-31T10:44:11.159700</ts>
    <user>Hoa</user>
    <text>AFAIK there’s no timeline. Evan is working on a 0.19.1 to fix a few compiler bugs.</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-03-31T13:39:57.160000</ts>
    <user>Millie</user>
    <text>Version bump is here ;) &lt;https://github.com/elm/compiler/commit/b4fe1e1d01531539dd5d528a2e4888e5829cd3b9&gt;</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-03-31T14:13:55.160300</ts>
    <user>Kimiko</user>
    <text>OK, thanks! I'm hopeful it will fix my personal compiler error too</text>
  </message>
  <message conversation_id="1006">
    <ts>2019-03-31T19:27:15.164300</ts>
    <user>Nikia</user>
    <text>So Im making a game right now and I am a bit stuck on what I should do to add multiple random levels. Its a very basic game and basically how it works is there is a balance scale and one end of the scale it has some number of weight that you need to balance on the other side. You use the many items provided to balance it, and once you've balanced it, you do it again with a different number. I want to do this at least 4-5 times. Any tips on how I can have the repetition of tries and random numbers? Resources I should look at or that I can learn from?</text>
  </message>
  <message conversation_id="1006">
    <ts>2019-03-31T23:27:01.164900</ts>
    <user>Yolando</user>
    <text>&lt;@Nikia&gt;: for random number generation -  &lt;https://guide.elm-lang.org/effects/random.html&gt; ; &lt;https://medium.com/@ckoster22/randomness-in-elm-8e977457bf1b&gt;</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-04-01T01:41:49.165500</ts>
    <user>Alia</user>
    <text>Ellie hasn't worked for me for months</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-04-01T01:41:55.165700</ts>
    <user>Alia</user>
    <text>on any of my devices</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-04-01T01:42:11.166100</ts>
    <user>Alia</user>
    <text>afaik the site is still working for the rest of the world though?</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-04-01T01:43:23.166400</ts>
    <user>Ashton</user>
    <text>No, you arent the only one. Hasnt been working for me, and I have seen others say the same thing.</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-04-01T01:47:02.166800</ts>
    <user>Alia</user>
    <text>seems like there might be some geo-blocking happening?</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-04-01T01:49:45.168300</ts>
    <user>Alia</user>
    <text>&lt;@Lashawnda&gt; &lt;@Grayce&gt; do you know anything about this?</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-04-01T01:50:03.168700</ts>
    <user>Earlean</user>
    <text>there has been some discussion about it in &lt;#C408UCWMN|ellie&gt;</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-04-01T01:51:24.169800</ts>
    <user>Alia</user>
    <text>Well I'm in Australia which makes sense for the latency theory</text>
  </message>
  <message conversation_id="1004">
    <ts>2019-04-01T03:23:40.171500</ts>
    <user>Timika</user>
    <text>In case you aren’t aware, we have a &lt;#C0K5RJ7LN|gamedev&gt; channel here as well. Join us. :) </text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:16:17.173100</ts>
    <user>Maxwell</user>
    <text>Where can I find documentation for "messages with a payload"? I am not sure this is the term the community prefers. I also searched for "parameterized messages", "passing arguments to a message", etc. I only found one place where this is briefly mentioned in &lt;https://github.com/sporto/elm-tutorial/blob/master/en/02-elm-arch/05-msg-payload.md&gt; by &lt;@Carrol&gt;.

I am also interested in why this doesn't come up more often. Perhaps the reason this is undocumented is that it's a rare pattern or because I am missing something obvious.</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:19:05.174600</ts>
    <user>Maxwell</user>
    <text>It basically says that "You can send a payload in your message", and shows some code, but there's no other explanation. There's no explanation for how some messages will get a payload from DOM events like onClick, etc., anyway.</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:20:29.176300</ts>
    <user>Maxwell</user>
    <text>To clarify, I am not asking how to send a payload in a message. That's clear.

I'm asking where is the documentation for this feature and because apparently there isn't, why is that?</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:20:48.176800</ts>
    <user>Gertrude</user>
    <text>I think this is just an odd way of phrasing the common pattern that Message type constructors can take arguments, which I wouldn't describe as a rare pattern at all. I use it every day!</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:21:48.178200</ts>
    <user>Maxwell</user>
    <text>Okay, so should I search for Message type constructor then? Is this documented? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:21:56.178400</ts>
    <user>Gertrude</user>
    <text>You can see the same patter, for instance, in the Text fields section of the book: &lt;https://guide.elm-lang.org/architecture/text_fields.html&gt;</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:22:02.178700</ts>
    <user>Gertrude</user>
    <text>*pattern</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:22:42.179900</ts>
    <user>Maxwell</user>
    <text>Thanks! Yeah, I can see the _code_, but no explanation of whether this is a runtime feature, language feature, etc. I'm looking for documentation, basically.</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:22:58.180200</ts>
    <user>Lewis</user>
    <text>it's not specific to message types – that's just a custom type, like many others. see here: &lt;https://guide.elm-lang.org/types/custom_types.html&gt;</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:25:43.181900</ts>
    <user>Gertrude</user>
    <text>Yeah. Since messages are just another kind of variant type, and variants can take arguments, it's a common pattern for sending a message that contains some data you want handled by your `update` function. I think there's no specific name for it because it's just such a common pattern no one thought to give it one.</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T04:31:46.182500</ts>
    <user>Maxwell</user>
    <text>Okay! Thank you both. :raised_hands:</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T05:00:50.184300</ts>
    <user>Gertrude</user>
    <text>So here's a question: is it even possible to work with Sets of custom types? Sets need to contain comparables, but comparable can't be derived or implemented, and there's no way even to provide my own comparable function</text>
  </message>
  <message conversation_id="1008">
    <ts>2019-04-01T05:01:43.184900</ts>
    <user>Jin</user>
    <text>There are packages that do it like that.</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T05:04:14.188000</ts>
    <user>Earlean</user>
    <text>&lt;@Gertrude&gt; yep, you need to convert your value to a comparable type. There are packages that make this easier to do. But it's certainly not optimal.</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T05:05:00.188500</ts>
    <user>Earlean</user>
    <text>For small sets you can use &lt;https://package.elm-lang.org/packages/erlandsona/assoc-set/latest/&gt;</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T05:06:57.188900</ts>
    <user>Gertrude</user>
    <text>I also found this, which seems to be based on AssocList: &lt;https://package.elm-lang.org/packages/Gizra/elm-all-set/latest/EverySet&gt;</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T05:08:51.189100</ts>
    <user>Gertrude</user>
    <text>Oh, I guess looking now they both are</text>
  </message>
  <message conversation_id="1007">
    <ts>2019-04-01T05:09:52.189400</ts>
    <user>Huong</user>
    <text>I wonder why they both have `map` :thinking_face:</text>
  </message>
  <message conversation_id="1009">
    <ts>2019-04-01T05:51:07.190400</ts>
    <user>Danika</user>
    <text>Is there anywhere i can get a slightly more formal / academic description of the elm architecture? </text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:01:04.190600</ts>
    <user>Huong</user>
    <text>I don't know if that exists. Essentially, what happened is this:
- Elm was FRP
- people started using this pattern for modeling applications
- Elm adopted that pattern and made it a core-concept of the language

I don't know if anyone then tried to express this pattern in a formal way..</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:19:15.190800</ts>
    <user>Agustin</user>
    <text>Doesn’t Evan have a dissertation on it?</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:27:36.191000</ts>
    <user>Florencia</user>
    <text>I think the dissertation is on Elm itself</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:40:00.191200</ts>
    <user>Agustin</user>
    <text>Yes but that must surely have a section on TEA ?</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:49:21.191400</ts>
    <user>Florencia</user>
    <text>It might not have been all that well defined back then</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:51:21.191600</ts>
    <user>Florencia</user>
    <text>Checked the PDF and neither `TEA` nor `architecture` are there</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:51:57.191800</ts>
    <user>Florencia</user>
    <text>the thesis seems to be concerned with FRP quite heavily</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:55:53.192900</ts>
    <user>Danika</user>
    <text>I have Evans thesis, it indeed is just about FRP. Elm was a quite different back then. I’ll try and reach out to him</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:58:13.193100</ts>
    <user>Huong</user>
    <text>&amp;gt; This architecture seems to emerge naturally in Elm. Rather than someone “inventing” it, early Elm programmers kept discovering the same basic patterns in their code.</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:58:18.193300</ts>
    <user>Huong</user>
    <text>(from the guide)</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T06:58:20.193500</ts>
    <user>Huong</user>
    <text>:shrug:</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T07:03:12.193700</ts>
    <user>Huong</user>
    <text>I do remember Phil Freeman asking about a similar thing, in the context of wanting to refer to TEA in a paper. Let me see if I can dig up that paper, and see how they handled it...</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T07:04:30.194300</ts>
    <user>Danika</user>
    <text>That’d be much appreciated, I want to do the same :) </text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T07:04:51.194500</ts>
    <user>Huong</user>
    <text>&lt;https://functorial.com/the-future-is-comonadic/main.pdf&gt; So they just linked to the guide. However, it does give an idea of how to describe TEA in a more formal manner!</text>
  </message>
  <message conversation_id="1010">
    <ts>2019-04-01T07:06:08.195200</ts>
    <user>Danika</user>
    <text>This is a brilliant resource, thank you very much! </text>
  </message>
  <message conversation_id="1011">
    <ts>2019-04-01T07:18:57.195500</ts>
    <user>Huong</user>
    <text>You're welcome! :smile:</text>
  </message>
  <message conversation_id="1012">
    <ts>2019-04-01T07:48:30.195700</ts>
    <user>Nana</user>
    <text>the future is comonadic eh? :face_with_raised_eyebrow:</text>
  </message>
  <message conversation_id="1012">
    <ts>2019-04-01T07:48:49.195900</ts>
    <user>Maida</user>
    <text>a little bit of extra history: There was a time before Elm had `html` support. Once `elm-html` appeared, people started using it and discussions about architecture started to emerge. The architecture was mainly about the signal graph. In the end, Evan created a package called `start-app` that formalized this graph that kept appearing. The community started using `start-app` extensively. This was around Elm `0.15`. With `0.16` this pattern was so frequently used that it ended up being adopted as the default pattern in `0.17`.</text>
  </message>
  <message conversation_id="1012">
    <ts>2019-04-01T07:51:48.196100</ts>
    <user>Maida</user>
    <text>&lt;@Danika&gt; if you want to dig deeper into the history, I recommend you look at the git history of the `start-app` and of the `elm-todomvc`.</text>
  </message>
  <message conversation_id="1012">
    <ts>2019-04-01T07:53:55.196300</ts>
    <user>Nana</user>
    <text>do you think Elm should still be considered FRP now that you can no longer "fold/map over time"?</text>
  </message>
  <message conversation_id="1012">
    <ts>2019-04-01T08:02:55.196500</ts>
    <user>Sharon</user>
    <text>The blog post announcing 0.17 is titled "A Farewell to FRP" :sweat_smile:</text>
  </message>
  <message conversation_id="1012">
    <ts>2019-04-01T08:02:57.196700</ts>
    <user>Huong</user>
    <text>Not in the academic sense of the word, in that Elm, the language, no longer offers the fundamental building blocks of FRP. However, those building blocks underpin TEA, and the result is functional and - in a sense - reactive. So in a casual sense, I personally don't mind Elm being described as "kind of like FRP", as long as it's clear that we're not talking about FRP in the traditional/academic/scholastic sense of the word. Relevant to those formulations of FRP: &lt;https://www.youtube.com/watch?v=Agu6jipKfYw&gt;</text>
  </message>
  <message conversation_id="1012">
    <ts>2019-04-01T08:11:58.196900</ts>
    <user>Danika</user>
    <text>Thanks for reminding me about `start-app` &lt;@Maida&gt;, I have actually seen it before but I forgot about it ^^ &lt;@Huong&gt; do you know if Elm still is FRP "under-the-hood" or has the runtime ditched signals as well?</text>
  </message>
  <message conversation_id="1012">
    <ts>2019-04-01T08:18:14.197100</ts>
    <user>Huong</user>
    <text>That's a harder question. If someone were to write a bunch of kernel code, they could build on top of the current runtime to offer the same FRP building blocks Elm pre-0.17 used to offer. Since it would require kernel code (effectively extending the runtime), I think that would answer your question in the negative! Is that a good enough answer?</text>
  </message>
  <message conversation_id="1012">
    <ts>2019-04-01T08:36:31.197700</ts>
    <user>Danika</user>
    <text>Good enough for now :) thanks everyone, much appreciated. </text>
  </message>
  <message conversation_id="1013">
    <ts>2019-04-01T09:11:04.198700</ts>
    <user>Gertrude</user>
    <text>Does anyone know of any good examples of `Dict.merge`? I have a situation where I have to merge two records' with nested dicts of types .... :disappointed:</text>
  </message>
  <message conversation_id="1013">
    <ts>2019-04-01T09:18:37.198900</ts>
    <user>Gertrude</user>
    <text>Found one: &lt;https://stackoverflow.com/questions/53436370/elm-how-to-merge-two-dictionaries&gt;</text>
  </message>
  <message conversation_id="1013">
    <ts>2019-04-01T09:23:25.199500</ts>
    <user>Florencia</user>
    <text>&lt;@Gertrude&gt; If you need some specific help just ask and give us more info about the problem :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1013">
    <ts>2019-04-01T09:23:53.200300</ts>
    <user>Florencia</user>
    <text>Conceptually you have to specify what should happen 1) when a key in left dict but not right, 2) when it's in right but not left, 3) when it's in both</text>
  </message>
  <message conversation_id="1013">
    <ts>2019-04-01T09:26:17.200900</ts>
    <user>Gertrude</user>
    <text>Yeah, my apologies. I probably would've gone into more detail but I figured the general example would be enough in this case, which it was. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1014">
    <ts>2019-04-01T14:18:33.209000</ts>
    <user>Granville</user>
    <text>I fixed a big problem today with `billstclair/elm-svg-button`. It was storing state in messages that were delivered by a subscription via `Time.every`. This messed up my state. Strangely, the example worked before, but my bigger application broke badly. The example works in the new order, and my application works, but the auto-repeat feature, which works fine in the example, does not work in my application.

Here’s the example, as an Ellie: &lt;https://ellie-app.com/58tgQKX3HZma1&gt;
And in its package repository: &lt;https://github.com/billstclair/elm-svg-button&gt;

There are four buttons, The top one increments by one. The second one also increments, but will increment every 1/10 second after a 1/2 second initial delay, if you keep the mouse button pressed. The bottom two buttons do the same for decrement.

I’ve checked that the `Time.every` call is happening in my big application, but it doesn’t repeat, only increments once. Can anyone think of a reason that `Time.every` would wait until the mouse button is released to deliver the first `Msg` to `update`?

The source for the large application is here: &lt;https://github.com/billstclair/zapmeme&gt;</text>
  </message>
  <message conversation_id="1015">
    <ts>2019-04-01T16:41:47.212800</ts>
    <user>Jeanene</user>
    <text>I have a quick question about best-practice in `RemoteData` modeling…I have a model that has two http data calls via `elm-graphql`.

```
type alias Model =
    { appRequest : AppResponse
    , mutationResponse : MutationResponse
    }
```
I need to handle the loading state of each as sometimes it’s a graphql-query and sometimes it’s a mutation…
Should I wrap those into one field and set it in my update function as a command from the other two commands?
I found myself making a kinda nasty case statement to try to capture both of those scenarios…</text>
  </message>
  <message conversation_id="1015">
    <ts>2019-04-01T16:44:01.214700</ts>
    <user>Sade</user>
    <text>Hey &lt;@Jeanene&gt;! Have you tried Remotedata.map2? That may help clean it up. I would recommend storing them separately as you have it now and then using map2 to combine them in your view</text>
  </message>
  <message conversation_id="1015">
    <ts>2019-04-01T16:44:40.214800</ts>
    <user>Jeanene</user>
    <text>Haven’t tried using map2--that’s a great recommendation. I’ll refactor with that and see how it feels. :thumbsup::skin-tone-3:</text>
  </message>
  <message conversation_id="1015">
    <ts>2019-04-01T16:44:44.215000</ts>
    <user>Jeanene</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1015">
    <ts>2019-04-01T16:45:13.215900</ts>
    <user>Sade</user>
    <text>Awesome, let me know if you have any other questions on that! :smile:</text>
  </message>
  <message conversation_id="1015">
    <ts>2019-04-01T16:50:17.216100</ts>
    <user>Jin</user>
    <text>One other option is to create a custom `RemoteData` type that encapsulates the possible states. I like to do this when I’m e.g at first querying one object, then have a mutation to update it. This allows me to show an initial loading spinner, then a pre-filled form that also has its own loading indicator, but that also keeps the form around while sending the request.
This should also be possible with two separate `RemoteData` fields, but there might be impossible states possible. This depends on your use case of course. But custom types are nice in Elm.</text>
  </message>
  <message conversation_id="1015">
    <ts>2019-04-01T16:58:12.216300</ts>
    <user>Jeanene</user>
    <text>I think I may need to lean your direction here, &lt;@Jin&gt;…</text>
  </message>
  <message conversation_id="1016">
    <ts>2019-04-01T18:06:34.216600</ts>
    <user>Granville</user>
    <text>I thought maybe my problem was that my rendering was taking too long, but removing all the SVG stuff didn’t fix it. It did motivate me to use Lazy to greatly optimize it, but I still don’t get auto-repeating buttons.</text>
  </message>
  <message conversation_id="1017">
    <ts>2019-04-01T19:37:40.216800</ts>
    <user>Nikia</user>
    <text>Hi everyone, I've been working at the same issue for a long time regarding generating random numbers and I'm just not seeming to get it. What I'm trying to do is randomly select one of these "Fractions" and then convert it to a float, and then compare that float to another float.</text>
  </message>
  <message conversation_id="1017">
    <ts>2019-04-01T19:42:25.218700</ts>
    <user>Ruthann</user>
    <text>floats are inaccurate to compare, you'd need to see if the absolute value is within some confidence margin.
are you having problems generating the number? generating _random_ numbers or comparing floats?</text>
  </message>
  <message conversation_id="1017">
    <ts>2019-04-01T19:43:54.220200</ts>
    <user>Nikia</user>
    <text>well I created a type with a number of different fractions represented with words, I want to randomly select one of the fractions.</text>
  </message>
  <message conversation_id="1017">
    <ts>2019-04-01T19:44:14.220700</ts>
    <user>Nikia</user>
    <text>With that I can then easily assign it a value</text>
  </message>
  <message conversation_id="1017">
    <ts>2019-04-01T19:44:45.221300</ts>
    <user>Nikia</user>
    <text>But I cant seem to randomly select one of those Fractions that I have, I have an example of what I tried above.</text>
  </message>
  <message conversation_id="1017">
    <ts>2019-04-01T19:45:17.221800</ts>
    <user>Ruthann</user>
    <text>so i see you have a random generator but you're not actually generating a number:
&lt;https://package.elm-lang.org/packages/elm-lang/core/latest/Random#generate&gt;</text>
  </message>
  <message conversation_id="1017">
    <ts>2019-04-01T19:45:49.222400</ts>
    <user>Ruthann</user>
    <text>so i'd hook up a button to the generate function, it will take the generator, give you back a command and you can tag the msg with your random value</text>
  </message>
  <message conversation_id="1018">
    <ts>2019-04-01T21:33:39.233500</ts>
    <user>Christoper</user>
    <text>My application needs to download a fair amount of JSON data, say 50 MB. This takes a while, so I show a progress message. That part works great! The issue is that there's a noticeable pause at, say, 99% downloaded before Elm draws the result to the screen. I believe it's just that the data is so large, decoding it takes a while. The pause is long enough that some users think the application must have stopped, so I'd like to update the progress message (to, say, "Rendering" and a spinner instead of "Loading" and a progress bar).
As far as I can tell, the only way to do that is to decode the data on a separate step through the event loop. I have this mostly working by using `Task.map (\_ -&amp;gt; &amp;lt;…do decode…&amp;gt;) Process.Sleep 0` to get a task that is immediately ready, but this feels like a hack, and it also feels like it makes the delay even longer (though I haven't timed it).
Is there a better way to approach this?</text>
  </message>
  <message conversation_id="1018">
    <ts>2019-04-01T21:51:47.234200</ts>
    <user>Earlean</user>
    <text>&lt;@Christoper&gt; yep, that's a good solution.</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T03:49:10.235100</ts>
    <user>Granville</user>
    <text>There are at least two issues for code that has similar behavior.

&lt;https://github.com/elm/core/issues/993&gt;
&lt;https://github.com/elm/core/issues/980&gt;

Apparently, it doesn’t work to change `Time.every` subscriptions dynamically. I’m going to just use a single `Time.every(100, SomeMsg)` call, with a tiny state machine. That appears to work.</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T03:59:03.235400</ts>
    <user>Zachary</user>
    <text>Anyone hit this use case when doing an SPA? &lt;https://github.com/elm/browser/issues/71&gt;</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T04:06:14.235800</ts>
    <user>Lea</user>
    <text>Maybe you’re looking for &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Navigation#replaceUrl&gt; ? (re-reading your issue, probably not)</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T04:14:17.236100</ts>
    <user>Zachary</user>
    <text>I think this still trigger url change msg</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T04:19:38.236300</ts>
    <user>Lea</user>
    <text>Probably, I can’t think of a component level solution</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T04:23:25.236500</ts>
    <user>Earlean</user>
    <text>Can you expand on what you're trying to do? I don't really understand what the problem you're encountering is</text>
  </message>
  <message conversation_id="1020">
    <ts>2019-04-02T04:41:33.236700</ts>
    <user>Mindy</user>
    <text>If you use "path" based url routing for the different pages of your SPA, maybe you could handle tabs via fragments in the url &lt;https://package.elm-lang.org/packages/elm/url/latest/Url-Parser#fragment&gt; ?</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T05:06:45.236900</ts>
    <user>Zachary</user>
    <text>&lt;@Earlean&gt; I'm trying to add a path to history without triggering onUrlRequest</text>
  </message>
  <message conversation_id="1021">
    <ts>2019-04-02T05:08:04.237100</ts>
    <user>Earlean</user>
    <text>Can you explain why you want to do that?</text>
  </message>
  <message conversation_id="1020">
    <ts>2019-04-02T05:09:29.237400</ts>
    <user>Zachary</user>
    <text>Because the user is switching between tabs, inside a fraction of the page. SPA routing would trigger reload, while I already handle the transition inside the component itself</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T05:10:18.237600</ts>
    <user>Earlean</user>
    <text>You write the onUrlRequest function so you get to decide what it does. If you don't want it to result in any changes to your model you can just have it do that.</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T05:13:41.237800</ts>
    <user>Zachary</user>
    <text>Hmm, that got me thinking, I could filter out the routes I'm not interested in</text>
  </message>
  <message conversation_id="1019">
    <ts>2019-04-02T05:14:07.238000</ts>
    <user>Zachary</user>
    <text>Thanks &lt;@Earlean&gt;</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:34:36.238900</ts>
    <user>Gertrude</user>
    <text>Is there any editor plugin out there for elm that adds a project tree? Like a list of links to functions/types in a file, as opposed to just filenames?</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:35:13.239600</ts>
    <user>Gertrude</user>
    <text>Also, some guidelines about how to refactor a large single Main into smaller files maybe ... I'm hitting 700 lines here and it's getting unweildy</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:41:47.242000</ts>
    <user>Lynne</user>
    <text>Intellij Idea with help of &lt;@Carl&gt;'s Elm plug-in displays structure of selected Elm file in a separate pane. It is also accessible by Ctrl/Cmd+F12 - very easy to navigate. And there is also "Go to symbol" action to navigate to a known function anywhere</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:43:26.243600</ts>
    <user>Antonette</user>
    <text>&lt;@Gertrude&gt; one thing you can do is pull dependencies out by concern. For example, you could extract the `Model` type from your main into its own `Model.elm` file and pick things that focus on the model (transformation functions used in `update`, etc.) into this file, maybe factor some parts of update into it, taking care about not putting other concerns into it (i.e. a function that uses `Model` and `Msg` like `update` should probably not go into your `Model.elm` file).</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:44:56.245400</ts>
    <user>Antonette</user>
    <text>Once you've got a `Model.elm` file you may want to extract your `view` function from your main file to put it into its own `View.elm` file ; this `View.elm` file can import whatever it needs from your `Model.elm` module just as the `Main.elm` file does, etc.</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:47:25.247800</ts>
    <user>Antonette</user>
    <text>Another thing is recognizing parts that repeat ; maybe you've got tabs that are very similar but for a couple of params (the message they send when clicked on, the label of the tab, whether it's the current tab or not, ...) ; that might be tighter and easier to update if you factored the common code.</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:49:29.250200</ts>
    <user>Antonette</user>
    <text>One last way I'd mention here is when you've got something that clearly is a subpart of the main view and acts like its own little view (its got its own subpart of your `Model`, it could have its own `Msg` and `update`, it has its own `view`, ...) ; this is a good sign that you could factor this out in its own module (or set of modules depending on its size and complexity).</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:50:06.250700</ts>
    <user>Gertrude</user>
    <text>The trouble I seem to come to is circular dependencies, as well as where to separate concerns</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:51:42.252000</ts>
    <user>Nana</user>
    <text>&lt;@Gertrude&gt; 700 lines is not much though I think</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:51:46.252100</ts>
    <user>Gertrude</user>
    <text>So much relies on each other, ie. Model and Msg are referred to almost everywhere, for example, so it's hard to refactor anything out.</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:52:13.253100</ts>
    <user>Nana</user>
    <text>especially when you have something like the IntelliJ structure view</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:52:37.253700</ts>
    <user>Antonette</user>
    <text>&lt;@Gertrude&gt; that's why I started mentionning that your `Model` and `Msg` types could live in their own file actually :wink: they're usually good "leaf" modules that you can (and probably should) de-couple as soon as possible to make factoring parts easier and less loop-inducing.</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:53:51.254600</ts>
    <user>Antonette</user>
    <text>The anti-pattern as far as my experience got me is to bring into your `Model` and `Msg` module dependencies that don't exclusively work on their own concern (i.e. how to manipulate the model and how to define your messages).</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:56:46.256100</ts>
    <user>Antonette</user>
    <text>One mantra that could help is: "that it works with my `Model`/`Msg`/`whatever` does not necessarily mean I should put it in the `Model`/`Msg`/`whatever` module".</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T05:59:35.257700</ts>
    <user>Antonette</user>
    <text>&lt;@Gertrude&gt; is it helping a bit? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:22:42.258400</ts>
    <user>Gertrude</user>
    <text>&lt;@Antonette&gt; a bit. (sorry about slow reply, so many meetings ...)</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:23:02.258900</ts>
    <user>Gertrude</user>
    <text>I think the take away is separating types in their own namespaces and not necessarily bringing more than helper functions along with.</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:24:48.260800</ts>
    <user>Gertrude</user>
    <text>I also have some past experience with a much larger project that was largely split along Model/Update/View lines, and the problem I had with that was that it wound up with every change having to touch a dozen files and it being hard to find out where Compenent lives, where Component has to refer to Model, send Msg, needs update changes to handle Msg, etc etc</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:34:45.262400</ts>
    <user>Gertrude</user>
    <text>Also I think one problem with this as written is that I often pass down the entire model even to relatively small subcomponents, because the nature of the design I'm replicating is such I often need access even at the micro level</text>
  </message>
  <message conversation_id="1023">
    <ts>2019-04-02T07:43:03.263500</ts>
    <user>Sharon</user>
    <text>As a side question, do you know about Evan's talk "The Life of a File"? He addresses the topic of when and what to extract to modules</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:45:46.263800</ts>
    <user>Gertrude</user>
    <text>I have heard of it, but not watched it yet.</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:45:48.264000</ts>
    <user>Gertrude</user>
    <text>I should.</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:57:15.265100</ts>
    <user>Briana</user>
    <text>Once upon a time I was shown a website similar to Haskell's Hoogle[1], but for Elm. It allows the user to search for functions by type. It was magical.

Now, I can't find it. Please help.

[1] &lt;https://hoogle.haskell.org/&gt;</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:57:58.265400</ts>
    <user>Nana</user>
    <text>&lt;@Briana&gt; &lt;https://klaftertief.github.io/elm-search/&gt;</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:58:13.265700</ts>
    <user>Briana</user>
    <text>B O O K M A R K E D</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T07:58:17.265900</ts>
    <user>Briana</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="1022">
    <ts>2019-04-02T08:07:31.266100</ts>
    <user>Jin</user>
    <text>If you ever loose the bookmark, the search is linked as “Fancy Search” int the sidebar of the elm package website.</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:35:38.266300</ts>
    <user>Antonette</user>
    <text>(my time to be late to the party :sweat_smile: sorry, lunch happened)</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:38:23.266500</ts>
    <user>Antonette</user>
    <text>I know your pain there :wink: coming to elm from a background in imperative programming I was under the impression the Elm architecture was a lot more constricting than it is (I was trying to always write my `update` functions as `Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)` for example).</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:39:21.266700</ts>
    <user>Antonette</user>
    <text>So I tended to work as if with components (as in every component had a `Model`, `Msg`, `init`, `update` and `view`, ... even when there was no need for a state or messages).</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:40:28.267000</ts>
    <user>Antonette</user>
    <text>Also I was using a lot of `Html.map` and `Cmd.map` and `Sub.map` etc.</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:41:40.267300</ts>
    <user>Antonette</user>
    <text>Now I tend to grow my code more organically, starting with one file, then extracting when I feel like a file has grown too large usually getting types and their helpers out first then maybe extracting sub-views, etc. not necessarily giving them a `Model` or `Msg` and all the bells and whistles.</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:43:15.267500</ts>
    <user>Antonette</user>
    <text>As for touching a dozen files, it's not necessarily always as bad as it sounds. I especially like using refactor pattern like using type aliases for simple types then growing them into full-fledged types and using the compiler as a refactor tool that tells me where the change in contract is messing things up and working them from there.</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:43:33.267700</ts>
    <user>Gertrude</user>
    <text>Yeah. I think in this case, the types that are all that big are mostly already factored out, ie. I have a `Types` module ATM which contains all my common data types and their JSON encoders/encoders and any helper functions for working with them. But something like `Msg` almost doesn't make sense to factor out because it's basically the smallest type in my code. XD</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:44:38.267900</ts>
    <user>Gertrude</user>
    <text>ie. It's not Msg that's big, it's `update`, but factoring that out without also factoring out `Model` and `Msg` quickly gets into cyclic dependency territory</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:45:40.268100</ts>
    <user>Antonette</user>
    <text>Indeed.</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:45:53.268300</ts>
    <user>Antonette</user>
    <text>That's why I wouldn't advise you to start with factoring out something that has dependencies.</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:46:25.268500</ts>
    <user>Antonette</user>
    <text>It's like playing mikado ; you want to pull the fancy stick at the bottom only once you've moved enough of the easy ones up.</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T08:46:26.268700</ts>
    <user>Antonette</user>
    <text>:wink:</text>
  </message>
  <message conversation_id="1024">
    <ts>2019-04-02T09:05:43.270400</ts>
    <user>Chin</user>
    <text>I'm building an elm app that should be embeddable/reused in different apps, and it takes some configuration (via flags). What's the best way to include/embed the elm app in different sites?</text>
  </message>
  <message conversation_id="1025">
    <ts>2019-04-02T12:32:23.271100</ts>
    <user>Millie</user>
    <text>Here are some framework Integration examples created by Evan. There can be some additional life cycle stuff you have to address but they're a good starting point how to implement it in general. &lt;https://github.com/andys8/components?files=1&gt;</text>
  </message>
  <message conversation_id="1026">
    <ts>2019-04-02T13:16:17.272400</ts>
    <user>Jana</user>
    <text>Interesting math:
```
&amp;gt; xCoordinates 5 0.1
[0, 0.1, 0.2, 0.30000000000000004, 0.4]
    : List Float
```
List is computed by adding 0.1 to the previous item</text>
  </message>
  <message conversation_id="1026">
    <ts>2019-04-02T13:17:41.272700</ts>
    <user>Virgie</user>
    <text>welcome to floating points :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1026">
    <ts>2019-04-02T13:18:03.272900</ts>
    <user>Jana</user>
    <text>:cry:</text>
  </message>
  <message conversation_id="1026">
    <ts>2019-04-02T13:18:56.273700</ts>
    <user>Lindsey</user>
    <text>equalz f1 f2 = (fabs (f1-f2)) &amp;lt; 0.0000000001  :grimacing:</text>
  </message>
  <message conversation_id="1026">
    <ts>2019-04-02T13:19:58.274400</ts>
    <user>Virgie</user>
    <text>there are other solutions (like rationals) but they have much worse performance</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T13:40:20.276400</ts>
    <user>Janiece</user>
    <text>&lt;@Jana&gt; in general there's no avoiding floating point roundoff completely, but you should be able to get nicer/more accurate results by using division instead of repeated floating point addition:
```
&amp;gt; List.map (\i -&amp;gt; toFloat i / 10) (List.range 0 4)
[0,0.1,0.2,0.3,0.4] : List Float
```</text>
  </message>
  <message conversation_id="1026">
    <ts>2019-04-02T13:49:00.278500</ts>
    <user>Jana</user>
    <text>&lt;@Janiece&gt; Thanks, that’s a great suggestion.  Am making a little barChart widget.</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T13:49:41.278700</ts>
    <user>Janiece</user>
    <text>Using division has the advantage that something like
```
List.map (\i -&amp;gt; toFloat i / 1000) (List.range 0 1000000)
```
to step from 0 to 1000 in 0.001 increments will give you *exactly* 1000 as the last value - repeatedly adding 0.001 a million times would definitely not guarantee that</text>
  </message>
  <message conversation_id="1026">
    <ts>2019-04-02T13:50:09.279200</ts>
    <user>Janiece</user>
    <text>And in general you tend to get nice numbers even near the end:
```
&amp;gt; List.map (\i -&amp;gt; toFloat i / 1000) (List.range 0 1000000) |&amp;gt; List.reverse |&amp;gt; List.take 5 |&amp;gt; List.reverse
[999.996,999.997,999.998,999.999,1000]
```</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T13:50:39.279400</ts>
    <user>Janiece</user>
    <text>happy to help &lt;@Jana&gt;!</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:04:05.282200</ts>
    <user>Janiece</user>
    <text>BTW I actually experimented a while ago with an API for generating `Float` ranges in a flexible/accurate/efficient way
&lt;https://github.com/ianmackenzie/elm-geometry/blob/master/src/Float/Range.elm&gt;
See the doc comments for `numSteps` and `maxStepSize` for basic usage examples
I didn't end up needing the module myself, but I'd be happy to publish it if it would be useful for others (perhaps part of &lt;https://package.elm-lang.org/packages/ianmackenzie/elm-float-extra/latest/&gt;)
Or feel free to just copy that module into your own project and tweak it to fit your needs - zero dependencies!</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:06:03.283500</ts>
    <user>Janiece</user>
    <text>(the code is relatively long/complex because I tried to handle all sorts of input corner cases, and generate lists "in reverse" to avoid the unnecessary list traversals/memory allocations you get when using `List.range`/`List.map` etc.)</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:07:04.283600</ts>
    <user>Earnest</user>
    <text>There's some Decimal packages:
```
$ npx elm repl
&amp;gt; import Decimal as D
&amp;gt; import List.Extra exposing (scanl)
&amp;gt; scanl (\_ acc -&amp;gt; D.add acc (D.fromIntWithExponent 1 -1)) D.zero (List.repeat 4 ()) |&amp;gt; List.map D.toString
["0","0.1","0.2","0.3","0.4"]
```</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:12:56.284300</ts>
    <user>Jana</user>
    <text>Thanks &lt;@Janiece&gt;, I’ll take a look at that.</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:15:10.286100</ts>
    <user>Janiece</user>
    <text>looking at the code again I realize that it's not actually using the division trick, it's basically using `start + n * stepSize` which should be more accurate than repeated additions but a bit less accurate than division</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:15:42.286700</ts>
    <user>Janiece</user>
    <text>can't remember exactly why I went that route :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:18:52.287000</ts>
    <user>Jana</user>
    <text>Floating points are so weird!</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:19:25.287700</ts>
    <user>Jana</user>
    <text>The inaccuracy here really has no effect, other than a psychological one on me :smile:</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:26:17.288200</ts>
    <user>Janiece</user>
    <text>yeah the psychological effect is strong!</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:27:01.288700</ts>
    <user>Janiece</user>
    <text>but I think can be counterbalanced a bit when you look at how accurate something like 0.30000000000000004 actually is</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:27:24.289300</ts>
    <user>Janiece</user>
    <text>4e-17 is a ridiculously tiny number</text>
  </message>
  <message conversation_id="1027">
    <ts>2019-04-02T14:30:28.290100</ts>
    <user>Janiece</user>
    <text>a `Float` can represent the radius of the earth (6371 kilometers) to an accuracy of about a ten-millionth of a millimeter</text>
  </message>
  <message conversation_id="1028">
    <ts>2019-04-02T15:04:53.291100</ts>
    <user>Jesusa</user>
    <text>Hi, what's the canonical way to manage the user authentication with Elm? (is there an auth0 support ?)</text>
  </message>
  <message conversation_id="1029">
    <ts>2019-04-02T15:22:02.291400</ts>
    <user>Alicia</user>
    <text>there’s no canonical way, it’s left up to you</text>
  </message>
  <message conversation_id="1029">
    <ts>2019-04-02T15:22:16.291800</ts>
    <user>Alicia</user>
    <text>there is an auth0 package to help with it for auth &lt;https://package.elm-lang.org/packages/kkpoon/elm-auth0/latest/&gt;</text>
  </message>
  <message conversation_id="1029">
    <ts>2019-04-02T15:29:29.292500</ts>
    <user>Jesusa</user>
    <text>Also, what's the story with mobile app dev? are there any docs/posts I could checkout</text>
  </message>
  <message conversation_id="1029">
    <ts>2019-04-02T15:44:10.293300</ts>
    <user>Nana</user>
    <text>&lt;@Jesusa&gt; Cordova or another kind of webview should definitely work if you're into that</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T17:49:45.293900</ts>
    <user>Virgie</user>
    <text>Did anyone here use bytes so far as a replacement for JSON? Did you run benchmarks? (I'm running benchmarks preparing for my elm-europe talk, and it seems that at least for data with a lot of strings, bytes are much slower than json)</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T17:52:29.296000</ts>
    <user>Virgie</user>
    <text>and for those interested, the kernel code is here &lt;https://github.com/elm/bytes/blob/master/src/Elm/Kernel/Bytes.js#L152&gt;. maybe we can pre-allocate the minimal string width (no idea if that helps) and make larger reads (so read 32 bits at once instead of 8 bits repeatedly)</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T17:54:01.296800</ts>
    <user>Lindsey</user>
    <text>That's interesting!  json parsing has the advantage of being implemented in C++ in the browser I guess.</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T17:54:40.297700</ts>
    <user>Niesha</user>
    <text>How much time do you have at hand? I could probably patch you the compiler so you could experiment with it.</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T17:55:44.298800</ts>
    <user>Virgie</user>
    <text>I think json could efficiently copy the whole string (i.e. find opening quote, find closing quote, `String.slice` the intermediate part), and `Bytes` needs to do more work</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T17:57:17.300100</ts>
    <user>Virgie</user>
    <text>&lt;@Niesha&gt; I will give that a go, but would like some more data first. I want to also try an example with mostly numbers</text>
  </message>
  <message conversation_id="1031">
    <ts>2019-04-02T18:10:06.301500</ts>
    <user>Janna</user>
    <text>I'm decoding a list of objects from JSON and right now, everything blows up if one of the objects are formatted incorrectly. How can I just ignore the broken objects and keep the good ones?</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T18:12:58.301700</ts>
    <user>Virgie</user>
    <text>if the json is incorrectly formatted it cannot be decoded</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T18:13:24.301900</ts>
    <user>Virgie</user>
    <text>and the parser cannot know from what point the input is correctly formatted again</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T18:16:09.302400</ts>
    <user>Lindsey</user>
    <text>I have a small example of decoding a bunch of numbers here:  &lt;https://github.com/bburdette/stl/tree/master/example&gt;</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T18:16:17.302500</ts>
    <user>Janna</user>
    <text>Can't I do some magic with `Json.Decode.oneOf` or `.andThen` or something?</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T18:16:40.302700</ts>
    <user>Earlean</user>
    <text>&lt;@Janna&gt; yep, you can use `Json.Decode.oneOf` and have the second decoder listed produce a value indicating failure to decode</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T18:18:02.303000</ts>
    <user>Virgie</user>
    <text>depends on how ill-formatted the json is though. If the list structure is correct then `oneOf` should work</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T18:19:02.303200</ts>
    <user>Nana</user>
    <text>&lt;https://ellie-app.com/592mLqnXrWha1&gt;</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T18:25:19.303600</ts>
    <user>Nana</user>
    <text>oh actually you don't even need `oneOf` :smile:
just `Decode.list (Decode.maybe &lt;http://Decode.int|Decode.int&gt;)`
&lt;https://ellie-app.com/592scSKT4jYa1&gt;</text>
  </message>
  <message conversation_id="1030">
    <ts>2019-04-02T19:06:05.304000</ts>
    <user>Janna</user>
    <text>Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1032">
    <ts>2019-04-02T19:34:27.304300</ts>
    <user>Hoyt</user>
    <text>You can also slip in a `filterMap` to get rid of the `Maybe` &lt;https://ellie-app.com/593vG3m3W8ja1&gt;</text>
  </message>
  <message conversation_id="1033">
    <ts>2019-04-02T20:18:00.305600</ts>
    <user>Lakita</user>
    <text>I’m kind of a lurker here, but I wanted to let everyone know that I was really inspired by the json decoders/encoders in Elm. they reminded me a little of the scalaz stuff I used to work on. I build a similar decoder library to elm’s in Go: &lt;https://github.com/go-functional/dcode/&gt;</text>
  </message>
  <message conversation_id="1033">
    <ts>2019-04-02T20:18:11.305900</ts>
    <user>Lakita</user>
    <text>I’d love to hear what folks think :grin:</text>
  </message>
  <message conversation_id="1034">
    <ts>2019-04-02T21:39:05.306000</ts>
    <user>Jana</user>
    <text>I use JWT tokens</text>
  </message>
  <message conversation_id="1034">
    <ts>2019-04-02T21:39:47.306200</ts>
    <user>Jana</user>
    <text>Good point — the Earth example puts this in context</text>
  </message>
  <message conversation_id="1035">
    <ts>2019-04-03T01:03:17.306700</ts>
    <user>Nga</user>
    <text>Is it possible to expose a constructor without exposing the type?</text>
  </message>
  <message conversation_id="1035">
    <ts>2019-04-03T01:07:11.307400</ts>
    <user>Lindsey</user>
    <text>you can expose a function that creates the type, but not the constructors that are part of the type.</text>
  </message>
  <message conversation_id="1036">
    <ts>2019-04-03T02:03:19.307500</ts>
    <user>Chin</user>
    <text>&lt;@Millie&gt; oh what I meant was, should I use an iframe and render the entire app? or build the elm app and copy it into each project? Or maybe there are other ways I don't know about.</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T02:39:30.309600</ts>
    <user>Selena</user>
    <text>Hey, I was using VScode with &lt;https://github.com/Krzysztof-Cieslak/vscode-elm&gt; for elm 0.18, but after upgrading to 0.19 errors in my code editor are not formatted. Any suggestions how to fix that or recommendation for some other editor/package for 0.19? Thank you</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T02:44:24.309700</ts>
    <user>Nana</user>
    <text>Not sure, but I can at least say it works for me</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T02:45:15.309900</ts>
    <user>Nana</user>
    <text>And I highly recommend any JetBrains IDE, it has the best Elm plugin</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T02:45:28.310100</ts>
    <user>Nana</user>
    <text>Switched from VSCode to it</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T02:45:57.310300</ts>
    <user>Nana</user>
    <text>You can use IntelliJ Community Edition which is free</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T02:53:47.310500</ts>
    <user>Millie</user>
    <text>Depends on the the application, what's "outside" and what you're trying to do. In general a `div` is fine for Elm.</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T02:59:42.311500</ts>
    <user>Desire</user>
    <text>i keep forgetting can only the elm repos define new infix operators or can elm-community also do it?</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:01:28.312100</ts>
    <user>Desire</user>
    <text>can't find any mention of elm-community in the compiler, so it seems to just be the elm repos</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:03:24.312500</ts>
    <user>Desire</user>
    <text>it's elm and elm-explorations</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:03:32.312800</ts>
    <user>Desire</user>
    <text>forgot about that namespace</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:09:16.313700</ts>
    <user>Jin</user>
    <text>IIRC only `elm` repos can define infix operators, `elm-exploration` can contain kernel code.</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:18:32.314300</ts>
    <user>Desire</user>
    <text>oh, I did think that would be the same rule, but makes things easier for me</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:25:54.315400</ts>
    <user>Jin</user>
    <text>Yes, I might be wrong. But as of now there are only binary operators defined in `elm` packages.</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:33:11.315800</ts>
    <user>Desire</user>
    <text>how did you check that?</text>
  </message>
  <message conversation_id="1038">
    <ts>2019-04-03T03:37:27.317300</ts>
    <user>Jin</user>
    <text>I’m working on a updates for elm-search and have an index of all exposed things in all published packages at hand.</text>
  </message>
  <message conversation_id="1038">
    <ts>2019-04-03T03:39:39.317400</ts>
    <user>Selena</user>
    <text>I'll try it out thank you!</text>
  </message>
  <message conversation_id="1038">
    <ts>2019-04-03T03:41:07.317600</ts>
    <user>Chin</user>
    <text>So if it's a div, then that means I need to copy the app into every project whenever a new version is released. Right?</text>
  </message>
  <message conversation_id="1038">
    <ts>2019-04-03T03:41:19.317800</ts>
    <user>Chin</user>
    <text>As opposed to an iframe that is always up to date.</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:45:42.318300</ts>
    <user>Desire</user>
    <text>can you get me a list of all infixes used?</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:46:46.318600</ts>
    <user>Desire</user>
    <text>this is my current one &lt;https://github.com/Razzeee/tree-sitter-elm/blob/add-lexer/grammar.js#L619-L642&gt;</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:57:33.318700</ts>
    <user>Jin</user>
    <text>Sure. Just be careful with the ones starting with `/` :wink:
```
[
  "elm/core/1.0.2/Basics/&amp;amp;&amp;amp;",
  "elm/core/1.0.2/Basics/*",
  "elm/core/1.0.2/Basics/+",
  "elm/core/1.0.2/Basics/++",
  "elm/core/1.0.2/Basics/-",
  "elm/core/1.0.2/Basics//",
  "elm/core/1.0.2/Basics///",
  "elm/core/1.0.2/Basics//=",
  "elm/core/1.0.2/Basics/&amp;lt;",
  "elm/core/1.0.2/Basics/&amp;lt;&amp;lt;",
  "elm/core/1.0.2/Basics/&amp;lt;=",
  "elm/core/1.0.2/Basics/&amp;lt;|",
  "elm/core/1.0.2/Basics/==",
  "elm/core/1.0.2/Basics/&amp;gt;",
  "elm/core/1.0.2/Basics/&amp;gt;=",
  "elm/core/1.0.2/Basics/&amp;gt;&amp;gt;",
  "elm/core/1.0.2/Basics/^",
  "elm/core/1.0.2/Basics/|&amp;gt;",
  "elm/core/1.0.2/Basics/||",
  "elm/core/1.0.2/List/::",
  "elm/parser/1.1.0/Parser.Advanced/|.",
  "elm/parser/1.1.0/Parser.Advanced/|=",
  "elm/parser/1.1.0/Parser/|.",
  "elm/parser/1.1.0/Parser/|=",
  "elm/url/1.0.0/Url.Parser/&amp;lt;/&amp;gt;",
  "elm/url/1.0.0/Url.Parser/&amp;lt;?&amp;gt;"
]
```</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T03:59:51.318900</ts>
    <user>Jin</user>
    <text>Looks like your list</text>
  </message>
  <message conversation_id="1037">
    <ts>2019-04-03T04:53:17.319400</ts>
    <user>Desire</user>
    <text>yep, seems like i got all. the ones used multiple times got me for a sec</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T07:57:51.321600</ts>
    <user>Nana</user>
    <text>looking for a good datepicker, currently leaning towards
&lt;https://package.elm-lang.org/packages/CurrySoftware/elm-datepicker/latest/&gt;

though doesn't this example code look a bit fiddly for a basic datepicker? &lt;https://ellie-app.com/3t4W6N4Trm3a1&gt;
(in particular the update function)</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:02:07.322900</ts>
    <user>Ruthann</user>
    <text>the problem with UI components in elm is that if it holds state (ie in this case, DatePicker) then you will always have to route it’s Msg to it’s update and store it’s state in yours for _every_._single_._UI_._component_</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:03:00.323700</ts>
    <user>Ruthann</user>
    <text>custom elements is an option here to keep UI state local to itself in js outside of elm and only fire off msgs when the value that you care about changes</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:04:41.324700</ts>
    <user>Nana</user>
    <text>yeah, but using custom elements just so you can store local state doesn't seem worth it</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:04:51.325100</ts>
    <user>Ruthann</user>
    <text>i did a POC for a datepicker component and then scrapped it once i realised we had to do it for 200+ instances, same for filterable dropdowns etc</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:05:48.325200</ts>
    <user>Ruthann</user>
    <text>i would define local state as user input that may or may not be valid, the state of a dropdown, the month that a datepicker is on</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:06:21.325400</ts>
    <user>Ruthann</user>
    <text>these are things that your app doesn’t particularly care about but have to route through it’s update tree</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:06:47.325600</ts>
    <user>Nana</user>
    <text>btw regarding filterable dropdowns I actually made one myself, and it doesn't require so much code to use :thinking_face:</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:08:07.325800</ts>
    <user>Ruthann</user>
    <text>if it has a update function and state, i’d prolly not use it.. sorry, we have over 100 dropdowns in our app</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:08:27.326000</ts>
    <user>Ruthann</user>
    <text>more that double of that for datetime inputs</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:09:33.326200</ts>
    <user>Nana</user>
    <text>I wasn't suggesting you should switch to my select :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:10:26.326500</ts>
    <user>Ruthann</user>
    <text>no no, i was demonstrating the impracticality at scale for using ui components in elm</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:10:47.326700</ts>
    <user>Ruthann</user>
    <text>it works if you have a handful of forms</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:11:51.326900</ts>
    <user>Ruthann</user>
    <text>this is a topic that’s still frustrating us as we haven’t gone to custom elements yet and having to write quite a bit of boilerplates to make our UI work</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:12:45.327200</ts>
    <user>Nana</user>
    <text>hmm, but if you're using custom elements everywhere, it seems like you'd kind of lose a lot of the benefit of Elm</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:15:39.327400</ts>
    <user>Ruthann</user>
    <text>i would argue that you don’t lose much by storing user inputs locally. the benefits we have using elm is typing our business logic in case statements, this we don’t lose. typing our api connection to the backend and removing impossible state from our pages, internal data representation</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:16:48.327600</ts>
    <user>Ruthann</user>
    <text>the only problem is when the local ui state goes out of sync with the elm state, how to handle all the edge cases around that. but if NRI are using it successfully for all their UI components, it gives me hope</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:26:31.327800</ts>
    <user>Nana</user>
    <text>oh, this one seems much simpler though!
&lt;https://package.elm-lang.org/packages/NoRedInk/datetimepicker-legacy/latest&gt;</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:27:16.328000</ts>
    <user>Nana</user>
    <text>```
update msg model =
    case msg of
        DateChange datePickerState selectedDate -&amp;gt;
            ( { model | selectedDate = selectedDate, datePickerState = datePickerState }, Cmd.none )
```</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:28:07.328200</ts>
    <user>Lynne</user>
    <text>Yeah, I was about to suggest looking into `elm-sortable-table`, which is the pattern used by `datetimepicker-legacy` as well</text>
  </message>
  <message conversation_id="1039">
    <ts>2019-04-03T08:28:46.328400</ts>
    <user>Nana</user>
    <text>and the pattern I'm using for my `select` :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:28:52.328600</ts>
    <user>Lynne</user>
    <text>Evan had very good reasoning behind those design decision</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:29:34.328800</ts>
    <user>Lynne</user>
    <text>And it should definitely help when there are hundreds of similar components, I think</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:29:58.329000</ts>
    <user>Lynne</user>
    <text>Without resorting to custom elements (which I think will be a time bomb)</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:32:24.330100</ts>
    <user>Nana</user>
    <text>my only issue is that it's using elm-css :thinking_face: I'd actually prefer some nicely namespace-prefixed classes plus a .css file - easier to customize</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:32:43.330700</ts>
    <user>Simon</user>
    <text>We make heavy use of the sortable table pattern across our components, and lots of use of web components (including date picker)</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:33:10.331200</ts>
    <user>Simon</user>
    <text>(That pattern needs a name)...</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:33:27.331700</ts>
    <user>Simon</user>
    <text>Web component for the win, here, agreed</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:34:02.332600</ts>
    <user>Simon</user>
    <text>Your apps needs/size can dictate your choices here,</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:35:39.335400</ts>
    <user>Simon</user>
    <text>For instance elm is fantastic but if we had to give up consumer quality date pickers from the js ecosystem that’s a huge experiential step back for our users. Web components give us a choice. I look forward to a date picker of the same caliber, we seem pretty far from it. Same for charting. All that said, surgical web components for us have not been problematic in the least, fwiw</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:37:42.335700</ts>
    <user>Nana</user>
    <text>&lt;@Simon&gt; so what datepicker are you using that you think is better than this?
&lt;https://abadi199.github.io/datetimepicker/&gt;
I don't really see what it's missing :thinking_face:</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:38:02.336000</ts>
    <user>Nana</user>
    <text>oh, I guess date ranges would be one thing :smile:</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:38:24.336400</ts>
    <user>Simon</user>
    <text>One sec</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:40:22.336700</ts>
    <user>Simon</user>
    <text>&lt;https://flatpickr.js.org/&gt;</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:40:56.337300</ts>
    <user>Simon</user>
    <text>We migrated away from the one you linked</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:53:25.337500</ts>
    <user>Nana</user>
    <text>&lt;@Simon&gt; I see :thinking_face:</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:55:10.338000</ts>
    <user>Simon</user>
    <text>Can link our elm signature if interested</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T08:59:43.338600</ts>
    <user>Lynne</user>
    <text>I am curious &lt;@Simon&gt;</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T09:01:06.339700</ts>
    <user>Simon</user>
    <text>Will post after a short commute; similarly we have algolia autocomplete, and chartjs </text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T09:01:30.340500</ts>
    <user>Simon</user>
    <text>The only other thing I believe we use WC for is image fallbacks on load failure </text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T09:38:02.340700</ts>
    <user>Simon</user>
    <text>&lt;https://gist.github.com/aaronwhite/fd7c79f34ddc07cb6864fdb13b4b32c9&gt;</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T09:38:11.340900</ts>
    <user>Lynne</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T09:38:21.341100</ts>
    <user>Simon</user>
    <text>:thumbsup:</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T09:39:29.341300</ts>
    <user>Simon</user>
    <text>(RecordUpdaters are funcs of the form `updateProperty value record = { record | property = value }`; we use them for nicer chainability</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T09:39:47.341500</ts>
    <user>Lynne</user>
    <text>I see, thanks</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T09:44:04.341700</ts>
    <user>Leoma</user>
    <text>&lt;@Ruthann&gt; have you seen my library that makes custom elements at scale OK? &lt;https://package.elm-lang.org/packages/z5h/component-result/1.0.1/&gt;</text>
  </message>
  <message conversation_id="1040">
    <ts>2019-04-03T09:47:55.341900</ts>
    <user>Simon</user>
    <text>^^ thats a great lib</text>
  </message>
  <message conversation_id="1041">
    <ts>2019-04-03T09:48:24.342100</ts>
    <user>Simon</user>
    <text>ideal pattern to rally around when hosting in elm</text>
  </message>
  <message conversation_id="1042">
    <ts>2019-04-03T10:35:27.343300</ts>
    <user>Odell</user>
    <text>Hello everybody, just wanted to share that we have opened the channel &lt;#CHAAB0RTP|openapi&gt; – for those of us who use elm with openapi and/or openapi-generator. Feel free to join :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1043">
    <ts>2019-04-03T11:14:27.349000</ts>
    <user>Cammy</user>
    <text>Question: I’m in a situation on a work project where I need to use file select and then post it to a rest api. elm/file makes the selection part of this easy, and elm/http 2.0 would also make this easy, but the team has voted to keep HttpBuilder which is not compatible with 2.0. 

I’ve been creating a dataUrl from the file, passing it through a port and uploading, but there’s a limit on the size of the file I can do this way, both a hardcoded limit in some browsers and a practical limit because doing this with a 50mb file (which some of these files are) is somewhat unwieldy. 

Anyone have thoughts on how I could pass file data or a blob through a port? Am I missing something?</text>
  </message>
  <message conversation_id="1043">
    <ts>2019-04-03T11:19:11.350600</ts>
    <user>Huong</user>
    <text>My personal vote would be to write something that gives you the httpbuilder API, for elm/http@2.x. Over time, you'll run into more cases where the dependency of http@1.x becomes a blocking issue - libraries you wish to use, new elm version, ...</text>
  </message>
  <message conversation_id="1043">
    <ts>2019-04-03T11:20:35.351200</ts>
    <user>Cammy</user>
    <text>Yeah, I suggested that and even began work on it but was overruled. </text>
  </message>
  <message conversation_id="1043">
    <ts>2019-04-03T11:38:14.352700</ts>
    <user>Lynn</user>
    <text>Just trying to swtich a large project to 0.19. We were victims of the compiler bug and thus are using the patched version from &lt;@Donella&gt;. But even with that I’m getting a huge number of
```
Error: Compiler process exited with error Compilation failed
elm: not enough bytes
CallStack (from HasCallStack):
  error, called at libraries/binary/src/Data/Binary.hs:212:21 in binary-0.8.5.1:Data.Binary
```</text>
  </message>
  <message conversation_id="1044">
    <ts>2019-04-03T11:42:27.352900</ts>
    <user>Velia</user>
    <text>This happens if you have several elm builds occurring simultaneously (IDE + webpack + ... for example).

This could help:
&lt;https://discourse.elm-lang.org/t/working-around-not-enough-bytes-problems/3359&gt;

Also it is likely that the next release will include some lock by default.</text>
  </message>
  <message conversation_id="1043">
    <ts>2019-04-03T11:44:35.353200</ts>
    <user>Lynn</user>
    <text>thanks a lot</text>
  </message>
  <message conversation_id="1045">
    <ts>2019-04-03T15:10:13.357300</ts>
    <user>Kymberly</user>
    <text>Quick thanks to everyone who helped with recommendations on elmx / zeplin a while back!</text>
  </message>
  <message conversation_id="1045">
    <ts>2019-04-03T15:27:38.357400</ts>
    <user>Florencia</user>
    <text>I have `sysconfcpus -n 1` around eeeeeverything related to elm</text>
  </message>
  <message conversation_id="1045">
    <ts>2019-04-03T15:27:56.357600</ts>
    <user>Florencia</user>
    <text>when this happens I also usually stop the tools and `rm -rf elm-stuff` and then try again</text>
  </message>
  <message conversation_id="1046">
    <ts>2019-04-03T18:16:36.358500</ts>
    <user>Marcellus</user>
    <text>Is there a list online of the local meetups that exist?</text>
  </message>
  <message conversation_id="1047">
    <ts>2019-04-03T23:34:28.359100</ts>
    <user>Ruthann</user>
    <text>i don’t know that, but I do know there are regular ones in Australia. Sydney and Melbourne:
&lt;https://www.meetup.com/Sydney-Elm-Meetup/&gt;
&lt;https://www.meetup.com/Elm-Melbourne/&gt;</text>
  </message>
  <message conversation_id="1048">
    <ts>2019-04-04T01:48:31.360300</ts>
    <user>Kris</user>
    <text>What's the `?` in error messages?</text>
  </message>
  <message conversation_id="1048">
    <ts>2019-04-04T01:48:35.360500</ts>
    <user>Kris</user>
    <text>```This `combine` call produces:

    ? -&amp;gt; String
```</text>
  </message>
  <message conversation_id="1049">
    <ts>2019-04-04T02:51:39.360700</ts>
    <user>Monnie</user>
    <text>I guess the compiler could not infer the type</text>
  </message>
  <message conversation_id="1049">
    <ts>2019-04-04T03:01:19.361100</ts>
    <user>Clarissa</user>
    <text>And London. :slightly_smiling_face:
&lt;https://www.meetup.com/Elm-London-Meetup/&gt;</text>
  </message>
  <message conversation_id="1048">
    <ts>2019-04-04T03:39:30.361600</ts>
    <user>Carrie</user>
    <text>I want to highlight the code in div on the page and how I write elm. Who can recommend some documents?</text>
  </message>
  <message conversation_id="1050">
    <ts>2019-04-04T04:02:15.363100</ts>
    <user>Jin</user>
    <text>I would have a look how the Elm package website integrates with &lt;https://highlightjs.org&gt;.
elm-explorations/markdown explains it a bit in its Readme.
&lt;https://package.elm-lang.org/packages/elm-explorations/markdown/latest/&gt;

Also see &lt;https://github.com/elm/package.elm-lang.org/blob/master/src/frontend/Utils/Markdown.elm&gt; and &lt;https://github.com/elm/package.elm-lang.org/blob/e0b7aa4282038475612722ff7a57195866f8645b/backend/ServeFile.hs#L54&gt;</text>
  </message>
  <message conversation_id="1048">
    <ts>2019-04-04T04:11:24.363500</ts>
    <user>Carrie</user>
    <text>Thank you very much.</text>
  </message>
  <message conversation_id="1049">
    <ts>2019-04-04T04:58:42.363800</ts>
    <user>Hoa</user>
    <text>Berlin  &lt;https://www.meetup.com/Elm-Berlin/&gt;</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:09:08.365300</ts>
    <user>Fidela</user>
    <text>Hi all, we're looking at using Elm for a project but need to be able to use (1) &lt;http://deck.gl|deck.gl&gt; (Uber's webgl-accelerated mapping framework) &amp;amp; (2) d3 (for generating visualizations in SVG)</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:09:28.365700</ts>
    <user>Fidela</user>
    <text>I have been reading a little bit about interop and I'm not really sure whether this is something that could work well for us?</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:12:26.365800</ts>
    <user>Nana</user>
    <text>what's up with the &lt;http://deck.gl|deck.gl&gt; website!? :grimacing:
it totally tanks my computer</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:13:18.366000</ts>
    <user>Nana</user>
    <text>anyway, yes you can do that with Elm with ports and/or web components</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:13:20.366200</ts>
    <user>Fidela</user>
    <text>the header at the very top is a live demo</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:15:00.366900</ts>
    <user>Danika</user>
    <text>Seems like a custom html element that wraps the library might be the way to go here</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:15:08.367000</ts>
    <user>Fidela</user>
    <text>that's good to hear, so I guess we still have agency over the DOM we need to control, &amp;amp; could hook into Elm-generated DOM elements to draw to? e.g. a &amp;lt;canvas&amp;gt; for deck, &amp;lt;svg&amp;gt; for d3?</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:16:05.367300</ts>
    <user>Fidela</user>
    <text>as in &lt;https://guide.elm-lang.org/interop/custom_elements.html&gt; ?</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:16:32.367400</ts>
    <user>Nana</user>
    <text>yes</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:19:07.367600</ts>
    <user>Fidela</user>
    <text>good to hear, I think I will try to implement 2 POCs (one for each framework) to start with :slightly_smiling_face: thanks</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:20:35.368500</ts>
    <user>Danika</user>
    <text>Aye, I’ve not used them personally so I can’t be much help but I’m quite sure this is the way to go </text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:20:59.368900</ts>
    <user>Fidela</user>
    <text>sure, I'll give that a more thorough look, thank you</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T05:22:28.369000</ts>
    <user>Nana</user>
    <text>I might have disabled hardware acceleration for Chrome :sweat_smile:</text>
  </message>
  <message conversation_id="1052">
    <ts>2019-04-04T05:28:57.369300</ts>
    <user>Lynn</user>
    <text>You use `sysconfcpus -n 1` for CI or in general on your dev machine?</text>
  </message>
  <message conversation_id="1053">
    <ts>2019-04-04T05:52:13.369600</ts>
    <user>Florencia</user>
    <text>everywhere</text>
  </message>
  <message conversation_id="1053">
    <ts>2019-04-04T05:56:03.370400</ts>
    <user>Hoa</user>
    <text>Cool header! Here on Safari works smoothly :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1053">
    <ts>2019-04-04T06:34:45.370900</ts>
    <user>Valeria</user>
    <text>&lt;https://www.meetup.com/fr-FR/Meetup-Elm-Paris/&gt;</text>
  </message>
  <message conversation_id="1051">
    <ts>2019-04-04T06:58:56.371300</ts>
    <user>Hoyt</user>
    <text>&lt;https://www.meetup.com/chicago-elm/&gt;</text>
  </message>
  <message conversation_id="1052">
    <ts>2019-04-04T08:43:12.373400</ts>
    <user>Gertrude</user>
    <text>Is it possible to trigger a `Msg` in my `init` somehow? Or at least on program start?</text>
  </message>
  <message conversation_id="1052">
    <ts>2019-04-04T08:48:41.374200</ts>
    <user>Gertrude</user>
    <text>I'm using elm-uuid so I can create some unique IDs for something and I'm puzzling how to pre-populate the first value so I can use it in some other update branches</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:05:39.374800</ts>
    <user>Antonette</user>
    <text>Sure you can, through a `Cmd` or directly by calling `update` in `init`.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:07:27.376600</ts>
    <user>Antonette</user>
    <text>I don't know elm-uuid, but I'd wager that if they require you to seed some values through side-effects, there must be a function to get a `Task` or `Cmd` you can use to initialize your model.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:08:01.376800</ts>
    <user>Antonette</user>
    <text>There, look at this:</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:08:12.377100</ts>
    <user>Antonette</user>
    <text>&lt;https://package.elm-lang.org/packages/danyx23/elm-uuid/latest/Uuid#uuidGenerator&gt;</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:09:22.378400</ts>
    <user>Gertrude</user>
    <text>I wound up doing this:

```
send : Msg -&amp;gt; Cmd Msg
send msg =
    Task.succeed msg
        |&amp;gt; Task.perform identity
```</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:10:07.379300</ts>
    <user>Antonette</user>
    <text>So, this is a `Generator Uuid` ; `Generator` is a type that can be used with `Random.generate` &lt;https://package.elm-lang.org/packages/elm-lang/core/latest/Random#generate&gt; to give you a `Cmd msg` that gets a value of the type the `Generator` provides (in this case a `Uuid`).</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:10:59.380100</ts>
    <user>Gertrude</user>
    <text>as it turns out I can't use UUIDs for this anyway. XD</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:11:15.380700</ts>
    <user>Gertrude</user>
    <text>I need instead to somehow make unique integer IDs. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:11:16.380800</ts>
    <user>Antonette</user>
    <text>Well, at least now you know how to get one when needed :wink:</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:13:08.382600</ts>
    <user>Antonette</user>
    <text>Depending on how unique you want your ids to be, a `Generator Int` could do the trick.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:13:36.382800</ts>
    <user>Antonette</user>
    <text>&lt;https://package.elm-lang.org/packages/elm-lang/core/latest/Random#int&gt;</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:14:41.384600</ts>
    <user>Gertrude</user>
    <text>Yeah. The issue is I have this list of "Entries" and I need to make sure that when I create a new one as a placeholder, I need to give it an id that doesn't match any of the others.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:14:56.385200</ts>
    <user>Antonette</user>
    <text>With a `Generator` however, there is always a slight chance of picking the same number twice, so it might be a good idea to not just blindly accept any number it spits out, or do something a bit more unique-y like maintaining a list of available ideas in which you pluck one each time, and maybe add one back once you've thrown it out.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:15:01.385400</ts>
    <user>Gertrude</user>
    <text>Fortunately, I have the ability to query for the latest entry, so I will just grab that and add one.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:15:46.386700</ts>
    <user>Gertrude</user>
    <text>It's SQL sequential IDs so this should work, since I don't actually even send that ID back to the backend, it's just there to prevent edit collisions</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:15:52.387000</ts>
    <user>Antonette</user>
    <text>The only downside to this plan is when you reach the highest possible `Int` ; in which case the "recyclable" list of available ids may do the trick.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:16:47.387800</ts>
    <user>Antonette</user>
    <text>If you want to prevent edit collision, I'd advise you use a way to distinguish "persisted" ids from "draft" ids.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:17:36.388900</ts>
    <user>Antonette</user>
    <text>(like an `Id x y` type: `type Id x y = Draft x | Persisted y`)</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:19:43.389800</ts>
    <user>Gertrude</user>
    <text>yeah. currently the largest ID is in the 1mil range, and we accrue about ~500 new IDs per day.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:21:03.391200</ts>
    <user>Antonette</user>
    <text>Then the `type Id x y = Draft x | Persisted y` might be just the trick. You don't have to start your draft increment from the highest know ID, and you have a way to easily distinguish between persisted and draft elements.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:21:32.391400</ts>
    <user>Gertrude</user>
    <text>Hmm. Could do.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:23:24.392500</ts>
    <user>Gertrude</user>
    <text>but on the flipside, it will, at present usage, take over 11,000 years to hit the ID cap of an Elm Int max size.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:27:42.393600</ts>
    <user>Gertrude</user>
    <text>each entry is also specific to a date, so it only has to be unique against other entries on that date, which further prevents collisions. I've probably been over thinking this.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:29:26.394900</ts>
    <user>Antonette</user>
    <text>As long as you don't get oddities from an id being set on a draft while an element is persisted in the database with the same id, you should be fine I think.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:29:58.395200</ts>
    <user>Gertrude</user>
    <text>Yeah. When new entries are saved we don't send the ID.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:30:46.396300</ts>
    <user>Gertrude</user>
    <text>and saving an entry triggers a refresh response of the entire list of entries from the backend, so that they once again reflect whatever's in the data base.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:31:19.396900</ts>
    <user>Antonette</user>
    <text>Then my advice is: don't overthink :wink: you'll still be able to change it later if you need something more robust anyways.</text>
  </message>
  <message conversation_id="1055">
    <ts>2019-04-04T09:48:52.397100</ts>
    <user>Marcellus</user>
    <text>Luke got me this list &lt;https://www.meetup.com/topics/elm-programming/all/&gt; which is decent!</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:51:35.398600</ts>
    <user>Gertrude</user>
    <text>just now I learned a thing: a Msg is sometimes a function and sometimes a value, and so Elm's type inference will assume the latter if you try to pass one as a generic value.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:53:01.400300</ts>
    <user>Gertrude</user>
    <text>So if you have a message `EditEntry String Entry`, and you pass `EditEntry` to a function that expects a `msg` generic type variable, it will not realize that `EditEntry` is a constructor, and so if you then try to give it arguments it complains that it is not a function.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:53:41.401100</ts>
    <user>Gertrude</user>
    <text>You have to make explicit that you're taking a constructor function for a msg: `(String -&amp;gt; Entry -&amp;gt; msg)` will work.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:54:44.401900</ts>
    <user>Hoa</user>
    <text>The way I see it is that `msg` is a generic value/function/whatever for Elm.  If you use `Msg`  the compiler can be more precise</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:55:00.402300</ts>
    <user>Hoa</user>
    <text>makes sense ?</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T09:55:22.402800</ts>
    <user>Gertrude</user>
    <text>yeah. In this case I have not yet refactored such that I can refer to Msg directly in the function without cyclic dependency. This may be a good moment to fix that.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:04:04.404800</ts>
    <user>Carter</user>
    <text>I have this "non optimal" use case where i would like to call java code from elm. I found "TeaVM" that lets you compile java to .js. So i guess it would be doable with elm ports. But, i wonder if theres an even better solution?</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:05:59.405100</ts>
    <user>Niesha</user>
    <text>Java code? You're running it on the backend?</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:06:18.405600</ts>
    <user>Niesha</user>
    <text>Just make it a REST API call.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:06:24.405800</ts>
    <user>Carter</user>
    <text>yeah that too. But i would like to call java code clientside</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:06:37.406300</ts>
    <user>Niesha</user>
    <text>How would you run Java on the browser?</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:06:40.406400</ts>
    <user>Carter</user>
    <text>Well, thats the thing - i dont want to do that</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:07:03.406900</ts>
    <user>Carter</user>
    <text>Theres that TeaVM. I compiles java to js.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:07:16.407200</ts>
    <user>Carter</user>
    <text>so through elm ports id be able to call it</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:08:04.407600</ts>
    <user>Carter</user>
    <text>its just one function but involves quite a bit of types</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:08:18.408000</ts>
    <user>Carter</user>
    <text>(classes/intefaces as java calls them)</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:12:59.408700</ts>
    <user>Corinne</user>
    <text>&lt;@Carter&gt; sounds like you want a fork of TeaVM (or in fact plain GWT) that transpiles to Elm directly...</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:13:35.409400</ts>
    <user>Corinne</user>
    <text>Note their docs though:
&amp;gt; If you are a JavaScript developer who is satisfied with JavaScript, TypeScript or even elm, you probably won’t need TeaVM.</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:15:00.410300</ts>
    <user>Carter</user>
    <text>well, i need to share java code between server and client</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:17:07.410700</ts>
    <user>Corinne</user>
    <text>I agree with &lt;@Niesha&gt; here - API is the way</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:17:59.411000</ts>
    <user>Corinne</user>
    <text>(unless you want to use a Java Applet of course :laughing: )</text>
  </message>
  <message conversation_id="1056">
    <ts>2019-04-04T10:35:57.411300</ts>
    <user>Willodean</user>
    <text>Hey folks</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:36:06.411700</ts>
    <user>Willodean</user>
    <text>I am back writing Elm once again!</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:37:32.412400</ts>
    <user>Willodean</user>
    <text>I wrote a Modal yesterday and could use feedback on the approach</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:37:54.413000</ts>
    <user>Willodean</user>
    <text>I used the krisjenkins style type for the Modal</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:38:27.414100</ts>
    <user>Willodean</user>
    <text>And it worked fine. I had a button in the UI that sends a message with my Modal type inside</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:38:53.414900</ts>
    <user>Willodean</user>
    <text>Problem is, it doesn't sync with the model after it fires the first time</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:39:07.415300</ts>
    <user>Willodean</user>
    <text>So I end up with something like this</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:40:09.417100</ts>
    <user>Willodean</user>
    <text>```
type Model = Model
  { ...stuff
  , modalState = Toggle
  , modalView = Model -&amp;gt; Modal Msg
  }

type Msg
  = ...stuff
  | OpenModal (Model -&amp;gt; Modal Msg)
  | CloseModal
```</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:40:45.417500</ts>
    <user>Willodean</user>
    <text>Which feels very unElm</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:44:57.419600</ts>
    <user>Willodean</user>
    <text>It works for now, but I would very much appreciate a suggestion</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:46:26.420100</ts>
    <user>Gertrude</user>
    <text>is it generally necessary to expose anything but `main` from your `Main` module?</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:47:55.420200</ts>
    <user>Carman</user>
    <text>No, you should be able to expose just `main`</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:51:20.420400</ts>
    <user>Gertrude</user>
    <text>I thought so. was wondering why I was bothering to export anything else but I think it's just something elm-format did</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T10:54:31.420700</ts>
    <user>Sharon</user>
    <text>if you want to use function from your Main module in the repl, you'll need to expose them :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T11:02:10.421000</ts>
    <user>Sharon</user>
    <text>That is a problem. I think we need some more information to figure out why</text>
  </message>
  <message conversation_id="1054">
    <ts>2019-04-04T11:03:34.421200</ts>
    <user>Sharon</user>
    <text>Is it maybe possible to share an example on &lt;http://ellie-app.com/&gt; ?</text>
  </message>
  <message conversation_id="1057">
    <ts>2019-04-04T12:18:47.424700</ts>
    <user>Diedre</user>
    <text>:wave: Hi! Until Monday, I’d never written any code to put pixels on a website, only backend data engineering work. I went through the Elm tutorial and got from zero ( + only a bit of FP experience, though lots of interest) to making a test site that displays random emoji (wheee, types) on click in one day! I’m so glad elmlang exists, and really excited to make projects with a beautiful language that has a kind community. :heart:</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:48:34.427200</ts>
    <user>Jae</user>
    <text>Hi, I when running `elm install mpizenberg/elm-debounce` I consistently get the following error
```-- CORRUPT JSON ----------------------------------------------------------------

The elm.json for elm-community/list-extra 2.0.0 got corrupted somehow.

I removed it from my file cache, so if it was some transient error it should be
fixed if you try the same thing again. Please report this if it seems like an
Elm problem though!
```</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:49:19.427300</ts>
    <user>Jae</user>
    <text>One thing I noticed is that &lt;https://package.elm-lang.org/packages/mpizenberg/elm-debounce/3.0.2/&gt; exists on the package site but if you search "elm-debounce" it doesn't get listed</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:49:55.427500</ts>
    <user>Carman</user>
    <text>That's because that version is not updated for Elm 0.19</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:50:47.427800</ts>
    <user>Jae</user>
    <text>I thought 0.18 packages weren't listed at all on the 0.19 package site?</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:51:22.428100</ts>
    <user>Carman</user>
    <text>They are excluded from the search results</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:51:33.428300</ts>
    <user>Carman</user>
    <text>but if you have a direct link you can still reach it</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:51:45.428500</ts>
    <user>Carman</user>
    <text>&amp;gt;&amp;gt;&amp;gt; I do not have the time to update it to elm 0.19 with the modifications I wished in response to issues #5 and #6 (removing functions and state monad, move functionalities to update instead of view).

You will probably find what you need with Gizra/elm-debouncer.</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:51:49.428700</ts>
    <user>Carman</user>
    <text>from the README</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:52:30.428900</ts>
    <user>Jae</user>
    <text>Oops, this whole time I thought there was a separate domain for 0.18 packages</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:53:23.429300</ts>
    <user>Carman</user>
    <text>The easiest way to check if a package supports 0.19 is to look it up on GitHub. If it has an `elm.json` then it's 0.19. If it has an `elm-package.json` then it's 0.18 or older</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:53:31.429500</ts>
    <user>Jae</user>
    <text>Alright</text>
  </message>
  <message conversation_id="1058">
    <ts>2019-04-04T12:54:02.429700</ts>
    <user>Jae</user>
    <text>Should I still open a github issue for the error message though?
```-- CORRUPT JSON ----------------------------------------------------------------

The elm.json for elm-community/list-extra 2.0.0 got corrupted somehow.
...```
is not very helpful!</text>
  </message>
  <message conversation_id="1059">
    <ts>2019-04-04T14:34:03.431400</ts>
    <user>Leoma</user>
    <text>Is `Debug` the only way to cause a side-effect without a `Cmd`?</text>
  </message>
  <message conversation_id="1060">
    <ts>2019-04-04T14:34:21.431600</ts>
    <user>Niesha</user>
    <text>Pretty much.</text>
  </message>
  <message conversation_id="1060">
    <ts>2019-04-04T14:35:45.432200</ts>
    <user>Virgie</user>
    <text>perhaps causing a javascript `RangeError` also qualifies</text>
  </message>
  <message conversation_id="1060">
    <ts>2019-04-04T14:35:52.432500</ts>
    <user>Virgie</user>
    <text>through unbounded recursion</text>
  </message>
  <message conversation_id="1060">
    <ts>2019-04-04T14:37:40.433200</ts>
    <user>Kris</user>
    <text>No, you can also do the trick with js proxies</text>
  </message>
  <message conversation_id="1060">
    <ts>2019-04-04T14:38:03.433700</ts>
    <user>Niesha</user>
    <text>Right, and the jscall stuff</text>
  </message>
  <message conversation_id="1060">
    <ts>2019-04-04T14:38:04.433800</ts>
    <user>Kris</user>
    <text>But yeah those are nitpicking </text>
  </message>
  <message conversation_id="1061">
    <ts>2019-04-04T16:12:10.436800</ts>
    <user>Jana</user>
    <text>Hello all, I am planning to write a little article on &lt;http://Medium.com|Medium.com&gt; on implementing Schelling’s segregation model in Elm. I’d like to get comments on a draft once I get to that point.  Is there a way of doing that on Medium (or some other place)?  I am particularly interested in comments on things that I am doing that are not efficient.  As the model scales up in size, (NxN cells), it slows down considerably. At each step, N^2 computations have to be done.  Thanks!

Here is a reference if you are intereted: &lt;http://jasss.soc.surrey.ac.uk/15/1/6.html&gt;</text>
  </message>
  <message conversation_id="1060">
    <ts>2019-04-04T16:15:24.438300</ts>
    <user>Virgie</user>
    <text>for just the code a gist could work to find code-level optimizations (rewriting andThen to map2/map3, etc, fusing maps, data structure creation/modification).</text>
  </message>
  <message conversation_id="1061">
    <ts>2019-04-04T16:16:35.439500</ts>
    <user>Jana</user>
    <text>&lt;@Virgie&gt; — good idea.  I’ll write something up this evening and post a link.  If you could comment, that would be great.</text>
  </message>
  <message conversation_id="1062">
    <ts>2019-04-04T17:55:27.443200</ts>
    <user>Izola</user>
    <text>Hi! I wrote a tetris game &lt;https://ellie-app.com/59Thpkzr5G9a1&gt;, but I'm having issues with rotation math - shapes are rotating weirdly. Rotation works by rotating each block around pivot point (visible in "Pause" mode). If someone good at math could take a look, I would appreciate the help :slightly_smiling_face: I put the rotation functions at the top of the code...</text>
  </message>
  <message conversation_id="1062">
    <ts>2019-04-04T17:57:20.443800</ts>
    <user>Virgie</user>
    <text>I'd suggest you use elm-geometry for this kind of thing, specifically &lt;https://package.elm-lang.org/packages/ianmackenzie/elm-geometry/latest/Point2d#rotateAround&gt;, unless you really want to figure out the math yourself</text>
  </message>
  <message conversation_id="1062">
    <ts>2019-04-04T17:59:12.444700</ts>
    <user>Izola</user>
    <text>I'll take a look. Thanks!</text>
  </message>
  <message conversation_id="1062">
    <ts>2019-04-04T18:16:48.445900</ts>
    <user>Janiece</user>
    <text>I took a quick look and I think there might be a couple issues. First is that you're using the top-left corner of each block as its `Location`; you're rotating it properly (assuming you want a clockwise rotation), but then *the result is no longer the top left corner* (that corner is now the top *right* corner, if you're rotating 90 degrees clockwise). By treating the result as the top left corner again, you basically add an extra one-block shift to the right.</text>
  </message>
  <message conversation_id="1063">
    <ts>2019-04-04T18:17:50.446100</ts>
    <user>Janiece</user>
    <text>Also, for anything but the square piece, the center of rotation does not have integral coordinates - this means that some of the resulting points will not have integral coordinates, and will then get rounded which I think causes additional weirdness</text>
  </message>
  <message conversation_id="1062">
    <ts>2019-04-04T18:18:42.446300</ts>
    <user>Janiece</user>
    <text>I suspect it might make more sense to round the coordinates of the center to be integral before doing any rotation</text>
  </message>
  <message conversation_id="1062">
    <ts>2019-04-04T18:21:01.446500</ts>
    <user>Janiece</user>
    <text>I'm obviously in favor of you using `elm-geometry` but in this case I don't think it's the actual rotation math (`rotateLocation`) that's tripping you up :smiley:</text>
  </message>
  <message conversation_id="1062">
    <ts>2019-04-04T18:27:39.446800</ts>
    <user>Izola</user>
    <text>Thanks for the input! I'll try to adjust points to the center of block before rotation then convert to grid points after. That might work...</text>
  </message>
  <message conversation_id="1062">
    <ts>2019-04-04T18:27:52.447000</ts>
    <user>Izola</user>
    <text>I'm trying out `elm-geometry` right now :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1064">
    <ts>2019-04-04T18:42:21.447400</ts>
    <user>Porter</user>
    <text>What is the difference between the `elm` and `elm-lang` packages?</text>
  </message>
  <message conversation_id="1064">
    <ts>2019-04-04T18:42:57.448100</ts>
    <user>Virgie</user>
    <text>`elm` is for 0.19 and future versions, `elm-lang` is for 0.18 and before</text>
  </message>
  <message conversation_id="1062">
    <ts>2019-04-04T18:43:04.448300</ts>
    <user>Porter</user>
    <text>For example, &lt;https://package.elm-lang.org/packages/elm/core/latest&gt; and &lt;https://package.elm-lang.org/packages/elm-lang/core/latest&gt; both claim to be the stdlib</text>
  </message>
  <message conversation_id="1064">
    <ts>2019-04-04T18:43:06.448500</ts>
    <user>Porter</user>
    <text>Ah thank you</text>
  </message>
  <message conversation_id="1064">
    <ts>2019-04-04T18:43:29.448900</ts>
    <user>Porter</user>
    <text>It would be really helpful if the page for `elm-lang` said it was for 0.18 and earlier</text>
  </message>
  <message conversation_id="1064">
    <ts>2019-04-04T18:43:35.449100</ts>
    <user>Porter</user>
    <text>Can I open a PR for the docs?</text>
  </message>
  <message conversation_id="1064">
    <ts>2019-04-04T18:44:36.449300</ts>
    <user>Porter</user>
    <text>Ah, I see the source is now read-only :disappointed:</text>
  </message>
  <message conversation_id="1065">
    <ts>2019-04-04T19:51:02.449900</ts>
    <user>Izola</user>
    <text>Thanks again for the insights about origin! I managed to get it working now &lt;https://ellie-app.com/59W5tW5wDSCa1&gt;. I had to use a small "hack" with rounding - if piece is tall I floor float value, otherwise ceil it. I have no idea why, but it works :smile:</text>
  </message>
  <message conversation_id="1064">
    <ts>2019-04-04T20:27:56.450400</ts>
    <user>Janiece</user>
    <text>Cool, looks good!</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:23:14.451400</ts>
    <user>Vesta</user>
    <text>Hi does anyone here have any experience working with slashmili/phoenix-sockets package?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:24:43.453000</ts>
    <user>Vesta</user>
    <text>I am trying to use it to connect to an elixir backend.  I can send messages using long-polling to Elixir and change things on the server, however I cannot get Channel.on “event” Function to actually here the “event”</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:24:51.453300</ts>
    <user>Vesta</user>
    <text>Has anyone had success with this?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:25:00.453500</ts>
    <user>Vesta</user>
    <text>Or similar trouble?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:29:05.454100</ts>
    <user>Earlean</user>
    <text>&lt;@Vesta&gt; have you set up the ports for it?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:30:49.455200</ts>
    <user>Vesta</user>
    <text>Well… no… I suppose I have not — I thought this was an alternative to that. I was encouraged by the fact that I can send to phoenix without an issue…</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:31:43.456100</ts>
    <user>Vesta</user>
    <text>I didn’t find any helpful documentation on doing that with the phoenix-sockets package so didn’t realize it was necessary.</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:33:01.456700</ts>
    <user>Earlean</user>
    <text>ah, I see. It's not using websockets, it's just doing long polling</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:33:11.457100</ts>
    <user>Vesta</user>
    <text>Right.</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:33:54.457900</ts>
    <user>Earlean</user>
    <text>Are you calling `listen` and returning it from your `subscriptions` ?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:36:50.460300</ts>
    <user>Earlean</user>
    <text>what is `model.phxSocket` set to?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:38:35.460800</ts>
    <user>Vesta</user>
    <text>None</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:39:06.461300</ts>
    <user>Vesta</user>
    <text>That’s directly from the example.</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:44:50.461900</ts>
    <user>Earlean</user>
    <text>and then you use `join` to join the channel you get from `Channel.on` ?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:46:21.462000</ts>
    <user>Vesta</user>
    <text>None</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:46:54.462300</ts>
    <user>Vesta</user>
    <text>None</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:47:23.463400</ts>
    <user>Earlean</user>
    <text>&lt;@Vesta&gt; where do you update the model with the value in `updatedSocketModel` ?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:48:45.464500</ts>
    <user>Vesta</user>
    <text>In JoinChannel I don’t update it, but I do elsewhere… is that the issue?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:48:46.464600</ts>
    <user>Earlean</user>
    <text>perhaps you want ` ( {model | phxSocket = updatedSocketModel}, newCommand )`</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:49:53.465300</ts>
    <user>Earlean</user>
    <text>if you don't use the value returned from a function then it was pointless to call the function as it did nothing</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:51:02.466200</ts>
    <user>Earlean</user>
    <text>if you don't update `model.phxSocket` then your `subscriptions` will subscribe you to the old socket which doesn't include joining the channel</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:52:47.466600</ts>
    <user>Vesta</user>
    <text>Yes, this makes sense — yet still doesn’t seem to have solved the issue.</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:53:48.467600</ts>
    <user>Vesta</user>
    <text>I made another channel2 function that I am calling elsewhere where I definitely am resetting the model.phxSocket also and still no dice.</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:54:22.468300</ts>
    <user>Vesta</user>
    <text>I’ve tried using the Push.okOk command as well to see if I can trigger something on an “ok” response.</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:56:01.469200</ts>
    <user>Earlean</user>
    <text>You should try to make a simpler example that only joins one channel so you have a good understanding of how the package works before making it more complex</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:56:28.469800</ts>
    <user>Earlean</user>
    <text>I suspect you're ignoring return values in other places too</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:56:37.470100</ts>
    <user>Vesta</user>
    <text>Well it is only one channel.  I just made another function to test other things.</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:57:32.470600</ts>
    <user>Earlean</user>
    <text>can you show a complete example?</text>
  </message>
  <message conversation_id="1066">
    <ts>2019-04-04T22:58:19.471400</ts>
    <user>Vesta</user>
    <text>Yes, np — I’ve been banging my head on this for a couple days.  I’m about to call it quits and just do it with ports and javascript and elm.</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T00:42:12.476400</ts>
    <user>Yolando</user>
    <text>is there archiving mechanism for current elm slack?  Some useful conversations may get lost otherwise.</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T00:49:47.480800</ts>
    <user>Tisa</user>
    <text>Does anyone know a safe/reliable way to change the `Elm` global that the compiler outputs? We’ve got a number of small apps which are distributed via CDN and would like to mangle the ID so that different versions of the compiled elm runtime can exist on the same page (assuming that would be possible)</text>
  </message>
  <message conversation_id="1068">
    <ts>2019-04-05T01:26:44.481800</ts>
    <user>Niesha</user>
    <text>Consider it an implementation of the "right to be forgotten"</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T04:27:37.485900</ts>
    <user>Lynn</user>
    <text>Anyone got a suggestion why this Url parsing does not work
```
testUrl =
    { fragment = Just "edit", host = "localhost", path = "/index.html", port_ = Just 3000, protocol = Http, query = Nothing }

parsingTests =
    describe "parsing Tests"
        [ test "simple" &amp;lt;|
            \_ -&amp;gt;
                Parser.parse (fragment fragmentHandler) testUrl
                    |&amp;gt; Expect.equal (Just RouteL0)
```
I know that fragmentHandler is returning `RouteL0`</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T04:28:19.486000</ts>
    <user>Lynne</user>
    <text>Do you mean ID of DOM element to which your Elm app is attached (assuming you are talking about `Browser.element` app)?</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T04:30:15.486500</ts>
    <user>Lynn</user>
    <text>If i change to `path = ""` the test does pass</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T04:48:06.489500</ts>
    <user>Danika</user>
    <text>I think they have multiple compiled Elm apps. If you’re just including them in a &amp;lt;script&amp;gt; tag with no build step like webpack or parcel, then each one is going to expose a global Elm variable.

I think they’re concerned that they’ll all overwrite each other.</text>
  </message>
  <message conversation_id="1069">
    <ts>2019-04-05T04:48:44.491300</ts>
    <user>Danika</user>
    <text>I cant say for sure, but if each Elm program has a different name (eg don’t call them all Main) then you might be fine?</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T04:49:47.492200</ts>
    <user>Earlean</user>
    <text>&lt;@Lynn&gt; `Parser.parse` matches against the path, query and fragment. The url you're parsing has a path so it won't match</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T04:51:32.492700</ts>
    <user>Earlean</user>
    <text>if you want ignore that this url has a path, set the path to "" before parsing</text>
  </message>
  <message conversation_id="1069">
    <ts>2019-04-05T04:51:47.492800</ts>
    <user>Lynne</user>
    <text>Well, that's what I understood as well. I was about to suggest doing this at build time actually</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T04:52:14.493000</ts>
    <user>Lynne</user>
    <text>Changing Elm global implies at least some access to bundling phase</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T05:05:01.493300</ts>
    <user>Huong</user>
    <text>Including multiple `Elm` bundles on a single page shouldn't be a problem - the exposed apps are automatically merged, assuming each app has a differently named `Main` module. so if you have something like
```&amp;lt;script src="bundle1.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="bundle2.js"&amp;gt;&amp;lt;/script&amp;gt;``` where `bundle1.js` has `Bundle1` as the main module and `bundle2.js` has `Bundle2` as the main module, you end up with a single `Elm.Bundle1` and `Elm.Bundle2`.</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T05:05:22.493500</ts>
    <user>Huong</user>
    <text>Elm _will_ balk at you if the bundles use the same name for the main module, tho</text>
  </message>
  <message conversation_id="1067">
    <ts>2019-04-05T05:20:05.494200</ts>
    <user>Lynn</user>
    <text>thanks &lt;@Earlean&gt; - that’s what I figured out subsequently</text>
  </message>
  <message conversation_id="1070">
    <ts>2019-04-05T05:41:37.496700</ts>
    <user>Selena</user>
    <text>Is there any way to define that some a is type of Record in funcion signature and then add field to that record?
gg : { a } -&amp;gt; { a | b : String }</text>
  </message>
  <message conversation_id="1070">
    <ts>2019-04-05T05:47:27.497800</ts>
    <user>Lynne</user>
    <text>Nope, it is not possible to add or remove fields from arbitrary records. One has to be explicit about what is expected and what is returned.</text>
  </message>
  <message conversation_id="1070">
    <ts>2019-04-05T05:50:55.498400</ts>
    <user>Lynne</user>
    <text>You can craft something like this:

```
type alias One a =
    { a | one : Int }


type alias Two a =
    { a | two : Int }


gg : One {} -&amp;gt; Two (One {})
gg a =
    { one = a.one, two = 2 }
```

But I doubt it is super useful</text>
  </message>
  <message conversation_id="1070">
    <ts>2019-04-05T05:51:16.498900</ts>
    <user>Danika</user>
    <text>Beat me to it </text>
  </message>
  <message conversation_id="1070">
    <ts>2019-04-05T05:51:25.499100</ts>
    <user>Lynne</user>
    <text>2:0 :smile:</text>
  </message>
  <message conversation_id="1070">
    <ts>2019-04-05T05:54:12.499900</ts>
    <user>Lynne</user>
    <text>The code above is the same as
```
gg : { one : Int } -&amp;gt; { one : Int, two : Int }
gg a =
    { one = a.one, two = 2 }
```
Maybe it is close to what you were after &lt;@Selena&gt;</text>
  </message>
  <message conversation_id="1070">
    <ts>2019-04-05T06:07:53.500600</ts>
    <user>Selena</user>
    <text>&lt;@Lynne&gt; Yes it helped, thank you very much :smile:</text>
  </message>
  <message conversation_id="1071">
    <ts>2019-04-05T06:10:39.500800</ts>
    <user>Karrie</user>
    <text>hello everyone!
I have en elm app of type `Browser.element`
can I read the url from this kind of apps? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1071">
    <ts>2019-04-05T06:15:00.501900</ts>
    <user>Danika</user>
    <text>Browser.application is the only native way to get the URL afaik, you could always use ports though </text>
  </message>
  <message conversation_id="1071">
    <ts>2019-04-05T06:16:02.502400</ts>
    <user>Karrie</user>
    <text>&lt;@Danika&gt; I have an url like this: `/pages/2/edit/`</text>
  </message>
  <message conversation_id="1071">
    <ts>2019-04-05T06:16:39.502900</ts>
    <user>Karrie</user>
    <text>and all I need is the `2`</text>
  </message>
  <message conversation_id="1071">
    <ts>2019-04-05T06:16:54.503300</ts>
    <user>Karrie</user>
    <text>would pass the whole path to Elm or just the `2` ?</text>
  </message>
  <message conversation_id="1071">
    <ts>2019-04-05T06:17:30.504200</ts>
    <user>Danika</user>
    <text>I’d personally pass the whole thing and parse it myself. I suppose it depends on your requirements as to how robust the solution needs to be </text>
  </message>
  <message conversation_id="1071">
    <ts>2019-04-05T06:19:18.504600</ts>
    <user>Karrie</user>
    <text>I just read the same thing here: &lt;https://github.com/elm/browser/blob/1.0.0/notes/navigation-in-elements.md&gt;</text>
  </message>
  <message conversation_id="1071">
    <ts>2019-04-05T06:20:43.504800</ts>
    <user>Karrie</user>
    <text>thanks &lt;@Danika&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1071">
    <ts>2019-04-05T06:21:02.505300</ts>
    <user>Danika</user>
    <text>Aye im on mobile, glad someone else posted the link ^^ </text>
  </message>
  <message conversation_id="1072">
    <ts>2019-04-05T07:51:37.505900</ts>
    <user>Jana</user>
    <text>I view forgetting as a constructive activity, like cleaning house</text>
  </message>
  <message conversation_id="1073">
    <ts>2019-04-05T08:10:09.507000</ts>
    <user>Emilee</user>
    <text>i feel like our old codebase is forcing me to commit horrible crimes^^ bending our redux state into a strongly typed model is so difficult that right now i'm just holding a Value and creating selectors on it that extract interesting information^^</text>
  </message>
  <message conversation_id="1074">
    <ts>2019-04-05T08:11:35.507500</ts>
    <user>Emilee</user>
    <text>maybe it'll at least result in some usable api^^'</text>
  </message>
  <message conversation_id="1072">
    <ts>2019-04-05T08:20:40.509300</ts>
    <user>Jana</user>
    <text>Is there a way of running a shell script to compile an app when the code changes?  I prefer not to use webpack or  yarn and just work with shell scripts only. (I know, I am retro) :smile:</text>
  </message>
  <message conversation_id="1072">
    <ts>2019-04-05T08:22:49.509900</ts>
    <user>Sharon</user>
    <text>I've seen `entr` being recommended before &lt;http://eradman.com/entrproject/&gt;</text>
  </message>
  <message conversation_id="1072">
    <ts>2019-04-05T08:23:13.510200</ts>
    <user>Jin</user>
    <text>I used to use &lt;https://github.com/cortesi/modd&gt; back in the days</text>
  </message>
  <message conversation_id="1072">
    <ts>2019-04-05T08:24:15.510600</ts>
    <user>Jin</user>
    <text>Though this is not really shell script only</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T08:51:41.511600</ts>
    <user>Jana</user>
    <text>Thanks all, right now I’m looking at `entr`, then I’ll check out `modd`</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T08:58:47.512000</ts>
    <user>Dede</user>
    <text>If you want to go really low-tech, you can do something like this stackoverflow answer:  &lt;https://serverfault.com/a/436739&gt;</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T08:59:08.512300</ts>
    <user>Dede</user>
    <text>`entr` looks cool though!</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:06:25.516900</ts>
    <user>Gertrude</user>
    <text>So I have a tricky situation with an API: I need to save a set of `Entries` to the server. Each `Entry` is a single API request, and replies with an `EntryUpdateResponse` which contains the newest list of entries which I use to update the UI model. Thus, I need to batch multiple requests, and then, to ensure that I only use the most recent response to update my data.
I can do the former just fine. Just build a list of entry requests and give it to `Cmd.batch`. But `Cmd.batch` is non-deterministic; there's no order guarantee, and so my UI goes into wrong states because requests resolve out of order.

How I fix?</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:10:15.518400</ts>
    <user>Carman</user>
    <text>I think you may want to fire off the requests one at a time and build up a "queue" of entries to be saved</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:13:13.522000</ts>
    <user>Velia</user>
    <text>Note that even if `Cmd.batch` was processing in order, I don't think that there would any guarantee that the network or web server would keep it, and that responses would come with the same order. So the problem is more an API one.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:14:56.525000</ts>
    <user>Gertrude</user>
    <text>&lt;@Velia&gt; the original JS version works but just doing a for loop and blocking on each request in turn until it's done, only keeping the last response. It's slow but ... it does work.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:15:02.525200</ts>
    <user>Antonette</user>
    <text>As &lt;@Velia&gt; says, if you can change the API, I think you should create a way to batch updates, which will lower the time spent establishing http requests (always a good thing) and maybe perform saves as a transaction (often another good thing).</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:15:25.526000</ts>
    <user>Velia</user>
    <text>&lt;@Gertrude&gt; then this is what &lt;@Carman&gt; suggests, do one ~Cmd~ request at a time.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:16:05.527300</ts>
    <user>Antonette</user>
    <text>Then again, if you really want to save batches of updates as a sequence, you probably should chain `Task`s instead of batching `Cmd`s.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:17:28.528900</ts>
    <user>Gertrude</user>
    <text>I honestly don't care about any of the intermediate responses, just the last one in the queue. Alternately, I can just fire off all the original requests, ignoring their bodies, and just do a new GET at the end to get fresh data. But that still means being able to guarantee that the GET happens after all the others.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:18:54.530500</ts>
    <user>Antonette</user>
    <text>Hence why you could/should? chain the queries as tasks imo.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:19:20.531700</ts>
    <user>Gertrude</user>
    <text>Yeah. Are Tasks deterministic then? I see there is a `Task.sequence` at least</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:19:40.532400</ts>
    <user>Antonette</user>
    <text>You'd be guaranteed to send them sequentially and to get a `Msg` only at the very end.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:20:07.533200</ts>
    <user>Antonette</user>
    <text>And yes, they are :) that's why `Cmd`s are not.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:21:32.535700</ts>
    <user>Antonette</user>
    <text>You can see `Cmd`s as a way to "wrap" `Task`s in a non-sequencial batch, and of not caring about success/failure when you don't want to.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:21:57.536400</ts>
    <user>Gertrude</user>
    <text>&amp;gt; Start with a list of tasks, and turn them into a single task that returns a list. The tasks will be run in order one-by-one and if any task fails the whole sequence fails.

Hmmm. That could be messy. If one of the requests fails that could leave me with half the batch undone? Also there seems to be no `jsonResolver` for HTTP tasks.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:23:57.539000</ts>
    <user>Carman</user>
    <text>How do you currently handle batch failure?</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:24:30.539400</ts>
    <user>Gertrude</user>
    <text>Good point. It kinda ... doesn't yet.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:25:15.540100</ts>
    <user>Gertrude</user>
    <text>I think this may be the point where it is just more sane to update the API.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:25:56.541000</ts>
    <user>Antonette</user>
    <text>Sounds like the better course of action to me (if you may).</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:33:08.541700</ts>
    <user>Gertrude</user>
    <text>yeah, I'll have to see. The immediate endpoint is hours, but that's basically just a proxy for a third-party API</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:34:55.541800</ts>
    <user>Willodean</user>
    <text>It needs to be a function to allow it to sync. The version I posted of my model features a solution that does sync. It's just ugly.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:39:59.542300</ts>
    <user>Sharon</user>
    <text>I guess I don't understand how something goes out of sync in elm. The view should always reflect the current state of the model, no?</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:39:59.542500</ts>
    <user>Emilee</user>
    <text>hmm, should i decode stuff from javascript in the subscription function or in the update function?</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:40:19.542800</ts>
    <user>Timika</user>
    <text>IMO as soon as possible.</text>
  </message>
  <message conversation_id="1076">
    <ts>2019-04-05T09:41:41.543500</ts>
    <user>Maida</user>
    <text>&lt;@Emilee&gt; keep decoders as far away from your code as you can. :slightly_smiling_face: This means, as close to the edges of your app.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:43:25.545000</ts>
    <user>Maida</user>
    <text>I prefer to interact with a module that handles every interaction with the server and is called from inside of the app with all the arguments needed to be able to reply with a `Cmd msg`.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:43:56.545600</ts>
    <user>Maida</user>
    <text>This means that, in your context, I will always decode at the subscription.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:44:18.545900</ts>
    <user>Emilee</user>
    <text>that's fair</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:47:09.548900</ts>
    <user>Felisa</user>
    <text>How do people handle the (incredibly common) scenario where you have several form fields which all need to hold valid values before the form can be submitted (or the submit button enabled)?

I used to do something like this

```
case (field1, field2, field3, field4) of
    (Just v1, Just v2, Just v3, Just v4) -&amp;gt; Just (submit v1 v2 v3 v4)
    _ -&amp;gt; Nothing
```

but obviously that doesn’t work in Elm 0.19</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:47:54.549300</ts>
    <user>Maida</user>
    <text>&lt;@Felisa&gt; have some kind of validation</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:48:34.549900</ts>
    <user>Maida</user>
    <text>you can use something like `elm-validate`</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:48:34.550000</ts>
    <user>Felisa</user>
    <text>Just a big stack of nested `if` statements then?</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:49:34.551200</ts>
    <user>Felisa</user>
    <text>Sorry if I wasn’t clear: I’m not asking how do you validate a single field, I’m asking about how you organise multiple validations now that tuples are limited to 3 elements</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:51:10.551700</ts>
    <user>Maida</user>
    <text>`elm-validate` helps with that</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:51:31.552800</ts>
    <user>Maida</user>
    <text>if you don’t want to use a library, take a look at `elm-spa-example` to see how you can easily implement a validation:
&lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Page/Settings.elm#L356&gt;</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:51:55.553500</ts>
    <user>Carman</user>
    <text>I usually use some data structure that models valid/invalid/initial and do a `mapN` on it</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:51:59.553600</ts>
    <user>Emilee</user>
    <text>there's a bunch of form and validation libraries, for example &lt;https://package.elm-lang.org/packages/hecrj/composable-form/latest/&gt;</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:54:42.554500</ts>
    <user>Antonette</user>
    <text>And if you need something stronger than `elm-validate`, there's `the-validator` &lt;https://package.elm-lang.org/packages/Bastes/the-validator/latest/&gt; (cue Terminator credits soundtrack)</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:54:53.554800</ts>
    <user>Antonette</user>
    <text>:wink:</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:54:55.554900</ts>
    <user>Felisa</user>
    <text>Cool, thanks for all the pointer! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:58:13.556800</ts>
    <user>Carman</user>
    <text>In your simplest case where you're using `Maybe` to model valid/invalid you can use a `mapN` function like:
```
Maybe.map4 (\v1 v2 v3 v4 -&amp;gt; doSomethingWith v1 v2 v3 v4)
  field1
  field2
  field3
  field4
```</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:58:45.557300</ts>
    <user>Carman</user>
    <text>This will give you `Nothing` if any of the fields are `Nothing` just like in your code snippet above</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T09:59:07.557800</ts>
    <user>Carman</user>
    <text>and if all the fields are present it unwraps them and pass their values to the given lambda</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T10:02:06.558800</ts>
    <user>Felisa</user>
    <text>That works but is limited tp `.map5` so not that much of an improvement over tuples.</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T10:11:22.559300</ts>
    <user>Nana</user>
    <text>&lt;@Felisa&gt; if you need more you can use `Maybe.Extra.andMap`</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T10:11:51.559500</ts>
    <user>Felisa</user>
    <text>Ah, cool!</text>
  </message>
  <message conversation_id="1075">
    <ts>2019-04-05T10:15:21.560300</ts>
    <user>Felisa</user>
    <text>&amp;gt; Advanced functional programmers will recognize this as the implementation of &amp;lt;*&amp;gt;

I wouldn’t call myself an advanced functional programmer, but this is exactly what I was looking for! Thanks &lt;@Nana&gt;</text>
  </message>
  <message conversation_id="1077">
    <ts>2019-04-05T10:45:21.562300</ts>
    <user>Tisa</user>
    <text>Does this hold true even if dependencies are at different versions?  Or even some on Elm 0.19, some on 0.18?  If the 0.19 apps are compiled w/optimize?</text>
  </message>
  <message conversation_id="1077">
    <ts>2019-04-05T10:46:34.562500</ts>
    <user>Huong</user>
    <text>As far as I can think of, that _should_ work</text>
  </message>
  <message conversation_id="1077">
    <ts>2019-04-05T10:48:45.562700</ts>
    <user>Huong</user>
    <text>When compiling multiple main modules into a single file with `elm make --output bundle.js Main1.elm Main2.elm`, it all uses a single elm.json and shared code is deduplicated, however, in your case, you're merging the compiled artifacts under a single `Elm` variable. As far as I can think of, those are self-contained and it shouldn't matter whether they have shared or different deps/versions/options/..</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:29:53.563500</ts>
    <user>Florencia</user>
    <text>Is there a `Cmd` way to open an URL in a new tab (equivalent of `target=_blank`)? Or should I just head for ports?</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:35:09.564600</ts>
    <user>Antonette</user>
    <text>&lt;@Florencia&gt; I would head for ports if I were you and really, really needed not to just make a link with a `target="_blank"`.</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:35:51.565500</ts>
    <user>Antonette</user>
    <text>(and I don't really see why you wouldn't just make a link with a `target="_blank"`, but maybe you have in which case I'd be interested in knowing the context :slightly_smiling_face:)</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:37:19.566900</ts>
    <user>Florencia</user>
    <text>The current thing we do for `NavigateTo` Msgs is `Browser.Navigation.pushUrl` - so we already go the Cmd-instead-of-native-browser-behaviour route
(And I need to essentially implement a  `NavigateToInNewTab`, so to speak)</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:38:01.567800</ts>
    <user>Florencia</user>
    <text>for ~some things~ UI links/buttons the link way is warranted, but sometimes you need to open an URL as a response to something different in `update`</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:38:14.568100</ts>
    <user>Florencia</user>
    <text>(I understand link's preferable though)</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:38:37.568500</ts>
    <user>Florencia</user>
    <text>it just doesn't cover all the usecases, it isn't a general solution</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:40:26.569300</ts>
    <user>Antonette</user>
    <text>Ah, yes, the case where you want to open the tab from a `Cmd`, I hadn't thought of that one. My bad.</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:40:46.569800</ts>
    <user>Antonette</user>
    <text>Then yes, using ports would be what makes the most amount of sense to me.</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:42:22.570400</ts>
    <user>Florencia</user>
    <text>Thx for validating my reasoning on this :)</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:42:28.570600</ts>
    <user>Antonette</user>
    <text>:wink:</text>
  </message>
  <message conversation_id="1078">
    <ts>2019-04-05T11:42:38.570900</ts>
    <user>Antonette</user>
    <text>Weird minds think alike :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T12:36:29.576200</ts>
    <user>Mardell</user>
    <text>Does anyone have experience using a date picker as a web component from Elm? I have been halfway successful with my experiments with &lt;https://fooloomanzoo.github.io/datetime-picker/&gt; , which is a polymer-based webcomponent, but I’m having issues binding to polymer’s property update events (don’t need anything fancy really, just want to pull the chosen value into elm’s state when component is updated)</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T12:41:52.579100</ts>
    <user>Mardell</user>
    <text>FWIW, I’m considering the web components approach as opposed to native-elm options because not needing to handle &amp;amp; store sub-component state/messages significantly simplifies my forms (based on hecrj/composable-form)</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T12:47:15.580200</ts>
    <user>Theda</user>
    <text>&amp;gt; because not needing to handle &amp;amp; store sub-component state/messages significantly simplifies my forms

I’d kinda caution against using web-components for the express purpose of circumventing Elm’s architecture.</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T12:56:36.582900</ts>
    <user>Alicia</user>
    <text>that’s mainly what we use web components for, I’d use effect modules but they are banned</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T12:57:37.583600</ts>
    <user>Alicia</user>
    <text>from a date picker you might want to be able to open it, close it, and get an event when a date is selected, it’s way easier to wire that up in a web component</text>
  </message>
  <message conversation_id="1080">
    <ts>2019-04-05T13:07:19.583700</ts>
    <user>Laurena</user>
    <text>I know I'm a little late the conversation but I use &lt;https://www.npmjs.com/package/chokidar-cli&gt;.</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T13:07:22.584000</ts>
    <user>Laurena</user>
    <text>`chokidar "**/*.elm" -c "elm make src/Main.elm --output=elm.js" --initial`</text>
  </message>
  <message conversation_id="1080">
    <ts>2019-04-05T13:08:29.584200</ts>
    <user>Laurena</user>
    <text>Usually in my package.json scripts:
```
"scripts": {
    "build": "elm make src/Main.elm --output=elm.js",
    "watch": "chokidar \"**/*.elm\" -c \"npm run build\" --initial"
},
```</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T13:15:54.584400</ts>
    <user>Simon</user>
    <text>Yes, we use a web component over Flatpickr for our date/time needs</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T13:15:56.584600</ts>
    <user>Simon</user>
    <text>Here’s a gist: &lt;https://gist.github.com/aaronwhite/fd7c79f34ddc07cb6864fdb13b4b32c9&gt;</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T13:16:44.584800</ts>
    <user>Simon</user>
    <text>Flatpickr has a good chunk of functionality, and this approach greatly simplifes the model/update burden, which means my team is far more likely to make use of them when its on the margin :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1081">
    <ts>2019-04-05T13:29:23.591100</ts>
    <user>Mardell</user>
    <text>&lt;@Theda&gt; I’d generally agree with the sentiment of not circumventing the elm architecture, but in this case it’s a tradeoff of “where do we want to spend our dev time” — also being able to treat a datepicker in the same way we treat a plain text input, including the one-way data binding, doesn’t really strike me as circumvention. We’re just making use of the web platform to do a specialized and very compartmentalized task for us.</text>
  </message>
  <message conversation_id="1079">
    <ts>2019-04-05T13:46:16.591300</ts>
    <user>Mardell</user>
    <text>Thanks so much, &lt;@Simon&gt;, this is definitely helpful. Interesting that you did the config via one big record as opposed to individual HTML attributes of the tag itself — I’m assuming this is because of how `foundDiff` is calculated in the `set config(newValue)` function to avoid re-instantiating? In what situation were config values being updated regularly?</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T13:59:59.591900</ts>
    <user>Magdalena</user>
    <text>what’s elm 0.19 equivalent of elm-lang/color (if there’s any)?</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:02:25.592300</ts>
    <user>Kimbery</user>
    <text>I believe it's &lt;https://package.elm-lang.org/packages/avh4/elm-color/latest/&gt;</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:02:58.592900</ts>
    <user>Magdalena</user>
    <text>but it has slightly different API (for example there’s not toRgb func)</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:04:08.593600</ts>
    <user>Kimbery</user>
    <text>yeah, I believe those functions got moved to another package, not sure which though</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:07:46.594100</ts>
    <user>Magdalena</user>
    <text>hmm.. after fixing api, elm reactor now says “elm: thread blocked indefinitely in an MVar operation” is this known compiler issue?</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:08:24.594800</ts>
    <user>Magdalena</user>
    <text>rabbit hole goes deeper and i just wanted to use line-charts library :disappointed:</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:09:06.595300</ts>
    <user>Virgie</user>
    <text>are you using `--debug`? otherwise try removing elm-stuff and a fresh compile</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:09:46.596100</ts>
    <user>Simon</user>
    <text>Good q, that is the reason but more detail escapes me at the moment</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:10:08.596500</ts>
    <user>Magdalena</user>
    <text>nope, using elm reactor without --debug</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:18:00.596600</ts>
    <user>Mardell</user>
    <text>Definitely know how that goes. Thanks again for the help &amp;amp; gist!</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:18:50.597700</ts>
    <user>Simon</user>
    <text>No problem! We use web components for ChartJS, algolia, and image fallback if youre looking for more</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:31:49.600400</ts>
    <user>Kimbery</user>
    <text>I'm using JWTs to access my app's API and need to renew the token automatically if it's expired. I'm using auth0.js to renew the token so I need to use ports to call it but this means I can't just chain a request on after (using Tasks).</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:34:41.601200</ts>
    <user>Kimbery</user>
    <text>One option would be to queue up Cmds that need the JWT, with something like
```
type alias Model =
    { jwt : Jwt
    }


type Jwt
    = Ready String
    | Renewing (List (String -&amp;gt; Cmd Msg))
```</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:35:18.602000</ts>
    <user>Kimbery</user>
    <text>so I could queue up any requests that need the JWT until it's ready again</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:35:41.602400</ts>
    <user>Kimbery</user>
    <text>This means storing functions in the Model though...</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:37:35.603300</ts>
    <user>Kimbery</user>
    <text>Another option would be to model all of the requests
```
type Request 
    = FetchUsers
    | FetchUser Int
```
and then queue those up
```
type Jwt
    = Ready String
    | Renewing (List Request)
```
This seems more idiomatic, but also long winded</text>
  </message>
  <message conversation_id="1082">
    <ts>2019-04-05T14:40:47.604200</ts>
    <user>Nana</user>
    <text>never heard of that one :confused:</text>
  </message>
  <message conversation_id="1083">
    <ts>2019-04-05T16:09:04.606400</ts>
    <user>Daryl</user>
    <text>i have an address form that i want to use on multiple pages of my single page app. is this a case for Html.map (modelling it as kind of its own small elm app) or is there a better way? i would like to avoid having to handle all the different messages for field changes on all the pages that use the form..</text>
  </message>
  <message conversation_id="1083">
    <ts>2019-04-05T16:28:00.606700</ts>
    <user>Nana</user>
    <text>&lt;@Daryl&gt; yup sounds like it</text>
  </message>
  <message conversation_id="1084">
    <ts>2019-04-05T17:29:05.607400</ts>
    <user>Kimiko</user>
    <text>It might be worth it to reimplement auth0.js in Elm so you can use Tasks, it seems much cleaner than the other solutions you came up with. (I'm using JWT in my app and I chain Tasks.)</text>
  </message>
  <message conversation_id="1084">
    <ts>2019-04-05T17:57:41.608800</ts>
    <user>Kimiko</user>
    <text>Is there a way to distinguish a UrlChange generated by the browser (i.e. back/forward buttons) from one generated by Browser.Navigation.pushUrl (i.e. from the app)?</text>
  </message>
  <message conversation_id="1084">
    <ts>2019-04-05T18:30:20.609600</ts>
    <user>Dede</user>
    <text>&lt;@Kimiko&gt; You can make that distinction in onUrlRequest when the argument is a  &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser#UrlRequest&gt;.  By the time you are in onUrlChange that information is lost (unless you stashed it in your model somewhere.)</text>
  </message>
  <message conversation_id="1084">
    <ts>2019-04-05T18:32:16.610600</ts>
    <user>Kimiko</user>
    <text>Yeah. Just to confirm, the `state` property of the `popstate` never makes it into Elm, which makes certain things harder</text>
  </message>
  <message conversation_id="1085">
    <ts>2019-04-05T19:05:57.612800</ts>
    <user>Danika</user>
    <text>How does the vdom diff event handlers? Surely it doesn’t remove / recreate every update </text>
  </message>
  <message conversation_id="1086">
    <ts>2019-04-06T01:29:43.613400</ts>
    <user>Yolando</user>
    <text>taken.</text>
  </message>
  <message conversation_id="1085">
    <ts>2019-04-06T05:08:15.614800</ts>
    <user>Maida</user>
    <text>&lt;@Danika&gt; what are you trying to understand with this question? Are you looking for the actual implementation of the diffing algorithm that makes sure that event handling is happening efficiently?</text>
  </message>
  <message conversation_id="1085">
    <ts>2019-04-06T05:15:00.618600</ts>
    <user>Danika</user>
    <text>Basically, yes some implementation details. The question just popped in my head as I was going to bed :sweat_smile: I’m working on a TEA-like js framework and while i probably won’t keep it, i wanted to implement my own vdom. 

There’s a slight implementation difference where I have event listeners set up separately from the view; in hindsight because both Attributes and Events are part of the vdom elm should have an easier time knowing if / when to change events </text>
  </message>
  <message conversation_id="1086">
    <ts>2019-04-06T05:39:15.619300</ts>
    <user>Maida</user>
    <text>In that case, just look at the JS source code for the virtual dom. Code looks pretty readable.</text>
  </message>
  <message conversation_id="1087">
    <ts>2019-04-06T06:04:19.620900</ts>
    <user>Jae</user>
    <text>Has there been any discussion of supporting parameterized modules in Elm?  Im curious what the pros/cons are for it.</text>
  </message>
  <message conversation_id="1087">
    <ts>2019-04-06T06:04:26.621000</ts>
    <user>Jae</user>
    <text>Something like defining this
```
module OurModule parameterA exposing (ourFunction)

ourFunction = 
    parameterA
```
and then in another module referencing it with
```
import OurModule 5

-- Returns 5
a = OurModule.ourFunction
```</text>
  </message>
  <message conversation_id="1087">
    <ts>2019-04-06T06:06:20.621200</ts>
    <user>Jae</user>
    <text>I imagine this would be useful for any-dict implementations where instead of the dict storing the compare function or it needing to be supplied in every function call, it could be just supplied once when importing the package</text>
  </message>
  <message conversation_id="1087">
    <ts>2019-04-06T06:09:22.621400</ts>
    <user>Jae</user>
    <text>If you wanted to import the same parameterized module multiple times then I imagine the syntax would look like this
```
import OurModule 5 as OurModule5
import OurModule 6 as OurModule6

-- Returns 5
a = OurModule5.ourFunction

-- Returns 6
b = OurModule6.ourFunction
```</text>
  </message>
  <message conversation_id="1087">
    <ts>2019-04-06T07:25:53.621800</ts>
    <user>Maida</user>
    <text>There have been discussions but they did not lead to any concrete conclusion.</text>
  </message>
  <message conversation_id="1088">
    <ts>2019-04-06T07:26:51.622000</ts>
    <user>Maida</user>
    <text>This is some high impact stuff on the language and once it is in the language, it most likely cannot be taken away. The default stance has been “wait and see”</text>
  </message>
  <message conversation_id="1088">
    <ts>2019-04-06T07:28:34.622200</ts>
    <user>Maida</user>
    <text>“module functors” are what you call “parametrized modules”
&lt;https://github.com/elm/compiler/issues/1039&gt;</text>
  </message>
  <message conversation_id="1088">
    <ts>2019-04-06T07:30:25.622400</ts>
    <user>Maida</user>
    <text>if you want to take a look at some of the discussions you can also search the old `elm-discuss` forum for “parametrized modules” or “module functors”</text>
  </message>
  <message conversation_id="1088">
    <ts>2019-04-06T07:34:37.622700</ts>
    <user>Jae</user>
    <text>Thanks! I’ll have a look</text>
  </message>
  <message conversation_id="1089">
    <ts>2019-04-06T13:51:36.623800</ts>
    <user>Isaiah</user>
    <text>I'm having issues with ports not sending data back to elm. Sometimes it works, sometimes it doesn't and I have no idea why.</text>
  </message>
  <message conversation_id="1089">
    <ts>2019-04-06T13:53:03.625400</ts>
    <user>Isaiah</user>
    <text>the javascript code is clearly working, as evidenced by logging to the console, but it only sometimes successfully sends that data to elm. Could there be a race condition of some sort for setting up the subscriber? It seems to fail randomly</text>
  </message>
  <message conversation_id="1089">
    <ts>2019-04-06T14:02:52.626700</ts>
    <user>Isaiah</user>
    <text>It turns out is *was* a race condition. I had to nest function calls inside of callbacks in the javascript to get it to sequence correctly. :see_no_evil: thanks for nothing javascript</text>
  </message>
  <message conversation_id="1089">
    <ts>2019-04-06T14:11:32.627000</ts>
    <user>Isaiah</user>
    <text>well that didn't last long. Still not solved.</text>
  </message>
  <message conversation_id="1089">
    <ts>2019-04-06T14:23:33.631500</ts>
    <user>Manuela</user>
    <text>I'm running into some weird behaviour when using `Decode.oneOf` within an event handler. When I'm using a value from the model within this decoder, not the correct value is used, but instead always the initial value when the app was started. I reduced it to &lt;https://ellie-app.com/5bJXXF3gZBja1&gt;. To observe this behaviour, one has to open the developer console. When you change the value in the input field you will see the logging of the `ValueChanged` message (with the correct value), but when you click inside the textfield you will always get the logging `Value "initial"` instead of the actual value.  Not wrapping the `Decode.succeed` within the `oneOf` fixes this. Any ideas what the cause could be?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:43:48.631700</ts>
    <user>Dede</user>
    <text>I’m not seeing what you describe.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:44:20.632200</ts>
    <user>Dede</user>
    <text>Which is to say, I see the value in the textbox change, and the model.value change in the console.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:46:46.632800</ts>
    <user>Dede</user>
    <text>Oh, hey, now I’m reproducing some of it.  Hang on.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:48:11.633000</ts>
    <user>Dede</user>
    <text>Oh, I see.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:49:21.633400</ts>
    <user>Dede</user>
    <text>So, hypothesis:</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:51:01.635000</ts>
    <user>Dede</user>
    <text>You are capturing (Value model.value) when you define your decoder when the view is first drawn.  That gets baked into the click handler, because it’s evaluated when `view` is.  It gets stale as you update model.value until `view` in its entirety gets called again.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:52:26.635800</ts>
    <user>Manuela</user>
    <text>Hm, but then it's interesting that removing the `oneOf` fixes this :slightly_smiling_face: So, maybe this is a bug?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:54:18.636200</ts>
    <user>Dede</user>
    <text>Yeah.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:54:24.636500</ts>
    <user>Dede</user>
    <text>And it’s not totally consistent in reproducing for me.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:54:59.637200</ts>
    <user>Dede</user>
    <text>I suspect there’s something about the decoder that is fooling the vdom differ and leaving the old event handler in place or something.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:55:07.637400</ts>
    <user>Dede</user>
    <text>(Insert hands waving wildly)</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:55:57.638000</ts>
    <user>Manuela</user>
    <text>:smiley: ok cool, thanks for trying it out as well!</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:56:30.638300</ts>
    <user>Dede</user>
    <text>Are you able to reproduce every time?
It’s only happened for me once.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:56:45.638600</ts>
    <user>Manuela</user>
    <text>for me it happens every time</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:56:57.638800</ts>
    <user>Dede</user>
    <text>I’m on chrome/mac.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:56:59.639000</ts>
    <user>Dede</user>
    <text>You?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:57:17.639200</ts>
    <user>Manuela</user>
    <text>firefox on linux</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:57:23.639500</ts>
    <user>Manuela</user>
    <text>let me try chrome</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:58:06.639800</ts>
    <user>Manuela</user>
    <text>seems to be consistent on chrome as well</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:58:42.640200</ts>
    <user>Dede</user>
    <text>I can’t reproduce on Safari.  I can’t actually reproduce again on Chrome either.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:58:49.640500</ts>
    <user>Dede</user>
    <text>Can you give me a precise recipe?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:59:22.641100</ts>
    <user>Manuela</user>
    <text>I open the console, then i type something into the input field (such that the value is not "initial" anymore) then i click in the input field.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:59:30.641300</ts>
    <user>Dede</user>
    <text>How do you get focus to the input field?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:59:41.641800</ts>
    <user>Dede</user>
    <text>How do you open the console?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T14:59:44.641900</ts>
    <user>Manuela</user>
    <text>ok, first i click into the input field, sorry :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:00:11.642500</ts>
    <user>Dede</user>
    <text>Huh.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:00:15.642800</ts>
    <user>Dede</user>
    <text>Yeah, I just can’t reproduce.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:00:19.643000</ts>
    <user>Dede</user>
    <text>It only happened that one time.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:00:19.643100</ts>
    <user>Manuela</user>
    <text>via right-click-menu inspect, and then to the console</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:00:39.643500</ts>
    <user>Manuela</user>
    <text>ok, thats really weird then :smile:</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:01:07.643900</ts>
    <user>Manuela</user>
    <text>what chrome version?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:01:15.644100</ts>
    <user>Dede</user>
    <text>I don’t have a linux box handy here, sadly.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:01:36.644400</ts>
    <user>Dede</user>
    <text>Chrome: Mac OS Version 73.0.3683.86 (Official Build) (64-bit)</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:01:41.644600</ts>
    <user>Manuela</user>
    <text>oh, and i was using chromium 70</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:02:32.644800</ts>
    <user>Dede</user>
    <text>Super strange.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:03:03.645500</ts>
    <user>Dede</user>
    <text>What do you see if you add something like this to the top of view?
```
let 
  _ = Debug.log "In view: " model.value
in
```</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:03:31.645800</ts>
    <user>Dede</user>
    <text>Uh, no `msg` in view, forget that part :wink:</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:04:09.646300</ts>
    <user>Manuela</user>
    <text>This line logs the correct model.value</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:04:20.646600</ts>
    <user>Manuela</user>
    <text>but the event handler still uses the old one</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:04:58.647100</ts>
    <user>Dede</user>
    <text>OK, what if you replace `(Value model.value)` with `(Value &amp;lt;| Debug.log "handler" model.value)`?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:06:13.647600</ts>
    <user>Dede</user>
    <text>value, not view.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:06:36.648300</ts>
    <user>Manuela</user>
    <text>this line also prints out the correct value O_o</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:06:47.648600</ts>
    <user>Dede</user>
    <text>But you’re still getting the bogus msg passed to update?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:06:51.648800</ts>
    <user>Manuela</user>
    <text>yeah</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:07:23.649200</ts>
    <user>Manuela</user>
    <text>maybe i could try using a keyedNode, lets see</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:07:28.649400</ts>
    <user>Dede</user>
    <text>That seems reportable.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:07:50.649600</ts>
    <user>Manuela</user>
    <text>yeah i think so too</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:09:12.650000</ts>
    <user>Dede</user>
    <text>Do you see one instance of ValueChanged printed for every character you type, or is it batching?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:10:09.650500</ts>
    <user>Manuela</user>
    <text>one for each character. also i just tried using the keyednode and now the issue is gone</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:10:25.650800</ts>
    <user>Manuela</user>
    <text>(i used the model.value as the key)</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:10:39.651100</ts>
    <user>Dede</user>
    <text>Wild.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:11:41.651600</ts>
    <user>Manuela</user>
    <text>fortunately, i can work around this in my actual code :smile:</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:11:55.651800</ts>
    <user>Dede</user>
    <text>Hah!</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:11:58.652000</ts>
    <user>Dede</user>
    <text>You are not the first person:  &lt;https://github.com/elm/html/issues/180&gt;</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:13:34.652800</ts>
    <user>Manuela</user>
    <text>yeah, that looks like this issue, cool, thanks!</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:14:02.653100</ts>
    <user>Dede</user>
    <text>Shoulda looked there earlier, sorry.</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:14:07.653300</ts>
    <user>Manuela</user>
    <text>no problem :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1091">
    <ts>2019-04-06T15:18:34.653900</ts>
    <user>Isaiah</user>
    <text>has anyone else encountered weird race conditions in ports code?</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:19:23.654700</ts>
    <user>Isaiah</user>
    <text>This is just absurd. Based on the console output, everything always happens in a sensible order, but randomly elm fails to receive data from the ports</text>
  </message>
  <message conversation_id="1090">
    <ts>2019-04-06T15:36:49.655700</ts>
    <user>Dede</user>
    <text>I haven’t heard of that one.  Can you reduce to something shareable (Ellie?)</text>
  </message>
  <message conversation_id="1091">
    <ts>2019-04-06T16:32:50.658400</ts>
    <user>Isaiah</user>
    <text>It took a while, but I created a minimal example. and it seems that the problem has to do with initializing the subscriptions. I am initializing them at a later time when the user navigates to a certain part of the application instead of as soon as the bundle loads in the browser.</text>
  </message>
  <message conversation_id="1091">
    <ts>2019-04-06T16:33:10.658700</ts>
    <user>Isaiah</user>
    <text>I don't see why this would work differently, but it does</text>
  </message>
  <message conversation_id="1091">
    <ts>2019-04-06T16:36:43.660700</ts>
    <user>Isaiah</user>
    <text>I'm using an XMPP client library to build a chat client, and the chat history is what fails to load through ports because of this race condition, and also causes any incoming messages to be dropped at the port interface, but as soon as I send a message out myself, it starts working. That must be triggering some kind of reload on the subscriptions</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T16:58:53.661700</ts>
    <user>Ashton</user>
    <text>Are you sure? That might be expected behavior, however difficult. There are tricky race conditions with subscriptions.</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:00:00.662800</ts>
    <user>Ashton</user>
    <text>I think, sending out cmds, updating the dom, and subscribing/unsubscribing are all synced on animation frames for the most part.</text>
  </message>
  <message conversation_id="1091">
    <ts>2019-04-06T17:00:47.664100</ts>
    <user>Isaiah</user>
    <text>This is just code for network requests, no dom</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:01:32.664800</ts>
    <user>Ashton</user>
    <text>Yeah, but it could still be synced to the animation frame. Im not sure.</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:03:04.666300</ts>
    <user>Ashton</user>
    <text>I havent checked this question explicitly, but my expectation isnt that, when the new subscriptions are set, they arent simply set right there on the spot, but instead that the new subscriptions are diffed from the old ones next animation frame, and correct ones are unsubscribed, and the new ones are newly subscribed.</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:04:32.667500</ts>
    <user>Isaiah</user>
    <text>but it works sometimes on on the initial page load, randomly</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:13:16.668500</ts>
    <user>Isaiah</user>
    <text>I wonder if if would make sense to have this be a completely separate application that is loaded simultaneously alongside the main application and embedded in the page in a node</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:14:04.669000</ts>
    <user>Isaiah</user>
    <text>there is little data shared between them, just some initialization values</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:15:37.670100</ts>
    <user>Isaiah</user>
    <text>I built my current application as one large program with multiple "screens", including a login/register screen, a lobby, and the main game screen. The chat application lives inside the game screen currently.</text>
  </message>
  <message conversation_id="1091">
    <ts>2019-04-06T17:21:44.670600</ts>
    <user>Augustus</user>
    <text>&lt;@Isaiah&gt; could it be this bug? &lt;https://github.com/elm/compiler/issues/1776&gt;</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:22:59.671200</ts>
    <user>Isaiah</user>
    <text>wow that sounds like exactly what I am having trouble with</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:23:37.672100</ts>
    <user>Isaiah</user>
    <text>the last several days have not been nice to me. Countless impossible-to-debug issues, this being the only elm-related one</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:25:27.672800</ts>
    <user>Isaiah</user>
    <text>Although I don't have access to the elm debugger since has been broken since day one using 0.19 for my project</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:43:56.673000</ts>
    <user>Augustus</user>
    <text>That debugger one is annoying! If the project will build with the debug flag on you could use Debug.log to print out the current Msg/Model at the top of your main update function. If it won't build at all with the debug flag on I don't know a good solution :-/</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T17:49:33.673200</ts>
    <user>Isaiah</user>
    <text>I use Debug.log to print out every message in the console already. I just got used to it after a while</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T18:32:59.673500</ts>
    <user>Huong</user>
    <text>&lt;@Augustus&gt; you can use `Debug.log` without the `--debug` flag - you just can't use `--optimize`</text>
  </message>
  <message conversation_id="1093">
    <ts>2019-04-06T18:36:27.673700</ts>
    <user>Huong</user>
    <text>A structural fix for things breaking when compiling with `--debug` is in the works, for what it's worth. It requires some fairly invasive changes, so it's being batched with a bunch other features/improvements/fixes that benefit from the changes that need to be made.</text>
  </message>
  <message conversation_id="1092">
    <ts>2019-04-06T21:11:23.674000</ts>
    <user>Augustus</user>
    <text>Ah, thank you for clarifying! I hadn't hit that bug yet in our code base</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:48:44.675100</ts>
    <user>Maxwell</user>
    <text>What is Elm's equivalent to React's fragments? Just curious. &lt;https://reactjs.org/docs/fragments.html&gt;</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:51:14.675500</ts>
    <user>Kris</user>
    <text>Just return a list </text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:51:50.675800</ts>
    <user>Maxwell</user>
    <text>Thank you, do you understand how fragments work?</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:52:00.676100</ts>
    <user>Maxwell</user>
    <text>Just to make sure we're on the same page.</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:53:15.676900</ts>
    <user>Kris</user>
    <text>I’ve used them a bit, I believe they’re just a complicated way of returning an array </text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:53:24.677400</ts>
    <user>Kris</user>
    <text>But maybe I’m missing something else.</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:53:34.677700</ts>
    <user>Maxwell</user>
    <text>Ah, okay. So, fragments are not the ability to return an array, but the ability for the VDOM to treat an array of nodes as a single entity (virtual node); for example, can you key the list?</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:53:50.677900</ts>
    <user>Maxwell</user>
    <text>&lt;https://reactjs.org/docs/fragments.html#keyed-fragments&gt;</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:57:20.679100</ts>
    <user>Kris</user>
    <text>No, you key the elements </text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:58:12.679600</ts>
    <user>Maxwell</user>
    <text>Sure, that's a different thing. So, it's not supported, no problem. I just needed to confirm that.</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T22:59:09.680500</ts>
    <user>Maxwell</user>
    <text>Would be nice to know what the rest of the elm community thinks about fragments, but it seems no one is losing any sleep over that.</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-06T23:10:28.680900</ts>
    <user>Kris</user>
    <text>I don’t see the usefulness </text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-07T01:30:48.685600</ts>
    <user>Emilee</user>
    <text>If you need non-encapsulated lists in a keyed list, you can do that. Write a function `List (String, List (Html msg)) -&amp;gt; List (String, Html msg)`
the only use i see right now is for definition lists, though doing that without this function doesn’t seem much harder and the keys would make more sense.
My view on this right now is that it’s a nice trick for the react Dom to have, but I don’t think it’s necessary in Elm</text>
  </message>
  <message conversation_id="1095">
    <ts>2019-04-07T01:43:29.687500</ts>
    <user>Earlean</user>
    <text>It makes a lot more sense for React because of the focus on 'components'.  Fragments give you the ability to have a list of elements as a single component which lets your list use all the features that React components have. For Elm all you'd be getting is the ability to hide that it's a list.</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-07T01:44:57.688300</ts>
    <user>Earlean</user>
    <text>If such a thing did exist it would probably be called `Html.batch` as it does the same thing that `Cmd.batch` and `Sub.batch` do</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-07T02:03:11.688700</ts>
    <user>Maxwell</user>
    <text>Thanks, &lt;@Earlean&gt;, that makes sense.</text>
  </message>
  <message conversation_id="1095">
    <ts>2019-04-07T02:05:28.691000</ts>
    <user>Maxwell</user>
    <text>I have an issue with a `select` element, where it's using the first option from the list as value rather than the value in my model.</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-07T02:05:29.691100</ts>
    <user>Maxwell</user>
    <text>&lt;https://ellie-app.com/5bWFYzmFShya1&gt;</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-07T02:11:58.692200</ts>
    <user>Maxwell</user>
    <text>Did I do something wrong? The displayed text _is_ using the value from the model, so why isn't the `select` also?</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-07T02:18:06.692900</ts>
    <user>Maida</user>
    <text>&lt;@Maxwell&gt; that’s not how select works. you need to set the `selected` attribute on the selected option: &lt;https://ellie-app.com/5bWQB3xPmmMa1&gt;</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-07T02:21:16.694000</ts>
    <user>Maxwell</user>
    <text>Thanks, Peter. :100:</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-07T02:29:00.694800</ts>
    <user>Maxwell</user>
    <text>Do you know if Elm supports a select's element `multiple` attribute? It will cost me a bit of time to come up with an example for that so I'm asking in advance.</text>
  </message>
  <message conversation_id="1096">
    <ts>2019-04-07T03:26:29.695000</ts>
    <user>Emilee</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Attributes#multiple&gt;</text>
  </message>
  <message conversation_id="1096">
    <ts>2019-04-07T03:28:39.695100</ts>
    <user>Emilee</user>
    <text>Generally, elms vdom supports arbitrary attributes via &lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Attributes#attribute&gt; and even properties (like JavaScripts `myEl.someProp = ...` via &lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Attributes#property&gt;
The latter is mainly useful for custom elements</text>
  </message>
  <message conversation_id="1094">
    <ts>2019-04-07T03:31:26.696500</ts>
    <user>Emilee</user>
    <text>&lt;@Maxwell&gt; just pinging so you see this since my answer took quite a while :)</text>
  </message>
  <message conversation_id="1097">
    <ts>2019-04-07T03:57:11.699200</ts>
    <user>Concetta</user>
    <text>Hello there! Someone advertised here a tool that was able to download elm docs for a project so that they are available offline. I can’t remember the name of this tool. Does anyone know what tool I’m talking about?</text>
  </message>
  <message conversation_id="1097">
    <ts>2019-04-07T03:58:17.699500</ts>
    <user>Earlean</user>
    <text>&lt;@Concetta&gt; do you mean &lt;https://www.npmjs.com/package/elm-doc-preview&gt;</text>
  </message>
  <message conversation_id="1097">
    <ts>2019-04-07T04:03:27.699800</ts>
    <user>Concetta</user>
    <text>great, thank you!</text>
  </message>
  <message conversation_id="1098">
    <ts>2019-04-07T05:09:05.700000</ts>
    <user>Ashlie</user>
    <text>You can definitely get it as a JSON value but you'd probably have to stop using the elm/file package and write your own stuff instead.
You'd create a file input element and use the `on` function from Html.Events to detect when a file is selected. `on` allows you to use a custom decoder on the JS event object. If just decode it to a `Json.Decode.Value` instead of a 'real' Elm type, you can pass that directly through a port.
So your custom decoder would be something like:
`&lt;http://Json.Decode.at|Json.Decode.at&gt; ["target", "files"] Json.Decode.value`</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T06:01:29.701700</ts>
    <user>Lynn</user>
    <text>Anyone else feel that the new Http library (2.x) makes working with Http Tasks disproportionately hard - I feel like I am reimplementing almost all of the `Response -&amp;gt; Error` code because it is not exposed</text>
  </message>
  <message conversation_id="1098">
    <ts>2019-04-07T06:24:38.701900</ts>
    <user>Lea</user>
    <text>Never used it myself but you might like &lt;https://package.elm-lang.org/packages/jinjor/elm-req/latest/&gt;</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:08:33.703000</ts>
    <user>Charity</user>
    <text>We updates to http 2.x a while ago and we have not had any issues. Our back end systems send a common error format and we wrote a custom `Response -&amp;gt; OurAppError` function that knows how to deal with status codes and response body such that we can bubble meaningful errors to our applications.

So yeah, we did need to write a custom error function, but I'd expect that eventually most apps would like to map errors into a type that is clear.</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:11:26.703200</ts>
    <user>Charity</user>
    <text>For example, it is helpful to know when a session expired vs getting an opaque 401 or 403 status and needing to figure it out.

Our servers send a correct status code and context in the body of the reponse which allow us to map it into an Error type which we can use to dispatch a Cmd.</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:13:10.703400</ts>
    <user>Charity</user>
    <text>I'm making some assumptions the issue here so hopefully this was helpful.  :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:14:33.703600</ts>
    <user>Lynn</user>
    <text>thanks, that's an interesting observation</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:16:03.703800</ts>
    <user>Charity</user>
    <text>What are you doing in the code inside of the port?  I had a situation that was really easy to fix that might be the same thing.</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:18:31.704000</ts>
    <user>Lynn</user>
    <text>what led to my question was the docs for Http.task “Just like request, but it creates a Task. This makes it possible to pair your HTTP request with Time.now if you need timestamps for some reason. This should be quite rare.”</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:19:17.704200</ts>
    <user>Lynn</user>
    <text>that felt like a rather narrow vision and what e.g. &lt;@Charity&gt; describes is a totally different reason for using task</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:19:47.704400</ts>
    <user>Lynn</user>
    <text>and then there is the simple desire to compose http requests, which was my main interest initially</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:20:36.704700</ts>
    <user>Charity</user>
    <text>when you compose them, what is the use case?

Are you trying to run 2 things at a time or run things sequentially (e.g. get the time, then use the value of time to make an http req?)</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:21:10.705000</ts>
    <user>Lynn</user>
    <text>no, mostly to create ‘joined’ data in a nosql database</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:21:51.705200</ts>
    <user>Charity</user>
    <text>how does an Elm task help write a relationship to a db?  (I apologize for not understanding :disappointed:  )</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:22:38.705500</ts>
    <user>Lynn</user>
    <text>save on thing, and use the id returned to create the object that links to it. Doing that in one go rather than passing via the update function in between</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:24:05.705700</ts>
    <user>Charity</user>
    <text>Ok.. so something like this?

open a db transaction
write something
update something
updatea something else
commit transaction</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:24:54.705900</ts>
    <user>Charity</user>
    <text>then if something in the task fails, rollback transaction</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:26:05.706100</ts>
    <user>Lynn</user>
    <text>yes</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:36:41.706400</ts>
    <user>Charity</user>
    <text>Aha.. my first thought is to put that transaction behind a single server endpoint.</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:39:41.706600</ts>
    <user>Charity</user>
    <text>I see what you are saying now. I've always pushed batches of operations to a new endpoint so unfortunately, I don't have much insight on what you are doing.</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:41:20.706800</ts>
    <user>Charity</user>
    <text>In our stack, we have the luxury of spinning up new API endpoints for batch operations on a DB. I know a lot of folks don't have this luxury.</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:41:34.707000</ts>
    <user>Lynn</user>
    <text>for good or for bad, we currently put the balance of the DB organisation on the client side</text>
  </message>
  <message conversation_id="1100">
    <ts>2019-04-07T12:43:43.707600</ts>
    <user>Krista</user>
    <text>not sure where I should post this, but I'm facing a rather odd issue: &lt;https://ellie-app.com/5c8kffC7j2fa1&gt;</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:44:44.707700</ts>
    <user>Krista</user>
    <text>as you can see in this ellie, having a non breaking space in the wrong place (namely, inside a tag, where it shouldn't be) raises the error `InvalidCharacterError: String contains an invalid character`</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:46:29.707900</ts>
    <user>Krista</user>
    <text>having this error isn't the issue I'm facing, but rather the fact that *in my application* (a RSS reader) this causes an infinite "loop" : the application kinda "reloads" the content over and over, and ends up with an error somewhere in the virtualdom. So my real issue is that there's this infinite loop that brings my browser (and my CPU) to its knees.</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T12:47:49.708100</ts>
    <user>Krista</user>
    <text>any idea how I could investigate that, or maybe an idea of what could be causing the issue ?</text>
  </message>
  <message conversation_id="1099">
    <ts>2019-04-07T13:02:57.708300</ts>
    <user>Florencia</user>
    <text>Starting up a debugger seems to be a reasonable idea</text>
  </message>
  <message conversation_id="1101">
    <ts>2019-04-07T13:55:56.710200</ts>
    <user>Cammy</user>
    <text>We discussed doing this but the overhead of writing my own elm/file was too much. 

Honestly, being able to alias two versions of Elm/http would be ideal. </text>
  </message>
  <message conversation_id="1102">
    <ts>2019-04-07T14:38:56.711400</ts>
    <user>Jae</user>
    <text>Is there a chart somewhere with the big O performance of data structures in Elm? (If not, does anyone know what the big O is for appending an array to another array?)</text>
  </message>
  <message conversation_id="1102">
    <ts>2019-04-07T14:40:28.711500</ts>
    <user>Florencia</user>
    <text>It might be fastest to ask &lt;@Patricia&gt;</text>
  </message>
  <message conversation_id="1102">
    <ts>2019-04-07T14:40:50.711700</ts>
    <user>Florencia</user>
    <text>I think there were some blogposts with performance but I don't know how much the implementation in elm/core has deviated from the original exploration repo</text>
  </message>
  <message conversation_id="1102">
    <ts>2019-04-07T14:41:25.712800</ts>
    <user>Jae</user>
    <text>I take it Robin is the person who implemented HAMT arrays in Elm?</text>
  </message>
  <message conversation_id="1102">
    <ts>2019-04-07T14:41:40.713400</ts>
    <user>Patricia</user>
    <text>It’s O(m) (m being nr of elements in the other Array, although that might change in the not too distant future)</text>
  </message>
  <message conversation_id="1102">
    <ts>2019-04-07T14:41:49.713600</ts>
    <user>Jae</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1102">
    <ts>2019-04-07T14:42:06.714200</ts>
    <user>Patricia</user>
    <text>(And yes, I implemented the thing :)</text>
  </message>
  <message conversation_id="1103">
    <ts>2019-04-07T17:31:29.714800</ts>
    <user>Krista</user>
    <text>That tells me that there is a bug, and why, but sadly not why it results in a loop, which is my real issue here :/</text>
  </message>
  <message conversation_id="1103">
    <ts>2019-04-07T20:09:04.716600</ts>
    <user>Rheba</user>
    <text>I’m wondering if there’s a comparison table for syntax and features between Elm and Typescript. I know there’s one for javascript that ~I can’t locate at the moment~. I plan to make one, but wondering if it already exists in some form.</text>
  </message>
  <message conversation_id="1102">
    <ts>2019-04-07T20:10:03.716700</ts>
    <user>Rheba</user>
    <text>Like this: &lt;https://elm-lang.org/docs/from-javascript&gt;, but for typescript.</text>
  </message>
  <message conversation_id="1104">
    <ts>2019-04-08T01:44:15.717300</ts>
    <user>Niesha</user>
    <text>That table lacks the feature comparison you're looking for.</text>
  </message>
  <message conversation_id="1104">
    <ts>2019-04-08T01:45:09.717500</ts>
    <user>Niesha</user>
    <text>The main difference between Elm and Typescript is that Elm is pure and is a change of paradigm, whereas Typescript wants to encode the things JS is doing in a type system.</text>
  </message>
  <message conversation_id="1105">
    <ts>2019-04-08T02:26:50.720000</ts>
    <user>Carrie</user>
    <text>I want to use highlight. JS highlight code, but when my page uses post request again to add content to the tag, the newly acquired content can't highlight, how can I solve it?</text>
  </message>
  <message conversation_id="1105">
    <ts>2019-04-08T02:36:50.720600</ts>
    <user>Carrie</user>
    <text>I use "hljs.init Highlighting OnLoad ();" in the elm compiled HTML file, but before the post request, my page status is onload, highlight.js cannot render the newly acquired content.</text>
  </message>
  <message conversation_id="1105">
    <ts>2019-04-08T03:07:39.721200</ts>
    <user>Bert</user>
    <text>Using HLJS on content that's rendered by Elm is not great, since HLJS will change the DOM structure, making Elm's virtual-dom confused about the elements on the page. Maybe there's a custom element that incorporates highlighting for its contents?</text>
  </message>
  <message conversation_id="1104">
    <ts>2019-04-08T03:09:06.721300</ts>
    <user>Florencia</user>
    <text>Oh, I misunderstood you. I thought you wanted to debug the crash in the library, not the loop in your app. Sorry</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T03:26:49.722400</ts>
    <user>Danika</user>
    <text>&lt;https://github.com/elm/package.elm-lang.org&gt; could see how elm does it, afaik the package website uses hljs too</text>
  </message>
  <message conversation_id="1105">
    <ts>2019-04-08T03:45:40.722600</ts>
    <user>Carrie</user>
    <text>I will try to find it. Thanks very much</text>
  </message>
  <message conversation_id="1107">
    <ts>2019-04-08T04:29:09.722700</ts>
    <user>Nana</user>
    <text>isn't TypeScript identical to JavaScript though? besides the type declarations</text>
  </message>
  <message conversation_id="1107">
    <ts>2019-04-08T04:30:38.722900</ts>
    <user>Nana</user>
    <text>I suppose you could make a comparison between Elm's and TypeScript's type declaration, that could be useful</text>
  </message>
  <message conversation_id="1108">
    <ts>2019-04-08T08:44:02.726600</ts>
    <user>Elisabeth</user>
    <text>How to extract the response body from a status code 422 response in elm 0.19? In my case it includes important information what went wrong on the server (eg validation errors, like not unique email address on signup). But I can only extract the status code itself but nothing else from `BadStatus`.</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T08:47:38.726900</ts>
    <user>Lea</user>
    <text>By defining this &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#expectStringResponse&gt;</text>
  </message>
  <message conversation_id="1108">
    <ts>2019-04-08T08:48:15.727100</ts>
    <user>Lea</user>
    <text>Assuming you mean Http 2.0.0</text>
  </message>
  <message conversation_id="1108">
    <ts>2019-04-08T08:48:26.727300</ts>
    <user>Jin</user>
    <text>&lt;https://package.elm-lang.org/packages/jinjor/elm-req/latest/&gt; could also be of help.</text>
  </message>
  <message conversation_id="1108">
    <ts>2019-04-08T08:52:09.727700</ts>
    <user>Elisabeth</user>
    <text>yes 2.0.0; Thanks for your quick reply!</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:07:26.728000</ts>
    <user>Nana</user>
    <text>I kind of wish the error response would be returned as a `Value` or `String` by default :thinking_face: having to use `expectStringResponse` takes a lot of boilerplate, and isn't super simple for beginners</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:24:23.728400</ts>
    <user>Lea</user>
    <text>I guess it encourages defining you own error type</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:38:20.728600</ts>
    <user>Charity</user>
    <text>IMHO, the built in error type is sufficient for beginners. The ability to make a custom error type is great b/c everyone's upstream server sends down different things. Getting the custom error type and the abstraction defined early in a project will help for the life of the project.

We did it in the middle/late phase of one project and we had to change a lot of code... The compiler helped, but it was still a bunch of work that could have been avoided.</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:46:35.728800</ts>
    <user>Charity</user>
    <text>&lt;@Elisabeth&gt; - here is a gist that shows how you can decode a response to whatever you like. I took this from one of our production apps.  I hope this helps.

&lt;https://gist.github.com/doanythingfordethklok/8b244264f4f5b7e999f4495c61053f15&gt;</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:46:36.729000</ts>
    <user>Nana</user>
    <text>But it's kind of redundant to define your own `Error` type and create all the boilerplate, when typically the only difference is that you want to change `BadStatus Int` to `BadStatus CustomResponse`</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:47:16.729200</ts>
    <user>Nana</user>
    <text>which I'm guessing is why you didn't get around to it until later in the project</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:48:10.729400</ts>
    <user>Charity</user>
    <text>we didn't get around it until later in the project b/c we were working on our product and kicked bubbling friendly errors until the end of the project</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:49:09.729600</ts>
    <user>Charity</user>
    <text>the part is that http 2.0 came out in the middle of the project..</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:50:50.729800</ts>
    <user>Charity</user>
    <text>I dont see much boilerplate. I see 1 type and 2 functions... and those things do exactly what my app needs them to do.</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T09:58:11.730200</ts>
    <user>Emilee</user>
    <text>hmm, am I missing something here? as far as I can  tell the object contains a field named uri?</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T10:01:24.731000</ts>
    <user>Emilee</user>
    <text>nevermind, apparently it was immutablejs, and because the toString is overridden you can't discern the two...^^</text>
  </message>
  <message conversation_id="1106">
    <ts>2019-04-08T10:16:23.731200</ts>
    <user>Glenda</user>
    <text>made a package for exactly this and more:  &lt;https://package.elm-lang.org/packages/jzxhuang/http-extras/latest/Http-Detailed&gt;

Found that we had to do the same thing in every project so made the boilerplate code into a package, if you only need to do it once or twice it's may be better to just use `expectStringResponse` to handle it yourself as explained above :hugging_face:</text>
  </message>
  <message conversation_id="1109">
    <ts>2019-04-08T11:24:42.733300</ts>
    <user>Donya</user>
    <text>Hello! Does anyone have an idea why when I call `Browser.Navigation.Back`, `onUrlChange` is called twice, and feed first the current url and then the url I want to go back to?</text>
  </message>
  <message conversation_id="1109">
    <ts>2019-04-08T11:31:49.735000</ts>
    <user>Brady</user>
    <text>&lt;@Donya&gt; I know there is some weird Chrome bug with popstate, is it happening in every browser for you?</text>
  </message>
  <message conversation_id="1109">
    <ts>2019-04-08T11:33:38.735300</ts>
    <user>Donya</user>
    <text>i havent yet checked it in firefox</text>
  </message>
  <message conversation_id="1109">
    <ts>2019-04-08T11:33:50.735800</ts>
    <user>Donya</user>
    <text>&lt;@Brady&gt; One minute...</text>
  </message>
  <message conversation_id="1109">
    <ts>2019-04-08T11:34:31.736100</ts>
    <user>Donya</user>
    <text>&lt;@Brady&gt; Woah! It works in firefox</text>
  </message>
  <message conversation_id="1109">
    <ts>2019-04-08T11:34:47.736400</ts>
    <user>Donya</user>
    <text>@ I apparently only have the problem in chrome</text>
  </message>
  <message conversation_id="1109">
    <ts>2019-04-08T11:35:47.737300</ts>
    <user>Donya</user>
    <text>&lt;@Brady&gt; Is this a known issue? I've been tearing my hair out for the two hours trying to debug it :yum:</text>
  </message>
  <message conversation_id="1109">
    <ts>2019-04-08T11:41:50.739300</ts>
    <user>Brady</user>
    <text>chrome bug is known issue, to avoid that issue we are storing url in our model, then `onUrlChange` we compare new url with the url in the model</text>
  </message>
  <message conversation_id="1109">
    <ts>2019-04-08T11:43:20.739500</ts>
    <user>Donya</user>
    <text>got it. thanks so much for the help</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:15:43.740600</ts>
    <user>Dayna</user>
    <text>Are there any recent benchmarks of Elm and overall performance comparison to other libraries like React? I'm looking into using Elm for a performance critical project and I want to gather some data first.</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:20:39.740700</ts>
    <user>Timika</user>
    <text>What kind of metrics are you looking for? And what is the nature of the project?</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:21:09.740900</ts>
    <user>Timika</user>
    <text>There is this older blogpost by Evan about the VDOM performance: &lt;https://elm-lang.org/blog/blazing-fast-html-round-two&gt;</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:23:10.741200</ts>
    <user>Dayna</user>
    <text>That is from way back in 2016, Elm has changed a lot since then. The nature of the project is a website where people will be betting on live events, imagine a lot of odds updating in real time and input latency is crucial, you don't want people to get upset because they missed their bet, especially on low-powered mobile devices.</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:24:32.741400</ts>
    <user>Lea</user>
    <text>&lt;https://krausest.github.io/js-framework-benchmark/current.html&gt;</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:29:20.741700</ts>
    <user>Timika</user>
    <text>That’s very interesting. Especially the direct comparison between Elm and React there.</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:32:01.742000</ts>
    <user>Dayna</user>
    <text>&lt;https://medium.freecodecamp.org/a-realworld-comparison-of-front-end-frameworks-with-benchmarks-2019-update-4be0d3c78075&gt;</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:32:07.742300</ts>
    <user>Lea</user>
    <text>Indeed, I’m curious to see how much faster Elm can get over time</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:32:10.742500</ts>
    <user>Dayna</user>
    <text>Here's what I found as well, Elm looks very promising.</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:32:36.742700</ts>
    <user>Timika</user>
    <text>TBH, I am a bit surprised how well Elm fares in those benchmarks. :elm:</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:36:46.742900</ts>
    <user>Charity</user>
    <text>Take a look at bundle size. Elm compiles to a very tiny resource.  I cannot get our CSS close to the small size of our elm code.</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:37:26.743100</ts>
    <user>Charity</user>
    <text>For context, I took one of our apps and added a service worker and a manifest and it passed all of the PWA audits on the first run.</text>
  </message>
  <message conversation_id="1110">
    <ts>2019-04-08T14:38:52.743400</ts>
    <user>Dayna</user>
    <text>Btw I also love how Elm makes your css way smaller as well. If you use elm-css and minify the code all your css properties will become single letters.</text>
  </message>
  <message conversation_id="1111">
    <ts>2019-04-08T15:26:35.755100</ts>
    <user>Isaiah</user>
    <text>I've seen several different ways of structuring larger applications, but I am not satisfied with any of them so far. Richard's SPA example is okay for a stateless application with mutually exclusive "pages", but a stateful one will need to take a different approach. The approach taken by [this game](&lt;https://github.com/Lattyware/massivedecks/blob/master/client/src/MassiveDecks/Scenes/Start.elm&gt;) is not bad. I combined these two approaches for my current application, but I still find it lacking. For example, I don't want to load the actual application until the user is logged in, which means I'll need to create a sum type `type Screen = LoginScreen Login.Model | AppScreen App.Model`, and this continues throughout the application, resulting in many layers of nesting inside of sum types in order to guarantee certain conditions are met. This also avoids the problem where everything is wrapped in `Maybe`, but I still feel like there should be a better way to do it.

For reference, you can find the application I am building here &lt;https://github.com/ericnething/roll2d6-client&gt;. It's ~14k loc right now.

I also considered using a state stack (like in games or iOS) where only the state on the top of the stack gets updated and rendered, which would of course allow me to push/pop different models and swap them out. I noticed in the game linked above, localStorage is used to pass data around between "pages", but that creates a global mutable state, which is undesirable. Has anyone seen any better approaches for structuring a "desktop-like" stateful application?</text>
  </message>
  <message conversation_id="1111">
    <ts>2019-04-08T15:27:25.755200</ts>
    <user>Velia</user>
    <text>Inline Styled elm-css slows down Elm a lot though at the moment. If you have a lot of styled nodes, beware and benchmark before. Stylesheets are much faster.</text>
  </message>
  <message conversation_id="1111">
    <ts>2019-04-08T15:39:12.755600</ts>
    <user>Chae</user>
    <text>I’m taking a similar approach of `type Screen = LoginScreen Login.Model | AppScreen App.Model` with a relatively small but quite complex app right now. I’m fairly excited about this approach, but if you or anyone else finds a better one, I’d love to hear about it.</text>
  </message>
  <message conversation_id="1111">
    <ts>2019-04-08T15:43:15.755800</ts>
    <user>Dede</user>
    <text>I’m taking what I think is a distinctive approach in an app I’m working on.   &lt;https://github.com/jhbrown94/experimental-elm-spa-skeleton&gt;</text>
  </message>
  <message conversation_id="1111">
    <ts>2019-04-08T15:43:52.756000</ts>
    <user>Dede</user>
    <text>(this isn’t the app, it’s an extract from it, but it highlights some of the key stuff.)</text>
  </message>
  <message conversation_id="1111">
    <ts>2019-04-08T15:43:59.756200</ts>
    <user>Dede</user>
    <text>Gotta go now, but happy to discuss if it looks interesting later on.</text>
  </message>
  <message conversation_id="1111">
    <ts>2019-04-08T15:54:32.756500</ts>
    <user>Dayna</user>
    <text>elm-css generates a stylesheet and inserts it at the top of the root element, are you talking about an old version of it?</text>
  </message>
  <message conversation_id="1111">
    <ts>2019-04-08T16:05:45.756800</ts>
    <user>Velia</user>
    <text>No current version. Elm-css currently performs some checks at runtime (this will be improved once/if the phantom branch is merged) and the hashing used to generate the classes (at each view) can become heavy. At last `Lazy` renders a style node at the DOM level of the lazy call, so you may end with a lot of duplicate style nodes in some cases.

This may not matter though depending of your use case.

See &lt;https://rawgit.com/webbhuset/test-elm-performance/master/results/charts.html&gt; 

or test it yourself:

&lt;https://rawgit.com/webbhuset/test-elm-performance/master/0.19/index.html&gt;</text>
  </message>
  <message conversation_id="1112">
    <ts>2019-04-08T16:09:53.757400</ts>
    <user>Lea</user>
    <text>I’ve (only) had problems with elm-css while loading an infinite list of items containing 5 elements each. Losing fps while scrolling after 200+ items</text>
  </message>
  <message conversation_id="1112">
    <ts>2019-04-08T16:11:21.757600</ts>
    <user>Velia</user>
    <text>Yes it's usually only noticeable with hundreds or more nodes with complex styles.</text>
  </message>
  <message conversation_id="1112">
    <ts>2019-04-08T16:11:26.757800</ts>
    <user>Lea</user>
    <text>It is definitely fine for generic use though</text>
  </message>
  <message conversation_id="1112">
    <ts>2019-04-08T16:12:20.758000</ts>
    <user>Velia</user>
    <text>Sure, and there are some workarounds for extreme cases, but still, if 60 FPS is wanted, this might be an issue (typically animations).</text>
  </message>
  <message conversation_id="1112">
    <ts>2019-04-08T16:13:29.758300</ts>
    <user>Lea</user>
    <text>Exactly, it’s fine for static pages, that may even have quite a bit of content. But if you want to move animate/transition stuff regular css is a lot less risky</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:43:29.759300</ts>
    <user>Vilma</user>
    <text>can someone help me decode this union type into a list?
```
decoder : Decode.Decoder Permissions
decoder =
  Decode.succeed Permissions
    |&amp;gt; Pipeline.required "owner" (Decode.list operationDecoder)
    |&amp;gt; Pipeline.required "group" (Decode.list operationDecoder)
    |&amp;gt; Pipeline.required "other" (Decode.list operationDecoder)

operationDecoder : Decode.Decoder Operation
operationDecoder =
  Decode.string
    |&amp;gt; Decode.andThen
    |&amp;gt; toOperation

toOperation : String -&amp;gt; Decode.Decoder Operation
toOperation operation =
  case operation of
    "read" -&amp;gt; Decode.succeed Read
    "write" -&amp;gt; Decode.succeed Write
    "execute" -&amp;gt; Decode.succeed Execute
    _ -&amp;gt; Decode.fail "Unknown operation in permissions"
```</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:44:03.759800</ts>
    <user>Vilma</user>
    <text>I keep getting this error:
```
-- TYPE MISMATCH -------------------------------- src/Operations.elm

This function cannot handle the argument sent through the (|&amp;gt;) pipe:

27|   Decode.string
28|     |&amp;gt; Decode.andThen
           ^^^^^^^^^^^^^^
The argument is:

    Decode.Decoder String

But (|&amp;gt;) is piping it a function that expects:

    a -&amp;gt; Decode.Decoder b
```</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:45:16.760400</ts>
    <user>Virgie</user>
    <text>the `andThen` needs an argument, so I think `|&amp;gt; Decode.andThen toOperation` will do what you want</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:46:31.760500</ts>
    <user>Velia</user>
    <text>I believe this could be an issue from `hecrj/html-parser` that may not perform enough checks before creating nodes attributes. I would open a bug there with your SSCCE.

If this can help until it's confirmed, it works using `elm-explorations/markdown` `toHtmlWith` (html is valid markdown), for example:

&lt;https://ellie-app.com/5cFKS9GLsrxa1&gt;

By the way, I'm also working on an RSS reader in my spare time, and I began going the whole rabbit hole, starting with &lt;https://package.elm-lang.org/packages/dmy/elm-imf-date-time/latest/&gt; then working on some xml and rss libraries. So what are you using to parse RSS feeds and do you intend to publish something? I would not like to duplicate some work if possible.</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:47:19.760900</ts>
    <user>Vilma</user>
    <text>oh my</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:47:40.761300</ts>
    <user>Vilma</user>
    <text>this is just me being tired</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:47:45.761500</ts>
    <user>Vilma</user>
    <text>that’s so obvious lol</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:47:48.761700</ts>
    <user>Vilma</user>
    <text>thanks &lt;@Virgie&gt;</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:48:00.761900</ts>
    <user>Vilma</user>
    <text>I spent 20 min looking at this</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:56:48.762400</ts>
    <user>Velia</user>
    <text>Maybe &lt;@Tamra&gt; could confirm.</text>
  </message>
  <message conversation_id="1113">
    <ts>2019-04-08T16:58:29.762600</ts>
    <user>Velia</user>
    <text>Concerning the loop, I believe it is because the Virtual DOM diffing algorithm notices that the attribute has still not be created, and tries to create it again (which is not possible because of the invalid character), raising the error at each diffing. You most likely won't be able to fix this without fixing the attribute creation.</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:08:07.765200</ts>
    <user>Florencia</user>
    <text>I'm thinking about how to debug `elm/parser` Parsers (read: I'm trying to write a parser and failing miserably). What about a version of the `elm/parser` package that collects "logs" about what it did during the parsing - eg. something like here: &lt;https://rosettacode.org/wiki/Monads/Writer_monad#Haskell&gt; ? Would that make sense?</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:08:24.765500</ts>
    <user>Florencia</user>
    <text>(Or, does anybody have a better idea?)</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:11:55.765700</ts>
    <user>Huong</user>
    <text>In my experience, using `inContext` and writing a little thingymajob to visualise the context stack for deadends has been super helpful</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:12:04.765900</ts>
    <user>Huong</user>
    <text>I don't have any code handy, tho, sorry!</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:19:02.766100</ts>
    <user>Florencia</user>
    <text>It's true I haven't used `inContext` yet at all.
The thing is, I don't have dead ends. It parses successfully, but wrongly :sweat_smile:</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:19:17.766300</ts>
    <user>Florencia</user>
    <text>I can try to force something like that though</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:19:21.766500</ts>
    <user>Florencia</user>
    <text>with `Parser.end` or something</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:23:27.766700</ts>
    <user>Huong</user>
    <text>`Parser.problem` is always nice, if you know some place it reaches but shouldn't be reaching</text>
  </message>
  <message conversation_id="1115">
    <ts>2019-04-08T17:26:20.766900</ts>
    <user>Velia</user>
    <text>&lt;@Krista&gt; At last I forgot to mention it, but the lack of attributes check in elm/html is known:

&lt;https://github.com/elm/html/issues/46&gt;

But most likely won't be fixed mainly for performance reasons. See also:

&lt;https://github.com/elm/html/issues/47#issuecomment-229853447&gt;</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:29:29.767100</ts>
    <user>Rheba</user>
    <text>Yeah, it's the comparison between the type checking that I was interested in. This is from the perspective of someone who's been doing Elm for three years and is taking on a Typescript project for the first time. I've done some investigation and I've written a gist. I'll post once I've finished. As an example, I was suprised that it can do exhaustiveness checking of switch statements, but it's very clunky.</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:33:17.767300</ts>
    <user>Krista</user>
    <text>ah, wow, that's a lot of great insights, thanks a lot &lt;@Velia&gt;! I figured also that I should rather find a way to fix it in hecrj/html-parser (to check before the node creation)</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:34:15.767500</ts>
    <user>Krista</user>
    <text>regarding the rss, it's "just" a elm ui (&lt;https://github.com/magopian/rerss-elm-ui&gt;) as a side project, for the rerss project of some friends: &lt;https://framagit.org/ybon/rerss/tree/master/rerss/app&gt;</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:35:33.768400</ts>
    <user>Cornell</user>
    <text>&lt;@Florencia&gt; I've used this technique every now and then for debugging `elm-markup`: &lt;https://github.com/mdgriffith/elm-markup/blob/bd14defa26dd88bf77435fe614c7cf1cbd591b8f/src/Mark/Internal/Parser.elm#L1493&gt;</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:36:15.768800</ts>
    <user>Cornell</user>
    <text>Just logs the source of what it parsed</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:37:36.768900</ts>
    <user>Velia</user>
    <text>I did not give it much thought, but a `Parser.Debug` could make sense, maybe using `andThen`, `getSource` and `getOffset` after each function of the API and producing some nicely formatted logs that show the parser progression in the string with each returned value. It could be slow but this does not matter much, and maybe an `Advanced` version would also be needed. Actually a Context in addition would be much better, as the parser cannot guess it.

Not sure if it should use `Debug.log` or accumulate the logs.

Anyway it seems to be a good idea, but I may have overlooked some showstoppers.</text>
  </message>
  <message conversation_id="1115">
    <ts>2019-04-08T17:42:11.769100</ts>
    <user>Velia</user>
    <text>Parsers are indeed sometimes tricky to debug (for example if you don't know that `chompUntil*` do not consume the end string but advances the position, which leads to hard to debug errors, &lt;https://github.com/elm/parser/issues/20)&gt;</text>
  </message>
  <message conversation_id="1115">
    <ts>2019-04-08T17:43:33.771100</ts>
    <user>Leoma</user>
    <text>Well, before anyone else loses as much time as I have, there’s a bug in Safari that causes onFocus to trigger twice in series, before update gets a chance to do it’s work on the first.</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:43:47.771400</ts>
    <user>Florencia</user>
    <text>On related note to the parsers, if I change a package in `~/.elm/0.19.0/packages/...`, does Elm recheck its hash or something or does it just use it blindly?</text>
  </message>
  <message conversation_id="1114">
    <ts>2019-04-08T17:44:07.771700</ts>
    <user>Velia</user>
    <text>Nice, thanks for your answer.</text>
  </message>
  <message conversation_id="1115">
    <ts>2019-04-08T17:49:56.773900</ts>
    <user>Charity</user>
    <text>The elm forum is running on discourse.  My company created a community and the FE is pure Elm. I could fork it, remove the banking bits, and make it open source.

Sorry to post this to general, but does anyone know who I can talk with to gauge whether this is interesting ?</text>
  </message>
  <message conversation_id="1115">
    <ts>2019-04-08T17:56:30.774800</ts>
    <user>Huong</user>
    <text>The nice things about discourse are
- it's free (for sizeable FOSS projects like Elm)
- it has a bunch of builtin moderation tools and a community quite willing to listen to us
- it's reasonably familiar
- it's well tested.
So basically, it's something don't have to worry about _running_, only about moderating. If an alternative with similar features were to pop up, I'm sure that'd be very interesting, but the bar for the Elm community to move is set quite high!</text>
  </message>
  <message conversation_id="1115">
    <ts>2019-04-08T18:02:07.775000</ts>
    <user>Huong</user>
    <text>That said, me personally and a large part of the community I'm sure would be super interested in having this available as open source!</text>
  </message>
  <message conversation_id="1115">
    <ts>2019-04-08T18:02:29.775200</ts>
    <user>Huong</user>
    <text>I fully realize that's a non-trivial investment, though :sweat_smile:</text>
  </message>
  <message conversation_id="1116">
    <ts>2019-04-08T18:15:54.776200</ts>
    <user>Luz</user>
    <text>Any good resources on creating an autocomplete input box in Elm 0.19? Extra points if it's from an HTTP API</text>
  </message>
  <message conversation_id="1116">
    <ts>2019-04-08T18:17:28.776500</ts>
    <user>Treasa</user>
    <text>I'm having an issue with creating a file drop-zone in elm using ports. I was able to successfully create it once in its own repository (&lt;https://github.com/SkySor44/elm-drop-zone&gt;)  but when I tried to implement it in our app at work I can't get the event.dataTransfer.files to be anything but empty. I am aware of the many instances of people trying to log the files in the console but that isn't my issue here. When I drop a file from my computer it doesn't put it in the dataTransfer.files FileList. All my code is exactly the same with just a little more occurring in surrounding elements and I can't figure out why it works in the above repository but not in my elm app. Any ideas?</text>
  </message>
  <message conversation_id="1116">
    <ts>2019-04-08T18:20:00.776600</ts>
    <user>Charity</user>
    <text>We run a community already in production. The main parts of the community are solid.  I'm not sure what kind of moderation y'all would need and we can talk about that if it is a gap.

&amp;gt; it's free (for sizeable FOSS projects like Elm)
This would be free and OSS.

&amp;gt; it has a bunch of builtin moderation tools and a community quite willing to listen to us
There are gonna be gaps here and if we know what they are we can work them.

&amp;gt; it's reasonably familiar
familiar how?  like UX?  I guess this is personal preference, but our app is material design and installs as a PWA.

&amp;gt; it's well tested.
the base app has been tested and currently is live in production. The backend is a separate interface and has 1663 unit tests.</text>
  </message>
  <message conversation_id="1116">
    <ts>2019-04-08T18:20:32.777200</ts>
    <user>Charity</user>
    <text>Again, I'm not looking to have this conversation here.  It is certainly more complicated than

• "hey I wanna do this thing"
• "ok, go do this thing"</text>
  </message>
  <message conversation_id="1116">
    <ts>2019-04-08T18:27:40.780400</ts>
    <user>Lorilee</user>
    <text>This package can help! &lt;https://package.elm-lang.org/packages/ContaSystemer/elm-menu/latest/&gt;</text>
  </message>
  <message conversation_id="1117">
    <ts>2019-04-08T18:31:44.781000</ts>
    <user>Lindsey</user>
    <text>Hey I have a little problem in my animation frame subscription.
1) When the player hits 'go',  I get a msg, and there I request some random data in a Cmd.
2) When the result of that randomness is received, I update the model to have animate=true
3) my subscription function checks for animate=true, and if so returns `onAnimationFrameDelta AniFrame`
The problem is it doesn't work unless I do something else like click a button.</text>
  </message>
  <message conversation_id="1116">
    <ts>2019-04-08T18:35:48.781100</ts>
    <user>Huong</user>
    <text>Re discourse being free for the Elm community - I mean that it's a hosted instance, so it's also free as in beer. Discourse itself is also FOSS, but that's not super relevant.
Re familiarity: I mean for people coming from other communities that use discourse, such as Elixir.

I think the best course of action might be to message the Discourse moderation team directly (&lt;https://discourse.elm-lang.org/about&gt; -&amp;gt; ElmModerationTeam -&amp;gt; Message)

My main purpose was really just to make it clear that changing our community infrastructure needs significant reason. It being built in Elm is absolutely amazing (and I'm super stoked by this! :smile: ), but not very high on the priority list.</text>
  </message>
  <message conversation_id="1118">
    <ts>2019-04-08T18:43:54.782400</ts>
    <user>Leoma</user>
    <text>FYI, there’s a programmatic subscription bug in Elm.  &lt;https://github.com/elm/compiler/issues/1776&gt;</text>
  </message>
  <message conversation_id="1116">
    <ts>2019-04-08T18:47:56.782600</ts>
    <user>Lindsey</user>
    <text>Ok thanks.  It works if I change my 'animate' bool in the event where I receive the button message.</text>
  </message>
  <message conversation_id="1119">
    <ts>2019-04-08T19:39:28.783100</ts>
    <user>Kimiko</user>
    <text>Personally, I didn't feel the `Response` or `Error` types were a great fit so I ended up rewriting both of them and yes, the mapping between them too</text>
  </message>
  <message conversation_id="1119">
    <ts>2019-04-08T19:41:33.783300</ts>
    <user>Kimiko</user>
    <text>Do you have a link to this issue?</text>
  </message>
  <message conversation_id="1120">
    <ts>2019-04-08T20:01:40.784100</ts>
    <user>Carter</user>
    <text>is there some easy way of getting elm 0.18 on ubuntu 18.04 other than building from source?</text>
  </message>
  <message conversation_id="1120">
    <ts>2019-04-08T20:09:35.784700</ts>
    <user>Ruthann</user>
    <text>`npm install elm@0.18.0-exp5` ?</text>
  </message>
  <message conversation_id="1120">
    <ts>2019-04-08T20:09:43.784900</ts>
    <user>Ruthann</user>
    <text>&lt;https://www.npmjs.com/package/elm&gt;</text>
  </message>
  <message conversation_id="1121">
    <ts>2019-04-08T20:27:13.785300</ts>
    <user>Charity</user>
    <text>I appreciate pragmatism. 

Also, where is all of this free beer?</text>
  </message>
  <message conversation_id="1120">
    <ts>2019-04-08T20:46:08.785500</ts>
    <user>Luz</user>
    <text>Thank you! I'll check it out!</text>
  </message>
  <message conversation_id="1122">
    <ts>2019-04-09T00:35:52.786000</ts>
    <user>Brady</user>
    <text>&lt;https://bugs.chromium.org/p/chromium/issues/detail?id=101137&amp;amp;q=pushstate&amp;amp;colspec=ID%20Pri%20Mstone%20ReleaseBlock%20Area%20Feature%20Status%20Owner%20Summary&gt;</text>
  </message>
  <message conversation_id="1122">
    <ts>2019-04-09T00:39:20.786400</ts>
    <user>Nga</user>
    <text>Is there any updated word on websocket library migration to 0.19?</text>
  </message>
  <message conversation_id="1123">
    <ts>2019-04-09T02:35:48.786600</ts>
    <user>Lynn</user>
    <text>much as I want it too, I hope that priority is being given to the compiler bugs</text>
  </message>
  <message conversation_id="1124">
    <ts>2019-04-09T02:42:29.786800</ts>
    <user>Lynn</user>
    <text>We started thinking about that yesterday too - that might create opportunities to model thinks more specifically for our use case</text>
  </message>
  <message conversation_id="1124">
    <ts>2019-04-09T02:51:06.787000</ts>
    <user>Krista</user>
    <text>The project is some kind of social RSS reader where you share (or re-rss, like a retweet). What about your project?</text>
  </message>
  <message conversation_id="1122">
    <ts>2019-04-09T05:17:23.788800</ts>
    <user>Gertrude</user>
    <text>Trying to install create-elm-app on WSL/Ubuntu, and I get this from binwrap-install: `ERR Error extracting &lt;https://github.com/stoeffel/elmi-to-json/releases/download/0.19.1/elmi-to-json-0.19.1-linux.tar.gz&gt; - Error: EACCES: permission denied, mkdir '/usr/lib/node_modules/create-elm-app/node_modules/elmi-to-json/unpacked_bin`

I had the same issue with installing both elm and create-elm-app on plain Ubuntu at work; eventually had to just use nvm, which is a huge pain.</text>
  </message>
  <message conversation_id="1125">
    <ts>2019-04-09T05:24:09.789000</ts>
    <user>Miguelina</user>
    <text>&lt;@Charity&gt; Thank you for the gist!</text>
  </message>
  <message conversation_id="1122">
    <ts>2019-04-09T05:28:43.790900</ts>
    <user>Sunni</user>
    <text>you can solve this issue by owning /usr/lib/node_modules &lt;@Gertrude&gt; im not sure if its possible to change default global lib location of npm but a temporary fix would be just `sudo chown &amp;lt;YOURUSERNAME&amp;gt; /usr/lib/node_modules`</text>
  </message>
  <message conversation_id="1122">
    <ts>2019-04-09T05:29:37.791800</ts>
    <user>Sunni</user>
    <text>and probably you will need also need to somehow give yourself write access to `/usr/bin`</text>
  </message>
  <message conversation_id="1122">
    <ts>2019-04-09T05:30:27.792600</ts>
    <user>Sunni</user>
    <text>what i did was `sudo chown root:nikos /usr/bin &amp;amp;&amp;amp; sudo chmod g+w /usr/bin`</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T05:43:46.792900</ts>
    <user>Huong</user>
    <text>&lt;https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally#manually-change-npms-default-directory&gt; this is the recommended way to handle this</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T05:44:23.793800</ts>
    <user>Huong</user>
    <text>Messing with permissions outside of `/home` is generally not a great idea</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T05:48:00.794000</ts>
    <user>Syble</user>
    <text>Try not to install packages globally. I understand the urge, I love to do the same, but this leads to a lot of pain. Best is to install in your project dir (which is the default)</text>
  </message>
  <message conversation_id="1122">
    <ts>2019-04-09T05:52:34.794300</ts>
    <user>Monnie</user>
    <text>```sudo npm install -g create-elm-app --unsafe-perm=true```
Should do the trick...
But changing the global install folder to  a folder in your home directory is probably the best option..</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T05:55:54.795100</ts>
    <user>Agustin</user>
    <text>`/usr` is ok if its your machine</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T05:56:15.795700</ts>
    <user>Agustin</user>
    <text>`/usr/local` is especially ok on osx</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T05:56:49.795800</ts>
    <user>Huong</user>
    <text>Anything is "ok" if it's your machine. Doesn't make it a great idea.</text>
  </message>
  <message conversation_id="1127">
    <ts>2019-04-09T06:04:36.796200</ts>
    <user>Shantell</user>
    <text>&lt;@Dede&gt; your approach make writing spa more easily for a beginner like me :smile: , thank you very much!</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:11:06.796500</ts>
    <user>Shantell</user>
    <text>I put my stuff in your framework, it  works! until the one use subscriptions. I can not figure out how to get it to work. I can not fully understand your framework so far. do you have any example on subscriptions?</text>
  </message>
  <message conversation_id="1127">
    <ts>2019-04-09T06:14:41.796900</ts>
    <user>Gertrude</user>
    <text>well, for something like create-elm-app, it's sort of half the use case to have it globally. ditto the elm compiler really.</text>
  </message>
  <message conversation_id="1127">
    <ts>2019-04-09T06:15:13.797100</ts>
    <user>Gertrude</user>
    <text>real problem is the insistence by Ubuntu that npm be installed such as to require root to do it</text>
  </message>
  <message conversation_id="1128">
    <ts>2019-04-09T06:19:27.798300</ts>
    <user>Sunni</user>
    <text>&lt;@Huong&gt; here we are just changing the folder permissions nothing inside of it and we dont own the folder in the example above i just added myself to the group and let the group be able to write</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:20:43.799100</ts>
    <user>Sunni</user>
    <text>if it was chmod -R then yes you would run into trouble since you would mess with the permissions of sudo</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:20:44.799200</ts>
    <user>Huong</user>
    <text>Yes, and now _everything_ running as your current user has permission to globally install stuff.</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:21:19.799500</ts>
    <user>Huong</user>
    <text>If you trust your own user unconditionally, you might as well be running as root :shrug:</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:21:26.799700</ts>
    <user>Sunni</user>
    <text>well if theres a way of setting npm global dir that would be a nicer thing of course but this is a work around</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:21:41.799900</ts>
    <user>Huong</user>
    <text>Yes, there is, and that's exactly what I linked to</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:22:14.800100</ts>
    <user>Sunni</user>
    <text>and globally installing things are not bad if they need some root stuf still they cannot do that</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:22:52.800300</ts>
    <user>Huong</user>
    <text>I don't mind globally installing things, I do mind globally installing potentially untrusted stuff, and giving potentially untrusted stuff permission to globally install more stuff :smile:</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:23:06.800500</ts>
    <user>Sunni</user>
    <text>Oh than that is cooler than my temporary patch :slightly_smiling_face: but can you explain please why do you thing being able to install things in path to be a bad thing ?</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:24:01.800700</ts>
    <user>Huong</user>
    <text>I don't. My point is more that you're giving your user permission to globally install stuff. The result of which is that any process you run as your user can now globally install stuff, without your knowledge.</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:25:33.800900</ts>
    <user>Sunni</user>
    <text>yes but thats not a extremely dangerous thing thats what im trying to say :slightly_smiling_face: they still cannot perform untrusted operations and even if you dont allow global invocation they would be able to put things under some location and call by path</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:25:37.801100</ts>
    <user>Sunni</user>
    <text>i dont see any difference</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:25:59.801300</ts>
    <user>Huong</user>
    <text>They can also overwrite anything in `/usr/bin`</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:26:20.801500</ts>
    <user>Huong</user>
    <text>even stuff `root` might execute</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:29:48.801700</ts>
    <user>Sunni</user>
    <text>not necessarily we are giving permissions to folder individuals which has no write access to the group there will not be affected by this</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:30:31.801900</ts>
    <user>Sunni</user>
    <text>thats what i meant by not giving -R flag</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:31:36.802100</ts>
    <user>Huong</user>
    <text>- you give your user permission to write to `/usr/bin`
- you do something like `npm install -g seemingly-innocent-package`
- that package can now, while installing, overwrite files in `/usr/bin`</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:38:16.802300</ts>
    <user>Huong</user>
    <text>Anyway, long story short: more restrictive permissions is better for security, so when there is an option to do things without widening permissions, that's generally to be preferred.</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:39:05.802500</ts>
    <user>Huong</user>
    <text>This link explains how to do safe global installs with npm without requiring root: &lt;https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally#manually-change-npms-default-directory&gt;</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:43:03.802700</ts>
    <user>Sunni</user>
    <text>totally agreed  :slightly_smiling_face: and again overriding default dir of npm is a way way better solution i just didnt know that</text>
  </message>
  <message conversation_id="1126">
    <ts>2019-04-09T06:43:21.802900</ts>
    <user>Velia</user>
    <text>RSS feeds of Elm packages releases with a website.</text>
  </message>
  <message conversation_id="1129">
    <ts>2019-04-09T07:33:18.803300</ts>
    <user>Gertrude</user>
    <text>yeah, I've tried that, and at least on my Ubuntu machine it broke stuff and still had the same permissions issues</text>
  </message>
  <message conversation_id="1129">
    <ts>2019-04-09T07:46:59.805400</ts>
    <user>Inga</user>
    <text>manually changing npm's location to a world-writable directory is the best option by far, especially because some packages download raw binaries instead of only source code</text>
  </message>
  <message conversation_id="1129">
    <ts>2019-04-09T07:48:00.807200</ts>
    <user>Gertrude</user>
    <text>on other OSes and even some other Linux distros, npm ships by default to install to a directory in $HOME rather than global root</text>
  </message>
  <message conversation_id="1129">
    <ts>2019-04-09T07:48:15.808100</ts>
    <user>Gertrude</user>
    <text>I don't understand why Ubuntu insists on the opposite. Even the NodeSource packages do it</text>
  </message>
  <message conversation_id="1129">
    <ts>2019-04-09T07:48:37.808800</ts>
    <user>Inga</user>
    <text>and I advise to do it as soon as you can because after you do it, your old packages' linked executables will still be pointing at /usr/lib</text>
  </message>
  <message conversation_id="1129">
    <ts>2019-04-09T07:49:23.810200</ts>
    <user>Inga</user>
    <text>meaning you'll have to reinstall everything to the new location or manually move the packages and re-link everything in $PATH, which is ambitious</text>
  </message>
  <message conversation_id="1129">
    <ts>2019-04-09T07:54:17.814300</ts>
    <user>Inga</user>
    <text>for me it was weird that even /opt restricts access from the users group, so I just created a /programs world-writable directory where I install e.g. programs from Github and other stuff not coming from APT</text>
  </message>
  <message conversation_id="1129">
    <ts>2019-04-09T07:54:54.815000</ts>
    <user>Inga</user>
    <text>and moved NPM's home to /programs/npm-modules</text>
  </message>
  <message conversation_id="1129">
    <ts>2019-04-09T07:55:13.815600</ts>
    <user>Inga</user>
    <text>never had a single issue with any permission after it</text>
  </message>
  <message conversation_id="1130">
    <ts>2019-04-09T08:42:42.816200</ts>
    <user>Dede</user>
    <text>Thanks for the kind words!  I have subscriptions working in the upstream app, but I need to port an example back to the public repo.  Probably by tomorrow afternoon (US eastern time zone.)</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T08:52:13.817000</ts>
    <user>Nana</user>
    <text>does `--optimize` have a big effect on runtime performance, or is it mostly bundle size?</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T08:54:49.817600</ts>
    <user>Timika</user>
    <text>Depends on the code I assume, but for my hobby project it’s a huge performance boost as well.</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T08:55:27.817900</ts>
    <user>Nana</user>
    <text>how huge? :smile:</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T08:56:04.818100</ts>
    <user>Nana</user>
    <text>like 2x or 10x?</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T08:56:18.818300</ts>
    <user>Timika</user>
    <text>No, not _that_ huge :smile:</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T08:56:39.818500</ts>
    <user>Timika</user>
    <text>I can only give you anecdotal fps values, but emulation ran like 10-20fps faster, just by adding ---optimize</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T08:57:35.818700</ts>
    <user>Timika</user>
    <text>Mostly because simple custom types just become integers and some opaque types are removed.</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T08:58:02.819000</ts>
    <user>Timika</user>
    <text>I wonder how much performance would be gained in a typical CRUD app.</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T09:11:30.819300</ts>
    <user>Gertrude</user>
    <text>The difference between the app I'm working on now in local, vs. the optimize build that gets deployed, is fairly noticeable</text>
  </message>
  <message conversation_id="1131">
    <ts>2019-04-09T09:12:14.819500</ts>
    <user>Gertrude</user>
    <text>I don't have an instrumentation on it, but it's noticeably snappy, only slowed by network access</text>
  </message>
  <message conversation_id="1132">
    <ts>2019-04-09T09:12:30.819800</ts>
    <user>Shantell</user>
    <text>I’m looking forward to read ;D, thank you!</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T09:54:46.822800</ts>
    <user>Inga</user>
    <text>The discovery about flip being removed in 0.19 left me hurting. It leads to the creation of things like this: &lt;https://github.com/pilatch/flip/tree/1.0.0&gt;.

is it really okay to remove a piece such fundamental FP helper simply because it's unknown to people not knowing FP? I think it will lead to people auto-including packages from there along with core wether they end up using it or not, or bringing up the next "lodash" to Elm.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T09:55:54.824700</ts>
    <user>Inga</user>
    <text>Same applies to curry and uncurry, I do not want to have to think about installing those packages when I want to use them, so I'll just install by default in every project.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T09:56:54.826600</ts>
    <user>Inga</user>
    <text>Then it becomes even worse than before because a beginner reading a code base will bump into those functions and not have been introduced to them.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T09:57:34.827400</ts>
    <user>Dede</user>
    <text>As someone who came to Elm from a more imperative tradition, I haven’t felt pain in not having those.  It may be that Haskellers will reinvent Haskell in Elm, but the Lispers will do the same, and etc.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T09:58:27.828500</ts>
    <user>Inga</user>
    <text>well, have you taken the time to consider possible benefits?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T09:58:54.829300</ts>
    <user>Niesha</user>
    <text>The benevolent dictators have decided flip makes codebases harder to read, discussion over.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T09:59:38.831400</ts>
    <user>Sharon</user>
    <text>Evan doesn't remove things from the language without thorough consideration, though...</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T09:59:44.831800</ts>
    <user>Inga</user>
    <text>I'm not arguing to bring it back, I'm just saying it will happen that people will reach for those third-party packages when they need them</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T09:59:47.832000</ts>
    <user>Dede</user>
    <text>Me?  No, there’s far too many people who would like to sell me possible benefits of the one true way for me to assess them all.  I’ve found it comfortable to take Elm as given and work with it as much as possible.  There are places I chafe (setters!!) but this isn’t one of them.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:00:40.832900</ts>
    <user>Dede</user>
    <text>I’m curious — is there a formal place where people make pitches to Evan?  I’m pretty sure Slack isn’t it…. maybe the Discourse?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:02:59.837800</ts>
    <user>Earlean</user>
    <text>The recommendation is to not use `flip` and instead in the rare occasions you might use it to instead write out a function</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:03:09.838000</ts>
    <user>Inga</user>
    <text>To be clear I'm not pitching for anything, nor do I want to argue about Elm's philosophy, I just want to have a feel about your opinions adding this extra complication for the sake of making code "beginner-friendly"</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:03:44.839500</ts>
    <user>Dede</user>
    <text>I love Elm’s small size.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:03:52.840200</ts>
    <user>Inga</user>
    <text>I guess it only becomes a problem if the libraries become popular?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:03:55.840400</ts>
    <user>Dede</user>
    <text>I think that’s an advantage to beginners and advanced developers alike.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:04:09.841200</ts>
    <user>Dede</user>
    <text>(you asked for my opinion ;-)</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:06:10.845300</ts>
    <user>Inga</user>
    <text>The way I see is: we're adding this extra step you have to do when using those "banished complicated functions", and their use will also be shunned upon or discouraged, so we're hinting for you not to use them... BUT...</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:06:23.845700</ts>
    <user>Earlean</user>
    <text>It's not just for beginners, flip is often confusing for people well familiar with it</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:07:07.846700</ts>
    <user>Earlean</user>
    <text>When I see `flip (/)` I must pause and think hard about it, but `\x y -&amp;gt; y / x` requires little thought</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:09:00.850800</ts>
    <user>Kris</user>
    <text>These kinds of discussions are a bit useless, the decision’s been made from above recently, and such things don’t change.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:09:44.852000</ts>
    <user>Inga</user>
    <text>I guess it's aggravated for me that all of those, curry, uncurry and flip are such core pieces for expressing functional programming, and it saddens me to see them taken way
but let me reiterate that I don't want to start a discussion or anything</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:09:56.852700</ts>
    <user>Inga</user>
    <text>It's not like you can't use them if you want to</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:09:59.852800</ts>
    <user>Dede</user>
    <text>Wait, that makes no sense, you’ve definitely come here to start a discussion :wink:</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:11:52.855600</ts>
    <user>Inga</user>
    <text>I don't want to argue or prove a certain point so it doesn't qualify as a discussion, I just wanted to know your viewpoints</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:12:17.856800</ts>
    <user>Earlean</user>
    <text>For 'core pieces' they were used very rarely in Elm code even before they were removed</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:12:19.856900</ts>
    <user>Inga</user>
    <text>so thanks everyone that gave me some feedback</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:14:23.860200</ts>
    <user>Inga</user>
    <text>I actually only have started to know Elm since two days ago so I'm trying to get a feel for how things are</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:14:39.860900</ts>
    <user>Dede</user>
    <text>&lt;@Earlean&gt; is there a formal way for people to make language proposals to the Elm core team?  Or is that not so much of interest?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:16:31.862400</ts>
    <user>Danika</user>
    <text>It's also worth considering that Elm is made for javascript developers, not haskell &lt;@Inga&gt;</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:16:58.862700</ts>
    <user>Danika</user>
    <text>purescript exists if you want some haskell clone on the front end</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:18:01.864500</ts>
    <user>Sharon</user>
    <text>we want *everyone* and all the *folks* to feel welcome, don't we?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:18:11.864900</ts>
    <user>Earlean</user>
    <text>&lt;@Dede&gt; there isn't as far as I know. A post to the Discourse is the best bet</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:18:28.865500</ts>
    <user>Dede</user>
    <text>Awesome, thanks.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:18:43.866400</ts>
    <user>Danika</user>
    <text>Well of course, I just mean from a design decision perspective</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:19:16.868700</ts>
    <user>Teddy</user>
    <text>What &lt;@Earlean&gt; said, its also helpful when making such a proposal to include prior research in the field around the proposal and data that you've collected from the community and your own experiences. Evan highly values that sort of research.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:20:47.871500</ts>
    <user>Earlean</user>
    <text>Yeah the post should show research in to the feature, how it's handled in other languages, and other solutions to the same problem etc</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:21:30.873800</ts>
    <user>Earlean</user>
    <text>This was mentioned in one of Evan's talks</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:28:18.884000</ts>
    <user>Inga</user>
    <text>Elm as a whole seems to have a bunch of niceties that makes it enjoyable to work with, so that's where I'm weighing most of my likeness towards... I do care about having something that works nicely
For instance, the reason why I don't code in Haskell, or Purescript, or any of that is due to the toolchain's complications and slow feedback in general you get throughout the whole development process
Meanwhile with elm-make and the other tooling I get very fast feedback and it feels much more at home for me

I don't think it's helpful to say "just ditch Elm if you disagree with X" or have the narrative of "trying to make X in Elm is bad" because of all of the extra reasons you would choose to work with something.</text>
  </message>
  <message conversation_id="1134">
    <ts>2019-04-09T10:28:28.884400</ts>
    <user>Malinda</user>
    <text>Being such a "small" language is one great feature of Elm.
I use C# at work and I hate the syntax hell we face every day.</text>
  </message>
  <message conversation_id="1134">
    <ts>2019-04-09T10:30:05.888700</ts>
    <user>Niesha</user>
    <text>&amp;gt; For instance, the reason why I don't code in Haskell, or Purescript, or any of that is due to the toolchain's complications and slow feedback in general you get throughout the whole development process
PureScript is quite fast so far. Dunno about slow.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:30:16.889400</ts>
    <user>Inga</user>
    <text>granted I of course trust what the language's creators are doing, otherwise I wouldn't be here in the first place</text>
  </message>
  <message conversation_id="1134">
    <ts>2019-04-09T10:31:15.890600</ts>
    <user>Huong</user>
    <text>PureScript is awesome.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:31:34.891100</ts>
    <user>Antonette</user>
    <text>Said it a bit before, but a way to do away with unnecessary lambdas and their arguments *and* `flip` is to have functions with the arguments flipped and good names:
- `\x -&amp;gt; x / 10` =&amp;gt; `divideBy 10`
- `\x -&amp;gt; x - 3` =&amp;gt; `minus 3`
- etc.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:32:39.892700</ts>
    <user>Inga</user>
    <text>yes &lt;@Antonette&gt; and point taken, between this exchange and your comment there I was able to form an opinion</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:34:58.895500</ts>
    <user>Niesha</user>
    <text>Works for backend too.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:35:27.896100</ts>
    <user>Antonette</user>
    <text>To add a bit on this, one of my own "pains" in Elm compared to Haskell is the lack of typeclasses ; with them we could have optics that compose with `&amp;gt;&amp;gt;` ; but since composing is the main reason optics are interesting, we added lots of composition functions so we could have an idiomatic way to do so.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:37:26.898300</ts>
    <user>Antonette</user>
    <text>So, instead of having it the Haskell way:
```
optionalFromAtoD = lensFromAtoB &amp;gt;&amp;gt; optionalFromBtoC &amp;gt;&amp;gt; prismFromCtoD
```
We can still do:
```
optionalFromAtoD =
    lensFromAtoB
        |&amp;gt; Compose.lensWithOptional optionalFromBtoC
        |&amp;gt; Compose.optionalWithPrism prismFromCtoD
```</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:37:53.898800</ts>
    <user>Antonette</user>
    <text>On the minus side: more functions and boilerplate-y stuff to care about.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:38:13.899300</ts>
    <user>Antonette</user>
    <text>On the plus side: it's kind of a little bit more readable if you squint hard.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:42:39.907100</ts>
    <user>Hoa</user>
    <text>I have a good number of gripes about Elm, but I keep for myself unless asked. :slightly_smiling_face: I will never agree 100% with Evan on everything. As long as the general good feeling about the language survives I’m hanging around here.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:44:20.909400</ts>
    <user>Ashton</user>
    <text>Im beginning to really annoy my Haskell friends with my questions about why custom typeclasses are needed at all. Im about 6,000 LOC into a Haskell project, and so far for me, typeclasses in practice are just having to tediously add `deriving (Eq)` or writing an `instance Show Thing where` for all my types.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:44:47.910200</ts>
    <user>Inga</user>
    <text>99% of the time I disregard "pain points" because I understand it's a different beast, and even before that, the question was raised to bring a core-lib decision to the table (as in, affects the whole) which is not the same as a feature change (e.g. the removal of custom operators, which I don't mind either, but that's once again beside the point)
just to REALLY say once more that I don't want to have anything beyond what was asked, nor I think it's right or wrong</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:46:05.911600</ts>
    <user>Antonette</user>
    <text>Are you sometimes using `do` syntax?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:46:18.911800</ts>
    <user>Antonette</user>
    <text>Or `fmap`?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:46:23.912000</ts>
    <user>Antonette</user>
    <text>Or optics?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:46:34.912200</ts>
    <user>Ashton</user>
    <text>Ive avoided `do` and `fmap`, but I use them when I have to.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:46:42.912400</ts>
    <user>Ashton</user>
    <text>I dont know what optics are. Is that like lenses?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:47:19.912700</ts>
    <user>Antonette</user>
    <text>Yep :wink: lenses are optics.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:47:57.913100</ts>
    <user>Ashton</user>
    <text>The kinds of types I `map` are `Maybe`, `Either`, and `List`. For those I do `List.map` and `Data.Either.Extra.mapRight` like I might in Elm.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:48:41.914000</ts>
    <user>Ashton</user>
    <text>Are you suggesting that typeclasses are much more valuable to codebases that use `do` and `fmap` a lot?</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:49:01.914400</ts>
    <user>Antonette</user>
    <text>They're necessary to `do` syntax and `fmap`.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:49:43.914700</ts>
    <user>Antonette</user>
    <text>`do` syntax relies on the "invisible" type being a `Monad` instance (thus having a `&amp;gt;&amp;gt;=`/`andThen` implementation)</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:50:10.914900</ts>
    <user>Antonette</user>
    <text>`fmap` is the generic `map` that maps over any kind of functor.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:50:57.915100</ts>
    <user>Antonette</user>
    <text>Now, the cool thing with those is that they allow you to not rewrite any functions that rely on the core typeclass functions to provide that functions functionality.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:52:05.915800</ts>
    <user>Dayna</user>
    <text>&lt;@Ashton&gt; What kind of project are you working on? Seems strange that in 6k LOC you didn't have to work with a foreign data format (derive FromJSON with aeson), or had to serialize data for a database (derive FromRow with postgresql), both of which you have to write boilerplate decoders/encoders in Elm for.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:52:06.915900</ts>
    <user>Antonette</user>
    <text>It's a bit less of a pain in Elm since there's less need for monadic acrobatics (like using monad transformer and such), and I agree implementing them might lead developers making quite unreadable codebases.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:53:39.916100</ts>
    <user>Antonette</user>
    <text>The main reason I'd like them sometimes is optics (since I've worked with codebases where models were deeply nested) :wink:</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:54:38.916300</ts>
    <user>Antonette</user>
    <text>But then again I've worked around the main pain point by adding the `Compose` module to `elm-monocle` and it works pretty well for me now.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T10:58:21.917400</ts>
    <user>Charity</user>
    <text>I spent a bunch of time researching the best optimize / compression settings for elm and uglify.  This library is a homegrown bundler that does the basic things that we need to make our app tiny.

The uglify settings are here. This lib is opinionated (uses SASS for ex) and has config for auto-recompile and production bundling. Feel free to use it or use it as a starting point for your bundling needs.

&lt;https://gitlab.com/doanythingfordethklok/ms-pacman/blob/master/lib/script.js#L110&gt;</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:01:48.919300</ts>
    <user>Ashton</user>
    <text>Its a web server, that receives a musical score in the form of a fairly chaotically structured `String`, and then turns it into audio, and continuously diffs and modifies that audio as updated scores come in.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:02:23.920300</ts>
    <user>Ashton</user>
    <text>Im a Haskell scrub, so in hindsight I would have structured the `String` I need to parse better. Everything was pretty ad-hoc as I wanted to include more information.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:02:55.921100</ts>
    <user>Nana</user>
    <text>one neat thing I imagine you could use typeclasses for is so that you don't have to manually "assemble" json decoders/encoders</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:03:00.921300</ts>
    <user>Ashton</user>
    <text>Either way, there are lots of `fromText :: Text -&amp;gt; Either Error Thing` functions in the project, that form a heirarchy that feels very much like a `view` or `update` heirarchy in Elm.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:05:25.921700</ts>
    <user>Nana</user>
    <text>so if you have a "jsonable" typeclass, you could just write a decoder/encoder for each type, and then have a generic function that automatically encodes/decodes any structure</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:06:31.921900</ts>
    <user>Nana</user>
    <text>also, being able to use custom types as keys for Dict/Set would be nice :smile:</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:11:11.922100</ts>
    <user>Ashton</user>
    <text>What do you do when you need to decode something in two different ways in two different contexts?</text>
  </message>
  <message conversation_id="1135">
    <ts>2019-04-09T11:11:54.922300</ts>
    <user>Nana</user>
    <text>no idea (never used haskell/typeclasses :D)</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:14:24.923500</ts>
    <user>Crissy</user>
    <text>Anybody written an algorithm to highlight search terms in text? Given some search string and another string of text, it would break up the text and insert spans with a highlight color in every place where there is a match.</text>
  </message>
  <message conversation_id="1135">
    <ts>2019-04-09T11:15:12.923600</ts>
    <user>Shenita</user>
    <text>`newtype` is one way of doing that using different typeclasses with the same data: &lt;https://wiki.haskell.org/Newtype&gt;</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:16:25.924400</ts>
    <user>Shenita</user>
    <text>you basically wrap the data in a single argument type and then give that wrapper type different typeclass instances</text>
  </message>
  <message conversation_id="1135">
    <ts>2019-04-09T11:16:29.924600</ts>
    <user>Virgie</user>
    <text>some combination of `Regex.find` and `String.slice` would work I think</text>
  </message>
  <message conversation_id="1135">
    <ts>2019-04-09T11:17:00.925200</ts>
    <user>Nana</user>
    <text>Here's mine:
```
highlight : Attribute msg -&amp;gt; String -&amp;gt; String -&amp;gt; Html msg
highlight attribute substring string =
    let
        regex =
            Misc.toRegex substring

        matches =
            Regex.find regex string |&amp;gt; List.map (\match -&amp;gt; span [ attribute ] [ text match.match ])

        rest =
            Regex.split regex string |&amp;gt; List.map text
    in
    span [] (List.Extra.interweave rest matches)
```</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:17:01.925500</ts>
    <user>Crissy</user>
    <text>Indeed. Was hoping someone else might have done the hard work before I write it myself... :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:18:25.925600</ts>
    <user>Nana</user>
    <text>(it's using Regex to get case-insensitivity)</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:19:10.925800</ts>
    <user>Nana</user>
    <text>`Misc.toRegex` looks like this:
```
toRegex : String -&amp;gt; Regex.Regex
toRegex string =
    if string == "" then
        Regex.never

    else
        Regex.fromStringWith { caseInsensitive = True, multiline = False } string |&amp;gt; Maybe.withDefault Regex.never
```</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:19:56.926000</ts>
    <user>Nana</user>
    <text>I check for `string == ""` because that causes a runtime error otherwise!</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:20:41.926200</ts>
    <user>Nana</user>
    <text>let me know if you make any improvements :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:20:55.926400</ts>
    <user>Crissy</user>
    <text>Very nice, thank you Simon.</text>
  </message>
  <message conversation_id="1133">
    <ts>2019-04-09T11:22:51.926600</ts>
    <user>Antonette</user>
    <text>&lt;@Ashton&gt; you just revert to using decoding/encoding primitives just as in Elm ; the difference is that when the transition is obvious from JSON to Haskell and vice-versa, you don't need to write your decoders (thus reducing boilerplate tremendously).</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T11:58:26.927900</ts>
    <user>Ashton</user>
    <text>Thanks for your comments &lt;@Antonette&gt;, its given me an interesting perspective on typeclasses. Regarding your last comment, “…thus reducing boilerplate”. Arent typeclasses a kind of boilerplate?</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T11:59:11.928100</ts>
    <user>Ashton</user>
    <text>Like, `deriving (Eq)` is just not a thing I have to do in Elm. In your json example, its not like I dont have to write a decoder, its just that, Instead of writing it as `decoder =` and then using that value, I have to write an instance of the typeclass.</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T11:59:18.928300</ts>
    <user>Ashton</user>
    <text>Same code in two difference places, as far as I can tell.</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T12:12:03.928600</ts>
    <user>Antonette</user>
    <text>(sorry, I was away for a while :sweat_smile:)</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T12:12:55.928800</ts>
    <user>Antonette</user>
    <text>The thing is, if you're not `deriving (Eq)` you don't get the benefit of being usable with all the functions that need an `Eq` instance...</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T12:13:10.929000</ts>
    <user>Antonette</user>
    <text>...imagine having to re-invent all those functions for all your datatypes... yuck.</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T12:14:00.929200</ts>
    <user>Nana</user>
    <text>&lt;@Ashton&gt; typeclasses ought to always reduce the amount of code
I guess `Eq` is a special case though since Elm has built-in equality checking</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T12:14:12.929400</ts>
    <user>Antonette</user>
    <text>And the reason why you don't have to do this in `Elm` is because everything is natively "equalable"... for better and worse. Try to test if a `Value` is equal to another... (spoiler alert, they always are equal to one another, whatever their content)</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T12:16:30.929600</ts>
    <user>Antonette</user>
    <text>Now, one pain point you can have with `Elm` is that you don't get to make your own `comparable` instances, thus can't use your own types as keys for a `Dict` for example.</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T12:16:56.929800</ts>
    <user>Antonette</user>
    <text>(and now I have to leave from work... will gladly return to this conversation later if you're interested :wink:)</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T13:00:18.930300</ts>
    <user>Nana</user>
    <text>and also if you create your own monad/functor/monoid/whatever you don't have to define `map2`,`map3`,`concat`,`andThen` etc.
although how often do you really do that, besides if you're a package author?</text>
  </message>
  <message conversation_id="1137">
    <ts>2019-04-09T13:05:04.930700</ts>
    <user>Bebe</user>
    <text>&amp;gt; I don't think it's helpful to say "just ditch Elm if you disagree with X" or have the narrative of "trying to make X in Elm is bad" because of all of the extra reasons you would choose to work with something.

this is frequently done in the community. Elm is very niche and targeted to what it does, and if you don't accept that you are in for some frustration.

weigh in the cost of learning this tool for a set of use cases, vs learning another one that is applicable to a broader set of use cases (even if less polished)</text>
  </message>
  <message conversation_id="1136">
    <ts>2019-04-09T13:18:01.931100</ts>
    <user>Bebe</user>
    <text>&lt;@Antonette&gt; I'm not sure the Value equality you mention is right, I just checked this:

```
&amp;gt; a = E.string "banana"
&amp;lt;internals&amp;gt; : E.Value
&amp;gt; b = E.string "phone"
&amp;lt;internals&amp;gt; : E.Value
&amp;gt; a /= b
True : Bool
&amp;gt; (a == b)
False : Bool
&amp;gt; b = E.string "banana"
&amp;lt;internals&amp;gt; : E.Value
&amp;gt; (a == b)
True : Bool
&amp;gt; a /= b
False : Bool
```

Seems to work as expected</text>
  </message>
  <message conversation_id="1137">
    <ts>2019-04-09T13:18:41.931300</ts>
    <user>Bebe</user>
    <text>even with an object, it looks like it did a deep equal?

```
&amp;gt; a = E.object [("banana", E.string "phone")]
&amp;lt;internals&amp;gt; : E.Value
&amp;gt; b = E.object [("banana", E.string "apple")]
&amp;lt;internals&amp;gt; : E.Value
&amp;gt; (a == b)
False : Bool
&amp;gt; a /= b
True : Bool
&amp;gt; b = E.object [("banana", E.string "phone")]
&amp;lt;internals&amp;gt; : E.Value
&amp;gt; (a == b)
True : Bool
&amp;gt; a /= b
False : Bool
```</text>
  </message>
  <message conversation_id="1138">
    <ts>2019-04-09T13:36:08.931500</ts>
    <user>Dede</user>
    <text>I just pushed.  Sooner than feared :wink:</text>
  </message>
  <message conversation_id="1138">
    <ts>2019-04-09T13:36:45.931700</ts>
    <user>Dede</user>
    <text>This push adds a `subscriptions` entry to Descriptors, which should address your immediate question.  It also puts a lot more functionality into `Session` generally.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T14:09:10.932200</ts>
    <user>Antonette</user>
    <text>Maybe it's been reworked since I did that experiment (it was in 0.18), or maybe it was because our objects were more deeply nested ; thanks for updating us, I'll try and replicate your findings with examples more akin to what I had at the time.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T15:53:15.932700</ts>
    <user>Ashton</user>
    <text>Yeah &lt;@Antonette&gt;, but then it just seems to be that languages with a native equality are better.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T15:53:22.932900</ts>
    <user>Ashton</user>
    <text>In my opinion.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T15:55:20.933100</ts>
    <user>Ashton</user>
    <text>I guess Im kind of missing custom dictionary keys. That would be nice. I wonder if theres any problems I am not seeing by just having automatic comparability for custom types.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T15:57:00.933300</ts>
    <user>Antonette</user>
    <text>Here's a question that might help: is `True` greater than or lower than `False`?</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T15:58:42.933500</ts>
    <user>Ashton</user>
    <text>I think that doesnt make sense, but then, isnt that a matter of comparability, not equality?</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:04:13.933700</ts>
    <user>Nana</user>
    <text>&lt;@Antonette&gt; `true &amp;gt; false` and `true + true &amp;gt; true` if you ask JS :wink:</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:06:14.934900</ts>
    <user>Nana</user>
    <text>&lt;@Ashton&gt; comparability is what makes Dict lookups fast, and it's required to make the trees they are based on</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:06:30.935200</ts>
    <user>Leoma</user>
    <text>Re: no more variable shadowing. Would you say :thumbsup: “my code is better as a result”, or :thumbsdown: “it causes just as many problems as it purports to address”?</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:09:12.936500</ts>
    <user>Emilee</user>
    <text>Is there a write-up on what it is trying to address?</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:10:52.937000</ts>
    <user>Carman</user>
    <text>I was already avoiding variable shadowing back in 0.18 after getting bitten by a shadowing bug so the 0.19 changes just meant the compiler enforced my personal style :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:12:14.937700</ts>
    <user>Nana</user>
    <text>it's pretty common for linters to have warnings for shadowing, it's generally seen as bad style</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:12:49.937900</ts>
    <user>Leoma</user>
    <text>The flip side is an “anti-shadowing” bug. That is, with MORE variables in scope, you have a higher likelyhood of accidentally using the wrong variable at a point.

Am I wrong to see that as an advantage of shadowing? I was just bitten by this and id took many days to solve.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:13:04.938100</ts>
    <user>Leoma</user>
    <text>I have never been bitten by a shadowing bug.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:15:31.938400</ts>
    <user>Isaiah</user>
    <text>shadowing variable names is a sign you are doing too much in one function. Many nested case expressions for example: break them into functions. Erlang codebases are a good example of how effective this is. If you are shadowing in the case of matching on a `Maybe/Result`, I often prefix the name with an `m` or `e`</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:15:40.938600</ts>
    <user>Carman</user>
    <text>I also tend to write many small functions rather than large ones with nested `case` and `let ... in` statements so have few variables in scope.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:17:13.939000</ts>
    <user>Carman</user>
    <text>Occasionally I'll use point-free style to avoid having to name an argument that might clash with some other identifier</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:17:52.939200</ts>
    <user>Leoma</user>
    <text>Well, I’m not 100% sure what “too much in one function” means in a pure language.
But I see that refactoring out chucks of code can fix the the problem.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:19:28.940100</ts>
    <user>Nana</user>
    <text>shadowing might not cause bugs for yourself, but it can be confusing for other people to read</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:20:35.941500</ts>
    <user>Isaiah</user>
    <text>Has anyone shared common code between multiple elm applications by listing the directory in `elm.json`'s `source-directories` like so? `"../../Common"`? Does this work?</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:20:46.941600</ts>
    <user>Nana</user>
    <text>and when others recommend against something, Elm forbids it :male-police-officer:</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:22:24.941900</ts>
    <user>Ashton</user>
    <text>Same as what others have said about small scopes. Having two things of the same type in the same scope creates the possibility of mixing them up. One value of each type eliminates this category of error entirely (which is, often not possible, but its my rule of thumb).</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:22:55.942100</ts>
    <user>Leoma</user>
    <text>I guess the way I see it is, if I have `|&amp;gt; (\x -&amp;gt; x + y)` it’s clear to me where I think x and y are coming from. And possibly I want the function inline to remind me of its implementation.
Elm gives me 2 choices. 1 is rename x, where I can accidentally do `|&amp;gt; (x_ -&amp;gt; x + z)`, OR it forces me to refactor out a function where maybe I didn’t want to.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:24:20.942400</ts>
    <user>Velia</user>
    <text>It works, as long as you install the required dépendencies.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:25:57.942600</ts>
    <user>Leoma</user>
    <text>Anyway. Seems I’m a minority in this perspective. That’s cool. I just wanted to see what others thought after having some time with this feature/limitation. :beers:</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:26:45.943000</ts>
    <user>Lorilee</user>
    <text>That’s the approach taken here: &lt;https://github.com/Skinney/elm-git-install&gt;</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:27:52.943400</ts>
    <user>Nana</user>
    <text>I agree it can be awkward sometimes though</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:28:00.943700</ts>
    <user>Isaiah</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:28:24.944200</ts>
    <user>Lindsey</user>
    <text>I wouldn't say mixing up vars is eliminated as a class of errors!  This kind of thing happens for me:
```let x = 5  -- original x value
   x_ = x + fudge -- changed it later!
in 
x + x -- forgot to change x to x_ here.
```</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:30:17.946400</ts>
    <user>Lindsey</user>
    <text>Yes and I hate using that when you are sharing between different repos.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:30:43.947000</ts>
    <user>Lindsey</user>
    <text>What happens is you no longer know what version of the 'common' you are on anymore.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:30:55.947400</ts>
    <user>Lindsey</user>
    <text>Probably the way to go is with git submodules, which I also hate.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:32:08.948800</ts>
    <user>Lindsey</user>
    <text>For instance I might have project A and B both using common.  I change common in order to have a new feature in B, but now I've broken A.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:32:23.949200</ts>
    <user>Nana</user>
    <text>I think you should give `x_` a more descriptive name instead of just appending `_` though</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:32:26.949400</ts>
    <user>Carman</user>
    <text>In general, I think appending a `_` to the end of a variable to get around the shadowing restriction is a poor solution. As you showed, it's still easy to use the wrong one.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:32:36.949800</ts>
    <user>Carman</user>
    <text>Ideally you're instead narrowing your scope, extracting functions, and passing values in as arguments.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:34:06.951400</ts>
    <user>Leoma</user>
    <text>Yes, but then your’e confronted with the hardest part of programming. Naming the function. :cold_sweat:</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:34:21.952000</ts>
    <user>Lindsey</user>
    <text>true true... but that kind of practice is up to old fashioned programmer discipline - its not a problem that shadow elimination solves automatically.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:36:28.953800</ts>
    <user>Isaiah</user>
    <text>I currently have a single (large, 14k loc) application bundle with internal routing (and url changes), but I wonder if breaking parts of it out (e.g. login and registration, redeeming invite codes) into separate applications would give me any huge benefit. Right now, most of the application requires the user to be authenticated, and the login/register pages (along with the internal routing) add non-trivial complexity to both the codebase and the models used. If the server handles most of the routing, and I am able to break some of it out into smaller, single purpose applications that store any shared state in sessionStorage, I wonder how much easier it might be to work with.</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:37:40.953900</ts>
    <user>Carman</user>
    <text>True. Good point. The compiler eliminates the most egregious cases but programmers can still use poor practices* to simulate shadowing, thus bringing back all the associated issues.

_*poor practices - appending `_` is not necessarily bad in all cases, I'm generalizing here_</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:38:26.954400</ts>
    <user>Vilma</user>
    <text>does anyone know how to create a custom fuzzer for strings which does not create empty strings?</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:46:16.954500</ts>
    <user>Millie</user>
    <text>`conditional` was removed, but would be a good fit for 0.18. &lt;https://package.elm-lang.org/packages/elm-community/elm-test/latest/Fuzz#conditional&gt;</text>
  </message>
  <message conversation_id="1139">
    <ts>2019-04-09T16:47:32.954700</ts>
    <user>Millie</user>
    <text>So perhaps `Fuzz.string` and `map` combined to replace empty string values with a constant string</text>
  </message>
  <message conversation_id="1140">
    <ts>2019-04-09T16:51:21.955300</ts>
    <user>Millie</user>
    <text>Or combine/append `Fuzz.char` and `Fuzz.string`</text>
  </message>
  <message conversation_id="1141">
    <ts>2019-04-09T17:29:43.955500</ts>
    <user>Tamra</user>
    <text>Thanks &lt;@Krista&gt; and &lt;@Velia&gt; ! A new patch version has been released that should fix the issue!</text>
  </message>
  <message conversation_id="1142">
    <ts>2019-04-09T18:23:09.956000</ts>
    <user>Augustus</user>
    <text>We've been trying out a monorepo at work with two projects sharing data structures and requests and stuff, it's still in the early stages but is working well so far. There are some problems that arise from the monorepo, like not wanting to deploy app A in CI when only app B's code changed , gitlab has a nice solution where you can set which pipelines to run based on what folders the code changed in.</text>
  </message>
  <message conversation_id="1142">
    <ts>2019-04-09T18:31:25.956200</ts>
    <user>Augustus</user>
    <text>Another alternative I started on previously was a dockerized &lt;http://package.elm-lang.org|package.elm-lang.org&gt; that we could host private packages on, but from the discussion on 0.19 support for elm-github-install it seemed like the core team would hate it</text>
  </message>
  <message conversation_id="1143">
    <ts>2019-04-09T19:39:10.956500</ts>
    <user>Isaiah</user>
    <text>creating packages and git submodules is definitely not what I had in mind. I just wanted an easy way to split a single-page app into multiple apps. It's still one application, just spread across multiple elm bundles.</text>
  </message>
  <message conversation_id="1140">
    <ts>2019-04-09T20:01:56.956700</ts>
    <user>Shantell</user>
    <text>brilliant! I’ll try it today. your work let newbie to be able to write SPA , that’s unbelievable! thanks again!</text>
  </message>
  <message conversation_id="1142">
    <ts>2019-04-09T20:55:38.957800</ts>
    <user>Myrna</user>
    <text>you definitely want a mono-repo approach. </text>
  </message>
  <message conversation_id="1144">
    <ts>2019-04-09T21:43:56.959300</ts>
    <user>Leoma</user>
    <text>Are there any concerns with creating a personal Log module, for example, that exposed `log = Debug.log`, and when it was time to go to production, one just sets `log = always identity`?

Or is Elm implying that the way to do a release is to
a) branch
b) remove all Debug.log statements
c) tag and deploy
?</text>
  </message>
  <message conversation_id="1144">
    <ts>2019-04-09T21:46:47.960100</ts>
    <user>Earlean</user>
    <text>having a personal log module seems like a good solution if you're using `Debug.log` widely</text>
  </message>
  <message conversation_id="1143">
    <ts>2019-04-09T21:48:05.961300</ts>
    <user>Leoma</user>
    <text>Ya, it seems to me that if I ever get to the point where I’m logging too much, or have too many logging statements, I can still easily remove them.</text>
  </message>
  <message conversation_id="1144">
    <ts>2019-04-09T21:51:42.961400</ts>
    <user>Dede</user>
    <text>Thanks for the kind words.  Let me know how it goes.  This was a quick update today, so there may be documentation holes and/or errors :wink:</text>
  </message>
  <message conversation_id="1145">
    <ts>2019-04-09T23:10:52.962100</ts>
    <user>Shantell</user>
    <text>it works! even though I have a long way to go to fully understand what you have done. that’s magic. :rolling_on_the_floor_laughing:</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-09T23:45:52.962400</ts>
    <user>Kenny</user>
    <text>Given this custom type, how could I create a function with this type signature?</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-09T23:47:27.963100</ts>
    <user>Earlean</user>
    <text>&lt;@Kenny&gt; why the nested Maybes?</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-09T23:50:30.966000</ts>
    <user>Kenny</user>
    <text>The extra Maybe might be a bit of a red herring for the question. I have a spot that can optionally take a message that gets fired on some event - that message can then take an optional message that it will fire in its update</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-09T23:54:06.967900</ts>
    <user>Ruthann</user>
    <text>i think that knowing this would help: `NestedMsgs : NestedMsg -&amp;gt; BaseMsg`
then it's a matter of having enough `Maybe.map`s :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-09T23:54:39.968600</ts>
    <user>Earlean</user>
    <text>and some decision about what default to use if you have a `Nothing`</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-09T23:57:56.969000</ts>
    <user>Kenny</user>
    <text>If I had a nothing I would just return a nothing</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-09T23:59:19.970800</ts>
    <user>Earlean</user>
    <text>`(Maybe NestedMsg -&amp;gt; NestedMsg)` if you passed `Nothing` to this function, what value of `NestedMsg` would you return?</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-09T23:59:47.971200</ts>
    <user>Kenny</user>
    <text>&lt;@Ruthann&gt; I don't think I fully understand - to simply convert a NestedMsg to a BaseMsg I was expecting to say NestedMsgs somenestedmsg - I might look more into maybe.map</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-10T00:00:04.971500</ts>
    <user>Ruthann</user>
    <text>```
convertMsg : Maybe (Maybe NestedMsg -&amp;gt; NestedMsg) -&amp;gt; Maybe (Maybe BaseMsg -&amp;gt; BaseMsg)
convertMsg maybeNestedMsg =
    case maybeNestedMsg of
        Just maybeNestedfunction -&amp;gt;
            ??? This is where I got stuck
            -- maybeNestedfunction
            --    &amp;gt;&amp;gt; Maybe.map NestedMsgs
                

        Nothing -&amp;gt;
            Nothing
```</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-10T00:01:10.972600</ts>
    <user>Ruthann</user>
    <text>essentially you're after: `(a -&amp;gt; b) -&amp;gt; (Maybe a -&amp;gt; a) -&amp;gt; (Maybe b -&amp;gt; b)`</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-10T00:01:49.973700</ts>
    <user>Ruthann</user>
    <text>so first i'd solve the simpler problem: `(a -&amp;gt; b) -&amp;gt; ( a -&amp;gt; a ) -&amp;gt; ( b -&amp;gt; b)`</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-10T00:02:09.973900</ts>
    <user>Ruthann</user>
    <text>which i don't know if you can...</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-10T00:02:37.974600</ts>
    <user>Kenny</user>
    <text>&lt;@Earlean&gt; I don't think I have default planned for that - if I had some message that did nothing would that solve the issue?</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-10T00:03:12.975500</ts>
    <user>Ruthann</user>
    <text>if you take the output `(b -&amp;gt; b)`, you'll need something that did `(b -&amp;gt; a)` at a minimum</text>
  </message>
  <message conversation_id="1146">
    <ts>2019-04-10T00:03:27.975800</ts>
    <user>Earlean</user>
    <text>&lt;@Kenny&gt; You probably want to return a `Maybe` in that case</text>
  </message>
  <message conversation_id="1147">
    <ts>2019-04-10T03:13:35.976600</ts>
    <user>Nana</user>
    <text>you could even have your build script replace it automatically :smile:</text>
  </message>
  <message conversation_id="1147">
    <ts>2019-04-10T03:29:25.976900</ts>
    <user>Maida</user>
    <text>You can just use a single codebase and multiple entry points into that codebase. You don’t need to make your life harder by splitting the code into multiple repositories or multiple folders.</text>
  </message>
  <message conversation_id="1147">
    <ts>2019-04-10T03:31:42.977100</ts>
    <user>Maida</user>
    <text>compiling each entry point will give you optimized bundles  with only what is needed to run the functionality that the entry point implements.</text>
  </message>
  <message conversation_id="1147">
    <ts>2019-04-10T03:36:09.977300</ts>
    <user>Maida</user>
    <text>So, instead of having one `Main.elm` you will have `PublicMain.elm` and `PrivateMain.elm` altho, 14kLOC is rather small. I would expect that your gzipped minified bundle is probably bellow 100kb</text>
  </message>
  <message conversation_id="1148">
    <ts>2019-04-10T03:55:39.977600</ts>
    <user>Carrie</user>
    <text>Is there such a possibility? I pass a JS object to the elm file and can use the method of JS object in the elm file</text>
  </message>
  <message conversation_id="1148">
    <ts>2019-04-10T04:04:00.977800</ts>
    <user>Nana</user>
    <text>&lt;@Carrie&gt; no</text>
  </message>
  <message conversation_id="1148">
    <ts>2019-04-10T04:06:56.978100</ts>
    <user>Carrie</user>
    <text>Oh, I see.</text>
  </message>
  <message conversation_id="1148">
    <ts>2019-04-10T04:08:16.979000</ts>
    <user>Nana</user>
    <text>you can read values like Numbers and Strings though
if you want to call a JS function you have to use ports</text>
  </message>
  <message conversation_id="1148">
    <ts>2019-04-10T04:19:24.979500</ts>
    <user>Carrie</user>
    <text>Yes, I just want to use a JS function in elm, but there are too few cases on &lt;https://guide.elm-lang.org/interop/ports.html&gt;. I can't find the way I want to use it.</text>
  </message>
  <message conversation_id="1148">
    <ts>2019-04-10T04:20:54.980100</ts>
    <user>Nana</user>
    <text>here's a basic example I made
&lt;https://ellie-app.com/4RDRLzDsrFDa1&gt;
it's a JS function that waits 1 sec and then returns whatever you sent it</text>
  </message>
  <message conversation_id="1148">
    <ts>2019-04-10T04:24:34.980300</ts>
    <user>Carrie</user>
    <text>Thanks very much</text>
  </message>
  <message conversation_id="1149">
    <ts>2019-04-10T04:52:45.980700</ts>
    <user>Syble</user>
    <text>That's great, it's the first time I see a useful usage of never/Never</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T06:25:34.984300</ts>
    <user>Hoa</user>
    <text>So I’m watching Luke’s talk about custom elements and Elm here: &lt;https://dev.to/lukewestby/talk-when-and-how-to-use-web-components-with-elm-f85&gt;   If I understand correctly I can use the same technique to wrap a straight HTML element with `contenteditable=true`  into a custom element?   From what I read `contenteditable` is starting to be usable for very simply in place editing.  Anybody has experience in that regard ?</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T06:26:39.985500</ts>
    <user>Hoa</user>
    <text>Basically the custom element allows Elm VDOM not to be confused by the changes happening in the content editable element.</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T06:40:19.985600</ts>
    <user>Nana</user>
    <text>what kind of editing are you planning on though? Surely it'll be easier to use any existing rich editor.</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T06:41:21.985800</ts>
    <user>Nana</user>
    <text>and if it's plain text, a textarea should be more reliable, plus no need for a web component</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T06:52:39.986300</ts>
    <user>Lynne</user>
    <text>I am writing my own editor and using custom element + contenteditable</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T06:52:56.986700</ts>
    <user>Lynne</user>
    <text>So far, so good, though handling selection is a pain &lt;@Hoa&gt;</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T06:54:14.986800</ts>
    <user>Nana</user>
    <text>but why? :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T06:54:33.987000</ts>
    <user>Lynne</user>
    <text>because why not?</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T06:55:17.987200</ts>
    <user>Lynne</user>
    <text>I am adding additional logic and DOM elements to the text, so textarea is not suitable by definition</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T07:05:07.987400</ts>
    <user>Nana</user>
    <text>just since there's already so many editors to choose from</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T07:07:45.987600</ts>
    <user>Lynne</user>
    <text>Well, I am not writing yet another WYSIWIG editor and not really sure why you are questioning what I am doing</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T07:08:07.987900</ts>
    <user>Lynne</user>
    <text>You have zero information about my needs</text>
  </message>
  <message conversation_id="1151">
    <ts>2019-04-10T07:09:06.988900</ts>
    <user>Kiana</user>
    <text>hey, I have a question regarding elm-live and proxy prefixes</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T07:09:25.989200</ts>
    <user>Nana</user>
    <text>sorry heh :sweat_smile:</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T07:09:44.989800</ts>
    <user>Kiana</user>
    <text>I need to have to proxy prefixes defined (one for the REST API, and one for the /login endpoint)</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T07:09:52.990100</ts>
    <user>Kiana</user>
    <text>but I can't get it to work</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T07:10:04.990500</ts>
    <user>Kiana</user>
    <text>is there a way to do that? wildcard support or something?</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T07:21:59.991300</ts>
    <user>Lynne</user>
    <text>&lt;@Kiana&gt; I have no experience with `elm-live` myself but the docs mention `-x` and `-y` cmd args. Did you try them?</text>
  </message>
  <message conversation_id="1150">
    <ts>2019-04-10T07:28:52.992100</ts>
    <user>Lynne</user>
    <text>&lt;https://github.com/wking-io/elm-serve/blob/master/lib/elm-reload-server.js#L41&gt;
It seems wildcards are not supported (because it is just using `String.startsWith` to test if an URL should be proxied)</text>
  </message>
  <message conversation_id="1151">
    <ts>2019-04-10T07:29:04.992400</ts>
    <user>Gertrude</user>
    <text>Anyone know of a date/time library that can get the week number from a Time.Posix?</text>
  </message>
  <message conversation_id="1151">
    <ts>2019-04-10T07:29:26.992600</ts>
    <user>Lynne</user>
    <text>`justinmimbs/date`</text>
  </message>
  <message conversation_id="1152">
    <ts>2019-04-10T07:57:03.994600</ts>
    <user>Ismael</user>
    <text>I found 2 Elm example of SPA  (&lt;https://github.com/rtfeldman/elm-spa-example&gt; and this one : &lt;https://github.com/levelhq/level/tree/master/assets/elm&gt;), do you know any other?</text>
  </message>
  <message conversation_id="1152">
    <ts>2019-04-10T08:02:07.994800</ts>
    <user>Allyn</user>
    <text>&lt;https://github.com/ohanhi/elm-shared-state&gt;</text>
  </message>
  <message conversation_id="1152">
    <ts>2019-04-10T08:04:53.994900</ts>
    <user>Ismael</user>
    <text>Nice, thanks</text>
  </message>
  <message conversation_id="1152">
    <ts>2019-04-10T08:06:26.995100</ts>
    <user>Allyn</user>
    <text>You’re welcome. This one is simpler than &lt;https://github.com/rtfeldman/elm-spa-example&gt;, and the principle is documented.</text>
  </message>
  <message conversation_id="1152">
    <ts>2019-04-10T08:11:59.996100</ts>
    <user>Mimi</user>
    <text>I see that &lt;https://github.com/NoRedInk/elm-assets-loader&gt; is deprecated. What do you suggest using for handling assets in Webpack / Elm?</text>
  </message>
  <message conversation_id="1152">
    <ts>2019-04-10T08:13:54.996200</ts>
    <user>Dane</user>
    <text>I often have a central Log module where log.debug serves that purpose. Then I only need to swap one item, if needed. Most often, I end up weighing whether to log them to a service or not, which I think is a good prompt.</text>
  </message>
  <message conversation_id="1153">
    <ts>2019-04-10T08:30:16.996400</ts>
    <user>Hoa</user>
    <text>Days ago I was watching this: &lt;https://www.youtube.com/watch?time_continue=63&amp;amp;v=TWAMr72VaaU&gt;  and wondering how to tackle that in Elm.   At least the editor part,  let’s set aside the Elm block evaluation for now. So to me it seems there’s two kind of editors here: a simple block-level editor where basically let’s you do simple inline formatting (bold, Italics, link) and the code (Elm) editor part - which could really implemented with CodeMirror custom element.   One could argue to use CodeMirror for both block types. Just evaluating possibilities here. The overall environment can be quite easily done with Elm. I have the the basics already written.  Consider this as a project to test out Elm on a real-world UI with some no obvious challenges :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1153">
    <ts>2019-04-10T08:36:42.997300</ts>
    <user>Kiana</user>
    <text>&lt;@Lynne&gt; yes, I've tried those, the problem is that I have two paths that need to be proxied, and share no common prefix</text>
  </message>
  <message conversation_id="1153">
    <ts>2019-04-10T08:36:59.997700</ts>
    <user>Kiana</user>
    <text>I've solved it by actually changing the paths</text>
  </message>
  <message conversation_id="1154">
    <ts>2019-04-10T08:45:59.997900</ts>
    <user>Vilma</user>
    <text>hey &lt;@Millie&gt; I ended up using a list with a generator for the supported characters (I wanted to generate strings which were both non-empty and only had certain characters), using `Fuzz.list`and `Random`</text>
  </message>
  <message conversation_id="1154">
    <ts>2019-04-10T09:08:05.998100</ts>
    <user>Dede</user>
    <text>Here’s my evolving take on the SPA genre:  &lt;https://github.com/jhbrown94/experimental-elm-spa-skeleton/&gt;</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:26:57.998500</ts>
    <user>Kent</user>
    <text>What is your opinion about it?</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:27:27.998900</ts>
    <user>Kent</user>
    <text>sorry, my text is missing...</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:27:46.999100</ts>
    <user>Kent</user>
    <text>The compiler reports that the title function actually has two parameters, but from the way that I am used to reading the function type definition I initially assumed one (i.e. text), but could not understand Elm processed the second (i.e. schema). Is it technically correct to state the following: Elm expands (?) the function signature from [String -&amp;gt; BaseSchemaProperty extras] to
[String -&amp;gt; BaseSchema extras -&amp;gt; BaseSchema extras] at compilation time? Can you help me clarify my confusion.</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:31:07.999200</ts>
    <user>Ismael</user>
    <text>Nice, I like the example on how to redirect to login when not authenticated</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:37:20.001100</ts>
    <user>Hoa</user>
    <text>From what I’ve read from the docs  `type alias` are expanded at compilation time.  That’s why you can’t define a type alias in term of itself, compiler would end up with a infinite recursion</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:38:49.002400</ts>
    <user>Hoa</user>
    <text>So I believe you are correct in your assumption: the function signature  gets expanded and gains a parameter</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:42:43.004300</ts>
    <user>Huong</user>
    <text>Regardless of type alias expansion, consider currying. Whenever you write `add : Int -&amp;gt; Int -&amp;gt; Int`, that's the exact same thing as writing `add : Int -&amp;gt; (Int -&amp;gt; Int)`, though you can still write `add a b` as the function head</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:45:15.004400</ts>
    <user>Timika</user>
    <text>How did you get Slack to format your snippet as Elm? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:46:50.004800</ts>
    <user>Kent</user>
    <text>I told it was Haskell...using the + button Code or Snippet</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:47:27.005000</ts>
    <user>Kent</user>
    <text>...elm and Haskell look similar</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:48:01.005200</ts>
    <user>Timika</user>
    <text>Ah, I mistook the “Elm snippet” as actual, real Elm highlighting. But it was the name you gave it. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1155">
    <ts>2019-04-10T09:48:20.005400</ts>
    <user>Timika</user>
    <text>I almost got a bit excited that Slack acknowledged Elm :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1156">
    <ts>2019-04-10T09:59:36.005600</ts>
    <user>Lynne</user>
    <text>I use `style-loader` during development and `mini-css-extract-plugin` for prod build. Plus `html-webpack-plugin` which bakes everything into an HTML page</text>
  </message>
  <message conversation_id="1156">
    <ts>2019-04-10T10:03:36.005800</ts>
    <user>Mimi</user>
    <text>I’ll check that thanks!</text>
  </message>
  <message conversation_id="1156">
    <ts>2019-04-10T10:22:21.006100</ts>
    <user>Nana</user>
    <text>maybe something like Slatejs for the text blocks and CodeMirror for the code</text>
  </message>
  <message conversation_id="1156">
    <ts>2019-04-10T10:23:04.006300</ts>
    <user>Dede</user>
    <text>At the moment, it won't properly update the URL when that redirect happens.  I'll fix that eventually but it's not the most critical thing on the list :wink:</text>
  </message>
  <message conversation_id="1156">
    <ts>2019-04-10T10:23:08.006500</ts>
    <user>Nana</user>
    <text>or if you want to get really fancy, Monaco, the editor part of VSCode, is available as a package :smile:</text>
  </message>
  <message conversation_id="1156">
    <ts>2019-04-10T10:23:56.006800</ts>
    <user>Nana</user>
    <text>&lt;https://microsoft.github.io/monaco-editor/index.html&gt;</text>
  </message>
  <message conversation_id="1156">
    <ts>2019-04-10T10:24:51.007000</ts>
    <user>Nana</user>
    <text>presumably it'd be possible to use the VSCode Elm plugin with it, probably a lot of work though</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T10:49:55.007500</ts>
    <user>Hoa</user>
    <text>Didn’t know Monaco. It is indeed a possibility :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1158">
    <ts>2019-04-10T14:04:28.008100</ts>
    <user>Mimi</user>
    <text>Hey Sergey, I'm still not sure how you reference images from inside the elm app. Could you please elaborate a bit more?</text>
  </message>
  <message conversation_id="1158">
    <ts>2019-04-10T14:37:13.008700</ts>
    <user>Mimi</user>
    <text>~I mean do you have any mechanism to fingerprint the images? Or do you reference them without any added digest to the filename~ Opened a thread in Discourse &lt;https://discourse.elm-lang.org/t/assets-fingerprinting-with-webpack-and-elm/3466&gt; (edited)</text>
  </message>
  <message conversation_id="1158">
    <ts>2019-04-10T14:37:17.008900</ts>
    <user>Mimi</user>
    <text>~I guess I should have added that I'd like the images to be fingerprinted (&lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1554898319996100&gt;)~ Opened a thread in Discourse &lt;https://discourse.elm-lang.org/t/assets-fingerprinting-with-webpack-and-elm/3466&gt;</text>
  </message>
  <message conversation_id="1159">
    <ts>2019-04-10T16:43:29.010400</ts>
    <user>Alicia</user>
    <text>we wrote a webpack plugin that looks in our compiled JS for image paths and rewrites them to `/path/to/img.ext?&amp;lt;the hash&amp;gt;`</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:02:59.019800</ts>
    <user>Yang</user>
    <text>I have an issue that is more on the algorithmic side: given a list which contains a variable nr of numbers `list = [ 1, 2, -4, 10]`  i want to be able to solve the following system of 2 equations by algorithm. I can do this on paper but i dont know how to do it in elm.

```
x0 + 1   =   x1 + 2   =   x2 - 4   =   x3 + 10
x0 + x1 + x2 + x3 = 0
```
the api i imagine being something like:
solve [ 1, 2 -4, 10 ] == [ x0, x1, x2, x3 ]
I don't know the actual solutions, since this is a made up example.. but in the resulting list - i want to have the corresponding solutions in the proper order.
note the term `x0 + 1` is formed from the first element of the given list. So 1 and x0 are related - x0 being the first in the resulting list.

I'm quite confused about how to approach this problem. how to even represent something like x0 in elm? Any insights into how to approach this? Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:08:23.020900</ts>
    <user>Nana</user>
    <text>&lt;@Yang&gt; don't know about the equation but couldn't that just be a function like `List Float -&amp;gt; List Float` ?</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:12:25.023500</ts>
    <user>Yang</user>
    <text>yep.
`solve: List Float -&amp;gt; List Float `
or
`solve: List Rational -&amp;gt; List Rational`
I plan to move floats to rationals and back if i observe precision problems.</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:12:27.023600</ts>
    <user>Nana</user>
    <text>hang on :thinking_face: wouldn't the solution always just be that xN is the inverse?</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:13:11.024000</ts>
    <user>Yang</user>
    <text>not sure what you mean at this point</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:15:08.025300</ts>
    <user>Nana</user>
    <text>or wait nvm :sweat_smile:</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:15:19.025600</ts>
    <user>Yang</user>
    <text>let me take a look again. something is fishy here :))</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:15:42.026300</ts>
    <user>Kris</user>
    <text>You’re looking for solving a system of equations, it looks like </text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:15:50.026600</ts>
    <user>Kris</user>
    <text>&lt;https://en.m.wikipedia.org/wiki/Gaussian_elimination&gt; is the standard way.</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:18:45.030000</ts>
    <user>Yang</user>
    <text>yep, the issue is that to create the adjency matrix.. i need to organize this x0, x1.. and get their coefficients. But that process alone is something i don't know how to approach. How to get to the coefficients part? How i would know that x0 has coeficient 1?  or 10? on paper is easy.. you can see the coeficients. Here in elm i dont know how to even sum it up.</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:18:46.030100</ts>
    <user>Kris</user>
    <text>Variable size matrices are a pain to work with in elm though.</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:19:43.031100</ts>
    <user>Kris</user>
    <text>Do you need to parse the equation from plain text? That _is_ a pain </text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:21:58.033200</ts>
    <user>Yang</user>
    <text>no actually. this is part of a system i am building.. and if i find the solutions .. i have what i need to move forward. I derived that equation form the system constraints. Is not text based.</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:31:27.034500</ts>
    <user>Velia</user>
    <text>Really interesting question and answer:

"Is it possible to write a package where you can construct a `Decoder a` and a function `a -&amp;gt; Encode.Value` all at once, without having to repeat yourself when specifying the JSON structure?"

&lt;https://www.reddit.com/r/elm/comments/bbk6hb/interesting_puzzle_elm_decoders_and_encoders/?utm_medium=android_app&amp;amp;utm_source=share&gt;</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:31:31.034800</ts>
    <user>Yang</user>
    <text>got an idea. Gonna try to represent it in elm as: `type Var = Var Index (Maybe Float)` Where `Var 1 Nothing` is x1 and is unsolved.</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:40:13.036000</ts>
    <user>Kris</user>
    <text>&lt;@Velia&gt; those are known as bidirectional parsers</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:41:08.036200</ts>
    <user>Velia</user>
    <text>Thanks for the pointer :+1:</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:56:00.036700</ts>
    <user>Jae</user>
    <text>A package exists that does this but it hasn’t been upgraded to 0.19 &lt;https://package.elm-lang.org/packages/jamesmacaulay/elm-json-bidirectional/latest/&gt;</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:56:59.036900</ts>
    <user>Velia</user>
    <text>Oh nice, never noticed it. Thanks!</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:57:16.037100</ts>
    <user>Raylene</user>
    <text>&lt;https://gist.github.com/miniBill/cf1698087a9dacaf7c49c60d972ecdf2&gt;</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:57:27.037300</ts>
    <user>Raylene</user>
    <text>My module works for 0.19</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:57:47.037500</ts>
    <user>Velia</user>
    <text>Is it that useful in practice once you are used to them from your experience?</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T17:59:34.037700</ts>
    <user>Velia</user>
    <text>&lt;@Raylene&gt; yes it's cool, that's what started the discussion: &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1554931887034500&gt;</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T18:03:16.038000</ts>
    <user>Raylene</user>
    <text>Yeah, the package Martin linked is very similar. Mine also has support for ADTs tho (something I haven't found elsewhere).

The key insight was that to support them you need to ask the user for a destructor (for example a destructor for `Result x y` is `(x-&amp;gt;a) -&amp;gt; (y-&amp;gt;a) -&amp;gt; Result x y -&amp;gt; a`)</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T18:05:48.038200</ts>
    <user>Raylene</user>
    <text>And the types sometimes get gnarly in the implementation (again, in particular for ADTs), but it's one of those "it compiles it works" areas.

I'm particularly proud of the `recursive` method signature</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T18:09:00.038600</ts>
    <user>Raylene</user>
    <text>Also, the same method can generate CRUD forms and type descriptions, but it does require yet another destructor (identical to the first, but Elm lacks hkp)</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T18:09:53.038800</ts>
    <user>Raylene</user>
    <text>Although I guess I could avoid the lack of hkp by using tuples as the `a` in the example above :thinking_face:</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T18:10:06.039000</ts>
    <user>Raylene</user>
    <text>I definitely must publish this</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T18:10:22.039200</ts>
    <user>Kris</user>
    <text>What's HKP?</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T18:12:44.039400</ts>
    <user>Raylene</user>
    <text>Higher Kindred Polymorphism, sorry.
Say that the type above was `Dest a`. I actually need `forall a . Dest a` to use it for forms and for encoders without calculating more than necessary, although I might do without :thinking_face:</text>
  </message>
  <message conversation_id="1157">
    <ts>2019-04-10T19:38:47.039800</ts>
    <user>Kris</user>
    <text>Ah, right, got it.</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:16:30.040400</ts>
    <user>Kimiko</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:30:50.041100</ts>
    <user>Lesli</user>
    <text>How do I find the docs for Elm Html 5.0.0 lib? Docs were wiped for some reason &lt;https://package.elm-lang.org/packages/evancz/elm-html/latest/Html-Events&gt;</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:32:03.041900</ts>
    <user>Earlean</user>
    <text>&lt;@Lesli&gt; those probably aren't the docs your looking for. are you working on an old Elm project?</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:32:51.043000</ts>
    <user>Lesli</user>
    <text>Yep working on an Elm 18 project. Want to check targetValue usage in Html.Events. 4.0.0 docs are there but use Signal as an example. Which doesn't seem right.</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:33:06.043200</ts>
    <user>Earlean</user>
    <text>those are docs for a package for Elm 0.17, which is ~5yrs old now</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:33:26.043800</ts>
    <user>Lesli</user>
    <text>That's the confusing thing about all Elm docs..</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:33:28.044000</ts>
    <user>Earlean</user>
    <text>&lt;https://package.elm-lang.org/packages/elm-lang/html/2.0.0/&gt; is Elm 0.18 docs</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:34:26.044800</ts>
    <user>Lesli</user>
    <text>Thank you, but I'm not sure how you deduced that? What you search terms were or how did you navigate the docs to that page? That info seems completely hidden to me</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:36:18.046200</ts>
    <user>Earlean</user>
    <text>You can get to Elm 0.18 docs via google searches or by going directly to the package url. But they aren't available via the &lt;https://package.elm-lang.org/&gt; index</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:37:09.047100</ts>
    <user>Earlean</user>
    <text>You can search for Elm 0.18 docs at &lt;https://dmy.fr/elm-0.18-packages/&gt;</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:37:20.047600</ts>
    <user>Kris</user>
    <text>elm-lang stuff is 0.18.</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:38:14.048500</ts>
    <user>Lesli</user>
    <text>Is there a reason why that is not advertised on the pages themselves? "Welcome to Elm 0.18 docs"</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:39:01.049100</ts>
    <user>Lesli</user>
    <text>It would be nice if there was an Elm lang dropdown on the docs page for example</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:40:52.049700</ts>
    <user>Earlean</user>
    <text>it certainly would be nice.</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:41:52.050500</ts>
    <user>Earlean</user>
    <text>It's a known issue, but there hasn't been any progress on that.</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:41:58.050700</ts>
    <user>Lesli</user>
    <text>At least one of those those two would help identify the Elm version the docs are for :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:42:12.051000</ts>
    <user>Lesli</user>
    <text>Gotcha, thanks</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:44:36.052500</ts>
    <user>Earlean</user>
    <text>Evan's development process doesn't prioritise reducing latency of responding to issues eg. &lt;https://github.com/elm/package.elm-lang.org/pull/285&gt;</text>
  </message>
  <message conversation_id="1160">
    <ts>2019-04-10T20:46:18.053800</ts>
    <user>Earlean</user>
    <text>Instead it prioritises overall throughput, which is frustrating but works pretty well</text>
  </message>
  <message conversation_id="1161">
    <ts>2019-04-11T04:11:18.056500</ts>
    <user>Emilee</user>
    <text>hey, does anyone know what elm-xref considers an entrypoint? any `main` function in a module?</text>
  </message>
  <message conversation_id="1161">
    <ts>2019-04-11T04:40:29.056700</ts>
    <user>Huong</user>
    <text>yep</text>
  </message>
  <message conversation_id="1161">
    <ts>2019-04-11T04:41:07.056900</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/zwilias/elm-xref/blob/master/elm/Main.elm#L146-L158&gt;</text>
  </message>
  <message conversation_id="1161">
    <ts>2019-04-11T04:41:31.057100</ts>
    <user>Huong</user>
    <text>it also insists that the `main` be exposed, which isn't entirely correct now that I think about it</text>
  </message>
  <message conversation_id="1162">
    <ts>2019-04-11T05:13:10.057300</ts>
    <user>Lynne</user>
    <text>Hey Riccardo. I did not realize that you wanted to version images as well. On this I have an insight. My CSS and JS files have content hash in their name but to apply the same technique to images you will probably need to load manifest JSON into your app via flags and take paths from it.</text>
  </message>
  <message conversation_id="1162">
    <ts>2019-04-11T05:15:43.057500</ts>
    <user>Lynne</user>
    <text>&lt;https://webpack.js.org/concepts/manifest&gt;</text>
  </message>
  <message conversation_id="1162">
    <ts>2019-04-11T05:17:38.057800</ts>
    <user>Emilee</user>
    <text>thanks for the quick reply :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1163">
    <ts>2019-04-11T08:55:27.058700</ts>
    <user>Sharri</user>
    <text>for a moment I thought jessta was talking about a garbage collector</text>
  </message>
  <message conversation_id="1162">
    <ts>2019-04-11T09:07:39.058900</ts>
    <user>Lynne</user>
    <text>A bullet-proof way to verify if you are looking to the correct package is to browse its source and look into `elm-package.json` (for versions &amp;lt;= 0.18). You will see the Elm version there. If you see no `elm-package.json` but `elm.json`, then it is certainly 0.19.</text>
  </message>
  <message conversation_id="1164">
    <ts>2019-04-11T10:02:19.060200</ts>
    <user>Dayna</user>
    <text>Can you have multiple Elm bundles share a single Elm runtime? I'm asking in regards of using Elm inside a React application and I wouldn't want every widget to ship it's own Elm runtime</text>
  </message>
  <message conversation_id="1164">
    <ts>2019-04-11T10:09:04.061600</ts>
    <user>Carman</user>
    <text>Yes I think they do if you compile them at the same time like:
```
elm make src/Main1.elm src/Main2.elm src/Main3.elm
```</text>
  </message>
  <message conversation_id="1165">
    <ts>2019-04-11T10:26:52.063700</ts>
    <user>Vallie</user>
    <text>I've managed, accidentally, to write some code (78 lines) which crashes the elm make (locks up and gobbles memory until I kill it in Task Manager). I don't want to put it in Ellie in case it does the same to her. Is this a good place to post it or is there somewhere better?</text>
  </message>
  <message conversation_id="1165">
    <ts>2019-04-11T10:29:03.064700</ts>
    <user>Nana</user>
    <text>&lt;@Vallie&gt; Good thinking. I think Ellie no longer does any server compilation, so I think it should be safe, perhaps best to get a second opinion first though :smile:</text>
  </message>
  <message conversation_id="1165">
    <ts>2019-04-11T10:29:58.064900</ts>
    <user>Huong</user>
    <text>It does do server compilation - client side compilation was rolled back some time before the 0.19 release</text>
  </message>
  <message conversation_id="1165">
    <ts>2019-04-11T10:31:21.065100</ts>
    <user>Nana</user>
    <text>ah :+1:</text>
  </message>
  <message conversation_id="1165">
    <ts>2019-04-11T10:35:34.065300</ts>
    <user>Vallie</user>
    <text>So NOT Ellie, but here or in elm-dev or even elm-ui as it does involve elm-ui.</text>
  </message>
  <message conversation_id="1165">
    <ts>2019-04-11T10:44:28.065500</ts>
    <user>Huong</user>
    <text>I think it makes sense to try and drill this down to an SSCCE with some help from the folks in &lt;#C4F9NBLR1|elm-ui&gt;, and then log a bug on elm/compiler. It's quite likely that the minimal example won't need elm-ui, so that would be great!</text>
  </message>
  <message conversation_id="1165">
    <ts>2019-04-11T10:46:50.065700</ts>
    <user>Vallie</user>
    <text>OK. I'll hide it away in elm-ui as I'm pretty sure my code is bad too. But I wasn't able to achieve the crash without it!</text>
  </message>
  <message conversation_id="1166">
    <ts>2019-04-11T12:26:30.067500</ts>
    <user>Fransisca</user>
    <text>Is there a way to instruct the compiler to preserve comments?  I'm thinking of something like JSDoc's `@license` that preserves any comments that include that term.  Useful for copyright statements in generated JS.</text>
  </message>
  <message conversation_id="1166">
    <ts>2019-04-11T12:30:59.067600</ts>
    <user>Isaiah</user>
    <text>Bundle size wasn't the issue I was addressing here (the bundle size is under 50kb), but code complexity and nesting of sum types.</text>
  </message>
  <message conversation_id="1166">
    <ts>2019-04-11T12:43:06.069200</ts>
    <user>Augustus</user>
    <text>&lt;@Fransisca&gt; nothing like that currently, I've used shell scripts or the webpack banner plugin for that before</text>
  </message>
  <message conversation_id="1166">
    <ts>2019-04-11T12:47:55.069800</ts>
    <user>Fransisca</user>
    <text>Thanks, &lt;@Augustus&gt;; will do</text>
  </message>
  <message conversation_id="1165">
    <ts>2019-04-11T13:07:06.069900</ts>
    <user>Maida</user>
    <text>&lt;@Isaiah&gt; in that case it might be more of an issue of code layout.</text>
  </message>
  <message conversation_id="1165">
    <ts>2019-04-11T13:08:06.070100</ts>
    <user>Maida</user>
    <text>Anyways, elm allows for easy refactoring. You can continuously improve your source code.</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:02:37.001300</ts>
    <user>Bret</user>
    <text>are there any functions or ways to terminate the folding of a list or array early</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:07:39.005100</ts>
    <user>Bret</user>
    <text>specifically I have an array of 126 `(Int, Int)`s that I know is sorted ascending (both `Int`s happen to be sorted this way); I have a function that `Array.foldl`s through, searching for the first `Int` that is larger than a certain value. once i find it, i can terminate the fold early and return the accumulator, but I don’t see any such function in `Array` or `Array.Extra`</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:07:59.005600</ts>
    <user>Bret</user>
    <text>or the `List` or `List.Extra` modules either for that matter</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:09:01.006800</ts>
    <user>Bret</user>
    <text>do I have to implement my own left fold that can terminate early? I could do that with `List` easily, but `Array`??</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:09:49.007600</ts>
    <user>Bret</user>
    <text>Maybe I’m early-optimizing but I think it’s wasteful to fold through the whole `Array` even if it’s only 126 elements</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:11:15.008300</ts>
    <user>Earlean</user>
    <text>&lt;@Bret&gt; are you looking for &lt;https://package.elm-lang.org/packages/elm-community/list-extra/latest/List-Extra#find&gt; ?</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:12:28.009300</ts>
    <user>Bret</user>
    <text>Yeah I do random lookups so I’d like to keep the data structure as an `Array`</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:14:06.010000</ts>
    <user>Bret</user>
    <text>&lt;@Earlean&gt; presumably that’s exactly what I need, but for `Array` :sweat_smile:</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:18:46.011600</ts>
    <user>Bret</user>
    <text>I’m looking at the source and it looks like `Array` is implemented in `Native.Array` (makes sense) so I don’t think there’s any pure elm way to implement this</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:18:58.012000</ts>
    <user>Bret</user>
    <text>possibly a feature request?</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:28:08.013600</ts>
    <user>Velia</user>
    <text>The array implementation author &lt;@Patricia&gt; told about adding it in his "De-throning the list": &lt;https://dev.to/skinney/de-throning-the-list-part-sc4k-4e3n&gt; (see "I would add `find` for all three collections. "). But I cannot find any reference why it's not already there... I am pretty sure to have read a discussion about it at some point though:thinking_face:</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:52:07.016500</ts>
    <user>Bret</user>
    <text>interesting. he says:

`List` and `Array` has a length function, `Set` has size. This is likely due to the fact that `Set` is a thin abstraction on top of `Dict` and so has just copied the name. I would rename `Set.size` to `Set.length` out of consistency if nothing else.

I’d do the opposite. I’d rename them `List.size` and `Array.size`. `size` is a more general concept that applies to more structures than `length`</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T02:53:57.017300</ts>
    <user>Bret</user>
    <text>I heard &lt;@Patricia&gt; on the elm town podcast. Very interesting listen about his rewrite of the elm data structures.</text>
  </message>
  <message conversation_id="1168">
    <ts>2019-04-12T02:56:23.018200</ts>
    <user>Myrna</user>
    <text>is `elm town podcast` a website or online resource?</text>
  </message>
  <message conversation_id="1167">
    <ts>2019-04-12T03:00:29.018500</ts>
    <user>Velia</user>
    <text>This one I guess: &lt;https://elmtown.simplecast.fm/elm-019-improved-collections-robin-heggelund-hansen&gt; ?</text>
  </message>
  <message conversation_id="1168">
    <ts>2019-04-12T03:00:51.018900</ts>
    <user>Myrna</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1168">
    <ts>2019-04-12T03:01:04.019200</ts>
    <user>Myrna</user>
    <text>one question, if I want to use elm to implement a simple CLI tool, what kind of packages I will need?</text>
  </message>
  <message conversation_id="1168">
    <ts>2019-04-12T03:01:50.019400</ts>
    <user>Velia</user>
    <text>I know about this one: &lt;https://discourse.elm-lang.org/t/introducing-elm-cli-options-parser-for-building-type-safe-clis/1639&gt;</text>
  </message>
  <message conversation_id="1168">
    <ts>2019-04-12T03:02:27.019600</ts>
    <user>Velia</user>
    <text>See this `grep` example: &lt;https://github.com/dillonkearns/elm-cli-options-parser/blob/master/examples/src/Grep.elm&gt;</text>
  </message>
  <message conversation_id="1168">
    <ts>2019-04-12T03:03:44.019900</ts>
    <user>Myrna</user>
    <text>Thanks!!</text>
  </message>
  <message conversation_id="1168">
    <ts>2019-04-12T03:12:24.020200</ts>
    <user>Velia</user>
    <text>Size can be ambiguous (think unicode characters strings for example).</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:15:47.021200</ts>
    <user>Emilee</user>
    <text>interesting. `Svg.use` does not let me use `Html.Attributes.href`</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:16:07.021700</ts>
    <user>Emilee</user>
    <text>it crashes at runtime because it is a "read-only value"</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:19:01.022400</ts>
    <user>Emilee</user>
    <text>okay, this is purely in vdom, and not in the dom itself, so i guess elm just doesn't support svg2 yet</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:26:57.022800</ts>
    <user>Emilee</user>
    <text>crashing at runtime is not very nice though</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:30:29.023000</ts>
    <user>Emilee</user>
    <text>&lt;https://ellie-app.com/5fdNW543g8Ka1&gt;</text>
  </message>
  <message conversation_id="1170">
    <ts>2019-04-12T05:30:31.023100</ts>
    <user>Huong</user>
    <text>Creating "unacceptable" dom structures in the vdom is one of the easier ways of getting a runtime crash, at the moment. I'm kind of hoping someone will eventually create some sort of safe layer around the lower level elm/html and elm/svg libraries. It's a pretty hard problem though, and different browsers having different definitions of what constitutes "acceptable" makes this just that much harder</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:31:02.023300</ts>
    <user>Emilee</user>
    <text>it's not a browser problem in this case</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:31:11.023500</ts>
    <user>Emilee</user>
    <text>the code crashes in the vdom layer as far as i can tell</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:31:24.023700</ts>
    <user>Huong</user>
    <text>Yeah, while trying to turn the vdom into real dom</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:31:24.023900</ts>
    <user>Emilee</user>
    <text>and it also crashes on browsers that support the property i'm trying to set</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:31:45.024100</ts>
    <user>Emilee</user>
    <text>to be precise: on browsers that *only* support the property i'm trying to set, not the deprecated one</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:33:57.024300</ts>
    <user>Emilee</user>
    <text>no you're right, it crashes when trying to set the attribute</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:34:16.024500</ts>
    <user>Emilee</user>
    <text>but why is it doing that with `domNode[attr]` instead of `domNode.setAttribute(attr, ...)` ?</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:35:13.024800</ts>
    <user>Huong</user>
    <text>because `Html.href` is a property, not an attribute</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:35:24.025000</ts>
    <user>Huong</user>
    <text>&lt;https://ellie-app.com/5fdS28jmXPBa1&gt; gives you the behaviour you'r elooking for, I think</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:36:27.025200</ts>
    <user>Emilee</user>
    <text>i see. `href` is both an attribute and a property, technically, right? but if it's (understandably) coded as a property in `Html.Attributes` i can see why this crashes</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:36:30.025400</ts>
    <user>Emilee</user>
    <text>good to know, thank :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:37:09.025600</ts>
    <user>Huong</user>
    <text>In html yep, in svg it's a writable attribute, but a readonly property, apparently :smile:</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:37:11.025800</ts>
    <user>Emilee</user>
    <text>and yes, I agree there should be a safer layer around the vdom. it's not super dangerous to crash in the view function, but it still kind of betrays the "no runtime errors" promise of elm^^</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:37:52.026000</ts>
    <user>Emilee</user>
    <text>also, props to the elm runtime code for being actually readable XD</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:38:01.026300</ts>
    <user>Huong</user>
    <text>the hard thing here is that stuff like `input [ type_ "date" ] []` can crash in some browsers, and work perfectly fine for others</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:38:46.026500</ts>
    <user>Huong</user>
    <text>I attempted a safe layer at some point, but the combination of "these specs are really complex" and "browsers do weird stuff" made me give up</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:42:21.026700</ts>
    <user>Emilee</user>
    <text>hmm, what's more logical to bundle up this little extension... `Svg.Extra.Attributes` or `Svg.Attributes.Extra`?^^</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:43:12.026900</ts>
    <user>Emilee</user>
    <text>or i could just have a project-specific toplevel and just `Svg.Attributes` below it, that'd work too, especially if i at some point need a package that exposes one of the other module names</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:43:52.027100</ts>
    <user>Huong</user>
    <text>Personally, I'd go for `svg-extra` and `Svg.Extra(.*)`, assuming it would be more than just that `href` function :smile:</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:44:36.027300</ts>
    <user>Emilee</user>
    <text>right now it's just gonna live in the project i'm working on, and it's only the one function. but I like keeping "platform extensions/fixes" separate from the actual code</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:44:59.027500</ts>
    <user>Emilee</user>
    <text>the same reason I have a `toCssString` for `elm-ui` colors in an extra module^^</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:47:00.027800</ts>
    <user>Huong</user>
    <text>makes sense!</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:47:34.028000</ts>
    <user>Huong</user>
    <text>our code base does `Html.Extra` and `Html.Attributes.Extra`, and it trips me up, for some reason</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:48:00.028300</ts>
    <user>Huong</user>
    <text>on the other hand, there's precendent for it</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:48:22.028500</ts>
    <user>Huong</user>
    <text>elm-community/json-extra does `Json.Decode.Extra` and `Json.Encode.Extra` :thinking_face:</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:51:11.028700</ts>
    <user>Emilee</user>
    <text>hmm^^</text>
  </message>
  <message conversation_id="1169">
    <ts>2019-04-12T05:51:57.028900</ts>
    <user>Emilee</user>
    <text>Also it turns out that firefox *does* actually still support `xlink:href`, so I could've ignored this whole weirdness^^ but it's still nice to follow the current standard :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:23:21.033300</ts>
    <user>Nana</user>
    <text>thinking how to make an API with lots of options, where some are optional and others are not :thinking_face:
it'd be really nice if the old extensible records were still in, then I could have done something like:
```
type alias Options =
  { foo : String --required
  , bar : Maybe String --optional
  }

defaults = { bar = Nothing }
```
and then you would use it like:
```
Foo.view {Foo.defaults | foo = "foo"}
```
that means you would get a type error if you didn't specify all required options, but the optional ones you could leave out</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:24:03.033500</ts>
    <user>Danika</user>
    <text>You can't do this anymore?</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:24:24.034000</ts>
    <user>Danika</user>
    <text>Oh wait I can see why</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:24:50.034700</ts>
    <user>Nana</user>
    <text>no, you're not allowed to change the type of a record - it was removed to enable easier garbage collection in the future</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:29:10.043700</ts>
    <user>Danika</user>
    <text>```
type alias Required =
  { a
  | foo : String
  }

type alias Optional a =
  { a
  | bar : Maybe String
  }

type alias Foo =  Optional Required

defaults = { bar = Nothing }

withDefault : Required -&amp;gt; Foo
withDefault req =
  { defaults | req }
```

Does this work, or something similar?</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:29:16.044100</ts>
    <user>Nana</user>
    <text>I guess I could achieve the same thing by having my function accept two records, one with the required stuff and the other with optional stuff, and expose a default record for the optional ones</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:30:08.045700</ts>
    <user>Danika</user>
    <text>i dont think `{ defaults | req }` is valid syntax though</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:31:54.047100</ts>
    <user>Nana</user>
    <text>:thinking_face:</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:40:21.052400</ts>
    <user>Jin</user>
    <text>&lt;@Nana&gt; You might want to look how the generated code for &lt;https://package.elm-lang.org/packages/dillonkearns/elm-graphql/4.2.0/&gt; handles optional arguments. I’m AFK right now, so maybe best look at the examples.</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:40:55.052600</ts>
    <user>Kenya</user>
    <text>&lt;@Nana&gt; You could have `defaults : Required -&amp;gt; Optional Required`, and then have `Foo.view (Foo.defaults { foo = "abc" } |&amp;gt; Foo.setBar "123")`. Would that help?</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:43:50.054000</ts>
    <user>Nana</user>
    <text>I think that would achieve the same thing as having the function take two records, like:
```
Foo.view {foo = "foo"} {Foo.defaults | bar = Just "bar"}
```</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:46:30.056400</ts>
    <user>Nana</user>
    <text>ah, so the way elm-graphql does it would be like this?
```
Foo.view {foo = "foo"} (\defaults -&amp;gt; {defaults | bar = Just "bar"})
```</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:47:19.056700</ts>
    <user>Nana</user>
    <text>and you can use `identity` if you don't want to change any defaults</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:50:57.057300</ts>
    <user>Danika</user>
    <text>```
&amp;gt; import Foo                                                          
&amp;gt; Foo.withDefaults { a = "Hello World!", b = 0.5, c = 10 }
{ a = "Hello World!", b = 0.5, c = 10, d = Nothing, e = Nothing, f = Nothing } : Foo.Options
```</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:51:32.057600</ts>
    <user>Danika</user>
    <text>I don't think I'd recommend doing this...

```
type alias Required =
  { a : String
  , b : Float
  , c : Int 
  }

type alias Optional required =
  { required
  | d : Maybe String 
  , e : Maybe Int
  , f : Maybe Float
  }

type alias Options = Optional Required

withDefaults : Required -&amp;gt; Options
withDefaults r =
  { a = r.a
  , b = r.b
  , c = r.c
  , d = Nothing
  , e = Nothing
  , f = Nothing
  }
```</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:52:24.057700</ts>
    <user>Huong</user>
    <text>Exactly</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:54:06.058800</ts>
    <user>Nana</user>
    <text>&lt;@Danika&gt; that doesn't let you specify some of the optional arguments though?</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:54:21.059000</ts>
    <user>Danika</user>
    <text>indeed</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:56:37.061000</ts>
    <user>Kenya</user>
    <text>&lt;@Nana&gt; Do you have functions that work on different records of optional arguments? Then the two argument approach would be the only one that works, or?</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T06:57:12.061800</ts>
    <user>Nana</user>
    <text>but I guess having two functions like `view : Required -&amp;gt; Html msg` and `withExtra: Required Optional -&amp;gt; Html msg` could be nice as a convenience</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T08:55:25.062700</ts>
    <user>Hoa</user>
    <text>Damn, Slate.js requires React</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T08:58:00.063200</ts>
    <user>Hoa</user>
    <text>Well, Quill might fit the task equally well.</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T08:58:03.063400</ts>
    <user>Nana</user>
    <text>the only editor I've used before is TinyMCE, which I think was like 600 kb by itself :grin: not exactly "Tiny"
but it had good features for restricting and cleaning up html</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T08:59:44.063600</ts>
    <user>Hoa</user>
    <text>I’ve used Quill a few years ago with React. I had a good  impression back then :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1171">
    <ts>2019-04-12T09:01:44.063800</ts>
    <user>Hoa</user>
    <text>Oh wait. It looks ProseMirror is maintained too.</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:45:26.067600</ts>
    <user>Dede</user>
    <text>&lt;@Nana&gt; Have you considered a builder pattern?  Something like
```
module Thing
...
builder: RequiredParameters -&amp;gt; Builder
...
build: Builder -&amp;gt; Thing
...
setOptA: Int -&amp;gt; Builder -&amp;gt;  Builder
...
setOptB: Bool -&amp;gt; Builder -&amp;gt; Builder
```
And use looks like:
```
Thing.builder(requiredParameters) |&amp;gt; Thing.setOptA 17 |&amp;gt; Thing.setOptB False |&amp;gt; Thing.build
```</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:46:37.067900</ts>
    <user>Nana</user>
    <text>&lt;@Dede&gt; that just seems more verbose though :thinking_face:</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:49:04.069000</ts>
    <user>Dede</user>
    <text>Yeah, it’s a pattern I see commonly in languages that let you attach operations to datatypes, where you’d write
```
Thing::builder(required).a(17).b(False).build()
```</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:49:34.069800</ts>
    <user>Dede</user>
    <text>That said, if there are dependencies between the optional arguments, this gives you a way to enforce them.</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:50:19.070900</ts>
    <user>Niesha</user>
    <text>You should be able to copy &lt;https://pursuit.purescript.org/packages/purescript-options/4.0.0/docs/Data.Options&gt; and use a similar idiom</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:50:24.071100</ts>
    <user>Dede</user>
    <text>E.g. setters can return different builder types so that your early choices condition what your later options are.</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:56:53.071900</ts>
    <user>Leoma</user>
    <text>I like this approach as well. I use it here &lt;https://github.com/z5h/component-result/blob/1.1.0/src/ComponentResult.elm#L73&gt;

Then use it like
```
withModel myModel
        |&amp;gt; withCmd myHttpGet
        |&amp;gt; withCmd myPortCmd
        |&amp;gt; withExternalMsg LoadingData
```</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:57:48.072400</ts>
    <user>Dede</user>
    <text>Oh yeah, wordiness varies a lot depending on whether you need to keep module prefixing or not.</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:58:11.073300</ts>
    <user>Dede</user>
    <text>`builder(requiredParameters) |&amp;gt; setOptA 17 ...` is not so bad.</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:58:49.074300</ts>
    <user>Leoma</user>
    <text>(Ha, I almost always keep the module prefix… Just put down that example to keep it simple).</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:59:18.075000</ts>
    <user>Dede</user>
    <text>This is an area where Rust-ish operation-type associations have a code density advantage.</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T09:59:29.075300</ts>
    <user>Dede</user>
    <text>…which may or may not be a readability disadvantage :wink:</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:01:10.075600</ts>
    <user>Rochell</user>
    <text>Readability &amp;gt; all, imo. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:02:02.075700</ts>
    <user>Leoma</user>
    <text>:100: . Although sometimes brevity helps, brevity isn’t necessarily the rule.</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:02:55.075900</ts>
    <user>Nana</user>
    <text>but people will always disagree on what is more or less readable :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:02:59.076100</ts>
    <user>Rochell</user>
    <text>If brevity is concise and easily readable, then awesome. But if you have to start thinking about how the code is phrased, rather than why it's phrased that way, then it's a stumbling block to understanding. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:03:05.076300</ts>
    <user>Rochell</user>
    <text>Yeah, that's true enough.</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:03:29.076500</ts>
    <user>Rochell</user>
    <text>It's an inexact art :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:04:07.076700</ts>
    <user>Nana</user>
    <text>and also, keeping types simple</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:05:34.076900</ts>
    <user>Nana</user>
    <text>json-decode-pipeline for example is famously hard for beginners to understand, even though it looks pretty readable</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:06:02.077100</ts>
    <user>Dede</user>
    <text>The Rust attitude to keeping type simple is to clone the Elm type system, then do a complete tableflip by adding Traits and automatic coercions :wink:</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:06:33.077300</ts>
    <user>Dede</user>
    <text>(I spend way more time fighting the type system than the borrow checker, even though the latter is what looks scary at first.)</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T10:09:18.077700</ts>
    <user>Jefferson</user>
    <text>hello</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:43:39.079500</ts>
    <user>Myrna</user>
    <text>Rust just cannot be as easy as Elm</text>
  </message>
  <message conversation_id="1172">
    <ts>2019-04-12T13:44:24.079700</ts>
    <user>Dede</user>
    <text>The non-trait type system is more or less identical to Elm’s type system.  But after that, there’s just a whole lot more stuff.</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:44:28.079900</ts>
    <user>Myrna</user>
    <text>multi-paradigm, lifetime, mixed of side effects</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:44:53.080100</ts>
    <user>Myrna</user>
    <text>One may think it must be good for a language can do all of this</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:46:00.080300</ts>
    <user>Myrna</user>
    <text>But it is just opposite. Like C++, for a team using C++, half of team will not understand full spec of the language for just using it, not counting the domain specific problems...</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:47:19.080600</ts>
    <user>Myrna</user>
    <text>Another example is data and object (opaque data).</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:47:45.080800</ts>
    <user>Myrna</user>
    <text>Only the clean separation between two can yield a good program..</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:49:42.081100</ts>
    <user>Dede</user>
    <text>So, I’m enjoying using Rust, and I’m not really interested in a language slag-off.  It’s very different from Elm, serving a different space.  I’ll leave it at that.</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:50:53.081300</ts>
    <user>Myrna</user>
    <text>yeah, it is just my opinion. My main work language is C.</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:51:27.081500</ts>
    <user>Myrna</user>
    <text>I am just have some rants to what I have seen in the industry code. My bad.</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T13:51:57.081700</ts>
    <user>Dede</user>
    <text>I find Rust much more tractable than C++ has become.  (I’m also fond of C for its purity of essence., but I’d write in Rust over C because I like the guardrails.)</text>
  </message>
  <message conversation_id="1174">
    <ts>2019-04-12T16:27:57.084800</ts>
    <user>Emilee</user>
    <text>what do you think has more overhead:
• creating single-rule style tags
• creating custom elements
context: we're currently using custom elements for our svg icons because they are colored with css variables which are not supported in elm. an alternative would be to use pure elm and dynamically create a style tag for every icon defining the css variable
i would like to use a pure elm approach, but i'm worried about the wonkyness and overhead of ad-hoc creating a lot of style tags</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T16:44:40.088200</ts>
    <user>Alicia</user>
    <text>&lt;@Emilee&gt; I think there may be a workaround with the CSS variables with
```
Html.Attributes.attribute "style" "--some-var: 10px"
```</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T16:47:21.088800</ts>
    <user>Alicia</user>
    <text>we have SVG icons as well, we used `fill: currentColor` for them, and then we wrap them in a span or whatever to set the color</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T16:47:46.089300</ts>
    <user>Alicia</user>
    <text>like `span [ class "w-4 h-4 color-blue" ] [ Icon.decorativeIcon SomeIconName ]`</text>
  </message>
  <message conversation_id="1173">
    <ts>2019-04-12T17:12:58.090900</ts>
    <user>Emilee</user>
    <text>hmm, the attribute workaround seems feasible. of course it can accidentally nuke other styles, but that should be avoidable
`currentColor` seems like a better choice for single-color icons than a css variable, but we can't change that right now since parts of our angular codebase depend on the way colors are set at the moment^^</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:40:25.093400</ts>
    <user>Myrna</user>
    <text>Hi, I constantly feel that structure and presentation are two different respects of a HTML view</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:41:03.094200</ts>
    <user>Myrna</user>
    <text>mix css style directly inside the code make my html structure very hard to read</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:41:42.094900</ts>
    <user>Myrna</user>
    <text>Does anyone have suggestion for that situation?</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:43:12.096200</ts>
    <user>Myrna</user>
    <text>Right now, I use bootstrap classname in the attribute tag for html, and have separate css for it. But bootstrap requires me to modify my html structure as well..</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:49:46.100400</ts>
    <user>Augustus</user>
    <text>We've been using tailwinds which does utility classes (e.g `p-4 font-semibold color-blue`) , I love it now and try to use as little css as possible. It has a little learning curve but once you are over that development is fluid</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:51:46.101500</ts>
    <user>Augustus</user>
    <text>Bulma is another one that is similar to tailwinds</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:54:13.102000</ts>
    <user>Myrna</user>
    <text>&lt;@Augustus&gt; I agree, utilities classes are cool</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:54:27.102400</ts>
    <user>Myrna</user>
    <text>very easy to manipulate as well</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:56:41.103500</ts>
    <user>Myrna</user>
    <text>but feels like it is kind of abbreviation or alias to write css style attribute in the html, isn't it</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:58:24.104200</ts>
    <user>Myrna</user>
    <text>of course, shorter, sweater, I looked up the grid css</text>
  </message>
  <message conversation_id="1175">
    <ts>2019-04-12T18:58:58.104900</ts>
    <user>Myrna</user>
    <text>the two probably can combine together, one for visual layout, the other for visual style</text>
  </message>
  <message conversation_id="1176">
    <ts>2019-04-12T19:31:34.105600</ts>
    <user>Cornell</user>
    <text>Separating layout and style was how `style-elements`(now `elm-ui`) started :smile:</text>
  </message>
  <message conversation_id="1177">
    <ts>2019-04-13T03:01:13.108800</ts>
    <user>Patricia</user>
    <text>I’m actually working on this now. Currently on vacation, but hope to land this in in near future</text>
  </message>
  <message conversation_id="1178">
    <ts>2019-04-13T05:26:08.109800</ts>
    <user>Hoa</user>
    <text>It’s hard stuff.  I’ve been using CSS since forever and there’s always a bit overlapping.  Bootstrap-like frameworks are  good solution since they do most of the job for you. You pay some price for it though, since they require you write HTML and add cSS classes to match their patterns.  I personally do’t like tailwind-like solutions but they have a lot of fans.  Given that we have flexbox and CSS grids are starting to be more approachable I would think to start with something basic like Normalize.css and  build from there with Sass  and build “components” using BEM like you would in React. So you end up having something like `Card.scss` holding  `Card`, `Card__heading`, `Card__content`, etc.  Utility classes like `text-right` are nice to have. Separate layout and styles may be good too, for theming. Sites like &lt;https://css-tricks.com&gt; gives a lot of insights to cope with HTML/CSS complexity.</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T06:51:25.114400</ts>
    <user>Jae</user>
    <text>How do you all go about benchmarking elm code? I'm writing a game and the logic running in each animation frame is taking 40ms when it should be less than 16ms.</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T06:52:15.114500</ts>
    <user>Jae</user>
    <text>I know it has to be a CPU bottleneck because there was no performance improvements when I modified my view function to not make an dom changes.</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T06:53:09.114700</ts>
    <user>Jae</user>
    <text>I looked at the performance tab in Chromes dev tools but it just tells me A4, anonymous, and garbage collection are taking most of the time. It doesn't give me any understandable function names</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T06:54:13.114900</ts>
    <user>Jae</user>
    <text>Is my only option to slowly remove different parts of my code until I notice a speedup?</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T06:55:05.115100</ts>
    <user>Virgie</user>
    <text>the bottom-up tab gives functions with the most self time. you can click on them to go to their definition where you can see the actual name</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T06:56:16.115300</ts>
    <user>Virgie</user>
    <text>do you by any chance do record updates in your loop? they are known to be slow</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T06:57:51.115500</ts>
    <user>Jae</user>
    <text>Bottom up looks like this for me.</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T06:58:09.115900</ts>
    <user>Jae</user>
    <text>I probably do have record updates all over the place</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T06:58:50.116100</ts>
    <user>Jae</user>
    <text>The alternative to record updates is to recreate the record manually instead of using the update syntax?</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:01:22.116300</ts>
    <user>Virgie</user>
    <text>yes</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:02:37.116500</ts>
    <user>Virgie</user>
    <text>try that first, I think that will help a lot. Then the debugger takes a lot of time (so don't do performance measurement while in --debug)</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:02:52.116700</ts>
    <user>Virgie</user>
    <text>perhaps you could let it run for a little while to get more robust numbers</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:05:28.116900</ts>
    <user>Huong</user>
    <text>Definitely turn off the debugger if you want to have any clue about performance. It serializes the entire state, in a not-super-performant way, on every message. If you have a subscription to animation-frames and non-trivial state, that'll kill performance.</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:06:33.117100</ts>
    <user>Jae</user>
    <text>Turning off the debugger completely fixed the issue.</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:08:11.117300</ts>
    <user>Huong</user>
    <text>`--optimize` can also improve performance a bunch, especially when you have lots of boxed types (custom types with a single constructor)</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:09:22.117500</ts>
    <user>Jae</user>
    <text>True. I want to avoid that though because then I lose hot reloading and Debug.log</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:11:53.117700</ts>
    <user>Jae</user>
    <text>In the future, if I have the debugger off and I've avoided using the update syntax inside loops, is there a good way of figuring out what elm functions are taking a lot of CPU time?</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:13:02.117900</ts>
    <user>Jae</user>
    <text>I'm worried I'm going to run into performance issues and then have to resort to picking apart my app when trying to find the hot path so I can know what to optimize</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:13:45.118100</ts>
    <user>Virgie</user>
    <text>I've found the bottom up tab to be helpful (click on the blue links/line numbers to go to the actual functions and see their name)</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:16:07.118300</ts>
    <user>Huong</user>
    <text>another useful thing is using what &lt;@Virgie&gt; describes to figure out hot code-paths, picking out the largest offender, benchmarking it and figuring out how to optimize that. If you ever get to that point, feel free to poke me and I'll gladly try and help you out!</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:18:31.118500</ts>
    <user>Jae</user>
    <text>&lt;@Virgie&gt; I looked at that but the links in the bottom up tab but all the functions were to core library functions that get used everywhere. I suppose this might change if I have an actual performance bottleneck in my code and it isn't just the debugger causing problems.</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:19:40.118700</ts>
    <user>Jae</user>
    <text>for benchmarking, is it possible to do it in place or do I need to copy the code into something like a unit test? If it's the latter, while I think it will get things done, it will be time consuming</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:20:07.119100</ts>
    <user>Virgie</user>
    <text>probably, yes. It's not ideal but I don't think elm can easily do better than this. I would like timing for individual functions but with anonymous functions (and the machinery needed to encode those in JS) that is very hard to do</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:20:51.120000</ts>
    <user>Timika</user>
    <text>&lt;https://github.com/elm-explorations/benchmark&gt; is great for validating Performance assumptions. </text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:21:23.120200</ts>
    <user>Virgie</user>
    <text>it is however time-consuming to create the benchmarks (and tests, to make sure your new implementation is not only faster but also still correct)</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:21:48.120400</ts>
    <user>Virgie</user>
    <text>but because you profiled beforehand you know it's probably going to be worth it</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:24:20.120600</ts>
    <user>Timika</user>
    <text>Yeah, there is no replacement for profiling first. :100:</text>
  </message>
  <message conversation_id="1179">
    <ts>2019-04-13T07:24:46.120800</ts>
    <user>Jae</user>
    <text>Cool, well I'll know what to try out if my game starts lagging again (hopefully it doesn't). Thanks!</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:09:30.122400</ts>
    <user>Cammy</user>
    <text>Has anyone else encountered runtime errors from the standard elm libraries? I'm not using any ports or native code, and the only third-party library I'm using is elm-ui, but I'm getting `TypeError: undefined is not an object (evaluating 'domNode.childNodes')` seemingly every single animationFrame.</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:15:58.123300</ts>
    <user>Earlean</user>
    <text>&lt;@Cammy&gt; that's an error you'll get if something is messing with the DOM. Do you have any browser extensions installed?</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:16:26.123700</ts>
    <user>Cammy</user>
    <text>No, and I'm getting it cross-browser.</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:17:15.124000</ts>
    <user>Earlean</user>
    <text>no other JS loaded on that page?</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:17:55.124600</ts>
    <user>Cammy</user>
    <text>No, I'm running the elm via elm-live, not even any html page to load any JS with.</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:18:36.125300</ts>
    <user>Cammy</user>
    <text>I just tested in Elm Reactor, same error.</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:19:26.125900</ts>
    <user>Earlean</user>
    <text>another possibility is the browser moving DOM nodes around because they're nested in an invalid way</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:20:30.126600</ts>
    <user>Earlean</user>
    <text>happens with `&amp;lt;table&amp;gt;` sometimes, the browser automatically adds a `&amp;lt;tbody&amp;gt;` node</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:20:58.127200</ts>
    <user>Earlean</user>
    <text>nested `&amp;lt;a&amp;gt;` tags are invalid and the browser might move them around too</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:22:10.128000</ts>
    <user>Earlean</user>
    <text>you can't put a `&amp;lt;div&amp;gt;` inside a `&amp;lt;span&amp;gt;`, the browser might move that too etc.</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:22:31.128500</ts>
    <user>Earlean</user>
    <text>ReactJS added warnings in development to tell you about invalid nesting, but Elm doesn't</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:27:11.129900</ts>
    <user>Cammy</user>
    <text>I'm not sure what would cause that it in my code. It's just div's and p's I'm working with. I do have two custom `on` event handlers and am using content editable, but I'm fairly certain nothing is invalid.</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:30:25.130700</ts>
    <user>Earlean</user>
    <text>ah, content editable can cause problems</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:30:56.131000</ts>
    <user>Cammy</user>
    <text>I removed some of my nesting and it seems ok now.</text>
  </message>
  <message conversation_id="1180">
    <ts>2019-04-13T08:32:59.131300</ts>
    <user>Cammy</user>
    <text>Nope, spoke to soon. Ugh.</text>
  </message>
  <message conversation_id="1181">
    <ts>2019-04-13T09:14:16.133300</ts>
    <user>Hoa</user>
    <text>`contenteditable` surely gives issues.  One way to get around that is wrap the contenteditable element into a custom element.  I’m doing something like that, only using textarea and &lt;https://package.elm-lang.org/packages/billstclair/elm-custom-element/latest/&gt;  But really the concept still applies</text>
  </message>
  <message conversation_id="1182">
    <ts>2019-04-13T10:46:18.134700</ts>
    <user>Genevieve</user>
    <text>I’ve heard that it is possible to compile an Elm program with only types (no function definitions), but when I try to do so while designing an api, I get</text>
  </message>
  <message conversation_id="1182">
    <ts>2019-04-13T10:46:41.135200</ts>
    <user>Genevieve</user>
    <text>```There is a type annotation for `fromForest` but there is no corresponding
definition!

8| myFunc : String -&amp;gt; Int
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Directly below the type annotation, put a definition like:
   myFunc = 42
```</text>
  </message>
  <message conversation_id="1182">
    <ts>2019-04-13T10:47:00.135500</ts>
    <user>Genevieve</user>
    <text>What am I doing wrong?</text>
  </message>
  <message conversation_id="1182">
    <ts>2019-04-13T10:48:04.136300</ts>
    <user>Cornell</user>
    <text>put a definition below it with `Debug.todo "still need to implement"`</text>
  </message>
  <message conversation_id="1182">
    <ts>2019-04-13T10:48:14.136600</ts>
    <user>Cornell</user>
    <text>`myFunc = Debug.todo "still need to implement"`</text>
  </message>
  <message conversation_id="1182">
    <ts>2019-04-13T10:48:24.136800</ts>
    <user>Genevieve</user>
    <text>Ok so that’s the way?</text>
  </message>
  <message conversation_id="1182">
    <ts>2019-04-13T10:48:30.137000</ts>
    <user>Genevieve</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1182">
    <ts>2019-04-13T10:48:34.137200</ts>
    <user>Cornell</user>
    <text>no prob!</text>
  </message>
  <message conversation_id="1183">
    <ts>2019-04-13T14:18:48.137800</ts>
    <user>Giselle</user>
    <text>hi</text>
  </message>
  <message conversation_id="1184">
    <ts>2019-04-13T15:48:32.140000</ts>
    <user>Jae</user>
    <text>Has anyone worked with the WebGL elm package?  It looks like it doesn't support array attributes and I'm hoping to find a way to work around this limitation.</text>
  </message>
  <message conversation_id="1184">
    <ts>2019-04-13T15:49:40.140200</ts>
    <user>Jae</user>
    <text>When I try to write `uniform vec2 instanceOffsets[128];` in
```agentVS : Shader AgentVertex AgentUniforms { vcolor : Vec3 }
agentVS =
    [glsl|
        attribute vec3 position;
        attribute int instanceIndex;
        uniform mat4 perspective;
        uniform mat4 camera;
        uniform mat4 rotation;
        uniform vec2 instanceOffsets[128];
        uniform vec3 color;
        varying vec3 vcolor;
        void main () {
            gl_Position = perspective * camera * rotation * vec4(position, 1.0);
            vcolor = color;
        }
    |]```
I get a compiler error about how the type annotation doesn't match the GLSL shader</text>
  </message>
  <message conversation_id="1184">
    <ts>2019-04-13T15:52:39.140400</ts>
    <user>Jae</user>
    <text>My goal is to try simulating instancing. Aka, I want to draw the same vertices many times but in different locations without needing to call WebGL.entity many times.</text>
  </message>
  <message conversation_id="1184">
    <ts>2019-04-13T15:55:40.140600</ts>
    <user>Jae</user>
    <text>I thought I could make this work by creating a mesh that contains the vertices I want to draw duplicated many times.  Each set of vertices has a unique `instanceIndex` which I can use to access the `instanceOffsets` array and figure out how to offset a given set of vertices.</text>
  </message>
  <message conversation_id="1185">
    <ts>2019-04-13T17:10:34.141100</ts>
    <user>Dorotha</user>
    <text>The only supported types are: Int, Float, Texture and Vec2, Vec3, Vec4, Mat4</text>
  </message>
  <message conversation_id="1186">
    <ts>2019-04-13T17:15:02.141300</ts>
    <user>Dorotha</user>
    <text>128 entities should work fine though.</text>
  </message>
  <message conversation_id="1186">
    <ts>2019-04-13T17:17:16.141500</ts>
    <user>Dorotha</user>
    <text>there is also &lt;#C34SVE4MR|webgl&gt; channel</text>
  </message>
  <message conversation_id="1185">
    <ts>2019-04-13T19:38:56.141700</ts>
    <user>Myrna</user>
    <text>Thanks for your comment. The `always a bit overlapping` is very precise.</text>
  </message>
  <message conversation_id="1187">
    <ts>2019-04-13T20:31:24.143100</ts>
    <user>Carter</user>
    <text>is there any date library that does date rendering relative "now". Like X seconds/minutes/hours "..ago". And "yesterday"</text>
  </message>
  <message conversation_id="1187">
    <ts>2019-04-13T21:03:16.143700</ts>
    <user>Earlean</user>
    <text>&lt;@Carter&gt; &lt;https://package.elm-lang.org/packages/gingko/time-distance/latest/Time-Distance&gt;</text>
  </message>
  <message conversation_id="1187">
    <ts>2019-04-13T21:03:59.143900</ts>
    <user>Carter</user>
    <text>&lt;@Earlean&gt; thanks!</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T21:47:37.144600</ts>
    <user>Isaiah</user>
    <text>Is there any news of websockets coming?</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T21:51:54.144700</ts>
    <user>Claretta</user>
    <text>I haven't heard anything about it, but I find they're not too bad to manage with ports. The biggest hurdle seems to be if you need to send binary from the client.</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T21:57:05.149900</ts>
    <user>Isaiah</user>
    <text>That’s what I’m doing now, but it would be very nice to have it natively in Elm. Building an XMPP client would be a lot easier then. Elm already has great support for XML marshaling, not to mention AST representation, which is done using the DOM in javascript</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T21:59:54.150100</ts>
    <user>Claretta</user>
    <text>Mind if I ask what the challenge is with ports? Implementation issues or is it more related to a desire to distribute the client as a library?</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T22:01:33.150300</ts>
    <user>Claretta</user>
    <text>I've written a basic XMPP over websockets server previously so your particular use case is doubly interesting to me. :grin:</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T22:14:45.153000</ts>
    <user>Isaiah</user>
    <text>Management of the connection happens in javascript (like stream resumption) and all stanzas need to be converted to json before being sent through ports, which is a lot of extra work for nothing in return.</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T22:24:33.153200</ts>
    <user>Claretta</user>
    <text>It seems like it should be possible to just serialize the stanzas to strings in Elm and just push those through the port. No JSON encoding needed beyond `string`.</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T22:28:24.153400</ts>
    <user>Claretta</user>
    <text>I built a dummy websocket app for elm-port-examples that has some open/close socket messaging in it: &lt;https://github.com/MattCheely/elm-port-examples/tree/master/websocket&gt;
I still need to add a little bit of logic to handle close events, but from what I remember of XMPP, once the port glue is in place, most of the stream state management should be pretty independent of that code.</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T22:28:43.153600</ts>
    <user>Claretta</user>
    <text>Although it's certainly possible I've forgotten some details of the protocol.</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T22:29:01.153800</ts>
    <user>Carter</user>
    <text>doesnt "elm-lang/websocket" work in 0.19?</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T22:29:11.154000</ts>
    <user>Carter</user>
    <text>its been working great in 0.18</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T22:31:42.154200</ts>
    <user>Carter</user>
    <text>hmm, doesnt look like its in 0.19. Found this though : &lt;https://package.elm-lang.org/packages/billstclair/elm-websocket-client/latest/&gt;</text>
  </message>
  <message conversation_id="1188">
    <ts>2019-04-13T23:27:41.158000</ts>
    <user>Isaiah</user>
    <text>&lt;@Claretta&gt; that’s true, and has me thinking now about what exactly this library is doing for me since xml manipulation is trivial in elm. I’d like to write an xmpp client entirely in elm, but having the websocket initialization in javascript might not be so bad. I’d miss out on having BOSH though. And implementing the auth process won’t be fun</text>
  </message>
  <message conversation_id="1189">
    <ts>2019-04-14T00:55:07.159900</ts>
    <user>Chae</user>
    <text>Not sure if I missed it in my searches, but has there been any talk about elm’s lack of `FormData.append(name, value, filename);`? In my case I’m trying to upload a blob created from a canvas. I know I could just do it in JS, but I was hoping to do it in elm</text>
  </message>
  <message conversation_id="1189">
    <ts>2019-04-14T01:13:32.160200</ts>
    <user>Earlean</user>
    <text>&lt;@Chae&gt; &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#filePart&gt;</text>
  </message>
  <message conversation_id="1189">
    <ts>2019-04-14T01:20:42.160300</ts>
    <user>Chae</user>
    <text>I’m aware of that, I am talking specifically about the 3 argument variant. `filePart` doesn’t allow setting the 3rd argument of `FormData.append`. Sorry if am I misunderstanding something?</text>
  </message>
  <message conversation_id="1189">
    <ts>2019-04-14T01:32:53.160500</ts>
    <user>Earlean</user>
    <text>ah, yes you are correct. there isn't a way to set the filename for a File</text>
  </message>
  <message conversation_id="1189">
    <ts>2019-04-14T01:39:28.160700</ts>
    <user>Chae</user>
    <text>Ok, thank you! And sorry for any confusion. For anyone else that may come across this I ended up doing
```
canvas.toBlob(
  function(blob) {
    const namedFile = new File([blob], 'customFileName.jpg');

    app.ports.sendScreenshotToElm.send((namedFile);
  },
  'image/jpeg'
);
```
and then decoding inside elm with &lt;https://package.elm-lang.org/packages/elm/file/latest/File#decoder&gt;</text>
  </message>
  <message conversation_id="1189">
    <ts>2019-04-14T01:40:33.160900</ts>
    <user>Chae</user>
    <text>Not sure if that should be documented anywhere (self answered on StackOverflow maybe?), it was surprisingly hard to find. Though I’m not sure how often others will need it either</text>
  </message>
  <message conversation_id="1190">
    <ts>2019-04-14T01:52:11.161200</ts>
    <user>Jae</user>
    <text>I’m hoping to draw thousands of entities in batches of 128 (because that seems to be the minimum supported array size).  I did a quick benchmark earlier that suggests that if I draw each entity individually with WebGL.entity then the most I can do is 600 entities per animation frame</text>
  </message>
  <message conversation_id="1191">
    <ts>2019-04-14T03:24:34.161500</ts>
    <user>Carlo</user>
    <text>Anyone play around with gitpod yet?</text>
  </message>
  <message conversation_id="1191">
    <ts>2019-04-14T03:24:45.161700</ts>
    <user>Carlo</user>
    <text>Let me ask a better question</text>
  </message>
  <message conversation_id="1191">
    <ts>2019-04-14T03:25:02.162100</ts>
    <user>Carlo</user>
    <text>Whats the default dockerfile for newbie elm user</text>
  </message>
  <message conversation_id="1191">
    <ts>2019-04-14T03:25:35.162400</ts>
    <user>Carlo</user>
    <text>wunsh/alpine-elm is what im about to try</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T08:03:07.163100</ts>
    <user>Aundrea</user>
    <text>Hi! Thanks for the invitation</text>
  </message>
  <message conversation_id="1193">
    <ts>2019-04-14T08:11:13.163200</ts>
    <user>Corinne</user>
    <text>You _could_ do some horrible hacks to use a `Texture` to store `vec2`s potentially...</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T08:19:45.163400</ts>
    <user>Jae</user>
    <text>Do you know if it is possible to modify the texture without causing a memory leak?</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T08:20:17.163600</ts>
    <user>Corinne</user>
    <text>No idea, sorry</text>
  </message>
  <message conversation_id="1191">
    <ts>2019-04-14T08:51:41.164000</ts>
    <user>Dorotha</user>
    <text>It is not possible </text>
  </message>
  <message conversation_id="1191">
    <ts>2019-04-14T08:58:08.164300</ts>
    <user>Lorilee</user>
    <text>I've also been thinking about writing an xmpp client for elm. It would be nice to have all of the utilities for common stanzas even without web socket handling. If you start work on it, definitely post something.</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T10:21:20.164600</ts>
    <user>Jae</user>
    <text>I guess one thing I can try is defining a bunch of uniforms, aka
```
uniform vec2 instanceOffset0
uniform vec2 instanceOffset1
...
uniform vec2 instanceOffsetHoweverManyAreAllowed
```
And then combine them into an array within main().  I'm not sure if this has more overhead than it speeds things up though.</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T10:22:49.164900</ts>
    <user>Dorotha</user>
    <text>if you use mat4 then you only need 16 matrices for 128 vec2 :smile:</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T10:24:56.165100</ts>
    <user>Jae</user>
    <text>True, I don't know how much overhead there is with individually addressing each part of a mat4 and constructing a bunch of vecs. Maybe it's faster than my idea.  I guess I'll have to do some benchmarking to find out</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T12:30:50.165500</ts>
    <user>Jae</user>
    <text>Nevermind, GLSL doesn't support indexing arrays with values that aren't known at compile time</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T12:32:36.165700</ts>
    <user>Jae</user>
    <text>So `instanceOffsets[instanceIndex]` isn't possible. Only things like `instanceOffsets[5]` is supported (which is useless here).</text>
  </message>
  <message conversation_id="1194">
    <ts>2019-04-14T12:41:11.166900</ts>
    <user>Rosario</user>
    <text>Hello, is there a neat graphics library, now that elm-graphics doesn't work with 0.19?</text>
  </message>
  <message conversation_id="1194">
    <ts>2019-04-14T12:41:43.167500</ts>
    <user>Rosario</user>
    <text>I've found explorations/webgl and joakin/elm-canvas.</text>
  </message>
  <message conversation_id="1194">
    <ts>2019-04-14T13:07:43.168200</ts>
    <user>Rosario</user>
    <text>This is the other option I'm considering: &lt;https://package.elm-lang.org/packages/timjs/elm-collage/latest/&gt;</text>
  </message>
  <message conversation_id="1195">
    <ts>2019-04-14T13:28:47.169100</ts>
    <user>Dorotha</user>
    <text>I see, good to know. Does it mean there is no point in supporting arrays?</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T13:38:43.169300</ts>
    <user>Jae</user>
    <text>I could still use them here.  Not directly but what I have written now is
```[glsl|
        attribute vec3 position;
        attribute float instanceIndex;
        uniform mat4 perspective;
        uniform mat4 camera;
        uniform mat4 rotation;
        uniform vec2 instanceOffset0;
        uniform vec2 instanceOffset1;
        uniform vec2 instanceOffset2;
        uniform vec2 instanceOffset3;
        uniform vec2 instanceOffset4;
        uniform vec2 instanceOffset5;
        uniform vec2 instanceOffset6;
        uniform vec2 instanceOffset7;
        uniform vec2 instanceOffset8;
        uniform vec2 instanceOffset9;
        uniform vec2 instanceOffset10;
        uniform vec2 instanceOffset11;
        uniform vec2 instanceOffset12;
        uniform vec2 instanceOffset13;
        uniform vec2 instanceOffset14;
        uniform vec2 instanceOffset15;
        uniform vec2 instanceOffset16;
        uniform vec2 instanceOffset17;
        uniform vec2 instanceOffset18;
        uniform vec2 instanceOffset19;
        uniform vec3 color;
        varying vec3 vcolor;

        void main () {
            highp int index = int(instanceIndex);
            mediump vec2 offset =
                (instanceOffset0 * float(index == 0)) +
                (instanceOffset1 * float(index == 1)) +
                (instanceOffset2 * float(index == 2)) +
                (instanceOffset3 * float(index == 3)) +
                (instanceOffset4 * float(index == 4)) +
                (instanceOffset5 * float(index == 5)) +
                (instanceOffset6 * float(index == 6)) +
                (instanceOffset7 * float(index == 7)) +
                (instanceOffset8 * float(index == 8)) +
                (instanceOffset9 * float(index == 9)) +
                (instanceOffset10 * float(index == 10)) +
                (instanceOffset11 * float(index == 11)) +
                (instanceOffset12 * float(index == 12)) +
                (instanceOffset13 * float(index == 13)) +
                (instanceOffset14 * float(index == 14)) +
                (instanceOffset15 * float(index == 15)) +
                (instanceOffset16 * float(index == 16)) +
                (instanceOffset17 * float(index == 17)) +
                (instanceOffset18 * float(index == 18)) +
                (instanceOffset19 * float(index == 19));
            gl_Position = perspective * camera * rotation * vec4(position + vec3(offset, 0), 1.0);
            vcolor = color;
        }
    |]
```</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T13:38:59.169500</ts>
    <user>Jae</user>
    <text>If arrays are supported then I wouldn't need to do so much copy pasting</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T13:40:35.169700</ts>
    <user>Jae</user>
    <text>With this setup I'm able to call WebGL.entity 200 times and since each call draws 20 instances, I can get 4000 instances total.  This is in contrast with 600 WeblGL.entity calls with 1 instance each.</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T13:41:50.170000</ts>
    <user>Jae</user>
    <text>With some benchmarking I imagine I could figure out what is the optimal balance of copy pasting uniforms and calling WebGL but this is good enough for now</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T13:44:29.170200</ts>
    <user>Jae</user>
    <text>(With arrays the code would look like this)
```[glsl|
        attribute vec3 position;
        attribute float instanceIndex;
        uniform mat4 perspective;
        uniform mat4 camera;
        uniform mat4 rotation;
        uniform vec2 instanceOffsets[20];
        uniform vec3 color;
        varying vec3 vcolor;

        void main () {
            highp int index = int(instanceIndex);
            mediump vec2 offset =
                (instanceOffsets[0] * float(index == 0)) +
                (instanceOffsets[1] * float(index == 1)) +
                (instanceOffsets[2] * float(index == 2)) +
                (instanceOffsets[3] * float(index == 3)) +
                (instanceOffsets[4] * float(index == 4)) +
                (instanceOffsets[5] * float(index == 5)) +
                (instanceOffsets[6] * float(index == 6)) +
                (instanceOffsets[7] * float(index == 7)) +
                (instanceOffsets[8] * float(index == 8)) +
                (instanceOffsets[9] * float(index == 9)) +
                (instanceOffsets[10] * float(index == 10)) +
                (instanceOffsets[11] * float(index == 11)) +
                (instanceOffsets[12] * float(index == 12)) +
                (instanceOffsets[13] * float(index == 13)) +
                (instanceOffsets[14] * float(index == 14)) +
                (instanceOffsets[15] * float(index == 15)) +
                (instanceOffsets[16] * float(index == 16)) +
                (instanceOffsets[17] * float(index == 17)) +
                (instanceOffsets[18] * float(index == 18)) +
                (instanceOffsets[19] * float(index == 19));
            gl_Position = perspective * camera * rotation * vec4(position + vec3(offset, 0), 1.0);
            vcolor = color;
        }
    |]
```</text>
  </message>
  <message conversation_id="1195">
    <ts>2019-04-14T13:52:46.170400</ts>
    <user>Isaiah</user>
    <text>I started writing a client library today and it's coming along quickly. I still have a lot to read in the RFCs though.</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T13:56:42.170600</ts>
    <user>Dorotha</user>
    <text>I see</text>
  </message>
  <message conversation_id="1192">
    <ts>2019-04-14T14:00:24.170800</ts>
    <user>Jae</user>
    <text>Not a very strong selling point I know. If instancing is supported in WebGL (I'm not entirely sure if it is) then I think it would be much better to support that directly than improve my hack</text>
  </message>
  <message conversation_id="1196">
    <ts>2019-04-14T14:24:07.171200</ts>
    <user>Hoa</user>
    <text>That one is the sequel of Elm Graphics :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1196">
    <ts>2019-04-14T14:24:29.171700</ts>
    <user>Hoa</user>
    <text>Looks really nice.  I was reading the docs the other day</text>
  </message>
  <message conversation_id="1196">
    <ts>2019-04-14T14:24:55.172200</ts>
    <user>Hoa</user>
    <text>To pick one really depends on what you are after</text>
  </message>
  <message conversation_id="1196">
    <ts>2019-04-14T17:10:26.172700</ts>
    <user>Lorilee</user>
    <text>There certainly are a lot of RFCs. Once you have a foundation, let me know if you could use some help adding to it.</text>
  </message>
  <message conversation_id="1197">
    <ts>2019-04-14T21:10:59.172900</ts>
    <user>Claretta</user>
    <text>I would also be interested in an Elm XMPP library. I don't have any direct use for it now, but I have some project ideas that I might get around to eventually where it would be nice.</text>
  </message>
  <message conversation_id="1197">
    <ts>2019-04-14T21:13:19.173100</ts>
    <user>Claretta</user>
    <text>&lt;@Isaiah&gt; One thing to watch out for in the RFCs if you haven't caught it already is that the stream initialization process is different for websockets vs vanilla XMPP over TCP.  Websockets open and close with a single stanza, but in vanilla XMPP there's a `stream` element that wraps every other stanza, and maybe other streams also if you need to create a new stream after auth or TLS negotiation.</text>
  </message>
  <message conversation_id="1197">
    <ts>2019-04-14T21:13:34.173300</ts>
    <user>Claretta</user>
    <text>The websocket version is much easier to deal with, IMO</text>
  </message>
  <message conversation_id="1197">
    <ts>2019-04-14T21:14:09.173500</ts>
    <user>Claretta</user>
    <text>I forget what BOSH does.</text>
  </message>
  <message conversation_id="1198">
    <ts>2019-04-14T22:07:52.173700</ts>
    <user>Isaiah</user>
    <text>Here is the start of [elm-xmpp](&lt;https://github.com/ericnething/elm-xmpp&gt;). Figuring out the correct API from Elm is fun, if not a bit challenging. :grin:</text>
  </message>
  <message conversation_id="1197">
    <ts>2019-04-14T22:09:22.173900</ts>
    <user>Isaiah</user>
    <text>&lt;@Claretta&gt; thanks for the heads up. Luckily we have the rfc for [xmpp over websockets](&lt;https://datatracker.ietf.org/doc/rfc7395/?include_text=1&gt;). BOSH is long-polling.</text>
  </message>
  <message conversation_id="1197">
    <ts>2019-04-14T22:46:50.174200</ts>
    <user>Claretta</user>
    <text>Yep, nice. In my project I started with direct XMPP via TCP support and had to deal with all of the nested stream negotiations and it was a huge pain. Then when I got to rfc7395, I was simultaneously thrilled that the process was so much better and annoyed that I had to now have two different mechanisms.</text>
  </message>
  <message conversation_id="1199">
    <ts>2019-04-15T00:40:24.174500</ts>
    <user>Lesli</user>
    <text>Thanks &lt;@Lynne&gt;</text>
  </message>
  <message conversation_id="1200">
    <ts>2019-04-15T04:29:26.175000</ts>
    <user>Corinne</user>
    <text>&amp;gt; So `instanceOffsets[instanceIndex]` isn't possible. Only things like `instanceOffsets[5]` is supported (which is useless here).

I think there are some hacks you can do here at least &lt;https://stackoverflow.com/questions/30585265/what-can-i-use-as-an-array-index-in-glsl-in-webgl&gt;</text>
  </message>
  <message conversation_id="1201">
    <ts>2019-04-15T05:21:04.179600</ts>
    <user>Rosario</user>
    <text>I'm making a little asteroids-like game just for fun. I think I'll go with timjs' library: there doesn't seem to be a way to place the origin of a polygon in its center in elm-canvas. I want to be able to control the origin so that when I rotate a polygon it rotates about its center of mass without me having to translate it or whatever.

It also seems a bit easier to compose things in in elm-collage.</text>
  </message>
  <message conversation_id="1201">
    <ts>2019-04-15T05:21:44.180000</ts>
    <user>Rosario</user>
    <text>&lt;@Hoa&gt; ^^</text>
  </message>
  <message conversation_id="1201">
    <ts>2019-04-15T05:23:38.183100</ts>
    <user>Dorotha</user>
    <text>&lt;@Rosario&gt; Have you considered using svg directly? Also welcome to &lt;#C0K5RJ7LN|gamedev&gt; if you’re not there already :)</text>
  </message>
  <message conversation_id="1201">
    <ts>2019-04-15T05:25:47.184500</ts>
    <user>Nana</user>
    <text>yeah for vector graphics svg seems the simplest</text>
  </message>
  <message conversation_id="1201">
    <ts>2019-04-15T05:26:33.185100</ts>
    <user>Rosario</user>
    <text>&lt;@Dorotha&gt; Thanks for the invite :slightly_smiling_face: I did consider using svg directly, but wanted to see if something a bit higher level and elmier might work well</text>
  </message>
  <message conversation_id="1201">
    <ts>2019-04-15T05:27:24.186200</ts>
    <user>Rosario</user>
    <text>I'll have a look at the svg docs, but I think I was concerned about the readme saying it was a bad api or something</text>
  </message>
  <message conversation_id="1202">
    <ts>2019-04-15T06:46:56.188700</ts>
    <user>Desire</user>
    <text>can somebody recommend a library for typescript that does elm style json decoding?</text>
  </message>
  <message conversation_id="1202">
    <ts>2019-04-15T06:54:51.188800</ts>
    <user>Jae</user>
    <text>Thanks. If lists were supported, I could probably do something like then
```
uniform vec2 instanceOffsets[20];

main()
{
    highp int index = int(instanceIndex);
    mediump vec2 offset = vec2();
    for (int i = 0; i &amp;lt; 20; i++)
        offset += instanceOffsets[i] * float(index == i);

    gl_Position = perspective * camera * rotation * vec4(position + vec3(offset, 0), 1.0);
    vcolor = color;
}
```</text>
  </message>
  <message conversation_id="1202">
    <ts>2019-04-15T06:55:49.189000</ts>
    <user>Jae</user>
    <text>It doesn't get around the problem that I have to go through the entire array for each vertex but at least I don't have to do as much copy pasting (unfortunately since I don't have uniform lists I don't think this will save any copy pasting)</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:06:23.189400</ts>
    <user>Dayna</user>
    <text>&lt;https://github.com/gcanti/io-ts&gt;</text>
  </message>
  <message conversation_id="1202">
    <ts>2019-04-15T07:12:07.189600</ts>
    <user>Desire</user>
    <text>thx</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:41:34.190100</ts>
    <user>Gertrude</user>
    <text>oh no i think i found a bug in the compiler ... ;_;</text>
  </message>
  <message conversation_id="1202">
    <ts>2019-04-15T07:43:32.190800</ts>
    <user>Jae</user>
    <text>Can you post what error message you're getting?</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:44:13.191000</ts>
    <user>Gertrude</user>
    <text>Working with `Gizra/elm-all-set`, but every time I try to import it in my Main module I get this:

```
Failed to compile.

./src/Main.elm
Error: Compiler process exited with error Compilation failed
Success! Compiled 1 module.
elm: Map.!: given key is not an element in the map
CallStack (from HasCallStack):
  error, called at ./Data/Map/Internal.hs:610:17 in containers-0.5.11.0-K2TDqgYtGUcKxAY1UqVZ3R:Data.Map.Internal
 @ ./src/index.js 2:0-33 4:0-3
 @ multi /home/annaia/.nvm/versions/node/v10.15.3/lib/node_modules/create-elm-app/config/polyfills.js /home/annaia/.nvm/versions/node/v10.15.3/lib/node_modules/create-elm-app/scripts/utils/webpackHotDevClient.js /home/annaia/.nvm/versions/node/v10.15.3/lib/node_modules/create-elm-app/node_modules/react-error-overlay/lib/index.js ./src/index.js
```</text>
  </message>
  <message conversation_id="1202">
    <ts>2019-04-15T07:45:25.191200</ts>
    <user>Lynne</user>
    <text>That's a known issue. Do you compile with `--debug` flag?</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:49:06.191400</ts>
    <user>Gertrude</user>
    <text>probably? I don't know specifically what the create-elm-app scripts do, but I'm assuming so</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:49:37.191600</ts>
    <user>Nana</user>
    <text>Yeah that's a pretty common one when you use `--debug`</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:50:04.191800</ts>
    <user>Nana</user>
    <text>Clearing elm-stuff sometimes helps</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:50:42.192000</ts>
    <user>Gertrude</user>
    <text>not in this case it seems. :disappointed:</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:50:50.192200</ts>
    <user>Lynne</user>
    <text>`create-elm-app` does turn on debugging depending on `ELM_DEBUGGER` environment variable:
&lt;https://github.com/halfzebra/create-elm-app/blob/master/config/webpack.config.dev.js#L177&gt;</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:51:09.192400</ts>
    <user>Lynne</user>
    <text>Try setting it to "false" when running your build</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:51:23.192700</ts>
    <user>Gertrude</user>
    <text>production builds work though, so yeah. I'll try the env var</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:51:42.192900</ts>
    <user>Lynne</user>
    <text>Beware that you will lose access to debugger in this case</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:52:09.193100</ts>
    <user>Gertrude</user>
    <text>that's the thingy that shows the app state right?</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:52:11.193300</ts>
    <user>Lynne</user>
    <text>If you use it there is a workaround but it requires building elm compiler from source</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:52:14.193500</ts>
    <user>Lynne</user>
    <text>Yep</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:52:26.193700</ts>
    <user>Gertrude</user>
    <text>blargh. that's a bummer.</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:52:58.193900</ts>
    <user>Jae</user>
    <text>As an alternative to the built in debugger, you can try this. &lt;https://www.npmjs.com/package/elm-monitor&gt;</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:54:02.194200</ts>
    <user>Gertrude</user>
    <text>assuming I switch then, is there an elmapp config key to turn off the debugger?</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:55:04.194400</ts>
    <user>Lynne</user>
    <text>There was also an initiative on building devTools for Elm: &lt;https://github.com/opvasger/elm-devtools&gt;</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:55:20.194600</ts>
    <user>Lynne</user>
    <text>It does not seem updated since then though</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:55:25.194800</ts>
    <user>Jae</user>
    <text>I don't know if there is one.  I just comment out the line of JS code required to make elm-monitor work</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:55:49.195200</ts>
    <user>Lynne</user>
    <text>Wait, are you talking about `create-elm-app`?</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:57:06.195400</ts>
    <user>Lynne</user>
    <text>`elm-monitor` does seem being a complicated solution</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:58:31.195600</ts>
    <user>Lynne</user>
    <text>Another option is to ditch `Gizra/elm-all-set` as it is basically a wrapper of `AssocList`</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:58:41.195800</ts>
    <user>Lynne</user>
    <text>Plenty of choices for you :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:58:59.196000</ts>
    <user>Gertrude</user>
    <text>Well, but that depends if the issue is in the set wrapper or in AssocList</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:59:07.196200</ts>
    <user>Lynne</user>
    <text>It does</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:59:13.196400</ts>
    <user>Gertrude</user>
    <text>it's the Set part that I need</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:59:13.196600</ts>
    <user>Lynne</user>
    <text>Still an option though</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:59:26.196800</ts>
    <user>Nana</user>
    <text>yeah you could just use `AssocList.Dict a ()`</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T07:59:26.197100</ts>
    <user>Lynne</user>
    <text>I use AssocList and `--debug` and don't have this issue with building</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:01:36.197300</ts>
    <user>Gertrude</user>
    <text>Yeah, and I could always just use my own wrapper that does what I need.</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:02:34.197500</ts>
    <user>Lynne</user>
    <text>Pretty much copy&amp;amp;paste the module</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:02:41.197700</ts>
    <user>Lynne</user>
    <text>I can hardly imagine it changes</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:02:50.197900</ts>
    <user>Nana</user>
    <text>I think the bug has to do with creating a `type alias` for a type from another module</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:03:37.198100</ts>
    <user>Gertrude</user>
    <text>It's interesting that it only happens when I use it from my Main module.</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:03:51.198300</ts>
    <user>Gertrude</user>
    <text>I have been using it fine in another module for ages now</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:12:28.198600</ts>
    <user>Gertrude</user>
    <text>OK, this is weird. I cannot get this to typecheck now.</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:12:53.198800</ts>
    <user>Lynne</user>
    <text>What did you do?</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:13:15.199000</ts>
    <user>Gertrude</user>
    <text>I threw together a quick wrapper of my own, and I get this same error I was getting before the compiler crash:</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:13:23.199200</ts>
    <user>Gertrude</user>
    <text>```
Failed to compile.

./src/Main.elm
Error: Compiler process exited with error Compilation failed
[==================================================] - 1 / 1-- TYPE MISMATCH ------------- /home/annaia/projects/futuhours-next/src/Main.elm

I cannot update the `editingWeek` field like this:

202|                     ( { model | editingWeek = Just { week = wk, days = AnySet.empty, entries = [] } }, Cmd.none )
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This `Just` call produces:

    Maybe { days : AnySet.AnySet a, entries : List T.Entry, week : Int }

But it should be:

    Maybe T.EditingWeek

Note: The record update syntax does not allow you to change the type of fields.
You can achieve that with record constructors or the record literal syntax.
Detected errors in 1 module.                                         
 @ ./src/index.js 2:0-33 4:0-3
 @ multi /home/annaia/.nvm/versions/node/v10.15.3/lib/node_modules/create-elm-app/config/polyfills.js /home/annaia/.nvm/versions/node/v10.15.3/lib/node_modules/create-elm-app/scripts/utils/webpackHotDevClient.js /home/annaia/.nvm/versions/node/v10.15.3/lib/node_modules/create-elm-app/node_modules/react-error-overlay/lib/index.js ./src/index.js
```</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:14:07.199400</ts>
    <user>Gertrude</user>
    <text>But this should work. EditingWeek is defined thus:

```
type alias EditingWeek =
    { week : Int
    , days : AnySet Workday
    , entries : List Entry
    }
```</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:18:10.199700</ts>
    <user>Gertrude</user>
    <text>I switched to using the literal syntax in the call and it works now.</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:19:08.199900</ts>
    <user>Gertrude</user>
    <text>(ie. I changed it from the raw record to explicitly calling `T.EditingWeek`)</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:20:24.200100</ts>
    <user>Lynne</user>
    <text>So instead of doing `Just { week = wk, days = AnySet.empty, entries = [] } }` you do `Just (T.EditingWeek ...)` now, is it correct?</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:20:32.200400</ts>
    <user>Gertrude</user>
    <text>Yeah.</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:20:35.200600</ts>
    <user>Lynne</user>
    <text>That's weird</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:20:43.200800</ts>
    <user>Gertrude</user>
    <text>That seemed to be enough to tip it off that it's the right type.</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:21:29.201000</ts>
    <user>Lynne</user>
    <text>Seems like you have two `AnySet` types defined in different modules but having the same shape</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:21:55.201200</ts>
    <user>Lynne</user>
    <text>May it be the case?</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:22:10.201400</ts>
    <user>Gertrude</user>
    <text>Nope.</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:22:14.201600</ts>
    <user>Lynne</user>
    <text>Hm</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:22:22.201800</ts>
    <user>Lynne</user>
    <text>Then I don't understand :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:22:37.202000</ts>
    <user>Gertrude</user>
    <text>There's only one AnySet, defined in the AnySet module, and imported elsewhere as needed.</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:22:56.202200</ts>
    <user>Gertrude</user>
    <text>Though, the place where EditingWeek is defined is elsewhere from Model, which is elsewhere from Main</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:23:05.202400</ts>
    <user>Gertrude</user>
    <text>I wonder if it's struggling to follow the dependency chain?</text>
  </message>
  <message conversation_id="1203">
    <ts>2019-04-15T08:26:26.202600</ts>
    <user>Lynne</user>
    <text>No idea</text>
  </message>
  <message conversation_id="1204">
    <ts>2019-04-15T08:41:38.202800</ts>
    <user>Sharon</user>
    <text>can you extract this part `{ week = wk, days = AnySet.empty, entries = [] }` to a helper function , with the type annotation `helper : Int -&amp;gt; EditingWeek`  and then update the code like this `( { model | editingWeek = Just (helper wk) }, Cmd.none )` and see about which part the compiler complains then?</text>
  </message>
  <message conversation_id="1204">
    <ts>2019-04-15T08:46:49.203000</ts>
    <user>Sharon</user>
    <text>oh you found a solution. I didn't catch that. Doesn't matter then :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:15:57.203800</ts>
    <user>Ocie</user>
    <text>&lt;@Dorotha&gt; Trying to do something similar. Is &lt;https://package.elm-lang.org/packages/elm-lang/svg/latest/Svg&gt; what you're talking about? If so, is it actually upgraded to 0.19 yet?</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:16:33.203900</ts>
    <user>Dorotha</user>
    <text>It is here &lt;https://package.elm-lang.org/packages/elm/svg/latest/Svg&gt;</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:16:56.204100</ts>
    <user>Dorotha</user>
    <text>`elm-lang` has become `elm` in 0.19</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:18:13.204300</ts>
    <user>Ocie</user>
    <text>ah thanks for that. Even google results are confused</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:23:28.205200</ts>
    <user>Ocie</user>
    <text>Does anyone have any strong opinions on canvas vs svg in Elm? Are either of the libraries that support them in Elm in better or worse shape at the moment?</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:26:32.205400</ts>
    <user>Dorotha</user>
    <text>There is no canvas API in pure Elm, except for webgl canvas.</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:35:56.205700</ts>
    <user>Ocie</user>
    <text>Isn't &lt;https://package.elm-lang.org/packages/joakin/elm-canvas/latest/&gt;?</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:36:30.205900</ts>
    <user>Ocie</user>
    <text>or you're saying that they depend on webgl under the hood</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:41:18.206100</ts>
    <user>Dorotha</user>
    <text>I see, it requires a custom element to be defined on a page, if you’re happy with that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1205">
    <ts>2019-04-15T10:41:24.206300</ts>
    <user>Dorotha</user>
    <text>The api looks nice</text>
  </message>
  <message conversation_id="1206">
    <ts>2019-04-15T12:29:58.208300</ts>
    <user>Babara</user>
    <text>(With the caveat that I’m well aware of and pretty much in support of Elm’s stance on native/kernel code! :star:) If I’m understanding the state of things today, it looks like there’s no way to use &lt;https://github.com/google/flatbuffers&gt; with Elm today without a step where you serialize into/out of Elm data structures along the way?</text>
  </message>
  <message conversation_id="1206">
    <ts>2019-04-15T12:52:46.209800</ts>
    <user>Alicia</user>
    <text>&lt;@Babara&gt; looking through the flatbuffers code on github (&lt;https://github.com/google/flatbuffers/blob/master/js/flatbuffers.js&gt;) it looks like a pure elm version could be made using `elm/bytes`, it seems like it would be a good bit of work to do it though</text>
  </message>
  <message conversation_id="1206">
    <ts>2019-04-15T12:53:10.210100</ts>
    <user>Babara</user>
    <text>Ooooh, I forgot elm/bytes exists.</text>
  </message>
  <message conversation_id="1206">
    <ts>2019-04-15T12:53:16.210500</ts>
    <user>Babara</user>
    <text>(I’m willing to do a good bit of work to make this viable.)</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:19:14.213400</ts>
    <user>Marcus</user>
    <text>I'm blanking on the right way to do this. I want to conditionally add some HTML elements to a list. In Ruby, I'd do something like this:

```
elements = []
elements &amp;lt;&amp;lt; header_element if show_header?
elements &amp;lt;&amp;lt; is_new? ? new_element : old_element
```

That syntax is a bit janky, but gets at what I want to do. What's the best way to do this in Elm?</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:22:14.215700</ts>
    <user>Hoa</user>
    <text>One idea is to have a function that accept the original list, add a new element via `:: ` or just return the orginal list if it is not the case</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:25:07.219300</ts>
    <user>Marcus</user>
    <text>I tried writing it out like this:

```
[ if entry.showHeader then headerElement else text ""
, if entry.new then newElement else oldElement
]
```

It looked okay, until Elm format had its way with it.</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:26:30.220500</ts>
    <user>Marcus</user>
    <text>&lt;@Hoa&gt; True, but it feels like such a simple thing, that scattering the functionality across a few functions feels like overkill.</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:27:34.222200</ts>
    <user>Chae</user>
    <text>```
someFunc elements showHeader isNew =
    elements
        |&amp;gt; (\items -&amp;gt; if showHeader then headerEl :: items else items)
        |&amp;gt; (\items -&amp;gt; if isNew then newElement :: items else oldElement :: items)
```
If you wanted it to be “more” functional, though I think the way you have it is nice</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:28:05.222600</ts>
    <user>Chae</user>
    <text>elm format might chang the formatting on that too though</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:28:15.222800</ts>
    <user>Marcus</user>
    <text>LOL. It's a cruel mistress.</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:29:32.223900</ts>
    <user>Hoa</user>
    <text>OK, so in your case you always have a “second path” - you don’t really need that my “…just return the original list if it is not the case”</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:41:41.224700</ts>
    <user>Leoma</user>
    <text>&lt;@Marcus&gt; For conditional list building you can just do:
```
list bool =
    [ "a list" ]
        ++ (if bool then
                [ "bool was here" ]

            else
                []
           )
```</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:45:50.225100</ts>
    <user>Marcus</user>
    <text>&lt;@Leoma&gt; nice</text>
  </message>
  <message conversation_id="1208">
    <ts>2019-04-15T15:46:56.225300</ts>
    <user>Leoma</user>
    <text>```
appendIf : Bool -&amp;gt; a -&amp;gt; List a -&amp;gt; List a
appendIf bool a list =
    if bool then
        list ++ [ a ]

    else
        list


items =
    [ "a", "b", "c" ]
        |&amp;gt; appendIf True "d"
        |&amp;gt; appendIf False "123"
```</text>
  </message>
  <message conversation_id="1207">
    <ts>2019-04-15T15:48:45.226300</ts>
    <user>Leoma</user>
    <text>Keep in mind that the more efficient list operation is prepending… So perhaps consider `prependIf` and use `::` if performance becomes a concern.</text>
  </message>
  <message conversation_id="1209">
    <ts>2019-04-15T17:00:10.228800</ts>
    <user>Mirtha</user>
    <text>[Not sure if this is the right channel] Hello all, I am trying to use `"mdgriffith/style-elements": "5.0.1"` package while also already using ` "mdgriffith/elm-ui": "1.1.0"` for my UI. the only reason for using ` mdgriffith/style-element` is the support for `Element.Attributes` for things like `percent` . however when I have both the packages i get the below error  ```The Main module has an ambiguous import:

    import Element.Keyed

I found multiple module with that name though:

    exposed by mdgriffith/style-elements 5.0.1
    exposed by mdgriffith/elm-ui 1.1.0

It looks like the name clash is in your dependencies, which is out of your
control. Elm does not support this scenario right now, but it may be worthwhile.
Please open an issue describing your scenario so we can gather more usage
information!```

Any help would be much appreciated</text>
  </message>
  <message conversation_id="1209">
    <ts>2019-04-15T17:05:46.230100</ts>
    <user>Velia</user>
    <text>You cannot use both packages, they are conflicting.
Can't you use &lt;https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/Element#fillPortion&gt; instead of percents?</text>
  </message>
  <message conversation_id="1209">
    <ts>2019-04-15T17:06:20.231000</ts>
    <user>Mirtha</user>
    <text>aaahhhhh. Thank you</text>
  </message>
  <message conversation_id="1209">
    <ts>2019-04-15T17:06:24.231100</ts>
    <user>Dayna</user>
    <text>&lt;@Mirtha&gt; Isn't style-elements the old version of elm-ui? That would explain the namespace conflict.</text>
  </message>
  <message conversation_id="1209">
    <ts>2019-04-15T17:07:06.231700</ts>
    <user>Mirtha</user>
    <text>Thanks &lt;@Dayna&gt;</text>
  </message>
  <message conversation_id="1209">
    <ts>2019-04-15T17:09:34.231800</ts>
    <user>Velia</user>
    <text>Yes, there are actually three versions:
- elm-ui
- style-elements
- stylish-elephants</text>
  </message>
  <message conversation_id="1209">
    <ts>2019-04-15T17:21:25.232100</ts>
    <user>Jana</user>
    <text>A way of implementing “holes” a la Idris in Elm.</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:20:08.232400</ts>
    <user>Vonda</user>
    <text>Anyone have experience (or insight) in something like this? Clicking the various code locations in the error logs here leads me to functions like Dict.get and Dict.map.
This only happens in Chrome, not in Firefox. Based on issues like &lt;https://github.com/elm/core/issues/986&gt; I figured it was fixed in Elm 0.19 but I’m getting this issue even after upgrading to 0.19.</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:23:52.234900</ts>
    <user>Earlean</user>
    <text>&lt;@Vonda&gt; that issue was fixed, but you'll get this error for other things that use deep recursion</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:26:40.235300</ts>
    <user>Vonda</user>
    <text>so should i just be looking through my elm code for any recursion that i can improve?</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:26:58.235600</ts>
    <user>Vonda</user>
    <text>or is there a more streamlined way to find the actual source of the issue</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:28:06.236600</ts>
    <user>Vonda</user>
    <text>also worth noting that i only randomly got this issue one day, when the previous day it worked fine. i’ve entered a lot of data into the database over the months, clearly on that day i reached the limit for this recursion issue</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:28:48.237100</ts>
    <user>Vonda</user>
    <text>additionally worth noting that building the app and loading that built version avoids this issue. i only get it when locally deploying in dev mode</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:29:48.237600</ts>
    <user>Earlean</user>
    <text>Oh, it might be the Elm debugger</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:30:13.238100</ts>
    <user>Earlean</user>
    <text>It tends to struggle as your model gets larger</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:30:49.238600</ts>
    <user>Earlean</user>
    <text>Try compiling without `--debug`</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:32:55.238900</ts>
    <user>Vonda</user>
    <text>yeah compiling without `--debug` fixed it</text>
  </message>
  <message conversation_id="1210">
    <ts>2019-04-15T19:33:44.239300</ts>
    <user>Vonda</user>
    <text>good to know. should i just avoid using the debugger then? or is there a solution</text>
  </message>
  <message conversation_id="1211">
    <ts>2019-04-15T22:47:16.242300</ts>
    <user>Isaiah</user>
    <text>If I am writing a library where I depend on a couple other libraries, but I need to expose/re-export the data types for the user, how should I go about doing that? I also don't want the user to have to manually install several libraries just to use mine, and then have to add a ton of import declarations. I thought about including a subset of these libraries in my own, or writing my own implementation to reduce dependencies and allow better integration with my library code.</text>
  </message>
  <message conversation_id="1211">
    <ts>2019-04-15T22:51:18.243400</ts>
    <user>Earnest</user>
    <text>&lt;@Isaiah&gt; Not sure if you can re-export imported types, might need to write type aliases for them and export that. But w/ the current compiler version, I think that'll break the debugger for library consumers.</text>
  </message>
  <message conversation_id="1211">
    <ts>2019-04-15T22:52:31.244600</ts>
    <user>Earlean</user>
    <text>Type alias are what you want. But note that there isn't a way to re-export constructors</text>
  </message>
  <message conversation_id="1211">
    <ts>2019-04-15T22:56:16.245100</ts>
    <user>Isaiah</user>
    <text>That's the problem then, because the user needs to have access to the constructors</text>
  </message>
  <message conversation_id="1211">
    <ts>2019-04-15T22:57:11.246000</ts>
    <user>Isaiah</user>
    <text>the libraries are small (single file, under 1k loc) so including them in my own should be fine, and also give me a chance to fix any issues and remove code I don't need</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:37:15.247800</ts>
    <user>Erlene</user>
    <text>I'm seeking advice on how to make a single javascript function call. Basically it needs to be done once, but it doesn't matter if it's called more often. I know you can't make javascript calls in Elm (anymore), but this library isn't likely to be package anytime soon. Any tips on how to do this with Elm 0.19?</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:37:44.248400</ts>
    <user>Erlene</user>
    <text>The javascript function itself is pure. And it would be so handy if I could simply call it from Elm.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:38:52.249400</ts>
    <user>Kris</user>
    <text>Your options are either ports, something like &lt;https://medium.com/@jjant/making-elm-unsafe-cc6435495af2&gt; or the proxy trick.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:39:44.250700</ts>
    <user>Earlean</user>
    <text>&lt;@Erlene&gt; why is it called only once? Can you call it before you start Elm?</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:40:54.251400</ts>
    <user>Erlene</user>
    <text>&lt;@Earlean&gt; yes, I possibly could, but the problem is I need its value somewhere deep inside. Passing that all the time is annoying.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:41:10.251800</ts>
    <user>Erlene</user>
    <text>Basically what this is is calculating the size of the horizontal scrollbar.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:41:33.252300</ts>
    <user>Erlene</user>
    <text>The javascript does that by inserting an element, measuring the scrollbar, and removing the element from the DOM again</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:41:55.252800</ts>
    <user>Erlene</user>
    <text>Not something I can see myself doing in Elm. And it needs to be done once, not all the time I'm drawing elements that need to know this stuff.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:42:55.253500</ts>
    <user>Erlene</user>
    <text>&lt;@Kris&gt; hmm, replacing code won't work for me, although it's an interesting technique. What's the proxy trick?</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:47:15.254200</ts>
    <user>Dede</user>
    <text>Seems like something you compute in JS, pass as a Flag, and store on your Model so that it’s available throughout…?</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:51:40.254800</ts>
    <user>Erlene</user>
    <text>&lt;@Dede&gt; yeah, that might be the cleanest, although getting it where it needs to be isn't :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:58:06.255100</ts>
    <user>Kris</user>
    <text>&lt;@Erlene&gt; &lt;https://ellie-app.com/5gTZKqtg9HTa1&gt;</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-15T23:58:09.255400</ts>
    <user>Kris</user>
    <text>that's the gist of it</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:00:21.255800</ts>
    <user>Erlene</user>
    <text>Yeah, that's basically passing it as a flag isn't it?</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:00:41.256400</ts>
    <user>Erlene</user>
    <text>I need just the value once, so the ability to call it as a function isn't needed.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:00:49.256700</ts>
    <user>Erlene</user>
    <text>Perhaps I simply need a Kernel module...</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:02:02.257200</ts>
    <user>Dede</user>
    <text>I feel like if it’s hard to get data from your Model to some part of your code, something’s gotten overly convoluted.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:02:19.257500</ts>
    <user>Dede</user>
    <text>I realize I am entirely unaware of your design constraints, however.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:06:17.258500</ts>
    <user>Erlene</user>
    <text>&lt;@Dede&gt; normally I'd agree, but this is a library used by others. So if I can avoid having to pass this in, but have the value simply available, that would make it easiest.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:06:47.259200</ts>
    <user>Dede</user>
    <text>Could they pass it in once?</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:06:56.259500</ts>
    <user>Earlean</user>
    <text>Elm really should have a system for "values that are constant for the life of the program but aren't known at compile time"</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:07:21.260300</ts>
    <user>Earlean</user>
    <text>flags really should be that system</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:09:28.262800</ts>
    <user>Dede</user>
    <text>I’m thinking something very roughly where you `init` your `Widgets` library and then the API is actually returned in a record that you can store on the Model and call directly.
```
module Widgets exposing (init, Widgets)

type alias Widgets = {
  button: ButtonOptions -&amp;gt; Button,
  ...
}

init: Int -&amp;gt; Widgets
...
```</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:10:02.263600</ts>
    <user>Dede</user>
    <text>This goes against the advice that says never store closures on the Model, but given that the arguments are immutable, I think it’s OK.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:10:51.264600</ts>
    <user>Earlean</user>
    <text>that's the common solution for things like this in functional languages, but then use lose the benefits of `import`</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:11:32.265300</ts>
    <user>Earlean</user>
    <text>`import` is, "give me direct access to these global constants in this module"</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:11:54.265700</ts>
    <user>Earlean</user>
    <text>it would be great if you could do the same but for runtime constants</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:12:03.265900</ts>
    <user>Dede</user>
    <text>Fair enough.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:12:50.267000</ts>
    <user>Earlean</user>
    <text>eg. `import flags` and `flags` gives you access to the `flags` value passed in to `init`</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:15:58.268200</ts>
    <user>Kris</user>
    <text>yeah having to pass everything around is horrible</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:25:17.270600</ts>
    <user>Rosanne</user>
    <text>Building a program without thinking where the facts come from and how they're passed around makes the program harder to refactor when the program grows and becomes more configurable. I'd prefer better systems for passing around information, instead of changing the way imports work or anything like that. Haskell has the Reader type, but it could be something completely different.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:26:00.271000</ts>
    <user>Earlean</user>
    <text>but the same could be said for `import`</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:28:08.271800</ts>
    <user>Earlean</user>
    <text>never use `import` only ever receive functions as parameters.</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:31:15.272600</ts>
    <user>Earlean</user>
    <text>which is great advice and gives you great seams for future changes, but it's a real pain</text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:35:23.273800</ts>
    <user>Kris</user>
    <text>Reader doesn’t improve the situation that much in that regards </text>
  </message>
  <message conversation_id="1212">
    <ts>2019-04-16T00:35:52.274800</ts>
    <user>Kris</user>
    <text>It’s still literally the same as passing a parameter, with the annoyance of having to do it even for constants </text>
  </message>
  <message conversation_id="1213">
    <ts>2019-04-16T01:48:40.277600</ts>
    <user>Dorsey</user>
    <text>Hello! Is there a way to access response headers using &lt;https://package.elm-lang.org/packages/ohanhi/remotedata-http/latest/&gt; by &lt;@Bert&gt;? My program is interacting with GitHub API (v3) and the pagination data is exposed as headers. Do I need to use plain `elm/http` with `expectStringResponse`?</text>
  </message>
  <message conversation_id="1213">
    <ts>2019-04-16T01:53:04.277900</ts>
    <user>Earlean</user>
    <text>Yep, you will</text>
  </message>
  <message conversation_id="1213">
    <ts>2019-04-16T01:57:24.278200</ts>
    <user>Dorsey</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:13:41.278500</ts>
    <user>Carrie</user>
    <text>Can elm import JS files?</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:14:45.279100</ts>
    <user>Allyn</user>
    <text>Not really; you can interact with native JS lib through ports</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:15:17.279300</ts>
    <user>Allyn</user>
    <text>&lt;https://guide.elm-lang.org/interop/ports.html&gt;</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:23:05.280000</ts>
    <user>Carrie</user>
    <text>Oh, I see.thanks</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:26:59.280300</ts>
    <user>Carrie</user>
    <text>But I saw the phrase "import Native. Ace" at &lt;https://github.com/DenisKolodin/elm-ace/blob/master/src/Ace.elm&gt;. Isn't he importing the Ace. JS file?</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:34:51.281400</ts>
    <user>Lynne</user>
    <text>There used to be so called native modules - specially written JS files which one could "import" and use within Elm app, but they are gone in 0.19</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:35:07.281700</ts>
    <user>Lynne</user>
    <text>The example you found will only work in Elm 0.18</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:37:13.281900</ts>
    <user>Carrie</user>
    <text>Oh, that's it.</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:37:25.282200</ts>
    <user>Carrie</user>
    <text>thanks</text>
  </message>
  <message conversation_id="1214">
    <ts>2019-04-16T03:39:29.282300</ts>
    <user>Velia</user>
    <text>This discussion is relevant:
&lt;https://discourse.elm-lang.org/t/how-to-re-export-values-and-types-from-a-module/3142&gt;</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:44:44.285600</ts>
    <user>Dorsey</user>
    <text>Hey! I'm using `AssocList` imported as `Dict`, but then one of the other modules (Http) returns a standard `Dict`. How can I avoid naming clashes? Preferably I would just convert the `Dict` into `AssocList.Dict`. Is there something like `AssocList.fromDict`?</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:47:04.286200</ts>
    <user>Velia</user>
    <text>For the name clash, you cannot import it as `Dict` if you already use `Dict` in the same module.

For the conversion:
```
Dict.toList dict
|&amp;gt; AssocList.fromList
```</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:47:31.286400</ts>
    <user>Dorsey</user>
    <text>Yeah. That's where I'm coming from.</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:48:04.286600</ts>
    <user>Dorsey</user>
    <text>I thought there may be some clever way to avoid importing `Dict` at all.</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:50:08.286800</ts>
    <user>Velia</user>
    <text>I think you can put the conversion function in a another module, so you can directly convert without importing Dict (if you don't need it in signatures)</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:51:05.287000</ts>
    <user>Velia</user>
    <text>But it's not included in `AssocList` itself.</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:51:06.287200</ts>
    <user>Dorsey</user>
    <text>Sure. I'll just do `import Dict as StandardDict` for now. It adds to the noise, but separate module would add even more IMO.</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:51:29.287400</ts>
    <user>Nana</user>
    <text>I changed to using it like `import AssocList as Assoc` and `Assoc.get` etc.</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:52:05.287600</ts>
    <user>Dorsey</user>
    <text>Oh, that's nice! I'll do it too &lt;@Nana&gt;.</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:53:16.287800</ts>
    <user>Nana</user>
    <text>I found it a bit confusing to "impersonate" a data type like that, not very explicit</text>
  </message>
  <message conversation_id="1215">
    <ts>2019-04-16T04:54:21.288200</ts>
    <user>Dorsey</user>
    <text>Yeah, good point. I hope in some future realease of Elm standard Dict will have the same properties as AssocList.Dict and the whole confusion will go away.</text>
  </message>
  <message conversation_id="1216">
    <ts>2019-04-16T05:03:15.290100</ts>
    <user>Dayna</user>
    <text>Hey all, I'm writing a parser for template strings (for example `there are {numberOfPeople} online`) and I want to extract the placeholder name, what I've come up is:
```
succeed identity
       |. chompUntil "{"
       |. symbol "{"
       |= getChompedString (chompWhile (\c -&amp;gt; c /= '}'))
```
but it seems kind of convoluted. Is there any way to make it simpler?</text>
  </message>
  <message conversation_id="1217">
    <ts>2019-04-16T05:33:59.290400</ts>
    <user>Carrie</user>
    <text>What can I do to convert my current 0.19 version of elm to 0.18 version?</text>
  </message>
  <message conversation_id="1217">
    <ts>2019-04-16T05:40:41.290900</ts>
    <user>Rosario</user>
    <text>look at the docs for npm install</text>
  </message>
  <message conversation_id="1217">
    <ts>2019-04-16T05:41:11.291200</ts>
    <user>Rosario</user>
    <text>`npm install elm@0.18` or someting</text>
  </message>
  <message conversation_id="1218">
    <ts>2019-04-16T05:43:44.293000</ts>
    <user>Cyndy</user>
    <text>Hello! Would you mind sharing the slackbot (the one that prompts us to be inclusive in the way we communicate) settings? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1217">
    <ts>2019-04-16T05:43:47.293300</ts>
    <user>Rosario</user>
    <text>`npm show elm` shows you the tags. You want `npm install elm@elm0.18.0`</text>
  </message>
  <message conversation_id="1217">
    <ts>2019-04-16T05:49:36.293400</ts>
    <user>Velia</user>
    <text>It does not look convoluted to me, why do you think so?

You could use:
```
succeed identity
       |. chompUntil "{"
       |. symbol "{"
       |= getChompedString (chompUntil "}")
       |. symbol "}"
```
But it's not that different.

As an aside, beware this bug (position is consumed, not the string):
&lt;https://github.com/elm/parser/issues/20&gt;</text>
  </message>
  <message conversation_id="1217">
    <ts>2019-04-16T05:54:23.293700</ts>
    <user>Syble</user>
    <text>You could use identity as well, something like that :
```
[ "element" ] |&amp;gt;
  if bool then (::) "plus" else identity
```</text>
  </message>
  <message conversation_id="1218">
    <ts>2019-04-16T08:33:50.294700</ts>
    <user>Bert</user>
    <text>I think &lt;#C3FKL0A8H|admin-help&gt; is where you might get it</text>
  </message>
  <message conversation_id="1219">
    <ts>2019-04-16T08:52:15.295600</ts>
    <user>Nancy</user>
    <text>hi, does anyone here run `npm audit`? currently seeing all of these issues:</text>
  </message>
  <message conversation_id="1219">
    <ts>2019-04-16T09:07:39.296000</ts>
    <user>Huong</user>
    <text>Yeah, the team's aware. It's due to a dependency of `binstall`, so the solution needs to bubble up</text>
  </message>
  <message conversation_id="1219">
    <ts>2019-04-16T09:13:14.296300</ts>
    <user>Nancy</user>
    <text>will this need a new release of the affected packages?</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:26:56.298200</ts>
    <user>Hoyt</user>
    <text>Morning folks. If I have a bunch of html that is not really changing except for a very small, almost single div (think removing a class from one span and adding the class to another), would making everything else keyed have a useful impact on the performance of the vdom diffing? Say if the keys were at the highest level, so it would know it didn’t have to go further down to compare?</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:28:13.298500</ts>
    <user>Sabra</user>
    <text>Is it a function that returns HTML or is a literal?</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:29:09.298800</ts>
    <user>Hoyt</user>
    <text>function</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:29:16.299000</ts>
    <user>Hoyt</user>
    <text>Returning `Html msg`</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:29:39.299300</ts>
    <user>Cyndy</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:30:08.299500</ts>
    <user>Hoyt</user>
    <text>Wondering if keying my container nodes (say, header/footer/etc) would be worthwhile from a speed perspective. I’m going to be syncing up with an external time (basically syncing with speech), so curious if I can eek out all the perf I can from the vdom</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:31:29.299700</ts>
    <user>Huong</user>
    <text>Put whatever possible in a top level value, and only the bare minimum in a function using those static values. Due to &lt;https://github.com/elm/virtual-dom/blob/master/src/Elm/Kernel/VirtualDom.js#L706&gt; such static bits aren't diffed or patched</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:33:07.299900</ts>
    <user>Sabra</user>
    <text>If I remember correctly, a reference to a view won’t trigger a re-render:

```
footer =
  Html.div [] (Html.text "feet")
```

is :ok_hand:, but:

```
footer text =
  Html.div [] (Html.text text)
```

would need to be `lazy`’d</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:33:49.300100</ts>
    <user>Sabra</user>
    <text>Oh yes, what &lt;@Huong&gt; said :point_up:</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:34:31.300300</ts>
    <user>Hoyt</user>
    <text>Thanks &lt;@Huong&gt;!</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:34:35.300500</ts>
    <user>Huong</user>
    <text>Keying is a useful opt when dealing with lists where it updates are usually to one of those (dynamic) entries. I wouldn't recommend it for a largely static view</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:35:31.300800</ts>
    <user>Hoyt</user>
    <text>A good amount of the rest of the page is dynamically generated on load, but doesn’t change as we play the audio and sync the text. Think subtitling some audio while highlighting the words as they are spoken.</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:36:03.301000</ts>
    <user>Hoyt</user>
    <text>So, I’d want to be able to give as many hints to the diffing engine as I can that “almost the entirety of the page isn’t going to change, so don’t worry”</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:36:25.301200</ts>
    <user>Hoyt</user>
    <text>It isn’t really “static” from the classical sense as much as “static” from the “it isn’t changing while we are playing audio and showing subtitles”</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:36:30.301400</ts>
    <user>Nana</user>
    <text>wouldn't `lazy` be the best?</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:36:32.301600</ts>
    <user>Huong</user>
    <text>Right, lazy those bits up. If the shape of the structure doesn't change between renders, I doubt keyed is going to help</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:36:38.301800</ts>
    <user>Hoyt</user>
    <text>That’s what I was thinking of. YAY!</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:36:58.302000</ts>
    <user>Hoyt</user>
    <text>Thanks so much! I’m glad to be back doing elm full-time a lot because you all are so great!</text>
  </message>
  <message conversation_id="1220">
    <ts>2019-04-16T10:38:30.302500</ts>
    <user>Huong</user>
    <text>Keyed helps in preventing diffs when things swap / are added / removed in a list of nodes, but if the shape stays the same and updates happen to a deeper subtree, it won't really help that much. Lazy, however, should definitely help!</text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:07:36.303600</ts>
    <user>Zane</user>
    <text>Hello! I can't install anymore, I have remove all my node_modules and now I'm stuck at elmi-to-json &amp;gt; binwrap-install</text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:07:47.304000</ts>
    <user>Zane</user>
    <text>Are there any issues with the elm package server?</text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:09:30.304900</ts>
    <user>Danika</user>
    <text>I was installing elm on a new machine this weekend </text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:09:57.305800</ts>
    <user>Danika</user>
    <text>I found that that step just takes a long time and has no output, leave it and wait</text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:10:45.306500</ts>
    <user>Zane</user>
    <text>I’m stuck for 2 hours here…</text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:11:07.306900</ts>
    <user>Danika</user>
    <text>Hmmm then I’m not sure what to suggest </text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:11:09.307100</ts>
    <user>Zane</user>
    <text>:disappointed:</text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:11:58.307200</ts>
    <user>Hoyt</user>
    <text>Yeah, I was thinking of Lazy, got my memory confused a bit. Thanks for the clarification.</text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:32:08.308100</ts>
    <user>Alicia</user>
    <text>&lt;@Zane&gt; for that part it should only be hitting npm’s servers, not elm’s package server, what happens if you try to install other npm packages?</text>
  </message>
  <message conversation_id="1221">
    <ts>2019-04-16T11:35:54.309100</ts>
    <user>Zane</user>
    <text>it works with other npm package, it looks like it is binwrap-install related problem</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T11:51:20.309400</ts>
    <user>Alicia</user>
    <text>what OS are you on?</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T11:52:26.309900</ts>
    <user>Alicia</user>
    <text>if you can, try with `yarn` to install them, or run with `npm install --loglevel=verbose` for more detailed output</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T11:54:06.310800</ts>
    <user>Zane</user>
    <text>the issue appears on macos and inside docker container when running ci</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T11:56:05.312000</ts>
    <user>Zane</user>
    <text>nothing special appears on the logs, it just stuck when doing &amp;gt; binwrap-install</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:01:41.312800</ts>
    <user>Alicia</user>
    <text>it happens in both macos and the docker container for you? is the `node_modules` folder being mounted into the docker container?</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:01:48.313200</ts>
    <user>Alicia</user>
    <text>my guess it is a permissions issue</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:01:48.313300</ts>
    <user>Hoyt</user>
    <text>Anyone know what to do in this case?
```
¯\_(ツ)_/¯ 🐈  $elm install eeue56/elm-html-test
-- CORRUPT JSON ----------------------------------------------------------------

The elm.json for elm-community/list-extra 1.0.0 got corrupted somehow.

I removed it from my file cache, so if it was some transient error it should be
fixed if you try the same thing again. Please report this if it seems like an
Elm problem though!
```
:disappointed:</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:02:17.313600</ts>
    <user>Hoyt</user>
    <text>oddly, I’m not on 1.0.0 of `list-extra`</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:02:50.314300</ts>
    <user>Alicia</user>
    <text>&lt;@Hoyt&gt; it looks like `elm-html-test` is a 0.18 package, I think that is the error you get when you try to install a 0.18 package in 0.19</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:02:56.314600</ts>
    <user>Alicia</user>
    <text>error message could definitely be better</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:03:00.314700</ts>
    <user>Hoyt</user>
    <text>ah, good catch. Thanks!</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:03:39.315100</ts>
    <user>Hoyt</user>
    <text>Ah, I missed the “this isn’t for 0.19” banner on it. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:04:13.315500</ts>
    <user>Hoyt</user>
    <text>Oh, wait, that’s on elm-test. Is there a 0.19 version of elm-html-test somewhere?</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:05:17.316000</ts>
    <user>Hoyt</user>
    <text>oh, interesting. It looks like it is being merged into elm-test</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:05:18.316100</ts>
    <user>Alicia</user>
    <text>looks like it got merged into elm-test? &lt;https://github.com/eeue56/elm-html-test/issues/69&gt;</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:05:25.316300</ts>
    <user>Alicia</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:06:15.316700</ts>
    <user>Hoyt</user>
    <text>Just saw that. As always thanks to &lt;@Leonie&gt; for the comment that points there.</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:06:53.317000</ts>
    <user>Hoyt</user>
    <text>Now to just figure out how to get to it and use it in elm-test :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:07:26.317300</ts>
    <user>Hoyt</user>
    <text>guess I’ll just to use it and see what happens. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:12:37.318200</ts>
    <user>Kristopher</user>
    <text>is there any new news in elm world, as far as extending support for the web platform?</text>
  </message>
  <message conversation_id="1222">
    <ts>2019-04-16T12:14:39.319000</ts>
    <user>Alicia</user>
    <text>&lt;@Kristopher&gt; what type of extensions are you looking for?</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T13:55:13.319200</ts>
    <user>Isaiah</user>
    <text>I recently changed the directory name from `XMPP` to `Xmpp`, but somehow the compiler is confused. I cleared out the cache (`rm -rf elm-stuff`) but this error message persists. I already ran into trouble earlier because macos uses case-insensitive file/directory names. Any idea how to solve this?</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:01:37.320000</ts>
    <user>Isaiah</user>
    <text>Of course, if I do what the compiler suggests, it gives me the opposite error.</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:02:21.320400</ts>
    <user>Isaiah</user>
    <text>Is there a hidden cache somewhere I am not aware of?</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:05:02.320900</ts>
    <user>Dede</user>
    <text>I wonder if Mac's file attributes captured the original name somehow?</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:05:39.321500</ts>
    <user>Dede</user>
    <text>try hitting the directory name with `mdls DIRNAME` and/or `xattr DIRNAME` and see if something weird is hanging out there?</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:05:43.321700</ts>
    <user>Dede</user>
    <text>I'm totally speculating here.</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:06:59.322200</ts>
    <user>Isaiah</user>
    <text>running `mdls XMPP` and `mdls Xmpp` both say the name is `Xmpp`</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:07:17.322600</ts>
    <user>Isaiah</user>
    <text>I'd expect that since the macos filesystem is case-insensitive</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:07:24.322900</ts>
    <user>Isaiah</user>
    <text>XMPP and Xmpp are the same according to mac</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:08:41.323300</ts>
    <user>Isaiah</user>
    <text>`xattr` returns nothing</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:08:43.323400</ts>
    <user>Dede</user>
    <text>Yeah, that was a wild guess.  I don't know of any caches outside of elm-stuff.</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:09:11.323800</ts>
    <user>Isaiah</user>
    <text>another point for using linux</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:09:24.324100</ts>
    <user>Dede</user>
    <text>I develop Elm on mac and linux and haven't hit this (yet?)</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:10:07.324500</ts>
    <user>Isaiah</user>
    <text>well I just did and it completely stopped my work in its tracks</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:10:10.324700</ts>
    <user>Isaiah</user>
    <text>I have no idea what to do</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:12:00.324900</ts>
    <user>Leoma</user>
    <text>rename the directory to something different, then back?</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:13:15.325100</ts>
    <user>Dede</user>
    <text>Yeah, I like renaming it to `Foo` and updating the module to match.</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:13:31.325300</ts>
    <user>Dede</user>
    <text>If that doesn't compile, you have a thread to pull on.</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:23:14.325700</ts>
    <user>Isaiah</user>
    <text>Thanks. I tried that and it revealed the real issue. I had missed a single `import` declaration in a different module that was using the old module name. That is really weird, and potentially a compiler bug</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:26:41.326900</ts>
    <user>Dede</user>
    <text>Wow.</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:26:54.327100</ts>
    <user>Dede</user>
    <text>That seems like an interaction between the MacOS filesystem and the compiler.</text>
  </message>
  <message conversation_id="1223">
    <ts>2019-04-16T14:27:23.327300</ts>
    <user>Dede</user>
    <text>The compiler goes looking for something at XMPP/... and finds it, of course, and then gets irritated that the internal name doesn't match the string it was looking for.</text>
  </message>
  <message conversation_id="1224">
    <ts>2019-04-16T14:55:18.327600</ts>
    <user>Marcus</user>
    <text>&lt;@Syble&gt; Interesting. I didn't know about `identity`.</text>
  </message>
  <message conversation_id="1225">
    <ts>2019-04-16T16:00:27.328500</ts>
    <user>Rosario</user>
    <text>It would be nice if old packages were clearly marked as deprecated on github and packages.elm, maybe even in `elm install`?</text>
  </message>
  <message conversation_id="1225">
    <ts>2019-04-16T16:01:14.329400</ts>
    <user>Rosario</user>
    <text>It's a bit confusing that there are all the elm-community packages and their elm-explorations replacements, for example, or the elm-lang/ vs elm/ packages.</text>
  </message>
  <message conversation_id="1225">
    <ts>2019-04-16T16:09:13.331200</ts>
    <user>Isaiah</user>
    <text>the current ones have an `elm.json` instead of an `elm-package.json` since 0.19 was released. Or are you saying there are deprecated packages showing up on the &lt;http://package.elm-lang.org|package.elm-lang.org&gt; site?</text>
  </message>
  <message conversation_id="1226">
    <ts>2019-04-16T16:12:17.331400</ts>
    <user>Carman</user>
    <text>I think all of the `elm-lang` repos are set to archived mode?</text>
  </message>
  <message conversation_id="1227">
    <ts>2019-04-16T17:17:04.333300</ts>
    <user>Shakita</user>
    <text>I see the `elm/bytes` package, but haven't upgraded to 0.19 yet. Is there any way to get bytes from an http post in 0.18?</text>
  </message>
  <message conversation_id="1227">
    <ts>2019-04-16T17:20:09.333400</ts>
    <user>Carman</user>
    <text>No, I believe `elm/bytes` is only 0.19+</text>
  </message>
  <message conversation_id="1227">
    <ts>2019-04-16T17:20:50.334000</ts>
    <user>Shakita</user>
    <text>Yes. I understand that, but are there any other packages or solutions for doing something similar in 0.18?</text>
  </message>
  <message conversation_id="1227">
    <ts>2019-04-16T17:21:22.334600</ts>
    <user>Carman</user>
    <text>Not that I'm aware of</text>
  </message>
  <message conversation_id="1227">
    <ts>2019-04-16T17:23:03.336300</ts>
    <user>Shakita</user>
    <text>Thanks! We haven't had a compelling reason to do the work of upgrading to 0.19, but this might be it. We're using some packages that aren't going to upgrade, so replacing them will be more than trivial.</text>
  </message>
  <message conversation_id="1228">
    <ts>2019-04-16T17:23:17.336500</ts>
    <user>Allyn</user>
    <text>Hello. I’m wondering what is in the interest of using
```
UrlBuilder.crossorigin 
    "&lt;https://example.com:8042&gt;"
    [ "over", "there" ]
    [ string "name" "ferret" ]
```
instead of a simple string like “&lt;https://example.com:8042/over/there?name=ferret&gt;” ? Is there anything else than the concatenation of path items and query parameters ?</text>
  </message>
  <message conversation_id="1227">
    <ts>2019-04-16T17:29:02.336600</ts>
    <user>Shenika</user>
    <text>The path components and parameters need to be URL encoded as well: &lt;https://en.wikipedia.org/wiki/Percent-encoding&gt;</text>
  </message>
  <message conversation_id="1228">
    <ts>2019-04-16T17:35:02.337100</ts>
    <user>Allyn</user>
    <text>Thanks &lt;@Shenika&gt;</text>
  </message>
  <message conversation_id="1229">
    <ts>2019-04-16T17:57:32.337500</ts>
    <user>Jeanene</user>
    <text>anyone have tips on migrating elm/http 1.0 -&amp;gt; 2.0?</text>
  </message>
  <message conversation_id="1230">
    <ts>2019-04-16T18:23:31.338300</ts>
    <user>Kathryn</user>
    <text>Does anyone know how to configure Rails webpacker 4 to compile for production?</text>
  </message>
  <message conversation_id="1229">
    <ts>2019-04-16T18:24:14.338400</ts>
    <user>Jeanene</user>
    <text>kinda--what’s your issue?</text>
  </message>
  <message conversation_id="1229">
    <ts>2019-04-16T18:57:25.338600</ts>
    <user>Jeanene</user>
    <text>I’m mainly stuck around converting `Http.expectJson decoder` -&amp;gt; `Http.expectJson Cmd decoder`…</text>
  </message>
  <message conversation_id="1231">
    <ts>2019-04-16T20:21:37.338900</ts>
    <user>Augustus</user>
    <text>The important but there is that the runtime will send the response through your update loop at using the `Cmd` in your example. So if your decoder returns a `FooBar` you would want to pass in a `Msg` constructor that is a `Result Error FooBar`</text>
  </message>
  <message conversation_id="1231">
    <ts>2019-04-16T20:23:01.339100</ts>
    <user>Augustus</user>
    <text>Like `type Msg = GotFooBar (Result Http.Error FooBar)`, you would use `GotFooBar` as the `Cmd`</text>
  </message>
  <message conversation_id="1231">
    <ts>2019-04-16T20:28:58.339400</ts>
    <user>Augustus</user>
    <text>Sorry, after re-reading your question I see you probably know all that...in our app we made a wrapper around `Http.task` that handles retries and stuff for us and we use our decoders we had in Http 1.0.0</text>
  </message>
  <message conversation_id="1229">
    <ts>2019-04-16T21:52:25.339700</ts>
    <user>Jeanene</user>
    <text>Yeah…can you share how you used task? I’m at a total loss right now.</text>
  </message>
  <message conversation_id="1229">
    <ts>2019-04-16T21:53:43.339900</ts>
    <user>Jeanene</user>
    <text>```
delete : Endpoint -&amp;gt; Cred -&amp;gt; Body -&amp;gt; Decoder a -&amp;gt; Cmd a
delete url cred body decoder =
    Endpoint.request
        { method = "DELETE"
        , url = url
        , expect = Http.expectJson decoder
        , headers = [ credHeader cred ]
        , body = body
        , timeout = Nothing
        , withCredentials = False
        }
```
For example--expectJson wants `#Decoder a -&amp;gt; Expect msg#`…</text>
  </message>
  <message conversation_id="1231">
    <ts>2019-04-17T01:24:29.340100</ts>
    <user>Augustus</user>
    <text>I think the only thing you have to add is another param for the `Msg` you want to generate, like
```
delete : Endpoint -&amp;gt; Cred -&amp;gt; Body -&amp;gt; Expect msg -&amp;gt; Cmd msg
delete url cred body expect =
    Endpoint.request
        { method = "DELETE"
        , url = url
        , expect = expect
        , headers = [ credHeader cred ]
        , body = body
        , timeout = Nothing
        , withCredentials = False
        }
```

Then you can pass in a `Http.expectJson SomeMsg yourDecoder` for the `expect` param</text>
  </message>
  <message conversation_id="1231">
    <ts>2019-04-17T01:25:30.340300</ts>
    <user>Augustus</user>
    <text>you could also pass in the decoder and `Msg` separately, but I think it is easier to read using this way</text>
  </message>
  <message conversation_id="1232">
    <ts>2019-04-17T01:53:57.340500</ts>
    <user>Kathryn</user>
    <text>When Webpack compiles my assets, I get the following warning in the console on production: "Compiled in DEV mode."
I have no clue where to set the  --optimize flag.</text>
  </message>
  <message conversation_id="1232">
    <ts>2019-04-17T02:12:47.340800</ts>
    <user>Jarvis</user>
    <text>maybe needs optimize:true in default options obj? &lt;https://github.com/rails/webpacker/blob/353bda39b24c05364cac37adb1479d8dcd60c593/lib/install/loaders/elm.js&gt;</text>
  </message>
  <message conversation_id="1232">
    <ts>2019-04-17T02:14:40.341000</ts>
    <user>Jarvis</user>
    <text>not sure how i landed don that commit but master is no different</text>
  </message>
  <message conversation_id="1231">
    <ts>2019-04-17T04:24:59.342100</ts>
    <user>Rosario</user>
    <text>&lt;@Isaiah&gt; &lt;@Carman&gt; They still show up on &lt;http://package.elm-lang.org|package.elm-lang.org&gt;. It would be nice if there was a redirect or a notice at the top of the page saying "This is deprecated, this way for elm 0.19" or something</text>
  </message>
  <message conversation_id="1233">
    <ts>2019-04-17T05:24:02.342400</ts>
    <user>Lynne</user>
    <text>If it is Rails, may it depend on `RAILS_ENV` variable then? Did you try running build with `RAILS_ENV=development` prepended to the command?</text>
  </message>
  <message conversation_id="1234">
    <ts>2019-04-17T07:55:48.345200</ts>
    <user>Vilma</user>
    <text>does anyone have any experience using the `Reader` monad for “View” functions? I’m thinking about learning about it to try to simplify my code on some of the more complicated views I’ve got</text>
  </message>
  <message conversation_id="1234">
    <ts>2019-04-17T07:56:01.345500</ts>
    <user>Vilma</user>
    <text>from what I read it seems to make sense to use the Reader monad for that</text>
  </message>
  <message conversation_id="1234">
    <ts>2019-04-17T07:56:15.345800</ts>
    <user>Vilma</user>
    <text>but I’ve got zero knowledge about monads, though</text>
  </message>
  <message conversation_id="1234">
    <ts>2019-04-17T07:56:51.346000</ts>
    <user>Jeanene</user>
    <text>What’s your webpacker.yml?</text>
  </message>
  <message conversation_id="1234">
    <ts>2019-04-17T07:57:46.346500</ts>
    <user>Danika</user>
    <text>Why do you think that would help? </text>
  </message>
  <message conversation_id="1235">
    <ts>2019-04-17T08:12:04.346700</ts>
    <user>Kathryn</user>
    <text>&lt;https://gist.github.com/hansv/79e3b91eb38ea06d47886da5083cbd0b&gt;</text>
  </message>
  <message conversation_id="1234">
    <ts>2019-04-17T08:32:11.346900</ts>
    <user>Jeanene</user>
    <text>That looks just like mine. :slightly_smiling_face: I just realized I’m in the same boat as you! :disappointed:</text>
  </message>
  <message conversation_id="1234">
    <ts>2019-04-17T08:33:43.347100</ts>
    <user>Jeanene</user>
    <text>I think I’ve ignored it b/c my package is just 40kb :confused:</text>
  </message>
  <message conversation_id="1234">
    <ts>2019-04-17T08:34:33.347300</ts>
    <user>Jeanene</user>
    <text>Thanks &lt;@Augustus&gt;…This is gonna take a while for me. I’m trying to refactor elm-spa-example to use elm/http 2.0 and it’s a B.</text>
  </message>
  <message conversation_id="1234">
    <ts>2019-04-17T08:36:13.347500</ts>
    <user>Kathryn</user>
    <text>The quest for Webpacker configuration continues.</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T08:47:40.347800</ts>
    <user>Agustin</user>
    <text>Does webpacker auto configure elm?</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T08:47:45.348000</ts>
    <user>Agustin</user>
    <text>Is it a bug with them?</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T08:51:02.348500</ts>
    <user>Lionel</user>
    <text>they should probably migrate to *Parcel* instead :joy:</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T08:51:22.348700</ts>
    <user>Danika</user>
    <text>:package:</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T08:51:45.348800</ts>
    <user>Agustin</user>
    <text>The config you need to generate is, `options: { optimize: true }` inside the `use` statement for `elm-webpack-loader` (assuming you’re using that)</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T08:52:42.349500</ts>
    <user>Agustin</user>
    <text>I’m not sure Rails has Parcel integration :wink:</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T08:52:55.349900</ts>
    <user>Agustin</user>
    <text>(If they’re using webpack*er* then its because of Rails, not Elm).</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T08:53:47.350100</ts>
    <user>Danika</user>
    <text>there's this: &lt;https://github.com/michaldarda/parcel-rails&gt;</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T08:53:58.350500</ts>
    <user>Danika</user>
    <text>I've never touched ruby/rails in my life, though</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T09:09:08.350900</ts>
    <user>Agustin</user>
    <text>Webpacker became the blessed way to do assets in Rails</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T09:09:16.351200</ts>
    <user>Agustin</user>
    <text>Thus it is considered a good idea ™ to use it</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T09:10:25.351400</ts>
    <user>Dayna</user>
    <text>You can't make use of the Monad instance of Reader in Elm. In Haskell, for example, you can write
```
view :: Reader Session
view = do
     session &amp;lt;- ask
     return $ div [] [] -- etc.
```
In Elm it's pretty much useless because you would have to do the wrapping/unwrapping yourself and it doesn't bring a lot of value, I would avoid it.</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T09:23:17.351900</ts>
    <user>Kathryn</user>
    <text>Thanks Jon, that did the trick. Rails generates an elm.js file and that is where I added the optimize: true. Deployed and I get no more warnings about dev mode.</text>
  </message>
  <message conversation_id="1237">
    <ts>2019-04-17T09:42:46.352700</ts>
    <user>Carman</user>
    <text>It's important to keep those pages (and packages) working for those who are still running apps on 0.18 and older</text>
  </message>
  <message conversation_id="1237">
    <ts>2019-04-17T09:43:08.352900</ts>
    <user>Carman</user>
    <text>I agree having a banner at the top saying "This package only supports Elm 0.18" would be a big win</text>
  </message>
  <message conversation_id="1238">
    <ts>2019-04-17T10:11:26.353300</ts>
    <user>Jeanene</user>
    <text>:clap::skin-tone-3: is this in the docs for elm-webpack-loader??</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T10:12:00.353500</ts>
    <user>Jarvis</user>
    <text>passes options thru to elm make</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T10:13:44.353700</ts>
    <user>Vilma</user>
    <text>from what I read it seems to be meant to quickly access large configs/structures without having to pass it around so much? in this case it would be helpful to access the model and its fields in a large view, wherever it was necessary</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T10:16:28.353900</ts>
    <user>Vilma</user>
    <text>is there something similar which works in Elm?</text>
  </message>
  <message conversation_id="1236">
    <ts>2019-04-17T10:24:35.354100</ts>
    <user>Dayna</user>
    <text>Not really, there is a Reader library for Elm: &lt;https://package.elm-lang.org/packages/bigbinary/elm-reader/latest/&gt;, you can try that out if you want</text>
  </message>
  <message conversation_id="1239">
    <ts>2019-04-17T15:06:21.357700</ts>
    <user>Moshe</user>
    <text>I’m sure I solved this in the past already but maybe someone can give me a pointer: why do my `post` request do not correctly set a session cookie when sent from Elm but are correctly set when I send the requests from a rest client (like insomnia or postman). Do I need to set a custom/extra header in Elm that allows setting session cookies?</text>
  </message>
  <message conversation_id="1240">
    <ts>2019-04-17T16:01:38.358800</ts>
    <user>Wendell</user>
    <text>How do people connect to AWS RDS via Elm? I found ktonon/elm-aws-core but it looks like it hasn’t been updated for 0.19 yet.</text>
  </message>
  <message conversation_id="1240">
    <ts>2019-04-17T16:02:14.359500</ts>
    <user>Wendell</user>
    <text>I suppose I could just make Http requests but wondering if there is something nicer for querying.</text>
  </message>
  <message conversation_id="1240">
    <ts>2019-04-17T16:09:54.360700</ts>
    <user>Alicia</user>
    <text>&lt;@Wendell&gt; I would do it from the server side rather than on the front end, to do it on the frontend you’d need to give the client side credentials to hit the database and they wouldn’t be secret there</text>
  </message>
  <message conversation_id="1240">
    <ts>2019-04-17T16:11:22.360800</ts>
    <user>Alicia</user>
    <text>it is likely CORS preventing it, you have to use `withCredentials` to pass them &lt;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials&gt;
And the server you are connecting to has to return an `Access-Control-Allow-Credentials` header saying that it is OK</text>
  </message>
  <message conversation_id="1240">
    <ts>2019-04-17T16:27:18.362100</ts>
    <user>Wendell</user>
    <text>Yeah that’s a good point. I’ve been trying to test the limits of serverless but this might be pushing it too far.</text>
  </message>
  <message conversation_id="1241">
    <ts>2019-04-17T16:55:42.363600</ts>
    <user>Alicia</user>
    <text>I’m not familiar with doing it in serverless, but I’m sure something similar to what you can do on AWS is possible, there you’d have an API gateway with some routes set up to call your lambda function, and then the lambda function could run the actual query</text>
  </message>
  <message conversation_id="1242">
    <ts>2019-04-17T17:25:43.363800</ts>
    <user>Mozella</user>
    <text>in elm you can do that here</text>
  </message>
  <message conversation_id="1242">
    <ts>2019-04-17T17:25:45.364000</ts>
    <user>Mozella</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/http/latest/Http#riskyRequest&gt;</text>
  </message>
  <message conversation_id="1242">
    <ts>2019-04-17T17:29:11.365000</ts>
    <user>Isaiah</user>
    <text>Is there a simple way to xor two strings together? I notice that I can convert them to bytes using `elm/bytes`, but then there are no available functions for operations on those bytes</text>
  </message>
  <message conversation_id="1242">
    <ts>2019-04-17T17:34:56.365100</ts>
    <user>Huong</user>
    <text>This problem _seems_ simpler than it is. There are multiple ways to represent the same string in bytes - utf8, utf-16, utf-32, ...</text>
  </message>
  <message conversation_id="1242">
    <ts>2019-04-17T17:35:34.365300</ts>
    <user>Huong</user>
    <text>so you have to pick a binary representation, and then xor. Then there's the issue that the result may no longer be a valid representation of a string</text>
  </message>
  <message conversation_id="1242">
    <ts>2019-04-17T17:37:18.365500</ts>
    <user>Huong</user>
    <text>So what I'd probably do, is, use something like &lt;https://package.elm-lang.org/packages/zwilias/elm-utf-tools/latest&gt;, pick a representation, turn both strings into the same type of bytes, `List.map2 Bitwise.xor` them, and finally try to turn the result into a string again</text>
  </message>
  <message conversation_id="1242">
    <ts>2019-04-17T17:47:54.365800</ts>
    <user>Isaiah</user>
    <text>Thanks, I'll give that a try</text>
  </message>
  <message conversation_id="1243">
    <ts>2019-04-17T17:56:03.366000</ts>
    <user>Dede</user>
    <text>What’s your objective in doing this?</text>
  </message>
  <message conversation_id="1242">
    <ts>2019-04-17T17:56:59.366200</ts>
    <user>Isaiah</user>
    <text>I'm implementing the SCRAM-SHA-1 algorithm for authentication</text>
  </message>
  <message conversation_id="1243">
    <ts>2019-04-17T18:01:46.366400</ts>
    <user>Dede</user>
    <text>I’m guessing the formal defintion defines with painstaking precision how you’re supposed to represent all the bits :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1242">
    <ts>2019-04-17T18:05:18.366600</ts>
    <user>Huong</user>
    <text>Yeah, username/password should be encoded as utf8 and normalized using the SASLpref profile of the stringprep algorithm (or, alternatively, disallow non US-ASCII unicode codepoints)</text>
  </message>
  <message conversation_id="1244">
    <ts>2019-04-17T18:28:09.368200</ts>
    <user>Millie</user>
    <text>I'm wondering how to have `onKeyDown` and `preventDefault` (e.g. for the `TAB` key in a game. Can anybody help? :)</text>
  </message>
  <message conversation_id="1244">
    <ts>2019-04-17T18:28:39.368300</ts>
    <user>Millie</user>
    <text>I guess here are no options: &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events#onKeyDown&gt;</text>
  </message>
  <message conversation_id="1244">
    <ts>2019-04-17T18:29:02.368500</ts>
    <user>Millie</user>
    <text>But a custom html event listener could work: &lt;https://package.elm-lang.org/packages/elm/html/1.0.0/Html-Events#on&gt;</text>
  </message>
  <message conversation_id="1244">
    <ts>2019-04-17T18:30:31.368700</ts>
    <user>Dede</user>
    <text>I think you do it with this: &lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Events#preventDefaultOn&gt;</text>
  </message>
  <message conversation_id="1244">
    <ts>2019-04-17T18:30:40.368900</ts>
    <user>Dede</user>
    <text>Which is like `on` but with the extra magic.</text>
  </message>
  <message conversation_id="1244">
    <ts>2019-04-17T19:19:01.369100</ts>
    <user>Millie</user>
    <text>Jap, I think I've trouble registering keypresses. Could be me doing something wrong.</text>
  </message>
  <message conversation_id="1244">
    <ts>2019-04-17T19:20:28.369300</ts>
    <user>Millie</user>
    <text>```listener =
    preventDefaultOn "keydown" &amp;lt;| Decode.map (\m -&amp;gt; ( m, True )) &amp;lt;| Decode.succeed (KeyDown "a")
``` as en example</text>
  </message>
  <message conversation_id="1244">
    <ts>2019-04-17T19:29:17.369600</ts>
    <user>Millie</user>
    <text>This helped: It has to do with focus and tabindex: &lt;https://package.elm-lang.org/packages/Gizra/elm-keyboard-event/latest/Keyboard-Event&gt;</text>
  </message>
  <message conversation_id="1244">
    <ts>2019-04-17T19:49:21.369800</ts>
    <user>Millie</user>
    <text>So this is the example how to use the "outermost" div and focus and tabIndex to workaround the missing preventDefault in "onKeyDown": &lt;https://gizra.github.io/elm-keyboard-event/OutermostDiv.html&gt;</text>
  </message>
  <message conversation_id="1245">
    <ts>2019-04-17T21:46:02.370400</ts>
    <user>Carrie</user>
    <text>I used to have a 0.19 version of elm, but today I installed a 0.18 version of elm using "npm install -g", which made me unable to open elm now. Who has a good solution?</text>
  </message>
  <message conversation_id="1245">
    <ts>2019-04-17T22:27:32.370500</ts>
    <user>Lashawnda</user>
    <text>you can either `npm uninstall -g elm` to remove the npm binary and let the original binary take precedence again. or you can `npm install -g elm@0.19` and get the latest version through npm</text>
  </message>
  <message conversation_id="1245">
    <ts>2019-04-17T22:49:06.370700</ts>
    <user>Carrie</user>
    <text>I tried and it turned out that this was the case.</text>
  </message>
  <message conversation_id="1245">
    <ts>2019-04-17T22:59:32.371100</ts>
    <user>Rebekah</user>
    <text>Download installer
&lt;https://guide.elm-lang.org/install.html&gt;</text>
  </message>
  <message conversation_id="1246">
    <ts>2019-04-18T00:49:44.371300</ts>
    <user>Carrie</user>
    <text>What should I do? There are already two versions of my computer.</text>
  </message>
  <message conversation_id="1247">
    <ts>2019-04-18T02:13:19.371700</ts>
    <user>Moshe</user>
    <text>&lt;@Alicia&gt; Aaaah. Right! I think that was the problem. Thanks for the heads up :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:27:55.373400</ts>
    <user>Erlene</user>
    <text>Is there any way in Elm to detect if on focusout the entire container loses focus? You get this event for child nodes as well if you navigate between child nodes for example. But I would like to know when the entire container loses "focus". In JavaScript people seem to do that by checking if the document.activeElement is not a child dom node of the container. Not a technique that readily works with Elm... Has anyone suggestions?</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:31:42.373800</ts>
    <user>Earnest</user>
    <text>Write an event handler for focusout that stops propagation?</text>
  </message>
  <message conversation_id="1246">
    <ts>2019-04-18T03:32:05.374200</ts>
    <user>Erlene</user>
    <text>&lt;@Earnest&gt; the focusout fires only once.</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:32:25.374500</ts>
    <user>Erlene</user>
    <text>But if you set it on a container it seems it is also set on the children.</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:32:41.375000</ts>
    <user>Erlene</user>
    <text>So when one of the children loses focus, it fires too.</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:33:04.375500</ts>
    <user>Erlene</user>
    <text>At the moment I can't seem to distinguish between the case where the focus moves between children, or away from the container.</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:34:04.375900</ts>
    <user>Earnest</user>
    <text>So it's still called on the parent if you stop propagation from the children?</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:36:41.379100</ts>
    <user>Danika</user>
    <text>Html events bubble by default, the event object has a `target` field that is the *specific* element that fired the event. 

In javascript I might do something like: `e.target.matches(‘#myParentNode’)` or `e.target === e.currentTarget`.

The second solution should be doable in Elm no problem. </text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:40:35.380500</ts>
    <user>Erlene</user>
    <text>&lt;@Earnest&gt; haven't tried this exactly, but the child has the blur element which does not bubble. Exactly what I need. But there's only one focusout event,  not one for the child and then one for the parent.</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:40:49.380800</ts>
    <user>Erlene</user>
    <text>&lt;@Danika&gt; the target is always the child node.</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:41:14.381500</ts>
    <user>Erlene</user>
    <text>The child node has tabindex="0", so it has focus. If I tab out, the focusout event fires with target this child node.</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:41:53.382300</ts>
    <user>Danika</user>
    <text>But the currentTarget is your parent node, they aren’t the same.</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:46:17.383300</ts>
    <user>Erlene</user>
    <text>&lt;@Danika&gt; true, but that doesn't help me. If I move between child nodes currentTarget is still the container element.</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:47:11.384100</ts>
    <user>Danika</user>
    <text>Oh I misread the last sentence, hmm..</text>
  </message>
  <message conversation_id="1248">
    <ts>2019-04-18T03:49:27.384700</ts>
    <user>Erlene</user>
    <text>Ah, it seems I can actually use relatedTarget. Just need to see if the parent of related target is my container or not. Let me try that.</text>
  </message>
  <message conversation_id="1249">
    <ts>2019-04-18T04:32:01.385500</ts>
    <user>Emilee</user>
    <text>what's the nicest way to update Browser.Dom.getElement exactly when the result would change? so i guess on window size change, layout change and scroll position change?</text>
  </message>
  <message conversation_id="1249">
    <ts>2019-04-18T04:32:25.386100</ts>
    <user>Emilee</user>
    <text>i could just chuck an animationFrame sub in there, but would that needlessly be called when nothing's being repainted?</text>
  </message>
  <message conversation_id="1249">
    <ts>2019-04-18T04:32:59.386600</ts>
    <user>Emilee</user>
    <text>(i want to have a dropdown open to the top or bottom depending on where there's more space^^)</text>
  </message>
  <message conversation_id="1249">
    <ts>2019-04-18T04:39:48.387200</ts>
    <user>Danika</user>
    <text>&lt;@Erlene&gt; I didnt know about relatedTarget, hope it works! </text>
  </message>
  <message conversation_id="1249">
    <ts>2019-04-18T04:46:28.387400</ts>
    <user>Carlo</user>
    <text>Anyone have opinions about Apprun.js</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T05:12:23.388000</ts>
    <user>Danika</user>
    <text>I’m working on something similar but for audio apps, so hopefully some positive ones</text>
  </message>
  <message conversation_id="1251">
    <ts>2019-04-18T06:46:17.388300</ts>
    <user>Velia</user>
    <text>related: &lt;https://elmlang.slack.com/archives/C4F9NBLR1/p1554859211186000?thread_ts=1554856744.185800&amp;amp;cid=C4F9NBLR1&gt;</text>
  </message>
  <message conversation_id="1251">
    <ts>2019-04-18T07:01:30.389000</ts>
    <user>Emilee</user>
    <text>hmm, when my viewport gets smaller than my scene the result of `getViewport` doesn't shrink any further O.o</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T07:58:05.390000</ts>
    <user>Emilee</user>
    <text>so basically the smallest `height` of a viewport i get is the `height` of the scene</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T07:58:14.390200</ts>
    <user>Earlean</user>
    <text>&lt;@Emilee&gt; all the tasks in `Browser.Dom` wait for the next animation frame</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:00:12.390700</ts>
    <user>Earlean</user>
    <text>a viewport is always smaller than the scene that it's a viewport in to</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:00:28.391000</ts>
    <user>Emilee</user>
    <text>umm, i have exactly the opposite situation</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:00:44.391300</ts>
    <user>Emilee</user>
    <text>ah okay, not opposite</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:00:51.391700</ts>
    <user>Emilee</user>
    <text>it's always the same size here</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:01:19.392200</ts>
    <user>Earlean</user>
    <text>sure, you'll get that if your viewport is the whole scene</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:02:00.392800</ts>
    <user>Emilee</user>
    <text>yes, but if my viewport is smaller than the scene (my browser gets a scrollbar, etc.) they're still the same height</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:02:06.393000</ts>
    <user>Emilee</user>
    <text>as far as elm is concerned</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:05:03.393600</ts>
    <user>Dede</user>
    <text>Are you familiar with this?  &lt;https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html&gt;</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:05:12.394000</ts>
    <user>Dede</user>
    <text>(I’m not sure if it’s relevant, I’m just pattern matching.)</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:09:53.394900</ts>
    <user>Earlean</user>
    <text>&lt;@Emilee&gt; is it the window that has the scrollbar? or an element inside the window?</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:27:53.395300</ts>
    <user>Emilee</user>
    <text>should be the window. the viewport *does* move (changes `y`) when i scroll</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:28:35.395800</ts>
    <user>Emilee</user>
    <text>sorry I kind of got interrupted by a cleanup bug that I had to fix^^</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:29:11.396500</ts>
    <user>Emilee</user>
    <text>Turns out if you keep an animation frame sub running your elm app doesn't get gc'ed :sweat_smile:</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T08:29:44.396900</ts>
    <user>Emilee</user>
    <text>I'll have to look into the viewport stuff again tomorrow, i gotta go now. thanks for all your help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1252">
    <ts>2019-04-18T09:52:18.398500</ts>
    <user>Caron</user>
    <text>Was anyone faced with problems with the Firefox GC using most of the time due to full nursery ? Elm or otherwise.</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T11:11:02.400700</ts>
    <user>Isaiah</user>
    <text>I ran into problems because I had over 20,000 virtual dom nodes. I solved it by only constructing vnodes that were visible on screen, bringing it down to under 700 vnodes.</text>
  </message>
  <message conversation_id="1253">
    <ts>2019-04-18T11:13:00.401600</ts>
    <user>Phoebe</user>
    <text>I do not see Time Travel Debugger. Is there any way to activate that?</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T11:13:21.401800</ts>
    <user>Dede</user>
    <text>~It's not available in 0.19~ (edited: see discussion below around 1:18pm)</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T11:13:52.402200</ts>
    <user>Phoebe</user>
    <text>:open_mouth: is it going to appear anytime soon?</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T11:17:37.402900</ts>
    <user>Dede</user>
    <text>AFAIK there's no timeline for.. well, anything, in core Elm.  It will happen when it happens.  Welcome to life with a 0.x environment :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T11:24:06.403700</ts>
    <user>Dede</user>
    <text>It's worth noting that building with -debug is generally risky/broken right now.  If you see a `map!` haskell error, remove the debug flag and try again.  (You can still use `Debug.log` and friends, though.)</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T11:26:13.405900</ts>
    <user>Isaiah</user>
    <text>Is anyone using the Web Crypto API? I’m not satisfied with the available crypto libraries in elm, especially since they support hardly any algorithms, and not the ones I need.</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T11:28:23.408500</ts>
    <user>Isaiah</user>
    <text>Writing crypto libraries in elm is also painfully difficult because of a lack of binary datatypes, unsigned int8, and no ability to mutate if necessary (like for hashing thousands of iterations)</text>
  </message>
  <message conversation_id="1254">
    <ts>2019-04-18T11:55:42.409300</ts>
    <user>Caron</user>
    <text>Thanks for the tip. What tool sdo you use to profile that ?</text>
  </message>
  <message conversation_id="1255">
    <ts>2019-04-18T13:18:01.411400</ts>
    <user>Maida</user>
    <text>&lt;@Phoebe&gt; the current debugger is a time traveling debugger. You can navigate back in time by clicking the messages. There are some issues with the current version but I’m hoping that `0.19.1` will fix them.</text>
  </message>
  <message conversation_id="1255">
    <ts>2019-04-18T13:20:28.413500</ts>
    <user>Maida</user>
    <text>also, keepi in mind that the original time traveling debugger was from a moment in time when Elm did not have http calls. Any kind of side-effects (http calls) do not play well with the debugger BUT it works wonderful for regular updates caused by user interaction.</text>
  </message>
  <message conversation_id="1255">
    <ts>2019-04-18T13:20:58.414100</ts>
    <user>Dede</user>
    <text>Wait, does the current debugger actually restore state when you click the old messages?  I apologize for my wrong answer.</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T13:29:20.414500</ts>
    <user>Isaiah</user>
    <text>yes</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:26:16.414900</ts>
    <user>Monte</user>
    <text>Is there any documentation available for elm reactor?</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:27:31.415500</ts>
    <user>Monte</user>
    <text>I need a custom index.html and can't find how to make it work with 0.19</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:28:20.416700</ts>
    <user>Dede</user>
    <text>Elm reactor just serves straight from elm files.  If you need a custom index.html you may be able to view it as a file but more likely need a web server. </text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:29:00.417800</ts>
    <user>Dede</user>
    <text>`npm install -g http-server` can get you a long way.  </text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:29:13.418200</ts>
    <user>Monte</user>
    <text>There used to be a way to serve custom html, &lt;https://blog.ilias.xyz/elm-reactor-and-custom-html-9e7143553807&gt;
Has that feature been removed?</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:29:39.419100</ts>
    <user>Nana</user>
    <text>Parcel or elm-live is probably easier though :smile:</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:29:54.419300</ts>
    <user>Monte</user>
    <text>Right, I had forgotten about elm-live</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:30:46.420700</ts>
    <user>Dede</user>
    <text>`http-server` just runs at the command line in the directory you want to serve.  I think it’s pretty easy.  </text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:31:50.421000</ts>
    <user>Monte</user>
    <text>&lt;@Dede&gt; it's not what I need.</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:39:09.421900</ts>
    <user>Vilma</user>
    <text>what is the difference between `&amp;gt;&amp;gt;` and `|&amp;gt;`? Are these two snippets the same?

```
Task.map Success
  &amp;gt;&amp;gt; Task.onError (Failure &amp;gt;&amp;gt; Task.succeed)

Task.map Success
  |&amp;gt; Task.onError (Task.succeed Failure)
```</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:39:47.422400</ts>
    <user>Monte</user>
    <text>&lt;@Vilma&gt; no, they are different</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:40:07.422800</ts>
    <user>Monte</user>
    <text>`|&amp;gt;` takes a value and sends it to a function</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:40:14.423200</ts>
    <user>Monte</user>
    <text>`&amp;gt;&amp;gt;` composes two functions together</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:41:04.424100</ts>
    <user>Monte</user>
    <text>`"A B C" |&amp;gt; String.split " " |&amp;gt; List.map (\letter -&amp;gt; letter ++ letter)`</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:41:48.424500</ts>
    <user>Monte</user>
    <text>`"A B C" |&amp;gt; (String.split " " &amp;gt;&amp;gt; List.map (\letter -&amp;gt; letter ++ letter))`</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:42:51.425500</ts>
    <user>Monte</user>
    <text>both do the same thing, but the first passes a value first to a function (`String.split " "`),  then passes the result to `List.map ...`</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:43:48.426400</ts>
    <user>Monte</user>
    <text>The second instead, passes the value to the function resulting from the composition of `String.split " "` and `List.map (\letter -&amp;gt; letter ++ letter)`</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:44:28.427100</ts>
    <user>Monte</user>
    <text>In practice `&amp;gt;&amp;gt;` is not used as often as `|&amp;gt;`</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:44:46.427300</ts>
    <user>Vilma</user>
    <text>I think I understand</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:45:12.428300</ts>
    <user>Monte</user>
    <text>`|&amp;gt;` takes a value and a function, and produces a value
`&amp;gt;&amp;gt;` takes two functions and produces a function</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:45:43.428900</ts>
    <user>Vilma</user>
    <text>`|&amp;gt;` makes it sequential, while `&amp;gt;&amp;gt;` is like the mathematics (calculus, I think) of doing `g(f(x))` and then allowing us to pass a parameter to this function which is the combination of `f(x)` and `g(x)`</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:58:13.429300</ts>
    <user>Kris</user>
    <text>`a |&amp;gt; f` is literally `f a`</text>
  </message>
  <message conversation_id="1250">
    <ts>2019-04-18T14:58:25.429600</ts>
    <user>Kris</user>
    <text>and `g &amp;lt;&amp;lt; f = \x -&amp;gt; g (f x)`</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:18:48.430400</ts>
    <user>Margo</user>
    <text>`elm: Map.!: given key is not an element in the map` anyone got a tip?</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:19:12.430600</ts>
    <user>Kris</user>
    <text>known compiler bug</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:19:30.431100</ts>
    <user>Kris</user>
    <text>I think you have to remove your elm-stuff dir/not compile with --debug</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:21:23.431400</ts>
    <user>Margo</user>
    <text>OK, ill try. Thanks</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:33:13.432400</ts>
    <user>Margo</user>
    <text>Im using Parcel and just deleted elm-suff and ran parcel build (not sure what parcel does...). That did not help</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:35:04.433100</ts>
    <user>Carman</user>
    <text>Make sure you're running with Parcel 1.10 since it doesn't use the `--debug` flag</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:35:30.433500</ts>
    <user>Margo</user>
    <text>OK</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:36:27.434400</ts>
    <user>Carman</user>
    <text>BTW Parcel is a build manager. It compiles your Elm, handles assets, environment variables, etc for you. It's like Webpack but with no config needed. It also comes with a live-reload server.</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:36:48.434800</ts>
    <user>Carman</user>
    <text>You can think of it as a fancier `elm reactor`</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:39:16.435100</ts>
    <user>Agustin</user>
    <text>Such things always make me sceptical</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:39:22.435300</ts>
    <user>Agustin</user>
    <text>Config is *always* needed</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:39:53.436000</ts>
    <user>Agustin</user>
    <text>Usually claims of “no config needed” means the necessary config is hard.</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:40:00.436200</ts>
    <user>Agustin</user>
    <text>And they don’t play well with others.</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:40:26.436800</ts>
    <user>Agustin</user>
    <text>Webpack for all its evils, is easily configurable, and integrates with multiple backend frameworks.</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:46:14.437400</ts>
    <user>Erlene</user>
    <text>&lt;@Carman&gt; is parcel specific for Elm? Or independent?</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:47:04.437600</ts>
    <user>Danika</user>
    <text>independent</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:52:51.438100</ts>
    <user>Briana</user>
    <text>&lt;https://parceljs.org/&gt;</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:52:56.438400</ts>
    <user>Briana</user>
    <text>It's good!</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T16:56:09.438600</ts>
    <user>Danika</user>
    <text>very good!</text>
  </message>
  <message conversation_id="1257">
    <ts>2019-04-18T17:00:35.441200</ts>
    <user>Chae</user>
    <text>Is there any way to do something like `Html.Events.preventDefaultOn` on the window? Such as a subscription? I need to be able to handle form and button navigation with only arrow keys. I have to be able to support a keyboard that doesn’t have a Tab key</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T17:07:37.441700</ts>
    <user>Nana</user>
    <text>&lt;@Chae&gt; `Browser.Events.onKeyPress` ?</text>
  </message>
  <message conversation_id="1257">
    <ts>2019-04-18T17:09:29.442000</ts>
    <user>Nana</user>
    <text>though I guess it doesn't prevent default</text>
  </message>
  <message conversation_id="1257">
    <ts>2019-04-18T17:10:20.442800</ts>
    <user>Chae</user>
    <text>That `prevent default` is the 1 missing part that I need :confused:</text>
  </message>
  <message conversation_id="1257">
    <ts>2019-04-18T17:12:01.443300</ts>
    <user>Nana</user>
    <text>I guess you could just add an event listener in JS</text>
  </message>
  <message conversation_id="1257">
    <ts>2019-04-18T17:14:56.444700</ts>
    <user>Chae</user>
    <text>I’m not sure that would work though, as I need to conditionally call `event.preventDefault()` based on elm state</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T19:13:27.445800</ts>
    <user>Millie</user>
    <text>&lt;@Chae&gt; I had this question yesterday and could solve it ;) &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1555540089368200?thread_ts=1555540089.368200&amp;amp;cid=C0CJ3SBBM&gt;</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T19:17:17.446300</ts>
    <user>Millie</user>
    <text>AMA if you need further help ;)</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T19:21:17.451000</ts>
    <user>Chae</user>
    <text>I'm doing something similar. There's still the possibility of someone changing the focus outside of the outermost div though, in which case the listener no longer works. For example if the body of the app gets focus, there's no way to regain focus inside the app without a mouse or pressing Tab</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T19:25:01.452300</ts>
    <user>Millie</user>
    <text>I think this is a workaround for missing core functionality. Not too happy with it, but currently the best option I could find.</text>
  </message>
  <message conversation_id="1256">
    <ts>2019-04-18T19:31:24.456700</ts>
    <user>Millie</user>
    <text>The gizra docs also mention adding an `id` to potentially set the focus programmatically. So one could set the focus as a fallback, when it's lost. But it won't make the solution simpler.</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:10:36.458700</ts>
    <user>Hiedi</user>
    <text>Hi, just added `prikhi/decimal` to my project to deal with decimal (obvsly) but now (the first time it compiled with one module using `Decimal`) I get this error `elm: Map.!: given key is not an element in the map`. I tried googling it which suggested to delete `elm-stuff`. I tried it, does not work...</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:12:43.459500</ts>
    <user>Sharon</user>
    <text>It happens a lot when you compile with `--debug`, try without it?</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:17:30.461200</ts>
    <user>Earnest</user>
    <text>&lt;@Hiedi&gt; I might be able to fix that. Can you try the following for me?
1. Open up `~/.elm/0.19.0/package/prikhi/decimal/2.0.0/src/Decimal.elm`
2. Remove the `type alias Mantissa = BigInt` line
3. Replace the `Mantissa` in the type definition for `Decimal` with `BigInt`
4. Remove your project's `elm-stuff` folder
5. Try recompiling w/ the `--debug` flag</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:18:29.461600</ts>
    <user>Earnest</user>
    <text>If that works I can update the library and push out a new release for you</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:19:15.462000</ts>
    <user>Earnest</user>
    <text>Not sure if directly editing files in `~/.elm` will work or not though...</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:21:56.462300</ts>
    <user>Hiedi</user>
    <text>Okay I'm trying</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:22:32.462800</ts>
    <user>Hiedi</user>
    <text>First it works without the --debug flag</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:25:00.463500</ts>
    <user>Hiedi</user>
    <text>&lt;@Earnest&gt; Your change does not enable to build with the debug flag</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:25:39.463800</ts>
    <user>Hiedi</user>
    <text>But it works without</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:32:22.464400</ts>
    <user>Earnest</user>
    <text>Hmm, ok thanks for checking. I thought that bug was cause by unexported type aliases or something like that :thinking_face:</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:39:06.465000</ts>
    <user>Hiedi</user>
    <text>I guess I just gonna have to wait for 0.19.1 since it seems like a fix is on its way</text>
  </message>
  <message conversation_id="1259">
    <ts>2019-04-19T05:53:14.465200</ts>
    <user>Virgie</user>
    <text>you need to remove more</text>
  </message>
  <message conversation_id="1259">
    <ts>2019-04-19T05:53:43.465800</ts>
    <user>Virgie</user>
    <text>in `~/.elm/0.19.0/package/prikhi/decimal/2.0.0/` there are also some .dat files which you need to remove to get it to actually recompile</text>
  </message>
  <message conversation_id="1258">
    <ts>2019-04-19T05:56:04.466900</ts>
    <user>Hiedi</user>
    <text>&lt;@Virgie&gt; Ok thx, I will try it but I can actually wait for the problem to be fixed since it seems it's really close and since decimal is a small part of my app I can do later</text>
  </message>
  <message conversation_id="1260">
    <ts>2019-04-19T09:09:00.468300</ts>
    <user>Rubye</user>
    <text>hi, wanted to start learning elm and took a look at the guide yesterday. can't seem to access it right now though, was there some planned maint. or something?</text>
  </message>
  <message conversation_id="1260">
    <ts>2019-04-19T09:09:02.468500</ts>
    <user>Rubye</user>
    <text>&lt;https://guide.elm-lang.org/&gt;</text>
  </message>
  <message conversation_id="1260">
    <ts>2019-04-19T09:09:19.468900</ts>
    <user>Rubye</user>
    <text>maybe just my computer acting up, but wanted to check in</text>
  </message>
  <message conversation_id="1260">
    <ts>2019-04-19T09:10:39.469300</ts>
    <user>Jae</user>
    <text>I can't reach it either so I guess the site is down</text>
  </message>
  <message conversation_id="1261">
    <ts>2019-04-19T09:47:58.470200</ts>
    <user>Bart</user>
    <text>&lt;https://guide.elm-lang.org/&gt; is down does anyone know if its content can be reached from elsewhere ?</text>
  </message>
  <message conversation_id="1261">
    <ts>2019-04-19T09:50:30.470400</ts>
    <user>Danika</user>
    <text>&lt;http://web.archive.org/web/20190417024338/https://guide.elm-lang.org/&gt;</text>
  </message>
  <message conversation_id="1261">
    <ts>2019-04-19T09:51:25.470600</ts>
    <user>Sharon</user>
    <text>&lt;https://github.com/evancz/guide.elm-lang.org&gt;</text>
  </message>
  <message conversation_id="1261">
    <ts>2019-04-19T09:52:48.470900</ts>
    <user>Bart</user>
    <text>great ! thanks a lot !</text>
  </message>
  <message conversation_id="1262">
    <ts>2019-04-19T10:33:55.472000</ts>
    <user>Millie</user>
    <text>Maybe it create a ticket in the GitHub repository issue tracker?</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T11:00:13.472300</ts>
    <user>Huong</user>
    <text>It looks like gitbook is having some issues</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T11:41:09.472800</ts>
    <user>Hoa</user>
    <text>Looks up now, at least here.</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T11:47:51.474500</ts>
    <user>Vilma</user>
    <text>is there a way to combine an HTTP request and some other message in such a way that first the message is sent and then the HTTP request performed? Something like this:

```
Msg = GoingToPerformARequest

send GoingToPerformARequest
|&amp;gt; andThen myCustomHttpRequest
```</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T11:48:37.474700</ts>
    <user>Vilma</user>
    <text>I think I did something like this once</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T11:58:23.477700</ts>
    <user>Jerilyn</user>
    <text>I see that there’s a Json.Decode.maybe. Is there something like that but gives a result instead (Decoder a -&amp;gt; Decoder (Result Error a))? I have a list of items I’m decoding. I don’t want to break if some of the items fail, but it would be great to see a list of errors on the items that did fail to decode.</text>
  </message>
  <message conversation_id="1264">
    <ts>2019-04-19T12:06:01.478400</ts>
    <user>Virgie</user>
    <text>would a `Decoder (List a) -&amp;gt; List (Result Error a)` also work? that is much easier</text>
  </message>
  <message conversation_id="1264">
    <ts>2019-04-19T12:08:29.479400</ts>
    <user>Virgie</user>
    <text>how you would do that is have a 2-phase decoder, decode first with a `Decoder (List Value)`, then use `decodeValue` on the  items of the list</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:09:45.480000</ts>
    <user>Vilma</user>
    <text>&lt;@Virgie&gt; would you know anything about the question I posted above? :point_up: :pray:</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:10:05.480500</ts>
    <user>Vilma</user>
    <text>it seems that before the `2.0.0` version of the `elm/http` package this was achieved with `toTask`, but this function no longer exists?</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:11:41.480700</ts>
    <user>Virgie</user>
    <text>there is still &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#task&gt;</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:12:11.481100</ts>
    <user>Vilma</user>
    <text>yes, I saw that but it’s way more complicated and asking for quite a bit of parameters</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:14:34.482100</ts>
    <user>Virgie</user>
    <text>previously toTask was used in a pipeline, this new function is just one function that does everything without need for pipelines</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:14:38.482200</ts>
    <user>Vilma</user>
    <text>and that `Resolver` parameter which the documentation does not make it very clear what it should be used for</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:15:57.482800</ts>
    <user>Virgie</user>
    <text>it maps a response to a result. This means you have to handle all the failure cases of a `Response` up-front</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:26:48.483100</ts>
    <user>Vilma</user>
    <text>sometimes I just feel like I don’t get the Elm architecture :sweat:</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:31:54.484800</ts>
    <user>Hoa</user>
    <text>Indeed previously it was simpler to concatenate two tasks together: ` ... |&amp;gt; Http.toTask  |&amp;gt; Task.andThen ...`  I have yet to see if this can be mapped directly with the new API</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:32:13.485200</ts>
    <user>Vilma</user>
    <text>I’ve been trying for a bit now but I just can’t figure it out</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:32:35.485700</ts>
    <user>Vilma</user>
    <text>the old `Http.toTask` function seemed to be very user-friendly and easy to understand and use</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:32:57.486100</ts>
    <user>Vilma</user>
    <text>I just can’t see another way to achieve what I’m trying without something similar</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:33:27.486700</ts>
    <user>Vilma</user>
    <text>because I want to send a message which will set some flags (e.g. loading flag to true) before the HTTP request runs</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:36:08.488100</ts>
    <user>Hoa</user>
    <text>There was some discussion about this limitation, but I don’t remember which solutions came up.  I believe there was a package that builds on the new HTTP package which makes easier to deal with the kind of issues.</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:36:21.488300</ts>
    <user>Vilma</user>
    <text>I’m going to take a look</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:39:09.488800</ts>
    <user>Hoa</user>
    <text>&lt;@Vilma&gt; Should be this:  &lt;https://package.elm-lang.org/packages/jinjor/elm-req/latest/&gt;</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:39:19.489100</ts>
    <user>Hoa</user>
    <text>(Found out on Elm Discourse)</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:39:53.489300</ts>
    <user>Hoa</user>
    <text>Some context: &lt;https://discourse.elm-lang.org/t/using-task-to-send-http-requests/2696&gt;</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:40:52.489600</ts>
    <user>Vilma</user>
    <text>thanks &lt;@Hoa&gt; going to read into this</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:50:20.490200</ts>
    <user>Vilma</user>
    <text>but even then from what I’ve read it seems creating a custom Cmd Msg is not ideal because it will be run twice via de runtime?</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:50:33.490400</ts>
    <user>Hoa</user>
    <text>Lemme see.</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:50:41.490700</ts>
    <user>Vilma</user>
    <text>&lt;https://medium.com/elm-shorts/how-to-turn-a-msg-into-a-cmd-msg-in-elm-5dd095175d84&gt;</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:50:57.490900</ts>
    <user>Vilma</user>
    <text>&amp;gt; 1. Cmd Msg* is inefficient
&amp;gt; By creating your own Cmd Msg you are making 2 trips through the elm runtime. Which is unnecessary. The command you are sending out, will end up in some other branch of our update function.</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:51:50.491500</ts>
    <user>Vilma</user>
    <text>then it recommends either calling `update` recursively or passing the message directly in the `update` branch you are in</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:52:10.492000</ts>
    <user>Vilma</user>
    <text>I think I can do that but will involve me doing some changes to my app</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:53:13.492200</ts>
    <user>Hoa</user>
    <text>Ah, that one is a classic</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:53:37.492700</ts>
    <user>Hoa</user>
    <text>But wait,  you have to use the Elm runtime to do a HTTP call.</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:55:12.494200</ts>
    <user>Hoa</user>
    <text>The basic idea is that, instead of doing two calls and manage two `Cmd`’s  you combine two (or more) tasks and finally manage a single `Cmd`.</text>
  </message>
  <message conversation_id="1263">
    <ts>2019-04-19T12:55:26.494400</ts>
    <user>Earnest</user>
    <text>I got some helper functions here: &lt;https://package.elm-lang.org/packages/prikhi/http-tasks/1.0.0/Http-Tasks&gt;</text>
  </message>
  <message conversation_id="1265">
    <ts>2019-04-19T13:00:48.494900</ts>
    <user>Jerilyn</user>
    <text>&lt;@Virgie&gt; Thanks, works great!</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T15:46:48.496200</ts>
    <user>Buffy</user>
    <text>Anyone in here familiar or have any examples (besides rogeriochavez/spades boilerplate) of using elm-return to slim down an `update` function?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T16:21:52.497500</ts>
    <user>Buffy</user>
    <text>Whoah this is interesting...
&lt;https://ellie-app.com/5jykFvVbcDra1&gt;</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T16:24:45.497600</ts>
    <user>Allyn</user>
    <text>I don’t see anything special, it looks like the default app. Am I missing something?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T16:25:15.497800</ts>
    <user>Buffy</user>
    <text>Msg is a record instead of a sum.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T16:26:16.498000</ts>
    <user>Buffy</user>
    <text>I realized it's a bad idea in the process tho because the view has to construct the whole record which is the opposite of what I'm trying to do...
That or you have to pass in `Msg` to the view function which felt backwards too.
I went back to a sum type.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T18:25:30.000100</ts>
    <user>Buffy</user>
    <text>Anyone ever tried modeling `Msg -&amp;gt; Model` with a Result type?</text>
  </message>
  <message conversation_id="1267">
    <ts>2019-04-19T19:03:16.001600</ts>
    <user>Ashton</user>
    <text>Yes. Some people have done that.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:04:09.002700</ts>
    <user>Buffy</user>
    <text>Any examples? I'm trying to make "Impossible States" in my update instead of defaulting to a `_ -&amp;gt; ...` case.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:04:48.004100</ts>
    <user>Ashton</user>
    <text>Personally I havent seen much value in the approach, but I know at least a few people seem quite satisfied doing it.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:07:28.007700</ts>
    <user>Buffy</user>
    <text>When you case against a pair you get Msg * Model number of states, but with an Either it'd be Msg + Model states which should map better to what I'm trying to do.
Well I might need a regular Sum instead of an either.
You can see an example of something close to what I'm doing with &lt;https://github.com/rogeriochaves/spades/blob/master/boilerplate/src/Update.elm#L21&gt;
Only I want to get rid of the defaulting that's required to "ignore" all the other page states by modeling the whole orchestration as a Sum instead of a Product.
&lt;https://github.com/rogeriochaves/spades/blob/master/boilerplate/src/Update.elm#L21&gt;</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:08:18.009200</ts>
    <user>Ashton</user>
    <text>Yeah, &lt;@Leoma&gt; has a return package that treats updates as returing a result-y kind of thing, which may error. I recall someone at my local Elm meet up showing off a big application where every update returned a `Result Error (Model, Cmd Msg)`</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:09:35.011500</ts>
    <user>Ashton</user>
    <text>I guess Im a critic of this, so I would much rather convince you not to follow this way than help connect you with them. For example, at least on the theoretical argument of “making impossible states impossible”, I dont think `Msg`/`Model` combinations are impossible states.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:10:55.013900</ts>
    <user>Ashton</user>
    <text>0 At least in my book, a `Msg` isnt a state. Its not memory that persists over time. It doesnt stay in your application. Its just a fleeting report of something that happened that your application needs to respond to.
1 Its a lot more possible than you might think. `Msg` come from the outside world. You dont know when or where they are coming from. Weird combinations can happen. I know this, in part, because I and others have put analytics in our applications that report impossible states that we _thought_ were impossible.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:16:46.019100</ts>
    <user>Buffy</user>
    <text>First of all, I totally understand where you're coming from (or at least I think we understand each other).
Therefor, I'm really modeling this as a Product of Sums, where "Outside" messages are a part of the top level product, but then I want to mitigate someone's ability to something like `onClick Login` if they're already logged in, yeh?

EG: I have a `type Model = Authentication {email : String, password: String} | Main {name: String, etc : }` and a `type Msg = Authentication CredsMsg | Main MainMsg` and I'm trying to have an update that looks something like
```
update : Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)
update msg mdl =
   case ??? of
      Authentication message, Authentication model -&amp;gt;
      Main message, Main model -&amp;gt;
```
which I have a version of that using a Tuple but then the compiler yells at me about not covering the `Authentication _, Main _` and `Main _, Authentication _` cases which are what I'm trying to avoid because they don't make sense.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:17:03.019600</ts>
    <user>Buffy</user>
    <text>I hope what I'm saying makes sense... happy to paste a larger snippet if it'd be useful?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:19:12.019900</ts>
    <user>Ashton</user>
    <text>I think I hear you.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:20:57.021800</ts>
    <user>Ashton</user>
    <text>I think its okay to just have a case that goes to nothing happening. So, just in pure practical terms, I think:
```
    (MainMsg subMsg, Authneitcation authModel) -&amp;gt;
        (model, Cmd.none)
```
is an okay to way to go.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:23:38.024700</ts>
    <user>Buffy</user>
    <text>The Tuple is the problem algebraically speaking... yes I _could_ use a `_ -&amp;gt; ...` to just ignore the bad cases at runtime... and it'd work but then if me or someone comes along later the compiler won't yell at us if we try to add a case like `(Authentication _, Main _) -&amp;gt; -- This case should be impossible to even construct`.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:27:33.029700</ts>
    <user>Buffy</user>
    <text>`(a, b)` means there's `a * b` number of cases so if a and b are both type `Bool` that's 4 cases. But if I use a Sum of Bools ala:
```
type MsgModelThingMaybe = Auth Bool | Main Bool
```
The you have `Auth + Main` which is only two constructors to case on. `|` is type speak for addition algebraically speaking. Where a Tuple or an anonymous Product is type speak for multiplication.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:29:16.030400</ts>
    <user>Ashton</user>
    <text>Yeah also I like to avoid `_ -&amp;gt;`. And to avoid incompleteness, you could just write out some of the non-sense cases. I think for practical purposes that could be the best way to handle this.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T19:30:33.031600</ts>
    <user>Ashton</user>
    <text>Im still reluctant to call these combinations “nonsense” or “impossible”. They could happen. Maybe extremely rarely. Maybe theres no reason to handle them. But its still there. Its a logical possibility, and a very remote and trivial real possibility.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:16:54.034400</ts>
    <user>Buffy</user>
    <text>Man loopty loop... I think for now I'm gonna settle on `Debug.todo` in that case that "shouldn't" exist. Oh bother... :bear: :honey_pot:</text>
  </message>
  <message conversation_id="1268">
    <ts>2019-04-19T20:33:55.035400</ts>
    <user>Dede</user>
    <text>A key thing is that messages are asynchronous and can show up late.  So “impossible” stuff can happen pretty easily.  </text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:41:06.037800</ts>
    <user>Buffy</user>
    <text>I'm aware messages are asynchronous at least in principle, what I'm asking about arises from me trying to learn &lt;@Willodean&gt;/elm-return lib...
I just searched it on the packages site and &lt;@Ashton&gt; you have a similar package...
What I'm trying to do (maybe without the whole Lens thing) is this... &lt;https://package.elm-lang.org/packages/toastal/return-optics/latest&gt;
But that's 0.18 and hasn't been upgraded it seems.</text>
  </message>
  <message conversation_id="1268">
    <ts>2019-04-19T20:41:54.038600</ts>
    <user>Buffy</user>
    <text>&lt;@Myrtle&gt; isn't using a `_ -&amp;gt; ...` in examples from what I can tell...</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:42:35.040000</ts>
    <user>Willodean</user>
    <text>What is the challenge?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:43:23.040900</ts>
    <user>Buffy</user>
    <text>Trying to use you're lib to facilitate composition of updates without resorting to a `_ -&amp;gt; Debug.todo` case...</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:44:21.042100</ts>
    <user>Buffy</user>
    <text>I started down this path following the spades boilerplate but every child component has a default case that NoOp's and I want to make those cases incorrect by construction.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:44:40.042400</ts>
    <user>Buffy</user>
    <text>Want to avoid -&amp;gt; &lt;https://github.com/rogeriochaves/spades/blob/master/boilerplate/src/Cats/Update.elm#L25&gt;</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:45:04.042800</ts>
    <user>Buffy</user>
    <text>If you scroll to the bottom of the README here apparently there's a way to do it?
&lt;https://package.elm-lang.org/packages/toastal/return-optics/latest&gt;</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:45:28.043300</ts>
    <user>Buffy</user>
    <text>But that package isn't updated to 0.19 and I'm also not super sure I should need Lenses to accomplish this?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:45:35.043600</ts>
    <user>Buffy</user>
    <text>That make any sense?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:47:26.043900</ts>
    <user>Willodean</user>
    <text>You can't</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:47:37.044300</ts>
    <user>Willodean</user>
    <text>You are going to have a Noop case</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:48:03.044900</ts>
    <user>Willodean</user>
    <text>Either you just don't have that case, or you do.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:48:14.045300</ts>
    <user>Willodean</user>
    <text>If you do, you do. Period</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:49:01.046100</ts>
    <user>Willodean</user>
    <text>Also, don't use `_ -&amp;gt;` in pattern matches</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:49:20.046700</ts>
    <user>Willodean</user>
    <text>Enumerate or lose exhaustivity checks</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:49:21.046800</ts>
    <user>Buffy</user>
    <text>This is what I'm trying to avoid.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:50:14.047900</ts>
    <user>Buffy</user>
    <text>I'm trying to enumerate. But a Tuple (Anonymous Product, etc...) is algebraic multiplication and it's causing more states than are valid for my use case but trying to tie the Msg and Models together in a Sum is not working like I'm expecting it too.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:51:15.048500</ts>
    <user>Buffy</user>
    <text>Is this relevant? &lt;https://package.elm-lang.org/packages/bChiquet/elm-accessors/latest/Accessors-Library&gt;</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:57:57.048700</ts>
    <user>Willodean</user>
    <text>Ahh</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:58:19.049400</ts>
    <user>Willodean</user>
    <text>You have numerous invalid cases due to space routing</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:58:28.049700</ts>
    <user>Willodean</user>
    <text>You are fucked bro</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:58:51.050500</ts>
    <user>Willodean</user>
    <text>The answer to this problem is injective type families or associated data families</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T20:59:12.051000</ts>
    <user>Willodean</user>
    <text>You can do this in Haskell but you are fucked in Elm</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:02:00.055000</ts>
    <user>Buffy</user>
    <text>Not sure what you mean by "space routing" and I've read through Sandi McGuire's Type Level programming book but haven't written anything with HKD or Type Families yet so still not super sure how they'd solve this problem.

Turning the function algebra into a Sum seems to be what I'm trying to do but I don't even know what I'm saying too... Ugh... I'm such a tweener right now it's painful.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:04:32.056400</ts>
    <user>Buffy</user>
    <text>Clearly you can turn a `a -&amp;gt; b` into a Product ala `(a, b)` but not sure how to then say I only want `(Int, Int) | (Bool, Bool)` and not also `(Int, Bool) | (Bool, Int)`... :confused:</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:07:39.058900</ts>
    <user>Buffy</user>
    <text>I tried parameterizing the type constructor but that ended up polluting a bunch of shit `type ActionModel a b c d = PageOne a b | PageTwo c d` and didn't seem to do what was in my head.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:08:05.059600</ts>
    <user>Buffy</user>
    <text>Plus `PageOne a b` is just another way of saying `(a, b)` anyways so I knew it wasn't right.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:08:19.060200</ts>
    <user>Willodean</user>
    <text>They solve this problem because you can parameterize the second type by the first</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:08:26.060500</ts>
    <user>Willodean</user>
    <text>Or having them share a type</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:08:37.060800</ts>
    <user>Willodean</user>
    <text>I meant SPA routing</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:09:38.062100</ts>
    <user>Willodean</user>
    <text>Consider we have 3 types</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:09:42.062300</ts>
    <user>Willodean</user>
    <text>A route type</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:09:46.062500</ts>
    <user>Willodean</user>
    <text>A model type</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:09:55.062900</ts>
    <user>Willodean</user>
    <text>And a msg type</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:10:03.063100</ts>
    <user>Buffy</user>
    <text>With yah so far :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:11:10.064900</ts>
    <user>Willodean</user>
    <text>update :: Msg (route :: Route) -&amp;gt; Model (route :: Route) -&amp;gt; Model (route :: Route)</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:11:23.065300</ts>
    <user>Willodean</user>
    <text>Now we are guaranteed that everything lines up</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:11:49.065800</ts>
    <user>Willodean</user>
    <text>You can't do this in Elm</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:12:45.067000</ts>
    <user>Buffy</user>
    <text>See my brain is trying to write that like `update : Msg Route -&amp;gt; Model Route -&amp;gt; Model Route` but that's not a thing right? But why?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:13:29.067600</ts>
    <user>Willodean</user>
    <text>Because we want Route promoted or it gives us nothing</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:15:20.068500</ts>
    <user>Buffy</user>
    <text>Phantom types don't help here? I mean I can think of why it should work in my head but I can't see why it can't / won't work in Elm.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:17:16.069400</ts>
    <user>Willodean</user>
    <text>Right</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:17:38.070100</ts>
    <user>Willodean</user>
    <text>Because you want this as the concrete case</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:17:53.070600</ts>
    <user>Willodean</user>
    <text>`Model 'PageOne`</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:18:29.071100</ts>
    <user>Willodean</user>
    <text>Not</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:18:35.071400</ts>
    <user>Willodean</user>
    <text>`Model Route`</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:19:29.073100</ts>
    <user>Willodean</user>
    <text>To make matters worse you will need to existentialize and deexistentialize to convince the compiler you are right about this</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:19:51.073700</ts>
    <user>Willodean</user>
    <text>`forall` is an issue</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:21:26.075200</ts>
    <user>Buffy</user>
    <text>I think the intuition of it is starting to make sense in my brain now... in other words, in Elm we're sorta just stuck with the `a x b` Tuple and `Debug.todo` crashing out if a bad case ever gets hit, yeh?

So where do Lenses fit into this whole thing?
Like how's this happening?
&lt;https://package.elm-lang.org/packages/toastal/return-optics/latest&gt;
Or is it just irrelevant?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:22:31.075600</ts>
    <user>Willodean</user>
    <text>irrelevant</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:23:06.076200</ts>
    <user>Willodean</user>
    <text>frankly this is a problem that is a legit use case for dependent types</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:23:31.076600</ts>
    <user>Willodean</user>
    <text>however I would suggest that `Debug.todo` is a shitty answer</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:24:06.077200</ts>
    <user>Willodean</user>
    <text>My advice is to detect the case, no `_ -&amp;gt; ` and write to an error holder on your model</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:24:37.077600</ts>
    <user>Willodean</user>
    <text>that way you can do something with the error, like send it to a port or show it to the user</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:26:01.078900</ts>
    <user>Buffy</user>
    <text>Or re-write the thing in something with HKT? Purescript? Does purescript have something like elm-ui? That's the lib that keeps me stuck on elm at the moment?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:26:31.079300</ts>
    <user>Willodean</user>
    <text>HKT is not the issue</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:26:53.079800</ts>
    <user>Willodean</user>
    <text>the problem is you need to convince the compiler that unaligned cases are impossible</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:27:04.080200</ts>
    <user>Willodean</user>
    <text>that means that you need some for of dependent typing</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:27:15.080500</ts>
    <user>Willodean</user>
    <text>where the type of the function can be determined by the value of its input</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:27:49.081500</ts>
    <user>Willodean</user>
    <text>PureScript cannot do this either, unless they added existentials recently</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:28:18.081900</ts>
    <user>Willodean</user>
    <text>haskell can only barely do this</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:28:27.082300</ts>
    <user>Willodean</user>
    <text>and even then, its not ergonomic</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:28:45.083000</ts>
    <user>Willodean</user>
    <text>the truth is you are running down the type level road, and that road lies maddness</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:29:16.084000</ts>
    <user>Willodean</user>
    <text>you can invest hours upon hours of effort convincing the compiler this wont happen, and in practice have eliminated ZERO bugs</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:29:45.084400</ts>
    <user>Buffy</user>
    <text>Yeh, I get the picture. So for now, just `Debug.todo` then upgrade that to something to track if the app ever hits any of these cases... maybe by then something else will exist that handles this sort of thing nicer?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:30:08.084800</ts>
    <user>Willodean</user>
    <text>In practice, I have this in my code

`_ -&amp;gt; singleton x`</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:30:13.085000</ts>
    <user>Willodean</user>
    <text>and never had a problem</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:30:25.085400</ts>
    <user>Willodean</user>
    <text>We don't need the compiler to statically check everything</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:30:33.085800</ts>
    <user>Buffy</user>
    <text>So you'd rather noop than fail?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:30:34.085900</ts>
    <user>Willodean</user>
    <text>we need the compiler to staticly check the things we are worried about</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:30:50.086400</ts>
    <user>Willodean</user>
    <text>I have never needed to actually track stray messsages</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:30:52.086600</ts>
    <user>Willodean</user>
    <text>I did for a while</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:31:04.087000</ts>
    <user>Willodean</user>
    <text>but I deleted it because it was code to maintain that was not adding value</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:31:43.087900</ts>
    <user>Willodean</user>
    <text>How many real world errors are caught by `Maybe`, shitloads</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:32:03.088600</ts>
    <user>Buffy</user>
    <text>Gotta love that value stuff... what's that? kek. This is a project I'm workin' on in my free time so type level shenanigans are just questions I ask to learn. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:32:11.088800</ts>
    <user>Willodean</user>
    <text>how many real world errors are caught by dependently typed complexity to ensure the compiler wont allow a stray message. Like zero.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:32:28.089300</ts>
    <user>Willodean</user>
    <text>Then you are in the wrong language</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:32:33.089600</ts>
    <user>Willodean</user>
    <text>go idris or agda</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:32:41.089900</ts>
    <user>Willodean</user>
    <text>idris has a javascript backend</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:33:10.090500</ts>
    <user>Buffy</user>
    <text>Idris has a javascript backend?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:33:55.091400</ts>
    <user>Willodean</user>
    <text>yes</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:34:07.091800</ts>
    <user>Willodean</user>
    <text>go have some real fun :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:34:48.093100</ts>
    <user>Willodean</user>
    <text>Elm has two use cases. Teaching beginners, and real world consumer facing applications where performance and space concerns are key.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:35:05.093700</ts>
    <user>Willodean</user>
    <text>Learning about types is not one of them. As is writing good FP code.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:35:17.093900</ts>
    <user>Buffy</user>
    <text>Just seems odd, this is the second time I've wanted to do dependently typed shenanigans... first time trying to map Http Headers to Persistent Queries for Pagination stuff... now randomly here trying to make update not have little weird edge case-y things...
I'm scared of what I'll find if I go down the Idris brick road?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:35:17.094100</ts>
    <user>Buffy</user>
    <text>lol</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:35:53.094300</ts>
    <user>Willodean</user>
    <text>You will find madness</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:36:12.094800</ts>
    <user>Willodean</user>
    <text>You want to take a real hit off the Sandy type level programming?</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:36:43.095500</ts>
    <user>Willodean</user>
    <text>You are going to have diminishing returns in the extreme, as you invest more and more time in types that don't catch real world problems, and don't add features to your app.</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:36:54.095800</ts>
    <user>Willodean</user>
    <text>But its a beautiful madness, and an experience worth having</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:37:09.096100</ts>
    <user>Willodean</user>
    <text>been down that road and back again my friend</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:37:27.096500</ts>
    <user>Willodean</user>
    <text>you think you want dependent types, until you live with them in an enterprise production application</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:39:13.098000</ts>
    <user>Buffy</user>
    <text>I'll take a word from the wise and hold off then for now. :slightly_smiling_face:
Maybe one day there will exist a dependently typed language that solves all our problems with nice error messages :man-shrugging:</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:40:32.098200</ts>
    <user>Willodean</user>
    <text>Blodwen ftw</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:42:41.098400</ts>
    <user>Buffy</user>
    <text>:man-shrugging:</text>
  </message>
  <message conversation_id="1266">
    <ts>2019-04-19T21:46:22.098800</ts>
    <user>Buffy</user>
    <text>Sincere thanks for you time either way :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1269">
    <ts>2019-04-19T22:52:27.099000</ts>
    <user>Tamika</user>
    <text>I am in the process of upgrading to elm-0.19 and I'm hitting this issue too ... works without `--debug`, but fails with that error when I use it in elm-live. My codebase is prohibitively large to extract a SSCCE :confused:</text>
  </message>
  <message conversation_id="1269">
    <ts>2019-04-20T03:49:28.100600</ts>
    <user>Lynn</user>
    <text>Has any advice been published on how to get rid of the security messages (in git/github) that come with using a 0.18 dev environment. I feel bad providing my clients with repos that have security warnings, even if the warnings only apply to dev packages</text>
  </message>
  <message conversation_id="1270">
    <ts>2019-04-20T05:16:39.103800</ts>
    <user>Olevia</user>
    <text>Hello, I hope somebody can help me with this weird behavior i've been getting: we have an application that runs 3 submodules which each have their own MVU cycle (own model, messages and update). We use this function to map these messages to the submodules &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L280&gt; . Now one of our submodules is doing a HttpRequest in a Command. We've put this command on the submodule's `init` function and can see the command being fired but the message never being received. However if we put the same command inside one of the submodules messages as a side effect it works fine. Why does this happen?</text>
  </message>
  <message conversation_id="1271">
    <ts>2019-04-20T05:44:38.104100</ts>
    <user>Lea</user>
    <text>Maybe you case on the `Msg SubMsg` and `Page` to be ‘active’ at the same time?</text>
  </message>
  <message conversation_id="1271">
    <ts>2019-04-20T05:45:00.104300</ts>
    <user>Lea</user>
    <text>So stuff ends up &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm#L276&gt;</text>
  </message>
  <message conversation_id="1272">
    <ts>2019-04-20T13:34:08.108200</ts>
    <user>Leoma</user>
    <text>Hey, is there a concern with my API? I don’t allow Msg without a Model. The rule is, you must ALWAYS start with one of: a model, or an error. Now, operations on errors (adding a Cmd Msg) simply result in the error. As opposed to getting combined with a model.</text>
  </message>
  <message conversation_id="1273">
    <ts>2019-04-20T14:36:22.109300</ts>
    <user>Ann</user>
    <text>Rest in peace Joe Armstrong, you were a true functional programming brother, thanks for paving the way for the rest of us.</text>
  </message>
  <message conversation_id="1274">
    <ts>2019-04-20T17:53:14.111600</ts>
    <user>Sandi</user>
    <text>Hello,
 I met Elm recently and ended up creating interest in learning it, because with Elm-UI I would save time not having to learn three different languages for front end.
 It seems that there is no updated or complete content about the language. Maybe that's one of the reasons that contribute to the low popularity of some languages.

 Can anyone help me?</text>
  </message>
  <message conversation_id="1274">
    <ts>2019-04-20T17:59:58.111900</ts>
    <user>Virgie</user>
    <text>what are you looking for in particular?</text>
  </message>
  <message conversation_id="1274">
    <ts>2019-04-20T18:19:04.112100</ts>
    <user>Sandi</user>
    <text>Learn how to use elm-ui. I need recommendations on where to look for content.</text>
  </message>
  <message conversation_id="1274">
    <ts>2019-04-20T18:26:57.112900</ts>
    <user>Virgie</user>
    <text>there is a &lt;#C4F9NBLR1|elm-ui&gt;  channel for questions, and an examples folder in the repo &lt;https://github.com/mdgriffith/elm-ui/tree/master/examples&gt;</text>
  </message>
  <message conversation_id="1274">
    <ts>2019-04-20T18:31:05.113100</ts>
    <user>Sandi</user>
    <text>Thanks for your help. I'm going to read it now</text>
  </message>
  <message conversation_id="1274">
    <ts>2019-04-20T18:36:25.113500</ts>
    <user>Carman</user>
    <text>Also of interest is this talk from the author of elm-ui: &lt;https://www.youtube.com/watch?v=Ie-gqwSHQr0&gt;</text>
  </message>
  <message conversation_id="1275">
    <ts>2019-04-21T02:27:32.114600</ts>
    <user>Myrtle</user>
    <text>I've been meaning to PR the tuple bits to the main library, but I think there's some better was to handle this stuff now so I haven't bothered upgrading the library.</text>
  </message>
  <message conversation_id="1275">
    <ts>2019-04-21T03:59:53.115500</ts>
    <user>Bebe</user>
    <text>The package docs are great too</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T04:36:11.116200</ts>
    <user>Lynn</user>
    <text>Any suggestions on how I can builder a decoder of `Int` that does not succeed in this case
```
&amp;gt; Decode.decodeString &lt;http://Decode.int|Decode.int&gt; "2.0"
Ok 2 : Result Decode.Error Int
```</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T04:39:36.116500</ts>
    <user>Huong</user>
    <text>JSON only has `number` and doesn't disambiguate between floats and integers, so as far as JSON (and JS) are concerned, that's _exactly_ the same as json with `2`. In other words, I can't really think of a way of handling this that doesn't involve manually parsing the actual json string</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T04:43:14.116700</ts>
    <user>Huong</user>
    <text>Or to explain it slightly differently - Elm internally uses `JSON.parse(jsonString)` because it's much more efficient to do that than to implement a custom parser. The issue in this case is that, on the resulting value, there is - as far as I can think of - no way to say whether the original JSON string specified `2.0` or just `2`</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T04:44:40.116900</ts>
    <user>Huong</user>
    <text>(i.e. in JS, `2.0 === 2`)</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T04:45:28.117100</ts>
    <user>Huong</user>
    <text>so to disambiguate, it would have to happen during parsing rather than during decoding, which we currently do not control</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T04:56:15.117800</ts>
    <user>Danika</user>
    <text>Decode it as a string, andThen call toInt maybe? </text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T05:00:34.118000</ts>
    <user>Huong</user>
    <text>`Decode.string` only works on things that are actually a string _in the JSON_. That was my first thought, too, but it wouldn't work :smile:</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T05:02:07.118300</ts>
    <user>Huong</user>
    <text>it's somewhat easier to see if we adapt the original example to `Decode.decodeString (Decode.field "foo" &lt;http://Decode.int|Decode.int&gt;) "{\"foo\":  2.0}"`</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T05:02:56.118800</ts>
    <user>Danika</user>
    <text>Hmm </text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T05:04:23.119000</ts>
    <user>Huong</user>
    <text>As soon as `JSON.parse` is used, you end up with this value `2.0` which is _exactly_ the same thing as `2` as far as javascript (and JSON!) goes</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T05:04:55.119200</ts>
    <user>Lynn</user>
    <text>ok. hoped I wasn't missing anything. I may need to add a tag to the serialised values then</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T05:06:14.119400</ts>
    <user>Huong</user>
    <text>Yeah, that's probably a good idea. Alternatively (but also icky) you could use `{"foo": "2.0"}` and interpret that string</text>
  </message>
  <message conversation_id="1276">
    <ts>2019-04-21T05:07:24.119600</ts>
    <user>Lynn</user>
    <text>indeed, I can see that causing issues as I will use this decoder very generally</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:36:31.122500</ts>
    <user>Dayna</user>
    <text>Does Elm use deep compare after an update to prevent rerenders? I've noticed it compares deeply when using (==), but I'm not sure if the VDom is written in Elm w/ kernel code or if it's entirely JS and uses something like shallow compare</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:39:16.123100</ts>
    <user>Cornell</user>
    <text>I’m pretty sure it doesn’t do a deep compare.</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:40:08.123800</ts>
    <user>Cornell</user>
    <text>I know `lazy` compares by reference, except for primitives like `String` and `Int`, which it will compare directly.</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:46:05.125300</ts>
    <user>Cornell</user>
    <text>Though maybe it does :thinking_face:  Im realizing now I don’t know</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:47:35.126400</ts>
    <user>Dayna</user>
    <text>In the redux community, performance is a huge topic and usage of libraries like reselect is very common. It seems strange that even with escape hatches and many performance optimizations (no prop drilling like in Elm) people complain about Redux's performance, but I've never seen any performance complaints/solutions for Elm, is that because the community is still small?</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:48:43.127000</ts>
    <user>Cornell</user>
    <text>Looks like the diff does use `===`: &lt;https://github.com/elm/virtual-dom/blob/5a5bcf48720bc7d53461b3cd42a9f19f119c5503/src/Elm/Kernel/VirtualDom.js#L706&gt;</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:49:22.128600</ts>
    <user>Dayna</user>
    <text>I saw that piece of code too, but that's for diffing the DOM, I'm talking about the process before that - deciding if dom diffing is even needed</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:50:12.129800</ts>
    <user>Dayna</user>
    <text>It could be that the DOM is always diff'd in Elm though, I'm not familiar with the implementation</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:50:47.130100</ts>
    <user>Lashawnda</user>
    <text>The assumption of immutability in Elm allows the compiler and runtime to do most of the optimizations that you need to do by hand with Redux and React.</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:52:31.132300</ts>
    <user>Lashawnda</user>
    <text>Also, deeply nested codepaths and data structures in Elm are intentionally difficult, and flatter code has lead to less expensive update function calls</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:56:19.135300</ts>
    <user>Dayna</user>
    <text>I guess so, but derived data will still create new references</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:57:39.137000</ts>
    <user>Lashawnda</user>
    <text>It tends not to matter. Even in the largest and most complicated programs we have at NoRedInk garbage collection is not a bottleneck.</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:58:42.137600</ts>
    <user>Dayna</user>
    <text>I'm not talking about GC, I'm talking about derived data like List.filter/map etc always producing a new reference even though the contents might be the same.</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:59:31.138500</ts>
    <user>Dorotha</user>
    <text>As far as I understand lazy would skip diffing a subtree</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T13:59:45.138700</ts>
    <user>Dayna</user>
    <text>For example, you can run a selector that uses List.map 5 times using the same model and it will produce 5 list references that have the same contents, but if you use shallow compare it will seem like 5 changes have happened, it's a huge issue when writing redux apps and that's why libraries like reselect exist.</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-21T14:04:18.141300</ts>
    <user>Lashawnda</user>
    <text>Oh I see. I’m not sure why that isn’t a big issue here. `Html.Lazy` exists for this, but there’s no data to tell us how often it is used</text>
  </message>
  <message conversation_id="1278">
    <ts>2019-04-22T00:12:02.145900</ts>
    <user>Lizabeth</user>
    <text>So with &lt;https://www.youtube.com/watch?v=XpDsk374LDE&gt; (Elm Europe 2017 - Evan Czaplicki - The life of a file) in mind.

Got some modules that are becoming quite a pain to navigate, but I don't want to split out certain groups of functions into another module because I don't want to expose the `Msg` and `Model` that these functions would work on.

Started plopping these in as a way to sort of have sub modules within my modules.

```
{-|

     _____                   _
    |  ___|   ___     ___   | |__     __ _   _ __
    | |_     / _ \   / _ \  | '_ \   / _` | | '__|
    |  _|   | (_) | | (_) | | |_) | | (_| | | |
    |_|      \___/   \___/  |_.__/   \__,_| |_|


-}
gotoFoobar : ()
gotoFoobar =
    ()
```

So I get a visual delimiter when scrolling (readable in minimaps as well)  and a symbol with a common prefix to jump to.

Quite interested what everyone else is doing for large modules in their codebases.</text>
  </message>
  <message conversation_id="1278">
    <ts>2019-04-22T00:53:07.146600</ts>
    <user>Earlean</user>
    <text>Lots of people have the classic ```
{---------------
 Model
---------------}
``` banners. But if your module is getting hard to navigate then better tooling might help</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-22T00:55:46.146800</ts>
    <user>Earlean</user>
    <text>The Elm add-ons for most editors includes features like 'go to definition' or 'peek definition'  that provide a way to find functions you're using</text>
  </message>
  <message conversation_id="1278">
    <ts>2019-04-22T01:03:28.147000</ts>
    <user>Lizabeth</user>
    <text>Trying to find an approach that isn't dependant on a specific editor.

The useless `gotoFoobar` function is simply there to leverage existing 'go to definition' of most editors.

I suppose grouping functions with a common prefix would work too.</text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-22T01:16:33.147300</ts>
    <user>Jae</user>
    <text>I’ve been unable to find any information about such a feature but what I want is to be able tell my editor to represent a big file as several smaller files. </text>
  </message>
  <message conversation_id="1277">
    <ts>2019-04-22T01:18:36.147500</ts>
    <user>Jae</user>
    <text>So I’d be able to define a new file that starts at line 500 and ends at line 1500.  Then if I made changes in this virtual file, it would be inserted into the original file</text>
  </message>
  <message conversation_id="1279">
    <ts>2019-04-22T04:43:10.148000</ts>
    <user>Earnest</user>
    <text>I just put a
```
-- MODEL

-- UPDATE

-- VIEW
```
and search for the uppercase names</text>
  </message>
  <message conversation_id="1280">
    <ts>2019-04-22T04:54:55.148400</ts>
    <user>Lory</user>
    <text>I think vscode has bookmarks. I'm not sure, I'll check it out and will report back.</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:06:29.148700</ts>
    <user>Ayesha</user>
    <text>Hello, I am using em-verify-examples to test a function that returns a float. I am getting the following message ` Do not use Expect.equal with floats. Use Float.within instead.`  What can I do about it?</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:13:18.148800</ts>
    <user>Hoa</user>
    <text>You cannot really test for equality with float, due to rounding errors</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:14:03.149000</ts>
    <user>Hoa</user>
    <text>I’m wondering if the error is referring to this function: &lt;https://package.elm-lang.org/packages/ianmackenzie/elm-float-extra/1.0.1/Float-Extra#equalWithin&gt;</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:15:14.149200</ts>
    <user>Hoa</user>
    <text>So is it  really `equalWithin`?</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:19:12.149600</ts>
    <user>Lory</user>
    <text>There is a way to use bookmarks capability through extensions.</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:19:31.149800</ts>
    <user>Lory</user>
    <text>I haven't tried that yet, but I think it's a good way to navigate.</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:21:17.150000</ts>
    <user>Lory</user>
    <text>I imagine other editors also have bookmarks plugins.</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:21:32.150200</ts>
    <user>Ayesha</user>
    <text>No, it should be &lt;https://package.elm-lang.org/packages/elm-explorations/test/latest/Expect#within&gt;</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:22:55.150400</ts>
    <user>Hoa</user>
    <text>OK, so what’s the problem?</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:23:55.150600</ts>
    <user>Dorotha</user>
    <text>Right, the problem with floats is that most of the time you can’t compare them because of the precision errors</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:24:51.150800</ts>
    <user>Dorotha</user>
    <text>If you’re absolutely sure, you can trick the tests by wrapping a float with `Ok`, and thus making it into `Result Float`. It is a hack :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:25:30.151200</ts>
    <user>Lynne</user>
    <text>Wait, &lt;@Ayesha&gt; is using `elm-verify-examples`</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:25:43.151400</ts>
    <user>Lynne</user>
    <text>One can't really choose how comparison is done there as far as I know</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:25:53.151600</ts>
    <user>Dorotha</user>
    <text>Yeah, that’s why</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:26:28.151800</ts>
    <user>Lynne</user>
    <text>So correct answer would be to avoid using `elm-verify-examples` for functions returning floats unless there is some support for this case in that library</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:30:25.152100</ts>
    <user>Dorotha</user>
    <text>Or if you’re absolutely sure that precision wouldn’t be a problem, wrapping with `Ok` would allow to workaround the `Float` check &lt;https://github.com/BrianHicks/elm-trend/blob/master/src/Trend/Linear.elm#L90&gt;</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:34:36.152400</ts>
    <user>Dorotha</user>
    <text>Other things to consider: multiplying the value by e.g. 10000 and rounding to an integer, although that would complicate the tests.</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:35:03.152600</ts>
    <user>Dorotha</user>
    <text>Or using `String.fromFloat` and then comparing with a string</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T05:55:27.152800</ts>
    <user>Ayesha</user>
    <text>Thank you all :slightly_smiling_face:  &lt;@Dorotha&gt; I have used `Ok` and it works.</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T06:08:12.153100</ts>
    <user>Huong</user>
    <text>I'm just really stoked people are using `elm-verify-examples`. Go &lt;@Ayesha&gt;! :tada: :tada:</text>
  </message>
  <message conversation_id="1282">
    <ts>2019-04-22T06:34:14.153400</ts>
    <user>Ayesha</user>
    <text>Thanks &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="1283">
    <ts>2019-04-22T10:10:57.154000</ts>
    <user>Buffy</user>
    <text>Better way? Would you elaborate?</text>
  </message>
  <message conversation_id="1281">
    <ts>2019-04-22T11:31:55.154800</ts>
    <user>Art</user>
    <text>Hello All</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:40:57.155600</ts>
    <user>Nestor</user>
    <text>Hi everybody. Is someone running server side rendered elm in production?</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:51:46.157900</ts>
    <user>Lindsey</user>
    <text>So, I'm running a site on aws.  When I'm using firefox, occasionally I get an 'Err Http.NetworkError' back from a &lt;http://Http.post|Http.post&gt; cmd.  I can't reproduce it locally, and chrome doesn't appear to have this issue.  Does this ring any bells for you all?</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:53:18.158000</ts>
    <user>Lindsey</user>
    <text>When I look at the network debugger in FF, my requests have 200 responses, except for the bad ones which have no responses at all.  There aren't any response headers.</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:54:07.158200</ts>
    <user>Lynne</user>
    <text>May it time out?</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:55:15.158500</ts>
    <user>Lindsey</user>
    <text>doesn't seem so.  The error response is immediate.</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:55:54.159300</ts>
    <user>Lynne</user>
    <text>Then FF is dropping connection for some reason. Weird.</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:56:08.159800</ts>
    <user>Lindsey</user>
    <text>There's a debugger tab called Timings.  under that everything reads 0ms:  ```Blocked:
0 ms
DNS resolution:
0 ms
Connecting:
0 ms
TLS setup:
0 ms
Sending:
0 ms
Waiting:
0 ms
Receiving:
0 ms```</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:56:48.160600</ts>
    <user>Lynne</user>
    <text>I would google for FF connection drop or something like this if I were you</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:56:52.160900</ts>
    <user>Lynne</user>
    <text>Does not seem being an Elm issue</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:57:15.161400</ts>
    <user>Audry</user>
    <text>So I'm currently  learning React at my bootcamp, but I chose to opt out since I already know it fairly well and instead focus on learning / building things with Elm for my projects. Would anyone be interested in helping me build a calculator app for today's assignment - in Elm?</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:59:19.161600</ts>
    <user>Lindsey</user>
    <text>I guess I'll have to code up some kind of retry logic...</text>
  </message>
  <message conversation_id="1284">
    <ts>2019-04-22T11:59:41.161800</ts>
    <user>Lynne</user>
    <text>It would not hurt anyway</text>
  </message>
  <message conversation_id="1285">
    <ts>2019-04-22T12:08:33.162300</ts>
    <user>Hoa</user>
    <text>Bootcamp: “A military training camp for new recruits, with very harsh discipline.”  Sounds tough  :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1286">
    <ts>2019-04-22T12:35:08.163300</ts>
    <user>Sabra</user>
    <text>Is this an option for your class, to opt out or do it in another language?</text>
  </message>
  <message conversation_id="1286">
    <ts>2019-04-22T12:36:05.163500</ts>
    <user>Hoyt</user>
    <text>Also:
&amp;gt;  a short, intensive, and rigorous course of training

:slightly_smiling_face:</text>
  </message>
  <message conversation_id="1285">
    <ts>2019-04-22T12:49:06.163800</ts>
    <user>Hoa</user>
    <text>Better :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1286">
    <ts>2019-04-22T12:54:42.164000</ts>
    <user>Audry</user>
    <text>yeah, we have what are called "stretch goals". I intend on extending the application using Elm</text>
  </message>
  <message conversation_id="1286">
    <ts>2019-04-22T12:54:59.164200</ts>
    <user>Audry</user>
    <text>But I'm also going to rebuild it from scratch in Elm (it's not a huge assignment)</text>
  </message>
  <message conversation_id="1287">
    <ts>2019-04-22T13:51:20.172000</ts>
    <user>Jillian</user>
    <text>Svelte 3 was just released and I really enjoyed the video linked in the blog that shows how it works:
&lt;http://svelte.dev/blog/svelte-3-rethinking-reactivity&gt;

I noticed a lot of conceptual similarities with elm (compiler assisting, dead code elimination, batteries included etc)

I was wondering on a theoretical level, could Elm take a similar approach and ditch the Virtual Dom? Or is Elms Vdom already taking a similar approach?

I am not familiar with the inner workings of compilers and/or vdom, just curious if there are fundamental concepts blocking elm to do something similar.</text>
  </message>
  <message conversation_id="1286">
    <ts>2019-04-22T15:05:43.172700</ts>
    <user>Delois</user>
    <text>I believe there was an elm talk about building a calculator in elm.</text>
  </message>
  <message conversation_id="1288">
    <ts>2019-04-22T16:04:50.173800</ts>
    <user>Hoyt</user>
    <text>Hi, folks. When you are decoding something and have a number of validations you want to put on it, do you just pipe to a few `Decode.andThen` like I have here?
```
emailDecoder : Decoder String
emailDecoder =
    let
        nonEmpty email =
            if String.length email &amp;gt; 0 then
                Decode.string

            else
                Decode.fail "must not be empty"

        containsAtSymbol email =
            if String.contains "@" email then
                Decode.string

            else
                Decode.fail "must have an @ symbol"
    in
    Decode.string
        |&amp;gt; Decode.andThen nonEmpty
        |&amp;gt; Decode.andThen containsAtSymbol
```
I hesitate to have a single one with all the checks in it.</text>
  </message>
  <message conversation_id="1288">
    <ts>2019-04-22T16:06:28.174000</ts>
    <user>Hoyt</user>
    <text>I like the idea of having distinct validations</text>
  </message>
  <message conversation_id="1288">
    <ts>2019-04-22T16:07:32.174200</ts>
    <user>Hoyt</user>
    <text>Although I can think of a couple ways to have a set of them that I run through, that might return `Result String (Decoder String)` and then find the first one that doesn’t return an `Ok decoder`</text>
  </message>
  <message conversation_id="1289">
    <ts>2019-04-22T16:29:55.174400</ts>
    <user>Huong</user>
    <text>I tend to mostly use decoders for API data, which I trust to be semantically correct, so I basically haven't run into this case :thinking_face:</text>
  </message>
  <message conversation_id="1289">
    <ts>2019-04-22T16:31:11.174900</ts>
    <user>Huong</user>
    <text>I'd personally go for `Decode.succeed email` rather than repeating `Decode.string` - it feels like that spreads the knowledge of the underlying JSON structure over more auxiliary functions than strictly necessary</text>
  </message>
  <message conversation_id="1290">
    <ts>2019-04-22T16:37:34.178800</ts>
    <user>Vonda</user>
    <text>Hey peeps. I coded up an `onKeyDown` handler that seems to work decent in my Elm app. But event propagation is confusing me a little bit. I put an `onKeyDown` handler onto the `body` div, thinking that this could act as a global `keydown` handler. But it only seems to work when I’ve selected an `input` text box within the app, and not any other elements. I figured that no matter what other elements I’ve selected within the app, as long as they don’t have any `stopPropagationOn` handlers attached to them, they’d propagate the `keydown` event up to that `body` div. But this doesn’t seem to be the case. Lmk if any of you know what I’m missing, thanks</text>
  </message>
  <message conversation_id="1289">
    <ts>2019-04-22T16:38:18.179500</ts>
    <user>Vonda</user>
    <text>Also not sure if this belongs in &lt;#C0CJ3SBBM|general&gt; or &lt;#C192T0Q1E|beginners&gt;. Not sure how noob I count as being :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1289">
    <ts>2019-04-22T16:53:14.180100</ts>
    <user>Huong</user>
    <text>You can attach handlers to the window using &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events#onKeyDown&gt;</text>
  </message>
  <message conversation_id="1290">
    <ts>2019-04-22T17:00:52.181200</ts>
    <user>Hoyt</user>
    <text>Ah, switching to `Decode.succeed email` is a good idea.</text>
  </message>
  <message conversation_id="1290">
    <ts>2019-04-22T17:01:31.182000</ts>
    <user>Hoyt</user>
    <text>I’m doing this on decoding the flags that are coming in on initialization. We’re experimenting with the idea of supporting a nice elm-based error screen if any error happens on initialization.</text>
  </message>
  <message conversation_id="1290">
    <ts>2019-04-22T17:02:26.183000</ts>
    <user>Vonda</user>
    <text>Yeah I’m already using that. And it does work. But I’m wondering why attaching my own `onKeyDown` handler to the `body` div doesn’t also work, especially since it would work much better for doing keyboard shortcuts that wouldn’t work within `stopPropagationOn` elements. (The global one you linked wouldn’t be affected by `stopPropagationOn`)</text>
  </message>
  <message conversation_id="1290">
    <ts>2019-04-22T17:03:55.183800</ts>
    <user>Vonda</user>
    <text>Oh… nvm. The global one is indeed affected by `stopPropagationOn`. So yeah this would work as a solution. But I’m still very curious so lmk if anyone knows why the `body` one doesn’t work as an alternative.</text>
  </message>
  <message conversation_id="1290">
    <ts>2019-04-22T17:24:31.184700</ts>
    <user>Vonda</user>
    <text>FYI for anyone interested, turns out you need to set the `tabindex` property on `div` elements in order for `keydown` handlers to work properly. Still not sure why, but this fixed my issue.
&lt;https://stackoverflow.com/questions/43503964/onkeydown-event-not-working-on-divs-in-react&gt;</text>
  </message>
  <message conversation_id="1291">
    <ts>2019-04-22T17:47:31.185400</ts>
    <user>Erlene</user>
    <text>Does anyone know an Elm library or function to convert a random string to a valid class name?</text>
  </message>
  <message conversation_id="1291">
    <ts>2019-04-22T18:01:01.185700</ts>
    <user>Nestor</user>
    <text>Maybe this can help?
&lt;https://package.elm-lang.org/packages/hecrj/elm-slug/latest/&gt;</text>
  </message>
  <message conversation_id="1290">
    <ts>2019-04-22T19:58:47.186700</ts>
    <user>Earlean</user>
    <text>"We've also changed our tagline, from 'The magical disappearing UI framework' to 'Cybernetically enhanced web apps'. " sounds like a very bad marketing decision.</text>
  </message>
  <message conversation_id="1292">
    <ts>2019-04-22T20:04:46.186900</ts>
    <user>Earlean</user>
    <text>doing what SVELTE does requires a restricted DSL that is restricted enough that you can do it statically at compile time. So the 'view' part of your app needs to be written in a more restricted language that the rest of your app.</text>
  </message>
  <message conversation_id="1291">
    <ts>2019-04-22T20:30:09.187100</ts>
    <user>Augustus</user>
    <text>A cheap way to do it could be to start with a prefix like `gc` so that you won't have to worry about strings starting with a dash or underscore, and then regex replace any character that isn't `[A-z0-9]` with an underscore or empty string and append it to the prefix. If uniqueness is a problem you could use the prefix plus a counter for each time to create a claasname, so you get `gc1` `gc2` etc</text>
  </message>
  <message conversation_id="1292">
    <ts>2019-04-22T21:05:32.187300</ts>
    <user>Earlean</user>
    <text>The outcome is that you're trading composition for performance, which is almost always the case.  ie. Manual memory management is faster than garbage collection but requires a larger amount of work, duplication and reduces code reuse and sharing.</text>
  </message>
  <message conversation_id="1293">
    <ts>2019-04-23T03:26:50.188400</ts>
    <user>Hoa</user>
    <text>I’ve read the intro material.  From what I understand they “imperatively” updates the DOM by compiling svelte code.  Clever. I guess this is the same approach used by Imba which has great performance too. &lt;http://imba.io&gt;   Here there’s a related discussion: &lt;https://discourse.elm-lang.org/t/an-alternative-to-virtual-dom-20x-faster/2264&gt;</text>
  </message>
  <message conversation_id="1292">
    <ts>2019-04-23T03:32:38.188600</ts>
    <user>Earlean</user>
    <text>Google's 'incremental dom' is the same idea. But it requires that you can know the data dependency relationship between data and the view statically at compile time</text>
  </message>
  <message conversation_id="1292">
    <ts>2019-04-23T03:33:56.188800</ts>
    <user>Earlean</user>
    <text>See their `{#each` syntax, because they can't call a function like `map` to do it and still keep track of data dependencies statically</text>
  </message>
  <message conversation_id="1292">
    <ts>2019-04-23T03:39:21.189100</ts>
    <user>Earlean</user>
    <text>All flow control in the view needs to be compile time trackable, which means no arbitrary loops or recursion. They achieve this restriction by having a specific template syntax that can only describe that restricted flow control</text>
  </message>
  <message conversation_id="1294">
    <ts>2019-04-23T04:15:48.189500</ts>
    <user>Valda</user>
    <text>&lt;https://www.zdnet.com/article/programming-languages-dont-bother-learning-these-ones-in-2019/&gt;</text>
  </message>
  <message conversation_id="1294">
    <ts>2019-04-23T04:15:57.189900</ts>
    <user>Valda</user>
    <text>I feel personally attacked by this list</text>
  </message>
  <message conversation_id="1294">
    <ts>2019-04-23T04:20:50.191200</ts>
    <user>Lynne</user>
    <text>Survivorship bias</text>
  </message>
  <message conversation_id="1294">
    <ts>2019-04-23T04:21:35.192400</ts>
    <user>Danika</user>
    <text>Someone posted the actual list on &lt;#C0CJ671HU|misc&gt; the other day, it was totally arbitrary </text>
  </message>
  <message conversation_id="1294">
    <ts>2019-04-23T04:21:49.192600</ts>
    <user>Lynne</user>
    <text>Given how many other popular and growing though still niche languages are on that list I would not pay a big mind to that article</text>
  </message>
  <message conversation_id="1294">
    <ts>2019-04-23T04:27:43.194300</ts>
    <user>Danika</user>
    <text>They mostly arbitrarily rank the languages in 3 categories “community engagement”, “job market”, and “growth and tools” and basically just take the average and call it a day</text>
  </message>
  <message conversation_id="1294">
    <ts>2019-04-23T04:27:59.194800</ts>
    <user>Danika</user>
    <text>Dart apparently has the worst job market but the best growth :innocent:</text>
  </message>
  <message conversation_id="1295">
    <ts>2019-04-23T05:48:02.195200</ts>
    <user>Liza</user>
    <text>keyEvents works only on elements that can have focus..</text>
  </message>
  <message conversation_id="1295">
    <ts>2019-04-23T05:48:16.195400</ts>
    <user>Liza</user>
    <text>better use global handler for that,</text>
  </message>
  <message conversation_id="1295">
    <ts>2019-04-23T06:01:51.196700</ts>
    <user>Loralee</user>
    <text>How can we insert CSS classes in the Html as Elm-ui does?</text>
  </message>
  <message conversation_id="1295">
    <ts>2019-04-23T06:13:41.197300</ts>
    <user>Liza</user>
    <text>create just style node with css content</text>
  </message>
  <message conversation_id="1294">
    <ts>2019-04-23T06:14:28.197900</ts>
    <user>Dayna</user>
    <text>Yep, there's nothing else, here's the source from elm-ui: &lt;https://github.com/mdgriffith/elm-ui/blob/64c9670778a6b74c15f310e6a1136780620f04c7/src/Internal/Model.elm#L2314&gt;</text>
  </message>
  <message conversation_id="1295">
    <ts>2019-04-23T06:15:53.198000</ts>
    <user>Liza</user>
    <text>just was searching for that line..</text>
  </message>
  <message conversation_id="1296">
    <ts>2019-04-23T06:43:47.200900</ts>
    <user>Nana</user>
    <text>it makes some degree of sense in that it's probably tough finding a job, there's not many job listings for Elm</text>
  </message>
  <message conversation_id="1296">
    <ts>2019-04-23T06:44:44.201100</ts>
    <user>Nana</user>
    <text>but it's also pretty silly since there's an infinite list of languages that are less popular than Elm</text>
  </message>
  <message conversation_id="1296">
    <ts>2019-04-23T06:50:24.201400</ts>
    <user>Nana</user>
    <text>and the "community engagement" ranking was a bit unfair because the Elm community uses Slack instead of StackOverflow</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:01:29.202800</ts>
    <user>Kimbery</user>
    <text>I'm trying to install `elm/http` v2 but elm always tries to install v1. I presume one of my dependencies is forcing v1, is there any way to find out which one?</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:02:10.203200</ts>
    <user>Lynne</user>
    <text>Most likely it is `elm/core` or `elm/json`</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:02:34.203600</ts>
    <user>Kimbery</user>
    <text>righto, tried `elm/json` already, I'll give `elm/core` a go</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:03:19.203900</ts>
    <user>Earnest</user>
    <text>You can paste your elm.json here:
&lt;https://www.markuslaire.com/github/elm-dependencies-analyzer/&gt;</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:05:14.205000</ts>
    <user>Huong</user>
    <text>OH</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:05:19.205500</ts>
    <user>Kimbery</user>
    <text>oh nice</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:05:21.205600</ts>
    <user>Huong</user>
    <text>can I use you for an experiment?</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:05:30.205800</ts>
    <user>Huong</user>
    <text>so hold on and don’t do anything for a minute :smile:</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:05:48.206400</ts>
    <user>Corinne</user>
    <text>Ugh, that's a low-quality piece of journalism.</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:05:49.206600</ts>
    <user>Kimbery</user>
    <text>that's very handy</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:05:56.206800</ts>
    <user>Liza</user>
    <text>need some-how remember that name..</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:07:03.208100</ts>
    <user>Lynne</user>
    <text>Bookmark it?</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:07:21.208500</ts>
    <user>Huong</user>
    <text>I have a work-in-progress CLI tool for doing this type of thing. I haven’t officially released it, but if you feel like giving it a go: `npm i -g elm-json` and then `elm-json install elm/http@2.0.0` or `elm-json upgrade --unsafe` if you already have `elm/http` installed</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:08:41.208800</ts>
    <user>Kimbery</user>
    <text>that sounds great, I'll give it a go</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:10:21.210000</ts>
    <user>Kimbery</user>
    <text>&lt;@Huong&gt; that's awesome, I'm onboarding some javascript devs and this is definitely not Elm's finest moment so far :sweat_smile: your tool should keep them happy</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:15:19.210800</ts>
    <user>Liza</user>
    <text>would be nice if such tool would be part of `elm` it self, with `elm install`</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:15:53.211500</ts>
    <user>Huong</user>
    <text>I’m sure it eventually will be - this is just an intermediate solution, the same way `elm-test` is</text>
  </message>
  <message conversation_id="1298">
    <ts>2019-04-23T07:16:24.212300</ts>
    <user>Liza</user>
    <text>rewrite `elm-test` to haskell :hug: or maybe extend `elm repl` to be able execute some elm from cli, like `node -e 'console.log("hello)'`</text>
  </message>
  <message conversation_id="1298">
    <ts>2019-04-23T07:17:09.213400</ts>
    <user>Emilee</user>
    <text>hmm, the results of `Browser.Events.onResize` and `Browser.Dom.getViewport` seem to be different. any idea how i can get the result of `Browser.Events.onResize` via task?</text>
  </message>
  <message conversation_id="1298">
    <ts>2019-04-23T07:18:22.214000</ts>
    <user>Liza</user>
    <text>maybe create just middleware model, that waits for that event ?</text>
  </message>
  <message conversation_id="1298">
    <ts>2019-04-23T07:18:27.214200</ts>
    <user>Liza</user>
    <text>or pass it as flag ?</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:20:53.214800</ts>
    <user>Kimbery</user>
    <text>Is there any way to do file uploads with `elm/http` v1?</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:21:47.215700</ts>
    <user>Huong</user>
    <text>With ports and base64-encoded strings, it can be done but it’s rather hacky</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:21:52.215800</ts>
    <user>Kimbery</user>
    <text>(got a bunch of dependencies that depend on `elm/http` v1)</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:25:24.216300</ts>
    <user>Kimbery</user>
    <text>I guess there's no way to install from github with 0.19? (I see there's a pending PR against elm-http-builder)</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:26:50.216700</ts>
    <user>Lynne</user>
    <text>There is &lt;https://github.com/Skinney/elm-git-install&gt; but are you going to have two versions of `elm/http` in your app?</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:27:26.217300</ts>
    <user>Kimbery</user>
    <text>I was going to fork http-builder and merge the PR in.</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:27:42.217800</ts>
    <user>Lynne</user>
    <text>Ah, then that tool might help</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:27:46.217900</ts>
    <user>Kimbery</user>
    <text>does elm-git-install work with 0.19?</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:27:50.218100</ts>
    <user>Lynne</user>
    <text>Yes</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:27:57.218400</ts>
    <user>Kimbery</user>
    <text>oh awesome - phew</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:28:02.218600</ts>
    <user>Kimbery</user>
    <text>that gets me out of a tricky spot</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:28:44.219300</ts>
    <user>Kimbery</user>
    <text>always used elm-github-install with 0.18, exactly for moments like this</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:28:58.219800</ts>
    <user>Kimbery</user>
    <text>hopefully the PR for elm-http-builder will be merged fairly soon</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:29:08.220100</ts>
    <user>Lynne</user>
    <text>Actually, I don't know but someone mentioned here it was updated if I remember correctly</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:29:19.220300</ts>
    <user>Kimbery</user>
    <text>looks like it from the readme yeah</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:32:04.221700</ts>
    <user>Huong</user>
    <text>`elm-git-install` was specifically made for 0.19. It just clones the dependency and adds it to your source-directories, so it’s not quite the same thing as installing a regular package (i.e. won’t work for packages with kernel code etc, which essentially means it’s a pretty safe thing to do!)</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:32:43.222100</ts>
    <user>Lynne</user>
    <text>It used to exist in 0.18 as well</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:32:59.222400</ts>
    <user>Kimbery</user>
    <text>that seems fine, shame it has to do a clone but I can live with it temporarily</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:33:24.222600</ts>
    <user>Huong</user>
    <text>different author, different tool :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:33:53.222800</ts>
    <user>Lynne</user>
    <text>Only the name stays :smile:</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:34:24.223000</ts>
    <user>Huong</user>
    <text>close enough - elm-git-install &amp;lt;-&amp;gt; elm-github-install :smile:</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:35:38.223300</ts>
    <user>Lynne</user>
    <text>Ah, I did not realize it was github-install</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:36:48.223500</ts>
    <user>Huong</user>
    <text>so to recap, it’s a different tool with a different name by a different author, solving a related but different problem (elm-github-install specifically wanted to make it possible to install kernel code) :smile:</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T07:38:10.223700</ts>
    <user>Lynne</user>
    <text>Yeah, duck test seems to pass</text>
  </message>
  <message conversation_id="1299">
    <ts>2019-04-23T07:58:02.225200</ts>
    <user>Gertrude</user>
    <text>is there a way to check if there are any pending Cmds still being processed? Ie. I do a Cmd.batch of HTTP requests, and I want to know if any of them are still loading?</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T08:01:25.225900</ts>
    <user>Kimbery</user>
    <text>There's no way of doing it via Cmds, you'd need to track their status yourself in the Model.</text>
  </message>
  <message conversation_id="1299">
    <ts>2019-04-23T08:02:06.226200</ts>
    <user>Kimbery</user>
    <text>Depending on your needs you might consider &lt;https://package.elm-lang.org/packages/krisajenkins/remotedata/latest/RemoteData&gt;</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T09:11:19.226600</ts>
    <user>Lea</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/http/latest/Http#Progress&gt;</text>
  </message>
  <message conversation_id="1300">
    <ts>2019-04-23T09:13:12.227200</ts>
    <user>Emilee</user>
    <text>hmm, can i somehow install a global event handler in elm?</text>
  </message>
  <message conversation_id="1300">
    <ts>2019-04-23T09:24:17.228000</ts>
    <user>Dede</user>
    <text>You mean like keypresses and suchlike?  I don’t know of a generic way, although Browser.Events covers a lot of the most common stuff.</text>
  </message>
  <message conversation_id="1297">
    <ts>2019-04-23T09:27:03.229700</ts>
    <user>Emilee</user>
    <text>scrolling, in particular</text>
  </message>
  <message conversation_id="1300">
    <ts>2019-04-23T09:34:39.230600</ts>
    <user>Dede</user>
    <text>ISTR having to write a global handler in JS and wire it up with ports, although I can’t find the relevant code lying around right now.</text>
  </message>
  <message conversation_id="1300">
    <ts>2019-04-23T09:35:03.231000</ts>
    <user>Dede</user>
    <text>Something like `_window.addEventListener('scroll', scrolledOrResized);`  which I just snagged from &lt;http://guupa.com/elm-scroll-resize-events/&gt;</text>
  </message>
  <message conversation_id="1300">
    <ts>2019-04-23T09:35:36.231700</ts>
    <user>Emilee</user>
    <text>i see :slightly_smiling_face: i thought there was some change that made it possible to register global (body-level) handlers from within elm, but that might have just been a fever dream :wink:</text>
  </message>
  <message conversation_id="1300">
    <ts>2019-04-23T09:36:26.232800</ts>
    <user>Emilee</user>
    <text>i may just resort to grabbing animationframe, since scrolling doesn't actually catch every case I might recalculate my logic anyway. a lot of message spam, but that's okay i think^^</text>
  </message>
  <message conversation_id="1300">
    <ts>2019-04-23T09:36:45.233200</ts>
    <user>Emilee</user>
    <text>i hope the application doesn't become too much of a cpu hog that way ^^'</text>
  </message>
  <message conversation_id="1301">
    <ts>2019-04-23T10:17:39.233900</ts>
    <user>Nana</user>
    <text>no you can't check for "pending Cmds", and `Http.Progress` isn't really for this either</text>
  </message>
  <message conversation_id="1301">
    <ts>2019-04-23T10:20:56.234200</ts>
    <user>Nana</user>
    <text>you can however have some value in the model which you update whenever you make a request, and when you get a response</text>
  </message>
  <message conversation_id="1302">
    <ts>2019-04-23T11:17:35.237600</ts>
    <user>Caroline</user>
    <text>Is there a pass-thru decoder for `elm/bytes`? I'm downloading a file with progress using http and I'm using `expectBytes` which takes a message and a decoder. I want the decoder to just return the same bytes instead of decoding it into an elm value. (The bytes will be passed onto `File.Download.bytes`)</text>
  </message>
  <message conversation_id="1302">
    <ts>2019-04-23T11:20:43.238300</ts>
    <user>Earnest</user>
    <text>&lt;@Caroline&gt; Probably need to whip something up with `expectBytesResponse`:
&lt;https://package.elm-lang.org/packages/elm/http/latest/Http#expectBytesResponse&gt;</text>
  </message>
  <message conversation_id="1302">
    <ts>2019-04-23T11:22:19.239300</ts>
    <user>Caroline</user>
    <text>&lt;@Earnest&gt; thanks - found a possible answer here I think - &lt;https://stackoverflow.com/questions/52054917/downloading-file-from-post-request-with-elm&gt;</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T11:54:26.239900</ts>
    <user>Frieda</user>
    <text>Any Miami Elm developers here?</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T12:00:09.240400</ts>
    <user>Alicia</user>
    <text>Orlando here, kinda close!</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:15:12.241400</ts>
    <user>Maxwell</user>
    <text>Couldn't find anything on client-side hydration with elm. Can elm be configured to recycle/hydrate existing HTML before rendering the page?</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T12:17:42.243300</ts>
    <user>Maxwell</user>
    <text>Say I have an app that renders this HTML on the page `&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;10&amp;lt;/div&amp;gt;&amp;lt;button&amp;gt;Increment&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;`.</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:18:59.245500</ts>
    <user>Maxwell</user>
    <text>If I serve my index.html with some pre-existing HTML that matches the HTML I wrote above, will elm reuse the nodes ("hydrate") or ignore it (duplicating the HTML by default)?</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:21:45.247900</ts>
    <user>Leoma</user>
    <text>In Elm, how much work triggered by an msg is synchronous? Is the call to `update` synchronous, the following render, calls make to Ports, etc…</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:24:40.248100</ts>
    <user>Huong</user>
    <text>It depends. Certain DOM events will call `update` synchronously and redraw the DOM synchronously afterwards (to prevent the jumping cursor type bugs).

Other events, like an HTTP response coming in, will asynchronously trigger `update`, and `update` will then asynchronously schedule a render.

Ports are (afaik) always triggered synchronously.</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:25:55.248300</ts>
    <user>Huong</user>
    <text>Note that a lot of this changed between 0.18 and 0.19, but most of those changes shouldn’t have obvious impact on users, except a few things have now transparently become possible (such as trigger things through a port JS in response to a click event, within the same tick)</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:25:58.248500</ts>
    <user>Leoma</user>
    <text>Thanks. I wanted to call `.focus` on mobile safari. I’d have to do it over a port. Problem is that mobile Safari devs thought it would be nicer to only have  `.focus` behave if called synchronousely from a user event.</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:26:19.248700</ts>
    <user>Leoma</user>
    <text>So, I think this is impossible with Elm.</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:26:23.248900</ts>
    <user>Huong</user>
    <text>You should be able to do that in 0.19</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:26:39.249100</ts>
    <user>Huong</user>
    <text>if it is in response to a user event, that is</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:27:05.249300</ts>
    <user>Leoma</user>
    <text>Oh. So the update via user event will be sync. And the render, AND the port calls?</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:27:23.249500</ts>
    <user>Huong</user>
    <text>pretty much!</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:27:45.249700</ts>
    <user>Leoma</user>
    <text>Oh great news! I’ll give that a go. THANK YOU for the info.</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T12:35:03.251400</ts>
    <user>Alicia</user>
    <text>&lt;@Maxwell&gt; it’s not really supported right now, you can do it if you are using `Browser.element` because of a quirk of the implementation (it doesn’t clear out the node), but if you are using `Browser.application` there is no way</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:35:27.251600</ts>
    <user>Dede</user>
    <text>So, I can't find it now, perhaps I was hallucinating.  ISTR there was an issue where batched Cmds could run asynchronously where the individual ones would run synchronously.</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T12:35:40.251900</ts>
    <user>Alicia</user>
    <text>relevant bits are &lt;https://github.com/elm/browser/blob/master/src/Elm/Kernel/Browser.js#L45-L53&gt; and &lt;https://github.com/elm/browser/blob/master/src/Elm/Kernel/Browser.js#L83&gt;</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T12:35:41.252000</ts>
    <user>Dede</user>
    <text>Perhaps it's closed, or I'm misremembering  the details.</text>
  </message>
  <message conversation_id="1304">
    <ts>2019-04-23T12:36:07.252500</ts>
    <user>Maxwell</user>
    <text>Thanks &lt;@Cleotilde&gt;. I made this ellie to show what I mean: &lt;https://ellie-app.com/5mg8w4VdnBLa1&gt;</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T12:36:14.252700</ts>
    <user>Maxwell</user>
    <text>I'll check out Browser.element.</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T12:42:24.254000</ts>
    <user>Maxwell</user>
    <text>I've always wondered, is Elm's kernel JavaScript code, e.g., (src/Elm/Kernel/Browser.js) written by hand or by a compiler?</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T12:42:32.254200</ts>
    <user>Huong</user>
    <text>hand</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T12:42:43.254600</ts>
    <user>Maxwell</user>
    <text>Oh, I see.</text>
  </message>
  <message conversation_id="1305">
    <ts>2019-04-23T12:47:45.259900</ts>
    <user>Barney</user>
    <text>Hi.
What are the guaranties regarding call order of cmd ports subscriptions on the javascript side?
I have a case where 2 calls of my top-level update function writes to a port. The 1st call also returns a Random.generate. The unexpected behavior is that the data written to my port by the second update is passed to my javascript subscription before the data written by the first update.
I know the commands execution order is not at all guaranteed, but I always thought it applied only to the commands emitted by a single update.
Should I consider the behavior I observe as being normal?</text>
  </message>
  <message conversation_id="1306">
    <ts>2019-04-23T12:57:54.260000</ts>
    <user>Kenya</user>
    <text>&lt;@Erlene&gt; You could hash (and possibly base64 encode) the string. That would make for a valid and unique class name.</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:45:01.260700</ts>
    <user>Alicia</user>
    <text>I think it will work with `Browser.sandbox` as well, if you click `Compile` in ellie it will start with that `10` as the initial value in the HTML, and it won’t change until it re-renders</text>
  </message>
  <message conversation_id="1306">
    <ts>2019-04-23T14:45:14.260900</ts>
    <user>Alicia</user>
    <text>if you set the initial value to 10 on the elm side it should be seamless</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:45:38.261100</ts>
    <user>Maxwell</user>
    <text>Nope.</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:45:52.261300</ts>
    <user>Maxwell</user>
    <text>As you can see in the ellie I posted, the DOM nodes are created from scratch every time.</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:46:23.261500</ts>
    <user>Maxwell</user>
    <text>(That's what the animation/keyframes is for there in the CSS; to show a fade-in animation).</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:49:11.261900</ts>
    <user>Maxwell</user>
    <text>A better question might be: where does Elm stand wrt SSR? Is it even desirable?</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:56:11.262200</ts>
    <user>Alicia</user>
    <text>oh I see what you mean, I guess it is not possible then :disappointed:</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:56:26.262400</ts>
    <user>Alicia</user>
    <text>I thought it would diff starting from the node you give it and only replace if needed</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:56:52.262600</ts>
    <user>Maxwell</user>
    <text>Do you think this would be a desirable thing to have?</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:57:29.262800</ts>
    <user>Alicia</user>
    <text>I think so, there’s been talk about it before, server side rendering was going to be part of 0.19 but was dropped due to time constraints</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T14:58:55.263000</ts>
    <user>Maxwell</user>
    <text>How would SSR work in elm (in theory) since the compiler generates javacript that runs in the browser?</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T15:02:05.263300</ts>
    <user>Alicia</user>
    <text>oh, got a lead, it looks like it works when you aren’t in debug mode</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T15:02:55.263500</ts>
    <user>Alicia</user>
    <text>None</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T15:05:46.263900</ts>
    <user>Maxwell</user>
    <text>In your gif, when you start clicking the button, the app has already started.</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T15:06:23.264200</ts>
    <user>Maxwell</user>
    <text>There's a 1.5 second delay before calling `Elm.Main.init`.</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T15:06:35.264400</ts>
    <user>Maxwell</user>
    <text>That's on purpose to see if the nodes are created twice.</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T15:28:10.264700</ts>
    <user>Alicia</user>
    <text>try it out, with `debug` on it replaces it twice like this</text>
  </message>
  <message conversation_id="1303">
    <ts>2019-04-23T15:29:54.265100</ts>
    <user>Alicia</user>
    <text>but without debug on it doesn’t replace it, the events only get hooked up after the 1.5s delay, but the nodes are there</text>
  </message>
  <message conversation_id="1307">
    <ts>2019-04-23T16:03:23.266100</ts>
    <user>Jesenia</user>
    <text>I am trying to find out if I can start a good PWA project using Elm. Please help</text>
  </message>
  <message conversation_id="1307">
    <ts>2019-04-23T16:05:06.266400</ts>
    <user>Jesenia</user>
    <text>Elm(TEA)+PWA=?</text>
  </message>
  <message conversation_id="1307">
    <ts>2019-04-23T16:28:13.266800</ts>
    <user>Willodean</user>
    <text>what is PWA?</text>
  </message>
  <message conversation_id="1307">
    <ts>2019-04-23T16:29:18.267000</ts>
    <user>Briana</user>
    <text>Progressive Web App?</text>
  </message>
  <message conversation_id="1308">
    <ts>2019-04-23T17:03:53.267600</ts>
    <user>Dayna</user>
    <text>Any Bulgarian Elm developers here? Please PM me.</text>
  </message>
  <message conversation_id="1307">
    <ts>2019-04-23T17:11:36.271400</ts>
    <user>Monnie</user>
    <text>&lt;@Jesenia&gt; : Try Create-elm-app from NPM. Two simple CLI commands and your Elm PWA is running :) Its amazing both for development and production.</text>
  </message>
  <message conversation_id="1309">
    <ts>2019-04-23T17:50:23.271600</ts>
    <user>Keneth</user>
    <text>&lt;#C4HTCLHPV|server-side-renderer&gt; i think you want to ask in here</text>
  </message>
  <message conversation_id="1308">
    <ts>2019-04-23T17:58:40.272000</ts>
    <user>Milda</user>
    <text>&lt;@Dayna&gt; Just a stab at it: if the derivation happens within view code then the reference being compared can be to the unchanging value from the model.</text>
  </message>
  <message conversation_id="1310">
    <ts>2019-04-23T20:06:51.279600</ts>
    <user>Fidela</user>
    <text>I'm trying to have a layout manager that I can reuse across different applications, that will manage each application component in a container that its responsible for. The way I'm trying to set it up right now is to have messages on the layout manager side that are specific to it (e.g. `type LayoutMsg = Resize | Move | Add | Remove | ... `), &amp;amp; the content that its containing will have application-level messages (e.g. `type AppMsg = NoOp | QueryBackendForSomething | ChangeViews | LayoutMessage Layout.LayoutMsg |  ... `).

Right now I'm running into issues with 2 different message types (generic `msg` which is the app-level message and `LayoutMsg`) not being able to exist in one div's attributes (styling &amp;amp; event handlers for the container, using `LayoutMsg`s) &amp;amp; html (what the container is containing, which has `AppMsg`s that will get handled by the application's model update). I get the feeling that this isn't the right approach for this problem, so I'm wondering what the correct direction might be.</text>
  </message>
  <message conversation_id="1310">
    <ts>2019-04-23T20:11:46.280900</ts>
    <user>Earlean</user>
    <text>&lt;@Fidela&gt; you need another type to unify your LayoutMsg with your AppMsg</text>
  </message>
  <message conversation_id="1310">
    <ts>2019-04-23T20:12:44.282600</ts>
    <user>Fidela</user>
    <text>something in layout like, `type LayoutMsg msg = AppMessage msg | Resize | Move | Add | Remove | ... `?</text>
  </message>
  <message conversation_id="1310">
    <ts>2019-04-23T20:14:14.282900</ts>
    <user>Earlean</user>
    <text>Yep</text>
  </message>
  <message conversation_id="1310">
    <ts>2019-04-23T20:14:48.283500</ts>
    <user>Fidela</user>
    <text>in retrospect that makes sense; I kept trying to think how to join them on the application level; thank you :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1311">
    <ts>2019-04-23T23:51:12.285100</ts>
    <user>Jillian</user>
    <text>Thanks you two, that was exactly the kind of insight I was hoping for</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:40:19.287200</ts>
    <user>Floy</user>
    <text>Hey everyone, is there any way on 0.19 to detect user leaving the current view? Meaning if user clicks the anchor we're handling loading new way as defined by stuff in `Browser.application` and that results in next requests. Would it be technically possible to found out currently loaded view and call functions producing commands for specific requests that are being tracked? Next thing is, I guess, to just combine cancel commands and new commands to init next view according to next URL</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:44:24.288200</ts>
    <user>Dede</user>
    <text>I’m not sure I completely follow what behavior you’re after.  It seems like you’re familiar with `Browser.application`, and therefore I assume `onUrlRequest` and `onUrlChange`…?</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:45:03.288400</ts>
    <user>Floy</user>
    <text>yes, I didn't go deep into details because I thought that part of information is being implied by sole fact of mentioning `Browser.Application`</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:45:14.288600</ts>
    <user>Dede</user>
    <text>There’s not really default behavior as such, though — you implement what to do when a click happens in your `onUrlRequest` handler, and you select what view to show in your `onUrlChange` handler.</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:45:39.288800</ts>
    <user>Floy</user>
    <text>I am researching canceling the requests, if background is needed</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:45:52.289000</ts>
    <user>Floy</user>
    <text>yes, I know that there isn't</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:46:04.289200</ts>
    <user>Floy</user>
    <text>it seems simple first time you look at it</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:46:31.289400</ts>
    <user>Dede</user>
    <text>I’m sorry I’m being dense.  Is it that you’re trying to cancel unrelated requests, e.g. outstanding http requests, if the view changes?</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:46:59.289600</ts>
    <user>Floy</user>
    <text>no problem, I guess I didn't do enough to make my problem clear</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:47:17.289800</ts>
    <user>Floy</user>
    <text>and yes, I am trying to cancel the pending requests from view A if user decided to switch to view B</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:48:44.290000</ts>
    <user>Dede</user>
    <text>Got it.  For that, you might want to record the `tracker` strings of the outstanding requests somewhere on the model and call `cancel` on them in `onUrlChange`.</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:50:19.290200</ts>
    <user>Floy</user>
    <text>that would work pretty neat in flat-like TEA
but with nested TEA it seems that only possibility to track requests reliable is to always expose, i.e. from my view `init` and `update` function, a list of `tracker` strings for the parent</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:50:30.290400</ts>
    <user>Floy</user>
    <text>?</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:50:35.290600</ts>
    <user>Floy</user>
    <text>or is it too much?</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:51:31.290900</ts>
    <user>Dede</user>
    <text>Alternately, you could add an additional function to your nested components to extract the tracked request names when needed.</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:51:54.291100</ts>
    <user>Dede</user>
    <text>(Or even just to cancel them, I suppose.)</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:52:45.291300</ts>
    <user>Floy</user>
    <text>I guess I would opt for 2nd solution just because it sounds appealing to me to have some sort of encapsulation of nested views</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T00:53:54.291500</ts>
    <user>Floy</user>
    <text>anyway, if I do access the `tracker` list it makes it parent's responsibility to handle any messages that are created via `Http.cancel` calls which resolves my problem of losing the child from which requests originated</text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T01:00:38.291700</ts>
    <user>Floy</user>
    <text>&lt;@Dede&gt; thx for some insights, I suppose I will try some simple implementation now :+1:</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T01:13:40.292100</ts>
    <user>Dede</user>
    <text>:thumbsup: </text>
  </message>
  <message conversation_id="1312">
    <ts>2019-04-24T02:32:26.292300</ts>
    <user>Bert</user>
    <text>create-elm-app's default has ServiceWorkers at least.</text>
  </message>
  <message conversation_id="1314">
    <ts>2019-04-24T02:36:20.292500</ts>
    <user>Bert</user>
    <text>Another way to handle this is to have the types as they are described here, and in the mixed message divs use e.g. `onClick (LayoutMessage Layout.Add)`, which has the type `Attribute AppMsg`.</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:54:30.294100</ts>
    <user>Ruthann</user>
    <text>i'm importing a local package (L) that requires it's own third party package (R), when i go to compile my main package, it says that L needs R, when i go to install R, it tells me it's already installed, because it's in elm.json</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:55:54.294400</ts>
    <user>Earlean</user>
    <text>'local package'?</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:56:32.294900</ts>
    <user>Ruthann</user>
    <text>```
    "source-directories": [
        "src",
        "local_packages/Alfred/src"
    ],
```</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:56:54.295800</ts>
    <user>Earlean</user>
    <text>ah, not a package. Just modules</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:56:55.295900</ts>
    <user>Huong</user>
    <text>If this is through `source-directories` - Elm only looks at the main elm.json, and doesn’t even know that other path is a package</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:57:20.296700</ts>
    <user>Ruthann</user>
    <text>ic, so i have to copy all the dependencies into the main elm.json</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:57:25.296900</ts>
    <user>Huong</user>
    <text>so its dependencies have to be added to the only elm.json elm actually looks at</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:57:31.297100</ts>
    <user>Ruthann</user>
    <text>does it matter if it's a direct or indirect dependency?</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:57:43.297500</ts>
    <user>Huong</user>
    <text>they need to be direct deps</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:57:51.297700</ts>
    <user>Huong</user>
    <text>since your modules use them</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:58:43.298800</ts>
    <user>Ruthann</user>
    <text>cool, thx!</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T02:59:38.299000</ts>
    <user>Huong</user>
    <text>and, a little plug for the tool I released yesterday - if you were to run `elm-json solve` on the `elm.json` of this Alfred, it would give you a concrete set of versions that should work</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:00:01.299200</ts>
    <user>Ruthann</user>
    <text>O_o!</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:04:20.299600</ts>
    <user>Floy</user>
    <text>that's funny :slightly_smiling_face:
requests created with `Task` you cannot cancel those :confused:</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:04:37.299800</ts>
    <user>Floy</user>
    <text>unless it's possible to cancel the task, which I do not know anything about</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:04:44.300000</ts>
    <user>Floy</user>
    <text>&lt;@Dede&gt; any thoughts on that?</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:05:21.300200</ts>
    <user>Ruthann</user>
    <text>so i ran it on the elm.json in the main project and it did the trick
doing it on the elm.json inside the local module doesn't give me the dependencies in the main package</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:07:54.300400</ts>
    <user>Huong</user>
    <text>Correct. I wasn’t very clear - what I meant to say was that you can run in on the `elm.json` of your “local package” to turn those version ranges into concrete versions that you can then install (manually) in your application’s elm.json</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:10:11.300700</ts>
    <user>Ruthann</user>
    <text>cool, thx for that</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:13:40.301100</ts>
    <user>Floy</user>
    <text>Hey, you cannot cancel `Task`? Or can you ?</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:18:55.302000</ts>
    <user>Earlean</user>
    <text>kind of...but not really.</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:19:12.302500</ts>
    <user>Earlean</user>
    <text>not in a way that it would be generally useful</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:19:42.303100</ts>
    <user>Floy</user>
    <text>so here's funny thing, at least it was funny for me :wink:
you can try and cancel http request that was done via `Http.request`, but you cannot do that for `Http.task`</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:19:46.303300</ts>
    <user>Floy</user>
    <text>kinda of akward</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:20:09.303900</ts>
    <user>Floy</user>
    <text>&lt;@Earlean&gt; do you have an example of doing this in non generally useful way?</text>
  </message>
  <message conversation_id="1313">
    <ts>2019-04-24T03:25:33.304700</ts>
    <user>Floy</user>
    <text>&lt;@Earlean&gt; I am just asking because I am curios :slightly_smiling_face:, it'd be nice to see some hack now and then :smile:</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:28:20.304800</ts>
    <user>Dayna</user>
    <text>True, but then your business logic stays inside the view, which is what you're trying to avoid.</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:30:21.305800</ts>
    <user>Nana</user>
    <text>&lt;@Floy&gt; you can ignore the response</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:30:37.306200</ts>
    <user>Earlean</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/core/latest/Process#kill&gt; does it, but it's not really complete</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:33:05.307700</ts>
    <user>Floy</user>
    <text>&lt;@Nana&gt; I know that, just have been looking for some hints
it's been quite puzzling to analyze that problem in Elm and even more surprising to notice that you can easily cancel `Http.request` but you cannot do the same with `Http.task`

thx &lt;@Earlean&gt;</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:33:24.308200</ts>
    <user>Floy</user>
    <text>I wonder if perhaps looking at this, this way I mean, is correct</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:33:50.308800</ts>
    <user>Floy</user>
    <text>maybe there is no use case and if use decide to use `Http.task` it is because you do not want this request to be interrupted</text>
  </message>
  <message conversation_id="1316">
    <ts>2019-04-24T03:44:59.309500</ts>
    <user>Nga</user>
    <text>What's the best approach if I need the higher range of Maybe.maps? Like a Maybe map6, Maybe map7, etc. Should I create those functions, or is there something else I should do?</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:46:41.309600</ts>
    <user>Maxwell</user>
    <text>&lt;@Alicia&gt; The second gif you posted (ssr2.gif) is more useful because it shows the problem precisely. The nodes *are created twice*. That's why you see the HTML fade in twice.

If elm hydrated DOM nodes, we would see the fade in animation only once, when the browser renders the HTML the first time, which is before elm takes over. When the elm app starts after the timeout, it appears to wipe out out the existing HTML in the selected container and creates the DOM tree from scratch, triggering the fade in animation a second time.</text>
  </message>
  <message conversation_id="1316">
    <ts>2019-04-24T03:47:59.310000</ts>
    <user>Nga</user>
    <text>I'm trying to map to a record using its constructor.</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T03:49:36.311200</ts>
    <user>Kris</user>
    <text>Look for the andMap function in the extra package </text>
  </message>
  <message conversation_id="1316">
    <ts>2019-04-24T03:51:16.312600</ts>
    <user>Huong</user>
    <text>You could pull in elm-community/maybe-extra which gives you `andMap`, or define it yourself real quick (`andMap = map2 (|&amp;gt;)`). With that, you can
```Just YourRecord
  |&amp;gt; andMap foo.first
  |&amp;gt; andMap foo.second
  |&amp;gt; ...
```</text>
  </message>
  <message conversation_id="1316">
    <ts>2019-04-24T03:52:20.313000</ts>
    <user>Nga</user>
    <text>Thank you both :slightly_smiling_face: I'll give that a shot</text>
  </message>
  <message conversation_id="1316">
    <ts>2019-04-24T03:59:02.313300</ts>
    <user>Carrie</user>
    <text>I want to use some of Ace's functions in elm. Is there any good way?</text>
  </message>
  <message conversation_id="1315">
    <ts>2019-04-24T04:26:38.314500</ts>
    <user>Liza</user>
    <text>is the same .. but it depends on your own style
```Maybe.map YourRecord foo.first
  |&amp;gt; andMap foo.second```</text>
  </message>
  <message conversation_id="1317">
    <ts>2019-04-24T05:32:29.316500</ts>
    <user>Emilee</user>
    <text>hmm, get a runtime error of `TypeError: QA is not a function` in my elm application when it is removed from the dom. I have no idea where the error gets "QA" from</text>
  </message>
  <message conversation_id="1317">
    <ts>2019-04-24T05:34:14.316900</ts>
    <user>Emilee</user>
    <text>ah, it's the minifier</text>
  </message>
  <message conversation_id="1317">
    <ts>2019-04-24T05:37:47.319700</ts>
    <user>Emilee</user>
    <text>well, that's an embarrassing problem for me to solve...^^'</text>
  </message>
  <message conversation_id="1317">
    <ts>2019-04-24T05:38:57.320600</ts>
    <user>Shaina</user>
    <text>Is anyone else having problem with Html.textarea and the Grammarly plugin? I'm using Firefox with the Grammarly plugin and the following snippet gives a type error in the console: &lt;https://ellie-app.com/5mzBgtKNrpTa1&gt;. To reproduce without running it locally right-click in the frame with the actual app and click "This Frame" -&amp;gt; "Open Frame in New Tab", then in the new tab resize the textarea (before clicking in it, giving it focus or writing in it), then click in the textarea and start writing. You'll notice that the reversed string is not being written and that if you go to the JS console you should see a "TypeError: domNode is undefined".</text>
  </message>
  <message conversation_id="1317">
    <ts>2019-04-24T05:40:18.322000</ts>
    <user>Emilee</user>
    <text>does anyone here have any experience with *removing* an elm app from the dom? i thought i had a good solution, but apparently it still throws errors sometimes (when there is a call to `getElement` running and the element isn't found, it then faceplants when trying to call the error scheduler). this seems to only happen when building optimized though</text>
  </message>
  <message conversation_id="1317">
    <ts>2019-04-24T05:41:18.323000</ts>
    <user>Shaina</user>
    <text>It seems like it works in Chrome.</text>
  </message>
  <message conversation_id="1317">
    <ts>2019-04-24T05:59:20.328300</ts>
    <user>Huong</user>
    <text>I responded in &lt;#C0CLGCMMF|testing&gt;. Generally try not to cross post questions, it makes things confusing</text>
  </message>
  <message conversation_id="1317">
    <ts>2019-04-24T06:00:03.328500</ts>
    <user>Bret</user>
    <text>Sure thing, I just realized &lt;#C0CLGCMMF|testing&gt; was probably a better place to post</text>
  </message>
  <message conversation_id="1318">
    <ts>2019-04-24T06:08:46.329700</ts>
    <user>Danika</user>
    <text>Grammarly and other extensions that mess with the DOM on their own will always run the risk of breaking things like elm </text>
  </message>
  <message conversation_id="1318">
    <ts>2019-04-24T06:26:32.329900</ts>
    <user>Shaina</user>
    <text>I understand that, but it's really quite unfortunate. I'll try to contact Grammarly, but in the meantime it would be nice if there was something I could do on my end to help fix the problem.</text>
  </message>
  <message conversation_id="1318">
    <ts>2019-04-24T06:28:04.331200</ts>
    <user>Danika</user>
    <text>Not really, the vdom operates on the assumption that nothing else will touch the parts of the real dom it controls. </text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:46:45.334800</ts>
    <user>Lilli</user>
    <text>Hey folks! We released a new stable version of our business product and we're finally moving to elm 0.19 :tada:</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:46:51.335100</ts>
    <user>Lilli</user>
    <text>I wanted to take this opportunity to split the app into 2 parts, the api/sdk lib and the browser app. How do you setup your project so that you can import a local module instead of installing it from the elm package repo?</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:48:47.335600</ts>
    <user>Huong</user>
    <text>Actually</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:49:05.336200</ts>
    <user>Huong</user>
    <text>```         , Attr.attribute "data-gramm_editor" "false"
```</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:49:23.336700</ts>
    <user>Huong</user>
    <text>Adding that to your `textfield` makes Grammarly steer clear of it</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:49:47.337300</ts>
    <user>Lilli</user>
    <text>once we get enough test coverage, we'll release it in the official repo too, but now it's not ready yet :sweat_smile:</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:50:31.337800</ts>
    <user>Danika</user>
    <text>Well TIL, thats handy! </text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:53:04.338100</ts>
    <user>Shaina</user>
    <text>Excellent! Thanks a lot &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:56:20.338700</ts>
    <user>Lynne</user>
    <text>I think you can just mention few entries in `source-directories` of `elm.json`</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T06:56:43.339200</ts>
    <user>Lynne</user>
    <text>Like `src/browser` and `src/api`</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T07:00:37.340800</ts>
    <user>Lilli</user>
    <text>i was searching for a `elm.json` syntax/description, but couldn't find any documentation so far (except few things mentioned in the elm official intro)</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T07:00:49.341000</ts>
    <user>Lynne</user>
    <text>&lt;https://github.com/elm/compiler/blob/0.19.0/docs/elm.json/application.md&gt;</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T07:00:59.341200</ts>
    <user>Lynne</user>
    <text>Here you go :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1319">
    <ts>2019-04-24T07:01:18.341600</ts>
    <user>Lilli</user>
    <text>Ah! that's handy :smile: thanks!</text>
  </message>
  <message conversation_id="1320">
    <ts>2019-04-24T07:22:08.342300</ts>
    <user>Corinne</user>
    <text>Hmm maybe there should be a JSON Schema defined for this (if there isn't already)</text>
  </message>
  <message conversation_id="1320">
    <ts>2019-04-24T07:26:12.345200</ts>
    <user>Huong</user>
    <text>I don’t think there is, nor do I see who would really be helped by that. If the issue is that creating an `elm.json` file isn’t trivial, I’d have to agree, but I don’t think a schema would help. If you’re interested, though, I released an `elm-json` tool just yesterday that can help with initialising such files (for both applications and packages) as well as with keeping dependencies up to date</text>
  </message>
  <message conversation_id="1320">
    <ts>2019-04-24T07:31:08.345600</ts>
    <user>Shaina</user>
    <text>&lt;https://github.com/zwilias/elm-json&gt; for the curious.</text>
  </message>
  <message conversation_id="1320">
    <ts>2019-04-24T07:31:22.346000</ts>
    <user>Shaina</user>
    <text>That looks very helpful &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="1320">
    <ts>2019-04-24T07:35:32.347700</ts>
    <user>Corinne</user>
    <text>JSON Schema can be useful if you're editing the file by hand, and your IDE supports schemas.

I too generally prefer a tool to manage the whole process ideally, so might give `elm-json` a try...</text>
  </message>
  <message conversation_id="1320">
    <ts>2019-04-24T07:48:52.350500</ts>
    <user>Emilee</user>
    <text>elm-json sounds like the tool i've been waiting for (although i think a lot of this functionality should be moved into `elm` at some point).
i think elm doesn't want you editing its `elm.json` by hand, but it's been necessary with 0.19 so far when removing/updating dependencies. a schema might be nice anyway so you can see how the file is supposed to be structured inside your editor</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:03:55.351000</ts>
    <user>Emilee</user>
    <text>Okay, I've looked into this a bit more. The error only happens when elm is set to `optimize` (in webpack), and the error is that it can't find the constructor `elm$browser$Browser$Dom$NotFound` in the `getElement` handler</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:06:02.351300</ts>
    <user>Huong</user>
    <text>That;s a painful issue, but not an unknown one</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:06:17.351500</ts>
    <user>Huong</user>
    <text>let me see if I can find a trace somewhere</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:07:11.351700</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/elm/compiler/issues/1836#issuecomment-463037320&gt;</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:07:52.351900</ts>
    <user>Emilee</user>
    <text>okay, i've got another piece of information: this happens reliably every time in optimized mode when an element is not found (and never in non-optimized mode). so it has nothing to do with our elements being "unmounted"</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:08:11.352200</ts>
    <user>Emilee</user>
    <text>that's at least a bit of a relief for me, since it's not just a problem with our weird setup^^</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:16:54.352500</ts>
    <user>Emilee</user>
    <text>so my current option is basically "wait and accept that this will happen" i guess?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:19:13.353400</ts>
    <user>Huong</user>
    <text>It _might_ be that there’s some weird edgecase where using `identity` in the right place might incluence the callgraph enough to place its definition first, but I’m honestly not sure!</text>
  </message>
  <message conversation_id="1322">
    <ts>2019-04-24T08:20:28.354200</ts>
    <user>Tanika</user>
    <text>Hey, is there a solution to prevent Http.multipartBody to encode "+" as " " in a Http.stringPart ?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:20:58.354300</ts>
    <user>Emilee</user>
    <text>that is... an interesting proposition XD</text>
  </message>
  <message conversation_id="1322">
    <ts>2019-04-24T08:24:09.355100</ts>
    <user>Rochell</user>
    <text>Anyone know if there's any workaround for this compiler bug? &lt;https://github.com/elm/compiler/issues/1776&gt; (Other than not having conditional subscriptions, I guess, which becomes messy in an SPA)</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:26:37.355300</ts>
    <user>Emilee</user>
    <text>the question is... where?^^</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:26:54.355500</ts>
    <user>Emilee</user>
    <text>wait, it needs to be called too, right?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:29:59.356100</ts>
    <user>Lynne</user>
    <text>Do you send any command from your `init` &lt;@Rochell&gt;?</text>
  </message>
  <message conversation_id="1322">
    <ts>2019-04-24T08:30:13.356400</ts>
    <user>Rochell</user>
    <text>Yeah, the initial routing in the SPA happens there.</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:30:57.357000</ts>
    <user>Lynne</user>
    <text>Is it generated as a result of `Task.attempt` or `Task.perform`?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:30:58.357200</ts>
    <user>Rochell</user>
    <text>And since each page has its own subscriptions, that's where the conditional subscriptions happen</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:31:16.357300</ts>
    <user>Rochell</user>
    <text>No, doesn't use Task.</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:31:40.357500</ts>
    <user>Emilee</user>
    <text>okay, doing this doesn't seem to help
```
main =
    Application.element
        { init = identity init -- The call to `identity` is just here to temporarily fix #2901. It should be removed when Elm 0.19.1 hits
        , subscriptions = subscriptions
        , update = update
        , view = view
        , propDecoder = propDecoder
        }
```</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:32:01.357700</ts>
    <user>Rochell</user>
    <text>But it does change the model such that the subscriptions change, since each page in the SPA has its own subscriptions.</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:32:09.357900</ts>
    <user>Emilee</user>
    <text>i think i'll just accept that the error message will be here for a while^^'</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:32:15.358100</ts>
    <user>Lynne</user>
    <text>Ok, you do something like `Navigation.pushUrl`, right?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:32:16.358300</ts>
    <user>Rochell</user>
    <text>Which, if I'm reading the bug report right, would trigger this issue.</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:32:18.358500</ts>
    <user>Huong</user>
    <text>Yeah, I don’t think it’s currently fixable :confused:</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:32:19.358700</ts>
    <user>Rochell</user>
    <text>Yeah</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:32:33.358900</ts>
    <user>Lynne</user>
    <text>I think you may try delaying this using `Process.sleep`</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:33:04.359100</ts>
    <user>Rochell</user>
    <text>Hmm... okay. Is it a race condition?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:33:10.359300</ts>
    <user>Lynne</user>
    <text>There were examples where it helped (presumingly by allowing runtime to initialize subscriptions subsystem correctly)</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:33:13.359500</ts>
    <user>Lynne</user>
    <text>Yeah, seems like that</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:33:27.359700</ts>
    <user>Lynne</user>
    <text>But those example was with a task, so I am not sure it will help you</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:33:33.359900</ts>
    <user>Lynne</user>
    <text>Still may be worth trying</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:33:48.360100</ts>
    <user>Rochell</user>
    <text>Yeah, never know. Any idea how long to sleep for?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:33:54.360300</ts>
    <user>Lynne</user>
    <text>Start with 1ms</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:34:32.360500</ts>
    <user>Rochell</user>
    <text>I'll give it a go. :slightly_smiling_face: Thanks.</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:34:41.360700</ts>
    <user>Lynne</user>
    <text>Good luck :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:34:47.360900</ts>
    <user>Rochell</user>
    <text>That's got bad code smell all over it though lol</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:35:31.361100</ts>
    <user>Lynne</user>
    <text>Well, that's life... I usually add some comment saying why it had to be done this way and what I am working around</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:35:34.361300</ts>
    <user>Lynne</user>
    <text>Gives a relief :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:35:50.361500</ts>
    <user>Rochell</user>
    <text>Haha. At least pushing responsibility back to the compiler. :wink:</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:36:09.361800</ts>
    <user>Lynne</user>
    <text>Well, but that's where it belongs, tbh</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:38:44.362000</ts>
    <user>Rochell</user>
    <text>Yeah, definitely. I just want to find an elegant way past the problem. Life's not always fair. :wink:</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:39:03.362200</ts>
    <user>Lynne</user>
    <text>... to one's expectations :wink:</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:47:19.363000</ts>
    <user>Earnest</user>
    <text>I woke up to a bunch of travis build failures from my Elm repos :confused:
&lt;https://travis-ci.org/prikhi/paginate/builds/523950532#L465-L493&gt;</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:52:01.363900</ts>
    <user>Mindy</user>
    <text>I noticed that previous successful build used node version 11.14.0 and the failing one used node version 12.0.0</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:52:02.364100</ts>
    <user>Augustus</user>
    <text>&lt;@Earnest&gt; is it due to node 12?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:52:16.364200</ts>
    <user>Lorilee</user>
    <text>I actually created one for the vscode extension! It helps a little, but there are lots of things better done with a cli tool.</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:52:39.364700</ts>
    <user>Mindy</user>
    <text>I suspect that is causing the breakage and you should pin your node version with a .nvmrc file at the root of your project (or directly in the .travis.yml file)</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T08:52:54.365200</ts>
    <user>Jin</user>
    <text>Travis supports Elm directly. 
&lt;https://docs.travis-ci.com/user/languages/elm/&gt;</text>
  </message>
  <message conversation_id="1323">
    <ts>2019-04-24T08:55:53.365500</ts>
    <user>Earnest</user>
    <text>Thanks :+1:</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T09:02:29.365700</ts>
    <user>Emilee</user>
    <text>if I'm correct `+` in a multipart message gets interpreted as a space, but I'm not sure how to change that</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T09:09:01.366000</ts>
    <user>Emilee</user>
    <text>some resources seem to suggest that this is improved when setting utf-8 as a content encoding. is there a way in elm to set the content encoding of a post request? or do you have to resort to `Http.request` and setting the header manually? Or am I missing some easier solution?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T09:13:33.366300</ts>
    <user>Alicia</user>
    <text>yeah, did you try without `--debug` on? it looks like it is the debugger that is causing it to render twice there, outside of debug mode it only renders once</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T09:16:43.366500</ts>
    <user>Alicia</user>
    <text>here’s a better gif of what happens with debug off</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T09:17:32.366700</ts>
    <user>Alicia</user>
    <text>None</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T09:49:03.367800</ts>
    <user>Emilee</user>
    <text>hmm, i can't really change the charset in `Http.request` if i want to send multipart data, right? because then i override the boundary</text>
  </message>
  <message conversation_id="1324">
    <ts>2019-04-24T10:07:56.367900</ts>
    <user>Carman</user>
    <text>Would it make sense to `Url.percentEncode` the string?</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T10:28:14.368200</ts>
    <user>Maxwell</user>
    <text>&lt;@Alicia&gt; Thanks for making all those gifs! :bow:

Is it possible to use ellie without --debug so I can quickly check?</text>
  </message>
  <message conversation_id="1325">
    <ts>2019-04-24T10:46:31.368700</ts>
    <user>Tanika</user>
    <text>It seems like that it was only a problem within the browser itself (Chrome), that interpretes the "+" as an " ". Not an Elm problem.</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T10:50:01.368900</ts>
    <user>Alicia</user>
    <text>not at the moment, but it is on the roadmap!</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T10:50:49.369100</ts>
    <user>Alicia</user>
    <text>&lt;https://github.com/ellie-app/ellie/issues/66&gt; is the tracking issue</text>
  </message>
  <message conversation_id="1321">
    <ts>2019-04-24T10:50:51.369300</ts>
    <user>Emilee</user>
    <text>i think it speaks a lot to elms safety that the only thing i get from this fatal error is... no error message inside elm. everything else still works like a charm</text>
  </message>
  <message conversation_id="1326">
    <ts>2019-04-24T12:47:44.369600</ts>
    <user>Ester</user>
    <text>What if each view’s type signature includes a list of the shit which should be canceled (or a function returning such a list), should the view be canceled out of. Then when you hit the view cancel trigger in your code, the things to kill are already there (even if they can’t be killed in this current version of elm). Seems like this might solve the nesting problem and also keep you away from global state. Then again I am a total lurker here and have very little practical experience.</text>
  </message>
  <message conversation_id="1325">
    <ts>2019-04-24T12:52:48.369800</ts>
    <user>Dede</user>
    <text>&lt;@Floy&gt; What request type in particular is causing you trouble?</text>
  </message>
  <message conversation_id="1325">
    <ts>2019-04-24T13:12:51.370100</ts>
    <user>Floy</user>
    <text>&lt;@Dede&gt; seems it got lost somewhere but it is just investigating the matter for the training. People are asking alot about similirarities and cancelling request was one of them. I do have example at hand now</text>
  </message>
  <message conversation_id="1325">
    <ts>2019-04-24T13:13:06.370300</ts>
    <user>Floy</user>
    <text>Dont have</text>
  </message>
  <message conversation_id="1325">
    <ts>2019-04-24T13:13:36.370600</ts>
    <user>Floy</user>
    <text>Ehhh...phone and slack are not cooperating...</text>
  </message>
  <message conversation_id="1325">
    <ts>2019-04-24T13:14:03.370800</ts>
    <user>Dede</user>
    <text>Gotcha.  No rush.</text>
  </message>
  <message conversation_id="1325">
    <ts>2019-04-24T13:15:28.371000</ts>
    <user>Floy</user>
    <text>&lt;@Ester&gt; I think that I would cancel request from an old view only if new URL is for different one and only then</text>
  </message>
  <message conversation_id="1325">
    <ts>2019-04-24T13:16:43.371200</ts>
    <user>Floy</user>
    <text>About function signature...well each view would have to have the same signature to get a list of request that can be safely cancelled if necessarry</text>
  </message>
  <message conversation_id="1325">
    <ts>2019-04-24T13:18:34.371400</ts>
    <user>Floy</user>
    <text>I cant promise to cook an example up...I am busy every evening with a contract...not to mention that I might be developing flu...</text>
  </message>
  <message conversation_id="1327">
    <ts>2019-04-24T13:52:13.372400</ts>
    <user>Vilma</user>
    <text>I just added a `port` to my project, but it seems the JS console does not find it. It’s already being exposed in the module :thinking_face: should I do something more?</text>
  </message>
  <message conversation_id="1327">
    <ts>2019-04-24T13:56:16.372900</ts>
    <user>Hoa</user>
    <text>Is it “wired” to the rest of your Elm app?  Dead code elimination might be the culprit</text>
  </message>
  <message conversation_id="1327">
    <ts>2019-04-24T13:56:18.373100</ts>
    <user>Vilma</user>
    <text>maybe the JS is cached?</text>
  </message>
  <message conversation_id="1327">
    <ts>2019-04-24T13:56:47.373200</ts>
    <user>Vilma</user>
    <text>oh right, I think I had the exact same problem in my other port</text>
  </message>
  <message conversation_id="1327">
    <ts>2019-04-24T13:57:15.373400</ts>
    <user>Vilma</user>
    <text>let me use it somewhere to see if it works</text>
  </message>
  <message conversation_id="1327">
    <ts>2019-04-24T13:57:21.373600</ts>
    <user>Hoa</user>
    <text>Go :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:18:56.374100</ts>
    <user>Giselle</user>
    <text>hi</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:19:44.374900</ts>
    <user>Giselle</user>
    <text>elm seems so promising for me. reading elm tutorial i had two aha moment (1. elm not having a null, and not having a template language like angular etc, because you can use elm in html)</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:23:47.375600</ts>
    <user>Giselle</user>
    <text>do you know an online elm editor?</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:23:56.375900</ts>
    <user>Giselle</user>
    <text>like stackblitz for angular?</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:24:03.376200</ts>
    <user>Briana</user>
    <text>ellie!</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:24:11.376500</ts>
    <user>Giselle</user>
    <text>could i use stackblitz for elm?</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:24:16.376700</ts>
    <user>Giselle</user>
    <text>ok thx</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:24:20.377000</ts>
    <user>Briana</user>
    <text>&lt;https://ellie-app.com/new&gt;</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:24:22.377100</ts>
    <user>Giselle</user>
    <text>i'll chek it out</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:24:24.377400</ts>
    <user>Giselle</user>
    <text>thx</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:24:26.377500</ts>
    <user>Briana</user>
    <text>It's good!</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:24:50.377800</ts>
    <user>Briana</user>
    <text>You can ask any questions about it in &lt;#C408UCWMN|ellie&gt;.</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:25:29.378200</ts>
    <user>Giselle</user>
    <text>thx</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:27:42.379300</ts>
    <user>Giselle</user>
    <text>have you heard about nativescript? i was thinking about using elm in nativescript? you think it's possible? i didnt readly find anything about it</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:30:19.380100</ts>
    <user>Danika</user>
    <text>There’s no DOM in nativescript, so you’d have to use elm in “headless” mode without a view function </text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:33:59.380600</ts>
    <user>Danika</user>
    <text>At which point maybe its a bit pointless, guess thats up to you to decide </text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:42:39.383400</ts>
    <user>Giselle</user>
    <text>no dom, but in nativescipt you have native ui, could my view function just use nativescript ui tags?</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:51:21.386300</ts>
    <user>Danika</user>
    <text>The runtime touches the dom directly, its completely coupled to the browser </text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:58:27.386900</ts>
    <user>Kris</user>
    <text>You'd have to implement diffing, event handling, and stuff like that I believe</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:58:43.387400</ts>
    <user>Kris</user>
    <text>Which is not entirely crazy, but probably not worth it.</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T15:58:53.387700</ts>
    <user>Kris</user>
    <text>I experimented with that for a bit</text>
  </message>
  <message conversation_id="1328">
    <ts>2019-04-24T16:01:07.388700</ts>
    <user>Danika</user>
    <text>elm nativescript would be nice though </text>
  </message>
  <message conversation_id="1329">
    <ts>2019-04-24T19:58:13.389300</ts>
    <user>Jeanene</user>
    <text>has anyone done uploads with aws-s3 presigned url?</text>
  </message>
  <message conversation_id="1329">
    <ts>2019-04-24T19:58:35.389700</ts>
    <user>Jeanene</user>
    <text>I have an idea of how to implement, but wanted to check here first. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1330">
    <ts>2019-04-24T20:59:59.395600</ts>
    <user>Francis</user>
    <text>I’ve done it through ports using the AWS sdk for signed uploads to S3. But not directly from Elm </text>
  </message>
  <message conversation_id="1330">
    <ts>2019-04-24T21:00:28.396500</ts>
    <user>Francis</user>
    <text>I would be interested in a solution without ports too</text>
  </message>
  <message conversation_id="1330">
    <ts>2019-04-24T21:05:53.397400</ts>
    <user>Jacquelyn</user>
    <text>I need to convert a `List` of `Maybe`s to a `Maybe List`. In Haskell, I’d use `sequenceA`, is there a simple mechanism in Elm? Should I just use the following?
```
prependToMaybeList : Maybe a -&amp;gt; Maybe (List a) -&amp;gt; Maybe (List a)
prependToMaybeList a maybeList =
  case a of
    Just val -&amp;gt; Maybe.map ((::) val) maybeList
    Nothing -&amp;gt; Nothing

foldr prependToMaybeList (Just []) listOfMaybes
```
I’m just wondering if there’s a better way for these kinds of things in Elm</text>
  </message>
  <message conversation_id="1331">
    <ts>2019-04-24T21:24:50.397900</ts>
    <user>Kris</user>
    <text>You can just copy the haskell implementation for sequence</text>
  </message>
  <message conversation_id="1331">
    <ts>2019-04-24T21:25:38.398200</ts>
    <user>Kris</user>
    <text>That said, it's in the extrapackage &lt;https://package.elm-lang.org/packages/elm-community/maybe-extra/5.0.0/Maybe-Extra#combine&gt;</text>
  </message>
  <message conversation_id="1330">
    <ts>2019-04-24T21:39:46.398400</ts>
    <user>Jacquelyn</user>
    <text>Excellent, didn’t see this, thanks</text>
  </message>
  <message conversation_id="1332">
    <ts>2019-04-25T00:49:51.399600</ts>
    <user>Lorriane</user>
    <text>I’m getting this error message repeatedly. What do I do?
```$ elm install elm-lang/dom
-- CORRUPT JSON ----------------------------------------------------------------

The elm.json for elm-community/list-extra 2.0.0 got corrupted somehow.

I removed it from my file cache, so if it was some transient error it should be
fixed if you try the same thing again. Please report this if it seems like an
Elm problem though!
```</text>
  </message>
  <message conversation_id="1332">
    <ts>2019-04-25T00:52:02.400700</ts>
    <user>Earlean</user>
    <text>&lt;@Lorriane&gt; `elm-lang/dom` is a package for Elm 0.18, use the DOM module in `elm/browser` instead</text>
  </message>
  <message conversation_id="1332">
    <ts>2019-04-25T00:59:12.402900</ts>
    <user>Lorriane</user>
    <text>&lt;@Earlean&gt; Thanks, I’ll try that. What’s odd is I’m looking at &lt;https://github.com/carwow/elm-slider/tree/7.0.1&gt; which is 0.19, but has the line
```import DOM exposing (boundingClientRect)```</text>
  </message>
  <message conversation_id="1332">
    <ts>2019-04-25T01:00:29.403100</ts>
    <user>Earlean</user>
    <text>that's `"debois/elm-dom"`</text>
  </message>
  <message conversation_id="1332">
    <ts>2019-04-25T01:01:58.403300</ts>
    <user>Lorriane</user>
    <text>ah, i see that now, thanks</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:13:40.404400</ts>
    <user>Erlene</user>
    <text>Can I expose a type alias (record) constructor in a module?</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:13:50.404700</ts>
    <user>Erlene</user>
    <text>I can export the type alias, but that doesn't export the constructor it seems.</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:14:35.404800</ts>
    <user>Floy</user>
    <text>you mean sth like

```
module X exposing (MyRec)

type alias MyRec = {v: String, b: String}
```</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:14:37.405000</ts>
    <user>Floy</user>
    <text>?</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:15:06.405200</ts>
    <user>Floy</user>
    <text>I should be perfectly doable, AFAIR, to have in module that imported that something like:

```
import X

type alias Model = {rec: MyRec}

model = {rec = {v="1", b="1"}
model2 = {rec = MyRec "1" "1"}
```</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:23:07.406700</ts>
    <user>Erlene</user>
    <text>I was trying to write:
```
MyRec "first" "second"
```</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:23:10.406900</ts>
    <user>Dayna</user>
    <text>Type alias constructors are always public, you can't export the type only. `exposing (MyTypeAlias)` should be enough</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:23:17.407000</ts>
    <user>Erlene</user>
    <text>That does not seem to work.</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:27:25.407200</ts>
    <user>Huong</user>
    <text>did you import it, where you’re trying to use it?</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:45:46.407800</ts>
    <user>Erlene</user>
    <text>Yes, I did, just as the example above.</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T04:46:20.408100</ts>
    <user>Calista</user>
    <text>Hello everyone,</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T04:48:16.409400</ts>
    <user>Lynne</user>
    <text>You have to also expose `MyRec` when importing `X`:
`import X exposing (MyRec)` or write `X.MyRec "first" "second"`</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T04:48:20.409600</ts>
    <user>Huong</user>
    <text>oh, the example is incomplete. Three variations that should work:
```import X

type alias Model = {rec: X.MyRec}

model = {rec = {v="1", b="1"}
model2 = {rec = X.MyRec "1" "1"}```
or
```import X exposing (MyRec)

type alias Model = {rec: MyRec}

model = {rec = {v="1", b="1"}
model2 = {rec = MyRec "1" "1"}```</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T04:48:33.410000</ts>
    <user>Huong</user>
    <text>or ```import X exposing (..)

type alias Model = {rec: MyRec}

model = {rec = {v="1", b="1"}
model2 = {rec = MyRec "1" "1"}```</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T04:48:34.410300</ts>
    <user>Calista</user>
    <text>I am trying to compile ELM on freeBSD system, I followed this article steps &lt;https://www.codementor.io/jwazne/install-elm-on-freebsd-fltzbcsiu&gt; , but I can't complete the last command which is `runhaskell BuildFromSource.hs 0.18`</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T04:49:59.410600</ts>
    <user>Huong</user>
    <text>&lt;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=236805&gt; here’s a .shar file for elm 0.19</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T04:50:24.410800</ts>
    <user>Huong</user>
    <text>probably a good idea to install the pre-compiled ghc and cabal packages, too</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T04:51:52.411000</ts>
    <user>Calista</user>
    <text>There is no .shar for elm 0.18 because I have some uncompatible dependencies with 0.19</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T04:53:12.411200</ts>
    <user>Huong</user>
    <text>You could have a look at this: &lt;https://bitbucket.org/psagers/elm-freebsd&gt;</text>
  </message>
  <message conversation_id="1333">
    <ts>2019-04-25T04:59:38.411600</ts>
    <user>Erlene</user>
    <text>&lt;@Lynne&gt; I tried using a qualified option, but I still got the complaint my type alias constructor was not available.</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:01:36.411800</ts>
    <user>Floy</user>
    <text>&lt;@Huong&gt; sorry 'bout incompleteness</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:01:46.412000</ts>
    <user>Lynne</user>
    <text>Well, either you don't expose it in the module definition of `X` or there is something else preventing Elm from discovering the right module</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:02:29.412200</ts>
    <user>Lynne</user>
    <text>Double check that you have `module X exposing (MyRec)` in the `X.elm`</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:03:38.412600</ts>
    <user>Erlene</user>
    <text>Hmm, yes, you're right, this simple example works!</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:04:08.412800</ts>
    <user>Erlene</user>
    <text>I need to come up with the actual case, where it doesn't.</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:04:29.413000</ts>
    <user>Lynne</user>
    <text>Please do</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:04:45.413200</ts>
    <user>Erlene</user>
    <text>Ah, perhaps the reason might be I have an indirection.</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:04:55.413400</ts>
    <user>Erlene</user>
    <text>So in module Y I import X, and then have:</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:05:14.413600</ts>
    <user>Erlene</user>
    <text>```
type alias MyRec = X.MyRec
```</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:05:28.413800</ts>
    <user>Erlene</user>
    <text>But it could be that my type alias constructor is different.</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:05:50.414000</ts>
    <user>Erlene</user>
    <text>The actual type alias is:
```
type alias ListItem m =
    { ... }
```</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:06:06.414200</ts>
    <user>Lynne</user>
    <text>Ok, so you have a type parameter</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:06:11.414400</ts>
    <user>Erlene</user>
    <text>Yeah.</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:06:52.414700</ts>
    <user>Lynne</user>
    <text>Then not writing it may very well be the reason of the compiler's complaints</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:09:11.414900</ts>
    <user>Erlene</user>
    <text>If only I new how to write it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:09:36.415100</ts>
    <user>Lynne</user>
    <text>`type alias MyRec m = X.MyRec m`?</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:10:22.415300</ts>
    <user>Lynne</user>
    <text>(if you ever need defining your own alias; it is probably easier to just expose it)</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:11:40.415500</ts>
    <user>Erlene</user>
    <text>I suppose something like that, but I need to have a good look at what m is. I have things like `Html m`, so that `m`, but I never have an `m` by itself.</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:14:40.415900</ts>
    <user>Adrian</user>
    <text>elm reactor seems to enjoy serving me stale assets</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:14:45.416100</ts>
    <user>Adrian</user>
    <text>is there an easy way to avoid this?</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:14:48.416200</ts>
    <user>Lynne</user>
    <text>In case of a record `m` can be a record which is extended by your `ListItem` or type of some field in `ListItem`. In first case you would see something like
```
type alias ListItem m =
  { m | anotherField : String 
  }
```
in the second
```
type alias ListItem m =
  {someField : m
  }
```</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:15:18.416600</ts>
    <user>Adrian</user>
    <text>it's probably browser caching, I suppose</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:16:02.416800</ts>
    <user>Lynne</user>
    <text>If you never provide anything concrete in place of `m` and `ListItem m` is your creation then most likely you don't need `m` at all.
In case of `Html m` it means type of messages produced by `Html` nodes if you meant the `elm/html` module of course.</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:17:35.417400</ts>
    <user>Lynne</user>
    <text>`elm reactor` is not really a tool for long-term development</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:17:46.417700</ts>
    <user>Lynne</user>
    <text>You'd better switch to something more suitable and convenient :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1334">
    <ts>2019-04-25T05:18:35.418200</ts>
    <user>Adrian</user>
    <text>good point!</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:45:04.420000</ts>
    <user>Loida</user>
    <text>Does anybody understand why in `Http` package id for tracking is a string supplied by the consumer? What would be the behaviour in case in different parts of the program same string gets accidentally supplied? Why won’t `Http.request` just return the opaque id which would be guaranteed to be unique?</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:46:30.420400</ts>
    <user>Loida</user>
    <text>I am wondering if it was an intentional decision due to some use cases or just an accident</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:47:33.420600</ts>
    <user>Earlean</user>
    <text>Given that it's a pure function...how would it get this unique id?</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:51:15.420800</ts>
    <user>Loida</user>
    <text>Http module is stateful &lt;https://github.com/elm/http/blob/2.0.0/src/Http.elm#L953-L961&gt;. The id can be just an int which starts from 0 and gets increased on each request creation.</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:51:55.421000</ts>
    <user>Loida</user>
    <text>Or it can be the `Process.Id`</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:55:33.421200</ts>
    <user>Earlean</user>
    <text>So if I made two calls to `Http.request`with the same parameters I would get two different results?</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:56:08.421400</ts>
    <user>Earlean</user>
    <text>or two results that were equal but actually different?</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:56:20.421600</ts>
    <user>Loida</user>
    <text>You do get 2 different commands, don’t you?</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:58:35.421900</ts>
    <user>Earlean</user>
    <text>no, it's a pure function. You get the same result for the same parameters</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T06:59:49.422100</ts>
    <user>Earlean</user>
    <text>I can make two calls to `Http.request` with the same parameters, ignore the return value of the second call and return the result of the first call to the runtime twice in a Cmd.batch and the result will be the same</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:01:20.422300</ts>
    <user>Earlean</user>
    <text>All functions in Elm are referentially transparent (at least from the perspective of your Elm code)</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:05:54.422500</ts>
    <user>Loida</user>
    <text>&lt;https://ellie-app.com/5n3LY26BBY7a1&gt;</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:07:14.422700</ts>
    <user>Loida</user>
    <text>It’s a function, not a data. And you can’t compare functions. I understand it as commands are not equal.</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:08:43.422900</ts>
    <user>Jeanene</user>
    <text>I’ll have a little time today and will ping you if I get something working. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:08:53.423100</ts>
    <user>Loida</user>
    <text>Not sure I see how this is different from having `Id` for which equality does not work.</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:09:28.423300</ts>
    <user>Earlean</user>
    <text>the cmds are interchangable even if you can't check them for equality</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:09:50.423500</ts>
    <user>Earlean</user>
    <text>the `Id` would also need to be interchangable</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:10:16.423700</ts>
    <user>Earlean</user>
    <text>which means that the problem you're address still exists</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:10:42.423900</ts>
    <user>Loida</user>
    <text>Ok, I see</text>
  </message>
  <message conversation_id="1335">
    <ts>2019-04-25T07:10:44.424100</ts>
    <user>Loida</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="1336">
    <ts>2019-04-25T08:10:43.424600</ts>
    <user>Calista</user>
    <text>Thank you for informations, I will try it. &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="1337">
    <ts>2019-04-25T09:58:44.002100</ts>
    <user>Vilma</user>
    <text>are there any differences to these two snippets?

```
let
  partialFunc = myFunc x
in
List.map partialFunc someList
```
vs.
```
List.map (myFunc x) someList
```</text>
  </message>
  <message conversation_id="1337">
    <ts>2019-04-25T09:59:17.002500</ts>
    <user>Vilma</user>
    <text>is storing the partial func in a variable and use it in the `List.map` more efficient or something like that?</text>
  </message>
  <message conversation_id="1337">
    <ts>2019-04-25T09:59:49.002800</ts>
    <user>Nana</user>
    <text>&lt;@Vilma&gt; not in that specific case</text>
  </message>
  <message conversation_id="1337">
    <ts>2019-04-25T10:00:32.003200</ts>
    <user>Vilma</user>
    <text>&lt;@Nana&gt; could you explain when it is beneficial?</text>
  </message>
  <message conversation_id="1337">
    <ts>2019-04-25T10:06:51.004500</ts>
    <user>Nana</user>
    <text>well, you can use `let` to avoid calculating the same thing multiple times</text>
  </message>
  <message conversation_id="1337">
    <ts>2019-04-25T10:09:11.005700</ts>
    <user>Nana</user>
    <text>but `List.map (myFunc x) someList` will only call `myFunc` once, then the new function that `myFunc` returns will be called for each item</text>
  </message>
  <message conversation_id="1337">
    <ts>2019-04-25T10:14:50.006100</ts>
    <user>Vilma</user>
    <text>I see </text>
  </message>
  <message conversation_id="1338">
    <ts>2019-04-25T10:19:43.007800</ts>
    <user>Earlean</user>
    <text>and the compiler is free to do these kinds of microoptimisations itself so they're not really worth spending time thinking about.</text>
  </message>
  <message conversation_id="1339">
    <ts>2019-04-25T12:24:13.009200</ts>
    <user>Dayna</user>
    <text>I am following the architecture from elm-spa-example where every page has its own set of model, view and update. In my app there is a header with a button that opens a modal that has some state, any idea where I can store the messages / model of the header and modal?</text>
  </message>
  <message conversation_id="1339">
    <ts>2019-04-25T12:31:32.009400</ts>
    <user>Miyoko</user>
    <text>this may help: &lt;https://discourse.elm-lang.org/t/how-to-implement-modal-dialogs-in-an-elm-spa/1823&gt;</text>
  </message>
  <message conversation_id="1339">
    <ts>2019-04-25T12:31:53.009600</ts>
    <user>Miyoko</user>
    <text>and this one: &lt;https://medium.com/front-end-weekly/programming-in-elm-modals-in-a-pure-environment-bc2cf98fbc33&gt;</text>
  </message>
  <message conversation_id="1337">
    <ts>2019-04-25T13:03:45.010800</ts>
    <user>Jeanene</user>
    <text>&lt;@Francis&gt; I got about halfway there…but I’ll have to put that on the backburner for a while.
I essentially got a `GetPresign` cmd -&amp;gt; decode presign response &amp;amp; update my model record with that data, then pass that into a `SendUpload` cmd… It’s a little frustrating b/c the resources for building that are so slim. Lotta bota3/python resources…</text>
  </message>
  <message conversation_id="1339">
    <ts>2019-04-25T13:47:13.013200</ts>
    <user>Dayna</user>
    <text>Well the links didn't help much but I think I figured out a solution. My model is a custom type `type Model = Login Login.Model Session | Home Home.Model Session`.
I have decided to keep the modal state in the session so that it's accessible everywhere.
If I want to update the session then I run the Session.update inside Login.update for example and modify the session inside login that way.</text>
  </message>
  <message conversation_id="1340">
    <ts>2019-04-25T13:49:36.014600</ts>
    <user>Wenona</user>
    <text>Probably a super noob question but got me thinking: can you use union types that hold values and read / set them without commands instead of using records?</text>
  </message>
  <message conversation_id="1340">
    <ts>2019-04-25T13:51:01.015400</ts>
    <user>Leoma</user>
    <text>You can pattern match/destructure a value and then make a new one. I’m not clear what you mean by “without commands”.</text>
  </message>
  <message conversation_id="1340">
    <ts>2019-04-25T13:51:40.015600</ts>
    <user>Dayna</user>
    <text>You can also expose a map function for that type so that any module can modify it without exposing internals.</text>
  </message>
  <message conversation_id="1340">
    <ts>2019-04-25T13:57:21.015900</ts>
    <user>Wenona</user>
    <text>What I’m trying to do is something like this: &lt;https://gist.github.com/glinesbdev/1b7d40cf88ba77ad8cc4fe354a463087&gt;</text>
  </message>
  <message conversation_id="1339">
    <ts>2019-04-25T14:08:51.016100</ts>
    <user>Dayna</user>
    <text>What about
```
gridAttributes grid =
    [ displayGrid
    , case Grid of
           GridTemplateColumn str-&amp;gt;
                    style "grid-template-columns" str

           GridTemplateRow str -&amp;gt;
                    style "grid-template-rows" str

          ... etc
]
```</text>
  </message>
  <message conversation_id="1339">
    <ts>2019-04-25T14:22:01.016400</ts>
    <user>Leoma</user>
    <text>```
s : Grid -&amp;gt; Maybe String
s grid = 
  case grid of
    GridTemplateColumn (Just string) -&amp;gt; 
      Just string
    GridTemplateRow (Just string) -&amp;gt; 
      Just string
    ... 
    _ -&amp;gt; 
      Nothing
```</text>
  </message>
  <message conversation_id="1341">
    <ts>2019-04-25T14:50:15.016600</ts>
    <user>Wenona</user>
    <text>Ah yeah, that makes sense. My next question is where are those values getting set? I see that you're reading them there but how would they come to hold its `str` value?</text>
  </message>
  <message conversation_id="1341">
    <ts>2019-04-25T14:54:31.016800</ts>
    <user>Dayna</user>
    <text>You will need to construct a Grid value when you call the gridAttributes function. If you define a custom type and export it with `(..)` other modules can import it and call any of the constructors of the Grid type to get a value</text>
  </message>
  <message conversation_id="1342">
    <ts>2019-04-25T15:37:48.019200</ts>
    <user>Francis</user>
    <text>Sounds like a similar lack of documentation I ran into. The path of least resistance was the sdk with a port. That’s where I eventually settled and it works well enough. Thanks for the update. </text>
  </message>
  <message conversation_id="1343">
    <ts>2019-04-25T16:25:34.019900</ts>
    <user>Vilma</user>
    <text>if someone could give me a help on this: &lt;https://discourse.elm-lang.org/t/decoding-several-json-fields-into-a-specific-data-structure/3552&gt; I’d be grateful :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1344">
    <ts>2019-04-25T16:42:18.020200</ts>
    <user>Huong</user>
    <text>&lt;https://ellie-app.com/5ndvNfbv8Qba1&gt;</text>
  </message>
  <message conversation_id="1345">
    <ts>2019-04-25T17:10:44.020800</ts>
    <user>Shona</user>
    <text>Well, I know the question may be a little obvious, but I wonder if Elm is "strong" in 2019 to be learned and used in production?</text>
  </message>
  <message conversation_id="1345">
    <ts>2019-04-25T17:18:44.021000</ts>
    <user>Wenona</user>
    <text>You beat me to it :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1346">
    <ts>2019-04-25T17:30:16.023300</ts>
    <user>Robbyn</user>
    <text>Is there a canonical way to write a function to do an http request that can be used in multiple Elm apps?  In particular the bits that mess with Model and Msg, or are those types absolutely locked to the app?</text>
  </message>
  <message conversation_id="1345">
    <ts>2019-04-25T17:33:31.023400</ts>
    <user>Wenona</user>
    <text>Being new myself, type signatures are a little different than what I’m used to in other languages. Does `Decoder (Dict String (List String))` Mean a Decoder of a String dictionary of a String list?</text>
  </message>
  <message conversation_id="1345">
    <ts>2019-04-25T17:39:06.023600</ts>
    <user>Dayna</user>
    <text>The `msg` part of `Http.get : { url : String, expect : Expect msg } -&amp;gt; Cmd msg` doesn't have to be a Msg, it can be anything. For example you could have it return `Cmd (Result Http.Error String)` and then do Cmd.map in your apps.</text>
  </message>
  <message conversation_id="1345">
    <ts>2019-04-25T17:45:25.024000</ts>
    <user>Robbyn</user>
    <text>Ok, you can push some stuff down to a common set of functions, but you still need some boilerplate to make Models and Msgs.  I'd have to think really hard about a solution that didn't need that and still maintained good type safety.</text>
  </message>
  <message conversation_id="1345">
    <ts>2019-04-25T17:49:33.024200</ts>
    <user>Wenona</user>
    <text>Anything that has a lower case type are “generic”, or that’s how I think of them. You can substitute them for other things. But keep in mind that you’ll have to change how you would normally deal with “normal” stuff like the Cmd Msg pattern, as mentioned by gigobyte.</text>
  </message>
  <message conversation_id="1345">
    <ts>2019-04-25T17:52:56.024600</ts>
    <user>Huong</user>
    <text>It's a decoder which, when successful, gives you a dictionary mapping strings to lists of strings</text>
  </message>
  <message conversation_id="1345">
    <ts>2019-04-25T17:56:29.024800</ts>
    <user>Dayna</user>
    <text>You can apply the common model, view, update pattern but without the view. Export a model with init, an update and msg type. In your update Cmd.map the request like so: `request |&amp;gt; Cmd.map GotSomethingMsg` and then handle the msg like so: `GotSomethingMsg subMsg -&amp;gt; { model | smth = Something.update subMsg model.smth }`, you get the point.</text>
  </message>
  <message conversation_id="1347">
    <ts>2019-04-25T18:35:55.026200</ts>
    <user>Mirtha</user>
    <text>Hey folks, I am using `elm-ui` for my app. Can i know how to use the attribute `disabled` on my `Input.text` please</text>
  </message>
  <message conversation_id="1348">
    <ts>2019-04-25T19:10:16.028300</ts>
    <user>Dede</user>
    <text>Disabled is not directly supported by elm ui.  Instead you use the disabled condition to (a) do any conditional styling, and (b) ignore the related message in update.  </text>
  </message>
  <message conversation_id="1349">
    <ts>2019-04-25T22:42:37.028800</ts>
    <user>Rico</user>
    <text>Is there a way to load sample data from an external file during testing?</text>
  </message>
  <message conversation_id="1349">
    <ts>2019-04-25T22:43:06.028900</ts>
    <user>Rico</user>
    <text>Specifically, I'm testing json decoders, and I'd rather have sample data live in separate `.json` files than in `.elm` files</text>
  </message>
  <message conversation_id="1349">
    <ts>2019-04-25T22:46:05.029100</ts>
    <user>Rico</user>
    <text>More specifically, I'm writing a library to serve as a wrapper around an existing large and complicated api. I'd like to `wget` a bunch of different calls (maybe 50 or so), run all my decoders against them, and make sure they all decode properly.</text>
  </message>
  <message conversation_id="1350">
    <ts>2019-04-25T23:09:57.031700</ts>
    <user>Jacquelyn</user>
    <text>Is there a function in Elm to round a number to a specific number of decimal places? Something that has this functionality: `toFloat (round (x * 10^n)) / 10^n`</text>
  </message>
  <message conversation_id="1350">
    <ts>2019-04-25T23:22:15.031900</ts>
    <user>Leoma</user>
    <text>The problem is that Javascript’s (and Elm’s) number representation is not arbitrary precision. So you have things like
`0.1+0.2=0.3000000000000000444089209850062616169452667236328125`

So if you tried to round `0.1 + 0.2` you’d still end up with `0.3000000000000000444089209850062616169452667236328125`.

If this is something you need for math calculations, I don’t know what the answer is. If it’s a display thing, I’d suggest a string formatting solution.</text>
  </message>
  <message conversation_id="1350">
    <ts>2019-04-25T23:31:32.032200</ts>
    <user>Augustus</user>
    <text>I found elm-round for that the other day and it worked great &lt;https://package.elm-lang.org/packages/myrho/elm-round/latest/&gt;</text>
  </message>
  <message conversation_id="1350">
    <ts>2019-04-26T01:16:17.033100</ts>
    <user>Jacquelyn</user>
    <text>&lt;@Leoma&gt; this is for display purposes, is there a standard string formatting solution?
&lt;@Augustus&gt; thanks</text>
  </message>
  <message conversation_id="1349">
    <ts>2019-04-26T01:46:22.034300</ts>
    <user>Erlene</user>
    <text>&lt;@Shona&gt; seems plenty of companies use it in production. For heavy front-end stuff I wouldn't want to use anything else.</text>
  </message>
  <message conversation_id="1351">
    <ts>2019-04-26T01:49:26.034400</ts>
    <user>Earlean</user>
    <text>Lots of companies use it in production. Whether you should use it in production depends on what you're building. Elm has a small community so many things that exists 'out of the box' in React may not be available in Elm and you might need to be write them yourself</text>
  </message>
  <message conversation_id="1349">
    <ts>2019-04-26T01:52:21.034600</ts>
    <user>Erlene</user>
    <text>&lt;@Augustus&gt; that's the package I'm using. Works well.</text>
  </message>
  <message conversation_id="1351">
    <ts>2019-04-26T02:04:03.034800</ts>
    <user>Carrie</user>
    <text>This is the data structure of my Model.I want to change the data in "testCases". What should I do?</text>
  </message>
  <message conversation_id="1351">
    <ts>2019-04-26T02:07:29.036600</ts>
    <user>Earlean</user>
    <text>Write a function that will do the update to you want do to the value in the testCases field, pass that value to that function and update the root record `testCases` field with the result</text>
  </message>
  <message conversation_id="1351">
    <ts>2019-04-26T02:08:19.037600</ts>
    <user>Earlean</user>
    <text>eg. `{model | testCases = someFunctionToUpdateATestCase model.testCases}`</text>
  </message>
  <message conversation_id="1351">
    <ts>2019-04-26T02:10:13.037900</ts>
    <user>Carrie</user>
    <text>Oh, I see. Thank you very much.</text>
  </message>
  <message conversation_id="1352">
    <ts>2019-04-26T04:11:40.040100</ts>
    <user>Bert</user>
    <text>I'm trying to build and run an Elm app (bootstrapped with create-elm-app) in a Docker container, but get a `CORRUPT BINARY` error. Anyone know what's up? I'll paste a bigger snippet of the error in this thread.</text>
  </message>
  <message conversation_id="1352">
    <ts>2019-04-26T04:11:51.040200</ts>
    <user>Bert</user>
    <text>```
Failed to compile.

./src/Main.elm
Error: Compiler process exited with error Compilation failed
[==================================================] - 1 / 1-- CORRUPT BINARY - /root/.elm/0.19.0/package/NoRedInk/elm-json-decode-pipeline/1.0.0/objs.dat

The binary data at
/root/.elm/0.19.0/package/NoRedInk/elm-json-decode-pipeline/1.0.0/objs.dat is
corrupt.
```</text>
  </message>
  <message conversation_id="1353">
    <ts>2019-04-26T04:26:35.040400</ts>
    <user>Lynne</user>
    <text>Is `/root` inside the container or is it on host machine?</text>
  </message>
  <message conversation_id="1352">
    <ts>2019-04-26T04:35:00.040600</ts>
    <user>Bert</user>
    <text>in the container</text>
  </message>
  <message conversation_id="1352">
    <ts>2019-04-26T04:35:49.040800</ts>
    <user>Bert</user>
    <text>here's a snippet of the Dockerfile:
```
COPY package*.json ./
RUN npm ci
COPY . ./

RUN npm run build
```</text>
  </message>
  <message conversation_id="1352">
    <ts>2019-04-26T04:36:25.041000</ts>
    <user>Bert</user>
    <text>the last line effectively just calls `elm-app build`</text>
  </message>
  <message conversation_id="1353">
    <ts>2019-04-26T04:36:49.041200</ts>
    <user>Lynne</user>
    <text>May it be the missing permissions? Say elm could not download dependencies under `/root`?</text>
  </message>
  <message conversation_id="1352">
    <ts>2019-04-26T04:37:05.041400</ts>
    <user>Lynne</user>
    <text>I remember someone asked about something similar but I don't remember if there was a conclusion</text>
  </message>
  <message conversation_id="1352">
    <ts>2019-04-26T04:45:35.043400</ts>
    <user>Emilee</user>
    <text>just out of curiosity: are there any fancier json decode error processors than `errorToString`? I'm currently feeding the result of `errorToString` to an error port, which works well enough, but i'd really like to have some more fancy logging than a really long string</text>
  </message>
  <message conversation_id="1354">
    <ts>2019-04-26T04:48:21.044100</ts>
    <user>Bebe</user>
    <text>Offtopic, but, is that century schoolbook mono?</text>
  </message>
  <message conversation_id="1352">
    <ts>2019-04-26T04:49:25.044600</ts>
    <user>Bebe</user>
    <text>Or Linux libertine mono?</text>
  </message>
  <message conversation_id="1354">
    <ts>2019-04-26T04:52:10.045300</ts>
    <user>Nana</user>
    <text>&lt;@Emilee&gt; `Json.Decode.Error` is an exposed type so you can deconstruct it yourself :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1354">
    <ts>2019-04-26T04:52:28.045600</ts>
    <user>Nana</user>
    <text>```
type Error
  = Field String Error
  | Index Int Error
  | OneOf (List Error)
  | Failure String Value
```</text>
  </message>
  <message conversation_id="1355">
    <ts>2019-04-26T05:54:05.046600</ts>
    <user>Catheryn</user>
    <text>Wondering if I can get some assistance with SPA navigation - I'm routing around a simple SPA and I'm wanting to do some validation before routing to a different page. If the validation fails I don't want to route but I'm using `Browser.Application` and intercepting UrlRequests to route around</text>
  </message>
  <message conversation_id="1355">
    <ts>2019-04-26T05:54:48.047400</ts>
    <user>Catheryn</user>
    <text>can anyone help?</text>
  </message>
  <message conversation_id="1355">
    <ts>2019-04-26T06:00:50.048700</ts>
    <user>Earlean</user>
    <text>&lt;@Catheryn&gt; sure, you can do that in your `update` when you handle the Msg for `onUrlRequest`</text>
  </message>
  <message conversation_id="1355">
    <ts>2019-04-26T06:02:04.048800</ts>
    <user>Emilee</user>
    <text>i know, i was just curious if anyone had already implemented some publicly available variants^^</text>
  </message>
  <message conversation_id="1355">
    <ts>2019-04-26T06:22:47.049500</ts>
    <user>Bert</user>
    <text>Well it looks like nothing gets placed into `/root/.elm/`, but there are no EACCESS logs either</text>
  </message>
  <message conversation_id="1355">
    <ts>2019-04-26T06:23:27.050300</ts>
    <user>Catheryn</user>
    <text>```
update msg model =
    case msg of
        LinkClicked urlRequest -&amp;gt;
            case urlRequest of
                Browser.Internal url -&amp;gt;
                    -- DO IT HERE?
                    Debug.log "internal" ( model, Nav.pushUrl model.key (Url.toString url) )

                Browser.External href -&amp;gt;
                    ( model, Nav.load href )

        UrlChanged url -&amp;gt;
            ( { model | url = url }
            , Cmd.none
            )
```

&lt;@Earlean&gt; do it here?</text>
  </message>
  <message conversation_id="1355">
    <ts>2019-04-26T06:24:18.051300</ts>
    <user>Catheryn</user>
    <text>if I have mulitple pages where I want to perform different validations on, do I do it depending on what model.key is - does that make sense?</text>
  </message>
  <message conversation_id="1355">
    <ts>2019-04-26T06:26:27.052300</ts>
    <user>Earlean</user>
    <text>You have access to the whole model, you can inspect the model and do whatever you want</text>
  </message>
  <message conversation_id="1355">
    <ts>2019-04-26T06:56:14.052600</ts>
    <user>Catheryn</user>
    <text>thank you jessta</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T09:39:01.053700</ts>
    <user>Royce</user>
    <text>Hi Elm friends. Has anyone worked on a version of `elm-sortable-table` for 0.19?</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T09:39:07.054000</ts>
    <user>Royce</user>
    <text>I looked around but couldn’t find one.</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T09:42:13.054700</ts>
    <user>Leoma</user>
    <text>If you go to the Elm package site (&lt;https://package.elm-lang.org&gt;) and search sortable, several options come up.</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T09:43:27.055200</ts>
    <user>Royce</user>
    <text>Hahaha, guess I should have figured that would be better than random googling. :stuck_out_tongue: Thanks.</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T09:46:05.057200</ts>
    <user>Allyn</user>
    <text>I just started using  &lt;@Patricia&gt; Skinney/keyboard-events, wich is a really nice addition to &lt;@Bert&gt; /keyboard . Emitting a a message when a key is press is really easy and elegant. However I do no see how to detect a modifier (like sight of CRTL) is pressed.</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T09:58:01.057600</ts>
    <user>Sharon</user>
    <text>&lt;https://github.com/billstclair/elm-sortable-table&gt; is the new one</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:05:59.058800</ts>
    <user>Liza</user>
    <text>&lt;https://package.elm-lang.org/packages/ohanhi/keyboard/latest/Keyboard#modifierKey&gt;</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:06:40.059000</ts>
    <user>Patricia</user>
    <text>Did you read this part of the documentation?: `Keypress only triggers if the key produces a character. If you want to trigger a message when the spacebar is pressed, use Keydown instead.`</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:06:53.059200</ts>
    <user>Patricia</user>
    <text>`spacebar` in this case refers to any modified key.</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:07:07.059400</ts>
    <user>Patricia</user>
    <text>Should probably make the documentation a bit more clear on that.</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:07:13.059600</ts>
    <user>Allyn</user>
    <text>So how do you detect, by example, CTRL+K?</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:07:48.059900</ts>
    <user>Allyn</user>
    <text>And I used keydown indeed</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:07:54.060100</ts>
    <user>Patricia</user>
    <text>Ah, sorry, I missunderstood.</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:09:00.060300</ts>
    <user>Patricia</user>
    <text>In that case there's really no way around some book keeping. Keep a record around of which keys have been pressed, then do something when both CTRL and K have been pressed but not released.</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:10:12.060500</ts>
    <user>Allyn</user>
    <text>Ok ; it’s not as easy than for keys without modifiers, but I get it</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:10:15.060700</ts>
    <user>Allyn</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:10:17.060900</ts>
    <user>Liza</user>
    <text>btw - you can just listen to “K” key down, and decode event, which contains mod current mod keys</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:11:25.061100</ts>
    <user>Allyn</user>
    <text>it means you directly use ohanhi/keyboard, doesn’t it?</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:11:46.061300</ts>
    <user>Liza</user>
    <text>kind of..</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:12:02.061500</ts>
    <user>Liza</user>
    <text>or at least use different update function..</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:12:32.061700</ts>
    <user>Liza</user>
    <text>&lt;https://package.elm-lang.org/packages/ohanhi/keyboard/latest/Keyboard#updateWithParser&gt; like</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T10:16:15.061900</ts>
    <user>Liza</user>
    <text>i written my own subscription, for all that stuff, and if you go low level, then you can create own custom decoders, that can fail, and just ignore unneeded events (if onKey.. fails, it do it in silent way, and not produce additional lifecycle of TEA)</text>
  </message>
  <message conversation_id="1356">
    <ts>2019-04-26T12:07:37.062500</ts>
    <user>Jeanene</user>
    <text>Another update:
I ended up wrapping my presign call with graphql, so I can easily generate my decoders &amp;amp; send a request with only the file-name argument. :slightly_smiling_face:
After that, it’s pretty easy, but I’m about 75% there.</text>
  </message>
  <message conversation_id="1357">
    <ts>2019-04-26T15:40:45.070500</ts>
    <user>Johnsie</user>
    <text>I want to write code to do some refactoring / editing, and was wondering what options exist for parsing Elm code to AST and back again. The first things that occurred to me were to look at the Elm compiler and `elm-format`, but I’m not sure whether I’m up for learning Haskell to do this (seems like it would take a while before I could make something useful), so I was wondering if there are other options? I saw `Bogdanp/elm-ast` (which has a bunch of forks), which was pretty exciting, but doesn’t work work with 0.19.</text>
  </message>
  <message conversation_id="1357">
    <ts>2019-04-26T15:41:52.071300</ts>
    <user>Johnsie</user>
    <text>I also saw that &lt;@Ludie&gt;’s project to do something similarish with atomist is no longer working, too: &lt;https://github.com/satellite-of-love/elm-rugs&gt;</text>
  </message>
  <message conversation_id="1357">
    <ts>2019-04-26T15:43:32.071800</ts>
    <user>Virgie</user>
    <text>are you aware of elm-analyse? &lt;https://github.com/stil4m/elm-analyse&gt;</text>
  </message>
  <message conversation_id="1357">
    <ts>2019-04-26T15:43:57.072200</ts>
    <user>Johnsie</user>
    <text>No, hadn’t seen that. Will take a look, thanks!</text>
  </message>
  <message conversation_id="1358">
    <ts>2019-04-26T15:54:42.072300</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/ellie-app/ellie/blob/master/assets/src/Effect/Program.elm#L202-L219&gt; example of what &lt;@Liza&gt; describes</text>
  </message>
  <message conversation_id="1357">
    <ts>2019-04-26T15:59:16.072500</ts>
    <user>Johnsie</user>
    <text>Thanks! This led me to &lt;https://github.com/stil4m/elm-syntax&gt; which is what it seems to use for parsing Elm and writing it back. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1357">
    <ts>2019-04-26T16:04:57.072800</ts>
    <user>Johnsie</user>
    <text>Unfortunately, it seems to have some serious issues that would prevent me from being able to use it: &lt;https://github.com/stil4m/elm-syntax/issues/30&gt; and &lt;https://github.com/stil4m/elm-syntax/issues/26&gt;

but it’s definitely something worth looking into more.</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T16:43:14.074300</ts>
    <user>Vilma</user>
    <text>how can I achieve a function with this signature `toDict : List (String, Maybe (List Int)) -&amp;gt; Dict String (List Int)`</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T16:43:32.074700</ts>
    <user>Vilma</user>
    <text>can’t figure out how to remove the `Maybe` from the list of integers</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T16:48:58.075000</ts>
    <user>Vilma</user>
    <text>it seems like something must be done with `List.filterMap`</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T16:51:36.075900</ts>
    <user>Raylene</user>
    <text>Well, you can filterMap with Maybe.map as an argument</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T16:55:00.077600</ts>
    <user>Vilma</user>
    <text>not sure how that would work &lt;@Raylene&gt;</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T16:55:16.077800</ts>
    <user>Allison</user>
    <text>i would go for folding the list -&amp;gt; &lt;https://ellie-app.com/5nGvgKzCGf5a1&gt;</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T17:02:56.078300</ts>
    <user>Vilma</user>
    <text>&lt;@Allison&gt; I see! that was obvious</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T17:02:57.078500</ts>
    <user>Vilma</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T17:05:13.078800</ts>
    <user>Allison</user>
    <text>no problem, happy to help!</text>
  </message>
  <message conversation_id="1359">
    <ts>2019-04-26T17:07:09.078900</ts>
    <user>Yoshiko</user>
    <text>Nice work. Thank you. I would like to see  this example gain more popularity and trigger a discussion about SPA best practices.</text>
  </message>
  <message conversation_id="1360">
    <ts>2019-04-26T17:14:59.079400</ts>
    <user>Dede</user>
    <text>Thanks for the kind words.  </text>
  </message>
  <message conversation_id="1361">
    <ts>2019-04-26T17:37:09.080800</ts>
    <user>Jillian</user>
    <text>Does anyone know if there will be recordings of Elm in the Spring at some point?</text>
  </message>
  <message conversation_id="1362">
    <ts>2019-04-26T18:25:52.081600</ts>
    <user>Francis</user>
    <text>Yep. Keep on eye out sometime in May they should be up in the YouTubes. </text>
  </message>
  <message conversation_id="1361">
    <ts>2019-04-26T18:58:20.081900</ts>
    <user>Lory</user>
    <text>There is a libray for 0.18 version that supposed to handle two key events &lt;https://package.elm-lang.org/packages/derrickreimer/elm-keys/1.1.0&gt;       I also have a project where I need to handle two keys at the same time. I haven't yet implemented it. But will pretty soon.</text>
  </message>
  <message conversation_id="1361">
    <ts>2019-04-26T19:41:42.082300</ts>
    <user>Jillian</user>
    <text>Nice!</text>
  </message>
  <message conversation_id="1363">
    <ts>2019-04-26T22:37:16.083700</ts>
    <user>Adrian</user>
    <text>what's a good way of handling the 'browser reload' problem, where changing the URL means a browser reload will potentially fail if the URL isn't present on the backend service</text>
  </message>
  <message conversation_id="1363">
    <ts>2019-04-26T22:37:41.084300</ts>
    <user>Adrian</user>
    <text>I'm thinking either: backend service redirects/etc, or fragment navigation from the spa root</text>
  </message>
  <message conversation_id="1363">
    <ts>2019-04-26T22:38:38.085100</ts>
    <user>Adrian</user>
    <text>it seems ugly to have to deal with that on the backend at all, to be honest, but also seems wrong to have URLs that aren't *really* URLs</text>
  </message>
  <message conversation_id="1363">
    <ts>2019-04-26T22:41:04.085600</ts>
    <user>Kris</user>
    <text>That’s *the* way to do it </text>
  </message>
  <message conversation_id="1363">
    <ts>2019-04-26T22:41:30.086400</ts>
    <user>Kris</user>
    <text>Route `/a/b` will look for a file in that path by default </text>
  </message>
  <message conversation_id="1363">
    <ts>2019-04-26T22:42:11.087600</ts>
    <user>Kris</user>
    <text>You need a server to route that. The standard way is to send everything, `/*` or whatever to your index.html </text>
  </message>
  <message conversation_id="1363">
    <ts>2019-04-26T22:42:20.087900</ts>
    <user>Kris</user>
    <text>Or yeah, use fake urls.</text>
  </message>
  <message conversation_id="1363">
    <ts>2019-04-26T22:50:20.088400</ts>
    <user>Adrian</user>
    <text>thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1364">
    <ts>2019-04-27T06:49:26.090700</ts>
    <user>Willene</user>
    <text>woops, wrong channel, apologies</text>
  </message>
  <message conversation_id="1364">
    <ts>2019-04-27T09:38:59.091200</ts>
    <user>Allyn</user>
    <text>The solution pointed by &lt;@Huong&gt; is great. I implemented my own version strongly inspired by this one, and it works perfectly. Isn’t there any package implementing it (it does not look like) or documentation to help people find it?</text>
  </message>
  <message conversation_id="1363">
    <ts>2019-04-27T09:39:39.091400</ts>
    <user>Huong</user>
    <text>Not that I’m aware of, but I haven’t actually checked :sweat_smile:</text>
  </message>
  <message conversation_id="1365">
    <ts>2019-04-27T10:55:00.092000</ts>
    <user>Bebe</user>
    <text>Any channel we could follow now?</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:28:45.094000</ts>
    <user>Isaias</user>
    <text>Is abyone else having troublr installing elm-svg?</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:29:15.094300</ts>
    <user>Wenona</user>
    <text>The package is now called elm/svg</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:29:45.094900</ts>
    <user>Isaias</user>
    <text>Oh right</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:29:45.095000</ts>
    <user>Wenona</user>
    <text>try `elm install elm/svg`</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:29:49.095200</ts>
    <user>Isaias</user>
    <text>Derp</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:29:54.095400</ts>
    <user>Wenona</user>
    <text>:thumbsup:</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:35:16.096900</ts>
    <user>Buffy</user>
    <text>Every example I come across for using ports via commands and subscriptions the signature for subscriptions is `Model -&amp;gt; Sub msg` but there's no examples of anyone actually using the model in their subscriptions...
Anyone here have a use case where they've done something with the model in a subscription function?</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:40:04.097900</ts>
    <user>Huong</user>
    <text>I don’t have code-examples handy, but one example I can offer is that we add a `keydown` subscription when a modal is open, so we can close it when `escape` is pressed</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:40:16.098600</ts>
    <user>Huong</user>
    <text>we could have the subscription always be there and filter in the model, too</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:41:05.100100</ts>
    <user>Huong</user>
    <text>but then that’s always the case, I suppose - ignoring the message based on the state, or not subscribing to the event based on the state, it’s just a matter of how much work needs to happen</text>
  </message>
  <message conversation_id="1367">
    <ts>2019-04-27T18:50:34.101100</ts>
    <user>Buffy</user>
    <text>I wish I followed that but maybe YAGNI till I do for now?</text>
  </message>
  <message conversation_id="1367">
    <ts>2019-04-27T18:51:46.102300</ts>
    <user>Buffy</user>
    <text>The other thing I'm curious about is if subscriptions can be attached if you're expecting a response of some sort from them and otherwise don't bother the run time? Not sure if that makes any sense.</text>
  </message>
  <message conversation_id="1366">
    <ts>2019-04-27T18:56:43.103500</ts>
    <user>Huong</user>
    <text>Yeah, that’s basically what the `Model -&amp;gt;` part is for - based on your model, you can decide whether you are interested in receiving certain events, and hence, subscribe to those events</text>
  </message>
  <message conversation_id="1367">
    <ts>2019-04-27T18:57:45.103700</ts>
    <user>Naoma</user>
    <text>An example of why you might need `model` is if you have a specific page in your app where you want to track time passing, but you don’t care about it otherwise. One solution is you could have a value in `model` that lets `subscriptions` know whether it should subscribe to `Time.every` or not. While you could just run the event all the time regardless and filter out what you don’t need in `update`, I feel `subscriptions` is a better place for it because: 1. you’re only running `update` constantly when necessary; and 2. it separates the logic of “do I care about this subscription?” from “how should I update my model and what effects need to happen?”</text>
  </message>
  <message conversation_id="1367">
    <ts>2019-04-27T19:19:43.105600</ts>
    <user>Buffy</user>
    <text>Now it makes a lot of sense! Thanks y'all! Now if only I wasn't using all this just to wrap aws-amplify lib's js calls... :confused:
Not sure if interacting directly with the Http API's would be easier starting to feel like it would but the Cognito docs are dense. :man-shrugging:</text>
  </message>
  <message conversation_id="1367">
    <ts>2019-04-27T19:20:06.106100</ts>
    <user>Buffy</user>
    <text>Sorry &lt;@Myong&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1368">
    <ts>2019-04-28T06:48:52.107600</ts>
    <user>Zona</user>
    <text>Anybody encountered an issue with `elm publish`? I published new version of package yesterday but it's not visible on &lt;http://package.elm-lang.org|package.elm-lang.org&gt;

package &lt;https://package.elm-lang.org/packages/turboMaCk/lazy-tree-with-zipper/&gt;
tag &lt;https://github.com/turboMaCk/lazy-tree-with-zipper/releases/tag/3.1.0&gt;

```
❯❯❯ elm publish
Verifying turboMaCk/lazy-tree-with-zipper 3.1.0 ...

  ● Found README.md      
  ● Found LICENSE      
  ✗ Version 3.1.0 is not correct!                        

-- ALREADY PUBLISHED -----------------------------------------------------------

Version 3.1.0 has already been published. You cannot publish it again!
Try using the `bump` command:

    elm bump

It computes the version number based on API changes, ensuring that no breaking
changes end up in PATCH releases!
```</text>
  </message>
  <message conversation_id="1368">
    <ts>2019-04-28T06:53:36.107800</ts>
    <user>Huong</user>
    <text>&lt;@Zona&gt; I can see that version</text>
  </message>
  <message conversation_id="1368">
    <ts>2019-04-28T06:53:40.108000</ts>
    <user>Huong</user>
    <text>Caching issue?</text>
  </message>
  <message conversation_id="1368">
    <ts>2019-04-28T06:54:03.108200</ts>
    <user>Zona</user>
    <text>let me check</text>
  </message>
  <message conversation_id="1368">
    <ts>2019-04-28T06:54:46.108800</ts>
    <user>Zona</user>
    <text>righ... seems like aggressive client side caching I didin't expect that :smile:</text>
  </message>
  <message conversation_id="1368">
    <ts>2019-04-28T06:55:06.109300</ts>
    <user>Zona</user>
    <text>maybe it would be good idea to tweak headers to take that cache down a bit</text>
  </message>
  <message conversation_id="1368">
    <ts>2019-04-28T06:56:13.109600</ts>
    <user>Zona</user>
    <text>thx &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="1369">
    <ts>2019-04-28T09:39:49.111500</ts>
    <user>Loralee</user>
    <text>Are you aware about a Elm repl online "fully in the browser"? There is : &lt;http://elmrepl.cuberoot.in/&gt; but it seems each keystroke is sent to the server, which is a bit slow... &lt;@Florencia&gt; is your elm compiler-in-elm ready enough to support this kind of thing?</text>
  </message>
  <message conversation_id="1370">
    <ts>2019-04-28T11:58:55.116000</ts>
    <user>Rozanne</user>
    <text>is there a way to decorate pointer events w the time at which it happened?  something like Task.pair Time.now (pointer event)..though  i know mpizenberg doesnt expose subscriptions.</text>
  </message>
  <message conversation_id="1370">
    <ts>2019-04-28T12:19:18.117500</ts>
    <user>Lashawnda</user>
    <text>You could use the advanced section of the pointer events package and decode this standard field from the event &lt;https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp&gt;</text>
  </message>
  <message conversation_id="1370">
    <ts>2019-04-28T12:20:59.118000</ts>
    <user>Lashawnda</user>
    <text>&lt;https://package.elm-lang.org/packages/mpizenberg/elm-pointer-events/latest/Html-Events-Extra-Pointer#eventDecoder&gt;</text>
  </message>
  <message conversation_id="1370">
    <ts>2019-04-28T12:25:31.119300</ts>
    <user>Lashawnda</user>
    <text>Depending on the browser this value will have a decimal component, so if you want a `Posix` you’ll have to round it first</text>
  </message>
  <message conversation_id="1371">
    <ts>2019-04-28T13:01:33.119600</ts>
    <user>Huong</user>
    <text>Note that this is a timestamp relative to when the document was loaded, not an absolute point in time</text>
  </message>
  <message conversation_id="1372">
    <ts>2019-04-28T13:22:14.119900</ts>
    <user>Florencia</user>
    <text>Definitely not yet :)</text>
  </message>
  <message conversation_id="1372">
    <ts>2019-04-28T13:23:10.120100</ts>
    <user>Florencia</user>
    <text>but it's one of the planned usages</text>
  </message>
  <message conversation_id="1372">
    <ts>2019-04-28T14:02:08.120500</ts>
    <user>Socorro</user>
    <text>hi</text>
  </message>
  <message conversation_id="1373">
    <ts>2019-04-28T14:38:27.121600</ts>
    <user>Isaias</user>
    <text>Will union types be comparable some day?</text>
  </message>
  <message conversation_id="1373">
    <ts>2019-04-28T14:43:33.121700</ts>
    <user>Huong</user>
    <text>I don’t think a decision has been made yet on that particular issue</text>
  </message>
  <message conversation_id="1373">
    <ts>2019-04-28T15:49:03.122000</ts>
    <user>Isaias</user>
    <text>Is there a discussion thread somewhere &lt;@Huong&gt;?</text>
  </message>
  <message conversation_id="1373">
    <ts>2019-04-28T15:56:57.122200</ts>
    <user>Huong</user>
    <text>There is a meta-issue that tracks a number of tickets related to more flexibility for `comparable` types, of which custom types is only a small part. As per usual, the goal is to (eventually) find a holistic design rather than solving just the immediate issue, thereby possibly excluding other options in the future (or making them harder to add) - &lt;https://github.com/elm/compiler/issues/1008&gt;</text>
  </message>
  <message conversation_id="1373">
    <ts>2019-04-28T16:03:37.122400</ts>
    <user>Huong</user>
    <text>Various designs have been proposed and discussed, like “use the definition order” - which has significant downsides, or a bespoke `data module where { type = .., compare = .., eq = .. }` syntax for making data-type modules that would allow making them comparable and allow overriding structural equality, but that also has significant downsides. I’m sure there have been others, though. The point is mostly this:
- this is not an easy issue
- making a decision means committing to a particular design, to the exclusion of other options
- this does not have the highest priority right now, as there are workaround for most immediate issues stemming from the limited `comparable` type variable</text>
  </message>
  <message conversation_id="1373">
    <ts>2019-04-28T16:28:22.122700</ts>
    <user>Isaias</user>
    <text>Ok thanks for the detailed response</text>
  </message>
  <message conversation_id="1374">
    <ts>2019-04-28T16:37:09.129800</ts>
    <user>Isaias</user>
    <text>Ontological question: Suppose you have types `A` and `B`, and `A` has an `A.fromB` constructor.

Say you want to also make `B`'s from `A`'s. Do you make a `B.fromA` constructor or an `A.toB` deconstructor?</text>
  </message>
  <message conversation_id="1373">
    <ts>2019-04-28T16:37:22.129900</ts>
    <user>Huong</user>
    <text>(I realize it might not be obvious what downsides there are to using definition order, so just to give an example - this means that if I write a library that exposes a datatype that happens to be implemented as a custom type, people might rely on the sorting order. Changing the order would then suddenly affect consumers of my library. That would be surprising and definitely lead to issues. Things would be even worst if my type is opaque - the user can’t even see what order things will be sorted in, but that implementation detail now leaks. There are arbitrary ways to limit the impact - only make simple enumerations `comparable` and/or require that the constructors be exposed - but that obviously complicates the design and means people will still ask for `comparable` custom types :smile: TL;DR: it means leaking implementation details, which is tricky business)</text>
  </message>
  <message conversation_id="1373">
    <ts>2019-04-28T16:40:28.132500</ts>
    <user>Huong</user>
    <text>I usually prefer `toFoo` functions, and always feel a little bad writing `String.fromInt` or `String.fromFloat` :smile: (this was for me also a point of confusion while learning Rust. While using `.into()` is a common pattern there, this is usually done by implementing a `From&amp;lt;T&amp;gt;` trait on the target type, rather than an `Into&amp;lt;T&amp;gt;` trait on the originating type)</text>
  </message>
  <message conversation_id="1374">
    <ts>2019-04-28T16:51:28.132900</ts>
    <user>Isaias</user>
    <text>why do you prefer that?</text>
  </message>
  <message conversation_id="1374">
    <ts>2019-04-28T16:55:08.134300</ts>
    <user>Huong</user>
    <text>Consistency, mostly. For whatever reason, it also matches my mental model better - I’m more likely to think “I want to turn X into Y” rather than “I want to create a Y from an X”</text>
  </message>
  <message conversation_id="1374">
    <ts>2019-04-28T17:26:03.135200</ts>
    <user>Isaias</user>
    <text>Ah, the "source-path-goal" image schema :laughing:</text>
  </message>
  <message conversation_id="1375">
    <ts>2019-04-28T19:47:58.136700</ts>
    <user>Rozanne</user>
    <text>never thought to check the other fields!  thanks much.  also great to know about the timestamp.</text>
  </message>
  <message conversation_id="1376">
    <ts>2019-04-29T02:30:17.140600</ts>
    <user>Bethel</user>
    <text>Hi, I know how to decode JS object into Elm alias, but I'm not sure how to decode JS object into Custom type with more values.
```
json = { name: "Joe", unit: "CELSIUS }

// elm
type Unit = Celsius | Fahrenheit
type alias Name = String
type Setting = TemperatureSetting Name Unit
```

I would like to decode that json into `TemperatureSetting`. Could someone give me a hint? Thanks</text>
  </message>
  <message conversation_id="1376">
    <ts>2019-04-29T02:34:58.141400</ts>
    <user>Earlean</user>
    <text>&lt;@Bethel&gt; first you need to write a `String -&amp;gt; Maybe Unit` function</text>
  </message>
  <message conversation_id="1376">
    <ts>2019-04-29T02:35:40.141900</ts>
    <user>Bethel</user>
    <text>that one I got.</text>
  </message>
  <message conversation_id="1376">
    <ts>2019-04-29T02:36:25.142900</ts>
    <user>Bethel</user>
    <text>I'm just not sure how to replace with
```
Json.map2 SettingAlias (field "name" string) (field "unit" decodeTemperature)
```</text>
  </message>
  <message conversation_id="1376">
    <ts>2019-04-29T02:36:48.143400</ts>
    <user>Bethel</user>
    <text>the `SettingAlias` is not alias anymore but just custom type named `Setting`</text>
  </message>
  <message conversation_id="1376">
    <ts>2019-04-29T02:37:26.144000</ts>
    <user>Earlean</user>
    <text>`TemperatureSetting` is a constructor for the type `Setting`, it takes a String and a Unit and gives you a `Setting`</text>
  </message>
  <message conversation_id="1376">
    <ts>2019-04-29T02:37:44.144400</ts>
    <user>Earlean</user>
    <text>`Json.map2` takes a function as it's first parameter</text>
  </message>
  <message conversation_id="1376">
    <ts>2019-04-29T02:46:32.144700</ts>
    <user>Bethel</user>
    <text>ha, I got it. Thank you</text>
  </message>
  <message conversation_id="1376">
    <ts>2019-04-29T02:58:37.146700</ts>
    <user>Bethel</user>
    <text>How can I decode an array of objects of various shapes and I need to find just one exact shape in it and get that one.
```
let arr = [ { name: "Jon" }, { type: "Hot" }, { age: 16 } ]
```
and I would like to get the `age` object.</text>
  </message>
  <message conversation_id="1377">
    <ts>2019-04-29T03:54:39.147300</ts>
    <user>Lynn</user>
    <text>in brief, you cannot, as Elm lists have to contain all the same type.</text>
  </message>
  <message conversation_id="1377">
    <ts>2019-04-29T03:54:56.147700</ts>
    <user>Lynn</user>
    <text>you’ll need to use a CustomType to express the variations that you have</text>
  </message>
  <message conversation_id="1377">
    <ts>2019-04-29T03:55:19.148100</ts>
    <user>Lynn</user>
    <text>ah, sorry, read more carefully</text>
  </message>
  <message conversation_id="1377">
    <ts>2019-04-29T03:56:11.149100</ts>
    <user>Lynn</user>
    <text>`Decode.field "age" &lt;http://Decode.int|Decode.int&gt; |&amp;gt; Decode.maybe |&amp;gt; Decode.list |&amp;gt; Decode.map (List.filterMap identity)`</text>
  </message>
  <message conversation_id="1378">
    <ts>2019-04-29T04:28:40.150200</ts>
    <user>Emilee</user>
    <text>i've been thinking about a possible "solution" to this for a while, but i'm not sure where to put it^^
it's not really polished yet either, as i've never taken the time to really write it down</text>
  </message>
  <message conversation_id="1378">
    <ts>2019-04-29T04:29:05.150700</ts>
    <user>Millie</user>
    <text>To decode all content of the list, maybe &lt;https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOf&gt; could help</text>
  </message>
  <message conversation_id="1378">
    <ts>2019-04-29T04:31:06.150800</ts>
    <user>Millie</user>
    <text>If there is the possibility, I'd change the API model instead and go with a dict/object to tackle the root cause.</text>
  </message>
  <message conversation_id="1378">
    <ts>2019-04-29T04:32:39.151000</ts>
    <user>Huong</user>
    <text>There’s an additional point, actually: perhaps “custom types being comparable” is an XY-problem! Perhaps the most common reason for this request is people who wish to make a `Dict` or `Set` with custom types - in that case, them being comparable is a prerequisite for that to be possible. However, that’s not the only possible resolution - there is ongoing work for making hashmaps (and hashsets) a thing, and those would not require a `comparable` constraint.</text>
  </message>
  <message conversation_id="1378">
    <ts>2019-04-29T04:40:21.151200</ts>
    <user>Emilee</user>
    <text>yeah, i also approached the issue differently. in my concept i'd try to move away from implicit typeclasses like `comparable`
what i was thinking is that typeclasses always have the side effect of making things implicit, but elm a lot of the time is about making things explicit.
when we look at a typical problem of "i want to have a sorted datastructure" the explicit method - passing the comparison function - has one of two poblems:
• either we have to pass the function with every operation, which is clumsy and also error prone
• or we have to put the function in the data structure, which makes it hard to work with in the model
*but*: what if you could put the function in the type?
i'm not exactly sure yet how this would be best implemented to maintain readability in elm, but if you could annotate your type with a function, you could have a `SortedDict (sortFunc : a -&amp;gt; a -&amp;gt; Ordering) a` or something.
This would, I think, cover most cases where people with a background in haskell would reach for typeclasses, and still maintain explicitness.
A major issue here is how it interacts with the existing syntax, and how to make it clear when we talk about a function type, and a function *as type* ^^' so yeah...
also, i'm not yet sure how this could be abused, so that's a concern too.</text>
  </message>
  <message conversation_id="1379">
    <ts>2019-04-29T05:56:06.152300</ts>
    <user>Nana</user>
    <text>are there any plans to add memoization to Elm?</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:22:40.152400</ts>
    <user>Huong</user>
    <text>Not that I know of. Do you have a *specific* use-case where you feel like you would benefit from this? Seeing a concrete case with code would help (and would allow people to suggest workaround that apply to your case :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:28:44.152600</ts>
    <user>Nana</user>
    <text>well, I have quite a lot of places where I sort/filter a long list of items, before displaying it in the view, for example as options in select boxes
the issue with select boxes is that they also have an index which keeps track of which item the user is hovering over / has selected with up/down keys, so because of that `lazy` doesn't work</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:30:43.153600</ts>
    <user>Nana</user>
    <text>I could of course manually cache the result in the model, but it'd be cleaner to have a memoization function I think</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:30:50.153800</ts>
    <user>Huong</user>
    <text>If the input to the function changes, memoizing wouldn’t help either, would it? Or, no more than `lazy` would, I’m thinking?</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:31:11.154000</ts>
    <user>Huong</user>
    <text>oh, wait, I can see how you’d do that</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:31:48.154200</ts>
    <user>Nana</user>
    <text>so I'd memoize just the sorted/filtered list, but not the selection index</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:31:55.154400</ts>
    <user>Huong</user>
    <text>so I’m assuming you have a long list of things, and a second variable that identifies a bunch of those things as being hovered or what not. Right, yeah.</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:32:57.155000</ts>
    <user>Huong</user>
    <text>gotcha. Yeah, the current recommended workaround, after identifying that this is in fact a performance problem, would be caching it on the model</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:34:45.155700</ts>
    <user>Una</user>
    <text>Why is there no ternary operator in Elm? We have if..then..else, but elm-format insert a whole lot of space and newlines in it.

```
ternary : Bool -&amp;gt; a -&amp;gt; a -&amp;gt; a
ternary condition valueIfTrue valueIfFalse =
    if condition then
        valueIfTrue

    else
        valueIfFalse
```</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:35:43.155900</ts>
    <user>Nana</user>
    <text>and I think it'd be useful for a lot of similar things</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:45:17.156500</ts>
    <user>Liza</user>
    <text>i hade similar problem, but for cache some precalculated data, so i got structure like:
`{data:{..}, cache:{valid:Bool, cachedData:{...}}}`
so then i had some functions that needs that cache, and they return not just result, but also updated element,</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:45:39.156700</ts>
    <user>Liza</user>
    <text>but that not a case if You need that inside your view..</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:46:14.156900</ts>
    <user>Liza</user>
    <text>or just before exit update function, you can validate cache and if needed recalculate it..</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:47:42.157100</ts>
    <user>Nana</user>
    <text>I think validating the cache on every update could get expensive though? If it uses structural equality on big lists</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:48:12.157700</ts>
    <user>Liza</user>
    <text>that is just `===` in js..</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:48:16.158000</ts>
    <user>Nana</user>
    <text>or maybe not? because it first checks reference equality right?</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:48:27.158300</ts>
    <user>Huong</user>
    <text>It first checks reference equality, yes</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:51:20.158500</ts>
    <user>Liza</user>
    <text>for example - in my case that was SAT Shape - that had cached normals and projections, so if i change (by some function) position, with, or other component that impacts  cache - it was set to “invalid”, and there was (LOT of) functions that not care about that cache - so most of cases that invalid cache can stay for long time, and then if i needed (some one came too near to collide ) cache was recalculated, and that stay like that again for long time..</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:51:37.158700</ts>
    <user>Liza</user>
    <text>and validation of cache was just boolean stored in cache it self..</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:53:01.159000</ts>
    <user>Liza</user>
    <text>so in your example - it would be just, set to false when change filter, and before exit update (if that list will be shown)  check - do that prop (`cache.valid`) isn’t True</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:55:11.159200</ts>
    <user>Nana</user>
    <text>this is one of the things I like in Vue, most calculations are done in "computed properties", which are memoized, and you can have computed properties which depend on other computed properties, which means that things only get recalculated when they really need to</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:55:14.159400</ts>
    <user>Liza</user>
    <text>so - as result you not need to checks whole list, just manual invalidation each time when you make “cache braking”  changes</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:56:29.159600</ts>
    <user>Huong</user>
    <text>You could either have that `valid` flag, or write a wrapped around `update` which would look something like ```cacheHandler : Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)
cacheHandler msg model =
  let
    original = model.source
    (updatedModel, cmds) = update msg model
  in
  if updatedModel.source == original then
    -- not changed
    (updatedModel, cmds)
  else
    ( { updatedModel | cache = calculate updatedModel.source }, cmds )
```</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:58:02.159800</ts>
    <user>Huong</user>
    <text>Since that check has a bypass for referential equality, things that don’t touch the `source` won’t trigger revalidation very very fast. If the reference did change, you still only revalidate the cache if structural equality _also_ says things have actually changed</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:58:21.160000</ts>
    <user>Nana</user>
    <text>&lt;@Huong&gt; ah that's pretty neat, saving the original value in a closure. I was thinking I would have to store a duplicate in the model</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:58:22.160200</ts>
    <user>Liza</user>
    <text>point with flag - is that you manually set it, and that can be changed only during  some updates, that changes that list, so it will return it any way..</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T06:59:18.160400</ts>
    <user>Huong</user>
    <text>doing the same with `valid : Bool` flag would mean having to recognise that if your code did something equivalent to `List.map identity source`, that should not invalidate the cache</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T07:00:20.160600</ts>
    <user>Liza</user>
    <text>so - you any way will need to create wrappers around own data structure..</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T07:01:14.160800</ts>
    <user>Liza</user>
    <text>and there will be “set / get / update”.. that will do all that stuff..</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T07:01:44.161000</ts>
    <user>Liza</user>
    <text>but that depends on how many devs you have.. and how protected / transparent cache you would like to have</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T07:17:36.161300</ts>
    <user>Nana</user>
    <text>we will hopefully be 2 devs soon, atm it's just me :smile:
&lt;@Huong&gt;'s approach looks good, maybe it can be abstracted into a nice lib :thinking_face:</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T07:31:36.161500</ts>
    <user>Velia</user>
    <text>&lt;https://github.com/avh4/elm-format/issues/209&gt;</text>
  </message>
  <message conversation_id="1380">
    <ts>2019-04-29T07:40:30.161700</ts>
    <user>Nana</user>
    <text>a "ternary operator" would be odd when `if` already behaves like an expression, rather than a statement

but yeah hopefully elm-format will be updated some day</text>
  </message>
  <message conversation_id="1381">
    <ts>2019-04-29T08:13:25.161900</ts>
    <user>Calista</user>
    <text>Hello &lt;@Huong&gt; I tried these solutions, it doesn't work, due to failure in building elm-package-0.18</text>
  </message>
  <message conversation_id="1381">
    <ts>2019-04-29T08:13:58.162300</ts>
    <user>Calista</user>
    <text>```Please switch to using either the new project style and the new-install
command or the legacy v1-install alias as new-style projects will become the
default in the next version of cabal-install. Please file a bug if you cannot
replicate a working v1- use case with the new-style commands.

For more information, see: &lt;https://wiki.haskell.org/Cabal/NewBuild&gt;

Resolving dependencies...
Notice: installing into a sandbox located at
/usr/local/elm/Elm-Platform/0.18/.cabal-sandbox
Starting     elm-package-0.18
Building     elm-package-0.18
Failed to install elm-package-0.18
Build log ( /usr/local/elm/Elm-Platform/0.18/.cabal-sandbox/logs/ghc-7.10.3/elm-package-0.18-GAzqzqXmEIs4OwPrTLlD98.log ):
cabal: Entering directory '/usr/local/elm/Elm-Platform/0.18/elm-package'
Configuring elm-package-0.18...
Warning: 'ghc-options: -threaded' has no effect for libraries. It should only
be used for executables.
Preprocessing executable 'elm-package' for elm-package-0.18..
Building executable 'elm-package' for elm-package-0.18..
[ 1 of 27] Compiling Utils.Paths      ( src/Utils/Paths.hs, dist/dist-sandbox-90435201/build/elm-package/elm-package-tmp/Utils/Paths.o )

src/Utils/Paths.hs:15:27: Not in scope: ‘N.toFilePath’

src/Utils/Paths.hs:19:26:
    Not in scope: ‘Package.versiontoString’
    Perhaps you meant one of these:
      ‘Package.versionToString’ (imported from Elm.Package),
      ‘Package.versionFromString’ (imported from Elm.Package)
cabal: Leaving directory '/usr/local/elm/Elm-Platform/0.18/elm-package'
cabal: Error: some packages failed to install:
elm-package-0.18-GAzqzqXmEIs4OwPrTLlD98 failed during the building phase. The
exception was:
ExitFailure 1
elm-reactor-0.18-GWP7BE9OpskDnHmLhmsAmZ depends on elm-reactor-0.18 which
failed to install.```</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:04:26.168900</ts>
    <user>Maxwell</user>
    <text>I was wondering if `Elm.Foo.init({ element })` was also considered when they decided it should be `Elm.Foo.init({ node })` instead and why was that?</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:04:44.169400</ts>
    <user>Danika</user>
    <text>presumably because they're called DOM nodes</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:05:25.170000</ts>
    <user>Maxwell</user>
    <text>They're also called DOM elements.</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:05:43.170400</ts>
    <user>Huong</user>
    <text>`&amp;lt;a&amp;gt;` is an element. A DOM node is a specific instantiation of an element</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:05:54.170700</ts>
    <user>Danika</user>
    <text>They're called HTML elements</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:06:33.171100</ts>
    <user>Maxwell</user>
    <text>&lt;@Huong&gt; Hmm, that's a nice argument, I'll buy it! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:08:09.171300</ts>
    <user>Maxwell</user>
    <text>I don't find this argument convincing. I mean, it doesn't try to answer or answer my question. You are being pedantic IMO. Thanks, anyway! :heart:</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:21:33.172500</ts>
    <user>Maxwell</user>
    <text>This was bothering me: `{ node: document.getElementById("foo") }` and I wanted to know if anyone around here was also bothered by that and thought `{ element: getElementById("foo") }` was more logical.</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:24:43.173300</ts>
    <user>Maxwell</user>
    <text>If you had an opportunity to change `node` to `element` would you change it or stick to `node` again? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1382">
    <ts>2019-04-29T09:26:43.174800</ts>
    <user>Huong</user>
    <text>It’s not my call, but I’d stick to `node` - there is less ambiguity. JS having somewhat ambiguous function names shouldn’t influence Elm’s API :shrug:</text>
  </message>
  <message conversation_id="1383">
    <ts>2019-04-29T09:58:11.174900</ts>
    <user>Calista</user>
    <text>I resolved the problem ! solution is in this article &lt;http://lazyswamp.blogspot.com/2018/05/how-to-build-elm-platform-from-source.html&gt;</text>
  </message>
  <message conversation_id="1384">
    <ts>2019-04-29T10:33:25.175300</ts>
    <user>Nana</user>
    <text>wow, in trying to abstract this, I got the most insane type definition :sweat_smile:</text>
  </message>
  <message conversation_id="1384">
    <ts>2019-04-29T10:33:42.175500</ts>
    <user>Nana</user>
    <text>```
watchModel :
    (msg -&amp;gt; model -&amp;gt; ( model, Cmd msg ))
    -&amp;gt; (((model -&amp;gt; stuff) -&amp;gt; (model -&amp;gt; stuff -&amp;gt; model) -&amp;gt; ( model, Cmd msg ) -&amp;gt; ( model, Cmd msg )) -&amp;gt; ( model, Cmd msg ) -&amp;gt; ( model, Cmd msg ))
    -&amp;gt; msg
    -&amp;gt; model
    -&amp;gt; ( model, Cmd msg )
```</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:41:33.175900</ts>
    <user>Liza</user>
    <text>maybe add aliases to those internal functions..</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:44:37.176100</ts>
    <user>Huong</user>
    <text>That is a rather complex signature, and I’m not sure how it would work, given that you can’t easily abstract over `stuff` :thinking_face:  Perhaps something like this could work:
```
watchModel :
  { extract : model -&amp;gt; stuff
  , invalidate : model -&amp;gt; model
  , update : msg -&amp;gt; model -&amp;gt; ( model, Cmd msg )
  }
  -&amp;gt; msg
  -&amp;gt; model
  -&amp;gt; ( model, Cmd msg )
watchModel settings msg model =
  let
    stuff = settings.extract model
    ( updatedModel, cmds ) = settings.update msg model
  in
  if settings.extra updatedModel == stuff then
    ( updatedModel, cmds )
  else
    ( settings.invalidate updatedModel, cmds )
``` (I’m sort of guessing at how you want a couple of those functions to behave, but that seems a somewhat reasonable abstraction)</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:44:57.176500</ts>
    <user>Maxwell</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:48:12.176700</ts>
    <user>Huong</user>
    <text>(I like using records like that when I know that it doesn’t really make sense to partially apply with only some functions first, and some other functions later)</text>
  </message>
  <message conversation_id="1384">
    <ts>2019-04-29T10:50:51.176900</ts>
    <user>Nana</user>
    <text>&lt;@Huong&gt; well, it does work :sweat_smile:
the way you use it is like:
```
Browser.element {
  update = watchModel update watchers
  ...
  }
```
`update` is your regular update function
and `watchers` is a function which looks like:
```
watchers watch =
  watch .stuff computeStuff
  &amp;gt;&amp;gt; watch .things computeThings
```
and "compute"-functions look like:
```
computeStuff model stuff = {model | computedStuff = ...}
```</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:51:52.177300</ts>
    <user>Huong</user>
    <text>ohh. Okay, right!</text>
  </message>
  <message conversation_id="1384">
    <ts>2019-04-29T10:52:50.177500</ts>
    <user>Nana</user>
    <text>don't know if I like it though... it looks pretty neat, but the type signatures are so weird</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:53:00.177700</ts>
    <user>Huong</user>
    <text>I didn’t consider the option of inversing it like that</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:53:46.177900</ts>
    <user>Huong</user>
    <text>Hm, does that work when `.stuff` and `.things` return a value of a different type?</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:55:33.178100</ts>
    <user>Nana</user>
    <text>wait, maybe it doesnt...</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:55:48.178300</ts>
    <user>Nana</user>
    <text>only tested it with one thing so far :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:56:31.178500</ts>
    <user>Syble</user>
    <text>there is no ambiguity, an element is a node like a square is a rectangle : &lt;https://www.w3.org/TR/domcore/#introduction-to-the-dom&gt;

An element is a node.
An attibute is a node.
A chunck of text is a node.</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:56:49.178700</ts>
    <user>Syble</user>
    <text>and no inconsistency by the way :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T10:57:59.178900</ts>
    <user>Nana</user>
    <text>Do'h, you're right</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:00:37.179100</ts>
    <user>Huong</user>
    <text>I think I see 2 issues - one is the order of operations:
- you need to gather all the values to watch _before_ the update, and then invalidate them _after_ the update. Currently, I don’t think that’s happening.
- when passing that `watch` function, it’ll get specialized to the first args it is passed. You need a rank-2 type for this (or use let-polymorphism but that means you can’t externalize `watchers`, so that seems pointless)</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:07:31.179300</ts>
    <user>Huong</user>
    <text>Hmmm, I don’t entirely agree. Attributes aren’t DOM nodes. A chunk of text may indeed be a DOM node (and you can actually pass a textnode, Elm will just replace it the same way it would replace a node representing a `div` element).

The thing is this: a document consists of a tree of nodes representing elements, text and comments. Elm needs a node in that tree to bind to.</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:08:03.179500</ts>
    <user>Huong</user>
    <text>you can have 10 nodes representing a `div` element, and Elm needs one of those nodes, not one of those elements.</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:12:04.180400</ts>
    <user>Huong</user>
    <text>(granted, the DOM spec explicitly refers to Element nodes as simply “elements”, though I suspect that is because, within the context of the spec, this brevity makes sense and is disambiguated by them explicitly making that concession)</text>
  </message>
  <message conversation_id="1384">
    <ts>2019-04-29T11:12:12.180800</ts>
    <user>Isaias</user>
    <text>Is it feasible to expect a browser to hold a variable of maybe 20^(7) elements?</text>
  </message>
  <message conversation_id="1384">
    <ts>2019-04-29T11:12:27.181300</ts>
    <user>Isaias</user>
    <text>I highly doubt it</text>
  </message>
  <message conversation_id="1384">
    <ts>2019-04-29T11:13:27.182300</ts>
    <user>Isaias</user>
    <text>What if they are really cheap elements like ints?</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:13:28.182400</ts>
    <user>Nana</user>
    <text>I made an Ellie out of it
&lt;https://ellie-app.com/5pTKYZdMJBxa1&gt;</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:13:36.182900</ts>
    <user>Huong</user>
    <text>(Elm will even happily take a comment node, for what it’s worth)</text>
  </message>
  <message conversation_id="1384">
    <ts>2019-04-29T11:13:45.183300</ts>
    <user>Isaias</user>
    <text>And i could always resort to having it consult a database</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:14:05.183400</ts>
    <user>Huong</user>
    <text>All it cares about is a node in the document which it can replace with your `view`</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:14:47.183600</ts>
    <user>Nana</user>
    <text>regarding gathering/invalidating I think I'm doing that correctly
but yeah it seems like I need some kind of polymorphism</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:14:58.183800</ts>
    <user>Huong</user>
    <text>&lt;https://ellie-app.com/5pTMhhdHgWNa1&gt; example of passing a comment node</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:15:52.184200</ts>
    <user>Huong</user>
    <text>ahhh, yeah, you’re doing that right indeed :thumbsup:</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:16:13.184700</ts>
    <user>Huong</user>
    <text>the polymorphism you need doesn’t exist in Elm</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:16:26.185200</ts>
    <user>Dede</user>
    <text>That’s 1.2 gigaelements.  If they’re 32-bit ints, densely packed, that’s about 5 gig of data.   That’s not a reasonable assumption to make about a browser, triply so for a mobile browser.</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:17:46.185300</ts>
    <user>Huong</user>
    <text>You’d need this line in the `watchModel` type annotation: `((forall stuff. (model -&amp;gt; stuff) -&amp;gt; (model -&amp;gt; stuff -&amp;gt; model) -&amp;gt; ( model, Cmd msg ) -&amp;gt; ( model, Cmd msg )) -&amp;gt; ( model, Cmd msg ) -&amp;gt; ( model, Cmd msg ))`</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:18:34.185500</ts>
    <user>Huong</user>
    <text>and the type of `watchers` would also need a `forall stuff.` inside the type of that `watch` function</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:20:33.185700</ts>
    <user>Huong</user>
    <text>and that’s fairly optimistic re packing :sweat_smile:</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:21:33.185900</ts>
    <user>Dede</user>
    <text>Yeah, that’s basically assuming you’ve linked your browser against LAPACK :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:22:11.186300</ts>
    <user>Danika</user>
    <text>I’m going to do this from now on. </text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:25:48.186600</ts>
    <user>Huong</user>
    <text>To expand on my ambiguity comment: `&amp;lt;a&amp;gt;` is clearly markup for an element, whether it appears in a document or not. An element only becomes a node when it appears in a document. Since the DOM spec is concerned with the document object model, it’s simply not concerned about what you call stuff when it’s not in a document. When it refers to an element, in the context of the spec, that is always an element appearing in a document, and hence, a node.</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:27:19.186800</ts>
    <user>Nana</user>
    <text>&lt;@Huong&gt; got it working with let-polymorphism though
&lt;https://ellie-app.com/5pTYv2nC2FQa1&gt;</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:27:28.187000</ts>
    <user>Huong</user>
    <text>(sorry if I’m rambling, I have a killer headache and it appears to affect what little English I speak)</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:28:31.187200</ts>
    <user>Huong</user>
    <text>cool!</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:37:04.187700</ts>
    <user>Huong</user>
    <text>that also lets you restructure things a bit so you still end up with a generic `wrap` function! &lt;https://ellie-app.com/5pV6zRgmZyha1&gt;</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:38:22.187900</ts>
    <user>Nana</user>
    <text>&lt;@Huong&gt; ah that's looking better!</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:39:30.188100</ts>
    <user>Huong</user>
    <text>(and because I enjoy this type of stuff, with the invalidator functions being `stuff -&amp;gt; model -&amp;gt; model` rather than `model -&amp;gt; stuff -&amp;gt; model` &lt;https://ellie-app.com/5pV87jzxypKa1)&gt;</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T11:47:16.188400</ts>
    <user>Nana</user>
    <text>I'm a little worried it might be too hard to follow, but maybe it's alright :smile:</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:03:15.188600</ts>
    <user>Huong</user>
    <text>with some minor changes, you could go for something closer to this:
```watchers : Model -&amp;gt; Model -&amp;gt; Model
watchers oldModel =
    identity
        &amp;gt;&amp;gt; watch oldModel .count updateCachedCount
        &amp;gt;&amp;gt; watch oldModel .string updateCachedString


updateCachedCount : Model -&amp;gt; Model
updateCachedCount model =
    { model | cachedCount = model.count }


updateCachedString : Model -&amp;gt; Model
updateCachedString model =
    { model | cachedString = model.string }```</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:06:31.188800</ts>
    <user>Huong</user>
    <text>With some careful types, that could, perhaps, even become something like this:
```
watchers : Watcher Model
watchers =
    watcher &amp;lt;| \oldModel -&amp;gt;
        succeed
            |&amp;gt; watch oldModel .count updateCachedCount
            |&amp;gt; watch oldModel .string updateCachedString```</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:07:35.189000</ts>
    <user>Huong</user>
    <text>which is a _little_ odd, but prevents mistakes as far as mixing up old and new go, and if you’ve written tests with `elm-test`, the “function taking a lamda” might not be that far-fetched</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:18:18.189700</ts>
    <user>Huong</user>
    <text>&lt;https://ellie-app.com/5pVKpycrhwZa1&gt; poc</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:26:51.191000</ts>
    <user>Isaias</user>
    <text>Yeah.. my derived datastructor has more conbinatorial states than i anticipated it would..</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:30:11.191100</ts>
    <user>Huong</user>
    <text>&lt;https://ellie-app.com/5pVV9wyWRWfa1&gt; ooh, I’m starting to like this API :thinking_face:</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:31:10.191300</ts>
    <user>Huong</user>
    <text>The main part of the API is now just this:
```watchers : Watcher Model
watchers =
    succeed
        |&amp;gt; watch .count updateCachedCount
        |&amp;gt; watch .string updateCachedString


updateCachedCount : Model -&amp;gt; Model
updateCachedCount model =
    { model | cachedCount = model.count }


updateCachedString : Model -&amp;gt; Model
updateCachedString model =
    { model | cachedString = model.string }
```</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:31:30.191500</ts>
    <user>Huong</user>
    <text>and the `wrap watchers update` call is still there, of course</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:33:50.191700</ts>
    <user>Nana</user>
    <text>Another option could be wrapping them in opaque types `Old model` and `New model` :thinking_face:</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:37:38.191900</ts>
    <user>Huong</user>
    <text>(and things like `watch2` are also pretty easy - &lt;https://ellie-app.com/5pW2x8jzgxPa1&gt;</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:39:44.192100</ts>
    <user>Huong</user>
    <text>I think the conceptual thing is easier without explicitly involving `Old` and `New`, though - those can remain implementation details - the thing is mostly that you can say “`watch` takes a property to watch and a function to invalidate when this thing changes on your model”</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:41:35.192300</ts>
    <user>Huong</user>
    <text>The one thing that isn’t super obvious is that watchers are completely independent - if `updateCachedCount` would also touch the `string`, that would be completely ignored and not invalidate the cache ~this isn’t true, it appears? :thinking_face:~</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:42:13.192500</ts>
    <user>Huong</user>
    <text>anyway, have fun, I gotta go! This was a fun experiment to play with :smile:</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:43:39.192800</ts>
    <user>Huong</user>
    <text>oh, this implementation is actually broken</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:44:41.193500</ts>
    <user>Efren</user>
    <text>is something like the upcoming react async rendering available in elm (now or foreseeably)?</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:49:26.193600</ts>
    <user>Huong</user>
    <text>&lt;https://ellie-app.com/5pWbQsgR5tLa1&gt; there, that’s better</text>
  </message>
  <message conversation_id="1385">
    <ts>2019-04-29T12:52:59.194000</ts>
    <user>Hoyt</user>
    <text>Has anyone figured out how to test functions like `Navigation.pushUrl` that need a `Browser.Navigation.Key` which doesn’t seem to have a good way to use a test value for :disappointed: &lt;https://github.com/elm/browser/blob/1.0.1/src/Browser/Navigation.elm#L71&gt;</text>
  </message>
  <message conversation_id="1386">
    <ts>2019-04-29T13:09:52.194200</ts>
    <user>Leoma</user>
    <text>`pushUrl` is developed by someone else who’s job it is to test.

I’d suggest refactoring your code so that you can test your functionality without also testing `pushUrl`’s functionality.

Can you give us more info?</text>
  </message>
  <message conversation_id="1387">
    <ts>2019-04-29T13:38:22.194400</ts>
    <user>Nana</user>
    <text>also, maybe it'd be a good idea to have to option to return commands as well :thinking_face:</text>
  </message>
  <message conversation_id="1387">
    <ts>2019-04-29T13:40:22.194600</ts>
    <user>Alicia</user>
    <text>this is an API in the works for addressing it, but nothing yet &lt;https://github.com/elm-explorations/test/issues/24&gt;</text>
  </message>
  <message conversation_id="1387">
    <ts>2019-04-29T13:41:18.194800</ts>
    <user>Alicia</user>
    <text>the crux of the issue is if your model stores a `Key` you can’t construct that model in a test</text>
  </message>
  <message conversation_id="1387">
    <ts>2019-04-29T13:46:00.195100</ts>
    <user>Leoma</user>
    <text>AH. Ok, yes. This seems like a messy situation.</text>
  </message>
  <message conversation_id="1387">
    <ts>2019-04-29T13:47:14.195400</ts>
    <user>Leoma</user>
    <text>So, the real question it seems, is, what to do with models that contain a `Browser.Navigation.Key` in testing.</text>
  </message>
  <message conversation_id="1388">
    <ts>2019-04-29T14:00:27.195600</ts>
    <user>Nana</user>
    <text>not sure exactly what React async rendering is, but RemoteData is a pretty nice way to have views that wait for data
&lt;https://package.elm-lang.org/packages/krisajenkins/remotedata/latest/&gt;</text>
  </message>
  <message conversation_id="1388">
    <ts>2019-04-29T14:05:30.195800</ts>
    <user>Nana</user>
    <text>&lt;https://ellie-app.com/5pXmV36NrRta1&gt;</text>
  </message>
  <message conversation_id="1389">
    <ts>2019-04-29T14:31:35.197400</ts>
    <user>Dede</user>
    <text>A possible approach:
```
type alias Navigator = {
  pushUrl: String -&amp;gt; Cmd msg
  replaceUrl: String -&amp;gt; Cmd msg
  ...   
}

type alias Model = {
  nav: Navigator,
  ...
}
```</text>
  </message>
  <message conversation_id="1389">
    <ts>2019-04-29T14:32:05.197700</ts>
    <user>Dede</user>
    <text>For tests, construct a mock Navigator with closures that just print what's being attempted or whatever.</text>
  </message>
  <message conversation_id="1389">
    <ts>2019-04-29T14:32:20.197900</ts>
    <user>Dede</user>
    <text>For the real code, construct a Navigator out of closures over the real Key.</text>
  </message>
  <message conversation_id="1389">
    <ts>2019-04-29T14:33:09.198100</ts>
    <user>Dede</user>
    <text>Another approach, if you don't need to mock navigation events, is to store `Maybe Key` instead of `Key` on the model, and write wrapper nav functions that strip the Maybe off to do the work.</text>
  </message>
  <message conversation_id="1389">
    <ts>2019-04-29T14:34:32.198300</ts>
    <user>Dede</user>
    <text>Another approach:
```type alias Model a = {a | 
  (all the non-key fields)
}
```

Use that type everywhere that isn't trying to do Nav operations, and then you can test with `Model {}` and do production with `Model {key: Key} `</text>
  </message>
  <message conversation_id="1389">
    <ts>2019-04-29T14:35:23.198500</ts>
    <user>Hoyt</user>
    <text>Yeah, was hoping there was a more straightforward way than all this, but looks like we’re going to have to head towards some form of dependency injection. I was hoping to test a function that calls `pushUrl`, but I’m thinking will need to rearrange things.
Thanks</text>
  </message>
  <message conversation_id="1389">
    <ts>2019-04-29T14:35:54.198700</ts>
    <user>Hoyt</user>
    <text>And, sorry, I didn’t mean “test `pushUrl`” rather test that it was called.</text>
  </message>
  <message conversation_id="1390">
    <ts>2019-04-29T17:14:30.199200</ts>
    <user>Johnsie</user>
    <text>There’s an open issue on this in elm-explorations &lt;https://github.com/elm-explorations/test/issues/24#issuecomment-444143745&gt;</text>
  </message>
  <message conversation_id="1390">
    <ts>2019-04-29T17:28:20.199500</ts>
    <user>Johnsie</user>
    <text>Yeah, neither of the solutions (`Maybe` vs a wrapper for your model) is really great. For the first, you have to manage the `Maybe` in your code and your tests. In the case of `ModelWithKey` your `update` function will have a bunch of empty cases unless you feel comfortable with `_ -&amp;gt;`. In both cases, you are isolating the untestable parts of your code to make them as small as possible, but they’re still there.</text>
  </message>
  <message conversation_id="1390">
    <ts>2019-04-29T17:38:36.203100</ts>
    <user>Shakita</user>
    <text>Has anyone attempted to recreate the functionality of what we had in `elm-lang/Date.fromString` for Elm 0.19? We need to parse user input of a date entered in a text box without expecting users to enter iso strings. I've searched packages, but didn't find anything. I can write this parser, but would like to use a package if it exists. A port could technically do this, but really need it to be a function instead of a command.</text>
  </message>
  <message conversation_id="1390">
    <ts>2019-04-29T17:44:28.203500</ts>
    <user>Dede</user>
    <text>Using a nav object closed over the key or a mock doesn’t have those problems. </text>
  </message>
  <message conversation_id="1390">
    <ts>2019-04-29T17:45:05.203800</ts>
    <user>Hoyt</user>
    <text>yeah, I like that solution better</text>
  </message>
  <message conversation_id="1391">
    <ts>2019-04-29T18:13:32.205100</ts>
    <user>Earlean</user>
    <text>&lt;@Shakita&gt; what format is your date in? Can you use a date picker instead of a textbox?</text>
  </message>
  <message conversation_id="1391">
    <ts>2019-04-29T18:20:59.205700</ts>
    <user>Shakita</user>
    <text>We're using &lt;https://github.com/CurrySoftware/elm-datepicker&gt; but it requires a parser function in order to support users entering a date in the textbox.</text>
  </message>
  <message conversation_id="1391">
    <ts>2019-04-29T18:33:40.207200</ts>
    <user>Hoyt</user>
    <text>&lt;@Georgene&gt; Just FYI :slightly_smiling_face: Thought you might like this :slightly_smiling_face:
We have a nice css design system where I’m contracting, so writing helpers to use it. :slightly_smiling_face:
```
        parseButton =
            Spark.Button.button
                |&amp;gt; Spark.Button.withLabel "Parse"
                |&amp;gt; Spark.Button.withOnClick ParseText
                |&amp;gt; Spark.Button.toHtml

        modelDebugSection =
            Spark.pageSection
                |&amp;gt; Spark.withSeparator
                |&amp;gt; Spark.withTitle "Model"
                |&amp;gt; Spark.withContent [ text &amp;lt;| Debug.toString model ]
                |&amp;gt; Spark.toHtml
```</text>
  </message>
  <message conversation_id="1391">
    <ts>2019-04-29T18:35:03.207300</ts>
    <user>Johnsie</user>
    <text>Yeah, that does sound better.</text>
  </message>
  <message conversation_id="1391">
    <ts>2019-04-29T18:47:09.207800</ts>
    <user>Georgene</user>
    <text>What happens if you do not call withOnClick?</text>
  </message>
  <message conversation_id="1391">
    <ts>2019-04-29T18:52:43.208000</ts>
    <user>Hoyt</user>
    <text>It doesn’t add the onClick handler</text>
  </message>
  <message conversation_id="1391">
    <ts>2019-04-29T18:53:44.208200</ts>
    <user>Hoyt</user>
    <text>We haven’t worked on the required things yet to put on the initialization function `button`, so everything is optional for now</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-29T21:42:05.208800</ts>
    <user>Denisha</user>
    <text>It sounds like you might want to re-architect your solution (I used to do data viz on a lot of nodes)

But if you are stuck to handling that many elements, dont want to do lazy loading, decided not to try drill downs, or filters, you could try webworkers

&lt;https://www.w3schools.com/html/html5_webworkers.asp&gt;</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:01:40.210000</ts>
    <user>Leeanne</user>
    <text>Have Elm in the Spring 2k9 been recorded?</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:15:34.211500</ts>
    <user>Syble</user>
    <text>No worry, non-native here either, and affected by madening headache yesterday :slightly_smiling_face:
To elaborate on your point: you can not create an element `&amp;lt;a&amp;gt;` outside a document. It will be a Node as the DOM specify you have to create this element (or a vanilla Node) with the /ad hoc/ factory interface. But we're being picky at this point :monkey_face:</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:17:01.211700</ts>
    <user>Syble</user>
    <text>(nevertheless, it's interesting to understand those points to handle the Node and get how it works internally, why so convoluted at time)</text>
  </message>
  <message conversation_id="1393">
    <ts>2019-04-30T03:29:26.211900</ts>
    <user>Huong</user>
    <text>`var a = document.createElement("a")` - not in a document, and if you pass it to Elm, it will crash</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:32:03.212100</ts>
    <user>Syble</user>
    <text>`a.ownerDocument === document` #badfaith</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:32:23.212300</ts>
    <user>Syble</user>
    <text>it depends what you consider what's in a document or not</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:32:47.212500</ts>
    <user>Syble</user>
    <text>the a is part of the document, whatever it's inserted in the hierarchy or not</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:32:48.212700</ts>
    <user>Huong</user>
    <text>in a document = it appears in the tree as a node</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:33:10.212900</ts>
    <user>Huong</user>
    <text>if it appears in the tree, it’s by definition a node of that tree</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:34:02.213100</ts>
    <user>Syble</user>
    <text>and the document is not only the tree, I'm being pedantic, so no need to argue more, we're both right in a certain way</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:35:53.213300</ts>
    <user>Huong</user>
    <text>If we’re both right, there is ambiguity :smile:</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:36:39.213500</ts>
    <user>Syble</user>
    <text>ok, I see your point</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:36:43.213700</ts>
    <user>Syble</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:41:45.213900</ts>
    <user>Huong</user>
    <text>So really, I don’t disagree with your interpretation at all, it’s a very sane interpretation that also _just works_. The fact that there are more ways to interpret what an `element` really is, is where things break down.</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:43:54.214300</ts>
    <user>Syble</user>
    <text>Actually you convinced me, I remembered they were a way to access nodes that are not children (must be an implementation specific of Expat or something else), but actually it doesn't seem.

For the fun:
`(new Array(...document.children)).indexOf(a)`</text>
  </message>
  <message conversation_id="1392">
    <ts>2019-04-30T03:49:44.214500</ts>
    <user>Huong</user>
    <text>I think we can conclude this with “the DOM is complex, and naming is hard” :smile:</text>
  </message>
  <message conversation_id="1394">
    <ts>2019-04-30T03:56:20.214800</ts>
    <user>Jin</user>
    <text>Yes. I don’t know the specifics, but I believe they are published during May.</text>
  </message>
  <message conversation_id="1395">
    <ts>2019-04-30T06:52:32.216100</ts>
    <user>Adrian</user>
    <text>when changing views in my app (ala spa example), the html and url changes are instant, but the page 'title' (i.e. &amp;lt;title&amp;gt;) is not</text>
  </message>
  <message conversation_id="1395">
    <ts>2019-04-30T06:52:41.216400</ts>
    <user>Adrian</user>
    <text>is this a known, random bug or something?</text>
  </message>
  <message conversation_id="1395">
    <ts>2019-04-30T06:56:27.217100</ts>
    <user>Nana</user>
    <text>&lt;@Adrian&gt; if you type `document.title = "hello"` in the console, is it instant then?</text>
  </message>
  <message conversation_id="1395">
    <ts>2019-04-30T06:57:33.217300</ts>
    <user>Adrian</user>
    <text>nope!</text>
  </message>
  <message conversation_id="1395">
    <ts>2019-04-30T06:57:39.217500</ts>
    <user>Adrian</user>
    <text>I didn't think to check that.</text>
  </message>
  <message conversation_id="1395">
    <ts>2019-04-30T06:57:49.217700</ts>
    <user>Adrian</user>
    <text>weird, must be a chrome bug or something</text>
  </message>
  <message conversation_id="1395">
    <ts>2019-04-30T07:16:39.218100</ts>
    <user>Leeanne</user>
    <text>Yay, cannot wait :badger:</text>
  </message>
  <message conversation_id="1396">
    <ts>2019-04-30T07:33:07.218300</ts>
    <user>Wendy</user>
    <text>I'm using &lt;https://package.elm-lang.org/packages/terezka/line-charts/latest/&gt; how do I set the left margin of responsive chart &lt;https://package.elm-lang.org/packages/terezka/line-charts/latest/LineChart-Container#responsive&gt;</text>
  </message>
  <message conversation_id="1396">
    <ts>2019-04-30T08:03:35.218500</ts>
    <user>Wendy</user>
    <text>i found way round the problem</text>
  </message>
  <message conversation_id="1396">
    <ts>2019-04-30T08:04:31.218600</ts>
    <user>Wendy</user>
    <text>I have passed empty list to  attributesHtml = [] in &lt;https://package.elm-lang.org/packages/terezka/line-charts/latest/LineChart-Container#custom&gt;</text>
  </message>
  <message conversation_id="1396">
    <ts>2019-04-30T08:04:41.218700</ts>
    <user>Wendy</user>
    <text>is it an error in the documentation?</text>
  </message>
  <message conversation_id="1397">
    <ts>2019-04-30T09:12:27.219000</ts>
    <user>Jeanene</user>
    <text>&lt;@Francis&gt; if you’re still interested, you can DM me. I’ve got a working POC and it’s not _too bad_. :slightly_smiling_face: I’ll prob try to write up a blog post about it here in a week or two when all the polish is done if I’ve got the extra time.</text>
  </message>
  <message conversation_id="1397">
    <ts>2019-04-30T09:35:30.219700</ts>
    <user>Carmon</user>
    <text>Wondered if anyone here is using elm-markup?</text>
  </message>
  <message conversation_id="1397">
    <ts>2019-04-30T09:37:30.219800</ts>
    <user>Nana</user>
    <text>so you got rid of the `let` :open_mouth:</text>
  </message>
  <message conversation_id="1398">
    <ts>2019-04-30T09:40:23.220000</ts>
    <user>Huong</user>
    <text>Yeah, turns out the problem kind of disappears if you wrap it up in a type :smile:</text>
  </message>
  <message conversation_id="1397">
    <ts>2019-04-30T09:51:56.220200</ts>
    <user>Nana</user>
    <text>so if I want Watchers to optionally return commands, would you do it like:
```
type Watcher m msg
    = Watcher (m -&amp;gt; m -&amp;gt; (m, Cmd msg))
```
or:
```
type Watcher m msg
    = Watcher (m -&amp;gt; m -&amp;gt; m)
    | WithCmd (m -&amp;gt; m -&amp;gt; (m, Cmd msg))
```
?</text>
  </message>
  <message conversation_id="1397">
    <ts>2019-04-30T10:02:22.220500</ts>
    <user>Huong</user>
    <text>I’d go for the former (and do the `Cmd.none`) stuff - handling less cases seems easier</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:24:14.220900</ts>
    <user>Shaina</user>
    <text>&lt;https://ellie-app.com/5qkP5s2fWmga1&gt; Why does `fooBar` not work?</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:28:49.221900</ts>
    <user>Virgie</user>
    <text>the `Foo` type alias is more a constraint than a concrete type. It means "type with at least this field", but that is not enough to actually create a value.</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:29:08.222700</ts>
    <user>Huong</user>
    <text>`fooBar : Bar -&amp;gt; Foo {}` would work, but then that’s just `Bar` really</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:31:17.226700</ts>
    <user>Huong</user>
    <text>If you construct a record and you know all the fields, the type signature has to reflect this fact. Since you can’t construct a record with an unknown set of fields, you can’t return an extensible record with an unbound type variable denoting the other fields</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:38:32.232400</ts>
    <user>Audria</user>
    <text>I have a tricky riddle for you all to play around and exercise the brains. Given a `button` function accepting a type of a button (like Submit, Cancel or Normal, affecting the visual appearance) and size of a button (like Small, Medium or Large, also affecting the visual appearance), we want to disallow certain combinations of type and size (we don’t have Large Normal button in our design system). It is kind of easy in runtime (return empty `text` node if the disallowed combination comes in), but… How could we achieve this on type level (or via any other means to catch it during compilation)?

The only idea I came up with is to explicitly list all possible combinations as a union type; or introduce one of the types parametrised with a specific another (eg. `type ButtonType = Submit SubmitSize | ...`) which is almost the same in its core.

Can it be done in a more elegant way in Elm? In any other language you know?</text>
  </message>
  <message conversation_id="1400">
    <ts>2019-04-30T10:42:57.234500</ts>
    <user>Alicia</user>
    <text>if it doesn’t have to be a compiler error you could force it down to valid states, something like
```
withSize: Size -&amp;gt; Button -&amp;gt; Button
withSize size button =
    if size == Large &amp;amp;&amp;amp; button.style == Normal then
        { button | size = Medium }
    else
        { button | size = size }
```</text>
  </message>
  <message conversation_id="1400">
    <ts>2019-04-30T10:44:43.234600</ts>
    <user>Huong</user>
    <text>&lt;https://ellie-app.com/5qm7FyQYLRpa1&gt;</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:45:52.234800</ts>
    <user>Huong</user>
    <text>basically how rtfeldman/elm-css does a lot of seemingly magic tricks</text>
  </message>
  <message conversation_id="1400">
    <ts>2019-04-30T10:46:52.235100</ts>
    <user>Alicia</user>
    <text>oooo I like it</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:47:11.235600</ts>
    <user>Alicia</user>
    <text>disregard what I wrote there and look at &lt;@Huong&gt;’s suggestion in the thread</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:47:42.235800</ts>
    <user>Huong</user>
    <text>we use this in our application for similar purposes, it’s pretty neat. Just be wary of someone writing `foobar : Variation foo` because then that suddenly is allowed everywhere :smile:</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:49:34.236400</ts>
    <user>Shaina</user>
    <text>&lt;@Huong&gt;, &lt;@Virgie&gt; thank you both :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1400">
    <ts>2019-04-30T10:50:40.236500</ts>
    <user>Nana</user>
    <text>got it working :blush:
&lt;https://ellie-app.com/5qmcNqnfkkSa1&gt;</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:53:38.237000</ts>
    <user>Huong</user>
    <text>(not exposing `Variation` means that such tomfoolery can only happen in one module, though, so it’s pretty easy to control)</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:54:32.237200</ts>
    <user>Audria</user>
    <text>wow, that’s tricky but impressive!</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T10:56:14.237400</ts>
    <user>Huong</user>
    <text>(you don’t _technically_ need `Variation` to hold a `String`, but I find that you’ll need a `variationToSTring` at some point, and that becomes easy to write when it’s already in there :smile: )</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T11:00:19.237600</ts>
    <user>Huong</user>
    <text>&lt;https://ellie-app.com/5qmn89B7BYCa1&gt; for reference</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T11:04:27.237800</ts>
    <user>Huong</user>
    <text>Oh and, just because it’s a fun little extra - with `--optimize`, all the variations compiled to _just a `String`_</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T11:04:37.238000</ts>
    <user>Huong</user>
    <text>so this is a zero-cost abstraction</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T11:05:09.238200</ts>
    <user>Huong</user>
    <text>```var author$project$Main$large = 'large';
var author$project$Main$medium = 'medium';
var author$project$Main$small = 'small';```</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T11:07:38.238400</ts>
    <user>Huong</user>
    <text>(or close to it, since the compiler isn’t quite smart enough to realise that `variationToString` can just disappear altogether, it compiles it down to something like `function (v) { return v; }`</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T11:07:53.238600</ts>
    <user>Huong</user>
    <text>certain minimizers might be able to optimize that away, though</text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T11:08:12.238800</ts>
    <user>Huong</user>
    <text>)</text>
  </message>
  <message conversation_id="1401">
    <ts>2019-04-30T12:16:58.239600</ts>
    <user>Danika</user>
    <text>This is pure wizardry, absolute madness </text>
  </message>
  <message conversation_id="1401">
    <ts>2019-04-30T12:18:34.240000</ts>
    <user>Danika</user>
    <text>Is this hacky, or legit? </text>
  </message>
  <message conversation_id="1399">
    <ts>2019-04-30T12:29:05.240200</ts>
    <user>Huong</user>
    <text>Legit, just using the type-checker’s rules for extensible records, and using those as a phantom type</text>
  </message>
  <message conversation_id="1401">
    <ts>2019-04-30T12:37:46.240600</ts>
    <user>Danika</user>
    <text>_phantom types_ that was it! </text>
  </message>
  <message conversation_id="1401">
    <ts>2019-04-30T14:26:48.241300</ts>
    <user>Modesto</user>
    <text>anyone visiting DC in May?  Interested in giving a talk?</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:18:57.241600</ts>
    <user>Willodean</user>
    <text>Hey out there</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:19:05.241900</ts>
    <user>Willodean</user>
    <text>I am having a problem with `elm/time`</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:19:30.242400</ts>
    <user>Willodean</user>
    <text>both of these are today `1556570333000` `1556651400000`</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:19:50.242800</ts>
    <user>Willodean</user>
    <text>when passed to `toDay` one gives `30` which is correct, and the other gives `29`</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:20:49.243100</ts>
    <user>Fidela</user>
    <text>do you specify the correct tz? that'd be my guess</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:20:57.243300</ts>
    <user>Willodean</user>
    <text>yes</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:21:00.243500</ts>
    <user>Willodean</user>
    <text>same for both</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:23:42.244300</ts>
    <user>Nana</user>
    <text>&lt;@Willodean&gt; I tried it with `new Date(1556570333000)` in the browser console and I too get 29 and 30 :smile:</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:24:13.244500</ts>
    <user>Willodean</user>
    <text>how odd</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:24:20.244700</ts>
    <user>Willodean</user>
    <text>oh interesting</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:24:31.245200</ts>
    <user>Willodean</user>
    <text>`new Date(1556570333000)` vs `Date(1556570333000)`</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:24:44.245400</ts>
    <user>Nana</user>
    <text>`new Date(1556570333000)` becomes `Mon Apr 29 2019 22:38:53 GMT+0200`</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:24:50.245600</ts>
    <user>Willodean</user>
    <text>yes it does</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:26:16.246600</ts>
    <user>Glayds</user>
    <text>What package should I be using to make a simple table?</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:26:44.247000</ts>
    <user>Nana</user>
    <text>seems like `Date()` without `new` ignores any arguments and just returns the current time. JS is weird :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:27:47.248100</ts>
    <user>Nana</user>
    <text>&lt;@Glayds&gt; you can just use `table` `tr` `td` etc. from the `Html` package</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T15:36:12.248300</ts>
    <user>Willodean</user>
    <text>yeah, terrible</text>
  </message>
  <message conversation_id="1403">
    <ts>2019-04-30T17:30:32.249700</ts>
    <user>Rosette</user>
    <text>when changing the source-directories values in my elm.json file, do I need to do anything to pick up the change or should it just pickup the next time I run “elm-test”?</text>
  </message>
  <message conversation_id="1403">
    <ts>2019-04-30T17:30:54.250000</ts>
    <user>Rosette</user>
    <text>I feel like its not finding paths I’ve defined</text>
  </message>
  <message conversation_id="1403">
    <ts>2019-04-30T17:32:24.250200</ts>
    <user>Virgie</user>
    <text>I think that should just work</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T18:51:26.252100</ts>
    <user>Glayds</user>
    <text>Sorry this is more of a Css question than an elm one but when using the `table` from the `Html` package, what is a `Css` function that spaces everything out within the table? I've tried `padding` but it just seems to pad the outside margin</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T18:54:28.252300</ts>
    <user>Wenona</user>
    <text>Have you tried flexbox? &lt;https://www.kirupa.com/html5/centering_vertically_horizontally.htm&gt;</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T19:05:16.252600</ts>
    <user>Glayds</user>
    <text>No I haven't I'll check it out thanks!</text>
  </message>
  <message conversation_id="1404">
    <ts>2019-04-30T21:20:44.254600</ts>
    <user>Rico</user>
    <text>I'm writing my first package. For applications, I usually use `npm` to install `elm-format`, `elm-test`, and have custom scripts. I don't see any examples of elm packages with a `package.json`, though. How do people normally run tests on their packages?</text>
  </message>
  <message conversation_id="1403">
    <ts>2019-04-30T21:24:20.255300</ts>
    <user>Earlean</user>
    <text>people often install elm-format, elm-test and elm globally</text>
  </message>
  <message conversation_id="1402">
    <ts>2019-04-30T21:36:37.255800</ts>
    <user>Willodean</user>
    <text>I am using nix for this</text>
  </message>
  <message conversation_id="1404">
    <ts>2019-04-30T21:45:52.256000</ts>
    <user>Rico</user>
    <text>Do you have an example?</text>
  </message>
  <message conversation_id="1404">
    <ts>2019-04-30T21:47:44.256200</ts>
    <user>Rico</user>
    <text>I assume you mean this Nix? &lt;https://nixos.org/nix/&gt;</text>
  </message>
  <message conversation_id="1405">
    <ts>2019-04-30T23:43:32.256600</ts>
    <user>Leoma</user>
    <text>:point_up: this all needs to be a blog post.</text>
  </message>
  <message conversation_id="1406">
    <ts>2019-05-01T01:02:33.258400</ts>
    <user>Danika</user>
    <text>&lt;https://medium.com/@ckoster22/advanced-types-in-elm-phantom-types-808044c5946d&gt; like this one? ^^</text>
  </message>
  <message conversation_id="1407">
    <ts>2019-05-01T01:26:04.259100</ts>
    <user>Lory</user>
    <text>How do I change curly braces expansion and brackets expansion for that matter from this to this. I'm talking about VScode</text>
  </message>
  <message conversation_id="1404">
    <ts>2019-05-01T01:26:26.259400</ts>
    <user>Lory</user>
    <text>None</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T02:02:41.260700</ts>
    <user>Isaias</user>
    <text>Help! Im getting a very strange error</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T02:04:54.261100</ts>
    <user>Isaias</user>
    <text>Oh.. i think i know why...</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T02:07:10.261400</ts>
    <user>Isaias</user>
    <text>Its a compiler bug :hushed:</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T02:14:29.261800</ts>
    <user>Isaias</user>
    <text>Wait, i dont know why!</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T02:15:07.262300</ts>
    <user>Isaias</user>
    <text>"thread blocked indefinitely in mvar operation"</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T02:19:02.263000</ts>
    <user>Earlean</user>
    <text>yeah, that would be a compiler bug. Are you using Elm 0.19?</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T02:19:06.263200</ts>
    <user>Isaias</user>
    <text>Yup</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T02:20:03.263800</ts>
    <user>Isaias</user>
    <text>If i gave you context i would need to give you a 600 line file</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T02:25:41.264100</ts>
    <user>Isaias</user>
    <text>I need to get this done tonight!</text>
  </message>
  <message conversation_id="1409">
    <ts>2019-05-01T02:28:21.264600</ts>
    <user>Earlean</user>
    <text>You can try deleting the `elm-stuff` directory and you might get lucky</text>
  </message>
  <message conversation_id="1409">
    <ts>2019-05-01T02:39:05.264700</ts>
    <user>Dexter</user>
    <text>Have you tried to compile it without the --debug flag?</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T05:06:18.265500</ts>
    <user>Isaias</user>
    <text>No ive localized the issur it has to do with updating records</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T05:06:42.266200</ts>
    <user>Isaias</user>
    <text>I still dont quite know what in particular is causing the error</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T05:19:03.266700</ts>
    <user>Isaias</user>
    <text>Or maybe it has to do with my debug todo stubs.. idk</text>
  </message>
  <message conversation_id="1408">
    <ts>2019-05-01T06:36:00.267500</ts>
    <user>Isaias</user>
    <text>Oh btw i refactored and it fixed itself</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T08:53:29.270100</ts>
    <user>Carmon</user>
    <text>I wanted to install a package from the master branch on github (as opposed to a number versioned branch) - is there a way to do that, or does it go against the elm way?</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T08:58:18.270800</ts>
    <user>Virgie</user>
    <text>yes that is not supported by the tooling. you can force it if you really need to</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:01:29.271500</ts>
    <user>Carmon</user>
    <text>OK - how do I force it?</text>
  </message>
  <message conversation_id="1411">
    <ts>2019-05-01T09:06:21.273100</ts>
    <user>Tarsha</user>
    <text>Has anybody found a nice way to do state transitions for an SPA? I'm finding that everything seems to become spaghetti code. (Model, update, view) triplets haven't been ideal for code clarity in my past experiences.</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:09:18.273200</ts>
    <user>Virgie</user>
    <text>well, as they say, here be dragons

go to `~/.elm` and find the package that you want to mess with, eg `/home/folkertdev/.elm/0.19.0/package/elm/file/1.0.5`. You can change the source there. Nothing will happen yet though because everything is cached.

You then have to remove all 3 `.dat` files in that directory. Now go to your project, remove elm-stuff and recompile it</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:10:29.273400</ts>
    <user>Virgie</user>
    <text>but again, you should not be doing this (maybe except for testing fixes to packages in your app). it is not supported, it is hacky, it is not distributable</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:11:04.273600</ts>
    <user>Virgie</user>
    <text>in the sense that your elm.json is now inaccurate as to what version is actually used in your app</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:11:33.273800</ts>
    <user>Dede</user>
    <text>You’ve looked at the canonical examples?</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:12:17.274000</ts>
    <user>Dede</user>
    <text>I have an idiosyncratic approach here, which some people have found at least interesting. &lt;https://github.com/jhbrown94/experimental-elm-spa-skeleton&gt;</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:13:42.274200</ts>
    <user>Carmon</user>
    <text>I get it - but thank you.  I am hoping the master is released before my app is complete. OTOH it's not like I've never been bitten in the a** by a dragon</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:18:34.274400</ts>
    <user>Liane</user>
    <text>Not the most helpful answer, but if you've followed and understand the canonical examples, my recommendation is that there isn't a good rule of thumb, you have to start from first principles. And that means sitting down and thinking out your app, because the spaghetti is frequently inherent in how complicated your app is, not coming from the language</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:21:21.274600</ts>
    <user>Liane</user>
    <text>I do have 2 easy rules that I have found almost always make things better: 1) Find types and build modules around them. Do not worry about module size, if the functionality is logically related. 2) Keep the app as flat as possible. A big app can happily be one package. Things seem to me to want to be packaged as logical units, not to keep code length down, in Elm.</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:24:31.274800</ts>
    <user>Liane</user>
    <text>Elm helps avoid writing impossible states, but state transitions are all that your Elm code _is_, so to get that right you have to get your helper functions right. Try to make sure that certain transitions only happen in one function, and you can't accidentally do it differently in two places</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:25:34.275000</ts>
    <user>Tarsha</user>
    <text>Main issue I run into is the impossibility to 'remove' type information, so you can't neatly group things based on abstract 'shape'. If I'm not mistake &lt;@Dede&gt; is essentially doing this by expressing every triplet in terms of parent model and msg. I guess this can work but it seems 'nasty' to use an input type that is only partially supported. In contrast, my API router in Haskell looks like a table of endpoint names, verbs and handlers.

Maybe I'm just asking for too much for a language the aim of which is to remain simple.</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:27:29.275200</ts>
    <user>Liane</user>
    <text>are you saying you would like to abstract out page triplets?</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:29:16.275400</ts>
    <user>Tarsha</user>
    <text>Speaking at a high-abstraction level: I'm not interested in 3 values, I'm interested in 1 page, and I want to reason about that page as being a *page* not a `Page model msg`.</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:30:53.275600</ts>
    <user>Tarsha</user>
    <text>At least not with bound `model` and `msg` types.</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:32:47.275800</ts>
    <user>Dede</user>
    <text>The `Descriptors` in my skeleton try to give you most of that.  They hide the page-specific model stuff entirely, and most of the page-specific msg stuff.  That said, it sounds like you are pining for more traditional object-orientedness with inheritance, and that’s really not where Elm’s philosophy lies.</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:34:54.276000</ts>
    <user>Tarsha</user>
    <text>More like typeclasses, but that's considered too complex for Elm, and I can see where that notion is coming from.</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:36:11.276200</ts>
    <user>Tarsha</user>
    <text>I guess the two approaches try to fulfill the same abstract desire.</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:39:03.276400</ts>
    <user>Tarsha</user>
    <text>Essentially I want to do sort-of what you did, but with type-restrictions being internal.</text>
  </message>
  <message conversation_id="1410">
    <ts>2019-05-01T09:50:10.276600</ts>
    <user>Leoma</user>
    <text>Well, that covers phantom types, but there are some other type-system “hacks/tricks” going on here.</text>
  </message>
  <message conversation_id="1412">
    <ts>2019-05-01T10:53:23.278600</ts>
    <user>Marinda</user>
    <text>What debounce library do folks recommend for 0.19? I saw a few</text>
  </message>
  <message conversation_id="1413">
    <ts>2019-05-01T12:11:00.279200</ts>
    <user>Ashton</user>
    <text>What do you mean by state transitions?</text>
  </message>
  <message conversation_id="1413">
    <ts>2019-05-01T12:11:16.279400</ts>
    <user>Ashton</user>
    <text>I think of, any kind of update to the model as a state transition.</text>
  </message>
  <message conversation_id="1413">
    <ts>2019-05-01T12:12:50.279600</ts>
    <user>Ashton</user>
    <text>Richard’s SPA example seems like a good guide. Can you find the problem you are talking about in that code base?</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:43:48.280200</ts>
    <user>Efren</user>
    <text>I read people raving about Elm UI. what is it? is it out for 0.19? what makes it so good?</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:44:24.280300</ts>
    <user>Mirian</user>
    <text>it is out, &lt;https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/&gt;</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:44:44.280500</ts>
    <user>Mirian</user>
    <text>It's an alternative way for writing html/css stuff</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:44:56.280700</ts>
    <user>Mirian</user>
    <text>(by not writing html/css stuff and instead using pure Elm)</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:46:54.281000</ts>
    <user>Efren</user>
    <text>is Ellie an elm thing?</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:47:10.281200</ts>
    <user>Mirian</user>
    <text>yup, Elm-only AFAIK</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:47:20.281400</ts>
    <user>Efren</user>
    <text>written in elm too?</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:47:36.281600</ts>
    <user>Mirian</user>
    <text>yes, I think so</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:47:37.281800</ts>
    <user>Efren</user>
    <text>i see. what makes it so great</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:47:56.282000</ts>
    <user>Mirian</user>
    <text>you can look it up on github</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:47:56.282200</ts>
    <user>Mirian</user>
    <text>&lt;https://github.com/ellie-app/ellie&gt;</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:48:10.282400</ts>
    <user>Efren</user>
    <text>i did notice it was noticeably less buggy and slow than similar apps</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:48:12.282600</ts>
    <user>Efren</user>
    <text>so i was wondering</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:49:46.282800</ts>
    <user>Leoma</user>
    <text>Are you familiar with CSS?</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:49:52.283000</ts>
    <user>Efren</user>
    <text>yea</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:50:12.283200</ts>
    <user>Mirian</user>
    <text>The bullet points on the package site sum it up quite well from my perspective. I know barely any CSS so a library that allows me to not write is heaven-sent.</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:50:21.283400</ts>
    <user>Leoma</user>
    <text>So you’d probably agree there are countless ways to get strange unintended layouts in CSS.</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:50:35.283600</ts>
    <user>Efren</user>
    <text>certainly</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:50:50.283800</ts>
    <user>Efren</user>
    <text>every time im frustrated about css (frequently) i think there should be a better alternative</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:50:51.284000</ts>
    <user>Leoma</user>
    <text>Many times, with valid CSS, you’d get an output that probably no one would ever want</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:50:51.284200</ts>
    <user>Efren</user>
    <text>is this my savior</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:50:57.284400</ts>
    <user>Efren</user>
    <text>also is this the docs &lt;https://elm-ui.netlify.com/documentation/getting-started/setup&gt;</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:51:16.284600</ts>
    <user>Mirian</user>
    <text>oh it's another library I think</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:51:22.284800</ts>
    <user>Leoma</user>
    <text>So elm-ui says: “let’s try to have this layout business make more sense”.</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:51:57.285000</ts>
    <user>Mirian</user>
    <text>all docs for `mdgriffith/elm-ui` are here:  &lt;https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/&gt;</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:56:43.285200</ts>
    <user>Efren</user>
    <text>if I were to watch avideo on it is this a good one</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T13:56:43.285400</ts>
    <user>Efren</user>
    <text>&lt;https://www.youtube.com/watch?v=Ie-gqwSHQr0&gt;</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T14:00:31.285600</ts>
    <user>Mirian</user>
    <text>I enjoyed it, so I recommend wholeheartedly :wink:</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T14:08:31.286000</ts>
    <user>Leoma</user>
    <text>Yes. That’s a good video. Starting with elm-ui is deceptively simple. Read the basic Element module API at &lt;https://package.elm-lang.org/packages/mdgriffith/elm-ui/1.0.0/Element&gt;. That gives you a good overview of all the basic stuff. Need more on Input? It’s in Element.Input. Need more on Borders? In Element.Border.
Finally, `Element#layout` turns your elm-ui layout into html.</text>
  </message>
  <message conversation_id="1414">
    <ts>2019-05-01T14:08:54.286200</ts>
    <user>Leoma</user>
    <text>Really, you can just get started building stuff.</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T14:26:30.287100</ts>
    <user>Latonya</user>
    <text>would it be possible to add a class or ID to the debugger div that is inserted on local elm projects?</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T14:31:04.287500</ts>
    <user>Alicia</user>
    <text>&lt;@Latonya&gt; nothing built in, I usually query it by the zindex</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T14:31:36.287800</ts>
    <user>Alicia</user>
    <text>like to move the debugger to the left side
```
div[style*="z-index: 2147483647"] {
  left: 0 !important;
  width: 250px !important;
}
```</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T14:33:32.288600</ts>
    <user>Latonya</user>
    <text>i think that's the highest possible z-index, correct? so _lastpass_ uses the same one</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T14:38:10.290300</ts>
    <user>Latonya</user>
    <text>maybe i can submit a PR to add an ID. i just don't even know where the debugger code lives (i'm mostly a designer, doing some css)</text>
  </message>
  <message conversation_id="1416">
    <ts>2019-05-01T14:50:42.290400</ts>
    <user>Efren</user>
    <text>saw your face in that talk. spooky</text>
  </message>
  <message conversation_id="1416">
    <ts>2019-05-01T14:51:09.290600</ts>
    <user>Efren</user>
    <text>anyway, looks cool, but I'm not convinced yet this can express everything CSS can. he never addressed that (that i saw)</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T14:56:03.290800</ts>
    <user>Leoma</user>
    <text>Haha ya. Matthew liked my quote and asked to include it. I still stand behind that feeling 100%.</text>
  </message>
  <message conversation_id="1416">
    <ts>2019-05-01T14:57:10.291000</ts>
    <user>Leoma</user>
    <text>Anyway, elm-ui has a way of wrapping and html element into an elm-ui element, AND also of wrapping html attributes into elm-ui attributes.  So you can use all of html/css in elm-ui.</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T15:03:49.291200</ts>
    <user>Nana</user>
    <text>you need to put the padding on the `td` elements</text>
  </message>
  <message conversation_id="1416">
    <ts>2019-05-01T15:15:42.291900</ts>
    <user>Alicia</user>
    <text>a PR could be nice, but it tends to take a long time to get them reviewed or merged</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T15:17:46.292600</ts>
    <user>Alicia</user>
    <text>would querying on multiple properties help eliminate lastpass?, or maybe lastpass has something in its element you could eliminate with a `:not()` selector?</text>
  </message>
  <message conversation_id="1417">
    <ts>2019-05-01T15:19:09.293500</ts>
    <user>Yahaira</user>
    <text>Hi all, I'm suddenly getting the dreaded `elm: Map.!: given key is not an element in the map` compilation error, and deleting elm-stuff isn't working. Any tips?</text>
  </message>
  <message conversation_id="1417">
    <ts>2019-05-01T15:20:37.294200</ts>
    <user>Timika</user>
    <text>Have you tried disabling the debugger?</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T15:20:44.294500</ts>
    <user>Bebe</user>
    <text>Avoid —debug seems to be the most popular one</text>
  </message>
  <message conversation_id="1417">
    <ts>2019-05-01T15:23:33.296100</ts>
    <user>Yahaira</user>
    <text>Thanks! I'm using `parcel watch` to build my Elm app, so I'll have to see if there's an option to turn off the debugger in parcel's watch mode</text>
  </message>
  <message conversation_id="1417">
    <ts>2019-05-01T15:34:33.298300</ts>
    <user>Yahaira</user>
    <text>Thanks - it does compile ok if the debugger is off. I may just have to stop using parcel watch for now.</text>
  </message>
  <message conversation_id="1415">
    <ts>2019-05-01T15:57:13.299300</ts>
    <user>Jin</user>
    <text>You can also downgrade to something around parcel `1.10.3` IIRC which does not add the `--debug` flag in watch mode.</text>
  </message>
  <message conversation_id="1418">
    <ts>2019-05-01T17:03:13.300300</ts>
    <user>Wenona</user>
    <text>Is this not allowed in 0.19? `infix right 0 (|) = function`. The `elm/core` package has syntax there.</text>
  </message>
  <message conversation_id="1418">
    <ts>2019-05-01T17:03:48.300800</ts>
    <user>Huong</user>
    <text>only `elm/*` and `elm-explorations/*` are allowed to define infix operators in 0.19</text>
  </message>
  <message conversation_id="1418">
    <ts>2019-05-01T17:04:14.301600</ts>
    <user>Wenona</user>
    <text>Hmm… what about `(|) : a -&amp;gt; a` syntax?</text>
  </message>
  <message conversation_id="1418">
    <ts>2019-05-01T17:04:41.302100</ts>
    <user>Huong</user>
    <text>(same way they’re the only orgs that can write kernel code or create effect modules: they’re considered core parts of the ecosystem)</text>
  </message>
  <message conversation_id="1418">
    <ts>2019-05-01T17:05:00.302900</ts>
    <user>Wenona</user>
    <text>So you can’t do that with symbols?</text>
  </message>
  <message conversation_id="1418">
    <ts>2019-05-01T17:05:57.303900</ts>
    <user>Huong</user>
    <text>Correct! (I don’t think it would play nice with unary functions, but haven’t tried)</text>
  </message>
  <message conversation_id="1418">
    <ts>2019-05-01T17:07:58.304300</ts>
    <user>Wenona</user>
    <text>Right… dang. Oh well :man-shrugging:</text>
  </message>
  <message conversation_id="1418">
    <ts>2019-05-01T17:10:32.305100</ts>
    <user>Erlene</user>
    <text>Obviously nobody is stopping you from being `elm/*` or `elm-explorations/*`, but it's not code you could make available as Elm library via `elm install`.</text>
  </message>
  <message conversation_id="1418">
    <ts>2019-05-01T17:13:08.307700</ts>
    <user>Huong</user>
    <text>Yeah, you can do that to experiment, though I would heavily discourage relying on such things - special syntax and whatnot for those packages is considered an implementation detail, and can/will break without prior notice :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:34:23.309300</ts>
    <user>Hoa</user>
    <text>It seems that `elm/bytes` doesn’t have the concept of seeking to a given offset.  I noticed there’s a `Byte.Parser`, skip method seems the closest functionality.  Am I right ?</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:35:55.311000</ts>
    <user>Hoa</user>
    <text>I’ve just realised that Quake 3 BSP files are not guaranteed to have the various lumps in the order they are listed in the header “directory” portion. Damn</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:36:11.311300</ts>
    <user>Virgie</user>
    <text>the file disagrees with its own header?</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:36:43.311900</ts>
    <user>Hoa</user>
    <text>Not really.  I have not explained well the scenario</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:38:41.313900</ts>
    <user>Hoa</user>
    <text>Basically the header lists a number of so called “lumps”, each has a offset and length.  I was assuming that the order the lumps listed in the header was the same of the actual data later on the file.  It is not the case.</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:39:26.315000</ts>
    <user>Huong</user>
    <text>&lt;https://package.elm-lang.org/packages/zwilias/elm-bytes-parser/latest/Bytes-Parser#randomAccess&gt; is my preferred method for this kind of thing</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:39:30.315200</ts>
    <user>Virgie</user>
    <text>you can first decode the header and then sort. In general I've found a two-phase decoding process easier in this sort of case: once to slice the buffer into smaller buffers (one for each table), then individual decoders for the tables</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:39:47.315400</ts>
    <user>Huong</user>
    <text>if you know where a “lump” starts, this is pretty straightforward</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:40:12.316400</ts>
    <user>Hoa</user>
    <text>Ah, you sort the “directory” part by the offset, right?</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:40:20.316600</ts>
    <user>Virgie</user>
    <text>exactly</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:40:30.317000</ts>
    <user>Hoa</user>
    <text>Oh, that’s clever</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:41:00.317500</ts>
    <user>Hoa</user>
    <text>Lemme see!</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:41:29.318100</ts>
    <user>Virgie</user>
    <text>then something like `List.map2 (\small large -&amp;gt; large - small) offsets (List.drop 1 offsets ++ [Bytes.width myBytes]) ` to figure out the sizes of each table</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:41:37.318200</ts>
    <user>Hoa</user>
    <text>Indeed I have offset and length for each piece of information</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:43:22.319200</ts>
    <user>Hoa</user>
    <text>Looks we have a winner :slightly_smiling_face:  Thank you</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:43:43.319500</ts>
    <user>Huong</user>
    <text>Yeah, as long as you have a way of calculating where to start reading (either absolutely by setting `relativeTo = startOfInput` or relatively by using the `position` parser earlier on to get a position you want to use as the relative offset later on), you can use this to run whatever parser you have at that position, and then resume wherever you were before</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:45:20.320700</ts>
    <user>Hoa</user>
    <text>OK. I think I’m able to go on. Thank you!</text>
  </message>
  <message conversation_id="1419">
    <ts>2019-05-01T17:54:05.320900</ts>
    <user>Yahaira</user>
    <text>Thanks! I guess this is the downside of "zero config" :face_with_rolling_eyes:</text>
  </message>
  <message conversation_id="1420">
    <ts>2019-05-01T20:12:13.324100</ts>
    <user>Sofia</user>
    <text>Hey folks -- I've built a drag and drop library, primarily for use inside my company. I'd like to be able to generate documentation from the code for others to read. I can't quite figure out how to do that:
- I'd be fine publishing it, but it needs ports for certain touch event compatibility.
- If I make a separate `package` elm.json, there's no way to install it to my projects.
- `elm make --docs` doesn't do anything for `application` types: &lt;https://github.com/elm/compiler/issues/1835&gt;

Is there a canonical way to do this?</text>
  </message>
  <message conversation_id="1420">
    <ts>2019-05-01T20:37:05.325600</ts>
    <user>Earnest</user>
    <text>&lt;@Sofia&gt; You're not going to be able to publish anything with ports. You could have an npm package for people to use that they could wire up to ports they define in their applications.

I don't think you can publish `application` types either, but I've never tried. You'd need to pull that code into a separate `library` elm package.</text>
  </message>
  <message conversation_id="1421">
    <ts>2019-05-01T21:18:06.325800</ts>
    <user>Latonya</user>
    <text>instead of the contains selector i just went with the full style: `[style="position: fixed; bottom: 0px; right: 6px; border-radius: 4px; background-color: rgb(61, 61, 61); color: white; font-family: monospace; pointer-events: auto; z-index: 2147483647;"]`. i'm sure it's not the most performant css, but it's not a huge deal for this case</text>
  </message>
  <message conversation_id="1420">
    <ts>2019-05-02T02:13:42.327800</ts>
    <user>Isaias</user>
    <text>Writing documentation is outlined in the "writing great docs" link in the package directory under "Resources"</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T02:51:53.328000</ts>
    <user>Isaias</user>
    <text>```
Error: Script terminated by timeout at:
author$project$ShapePoker$easyDecision&amp;lt;@http://localhost:8000/:5104:10
A2@http://localhost:8000/:66:24
analyze@http://localhost:8000/:6168:26
elm$random$Random$map&amp;lt;/&amp;lt;@http://localhost:8000/:5779:6
elm$random$Random$map&amp;lt;/&amp;lt;@http://localhost:8000/:5775:15
elm$random$Random$map&amp;lt;/&amp;lt;@http://localhost:8000/:5775:15
elm$random$Random$map&amp;lt;/&amp;lt;@http://localhost:8000/:5775:15
elm$random$Random$step&amp;lt;@http://localhost:8000/:6529:10
A2@http://localhost:8000/:66:24
elm$random$Random$onEffects&amp;lt;@http://localhost:8000/:6538:14
A3@http://localhost:8000/:69:24
loop/&amp;lt;@http://localhost:8000/:2071:7
_Scheduler_step@http://localhost:8000/:1078:13
_Scheduler_enqueue@http://localhost:8000/:1040:3
_Scheduler_rawSend@http://localhost:8000/:986:2
_Platform_dispatchEffects@http://localhost:8000/:2150:3
_Platform_initialize@http://localhost:8000/:1982:2
_Browser_document&amp;lt;@http://localhost:8000/:4012:9
F4/&amp;lt;/&amp;lt;/&amp;lt;/&amp;lt;@http://localhost:8000/:30:33
@http://localhost:8000/:7748:11
```</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T02:52:46.328900</ts>
    <user>Isaias</user>
    <text>^ I get this error only after I refresh my app a couple times</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T02:53:56.329300</ts>
    <user>Isaias</user>
    <text>and its a runtime error :confused:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T02:54:33.329800</ts>
    <user>Isaias</user>
    <text>has anyone else had problems with extensive random use?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T02:57:10.330700</ts>
    <user>Huong</user>
    <text>That stack trace looks as if it’s hitting an infinite loop in `easyDecision` - might be worth trying to reproduce it as a fuzz test!</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:01:13.330900</ts>
    <user>Isaias</user>
    <text>huh, thanks!</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:23:49.332200</ts>
    <user>Isaias</user>
    <text>i found it, i was using the random monad wrong mapping 2 generated structures instead of one structure, with 2 values</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:24:12.332700</ts>
    <user>Isaias</user>
    <text>it lead to an edge case i was too hasty to deal with rn</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:25:36.333300</ts>
    <user>Isaias</user>
    <text>i have a similar problem for completely unrelated reasons now</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:25:44.333600</ts>
    <user>Isaias</user>
    <text>```
Error: Script terminated by timeout at:
_Utils_update@http://localhost:8000/:316:2
author$project$ShapePoker$play&amp;lt;/makeDecision&amp;lt;@http://localhost:8000/:6023:13
A2@http://localhost:8000/:66:24
playGame/&amp;lt;@http://localhost:8000/:6125:7
elm$random$Random$andThen&amp;lt;/&amp;lt;@http://localhost:8000/:5760:15
elm$random$Random$andThen&amp;lt;/&amp;lt;@http://localhost:8000/:5762:12
elm$random$Random$andThen&amp;lt;/&amp;lt;@http://localhost:8000/:5762:12
elm$random$Random$map&amp;lt;/&amp;lt;@http://localhost:8000/:5776:15
elm$random$Random$map&amp;lt;/&amp;lt;@http://localhost:8000/:5776:15
elm$random$Random$map&amp;lt;/&amp;lt;@http://localhost:8000/:5776:15
elm$random$Random$map&amp;lt;/&amp;lt;@http://localhost:8000/:5776:15
elm$random$Random$step&amp;lt;@http://localhost:8000/:6531:10
A2@http://localhost:8000/:66:24
elm$random$Random$onEffects&amp;lt;@http://localhost:8000/:6540:14
A3@http://localhost:8000/:69:24
loop/&amp;lt;@http://localhost:8000/:2071:7
_Scheduler_step@http://localhost:8000/:1078:13
_Scheduler_enqueue@http://localhost:8000/:1040:3
_Scheduler_rawSend@http://localhost:8000/:986:2
_Platform_dispatchEffects@http://localhost:8000/:2150:3
_Platform_initialize@http://localhost:8000/:1982:2
_Browser_document&amp;lt;@http://localhost:8000/:4012:9
F4/&amp;lt;/&amp;lt;/&amp;lt;/&amp;lt;@http://localhost:8000/:30:33
@http://localhost:8000/:7746:11
```</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:26:08.334200</ts>
    <user>Isaias</user>
    <text>so im continually updating the model with random values, is that a no-no?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:26:56.334700</ts>
    <user>Isaias</user>
    <text>this is for an honors project studying betting btw</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:31:37.336400</ts>
    <user>Huong</user>
    <text>That still looks like a similar issue to me - there’s nothing special about random, and it is, in fact, a rather straightforward module (except for all the math) :smile: My guess would still be an edge-case that’s resulting in some sort of loop within `makeDecision` - is it tail recursive, by any chance?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:32:42.337200</ts>
    <user>Isaias</user>
    <text>no, but its called by a function thats randomly recursive, so it could be that my check for stopping isnt quite right,</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:33:08.337800</ts>
    <user>Isaias</user>
    <text>right now im trying to monitor the number of recursions but my browser crashed xD</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:36:32.338400</ts>
    <user>Huong</user>
    <text>ahh, yeah, could be that `playGame` is randomly (tail) recursive, indeed!</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:37:37.339500</ts>
    <user>Isaias</user>
    <text>ok, so it doesnt recurse any more than 6 times</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:37:45.339800</ts>
    <user>Isaias</user>
    <text>just empirically determined</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:38:37.340100</ts>
    <user>Isaias</user>
    <text>so its not that</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:39:42.341000</ts>
    <user>Isaias</user>
    <text>so the structure is i have a generator emit a msg, which in update emits a generator of that same message</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:40:04.341600</ts>
    <user>Isaias</user>
    <text>its constantly updating itself with newly generated random values</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:40:24.342200</ts>
    <user>Isaias</user>
    <text>can I not have update msg itself all the time?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:40:34.342500</ts>
    <user>Huong</user>
    <text>oh, so it never actually _stops_ or pauses?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:41:13.343800</ts>
    <user>Isaias</user>
    <text>nope, its just supposed to continually compute data, and ideally the renderer will give me analytics about its computational process</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:41:28.344300</ts>
    <user>Isaias</user>
    <text>if the dom doesn't stall</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:41:30.344400</ts>
    <user>Huong</user>
    <text>YEah, it’s not getting a chance to render :sweat_smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:41:47.345200</ts>
    <user>Isaias</user>
    <text>should I intersperse it wiht time breaks?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:42:52.346500</ts>
    <user>Huong</user>
    <text>`Random` acts as a synchronous effect, basically - it gets the request to generate something random, that’s sent to `update`, and `update` request more random data. There are likely calls happening to schedule a render, but since that function just keeps going, it probably doesn’t get a chance to do so</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:43:17.346900</ts>
    <user>Huong</user>
    <text>So yeah, interspersing some `Process.sleep`’s every now and then would definitely help!</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:43:52.347800</ts>
    <user>Isaias</user>
    <text>oh its synchronous</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:44:39.348900</ts>
    <user>Isaias</user>
    <text>how many fps should i give it</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:44:49.349200</ts>
    <user>Huong</user>
    <text>Alternatively, you could decide to manage the `seed` yourself, and use that `Cmd`-less API of `Random` by using `step`, and subscribe to `animationFrame` to sync everything up and do up to 60 “loops”/second. So whenever a `tick` comes in, generate your data, update the seed in the model, and return your `( updatedModel, Cmd.none )`</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:45:30.349500</ts>
    <user>Isaias</user>
    <text>and i could use a time seed</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:45:55.350500</ts>
    <user>Isaias</user>
    <text>I dunno, I want really random randomness for the sake of accuracy in the study</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:45:57.350600</ts>
    <user>Huong</user>
    <text>Yeah, or give yourself some initial random seed through `init` if you’re using `element` or `application`</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:46:18.351600</ts>
    <user>Isaias</user>
    <text>like if it doesn't behave really randomly than how applicable would my results be?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:46:22.351800</ts>
    <user>Huong</user>
    <text>`Random.generate` uses `step`, too, and uses the current timestamp as the initial seed</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:46:28.352000</ts>
    <user>Huong</user>
    <text>so you’re not losing anything</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:46:33.352200</ts>
    <user>Isaias</user>
    <text>hm...</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:47:22.353100</ts>
    <user>Isaias</user>
    <text>If i switch to a cmd less api i have to rewrite a lot of code too, its like all monads</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:47:26.353300</ts>
    <user>Huong</user>
    <text>as far as randomness of `Random` goes, it uses an implementation of PCG which is prettty good</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:47:39.353900</ts>
    <user>Huong</user>
    <text>I don’t think you’ll need to change that much</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:47:49.354400</ts>
    <user>Isaias</user>
    <text>Isn;t there like a basic monad of no effect?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:47:53.354700</ts>
    <user>Huong</user>
    <text>only the `Random.generate` call, really - the generators can stay</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:49:19.356100</ts>
    <user>Huong</user>
    <text>so rather than ```( model, Random.generate yourGenerator )``` you’d have ```let (generatedVal, seed) = Random.step yourGenerator model.seed in ( { model | val  = generatedVal, seed = seed }, Cmd.none )```</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:49:43.356400</ts>
    <user>Isaias</user>
    <text>oh right i can still use generators</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:50:53.357100</ts>
    <user>Isaias</user>
    <text>yeah that implementation is already abstracted in my code</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:53:18.358000</ts>
    <user>Isaias</user>
    <text>can I have an animation subscription with both the time AND the delta? just curious</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:57:30.358500</ts>
    <user>Huong</user>
    <text>I don’t believe so, although getting the delta is easy if you have the time and store the time of the previous go :smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:58:37.359200</ts>
    <user>Isaias</user>
    <text>&amp;lt;beginner question&amp;gt;when should I use Browser.element vs Browser.document&amp;lt;/beginner question&amp;gt;</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:59:14.359800</ts>
    <user>Isaias</user>
    <text>yeah that seems like the basic way to do that</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T03:59:43.360600</ts>
    <user>Isaias</user>
    <text>Cant you subscribe to both and have them happen at essentially the same time?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:00:18.361400</ts>
    <user>Huong</user>
    <text>`document` means you take over the entire DOM: it will bind to the `body` tag and replace all of its contents, and allows you to control the page title</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:01:20.362800</ts>
    <user>Isaias</user>
    <text>oh right</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:02:24.364500</ts>
    <user>Isaias</user>
    <text>Does elm distinguish between animation frame and eg physics update frames</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:02:39.365100</ts>
    <user>Isaias</user>
    <text>I think the latter is essentially animation frame delta</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:02:48.365300</ts>
    <user>Huong</user>
    <text>So the levels of control (and complexity) are something like this:
- `main : Html msg` -&amp;gt; allows rendering a static piece of HTML in a single element
- `Browser.sandbox` -&amp;gt; a basic program without effects (no cmds, no subs)
- `Browser.element` -&amp;gt; basic program with effects
- `Browser.document` -&amp;gt; basic program with effects, represents the entire document including title
- `Browser.application` -&amp;gt; the above, + navigation and url control</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:03:43.366000</ts>
    <user>Isaias</user>
    <text>Why dont they just have like a `Browser.static` instead of changing what main can return</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:05:23.366900</ts>
    <user>Huong</user>
    <text>gradual learning - no need to know about the `Browser` package for the simplest of programs: at that point you’re just writing HTML and some functions to generate that HTML perhaps</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:05:52.367700</ts>
    <user>Isaias</user>
    <text>Can elm run headlessly?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:05:55.367800</ts>
    <user>Huong</user>
    <text>so you could start someone of with some exploration in the REPL, then graduate to `main : Html msg` to see something in the browser, then add `Browser` and `sandbox`, etc</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:06:10.368300</ts>
    <user>Huong</user>
    <text>yeah, there is `Platform.program` which is like `element` but without `view`</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:06:37.368900</ts>
    <user>Isaias</user>
    <text>I hugely appreciate how much attention elm gives to the developer experience, pacing, and the like</text>
  </message>
  <message conversation_id="1423">
    <ts>2019-05-02T04:08:50.370800</ts>
    <user>Isaias</user>
    <text>in this case though, I'm not sure how much of a learning curve it would be to have a beginner see `main = Browser.static (text "hello world")` versus `main = text "hello world"`</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:09:16.371500</ts>
    <user>Isaias</user>
    <text>they already see boilerplate like in the module declaration</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:10:22.372800</ts>
    <user>Huong</user>
    <text>Sure, it’s a small extra step! It’s also a historical thing, too - `program` used to live in `Html`, so `Html.static` would be weird. As a side-advantage, imagine a future world where server-side rendering in Elm becomes a thing - not using the `Browser` package there also makes sense!</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:12:26.374500</ts>
    <user>Isaias</user>
    <text>yeah it definitely hints at the opportunity to move across other domains, that is why im sort of nitpicking this since i see that it may better organize what main can return to put all frontend output in `Browser`</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:12:59.374900</ts>
    <user>Isaias</user>
    <text>but for now, not really a problem</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:15:08.376900</ts>
    <user>Huong</user>
    <text>Yeah, we’ll see how things pan out :slightly_smiling_face: I think the option of using `elm/html` without involving `Browser` etc is pretty sweet, though, I’ve found it a pretty nice path when dealing with students. It wouldn’t be much harder to add `elm/browser` in the mix, but it is another tiny extra distraction :shrug:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:18:00.377200</ts>
    <user>Isaias</user>
    <text>you deal with elm students</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:19:13.378400</ts>
    <user>Isaias</user>
    <text>what exactly is your role in the elm community? youre on a lot</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:19:50.379100</ts>
    <user>Huong</user>
    <text>Oh, you know, I just hang out on Slack really :sweat_smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:19:54.379300</ts>
    <user>Timika</user>
    <text>He is the all-knowing kind oracle :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:20:13.379700</ts>
    <user>Isaias</user>
    <text>&lt;@Timika&gt; that's actually not that far off from my experience</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:20:24.380200</ts>
    <user>Isaias</user>
    <text>&lt;@Huong&gt; have you made modules</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:20:31.380400</ts>
    <user>Tarsha</user>
    <text>Yes every update to a model is a state transition. Reading it back I worded this question rather poorly. Primarily I'm looking for a nice clean way to represent pages without relying on knowledge of the overarching structure, which obscures intent with what I consider to be spaghetti code (or perhaps I should say spaghetti dependencies, but the effect on a human's ability to reason about code is similar)</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:20:38.380700</ts>
    <user>Timika</user>
    <text>Oh yeah, I did mean this exactly as I wrote it. :heart:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:22:03.380800</ts>
    <user>Huong</user>
    <text>Sure! &lt;http://package.elm-lang.org|package.elm-lang.org&gt; has a few, and there’s a few 0.18 ones I didn’t upgrade because they weren’t really used by anyone. Also a bunch of tooling (`elm-xref`, `elm-coverage`, `elm-json`) which aren’t exactly modules, but, you know, it’s code either way :smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:23:40.381100</ts>
    <user>Isaias</user>
    <text>tooling--do you mean in the compiler?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:24:20.381300</ts>
    <user>Isaias</user>
    <text>oh are you zwilias there &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:25:13.381600</ts>
    <user>Huong</user>
    <text>no, external things you can download and use. `elm-xref` finds unused code, `elm-coverage` measures code-coverage for `elm-test` (which I’m also involved with), `elm-json` is the newest in the family and allows dealing with `elm.json` files (i.e. installing/upgrading/removing (test)dependencies, etc)</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:25:31.381800</ts>
    <user>Syble</user>
    <text>alm-coverage rocks (just missing the --watch flag though :p)</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:25:55.382000</ts>
    <user>Isaias</user>
    <text>oh awesome</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:26:13.382300</ts>
    <user>Huong</user>
    <text>&lt;@Syble&gt; oh my, that’s a good one! Feel free to make an issue :smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:27:31.382500</ts>
    <user>Isaias</user>
    <text>&lt;@Huong&gt; why are you so interested in elm? what makes it worthy of your time?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:28:32.383200</ts>
    <user>Isaias</user>
    <text>question: why is there still unzip if there isnt zip? and: why isnt there zip anymore?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:28:49.383300</ts>
    <user>Huong</user>
    <text>I like the community and the language, so I got a job which involves Elm. Packages and tools are mostly to scratch my own itches, or because I notice a recurring problem on Slack and get tired of dealing with it :smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:29:12.383900</ts>
    <user>Isaias</user>
    <text>whats your job</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:30:41.385700</ts>
    <user>Huong</user>
    <text>`unzip` is a little harder to write and for whatever reason (in my experience at least), used slightly more often than `zip`. Writing `List.map2 Tuple.pair` is pretty simple! That said, I don’t know if `unzip` should really be in core :shrug:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:30:52.386000</ts>
    <user>Isaias</user>
    <text>is it because its hard to guarantee length?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:31:09.386100</ts>
    <user>Huong</user>
    <text>I’m a developer, first and foremost</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:31:36.386600</ts>
    <user>Isaias</user>
    <text>Isnt `(,)` still a function?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:32:00.386700</ts>
    <user>Isaias</user>
    <text>a frontend dev</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:32:59.387200</ts>
    <user>Huong</user>
    <text>Nope, the tuple constructors were removed in 0.19</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:33:27.387400</ts>
    <user>Huong</user>
    <text>Eh, backend, too - whatever is required</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:33:31.387700</ts>
    <user>Isaias</user>
    <text>Will tuples be removed?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:34:02.387800</ts>
    <user>Isaias</user>
    <text>where do you work? what do you think of it?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:35:12.388000</ts>
    <user>Huong</user>
    <text>I’m actually at work so I don’t really have bandwidth for general small talk, sorry! We can chat about this later, if you’d like :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:35:26.388400</ts>
    <user>Isaias</user>
    <text>sure</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:35:58.389100</ts>
    <user>Huong</user>
    <text>It’s not really a plan right now, but who knows what the future holds :smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:36:09.389300</ts>
    <user>Isaias</user>
    <text>id be fine with it</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:36:52.390100</ts>
    <user>Isaias</user>
    <text>If they were replaced with `Pair` or maybe some slightly mroe convenient syntax</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:37:41.390500</ts>
    <user>Syble</user>
    <text>what's your issue with tuple syntax ?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:38:38.391300</ts>
    <user>Isaias</user>
    <text>`Pair a b` is easier to manage than `(a, b)` on a textual level</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:39:21.392500</ts>
    <user>Isaias</user>
    <text>also easier to read because you dont have to parse that the parentheses aren't a subexpression</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:40:06.393200</ts>
    <user>Nana</user>
    <text>&lt;@Isaias&gt; actually I found this Tuple replacement package :smile:
&lt;https://package.elm-lang.org/packages/bburdette/toop/latest/&gt;</text>
  </message>
  <message conversation_id="1424">
    <ts>2019-05-02T04:40:48.393400</ts>
    <user>Nana</user>
    <text>kind of sounds like what you want</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:41:43.393700</ts>
    <user>Isaias</user>
    <text>perhaps</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:42:00.394100</ts>
    <user>Isaias</user>
    <text>thanks for the tip</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:42:29.394700</ts>
    <user>Syble</user>
    <text>If you reduces tuples to the usage of pairs, it might be sound, but I like to envision the third dimension :monkey_face:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:43:00.395400</ts>
    <user>Syble</user>
    <text>I honestly don't know if Pair 1 2 is clearer than (1, 2)</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:43:01.395500</ts>
    <user>Isaias</user>
    <text>tuples dont support the fourth dimension atm</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:43:22.396000</ts>
    <user>Isaias</user>
    <text>but you can do `(x, (y, z))`</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:43:48.396400</ts>
    <user>Isaias</user>
    <text>And also just `Triplet x y z`</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:44:02.396600</ts>
    <user>Isaias</user>
    <text>Idk either</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:44:45.396900</ts>
    <user>Isaias</user>
    <text>Question: does elm have tail call elim?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:45:23.397200</ts>
    <user>Timika</user>
    <text>Yes :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:45:56.397400</ts>
    <user>Isaias</user>
    <text>:tada:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:47:04.397500</ts>
    <user>Isaias</user>
    <text>None</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:49:28.397800</ts>
    <user>Isaias</user>
    <text>so I have a problem</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:54:37.398700</ts>
    <user>Isaias</user>
    <text>So I want to run a bunch of state-dependent computations, but I dont want the dom to constantly rerender because it causes it to crash</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:56:01.399900</ts>
    <user>Isaias</user>
    <text>actually... i think i have an idea.. ill repport back how it works</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:58:58.400200</ts>
    <user>Isaias</user>
    <text>ok it didnt work</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T04:59:54.401300</ts>
    <user>Isaias</user>
    <text>yeah so essenntially i want a continuously updating model but a `view` function thats only effectively called on animation frame</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:00:46.402200</ts>
    <user>Isaias</user>
    <text>i dont really know enough about when elm decides to call view to optimize that</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:01:27.403300</ts>
    <user>Isaias</user>
    <text>i dont want to slow my computations to animation frame if i dont have to</text>
  </message>
  <message conversation_id="1425">
    <ts>2019-05-02T05:01:38.403400</ts>
    <user>Jin</user>
    <text>`view` is most of the times called with the next animation frame.</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:02:09.404400</ts>
    <user>Isaias</user>
    <text>hm.. then maybe its not crashing because of too many dom updates</text>
  </message>
  <message conversation_id="1425">
    <ts>2019-05-02T05:02:22.404800</ts>
    <user>Jin</user>
    <text>A sync render is e.g. done when you handle text inputs.</text>
  </message>
  <message conversation_id="1425">
    <ts>2019-05-02T05:02:49.405200</ts>
    <user>Timika</user>
    <text>Maybe you can batch your calculations in one function call? So the model just changes once.</text>
  </message>
  <message conversation_id="1425">
    <ts>2019-05-02T05:03:26.405900</ts>
    <user>Jin</user>
    <text>Long running calculations will block your view.</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:04:17.406800</ts>
    <user>Isaias</user>
    <text>so like i have my model do a random calulation and then emit the next dependent calculation</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:05:04.407700</ts>
    <user>Isaias</user>
    <text>so in theory it can essentially reduce to a monad op however i know that in the end the state will still require changing continuously</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:05:26.408200</ts>
    <user>Isaias</user>
    <text>so batching more calculations just means more is asked to be done of the elm runtime at once</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:06:52.408800</ts>
    <user>Jin</user>
    <text>You could do some continuation style as explained here &lt;https://discourse.elm-lang.org/t/asynchronous-parsing/3412/3&gt;</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:08:20.409700</ts>
    <user>Carter</user>
    <text>I wonder why adoption of elm isnt bigger. Not that i no any figures but it seems the industry is mainly into typescript and React?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:08:52.410500</ts>
    <user>Carter</user>
    <text>(from my POV there should be elm world domination) =D</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:12:52.411500</ts>
    <user>Isaias</user>
    <text>dunno &lt;@Carter&gt; but i think the world as a whole does move toward improvement but is strongly biased with familiarity</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:13:30.412200</ts>
    <user>Isaias</user>
    <text>Its kind of like live rendering an infinitely long file that you continuously parse</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:15:42.413000</ts>
    <user>Syble</user>
    <text>from my point of view, it's mainly WP with jQuery, so imagine how Elm, a FP, would look like to those :smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:26:39.413600</ts>
    <user>Isaias</user>
    <text>is jquery still used for new projects?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:28:40.413900</ts>
    <user>Isaias</user>
    <text>is it dying</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:32:02.415600</ts>
    <user>Liza</user>
    <text>if it is done by some backend dev.. or if dev have not enough exp..
as main function was `$` (sizle) that now is replaced with `document.querySelector`</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:32:05.415700</ts>
    <user>Syble</user>
    <text>honestly I don't know</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:46:41.416800</ts>
    <user>Isaias</user>
    <text>is it possible to write a `mapN` with lists or does the type system not allow it</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:51:05.416900</ts>
    <user>Syble</user>
    <text>Well, the problem is the target function declaration I guess. AFAIK, there is no variadic functions in Elm</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:52:27.417100</ts>
    <user>Isaias</user>
    <text>so a type variable cant stand for a function type?</text>
  </message>
  <message conversation_id="1426">
    <ts>2019-05-02T05:58:53.417300</ts>
    <user>Isaias</user>
    <text>cant recursive union types work like variadic functions</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T05:59:50.417500</ts>
    <user>Lashawna</user>
    <text>It is possible to write a variadic `map`, but, since it has to be type-safe, all lists should have the same type</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:00:02.417700</ts>
    <user>Huong</user>
    <text>How would you imagine a signature for such a function would look? :thinking_face:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:00:41.417900</ts>
    <user>Lashawna</user>
    <text>```
mapN:
    (List a -&amp;gt; result)
    -&amp;gt; List (List a)
    -&amp;gt; List result
```</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:01:07.418300</ts>
    <user>Huong</user>
    <text>Yeah, I meant &lt;@Isaias&gt; :smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:02:01.418500</ts>
    <user>Huong</user>
    <text>&lt;@Lashawna&gt; that would be `List.map (List.map f)` right? Just so I have the right mental model in mind</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:15:21.418700</ts>
    <user>Nana</user>
    <text>seems like that `mapN` function would pretty much just be `List.foldl`</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:16:21.418900</ts>
    <user>Huong</user>
    <text>oh, even just `List.map` :smile:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:17:23.419100</ts>
    <user>Huong</user>
    <text>```
(a      -&amp;gt; b) -&amp;gt; List a        -&amp;gt; List b
(List a -&amp;gt; b) -&amp;gt; List (List a) -&amp;gt; List b```</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:25:40.419300</ts>
    <user>Huong</user>
    <text>anyway, long story short: if I hear `mapN` in this context, I imagine a function which takes a list of lists, and a function that has the same amount or parameters with corresponding types as the list of lists. It’s definitely not trivial to express that in Elm types, and I have a hunch it might not be possible at all. If I have some free time later, I might give it a go, but whatever I come up with, will be painful to use in practice, I can promise that much :smile:
(vaguely related: types for a binary tree structure that enforce the result is a balanced binary tree that maps to an AVL tree - &lt;https://gist.github.com/zwilias/ccd72ee7925b27e8c41176ebe7d33564&gt; - because types are magic)</text>
  </message>
  <message conversation_id="1427">
    <ts>2019-05-02T06:30:50.419500</ts>
    <user>Isaias</user>
    <text>its very cool</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:32:19.419700</ts>
    <user>Isaias</user>
    <text>i imagine its related because it has to do with recursive types, I was thinking you might be able to use something like a `Succ` system to determine how many more times a function can be called</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:33:00.419900</ts>
    <user>Isaias</user>
    <text>I was thinking about counting with types the other day, and looked for it, but couldn't remember where i saw it before. This is it!</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:33:26.420100</ts>
    <user>Huong</user>
    <text>peano numbers</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:33:34.420300</ts>
    <user>Isaias</user>
    <text>yeah thats right</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:33:37.420500</ts>
    <user>Huong</user>
    <text>they’re cool stuff, but not super useful in Elm</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:33:48.420700</ts>
    <user>Isaias</user>
    <text>I think rtfeldman showed me something like it that he wrote</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:35:16.420900</ts>
    <user>Huong</user>
    <text>Yeah, he did a `vector` module with them at some point, I think</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:36:16.421100</ts>
    <user>Isaias</user>
    <text>"loop/structural invariants that can be enforced at compile time" might make a fun senior thesis</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:40:08.421600</ts>
    <user>Isaias</user>
    <text>can i chain cmds? why is there no Cmd.andThen?</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:42:33.422700</ts>
    <user>Huong</user>
    <text>A command is not guaranteed to even lead to a result (ports and navigation are good examples), so chaining them with `andThen` doesn’t really make sense</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:42:44.422900</ts>
    <user>Huong</user>
    <text>That’s what tasks are for :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:45:15.423700</ts>
    <user>Isaias</user>
    <text>right... i think i need to better articulate what i want</text>
  </message>
  <message conversation_id="1422">
    <ts>2019-05-02T06:50:15.423800</ts>
    <user>Lashawna</user>
    <text>Reminded me of this weird job interview question :slightly_smiling_face:
&lt;https://www.reddit.com/r/javascript/comments/9vxdkx/was_asked_this_js_interview_question_is_this_even/&gt;</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T06:51:18.424100</ts>
    <user>Nana</user>
    <text>In JS anything is possible though :blush:</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T06:51:59.424300</ts>
    <user>Nana</user>
    <text>For better or worse</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T06:54:46.424500</ts>
    <user>Lashawna</user>
    <text>Haha, I’m not sure about the “for better” part :smile:</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T06:56:47.426400</ts>
    <user>Vilma</user>
    <text>say you’ve got a large list of `ul` and `li` and I want to be able to click one of them and, for example, expand it or something. I understand I must use an event from `Html.Events` like `onClick`, but upon sending the message how do I know which one of `li` items was clicked?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T06:58:34.428200</ts>
    <user>Earlean</user>
    <text>&lt;@Vilma&gt; you include some kind of id value in the produced msg to identify which item was clicked</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T06:59:01.428700</ts>
    <user>Isaias</user>
    <text>pretty sure its possible</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T06:59:08.429000</ts>
    <user>Isaias</user>
    <text>didnt look at solution</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T06:59:31.429300</ts>
    <user>Isaias</user>
    <text>speaking of annything is possible: javascript is a minlang</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T06:59:48.429600</ts>
    <user>Isaias</user>
    <text>&lt;http://www.jsfuck.com/&gt;</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:01:23.430900</ts>
    <user>Vilma</user>
    <text>I thought as much, but in my case I’m not really sure how I can accomplish this :thinking_face:</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:01:47.431200</ts>
    <user>Vilma</user>
    <text>I guess a CSS id works?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:02:40.431500</ts>
    <user>Roberta</user>
    <text>Are your `li`s generated from a list?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:02:55.431600</ts>
    <user>Isaias</user>
    <text>im curious how can `addSubtract(1)(2)(3)` return `0` but `addSubtract(1)(2)(3)(4)(5)(6)`=`0(4)(5)(6)` return a callback after the `(3)` call</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:05:29.431800</ts>
    <user>Nana</user>
    <text>hmm yeah good point, didn't think about the currying :thinking_face:</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:06:58.432000</ts>
    <user>Isaias</user>
    <text>doesnt mean its not possible if maybe javascript implicitly casts some value between contexts</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:07:14.432300</ts>
    <user>Vilma</user>
    <text>yes</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:07:23.432600</ts>
    <user>Vilma</user>
    <text>I’m thinking about using `List.indexedMap`</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:08:24.432700</ts>
    <user>Nana</user>
    <text>one thing you could do is return a function with `.valueOf()` set to the answer</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:09:18.432900</ts>
    <user>Isaias</user>
    <text>thats a weird method...</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:24:10.434600</ts>
    <user>Isaias</user>
    <text>elm architecture question: how do you decide whether something is "large enough" for a nested elm architecture? because components are abundant in &lt;https://github.com/rtfeldman/elm-spa-example/blob/master/src/Main.elm&gt;</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:25:28.435900</ts>
    <user>Isaias</user>
    <text>its not anything that could be its own app, small stuff belongs lifted up. But its not nothing</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:26:21.436400</ts>
    <user>Isaias</user>
    <text>like how do _you_ in particular decide</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:35:00.436500</ts>
    <user>Nana</user>
    <text>best I can think of :smile: it would basically behave as both a number and a function
the magic of js!</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:45:00.440000</ts>
    <user>Isaias</user>
    <text>my best guess is that the idea is that hierarchially sound applications should be written top-down, and "components" are an excuse to write bottom-up, so unless you take state from the top and move it down, you aren't writing in best practice</text>
  </message>
  <message conversation_id="1429">
    <ts>2019-05-02T07:45:23.440100</ts>
    <user>Bud</user>
    <text>If you are using the SPA example, then I think for me its based around what I want to display to a user at a particular time… i.e. what page are they actually on?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:46:09.440300</ts>
    <user>Bud</user>
    <text>Which is about as “top down” as you can get I believe.</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:47:28.440600</ts>
    <user>Isaias</user>
    <text>sure, except `Article.Feed` is more like a reusable view than a page</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:48:03.440800</ts>
    <user>Bud</user>
    <text>Totally. Seems like a thing you would want in multiple pages</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:48:33.441000</ts>
    <user>Nana</user>
    <text>you only need "components" when you want something that manages private state</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:49:08.441200</ts>
    <user>Isaias</user>
    <text>&lt;@Nana&gt; i mean, yeah. but how do you know when local state is better is my question</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:52:09.441500</ts>
    <user>Nana</user>
    <text>I think what Feldman recommends is to avoid it when you can, only use it when you have to</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:52:30.441700</ts>
    <user>Nana</user>
    <text>for example custom select boxes, date pickers, and pages in an SPA</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:53:07.441900</ts>
    <user>Isaias</user>
    <text>why are those "have to" cases, arguable you can keep all that state in one place</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:55:29.442100</ts>
    <user>Nana</user>
    <text>well, you could have your pages state be global, if you don't want it to reset when switching pages</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T07:56:40.442300</ts>
    <user>Nana</user>
    <text>but select boxes and date pickers need a lot of logic for updating their state, so you want to have reusable update functions for them</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:08:41.442500</ts>
    <user>Isaias</user>
    <text>evan would argue otherwise in the life of a file.</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:09:47.442700</ts>
    <user>Isaias</user>
    <text>tbh select boxes are particularly something i would write as a controlled component in react</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:16:54.443100</ts>
    <user>Nana</user>
    <text>you mean stateless?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:19:15.443300</ts>
    <user>Isaias</user>
    <text>yup thats what they call those in react land</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:20:16.444100</ts>
    <user>Isaias</user>
    <text>Tasks are essentially cmds but with the option of failing, right?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:20:39.444600</ts>
    <user>Isaias</user>
    <text>How can `Time.now` fail?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:21:03.444700</ts>
    <user>Nana</user>
    <text>my select boxes for example have this private state:
```
type alias Model =
    { open : Bool - wether the dropdown is open
    , filter : String -- filter results by a string
    , index : Int -- for navigating with arrow keys
    }
```</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:21:42.444900</ts>
    <user>Nana</user>
    <text>it'd be annoying if I had to rewrite the logic for that every time I wanted a select box</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:22:50.445200</ts>
    <user>Nana</user>
    <text>that'd be pretty bad really</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:22:52.445400</ts>
    <user>Roberta</user>
    <text>yeah that was going to be my next reply :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:24:07.445600</ts>
    <user>Kenya</user>
    <text>`Time.now` is guaranteed not to fail because it is polymorphic in its error type</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:25:08.445800</ts>
    <user>Isaias</user>
    <text>so i ask because im curious why its implemented as a task rather than a command</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:25:10.446000</ts>
    <user>Kenya</user>
    <text>Tasks also return a result when they complete while Cmds do not</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:25:33.446600</ts>
    <user>Danika</user>
    <text>Tasks are side effects, commands aren’t </text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:25:45.446800</ts>
    <user>Kenya</user>
    <text>Because it returns a `Time.Posix` and Cmds do not return anything</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:25:52.447000</ts>
    <user>Isaias</user>
    <text>? thats not right &lt;@Danika&gt;</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:26:25.447600</ts>
    <user>Danika</user>
    <text>What commands produce side effects </text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:26:47.447800</ts>
    <user>Isaias</user>
    <text>literally every command</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:28:03.448200</ts>
    <user>Danika</user>
    <text>:thinking_face: why do you think that </text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:29:01.448400</ts>
    <user>Isaias</user>
    <text>why not implement `now` as a function that takes a (Posix -&amp;gt; msg) cand returns a cmd msg that tells update the time</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:29:16.448600</ts>
    <user>Isaias</user>
    <text>&lt;@Danika&gt; hb Random</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:29:44.449100</ts>
    <user>Nana</user>
    <text>isn't it more the opposite? :stuck_out_tongue:
Tasks don't produce any effects by themselves, you always have to turn them into Commands and pass them to the runtime</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:29:47.449300</ts>
    <user>Kenya</user>
    <text>&lt;@Isaias&gt; Oops! Cmds /do/ return something. So I don't know why `Time.now` is a `Task` rather than a `Cmd`.</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:30:59.450200</ts>
    <user>Kenya</user>
    <text>Oops. Cmds do return something. So I think your initial statement is right without additions.</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:32:11.450900</ts>
    <user>Danika</user>
    <text>Yeah im on another planet ignore me :joy:</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:32:30.451600</ts>
    <user>Danika</user>
    <text>Mentioning random is a good point though, why is that _not_ a task if Time.now is </text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:33:02.451800</ts>
    <user>Isaias</user>
    <text>well it makes sense bc random cant fail</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:34:57.452100</ts>
    <user>Nana</user>
    <text>Tasks can be chained, Commands can't, that's the real difference I think</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:35:37.452300</ts>
    <user>Earlean</user>
    <text>Task and be sequenced with other Tasks using `Task.andThen`, that's why `Time.now` gives you a Task</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:36:48.452600</ts>
    <user>Isaias</user>
    <text>you could have view function `viewSB open view index`</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:47:07.452800</ts>
    <user>Isaias</user>
    <text>why isnt random a task? why cant you sequence cmds?</text>
  </message>
  <message conversation_id="1430">
    <ts>2019-05-02T08:50:47.455000</ts>
    <user>Epifania</user>
    <text>Hi all I'm experiencing a strange problem in elm 0.19; I'm recompiling a port module which used to work in 0.18; I also checked the documentation to see if something changed but I can't see my error. Here is a stripped version
```
port module FileUpload exposing (FilePortData, fileContentRead2, fileSelected, pippo)

type alias FilePortData =
    { contents : String
    , filename : String
    , id : String
    }

port pippo : (Int -&amp;gt; msg) -&amp;gt; Sub msg

port fileContentRead2 : (FilePortData -&amp;gt; msg) -&amp;gt; Sub msg

port fileSelected : String -&amp;gt; Cmd msg
 ```
If use the console interactively I can see my app.ports has one port (the outgoing one with a Cmd msg) while the subscription ones are missing
Any idea?</text>
  </message>
  <message conversation_id="1431">
    <ts>2019-05-02T08:50:54.455100</ts>
    <user>Nana</user>
    <text>I think that's part of the "Actor Model" which Elm is based on?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:51:32.455300</ts>
    <user>Isaias</user>
    <text>can you explain that further?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:52:07.455500</ts>
    <user>Nana</user>
    <text>don't know too much about it, but you can just google it</text>
  </message>
  <message conversation_id="1431">
    <ts>2019-05-02T08:52:12.455700</ts>
    <user>Jae</user>
    <text>What is the error message you're getting?</text>
  </message>
  <message conversation_id="1428">
    <ts>2019-05-02T08:52:50.456000</ts>
    <user>Epifania</user>
    <text>I can't find any of the outgoing ports from the javascript side</text>
  </message>
  <message conversation_id="1431">
    <ts>2019-05-02T08:52:59.456200</ts>
    <user>Jae</user>
    <text>Ports get removed if they aren't referenced somewhere in your Elm program</text>
  </message>
  <message conversation_id="1431">
    <ts>2019-05-02T08:53:22.456400</ts>
    <user>Epifania</user>
    <text>at least one should be...</text>
  </message>
  <message conversation_id="1431">
    <ts>2019-05-02T08:53:40.456600</ts>
    <user>Epifania</user>
    <text>the fileContentRead2 is referenced</text>
  </message>
  <message conversation_id="1431">
    <ts>2019-05-02T08:58:43.456800</ts>
    <user>Epifania</user>
    <text>I tried to simplify the port signature in case the type alias was creating some issue but the outgoing port is still missing</text>
  </message>
  <message conversation_id="1430">
    <ts>2019-05-02T09:06:05.457000</ts>
    <user>Earlean</user>
    <text>Elm 0.19 does function level dead code elimination, any functions that aren't used by something that is used are removed. Check that you're actually using that port from the `subscriptions` function in your `Main.main`</text>
  </message>
  <message conversation_id="1431">
    <ts>2019-05-02T09:06:38.457200</ts>
    <user>Jae</user>
    <text>It might be that the thing referencing fileContentRead2 itself isn't referenced anywhere</text>
  </message>
  <message conversation_id="1430">
    <ts>2019-05-02T09:11:00.457500</ts>
    <user>Earlean</user>
    <text>You can't sequence Cmds because they're not required to produce a result</text>
  </message>
  <message conversation_id="1430">
    <ts>2019-05-02T09:11:22.457700</ts>
    <user>Earlean</user>
    <text>Tasks are required to produce some result</text>
  </message>
  <message conversation_id="1430">
    <ts>2019-05-02T09:16:17.457900</ts>
    <user>Epifania</user>
    <text>You folks are right... the point is I was calling a port from the subscription... of a sub-component whose subscription function was not called from the main app</text>
  </message>
  <message conversation_id="1430">
    <ts>2019-05-02T09:17:02.458400</ts>
    <user>Epifania</user>
    <text>thank you all</text>
  </message>
  <message conversation_id="1432">
    <ts>2019-05-02T10:10:55.458700</ts>
    <user>Huong</user>
    <text>Not quite - commands don’t guarantee a result</text>
  </message>
  <message conversation_id="1432">
    <ts>2019-05-02T10:13:14.458900</ts>
    <user>Huong</user>
    <text>There are examples where you know you will never get a response, like ports and navigation</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T10:46:15.459400</ts>
    <user>Kimbery</user>
    <text>In elm/http/1 you had
```
Error.BadStatus (Response String)
```
but in elm/http/2 you have
```
Error.BadStatus Int
```
How are you supposed to get hold of the response body with the new API?</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T10:47:39.459800</ts>
    <user>Kimbery</user>
    <text>looks like &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#expectStringResponse&gt; is the best option now</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T10:48:53.460000</ts>
    <user>Nana</user>
    <text>&lt;@Kimbery&gt; yup</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T10:49:32.460600</ts>
    <user>Kimbery</user>
    <text>that does seem cleaner, decoding all potential responses in the same place</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T10:50:47.461000</ts>
    <user>Kimbery</user>
    <text>Was there any discussion about the changes in elm/http2 when it was released?</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T10:55:44.461300</ts>
    <user>Rosalee</user>
    <text>Another option is to use this package &lt;https://package.elm-lang.org/packages/jzxhuang/http-extras/latest/Http-Detailed&gt;</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T10:57:21.462700</ts>
    <user>Vilma</user>
    <text>is there a function which given two lists it just combines the two by appending every other element from one list and the other? To achieve this, for example
```
list1 = [1, 3, 5]
list2 = [2, 4, 6]

combineLists list1 list2 == [1, 2, 3, 4, 5, 6]
```</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T10:58:02.463100</ts>
    <user>Nana</user>
    <text>&lt;@Vilma&gt; `list1 ++ list2` :smile:</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T11:02:13.464900</ts>
    <user>Huong</user>
    <text>Alternatively, `List.map2 (\x y -&amp;gt; [x, y]) list2 list2 |&amp;gt; List.concat` to get them in the order you describe</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T11:06:23.465500</ts>
    <user>Nana</user>
    <text>Oh right missed that :sweat_smile:</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T11:06:52.466400</ts>
    <user>Nana</user>
    <text>`List.Extra.interleave` does that too</text>
  </message>
  <message conversation_id="1433">
    <ts>2019-05-02T11:08:06.467400</ts>
    <user>Huong</user>
    <text>Yeah, `interweave` is pretty nice, though behaves slightly differently in that it appends the rest of other list when one of them runs out of options</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:13:13.468700</ts>
    <user>Sofia</user>
    <text>&lt;@Earnest&gt; &lt;@Isaias&gt; At this point I'm less interested in publishing it than in _generating_ the docs. I can't figure out any tools that will generate a usable HTML docs page in my use case :confused:</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:30:10.469400</ts>
    <user>Alicia</user>
    <text>&lt;@Sofia&gt; I missed the earlier parts of the conversation, but have you seen &lt;https://github.com/dmy/elm-doc-preview&gt;? There’s one caveat in the readme
&amp;gt; Note that applications documentation is not yet supported by Elm, so only the README and dependencies are supported for those at the moment.</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:33:42.469600</ts>
    <user>Sofia</user>
    <text>Yeah, that's where I got tripped up :disappointed:</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:34:16.470500</ts>
    <user>Sofia</user>
    <text>As far as I understand -- my library requires ports to handle certain touch events, so if I make it a `package` then I won't be able to install it.</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:34:29.471000</ts>
    <user>Sofia</user>
    <text>Is the way to go here to have another `elm.json` in its directory and point edp at it?</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:35:00.471600</ts>
    <user>Alicia</user>
    <text>hmmm that might work, you’re right on the ports code, you wouldn’t be able to publish it to the package repo, I’m not sure if the doc gen tool checks all that or not</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:35:52.471800</ts>
    <user>Sofia</user>
    <text>I'll give that a shot</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:35:56.472000</ts>
    <user>Sofia</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:35:59.472100</ts>
    <user>Huong</user>
    <text>An option to consider: move the relevant modules into a separate folder as if you were setting up a package. Add a package elm.json with the modules you want docs for in the exposed-modules. Add the directory for that "package" to your application elm.json</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:37:29.472400</ts>
    <user>Huong</user>
    <text>I've been wanting to do a thing like that with some of the modules in our application - to enforce docs and separation of concerns</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T13:41:23.474300</ts>
    <user>Alicia</user>
    <text>np, I’m interested to know if it works too! it would be nice to generate docs from our application code for new hires and stuff</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:26:06.476500</ts>
    <user>Sofia</user>
    <text>I'll give that a shot! Messing around with directories right now -- curious if you have thoughts. Imagine I have a library named `Dandy`, and I want to hide its Internals away.
I've added `lib/Dandy` to the source directories of my application. What's a good spot for the `Internal.elm` file? I assume I want the module name to be `Dandy.Internal`. That would imply a directory structure like:
```
lib
↳ Dandy
    ↳ elm.json
    ↳ Dandy.elm
    ↳ Dandy -- This `Dandy/Dandy` folder gives me the heebie-jeebies
        ↳ Internal.elm 
```</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:26:19.476700</ts>
    <user>Sofia</user>
    <text>I'll admit this is basically only an aesthetic issue entirely.</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:37:00.476900</ts>
    <user>Huong</user>
    <text>Yeah, that's no fun. There's also the thing that a package elm.json requires an src directory. :thinking_face:</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:37:47.477100</ts>
    <user>Huong</user>
    <text>So reality would be `lib/dandy/src/Dandy/Internal.elm` :sweat_smile:</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:39:53.478100</ts>
    <user>Jae</user>
    <text>Is there a way to add a type annotation to something like this?
```
let
    (a, b) = (4, 5)
in
...
```</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:42:07.478400</ts>
    <user>Jae</user>
    <text>```let
    (a, b) : (Int, Int)
    (a, b) = (4, 5)
in```
doesn't seem to work</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:45:08.478800</ts>
    <user>Sofia</user>
    <text>oh _no_</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:45:35.479000</ts>
    <user>Alicia</user>
    <text>hmm, I was thinking this might work, but it doesn’t either
```
        (( a, b ) as val) =
            ( 3, 4 )
```
could you write it as
```
val : (Int, Int)
val = (4,5)
(a, b) = val
```?</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:45:49.479200</ts>
    <user>Sofia</user>
    <text>For internal modules that's way overkill, innit.</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:46:31.479500</ts>
    <user>Sofia</user>
    <text>I'll let you know if I figure anything out here.</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:46:43.479700</ts>
    <user>Jae</user>
    <text>Yeah, that would work, feels kind of silly to add an extra line in order to deconstruct it though</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:48:40.479900</ts>
    <user>Alicia</user>
    <text>yeah, it does feel weird, I was thinking with the `as &amp;lt;var name&amp;gt;` syntax it would work because then you have a single value, but I guess that style syntax isn’t supported</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:50:03.480100</ts>
    <user>Jae</user>
    <text>Even if it did work, that isn't a type annotation?</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:56:08.480300</ts>
    <user>Alicia</user>
    <text>sorry, I left out a line, I was thinking it would be
```
val: (Int, Int)
(( a, b ) as val) = ( 3, 4 )
```</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:56:45.480500</ts>
    <user>Jae</user>
    <text>Ah, gotcha</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T14:56:47.480700</ts>
    <user>Alicia</user>
    <text>and it would know `a` and `b` were ints since it was destructuring of `val`</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T15:04:55.480900</ts>
    <user>Velia</user>
    <text>For now, you can have something like:
```
app
|_ elm.json (application with source_directories=["lib/src"]
|_ lib
  |_ elm.json (package with exposed_modules set for documented modules and same dependencies as the app)
  |_ src
```
You can then run `edp` on `./lib` to get the application documentation. And use `elm make lib/src/Main.elm` from app to build the application.

You have however to add the dependencies twice (a simple script could automate this).

In the future, elm-doc-preview will most likely scan `source_directories` parents to use found elm.json in order to also support forked packages:

&lt;https://github.com/dmy/elm-doc-preview/issues/17&gt;</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T15:04:57.481100</ts>
    <user>Huong</user>
    <text>Depends! I mean,there are some nice parts - you get to have docs, doctests, a readme, tests, and a guarantee that this module does not depend on other parts of your application. It you do decide to some day publish it, that becomes excessively easy. The downside is overhead in directory structures, the need to manually keep dependencies in sync, and your application can still import the `Internal` module because it's on the sources path so it requires some amount of manual checks...</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T15:06:56.481300</ts>
    <user>Huong</user>
    <text>Yeah, that's never been supported even in 0.18 where you could destructure at the top-level, not only in let-bindings. I haven't found a satisfactory way to deal with this yet :(</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T15:07:21.481500</ts>
    <user>Velia</user>
    <text>There is an article (in Japanese unfortunately, Google translate) that explains that:

&lt;https://qiita.com/arowM/items/98f47202aa92394d483c&gt;</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T15:08:44.481800</ts>
    <user>Velia</user>
    <text>Not sure about ports :thinking_face: never tested, it depends of `elm make` good will. Can unpublished packages have ports? I doubt it (can't check now, on mobile).</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T15:14:02.482400</ts>
    <user>Jae</user>
    <text>I suppose a follow up question is, why does the function name even have to be included in the type annotation? Why not just this
```
let
    (Int, Int)
    (a, b) = (4, 5)
in
```
or
```
Int -&amp;gt; Int -&amp;gt; Int
myFunction a b = a + b
```</text>
  </message>
  <message conversation_id="1434">
    <ts>2019-05-02T15:24:47.484700</ts>
    <user>Alicia</user>
    <text>only guessing but I’d think for ease of parsing, I like how they line up personally</text>
  </message>
  <message conversation_id="1435">
    <ts>2019-05-02T15:53:38.484900</ts>
    <user>Huong</user>
    <text>Myeah, I too like it, tho I guess it's mostly familiarity for me. I think that's also the reason for the syntax: it's how it works in SML and Haskell (albeit with `::` in the latter), and Evan decided he liked it.</text>
  </message>
  <message conversation_id="1436">
    <ts>2019-05-02T16:52:27.485800</ts>
    <user>Dayle</user>
    <text>Hi!
Anyone here has some experience using Elm with Cordova?</text>
  </message>
  <message conversation_id="1436">
    <ts>2019-05-02T17:00:54.486500</ts>
    <user>Isaiah</user>
    <text>Do ports mess with the order that data gets sent back to elm? I have a stream of data coming through a websocket and it seems to get to elm out of order</text>
  </message>
  <message conversation_id="1437">
    <ts>2019-05-02T17:11:06.488400</ts>
    <user>Janiece</user>
    <text>Hey &lt;@Sofia&gt;, it's also possible to publish a package that depends on ports by documenting how to set up the required ports and hook them up to the package code - see &lt;https://package.elm-lang.org/packages/xarvh/elm-gamepad/latest/&gt; for a good example</text>
  </message>
  <message conversation_id="1437">
    <ts>2019-05-02T17:12:04.488500</ts>
    <user>Janiece</user>
    <text>So you could publish a package and document it as normal, with any port setup stuff described in the README or in whatever module makes the most sense</text>
  </message>
  <message conversation_id="1437">
    <ts>2019-05-02T17:13:51.488700</ts>
    <user>Sofia</user>
    <text>That's really interesting! This might be worth pursuing then</text>
  </message>
  <message conversation_id="1437">
    <ts>2019-05-02T17:13:55.488900</ts>
    <user>Janiece</user>
    <text>You could also go this route even if you don't actually publish the package...setting up a proper package structure should allow you to use `elm-doc-preview`, and then you can just add the package source directory to your application's source directories</text>
  </message>
  <message conversation_id="1438">
    <ts>2019-05-02T18:22:46.489100</ts>
    <user>Lorilee</user>
    <text>I don’t have any kind of source for this, but I seem to recall seeing them be stacked (in the datastructure sense) between animation frames</text>
  </message>
  <message conversation_id="1438">
    <ts>2019-05-02T18:23:25.489300</ts>
    <user>Lorilee</user>
    <text>Are they coming in exactly backwards per animation frame? That would look somewhat in order and somewhat jumbled I suppose</text>
  </message>
  <message conversation_id="1439">
    <ts>2019-05-02T19:02:25.490600</ts>
    <user>Erin</user>
    <text>&lt;@Dayle&gt; Yep I'm using it with Cordova right now! Well I switched to Capacitor actually, but same diff</text>
  </message>
  <message conversation_id="1439">
    <ts>2019-05-02T19:05:32.490700</ts>
    <user>Erin</user>
    <text>Yeah port order is never guaranteed. Recently had an issue with localstorage giving me old data because of a race condition where I'd set the localstorage from elm and then immediately set it again - apparently the second time was hitting the port first for some reason, meaning the older request was overriding the newer one</text>
  </message>
  <message conversation_id="1439">
    <ts>2019-05-02T19:40:12.496100</ts>
    <user>Erin</user>
    <text>Is it possible to run `update` on first launch of an `application`? If not, how am I supposed to parse the initial URL? The docs talk about parsing URL query parameters being used for, e.g., search terms. I get that `onUrlChange` would have fired if someone appended `?search=monkey` to the URL, and then my `update` gets to handle it. But what if that's the URL that the page was opened with? How do I run my monkey-searching logic from my update function?</text>
  </message>
  <message conversation_id="1439">
    <ts>2019-05-02T19:42:14.496200</ts>
    <user>Erin</user>
    <text>`init` only lets you affect the model (and by extension, the view), But I guess I could have it spit out a model that's already been run through the update function? Like so:
```
init : flags -&amp;gt; Url.Url -&amp;gt; Nav.Key -&amp;gt; ( Model, Cmd Msg )
init flags url key =
    update (UrlChanged url) startingModel
```</text>
  </message>
  <message conversation_id="1439">
    <ts>2019-05-02T19:54:23.496600</ts>
    <user>Earnest</user>
    <text>Just pull out the UrlChanged branch into a function and call it from both update &amp;amp; init.</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:10:34.497600</ts>
    <user>Isaias</user>
    <text>&lt;@Janiece&gt; do you know why `Time.now` is a task, not a cmd, if it cannot fail?</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:13:56.497700</ts>
    <user>Isaias</user>
    <text>&lt;@Huong&gt;  then why is random a cmd if it can guarantee a result?</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:16:05.497900</ts>
    <user>Isaias</user>
    <text>&lt;@Earlean&gt; cant you sequence cmds if the callback takes a `Maybe Msg`?</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:23:15.498500</ts>
    <user>Kris</user>
    <text>The fact that it cannot fail has nothing to do with that </text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:24:42.499100</ts>
    <user>Isaias</user>
    <text>:thinking_face: i was mislead. What is the reason &lt;@Kris&gt;</text>
  </message>
  <message conversation_id="1441">
    <ts>2019-05-02T20:25:56.499700</ts>
    <user>Kris</user>
    <text>Well, tasks are strictly more powerful than commands </text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:26:30.000600</ts>
    <user>Kris</user>
    <text>So you should ask why some command is not a task in any case (like Random) </text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:31:01.000900</ts>
    <user>Isaias</user>
    <text>Ive been asking both, yeah</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:31:11.001300</ts>
    <user>Isaias</user>
    <text>Why even differentiate the two?</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:36:22.001800</ts>
    <user>Kris</user>
    <text>Yeah I asked the same some months ago </text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:36:45.002700</ts>
    <user>Kris</user>
    <text>I believe the answer is that tasks are “guaranteed” to produce results, eventually </text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:36:50.002900</ts>
    <user>Kris</user>
    <text>While commands are not </text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:38:23.003700</ts>
    <user>Isaias</user>
    <text>Oh.. i think i understand now, i just needed to hear it enough times :upside_down_face:</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-02T20:39:53.004200</ts>
    <user>Isaias</user>
    <text>Or but i still dont know why random isnt a tadk</text>
  </message>
  <message conversation_id="1442">
    <ts>2019-05-02T21:10:52.008600</ts>
    <user>Leoma</user>
    <text>Well, a Cmd is opaque. At that point we can’t really do anything with it except hand it to the runtime. Tasks are different, we have andThen and Sequence. So maybe Task is chosen when it’s possible you’d use it with andThen or Sequence. So I’d suggest there is a limitation on random being a Cmd. </text>
  </message>
  <message conversation_id="1443">
    <ts>2019-05-02T22:02:33.009000</ts>
    <user>Earlean</user>
    <text>You can sequence Cmds by going through `update`. Eg. A Cmd produces a msg, the runtime calls `update` with that msg and `update` returns the next Cmd to be run</text>
  </message>
  <message conversation_id="1444">
    <ts>2019-05-03T03:02:34.009600</ts>
    <user>Dayle</user>
    <text>alright! I’m having trouble getting my elm application to run. I’ve tried the basic example with the counter in the elm guide in it runs fine but when I try to run my SPA it just stops on `Elm.Main.init`. It works fine in the Cordova browser but not on iOS or Android. Maybe you have some hard earned insight into what could crash the app in iOS and Android?</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-03T03:25:36.010700</ts>
    <user>Nana</user>
    <text>I think there's no need for a Random Task, because `Random.Generator` basically does the same job as a `Task` :thinking_face:</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-03T03:30:12.012100</ts>
    <user>Earlean</user>
    <text>Not really, `Random.Generator` can only be sequenced with other generators, so you can't generate a random value and sequence that with sending that random value on a http request</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-03T03:31:46.013700</ts>
    <user>Earlean</user>
    <text>You can create a Task that does calls to `Random.step`, but you need to manage the seed yourself so the result of the sequence of tasks needs to include the new seed so you can storage it for the next time you want to generate a random value.</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-03T03:32:38.014600</ts>
    <user>Earlean</user>
    <text>A Task version of `Random.generate` would have the runtime manage the random seed value so you wouldn't have to</text>
  </message>
  <message conversation_id="1440">
    <ts>2019-05-03T03:37:28.014800</ts>
    <user>Huong</user>
    <text>I think this is the main reason that it isn’t built in - this would require kernel code in `elm/random`, which is currently pure Elm (+ an effect manager, which can only do commands, not tasks)</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:09:54.015700</ts>
    <user>Chin</user>
    <text>any idea why Elm doesn't see a change event on a dropdown when I use selenium?</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:27:02.015800</ts>
    <user>Walton</user>
    <text>What worked for me was to use `selectByVisibleText`</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:27:27.016000</ts>
    <user>Walton</user>
    <text>Did you try this one &lt;@Chin&gt;?</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:27:52.016300</ts>
    <user>Chin</user>
    <text>What I mean is that the dropdown selection does change. But Elm doesn't receive the event.</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:27:57.016500</ts>
    <user>Chin</user>
    <text>Haven't tried that.</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:29:08.016700</ts>
    <user>Walton</user>
    <text>I had the same issue…the dropdown changed, but the event in Elm didn’t fire. This method worked correctly.</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:29:55.016900</ts>
    <user>Chin</user>
    <text>who has that method?</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:30:34.017200</ts>
    <user>Walton</user>
    <text>it looks like it’s WebdriverIO specific</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:30:51.017400</ts>
    <user>Walton</user>
    <text>I don’t know if I can help then</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:31:35.017600</ts>
    <user>Walton</user>
    <text>but I found it here: &lt;https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/support/ui/Select.html&gt;</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:34:50.017800</ts>
    <user>Walton</user>
    <text>&lt;@Chin&gt; what selenium version are you using?</text>
  </message>
  <message conversation_id="1445">
    <ts>2019-05-03T06:47:24.018000</ts>
    <user>Chin</user>
    <text>I'm actually using Capybara</text>
  </message>
  <message conversation_id="1446">
    <ts>2019-05-03T09:54:26.019400</ts>
    <user>Allyn</user>
    <text>Hello. elm-analyse identifies unused imports. Is there a tool to remove them automatically?</text>
  </message>
  <message conversation_id="1446">
    <ts>2019-05-03T10:02:39.020600</ts>
    <user>Alicia</user>
    <text>elm-analyse has a fix mode that can do it (part of the web UI for it), but it can only fix them one at a time.  I’m working on adding that to &lt;https://github.com/elm-tooling/elm-language-server&gt; so that you can get quickfix actions in the editor</text>
  </message>
  <message conversation_id="1446">
    <ts>2019-05-03T10:39:29.023400</ts>
    <user>Allyn</user>
    <text>I was looking for a CLI based solution. I generate some code using openAPI generator, which write some code with useless imports. So I’d like to clean it automatically every time we generate some code.</text>
  </message>
  <message conversation_id="1447">
    <ts>2019-05-03T11:25:11.023600</ts>
    <user>Millie</user>
    <text>That would be the implementation of this issue: &lt;https://github.com/stil4m/elm-analyse/issues/116&gt;</text>
  </message>
  <message conversation_id="1447">
    <ts>2019-05-03T11:25:57.023800</ts>
    <user>Millie</user>
    <text>A workaround for now could be to ignore the directory in `elm-analyse` because it's generated code, which is not maintained by you.</text>
  </message>
  <message conversation_id="1447">
    <ts>2019-05-03T11:26:36.024000</ts>
    <user>Millie</user>
    <text>`excludePaths` &lt;https://stil4m.github.io/elm-analyse/#/configuration&gt;</text>
  </message>
  <message conversation_id="1447">
    <ts>2019-05-03T11:27:30.024200</ts>
    <user>Allyn</user>
    <text>I had not seen it was possible to configure it!</text>
  </message>
  <message conversation_id="1447">
    <ts>2019-05-03T11:27:48.024400</ts>
    <user>Allyn</user>
    <text>Thank you very much &lt;@Millie&gt;, it will be very useful</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T15:43:37.030200</ts>
    <user>Leoma</user>
    <text>So, I think Elm’s `view` function needs to have the signature `view : Model -&amp;gt; (Html Msg, Cmd Msg)`

Reason is as follows:
1. if/when you break your app into ’components/pages/whatever you call them` then each component will have a Model. This model represents the history of messages that the component  triggered. It does NOT represent the history of the calls to `view`, which is called anytime there is new data to render.
2. Suppose the view want’s to focus an element. This is not a result of the component’s model change (where we could trigger a Cmd during update). This is a result of new data being passed to view, which the component’s update isn’t necessarily aware of.
3. The fix is `view : Model -&amp;gt; (Html Msg, Cmd Msg)` where we can trigger a call to focus.
4. It is now actually possible to do the above with a small hack AND it fixes otherwise not easily fixed issues.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:08:02.033600</ts>
    <user>Alicia</user>
    <text>I think that might not work with how elm uses requestAnimationFrame right now, if view is only called every 16ms there may be times in that 16ms window when the `view: Model -&amp;gt; (Html Msg, Cmd Msg)` would have produced messages</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:10:27.036800</ts>
    <user>Alicia</user>
    <text>it’s not very Elm-y but we’ve been using custom elements where we set properties on the HTML from the Elm side, then then JS side looks at those attributes and makes the magic happen, stuff like `TextInput.view { autofocus = True, placeholder = "Testing" }` which gets rendered out as our custom input field like `node "custom-text-input" [ Attribute.autofocus True, Attribute.placeholder "Testing" ] []`</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:12:17.039400</ts>
    <user>Jake</user>
    <text>&lt;@Leoma&gt; how would view know which element to focus without access to the previous model?</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:12:18.039500</ts>
    <user>Alicia</user>
    <text>and then in the custom element it is like
```
class extends HTMLElement {
  connectedCallback() {
    requestAnimationFrame(() =&amp;gt;
      const elem = this.querySelector["input[autofocus]"];
      if (elem) elem.focus();
    }
  }
}
```</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:14:13.042300</ts>
    <user>Chae</user>
    <text>What/when are you trying to focus an element? Does `Html.Attributes.autoFocus True` not work for you?</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:14:22.042700</ts>
    <user>Alicia</user>
    <text>autofocus only works on initial page load</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:14:26.043000</ts>
    <user>Leoma</user>
    <text>Autofocus only works on the first render</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:15:06.045600</ts>
    <user>Alicia</user>
    <text>I left out some there, we also have a `setTimeout(() =&amp;gt; &amp;lt;focus code&amp;gt;, 0)` inside the `requestAnimationFrame` because we’ve seen times when it wasn’t actually rendered when the animation frame fired</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:15:51.048300</ts>
    <user>Jake</user>
    <text>You'd still need a declarative autofocus ("focus this node when it's first rendered"), not an effect ("focus this node after (each) render")</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:15:52.048400</ts>
    <user>Loralee</user>
    <text>I'm developing with elm-live and at each save of my file, elm-live take about 4 plain seconds to serve the new compiled js (after it has been compiled!). My elm file is quite small : 180-lines... Did you already encounter this issue?</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:16:31.049800</ts>
    <user>Loralee</user>
    <text>here is the log of elm-live</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:16:48.050700</ts>
    <user>Alicia</user>
    <text>&lt;@Jake&gt; the code runs in the `connectedCallback` in the custom element, as long as it is a leaf node elm will not re-render it</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:16:52.050900</ts>
    <user>Alicia</user>
    <text>so it only runs once</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:16:56.051100</ts>
    <user>Leoma</user>
    <text>Threading this</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:16:58.051300</ts>
    <user>Leoma</user>
    <text>So here’s the problem. I want to add a field and focus it. That field is added by calling to an async DB function in javascript, and when that slot propagates into the Elm model, render it.
This is async, so I can’t , in an update do `({model | fields = newFields}, focus newField)` because the field isn’t ready.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:17:24.052000</ts>
    <user>Chae</user>
    <text>Could you do something like `Html.Keyed.input (changeKeyHereIfShouldFocus)  ...`? That should re-render the input and trigger the autofocus, no?</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:17:46.052300</ts>
    <user>Leoma</user>
    <text>I’ve started a thread</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:18:09.052500</ts>
    <user>Leoma</user>
    <text>Thread here RE `view : Model -&amp;gt; (Html Msg, Cmd Msg)`</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:19:00.052800</ts>
    <user>Jake</user>
    <text>I was writing about the "send Cmd from view" idea, I see your approach as the right one.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:19:29.053000</ts>
    <user>Chae</user>
    <text>How do you know when it’s ready?</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:19:29.053200</ts>
    <user>Leoma</user>
    <text>Further, the code waiting to focus the element is a component with it’s own `view/update/Model` tuple. Of course, the data to be rendered is passed into `view`. So the component’s update isn’t aware that the field is ready to be focused.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:20:16.053400</ts>
    <user>Alicia</user>
    <text>we could but I don’t like it as much as using custom elements for it</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:20:49.053600</ts>
    <user>Alicia</user>
    <text>I would use a custom element, the `connectedCallback` fires when the element is in the DOM and you can focus it</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:21:07.053800</ts>
    <user>Leoma</user>
    <text>So, when the component’s view is called, I have:
`view : ExternalData -&amp;gt; InternalModel -&amp;gt; Html Msg`

The external data represents knowledge of the new data slot to render. The internal model has knowledge that we asked for the slot, and would like to focus it.

The place the knowledge naturally comes together is in the view function.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:21:09.054000</ts>
    <user>Alicia</user>
    <text>granted if you don’t already have the polyfills and everything in for them it is a pain</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:21:44.054200</ts>
    <user>Leoma</user>
    <text>So my point #4, “It is now actually possible to do the above with a small hack AND it fixes otherwise not easily fixed issues.” hinted at the fact that is is how I fix it.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:21:57.054400</ts>
    <user>Leoma</user>
    <text>And it works exactly as expected.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:21:59.054600</ts>
    <user>Jake</user>
    <text>Oh, that feels like you have merged view and update</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:22:19.054900</ts>
    <user>Leoma</user>
    <text>No</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:23:10.055100</ts>
    <user>Chae</user>
    <text>In your view are you “calculating” the readiness of the input by something like `if xValue &amp;amp;&amp;amp; yValue then ready else notReady`?</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:23:17.055300</ts>
    <user>Leoma</user>
    <text>Consider a component’s model/update. A component’s update is called when the component triggers a message. So a component’s model is a history of that component’s events. It is NOT a history of that component’s views.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:24:02.055500</ts>
    <user>Leoma</user>
    <text>So the component’s model can know that the component requested a new field.
A component’s view is called when the top level data changes.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:25:06.055700</ts>
    <user>Leoma</user>
    <text>So, if you are waiting for the first time that a particular relationship between a component’s history AND the data model exist, you will get that during a call to view.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:25:26.055900</ts>
    <user>Leoma</user>
    <text>If you want to trigger some work when that happens, you will need to trigger it from view.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:25:28.056100</ts>
    <user>Jake</user>
    <text>I feel that for a stateful component "new data is available for rendering" should be a Msg too.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:26:06.056300</ts>
    <user>Jake</user>
    <text>Same as it is at the top-level where you get a Msg from a port</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:26:16.056500</ts>
    <user>Leoma</user>
    <text>Ok, there’s a problem with that, and the problem is that it is not enforcable with the type system</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:26:24.056700</ts>
    <user>Chae</user>
    <text>&lt;@Leoma&gt; do you have a simplified example of how you know when your input is ready?</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:27:07.056900</ts>
    <user>Leoma</user>
    <text>no i don’t</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:27:26.057100</ts>
    <user>Leoma</user>
    <text>I’m trying to explain more broadly</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:27:40.057300</ts>
    <user>Leoma</user>
    <text>Please give me a moment without more quesitons</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:29:31.057500</ts>
    <user>Leoma</user>
    <text>A component’s view can generate messages, (and a (component might have subscriptions). These will have a type of Component.Msg. So if another view/update uses them, it HAS to wrap them `type Msg = ... | MyComponentMsg Component.Msg`</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:30:26.057700</ts>
    <user>Leoma</user>
    <text>So, at this level, in update, when we get a `MyComponentMsg Component.Msg` it’s very clear how it must be handled. `Component.update` should be the only function with a type signature that can make use of these messages.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:30:58.057900</ts>
    <user>Leoma</user>
    <text>So it is very easy and clear to enforce “a component’s model is the result of the history of events on that component”</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:31:57.058100</ts>
    <user>Leoma</user>
    <text>There is no way to easily enforce “I’m a component that needs it’s update called when particular data changes occur, and I really hope whoever is using me remembers to to that diligently”</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:32:55.058300</ts>
    <user>Leoma</user>
    <text>Consider that such a change could occur in any part of the parent’s update function, or any functions it calls. It is very challenging to enforce this cleanly.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:33:37.058500</ts>
    <user>Leoma</user>
    <text>It also breaks the single source of truth as a component now has a copy of data that exists in it’s callee’s model.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:34:35.058700</ts>
    <user>Leoma</user>
    <text>For those reasons, I’m convinced that there will be times you want to look at data coming in from the parent model, AND data available in the component’s model, and trigger an event. And the cleanest place to do this is during view.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:34:45.058900</ts>
    <user>Leoma</user>
    <text>Does that all make sense?</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:36:02.059100</ts>
    <user>Chae</user>
    <text>It does make sense</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:36:19.059300</ts>
    <user>Leoma</user>
    <text>Yay! Thanks for listening.</text>
  </message>
  <message conversation_id="1449">
    <ts>2019-05-03T16:38:48.059500</ts>
    <user>Chae</user>
    <text>Am I understanding correctly that the view for this component is relying on data from it’s own model as well as a “parent” model?</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:41:35.059800</ts>
    <user>Leoma</user>
    <text>Again, a component’s model is a function of it’s history. What a component renders is a function of it’s history AND ALSO what the callee passes into view.

Consider an info panel that can be toggled open and shut. The component’s model might have `{isOpen : Bool}`, and the view might be `view : String -&amp;gt; Model -&amp;gt; Html Msg`</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:42:30.060000</ts>
    <user>Leoma</user>
    <text>So the implementation of view says “if my current model is open, render the toggle button and String passed in, else just render the toggle button”</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:43:10.060200</ts>
    <user>Chae</user>
    <text>Ok! That makes a ton of sense to me as I’ve encountered that exact scenario many times (in React actually)</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:45:26.060400</ts>
    <user>Chae</user>
    <text>I’ve found that with something like that, it’s much easier to store things like `isOpen` and such in the parent/global state. The only time I use a “component” model is when the values in the local model are truly local.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:45:29.060600</ts>
    <user>Leoma</user>
    <text>Ok, so suppose we have a requirement that if a view is toggled open, and that rendered view contains a profanity, we need to log a message via http call.</text>
  </message>
  <message conversation_id="1449">
    <ts>2019-05-03T16:47:27.061200</ts>
    <user>Chae</user>
    <text>Hmm</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:47:40.061400</ts>
    <user>Leoma</user>
    <text>Again. A component’s model is generated by a history of the events the component has generated. Other stuff is not a part of that model. There’s nothing else to it.
The first time we can simultaneously look at “history of the events the component has generated” and “other stuff” is in view.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:51:25.062300</ts>
    <user>Leoma</user>
    <text>And again, the type system makes it easy to enforce that  Msg originating from a component are sent back to it’s update. Anything else is hopes/prayers and fighting the type system.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:53:26.062500</ts>
    <user>Chae</user>
    <text>My gut is telling me that `isOpen` should be part of the “parent” model. But I’m going to think about it for a bit.

Just over a year ago we had a situation where we needed to focus a field that could be inside a collapsed accordion view, and if so open that section of the form. We ended up moving the open state of the view to the global model. But I’ll keep thinking about this one and try to get back to you in a reasonable time</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:56:55.062700</ts>
    <user>Leoma</user>
    <text>Right, so the toggle was an example.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T16:57:52.062900</ts>
    <user>Leoma</user>
    <text>But if you agree that there is a possibility that some data should be in the component’s model, then I think the rest of my ideas hold.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T17:00:27.063100</ts>
    <user>Leoma</user>
    <text>In any case, I’m not suggesting it’s impossible to avoid the need for `view : Model -&amp;gt; (Html Msg, Cmd Msg)`, I’m suggesting that at times, avoiding that need will be unnatural and problematic.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T17:02:11.063300</ts>
    <user>Leoma</user>
    <text>Now, a custom element can use `dispatchEvent` in `connectedCallback` to trigger any event. Via this hack, one can trigger a Cmd Msg when something is rendered. Effectively giving you  `view : Model -&amp;gt; (Html Msg, Cmd Msg)`</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T17:02:37.063500</ts>
    <user>Leoma</user>
    <text>I am using that now to make the rest of my code nicer.</text>
  </message>
  <message conversation_id="1448">
    <ts>2019-05-03T17:06:28.063700</ts>
    <user>Loralee</user>
    <text>never mind, I've restarted elm-live and... it is working well.</text>
  </message>
  <message conversation_id="1450">
    <ts>2019-05-03T19:54:37.064000</ts>
    <user>Brigida</user>
    <text>Garage startup, 3 guys dream big and want to change the world with the right “you”. (SF Bay Area Only) 

Looking for “you” who are passionate about social networking platform.
Currently, we are looking for a designer and a full-stack software engineer. You can also contact us to make friends or share thoughts as being a “ Startupper ”.

We are 3 guys in Santa Clara who just started a project in the “garage”. It is a social platform focusing on building solid connections between people who have the same interests. We believe “nothing is stronger than conversations”, so we are about to build a message-oriented mobile application to connect people easily and effectively. Also, certain conversations will be powered by the chatbot to generate contents and solve users’ questions in a time manner. It is “Talk to Solve”. 

If this is the opportunity you are looking for, please contact me. 
Send me a message or some crazy ideas or anything that makes you special.
No rules! No template! Life has no template. Live your way.

Thank you
&lt;mailto:bellacodeplay@gmail.com|bellacodeplay@gmail.com&gt;


</text>
  </message>
  <message conversation_id="1451">
    <ts>2019-05-03T20:45:02.064400</ts>
    <user>Danika</user>
    <text>Erm</text>
  </message>
  <message conversation_id="1451">
    <ts>2019-05-03T20:45:13.064800</ts>
    <user>Danika</user>
    <text>Probably not the most appropriate place for this</text>
  </message>
  <message conversation_id="1451">
    <ts>2019-05-03T20:45:34.065500</ts>
    <user>Danika</user>
    <text>_maybe_ &lt;#C0LUAGWRK|jobs&gt; if you’re actually trying to hire someone... </text>
  </message>
  <message conversation_id="1452">
    <ts>2019-05-03T21:52:07.069800</ts>
    <user>Winnifred</user>
    <text>:wave: hi, my team has been using this tool: &lt;https://fractal.build/&gt; and I was wondering if Elm + some webpack magic could serve as a replacement? Our workflow for building this auto documenting static site style guide is basically:

1. Build a SMACCS/BEM module, adhere to naming conventions, write the SCSS and the HTML (a .hbs template with some config that the tool munges together) (`.module{...}` and `&amp;lt;div class="module"&amp;gt;...`)
2. Include that module within other modules, passing in some state to illustrate variations
3. Automatically show what modules are being used in different views, render some markdown docs

We are looking for a replacement because of slow build times, current tool is too generalized, support might be going away for the tool.</text>
  </message>
  <message conversation_id="1453">
    <ts>2019-05-04T05:11:20.071000</ts>
    <user>Jae</user>
    <text>In Browser.Dom package docs, there's this code example,
```import Browser.Dom as Dom
import Task

type Msg = NoOp

jumpToBottom : String -&amp;gt; Cmd Msg
jumpToBottom id =
  Dom.getViewportOf id
    |&amp;gt; Task.andThen (\info -&amp;gt; Dom.setViewportOf id 0 info.scene.height)
    |&amp;gt; Task.perform (\_ -&amp;gt; NoOp)```
Shouldn't `Task.perform` be `Task.attempt` though?</text>
  </message>
  <message conversation_id="1453">
    <ts>2019-05-04T05:12:21.071200</ts>
    <user>Lea</user>
    <text>&lt;https://github.com/elm/browser/commit/8ea63a705801326d414707cb8fe12c4d4a62b5e4&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1453">
    <ts>2019-05-04T05:15:21.071400</ts>
    <user>Jae</user>
    <text>Ah, thanks!</text>
  </message>
  <message conversation_id="1454">
    <ts>2019-05-04T05:57:09.072500</ts>
    <user>Carter</user>
    <text>If I want to create a countdown, is there some trick to avoid an update every second (for second precision clock)?</text>
  </message>
  <message conversation_id="1454">
    <ts>2019-05-04T05:58:25.072700</ts>
    <user>Niesha</user>
    <text>No.</text>
  </message>
  <message conversation_id="1454">
    <ts>2019-05-04T05:58:38.073000</ts>
    <user>Ashton</user>
    <text>Is there a problem with updating every second?</text>
  </message>
  <message conversation_id="1454">
    <ts>2019-05-04T06:08:30.074100</ts>
    <user>Carter</user>
    <text>&lt;@Chin&gt; I do lazy update of just the clock but if i do every second i get a quite high cpu average</text>
  </message>
  <message conversation_id="1455">
    <ts>2019-05-04T06:35:38.074500</ts>
    <user>Ashton</user>
    <text>Have you tried `Html.Lazy`?</text>
  </message>
  <message conversation_id="1455">
    <ts>2019-05-04T06:36:56.076100</ts>
    <user>Ashton</user>
    <text>Just settings the value in your model every second shouldnt be too taxing, my expectation is that its _other_ stuff thats taxing the cpu, like recomputing the Dom after every update, even tho it hasnt changed.</text>
  </message>
  <message conversation_id="1455">
    <ts>2019-05-04T06:37:18.076500</ts>
    <user>Ashton</user>
    <text>You can get some of your performance back with `Html.Lazy`, if thats the case.</text>
  </message>
  <message conversation_id="1456">
    <ts>2019-05-04T16:15:09.079100</ts>
    <user>Gayla</user>
    <text>Has there been any progress on server-side Elm? I haven't checked in a year or so.</text>
  </message>
  <message conversation_id="1457">
    <ts>2019-05-04T16:29:38.080300</ts>
    <user>Danika</user>
    <text>You could use a `Platform.worker` with the html string library and fake it? &lt;https://package.elm-lang.org/packages/zwilias/elm-html-string/2.0.2/Html-String&gt;

No official progress though </text>
  </message>
  <message conversation_id="1456">
    <ts>2019-05-04T16:32:28.081100</ts>
    <user>Gayla</user>
    <text>Thanks. That's a nodejs API?
It looks like this was the last word (Aug 21, 2018) &lt;https://github.com/elm/browser/issues/19#issuecomment-414813158&gt;</text>
  </message>
  <message conversation_id="1456">
    <ts>2019-05-04T16:35:35.082500</ts>
    <user>Danika</user>
    <text>You’d need to use ports in combination with the above html-string library. You could send the complete html string over a port and serve it with something like express </text>
  </message>
  <message conversation_id="1456">
    <ts>2019-05-04T16:40:15.083000</ts>
    <user>Niesha</user>
    <text>Might as well go with purescript.</text>
  </message>
  <message conversation_id="1456">
    <ts>2019-05-04T16:41:55.084000</ts>
    <user>Danika</user>
    <text>Hmm im not sure I’d agree with that, but I do think server side elm is still not “there” for anything but experimentation rn </text>
  </message>
  <message conversation_id="1458">
    <ts>2019-05-04T16:51:41.084800</ts>
    <user>Simon</user>
    <text>anyone have an implementation of `Parser.deadEndsToString` ?</text>
  </message>
  <message conversation_id="1458">
    <ts>2019-05-04T16:53:28.085000</ts>
    <user>Virgie</user>
    <text>you mean something custom?</text>
  </message>
  <message conversation_id="1458">
    <ts>2019-05-04T16:54:04.085100</ts>
    <user>Huong</user>
    <text>The builtin one is a todo :sweat_smile:</text>
  </message>
  <message conversation_id="1458">
    <ts>2019-05-04T16:54:31.085300</ts>
    <user>Simon</user>
    <text>It was surprising, I kept searching my code over and over for the errant “TODO” :rolling_on_the_floor_laughing:</text>
  </message>
  <message conversation_id="1458">
    <ts>2019-05-04T16:56:25.085500</ts>
    <user>Huong</user>
    <text>There are some open PR’s with very simple implementations that you could use. It would be cool if someone were to make an implementation that can show relevant snippets from the original input along the way, though that’s more relevant to the Parser.Advanced modules I suppose</text>
  </message>
  <message conversation_id="1458">
    <ts>2019-05-04T16:57:12.085700</ts>
    <user>Simon</user>
    <text>Appreciate it, will check there (And while that would be cool, I’m just looking to hammer out my parsers implementation gaps</text>
  </message>
  <message conversation_id="1458">
    <ts>2019-05-04T16:58:19.085900</ts>
    <user>Simon</user>
    <text>Also kind of amazing/sad someone contributed a simple PR in good faith that just sits there :confused:</text>
  </message>
  <message conversation_id="1458">
    <ts>2019-05-04T17:01:48.086100</ts>
    <user>Simon</user>
    <text>Ah, that code works the charm, thanks &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="1459">
    <ts>2019-05-04T20:09:48.086600</ts>
    <user>Gayla</user>
    <text>linko?</text>
  </message>
  <message conversation_id="1459">
    <ts>2019-05-04T20:10:10.086800</ts>
    <user>Simon</user>
    <text>&lt;https://github.com/elm/parser/pull/16/files&gt;</text>
  </message>
  <message conversation_id="1459">
    <ts>2019-05-04T20:12:32.087000</ts>
    <user>Gayla</user>
    <text>It looks like no committer has looked at it.</text>
  </message>
  <message conversation_id="1459">
    <ts>2019-05-04T20:12:48.087200</ts>
    <user>Simon</user>
    <text>hence the sad part</text>
  </message>
  <message conversation_id="1459">
    <ts>2019-05-05T07:44:27.087600</ts>
    <user>Tobie</user>
    <text>The change from 2018 to 2019 does not make sense to me</text>
  </message>
  <message conversation_id="1460">
    <ts>2019-05-05T11:03:05.089900</ts>
    <user>Hoa</user>
    <text>Is this the right way to produces a String with a `\0` char?  I need to remove those from a String.
```null = String.fromChar '\u{0000}'```</text>
  </message>
  <message conversation_id="1460">
    <ts>2019-05-05T11:03:49.090500</ts>
    <user>Hoa</user>
    <text>Directly using `\0` doesn’t work</text>
  </message>
  <message conversation_id="1460">
    <ts>2019-05-05T11:05:11.091000</ts>
    <user>Hoa</user>
    <text>So using `Byte.Parser` I thought to do something like: `String.replace null "" (P.string 64)`</text>
  </message>
  <message conversation_id="1460">
    <ts>2019-05-05T11:28:42.093000</ts>
    <user>Huong</user>
    <text>You could also do `"\u{0000}"` - no need to go through a `Char` first</text>
  </message>
  <message conversation_id="1460">
    <ts>2019-05-05T11:29:08.093300</ts>
    <user>Hoa</user>
    <text>Right!  Simpler.</text>
  </message>
  <message conversation_id="1460">
    <ts>2019-05-05T11:29:14.093500</ts>
    <user>Hoa</user>
    <text>Anyway, it works.  :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1461">
    <ts>2019-05-05T13:34:24.095100</ts>
    <user>Cher</user>
    <text>is there a good place to tell the Elm team on the rare occasions that a compiler message seems buggy or unenlightening?</text>
  </message>
  <message conversation_id="1462">
    <ts>2019-05-05T13:46:42.095300</ts>
    <user>Dede</user>
    <text>&lt;https://github.com/elm/compiler/issues&gt;</text>
  </message>
  <message conversation_id="1461">
    <ts>2019-05-05T13:50:40.095800</ts>
    <user>Cher</user>
    <text>&lt;@Dede&gt; thx!</text>
  </message>
  <message conversation_id="1462">
    <ts>2019-05-05T13:56:09.096500</ts>
    <user>Huong</user>
    <text>There's also a dedicated repo for tracking bad error messages</text>
  </message>
  <message conversation_id="1462">
    <ts>2019-05-05T14:09:05.097500</ts>
    <user>Huong</user>
    <text>&lt;https://github.com/elm/error-message-catalog&gt; that's the one. It's a good place for tracking suboptimal error messages</text>
  </message>
  <message conversation_id="1462">
    <ts>2019-05-05T14:20:55.098400</ts>
    <user>Cher</user>
    <text>&lt;@Huong&gt; ah, even better. opened the issue</text>
  </message>
  <message conversation_id="1463">
    <ts>2019-05-05T16:11:46.100200</ts>
    <user>Florencia</user>
    <text>Do we know if there is any fix in works for those buggy type error messages? sth like
```
expecting:
  Arg -&amp;gt; Result
but I got:
  Arg -&amp;gt; Result
```</text>
  </message>
  <message conversation_id="1463">
    <ts>2019-05-05T16:13:07.102400</ts>
    <user>Florencia</user>
    <text>the way I understand it, the actual "actual" type is something else and this is a bug in the error reporting</text>
  </message>
  <message conversation_id="1463">
    <ts>2019-05-05T16:13:30.102900</ts>
    <user>Florencia</user>
    <text>it's cropped up a few times since 0.19</text>
  </message>
  <message conversation_id="1464">
    <ts>2019-05-05T16:51:04.103000</ts>
    <user>Virgie</user>
    <text>there has been some reshuffling in error reporting in the compiler source since 0.19. Wouldn't normally notice but I'm using the elm compiler as a reference in a compiler construction course</text>
  </message>
  <message conversation_id="1464">
    <ts>2019-05-05T16:51:18.103200</ts>
    <user>Virgie</user>
    <text>so, hopefully yes</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T09:40:11.106100</ts>
    <user>Lilli</user>
    <text>i was wondering, is there a reason why `Time.Posix` is not `comparable`?</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T09:42:31.107900</ts>
    <user>Lilli</user>
    <text>This way i can't use the `(&amp;gt;)` operator. Sure, i can write my function comparePosix, but maybe this change was made to avoid comparison? (?)
i'm a bit confused :sweat_smile:</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T09:54:49.108000</ts>
    <user>Leoma</user>
    <text>It’s not because `Time.Posix` shouldn’t be comparable. It’s because, more strongly, there are general rules for what is comparable. Basic types like numbers, strings, (not Bools), tuples, lists.

Because Time.Posix is not one of those, it isn’t comparable.

Because we have `posixToMillis` and `millisToPosix`, we can compare on the `Int` data.</text>
  </message>
  <message conversation_id="1466">
    <ts>2019-05-06T09:58:28.109400</ts>
    <user>Wai</user>
    <text>Hey everyone, Is someone familiar with the Random package? I'm using elm 0.19 and I can't find a way to use it nor install it</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:00:22.110500</ts>
    <user>Huong</user>
    <text>Can you check you’re trying to install `elm/random` (0.19 compatible) and not `elm-lang/random` (pre 0.19)?</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:00:35.110600</ts>
    <user>Niesha</user>
    <text>`comparable` is compiler magic, and the magic doesn't support `Time.Posix`. You could probably make a PR.</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:01:05.111200</ts>
    <user>Wai</user>
    <text>I tried it: ```elm-package install elm/random
Error: Could not find any packages named elm/random.```</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:01:34.111500</ts>
    <user>Danika</user>
    <text>elm install elm/random </text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:01:40.111800</ts>
    <user>Danika</user>
    <text>elm-package is 0.18</text>
  </message>
  <message conversation_id="1466">
    <ts>2019-05-06T10:01:57.112000</ts>
    <user>Wai</user>
    <text>OMG thanks</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:02:19.112200</ts>
    <user>Danika</user>
    <text>:smile:</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:03:12.113100</ts>
    <user>Wai</user>
    <text>something else... Is there a way when reading the doc to know to which elm version it apply ?</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:07:59.115700</ts>
    <user>Danika</user>
    <text>For official packages, elm/* is 0.19 and elm-lang/* is 0.18.

For others, the site will only show 0.19 packages when you search. Google still indexes a lot if 0.18 packages. The easiest way to check is look at the repo, if it has an elm-package.json its 0.18. </text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:09:18.116700</ts>
    <user>Wai</user>
    <text>Oh great ! I've never noticed that. Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:12:58.117100</ts>
    <user>Lilli</user>
    <text>&lt;@Niesha&gt; I never looked inside the compiler code, maybe it just doesn't make sense to have Posix as comparable with the current packet structure. I'm pretty sure the good folks who wrote the compiler made that decision for a reason, so i was wondering which one it is :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:14:11.117500</ts>
    <user>Lilli</user>
    <text>I always forget about this :sweat_smile:</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:14:20.117700</ts>
    <user>Niesha</user>
    <text>You need explicit compiler support for each type that should be `comparable` - you can't add new types to that list as a user. I assume `Time.Posix` just didn't make the cut.</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:16:44.118000</ts>
    <user>Lilli</user>
    <text>&lt;@Niesha&gt; thank you very much!</text>
  </message>
  <message conversation_id="1465">
    <ts>2019-05-06T10:18:23.118200</ts>
    <user>Niesha</user>
    <text>Haskell and PureScript handle that via userspace `comparable` support via typeclasses, not sure how ReasonML does it</text>
  </message>
  <message conversation_id="1467">
    <ts>2019-05-06T10:26:17.119200</ts>
    <user>Augustus</user>
    <text>With how many times that question has had to be answered I would love to see &lt;https://github.com/elm/package.elm-lang.org/pull/285&gt; merged</text>
  </message>
  <message conversation_id="1467">
    <ts>2019-05-06T10:40:37.119500</ts>
    <user>Danika</user>
    <text>Such are the woes of a BDFL </text>
  </message>
  <message conversation_id="1468">
    <ts>2019-05-06T14:29:40.123800</ts>
    <user>Sofia</user>
    <text>I'm working on drag and drop and I'm trying to consistently subscribe to `touchmove` events. It appears that `touchmove` events are only sent to the element on which `touchstart` happens. However, when we get the `touchstart` event, the element itself changes. If Elm doesn't recycle that node, we might not get the `touchmove` events at all.

Is there a way to guarantee that a node is preserved and then modified, instead of being replaced completely? Can `Html.keyed` be used for that?

&lt;https://w3c.github.io/touch-events/#the-touchmove-event&gt;</text>
  </message>
  <message conversation_id="1468">
    <ts>2019-05-06T14:30:39.124300</ts>
    <user>Chae</user>
    <text>`Html.Keyed` is for preserving nodes :thumbsup:</text>
  </message>
  <message conversation_id="1468">
    <ts>2019-05-06T14:31:44.124800</ts>
    <user>Sofia</user>
    <text>Sweet! And do the identifiers only need to be unique between their siblings?</text>
  </message>
  <message conversation_id="1468">
    <ts>2019-05-06T14:32:27.124900</ts>
    <user>Chae</user>
    <text>That is an excellent question. I don’t know, but I’m curious too</text>
  </message>
  <message conversation_id="1467">
    <ts>2019-05-06T14:54:58.125100</ts>
    <user>Huong</user>
    <text>Yes</text>
  </message>
  <message conversation_id="1469">
    <ts>2019-05-06T15:33:55.126800</ts>
    <user>Carter</user>
    <text>Is there a "forum" lib for elm that works well?</text>
  </message>
  <message conversation_id="1469">
    <ts>2019-05-06T15:35:03.128100</ts>
    <user>Carter</user>
    <text>(or, not that keen on hosting a forum, if there are hosted alternatives that would be nice aswell)</text>
  </message>
  <message conversation_id="1469">
    <ts>2019-05-06T15:36:19.128600</ts>
    <user>Bert</user>
    <text>How about Discourse?</text>
  </message>
  <message conversation_id="1469">
    <ts>2019-05-06T15:41:59.128700</ts>
    <user>Carter</user>
    <text>i found a forum on  elmlang ABOUT elm but i dont seem to find a components/lib called discourse?</text>
  </message>
  <message conversation_id="1469">
    <ts>2019-05-06T15:42:11.128900</ts>
    <user>Charity</user>
    <text>I built one for my company, but I'm leaving there and we never open sourced it.  I would be down to make an open source project for this.. but you probably need one soon right?</text>
  </message>
  <message conversation_id="1469">
    <ts>2019-05-06T15:45:17.129100</ts>
    <user>Alicia</user>
    <text>I haven’t seen any forums written in Elm, it would require  a backend as well.  Discourse is nice but not embeddable IIRC (&lt;https://www.discourse.org/&gt;)</text>
  </message>
  <message conversation_id="1469">
    <ts>2019-05-06T15:47:30.129400</ts>
    <user>Carter</user>
    <text>Ah thanks. Its for a hobby project so It needs to be a free solution.</text>
  </message>
  <message conversation_id="1470">
    <ts>2019-05-06T16:09:20.134200</ts>
    <user>Loralee</user>
    <text>Is it possible to "pre-compute" the views? I've written a presentation in Elm containing several slides : &lt;https://besnier.se/elm-beginner-and-production-compliant/&gt;  ; each slide is a satatic `Element Msg` value (yes i'm using `elm-ui`) which is rendered each time the user request it. However, the images "flash" with the alt-text, even if the image has been already in the cache. So is there a way to say to the elm runtime "hey compute those views and keep it in memory!" ?</text>
  </message>
  <message conversation_id="1471">
    <ts>2019-05-06T16:28:48.134600</ts>
    <user>Carter</user>
    <text>Well, if there is none available i take what could be available.</text>
  </message>
  <message conversation_id="1471">
    <ts>2019-05-06T16:29:19.134800</ts>
    <user>Carter</user>
    <text>I get 0 hits when searching for  "forum" on &lt;http://package.elm-lang.org|package.elm-lang.org&gt;</text>
  </message>
  <message conversation_id="1471">
    <ts>2019-05-06T16:30:08.135200</ts>
    <user>Charity</user>
    <text>I would not expect to find a "forum" package.. I'd expect that to be a platform with a server and an elm FE.</text>
  </message>
  <message conversation_id="1471">
    <ts>2019-05-06T16:46:49.135400</ts>
    <user>Carter</user>
    <text>I could atleast see an app or component that just defines an interface to server.</text>
  </message>
  <message conversation_id="1470">
    <ts>2019-05-06T16:59:57.135600</ts>
    <user>Sofia</user>
    <text>&lt;@Huong&gt; This sorta works, but because parent elements of our nice Keyed element can change, the `touchmove` event can get dropped on the floor sometimes. Is there a recommended approach for using `touchmove` in elm?</text>
  </message>
  <message conversation_id="1472">
    <ts>2019-05-06T17:23:08.137700</ts>
    <user>Augustus</user>
    <text>&lt;@Loralee&gt; there is Html.Lazy for lazy rendering the views, but I don't think that will solve it, it sounds like maybe the server is returning headers that prevent the image from being cached?</text>
  </message>
  <message conversation_id="1471">
    <ts>2019-05-06T18:00:59.138000</ts>
    <user>Royce</user>
    <text>It seems like Elm is lying to me:
```
The `Html.Events` module does not expose `onWithOptions`:

8| import Html.Events exposing (onWithOptions)
                                ^^^^^^^^^^^^^
```</text>
  </message>
  <message conversation_id="1471">
    <ts>2019-05-06T18:01:07.138300</ts>
    <user>Royce</user>
    <text>I copied the name directly from the docs page: &lt;https://package.elm-lang.org/packages/elm-lang/html/1.0.0/Html-Events&gt;</text>
  </message>
  <message conversation_id="1471">
    <ts>2019-05-06T18:02:05.138700</ts>
    <user>Royce</user>
    <text>Damnit, never mind. Got bit by the 0.18/0.19 library thing…</text>
  </message>
  <message conversation_id="1470">
    <ts>2019-05-06T19:03:02.139300</ts>
    <user>Danika</user>
    <text>You have to make a custom event decoder now</text>
  </message>
  <message conversation_id="1472">
    <ts>2019-05-06T21:14:05.139400</ts>
    <user>Sofia</user>
    <text>For posterity -- I've gotten this to work by:
1) Being extremely diligent about the structure of the nodes that I register the events on -- they have the same shape and tags at all times.
2) Putting `pointer-events:none` on all of the children of those nodes, so that they cannot be the targets of `touchstart`.

It works, but it doesn't feel great. Would love to know if others have better solutions!</text>
  </message>
  <message conversation_id="1470">
    <ts>2019-05-07T01:37:52.139900</ts>
    <user>Johnetta</user>
    <text>hello</text>
  </message>
  <message conversation_id="1470">
    <ts>2019-05-07T01:40:02.140200</ts>
    <user>Earlean</user>
    <text>welcome &lt;@Johnetta&gt;</text>
  </message>
  <message conversation_id="1470">
    <ts>2019-05-07T01:41:28.141000</ts>
    <user>Aurelia</user>
    <text>Hi there. I am the quiet one in the back of the room.</text>
  </message>
  <message conversation_id="1470">
    <ts>2019-05-07T01:45:39.142100</ts>
    <user>Aurelia</user>
    <text>Ha, Warren is so uncommon that I thought you were talking to me.</text>
  </message>
  <message conversation_id="1470">
    <ts>2019-05-07T01:46:12.142500</ts>
    <user>Earlean</user>
    <text>You're welcome too &lt;@Aurelia&gt;</text>
  </message>
  <message conversation_id="1470">
    <ts>2019-05-07T01:48:14.144000</ts>
    <user>Aurelia</user>
    <text>Cool.  I am just getting the hang of Elm but I really like it so far.  I even like all the vertical stretch in the code.</text>
  </message>
  <message conversation_id="1473">
    <ts>2019-05-07T04:16:45.144600</ts>
    <user>Lynn</user>
    <text>Anyone for some ideas on how to debug this error on CircleCI
```
I got an unexpected zip file from:

    &amp;lt;https://github.com/Microsoft/elm-json-tree-view/zipball/2.0.0/&amp;gt;

I check the hash the zip, and it seems off:

  Expected: 6e84a645c3c871ea742506eb1c9352c2a1b04b18
    Actual: 2c6f4a6d554f9a95807ae02b0a52260389c196f4

This usually means that the package author moved the version tag, so report it
to them and see if that is the issue. Folks on Elm slack can probably help as
well.
```</text>
  </message>
  <message conversation_id="1473">
    <ts>2019-05-07T04:17:13.145000</ts>
    <user>Lynn</user>
    <text>there have been no changes to this repo recently and everything worked 24 hours ago</text>
  </message>
  <message conversation_id="1473">
    <ts>2019-05-07T04:25:04.145200</ts>
    <user>Huong</user>
    <text>I got the same error trying to install it locally. &lt;@Carl&gt; are you aware of the tag being force-pushed or something? :thinking_face:</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T04:39:21.146800</ts>
    <user>Winford</user>
    <text>Hey guys , i’ve made Ghost blog in Elm (it’s still work in progress)
can any one make review of my first Elm SPA : &lt;https://github.com/Tarektouati/elm-ghost-blog&gt; ? Thanks :pray:</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T04:49:59.147300</ts>
    <user>Helena</user>
    <text>is there a live-reload server built into elm?</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T04:50:06.147500</ts>
    <user>Helena</user>
    <text>like elm reactor, but with live reload?</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T04:53:16.148700</ts>
    <user>Winford</user>
    <text>&lt;@Helena&gt;  &lt;https://github.com/halfzebra/create-elm-app&gt; provides live reload  and lot of tooling  for elm</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T05:07:28.149000</ts>
    <user>Lynn</user>
    <text>here’s another alternative &lt;https://github.com/simonh1000/elm-webpack-starter&gt;</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T05:13:55.149800</ts>
    <user>Joana</user>
    <text>&lt;@Helena&gt; &lt;http://github.com/wking-io/elm-live|github.com/wking-io/elm-live&gt; is something more lightweight without webpack</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T05:21:33.150900</ts>
    <user>Lionel</user>
    <text>&lt;@Helena&gt; or you can just use Parcel as well :package::heart: &lt;https://en.parceljs.org/elm.html&gt;</text>
  </message>
  <message conversation_id="1475">
    <ts>2019-05-07T05:43:33.151000</ts>
    <user>Huong</user>
    <text>Could it have something to do with the org being renamed to `microsoft`?</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T06:30:47.151700</ts>
    <user>Helena</user>
    <text>yesh, is parcel the new go to?</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T08:28:28.151800</ts>
    <user>Lynn</user>
    <text>indeed, I can see that there is a discrepancy between github and elm’s package manager</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T08:30:14.152000</ts>
    <user>Lynn</user>
    <text>repro by removing ~./elm</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T08:30:15.152200</ts>
    <user>Lynn</user>
    <text>and</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T08:30:25.152400</ts>
    <user>Lynn</user>
    <text>None</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T08:30:47.152800</ts>
    <user>Lynn</user>
    <text>installing with “microsoft” is also not possible</text>
  </message>
  <message conversation_id="1474">
    <ts>2019-05-07T08:53:13.154500</ts>
    <user>Huong</user>
    <text>Yeah, my best guess of what’s going on is this:
- package was published when it was `Microsoft`
- the hash of the zipball takes into account that it was named `Microsoft`
- now the org seems to be renamed to `microsoft`
- this means the zipball is every so slightly different, which gives you the hash issue
- even if it didn’t, it could still end up installing to a folder-name using `microsoft` rather than `Microsoft` which could give issues on case sensitive filesystems</text>
  </message>
  <message conversation_id="1476">
    <ts>2019-05-07T08:54:08.154700</ts>
    <user>Huong</user>
    <text>I’m not sure what the best course of action is - it might be best to push a 2.0.1 with a deprecation warning, and republish as `microsoft/...`</text>
  </message>
  <message conversation_id="1476">
    <ts>2019-05-07T08:55:20.154900</ts>
    <user>Lynn</user>
    <text>the bottom line is that the package cannot today be installed/used … unless you already have it in your `~./elm` cache</text>
  </message>
  <message conversation_id="1477">
    <ts>2019-05-07T10:15:00.156100</ts>
    <user>Kymberly</user>
    <text>elm-live is really easy, supports https, passes args to elm-make.  "new" /= better :wink:</text>
  </message>
  <message conversation_id="1478">
    <ts>2019-05-07T10:39:13.157300</ts>
    <user>Danika</user>
    <text>:package:</text>
  </message>
  <message conversation_id="1479">
    <ts>2019-05-07T11:40:39.159600</ts>
    <user>Earnestine</user>
    <text>may it be the case that the Elm 18 compiler is sometimes wrong with circular dependency errors?
I read it like this: the first listed module imports the second, the second the third and so on. It's right for the first few entries but then suddenly it lists something that's not right...</text>
  </message>
  <message conversation_id="1477">
    <ts>2019-05-07T12:05:13.159900</ts>
    <user>Noelle</user>
    <text>&lt;https://github.com/romariolopezc/elm-webpack-4-starter&gt; this is more like to build a full web app with SASS and other thingies</text>
  </message>
  <message conversation_id="1478">
    <ts>2019-05-07T12:05:14.160100</ts>
    <user>Noelle</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="1480">
    <ts>2019-05-07T19:04:41.161700</ts>
    <user>Willodean</user>
    <text>Can someone recommend to me a path to serverside rendering?</text>
  </message>
  <message conversation_id="1480">
    <ts>2019-05-07T21:08:01.162000</ts>
    <user>Erlene</user>
    <text>&lt;@Willodean&gt; use headless chrome?</text>
  </message>
  <message conversation_id="1480">
    <ts>2019-05-07T21:13:36.162300</ts>
    <user>Willodean</user>
    <text>HAHAHAHA no</text>
  </message>
  <message conversation_id="1481">
    <ts>2019-05-07T21:31:25.163300</ts>
    <user>Cornell</user>
    <text>Whats the problem with headless chrome?</text>
  </message>
  <message conversation_id="1481">
    <ts>2019-05-07T21:32:55.163700</ts>
    <user>Cornell</user>
    <text>I know there’s &lt;https://github.com/eeue56/elm-static-html&gt;, though don’t believe it’s up to date for 0.19</text>
  </message>
  <message conversation_id="1480">
    <ts>2019-05-07T22:37:09.164100</ts>
    <user>Erlene</user>
    <text>&lt;@Willodean&gt; what purpose? Not needed for SEO: &lt;https://webmasters.googleblog.com/2019/05/the-new-evergreen-googlebot.html&gt;</text>
  </message>
  <message conversation_id="1480">
    <ts>2019-05-07T22:45:32.165100</ts>
    <user>Willodean</user>
    <text>&lt;@Erlene&gt;  2 things. Performance and avoiding xhr requests.</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:31:51.165700</ts>
    <user>Allyn</user>
    <text>Hello. Is there a wait to compile in debug mode using elm reactor?</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:32:50.166000</ts>
    <user>Earlean</user>
    <text>&lt;@Allyn&gt; there is not</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:33:34.166700</ts>
    <user>Allyn</user>
    <text>I dont really see the interest of elm-reactor by now, I find it too limited</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:34:32.167700</ts>
    <user>Earlean</user>
    <text>the omission of the debugger from elm reactor I think was an oversight in the Elm 0.19 release.</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:35:20.168700</ts>
    <user>Earlean</user>
    <text>but elm reactor certainly isn't intended as your primary dev environment, it's a tool for getting started learning elm quickly</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:36:13.169800</ts>
    <user>Ruthann</user>
    <text>we've been using elm live in our workflow for the last two years, hasn't skipped a beat: &lt;https://github.com/wking-io/elm-live&gt;</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:36:15.169900</ts>
    <user>Allyn</user>
    <text>I was sugested  to use elm-reactor for an intro to elm workshop</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:36:40.170400</ts>
    <user>Allyn</user>
    <text>but the lack of debug mode is a no-go for me</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:37:20.171300</ts>
    <user>Allyn</user>
    <text>I also use elm-live for my day-to-day coding</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:37:24.171500</ts>
    <user>Ruthann</user>
    <text>haven't used it for a while, thought there was a debug flag in `elm make` no?</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:37:39.171700</ts>
    <user>Allyn</user>
    <text>yes</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:38:04.172300</ts>
    <user>Allyn</user>
    <text>Elm-live just propagate the flags after the double dash to elm make</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:38:35.173000</ts>
    <user>Ruthann</user>
    <text>then you could turn on debug mode using elm live and you'd have what elm-reactor doesn't have right?</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:43:21.178000</ts>
    <user>Allyn</user>
    <text>I was not clear about my context. I’m hosting an elm workshop, to help people discovering elm. It’s quite long (3 hours at least), and I’m often given 2 hours only to do it. So I’m looking for ideas to simplify/accelerate setup. I removed elm-live after the pilot session because it’s one more tool to install, and it adds one more way of doing things (in addition to elm make) =&amp;gt; it added some complexity. I was suggested recently I could use elm reactor instead, but If it does not provide the debug mode, I can’t show the debugger during the workshop...</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:44:30.178700</ts>
    <user>Ruthann</user>
    <text>&lt;https://ellie-app.com/new&gt; has the debugger built in now</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:45:39.179400</ts>
    <user>Allyn</user>
    <text>It could be an idea indeed. I’ll look at it. Thanks for the suggestion.</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:47:03.179800</ts>
    <user>Ruthann</user>
    <text>prolly as good as it gets, and you can intro ellie at the same time</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:51:40.180300</ts>
    <user>Allyn</user>
    <text>You can’t have more than one file in ellie?</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:54:30.180500</ts>
    <user>Ruthann</user>
    <text>don't think so :disappointed:</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:56:00.181700</ts>
    <user>Ruthann</user>
    <text>you'd have to keep your debugger part of the demo simple, pre made and share the links around</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T02:57:23.182700</ts>
    <user>Ruthann</user>
    <text>alternatively, create a repo with elm live, scripts to setup, install and get them to clone at start of demo</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T03:01:29.185600</ts>
    <user>Allyn</user>
    <text>scripts are not really required, as the setup is just `npm install -g elm elm-format elm-test`. The problem is with people who do not have npm, or the access right issues in linux when installing this on linux (&lt;https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally&gt;)</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T03:04:29.186800</ts>
    <user>Kimbery</user>
    <text>Feel like I'm missing something really obvious here,
&amp;gt; `Http.expectBytes GotData dataDecoder`
how do I write `dataDecoder` for the following?
```
type Msg
  = GotData Bytes
```
i.e. just grab the `Bytes` from the response body</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T03:09:12.187500</ts>
    <user>Huong</user>
    <text>I think `expectBytesResponse` is an easier path for that kind of thing</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T03:10:46.187800</ts>
    <user>Kimbery</user>
    <text>ah yep, just saw that, thanks!</text>
  </message>
  <message conversation_id="1482">
    <ts>2019-05-08T03:11:16.188200</ts>
    <user>Kimbery</user>
    <text>it does indeed expose the body directly, typed as `Bytes`</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T03:34:38.188300</ts>
    <user>Jin</user>
    <text>&lt;https://github.com/rogeriochaves/spades&gt; is an opinionated framework to write Elm apps. It also come with server-side rendering using `jsdom`. &lt;https://github.com/alexkorban/elmstatic&gt; also uses `isdom`, but it creates just static HTML.</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T03:35:01.188500</ts>
    <user>Jin</user>
    <text>I have not used either, but maybe it is something for you or gives you some inspiration.</text>
  </message>
  <message conversation_id="1484">
    <ts>2019-05-08T04:00:48.191100</ts>
    <user>Bethel</user>
    <text>Hi, JSON decoder masters, I have a json with a string field that I want to decode to custom type. That's easy, but that field also might be null and then it should decode to another type. If it's anything else, it should fail.
- "first" -&amp;gt; First
- "second" -&amp;gt; Second
- null -&amp;gt; Comment
- anything else should fail

```
decodeEvent =
  Json.string 
  |&amp;gt; Json.andThen (\str -&amp;gt;
    case str of
      "first" -&amp;gt; Json.succeed First
      "second" -&amp;gt; Json.succeed Second
      -- "null" -&amp;gt; Json.succeed Comment
      _ -&amp;gt; Json.fail &amp;lt;| "Unknown Event: " ++ str
    )
```
This is what I have, but I'm pretty sure that it fails for the null case because of decoding it as a string</text>
  </message>
  <message conversation_id="1484">
    <ts>2019-05-08T04:02:01.191900</ts>
    <user>Huong</user>
    <text>You could lift the `null` case out of there, and have something like `oneOf [ null Comment, decodeEvent ]`</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:19:50.194000</ts>
    <user>Emilee</user>
    <text>fudge... i'm trying to switch to parcel from webpack, and my elm resources aren't compiling anymore, with the "Map.!: given key is not an element in the map" error</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:21:57.194600</ts>
    <user>Nana</user>
    <text>seems weird that the bundler could have any impact on that :face_with_raised_eyebrow:</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:22:01.194700</ts>
    <user>Timika</user>
    <text>Try a version of parcel without the debugger.</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:22:13.195200</ts>
    <user>Emilee</user>
    <text>well, when using the bundler it doesn't compile, not generally^^</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:22:31.195600</ts>
    <user>Nana</user>
    <text>aah right, Parcel always runs with `--debug`</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:22:37.195700</ts>
    <user>Timika</user>
    <text>1.10.2 for example.</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:22:39.195900</ts>
    <user>Emilee</user>
    <text>how would i do that? i'm not entirely sure how to conf anything with parcel</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:22:43.196100</ts>
    <user>Emilee</user>
    <text>i c</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:23:08.196300</ts>
    <user>Emilee</user>
    <text>i assume there's no way at all to just tell it to not use the debugger?</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:23:21.196500</ts>
    <user>Timika</user>
    <text>Last time I checked there wasn’t, it’s a bit annoying. :disappointed:</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:23:57.196800</ts>
    <user>Nana</user>
    <text>you could probably edit the source code in node_modules if you really want</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:24:39.197000</ts>
    <user>Nana</user>
    <text>ofc it won't persist between reinstalls and such</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:25:05.197200</ts>
    <user>Timika</user>
    <text>…and on CI and who knows where else. :smile:</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:25:33.197400</ts>
    <user>Nana</user>
    <text>in CI you probably build for production though :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:25:42.197600</ts>
    <user>Timika</user>
    <text>Fair point :smile:</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:25:49.197800</ts>
    <user>Emilee</user>
    <text>maybe i should wait with this switch until 0.19.1 is out ^^'</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:26:08.198000</ts>
    <user>Emilee</user>
    <text>i really like the "correct by default" attitude of parcel, but our project is so weird that some config is going to be necessary</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:27:21.198200</ts>
    <user>Timika</user>
    <text>In some cases you can’t use the debugger, even without the `Map.!:` bug, it tends to smash the stack with large models. Hopefully both issues (configurable debugger and the compiler issue) will be fixed soon. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:30:53.198400</ts>
    <user>Nana</user>
    <text>like when you do millions of updates per second to emulate a GameBoy CPU? :laughing:</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T06:31:37.198600</ts>
    <user>Timika</user>
    <text>Let’s just say the amount of updates is… …unusually high. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1485">
    <ts>2019-05-08T07:39:26.198800</ts>
    <user>Carl</user>
    <text>I'll republish under the new org name. Thanks for the heads-up</text>
  </message>
  <message conversation_id="1486">
    <ts>2019-05-08T08:31:52.199700</ts>
    <user>Emilee</user>
    <text>there's so many bugs with parcel right now &amp;gt;_&amp;lt;</text>
  </message>
  <message conversation_id="1485">
    <ts>2019-05-08T08:59:50.202500</ts>
    <user>Allyn</user>
    <text>&lt;@Carl&gt; when building from intellij, I don’t see the file resulting from the compilation. Where should it be?</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T09:00:26.203200</ts>
    <user>Leoma</user>
    <text>I taught an Elm course and there were a surprising number of issues getting Elm set up on everyone’s machine. I would second recommendations for  Ellie.</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T09:10:42.203400</ts>
    <user>Allyn</user>
    <text>On my side, the two only issues I faced were the access right issues on linux, and the fact many people came to the workshop without having done the installation they were asked to do (so they had less time during the workshop). I’m talking of about 40 persons, so I may have more surprises later...</text>
  </message>
  <message conversation_id="1483">
    <ts>2019-05-08T09:12:31.203600</ts>
    <user>Allyn</user>
    <text>However, this discussion made me considering to create a lighter version of the workshop, without tests, and based on ellie.</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:22:01.206300</ts>
    <user>Willetta</user>
    <text>I'm also getting the "Map.!" error when in debug mode, and trying to debug something without the debug mode is really hard. Does anyone know of any workarounds? :(</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:23:06.206900</ts>
    <user>Huong</user>
    <text>My personal favourite: `update msg model = case Debug.log "msg" msg of ...`</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:24:40.208400</ts>
    <user>Willetta</user>
    <text>Ohhh! That's a good idea. Thanks! :)</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:25:04.208900</ts>
    <user>Allyn</user>
    <text>I use it too, but it’s limited compared to the debugger, so I hope this issue will be solved quite soon.</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:27:47.209500</ts>
    <user>Willetta</user>
    <text>Me too…</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:39:04.211400</ts>
    <user>Allyn</user>
    <text>Doesn’t Ellie allow making http requests?  &lt;https://ellie-app.com/5tVr3SMzBqFa1&gt;</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:40:06.212000</ts>
    <user>Alicia</user>
    <text>&lt;@Allyn&gt; it’s trying to connect to `&lt;http://httpbin.org&gt;` rather than `&lt;https://httpbin.org&gt;`, if you change it to https it should work</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:40:40.212300</ts>
    <user>Allyn</user>
    <text>looks better indeed</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:40:47.212700</ts>
    <user>Allyn</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:40:50.213000</ts>
    <user>Huong</user>
    <text>Browsers don’t like mixed content</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:41:09.213300</ts>
    <user>Allyn</user>
    <text>Is there any workaround for this?</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:43:05.214400</ts>
    <user>Huong</user>
    <text>I doubt it - might be that there’s a flag hidden away somewhere, but security features tend to be hard to disable</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:45:09.215100</ts>
    <user>Allyn</user>
    <text>ok</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:49:19.215500</ts>
    <user>Huong</user>
    <text>There may be some proxies that can handle this, though - e.g. throwing `&lt;https://jsonp.afeld.me/?url=&gt;` in front of the url. Naturally, that means making that proxy a man in the middle, giving it access to all traffic you send through it</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:51:39.215700</ts>
    <user>Allyn</user>
    <text>It’s just for a workshop, so it wouldn’t be a serious issue. But before trying that i’ll see if can activate https, it would be a better solution</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:54:14.215900</ts>
    <user>Allyn</user>
    <text>It worked :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1487">
    <ts>2019-05-08T11:54:40.216100</ts>
    <user>Allyn</user>
    <text>Thanks again for your help, &lt;@Huong&gt;</text>
  </message>
  <message conversation_id="1488">
    <ts>2019-05-08T12:33:11.219900</ts>
    <user>Albina</user>
    <text>I have been trying to test the accessiblity of some Elm pages using the Chromevox Chrome plugin. This plugin is made by Google and I believe is the standard screen reader on Chromebooks. Sometimes it works and sometimes it doesn't. For example, if you go to the elm-packages page then none of the links work if Chromevox is installed and running. Has anyone else had this issue and/or know what the cause is? Viewing the console shows that 100s of exceptions are being thrown each second.</text>
  </message>
  <message conversation_id="1488">
    <ts>2019-05-08T12:35:11.220900</ts>
    <user>Virgie</user>
    <text>does that extension modify the dom? Elm (and any framework with a virtual dom) does not like others touching their dom nodes. This is a common problem with various browser plugins</text>
  </message>
  <message conversation_id="1488">
    <ts>2019-05-08T12:51:02.224200</ts>
    <user>Albina</user>
    <text>Thanks &lt;@Virgie&gt;. It does. However, some Elm apps I've tried on the Made with Elm website do not seem to be affected by it so I wondered if anyone knew what particular feature of Elm causes the problem so it could be avoided. I want to make my Elm apps accessible and usable on Chromebooks so I'm going to have to figure out what the problem is.</text>
  </message>
  <message conversation_id="1488">
    <ts>2019-05-08T12:52:52.225500</ts>
    <user>Virgie</user>
    <text>it might be the program type. If elm just takes over an element on a page, then the extension might just not modify it, but if elm is responsible for the whole body then any modification will be a problem</text>
  </message>
  <message conversation_id="1488">
    <ts>2019-05-08T12:53:32.226200</ts>
    <user>Virgie</user>
    <text>a common pattern in extensions is that they add a child to &amp;lt;body&amp;gt;, so if you make sure that is allowed you're probably good</text>
  </message>
  <message conversation_id="1488">
    <ts>2019-05-08T12:54:11.226900</ts>
    <user>Albina</user>
    <text>Ok. Thanks for the tip. I'll investigate that.</text>
  </message>
  <message conversation_id="1489">
    <ts>2019-05-08T13:43:38.228100</ts>
    <user>Maxwell</user>
    <text>Hi, sorry, but is this code &lt;https://github.com/elm/browser/blob/1.0.0/examples/wasd.elm&gt; using 1.0.0 as it claims? It must be, but then is the documentation up to date or am I looking at the wrong place?</text>
  </message>
  <message conversation_id="1489">
    <ts>2019-05-08T13:43:38.228200</ts>
    <user>Maxwell</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events&gt;</text>
  </message>
  <message conversation_id="1489">
    <ts>2019-05-08T13:45:30.228700</ts>
    <user>Maxwell</user>
    <text>For example, the code uses `Keyboard.downs`, `Keyboard.ups`, etc., but the documentation says `onKeyDown`, `onKeyUp`.</text>
  </message>
  <message conversation_id="1490">
    <ts>2019-05-08T14:29:23.228800</ts>
    <user>Lea</user>
    <text>You’re looking at the right place, the docs haven’t been updated yet, there is an open pr for this. Here is the updated version &lt;https://github.com/elm/browser/blob/aeb21bc2cdaa542d63cb0ad65f4cde6f7ecbce6d/examples/wasd.elm&gt;</text>
  </message>
  <message conversation_id="1491">
    <ts>2019-05-08T21:41:11.229800</ts>
    <user>Shelli</user>
    <text>could anyone point me to the `elm-assets-loader` successor?</text>
  </message>
  <message conversation_id="1492">
    <ts>2019-05-08T23:52:20.230200</ts>
    <user>Lashawnda</user>
    <text>&lt;https://elmlang.slack.com/archives/C0MU81TEC/p1557373933022500&gt;</text>
  </message>
  <message conversation_id="1493">
    <ts>2019-05-09T01:39:35.235200</ts>
    <user>Genevieve</user>
    <text>Hey gu... almost slipped there ... people! I just started looking into elm-community/graph. anyone here know it? I’m thinking about NodeContexts. Don’t they mean that edges will be duplicated in the Graph as the incoming Edge of one Node will be the outgoing Edge of another?</text>
  </message>
  <message conversation_id="1489">
    <ts>2019-05-09T01:42:37.235300</ts>
    <user>Maxwell</user>
    <text>Oh, thanks! Do you understand what `Browser.Events.onVisibilityChange (always Blur)` there is for? If I remove it and re-compile, nothing appears to change.</text>
  </message>
  <message conversation_id="1489">
    <ts>2019-05-09T02:08:33.237400</ts>
    <user>Maxwell</user>
    <text>I need some help navigating the documentation. I often don't know if I'm looking at 0.19 stuff or older. For example, what's the difference between `elm-lang/animation-frame` and `elm/browser/onAnimationFrame`? What's up with `elm` and `elm-lang`?</text>
  </message>
  <message conversation_id="1489">
    <ts>2019-05-09T02:10:15.237800</ts>
    <user>Earlean</user>
    <text>&lt;@Maxwell&gt; all `elm-lang` packages are 0.18 packages</text>
  </message>
  <message conversation_id="1489">
    <ts>2019-05-09T02:10:45.238600</ts>
    <user>Maxwell</user>
    <text>And `elm` is the up-to-date stuff? :+1:</text>
  </message>
  <message conversation_id="1489">
    <ts>2019-05-09T02:10:59.239000</ts>
    <user>Earlean</user>
    <text>if you only search for packages from the index of &lt;https://package.elm-lang.org&gt; you'll only see results for 0.19 packages</text>
  </message>
  <message conversation_id="1489">
    <ts>2019-05-09T02:11:10.239300</ts>
    <user>Maxwell</user>
    <text>Great, thank you!</text>
  </message>
  <message conversation_id="1494">
    <ts>2019-05-09T03:02:51.239400</ts>
    <user>Lea</user>
    <text>Did you see the docs &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events#onVisibilityChange&gt; ?</text>
  </message>
  <message conversation_id="1494">
    <ts>2019-05-09T04:30:15.239700</ts>
    <user>Lynne</user>
    <text>A bullet-proof way to see the Elm version package was built for is to browse its source and check `elm.json` (for 0.19). If there is `elm-package.json` the package is definitely for 0.18 or lower.</text>
  </message>
  <message conversation_id="1495">
    <ts>2019-05-09T04:43:57.241100</ts>
    <user>Clarissa</user>
    <text>Is it possible to install both Elm versions 0.18 and 0.19 on the same development PC (running under Windows)? If so, how would I switch between them so that the elm-? commands still work correctly?</text>
  </message>
  <message conversation_id="1495">
    <ts>2019-05-09T04:45:50.242400</ts>
    <user>Jin</user>
    <text>I usually use `npm` for that, with `elm` as a dev dependency. You can then run the local version via `npx elm make`.</text>
  </message>
  <message conversation_id="1495">
    <ts>2019-05-09T05:10:16.243200</ts>
    <user>Cindie</user>
    <text>in different folder, npm install elm@0.18.0</text>
  </message>
  <message conversation_id="1496">
    <ts>2019-05-09T06:00:16.244100</ts>
    <user>Gertrude</user>
    <text>I have a question about event handling. Is it possible for a Msg to somehow accidentally be triggered multiple times at once, and if so how would this be handled by the runtime?</text>
  </message>
  <message conversation_id="1496">
    <ts>2019-05-09T06:02:09.244800</ts>
    <user>Lynne</user>
    <text>I can imagine an accidental double click on a button with an `onClick` handler which will lead to two successive messages sent into your `update` function</text>
  </message>
  <message conversation_id="1496">
    <ts>2019-05-09T06:03:10.245400</ts>
    <user>Lynne</user>
    <text>I think it is no different from any other JS framework</text>
  </message>
  <message conversation_id="1497">
    <ts>2019-05-09T06:44:43.246200</ts>
    <user>Maxwell</user>
    <text>Yes, it's the window's onfocus and onblur, but I was wondering why was it used in that example at all. I'm also having trouble understanding the difference between AnimationFrame and AnimationFrameDelta. We could do the same with just AnimationFrame, how extra useful is AnimationFrameDelta?</text>
  </message>
  <message conversation_id="1497">
    <ts>2019-05-09T06:45:05.246400</ts>
    <user>Maxwell</user>
    <text>Ah, good idea, thank you.</text>
  </message>
  <message conversation_id="1497">
    <ts>2019-05-09T06:45:51.246600</ts>
    <user>Maxwell</user>
    <text>Update: About onfocus, onblur, I got it. Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1497">
    <ts>2019-05-09T06:46:23.246800</ts>
    <user>Maxwell</user>
    <text>If you have any info on my question about AnimationFrame/Delta, share it my way please! :pray:</text>
  </message>
  <message conversation_id="1498">
    <ts>2019-05-09T06:55:41.247200</ts>
    <user>Mirtha</user>
    <text>hey folks - I have my backend api which returns an `image/png` (byte array) and I want to download it as a File and show it as preview image. How do i do this in Elm</text>
  </message>
  <message conversation_id="1497">
    <ts>2019-05-09T07:07:34.247300</ts>
    <user>Allison</user>
    <text>just insert it as a source of the img tag:
```
&amp;lt;img src="data:image/png;base64,[ENCODED STRING GOES HERE]"&amp;gt;
```</text>
  </message>
  <message conversation_id="1499">
    <ts>2019-05-09T08:29:12.248300</ts>
    <user>Gertrude</user>
    <text>What does the Float value in an Http.request timeout indicate? Seconds, milliseconds?</text>
  </message>
  <message conversation_id="1499">
    <ts>2019-05-09T08:35:28.248400</ts>
    <user>Kenya</user>
    <text>It is in milliseconds</text>
  </message>
  <message conversation_id="1499">
    <ts>2019-05-09T08:36:10.248700</ts>
    <user>Kenya</user>
    <text>It's being explained after the PUT example</text>
  </message>
  <message conversation_id="1500">
    <ts>2019-05-09T09:04:31.249900</ts>
    <user>Carl</user>
    <text>It’s just an error checker right now. Output goes to /dev/null.</text>
  </message>
  <message conversation_id="1500">
    <ts>2019-05-09T09:06:43.250100</ts>
    <user>Allyn</user>
    <text>so It means we must compile using the command line (with elm-live by example)</text>
  </message>
  <message conversation_id="1500">
    <ts>2019-05-09T09:16:32.251000</ts>
    <user>Carl</user>
    <text>Correct. In the future I’d like to improve this so that it can be totally standalone</text>
  </message>
  <message conversation_id="1501">
    <ts>2019-05-09T09:32:10.255600</ts>
    <user>Clarissa</user>
    <text>Thanks &lt;@Jin&gt; and &lt;@Cindie&gt;. I've settled on workspace installations of Elm (dev) with npm script aliases configured for various tasks. Elm 19 is a little nicer as I can run the Elm.exe directly for one-off commands but with Elm 18 I have to save a script alias first and run it with npm run. Overall it works ok and I can use the same script aliases whichever version of Elm is used.</text>
  </message>
  <message conversation_id="1501">
    <ts>2019-05-09T09:37:35.257200</ts>
    <user>Gertrude</user>
    <text>&lt;@Clarissa&gt; Generally what I have done is leave Elm strictly as an NPM dependency in projects, but another thing you could try is using `nvm` and setting up two environments, one for 0.18, and one for 0.19.</text>
  </message>
  <message conversation_id="1501">
    <ts>2019-05-09T09:38:04.257400</ts>
    <user>Clarissa</user>
    <text>nvm... ?</text>
  </message>
  <message conversation_id="1501">
    <ts>2019-05-09T09:38:23.257600</ts>
    <user>Gertrude</user>
    <text>&lt;https://github.com/nvm-sh/nvm&gt;</text>
  </message>
  <message conversation_id="1501">
    <ts>2019-05-09T09:38:56.258100</ts>
    <user>Clarissa</user>
    <text>Ah. interesting. :+1:</text>
  </message>
  <message conversation_id="1501">
    <ts>2019-05-09T09:39:11.258400</ts>
    <user>Gertrude</user>
    <text>it's sort of akin to tools like `pyenv/virtualenv` but for Node.</text>
  </message>
  <message conversation_id="1501">
    <ts>2019-05-09T09:39:26.258800</ts>
    <user>Gertrude</user>
    <text>For some reason it's the only way I could get Elm working at all on my Ubuntu dev box.</text>
  </message>
  <message conversation_id="1501">
    <ts>2019-05-09T09:50:22.259300</ts>
    <user>Danika</user>
    <text>I always use nvm on linux</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T10:41:08.259600</ts>
    <user>Inger</user>
    <text>&lt;@Lynne&gt; &lt;@Rochell&gt; As I understand from reading this. Instead of
```
Time.now
  |&amp;gt; Task.perform TimeMsg
```
I should
```
Process.sleep 1
  |&amp;gt; Task.andThen (always Time.now)
  |&amp;gt; Task.perform TimeMsg
```

Something like this?</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T10:41:54.259800</ts>
    <user>Lynne</user>
    <text>Yep, something like this</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T10:42:13.260100</ts>
    <user>Inger</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T10:54:40.261900</ts>
    <user>Lilli</user>
    <text>i just found a strange compiler error. not sure if i should post this in the elm-dev channel. Anyway...
```
ERROR in ./src/elm/Main.elm
Module build failed (from ./node_modules/elm-webpack-loader/index.js):
Error: Compiler process exited with error Compilation failed
Success! Compiled 1 module.
elm: Map.!: given key is not an element in the map
CallStack (from HasCallStack):
  error, called at ./Data/Map/Internal.hs:610:17 in containers-0.5.11.0-K2TDqgYtGUcKxAY1UqVZ3R:Data.Map.Internal

    at ChildProcess.&amp;lt;anonymous&amp;gt; (/node_modules/node-elm-compiler/dist/index.js:131:35)
    at ChildProcess.emit (events.js:189:13)
    at maybeClose (internal/child_process.js:970:16)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:259:5)
 @ ./src/static/index.js 32:18-40
 @ multi webpack-dev-server/client?&lt;http://localhost:8080&gt; ./src/static/index.js
```
have you ever seen something similar before?</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T10:56:11.262000</ts>
    <user>Huong</user>
    <text>Yeah, it’s the most common 0.19 compiler error. For what it’s worth, &lt;#C13L7S5GR|elm-dev&gt; is only for ongoing collaboration :slightly_smiling_face:

Are you by any chance passing the `--debug` flag?</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T10:58:39.262200</ts>
    <user>Lilli</user>
    <text>i started migrating from 0.18 to 0.19 last monday, about 7k LOC left

and yes, i'm using the debug flag</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T10:59:30.262400</ts>
    <user>Lilli</user>
    <text>i was reading the issues/1802 on GH, but it's marked as closed</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T11:00:12.262600</ts>
    <user>Huong</user>
    <text>Right, this is _mosty likely_ related to the debugger. A proper fix is in progress, and as it is being batched with some performance-issues due to laziness it will take a little while before it’s actually released.</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T11:08:17.262900</ts>
    <user>Alleen</user>
    <text>I started using version managers with `rbenv` for ruby, so now I’m using `nodenv` for node, `exenv` for elixir, `pyenv` for python, etc.

It’s nice having identical APIs for different version managers</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T11:08:47.263100</ts>
    <user>Lilli</user>
    <text>Ah! thanks for the info.
This will probably mean we will delay the migration though</text>
  </message>
  <message conversation_id="1503">
    <ts>2019-05-09T11:37:56.263600</ts>
    <user>Garnett</user>
    <text>&lt;https://github.com/elm/compiler/pull/1850&gt;</text>
  </message>
  <message conversation_id="1502">
    <ts>2019-05-09T11:46:40.263800</ts>
    <user>Lilli</user>
    <text>it also happends without the --debug flag, same as &lt;https://github.com/elm/compiler/issues/1916&gt;</text>
  </message>
  <message conversation_id="1503">
    <ts>2019-05-09T11:50:46.264100</ts>
    <user>Huong</user>
    <text>That one can be worked around - ```type Value r
    = Value

type alias BugVal r =
    Value { r | field : () }

type alias Bug r =
    BugVal r -&amp;gt; ()


bug : Bug {}
bug Value =
    ()```</text>
  </message>
  <message conversation_id="1503">
    <ts>2019-05-09T11:51:02.264300</ts>
    <user>Huong</user>
    <text>(and does not have the same rootcause)</text>
  </message>
  <message conversation_id="1504">
    <ts>2019-05-09T12:29:57.265600</ts>
    <user>Lu</user>
    <text>Can someone help me find the `Color` module? I'm upgrading to 0.19.0 and it has inexplicably disappeared and I'm having difficulty finding what happened to it.</text>
  </message>
  <message conversation_id="1504">
    <ts>2019-05-09T12:33:33.266800</ts>
    <user>Nana</user>
    <text>&lt;@Lu&gt; it got dropped - &lt;https://package.elm-lang.org/packages/avh4/elm-color/latest/&gt; is the recommended replacement I've heard</text>
  </message>
  <message conversation_id="1504">
    <ts>2019-05-09T12:35:24.268700</ts>
    <user>Nana</user>
    <text>for some reason it didn't deserve an official package I guess :man-shrugging:</text>
  </message>
  <message conversation_id="1504">
    <ts>2019-05-09T12:35:42.268800</ts>
    <user>Lu</user>
    <text>thanks &lt;@Nana&gt;. Why is this just not mentioned in the upgrade-doc (&lt;https://github.com/elm/compiler/blob/master/upgrade-docs/0.19.md&gt;)? Also, why does the elm/core `changelog.md` stop after 0.15? I'm feeling a bit anxious about going thru the upgrade process</text>
  </message>
  <message conversation_id="1505">
    <ts>2019-05-09T15:02:03.273900</ts>
    <user>Kymberly</user>
    <text>Hey all, I had an interesting problem to solve, thought I'd discuss solutions here since it was a fun one to wrap my hands around.  Reauthorizing and retrying HTTP requests after a `401` error.  But here's what made it interesting: lots and lots of requests in flight, but the `refresh_token` can only be used once.  So any request can fail, maybe lots of them, but they need to enter a "waiting queue" if a 401 hits and a refresh_token request is already in flight.</text>
  </message>
  <message conversation_id="1505">
    <ts>2019-05-09T15:03:14.275100</ts>
    <user>Kymberly</user>
    <text>I was already using `Task`s to control the flow of Http requests (many of the requests resulted in a chain of requests; fetching a "folder" also sent requests for each "file" in the folder, and recursive requests for each subfolder)</text>
  </message>
  <message conversation_id="1505">
    <ts>2019-05-09T15:03:35.275400</ts>
    <user>Kymberly</user>
    <text>what I ended up with was:
```
type RetryTask a
    = Retry (Task.Task Http.Error (RetryTask a))
    | Success a


reAuth : Task.Task Http.Error a -&amp;gt; Task.Task Http.Error (RetryTask a)
```</text>
  </message>
  <message conversation_id="1505">
    <ts>2019-05-09T15:05:29.277500</ts>
    <user>Kymberly</user>
    <text>what I _really_ wanted was a way to have the Task queuing independent of the `update` function, but I'm pretty sure that's impossible.  Once a request fails (and sends `Retry task`) that needs to be turned into a message, and the `update` code passes these tasks into a request queue, depending on the `model.authStatus` (where `Reauthing` means "queue the task, wait for `ReauthResult`).</text>
  </message>
  <message conversation_id="1505">
    <ts>2019-05-09T15:05:48.277900</ts>
    <user>Kymberly</user>
    <text>anyway, if someone else has tackled this another way, I'd love to hear about it.</text>
  </message>
  <message conversation_id="1506">
    <ts>2019-05-09T16:20:08.281300</ts>
    <user>Alicia</user>
    <text>rather than storing the tasks, how about a data structure that describes the tasks, then you can put those in a queue, something like
```
type ApiCall =
    FetchFolder String
    | FetchFile String

type ErrorWithRetry = ErrorWithRetry Http.Error ApiCall
```
then your error type on the task would include how to recreate the api call</text>
  </message>
  <message conversation_id="1507">
    <ts>2019-05-09T16:57:29.282300</ts>
    <user>Amiee</user>
    <text>hey folks, just a simple question: can you react to stack overflows (too much recursion) in elm? in chome there's a surprisingly low stack size (firefox works fine)</text>
  </message>
  <message conversation_id="1507">
    <ts>2019-05-09T16:59:37.283200</ts>
    <user>Alicia</user>
    <text>&lt;@Amiee&gt; it depends, elm supports tail recursion so you may be able to make it into a tail recursive call, what is the code doing?</text>
  </message>
  <message conversation_id="1507">
    <ts>2019-05-09T17:00:14.283600</ts>
    <user>Alicia</user>
    <text>also known as tail call optimization</text>
  </message>
  <message conversation_id="1506">
    <ts>2019-05-09T17:13:37.289700</ts>
    <user>Nedra</user>
    <text>If I need to use Type as key in a Dict, is `AllDict` still way to go?</text>
  </message>
  <message conversation_id="1506">
    <ts>2019-05-09T17:14:03.289900</ts>
    <user>Guadalupe</user>
    <text>I've just stumbled across chadtech/elm-relational-database - do you know if it can cope with associative entities (that only contain keys, to resolve many-to-many relationships) or joined pairs of one-many relationships of even one-many relationships? I can't see how this fits into the Id, Item pairing - these relationships don't seem to be covered in Richard Feldman's Immutable relational data talk either -</text>
  </message>
  <message conversation_id="1506">
    <ts>2019-05-09T17:19:06.292400</ts>
    <user>Guadalupe</user>
    <text>&lt;@Nedra&gt; we've been thinking along the same lines - I've been using that package but just come across elm-relationsional-databases - I think it is a dict with an Id Type defined - so not a type you define but one exposed by the package</text>
  </message>
  <message conversation_id="1506">
    <ts>2019-05-09T17:21:22.292500</ts>
    <user>Allison</user>
    <text>I was avoiding this problem for a while now (most of the app is public, just the “administration” needs authorisation) but I will have to think about it soon.. anyway, my basic idea was to offload this whole code to js using ports and keep the whole networking stuff there.. you wouldn’t have to pass the requests collection to all nested models.. opinions?</text>
  </message>
  <message conversation_id="1506">
    <ts>2019-05-09T17:24:54.293700</ts>
    <user>Nedra</user>
    <text>Yeah, something along, but I don't really need a relational DB. Just a Dict with Type as key :smile:</text>
  </message>
  <message conversation_id="1506">
    <ts>2019-05-09T17:33:26.295900</ts>
    <user>Guadalupe</user>
    <text>I liked this package: pzp1997/assoc-list/ there's an implementation of sets based on it as well. There's also any-dict, but I haven't tried it.</text>
  </message>
  <message conversation_id="1506">
    <ts>2019-05-09T17:39:05.296200</ts>
    <user>Nedra</user>
    <text>will check, thanks!</text>
  </message>
  <message conversation_id="1508">
    <ts>2019-05-09T18:26:08.297200</ts>
    <user>Amiee</user>
    <text>&lt;@Alicia&gt; Thanks for that hint, I haven't thought of that yet, I will try that</text>
  </message>
  <message conversation_id="1509">
    <ts>2019-05-09T20:30:56.299100</ts>
    <user>Nana</user>
    <text>&lt;@Guadalupe&gt; for many-to-many relationships you could use a list of Ids</text>
  </message>
  <message conversation_id="1510">
    <ts>2019-05-09T22:15:21.301300</ts>
    <user>Leoma</user>
    <text>RE relational DB in elm… I put together a simple Set implementation that is backed by a List and uses `==`  for membership checks.
&lt;https://github.com/z5h/elm-oottp/blob/master/src/ListBackedSet.elm&gt;
There is a `product : Set x -&amp;gt; Set y -&amp;gt; Set ( x, y )` which is essentially a join. With that and mapping and filtering you get everything you need.
e.g.
```
enrollmentView : EssentialModel -&amp;gt; Set ( Student, Course )
enrollmentView essentialModel =
    Set.product essentialModel.students essentialModel.courses
        |&amp;gt; Set.product essentialModel.enrollments
        |&amp;gt; Set.filter
            (\( enrollment, ( student, course ) ) -&amp;gt;
                enrollment.studentId
                    == student.id
                    &amp;amp;&amp;amp; enrollment.courseId
                    == course.id
            )
        |&amp;gt; Set.map
            (\( enrollment, ( student, course ) ) -&amp;gt;
                ( student, course )
            )
```
&lt;https://github.com/z5h/elm-oottp/blob/master/src/Essential.elm#L44&gt;</text>
  </message>
  <message conversation_id="1511">
    <ts>2019-05-10T01:29:59.302200</ts>
    <user>Raeann</user>
    <text>We just released in production our first large Elm application!

&lt;https://login.account.rakuten.com/sso/register?client_id=rakuten_tw01&amp;amp;redirect_uri=https%3A%2F%2Fwww.rakuten.com.tw%2Fmember%2Fdelegate#/registration/1&gt;

It is an Authentication/Registration system.
```
~ 20,000 lines of Elm/elm-ui
~    300 lines of Javascript
~     10 lines of CSS (thank you, IE)
~    100 KB of compressed Javascript
```
This follows the other two small Elm projects released a while ago:

&lt;https://rakutentech.github.io/&gt;
&lt;https://static.id.rakuten.co.jp/static/about_security/jpn/&gt;

It has been a long journey but totally worth it!</text>
  </message>
  <message conversation_id="1512">
    <ts>2019-05-10T03:48:21.304500</ts>
    <user>Arie</user>
    <text>I want to prevent the user from using browser back button after logout. Currently I clear the model when logout is clicked but It would be nicer if back-button does not work after logout. Any suggestions?</text>
  </message>
  <message conversation_id="1513">
    <ts>2019-05-10T06:14:56.305500</ts>
    <user>Emilee</user>
    <text>please, *please* never interfere with a navigation methods of the user agent. losing access to the back button results in a sudden break in usage patterns.
since you know about the session state of a user, why not just show a "you are no longer logged in" message when a restricted route is accessed?</text>
  </message>
  <message conversation_id="1512">
    <ts>2019-05-10T07:12:57.305900</ts>
    <user>Arie</user>
    <text>I agree. The api calls to backend obviously do not work, but the empty gui can be viewed by pressing back. I need to check if there is an access-token, and only display pages  then.</text>
  </message>
  <message conversation_id="1514">
    <ts>2019-05-10T08:06:47.309000</ts>
    <user>Lauren</user>
    <text>I'm having an issue with ```Task.attempt (HandleFocusResult id) (Dom.focus id)``` in IE, has anyone dealt with this? It doesn't fail, but &amp;lt;input id=id&amp;gt; doesn't receive the focus. In the docs it mentions how to handle silent fails of Dom.focus, but wanted to ask here in case I'm missing something.</text>
  </message>
  <message conversation_id="1515">
    <ts>2019-05-10T08:30:23.309600</ts>
    <user>Fred</user>
    <text>I’ve just installed `excoveralls`, but when I run it I get:

```
➜  alchemy git:(admin_panel) ✗ mix coveralls                                                                                       &amp;lt;&amp;lt;&amp;lt;
** (exit) an exception was raised:
    ** (MatchError) no match of right hand side value: :error
        cover.erl:1580: :cover.do_compile_beam2/5
        cover.erl:1480: :cover.do_compile_beam/3
        (stdlib) lists.erl:1239: :lists.map/2
        cover.erl:2793: anonymous fn/2 in :cover.pmap_spawn/4
    cover.erl:585: :cover.call/1
    lib/excoveralls.ex:32: ExCoveralls.start/2
    (mix) lib/mix/tasks/test.ex:351: Mix.Tasks.Test.run/1
    (mix) lib/mix/task.ex:331: Mix.Task.run_task/3
    (mix) lib/mix/task.ex:365: Mix.Task.run_alias/3
    (mix) lib/mix/task.ex:292: Mix.Task.run/2
    lib/mix/tasks.ex:54: Mix.Tasks.Coveralls.do_run/2
    (mix) lib/mix/task.ex:331: Mix.Task.run_task/3
```

Has anyone ever seen that before?</text>
  </message>
  <message conversation_id="1515">
    <ts>2019-05-10T08:32:30.309700</ts>
    <user>Lashawna</user>
    <text>I get that Elm and Elixir frequently come together, but I think this is more of a question for the Elixir community</text>
  </message>
  <message conversation_id="1515">
    <ts>2019-05-10T08:33:18.309900</ts>
    <user>Fred</user>
    <text>Whoops</text>
  </message>
  <message conversation_id="1515">
    <ts>2019-05-10T08:33:43.310100</ts>
    <user>Fred</user>
    <text>All channels called “general” look the same in the Slack app :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1516">
    <ts>2019-05-10T08:49:01.310800</ts>
    <user>Maxwell</user>
    <text>Great!</text>
  </message>
  <message conversation_id="1517">
    <ts>2019-05-10T09:15:17.312700</ts>
    <user>Allyn</user>
    <text>Hello. To get the response headers of an http request, I understand I must use an “elaborate expectation”, like expectStringResponse (&lt;https://package.elm-lang.org/packages/elm/http/latest/Http#expectStringResponse&gt;), instead of expectString. Am I correct?</text>
  </message>
  <message conversation_id="1517">
    <ts>2019-05-10T09:17:53.313900</ts>
    <user>Renay</user>
    <text>you're right, you need to use expectStringResponse.. in fact I did a small write up on extracting headers! &lt;https://medium.com/@girishso/extracting-http-headers-in-elm-7034d5bfecb2&gt;</text>
  </message>
  <message conversation_id="1517">
    <ts>2019-05-10T09:19:06.314400</ts>
    <user>Allyn</user>
    <text>It will be useful! Thanks &lt;@Renay&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1515">
    <ts>2019-05-10T10:02:26.315300</ts>
    <user>Kymberly</user>
    <text>Blasphemy! :wink:  I already had an `Helper` model that is passed to all my Elm apps/child-apps, and this queue code fit right in there.  I also have translation helpers, date generators (during testing these use a constant value instead of requesting `Time.now`), and network client credentials.  Anyway it was a suitable place, so adding this cost basically nothing.</text>
  </message>
  <message conversation_id="1515">
    <ts>2019-05-10T10:03:20.315600</ts>
    <user>Kymberly</user>
    <text>I did have to pass my network requests in an extra `|&amp;gt; Network.queue &lt;http://model.helpers.net|model.helpers.net&gt;`, that's almost it on the model side.  The `Retry`'s are handled by the top-most app.</text>
  </message>
  <message conversation_id="1515">
    <ts>2019-05-10T10:06:40.315800</ts>
    <user>Kymberly</user>
    <text>Yes, this actually comes up too, in a way.  To queue the tasks, we need to store both the task _and_ the `Msg` that receives the successful result.  Storing `ApiCall` instead of a Task is conceptually very similar, but doesn't scale to handling requests on other APIs (this project is a marketing dashboard, we are interfacing with a lot of APIs, this `Retry` code works on all of them).</text>
  </message>
  <message conversation_id="1518">
    <ts>2019-05-10T10:18:11.316000</ts>
    <user>Allyn</user>
    <text>Your code is based on elm 01.8, isn’t it?</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T11:01:06.317800</ts>
    <user>Evonne</user>
    <text>How do you reinstall the packages in 0.19. Out of habbit I did `rm -rf elm-stuff` and then `elm install` but it doesn't work like that anymore.</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T11:01:35.318200</ts>
    <user>Evonne</user>
    <text>I also removed the `.elm` directory</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T11:04:02.319200</ts>
    <user>Lynne</user>
    <text>Install them one-by-one as they’re listed in your `elm.json`. And do not remove `.elm` directory in the future…</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T11:04:28.319700</ts>
    <user>Huong</user>
    <text>if the `elm.json` file is still there, you can just run `elm make`</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T11:05:20.320900</ts>
    <user>Huong</user>
    <text>There’s no need to `elm install` if `elm.json` is correct</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T11:09:52.321200</ts>
    <user>Evonne</user>
    <text>I get invalid import as an error message</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T11:16:42.321900</ts>
    <user>Huong</user>
    <text>Then something else is likely amiss. What’s the error, and what’s in your `elm.json`?</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T11:18:39.322100</ts>
    <user>Evonne</user>
    <text>`I cannot find a Http import. These names seem close though:`</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T11:19:36.322900</ts>
    <user>Evonne</user>
    <text>This is in elm.json `            "elm/http": "2.0.0",`</text>
  </message>
  <message conversation_id="1519">
    <ts>2019-05-10T12:12:14.326200</ts>
    <user>Huong</user>
    <text>(moving to thread so it doesn’t get lost)</text>
  </message>
  <message conversation_id="1520">
    <ts>2019-05-10T12:12:15.326400</ts>
    <user>Huong</user>
    <text>Is it in your direct dependencies?</text>
  </message>
  <message conversation_id="1520">
    <ts>2019-05-10T12:12:19.326600</ts>
    <user>Huong</user>
    <text>Are you running `elm make` in the same folder as your elm.json lives?</text>
  </message>
  <message conversation_id="1520">
    <ts>2019-05-10T12:12:59.327200</ts>
    <user>Guadalupe</user>
    <text>&lt;@Nana&gt; Yea, thanks for that confirmation  - I'm doing that in an app with simple needs - but what about a one-many that needs compound keys? I think that for 'proper' relational algebra &lt;@Leoma&gt; 5h is pointing the way</text>
  </message>
  <message conversation_id="1520">
    <ts>2019-05-10T12:30:11.327400</ts>
    <user>Leoma</user>
    <text>I do have an updated version of that “relational” ListSet.  With diff, intersect, and such.
&lt;https://gist.github.com/z5h/d55fb702ad1dc91107fe74835f1dbc6c&gt;</text>
  </message>
  <message conversation_id="1521">
    <ts>2019-05-10T12:39:02.328000</ts>
    <user>Nana</user>
    <text>I think you could also just do something like this?
```
listA |&amp;gt; List.map (\a -&amp;gt; listB |&amp;gt; List.filter (\b -&amp;gt; b.foo == a.foo &amp;amp;&amp;amp; b.bar == a.bar)
```</text>
  </message>
  <message conversation_id="1521">
    <ts>2019-05-10T13:00:30.328700</ts>
    <user>Leoma</user>
    <text>Im using sets as intended by the relational algebra, and a nice bonus is that the cartesian product of these sets must naturally be a set as well (no deduping needed). So that gives us some nice guarantees we can use to optimize our sets built on `==` semantics. </text>
  </message>
  <message conversation_id="1522">
    <ts>2019-05-10T13:04:08.331300</ts>
    <user>Sofia</user>
    <text>What do y'all use for documentation searching in elm? `&lt;http://package.elm-lang.org|package.elm-lang.org&gt;` is okay for searching inside a package, but not for searching across all packages. The dash docs (even tho updated recently) seem to be missing some files. Is there something like `&lt;http://devdocs.io|devdocs.io&gt;`?</text>
  </message>
  <message conversation_id="1521">
    <ts>2019-05-10T13:10:28.332600</ts>
    <user>Nana</user>
    <text>&lt;@Sofia&gt; with intellij-elm you can just hover over any function to see the docs for it, and also in the auto-complete list</text>
  </message>
  <message conversation_id="1521">
    <ts>2019-05-10T13:10:54.332800</ts>
    <user>Vallie</user>
    <text>I am using Browser.Events.onKeyPress but things are not working as expected.
So I wanted to see exactly what was being passed.
The code I have used for the decoder passed to onKeypress is ...
	Json.Decode.value
		|&amp;gt; Json.Decode.map (Json.Encode.encode 0)
		|&amp;gt; json.Decode.map SetLastKeyPressInfo

While this compiles, all I get in lastKeyPressInfo is "{}".

How do I fix this?</text>
  </message>
  <message conversation_id="1521">
    <ts>2019-05-10T13:13:07.333000</ts>
    <user>Alicia</user>
    <text>the thing that gives me pause with storing the tasks is that it is storing a function on the model, it’ll break the import/export from the debugger and it is possible to get runtime exceptions if someone ever tries to compare the tasks for equality with `==`.  Could another way be doing exponential backoff on retries? Say the first time it fails it waits 2 seconds before retrying, then 4 for another try, then 16 for a third try, if it is still failing at that point something went wrong and it probably won’t ever succeed</text>
  </message>
  <message conversation_id="1521">
    <ts>2019-05-10T13:21:35.333700</ts>
    <user>Sofia</user>
    <text>`mfarmiloe`: looks like you aren't decoding the `"key" field`</text>
  </message>
  <message conversation_id="1521">
    <ts>2019-05-10T13:21:35.333900</ts>
    <user>Sofia</user>
    <text>&lt;https://github.com/elm/browser/blob/1.0.0/notes/keyboard.md&gt;</text>
  </message>
  <message conversation_id="1521">
    <ts>2019-05-10T13:27:17.334100</ts>
    <user>Vallie</user>
    <text>But i want to see what other fields are being passed, such as shiftKey and altKey.</text>
  </message>
  <message conversation_id="1523">
    <ts>2019-05-10T13:53:11.335100</ts>
    <user>Carman</user>
    <text>&lt;@Vallie&gt; I tried doing something similar to you and when I press a key (Chrome on MacOS) I get:
```
{ "isTrusted": true }
```</text>
  </message>
  <message conversation_id="1523">
    <ts>2019-05-10T13:53:18.335300</ts>
    <user>Carman</user>
    <text>&lt;https://ellie-app.com/5vR4q3TQ8JYa1&gt;</text>
  </message>
  <message conversation_id="1523">
    <ts>2019-05-10T13:54:04.336100</ts>
    <user>Carman</user>
    <text>However, if I manually decode values out of the event I can get output like:
```
{ alt = False, key = "a", shift = False }
```</text>
  </message>
  <message conversation_id="1523">
    <ts>2019-05-10T13:54:11.336300</ts>
    <user>Carman</user>
    <text>&lt;https://ellie-app.com/5vR4n2RVZMJa1&gt;</text>
  </message>
  <message conversation_id="1523">
    <ts>2019-05-10T13:57:53.338600</ts>
    <user>Carman</user>
    <text>Stringifying generic DOM events is tricky because they contain cycles (e.g. `event.target.parent.children`). Also many of the fields are special types that kind of act like normal JS values but aren't (e.g. `NodeList`).</text>
  </message>
  <message conversation_id="1523">
    <ts>2019-05-10T13:59:50.340200</ts>
    <user>Carman</user>
    <text>For these reasons, calling `Encode.encode` on an event object can potentially be dangerous. I remember seeing something about `Encode.encode` stripping fields from DOM events but don't remember the details.</text>
  </message>
  <message conversation_id="1523">
    <ts>2019-05-10T14:00:12.340700</ts>
    <user>Carman</user>
    <text>I think that might be what's happening here</text>
  </message>
  <message conversation_id="1523">
    <ts>2019-05-10T14:13:52.340800</ts>
    <user>Rico</user>
    <text>&lt;https://klaftertief.github.io/elm-search/&gt;</text>
  </message>
  <message conversation_id="1524">
    <ts>2019-05-10T14:50:05.341100</ts>
    <user>Sofia</user>
    <text>Dang, wish it worked for package names as well. `Pipeline` returns nothing, for example :confused:</text>
  </message>
  <message conversation_id="1525">
    <ts>2019-05-10T15:20:15.341300</ts>
    <user>Timika</user>
    <text>&lt;@Jin&gt; is working on improvements though :slightly_smiling_face: (mentioning him so he sees your feature request)</text>
  </message>
  <message conversation_id="1525">
    <ts>2019-05-10T15:27:45.341500</ts>
    <user>Sofia</user>
    <text>Oho, fantastic!</text>
  </message>
  <message conversation_id="1526">
    <ts>2019-05-10T15:54:32.343200</ts>
    <user>Nedra</user>
    <text>What is the easiest way of converting a `Type` to comparable type?
I imagine there could be a function that would convert Type to some hashed value, so I could use it in key for Dict :thinking_face:</text>
  </message>
  <message conversation_id="1526">
    <ts>2019-05-10T15:57:17.344000</ts>
    <user>Niesha</user>
    <text>In 0.18 there used to be `toString`, but that got forced out, so you gotta write one manually.</text>
  </message>
  <message conversation_id="1526">
    <ts>2019-05-10T15:58:22.344300</ts>
    <user>Alicia</user>
    <text>one way for 0.19 is using the pattern that &lt;https://package.elm-lang.org/packages/turboMaCk/any-dict/latest/&gt; does</text>
  </message>
  <message conversation_id="1526">
    <ts>2019-05-10T15:59:02.344500</ts>
    <user>Alicia</user>
    <text>or &lt;https://package.elm-lang.org/packages/pzp1997/assoc-list/latest/&gt;</text>
  </message>
  <message conversation_id="1526">
    <ts>2019-05-10T15:59:42.344700</ts>
    <user>Nedra</user>
    <text>:bow:</text>
  </message>
  <message conversation_id="1526">
    <ts>2019-05-10T16:03:03.345200</ts>
    <user>Nedra</user>
    <text>assoc-list is a list behind the scenes? and update maps through elements? Waat :smile:</text>
  </message>
  <message conversation_id="1526">
    <ts>2019-05-10T16:28:21.345900</ts>
    <user>Nedra</user>
    <text>And it seems that any-dict still requires to figure out how to convert `Type` to some comparable :confused: Like I have to implement my own function, and I really don't want to write a long switch case for like 10+values :smile:</text>
  </message>
  <message conversation_id="1527">
    <ts>2019-05-10T16:43:12.347000</ts>
    <user>Leoma</user>
    <text>I just shared this elsewhere &lt;https://gist.github.com/z5h/d55fb702ad1dc91107fe74835f1dbc6c&gt;
It’s a set based on `==` semantics. Optimizing where possible. (e.g. partitioning doesn’t require deduping)</text>
  </message>
  <message conversation_id="1527">
    <ts>2019-05-10T16:43:32.347400</ts>
    <user>Leoma</user>
    <text>Just throw whatever you like in there, and don’t worry about it.</text>
  </message>
  <message conversation_id="1527">
    <ts>2019-05-10T16:45:34.348000</ts>
    <user>Leoma</user>
    <text>Sorry, I see above you’ve looked at an assoc list. What’s the issue with that?</text>
  </message>
  <message conversation_id="1527">
    <ts>2019-05-10T16:49:05.348100</ts>
    <user>Nedra</user>
    <text>I guess I can use it, I just find it not a good solution under the hood. Just wanted to find out if there is any better approach available</text>
  </message>
  <message conversation_id="1527">
    <ts>2019-05-10T16:51:46.348300</ts>
    <user>Leoma</user>
    <text>Are you concerned about performance with an assoc list? I’m using them in an animation framework and they’re more than fast enough until they have 100s-1000s of elements in them.
Up to a point they are faster than dicts.</text>
  </message>
  <message conversation_id="1527">
    <ts>2019-05-10T16:52:33.348500</ts>
    <user>Leoma</user>
    <text>It would be nice if everything was comparable, but alas, we don’t have that. (yet?)</text>
  </message>
  <message conversation_id="1527">
    <ts>2019-05-10T16:55:06.348700</ts>
    <user>Nedra</user>
    <text>yeah, I guess you are right I could just go with assoc list</text>
  </message>
  <message conversation_id="1527">
    <ts>2019-05-10T16:55:57.348900</ts>
    <user>Nedra</user>
    <text>But still, as I saw somewhere in github in one of the issues &lt;@Marcellus&gt; made about this topic, it didn't seem like there is a plan to do this.</text>
  </message>
  <message conversation_id="1527">
    <ts>2019-05-10T17:24:26.349100</ts>
    <user>Evonne</user>
    <text>Thx ilias. Yes for both.</text>
  </message>
  <message conversation_id="1528">
    <ts>2019-05-10T18:36:37.352700</ts>
    <user>Vallie</user>
    <text>&lt;@Carman&gt; Thanks for the background on the DOM events. i just wanted to know why what I was trying wasn't working. Is there a way to capture in Elm the details of the DOM events by using something other than encode? Or should I be reading the Javascript documentation :grinning:?</text>
  </message>
  <message conversation_id="1528">
    <ts>2019-05-10T18:45:49.352900</ts>
    <user>Lu</user>
    <text>```case n of
    (-1) -&amp;gt; 
```
why does Elm 0.19.0 no longer like this?</text>
  </message>
  <message conversation_id="1528">
    <ts>2019-05-10T18:47:47.353700</ts>
    <user>Lu</user>
    <text>I have run into too many undocumented breaking changes during my upgrade to 0.19.0 :white_frowning_face:</text>
  </message>
  <message conversation_id="1529">
    <ts>2019-05-10T19:59:37.354700</ts>
    <user>Dede</user>
    <text>It doesn’t handle cases of negative numbers.  I’m unclear if that is by intent or a bug.  </text>
  </message>
  <message conversation_id="1530">
    <ts>2019-05-10T20:31:34.354900</ts>
    <user>Huong</user>
    <text>Interesting! Can you share the entire elm.json?</text>
  </message>
  <message conversation_id="1531">
    <ts>2019-05-10T23:25:59.356300</ts>
    <user>Cammy</user>
    <text>Is anyone generating automated fuzz tests for json decoders from json schema?</text>
  </message>
  <message conversation_id="1530">
    <ts>2019-05-11T00:13:28.356800</ts>
    <user>Kris</user>
    <text>Definitely a bug in the grammar </text>
  </message>
  <message conversation_id="1532">
    <ts>2019-05-11T03:29:12.362500</ts>
    <user>Ashlee</user>
    <text>Hey everyone, I posted this on elm-discuss also but I thought I'd share it here too. I explored what would happen if we thought of components as relational data and came up with a nice way to create reusable components. A great example when this would be useful is if you have an advanced form component or a sortable table that you would like to reuse on different pages. With the usual approach you would need to wire up the update/command/init/model for each page but with this approach you will only need to do it once. Another case this would be useful is if you have a dynamic form, in which case this approach makes it trivial to add hundreds of forms. I'd love to get more people's thought on it :slightly_smiling_face:.

Here's an example I created:
&lt;https://github.com/MarcCoquand/elm-relational-components-poc&gt;</text>
  </message>
  <message conversation_id="1532">
    <ts>2019-05-11T03:34:29.362600</ts>
    <user>Niesha</user>
    <text>Sounds like less work to just generate the json decoders instead.</text>
  </message>
  <message conversation_id="1533">
    <ts>2019-05-11T08:58:53.364600</ts>
    <user>Hoa</user>
    <text>My advice is to comment here with relevant production code: &lt;https://github.com/elm/compiler/issues/1773&gt;</text>
  </message>
  <message conversation_id="1534">
    <ts>2019-05-11T10:16:17.365400</ts>
    <user>Danika</user>
    <text>Easiest way to save all of package.elm-lang for offline viewing?</text>
  </message>
  <message conversation_id="1532">
    <ts>2019-05-11T10:27:05.366000</ts>
    <user>Niesha</user>
    <text>Hardcore version? `wget --mirror --convert-links --adjust-extension --page-requisites --no-parent`</text>
  </message>
  <message conversation_id="1535">
    <ts>2019-05-11T10:49:31.366100</ts>
    <user>Nana</user>
    <text>put this in your browser console :wink:
`addEventListener("keydown", console.log)`</text>
  </message>
  <message conversation_id="1535">
    <ts>2019-05-11T10:53:25.367100</ts>
    <user>Danika</user>
    <text>hmmm :thinking_face:</text>
  </message>
  <message conversation_id="1535">
    <ts>2019-05-11T10:58:56.368000</ts>
    <user>Danika</user>
    <text>All the docs get pulled from their respective github repos don't they :confused:</text>
  </message>
  <message conversation_id="1536">
    <ts>2019-05-11T11:31:43.368100</ts>
    <user>Vallie</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="1536">
    <ts>2019-05-11T11:54:09.368300</ts>
    <user>Allison</user>
    <text>I currently only pass the session to all submodels, but I guess will do the same as you.. I spent a lot of time debugging the current 30 lines of js, so it will be better not to make its code base larger..</text>
  </message>
  <message conversation_id="1535">
    <ts>2019-05-11T12:45:34.371400</ts>
    <user>Jin</user>
    <text>&lt;@Danika&gt; There is &lt;https://github.com/drathier/elm-offline&gt;, though I have not used it. 
And the docs are served from the package website, not GitHub. You can inspect the requests the Elm package website does. </text>
  </message>
  <message conversation_id="1535">
    <ts>2019-05-11T14:34:39.371700</ts>
    <user>Danika</user>
    <text>Oh amazing, thanks! </text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T21:36:04.373600</ts>
    <user>Emil</user>
    <text>Having a HUGE issue here... Elm just crashed a bunch of our servers</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T21:36:15.374100</ts>
    <user>Emil</user>
    <text>need help ASAP</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T21:36:26.374400</ts>
    <user>Emil</user>
    <text>CIO breathing down my neck</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T21:38:20.375500</ts>
    <user>Wendell</user>
    <text>That sounds unlikely to me. How did it crash the servers?</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T21:38:53.376100</ts>
    <user>Emil</user>
    <text>hold on, I'll get you the error</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T21:44:00.376300</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T21:48:20.376700</ts>
    <user>Emil</user>
    <text>can someone help?</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T21:48:53.377100</ts>
    <user>Wenona</user>
    <text>Sounds like Game of Thrones spoilers to me :rolling_on_the_floor_laughing:</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:00:23.377200</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:00:36.377500</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:00:49.377800</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:01:49.378100</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:02:00.378400</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:02:11.378700</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:02:30.379000</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:02:46.379300</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:02:55.379600</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:03:05.379900</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:03:12.380200</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:03:19.380500</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:03:35.380800</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:03:44.381100</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:03:58.381400</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:04:05.381700</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:04:15.382000</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:04:24.382300</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:04:36.382600</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:04:46.382900</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:05:07.383200</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:05:32.383500</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:05:45.383800</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:05:56.384100</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:06:13.384400</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:06:28.384700</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:06:40.385000</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:06:50.385300</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:07:04.385600</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:07:32.385900</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T22:07:36.386200</ts>
    <user>Emil</user>
    <text>None</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T23:38:57.386800</ts>
    <user>Kris</user>
    <text>Wtf</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T23:39:18.387100</ts>
    <user>Dede</user>
    <text>Very committed spammer.</text>
  </message>
  <message conversation_id="1537">
    <ts>2019-05-11T23:39:47.387300</ts>
    <user>Dede</user>
    <text>But way unclear as to why.</text>
  </message>
  <message conversation_id="1538">
    <ts>2019-05-12T01:31:33.391200</ts>
    <user>Daryl</user>
    <text>oooooook.. on another note, i’m trying to user parcel for bundeling, and it was very easy to set up at first but now i’m realising that it does not seem to get my image references in elm-ui. does anyone have any experience with this and maybe an elegant solution? i could just copy the assets folder after the fact, but that kind of ruins the nice simplicity of the setup.</text>
  </message>
  <message conversation_id="1539">
    <ts>2019-05-12T02:27:53.391600</ts>
    <user>Rebekah</user>
    <text>Where is the report button?</text>
  </message>
  <message conversation_id="1538">
    <ts>2019-05-12T05:46:50.400500</ts>
    <user>Maida</user>
    <text>&lt;@Daryl&gt; copying static assets is a different concern. You can use one of parcel’s static assets plugins. `parcel-plugin-static-files-copy` should be enough for most cases.</text>
  </message>
  <message conversation_id="1538">
    <ts>2019-05-12T05:49:00.402000</ts>
    <user>Maida</user>
    <text>You can also use `parcel-plugin-copy` if the above one doesn’t work for you. (I had to use this one in one of my phoenix projects because phoenix is not playing nicely with root js/css.)</text>
  </message>
  <message conversation_id="1538">
    <ts>2019-05-12T10:06:27.402400</ts>
    <user>Daryl</user>
    <text>ok nice, thank you!</text>
  </message>
  <message conversation_id="1540">
    <ts>2019-05-12T11:11:00.404800</ts>
    <user>Melaine</user>
    <text>Hi guys is there somebody using elm and graphql? How good is the support/your satisfaction?

I'm newbie regarding elm and its ecosystem (currently ReactJS and graphql-yoga with Prisma on BE) ... elm caught my eye due to one possible contract.</text>
  </message>
  <message conversation_id="1540">
    <ts>2019-05-12T11:12:56.406700</ts>
    <user>Virgie</user>
    <text>&lt;@Melaine&gt; there is this package &lt;https://package.elm-lang.org/packages/dillonkearns/elm-graphql/latest&gt; and its creator &lt;@Sade&gt; is pretty active here</text>
  </message>
  <message conversation_id="1540">
    <ts>2019-05-12T11:13:39.407400</ts>
    <user>Melaine</user>
    <text>thanks! will check it out</text>
  </message>
  <message conversation_id="1540">
    <ts>2019-05-12T11:14:19.408500</ts>
    <user>Sade</user>
    <text>Hello &lt;@Melaine&gt;! Yes, check it out, and come say hello/get help in &lt;#C0RSQNQ92|graphql&gt; :slightly_smiling_face: There are a lot of people using elm and graphql in production. And a lot of friendly folks willing to answer questions in there!</text>
  </message>
  <message conversation_id="1540">
    <ts>2019-05-12T11:15:00.409100</ts>
    <user>Melaine</user>
    <text>&lt;@Sade&gt; neat, glad to read that!</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-12T11:18:48.409200</ts>
    <user>Evonne</user>
    <text>```
{
    "type": "application",
    "source-directories": [
        "./src/elm",
        "./elm-pack/composable-form/src"
    ],
    "elm-version": "0.19.0",
    "dependencies": {
        "direct": {
            "Chadtech/elm-us-state-abbreviations": "2.0.2",
            "NoRedInk/elm-json-decode-pipeline": "1.0.0",
            "ccapndave/elm-update-extra": "4.0.0",
            "elm/browser": "1.0.1",
            "elm/core": "1.0.2",
            "elm/file": "1.0.1",
            "elm/html": "1.0.0",
            "elm/http": "2.0.0",
            "elm/json": "1.1.2",
            "elm/random": "1.0.0",
            "elm/regex": "1.0.0",
            "elm/time": "1.0.0",
            "elm/url": "1.0.0",
            "elm-community/json-extra": "4.0.0",
            "elm-community/list-extra": "8.1.0",
            "elm-community/maybe-extra": "5.0.0",
            "elm-community/string-extra": "4.0.0",
            "hercules-ci/elm-dropdown": "1.0.1",
            "jinjor/elm-debounce": "3.0.0",
            "justinmimbs/time-extra": "1.1.0",
            "kirchner/elm-selectize": "2.0.7",
            "krisajenkins/remotedata": "6.0.1",
            "lukewestby/elm-http-builder": "7.0.0",
            "mpizenberg/elm-pointer-events": "4.0.0",
            "myrho/elm-round": "1.0.4",
            "rtfeldman/elm-iso8601-date-strings": "1.1.2",
            "rtfeldman/elm-validate": "4.0.1",
            "ryannhg/date-format": "2.3.0",
            "webbhuset/elm-json-decode": "1.0.1"
        },
        "indirect": {
            "elm/bytes": "1.0.7",
            "elm/parser": "1.1.0",
            "elm/virtual-dom": "1.0.2",
            "justinmimbs/date": "3.1.2"
        }
    },
    "test-dependencies": {
        "direct": {
            "elm-explorations/test": "1.2.0"
        },
        "indirect": {
            "elm/svg": "1.0.1"
        }
    }
}```</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-12T11:19:48.409500</ts>
    <user>Evonne</user>
    <text>Errors are few similar to this:
```
I cannot find a `Http` import. These names seem close though:

    Decode.Error
    Char.Char
    Time.Zone
    Decoder

```</text>
  </message>
  <message conversation_id="1542">
    <ts>2019-05-12T12:45:02.410900</ts>
    <user>Amiee</user>
    <text>&lt;@Alicia&gt; Thanks for your suggestion, I have rewritten the algorithm to use the built-in foldr (tail optimized) function, removing any stack overflow exceptions, thanks again :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1543">
    <ts>2019-05-12T15:44:10.412700</ts>
    <user>Maxwell</user>
    <text>I know about `onWithOptions`, but how can I prevent default inside an `onKeyDown` subscription when a specific key goes down? Let's say I want to disable a particular key or key combination anywhere on the page.</text>
  </message>
  <message conversation_id="1543">
    <ts>2019-05-12T15:49:16.413000</ts>
    <user>Maxwell</user>
    <text>I really just want to know if there's a way to prevent default on a subscription in Elm as I described; an alternative would be fine too, but the goal is to prevent default.</text>
  </message>
  <message conversation_id="1543">
    <ts>2019-05-12T15:57:51.414000</ts>
    <user>Maxwell</user>
    <text>I just found out about `onBubble`, which seems like what I need, but it seems that it didn't make it to Elm after all? I'm not sure.

&lt;https://github.com/elm-lang/virtual-dom/blob/dev/src/VirtualDom.elm#L230-L244&gt;</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T02:19:20.415500</ts>
    <user>Raylene</user>
    <text>I'm looking for feedback on &lt;https://gist.github.com/miniBill/cf1698087a9dacaf7c49c60d972ecdf2&gt;

The one thing I know for sure is that I need to document it</text>
  </message>
  <message conversation_id="1543">
    <ts>2019-05-13T02:20:43.416900</ts>
    <user>Raylene</user>
    <text>It's an implementation of the Encoder/Decoder pair idea. Things that it does and most others don't are ADTs and recursion</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T02:24:13.417000</ts>
    <user>Jae</user>
    <text>Could you provide an example of this being used? I think that would help me understand what's going on</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T02:25:58.417200</ts>
    <user>Jae</user>
    <text>For example, what would the code look like for creating an encoder pair for { x : Int, y : Int }</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T02:30:23.417400</ts>
    <user>Jae</user>
    <text>And since you said it handles recursion what would the code look like for
Tree a
    = Subtree (Tree a)
    | Leaf a</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:27:46.417800</ts>
    <user>Raylene</user>
    <text>Updated the gist with an example</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:31:01.418000</ts>
    <user>Jae</user>
    <text>:thumbsup:</text>
  </message>
  <message conversation_id="1544">
    <ts>2019-05-13T04:38:12.418200</ts>
    <user>Raylene</user>
    <text>What do you think of the ADT api?</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:43:29.418400</ts>
    <user>Jae</user>
    <text>Encoding records is straight forward. I'm still trying to understand how encoding recursive types works though. What does "cata" mean?</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:43:50.418600</ts>
    <user>Jae</user>
    <text>(and by encoding I mean both encoding and decoding)</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:45:48.418800</ts>
    <user>Raylene</user>
    <text>cata is a wrong name (will fix) for a generic pattern match function</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:46:59.419000</ts>
    <user>Jae</user>
    <text>Another thing, "meta" to me at least, doesn't seem like a good name for a library that combines json encoders and decoders. What about using the term "json codec" instead?</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:47:28.419200</ts>
    <user>Raylene</user>
    <text>And it's part of the ADT encoding, the recursive part is just the call to `recursive`</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:50:13.419400</ts>
    <user>Jae</user>
    <text>So if I understand correctly, the cata portion of the example describes how to encode the tree, while the alternative1 functions at the end describe how to decode it?</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:50:39.419700</ts>
    <user>Raylene</user>
    <text>Codec is a good name, thanks, will probably use it</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:50:48.419900</ts>
    <user>Raylene</user>
    <text>Exactly!</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:51:19.420100</ts>
    <user>Raylene</user>
    <text>And the parameter to buildAdt is needed to have a default value which is needed for the permissive decoder</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:51:42.420300</ts>
    <user>Raylene</user>
    <text>If you remove permissiveDecoder you can remove default too</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:52:02.420500</ts>
    <user>Jae</user>
    <text>What does the permissive decoder do?</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:52:07.420700</ts>
    <user>Raylene</user>
    <text>But it can be useful if, for example, you use this to serialize the model</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:53:53.420900</ts>
    <user>Raylene</user>
    <text>It's a decoder that returns a default value instead of erring out.
Main difference between that and using Result.withDefault is that it can perform a partial parse

so if you pass {x:5} to the Point decoder you will get (5,0) instead of (0,0)</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:54:35.421100</ts>
    <user>Raylene</user>
    <text>Of course if you pass "hello" you will get (0,0)</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:55:10.421300</ts>
    <user>Jae</user>
    <text>So if you don't provide a permissive decoder then you'll get Err result like what happens in Json.Decode?</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:56:47.421500</ts>
    <user>Raylene</user>
    <text>Yeah, if you use Meta.decoder it errs out, permissiveDecoder uses the default</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:57:41.421700</ts>
    <user>Jae</user>
    <text>Alright. I'm a bit pressed for time now but possibly later today I'll try this out with a data structure I have and see how well it goes</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T04:58:15.422000</ts>
    <user>Raylene</user>
    <text>Thanks :pray:</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T05:00:04.422200</ts>
    <user>Jae</user>
    <text>Also I stumbled upon this &lt;https://package.elm-lang.org/packages/prozacchiwawa/elm-json-codec/latest/JsonCodec&gt;, I'm not sure how similar it is to your approach but you might be interested in seeing how they did it.</text>
  </message>
  <message conversation_id="1541">
    <ts>2019-05-13T05:08:56.422400</ts>
    <user>Raylene</user>
    <text>Oh, it's quite similar</text>
  </message>
  <message conversation_id="1545">
    <ts>2019-05-13T06:36:29.423100</ts>
    <user>John</user>
    <text>Hi, how do I import the operate := from Json.Decode?</text>
  </message>
  <message conversation_id="1545">
    <ts>2019-05-13T06:37:58.423400</ts>
    <user>Virgie</user>
    <text>that operator is from older versions</text>
  </message>
  <message conversation_id="1545">
    <ts>2019-05-13T06:38:54.424600</ts>
    <user>Virgie</user>
    <text>it was removed quite a while ago, I think you can replace it with `field` , so `"keyname" := decoder` becomes `field "keyname" decoder`</text>
  </message>
  <message conversation_id="1545">
    <ts>2019-05-13T06:39:01.424700</ts>
    <user>John</user>
    <text>thanks &lt;@Virgie&gt;</text>
  </message>
  <message conversation_id="1546">
    <ts>2019-05-13T11:22:57.427800</ts>
    <user>Daryl</user>
    <text>how would you go about implementing preloading images of a view? like, i have a view consisting of a couple of images and i want to display a loader until all images are ready. my first idea would be to base64 encode them and request them via the http package, but maybe there’s a simpler way?</text>
  </message>
  <message conversation_id="1546">
    <ts>2019-05-13T11:29:06.428600</ts>
    <user>Elliott</user>
    <text>Any suggestions on post-build i18n libs?   Seems like everything I've seen is pre-build setup.</text>
  </message>
  <message conversation_id="1547">
    <ts>2019-05-13T11:41:44.428700</ts>
    <user>Iona</user>
    <text>May help: &lt;https://package.elm-lang.org/packages/krisajenkins/remotedata/latest/RemoteData&gt;</text>
  </message>
  <message conversation_id="1547">
    <ts>2019-05-13T11:41:52.428900</ts>
    <user>Iona</user>
    <text>&lt;http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html&gt;</text>
  </message>
  <message conversation_id="1548">
    <ts>2019-05-13T12:34:18.430300</ts>
    <user>Ashton</user>
    <text>I think christophp/elm-i18n is post-build, but I could be mistaking what the difference between pre and post build i18n is &lt;@Elliott&gt;</text>
  </message>
  <message conversation_id="1548">
    <ts>2019-05-13T12:34:53.430900</ts>
    <user>Ashton</user>
    <text>(Is pre-build where the translations are built into the code, and post build where the code loads up translations from data?)</text>
  </message>
  <message conversation_id="1548">
    <ts>2019-05-13T12:46:27.431000</ts>
    <user>Daryl</user>
    <text>i’m already using this, maybe to reframe the question: is there a way to track the loading process of images when they are loaded via an image tag, or do i have to manually load them via an http request to get that kind of info</text>
  </message>
  <message conversation_id="1547">
    <ts>2019-05-13T13:01:27.431200</ts>
    <user>Iona</user>
    <text>Not yet AFAIK - although there are some changes coming wrt lazy loading of images that the browser itself will support at the tag level</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:13:04.435000</ts>
    <user>Marcus</user>
    <text>I wrote an Elm app recently that displays a table of data. A user can filter the table, sort it, etc. It works great. I have a new requirement to make sure that the header of the table is always visible. As the user scrolls the page, the header will move up the page. Once the header hits the top of the page, it will become fixed and not scroll off the page. The rows in the table will continue to scroll. How would you go about implementing that? My understanding is that I'll need to keep track of the position of the header to figure out when it hits the top of the page. If memory serves, Elm isn't great about keeping track of the Cartesian coordinates of DOM elements. Not sure if that changed in 0.19 though.</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:16:35.435100</ts>
    <user>Allison</user>
    <text>using `position: sticky` will not work?</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:19:35.435600</ts>
    <user>Carman</user>
    <text>This sort of behavior is usually done via CSS, not Elm/JS :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:20:30.435800</ts>
    <user>Marcus</user>
    <text>Yeah, actually, `position: sticky` might so the trick. I'd avoided it in the past due to browser support, but looks like the browsers might have caught up.</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:21:35.436000</ts>
    <user>Marcus</user>
    <text>&lt;@Carman&gt; Yea, I was expecting to have to swap a class when the element hit the top of the window, for instance to swap to between `position: relative` and `position: fixed`, or something.</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:21:55.436200</ts>
    <user>Marcus</user>
    <text>So, mostly CSS, but with a little JS/Elm in there to apply the correct class.</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:24:28.436400</ts>
    <user>Allison</user>
    <text>it should be ok to use, it’s actually part of bootstrap css</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:25:06.436600</ts>
    <user>Simon</user>
    <text>From a member of our team:

1. in order to structurally separate table headers from the content rows, you need to use `table-layout: fixed` mode (&lt;https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout&gt;)
2. your model needs to be in charge of turning `position: sticky` on and off for the table header section
3. you need to be firing a task to determine the relationship between the scroll position and the start of the table
MDN Web Docs
table-layout
The table-layout CSS property sets the algorithm used to lay out table cells, rows, and columns.</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:28:06.436900</ts>
    <user>Marcus</user>
    <text>Thanks &lt;@Rosaria&gt;. That's awesome information. It sounds like there is a bit of JS/Elm tomfoolery in there to adjust the classes based on scroll position, unless I'm misreading it.</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:29:57.437100</ts>
    <user>Simon</user>
    <text>Yes- we have a fairly robust table control we may be open sourcing at some point - we’ve been dealing with sticky headers, config, filter/sort/URL interactions, expandable rows, etc - happy to give a quick tour sometime</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:30:50.437300</ts>
    <user>Marcus</user>
    <text>Thanks. Might be good to swap notes. Sounds like you might be farther along than me, but I implemented a bunch of those features in my app too.</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:31:06.437500</ts>
    <user>Simon</user>
    <text>Seems like everyone doing any sort of business app is gonna hit at some point :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:31:27.437700</ts>
    <user>Marcus</user>
    <text>LOL. Yup. Anything with a non-trivial table.</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:32:08.437900</ts>
    <user>Simon</user>
    <text>Also, go bean-town Elm’ers :wink:</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:32:16.438100</ts>
    <user>Simon</user>
    <text>even though I’m in the former bean town camp</text>
  </message>
  <message conversation_id="1549">
    <ts>2019-05-13T14:40:32.438500</ts>
    <user>Marcus</user>
    <text>Once a Bostonian, always a Bostonian.</text>
  </message>
  <message conversation_id="1550">
    <ts>2019-05-13T15:12:03.440100</ts>
    <user>Lory</user>
    <text>Is there an alternatve to  ---   toString  function for 0.19 ? I need to convert some lists to String to display on the page and sometimes I need to do that for a record.  The old toString could do that.</text>
  </message>
  <message conversation_id="1550">
    <ts>2019-05-13T15:13:05.440700</ts>
    <user>Carman</user>
    <text>Is this to show to users or just for debugging purposes?</text>
  </message>
  <message conversation_id="1550">
    <ts>2019-05-13T15:13:18.441400</ts>
    <user>Danika</user>
    <text>You need to write the function yourself if you want to do this in production </text>
  </message>
  <message conversation_id="1550">
    <ts>2019-05-13T15:13:41.441900</ts>
    <user>Lory</user>
    <text>for testing, for experimentation</text>
  </message>
  <message conversation_id="1550">
    <ts>2019-05-13T15:14:30.442500</ts>
    <user>Danika</user>
    <text>Debug.toString exists </text>
  </message>
  <message conversation_id="1550">
    <ts>2019-05-13T15:14:49.443100</ts>
    <user>Lory</user>
    <text>Thanks, I will try that.</text>
  </message>
  <message conversation_id="1551">
    <ts>2019-05-13T18:01:48.443700</ts>
    <user>Nana</user>
    <text>you can do it with JS but not with pure Elm</text>
  </message>
  <message conversation_id="1551">
    <ts>2019-05-13T18:03:04.443900</ts>
    <user>Nana</user>
    <text>or actually it's possible you could... :thinking_face:</text>
  </message>
  <message conversation_id="1552">
    <ts>2019-05-13T18:12:04.446400</ts>
    <user>Nana</user>
    <text>yep! &lt;https://ellie-app.com/5xgqn6L76jya1&gt;</text>
  </message>
  <message conversation_id="1552">
    <ts>2019-05-13T18:13:21.446600</ts>
    <user>Nana</user>
    <text>```
img [ src "&lt;https://placekitten.com/1000/1000&gt;"
    , on "load" (Decode.succeed Loaded)
    ]
    []
```</text>
  </message>
  <message conversation_id="1553">
    <ts>2019-05-13T18:38:33.447100</ts>
    <user>Su</user>
    <text>is there a way to dump information from `Explore History` via a command in the console? I have some rspec specs that are failing, and I’d like to know the state of the model at a certain time, hopefully with something like a `@page.execute_script("Elm.Main.dump");`</text>
  </message>
  <message conversation_id="1552">
    <ts>2019-05-13T18:44:35.447400</ts>
    <user>Su</user>
    <text>I can do this in chrome console
```
$('div:contains("Explore History")').click()
```
but cannot view within rspec/capybara because I think it is opening in a new window</text>
  </message>
  <message conversation_id="1554">
    <ts>2019-05-14T01:04:14.448400</ts>
    <user>Son</user>
    <text>why would I see _I cannot find a `Set` constructor:_, even if my file contains `import Set exposing (..)`?</text>
  </message>
  <message conversation_id="1554">
    <ts>2019-05-14T01:05:31.448800</ts>
    <user>Son</user>
    <text>oh; I'm trying to use a type at the term level</text>
  </message>
  <message conversation_id="1555">
    <ts>2019-05-14T01:12:01.450700</ts>
    <user>Maxwell</user>
    <text>Anyone knows how to prevent default inside an `onKeyDown` subscription. An example would be great. The docs don't have anything on this: &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Events#onKeyDown&gt;</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T03:32:41.451300</ts>
    <user>Jae</user>
    <text>Sorry, didn’t have time to try out your API. Do still plan on working on it if something quite similar exists? If yes I’ll try out your API tonight.  If no, maybe you’d be interested in modifying your code to work with elm/bytes instead? That seems like a library no one has written yet (and that I have use for)</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T03:39:43.451500</ts>
    <user>Raylene</user>
    <text>Yes, because the alternatives are not as complete. Using elm/bytes too could be interesting, actually :thinking_face:</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T03:44:03.451700</ts>
    <user>Millie</user>
    <text>The `onKeyDown` subscription doesn't support preventDefault. The workaround is to decode the event on the "outermost" element.</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T03:44:06.451900</ts>
    <user>Millie</user>
    <text>&lt;https://package.elm-lang.org/packages/Gizra/elm-keyboard-event/latest/&gt;</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T03:44:08.452100</ts>
    <user>Jae</user>
    <text>Cool, I'll try out your API tonight then</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T03:44:20.452300</ts>
    <user>Millie</user>
    <text>&lt;https://gizra.github.io/elm-keyboard-event/OutermostDiv.html&gt;</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T03:45:22.452500</ts>
    <user>Millie</user>
    <text>&lt;https://github.com/andys8/vim-emulation/blob/91da6521dc9d59858485f9209c79329630ba3470/src/View.elm#L15&gt;</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T04:06:38.453900</ts>
    <user>Jae</user>
    <text>Has anyone had problems with &amp;lt;textarea&amp;gt; in Edge? For me, every time I type a character, the cursor jumps to the start and if I backspace away all the characters, I get this error.  I don't have these problems in Chrome or Firefox</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T04:21:06.454200</ts>
    <user>Jae</user>
    <text>It looks like the problem goes away if I assign the text using Html.Attributes.value instead of placing Html.text inside the body of the text area</text>
  </message>
  <message conversation_id="1557">
    <ts>2019-05-14T04:27:43.454400</ts>
    <user>Huong</user>
    <text>Yeah, you can’t really set the value of a `textarea` dom node by adding a child-element. Chrome and FF ignore it, Edge errors. `value` is the proper solution :thumbsup:</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T04:49:27.457300</ts>
    <user>Hunter</user>
    <text>Hi there. I posted on the beginners group last week but no one could help me. Is there anyone that could please help me with a few issues in my elm app? I am new to elm but the only available dev for this project so if someone with experience can help that would be great. I will pay for your help</text>
  </message>
  <message conversation_id="1556">
    <ts>2019-05-14T04:54:52.457600</ts>
    <user>Jae</user>
    <text>Alright, good to know.  This seems to be what elm-ui does for Input.multiline so I've posted a question about it in &lt;#C4F9NBLR1|elm-ui&gt;</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T04:55:38.458000</ts>
    <user>Lynne</user>
    <text>Could you post a link to your message in the beginner channel?</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T04:56:17.458200</ts>
    <user>Hunter</user>
    <text>&lt;https://elmlang.slack.com/archives/C192T0Q1E/p1557408090276800&gt;</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:16:00.458500</ts>
    <user>Lynne</user>
    <text>Sorry for long waiting time. Personally, I don’t have any experience with that library and hence cannot answer why it behaves like it does. Also, the example you pointed to was not updated to 0.19 version and it may be misleading for you.</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:16:47.458700</ts>
    <user>Lynne</user>
    <text>The library itself was but it is not possible to run the example and check what’s going on in there.</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:17:06.458900</ts>
    <user>Hunter</user>
    <text>Okay. Is there a 0.19 drop down library that you know works?</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:17:23.459100</ts>
    <user>Lynne</user>
    <text>You could help answering you if you created an Ellie app (&lt;https://ellie-app.com/new&gt;) demoing your problem</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:17:52.459300</ts>
    <user>Lynne</user>
    <text>I have never used any drop-down library. It is usually easier to do it with regular `Html` module</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:18:01.459500</ts>
    <user>Lynne</user>
    <text>Especially if you are beginner, that is a recommended way</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:19:19.459700</ts>
    <user>Hunter</user>
    <text>Thanks so much. Is there an example  of the html that you can perhaps point me to?</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:20:02.459900</ts>
    <user>Lynne</user>
    <text>Emm, I could probably craft something quickly</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:23:02.460200</ts>
    <user>Hunter</user>
    <text>wow thanks so much</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:25:51.460400</ts>
    <user>Lynne</user>
    <text>&lt;https://ellie-app.com/5xtCS3fZYHPa1&gt;</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:26:01.460600</ts>
    <user>Lynne</user>
    <text>Quite an ugly example but demonstrates the purpose :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:26:38.460800</ts>
    <user>Hunter</user>
    <text>:100:</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:26:50.461000</ts>
    <user>Lynne</user>
    <text>If I was writing a real component I would not repeat myself so much but to show how it works it is ok :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1558">
    <ts>2019-05-14T05:26:50.461200</ts>
    <user>Hunter</user>
    <text>thanks that makes so much more sense</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T05:59:15.461400</ts>
    <user>Maxwell</user>
    <text>&lt;@Millie&gt; Thanks. I could use `onKeyDown` with an input element. Do you know how to prevent default at all? The documentation doesn't have full examples, so I can't piece it together myself.</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:06:09.461900</ts>
    <user>Maxwell</user>
    <text>&lt;#C0CJ3SBBM|general&gt;</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:06:40.462600</ts>
    <user>Maxwell</user>
    <text>From &lt;https://github.com/andys8/vim-emulation/blob/91da6521dc9d59858485f9209c79329630ba3470/src/View.elm#L15&gt;

I'm trying to understand the following code.

```
onKeyDown : Html.Attribute Msg
onKeyDown =
    Decode.field "key" Decode.string
        |&amp;gt; Decode.map (\key -&amp;gt; ( KeyDown key, True ))
        |&amp;gt; preventDefaultOn "keydown"
```
How can I prevent default only if `key` is, e.g., `"x"`?</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:07:31.463100</ts>
    <user>Maxwell</user>
    <text>```
onKeyDown =
    Decode.field "key" Decode.string
        |&amp;gt; Decode.map (\key -&amp;gt; ( KeyDown key, key == "x" ))
        |&amp;gt; preventDefaultOn "keydown"
```</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:08:20.463800</ts>
    <user>Maxwell</user>
    <text>Would that work?
Also, what is `KeyDown key`?</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:10:51.464600</ts>
    <user>Danika</user>
    <text>KeyDown is a `Msg`: &lt;https://github.com/andys8/vim-emulation/blob/91da6521dc9d59858485f9209c79329630ba3470/src/Model.elm#L47&gt;</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:11:33.465200</ts>
    <user>Maxwell</user>
    <text>I see.</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:12:11.465500</ts>
    <user>Danika</user>
    <text>Your`key == “x”` seems like it should work, yes</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:17:48.466000</ts>
    <user>Maxwell</user>
    <text>Is that Elm 0.19?</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:18:48.466800</ts>
    <user>Maxwell</user>
    <text>I can't find the docs for `Decode.field`. And I don't know if that's 0.18 or 0.19.</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:19:11.467100</ts>
    <user>Maxwell</user>
    <text>Basically, I can't understand the whole expression.</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:22:24.471300</ts>
    <user>Maxwell</user>
    <text>By the way, I was also looking at the `Html.events` docs searching for an `onKeyDown` to see how a regular keydown event works, but it seems like there is none?</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:22:25.471400</ts>
    <user>Danika</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Events#preventDefaultOn&gt;

&lt;https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#field&gt;

`preventDefaultOn` needs the name of the event, and a decoder that decodes the event object into `(msg, Bool)`, where the Bool is whether or not to prevent default</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:23:23.472000</ts>
    <user>Danika</user>
    <text>re: no default onKeyDown

&amp;gt; Note: It looks like the spec is moving away from event.keyCode and towards event.key. Once this is supported in more browsers, we may add helpers here for onKeyUp, onKeyDown, onKeyPress, etc.</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:23:50.472700</ts>
    <user>Maxwell</user>
    <text>Hmm, gotcha.</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:24:00.473000</ts>
    <user>Maxwell</user>
    <text>Thanks! :handshake:</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:26:30.476100</ts>
    <user>Maxwell</user>
    <text>I see some decoders only produce a `Msg`, like:
```
onClick : msg -&amp;gt; Attribute msg
onClick message =
  on "click" (Decode.succeed message)
```</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:26:52.476700</ts>
    <user>Maxwell</user>
    <text>Can you help me identify "Msg" there?</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:27:06.476900</ts>
    <user>Maxwell</user>
    <text>`message`?</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:27:34.478100</ts>
    <user>Danika</user>
    <text>Are you familiar with the elm architecture, and using `Msg`s in general?</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:27:35.478200</ts>
    <user>Maxwell</user>
    <text>So, that would be the message I process in my `update` function, correct?</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:28:13.479600</ts>
    <user>Nana</user>
    <text>&lt;@Maxwell&gt; that means that they don't give any value</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:29:03.482100</ts>
    <user>Nana</user>
    <text>ie. `onInput` gives you a string, but onClick is just an event without extra info</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:31:44.485600</ts>
    <user>Danika</user>
    <text>In this case, the onClick is a function that takes any message and gives back a `Attribute msg` whenever that element is clicked.

Its intentionally generic because how can anyone know about *your* `Msg` type.

you might do:

```
type Msg
  = ButtonClicked
   | ...

— somewhere in view
button [ onClick ButtonClicked ] [ text “click me!” ]
```

As simon says (heh), this particular implementation decodes no extra info off the click event </text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:33:21.486100</ts>
    <user>Maxwell</user>
    <text>Thank you, again. :+1:</text>
  </message>
  <message conversation_id="1560">
    <ts>2019-05-14T06:40:07.486700</ts>
    <user>Danika</user>
    <text>No problem (:</text>
  </message>
  <message conversation_id="1560">
    <ts>2019-05-14T06:42:21.488700</ts>
    <user>Majorie</user>
    <text>Elm 0.19 do not support |&amp;gt; Http.send msg   style Http.send command?</text>
  </message>
  <message conversation_id="1560">
    <ts>2019-05-14T06:44:05.489300</ts>
    <user>Danika</user>
    <text>No </text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:44:20.489600</ts>
    <user>Maxwell</user>
    <text>By the way, the original example I posted was using `preventDefaultOn`, but if I want also `stopPropagation`, can I use `custom` like this? I'm mostly trying to nail down the syntax.

```
onKeyDown =
    Decode.field "key" Decode.string
        |&amp;gt; Decode.map
            (\key -&amp;gt;
                { message = KeyDown key
                , preventDefault = key == "x"
                , stopPropagation = true
                }
            )
        |&amp;gt; custom "keydown"
```</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:45:55.490900</ts>
    <user>Danika</user>
    <text>`True` not `true` but yes that should work</text>
  </message>
  <message conversation_id="1560">
    <ts>2019-05-14T06:46:06.491100</ts>
    <user>Majorie</user>
    <text>Ok. Not supported. What could be the work-around?</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:47:16.491900</ts>
    <user>Danika</user>
    <text>Use Http.get, &lt;http://Http.post|Http.post&gt;, or Http.request</text>
  </message>
  <message conversation_id="1560">
    <ts>2019-05-14T06:47:44.492500</ts>
    <user>Majorie</user>
    <text>ok. Thank you pd-andy :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:48:07.493000</ts>
    <user>Danika</user>
    <text>As always, the docs will help (: 

&lt;https://package.elm-lang.org/packages/elm/http/latest/&gt;</text>
  </message>
  <message conversation_id="1559">
    <ts>2019-05-14T06:51:32.495500</ts>
    <user>Danika</user>
    <text>I wasnt around for 0.18 so I can’t really comment on how different the API is.

The 0.18 docs have:

```
getWarAndPeace : Cmd Msg
getWarAndPeace =
  Http.send NewBook &amp;lt;|
    Http.getString "&lt;https://example.com/books/war-and-peace.md&gt;”
```

Which I guess would translate to:

```
getWarAndPeace : Cmd Msg
getWarAndPeace =
  Http.get
    { url = "&lt;https://example.com/books/war-and-peace.md&gt;"
    , expect = Http.expectString NewBook
    }
```</text>
  </message>
  <message conversation_id="1560">
    <ts>2019-05-14T08:03:54.496000</ts>
    <user>Majorie</user>
    <text>This works: sendGet : (Result Error a -&amp;gt; msg) -&amp;gt; String -&amp;gt; Decoder a -&amp;gt; Cmd Msg -- oli Cmd msg
sendGet msg theUrl theDecoder =
    -- Http.get theUrl theDecoder
    --    |&amp;gt; Http.send msg
        Http.get
        { url = theUrl
        , expect = Http.expectJson LoadRepos ( Decode.list repoDecoder )
        }</text>
  </message>
  <message conversation_id="1560">
    <ts>2019-05-14T08:04:29.496300</ts>
    <user>Majorie</user>
    <text>When type Msg
    = UpdateQuery String
    | Search
    | LoadRepos (Result Http.Error (List Repo))</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T08:53:04.497300</ts>
    <user>Kristina</user>
    <text>Can I ask a question about a weird error? I get a DOM error when compiling with "make" but it works when compiling with "make debug"</text>
  </message>
  <message conversation_id="1560">
    <ts>2019-05-14T09:00:57.497600</ts>
    <user>Danika</user>
    <text>What is the error</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:11:28.498900</ts>
    <user>Earnestine</user>
    <text>can it ever happen, that in `Date.now |&amp;gt; Task.map (Debug.log "date") |&amp;gt; Task.perform` the log is not triggered? I'd assume: no, but I have a case where it's like this.</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:17:30.499000</ts>
    <user>Kristina</user>
    <text>I have this code in the update function</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:18:35.000100</ts>
    <user>Kristina</user>
    <text>The idea is that OpenNewLedgerModal creates a modal dialog. Then I want to select text in the dialog.</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:19:16.000800</ts>
    <user>Kristina</user>
    <text>In order to have the dialog actually exist, there's a command sending a SelectName message.</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:20:18.001900</ts>
    <user>Kristina</user>
    <text>That update command sends a command through a port to select the text, the element of which should now exist because Elm should hav had time to update the DOM.</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:20:49.002500</ts>
    <user>Kristina</user>
    <text>If I compile with "make debug" this works fine. If I compile with "make" the element does not exist.</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:23:49.002900</ts>
    <user>Kristina</user>
    <text>This is the code in the view function:</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:24:14.003500</ts>
    <user>Kristina</user>
    <text>"openNewLedgerModal" is the function that creates the dialog.</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:39:36.004700</ts>
    <user>Earlean</user>
    <text>&lt;@Kristina&gt; you need to wait for the next animation frame in JS and look for the element after that.</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:39:39.004800</ts>
    <user>Kristina</user>
    <text>This is the javascript snippet that does the actual selecting:</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:39:52.005200</ts>
    <user>Kristina</user>
    <text>Ah OK.</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:41:16.005400</ts>
    <user>Kristina</user>
    <text>Do you know if I still need to create a new command message for the DOM to update, or is that unnecessary?</text>
  </message>
  <message conversation_id="1562">
    <ts>2019-05-14T09:44:42.005600</ts>
    <user>Earlean</user>
    <text>It's unnecessary</text>
  </message>
  <message conversation_id="1562">
    <ts>2019-05-14T09:48:09.005800</ts>
    <user>Nana</user>
    <text>:thinking_face:</text>
  </message>
  <message conversation_id="1562">
    <ts>2019-05-14T09:49:05.006000</ts>
    <user>Nana</user>
    <text>try this:
`Date.now |&amp;gt; Task.map (\a -&amp;gt; Debug.log "date" a) |&amp;gt; Task.perform`</text>
  </message>
  <message conversation_id="1561">
    <ts>2019-05-14T09:50:50.006200</ts>
    <user>Kristina</user>
    <text>OK, thank you for your help.</text>
  </message>
  <message conversation_id="1562">
    <ts>2019-05-14T09:51:06.006400</ts>
    <user>Millie</user>
    <text>Why should this make a difference?</text>
  </message>
  <message conversation_id="1562">
    <ts>2019-05-14T09:56:01.006600</ts>
    <user>Nana</user>
    <text>yeah nvm</text>
  </message>
  <message conversation_id="1563">
    <ts>2019-05-14T10:24:16.006800</ts>
    <user>Rico</user>
    <text>Are you giving `Task.perform` a `(Date -&amp;gt; msg)` argument? Are you getting the result as a msg anywhere?</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T12:41:18.007200</ts>
    <user>Willodean</user>
    <text>&lt;https://github.com/elm-explorations/test&gt;</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T12:41:22.007400</ts>
    <user>Willodean</user>
    <text>I think these docs are out of date</text>
  </message>
  <message conversation_id="1565">
    <ts>2019-05-14T13:24:19.007900</ts>
    <user>Sade</user>
    <text>A new meetup is born! Any Santa Barbarians out there? :grin:

&lt;https://twitter.com/dillontkearns/status/1128349527700717568&gt;</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T13:53:03.008400</ts>
    <user>Willodean</user>
    <text>Actually is anyone able to get elm-test working on nixos?</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T14:12:05.009500</ts>
    <user>Lindsey</user>
    <text>&lt;@Willodean&gt; I did get it working at some point, but I forget the exact sequence of actions.  I remember installing with npm and then going to edit some file, or move the executable someplace else.  memory is hazy.</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T14:12:24.010000</ts>
    <user>Lindsey</user>
    <text>there is mention of all this in the nixos bug tracker though</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T14:15:06.010600</ts>
    <user>Willodean</user>
    <text>&lt;@Lindsey&gt; where? Also I think I just need to supply `binwrap-install` to `elm-test`</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T14:15:09.010800</ts>
    <user>Willodean</user>
    <text>but its not proving easy</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T14:29:23.011700</ts>
    <user>Lindsey</user>
    <text>&lt;@Willodean&gt; sorry I can't be more specific right now, I have to run.  The upshot is that `which elm-test` gives me `/home/bburdette/.npm-packages/bin/elm-test`</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T14:29:41.011900</ts>
    <user>Willodean</user>
    <text>oh</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T14:29:46.012100</ts>
    <user>Willodean</user>
    <text>that's not going to work for me</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T14:29:55.012400</ts>
    <user>Willodean</user>
    <text>I need to run tests in the check phase of my build</text>
  </message>
  <message conversation_id="1564">
    <ts>2019-05-14T14:32:52.013200</ts>
    <user>Lindsey</user>
    <text>K, well here's the nixpkgs issue:  &lt;https://github.com/NixOS/nixpkgs/issues/45280&gt;</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:05:09.013400</ts>
    <user>Jae</user>
    <text>I gave your API a try then. I have a data structure that represents the wires and chips on a circuit board (for a game I'm making). Currently I've written encoders and decoders for converting this to bytes and back.  It involves a lot of record types and writing those using your API was quite easy to do.  I didn't feel like I was in danger of introducing subtle encoding bugs (I have not tested my code though). The same cannot be said of elm/bytes where I could lose 15 minutes hunting down two bytes that got flipped between encoding and decoding.

For ADT's, I only attempted one thing, I have a datastructure that looks like this
```type CircuitPosition a b
    = WirePosition WireId Float a
    | ChipPosition ChipId (Point Int) b```
and I had a lot of trouble converting that into a codec, even when using your example as a guide. This is what I ended up with (it's incomplete)
```circuitPosition : Meta a -&amp;gt; Meta b -&amp;gt; Meta (CircuitPosition a b)
circuitPosition wireDataMeta chipDataMeta =
    Meta.adt
        (\wireMeta chipMeta value -&amp;gt;
            case value of
                WirePosition wireId_ t data -&amp;gt;
                    wireMeta wireId_ t

                ChipPosition chipId_ position data -&amp;gt;
                    chipMeta chipId_ position
        )
        |&amp;gt; Meta.alternative1 "wirePosition" WirePosition (Meta.list rmeta)
        |&amp;gt; Meta.alternative1 "chipPosition" ChipPosition meta
        |&amp;gt; Meta.buildAdt (\_ -&amp;gt; Node [])```</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:08:01.013800</ts>
    <user>Jae</user>
    <text>Here's all the codecs I wrote if you're curious (took about 45 minutes to do)</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:11:34.016500</ts>
    <user>Lu</user>
    <text>I hope this is a dumb question with a simple answer, but how do I turn a `List Json.Encode.Value` into a `Json.Encode.Value`? In 0.18.0, there was `Json.Encode.list`, but the purpose of that function was inexplicably (again, I can't find any documentation of this change in the changelogs/guides) changed.</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:13:18.016800</ts>
    <user>Virgie</user>
    <text>there is &lt;https://package.elm-lang.org/packages/elm/json/latest/Json-Encode#list&gt; which is now more flexible</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:13:45.017500</ts>
    <user>Virgie</user>
    <text>because you supply the `a -&amp;gt; Value` function, but if you already have a  `Value`, use `identity` as that function</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:14:05.018000</ts>
    <user>Virgie</user>
    <text>`identity : Value -&amp;gt; Value`</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:14:26.018300</ts>
    <user>Lu</user>
    <text>No, I have a `List Value`, which is what `Json.Encode.list` use to accept</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:14:48.018900</ts>
    <user>Virgie</user>
    <text>yes, so `a ~ Value` in your case</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:15:33.019500</ts>
    <user>Lu</user>
    <text>no, `a` is a `List Value`. Maybe I'm missing something obvious</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:15:56.019700</ts>
    <user>Lu</user>
    <text>oh....</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:15:58.019900</ts>
    <user>Lu</user>
    <text>I see</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:16:00.020100</ts>
    <user>Lu</user>
    <text>thank you</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:17:53.021900</ts>
    <user>Carman</user>
    <text>The big advantage of the new API is that you don't have to manually map each item in the list:
```
-- 0.18

[1, 2, 3]
  |&amp;gt; List.map &lt;http://Encode.int|Encode.int&gt;
  |&amp;gt; Encode.list


-- 0.19

[1, 2, 3]
  |&amp;gt; Encode.list &lt;http://Encode.int|Encode.int&gt;
```</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:19:43.023500</ts>
    <user>Lu</user>
    <text>&lt;@Carman&gt; for sure. that would have been nice when I originally wrote this code, but right now I'm trying to just get back to a stable compiling state</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:23:52.024900</ts>
    <user>Carman</user>
    <text>Then as mentioned by &lt;@Virgie&gt;, `Encode.list identity` behaves like the 0.18 version of the function</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:24:42.025900</ts>
    <user>Carman</user>
    <text>if you're trying to fix a lot of these it may be helpful to create a shim like:
```
oldListEncode : List Value -&amp;gt; Value
oldListEncode values =
  Encode.list identity values
```</text>
  </message>
  <message conversation_id="1566">
    <ts>2019-05-14T16:25:56.026400</ts>
    <user>Lu</user>
    <text>good idea, thanks &lt;@Carman&gt; and &lt;@Virgie&gt;</text>
  </message>
  <message conversation_id="1567">
    <ts>2019-05-14T18:27:48.029400</ts>
    <user>Lu</user>
    <text>Is there a good pattern for encoding a list where you may want to drop items? My current solution has to loop twice
```
Json.Encode.list identity
    &amp;lt;| List.filterMap encodeIfInteresting things
```</text>
  </message>
  <message conversation_id="1567">
    <ts>2019-05-14T19:10:02.030900</ts>
    <user>Danika</user>
    <text>In my mind it doesn’t seem like it should be the decoders job to drop items </text>
  </message>
  <message conversation_id="1567">
    <ts>2019-05-14T19:28:01.031100</ts>
    <user>Lu</user>
    <text>makes sense, thanks</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T02:32:30.032500</ts>
    <user>Lory</user>
    <text>Can someone share a discount code for Elm in Action?</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T02:32:36.032700</ts>
    <user>Lory</user>
    <text>That would be great.
P.S. I've got the coupon.</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T02:40:35.033000</ts>
    <user>Majorie</user>
    <text>index.html:
&amp;lt;script&amp;gt;
    var app = Elm.Main.init({ node: document.querySelector('main') })
&amp;lt;/script&amp;gt;

Main.elm the functionality.

If I compile: elm make Main.elm -&amp;gt; large index.html overwrites existing one

How I should compile that var app is shown on html page?</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T02:48:11.033500</ts>
    <user>Dexter</user>
    <text>If you are modifying your index.html, you shouldn't compile the html file but just the javascript file
`elm make Main.elm --output=/dist/index.js` for example</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T02:48:39.033700</ts>
    <user>Dexter</user>
    <text>(And then include dist/index.js in your html file)</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T02:50:44.033900</ts>
    <user>Majorie</user>
    <text>OK. I have done that before. But I am wondering what is the idea having such (working in Ellie) line in index.html : var app = Elm.Main.init({ node: document.querySelector('main') })</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T02:54:13.034100</ts>
    <user>Dexter</user>
    <text>because you might want to add Javascript that uses the ports you define (they will be available on `app.ports`)</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T02:57:39.034300</ts>
    <user>Majorie</user>
    <text>I think var     app = Elm.Main.init({ node: document.querySelector('main') }) should some how pick up the functionality from Main.elm</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T03:05:01.034500</ts>
    <user>Majorie</user>
    <text>I should figure out how it should be compiled ..</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T04:06:39.034700</ts>
    <user>Lynne</user>
    <text>It seems like you are still concerned with something &lt;@Majorie&gt;, is it correct?</text>
  </message>
  <message conversation_id="1569">
    <ts>2019-05-15T04:15:17.037700</ts>
    <user>Loralee</user>
    <text>Hi folks !

I would like to clearly identify when NOT using Elm. Could you give some concrete use cases where Elm was not suited (because of performance, ecosystem, ... whatever)? (please answer in the thread)</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T04:16:48.037800</ts>
    <user>Majorie</user>
    <text>Well, this is working: &amp;lt;script src="main.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div id="elm"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;
  &amp;lt;script&amp;gt;
    //var app = Elm.Main.init({ node: document.querySelector('src/main') })
    var app = Elm.Main.init({
            node: document.getElementById('elm')
        });
    // you can use ports and stuff here
  &amp;lt;/script&amp;gt;</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T04:17:38.038100</ts>
    <user>Majorie</user>
    <text>So at the moment I leave "document.querySelector .."</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T04:42:38.038400</ts>
    <user>Lynne</user>
    <text>`querySelector` is looking for nodes inside document so using it like this would not work, of course.</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T04:42:51.038600</ts>
    <user>Lynne</user>
    <text>If you have further questions or don’t understand how anything works feel free to ask</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T04:56:38.038800</ts>
    <user>Majorie</user>
    <text>Ok Thank you Sergey and Elvin !</text>
  </message>
  <message conversation_id="1570">
    <ts>2019-05-15T05:10:03.039000</ts>
    <user>Timika</user>
    <text>I would (professionally) not use it in cases where I don’t build an UI for the web. I’ve seen experiments to use Elm in backend systems or even postgres triggers (&lt;@Jin&gt; :P). Those are nice and interesting experiments, and I really want to use Elm as much as I can, but as those things are not the current design focus of Elm, I won’t use Elm there.

It’s just too risky that workarounds for backend specific problems might be gone in  a new Elm version (and that is a good thing in the grand scheme!) or other aspects of the language change that might prove to be roadblocks. As soon as Elm has non web-UI stuff as a design goal, I will quickly jump on-board though. :slightly_smiling_face:

(Just noticed that you asked for concrete cases, my bad. I’ll leave this here anyway, but feel free to disregard everything I wrote)</text>
  </message>
  <message conversation_id="1568">
    <ts>2019-05-15T05:24:14.039400</ts>
    <user>Loralee</user>
    <text>Yeah, indeed I meant "not using Elm for the front end". I'm also pretty convinced that there isn't good other place for Elm outside front end *currently*.</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T05:45:39.039600</ts>
    <user>Carrie</user>
    <text>Is there a simpler way to implement a set of radio boxes in elm?</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T05:46:54.039700</ts>
    <user>Denae</user>
    <text>the only exception I'd make is server-side-rendering, which can be achieved by using JSDOM or headless chrome if need be, other than that it's too risky to use Elm in other environments than frontend uis</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:04:21.041500</ts>
    <user>Lynne</user>
    <text>Simpler than what?</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:06:42.043100</ts>
    <user>Carrie</user>
    <text>I'd like to ask if there is a well-defined method for radio boxes.</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:09:37.045100</ts>
    <user>Lynne</user>
    <text>Yes, list of `input` elements with `type` `"radio"`</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:13:18.048400</ts>
    <user>Carrie</user>
    <text>But he doesn't have the corresponding radio function. Do I need to define it in msg?</text>
  </message>
  <message conversation_id="1572">
    <ts>2019-05-15T06:15:44.049900</ts>
    <user>Guadalupe</user>
    <text>Hello. I risk repeating an earlier question by &lt;@Daryl&gt; about pre-loading, but I think it moves the discussion on (as well as asking a question to him in particular). There seem to be a number of strategies that people have used for preloading images: 1) A port to a javascript preloader, e.g. 'Programming Elm' and &lt;https://github.com/Libbum/Odyssey&gt; - ; 2) Use a Web Component - I can't find an example of this approach but there is this excellent video and a catalogue of web components:  &lt;https://www.youtube.com/watch?v=tyFe9Pw6TVE&gt; - ; 3) Load html into the model - this approach is used by @rogeriochaves in his interesting proof of concept of a port of react-suspense: &lt;https://github.com/rogeriochaves/elm-suspense&gt; - You would need to use html/css rather than elm-ui (which I much prefer) since elm-ui doesn't currently seem to recognise onLoad events. Loading html in the model seems utterly weird, but is it? I've no idea- any opinions?;  4)  'manually' fetching the image over http which gives the advantage of being able to use it with the  RemoteData package - I thought about it, but I have actually no idea what this looks like (I tend to tie myself up in conceptual knots at times) - &lt;@Daryl&gt; do you have a simple example you could point me to, please. Can anyone comment on the relative merits of these approaches and be kind enough to direct us to any examples that I have missed, please.</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:17:32.050200</ts>
    <user>Lynne</user>
    <text>Sorry, I don’t understand what you mean</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:21:10.051300</ts>
    <user>Nana</user>
    <text>&lt;@Guadalupe&gt; here's one pretty simple method I came up with: &lt;https://ellie-app.com/5xFtMbppw64a1&gt; (if the goal is specifically to smoothly load images)</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:26:18.052200</ts>
    <user>Guadalupe</user>
    <text>That looks sweet - and no, not just for the kittens! ; thanks for sharing that</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:32:13.052300</ts>
    <user>Carrie</user>
    <text>When I chose another radio, the clicked radio was still in its original state.</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:42:44.052700</ts>
    <user>Lynne</user>
    <text>I see. You need to set `checked` attribute of the radio button to match the value in model</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:44:16.052900</ts>
    <user>Lynne</user>
    <text>For example, if you have `selectedOption` field which you update when user clicks on a button, you should add `checked (value == model.selectedOption)` where `value` is something identifying this particular button</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:47:14.053100</ts>
    <user>Lynne</user>
    <text>&lt;https://ellie-app.com/5xWFVYnRQGxa1&gt;</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:48:02.053300</ts>
    <user>Ashton</user>
    <text>A buddy of mine, who wrote a fair amount of Elm before deciding he didnt like it, said something to the effect of “We just re-write the front end every 8 months anyway, so investing a lot in stability and maintainability of our front end isnt worth it”.</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T06:50:00.053500</ts>
    <user>Ashton</user>
    <text>I thought that was an interesting perspective, even if I dont ultimately agree with it.</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T07:10:03.053700</ts>
    <user>Loralee</user>
    <text>It seems weird they re write ALL their codebase indeed.... it is maybe rewritten but incrementaly , no?</text>
  </message>
  <message conversation_id="1573">
    <ts>2019-05-15T07:10:27.053900</ts>
    <user>Loralee</user>
    <text>Or is it à special "front end"?</text>
  </message>
  <message conversation_id="1571">
    <ts>2019-05-15T07:11:04.054100</ts>
    <user>Timika</user>
    <text>Defiantly food for thought &lt;@Ashton&gt; :thinking_face:</text>
  </message>
  <message conversation_id="1574">
    <ts>2019-05-15T07:30:07.054300</ts>
    <user>Carrie</user>
    <text>Thank you very much.</text>
  </message>
  <message conversation_id="1574">
    <ts>2019-05-15T07:53:13.054700</ts>
    <user>Nana</user>
    <text>it's also a good idea to wrap your radio buttons into something like:
`radioGroup: {options:List (a, String), onChange:a -&amp;gt; msg} -&amp;gt; Html msg`</text>
  </message>
  <message conversation_id="1575">
    <ts>2019-05-15T08:00:40.054900</ts>
    <user>Denae</user>
    <text>Sounds like an allusion to JavaScript fatigue ˆ.ˆ</text>
  </message>
  <message conversation_id="1576">
    <ts>2019-05-15T08:51:33.055100</ts>
    <user>Daryl</user>
    <text>hey, i have no example i can point you to sorry, but i think in most cases, using the onload event is probably the better way.</text>
  </message>
  <message conversation_id="1576">
    <ts>2019-05-15T09:07:38.055700</ts>
    <user>Leonore</user>
    <text>I wish elm europe was on the weekend instead</text>
  </message>
  <message conversation_id="1576">
    <ts>2019-05-15T09:55:09.056900</ts>
    <user>Alicia</user>
    <text>&lt;@Guadalupe&gt; if it is for preloading, could you use `&amp;lt;link rel="preload" href="someimage.png" as="image" &amp;gt;`?</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T10:50:03.059700</ts>
    <user>Garnett</user>
    <text>What would the definition look like for a field accessor that can return both a string and a float? If you look in &lt;https://ellie-app.com/5y2FrWYzyrLa1&gt; can use `accx` to return both a string and a float, depending on the record I call it on. But, I’d like to be able to have a field in a record (the commented out `thing` record) where the field name is something that I pass in.

The context is that I’m working on a form, where I want to get the value, (float) and also the label (string) from 2 different records, using the same accessor</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T10:55:34.060000</ts>
    <user>Dede</user>
    <text>Unfortunately, that Ellie link is short-circuiting to the `new` page for me.  Does it work for you?</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:03:29.060200</ts>
    <user>Garnett</user>
    <text>I’ve effectively re-saved it, hopefully &lt;https://ellie-app.com/5y2FrWYzyrLa1&gt; works</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:07:11.060500</ts>
    <user>Hoyt</user>
    <text>If I’m building a pretty mundane set of CRUD screens, just for updating some data, I don’t use Elm. I just write the html in whatever server-side templating that comes with the web framework and then just rely on raw html form submits, etc.</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:07:36.060700</ts>
    <user>Hoyt</user>
    <text>Or if there is just basic interactivity that I can use built-in html5 stuff for.</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:10:11.060900</ts>
    <user>Hoyt</user>
    <text>A record’s fields can’t be accessed by, for example, an arbitrary string.
You can, however, pass in the accessor, something like
`extract .foo record`
But, at that point, probably just better to do `.foo record`</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:12:45.061300</ts>
    <user>Dede</user>
    <text>The re-save worked.  But yeah, what &lt;@Hoyt&gt; said.  If the value in the two records has the same name, the autogenerated `.name` accessor will get the value out of either regardless of the value's type.</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:15:03.061600</ts>
    <user>Hoyt</user>
    <text>But, you can’t build something that would, say, allow you to pull out a field based on the name as a string
`extract "label" record`
If you really want this, then you would need to switch to a different data structure, such as a `List (String, a)` or `Dict`</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:23:23.061800</ts>
    <user>Garnett</user>
    <text>I’m not trying to create an accessor based on a string. I’m trying to create a record that has a field with an accessor that can return either a string or a float (as crazy as that sounds).

E.g.

```
        acc =
            .a

        foo =
            { a = "" }

        bar =
            { a = 0.0 }

        _ =
            acc foo

        _ =
            acc bar
```

In this snippet, `acc` can return both a string and a float, depending on the record that it’s called on.

I want to have _another_ record which has a field to store that accessor, but the name of the field is arbitrary.

E.g.

```
type alias Obj a =
    { accessor : a -&amp;gt; Float
    }
```

I can then call `Obj .foo` or `Obj .bar`, but in this case, it can only return a float, as opposed to either a string or a float.

It’s a little confusing to explain haha</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:23:51.062000</ts>
    <user>Garnett</user>
    <text>So I’d love to be able to see what `acc` in the first snippet’s type definition looks like</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:24:50.062200</ts>
    <user>Dede</user>
    <text>I think it's something like this:
```
acc: {x | a: t} -&amp;gt; t
```</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:25:15.062400</ts>
    <user>Dede</user>
    <text>Which is the same as `.a`'s</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:26:00.062600</ts>
    <user>Garnett</user>
    <text>I’ll give that a go!</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:31:08.062800</ts>
    <user>Dede</user>
    <text>If I have it wrong, the compiler error message will probably give you the precisely correct answer :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:43:06.063100</ts>
    <user>Garnett</user>
    <text>In this case `t` is either `Float` or `String`, and in the record definition I need to have it bound to one of them, and can’t do both :confused:

E.g.

```
    { attributes :
          { label : String
          , max : Maybe Float
          , min : Maybe Float
          , placeholder : String
          , step : Float
          }
    , parser : Maybe Float -&amp;gt; Result String Float
    , update : Maybe Float -&amp;gt; a -&amp;gt; a
    , value : { x | a : t } -&amp;gt; Maybe t
    }

But `numberField` needs the 1st argument to be:

    { attributes : Form.Base.NumberField.Attributes Float
    , parser : Maybe Float -&amp;gt; Result String Float
    , update : Maybe Float -&amp;gt; a -&amp;gt; a
    , value : a -&amp;gt; Maybe Float
    }
```

`t` should be `Float` which makes the compiler unhappy</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:45:54.063300</ts>
    <user>Dede</user>
    <text>Ah.  If you want these two distinct records to have the same "shapes" so you can put them in a list together, you'll need to make a tagged union to hold a float or a string.  If you can manage the records for different fields separately, you can push `t` further up the food chain.</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:48:29.063500</ts>
    <user>Dede</user>
    <text>Roughly something like this:
```
type alias Record attr t =
    { attributes : attr
    , parser : Maybe Float -&amp;gt; Result String Float
    , update : Maybe Float -&amp;gt; attr -&amp;gt; attr
    , value : attr -&amp;gt; t
    }

```</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:49:44.063700</ts>
    <user>Dede</user>
    <text>That doesn't parse, hang on.</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T11:50:22.064000</ts>
    <user>Dede</user>
    <text>Fixed.</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T12:05:39.064200</ts>
    <user>Garnett</user>
    <text>A little focused on something else, but will come back to this. Thanks again!</text>
  </message>
  <message conversation_id="1577">
    <ts>2019-05-15T12:09:00.064400</ts>
    <user>Dede</user>
    <text>:thumbsup:</text>
  </message>
  <message conversation_id="1578">
    <ts>2019-05-15T12:35:00.066600</ts>
    <user>Elina</user>
    <text>hi folks—is there any way to map `Html msg` into `Html Never`? in other words, to nullify the event handlers in a piece of view code and remove its dependency on a msg type?</text>
  </message>
  <message conversation_id="1578">
    <ts>2019-05-15T12:40:06.068200</ts>
    <user>Danika</user>
    <text>`Html.map (_ -&amp;gt; Cmd.none) (html code)` maybe?</text>
  </message>
  <message conversation_id="1578">
    <ts>2019-05-15T12:40:20.068500</ts>
    <user>Lindsey</user>
    <text>you can do `Html ()`, but you still have to map it to something.  I use a Noop msg for that.</text>
  </message>
  <message conversation_id="1578">
    <ts>2019-05-15T12:40:53.068700</ts>
    <user>Danika</user>
    <text>Cmd.none derp</text>
  </message>
  <message conversation_id="1578">
    <ts>2019-05-15T13:10:08.068900</ts>
    <user>Elina</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="1579">
    <ts>2019-05-15T13:40:16.069400</ts>
    <user>Huong</user>
    <text>I think we may be missing some context here. Is this some `Html` which you _know_ won’t ever produce any messages? If so, `Html msg` should just unify with `Html Never`. If the issue is that you have some code that produces `Html Never` and it needs to take a parameter with some `Html msg` and perhaps this is giving you trouble?

Essentially, it’s hard to say without more information! One thing that _cannot_ be done, however, is turn `Html Msg` in `Html Never`, but then I don’t really know when that would be useful or something you might wish to do, so perhaps you can lay out some specifics and we might be able to see a different path?</text>
  </message>
  <message conversation_id="1580">
    <ts>2019-05-15T13:57:07.069600</ts>
    <user>Dorsey</user>
    <text>Hello :wave: I've just gave a lightning talk about &lt;https://gitlab.com/tad-lispy/hive-2/&gt; at Elm Game Programming meetup in Amsterdam. If you are interesting in working together on this project please reach out to me. If you haven't heard me live, then TLDR: I'm looking for someone with WebGL experience or willing to learn together.</text>
  </message>
  <message conversation_id="1581">
    <ts>2019-05-15T14:41:39.071900</ts>
    <user>Guadalupe</user>
    <text>thanks &lt;@Alicia&gt; - I should have said that I am loading different versions (dimensions) for different devices - It does seem as though rel="preload" will support source sets in the future, but not right now. Would be a good solution for many use-cases as it is controlled by the browser.</text>
  </message>
  <message conversation_id="1580">
    <ts>2019-05-15T15:21:07.072100</ts>
    <user>Raylene</user>
    <text>Cool, interesting that the object codec can be easily used for opaque types too! Hadn't thought about it tbh</text>
  </message>
  <message conversation_id="1580">
    <ts>2019-05-15T15:22:46.072400</ts>
    <user>Raylene</user>
    <text>Btw, there is Meta.dict for Dicts, and I should totally add a Meta.set</text>
  </message>
  <message conversation_id="1580">
    <ts>2019-05-15T15:25:57.072600</ts>
    <user>Jae</user>
    <text>I saw that there's a Meta.dict but its key has to always be a String type</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:05:03.081800</ts>
    <user>Dayle</user>
    <text>I have a question about maintaining state in a list view while opening subviews. By list view I mean a table or similar with a number of elements which are clickable. Upon clicking a n element a subview with additional information is displayed.
*The issue*
In the list view I have a number of filters which one can enter to narrow down the results in the list view. Once an item is clicked, a new url is pushed displaying a new view with some additional information. When clicking the browser back button I see the list view again but now all filter settings are back to default settings which is not desirable.
*A solution?*
I have experimented with not pushing a new url, instead routing messages through the list view which will keep the state of the list view. However the url is not updated to reflect that we are viewing a subview and there is no url history recorded so clicking the back button will jump to the page displayed before the list view.
*Question*
Are there any idiomatic ways of solving this type of problems in SPAs in general and Elm in particular? Maybe I’m going about things the wrong way or my thinking of how the list view / subview relation should work is backwards.</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:15:06.082800</ts>
    <user>Alicia</user>
    <text>&lt;@Dayle&gt; would it make sense to include the filters as query parameters in the URL? it could have the added benefit of allowing people to share URLs with filters pre-applied</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:16:02.083400</ts>
    <user>Rico</user>
    <text>Perhaps `Browser.Navigation.back` might help?</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:16:24.083800</ts>
    <user>Alicia</user>
    <text>another way could be having a “backstack” of previous states, and when someone hits back you pop off the current state to return to the previous one</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:16:36.084100</ts>
    <user>Alicia</user>
    <text>Android apps do something like that</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:16:53.084400</ts>
    <user>Rico</user>
    <text>I wonder if it might preserve state in a useful way (as opposed to the browser back button, which I guess doesn’t.)</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:17:37.085200</ts>
    <user>Dayle</user>
    <text>yes, adding the filters to the url is a good idea, will have to look into the “backstack”, thanks &lt;@Alicia&gt;!</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:18:07.085700</ts>
    <user>Alicia</user>
    <text>yeah you’d have to have a `List Model` or similar that you store, kinda like people do for undo/redo</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:19:51.086900</ts>
    <user>Dayle</user>
    <text>alright, how do I manipulate the browser url without reloading? Nav.replaceUrl ?</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:22:27.087800</ts>
    <user>Dayle</user>
    <text>would you say that storing the contents of the list itself in session storage is valid design decision?</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:22:54.088300</ts>
    <user>Dayle</user>
    <text>quite new to javascript SPA programming so trying to pick up some good habits :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:28:32.089400</ts>
    <user>Alicia</user>
    <text>`replaceUrl` will change the URL but not trigger a page load (you do get the updated URL to parse), internally it uses `history.replaceState({}, '', url)`</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:28:52.089500</ts>
    <user>Dayle</user>
    <text>well, I would have to hijack the back button of the browser to prevent it from performing a “proper” back action</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:31:31.092100</ts>
    <user>Alicia</user>
    <text>I think keeping it in session storage is a valid design, we do something similar using `localStorage` as a cache for stuff, we’ve landed on a pattern of having it read-only on the Elm side, so if you want to modify something in the cache you modify it and send it out to `localStorage` which then stores it and sends it back in</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:32:12.093200</ts>
    <user>Alicia</user>
    <text>with `sessionStorage` only living for the life of that tab it might be easier to keep it in memory in Elm though</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:32:39.093700</ts>
    <user>Alicia</user>
    <text>like as a `Dict String (List something)` where the key is the ID of the list</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:37:37.098200</ts>
    <user>Dayle</user>
    <text>yes, as long as I keep the state of the list view when viewing the subview that would work ok which is the solution I was experimenting with but then I end up with the browser navigation issue. I could open the subview as a modal on top of the list view and replace the url with the path of the current subview. The only issue then (as I can think of) is that to the user it would make sense to tap the back button to get back to the list view but since there is no history recorded the browser would end up on the page previous to the list view. So question then is, can I hijack the back button to simply close the “modal subview” instead of jumping back in history?</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T16:54:30.101600</ts>
    <user>Alicia</user>
    <text>you could use `pushUrl` to add a new entry to the browser history, I would probably structure it like
1. Getting to the subview requires clicking a link (normal `a` tag), I would include the current set of filters in the URL I generate
2. Since it was a link it will get routed through `pushUrl` and added to the history
3. Hitting back then would take you out of the subview and to the previous view, you could parse what filters should be applied for it from the URL (maybe something like `/list/12345?startDate=2019-01-01&amp;amp;endDate=2019-02-01&amp;amp;anotherVal=something`)</text>
  </message>
  <message conversation_id="1583">
    <ts>2019-05-15T17:21:38.101800</ts>
    <user>Elina</user>
    <text>hey Ilias! sure, here's some background. I have a bunch of view functions, much of which take `(a -&amp;gt; msg)` as an argument. I'm trying to centralize these on a style guide page, which, ideally, should be responsible for no state at all.</text>
  </message>
  <message conversation_id="1583">
    <ts>2019-05-15T17:34:39.102100</ts>
    <user>Huong</user>
    <text>Right, yeah, there’s not really a way of doing that. You could `always NoOp` and set up an explicit `NoOp` message, of course - I’m just not aware of a way to explicitly remove the handlers at the `Html` level</text>
  </message>
  <message conversation_id="1584">
    <ts>2019-05-15T18:30:18.104000</ts>
    <user>Rozanne</user>
    <text>reading through `elm/random` docs i am struggling to understand what is meant by
&amp;gt; Can you render the QuadTree to HTML using absolute positions and fractional dimensions?
i can’t understand how quad tree and fractional dimensions work together.  so far i’ve settled that the answer to that question for me is ‘no’. : /</text>
  </message>
  <message conversation_id="1584">
    <ts>2019-05-15T18:34:34.104700</ts>
    <user>Virgie</user>
    <text>given a tree, each of its children takes 50% of the available hight and 50% of the width</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T22:29:31.106100</ts>
    <user>Rudolph</user>
    <text>Question. I am doing a side project. The website will need a login before actually entering the website. Should I start will coding the login before starting the main component of the website?</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T22:35:09.106200</ts>
    <user>Bud</user>
    <text>I always like to start with the core business functionality first (since thats the piece you want to iterate on the most often).</text>
  </message>
  <message conversation_id="1582">
    <ts>2019-05-15T22:36:44.106400</ts>
    <user>Rudolph</user>
    <text>That is what I figured, but just wanted clarification. Thanks!</text>
  </message>
  <message conversation_id="1585">
    <ts>2019-05-16T02:09:54.106900</ts>
    <user>Dayle</user>
    <text>I’ll give it a go! Thanks so much for helping out! :star:</text>
  </message>
  <message conversation_id="1586">
    <ts>2019-05-16T04:07:51.108300</ts>
    <user>Bertha</user>
    <text>Has anybody done any benchmarks with Elm 0.19 vs the latest React? I'm trying to sell it as an option for part of one of our projects, but the benchmarks on the website are out of date</text>
  </message>
  <message conversation_id="1586">
    <ts>2019-05-16T04:12:23.108400</ts>
    <user>Huong</user>
    <text>&lt;https://rawgit.com/krausest/js-framework-benchmark/master/webdriver-ts-results/table.html&gt; this has Up to date react</text>
  </message>
  <message conversation_id="1586">
    <ts>2019-05-16T04:12:39.108600</ts>
    <user>Bertha</user>
    <text>Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1587">
    <ts>2019-05-16T06:42:14.110100</ts>
    <user>Kyung</user>
    <text>I forked and updated the benchmarks here - &lt;https://github.com/Checksum/react-angular-ember-elm-performance-comparison&gt; (although you’ll have to build and run it locally)</text>
  </message>
  <message conversation_id="1587">
    <ts>2019-05-16T07:22:55.110300</ts>
    <user>Loralee</user>
    <text>I've selected only elm vs all "react" things. In short elm is  faster!</text>
  </message>
  <message conversation_id="1588">
    <ts>2019-05-16T07:46:20.112000</ts>
    <user>Emilee</user>
    <text>hmm, i've switched our project at work to parcel, but now under windows the elm files fail to compile with "cannot access a file used by another process" anyone run into that yet?</text>
  </message>
  <message conversation_id="1588">
    <ts>2019-05-16T07:47:10.112800</ts>
    <user>Emilee</user>
    <text>i'm assuming it has something to do with parcel building multiple elm targets at the same time, which share elm-files. on linux it works without a problem</text>
  </message>
  <message conversation_id="1589">
    <ts>2019-05-16T07:57:36.114000</ts>
    <user>Reuben</user>
    <text>Hi, does anybody know what is the best way to handle touch events in elm? With "best" I mean, "supported by all major browsers".</text>
  </message>
  <message conversation_id="1590">
    <ts>2019-05-16T08:13:33.114400</ts>
    <user>Dorotha</user>
    <text>Hey! I used &lt;https://package.elm-lang.org/packages/mpizenberg/elm-pointer-events/latest&gt; for the Rubik’s cube</text>
  </message>
  <message conversation_id="1589">
    <ts>2019-05-16T08:37:31.114600</ts>
    <user>Reuben</user>
    <text>It seems like it doesn't support safari on iOS</text>
  </message>
  <message conversation_id="1589">
    <ts>2019-05-16T08:38:36.114900</ts>
    <user>Reuben</user>
    <text>I'll check your rubiks cube on my phone</text>
  </message>
  <message conversation_id="1589">
    <ts>2019-05-16T08:39:36.115100</ts>
    <user>Reuben</user>
    <text>It works!</text>
  </message>
  <message conversation_id="1589">
    <ts>2019-05-16T08:40:39.115300</ts>
    <user>Dorotha</user>
    <text>:tada:</text>
  </message>
  <message conversation_id="1591">
    <ts>2019-05-16T08:47:10.115500</ts>
    <user>Loralee</user>
    <text>&lt;@Kyung&gt; I'm lazy to clone the repo and building this... Could you share the graphics you got?</text>
  </message>
  <message conversation_id="1592">
    <ts>2019-05-16T10:32:16.118300</ts>
    <user>Meridith</user>
    <text>Hi! I made a gatsby starter based on `gatsby-plugin-elm` : &lt;https://www.gatsbyjs.org/starters/?c=Elm&gt;

Any feedback is appreciated! It’s very barebones atm, but I’d like to improve it, and maybe do another one with Typescript interop later (when I figure out how to make it work :sweat_smile:)</text>
  </message>
  <message conversation_id="1591">
    <ts>2019-05-16T11:46:57.118700</ts>
    <user>Garnett</user>
    <text>As a warning from experience, shoehorning security on after-the-fact can be hard/dangerous</text>
  </message>
  <message conversation_id="1593">
    <ts>2019-05-16T13:33:45.122400</ts>
    <user>Ema</user>
    <text>Hi all, has anyone had any luck adding typescript files to a project created with create-elm-app? Hopefully without ejecting? Any help would be appreciated. It seems straightforward enough but I can't seem to get it to work...</text>
  </message>
  <message conversation_id="1594">
    <ts>2019-05-16T17:13:50.122700</ts>
    <user>Delia</user>
    <text>Hey Everyone,  there was this elm tool/library/service that takes the debug logs on users computers to troubleshoot. Can anyone tell me the name of it?</text>
  </message>
  <message conversation_id="1593">
    <ts>2019-05-16T20:04:39.123100</ts>
    <user>Millie</user>
    <text>Haven't done it, but you can overrwide webpack configuration. &lt;https://github.com/halfzebra/create-elm-app/blob/master/template/README.md#overriding-webpack-config&gt;</text>
  </message>
  <message conversation_id="1593">
    <ts>2019-05-16T20:05:21.123300</ts>
    <user>Millie</user>
    <text>This should in theory reduce the problem to "how to configure webpack to transpile typescript" ;)</text>
  </message>
  <message conversation_id="1591">
    <ts>2019-05-16T22:36:49.123700</ts>
    <user>Kyung</user>
    <text>&lt;@Loralee&gt; &lt;https://raw.githubusercontent.com/Checksum/react-angular-ember-elm-performance-comparison/master/graphs/elm0.19-react16.7.png&gt;</text>
  </message>
  <message conversation_id="1591">
    <ts>2019-05-17T03:41:50.125600</ts>
    <user>Meridith</user>
    <text>Some months ago we switched from js to ts in our CRA, so we regenerated a new CRA with typescript enabled and ported our components in that, and then moved that back to our repo. We completely switched to TS though (without strict mode)</text>
  </message>
  <message conversation_id="1595">
    <ts>2019-05-17T03:44:39.127700</ts>
    <user>Kira</user>
    <text>Hi! New here. I just upgraded an app to 0.19, and have a problem with the pages that contain a ProseMirror editor. It seems that 0.19 is more strict with DOM elements created from JavaScript (I get `Cannot read property 'childNodes' of undefined` in the `addDomNodesHelp` method inside Elm's VirtualDom library, when I click on a link to load a different page). Anyone experienced anything similar? What's the solution? Removing the JS-created DOM elements before changing the page doesn't seem to make any difference. Is there any way to mark certain DOM elements as "don't touch" for Elm?</text>
  </message>
  <message conversation_id="1596">
    <ts>2019-05-17T04:11:59.129300</ts>
    <user>Ema</user>
    <text>Yeah, I've overridden the config and tried babel loader and ts-loader. Just can't get either to work. Pretty sure it's just a webpack problem. Was just hoping someone might have a little example tucked away on GitHub or something. Thank - I will persevere.</text>
  </message>
  <message conversation_id="1595">
    <ts>2019-05-17T04:12:42.129900</ts>
    <user>Nana</user>
    <text>&lt;@Kira&gt; I think using `keyed` + `lazy` should guarantee that Elm never updates them unnecessarily</text>
  </message>
  <message conversation_id="1595">
    <ts>2019-05-17T04:19:25.130100</ts>
    <user>Kira</user>
    <text>Oh, wow, how come I had never heard of those two?? :face_with_raised_eyebrow:

To be clear, you mean &lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Keyed&gt; and &lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Lazy&gt;, right?</text>
  </message>
  <message conversation_id="1595">
    <ts>2019-05-17T04:19:59.130300</ts>
    <user>Nana</user>
    <text>yep</text>
  </message>
  <message conversation_id="1595">
    <ts>2019-05-17T04:20:50.130500</ts>
    <user>Kira</user>
    <text>Excellent, I'll read up on those and try them out. Thanks a bunch!</text>
  </message>
  <message conversation_id="1597">
    <ts>2019-05-17T05:22:17.130900</ts>
    <user>Raylene</user>
    <text>You might also want to consider avoiding touching the Dom with js altogether, and use web components</text>
  </message>
  <message conversation_id="1597">
    <ts>2019-05-17T05:55:05.131100</ts>
    <user>Nana</user>
    <text>isn't web components is still touching the dom with js though?</text>
  </message>
  <message conversation_id="1597">
    <ts>2019-05-17T06:02:11.131400</ts>
    <user>Raylene</user>
    <text>Not if you define a custom tag and use that from elm, limiting the js to touch inside the tag only</text>
  </message>
  <message conversation_id="1597">
    <ts>2019-05-17T06:22:48.133400</ts>
    <user>Nana</user>
    <text>I wanted a version of `Json.Decode.keyValuePairs` that let you specify the decoder for the key, so I wrote this:
```
keyValDecoder : Decoder k -&amp;gt; Decoder v -&amp;gt; Decoder (List ( k, v ))
keyValDecoder kDec vDec =
    Decode.keyValuePairs vDec
        |&amp;gt; Decode.andThen
            (\pairs -&amp;gt;
                pairs
                    |&amp;gt; List.foldr
                        (\( k, v ) acc -&amp;gt;
                            case k |&amp;gt; Encode.string |&amp;gt; Decode.decodeValue kDec of
                                Ok k2 -&amp;gt;
                                    Result.map ((::) ( k2, v )) acc

                                Err err -&amp;gt;
                                    Err err
                        )
                        (Ok [])
                    |&amp;gt; Result.mapError Decode.errorToString
                    |&amp;gt; Decode.fromResult
            )
```
looks reasonable?
I was surprised this didn't already exist in json-extra :thinking_face:</text>
  </message>
  <message conversation_id="1597">
    <ts>2019-05-17T06:27:28.133500</ts>
    <user>Nana</user>
    <text>one thing that's a bit suboptimal I guess is using `Decode.errorToString`
but there doesn't seem to be a way of turning a `Decode.Error` into a failed decoder?</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:37:41.133700</ts>
    <user>Lynne</user>
    <text>I suppose this could be simplified: `k |&amp;gt; Encode.string |&amp;gt; Decode.decodeValue kDec`</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:37:51.133900</ts>
    <user>Lynne</user>
    <text>`Decode.decodeString kDec k`</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:38:47.134100</ts>
    <user>Nana</user>
    <text>ah true :+1:</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:39:54.134300</ts>
    <user>Huong</user>
    <text>`json-extra` does have a `dict2`, but yeah, that’s not going to work if you need non-comparables or allow duplicates. I’ll look into adding a more generic function! Feel free to log an issue with a motivational use-case :heart:</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:41:40.134500</ts>
    <user>Lynne</user>
    <text>I would probably also use `Result.andThen` inside the folding function to shirt-circuit on first error. This would, presumably, allow removing `Result.mapError` also.</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:41:53.134700</ts>
    <user>Lynne</user>
    <text>(need to think if this was a valid statement though)</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:42:04.134900</ts>
    <user>Nana</user>
    <text>if only `type ID = ID String` and such were `comparable` :pray:</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:43:04.135100</ts>
    <user>Huong</user>
    <text>Yeah, that’s a good use-case :thumbsup:</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:43:30.135300</ts>
    <user>Huong</user>
    <text>If I don’t forget, I’ll add it somewhere this weekend</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:51:27.135500</ts>
    <user>Nana</user>
    <text>&lt;@Lynne&gt; I'm already short-circuiting on the first error, I think `Result.andThen` would just be another way of writing it instead of using `case..of` ?</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T06:52:22.135800</ts>
    <user>Nana</user>
    <text>&lt;@Huong&gt; cool :smile: submitted an issue</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:00:23.136100</ts>
    <user>Nana</user>
    <text>or actually I'm not short-circuiting, and neither would `Result.andThen`</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:00:58.136300</ts>
    <user>Nana</user>
    <text>to do that you'd have to write a recursive function instead of using `List.foldr`</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:04:50.136500</ts>
    <user>Nana</user>
    <text>oh btw `decodeString` doesn't work, unless you first wrap the string in `"`</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:06:18.136700</ts>
    <user>Lynne</user>
    <text>Correct, that’s what I was fighting with…</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:06:27.136900</ts>
    <user>Huong</user>
    <text>(json-extra uses the recursive approach. Pro: it short circuits. Con: it’s not currently tail-recursive, so probably best not to use it on objects with ~6k entries. I plan to take care of that this weekend, too)</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:07:11.137100</ts>
    <user>Lynne</user>
    <text>That’s what I have come with so far: &lt;https://ellie-app.com/5yQzNPkJFYxa1&gt;</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:07:26.137400</ts>
    <user>Lynne</user>
    <text>(Safari sucks btw)</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:07:54.137600</ts>
    <user>Lynne</user>
    <text>Dunno if it is better than what &lt;@Nana&gt; suggested</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:08:06.137800</ts>
    <user>Lynne</user>
    <text>But as far as I understand it is tail recursive</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:08:19.138000</ts>
    <user>Huong</user>
    <text>yeah, need to reverse the list at the end, though. Technically JS object aren’t ordered, but there is a (fair) expectation that order is preserved nevertheless</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:08:30.138200</ts>
    <user>Lynne</user>
    <text>Correct</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:09:12.138400</ts>
    <user>Lynne</user>
    <text>&lt;https://ellie-app.com/5yQCyPfyFC4a1&gt;</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:09:53.138600</ts>
    <user>Huong</user>
    <text>yep, exactly</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:10:10.138800</ts>
    <user>Huong</user>
    <text>The hardest thing is finding a name :sweat_smile:</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:10:50.139000</ts>
    <user>Lynne</user>
    <text>Yeah…</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:11:48.139200</ts>
    <user>Nana</user>
    <text>since you have `dict2` which is the equivalent for `Decode.dict` I guess you could call it `keyValuePairs2` ?</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T07:13:08.139400</ts>
    <user>Huong</user>
    <text>Yeah, that would be my first idea, too. It seems like pretty bad naming, though, but then I also don’t want to do a breaking change.

Urgh, naming.</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T07:16:20.139600</ts>
    <user>Lynne</user>
    <text>Something like `typedKeyValuePairs` or `keyValuePairsTyped` maybe?</text>
  </message>
  <message conversation_id="1600">
    <ts>2019-05-17T08:27:08.139900</ts>
    <user>Raylene</user>
    <text>customKeyValuePairs?</text>
  </message>
  <message conversation_id="1598">
    <ts>2019-05-17T10:21:50.141600</ts>
    <user>Lilli</user>
    <text>&lt;@Nana&gt; forgive me, i just opened slack and i could only think about this: &lt;https://imgur.com/a/JHKOHEn&gt;</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:00:38.143400</ts>
    <user>Willodean</user>
    <text>Does anyone know the depth of `lazy1`?</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:00:51.143700</ts>
    <user>Willodean</user>
    <text>what is the map size?</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:25:06.145000</ts>
    <user>Augustus</user>
    <text>&lt;@Willodean&gt; it doesn't really have a depth, it memoizes a function with one argument</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:25:59.145900</ts>
    <user>Augustus</user>
    <text>The code bit for it is here &lt;https://github.com/elm/virtual-dom/blob/dev/src/Elm/Kernel/VirtualDom.js#L685&gt;</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:26:08.146100</ts>
    <user>Willodean</user>
    <text>&lt;@Augustus&gt; by depth I mean what is the cache size?</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:27:00.146900</ts>
    <user>Augustus</user>
    <text>It isn't stored in a cache like you are thinking of</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:28:14.148200</ts>
    <user>Augustus</user>
    <text>Check out that code in virtual DOM, there is is comparing the old and new arguments to see if they are referentially equal, if they are all equal it will lazy render</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:41:21.148900</ts>
    <user>Willodean</user>
    <text>so the depth is 1</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:41:32.149200</ts>
    <user>Willodean</user>
    <text>as in it stores the last value only</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:42:05.149600</ts>
    <user>Willodean</user>
    <text>The old arguements is the cache</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T13:46:27.151300</ts>
    <user>Augustus</user>
    <text>Sorry I thought you were talking depth like keeping a cache for the arguments to view functions for child nodes of lazy nodes</text>
  </message>
  <message conversation_id="1599">
    <ts>2019-05-17T14:26:36.151600</ts>
    <user>Willodean</user>
    <text>right, which it does &lt;@Augustus&gt;</text>
  </message>
  <message conversation_id="1601">
    <ts>2019-05-17T14:34:41.152000</ts>
    <user>Kira</user>
    <text>Thanks! I have been playing a bit with lazy and keyed and they didn't seem to make any difference. After poking a bit, it seems that it's specifically how the _menu_ plugin manipulates the DOM to insert the menu. I'll try web components first, and if not I'll probably modify the menu plugin to expect that the needed HTML elements are already there (created with Elm), instead of creating them itself.</text>
  </message>
  <message conversation_id="1602">
    <ts>2019-05-17T14:41:11.153300</ts>
    <user>Alicia</user>
    <text>nah it only does for the top level, if any of the arguments has changed it re-renders it all</text>
  </message>
  <message conversation_id="1602">
    <ts>2019-05-17T14:41:31.153800</ts>
    <user>Alicia</user>
    <text>forgot I switched accounts, antew is me too, this is my work account :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1602">
    <ts>2019-05-17T14:43:24.155700</ts>
    <user>Alicia</user>
    <text>like say you have a function
```
renderSomething: Int -&amp;gt; Int -&amp;gt; Html msg
renderSomething val1 val2 =
    div [] [
        div [] [ text &amp;lt;| String.fromInt val1 ]
       , div [] [ text &amp;lt;| String.fromInt val2 ]
]
```

With some extra work it could be able to see that if only `val1` changes or only `val2` changes it only needs to partially re-render, but it will re-render it all</text>
  </message>
  <message conversation_id="1602">
    <ts>2019-05-17T16:36:44.156000</ts>
    <user>Huong</user>
    <text>I keep forgetting this :sweat_smile:</text>
  </message>
  <message conversation_id="1602">
    <ts>2019-05-17T16:44:11.156200</ts>
    <user>Alicia</user>
    <text>I need to just delete this one and go on antew only :cry:</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-17T18:00:15.158400</ts>
    <user>Shin</user>
    <text>Hi. I am trying to create a fuzzer of type Fuzzer (List Int) that would contain exactly 10 random integer values ranging from 0 to 10. Has anyone ever came up with something similar? Thanks.</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-17T18:16:20.158900</ts>
    <user>Virgie</user>
    <text>yea, you'd need this function
```
combine : List (Fuzzer a) -&amp;gt; Fuzzer (List a)
combine l =
    case l of
        [] -&amp;gt; Fuzz.constant [] 

        x :: xs -&amp;gt; Fuzz.map2 (::) x (combine xs)
```</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-17T18:16:44.159400</ts>
    <user>Virgie</user>
    <text>then I think `combine (List.repeat 10 (Fuzz.intRange 0 10))` should do it</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-17T18:18:37.159800</ts>
    <user>Shin</user>
    <text>Thanks &lt;@Virgie&gt; for the quick reply.</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-17T18:19:15.160300</ts>
    <user>Virgie</user>
    <text>a more efficient version (for general use, 10 element lists are fine) is
```
combine : List (Fuzzer a) -&amp;gt; Fuzzer (List a)
combine list = combineHelp list (Fuzz.constant [])

combineHelp rest accum = 
    case rest of
        [] -&amp;gt; 
            accum

        x :: xs -&amp;gt; 
            combineHelp rest (Fuzz.map2 (::) x accum)
```</text>
  </message>
  <message conversation_id="1604">
    <ts>2019-05-17T19:00:36.160800</ts>
    <user>Raylene</user>
    <text>So... `traverse` :stuck_out_tongue_closed_eyes:</text>
  </message>
  <message conversation_id="1605">
    <ts>2019-05-17T19:22:10.161300</ts>
    <user>Isiah</user>
    <text>Hi, I'm new. Guide me</text>
  </message>
  <message conversation_id="1605">
    <ts>2019-05-17T19:22:51.161500</ts>
    <user>Nana</user>
    <text>&lt;@Isiah&gt; &lt;https://guide.elm-lang.org/&gt;</text>
  </message>
  <message conversation_id="1605">
    <ts>2019-05-17T19:23:38.161900</ts>
    <user>Isiah</user>
    <text>Thanks &lt;@Nana&gt;</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T05:56:01.164600</ts>
    <user>Hoa</user>
    <text>Am I missing something or there isn’t a direct way to generate a `List` of values with a “step” parameter?   Something like `List.range start end step` ? I guess I have to use range and then multiply the value, right?   `0 1 2 3` * step</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:06:00.164800</ts>
    <user>Jae</user>
    <text>Doesn't look like there's a `List.range` with step, not even in `elm-community/List.Extra`</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:09:04.165100</ts>
    <user>Hoa</user>
    <text>Yeah, I checked there too.</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:09:58.165300</ts>
    <user>Jae</user>
    <text>Sounds like a chance to implement it and make a pull request</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:13:21.166100</ts>
    <user>Allison</user>
    <text>is there a common way to embed videos from multiple sources (yt and vimeo)? I would like to use something like &lt;https://plyr.io&gt;</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:13:44.166500</ts>
    <user>Danika</user>
    <text>You could wrap that in a web component</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:14:15.166900</ts>
    <user>Allison</user>
    <text>:thinking_face: the plyr player?</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:25:45.167400</ts>
    <user>Raylene</user>
    <text>Yeah, just wrap it if it works for you</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:30:02.169600</ts>
    <user>Allison</user>
    <text>How it will work with elm’s runtime if the js code changes the component? What I mean is — I thought I cannot let js modify the DOM because it will break elm’s virtual DOM (similarly to how adblockers breaks elm code)..</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:31:30.170100</ts>
    <user>Danika</user>
    <text>thats what web components are for, you create the web component in elm, and that components js handles its own "sub" dom</text>
  </message>
  <message conversation_id="1603">
    <ts>2019-05-18T06:33:11.170800</ts>
    <user>Allison</user>
    <text>awesome! haven’t heard of it before! every day you learn something new I guess.. thanks!</text>
  </message>
  <message conversation_id="1606">
    <ts>2019-05-18T08:30:30.174100</ts>
    <user>Tarah</user>
    <text>Hi, how can I parse URL query parameters into a list of key value pairs? I’m able to parse them, if I know what they are, but not if they can be anything. E.g.

I want to parse this URL:

```host:80/path?a=1&amp;amp;b=2&amp;amp;foo=bar```

 into:

```
[("a", "1"), ("b", "2"), ("foo", "bar")]
```</text>
  </message>
  <message conversation_id="1606">
    <ts>2019-05-18T08:45:47.175400</ts>
    <user>Hoa</user>
    <text>One crude way would be to just take that string  after `?` and split by `&amp;amp;`. This way you are able to handle any number of params</text>
  </message>
  <message conversation_id="1606">
    <ts>2019-05-18T08:46:03.175700</ts>
    <user>Hoa</user>
    <text>It’s more fragile, of course</text>
  </message>
  <message conversation_id="1606">
    <ts>2019-05-18T09:29:26.176400</ts>
    <user>Tarah</user>
    <text>Ok, I'll do that, until I find a better way. Thx</text>
  </message>
  <message conversation_id="1606">
    <ts>2019-05-18T10:48:07.176600</ts>
    <user>Su</user>
    <text>You might be able to use &lt;https://package.elm-lang.org/packages/elm/url/latest/Url-Parser-Query&gt;</text>
  </message>
  <message conversation_id="1607">
    <ts>2019-05-18T10:57:21.176700</ts>
    <user>Tarah</user>
    <text>This is exactly what my problem is. I cannot come up with a way to achieve this with that API.</text>
  </message>
  <message conversation_id="1608">
    <ts>2019-05-18T11:56:03.177000</ts>
    <user>Su</user>
    <text>Sorry about that, I didn’t read your question carefully enough…I understand your problem now. This sounds like a task that is big, but you could write your own parser with &lt;https://package.elm-lang.org/packages/elm/parser/latest/&gt;. There is an elm-conf talk about parsers; it’s featured in the latest issue of elm weekly (&lt;http://www.elmweekly.nl/issues/elm-weekly-issue-60-173597&gt;)</text>
  </message>
  <message conversation_id="1609">
    <ts>2019-05-18T12:33:40.177300</ts>
    <user>Giselle</user>
    <text>Hi, Was your talk recorded? Could I watch it?</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:15:41.179000</ts>
    <user>Bebe</user>
    <text>Hi all, does anyone have an example of killing Process.sleep tasks before they resolve? I'm having a hard time making sense of the process module and what to do with it</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:16:12.179500</ts>
    <user>Bebe</user>
    <text>Basically I want to cancel a timeout once something has happened to avoid undesired messages coming in</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:18:06.180600</ts>
    <user>Virgie</user>
    <text>what do you have so far?</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:18:26.181100</ts>
    <user>Bebe</user>
    <text>Do I have to Task.perform both the Process.sleep and the Process.spawn sleepTask and make a message to get the Id of the timeout?</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:18:59.181600</ts>
    <user>Bebe</user>
    <text>not much, I've been trying to figure out what code to write to be honest :sweat_smile:</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:20:25.182500</ts>
    <user>Virgie</user>
    <text>yea, I think you need to first perform the spawning (so you have an ID), store that in the model, then kill when needed</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:21:59.183400</ts>
    <user>Bebe</user>
    <text>```
abandonTimeout : Msg -&amp;gt; Cmd Msg
abandonTimeout msg =
    let
        sleepTask =
            Process.sleep 300

        timer =
            Process.spawn sleepTask
    in
    Cmd.batch
        [ Task.perform (\() -&amp;gt; msg) sleepTask
        , Task.perform (\id -&amp;gt; TimeoutId id) timer
        ]
```
this seems to compile. I have to check if it still does what I want. I guess then, on `TimeoutId` I store the id in the model, and then reuse it when I need it</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:26:23.184900</ts>
    <user>Bebe</user>
    <text>I wonder if I'm spawning the sleep task twice with what I'm doing</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:26:27.185100</ts>
    <user>Bebe</user>
    <text>:confused: so confused</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:26:32.185300</ts>
    <user>Virgie</user>
    <text>I think you are</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:26:42.185500</ts>
    <user>Virgie</user>
    <text>so what do you want this to do?</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:27:44.186700</ts>
    <user>Bebe</user>
    <text>i want to get a `Msg` after 300 ms to do some logic. I want to cancel that Task if something else happens before the 300ms so that that `Msg` never arrives</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:28:15.187400</ts>
    <user>Bebe</user>
    <text>sounds ridiculous, but I'm dealing with mouse enter and leave interactions which actually have that kind of timely interactions</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:28:49.187800</ts>
    <user>Bebe</user>
    <text>gonna try on an ellie</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:46:28.188600</ts>
    <user>Bebe</user>
    <text>that thing I wrote is definitely not working. I'm still getting the timeout message even if I kill the pid, so I must be killing the duplicate sleep task</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:49:00.189300</ts>
    <user>Bebe</user>
    <text>here is the example: &lt;https://ellie-app.com/5zqtzfQMRZxa1&gt; clicking trigger timeout and cancelling it before two seconds, look at the logs (bottom up) and the TimedOut message is still received</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T13:58:53.190500</ts>
    <user>Bebe</user>
    <text>I'm not sure what to do, seems like a simple enough use case, but I can't figure out Process, and I'm not having much luck with google</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:00:02.190700</ts>
    <user>Lynne</user>
    <text>&lt;https://ellie-app.com/5zqF55LKc92a1&gt;</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:00:12.191000</ts>
    <user>Lynne</user>
    <text>Seems like it works now</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:01:30.191300</ts>
    <user>Bebe</user>
    <text>WOT</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:02:14.191600</ts>
    <user>Lynne</user>
    <text>Apparently you created two processes</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:02:31.192200</ts>
    <user>Bebe</user>
    <text>yeah, I had no idea what I was doing lol</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:02:32.192400</ts>
    <user>Lynne</user>
    <text>One was killed (presumably), another one completed</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:02:51.193400</ts>
    <user>Bebe</user>
    <text>I see now, you are using Task.succeed to trigger a message. That's the missing piece I wasn't thinking aoubt</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:03:42.193900</ts>
    <user>Bebe</user>
    <text>Thanks a lot Sergey</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:03:47.194100</ts>
    <user>Lynne</user>
    <text>ur welcome</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:04:32.194700</ts>
    <user>Lynne</user>
    <text>It may need a bit of polishing (like removal of `()` from arguments) but I leave it in your hands</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:04:43.194900</ts>
    <user>Bebe</user>
    <text>right on!</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:28:21.195800</ts>
    <user>Bebe</user>
    <text>&lt;@Lynne&gt; hey, the changes you made don't trigger the timeout ever &lt;https://ellie-app.com/5zqF55LKc92a1&gt; :laughing:</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:28:34.196300</ts>
    <user>Bebe</user>
    <text>I've been furiously refactoring and it turns out it doesn't work lol</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:28:42.196600</ts>
    <user>Lynne</user>
    <text>Bad</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:28:59.196900</ts>
    <user>Bebe</user>
    <text>Seems like the `TimedOut` message is never sent back to the update function</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:29:58.198000</ts>
    <user>Lynne</user>
    <text>May be it is not supposed to…</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:30:04.198200</ts>
    <user>Bebe</user>
    <text>I'm starting to think there is no way to do this in Elm right now, there doesn't seem to be a way to send messages back to update after a task is spawned</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:30:45.198700</ts>
    <user>Lynne</user>
    <text>May be just keep `canceled` flag in the model then and let it trigger always?</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:31:06.199500</ts>
    <user>Bebe</user>
    <text>maybe that is what _Note: This creates a relatively restricted kind of Process because it cannot receive any messages. More flexibility for user-defined processes will come in a later release!_ means</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:31:46.200500</ts>
    <user>Lynne</user>
    <text>Like if it was canceled before triggering you set this flag to `True` and if it is `True` when `TimedOut` message is received, you just ignore it</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:32:02.200800</ts>
    <user>Bebe</user>
    <text>I was doing that but the thing is you can trigger new timeouts and their messages intermingle with the previous timeout cancels</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:32:18.201400</ts>
    <user>Lynne</user>
    <text>Keep list of canceled `Id`s</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:32:27.201700</ts>
    <user>Bebe</user>
    <text>so I guess I'm going to have to assign a monotonically increasing integer (my own ids) to the timeouts stuff and use that to ignore them if the messages are from a previous timeout</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:32:29.201900</ts>
    <user>Lynne</user>
    <text>Ah, then it won’t come to your app..</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:32:29.202000</ts>
    <user>Bebe</user>
    <text>sad times</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:40:18.202500</ts>
    <user>Lynne</user>
    <text>This is definitely not what I expect from reading the docs</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:58:41.202900</ts>
    <user>Bebe</user>
    <text>posted on discourse to reach a broader audience, given it is saturday evening on the chat</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:58:44.203100</ts>
    <user>Bebe</user>
    <text>&lt;https://discourse.elm-lang.org/t/cancelling-a-process-sleep-task-before-it-fulfills/3666?u=joakin&gt;</text>
  </message>
  <message conversation_id="1610">
    <ts>2019-05-18T14:58:56.203400</ts>
    <user>Bebe</user>
    <text>thanks sergey and folkertdev</text>
  </message>
  <message conversation_id="1611">
    <ts>2019-05-18T15:09:47.203500</ts>
    <user>Tarah</user>
    <text>np. I’m quite familiar with parsers. I just don’t know how to combine them with the Url.Parser API so that I achieve what I want. The last resort is always as mentioned by &lt;@Hoa&gt; to take the URL string and write a custom parser (either using elm/parser or whatever seems appropriate).</text>
  </message>
  <message conversation_id="1611">
    <ts>2019-05-18T15:32:23.203700</ts>
    <user>Tarah</user>
    <text>Probably some room for improvement, but this is a start:

```
type Route
    = Main (List ( String, String ))


parseQueryParameter : String -&amp;gt; Maybe ( String, String )
parseQueryParameter query =
    case String.split "=" query of
        x :: y :: [] -&amp;gt;
            Just ( x, y )

        _ -&amp;gt;
            Nothing


parseUrl : Url -&amp;gt; Maybe Route
parseUrl { query } =
    query |&amp;gt; Maybe.map (String.split "&amp;amp;" &amp;gt;&amp;gt; List.filterMap parseQueryParameter &amp;gt;&amp;gt; Main)

```</text>
  </message>
  <message conversation_id="1612">
    <ts>2019-05-18T15:49:58.204000</ts>
    <user>Allison</user>
    <text>&lt;@Danika&gt; &lt;@Raylene&gt; thanks for guiding me, web component works just great!</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T15:57:28.204500</ts>
    <user>Nathan</user>
    <text>Is it possible to merge multiple Msg types into one?</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T16:02:47.205300</ts>
    <user>Danika</user>
    <text>How do you imagine that working / looking like</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T16:03:07.205700</ts>
    <user>Danika</user>
    <text>There's `Cmd.batch` that may be of use</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T16:05:36.208100</ts>
    <user>Nathan</user>
    <text>I have a module with various functions for querying data from an external API, each of which generates various response messages. How would I go about having the main module, which has its own bunch of messages, declare that along with that it was going to accept all the APIs response messages without having to add them one by one to the Msg type?

Basically trying to figure out how to break up areas of unrelated functionality without having everything route through a single monolithic update function that takes a single monolithic Msg type. What do people do to manage this when they get to where their application can have hundreds of different messages?</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T16:11:45.211700</ts>
    <user>Dorsey</user>
    <text>No, it wasn’t recorded. Sorry. Next month I’ll be doing a longer presentation about this project on FP Amsterdam meetup and I hope to record it. </text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T16:22:32.213300</ts>
    <user>Giselle</user>
    <text>Ok thank you, if it will be recorded, I would be courious to watch it.</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T16:40:51.214400</ts>
    <user>Nana</user>
    <text>&lt;@Nathan&gt; you can do that with `Html.map` , `Cmd.map` etc.
you can have a look at &lt;https://github.com/rtfeldman/elm-spa-example&gt; for reference</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T16:42:04.214700</ts>
    <user>Nana</user>
    <text>"without having to add them one by one to the Msg type?" not sure that's possible though</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T16:46:48.215900</ts>
    <user>Nathan</user>
    <text>&lt;@Nana&gt; Thanks, I'll have a look at that.</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T16:53:31.219600</ts>
    <user>Malinda</user>
    <text>&lt;@Nathan&gt; Some way or other you have to channel every msg into your main update function.
But you don't have to manage every Msg in your main module.
I use a pattern, by which I nicely separate my modules from their parent, but the "parent" modules can respond to the changes of their children.
This is the update function of the submodule "Person":
```
update : Database -&amp;gt; Msg -&amp;gt; State -&amp;gt; ( State, Maybe OutMsg )
update db msg state =
```
My child modules return their updated state, and sometimes a special OutMsg.
This is one example of this type:
```
type OutMsg
    = OutCmd (Cmd Msg)
    | CreateLink Link
    | UpdateLink String Link
    | RemoveLink String
    | CreateKumu String
```
Here is a part of the parent module's update function dealing with this kind of child module:
```
        ( PersonPage page_state, PersonMsg page_msg ) -&amp;gt;
            Page.Person.update state.db page_msg page_state
                |&amp;gt; (\( new_state, out_msg ) -&amp;gt;
                        ( { state | page = PersonPage new_state }
                        , case out_msg of
                            Just (Page.Person.OutCmd out_cmd) -&amp;gt;
                                Cmd.map PersonMsg out_cmd

                            Just (Page.Person.CreateLink link) -&amp;gt;
                                with_current_time &amp;lt;| create_link link

                            Just (Page.Person.UpdateLink link_id link) -&amp;gt;
                                with_current_time &amp;lt;| update_link ( link_id, link )

                            Just (Page.Person.RemoveLink link_id) -&amp;gt;
                                remove_link link_id

                            Just (Page.Person.CreateKumu person_id) -&amp;gt;
                                Router.navigate key &amp;lt;| Router.NewKumu ( Link.Person, person_id )

                            Nothing -&amp;gt;
                                Cmd.none
                        )
                   )
```
If you want to fire an API call from your child module, you wrap it into an `OutCmd (Cmd Msg)`.  Your parent module will pass the result to your child module.</text>
  </message>
  <message conversation_id="1614">
    <ts>2019-05-18T17:53:41.224200</ts>
    <user>Nathan</user>
    <text>&lt;@Malinda&gt; That seems to makes sense. So your modules are still relatively tightly coupled to the overall application since you are restricted to a single global model but you can have a top level update whose primary job is to route to the relevant update functions to the appropriate module and provide the routing glue for the various inter-module communications. Is that the general idea?</text>
  </message>
  <message conversation_id="1614">
    <ts>2019-05-18T17:54:41.224900</ts>
    <user>Malinda</user>
    <text>Yes, this is how things work in Elm.</text>
  </message>
  <message conversation_id="1614">
    <ts>2019-05-18T17:55:15.225500</ts>
    <user>Malinda</user>
    <text>You always have only one Model. One single source of truth.</text>
  </message>
  <message conversation_id="1614">
    <ts>2019-05-18T17:56:46.226800</ts>
    <user>Malinda</user>
    <text>But you can divide your app to relatively independent modules.</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T18:36:20.229500</ts>
    <user>Nathan</user>
    <text>So does your main Msg type look something like ```type Msg
    = ModuleOneMsg Module1.OutMsg
    | ModuleTwoMsg Module2.OutMsg```</text>
  </message>
  <message conversation_id="1614">
    <ts>2019-05-18T19:28:02.231500</ts>
    <user>Malinda</user>
    <text>No, something like this:
```
type Msg
    = Module1Msg Module1.Msg
    | Module2Msg Module2.Msg
```</text>
  </message>
  <message conversation_id="1613">
    <ts>2019-05-18T20:07:56.233100</ts>
    <user>Nathan</user>
    <text>Ah yeah, so Module.OutMsg is part of the return value of the modules own update functions and gives each module a mechanism to get the main update function to invoke commands on the modules behalf.</text>
  </message>
  <message conversation_id="1614">
    <ts>2019-05-18T20:29:26.233300</ts>
    <user>Malinda</user>
    <text>Yes, exactly</text>
  </message>
  <message conversation_id="1615">
    <ts>2019-05-19T04:50:45.233800</ts>
    <user>Lynne</user>
    <text>I have looked again into sources and it feels like it is just not implemented</text>
  </message>
  <message conversation_id="1615">
    <ts>2019-05-19T04:52:47.234000</ts>
    <user>Lynne</user>
    <text>In &lt;https://github.com/elm/core/blob/master/src/Elm/Kernel/Scheduler.js&gt; calling `spawn` leads to enqueuing an object with tag `__2_PROCESS` for which there is no separate branch in `_Scheduler_step`. So it feels like this “spawned” process is treated as failure.</text>
  </message>
  <message conversation_id="1616">
    <ts>2019-05-19T10:04:27.234600</ts>
    <user>Shin</user>
    <text>Absolutely! And for those who would like to really understand what is going on behind the scenes with a traverse operation, I suggest this amazing article by Scott Wlaschin: &lt;https://fsharpforfunandprofit.com/posts/elevated-world-4/#traverse&gt;</text>
  </message>
  <message conversation_id="1616">
    <ts>2019-05-19T10:05:21.235100</ts>
    <user>Danika</user>
    <text>scott is an absolute gem</text>
  </message>
  <message conversation_id="1616">
    <ts>2019-05-19T10:05:54.235700</ts>
    <user>Danika</user>
    <text>he should be like an FP ambassador or something :joy:</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:20:57.237600</ts>
    <user>Vilma</user>
    <text>how can I use `Bytes.width` to decide which decoder I should use? The `elm/bytes` package APIs don’t seem as flexible as `elm/json` :sadpanda:</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:24:53.237900</ts>
    <user>Virgie</user>
    <text>can you give a bit more info on what you're trying to do?</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:26:07.238200</ts>
    <user>Vilma</user>
    <text>yes</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:26:18.238500</ts>
    <user>Vilma</user>
    <text>let me try to simplify my question</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:29:24.241500</ts>
    <user>Vilma</user>
    <text>&lt;@Virgie&gt; I’ve got two possible sequences of bytes:
```
Seq1 =&amp;gt; N (1 byte) | A (4 byte) | B (4 byte) | C (4 byte)
Seq2 =&amp;gt; N (2 byte) | A (4 byte) | B (4 byte) | C (4 byte)
```
So each sequence has 4 different parts (N then A then B then C). However, `N` can vary in width (for Seq1 its 1 byte, for Seq2 it’s 2 byte).

I believe I need to first find out the width of the sequence to then determine if I should use the decoder for Seq1 or for Seq2</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:30:02.241800</ts>
    <user>Vilma</user>
    <text>there’s no `oneOf` like in `elm/json` :thinking_face:</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:30:42.242600</ts>
    <user>Virgie</user>
    <text>oneOf would be inefficient, in binary protocols it is always possible to do this up-front to speed up decoding (which is part of the point of using a binary protocol)</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:30:55.243000</ts>
    <user>Virgie</user>
    <text>are you using `expectBytesResponse`?</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:31:15.243300</ts>
    <user>Vilma</user>
    <text>hum…. no? don’t know what that is</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:31:24.243500</ts>
    <user>Virgie</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/http/latest/Http#expectBytesResponse&gt;</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:31:36.243800</ts>
    <user>Virgie</user>
    <text>with this one you actually get access to a `Bytes` value</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:31:46.244100</ts>
    <user>Virgie</user>
    <text>instead of having to immediately give the `Decoder`</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:32:26.244700</ts>
    <user>Vilma</user>
    <text>I see :thinking_face: but I was actually aiming at using my decoder for WebSockets instead of HTTP</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:33:00.245100</ts>
    <user>Virgie</user>
    <text>then how do you get the data? what does it look like at the start</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:34:14.246300</ts>
    <user>Vilma</user>
    <text>not sure yet :sweat_smile: just thought about writing this parser/decoder for a certain binary protocol which can be useful to me and started right away playing with `elm/bytes`</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:34:38.246700</ts>
    <user>Virgie</user>
    <text>well in this case I think the length of the sequence needs to be an argument to the decoder</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:34:43.247000</ts>
    <user>Vilma</user>
    <text>yes</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:34:48.247200</ts>
    <user>Vilma</user>
    <text>I thought the same</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:35:49.248000</ts>
    <user>Virgie</user>
    <text>then given the current websocket situation, the input is probably `Array Int` which you can encode to `Bytes` and then decode with the decoder</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:39:14.248200</ts>
    <user>Vilma</user>
    <text>I see…</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:39:29.248600</ts>
    <user>Vilma</user>
    <text>I guess I’ll try by just developing a very minimal example and I try to get it to work via WebSocket</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T11:39:46.248900</ts>
    <user>Vilma</user>
    <text>and try to better understand where to go next</text>
  </message>
  <message conversation_id="1618">
    <ts>2019-05-19T12:42:57.249500</ts>
    <user>Cyndi</user>
    <text>`elm make` always returns this</text>
  </message>
  <message conversation_id="1618">
    <ts>2019-05-19T12:47:30.250200</ts>
    <user>Lynne</user>
    <text>I bet it should not be run with Microsoft JScript runtime</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T13:06:16.251100</ts>
    <user>Cyndi</user>
    <text>&lt;@Lynne&gt; its working fine when im using powershell</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T13:32:27.252500</ts>
    <user>Raylene</user>
    <text>It's a problem with your "executable" estensions</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T13:32:35.252900</ts>
    <user>Raylene</user>
    <text>Don't call the output elm.js</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T13:32:46.253200</ts>
    <user>Raylene</user>
    <text>And remove the elm.js file</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T13:33:10.254000</ts>
    <user>Raylene</user>
    <text>Or remove .js from the environment variable, let me look it up</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T13:34:47.254400</ts>
    <user>Raylene</user>
    <text>`PATHEXT`</text>
  </message>
  <message conversation_id="1617">
    <ts>2019-05-19T13:45:35.254900</ts>
    <user>Alana</user>
    <text>or use elm.cmd</text>
  </message>
  <message conversation_id="1619">
    <ts>2019-05-19T16:47:38.255800</ts>
    <user>Desire</user>
    <text>does anyone know if there are more types like List, that don't actually have an implementation in core? &lt;https://github.com/elm/core/issues/965&gt;</text>
  </message>
  <message conversation_id="1619">
    <ts>2019-05-19T16:49:33.256000</ts>
    <user>Virgie</user>
    <text>many are, e.g. &lt;https://github.com/elm/core/blob/master/src/Platform.elm#L83&gt;</text>
  </message>
  <message conversation_id="1619">
    <ts>2019-05-19T16:49:59.256400</ts>
    <user>Virgie</user>
    <text>core is smaller now, but similar things happend in `elm/json` and `elm/bytes`</text>
  </message>
  <message conversation_id="1619">
    <ts>2019-05-19T16:53:56.256700</ts>
    <user>Desire</user>
    <text>well those are fine</text>
  </message>
  <message conversation_id="1619">
    <ts>2019-05-19T16:54:21.257300</ts>
    <user>Desire</user>
    <text>im interested in things like `List`, which doesn't even have a "mock" implementation</text>
  </message>
  <message conversation_id="1619">
    <ts>2019-05-19T18:01:43.257700</ts>
    <user>Kris</user>
    <text>&lt;@Desire&gt; I _*believe*_ `List` is the only one</text>
  </message>
  <message conversation_id="1620">
    <ts>2019-05-19T18:01:47.258000</ts>
    <user>Kris</user>
    <text>See &lt;https://github.com/elm/compiler/blob/51e20357137ebc9c3f6136cf0a3fe21c24027f39/compiler/src/Canonicalize/Environment/Foreign.hs#L62&gt;</text>
  </message>
  <message conversation_id="1620">
    <ts>2019-05-19T18:02:51.258900</ts>
    <user>Kris</user>
    <text>I'm guessing it has to do with the fact that it exposes the constructors although they're not really "elm constructors" (i.e, they're defined in js files</text>
  </message>
  <message conversation_id="1619">
    <ts>2019-05-19T18:07:22.259200</ts>
    <user>Desire</user>
    <text>thanks, that's all the info i needed</text>
  </message>
  <message conversation_id="1620">
    <ts>2019-05-19T18:08:44.259700</ts>
    <user>Erlene</user>
    <text>Is it is possible to stop Elm following a 302 automatically? I'm using the 2.0 elm/http library.</text>
  </message>
  <message conversation_id="1621">
    <ts>2019-05-19T19:24:44.259900</ts>
    <user>Cyndi</user>
    <text>removing `.JS` from `PATHEXT` works. thanks alot &lt;@Raylene&gt;!</text>
  </message>
  <message conversation_id="1622">
    <ts>2019-05-19T23:52:54.273800</ts>
    <user>Carrie</user>
    <text>I want to get the value in the option. Is there any good way in elm?</text>
  </message>
  <message conversation_id="1622">
    <ts>2019-05-19T23:55:05.274700</ts>
    <user>Carrie</user>
    <text>My initial idea was to pass the value through with onClick, but it didn't seem to work.</text>
  </message>
  <message conversation_id="1622">
    <ts>2019-05-19T23:55:43.276000</ts>
    <user>Lashawnda</user>
    <text>No, following redirects is baked into XMLHttpRequest. If you can add a ServiceWorker to your application you can intercept the request and modify its redirect behavior from there</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T00:49:52.276600</ts>
    <user>Kris</user>
    <text>You do it with the select tag</text>
  </message>
  <message conversation_id="1622">
    <ts>2019-05-20T01:05:36.276800</ts>
    <user>Carrie</user>
    <text>What I want is to get the value in the option that I click on each time. I tried the onClick method but it didn't work.</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:11:10.277300</ts>
    <user>Dexter</user>
    <text>you want to place an `onInput` on your select element</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:11:31.277800</ts>
    <user>Kris</user>
    <text>Yeah, you do that with the select, set it's `onInput`</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:11:40.278100</ts>
    <user>Kris</user>
    <text>And set the options' `value`</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:36:17.279100</ts>
    <user>Raylene</user>
    <text>This is a limitation in html, not much you can do about it</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:39:09.280100</ts>
    <user>Earlean</user>
    <text>I like how React wraps the terrible API of `select` elements to make it like other inputs</text>
  </message>
  <message conversation_id="1624">
    <ts>2019-05-20T01:43:18.282300</ts>
    <user>Lynn</user>
    <text>I think I’m missing something with `Process`. I’m try to get to cancellable backoff strategies. Not there yet as the following did not work
```
        addBackoff url backoff =
            let
                task1 =
                    Process.sleep (2000 * backoff) |&amp;gt; Task.andThen (\_ -&amp;gt; Task.succeed &amp;lt;| TryOpen url)
            in
            ( { model | sockets = Dict.insert url (Opening &amp;lt;| 1 + backoff) model.sockets }
              --            , Process.sleep (2000 * backoff) |&amp;gt; Task.perform (\_ -&amp;gt; TryOpen url)
            , task1 |&amp;gt; Task.perform (\_ -&amp;gt; NoOp)
            )
```
I can see the `NoOp`, but the `TryOpen` never comes to the update function. What am I missing?</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:46:50.282600</ts>
    <user>Earlean</user>
    <text>you're ignoring the value that task1 produces</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:47:06.283000</ts>
    <user>Earlean</user>
    <text>which is the `TryOpen url` value</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:49:24.283800</ts>
    <user>Lynn</user>
    <text>ok, that makes sense.</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:49:59.285000</ts>
    <user>Lynn</user>
    <text>what I really want is to use is `spawn`, and to store the id in my model, so that I can cancel it</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:50:17.285200</ts>
    <user>Earlean</user>
    <text>```
task1 |&amp;gt; Task.perform (\result -&amp;gt; case result of 
  Ok tryOpen -&amp;gt; tryOpen
  Err _ -&amp;gt; NoOp)
```</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:50:59.286000</ts>
    <user>Lynn</user>
    <text>ok, so your code will be broadly equivalent to the commented out line i think</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:51:16.286500</ts>
    <user>Lynn</user>
    <text>my experimentation is mis-guided I can see though</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:52:16.287500</ts>
    <user>Earlean</user>
    <text>`spawn` isn't useful yet if you need the result of the Task</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:53:03.288400</ts>
    <user>Lynn</user>
    <text>ah</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:53:14.288600</ts>
    <user>Earlean</user>
    <text>since once you pass the Task to spawn you get back a task that just gives you the `Id` but doesn't give you a way to get it's result.</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:53:28.288900</ts>
    <user>Lynn</user>
    <text>yes, that was what I experienced</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:54:03.290000</ts>
    <user>Lynn</user>
    <text>Ok, so no way to cancel , other than to check when the `sleep` returns in some other way?</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:54:28.290300</ts>
    <user>Earlean</user>
    <text>what are you canceling?</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:54:50.291000</ts>
    <user>Lynn</user>
    <text>I want to sleep for sometime and then get a message back</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:54:58.291400</ts>
    <user>Lynn</user>
    <text>but the need for that message may go away</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:55:16.291900</ts>
    <user>Earlean</user>
    <text>In most cases it's much easier to not cancel and decide how you handle the msg you don't want in `update`</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:55:20.292100</ts>
    <user>Lynn</user>
    <text>I could check that when the message returns, or cancel the process all together</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:55:44.292600</ts>
    <user>Earlean</user>
    <text>eg. set a flag in your model 'ignore this when it comes back' and check that before using the msg</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:56:09.293000</ts>
    <user>Lynn</user>
    <text>yep - that’s what I have at present. was trying to optimize that</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T01:56:16.293300</ts>
    <user>Lynn</user>
    <text>thanks a lot &lt;@Earlean&gt;</text>
  </message>
  <message conversation_id="1625">
    <ts>2019-05-20T04:15:54.294200</ts>
    <user>Bebe</user>
    <text>That seems like the answer I needed for &lt;https://discourse.elm-lang.org/t/cancelling-a-process-sleep-task-before-it-fulfills/3666&gt;</text>
  </message>
  <message conversation_id="1623">
    <ts>2019-05-20T04:16:29.295000</ts>
    <user>Bebe</user>
    <text>Happy to mark it as a solution if you post it there &lt;@Earlean&gt; :smiley:</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:47:10.295700</ts>
    <user>Emilee</user>
    <text>do any of you build in parcel and have run into this: &lt;https://github.com/parcel-bundler/parcel/issues/3042&gt; ?</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:54:36.295800</ts>
    <user>Iona</user>
    <text>You may need to restrict the number of workers you have in the parcel build this will make the build slower, but will play nice with the windows FS locking</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:54:48.296000</ts>
    <user>Iona</user>
    <text>the env variable: PARCEL_WORKERS=1</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:55:37.296200</ts>
    <user>Iona</user>
    <text>We had to do that together with serialising the elm builds to prevent the “not enough bytes” and other corruptions</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:56:19.296400</ts>
    <user>Iona</user>
    <text>(parcel creates an instance of the elm compiler for each worker process - the `node-elm-compiler` that is)</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:56:19.296600</ts>
    <user>Emilee</user>
    <text>cool, i'll try</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:56:35.296800</ts>
    <user>Emilee</user>
    <text>how did you serialize the elm builds? i think my method's not very elegant and i'm not sure it even works</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:57:44.297000</ts>
    <user>Iona</user>
    <text>In our scenario, I copied the parcel `ElmAsset.js` file and registered a my patched version when I ran the build. We have a gulp file which governs the build</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:58:14.297200</ts>
    <user>Emilee</user>
    <text>and the serialization itself?</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:58:53.297400</ts>
    <user>Iona</user>
    <text>looking it up quick</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:58:55.297600</ts>
    <user>Iona</user>
    <text>1 sec</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:59:00.297800</ts>
    <user>Emilee</user>
    <text>thanks so much! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:59:27.298000</ts>
    <user>Iona</user>
    <text>line 74 of &lt;https://github.com/parcel-bundler/parcel/blob/master/packages/core/parcel-bundler/src/assets/ElmAsset.js&gt;</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:59:33.298200</ts>
    <user>Iona</user>
    <text>changed to:</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T05:59:52.298400</ts>
    <user>Iona</user>
    <text>`let compiled = this.elm.compileToStringSync(this.name, this.elmOpts);`</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T06:00:16.298600</ts>
    <user>Iona</user>
    <text>That’s all we did and it seems to be behaving. Haven’t had a corruption for a while now</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T06:01:13.298800</ts>
    <user>Emilee</user>
    <text>nice, thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T06:01:14.299000</ts>
    <user>Iona</user>
    <text>We access parcel through the bundler API</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T06:01:49.299200</ts>
    <user>Iona</user>
    <text>```
function bundles() {
    const options = {
        watch: false,
	autoInstall: false, // Fail if required tools are not in the environment
        cache: process.env.NODE_ENV !== 'production',
        contentHash: true,
        logLevel: 4,
    };

    const main = new Bundler([
        &amp;lt;entry files&amp;gt;
    ], options)

    // Below we register our own elm asset processor.
    // The custom processor changes the compilation of the node-elm-compiler
    // to be syncronous and blocking instead of an async promise returning
    // function.
    // This custom asset processor is needed to work around the issue of
    // the elm compiler that corrupts its caches when multiple compilations
    // occur at the same time.
    // Note: only a single processing thread should be allowed for this
    main.addAssetType('elm', require.resolve('./BlockingElmAsset.js'));

    return main.bundle();
}
```</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T06:05:25.299500</ts>
    <user>Iona</user>
    <text>Hopefully the elm compiler gets patched to prevent these corruptions itself</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T06:16:24.299800</ts>
    <user>Emilee</user>
    <text>i'd be really interested in which file actually gets locked on windows^^</text>
  </message>
  <message conversation_id="1627">
    <ts>2019-05-20T06:16:32.300000</ts>
    <user>Emilee</user>
    <text>probably something in elm-stuff?</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T06:16:44.300200</ts>
    <user>Emilee</user>
    <text>on linux it seems to work fine with multiple workers, so far</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T06:18:04.300400</ts>
    <user>Iona</user>
    <text>yeah, its the elm-stuff</text>
  </message>
  <message conversation_id="1626">
    <ts>2019-05-20T06:18:14.300600</ts>
    <user>Iona</user>
    <text>Windows has weird filesystem locking</text>
  </message>
  <message conversation_id="1627">
    <ts>2019-05-20T06:18:24.300800</ts>
    <user>Emilee</user>
    <text>yeah, windows' open-locking is super annoying</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T08:34:08.301500</ts>
    <user>Nana</user>
    <text>hmm, so `List.take` seems to be really slow :disappointed:</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T08:35:40.301600</ts>
    <user>Huong</user>
    <text>It needs to do quite a few things, but I wouldn’t exactly call it slow. What kind of scenario are you dealing with that `List.take` performance becomes an issue?</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T08:44:11.303800</ts>
    <user>Venessa</user>
    <text>I am curious to know how people deal with the following challenges writing full-page SPAs in Elm:
1. changing meta tag values based on page routes (and in general dealing with the &amp;lt;head&amp;gt;...&amp;lt;/head&amp;gt; section of each "page") -- the motivating use case here is ensuring FB and Twitter post the right content when a user "shares" a page;
2. ensuring Google Analytics and other such services work and accurately capture user activity.</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T08:47:17.304700</ts>
    <user>Lucius</user>
    <text>I can't get &lt;https://github.com/stil4m/elm-analyse&gt; to analyse tests, only files under `source-directories`. Suggestions?</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T08:54:14.304900</ts>
    <user>Nana</user>
    <text>Or wait, I forgot I was also doing `List.filter`, that might be the slow one</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T08:55:11.305100</ts>
    <user>Nana</user>
    <text>I've got a list of 4000 users from which I display the first 100 in a select box</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T08:55:35.305300</ts>
    <user>Nana</user>
    <text>The user can also type to filter by name</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T09:14:35.305500</ts>
    <user>Nana</user>
    <text>ah okay yeah it's the filtering that's slow, not `List.take`</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T09:17:43.305700</ts>
    <user>Nana</user>
    <text>aaah, so I was using my standard `User.fullName` function to get the full name for the filtering, and that function also uses a bunch of regex to fix upper/lowercase</text>
  </message>
  <message conversation_id="1628">
    <ts>2019-05-20T09:18:23.305900</ts>
    <user>Nana</user>
    <text>I replaced it with a function that just appended the first and last name, and now it's fast :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T09:54:42.307500</ts>
    <user>Merlene</user>
    <text>Hey elm devs :slightly_smiling_face:. can someone please help me - I just need to decode a string that is already in Posix format into a Time Posix. Does anyone know how to do this?</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T09:55:16.307700</ts>
    <user>Dede</user>
    <text>"Which posix"?  :slightly_smiling_face:  Can you provide an example?</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T09:56:58.307900</ts>
    <user>Dede</user>
    <text>If it's literally just a string representation of milliseconds since the epoch, combine String.toInt and Time.millisToPosix.

&lt;https://package.elm-lang.org/packages/elm/core/latest/String#toInt&gt;
and
&lt;https://package.elm-lang.org/packages/elm/time/latest/Time#millisToPosix&gt;</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T09:59:44.308100</ts>
    <user>Merlene</user>
    <text>Thank you!! I get back this number `1558362916160` which I think is the millisecond representation</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T10:05:26.308300</ts>
    <user>Dede</user>
    <text>Looks credible:
```
&amp;gt; String.toInt "1558362916160" |&amp;gt; Maybe.map (Time.millisToPosix &amp;gt;&amp;gt; Time.toYear Time.utc)               
 Just 2019 : Maybe Int

```</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T10:05:28.308500</ts>
    <user>Emilee</user>
    <text>worked like a charm! thanks a lot :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T10:06:09.308900</ts>
    <user>Emilee</user>
    <text>so right now, all the configuration i have for parcel is either workarounds for things that will get fixed soon or weirdness of our codebase that will get fixed soon^^</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T10:08:31.309100</ts>
    <user>Carman</user>
    <text>Is this as part of a JSON decoder?</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T10:11:50.309300</ts>
    <user>Emilee</user>
    <text>as an aside - would you say parcel is the most elm-adjacent bundler for the web? it seems like they follow the same philosophy of 'discussing issues - eventually upstreaming everything really important' and avoiding footguns</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T10:12:38.309500</ts>
    <user>Carman</user>
    <text>if so you can create a `Posix` decoder like:
```
posixDecoder : Decoder Posix
posixDecoder =
  Decode.map Time.millisToPosix &lt;http://Decode.int|Decode.int&gt;
```</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T10:42:01.309700</ts>
    <user>Iona</user>
    <text>Glad you managed :slightly_smiling_face: It’s probably the most friendly bundler. Webpack and friends need a lot of config and I’m not needing all those features generally</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T10:44:31.309900</ts>
    <user>Iona</user>
    <text>They are also working on parcel 2.x, so it _should_ be better. There are several people using parcel so they have a vested interest and will make sure that the elm support improves</text>
  </message>
  <message conversation_id="1630">
    <ts>2019-05-20T11:03:25.310200</ts>
    <user>Emilee</user>
    <text>btw, may i mention you in the github issue? i think i'll write about what solved the issue for me and what could temporarily be done</text>
  </message>
  <message conversation_id="1630">
    <ts>2019-05-20T12:24:18.310500</ts>
    <user>Lilli</user>
    <text>you may want to have a look at this &lt;https://medium.com/@l.mugnaini/spa-and-seo-is-googlebot-able-to-render-a-single-page-application-1f74e706ab11&gt;

maybe &lt;@Raeann&gt; has something more to tell since that blogpost</text>
  </message>
  <message conversation_id="1631">
    <ts>2019-05-20T12:42:47.310700</ts>
    <user>Iona</user>
    <text>Sure</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T22:30:37.313200</ts>
    <user>Starla</user>
    <text>I have a pre-existing app that runs on a different machine. I'm planning on creating a web-app that will receive information from those apps and display it on a browser(real-time). is that doable with Elm alone or do I need some sort of a backend framework for that?</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T22:37:26.313600</ts>
    <user>Erlene</user>
    <text>Can't answer that without knowing how these pre-existing apps make their state know.</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T23:16:33.314000</ts>
    <user>Starla</user>
    <text>&lt;@Erlene&gt; I was planning on using sockets so that states will be sent real-time</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T23:52:02.314600</ts>
    <user>Earlean</user>
    <text>&lt;@Starla&gt; is your 'pre-existing app' a web app? can you connect to it via http?</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T23:52:57.315300</ts>
    <user>Starla</user>
    <text>&lt;@Earlean&gt; No, it's not. And since the servers are in a local network, I have the capability to connect them via sockets instead of http which based on a few search will allow me to like monitor it real time I guess.</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T23:53:29.315900</ts>
    <user>Earlean</user>
    <text>Elm runs in a browser, browsers don't do raw sockets</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T23:53:55.316600</ts>
    <user>Starla</user>
    <text>Ah, so I'll be needing a backend mechanism to pass it to Elm</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T23:54:12.317000</ts>
    <user>Earlean</user>
    <text>yep</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T23:56:14.318100</ts>
    <user>Starla</user>
    <text>Okay, thanks. By the way, my pre-existing app runs rsync processes, so I want the progress of the rsync processes be displayed on a web browser. Kinda sort of monitoring dashboard hehe</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T23:56:51.318700</ts>
    <user>Starla</user>
    <text>So I want to display the progress' realtime changes. :smile:</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-20T23:57:54.319800</ts>
    <user>Earlean</user>
    <text>Yep, browsers support 'websockets' which are like sockets but they have some restrictions and need to be accepted initially by a webserver</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-21T00:07:36.320300</ts>
    <user>Starla</user>
    <text>So you're saying a socket to websocket? or websocket to websocket communication?</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-21T00:10:12.321300</ts>
    <user>Earlean</user>
    <text>You'll need to set up a backend mechanism that can accept incoming websocket connections and proxy them to your sockets</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-21T00:13:39.322300</ts>
    <user>Starla</user>
    <text>Ah, so I'll just have to set up my pre-existing app to stream info through a socket. Create a backend mechanism to accept those info and redirect them through a websocket so Elm can display them</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-21T01:29:27.323400</ts>
    <user>Erlene</user>
    <text>&lt;@Starla&gt; I don't think you even need websockets. If your rsync process simply regularly dumps output to a text file, and elm retrieves that text file and parses it to find the progress indicator, I think you have enough.</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-21T01:30:33.323800</ts>
    <user>Starla</user>
    <text>&lt;@Erlene&gt; but they're on different servers</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-21T01:30:57.324400</ts>
    <user>Starla</user>
    <text>Hmm, I can use sqlite for simplicity but i don't think sqlite supports remote access though</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-21T01:31:21.324900</ts>
    <user>Erlene</user>
    <text>Well, you need a webserver in between regardless, so if the webserver runs on the machine where your rsync runs, this could work.</text>
  </message>
  <message conversation_id="1629">
    <ts>2019-05-21T02:42:28.326200</ts>
    <user>Raeann</user>
    <text>&lt;@Venessa&gt;

1. You can change header stuff dynamically using ports but I am afraid that will not be effective for "sharing previews" because these previews - for my understanding - rely on just reading the html (no JS execution)
2. Google analytics has special implementation for SPA, you can find details in their documentation (&lt;https://developers.google.com/analytics/devguides/collection/analyticsjs/single-page-applications&gt;). The simples is still using ports. Intercept the events that you want to track and send http requests to Google Analytics. We do this in a wrapper around our updated that take all messages and  filter them</text>
  </message>
  <message conversation_id="1632">
    <ts>2019-05-21T02:44:24.326600</ts>
    <user>Raeann</user>
    <text>The post mentioned by &lt;@Lilli&gt; is about Google bot being able to execute JS and so to index SPA apps. For SEO purpose is better to maintain the head section of the page dynamically (through ports as mentioned at 1.)</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T03:45:57.327400</ts>
    <user>Allyn</user>
    <text>Hello. Is there a way to emit multiple messages when the response to an http request is received?</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T03:48:04.328000</ts>
    <user>Ruthann</user>
    <text>you can `Cmd.batch [ … ]` multiple commands as a response</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T03:49:39.329300</ts>
    <user>Earlean</user>
    <text>&lt;@Allyn&gt; wanting to do that is generally considered a code smell, it indicate that you're using msgs in place of calling functions.</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T03:50:43.330400</ts>
    <user>Earlean</user>
    <text>msgs should describe something that happened rather than what you want to happen in response to them</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T04:00:09.333700</ts>
    <user>Ruthann</user>
    <text>a common scenario we have for doing this is when a page does a backend call, the page gets the response, has business logic to resolve the call but then needs to do 1 or more of: close itself, display a notification using a module higher up, tell the nav to do somenthing, change the route higher up.
as a child node, it must communicate the results upwards so we batch cmds to do this</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T04:03:36.335600</ts>
    <user>Ruthann</user>
    <text>another one we have ( although could be written differently ) is where we chain these function calls up quite deep without the model, so instead of calling a function and passing in the model, we just return a Cmd.batch and cause another effect.</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T04:04:50.335900</ts>
    <user>Allyn</user>
    <text>That’s exactly our use case</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T04:06:07.336500</ts>
    <user>Allyn</user>
    <text>I don’t see what could be the other effect...</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T04:06:08.336600</ts>
    <user>Ruthann</user>
    <text>The thing you have to realise here is that if you’re not passing these `msg` down into your page, and using globally defined types, then you’re coupling the page and all that responds to these msgs, to that global type</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T04:06:56.337500</ts>
    <user>Ruthann</user>
    <text>so when you batch cmds, it goes out of elm and comes back in as another side effect</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T04:07:50.337600</ts>
    <user>Ruthann</user>
    <text>Its not the best thing to do imo, but we haven’t found a better way. We couple things like Route to all pages</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T04:10:20.337800</ts>
    <user>Ruthann</user>
    <text>we actually don’t use Cmd but wrap it up in a `Job msg` unfortunately, i didn’t discuss this in my gitbook</text>
  </message>
  <message conversation_id="1633">
    <ts>2019-05-21T04:15:08.338000</ts>
    <user>Allyn</user>
    <text>Ok, thanks for your answer</text>
  </message>
  <message conversation_id="1634">
    <ts>2019-05-21T05:38:06.339600</ts>
    <user>Reuben</user>
    <text>When I compile an elm project on heroku, I get the following error message:
```
The binary data at /app/.elm/0.19.0/package/elm/browser/1.0.1/objs.dat is corrupt.
```
Is anybody familiar with the problem?</text>
  </message>
  <message conversation_id="1634">
    <ts>2019-05-21T05:46:21.339800</ts>
    <user>Syble</user>
    <text>Yep, just rm .elm and elm-stuff, should work afterward</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T06:34:34.340000</ts>
    <user>Renay</user>
    <text>Why are you compiling elm on heroku? Just curious</text>
  </message>
  <message conversation_id="1634">
    <ts>2019-05-21T10:34:36.340700</ts>
    <user>Reuben</user>
    <text>Thank you &lt;@Syble&gt; It solved my problem</text>
  </message>
  <message conversation_id="1634">
    <ts>2019-05-21T10:37:00.340900</ts>
    <user>Reuben</user>
    <text>&lt;@Renay&gt; the app is served by heroku and the setup is such that every time something is pushed to the master branch of the github repo, the server compiles it automatically in order to serve the current state</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:22:04.341900</ts>
    <user>Hoa</user>
    <text>Any quick way to know a modifier key, `alt`, has been pressed during a `onKeyDown` ?</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:22:34.342400</ts>
    <user>Hoa</user>
    <text>I have these subcription right now:  `onKeyDown (Decode.map (KeyChange True) keyCode)`</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:23:18.343700</ts>
    <user>Hoa</user>
    <text>So, it works great to know keys like `a` is pressed, but I would like to be able to grab “alt + a”, for example.</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:24:54.346000</ts>
    <user>Hoa</user>
    <text>My impression is that the stock Html’s event `keyCode` decoder is not sufficient</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:25:12.346400</ts>
    <user>Leoma</user>
    <text>I have an issue where a model change results in focus loss *only* on mobile safari.
Is it possible/likely this is a browser-specific vdom bug? (I’m using keyed to tag editable components.)</text>
  </message>
  <message conversation_id="1636">
    <ts>2019-05-21T12:29:42.346500</ts>
    <user>Nana</user>
    <text>`Decode.field "altKey" Decode.bool` should work</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:32:17.346800</ts>
    <user>Nana</user>
    <text>same for "shiftKey", "ctrlKey" and "metaKey"</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:36:34.347200</ts>
    <user>Hoa</user>
    <text>Oh! So this goes in addition to the `onKeyDown (Decode.map (KeyChange True) keyCode)`?</text>
  </message>
  <message conversation_id="1636">
    <ts>2019-05-21T12:42:05.347600</ts>
    <user>Nana</user>
    <text>```
type alias Keys =
    { ctrl : Bool
    , shift : Bool
    , alt : Bool
    , meta : Bool
    , key : String
    }


keysDecoder : Decoder Keys
keysDecoder =
    Decode.map5 Keys
        (Decode.field "ctrlKey" Decode.bool)
        (Decode.field "shiftKey" Decode.bool)
        (Decode.field "altKey" Decode.bool)
        (Decode.field "metaKey" Decode.bool)
        (Decode.field "key" Decode.string)
```</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:42:11.347800</ts>
    <user>Hoa</user>
    <text>In other words: or is it better to handle a different `AltChange` msg?</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:42:36.348000</ts>
    <user>Hoa</user>
    <text>OK, it’s better to craft my own version.  Great!</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:44:01.348200</ts>
    <user>Nana</user>
    <text>I think keeping them as one msg is good, because that follows how the browser event works</text>
  </message>
  <message conversation_id="1636">
    <ts>2019-05-21T12:44:54.348400</ts>
    <user>Nana</user>
    <text>so
```
{ctrl = True, shift = True, alt = False, meta = False, key = "S"}
```
would be ctrl+shift+s</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:46:37.348700</ts>
    <user>Hoa</user>
    <text>Absolutely. I’m doing that right now! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1635">
    <ts>2019-05-21T12:46:42.348900</ts>
    <user>Hoa</user>
    <text>Thank you</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:39:23.349400</ts>
    <user>Genevieve</user>
    <text>I’ve got a record like this

```{alt : Bool, ctrl : Bool, meta : Bool, shift : Bool}```

that I want to turn into a `ModifierKeys` -type like this

```
type ModifierKeys
    = None
    | Alt
    | AltCtrl
    | AltCtrlMeta
    | AltCtrlMetaShift
    | Ctrl
    | CtrlMeta
	...
```
I suppose this would be done throug a case match, but that can’t be done on records like this

``` case someCombo of
	{True, False, False, False } -&amp;gt; Alt
	{True, True, False, False} -&amp;gt; AltCtrl
	...
```
any smart ideas?</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:43:19.352400</ts>
    <user>Kris</user>
    <text>`case (record.alt, record.ctrl, (record.meta, record.shift)) of ...`</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:43:34.352800</ts>
    <user>Kris</user>
    <text>That's a quick and easy way to do it</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:50:00.355400</ts>
    <user>Genevieve</user>
    <text>Haha thanks I thought of that but there is just something smells a little about it :slightly_smiling_face: Now I kind of see a point of 3+ element Tuples.</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:50:36.356100</ts>
    <user>Kris</user>
    <text>Eh, I don't think it's particularly bad</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:50:59.356800</ts>
    <user>Kris</user>
    <text>Sure, it'd be great if pattern matching worked decently for records, but that's life</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:54:30.359500</ts>
    <user>Leoma</user>
    <text>Readability becomes a bit poor when you see `{True, True, False, False}` and need to scan up to recall what they all mean.
You might take a theoretical, but practically negligible performance hit by doing an if/else. This is assuming that you don’t handle every combination of control keys.
So you could create `altDown : Record -&amp;gt; Bool` … and have
```
if altDown r &amp;amp;&amp;amp; shiftDown r then
```</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:55:20.360100</ts>
    <user>Nana</user>
    <text>what's the benefit of `ModifierKeys` though? seems like a record is a pretty good fit already</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:56:14.360600</ts>
    <user>Genevieve</user>
    <text>The point is actually to get a more readible case switch</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:56:30.360900</ts>
    <user>Genevieve</user>
    <text>eg ```case combo of
Alt -&amp;gt; ...
AltMeta -&amp;gt; ...
```</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:57:56.361400</ts>
    <user>Genevieve</user>
    <text>to use in another place of the application</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T14:58:21.361700</ts>
    <user>Genevieve</user>
    <text>(I’m using it in a Decoder)</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:09:35.366300</ts>
    <user>Danika</user>
    <text>a record is definitely better than a huge case on a type like this, imo </text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:12:25.367300</ts>
    <user>Genevieve</user>
    <text>&lt;@Danika&gt; are you thinking performance or readability?</text>
  </message>
  <message conversation_id="1638">
    <ts>2019-05-21T15:12:50.367800</ts>
    <user>Danika</user>
    <text>Readability </text>
  </message>
  <message conversation_id="1638">
    <ts>2019-05-21T15:16:03.370100</ts>
    <user>Niesha</user>
    <text>Can Elm do

```
case r of
  { alt: True, ctrl: False, meta: False, shift: False } -&amp;gt; Alt
 ...
```
?</text>
  </message>
  <message conversation_id="1638">
    <ts>2019-05-21T15:20:12.370300</ts>
    <user>Kris</user>
    <text>No</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:21:05.370500</ts>
    <user>Genevieve</user>
    <text>well I think

```
case combo of
	(Alt, "enter") -&amp;gt; ...
	(ShiftCtrl, "p") -&amp;gt; ...
```
	
reads better than eg.

```
if alt &amp;amp;&amp;amp; key == "enter" then ...
else if shift &amp;amp;&amp;amp; ctrl &amp;amp;&amp;amp; key == "p" then...
```

especially when the number of branches start going up.</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:21:53.371200</ts>
    <user>Genevieve</user>
    <text>(in reply to &lt;@Danika&gt;)</text>
  </message>
  <message conversation_id="1638">
    <ts>2019-05-21T15:22:19.371800</ts>
    <user>Maybelle</user>
    <text>Is record pattern matching a "won't add" or just not something we have yet?</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:25:56.372600</ts>
    <user>Niesha</user>
    <text>&lt;@Genevieve&gt; looks like it might work when using function argument pattern matching? &lt;https://github.com/elm/compiler/issues/1459&gt;</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:27:59.373200</ts>
    <user>Genevieve</user>
    <text>hmm… I don’t quite understand from the link. Could you give an example?</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:29:24.374000</ts>
    <user>Niesha</user>
    <text>```
conv :: {alt : Bool, ctrl : Bool, meta : Bool, shift : Bool} -&amp;gt; ModifierKeys
conv {alt: True, ctrl: False, meta: False, shift: False } = Alt
```</text>
  </message>
  <message conversation_id="1638">
    <ts>2019-05-21T15:32:10.374800</ts>
    <user>Nana</user>
    <text>&lt;@Niesha&gt; that only works for specifically `{}` :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1638">
    <ts>2019-05-21T15:33:07.375500</ts>
    <user>Niesha</user>
    <text>Ah duh, was worth a try</text>
  </message>
  <message conversation_id="1638">
    <ts>2019-05-21T15:33:57.376500</ts>
    <user>Niesha</user>
    <text>Works over in PureScript, hence the idea.</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:34:12.376800</ts>
    <user>Genevieve</user>
    <text>I guess I’ll end up taking &lt;@Kris&gt; s advice then :slightly_smiling_face: Thanks for the input!</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:49:11.377800</ts>
    <user>Kris</user>
    <text>If you don't like nesting tuples, you can also implement your own 4-tuple:
```
type T4 a b c d = T4 a b c d
```</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:49:26.378300</ts>
    <user>Kris</user>
    <text>It's exactly the same as the old `(a,b,c,d)`, just no special syntax</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:49:32.378500</ts>
    <user>Lindsey</user>
    <text>or use the Toop lib</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:52:33.378600</ts>
    <user>Nana</user>
    <text>so if the pattern didn't match, would it crash?</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:53:01.378800</ts>
    <user>Nana</user>
    <text>or does it force you to define functions for all possible values?</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:54:05.379000</ts>
    <user>Niesha</user>
    <text>```
  A case expression could not be determined to cover all inputs.
  The following additional cases are required to cover all inputs:

    { foo: false, bar: _ }
    { foo: _, bar: true }

  Alternatively, add a Partial constraint to the type of the enclosing value.
```</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:55:07.379200</ts>
    <user>Nana</user>
    <text>but you wrote it as a function, not a case expression?</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:55:46.379400</ts>
    <user>Nana</user>
    <text>this works in Elm btw :smile:
```
type Unit = Unit

test ( {}, (), Unit) =
    True
```
not very useful though...</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:56:11.379600</ts>
    <user>Niesha</user>
    <text>Nah, case expression</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:56:24.379800</ts>
    <user>Niesha</user>
    <text>```
t :: { foo:: Boolean, bar:: Boolean } -&amp;gt; Int
t r =
  case r of
    {foo: true, bar: false} -&amp;gt; 2
```</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:56:45.380000</ts>
    <user>Nana</user>
    <text>I meant
```
conv :: {alt : Bool, ctrl : Bool, meta : Bool, shift : Bool} -&amp;gt; ModifierKeys
conv {alt: True, ctrl: False, meta: False, shift: False } = Alt
```</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:57:01.380200</ts>
    <user>Niesha</user>
    <text>^ that works?</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:57:07.380400</ts>
    <user>Niesha</user>
    <text>... in Elm</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:57:08.380600</ts>
    <user>Nana</user>
    <text>not in Elm</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T15:57:16.380800</ts>
    <user>Nana</user>
    <text>but PureScript?</text>
  </message>
  <message conversation_id="1637">
    <ts>2019-05-21T16:02:02.381000</ts>
    <user>Niesha</user>
    <text>Yeah, does.</text>
  </message>
  <message conversation_id="1639">
    <ts>2019-05-21T17:04:04.384700</ts>
    <user>Vilma</user>
    <text>I’m not sure if this is an Elm or HTML question, but say I’m at a URL like this:

```
&lt;http://localhost:4000/jobs/&amp;lt;some_id&amp;gt;/&amp;lt;another_id&amp;gt;/&amp;lt;yet_another_id&amp;gt;/companies/&amp;lt;company_id&amp;gt;&gt;
```

and in this URL I’ve got a form which I want to `POST` as to create a resource on the server-side. However,  the server API URL to create the resource is

```
&lt;http://localhost:4000/jobs/&amp;lt;some_id&amp;gt;/&amp;lt;another_id&amp;gt;/&amp;lt;yet_another_id&amp;gt;/companies/&amp;lt;company_id&amp;gt;/comments&gt;
```

when using `action = comments` the form seems to `POST` to this URL (missing the `company_id`):
```
&lt;http://localhost:4000/jobs/&amp;lt;some_id&amp;gt;/&amp;lt;another_id&amp;gt;/&amp;lt;yet_another_id&amp;gt;/companies/comments&gt;
```

Is there any way to `POST` to the URL maintaining the ID?</text>
  </message>
  <message conversation_id="1640">
    <ts>2019-05-21T17:09:15.386400</ts>
    <user>Lizbeth</user>
    <text>Hey, anyone know if there's a way to do http streaming in Elm natively? i.e. some way to do `get : String -&amp;gt; (String -&amp;gt; msg) -&amp;gt; Sub msg` when making an http request that returns a stream (i.e. a response with `transfer-encoding: chunked`). Analagously to `WebSocket.listen`. If there is I've failed to find it by googling</text>
  </message>
  <message conversation_id="1640">
    <ts>2019-05-21T17:10:00.387200</ts>
    <user>Lizbeth</user>
    <text>or SSE</text>
  </message>
  <message conversation_id="1640">
    <ts>2019-05-21T17:10:15.387600</ts>
    <user>Lizbeth</user>
    <text>Ofc can always do it in JS and use a port, but if there's a pure elm way that's always nice</text>
  </message>
  <message conversation_id="1640">
    <ts>2019-05-21T17:14:03.387700</ts>
    <user>Carman</user>
    <text>You should be able to put the absolute path as the action</text>
  </message>
  <message conversation_id="1640">
    <ts>2019-05-21T17:15:33.387900</ts>
    <user>Carman</user>
    <text>e.g.
```
&amp;lt;form action="/jobs/1/2/3/companies/4/comments", method="post" &amp;gt;
&amp;lt;/form&amp;gt;
```</text>
  </message>
  <message conversation_id="1640">
    <ts>2019-05-21T17:17:01.388200</ts>
    <user>Vilma</user>
    <text>&lt;@Carman&gt; yes I know that’s possible :thinking_face: but that means I must send the current URL as a function parameters all the way until I reach the function which deals with the form, right?</text>
  </message>
  <message conversation_id="1640">
    <ts>2019-05-21T17:17:09.388400</ts>
    <user>Vilma</user>
    <text>that seems cumbersome</text>
  </message>
  <message conversation_id="1640">
    <ts>2019-05-21T17:23:48.388600</ts>
    <user>Vilma</user>
    <text>I guess it’s either pass the currentUrl around or the notificationId?</text>
  </message>
  <message conversation_id="1641">
    <ts>2019-05-21T20:42:58.389500</ts>
    <user>Earlean</user>
    <text>&lt;@Lizbeth&gt; there isn't currently</text>
  </message>
  <message conversation_id="1642">
    <ts>2019-05-21T23:10:19.390700</ts>
    <user>Erlene</user>
    <text>Is there an Elm library that allows me to preview an uploaded image (got that part) and then crop it before uploading? Doesn't need to do the crop itself, just looking for something that allows the user to draw a square on the image</text>
  </message>
  <message conversation_id="1642">
    <ts>2019-05-21T23:11:37.390900</ts>
    <user>Antoine</user>
    <text>Interested in this myself ^^</text>
  </message>
  <message conversation_id="1643">
    <ts>2019-05-22T00:00:25.391700</ts>
    <user>Nathan</user>
    <text>I would imagine you can do that just by applying some css styling to the image, you're on your own figuring out what that would be though, my css isn't great.</text>
  </message>
  <message conversation_id="1644">
    <ts>2019-05-22T02:17:24.393500</ts>
    <user>Lynn</user>
    <text>I’m trying to use Browser.Dom.getElement with an element that only gets shown during a mouse roll-over. So I have an onmouseenter and onmouseleave event. When the former fires I add the new element to by view, and try to measure to it.</text>
  </message>
  <message conversation_id="1644">
    <ts>2019-05-22T02:18:26.394500</ts>
    <user>Lynn</user>
    <text>What _seems_ to be happening is that the if the mouse moves further and the onmouseleave event fires, the removal of the element is still happening faster than the Browser.Dom.getElement does its work</text>
  </message>
  <message conversation_id="1644">
    <ts>2019-05-22T02:18:46.394900</ts>
    <user>Lynn</user>
    <text>and that results on the getElement not being able to find the id it is trying to measure</text>
  </message>
  <message conversation_id="1644">
    <ts>2019-05-22T02:19:18.395500</ts>
    <user>Lynn</user>
    <text>I had expected that these two events would happen in separate cycles so that this error could not occur, but I seem to be wrong</text>
  </message>
  <message conversation_id="1643">
    <ts>2019-05-22T02:52:30.396200</ts>
    <user>Nathan</user>
    <text>could you add it to the view all the time and just toggle a hidden property on it?</text>
  </message>
  <message conversation_id="1643">
    <ts>2019-05-22T03:15:40.396300</ts>
    <user>Huong</user>
    <text>You’ve identified the issue - DOM events can be processed synchronously, while `getElement` is asynchronous - it always wraps itself in `animationFrame` to ensure the the `view` is rendered at least once after the `udpate` that triggered `getElement`</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:22:53.400000</ts>
    <user>Nana</user>
    <text>has anyone experimented with exporting and using init/model/update/subs records?
I wonder if it'd be possible to make an actual easy-to-use component system that way :thinking_face:

I managed to make a thing which can combine multiple "apps/components" into one, so that they run side-by-side:
&lt;https://ellie-app.com/5C32gZCZmNsa1&gt;
though I'm not sure how you would make nested components work</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:28:00.400100</ts>
    <user>Nana</user>
    <text>maybe you could make a system where you somehow add child components to a component, and the child views get injected as arguments to the parent view function?</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:29:31.400300</ts>
    <user>Nana</user>
    <text>you'd also need parent-child communication :thinking_face:</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:29:38.400500</ts>
    <user>Liza</user>
    <text>&lt;https://package.elm-lang.org/packages/harmboschloo/elm-ecs/latest/&gt; - as result you will end with something like that</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:29:58.400700</ts>
    <user>Liza</user>
    <text>where you must predefine how much apps you would like to combine..</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:30:20.400900</ts>
    <user>Liza</user>
    <text>and other problem will be with events, commands (maybe)</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:36:16.401100</ts>
    <user>Nana</user>
    <text>I thought it was pretty neat how simple my thing was, you can just do
```
main =
    app1
        |&amp;gt; combine app1
        |&amp;gt; combine app2
        |&amp;gt; combine app2
        |&amp;gt; Browser.sandbox
```
to get two instances of app1 and two of app2 running in parallell</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:37:04.401300</ts>
    <user>Nana</user>
    <text>but maybe when you start doing nesting and communication it'd get complicated</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:37:32.401500</ts>
    <user>Walton</user>
    <text>```
case (r.alt, r.crtl, r.meta, r.shift) of
   (True, False, False, False) -&amp;gt; Alt
```</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:41:02.401700</ts>
    <user>Liza</user>
    <text>last my attempt to create dynamic stuff (similar to yours) was for fold function, that ended in some mess and performance decrease x6  (compare to plain foldlN) &lt;https://github.com/justgook/platformer/blob/master/lib/elm-logic/src/Logic/System.elm#L138-L235&gt;</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:48:33.402000</ts>
    <user>Nana</user>
    <text>this package also does something like this :thinking_face:
&lt;https://package.elm-lang.org/packages/turboMaCk/glue/latest/&gt;</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:50:27.402200</ts>
    <user>Nana</user>
    <text>anyone using `turboMaCk/glue` ?</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:51:38.402500</ts>
    <user>Liza</user>
    <text>offtopic - how do you do “Also sent to the channel” magic?</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:52:57.402700</ts>
    <user>Nana</user>
    <text>there's a checkbox :smile:</text>
  </message>
  <message conversation_id="1645">
    <ts>2019-05-22T05:57:33.403100</ts>
    <user>Liza</user>
    <text>:man-facepalming:</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T06:11:34.403800</ts>
    <user>Vilma</user>
    <text>what are the advantages and disadvantages of using a form vs. a `POST` via the `Http` package?</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T06:13:43.404000</ts>
    <user>Liza</user>
    <text>page refresh</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T06:18:13.404800</ts>
    <user>Vilma</user>
    <text>&lt;@Liza&gt; so using the `Http` package I don’t get the page refresh, right? so this may be the best way to use with an SPA? Is there any disadvantage regarding SEO?</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T06:45:08.405900</ts>
    <user>Liza</user>
    <text>about forms - there is no difference, for SPA - that could impact… but there is full of internet about SPA and SEO</text>
  </message>
  <message conversation_id="1647">
    <ts>2019-05-22T06:54:35.408400</ts>
    <user>Merlene</user>
    <text>Hi folks :slightly_smiling_face:. I'm creating a button file with its own model, update and view that on clicking gets the current time, and checks against the token expiry time. Then what I want to do is trigger the `msg` that is passed in when calling my Button module like (`onClick msg`), however, I'm calling something else on click and I'm not sure how to do this. Has anyone done this before?</text>
  </message>
  <message conversation_id="1647">
    <ts>2019-05-22T06:56:04.408700</ts>
    <user>Merlene</user>
    <text>So I basically want some pre-validation on click that has required me to perform tasks, I now do not know how to invoke the `msg`</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T06:57:44.408900</ts>
    <user>Liza</user>
    <text>Task.perform  … ?</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T06:59:03.409200</ts>
    <user>Liza</user>
    <text>or `Task.attempt`</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T06:59:53.409400</ts>
    <user>Earlean</user>
    <text>You'll have an easier time if you talk about your code as what it is instead of using an OOP metaphor for it. You can't 'call a module', but you can call a function defined in a module.</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:00:40.409600</ts>
    <user>Liza</user>
    <text>impo you also cannot call module in OOP terms</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:04:26.409800</ts>
    <user>Merlene</user>
    <text>Oh yeah, I can just call Task.perform thanks :smile:</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:06:46.410000</ts>
    <user>Earlean</user>
    <text>Using Task.perform to produce a Msg value without doing an effect is a code smell. You're already returning a `Cmd Msg` from your `update` function, why not just return the Msg value redirectly?</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:08:13.411000</ts>
    <user>Liza</user>
    <text>&lt;https://medium.com/elm-shorts/how-to-turn-a-msg-into-a-cmd-msg-in-elm-5dd095175d84&gt;</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:08:30.411400</ts>
    <user>Liza</user>
    <text>“don’t”.</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:08:51.412000</ts>
    <user>Liza</user>
    <text>but if you need to `Task |&amp;gt; andThen msg`..</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:09:58.413500</ts>
    <user>Liza</user>
    <text>what i understand  - it is kind of:

`Time.now |&amp;gt; MsgClick Posix`</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:10:54.414400</ts>
    <user>Merlene</user>
    <text>Thank you, I'll read that article :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:13:59.414600</ts>
    <user>Merlene</user>
    <text>Right, so I can't do that either</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:18:10.414800</ts>
    <user>Liza</user>
    <text>what and when msg you wona to receive when you click ?</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:21:09.415600</ts>
    <user>Merlene</user>
    <text>on clicking, I call getCurrentTime which is a Task.perform of Time.now. Then I check the time is before the expiry time, if so I want to trigger a `msg` - I don't know what that is (this is a reusable Button I'm trying to make)</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:21:50.415800</ts>
    <user>Merlene</user>
    <text>The msg is in a model outside my button</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:23:28.416000</ts>
    <user>Merlene</user>
    <text>```type Msg
    = RegisterClick Cred Msg
    | PerformOnClickAction Cred Msg Time.Posix


getCurrentTime : Cred -&amp;gt; Msg -&amp;gt; Cmd Msg
getCurrentTime cred msg =
    Task.perform (PerformOnClickAction cred msg) Time.now


update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        RegisterClick cred message -&amp;gt;
            ( model, getCurrentTime cred message )

        PerformOnClickAction cred message currentPosTime -&amp;gt;
            case validCred currentPosTime cred of
                Err error -&amp;gt;
                    ( model, Cmd.none )

                Ok validCredentials -&amp;gt;
                    ( model, Cmd.none ) -- trigger message



-- VIEW


view : Cred -&amp;gt; Msg -&amp;gt; List (Html Msg)
view cred msg =
    [ div [ class "marginB20 border-top" ]
        [ button
            [ class "btn btn-success marginR20"
            , onClick (RegisterClick cred msg)
            ]
            [ text "Submit" ]
        ]
    ]```</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:26:04.416200</ts>
    <user>Merlene</user>
    <text>I have an ElementLibrary.elm file and i was hoping to be able to call Button.view passing in msg from one of my pages and the current credetionals</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:32:16.416400</ts>
    <user>Liza</user>
    <text>what happens if time expire ?</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:34:24.416600</ts>
    <user>Merlene</user>
    <text>I'm going to return the LoginPage Model I think</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:34:51.416800</ts>
    <user>Liza</user>
    <text>what message should fire then ?</text>
  </message>
  <message conversation_id="1646">
    <ts>2019-05-22T07:35:56.417000</ts>
    <user>Liza</user>
    <text>you can wrap all that stuff into your click event.. and just don’t add new messages as `"RegisterClick"`</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:41:06.417200</ts>
    <user>Merlene</user>
    <text>Sorry, I'm not sure what you mean?</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:41:14.417400</ts>
    <user>Liza</user>
    <text>1 min</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:42:59.417600</ts>
    <user>Liza</user>
    <text>```    onClick
        (Task.attempt
            (Result.andThen (\t -&amp;gt; validateExpire model.timeWhenExipire t)
                |&amp;gt; (\newResult -&amp;gt;
                        case newResult of
                            Ok validationReturn -&amp;gt;
                                GoodMsg validationReturn
                            Err timeExipired -&amp;gt;
                                GoToLoginPage
                   )
            )
            Time.now
        )```</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:43:45.417800</ts>
    <user>Liza</user>
    <text>ow .. that will not work..</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:44:30.418000</ts>
    <user>Liza</user>
    <text>onClick need msg, not Cmd msg..</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:44:54.418200</ts>
    <user>Merlene</user>
    <text>no, because we need to get the time however I could do a `and then` in PerformOnClickAction</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:46:30.418900</ts>
    <user>Liza</user>
    <text>that is what should be triggered after your `RegisterClick` -&amp;gt; ```Task.attempt
            (Result.andThen (\t -&amp;gt; validateExpire model.timeWhenExipire t)
                |&amp;gt; (\newResult -&amp;gt;
                        case newResult of
                            Ok validationReturn -&amp;gt;
                                GoodMsg validationReturn

                            Err timeExipired -&amp;gt;
                                GoToLoginPage
                   )
            )
            Time.now```</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:48:21.419100</ts>
    <user>Liza</user>
    <text>btw - you can wrap that in some function, and just return MSG on success validation</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:49:02.419400</ts>
    <user>Liza</user>
    <text>but any way - that all will call update twice..</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:53:32.419600</ts>
    <user>Nana</user>
    <text>btw why are you doing all this?</text>
  </message>
  <message conversation_id="1648">
    <ts>2019-05-22T07:54:54.419800</ts>
    <user>Nana</user>
    <text>maybe there's a simpler solution? having all buttons as model/view/update sounds annoying</text>
  </message>
  <message conversation_id="1649">
    <ts>2019-05-22T08:27:22.420100</ts>
    <user>Merlene</user>
    <text>So I can check if the token has expired - we can't submit actions if the access token has expired</text>
  </message>
  <message conversation_id="1649">
    <ts>2019-05-22T08:29:11.421900</ts>
    <user>Leonore</user>
    <text>How does everyone handle authentication for websockets? We use tokens for authentication in our application but the Web browser API doesn't support custom headers for some reason. Even though it is in the spec of the websockets.</text>
  </message>
  <message conversation_id="1649">
    <ts>2019-05-22T08:29:23.422000</ts>
    <user>Nana</user>
    <text>you could just make the request anyway, and if the server rejects it, show an error or something</text>
  </message>
  <message conversation_id="1649">
    <ts>2019-05-22T08:30:59.422400</ts>
    <user>Nana</user>
    <text>you could also set a `Process.sleep` with the expiration time when the user logs in, and then return them to the login screen when it expires</text>
  </message>
  <message conversation_id="1649">
    <ts>2019-05-22T08:43:42.422600</ts>
    <user>Lily</user>
    <text>The browser should be sending cookies and `Authorization` header when it connects the websocket - you could use this mechanism?</text>
  </message>
  <message conversation_id="1649">
    <ts>2019-05-22T08:50:36.422800</ts>
    <user>Leonore</user>
    <text>We don't use cookies and it does not send an `Authorization` header</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T09:57:06.430400</ts>
    <user>Carman</user>
    <text>I have a text input. Depending on what value it contains, it might get wrapped in a div and have a validation message as a sibling. If I'm typing in the input and that transition happens, the input loses focus.</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T09:57:16.430700</ts>
    <user>Carman</user>
    <text>My understanding is that this is because the vdom is creating new DOM nodes to build the wrapped input and the new input no longer in the focused state.</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T09:57:28.431000</ts>
    <user>Carman</user>
    <text>You can see it in action here - type capital character in the input and see that it loses focus (same if you delete the capital character) &lt;https://ellie-app.com/5C73b9T5XwMa1&gt;</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T09:57:42.431300</ts>
    <user>Carman</user>
    <text>I wondered if using `Html.Keyed` would allow me to tell the vdom to reuse the input node instead of creating a new one. However that doesn't seem to work if the input's parent changes &lt;https://ellie-app.com/5C73yczMkdWa1&gt;</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T09:57:52.431500</ts>
    <user>Carman</user>
    <text>Is there a way to change the input's parent without creating a new input node? Is the only solution to make the input have the same parent in all branches?</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T10:11:43.434900</ts>
    <user>Earlean</user>
    <text>&lt;@Carman&gt; you should be able to add Html.keyed on all the parents of that node until you get to the node you're replacing.</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T10:13:12.436200</ts>
    <user>Nana</user>
    <text>&lt;@Carman&gt; why not just always wrap it in a div, instead of conditionally?</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T10:40:42.437100</ts>
    <user>Carman</user>
    <text>Does that work if I'm introducing a new node in the ancestor chain? The input used to be a child of the form but is now a grandchild</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T10:41:43.437300</ts>
    <user>Carman</user>
    <text>I was hoping to avoid that due to the way our design system works :smile:</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T10:41:49.437500</ts>
    <user>Carman</user>
    <text>but it looks like that might be the only solution</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T10:45:43.437700</ts>
    <user>Earlean</user>
    <text>That's probably not going to work, you can manually refocus the input yourself, but you can also change the hierarchy to avoid this issue</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T10:47:32.437900</ts>
    <user>Earlean</user>
    <text>Vdom diff-ing is a best guess at what you want in terms of node reuse, there are slots of structural changes that won't always do what you want them to.</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T10:48:01.438100</ts>
    <user>Earlean</user>
    <text>ReactJS has similar issues</text>
  </message>
  <message conversation_id="1650">
    <ts>2019-05-22T10:49:48.438300</ts>
    <user>Carman</user>
    <text>:+1:  thanks for confirming</text>
  </message>
  <message conversation_id="1651">
    <ts>2019-05-22T15:02:16.439900</ts>
    <user>Teddy</user>
    <text>Has anyone run into any issues with `elm/time` not parsing timestamps correctly? They're being parsed, they're just off by a few hours and months :grimacing:</text>
  </message>
  <message conversation_id="1652">
    <ts>2019-05-22T15:11:26.440900</ts>
    <user>Dede</user>
    <text>Do you have sample data?</text>
  </message>
  <message conversation_id="1651">
    <ts>2019-05-22T16:00:14.441200</ts>
    <user>Teddy</user>
    <text>&lt;@Dede&gt; We figured out the issue, our timestamps were being truncated. Still interesting that elm/time is a lot more strict than some of the other posix time parsing libraries out there.</text>
  </message>
  <message conversation_id="1652">
    <ts>2019-05-22T16:00:59.441400</ts>
    <user>Dede</user>
    <text>strict is one of Elm's big features :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1653">
    <ts>2019-05-22T17:46:44.442500</ts>
    <user>Shane</user>
    <text>Anyone here know if Elm has a config to have it run off a url folder?</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:18:20.443300</ts>
    <user>Maybelle</user>
    <text>Purely in the interest of sating my own curiosity, is there a reason that Elm switched the cons and type operators?</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:18:33.443600</ts>
    <user>Maybelle</user>
    <text>(from Haskell, that is, which it shares a lot of syntax with)</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:18:46.444100</ts>
    <user>Maybelle</user>
    <text>I assume the logic was that you use type a lot more than cons, so it should be the shorter one, but. XD</text>
  </message>
  <message conversation_id="1652">
    <ts>2019-05-22T19:30:29.444800</ts>
    <user>Earlean</user>
    <text>Because types are written more than cons</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:31:43.445500</ts>
    <user>Kris</user>
    <text>And also simply because haskell does it wrong </text>
  </message>
  <message conversation_id="1652">
    <ts>2019-05-22T19:33:25.446300</ts>
    <user>Simon</user>
    <text>ML is in the family, same `:/::` strategy as Elm as well</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:33:58.446900</ts>
    <user>Maybelle</user>
    <text>So basically what I said, that you write type more than cons.  XD</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:34:01.447100</ts>
    <user>Maybelle</user>
    <text>I assumed that was the case.</text>
  </message>
  <message conversation_id="1652">
    <ts>2019-05-22T19:35:02.448500</ts>
    <user>Kris</user>
    <text>There was even a proposal in Haskell for swapping them, and they calculated the space saved by doing so </text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:35:35.448800</ts>
    <user>Maybelle</user>
    <text>That sounds like the sort of argument that would start wars.</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:35:52.449400</ts>
    <user>Maybelle</user>
    <text>Along with 2 vs 4 space indentation.  XD</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:35:56.449900</ts>
    <user>Maybelle</user>
    <text>And hard vs soft tabs.</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:36:16.450400</ts>
    <user>Maybelle</user>
    <text>and same line/new line curly braces.  XD</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:36:41.450900</ts>
    <user>Kris</user>
    <text>Yes, some arguments separate savages from people</text>
  </message>
  <message conversation_id="1654">
    <ts>2019-05-22T19:37:22.451200</ts>
    <user>Maybelle</user>
    <text>It is known.</text>
  </message>
  <message conversation_id="1655">
    <ts>2019-05-22T20:13:12.451300</ts>
    <user>Janiece</user>
    <text>By "parsing" do you mean `Time.millisToPosix`? I'm confused how a function like that (which doesn't actually do anything other than wrap the value in a `Time`) could be called "strict"...</text>
  </message>
  <message conversation_id="1656">
    <ts>2019-05-22T23:10:09.452200</ts>
    <user>Erlene</user>
    <text>If you use tabs, you can let your editor choose how many spaces a tab is :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1656">
    <ts>2019-05-22T23:51:53.452700</ts>
    <user>Erlene</user>
    <text>I've been working on an image crop tool, and I've reached the final step, the part where I need to extract the cropped image.</text>
  </message>
  <message conversation_id="1656">
    <ts>2019-05-22T23:52:18.453300</ts>
    <user>Erlene</user>
    <text>This is easy using canvas. However Elm does not seem to support that, as I need the `drawImage` function.</text>
  </message>
  <message conversation_id="1656">
    <ts>2019-05-22T23:52:36.453700</ts>
    <user>Erlene</user>
    <text>Are there any other methods to get a bitmap of some element on the screen?</text>
  </message>
  <message conversation_id="1656">
    <ts>2019-05-23T00:00:24.454100</ts>
    <user>Kris</user>
    <text>You can still use that with ports</text>
  </message>
  <message conversation_id="1656">
    <ts>2019-05-23T00:00:52.454400</ts>
    <user>Erlene</user>
    <text>&lt;@Kris&gt; yeah, but then I can never release this as a library.</text>
  </message>
  <message conversation_id="1656">
    <ts>2019-05-23T00:01:09.454700</ts>
    <user>Erlene</user>
    <text>Well via github I could I suppose.</text>
  </message>
  <message conversation_id="1656">
    <ts>2019-05-23T00:01:27.455000</ts>
    <user>Erlene</user>
    <text>But not something people can install via `elm install`</text>
  </message>
  <message conversation_id="1656">
    <ts>2019-05-23T00:06:38.455400</ts>
    <user>Kris</user>
    <text>Yeap</text>
  </message>
  <message conversation_id="1657">
    <ts>2019-05-23T05:14:53.457500</ts>
    <user>Nana</user>
    <text>interesting btw that elm-format uses 4 spaces for indentation, but Evan himself seems to prefer 2, and doesn't use elm-format for the official guide and such :thinking_face:</text>
  </message>
  <message conversation_id="1657">
    <ts>2019-05-23T05:17:22.458000</ts>
    <user>Nathan</user>
    <text>I just figured the guide was that way to avoid line wrapping. Now that I look though it is kinda weird that a lot of the core library code hasn't been elm-formatted :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1657">
    <ts>2019-05-23T05:35:55.459300</ts>
    <user>Danika</user>
    <text>2 is definitely nicer, I run elm format and then reident everything :joy:</text>
  </message>
  <message conversation_id="1657">
    <ts>2019-05-23T05:58:45.461000</ts>
    <user>Virgie</user>
    <text>The original plan was to use elm-format in core once elm-format is stable (i.e. integrated into the official elm project). But Evan has some interesting code style practices (especially in the compiler Haskell code, where he uses a style I've never seen used anywhere else)</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:18:10.464600</ts>
    <user>Liza</user>
    <text>some-one some-time ago posted me hacky way how to inject into http package custom port - os that you can create “task port”.. and now cannot find that gist.. and i would like use that “feature” for build time of my application, (pipe lot of image encoding in JS, store to harddrive, and then get result in elm.. a)</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:21:49.464700</ts>
    <user>Nana</user>
    <text>another option could be to create a service worker, which Elm could communicate with through http :smile:</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:25:58.464900</ts>
    <user>Liza</user>
    <text>nodejs?</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:26:21.465100</ts>
    <user>Nana</user>
    <text>no in the browser</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:27:47.465300</ts>
    <user>Nana</user>
    <text>you could have it intercept certain http requests and respond with it's own data</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:28:14.465500</ts>
    <user>Nana</user>
    <text>so it'd be like a local mock server</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:29:08.465700</ts>
    <user>Nana</user>
    <text>should be relatively simple I think, since that's pretty much what service workers are made for</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:45:34.465900</ts>
    <user>Liza</user>
    <text>task i to create build application, that takes JSON format, parses it (in task pipe way), then some where in that parsing get to point, where it needs to take some magic (convert bytes to png), get that data back, continue piping, and as result get one big data, and send result back to JS..</text>
  </message>
  <message conversation_id="1659">
    <ts>2019-05-23T06:46:11.466100</ts>
    <user>Liza</user>
    <text>i would like just start on small elm app - in node, and just exit, when it is done..</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:46:51.466300</ts>
    <user>Liza</user>
    <text>your suggestion forces me create (in CI) web interface, server, client app, and all that just for simple build task..</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:47:36.466500</ts>
    <user>Liza</user>
    <text>but any way - while describing you my problem - i already have figure out how to  do that without that hell piping port task..</text>
  </message>
  <message conversation_id="1659">
    <ts>2019-05-23T06:57:22.467300</ts>
    <user>Liza</user>
    <text>Hmm.. btw regarding service workers.. </text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T06:58:03.468600</ts>
    <user>Liza</user>
    <text>I have some data, that should be converted into image, I can do that via js..</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T07:00:17.471400</ts>
    <user>Liza</user>
    <text>Have you &lt;@Nana&gt;, some suggestions where to look for example for such task (services worker, that never downloads data and can read post data)</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T07:05:06.471600</ts>
    <user>Nana</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests&gt;</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T07:09:09.471900</ts>
    <user>Liza</user>
    <text>is there some “magic” pattern how tell that that url will never go to server?</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T07:09:30.472100</ts>
    <user>Liza</user>
    <text>like `&lt;sw://mymagifile.json&gt;`</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T07:12:27.472400</ts>
    <user>Nana</user>
    <text>I think you could have the service worker intercept requests for a specific origin</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T07:13:03.472600</ts>
    <user>Nana</user>
    <text>so it'd be like `&lt;https://worker.com/mymagifile.json&gt;`</text>
  </message>
  <message conversation_id="1660">
    <ts>2019-05-23T07:26:11.472900</ts>
    <user>Claretta</user>
    <text>If it's something that could work as a web component / custom element, that might be a nice way to release it. That would make it available to folks using Elm as well as other languages.</text>
  </message>
  <message conversation_id="1658">
    <ts>2019-05-23T07:29:28.473100</ts>
    <user>Liza</user>
    <text>ok - will try figure out that later.. for now i got idea (result of that discussion) - that i could use DragAPI + FileAPI + Service Worker - to make my game engine accept dropped on browser window file, and load it as new game..</text>
  </message>
  <message conversation_id="1661">
    <ts>2019-05-23T09:10:09.475100</ts>
    <user>Allyn</user>
    <text>I’ve got an issue on the CI server with are setting up. Our Elm project does not compile on the CI server, while it builds without problem on our dev machines.
```
The error we have is:
elm make src/*.elm --output=../static/js/cortex.js --debug
Starting downloads...

  ✗ Microsoft/elm-json-tree-view 2.0.0

-- CORRUPT ZIP -----------------------------------------------------------------

I got an unexpected zip file from:

    &amp;lt;https://github.com/Microsoft/elm-json-tree-view/zipball/2.0.0/&amp;gt;

I check the hash the zip, and it seems off:

  Expected: 6e84a645c3c871ea742506eb1c9352c2a1b04b18
    Actual: 2c6f4a6d554f9a95807ae02b0a52260389c196f4

This usually means that the package author moved the version tag, so report it
to them and see if that is the issue. Folks on Elm slack can probably help as
well.
```
There are no commit since August 2018 on the git repo of the module which download fails</text>
  </message>
  <message conversation_id="1661">
    <ts>2019-05-23T09:11:36.475500</ts>
    <user>Allyn</user>
    <text>Any idea?</text>
  </message>
  <message conversation_id="1661">
    <ts>2019-05-23T09:24:50.475600</ts>
    <user>Velia</user>
    <text>I believe it's because they renamed their repo from `Microsoft` to `microsoft`.</text>
  </message>
  <message conversation_id="1661">
    <ts>2019-05-23T09:25:34.475800</ts>
    <user>Allyn</user>
    <text>That’s a lead, I’ll check that!</text>
  </message>
  <message conversation_id="1661">
    <ts>2019-05-23T09:25:58.476000</ts>
    <user>Velia</user>
    <text>&lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1557233593154500?thread_ts=1557217005.144600&gt;</text>
  </message>
  <message conversation_id="1661">
    <ts>2019-05-23T09:28:54.476300</ts>
    <user>Huong</user>
    <text>I think &lt;@Carl&gt; mentioned the intention to republish - I haven’t really been following tho</text>
  </message>
  <message conversation_id="1661">
    <ts>2019-05-23T09:29:04.476500</ts>
    <user>Velia</user>
    <text>There is this fork for now:
&lt;https://package.elm-lang.org/packages/peterszerzo/elm-json-tree-view/latest/&gt;</text>
  </message>
  <message conversation_id="1662">
    <ts>2019-05-23T09:31:47.476700</ts>
    <user>Allyn</user>
    <text>Hello &lt;@Carl&gt; I’m stuck with this issue. It doesn’t seem you republished the module.  Is it possible to do it?</text>
  </message>
  <message conversation_id="1662">
    <ts>2019-05-23T09:58:35.476900</ts>
    <user>Allyn</user>
    <text>Thanks, I’ll use it as a workaround</text>
  </message>
  <message conversation_id="1661">
    <ts>2019-05-23T10:07:14.477900</ts>
    <user>Carl</user>
    <text>Sorry. I haven’t had a chance to republish yet</text>
  </message>
  <message conversation_id="1663">
    <ts>2019-05-23T14:51:16.479900</ts>
    <user>Sofia</user>
    <text>I’ve been thinking about image processing in elm today as well! Are you loading images into an elm bytes array and working with it there? I haven’t seen any libraries doing that yet</text>
  </message>
  <message conversation_id="1664">
    <ts>2019-05-23T16:45:13.480600</ts>
    <user>Vilma</user>
    <text>I’m pretty sure the answer is no, but is possible to somehow get the path parameters of the current URL?</text>
  </message>
  <message conversation_id="1664">
    <ts>2019-05-23T16:45:33.481000</ts>
    <user>Vilma</user>
    <text>I guess not because there’s no way of knowing which are parameters and which are not</text>
  </message>
  <message conversation_id="1664">
    <ts>2019-05-23T16:48:52.481800</ts>
    <user>Vilma</user>
    <text>I mean if I’ve got a `Router` module which the possible routes I can parse the URL and see if it matches the desired route and extract the data from there?</text>
  </message>
  <message conversation_id="1664">
    <ts>2019-05-23T16:57:51.483000</ts>
    <user>Sofia</user>
    <text>Are you using `Browser.fullscreen`? If so, this is the package that'll help you parse: &lt;https://package.elm-lang.org/packages/elm/url/latest/Url&gt;</text>
  </message>
  <message conversation_id="1664">
    <ts>2019-05-23T16:59:04.484000</ts>
    <user>Sofia</user>
    <text>Is it bad form to store an `Svg msg` in the model? My use case is that I'd like to fetch an `svg` file and render it inline -- which means I need to store the fetched svg somewhere.</text>
  </message>
  <message conversation_id="1664">
    <ts>2019-05-23T17:10:07.484900</ts>
    <user>Carman</user>
    <text>Would it make sense to do something like:
```
img [ src "&lt;http://images.com/my-file.svg&gt;" ] []
```</text>
  </message>
  <message conversation_id="1665">
    <ts>2019-05-23T17:10:21.485300</ts>
    <user>Carman</user>
    <text>and let the browser handle downloading, caching, etc?</text>
  </message>
  <message conversation_id="1664">
    <ts>2019-05-23T20:32:01.486200</ts>
    <user>Sofia</user>
    <text>&lt;@Carman&gt; That'd be lovely... but you can't use CSS to style `svgs` inside of `img` tags</text>
  </message>
  <message conversation_id="1664">
    <ts>2019-05-23T20:32:17.486700</ts>
    <user>Sofia</user>
    <text>The `object` node is an option... but it doesn't handle resizing particularly well</text>
  </message>
  <message conversation_id="1664">
    <ts>2019-05-23T20:42:25.487600</ts>
    <user>Earlean</user>
    <text>It's bad form to store computed values in the model because you need to update those computed values when their dependencies change</text>
  </message>
  <message conversation_id="1666">
    <ts>2019-05-23T20:42:57.487900</ts>
    <user>Earlean</user>
    <text>what are you doing to create the `Svg msg`?</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T06:36:51.001400</ts>
    <user>Hoa</user>
    <text>Are records `comparable` ?</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T06:38:47.002200</ts>
    <user>Virgie</user>
    <text>no
```
Hint: Only ints, floats, chars, strings, lists, and tuples are comparable.
```</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T06:39:04.002500</ts>
    <user>Virgie</user>
    <text>and really, how would that even work?</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T06:39:37.003100</ts>
    <user>Hoa</user>
    <text>OK, no problem.  I will use an `Int`. I have it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T06:41:02.004000</ts>
    <user>Virgie</user>
    <text>in theory we could make ordering work for something like `type Day = Monday | Tuesdag | ...` but records have no "obvious" way to order them</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T06:41:50.005100</ts>
    <user>Virgie</user>
    <text>because we want `type alias X = { a : Int, b : Bool}` to be equal to `type alias Y = { b : Bool, a : Int }`, there is no ordering on the fields like tuples have</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T06:43:13.006100</ts>
    <user>Virgie</user>
    <text>they could be hashable though, which would allow their use as keys in (hash)dicts</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T06:43:28.006400</ts>
    <user>Virgie</user>
    <text>but there hasn't been (visible) progress on that in a while</text>
  </message>
  <message conversation_id="1668">
    <ts>2019-05-24T07:16:44.011100</ts>
    <user>Rozanne</user>
    <text>trying to build a SSCCE (i remembered the acronym!) and it works locally, but not on ellie: &lt;https://ellie-app.com/5CXdNfKzmyBa1&gt;</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:21:30.011800</ts>
    <user>Virgie</user>
    <text>are you running `--debug` locally? ellie does that by default and there is a compiler bug where `--debug` will make the compiler crash sometimes</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:23:04.012700</ts>
    <user>Virgie</user>
    <text>so, if the problem occurs locally (without `--debug`) that is good enough. The compiler/core package people are familiar with the issue</text>
  </message>
  <message conversation_id="1668">
    <ts>2019-05-24T07:24:38.013100</ts>
    <user>Rozanne</user>
    <text>i was not, and i do get something different now:</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:24:41.013300</ts>
    <user>Rozanne</user>
    <text>```
./src/Main.elm
Error: Compiler process exited with error Compilation failed
Success! Compiled 1 module.
elm: Map.!: given key is not an element in the map
CallStack (from HasCallStack):
  error, called at libraries/containers/Data/Map/Internal.hs:603:17 in containers-0.5.10.2:Data.Map.Internal
```</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:26:36.013500</ts>
    <user>Virgie</user>
    <text>yes so that is the error ellie is getting</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:26:50.013900</ts>
    <user>Virgie</user>
    <text>and currently there is no way to tell ellie to not use `--debug`</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:27:52.014500</ts>
    <user>Rozanne</user>
    <text>i now remember running into this about a week ago, and this was why i turned off debugging in elm-app.  :weaksmile:</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:28:50.015200</ts>
    <user>Nathan</user>
    <text>I had a similar issue, it was some package exposing a type from a different package that was only included as an indirect dependency.</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:29:08.015600</ts>
    <user>Nathan</user>
    <text>In my case I had to move the elm/http dependency from an indirect one to a direct one.</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:30:09.016600</ts>
    <user>Rozanne</user>
    <text>im’ using the elm-style-animation lib, and i see that people have had similar problems.  they put elm/time &amp;amp; elm/svg into direct deps and it worked, however mine are already direct deps.  they also put the entire source into their src folder.  so hacky, but lesse..</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:30:38.016800</ts>
    <user>Virgie</user>
    <text>well or you turn of `--debug`</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:32:03.017600</ts>
    <user>Nathan</user>
    <text>Ellie doesn't automatically pick up on dependencies, it intuits them from the code I think, check if there is anything missing there.</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:32:09.017800</ts>
    <user>Rozanne</user>
    <text>yes, that was working locally.  i was trying to build an SSCCE though, and share with ellie.</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:32:57.018800</ts>
    <user>Nathan</user>
    <text>You can manually add dependencies on ellie by clicking the package icon on the left</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:33:07.019200</ts>
    <user>Rozanne</user>
    <text>which i guess.. yeah.  not what i wanted this morning.  was hoping to have something working, but i can’t even build an SSCCE for my real problem.  hah.</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:33:16.019500</ts>
    <user>Virgie</user>
    <text>this issue is well-known. was the SSCCE about the compiler crashing?</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:34:27.021000</ts>
    <user>Rozanne</user>
    <text>no, it was about elm-style-animation not animating a shape unless i clicked within the easing time, or something.  hence the sscce build, trying to nail down the issue.</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:36:07.021800</ts>
    <user>Virgie</user>
    <text>right, well when you submit it you can mention it doesn't work on ellie because of the `--debug` compiler crash; people will understand</text>
  </message>
  <message conversation_id="1667">
    <ts>2019-05-24T07:37:01.022300</ts>
    <user>Rozanne</user>
    <text>ok, will do.  thanks for the help refinding the --debug issue</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:36:59.024500</ts>
    <user>Su</user>
    <text>What is a good name for the combined thing of `(Model, Cmd Msg)`; i.e. if there is a function that `(Model, Cmd Msg) -&amp;gt; (Model, Cmd Msg)` i.e. just passes through and does not do anything specific to `Model` or `Cmd Msg`, then, would you name the tuple… `modelAndCommands`?</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:39:10.025000</ts>
    <user>Niesha</user>
    <text>I'd name it depending on what it actually does. Currently it only seems to be `identity`?</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:43:37.027500</ts>
    <user>Su</user>
    <text>Oh, I have a few of these functions, e.g. “queryIfValid” `Bool -&amp;gt; (Model, Cmd Msg) -&amp;gt; (Model, Cmd Msg)`, based on the `Bool`, will update tuple, but only by passing it to another fn “query” `(Model, Cmd Msg) -&amp;gt; (Model, Cmd Msg)`.</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:45:23.028000</ts>
    <user>Danika</user>
    <text>Why do you need to give it a name at all?</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:52:14.029400</ts>
    <user>Su</user>
    <text>I need a name to be able to pass both through, here is an example:
```
queryIfSearchOnLoad : Bool -&amp;gt; (Model, Cmd Msg) -&amp;gt; (Model, Cmd Msg)
queryIfSearchOnLoad searchOnLoad queryAndCommands =
    if searchOnLoad then
        queryAndCommands |&amp;gt; queryFormsIfValid

    else
        queryAndCommands
```
but, I see what you are saying, this is simple enough where just `(model, cmd)` can be used throughout the function</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:55:13.030700</ts>
    <user>Carman</user>
    <text>I've often used pipelined helpers like

```
(model, cmd)
  |&amp;gt; modifyModel someFunction
  |&amp;gt; addCmd cmd1
```</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:55:41.031100</ts>
    <user>Carman</user>
    <text>This package has a bunch of helpers like that that are quite nice &lt;https://package.elm-lang.org/packages/Janiczek/cmd-extra/latest/&gt;</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:57:28.032600</ts>
    <user>Nathan</user>
    <text>If you find yourself using it a lot you can just make an alias. ```type alias ModelCmd = (Model, Cmd Msg)``` That particular combo is used often enough however that I suspect it will be more readable just to type it out in full.</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:58:06.033300</ts>
    <user>Danika</user>
    <text>On an unhelpful note:

```(Model, Cmd Msg) -&amp;gt; ( Model, Cmd Msg )```

The inconsistent spacing here is making my eyes twich ^^</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T10:58:55.034000</ts>
    <user>Su</user>
    <text>My bad! Fixed!</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T11:00:01.036000</ts>
    <user>Nana</user>
    <text>&lt;@Carman&gt; that's how I'm currently doing all my data fetching :slightly_smiling_face:
so that the same function both sets the field to `RemoteData.Loading` and makes the request</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T11:00:15.036300</ts>
    <user>Su</user>
    <text>Thanks for the suggestions; I like the pipelined approach. I think I’ll also include cmd-extra into the project</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T11:10:03.039300</ts>
    <user>Sofia</user>
    <text>I’m fetching the SVG as a string and using the SvgParser package to turn that into an Svg msg. I could store the string and reparse it on every view? With Html lazy? :thinking_face:
</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T11:17:24.040100</ts>
    <user>Leoma</user>
    <text>&lt;@Su&gt; if you’re doing this stuff a lot, with extras, you may want to look at what I’ve put together. &lt;https://package.elm-lang.org/packages/z5h/component-result/latest/&gt;</text>
  </message>
  <message conversation_id="1669">
    <ts>2019-05-24T11:34:36.040200</ts>
    <user>Su</user>
    <text>Thanks &lt;@Leoma&gt;. I use types within types throughout my project (i.e. a “component” with its own model, update, view). Documentation made a lot of sense and I’m looking forward to refactoring with it!</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T11:38:33.040400</ts>
    <user>Leoma</user>
    <text>Let me know if you have any questions or feedback.</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T13:40:09.041400</ts>
    <user>Maybelle</user>
    <text>Does Elm cache function results?  (Obviously it COULD, given no side-effects and idempotence), but DOES it?</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T13:40:49.042500</ts>
    <user>Maybelle</user>
    <text>Trying to figure out whether to move calculated values out of the model or not.</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T13:40:58.042800</ts>
    <user>Virgie</user>
    <text>no, elm does nothing special there. In general it is hard to predict when that makes sense (speed vs space use)</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T13:41:18.043600</ts>
    <user>Maybelle</user>
    <text>So probably best to leave them in the model, if they get used ~20 times per update each?</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T13:41:22.043800</ts>
    <user>Virgie</user>
    <text>only in the rendering can you use `lazy`, which will cache the generated html and re-use it if the view function is called with the same model</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T13:43:04.044800</ts>
    <user>Carman</user>
    <text>It's always best to measure before making performance changes. In Elm, the bottleneck is almost always rendering DOM nodes rather than any computation. See the guide chapter on optimization for more details :slightly_smiling_face: &lt;https://guide.elm-lang.org/optimization/&gt;</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T13:43:48.045200</ts>
    <user>Maybelle</user>
    <text>Fair enough</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T13:43:54.045500</ts>
    <user>Maybelle</user>
    <text>Is there some equivalent to timeit or something</text>
  </message>
  <message conversation_id="1670">
    <ts>2019-05-24T13:44:28.045900</ts>
    <user>Maybelle</user>
    <text>Or am I spoiled by Python as usual. XD</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T14:24:11.046000</ts>
    <user>Carl</user>
    <text>I republished this morning under my personal account: &lt;https://github.com/klazuka/elm-json-tree-view&gt;</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T14:35:01.047900</ts>
    <user>Rozanne</user>
    <text>is there a way to get the time that a random number was generated other than
```
GenNum int -&amp;gt; Task.perform (GenNumWhen int) Time.now
GenNumWhen int posix -&amp;gt; [do stuff]
```?</text>
  </message>
  <message conversation_id="1672">
    <ts>2019-05-24T14:36:38.048200</ts>
    <user>Carman</user>
    <text>What are you trying to do?</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T14:39:39.050000</ts>
    <user>Rozanne</user>
    <text>animate an svg attribute/property.  i want the timestamp it was born (at a random position) so i can view the property as `propInitial * (1-t) + propFinal * t`, where t = 0 at its birth</text>
  </message>
  <message conversation_id="1673">
    <ts>2019-05-24T14:54:14.051900</ts>
    <user>Fidela</user>
    <text>is there a way to grant a javascript lib the ability to manage the content of an html element, and not have elm "overwrite" that when the state changes? the context is that I have a layout manager in elm, and I'm trying to run a canvas-based library in a layout item, but when I rearrange the layout all of the content of that item gets wiped out</text>
  </message>
  <message conversation_id="1672">
    <ts>2019-05-24T14:55:08.052400</ts>
    <user>Fidela</user>
    <text>the js lib attaches to items with a specified id</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T15:19:42.054500</ts>
    <user>Lynne</user>
    <text>You can try using `Html.Lazy` and always give same argument (referentially equal!) to the function returning your `canvas`</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T15:20:41.055500</ts>
    <user>Lynne</user>
    <text>This way Elm will think your node does not need changing thus not wiping out its contents</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T15:24:18.056400</ts>
    <user>Fidela</user>
    <text>I will give that a try, though it sounds a little hacky (and maybe not reliable) :slightly_smiling_face: thanks</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T15:25:24.057500</ts>
    <user>Lynne</user>
    <text>Well, generally you have to make sure that nodes with their own content (JS-managed) are leaf nodes in terms of VDOM</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T15:25:24.057600</ts>
    <user>Fidela</user>
    <text>I think my use case is a bit inverse from what elm might typically be used for</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T15:26:26.058200</ts>
    <user>Fidela</user>
    <text>that will always be the case here I believe</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T15:30:48.058700</ts>
    <user>Raylene</user>
    <text>@max You can use web components</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T15:31:38.059100</ts>
    <user>Fidela</user>
    <text>would the library I'm using need to be implemented using web components?</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T15:32:05.059500</ts>
    <user>Fidela</user>
    <text>at a glance wrapping in a web component seems like the more correct solution</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:14:48.061300</ts>
    <user>Fidela</user>
    <text>the lazy approach doesn't seem to be working, though I can't be sure why</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:20:11.062000</ts>
    <user>Lynne</user>
    <text>Web component won’t help if you let your Elm app managing the `canvas` node</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:20:23.062400</ts>
    <user>Lynne</user>
    <text>There is basically no difference</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:20:58.063400</ts>
    <user>Fidela</user>
    <text>elm doesn't necessarily have to manage the canvas, it could be a div that gets a canvas attached to it externally?</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:21:12.063700</ts>
    <user>Lynne</user>
    <text>Of course</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:21:18.063900</ts>
    <user>Lynne</user>
    <text>Just make sure it is a leaf node</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:22:36.065700</ts>
    <user>Fidela</user>
    <text>so I am trying to figure out exactly why lazy isn't working for me right now... I have the order of elements changing on a higher level so maybe that is preventing the container from staying lazy?</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:23:00.066100</ts>
    <user>Lynne</user>
    <text>Yep, in this case you may also need `Html.Keyed`</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:23:18.066600</ts>
    <user>Lynne</user>
    <text>The container must know which of its nodes stay and which go</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:23:39.067000</ts>
    <user>Fidela</user>
    <text>alright, I will also give that a look</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:24:06.067500</ts>
    <user>Lynne</user>
    <text>Also, the function you give to `lazyX` must be defined in outer scope</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:24:28.068100</ts>
    <user>Fidela</user>
    <text>outer scope, like the "file" level?</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:24:34.068600</ts>
    <user>Lynne</user>
    <text>Yep, the module level</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:24:58.069100</ts>
    <user>Fidela</user>
    <text>ah let me try that, I was doing it from a `let ... in` from the view fn</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:25:07.069500</ts>
    <user>Lynne</user>
    <text>That won’t work</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:25:17.070100</ts>
    <user>Kris</user>
    <text>~That's not true, you can do `view _ = div [] [ lazy2 div ... ]`~</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:25:36.070600</ts>
    <user>Lynne</user>
    <text>So what’s not true?</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:25:57.071100</ts>
    <user>Kris</user>
    <text>That you need the lazy thing at the top level</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:26:12.071600</ts>
    <user>Kris</user>
    <text>Ah, nvm, I missed what you meant</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:28:45.072600</ts>
    <user>Fidela</user>
    <text>moved them to the top level, but still no dice</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:29:14.073700</ts>
    <user>Fidela</user>
    <text>generally what would cause a re-render of a node and its children? would this be in the vdom docs or something?</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:30:00.074500</ts>
    <user>Lynne</user>
    <text>Elm calls `view` on each animation frame given there was a model update</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:31:30.075700</ts>
    <user>Lynne</user>
    <text>And then vdom steps in, adding/removing/replacing the nodes or skipping them if `Html.Lazy` is used correctly</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:32:16.076400</ts>
    <user>Lynne</user>
    <text>So basically, any model update would case a re-render of a node and its children unless vdom decides it is not worth it</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:34:19.077500</ts>
    <user>Fidela</user>
    <text>so let's say I have something like this: ```
div
    div
    div with canvas
```</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:34:20.077700</ts>
    <user>Fidela</user>
    <text>and that changes into ```
div
    div with canvas
    div
```</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:36:12.079000</ts>
    <user>Fidela</user>
    <text>even if div with canvas is specified lazy, the higher-level change would still cause a re-render? or does the order matter in terms of which nodes it thinks are which, i.e. this is where keyed would come into play</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:37:09.080200</ts>
    <user>Lynne</user>
    <text>The higher-level change should not cause re-render of div with canvas if those div with canvas would be given the same id (referring to `Html.Keyed`)</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:37:26.080500</ts>
    <user>Lynne</user>
    <text>And built with `Html.Lazy`</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:41:14.081900</ts>
    <user>Fidela</user>
    <text>hm, I don't see a reason this isn't working but I also am doing some things wrt. manipulating elements that might be preventing this approach from working, maybe I am invoking lazy incorrectly too</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:42:10.082700</ts>
    <user>Fidela</user>
    <text>regardless, I'll continue playing around with it, thank you &lt;@Lynne&gt;</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:43:08.083600</ts>
    <user>Lynne</user>
    <text>If you keep facing problems, a way to help you would be to check an Ellie with the example</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:43:48.084400</ts>
    <user>Fidela</user>
    <text>yeah I can give that a shot</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:44:06.085300</ts>
    <user>Lynne</user>
    <text>Do it</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:47:21.085700</ts>
    <user>Fidela</user>
    <text>can't do multiple files in ellie, hmm</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T16:49:09.086000</ts>
    <user>Kris</user>
    <text>No, you can’t </text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T17:12:28.087000</ts>
    <user>Fidela</user>
    <text>well I got most of my code in there on one file, but Ellie's giving me a weird error `SyntaxError: '' literal not terminated before end of script`</text>
  </message>
  <message conversation_id="1671">
    <ts>2019-05-24T17:12:55.087700</ts>
    <user>Fidela</user>
    <text>that seems like something that would be caught by the compiler in the code so I think it might be an ellie problem</text>
  </message>
  <message conversation_id="1674">
    <ts>2019-05-25T00:29:40.090500</ts>
    <user>Eveline</user>
    <text>If you really want to name it, `modelAndCmd` should be a perfect name. But i genereally dont like to name the `(Model, Cmd Msg)`.</text>
  </message>
  <message conversation_id="1674">
    <ts>2019-05-25T00:30:53.090700</ts>
    <user>Eveline</user>
    <text>quick side note: your function can also be written as:

```
queryIfSearchOnLoad : Bool -&amp;gt; (Model, Cmd Msg) -&amp;gt; (Model, Cmd Msg)
queryIfSearchOnLoad searchOnLoad =
    if searchOnLoad then
        queryFormsIfValid
    else
        identity
```</text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:29:46.091700</ts>
    <user>Hoa</user>
    <text>So if you have a intensive CPU computation to do and you would like to keep the UI responsive what you do?</text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:32:07.094000</ts>
    <user>Hoa</user>
    <text>Is there a way to create a task/process or something like that and get a `Msg` back when it has finished to update the UI with the data that has been computed? I guess that the most difficult path is to go with webworkers but I would prefer to avoid that if possible :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:35:08.095400</ts>
    <user>Danika</user>
    <text>How about the exceptionally convoluted solution of having *two* elm apps, one as your main one and another that is a `Platform.worker` that runs in a webworker! I:joy:</text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:36:03.095700</ts>
    <user>Hoa</user>
    <text>I was reading about that in Medium</text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:36:23.096200</ts>
    <user>Hoa</user>
    <text>But how do you pass data between them? JSON?</text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:37:03.097500</ts>
    <user>Danika</user>
    <text>Oh someone’s actually done it?! Aye I would encode the data in elm, send it out on a port, and get js to send it to the webworker, where it goes into your second elm app in another port </text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:37:18.097700</ts>
    <user>Hoa</user>
    <text>Yeah. &lt;https://medium.com/@nithstong/elm-with-web-workers-1c2c3d55f939&gt;</text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:37:52.098000</ts>
    <user>Hoa</user>
    <text>A lot of JSON decoders then. Damn.</text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:41:07.098600</ts>
    <user>Hoa</user>
    <text>It seems that there’s something in &lt;https://package.elm-lang.org/packages/elm/core/latest/Process&gt;  that could be useful</text>
  </message>
  <message conversation_id="1675">
    <ts>2019-05-25T05:53:10.099000</ts>
    <user>Danika</user>
    <text>But then you cant feel smugly superior </text>
  </message>
  <message conversation_id="1676">
    <ts>2019-05-25T06:05:36.104400</ts>
    <user>Luis</user>
    <text>Hi All, I'm trying to parse a route that has an optional path  which I would like to parse as a `Maybe String`
For example:
`/topic/topicName/sendMessage/messageBody`
`/topic/topicName/sendMessage`
Both should parse to `SendMessageRoute TopicName (Maybe MessageBody)` wher the first example will be `SendMessageRoute "topicName" (Just "messageBody")` and the second `SendMessageRoute "topicName" Nothing`
I can't find anything in elm/url package documentation that helps me. Any suggestions would be greatly appreciated</text>
  </message>
  <message conversation_id="1677">
    <ts>2019-05-25T06:12:09.108600</ts>
    <user>Tessa</user>
    <text>Hey folks! At one point in my app I:
1) change the Model so that a new HTML element is created and
2) run a `Browser.Dom.getElement` for this very element.
Both are returned from the `update` function at the same cycle. The thing is, sometimes the element doesn't have enough time to show up in the DOM before the `getElement` command is run (unsuccessfully). How do I get past this?</text>
  </message>
  <message conversation_id="1677">
    <ts>2019-05-25T06:24:49.110500</ts>
    <user>Earlean</user>
    <text>&lt;@Tessa&gt; `Browser.Dom.getElement` waits for the next call to `view` so elements added should be found</text>
  </message>
  <message conversation_id="1677">
    <ts>2019-05-25T07:34:26.111500</ts>
    <user>Tessa</user>
    <text>&lt;@Earlean&gt; Oh wow, thank you! Problem in something else then :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1676">
    <ts>2019-05-25T08:28:44.111600</ts>
    <user>Bert</user>
    <text>That would be something like this example from the package docs:
```
route =
  oneOf
    [ map Topic   (s "topic" &amp;lt;/&amp;gt; string)
    , map Blog    (s "blog" &amp;lt;/&amp;gt; int)
    , map User    (s "user" &amp;lt;/&amp;gt; string)
    , map Comment (s "user" &amp;lt;/&amp;gt; string &amp;lt;/&amp;gt; s "comment" &amp;lt;/&amp;gt; int)
    ]
```</text>
  </message>
  <message conversation_id="1678">
    <ts>2019-05-25T09:22:19.114700</ts>
    <user>Fernande</user>
    <text>I am thinking of putting a simple 360 image viewer in my app for photosphere taken with google street view. I don't think there is a native elm solution but do you folks know of a simple js plugin that integrates well with elm?</text>
  </message>
  <message conversation_id="1678">
    <ts>2019-05-25T10:06:56.116300</ts>
    <user>Randell</user>
    <text>We used the iframe feature of panellum before, but a native Elm solution would be really nice :+1:</text>
  </message>
  <message conversation_id="1679">
    <ts>2019-05-25T10:39:52.118300</ts>
    <user>Danika</user>
    <text>Sounds like the perfect time for a web component </text>
  </message>
  <message conversation_id="1678">
    <ts>2019-05-25T10:41:06.118700</ts>
    <user>Fernande</user>
    <text>&lt;@Randell&gt; I think I did something like that too once, with Panellum. I can't find the code anymore though :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1678">
    <ts>2019-05-25T13:32:40.119100</ts>
    <user>Su</user>
    <text>Thanks for pointing this ^ out! I always forget about the point-free style</text>
  </message>
  <message conversation_id="1680">
    <ts>2019-05-25T14:38:02.125100</ts>
    <user>Marquitta</user>
    <text>Hey everyone! Has anyone implemented detecting click outside an element with native Elm (without js ports)?
I have done it pure JS and Reasonml, and the idea was to subscribe to the global click and check whether `event.target` contains the element using `Node.contains`.
I have managed to use `Browser.Events.onMouseDown` in subscriptions, but couldn't get `target` out of it, and I didn't find anything that would resemble `Node.contains` inside `Html` package.
Am I thinking in the wrong direction here and there is a simpler way of doing this? Really appreciate any help, since I have been struggling with this for quite a while now :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T14:46:56.125200</ts>
    <user>Cornell</user>
    <text>Hello!

So there are two ways I think about this in Elm when it comes up.

1. Render a backdrop element that covers the entire screen then detect clicks on that.  That’s usually used for modals and such.
2. Or do some bounding box math through a combination of &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom#getElement&gt; and decoding x,y coords from the mouse click</text>
  </message>
  <message conversation_id="1680">
    <ts>2019-05-25T14:53:27.126200</ts>
    <user>Danika</user>
    <text>You could probably write a custom event decoder that decodes target, no? </text>
  </message>
  <message conversation_id="1680">
    <ts>2019-05-25T14:55:41.126400</ts>
    <user>Marquitta</user>
    <text>thanks for your response! I was considering option 1, but in my case it is just a dropdown, so I dont think I want to have a backdrop.
I have managed to make it work as you described in option 2, but it felt kinda "dirty" :slightly_smiling_face: So what I did was saving last click from `onMouseDown` in the model and returning a command that would call `Dom.getElement`, and then when the result comes back checking whether the last click position is outside the element :woman-facepalming: I feel like I am doing it wrong, would you do it differently? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:05:10.126600</ts>
    <user>Cornell</user>
    <text>I agree it’s a little funky :slightly_smiling_face:  Let’s see.  :thinking_face:</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:09:51.126800</ts>
    <user>Cornell</user>
    <text>Yeah, you can’t decode a target, probably because its a dom node :thinking_face:  We could try to get the bounding box of the drop down as soon as it’s opened.</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:10:27.127000</ts>
    <user>Marquitta</user>
    <text>Yes! I just started thinking in the same direction :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:10:36.127200</ts>
    <user>Cornell</user>
    <text>so, `OpenDropDown` sets the dropdown to open and fires the `Dom.getElement`</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:10:38.127400</ts>
    <user>Cornell</user>
    <text>yeah!</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:11:55.127600</ts>
    <user>Marquitta</user>
    <text>and then I get the click position in `MouseDown Position` and should already have the element in the model, right?</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:12:15.127800</ts>
    <user>Dorotha</user>
    <text>What about keeping a boolean of a mouse being within a dropdown using `mouseover` and `mouseout`, and using this in `Browser.Events.onMouseDown`? I’m not sure if this works on touch devices though.</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:13:32.128000</ts>
    <user>Cornell</user>
    <text>yeah, you should…its a little weird because there’s a brief period where you have a dropdown that’s open but with no bounding box in your model.</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:14:29.128200</ts>
    <user>Cornell</user>
    <text>but maybe just close the dropdown if that occurs?</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:14:37.128400</ts>
    <user>Cornell</user>
    <text>it should be a super brief period</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:14:58.128600</ts>
    <user>Marquitta</user>
    <text>yes, I think it should be fine, the user can't be that fast anyway :wink:</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:16:18.128800</ts>
    <user>Marquitta</user>
    <text>&lt;@Dorotha&gt; that sounds interesting, but wouldn't it be a but too heavy to track `mouseover` event?</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:16:59.129000</ts>
    <user>Cornell</user>
    <text>Another way to approach dropdowns that’s with sorta sneaky CSS is to show the dropdown when the element has `:focus-within`</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:17:00.129200</ts>
    <user>Dorotha</user>
    <text>Doesn’t sound heavy if you attach it only when the dropdown is opened.</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:17:19.129400</ts>
    <user>Cornell</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within&gt;</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:17:32.129700</ts>
    <user>Cornell</user>
    <text>but depends how weird you wanna get with CSS tricks</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:20:14.129900</ts>
    <user>Marquitta</user>
    <text>wooow, I didn't even think about this trick, but I actually have an autocomplete with a dropdown, so it is an input field and a list of options under it. I guess it is a perfect fit for using `:focus-within` to open/close the dropdown?</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:24:13.130100</ts>
    <user>Cornell</user>
    <text>yeah, that might workout then.  If you can just use `:focus` instead of `:focus-within` you’ll have better browser compatibility.

Also a good trick to use with `:focus` is to remember you can using the sibling selector to affect the next element.

so
```
.searchbar:focus ~ .my-dropdown { opacity: 1 }
```
would style the dropdown if it comes directly after the input
```
&amp;lt;input class="searchbar" /&amp;gt;
&amp;lt;div class="my-dropdown"&amp;gt;&amp;lt;/div&amp;gt;
```</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:26:23.130300</ts>
    <user>Dorotha</user>
    <text>^ this wouldn’t work when you click on something in the dropdown. I tried this and needed to add a workaround of calling Dom.focus to put the focus back</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:26:42.130500</ts>
    <user>Cornell</user>
    <text>right, good point :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:27:17.130700</ts>
    <user>Dorotha</user>
    <text>This is also not accessible, because users wouldn’t be able to focus the items.</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:27:34.130900</ts>
    <user>Cornell</user>
    <text>so you’d likely need `focus-within`</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:28:31.131100</ts>
    <user>Marquitta</user>
    <text>yes, I think I can use it, browser compatibility is not a big issue for me. thanks for all the help!</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:28:43.131300</ts>
    <user>Cornell</user>
    <text>no prob, good luck!</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:29:48.131700</ts>
    <user>Marquitta</user>
    <text>&lt;@Dorotha&gt; I will actually try and see if I can implement your solution right away now, it sounded interesting :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T15:51:29.132200</ts>
    <user>Marquitta</user>
    <text>yeah, that worked nicely, such a creative solution :slightly_smiling_face: the only problem I have with it, is that the history of messages gets heavily polluted with mouseover events</text>
  </message>
  <message conversation_id="1682">
    <ts>2019-05-25T16:00:45.132400</ts>
    <user>Dorotha</user>
    <text>I think I found a way using `focusout` event and checking if the `relatedTarget` element is within the dropdown element. I built it in JS, but should be possible to do the `relatedTarget` check in the event decoder &lt;https://codepen.io/anon/pen/MdGveV&gt;</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T16:08:50.133000</ts>
    <user>Marquitta</user>
    <text>is it possible to decode this `relatedTarget` from the event? I think it might be tricky to get `parentNode` out of it .. do you have any resources you can point me to?</text>
  </message>
  <message conversation_id="1682">
    <ts>2019-05-25T16:10:36.133200</ts>
    <user>Dorotha</user>
    <text>How familiar are you with JSON decoders in Elm? It is possible to treat the event object as a JSON value, and decode the Message out of it. &lt;https://package.elm-lang.org/packages/elm/html/latest/Html-Events#on&gt;</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T16:17:46.133400</ts>
    <user>Marquitta</user>
    <text>oh, this was a cool link, thanks! let me try it and see if I can pull this off :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:29:43.133700</ts>
    <user>Cornell</user>
    <text>Can you decode Dom node instances like that? :thinking_face:  I tried but failed</text>
  </message>
  <message conversation_id="1681">
    <ts>2019-05-25T16:31:52.133900</ts>
    <user>Marquitta</user>
    <text>yeah, I don't think I understand how to do it. `parentNode` needs to be decoded recursively, is it possible to decode recursive structures?</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:34:09.134100</ts>
    <user>Cornell</user>
    <text>yeah, you’ll need to use `Decode.lazy`</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:35:21.134300</ts>
    <user>Dorotha</user>
    <text>It should be possible. I’m trying to implement this in Ellie now.</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:39:55.134500</ts>
    <user>Cornell</user>
    <text>I was able to decode `target.id` and `target.style.visibility`, so you can query those, but I think only for properties, you can’t call functions.</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:40:16.134700</ts>
    <user>Cornell</user>
    <text>`&lt;http://Decode.at|Decode.at&gt; ["target", "id"] Decode.string`</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:40:28.134900</ts>
    <user>Dorotha</user>
    <text>`parentNode` is a property! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:41:51.135100</ts>
    <user>Cornell</user>
    <text>that’s so crazy!</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:49:48.135400</ts>
    <user>Cornell</user>
    <text>So, this decoder will walk up the tree till it finds a node with a specific id</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:49:52.135600</ts>
    <user>Cornell</user>
    <text>```

parentWithId =
    Decode.lazy
        (\_ -&amp;gt;
            Decode.nullable (Decode.field "id" Decode.string)
                |&amp;gt; Decode.andThen
                    (\maybeId -&amp;gt;
                        case Debug.log "id" maybeId of
                            Nothing -&amp;gt;
                                Decode.field "parentNode" parentWithId

                            Just id -&amp;gt;
                                if id == "parent" then
                                    Decode.succeed "Found it"

                                else
                                    Decode.field "parentNode" parentWithId
                    )
        )

```</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:50:17.135800</ts>
    <user>Cornell</user>
    <text>and seeded with `Decode.field "target" parentWithId`</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:50:29.136000</ts>
    <user>Cornell</user>
    <text>which I did *not* know you could do and is super cool</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:53:12.136200</ts>
    <user>Dorotha</user>
    <text>&lt;https://ellie-app.com/5DzVMJnsmxka1&gt;</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:54:06.136400</ts>
    <user>Marquitta</user>
    <text>goddammit y'all are too fast :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:56:12.136900</ts>
    <user>Cornell</user>
    <text>Andrey’s is much cleaner than mine :smile:</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:57:47.137100</ts>
    <user>Dorotha</user>
    <text>I’m actually not sure about mine, it triggers `Decode.succeed (Toggle True)` when it finds the parent dropdown, which is a Noop. It would be better for the decoder to fail and not cause any messages in this case.</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:58:41.137400</ts>
    <user>Cornell</user>
    <text>I’m absolutely taking notes for `elm-ui`, I feel like this technique could do a lot of cool things that I’m not totally sure of yet.</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T16:59:02.137600</ts>
    <user>Dorotha</user>
    <text>I guess it could first decode into a boolean, and then use andThen to succeed with collapsing or fail the decoder.</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T17:01:19.138000</ts>
    <user>Dorotha</user>
    <text>And if we also expand the dropdown on focus, it will be fully accessible! Like this: &lt;https://ellie-app.com/5DB7MHDcswLa1&gt; (updated)</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T17:08:20.138300</ts>
    <user>Dorotha</user>
    <text>Need to work a bit more, because click and focus events happen at the same time :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T17:09:44.138500</ts>
    <user>Marquitta</user>
    <text>right, it opens and closes immediately, sometimes :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T17:11:22.138700</ts>
    <user>Marquitta</user>
    <text>but honestly, this is something truly amazing, had no idea you can do a lot of those things in elm</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T17:12:14.138900</ts>
    <user>Dorotha</user>
    <text>You can, you have to be creative sometimes :smile:</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T17:14:14.139100</ts>
    <user>Marquitta</user>
    <text>and know the language quite well :wink:</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T17:22:45.139300</ts>
    <user>Dorotha</user>
    <text>Yeah, this kind of stuff requires quite a deep knowledge of web and Elm. Fixed to work with focus &lt;https://ellie-app.com/5DBFLkbVVCwa1&gt; Ugh, doesn’t work in all the cases, but you got an idea!</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T17:26:27.139500</ts>
    <user>Marquitta</user>
    <text>I cannot thank you enough for your help :slightly_smiling_face: it looks awesome, and not only solves the specific problem but opens up new ways to implement similar tricky things inside elm without resorting to JS. and I have learnt so much from this discussion :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1683">
    <ts>2019-05-25T17:56:30.140200</ts>
    <user>Bert</user>
    <text>Thank you for this wonderful thread, Margarita, Andrey and Matt! :heart:</text>
  </message>
  <message conversation_id="1684">
    <ts>2019-05-25T18:24:42.141100</ts>
    <user>Kris</user>
    <text>How are packages in &lt;https://package.elm-lang.org&gt; ordered?</text>
  </message>
  <message conversation_id="1684">
    <ts>2019-05-25T18:40:22.141700</ts>
    <user>Cornell</user>
    <text>Is there a way to have any sort of guarantee that a `Cmd` will be fired after rendering is finished?</text>
  </message>
  <message conversation_id="1684">
    <ts>2019-05-25T18:40:54.142300</ts>
    <user>Cornell</user>
    <text>I’m trying to capture information from the browser about rendered elements, but failing if the render time wiggles at all.</text>
  </message>
  <message conversation_id="1684">
    <ts>2019-05-25T18:42:29.142900</ts>
    <user>Cornell</user>
    <text>:thinking_face: maybe I could do something wacky with `onAnimationFrame`</text>
  </message>
  <message conversation_id="1684">
    <ts>2019-05-25T18:52:50.143200</ts>
    <user>Cornell</user>
    <text>Turns out that works out pretty well!</text>
  </message>
  <message conversation_id="1684">
    <ts>2019-05-25T18:53:39.144100</ts>
    <user>Cornell</user>
    <text>by setting a value in the model, and conditionally opening up the `onAnimationFrame` subscription for one iteration, and then firing the Cmd there.</text>
  </message>
  <message conversation_id="1685">
    <ts>2019-05-25T21:39:55.147000</ts>
    <user>Earlean</user>
    <text>The core libraries that provide Cmds to query the DOM should already wait for the next animation frame</text>
  </message>
  <message conversation_id="1684">
    <ts>2019-05-25T21:56:59.147800</ts>
    <user>Cornell</user>
    <text>I’m using a port in this case.</text>
  </message>
  <message conversation_id="1684">
    <ts>2019-05-25T21:58:04.148200</ts>
    <user>Cornell</user>
    <text>The thing I want isn’t accessible through `Browser.Dom` :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1685">
    <ts>2019-05-25T22:07:53.149100</ts>
    <user>Earlean</user>
    <text>Ah, the general solution is to wait for the animation frame on the JS side of that port</text>
  </message>
  <message conversation_id="1686">
    <ts>2019-05-25T22:12:40.151600</ts>
    <user>Leoma</user>
    <text>Hey all, I’d like to reveal an input via model change, AND make a call to a port to focus that element. My understanding was that Elm would update the view before calling the port.
See here for failing example.
&lt;https://ellie-app.com/5DGHVn79Wkva1&gt;

I can’t use setTimeout on the port side, because on mobile Safari, in order for the browser to respect calls to focus, the call to focus must be made synchronously in a response to a user generated event.

Any ideas?</text>
  </message>
  <message conversation_id="1686">
    <ts>2019-05-25T23:00:29.151700</ts>
    <user>Claretta</user>
    <text>Does the `focus` in the Browser package have the same problem? &lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser-Dom#focus&gt;</text>
  </message>
  <message conversation_id="1686">
    <ts>2019-05-25T23:02:36.153200</ts>
    <user>Maxwell</user>
    <text>Is it possible to have nested Html.lazy views? Like a list of lazy lists. I'm thinking about something like the implementation of threaded comments.</text>
  </message>
  <message conversation_id="1684">
    <ts>2019-05-25T23:25:43.153400</ts>
    <user>Leoma</user>
    <text>It works on desktop but not on mobile Safari.
&lt;https://ellie-app.com/5DHPXCFdSDza1&gt;</text>
  </message>
  <message conversation_id="1687">
    <ts>2019-05-26T00:24:09.154700</ts>
    <user>Su</user>
    <text>in `Flags -&amp;gt; (Model, Cmd Msg)`, what’s a good way to “crash” or have the elm-side refuse to proceed if `Flags` is malformed, i.e. bad json?</text>
  </message>
  <message conversation_id="1687">
    <ts>2019-05-26T00:32:55.154900</ts>
    <user>Rosalee</user>
    <text>TIL event.relatedTarget</text>
  </message>
  <message conversation_id="1687">
    <ts>2019-05-26T00:33:04.155100</ts>
    <user>Lorilee</user>
    <text>Instead of crashing, you can record that the flags are malformed and display a helpful message of some kind. I like to make my main type be `Result String Model` (or decode error instead of string) and then my view will pattern match the result and show an error page instead of the app.</text>
  </message>
  <message conversation_id="1687">
    <ts>2019-05-26T00:43:41.155300</ts>
    <user>Su</user>
    <text>Thanks, that makes sense! I’ll also be sending off a cmd to record the error in metrics</text>
  </message>
  <message conversation_id="1687">
    <ts>2019-05-26T00:52:36.155500</ts>
    <user>Lorilee</user>
    <text>That sounds perfect! Definitely dont want to lose knowledge of it</text>
  </message>
  <message conversation_id="1688">
    <ts>2019-05-26T02:25:57.159300</ts>
    <user>Jenee</user>
    <text>Hey everyone, I am trying to grok the types defined in this url (&lt;https://package.elm-lang.org/packages/dillonkearns/elm-graphql/latest/Graphql-SelectionSet&gt;) under `Types`. One of the is defined as below

type SelectionSet decodesTo typeLock
    = SelectionSet (List RawField) (Decoder decodesTo)

Based on my understanding the library owner has defined a type constructor `SelectionSet` with two type variables - decodesTo and typeLock. I am trying understand the requirement of a `typeLock` variable as it doesn't seem to be used in the definition. Is there a reason?

It would be great if I am pointed in the right direction to understand the importance of creating types like above and when to use them.</text>
  </message>
  <message conversation_id="1688">
    <ts>2019-05-26T02:34:16.161100</ts>
    <user>Bebe</user>
    <text>Just verified too, and there doesn’t seem to have been reported on elm/browser. I think you should open an issue @z5h</text>
  </message>
  <message conversation_id="1688">
    <ts>2019-05-26T02:35:25.163100</ts>
    <user>Bebe</user>
    <text>&lt;https://ellie-app.com/5DLC49gnM7Za1&gt; I tried keeping the dom element always present but made no difference, and logged the result of focus and it seems to be Ok, which seems wrong since it didn’t work...</text>
  </message>
  <message conversation_id="1688">
    <ts>2019-05-26T02:59:29.163500</ts>
    <user>Danika</user>
    <text>Give this a read: &lt;https://medium.com/@ckoster22/advanced-types-in-elm-phantom-types-808044c5946d&gt;</text>
  </message>
  <message conversation_id="1689">
    <ts>2019-05-26T03:14:43.163600</ts>
    <user>Dorotha</user>
    <text>Updated to support Safari: &lt;https://ellie-app.com/5DMgbVMzbxFa1&gt; Safari doesn’t focus buttons on click by default. So it is really not possible without registering that outside click :disappointed: A good thing is that I could reuse the JSON decoder</text>
  </message>
  <message conversation_id="1689">
    <ts>2019-05-26T03:22:56.163900</ts>
    <user>Dorotha</user>
    <text>A version with links &lt;https://ellie-app.com/5DLTQ5QGdfBa1&gt; worked on mac but didn’t close on iOS</text>
  </message>
  <message conversation_id="1690">
    <ts>2019-05-26T03:55:51.164200</ts>
    <user>Luis</user>
    <text>Which one of these will evaluate to a `Maybe String`? :thinking_face:</text>
  </message>
  <message conversation_id="1691">
    <ts>2019-05-26T04:22:37.164400</ts>
    <user>Bert</user>
    <text>None of them. But `oneOf` is how you can do whay you want. Your thing could be e.g.
```
oneOf
    [ map SendMessageRoute (s "topic" &amp;lt;/&amp;gt; string &amp;lt;/&amp;gt; (map Just string))
    , map (\topicName -&amp;gt; SendMessageRoute topicName Nothing) (s "topic" &amp;lt;/&amp;gt; string)
    ]
```</text>
  </message>
  <message conversation_id="1691">
    <ts>2019-05-26T04:26:43.164600</ts>
    <user>Bert</user>
    <text>I am pretty sure Elm crashes on its own if the flags don't work out.</text>
  </message>
  <message conversation_id="1691">
    <ts>2019-05-26T04:33:47.164800</ts>
    <user>Bert</user>
    <text>Yep, here's an Ellie to showcase how it works: &lt;https://ellie-app.com/5DNxKqDwn6Qa1&gt;</text>
  </message>
  <message conversation_id="1691">
    <ts>2019-05-26T04:43:19.165500</ts>
    <user>Ashli</user>
    <text>```
&amp;gt; import Bytes.Encode
&amp;gt; b0 = [] |&amp;gt; List.map Bytes.Encode.unsignedInt8 |&amp;gt; Bytes.Encode.sequence |&amp;gt; Bytes.Encode.encode
&amp;lt;0 bytes&amp;gt; : Bytes.Bytes
&amp;gt; b1 = [ 125, 211, 143, 67, 78, 89, 125, 24, 100, 73, 61, 190, 172, 133, 160, 82, 150, 234, 82, 197, 97, 146, 67, 85, 53, 203, 134, 236, 168, 180, 179, 239 ] |&amp;gt; List.map Bytes.Encode.unsignedInt8 |&amp;gt; Bytes.Encode.sequence |&amp;gt; Bytes.Encode.encode
&amp;lt;32 bytes&amp;gt; : Bytes.Bytes
&amp;gt; Debug.log "eq" (b0 == b1)
eq: True
True : Bool
```
that was... unexpected</text>
  </message>
  <message conversation_id="1691">
    <ts>2019-05-26T04:46:46.166000</ts>
    <user>Ashli</user>
    <text>How should I compare two `Bytes` values? Decode them back to `List Int`?</text>
  </message>
  <message conversation_id="1692">
    <ts>2019-05-26T05:12:00.166100</ts>
    <user>Luis</user>
    <text>Ah, I was missing the ability to do `map Just string` Thanks!</text>
  </message>
  <message conversation_id="1693">
    <ts>2019-05-26T05:43:36.166300</ts>
    <user>Jenee</user>
    <text>Thank you so much &lt;@Danika&gt;</text>
  </message>
  <message conversation_id="1694">
    <ts>2019-05-26T05:52:00.167300</ts>
    <user>Naida</user>
    <text>Where’s elm development happening these days? The Github org mainly contains archived repositories</text>
  </message>
  <message conversation_id="1694">
    <ts>2019-05-26T06:00:38.167500</ts>
    <user>Marquitta</user>
    <text>is it better to handle `focus` and `focusOut` for accessibility reasons? I was thinking about doing it the way you did with subscription to the global `onMouseDown` and reusing the same recursive decoder for `target`, and maybe not using any of the focus events at all.</text>
  </message>
  <message conversation_id="1694">
    <ts>2019-05-26T06:06:59.168200</ts>
    <user>Earlean</user>
    <text>&lt;@Naida&gt; &lt;https://github.com/elm&gt; it's all there</text>
  </message>
  <message conversation_id="1694">
    <ts>2019-05-26T06:08:22.169000</ts>
    <user>Naida</user>
    <text>Ah, I was looking at &lt;https://github.com/elm-lang&gt; - thanks</text>
  </message>
  <message conversation_id="1695">
    <ts>2019-05-26T06:34:46.171300</ts>
    <user>Dorotha</user>
    <text>Yeah, I agree, focus may be ditched altogether. It would still be possible to tab into the button and press enter to reveal the dropdown.</text>
  </message>
  <message conversation_id="1695">
    <ts>2019-05-26T06:39:40.171600</ts>
    <user>Virgie</user>
    <text>that is the safe way. How does this come up?</text>
  </message>
  <message conversation_id="1695">
    <ts>2019-05-26T06:43:23.171800</ts>
    <user>Marquitta</user>
    <text>but I guess it won't close if you tab out of it then, so `focusOut` is still necessary?</text>
  </message>
  <message conversation_id="1695">
    <ts>2019-05-26T06:45:27.172000</ts>
    <user>Raeann</user>
    <text>After this nice thread is over, can someone write a post somewhere about it? :smile: It is very interesting!</text>
  </message>
  <message conversation_id="1695">
    <ts>2019-05-26T06:46:45.172200</ts>
    <user>Marquitta</user>
    <text>I had this idea in mind :slightly_smiling_face: I agree, it is a lot of useful stuff in this thread</text>
  </message>
  <message conversation_id="1695">
    <ts>2019-05-26T06:59:03.176900</ts>
    <user>Dorotha</user>
    <text>&lt;@Marquitta&gt; you should definitely write a blog post about this! With all the corner cases and accessibility support, I’m still wondering what the final solution would look like.</text>
  </message>
  <message conversation_id="1695">
    <ts>2019-05-26T07:01:57.177100</ts>
    <user>Marquitta</user>
    <text>I will definitely do it, I am not an accessibility expert though, so it might take some time for me to figure stuff out :slightly_smiling_face: thanks for the awesome code examples, &lt;@Dorotha&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1696">
    <ts>2019-05-26T08:42:56.177600</ts>
    <user>Lorilee</user>
    <text>You're right! I've been taking in flags as JSON values for so long that I forgot. That will only work if your flags are simple enough to not require a custom decoder, but great to know.</text>
  </message>
  <message conversation_id="1696">
    <ts>2019-05-26T08:58:25.177900</ts>
    <user>Ashli</user>
    <text>I'm working on a library for parsing and verifying JWTs. One verification step is to calculate HMAC of the payload and compare it with the given signature.</text>
  </message>
  <message conversation_id="1697">
    <ts>2019-05-26T12:26:39.178800</ts>
    <user>Mirian</user>
    <text>I don't know the answer, just curious about your case - why not &lt;https://package.elm-lang.org/packages/simonh1000/elm-jwt/latest/&gt; ?</text>
  </message>
  <message conversation_id="1697">
    <ts>2019-05-26T12:31:49.179000</ts>
    <user>Ashli</user>
    <text>&lt;@Mirian&gt; I have published my package. It contains "why not" section just for you! :slightly_smiling_face:
&lt;https://package.elm-lang.org/packages/malinoff/elm-jwt/latest/&gt;</text>
  </message>
  <message conversation_id="1697">
    <ts>2019-05-26T12:34:13.179200</ts>
    <user>Mirian</user>
    <text>awesome, looks like a good candidate for a jwt lib in my upcoming project</text>
  </message>
  <message conversation_id="1697">
    <ts>2019-05-26T12:40:23.179400</ts>
    <user>Ashli</user>
    <text>Nice to hear! Please, do not hesitate to ping me on github any time. I'm going to use that lib in my auth0 sdk implementation, but I suppose others may have different needs</text>
  </message>
  <message conversation_id="1697">
    <ts>2019-05-26T12:49:39.179600</ts>
    <user>Mirian</user>
    <text>Oh it's GPL :confused: Still cool though</text>
  </message>
  <message conversation_id="1697">
    <ts>2019-05-26T12:56:57.179800</ts>
    <user>Ashli</user>
    <text>&amp;gt; Oh it's GPL
It was a really tough decision to make, all my previous open-source projects were MIT/Apache/BSD licensed. But I recently realized that I haven't got any outcome from that. I'm not a sales guy, I don't know how to advertize myself, none of my projects mattered to recruiters.
Therefore I came to conclusion that the software I write and open source should really be GPL - because it ensures that I essentially get all derivative contributions back, and there is still an option to purchase a commercial license allowing to use my software in commercial, closed-source projects. I won't charge that much, but I feel this is the only way I can get something from spending my time open sourcing things</text>
  </message>
  <message conversation_id="1698">
    <ts>2019-05-26T14:14:49.181200</ts>
    <user>Saran</user>
    <text>How often do you all recursively call your update functions? Do you usually extract the common functionality into a function instead? Do you never find yourself in the spot where you have two or more almost identical msg constructors?</text>
  </message>
  <message conversation_id="1697">
    <ts>2019-05-26T14:15:49.181500</ts>
    <user>Virgie</user>
    <text>I extract into a function. I think it's clearer that way</text>
  </message>
  <message conversation_id="1697">
    <ts>2019-05-26T14:24:25.181600</ts>
    <user>Mirian</user>
    <text>That's absolutely fair</text>
  </message>
  <message conversation_id="1698">
    <ts>2019-05-26T15:31:59.182700</ts>
    <user>Erlene</user>
    <text>&lt;@Saran&gt; I fairly frequently call update within update, as I understand it, that's faster, no need to put a message in the queue and reprocess that later.</text>
  </message>
  <message conversation_id="1697">
    <ts>2019-05-26T15:51:39.183300</ts>
    <user>Malinda</user>
    <text>I never call update recursively.</text>
  </message>
  <message conversation_id="1699">
    <ts>2019-05-26T16:01:50.185500</ts>
    <user>Dayle</user>
    <text>Is it possible to stack case branches somehow? i.e
```
case x of 
  Somthing -&amp;gt;
      // code for something
  AnotherThing -&amp;gt; 
  AThirdThing -&amp;gt; 
     // should run if x is AnotherThing or AThirdThing
```</text>
  </message>
  <message conversation_id="1699">
    <ts>2019-05-26T16:02:46.185800</ts>
    <user>Danika</user>
    <text>no</text>
  </message>
  <message conversation_id="1699">
    <ts>2019-05-26T16:05:54.186100</ts>
    <user>Dayle</user>
    <text>alright, thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1699">
    <ts>2019-05-26T16:17:55.187000</ts>
    <user>Maybelle</user>
    <text>Can always pull it out into a function though.</text>
  </message>
  <message conversation_id="1699">
    <ts>2019-05-26T16:18:18.187500</ts>
    <user>Maybelle</user>
    <text>Or if there aren't other possible cases ('cause you're working with custom types or whatever), could use a catch-all</text>
  </message>
  <message conversation_id="1699">
    <ts>2019-05-26T16:19:46.188600</ts>
    <user>Danika</user>
    <text>yeah, if those are the only 3 cases, you could technically do

```case x of
  Something -&amp;gt; ...
  _ -&amp;gt; ...
```

But you're sacrificing a lot of clarity there</text>
  </message>
  <message conversation_id="1699">
    <ts>2019-05-26T16:20:36.189200</ts>
    <user>Maybelle</user>
    <text>Agreed, which is why it's probably better to just put it into a function, since then you're explicit about it</text>
  </message>
  <message conversation_id="1700">
    <ts>2019-05-27T04:06:34.192300</ts>
    <user>Bethel</user>
    <text>How would you write a decoder that picks an one item from a list?
I have an array of `{ name: &amp;lt;string&amp;gt;, ... }` objects and I need to decode just this one with all it's properties.
The other objects in this array have also `name` property, but the rest might be different.</text>
  </message>
  <message conversation_id="1700">
    <ts>2019-05-27T04:09:46.193500</ts>
    <user>Earlean</user>
    <text>&lt;@Bethel&gt; you're decoding a list and then filtering it based on some criteria and then taking the first item from that list</text>
  </message>
  <message conversation_id="1700">
    <ts>2019-05-27T04:10:45.194200</ts>
    <user>Bethel</user>
    <text>if it would be a list of the same shapes, then I would know how to do it, but it has just a `name` in common and the rest of the properties might be different.</text>
  </message>
  <message conversation_id="1700">
    <ts>2019-05-27T04:11:28.195100</ts>
    <user>Bethel</user>
    <text>I would need something like try parse this shape and make sure that `name` is exactly XYZ.</text>
  </message>
  <message conversation_id="1700">
    <ts>2019-05-27T04:13:01.196500</ts>
    <user>Danika</user>
    <text>Could you decode the `name` field and then use `Decode.andThen` to case over the name and return the right deocder?</text>
  </message>
  <message conversation_id="1700">
    <ts>2019-05-27T04:20:48.197600</ts>
    <user>Bethel</user>
    <text>I don't know how to do that</text>
  </message>
  <message conversation_id="1701">
    <ts>2019-05-27T05:03:39.203200</ts>
    <user>Bert</user>
    <text>```
animalDecoder : Decoder Animal
animalDecoder =
  field "name" string |&amp;gt; andThen (\name -&amp;gt;
    case name of
      "fish" -&amp;gt; map Animal fishDecoder
      "dog" -&amp;gt; map Animal dogDecoder
      other -&amp;gt; fail ("Unknown animal: " ++ other)
)
```</text>
  </message>
  <message conversation_id="1700">
    <ts>2019-05-27T05:05:44.205500</ts>
    <user>Bert</user>
    <text>&lt;@Bethel&gt; Something like that. Note that all the cases need to decode to the same type (`Animal` in the example).</text>
  </message>
  <message conversation_id="1700">
    <ts>2019-05-27T05:34:53.206500</ts>
    <user>Danika</user>
    <text>You could probably skip decoding name and using andThen entirely with Decode.oneOf and a list of all your shape decoders </text>
  </message>
  <message conversation_id="1701">
    <ts>2019-05-27T05:52:57.207700</ts>
    <user>Maida</user>
    <text>if some of the tags have identical shapes that might not work, however, this can be mitigated by having a helper that does the checking of the name.</text>
  </message>
  <message conversation_id="1701">
    <ts>2019-05-27T05:52:59.207900</ts>
    <user>Maida</user>
    <text>&lt;https://ellie-app.com/5FgybZdwrzVa1&gt;</text>
  </message>
  <message conversation_id="1700">
    <ts>2019-05-27T05:59:33.208100</ts>
    <user>Danika</user>
    <text>slick, nice!</text>
  </message>
  <message conversation_id="1702">
    <ts>2019-05-27T07:42:42.211400</ts>
    <user>Saran</user>
    <text>in case you want to read more about what's needed to parse data deterministically, you need a grammar that is prefix-free &lt;https://cs.stackexchange.com/questions/84777/what-is-the-meaning-of-a-prefix-free-language&gt; :slightly_smiling_face: Basically, it just means that it's deterministic for all possible inputs, and adding a unique identifier for each case (like "fish" or "dog", traditionally as a prefix in byte/string formats) is enough as long as no identifiers are prefixes of another identifier.</text>
  </message>
  <message conversation_id="1703">
    <ts>2019-05-27T09:06:00.211800</ts>
    <user>Rico</user>
    <text>I wish.

If it helps, here's an example of using SSE through ports:
&lt;https://github.com/skyqrose/which-bus/blob/master/index.html&gt;
&lt;https://github.com/skyqrose/which-bus/blob/master/src/Api/Stream.elm&gt;</text>
  </message>
  <message conversation_id="1704">
    <ts>2019-05-27T11:16:22.215200</ts>
    <user>Donya</user>
    <text>Hi All! I'm wondering if anyone has experience integrating an Elm component into a VueCli3 project.  I'm particularly clueless about how to set up webpack for the production build.  Does the elm code form its separated .js bundle, or is it part of the vue .js bundle? This might be more of a webpack question, but an example combining elm within a vuecli3 config for production would be hugely helpful.</text>
  </message>
  <message conversation_id="1704">
    <ts>2019-05-27T11:25:47.215400</ts>
    <user>Nana</user>
    <text>not specifically, but I think it should be the same as any webpack project</text>
  </message>
  <message conversation_id="1704">
    <ts>2019-05-27T11:27:01.215600</ts>
    <user>Nana</user>
    <text>so you should be able to follow the example here &lt;https://github.com/elm-community/elm-webpack-loader&gt;</text>
  </message>
  <message conversation_id="1704">
    <ts>2019-05-27T11:28:28.215800</ts>
    <user>Nana</user>
    <text>and the elm code will probably be in the same bundle as everything else</text>
  </message>
  <message conversation_id="1704">
    <ts>2019-05-27T11:30:37.216100</ts>
    <user>Donya</user>
    <text>Okay, i think I need to take a dive into webpack</text>
  </message>
  <message conversation_id="1704">
    <ts>2019-05-27T11:34:59.216300</ts>
    <user>Donya</user>
    <text>Thanks for your help!</text>
  </message>
  <message conversation_id="1705">
    <ts>2019-05-27T11:51:47.216500</ts>
    <user>Janiece</user>
    <text>I believe it's:
- `elm/*` packages
- packages by people who have spoken at an Elm conference, sorted by number of talks given
- all other packages sorted alphabetically</text>
  </message>
  <message conversation_id="1705">
    <ts>2019-05-27T11:56:09.217000</ts>
    <user>Kris</user>
    <text>Thanks, that’s more or less what I pictured </text>
  </message>
  <message conversation_id="1706">
    <ts>2019-05-27T14:07:13.221500</ts>
    <user>Eveline</user>
    <text>Is there a reason why Elm does not have Type Holes?
For example:

```
test : List _
test = [1]
```

Should return and Error like:
```
test : List _
            ^
Your type hole is of type `Int`.
```

I feel like this should be easy to implement and type holes are not a revolutionary new concept.:thinking_face:</text>
  </message>
  <message conversation_id="1706">
    <ts>2019-05-27T14:09:44.222600</ts>
    <user>Loida</user>
    <text>You can achieve similar thing with `test : List ()`</text>
  </message>
  <message conversation_id="1706">
    <ts>2019-05-27T15:14:44.222900</ts>
    <user>Millie</user>
    <text>&lt;@Loida&gt; But that's a workaround ("type bombs"). I think the original question is a good one. There is not missing a lot, to implement this feature. There could be really nice error messages, to support the user filling type holes :)</text>
  </message>
  <message conversation_id="1706">
    <ts>2019-05-27T15:18:21.223200</ts>
    <user>Millie</user>
    <text>Here is an example where a function is necessary and the error message is not as helpful as it could be</text>
  </message>
  <message conversation_id="1707">
    <ts>2019-05-27T16:57:55.230200</ts>
    <user>Raylene</user>
    <text>elm-analyze can suggest types for functions with no declaration...</text>
  </message>
  <message conversation_id="1706">
    <ts>2019-05-27T19:26:14.230800</ts>
    <user>Augusta</user>
    <text>The interesting thing is being able to do it _within_ types. Holes are also handy at the expression level too, where you can get suggestions of functions that can be used, based on what type is expected.</text>
  </message>
  <message conversation_id="1707">
    <ts>2019-05-27T19:37:30.231100</ts>
    <user>Raylene</user>
    <text>Yeah, I've been spoiled by Idris wrt holes</text>
  </message>
  <message conversation_id="1707">
    <ts>2019-05-27T19:38:02.231300</ts>
    <user>Kris</user>
    <text>Yeah, Haskell calls the "holes in types" Partial Type Signatures</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T19:40:36.232300</ts>
    <user>Ester</user>
    <text>Hi, I went to use Basics.flip in my code and it just seems… gone. Has it been removed from the language? &lt;https://package.elm-lang.org/packages/elm-lang/core/latest/Basics#flip&gt; Doesn’t show up here &lt;https://github.com/elm/core/blob/master/src/Basics.elm&gt;</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T19:40:57.232600</ts>
    <user>Kris</user>
    <text>&lt;@Ester&gt; Yes</text>
  </message>
  <message conversation_id="1707">
    <ts>2019-05-27T19:41:59.233500</ts>
    <user>Kris</user>
    <text>You can define your own very easily `flip f a b = f b a`</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T19:42:22.233800</ts>
    <user>Kris</user>
    <text>Same for `curry, uncurry`</text>
  </message>
  <message conversation_id="1707">
    <ts>2019-05-27T19:43:11.235000</ts>
    <user>Earlean</user>
    <text>&lt;@Ester&gt; you're looking at docs for Elm 0.18. `flip` was removed in the 0.19 release.</text>
  </message>
  <message conversation_id="1707">
    <ts>2019-05-27T19:44:42.235900</ts>
    <user>Ester</user>
    <text>Thanks, the “latest” in the URL threw me off. I will just use my own. Thanks</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T20:00:21.237100</ts>
    <user>Earlean</user>
    <text>It's the 'latest' version of a package for Elm 0.18. Elm 0.19 core is elm/core</text>
  </message>
  <message conversation_id="1709">
    <ts>2019-05-27T20:46:21.237400</ts>
    <user>Augusta</user>
    <text>Agda’s holes are fun too :heart_eyes: - and case splits and such</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:06:15.238700</ts>
    <user>Rico</user>
    <text>I think the official recommendation is that you use either a named flipped version of the function, or use a lambda (e.g. (`\value key -&amp;gt; Dict.insert key value` instead of `flip Dict.insert`)</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:19:15.239600</ts>
    <user>Rico</user>
    <text>I'm writing a package. Is there a way to expose a function from a module so it's visible to other modules in the same package, but not visible to consumers of the package?</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:20:08.239700</ts>
    <user>Rico</user>
    <text>Or I guess more directly: Is there a way to make a data type opaque to consumers of the package but transparent to other modules in the package?</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:21:43.240100</ts>
    <user>Earlean</user>
    <text>you can define it in a module that you don't expose from your package</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:22:46.240300</ts>
    <user>Earlean</user>
    <text>elm.json for a package has a "exposed-modules" field that list modules exposed by the package. But your package can contain other unexposed modules</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:23:21.240500</ts>
    <user>Rico</user>
    <text>Okay that might work.</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:26:05.240700</ts>
    <user>Rico</user>
    <text>But also it might not.
Here's my situation:
```
module A exposing (..)
import B
f : B.B -&amp;gt; whatever
f b =
  -- want to operate on the inside of b

module B exposing (B)  -- opaque
type B = B internals
```

I want the type `B.B` to be visible, but not the internal data. But I need to use that internal data in `A`</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:27:41.240900</ts>
    <user>Earlean</user>
    <text>yep, that won't work</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:28:34.241100</ts>
    <user>Earlean</user>
    <text>perhaps the functions in `A` should be defined in `B`</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:29:39.241300</ts>
    <user>Earlean</user>
    <text>or you need a module `C` that exposes an opaque type for package consumers</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:30:29.241500</ts>
    <user>Rico</user>
    <text>What about having an undocumented unwrapper function exposed from `B`?</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:32:04.241700</ts>
    <user>Earlean</user>
    <text>That's not a good workaround as publishing a package requires you to document it's exposed functions</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:34:41.242000</ts>
    <user>Rico</user>
    <text>Idk if having it defined in a separate module will work. My plan is for consumers to get a value of type `B` out of module `B`, and pass it in to a function in module `A`. So I don't see room for a third unexposed package to slip in there.</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:35:51.242200</ts>
    <user>Earlean</user>
    <text>It sounds like these modules should be a single module</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:36:23.242400</ts>
    <user>Earlean</user>
    <text>or the `B` type parts of `A` need to call in to `B`</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:42:07.242600</ts>
    <user>Rico</user>
    <text>I'd like to keep them separate because
• They're pretty big, and it'd be nice to be able to read + understand the docs of `A` without tripping over all the functions in `B`
• There's really a separate `A1` and `A2` module that both need access to the internals of `B`</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:45:18.242800</ts>
    <user>Earlean</user>
    <text>not exposing from a module and not exposing a module from the package are the only two hiding mechanisms</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T21:46:09.243000</ts>
    <user>Rico</user>
    <text>Based on this discussion, I think I'm leaning towards exposing an `unwrap+process` function of `B` which
• Is an even better abstraction layer than getting `A` to see the constructor of `B`.
• still hides the important details of `B` from the consumer.
and I'll just add a note "you probably won't need this"</text>
  </message>
  <message conversation_id="1710">
    <ts>2019-05-27T23:43:06.244800</ts>
    <user>Jacquelyn</user>
    <text>What is the best practice string I should be passing into an `a`’s `href` attribute that doesn’t link to another page? Clicking that link triggers a `Msg`. In JavaScript, I use `javascript:void(0)`. What do I use for Elm?</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T23:45:36.245000</ts>
    <user>Iona</user>
    <text>We had some issues with the browser history being changed using that scheme. We decided to use buttons instead to prevent that. &lt;https://css-tricks.com/use-button-element/&gt;</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T23:47:11.245300</ts>
    <user>Iona</user>
    <text>Some CSS to make it look like a link (eg. the `btn-link` class in bootstrap)</text>
  </message>
  <message conversation_id="1710">
    <ts>2019-05-27T23:48:29.245600</ts>
    <user>Jacquelyn</user>
    <text>Makes sense, thank you &lt;@Iona&gt;</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-27T23:54:40.245800</ts>
    <user>Charity</user>
    <text>If you absolutely must, use `#`. For this to work, you must intercept UrlRequested and handle the # case by not allowing navigation. 

If you are able to use button, go with that</text>
  </message>
  <message conversation_id="1710">
    <ts>2019-05-27T23:59:07.246000</ts>
    <user>Jacquelyn</user>
    <text>&lt;@Charity&gt; I intercept `UrlRequested` in Elm? How would I do that?</text>
  </message>
  <message conversation_id="1710">
    <ts>2019-05-28T00:09:03.247600</ts>
    <user>Jacquelyn</user>
    <text>I want to use browsers’ email input fields and validation. Can I check the validity of an email field in Elm? In JavaScript I’d use the `ValidityState` object (&lt;https://developer.mozilla.org/en-US/docs/Web/API/ValidityState&gt;). Do I have to use ports for this? Or is there a mechanism in Elm I can use?</text>
  </message>
  <message conversation_id="1708">
    <ts>2019-05-28T00:19:10.247800</ts>
    <user>Charity</user>
    <text>Assuming you're building a SPA, you'd do it in Main.elm</text>
  </message>
  <message conversation_id="1710">
    <ts>2019-05-28T00:20:42.248000</ts>
    <user>Jacquelyn</user>
    <text>How do I intercept `UrlRequested` in Elm?</text>
  </message>
  <message conversation_id="1710">
    <ts>2019-05-28T00:22:31.248800</ts>
    <user>Charity</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/browser/latest/Browser#UrlRequest&gt;

Here are the docs.

 If requested url is same as current and hash is `#`, return `(model, Cmd.none)` (i.e. do nothing)</text>
  </message>
  <message conversation_id="1710">
    <ts>2019-05-28T00:23:04.249700</ts>
    <user>Earlean</user>
    <text>&lt;@Jacquelyn&gt; not in Elm, you'll need to call it from a port</text>
  </message>
  <message conversation_id="1711">
    <ts>2019-05-28T02:31:32.251300</ts>
    <user>Eveline</user>
    <text>I found a PR from 2016:
&lt;https://github.com/elm/compiler/issues/1306&gt;

Evan:
"This is a feature I consider from time to time. Not sure if or when it'd be added though.

Issues here are more about tracking bugs in the language as is, so discussions like this should happen in the places listed here &lt;http://elm-lang.org/community&gt;

If you have a real-world usage scenario, it'd be great to get it documented and shared with the community so folks can think about this potential workflow."</text>
  </message>
  <message conversation_id="1711">
    <ts>2019-05-28T03:56:56.251500</ts>
    <user>Eveline</user>
    <text>I started a thread on discourse:
&lt;https://discourse.elm-lang.org/t/proposal-type-holes-why-are-they-not-a-thing/3704&gt;</text>
  </message>
  <message conversation_id="1710">
    <ts>2019-05-28T04:16:10.252300</ts>
    <user>Nana</user>
    <text>&lt;@Jacquelyn&gt; &lt;@Earlean&gt; though maybe you could use a custom event decoder instead?</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T05:58:15.253100</ts>
    <user>Floy</user>
    <text>hey everyone, do you have any idea how one can "follow HTTP redirect" ?</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T05:59:04.253400</ts>
    <user>Floy</user>
    <text>basically I have `/login` endpoint
that returns 302 for successful auth, allowing the request to be rerouted to the endpoint that returns authenticated user</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T06:03:13.253600</ts>
    <user>Dorotha</user>
    <text>ajax requests follow redirects by default, and you cannot turn it off</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T06:14:02.253900</ts>
    <user>Floy</user>
    <text>so I assume, Elm should do that as well since it uses normal `XMLHttpRequest`</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T06:14:16.254100</ts>
    <user>Floy</user>
    <text>ok, so perhaps I need sth stronger than `302`</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T06:16:58.254300</ts>
    <user>Floy</user>
    <text>for crying out loud...using 308 does the automatic redirect, but next request is sent using the same method as the one that caused redirect</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T06:17:03.254500</ts>
    <user>Floy</user>
    <text>which is not cool in terms of an endpoint I am redirecting to</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T06:25:55.254800</ts>
    <user>Lewis</user>
    <text>do you want to do a `GET` on the new `Location`? if so you should use a 303, I believe.</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T06:37:41.255000</ts>
    <user>Floy</user>
    <text>need more expertise on these...I was completely unaware that it matters</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T06:42:16.255800</ts>
    <user>Lewis</user>
    <text>HTTP has its flaws, but it's for the most part well thought out, and the semantics of status codes and headers matter. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:08:24.256000</ts>
    <user>Floy</user>
    <text>yeah, problem is that I do not know those and can't seem to figure proper configuration for both server and client</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:08:39.256200</ts>
    <user>Floy</user>
    <text>if I do the request via `httpie` (terminal) cookie is visible, I can create the session with it</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:08:42.256400</ts>
    <user>Floy</user>
    <text>and send authorized requests</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:08:54.256600</ts>
    <user>Floy</user>
    <text>but when trying to do that with `Elm`, everything seems a bit impossible :confused:</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:11:27.256900</ts>
    <user>Lewis</user>
    <text>so you get a cookie returned with the original request, but it's not sent with the new, redirected request?</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:11:51.257100</ts>
    <user>Lewis</user>
    <text>you should be able to use the developer tools in Firefox/Chrome/etc. to see the headers you get/send with each request.</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:12:00.257300</ts>
    <user>Floy</user>
    <text>that's how it looks in browser</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:19:26.257500</ts>
    <user>Floy</user>
    <text>it can be either a problem in server configuration or in elm code...I lack a bit of expertise to be sure as to where the problem is located</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:19:41.257700</ts>
    <user>Floy</user>
    <text>I know I had to add `cors` to my `aiohttp` server to just make client pass the first request it sent</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:19:49.257900</ts>
    <user>Floy</user>
    <text>which for some reason was `OPTIONS`</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:23:09.258100</ts>
    <user>Floy</user>
    <text>yeah...I had to use `riskyRequest` and send `login` under `POST` to see `set-cookie` visible in the browser tab</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:45:39.258500</ts>
    <user>Floy</user>
    <text>ok, got to manage work somehow by combination of sending cookie that's `secure:false` and using `riskyRequest`</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:45:57.258700</ts>
    <user>Floy</user>
    <text>the problem is that even if cookie is set in the browser, it is not picked up without `riskyRequest`</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:46:04.258900</ts>
    <user>Floy</user>
    <text>which seems quite inconvenient</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:46:05.259100</ts>
    <user>Floy</user>
    <text>:confused:</text>
  </message>
  <message conversation_id="1712">
    <ts>2019-05-28T07:46:21.259300</ts>
    <user>Floy</user>
    <text>&lt;@Lewis&gt; do you have any suggestions ?</text>
  </message>
  <message conversation_id="1713">
    <ts>2019-05-28T09:22:15.259500</ts>
    <user>Carman</user>
    <text>Is your backend on a different domain than your frontend? Are you using HTTP rather than HTTPS?</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:05:27.263100</ts>
    <user>Julie</user>
    <text>Hi, I'm still new to elm programming and I was looking at the elm/browser repository. In fact, I was wonder how to enable the Debug session with awesome Time Travelling. But I realised that it's a bit buggy.
And actually, there is a Pull Request to fix that in the elm/browser repo:
&lt;https://github.com/elm/browser/pull/40&gt;

My question is, who is suppose to accept PR on this repository? And why does it take so long? It's like, debbuging tool is important, isn't it?</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:14:24.267400</ts>
    <user>Raylene</user>
    <text>Hello &lt;@Julie&gt;, and welcome! Elm it's still at version 0.19 (notice the leading 0), and Evan strongly believes in doing things Right rather than Right Now. Pull requests are, for good or bad, usually ignored, as Evan focuses on building what he feels to be important.
You enable debugging with the `--debug` flag. Did you come across the bug referenced in the PR?</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:26:04.270100</ts>
    <user>Julie</user>
    <text>I understand the way Evan makes Elm evolves and it's at some point brillant, but in some case, there are some tiny fix that could be done by Mister Nobody :slightly_smiling_face:
Yes I compiled with the option `--debug` and I am exactly the situation described by this PR.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:26:58.270900</ts>
    <user>Julie</user>
    <text>I didn't try to use the fix proposed by this PR, but it seems raisonnable to fix this situation.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:28:37.272000</ts>
    <user>Nana</user>
    <text>I heard it takes a fair amount of work to release a new version, the pipeline isn't super streamlined I guess, so it's not just a matter of merging and clicking "deploy"</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:30:42.273600</ts>
    <user>Julie</user>
    <text>In fact, the description is done in this Issue: &lt;https://github.com/elm/browser/issues/16&gt;
&lt;@Nana&gt; oh, OK I see. Maybe some invest should be done in this direction, to have a reliable deployement</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:35:33.275500</ts>
    <user>Nana</user>
    <text>although they did just release the "no dependencies" patch, so I don't know :man-shrugging: maybe that was higher priority, since npm audit was saying Elm contained dangerous code</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:37:00.278300</ts>
    <user>Julie</user>
    <text>Elm doesn't have a way to post harmless tin fixes?
&lt;@Nana&gt; No way! Do you a link to this npm audit? Seems funny and I'm curious.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:37:08.278700</ts>
    <user>Emilee</user>
    <text>There is also a different issue: the fix might be easy, but that doesn’t mean that it’s the best fix in the long term. Evan has stated on multiple occasions that he prefers collecting issues and analyzing how best to solve them overall over pushing quick fixes </text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:41:48.278800</ts>
    <user>Nana</user>
    <text>also I guess that was probably less work since it wasn't a new compiler, just an update to the npm installer</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:42:45.279000</ts>
    <user>Nana</user>
    <text>I think npm audit complained that the tar package which the installer used was a potential attack vector</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:44:12.279300</ts>
    <user>Nana</user>
    <text>&lt;https://elmlang.slack.com/archives/C13L7S5GR/p1557515081019400&gt;</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:44:57.279600</ts>
    <user>Julie</user>
    <text>Whaou, I was not aware of this issue ^^'</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T10:47:01.281800</ts>
    <user>Julie</user>
    <text>Yes, I know the vision of Evan, but when you do some typo, it's really helpful to be able to correct it. By the way, if someone knows how to integrate the fix of this typo in a support release, it would be a great move :wink:</text>
  </message>
  <message conversation_id="1715">
    <ts>2019-05-28T11:04:33.282000</ts>
    <user>Raylene</user>
    <text>It was a false positive for us, but nonetheless got fixed</text>
  </message>
  <message conversation_id="1716">
    <ts>2019-05-28T12:17:18.282800</ts>
    <user>Bret</user>
    <text>Hi folks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T12:49:38.290600</ts>
    <user>Alicia</user>
    <text>&lt;@Julie&gt; for 0.19 there is no easy way to fix it in a fork or something like that, you would need to fork the compiler because the package includes native code</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T12:50:50.291700</ts>
    <user>Alicia</user>
    <text>whether something is the best fix in the long term doesn’t mean that short term fixes can’t be applied, it seems like it is a matter of resources and time more than anything</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T12:53:00.293800</ts>
    <user>Alicia</user>
    <text>linux kernel development has their subsystem maintainers that would handle this sort of scenario for bugfixes in a package, but I don’t think there are enough people in the Elm community to work in that fashion</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T13:12:51.298000</ts>
    <user>Julie</user>
    <text>&lt;@Alicia&gt; yeah, I see what you mean. It's a bit shame because, as Elm is an open source project, it's a perfect condition to help from the community for the best of the project. Some developpement/maintaining effort should be delegated to the community I think, because it's not a difficult task, many people out there can achieve it, and will be happy to do it and it's important task in a long run to ensure the qualtily of the project. Of course, it's only my 2 cents.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T13:14:22.298600</ts>
    <user>Danika</user>
    <text>If you're aware of evans goals and process, then you know that he doesn't disagree that this should happen. It's a matter of _when_.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T13:17:02.299800</ts>
    <user>Julie</user>
    <text>I watch many of his really good presentation, really good, but I'm not actually aware of a kind of roadmap, or things like that.</text>
  </message>
  <message conversation_id="1717">
    <ts>2019-05-28T13:18:56.299900</ts>
    <user>Jacquelyn</user>
    <text>How would that work &lt;@Nana&gt;? Can I get access to the `ValidityState` object from Elm? Maybe register to listen to it in the textfield?</text>
  </message>
  <message conversation_id="1718">
    <ts>2019-05-28T14:32:08.302300</ts>
    <user>Eveline</user>
    <text>An outdated Roadmap can be found at &lt;https://github.com/elm/projects/blob/master/roadmap.md&gt;

I believe that &lt;https://github.com/elm/projects&gt; actually gives a good insight into what is yet to come.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T16:03:17.306500</ts>
    <user>Casey</user>
    <text>I wonder if we’ll ever see an elm fork. Elm does seem far more closed than most open source projects, but compiler toolchains usually don’t have too many contributors in the first place</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T16:08:02.309000</ts>
    <user>Danika</user>
    <text>The idea has floated around in my head a few times. But not to usurp Elm or Evan, I'd like to add first-class Web Audio support but to say I'm not the right person for the job would be a big understatement ^^</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T16:09:43.309900</ts>
    <user>Alicia</user>
    <text>there’s one fork for the `Map.!` bug and some other stuff</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T16:10:26.310200</ts>
    <user>Raylene</user>
    <text>&lt;@Marc&gt; there already is a minor [as in, only patches applied] fork of the compiler. I think that *the community* will not fork because there is a lot of faith in the work of Evan and most believe that while yes, it would be nice to have the bugfixes and move faster, but we trust that in the long run the outcome will be better</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T16:15:37.311300</ts>
    <user>Raylene</user>
    <text>Also, as you said compiler toolchains tend to be gnarly</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T16:45:56.314800</ts>
    <user>Alicia</user>
    <text>yeah, I think forking is a bad way to go and realistically nobody is going to be able to match Evan, I do wish there was a way to get more community involvement in working on the small things so that Evan can stay focused on what he wants to work on, there’s a lot of busy work in responding to issues, PRs, questions, maintaining the package site, the guide, etc, etc.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T17:44:32.316000</ts>
    <user>Casey</user>
    <text>If I were in Evans shoes I’d accept PRs that don’t change the language itself</text>
  </message>
  <message conversation_id="1719">
    <ts>2019-05-28T17:44:52.316700</ts>
    <user>Casey</user>
    <text>But I’m not and I’d rather benefit from his work than complain about how he does it </text>
  </message>
  <message conversation_id="1720">
    <ts>2019-05-28T17:49:48.318900</ts>
    <user>Cammy</user>
    <text>There was an experiment last year in which the core team tried to clone Evan using state of the art technology, and at first it worked well, the clones had slight differences, but they were close enough to do excellent API design, but soon the clones wanted their own clones to help with trivial tasks like going to the DMV or testing on BSD running on Raspberry Pi, so the clones started making copies of the copies, and soon it was just mayhem.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T18:33:27.319200</ts>
    <user>Julie</user>
    <text>I completely agree with the idea to avoid useless development effort, to avoid to seed fork of fork and so on, but maybe there is a way in between.

In the Elm organisation, you have 5 main people listed: &lt;https://github.com/orgs/elm/people&gt;
Maybe one of them can dedicate a decent among of its time just to handle tiny bug fixes supplied by Pull Request form the Community, or the documentation fix, or the continous integration process improvement, or the deployement process improvement, or any improvement that costs time but not deep understanding.

Actually, at a glance you can qualify roughly a Pull Request: regression fix, documentation fix, new feature, breaking API, bull shit (I said roughly), and so on.
As rebecca.skinner said, if a Pull Request doesn't change the language itself, just preserve it or fix it to maintain the quality of Elm, it worth time investment IMHO.

I know Evan may think in another way, but raesonabily it's possible there is somebody in the Elm organisation of confidence which can handle this kind of tasks and would be happy to do it.
There is no doubt that everybody here on Slack like very much (or love) the work of Evan done around this great language, ecosystem, way of thinking that Elm represent, but just ignoring Pull Request from well intentioned people is a bit rough (especially for an open source project) and does not serve the willing of spreading Elm all around the world.

(I know, this topic has been discussed many times before, maybe if every planets are aligned, things can change for the best.)</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T18:35:48.321500</ts>
    <user>Dede</user>
    <text>I suspect the issue is that many PRs require a great deal of mental energy to assess for quality, for impact on language semantics, for impact on future development plans, etc.  and even the work of identifying “simple” ones interrupts flow on larger tasks.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T18:38:14.322900</ts>
    <user>Danika</user>
    <text>Really anything other than the simplest of bugfixes can have a knock-on effect on the development of the rest of the language. If you covered a tshirt with a 100 different patches of fabric it probably wouldn't look like the same tshirt no matter how small those patches were :innocent: Elm is _very_ young, in the grand scheme of things.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T18:39:56.323900</ts>
    <user>Laurena</user>
    <text>None</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T18:50:05.327200</ts>
    <user>Dede</user>
    <text>For a very different approach, one can look at how Rust is attacking this.  &lt;https://www.rust-lang.org/governance&gt;   ( But Rust has a much broader focus — competing with C/C++ —  and a much larger corporate backer, than Elm.)</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T18:50:51.328200</ts>
    <user>Julie</user>
    <text>I like tshirt without hole  (or at least with the fewest hole as possible). Patches should be of the same color of the original tshirt, and in a way you could not notice the patch because the stiching is so thin.</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T18:51:32.328700</ts>
    <user>Danika</user>
    <text>At the risk of stretching this analogy way too far...

&amp;gt; Patches should be of the same color of the original tshirt

Sounds like whoever made the tshirt should be doing the patching then ^^</text>
  </message>
  <message conversation_id="1714">
    <ts>2019-05-28T18:52:55.329300</ts>
    <user>Julie</user>
    <text>Possible, or at least validate it if he cannot do any better.</text>
  </message>
  <message conversation_id="1721">
    <ts>2019-05-28T20:28:09.331200</ts>
    <user>Myron</user>
    <text>is it by design that a generic function can't recursively call itself with new type arguments? it feels like a bug that this gives a compile error
```
test : a -&amp;gt; b -&amp;gt; ()
test x y = test y x
```
but this compiles:
```
test : a -&amp;gt; b -&amp;gt; ()
test x y = test2 y x

test2 = test
```</text>
  </message>
  <message conversation_id="1721">
    <ts>2019-05-28T20:28:58.331300</ts>
    <user>Myron</user>
    <text>```
The 1st argument to `test` is not what I expect:

106| test x y = test y x
                     ^
This `y` value is a:

    b

But `test` needs the 1st argument to be:

    a

Hint: Your type annotation uses `b` and `a` as separate type variables. Your
code seems to be saying they are the same though. Maybe they should be the same
in your type annotation? Maybe your code uses them in a weird way?
```</text>
  </message>
  <message conversation_id="1721">
    <ts>2019-05-28T20:30:57.331500</ts>
    <user>Myron</user>
    <text>an even simpler repro is ```test : a -&amp;gt; ()
test x = test 0```</text>
  </message>
  <message conversation_id="1722">
    <ts>2019-05-28T20:48:03.332100</ts>
    <user>Kris</user>
    <text>Yes</text>
  </message>
  <message conversation_id="1722">
    <ts>2019-05-28T20:48:58.332600</ts>
    <user>Kris</user>
    <text>Those are examples of polymorphic recursion, which elm doesn't allow</text>
  </message>
  <message conversation_id="1722">
    <ts>2019-05-28T20:51:30.333100</ts>
    <user>Kris</user>
    <text>Stuff like complete inference becomes _impossible_ with it</text>
  </message>
  <message conversation_id="1721">
    <ts>2019-05-28T21:24:07.334400</ts>
    <user>Myron</user>
    <text>interesting, thanks. does that mean there's something undesirable about the `test2` workaround? does it just make inference worse?</text>
  </message>
  <message conversation_id="1722">
    <ts>2019-05-28T21:44:32.336100</ts>
    <user>Kris</user>
    <text>That's not really a workaround for it, because you're not calling the function recursively anymore</text>
  </message>
  <message conversation_id="1722">
    <ts>2019-05-28T21:45:13.336700</ts>
    <user>Kris</user>
    <text>I'm not sure of other problems with it</text>
  </message>
  <message conversation_id="1722">
    <ts>2019-05-28T21:46:23.337800</ts>
    <user>Kris</user>
    <text>Haskell, for example, rejects some poly rec functions, like `f (x:xs) = 1 + f [xs]` without a type annotation (because it can't infer it correctly), but it accepts it with `f :: [a] -&amp;gt; Int`</text>
  </message>
  <message conversation_id="1721">
    <ts>2019-05-29T00:40:10.338100</ts>
    <user>Raylene</user>
    <text>This is an interesting question!</text>
  </message>
  <message conversation_id="1721">
    <ts>2019-05-29T00:40:31.338300</ts>
    <user>Raylene</user>
    <text>I think bydesign, but am curious</text>
  </message>
  <message conversation_id="1722">
    <ts>2019-05-29T01:40:31.338500</ts>
    <user>Myron</user>
    <text>hmm i'm seeing it as a workaround because i'm just giving another name to the same function in order to circumvent the type system limitation</text>
  </message>
  <message conversation_id="1723">
    <ts>2019-05-29T01:46:38.338800</ts>
    <user>Myron</user>
    <text>apparently &lt;https://en.wikipedia.org/wiki/Polymorphic_recursion&gt; makes inference undecidable</text>
  </message>
  <message conversation_id="1723">
    <ts>2019-05-29T01:47:27.339100</ts>
    <user>Myron</user>
    <text>so it's kinda interesting that my workaround works</text>
  </message>
  <message conversation_id="1724">
    <ts>2019-05-29T02:28:03.340500</ts>
    <user>Kimbery</user>
    <text>I'm doing a file upload using a task. When uploading a file using a cmd request I've been using &lt;https://package.elm-lang.org/packages/elm/http/latest/Http#expectWhatever&gt;
&amp;gt; Expect the response body to be whatever. It does not matter. Ignore it! For example, you might want this when uploading files:</text>
  </message>
  <message conversation_id="1724">
    <ts>2019-05-29T02:29:02.341700</ts>
    <user>Kimbery</user>
    <text>For tasks you need to use a resolver, but there's only `stringResolver` and `bytesResolver` available. Looks like it's impossible to create a custom resolver so is there any way to upload a file using tasks?</text>
  </message>
  <message conversation_id="1724">
    <ts>2019-05-29T02:34:02.342300</ts>
    <user>Kimbery</user>
    <text>nvm, seems like it's safe to just use `stringResolver` and ignore the body in the result</text>
  </message>
  <message conversation_id="1724">
    <ts>2019-05-29T02:56:34.342400</ts>
    <user>Nana</user>
    <text>it looks like you should be able to do something like this:
```
type alias ValidityState =
    { valid : Bool
    , valueMissing : Bool
    , typeMismatch : Bool
    }


validityStateDecoder : Decoder ValidityState
validityStateDecoder =
    &lt;http://Decode.at|Decode.at&gt; [ "target", "validity" ] &amp;lt;|
        Decode.map3 ValidityState
            (Decode.field "valid" Decode.bool)
            (Decode.field "valueMissing" Decode.bool)
            (Decode.field "typeMismatch" Decode.bool)
```</text>
  </message>
  <message conversation_id="1725">
    <ts>2019-05-29T03:22:03.342600</ts>
    <user>Jacquelyn</user>
    <text>That sounds perfect, how do I retrieve that value though? Is it a parameter I provide to the `input` function in Elm?</text>
  </message>
  <message conversation_id="1726">
    <ts>2019-05-29T03:43:15.342800</ts>
    <user>Nana</user>
    <text>you would use `Html.events.on "input"`</text>
  </message>
  <message conversation_id="1726">
    <ts>2019-05-29T03:43:49.343000</ts>
    <user>Nana</user>
    <text>that's the more low level interface that `onInput` is based on</text>
  </message>
  <message conversation_id="1726">
    <ts>2019-05-29T03:46:14.343200</ts>
    <user>Nana</user>
    <text>you would also need to get the value of the field like `onInput` does
so you would return something like `{value:String, validityState:ValidityState}`</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T05:58:18.345200</ts>
    <user>Laree</user>
    <text>Sorry if this seem like a newbish question, but I'm having a really hard time reading this line `type Msg = GotText (Result Http.Error String)`. And especially why after that we use something like `GotText (Ok bookContent)` for instance? Where has `Http.Error` gone? (sorry for my bad english, still learning)</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T06:11:16.345900</ts>
    <user>Danika</user>
    <text>Have you come across the `Maybe` type yet? </text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T06:17:12.346500</ts>
    <user>Laree</user>
    <text>Yes I did, But I don't see the link between `Maybe` &amp;amp; `Result Http.Error`</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T06:19:41.346800</ts>
    <user>Laree</user>
    <text>Ooooh right okay I was looking at the wrong thing haha silly me</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T06:20:00.347500</ts>
    <user>Laree</user>
    <text>I see now why I was looking at `Maybe` the whole time when it was `Result`</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T06:20:10.348000</ts>
    <user>Laree</user>
    <text>Long night...</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T06:21:38.350200</ts>
    <user>Danika</user>
    <text>So a `Maybe Int` can either be `Just n` or `Nothing`. The type has to variants. Likewise a `Result Http.Error String` has two variants:

`Err Http.Error` or `Ok String`. </text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T06:22:36.351300</ts>
    <user>Danika</user>
    <text>If you want to create a result that “succeeds” then you use the `Ok` type constructor, just like you would use the `Just` constructor to make a maybe </text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T06:23:10.351600</ts>
    <user>Laree</user>
    <text>Yes I kinda see the association between those two things</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T06:23:18.351900</ts>
    <user>Laree</user>
    <text>Thanks &lt;@Danika&gt;</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T07:09:36.352700</ts>
    <user>Laree</user>
    <text>Okay so I'm trying to do a little test for the Http as a training, I'm almost there but I wanted to add a functionality like a retry button in case of loading errors</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T07:09:52.353100</ts>
    <user>Laree</user>
    <text>But I can't seem to find a solution here is the code in case someone has the heart to help me &lt;https://ellie-app.com/5Gbk7pfxRYta1&gt;</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T07:12:54.353500</ts>
    <user>Laree</user>
    <text>(Yes i called it `HandleJson` but baby steps :smile: )</text>
  </message>
  <message conversation_id="1727">
    <ts>2019-05-29T07:16:54.353800</ts>
    <user>Laree</user>
    <text>Oh nvm okay I got it working hooray \o/</text>
  </message>
  <message conversation_id="1728">
    <ts>2019-05-29T07:33:57.354500</ts>
    <user>Erasmo</user>
    <text>Hi Folks - been a while :slightly_smiling_face:  but...

Does anyone have any experience using Elm with an Apigility back-end api, specifically using OAuth2?
I can ask for and receive an access token, but sticking it in an Authorization: Bearer ...  header to make protected requests just results in 'Forbidden' responses!
[If only we'd decided to use GraphQElm again - the Onyx GraphQL server supported OAuth2 like a dream]</text>
  </message>
  <message conversation_id="1729">
    <ts>2019-05-29T07:46:19.354800</ts>
    <user>Agustin</user>
    <text>Are you sure you need the `Bearer` part of the token</text>
  </message>
  <message conversation_id="1729">
    <ts>2019-05-29T07:47:11.355700</ts>
    <user>Agustin</user>
    <text>Hm, the docs say you do, so yes I’d guess :joy:</text>
  </message>
  <message conversation_id="1729">
    <ts>2019-05-29T07:47:51.356300</ts>
    <user>Exie</user>
    <text>Does anyone here use elm-verify-examples in travis? I'd be grateful for an example travis.yml config :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1729">
    <ts>2019-05-29T07:49:55.356800</ts>
    <user>Erasmo</user>
    <text>&lt;@Agustin&gt; yeah i think so too, I'm trying to do pretty much what I duid when interfacing with GraphQL using JWT tokens... Apigility docs pretty scant! where are their user-forums buried?</text>
  </message>
  <message conversation_id="1729">
    <ts>2019-05-29T07:51:39.357400</ts>
    <user>Agustin</user>
    <text>I’d check your sending the token correctly using the dev tools if I were you!</text>
  </message>
  <message conversation_id="1729">
    <ts>2019-05-29T07:53:18.358600</ts>
    <user>Erasmo</user>
    <text>Chrome inspect shows me tidy looking outgoing headers... :disappointed: I'm off to search some Apigility forums - thanks for chipping in :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1730">
    <ts>2019-05-29T08:27:59.359900</ts>
    <user>Antonietta</user>
    <text>Question folks: Does Elm support custom elements that extend built-in elements? Ex: &amp;lt;img is="custom-img"&amp;gt;</text>
  </message>
  <message conversation_id="1730">
    <ts>2019-05-29T08:32:02.360200</ts>
    <user>Huong</user>
    <text>No. There’s an open bug report for it. (The dom-node needs to be constructed differently, so this requires specific support in virtual-dom and some thinking on how the api should work - I think the `is` attribute approach would be rather weird, since you need a fresh dom-node when the attribute is added/removed/changed)</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:45:34.367800</ts>
    <user>Eveline</user>
    <text>I'm currently writing my proposal for my master thesis: a special type checker for Elm. But right now I'm betting on two things: first I hope I can access the elm compiler, such that I don't need to write my own parser and interpreter, second I hope the Elm compiler has a nice tool exposed to writing my own error messages.
Do you know if these things are possible?

Also,
how are elm-analyse and elm-format doing it?
From what I heard elm-analyse uses an interpreter written in elm and elm-format uses haskell?</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:50:35.368600</ts>
    <user>Alicia</user>
    <text>&lt;@Eveline&gt; elm-analyse uses elm-syntax (&lt;https://github.com/stil4m/elm-syntax&gt;) to parse elm code into an AST</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:51:04.369100</ts>
    <user>Alicia</user>
    <text>depending on what you need to do, it might be straightforward to add it as a new elm-analyse check</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:51:21.369400</ts>
    <user>Millie</user>
    <text>There's also &lt;https://github.com/Bogdanp/elm-ast&gt;</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:51:38.369800</ts>
    <user>Alicia</user>
    <text>you can see an example of one of the checks here &lt;https://github.com/stil4m/elm-analyse/blob/master/src/Analyser/Checks/UseConsOverConcat.elm&gt;</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:52:23.370400</ts>
    <user>Eveline</user>
    <text>what does AST stand for?</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:53:22.370900</ts>
    <user>Millie</user>
    <text>&lt;https://en.m.wikipedia.org/wiki/Abstract_syntax_tree&gt;</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:53:31.371200</ts>
    <user>Eveline</user>
    <text>Ah! thx</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:55:21.371500</ts>
    <user>Virgie</user>
    <text>the error messages are very hardcoded. This is its great strength, because this means the errors can be very specific. I think a project like this just has to mean forking the compiler and seeing where you get.

Even though there are not a lot of comments, it is some of the nicest haskell code I've seen</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:57:24.373100</ts>
    <user>Virgie</user>
    <text>also when you do this, be sure to fork at a particular version (0.19 right now) because master often does not compile</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T12:57:54.373500</ts>
    <user>Eveline</user>
    <text>So if i understand it correctly, i can actually just us elm-syntax to get the AST and from there i know what to do.</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:02:08.374900</ts>
    <user>Virgie</user>
    <text>I'd really recommend you work with the compiler source if you are writing a compiler</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:02:27.375000</ts>
    <user>Eveline</user>
    <text>The thing is: I would need to learn haskell (im a mathematics student and had a course on type theory, but still)</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:03:39.376100</ts>
    <user>Eveline</user>
    <text>just a type checker. I want to add refinement types like Liquid Haskell does it. So the code will still be valid Elm code.</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:04:37.376600</ts>
    <user>Virgie</user>
    <text>I see, so the focus would mainly be on implementing the system correctly, not so much speed/convenience?</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:05:09.377400</ts>
    <user>Eveline</user>
    <text>as &lt;@Alicia&gt; said, it might be interesting to add it to elm-analyse, then it might also be actually used once its done :wink:</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:05:17.377500</ts>
    <user>Eveline</user>
    <text>right</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:06:45.378400</ts>
    <user>Eveline</user>
    <text>The main part is the mathematics behind it. so a lot will be actually done with a pen and paper and at the end I will need to implement the system to validate that what I come up with actually works.</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:06:56.378600</ts>
    <user>Virgie</user>
    <text>depending on the syntax for the types, another pro of elm-analyze seems to be that comments are in the AST (the compiler just does not)</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:07:10.378800</ts>
    <user>Virgie</user>
    <text>i know liquid haskell uses special comment syntax</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:07:13.379000</ts>
    <user>Eveline</user>
    <text>YES that what i need.</text>
  </message>
  <message conversation_id="1731">
    <ts>2019-05-29T13:07:29.379200</ts>
    <user>Eveline</user>
    <text>i will also have my syntax in the comments, so thats great to know.</text>
  </message>
  <message conversation_id="1732">
    <ts>2019-05-29T13:14:35.380900</ts>
    <user>Malena</user>
    <text>Anyone know a few good sites that use elm in production?</text>
  </message>
  <message conversation_id="1732">
    <ts>2019-05-29T13:50:14.382100</ts>
    <user>Teddy</user>
    <text>&lt;@Malena&gt; &lt;https://github.com/jah2488/elm-companies&gt; Got a few right here actually :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1732">
    <ts>2019-05-29T14:06:50.383000</ts>
    <user>Augustus</user>
    <text>We have &lt;https://halogen.tv&gt; running on elm in production</text>
  </message>
  <message conversation_id="1733">
    <ts>2019-05-29T14:54:56.383200</ts>
    <user>Raylene</user>
    <text>Have you considered blogging about it? Pros and cons</text>
  </message>
  <message conversation_id="1734">
    <ts>2019-05-29T23:22:20.010500</ts>
    <user>Leoma</user>
    <text>I have found myself in a situation where I need to find the inverse of a function, but the natural way to code it results in a Maybe or other type problems.

It occurred to me that I could do something like this, whereby when I implement a function with an inverse, I could store the inverse value in the result:
```
type alias Invertible a b =
    { value : a, inverse : b }


actualValue : Invertible a b -&amp;gt; a
actualValue { value } =
    value


invert : Invertible a b -&amp;gt; b
invert { inverse } =
    inverse

type SquaredInt = Squared Int

square : Int -&amp;gt; Invertible SquaredInt Int
square x = {value = Squared (x * x), inverse = x }

inverseSquare : Invertible SquaredInt Int -&amp;gt; Int
inverseSquare = invert```

*Does this idea have a name?*</text>
  </message>
  <message conversation_id="1734">
    <ts>2019-05-30T00:04:57.017700</ts>
    <user>Casey</user>
    <text>I think the idea might be adjacent to a few things that came to mind for me, but I haven’t seen a name put to precisely that idea</text>
  </message>
  <message conversation_id="1735">
    <ts>2019-05-30T00:05:35.018300</ts>
    <user>Eveline</user>
    <text>Invertible should be right.</text>
  </message>
  <message conversation_id="1735">
    <ts>2019-05-30T00:06:57.018700</ts>
    <user>Eveline</user>
    <text>the mathematical term "Invertible" describes exactly that</text>
  </message>
  <message conversation_id="1735">
    <ts>2019-05-30T00:08:36.021800</ts>
    <user>Casey</user>
    <text>It’s kind of adjacent to memoization, or closing a functions argument over its result</text>
  </message>
  <message conversation_id="1735">
    <ts>2019-05-30T00:09:26.023000</ts>
    <user>Addie</user>
    <text>I also think `Graph` kind of fits (or "graphing" the function), since a value of what you're calling `Invertible a b` is an element of the graph of the function `f : b -&amp;gt; a`</text>
  </message>
  <message conversation_id="1735">
    <ts>2019-05-30T00:15:46.028200</ts>
    <user>Eveline</user>
    <text>I would keep it as `Invertible`.
Mathematically speaking an element is invertible, if an inverse element exists. And because programming is aways constructive, that means there should exists a constructive way to get to the inverse -&amp;gt; thats exactly what your tuple describes.</text>
  </message>
  <message conversation_id="1736">
    <ts>2019-05-30T02:18:37.032100</ts>
    <user>Ruthann</user>
    <text>looking for elm/html 0.18 docs</text>
  </message>
  <message conversation_id="1736">
    <ts>2019-05-30T02:19:25.032400</ts>
    <user>Maybelle</user>
    <text>Here I believe:  &lt;https://package.elm-lang.org/packages/elm-lang/html/2.0.0/&gt;</text>
  </message>
  <message conversation_id="1736">
    <ts>2019-05-30T02:20:25.033000</ts>
    <user>Ruthann</user>
    <text>excellent, thank you</text>
  </message>
  <message conversation_id="1735">
    <ts>2019-05-30T02:22:17.033100</ts>
    <user>Eveline</user>
    <text>If you follow the thought of &lt;@Addie&gt; and rename the type as follows: (personally i like "maping" instead of "graphing" but its the same thing)
```
type alias Maping a b
    { from : a
    , to : b
    } 

map : (b-&amp;gt; c) -&amp;gt; Mapping a b -&amp;gt; Mapping a c
map fun mapping =
    {mapping | to = fun to}

value : Mapping a b -&amp;gt; a
value {from} = from

image : Mapping a b -&amp;gt; b
image {to} = to
```
I think that's even better that what i though of (was thinking of `a`, `b` as functions)</text>
  </message>
  <message conversation_id="1737">
    <ts>2019-05-30T03:06:49.033300</ts>
    <user>Raylene</user>
    <text>So, it's kind like doing `(\a -&amp;gt; (a, a)) &amp;gt;&amp;gt; Tuple.mapFirst`... Something about arrows comes to mind</text>
  </message>
  <message conversation_id="1737">
    <ts>2019-05-30T03:29:47.033600</ts>
    <user>Florencia</user>
    <text>Honestly I'd call it a function or a relation, if the term wasn't so loaded :smile:</text>
  </message>
  <message conversation_id="1737">
    <ts>2019-05-30T03:30:57.033800</ts>
    <user>Florencia</user>
    <text>&lt;https://en.wikipedia.org/wiki/Binary_relation&gt;</text>
  </message>
  <message conversation_id="1738">
    <ts>2019-05-30T10:55:25.034800</ts>
    <user>Laurena</user>
    <text>You can search for 0.18 docs here: &lt;https://dmy.fr/elm-0.18-packages/&gt;</text>
  </message>
  <message conversation_id="1739">
    <ts>2019-05-30T11:23:49.035300</ts>
    <user>Millie</user>
    <text>&lt;@Leoma&gt; This reminds me of Prism/Iso. Maybe it's interesting for you to have a look, and decide if this could help &lt;https://package.elm-lang.org/packages/arturopala/elm-monocle/latest/Monocle-Iso&gt;</text>
  </message>
  <message conversation_id="1738">
    <ts>2019-05-30T11:29:59.035500</ts>
    <user>Donnell</user>
    <text>If the function is one-to-one (injective) you can define it as such</text>
  </message>
  <message conversation_id="1738">
    <ts>2019-05-30T11:31:32.035700</ts>
    <user>Donnell</user>
    <text>It is not necessarily invertible, e.g. if f(x) = x² for x∈ℕ, then f(x)=3 does not have an x. (The codomain being ℕ too). See &lt;https://en.wikipedia.org/wiki/Invertible_function#Definitions&gt;</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:34:29.036700</ts>
    <user>Olimpia</user>
    <text>Hi, how can I transform `1231` `Int` to `List Int` `[1, 2, 3, 4]`</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:35:12.037000</ts>
    <user>Olimpia</user>
    <text>So an Int to numerals</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:35:51.037100</ts>
    <user>Leoma</user>
    <text>&lt;@Donnell&gt; doesn’t the type system save me (in this case I demonstrated)? If I have an  `Invertible SquaredInt Int -&amp;gt; Int` then I can apply `inverseSquare`.</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:36:05.037300</ts>
    <user>Leoma</user>
    <text>That’s kind of the point of the exercise.</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:37:53.038000</ts>
    <user>Chae</user>
    <text>`1234 |&amp;gt; String.fromInt |&amp;gt; String.split "" |&amp;gt; List.map String.toInt`</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:38:18.038500</ts>
    <user>Virgie</user>
    <text>then they are still strings</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:38:54.039000</ts>
    <user>Rochelle</user>
    <text>`String.fromInt 1231 |&amp;gt; String.split "" |&amp;gt; List.map String.toInt`</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:39:43.039300</ts>
    <user>Carman</user>
    <text>add a `List.filterMap identity` at the end of that to unwrap the Maybes :wink:</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:39:46.039500</ts>
    <user>Olimpia</user>
    <text>Maybes are not good enough</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:40:21.039800</ts>
    <user>Rochelle</user>
    <text>`String.fromInt 1231 |&amp;gt; String.split "" |&amp;gt; List.map String.toInt |&amp;gt; List.map (Maybe.withDefault 0)`</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:40:26.040000</ts>
    <user>Chae</user>
    <text>`1231 |&amp;gt; String.fromInt |&amp;gt; String.split "" |&amp;gt; List.map (\i -&amp;gt; Maybe.withDefault 0 &amp;lt;| String.toInt i)`</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:41:06.040400</ts>
    <user>Virgie</user>
    <text>I'd go for
```
digits n = List.reverse (digitsHelp n)

digitsHelp n =
    if n &amp;lt; 10 then
        [n]

    else
        (n |&amp;gt; modBy 10) :: digitsHelp (n // 10)
```</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:41:34.040900</ts>
    <user>Virgie</user>
    <text>with `modBy 10`, you get the last (right-most) digit, and `// 10` removes the rightmost digit</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:42:07.041800</ts>
    <user>Virgie</user>
    <text>by doing this repeatedly you can list all the final elements (and need a reverse because you are starting from the right but want the result starting from the left)</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:44:39.042600</ts>
    <user>Carman</user>
    <text>:point_up:  this is the "correct" way of decomposing a number into its base 10 digits</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:46:25.043900</ts>
    <user>Rochelle</user>
    <text>"correct" and easy to understand are sometimes at odds :wink:</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:48:01.044100</ts>
    <user>Donnell</user>
    <text>Sure, I guess the codomain here is squared integers, so then it’s invertible</text>
  </message>
  <message conversation_id="1740">
    <ts>2019-05-30T11:50:19.044600</ts>
    <user>Olimpia</user>
    <text>tnx folks</text>
  </message>
  <message conversation_id="1741">
    <ts>2019-05-30T11:59:38.044900</ts>
    <user>Chae</user>
    <text>What makes this “correct”? Is it the lack of the Maybe?</text>
  </message>
  <message conversation_id="1742">
    <ts>2019-05-30T12:02:37.045100</ts>
    <user>Carman</user>
    <text>It doesn't rely on implicit behavior from `String.fromInt` (which likely does something like this behind the scenes)</text>
  </message>
  <message conversation_id="1742">
    <ts>2019-05-30T12:04:47.045300</ts>
    <user>Carman</user>
    <text>The `Maybe` is definitely a smell since all the strategies for eliminating it (filtering out `Nothing`s, defaulting to `0`) could introduce incorrect results. This should never happen but it's there just the same</text>
  </message>
  <message conversation_id="1742">
    <ts>2019-05-30T12:05:54.045500</ts>
    <user>Carman</user>
    <text>Finally, the mathematical solution can easily be adapted to work for any base. If you want the binary digits of 1234 you just need to replace the uses of `10` with `2` in the `digitsHelp` function</text>
  </message>
  <message conversation_id="1742">
    <ts>2019-05-30T12:10:22.045800</ts>
    <user>Eveline</user>
    <text>I've recently started a book/collection  that should become a useful resource for good practices and a guide-book for the "elm way" of doing things.

(Link: &lt;https://orasund.gitbook.io/elm-cookbook/&gt;)

Every page has an example problem and the solution. The in-depth explanation can be found in the links, at the bottom of each page. These links go to  medium articles, interesting forum posts and talks.

Hopefully this book will get a life of its own: It would be great if people would start adding interesting blog posts and talks. Optimally i only need to maintain the github-repository.

(Link: &lt;https://github.com/Orasund/elm-cookbook&gt;)

If you want to contribute or just want to point me to an interesting article or topic that is not yet covered, please tell me or head over to the repository and start a PR or an issue. Right now i haven't even written all topics that i've listed in the "future topics" section. I've only got so much time. More than one page per day is not in it for me.</text>
  </message>
  <message conversation_id="1741">
    <ts>2019-05-30T12:25:05.046300</ts>
    <user>Chae</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:54:12.047100</ts>
    <user>Loida</user>
    <text>Great job! Though i would not call it “elm way”.</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:54:22.047300</ts>
    <user>Loida</user>
    <text>None</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:54:41.047700</ts>
    <user>Loida</user>
    <text>This advices are clearly _not_ the Elm way</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:55:16.048000</ts>
    <user>Eveline</user>
    <text>i really have a problem naming that thing. first it was elm-cookbook, but its not a cookbook either so... elm-collection is dump.</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:55:44.048200</ts>
    <user>Eveline</user>
    <text>but i can change the name at any time so... if you have better name, please</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:56:29.048400</ts>
    <user>Eveline</user>
    <text>btw. that advice comes directly from the NoRedInk style guide.</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:56:47.048600</ts>
    <user>Loida</user>
    <text>Can’t think of one right now. Would definitely avoid anything implying best practices or something similar.</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:58:00.048800</ts>
    <user>Loida</user>
    <text>Not sure if NoRedInk style guide = Elm way</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:58:16.049000</ts>
    <user>Loida</user>
    <text>Also you might be interested to check &lt;https://www.youtube.com/watch?v=XpDsk374LDE&gt;</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:58:40.049200</ts>
    <user>Eveline</user>
    <text>yeah that video is already linked at the bottom of the page.</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T12:59:51.049400</ts>
    <user>Cornell</user>
    <text>The advice I took away from Life of a File was to organize your modules around a data type.  The size of the file doesn't matter as much as long as you provide a nice interface to that type.</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T13:01:56.049600</ts>
    <user>Eveline</user>
    <text>yeah i might need to rewrite that section.</text>
  </message>
  <message conversation_id="1744">
    <ts>2019-05-30T14:43:59.050400</ts>
    <user>Marquitta</user>
    <text>just wrote the first part about recursive decoding of a dom node here &lt;https://dev.to/margaretkrutikova/elm-dom-node-decoder-to-detect-click-outside-3ioh&gt;, if anyone is still interested in this :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1743">
    <ts>2019-05-30T15:28:08.050800</ts>
    <user>Cornell</user>
    <text>You should post this in &lt;#C0K384K4Y|news-and-links&gt; , it’s great :smile:</text>
  </message>
  <message conversation_id="1745">
    <ts>2019-05-30T15:59:27.051300</ts>
    <user>Sebrina</user>
    <text>Is there a builtin way to convert a boolean to a string?</text>
  </message>
  <message conversation_id="1745">
    <ts>2019-05-30T15:59:55.051700</ts>
    <user>Carman</user>
    <text>Is this to display to users or for debugging purposes?</text>
  </message>
  <message conversation_id="1745">
    <ts>2019-05-30T16:00:08.051900</ts>
    <user>Sebrina</user>
    <text>More for debugging purposes</text>
  </message>
  <message conversation_id="1745">
    <ts>2019-05-30T16:00:32.052400</ts>
    <user>Kris</user>
    <text>`Debug.log`</text>
  </message>
  <message conversation_id="1745">
    <ts>2019-05-30T16:00:58.053100</ts>
    <user>Maybelle</user>
    <text>`Debug.toString` if you need the string though</text>
  </message>
  <message conversation_id="1745">
    <ts>2019-05-30T16:01:15.053300</ts>
    <user>Sebrina</user>
    <text>Cool cool, thanks peeps!</text>
  </message>
  <message conversation_id="1746">
    <ts>2019-05-30T16:23:15.054500</ts>
    <user>Sebrina</user>
    <text>I never realized how differently you have to think when working in a functional language as opposed to procedural or OOP</text>
  </message>
  <message conversation_id="1746">
    <ts>2019-05-30T16:26:02.055000</ts>
    <user>Danika</user>
    <text>Go object-functional instead ^^ </text>
  </message>
  <message conversation_id="1746">
    <ts>2019-05-30T16:27:56.055300</ts>
    <user>Sebrina</user>
    <text>That _sounds_ beautiful</text>
  </message>
  <message conversation_id="1746">
    <ts>2019-05-30T16:28:19.055600</ts>
    <user>Sebrina</user>
    <text>I'm going to have to research that a bit</text>
  </message>
  <message conversation_id="1747">
    <ts>2019-05-30T17:01:19.056900</ts>
    <user>Danika</user>
    <text>Its a bit buzzwordy, you won’t find much. You should look at scala or f#, given they’re both built on and interop with oo languages they might be interesting to you </text>
  </message>
  <message conversation_id="1746">
    <ts>2019-05-30T17:28:26.058000</ts>
    <user>Milda</user>
    <text>How do people deal with private packages in 0.19?</text>
  </message>
  <message conversation_id="1748">
    <ts>2019-05-30T17:29:08.058800</ts>
    <user>Milda</user>
    <text>(As opposed to the ones published on &lt;http://package.elm-lang.org/&gt; .)</text>
  </message>
  <message conversation_id="1748">
    <ts>2019-05-30T17:32:19.061800</ts>
    <user>Earlean</user>
    <text>There are no private packages. You just have modules. Git sub-modules/sub-trees can help with sharing Elm modules between projects.</text>
  </message>
  <message conversation_id="1748">
    <ts>2019-05-30T17:33:45.064100</ts>
    <user>Danika</user>
    <text>you could have a look at this: &lt;https://github.com/Skinney/elm-git-install&gt;</text>
  </message>
  <message conversation_id="1748">
    <ts>2019-05-30T17:36:57.066300</ts>
    <user>Rosalee</user>
    <text>Clone and check in to your project</text>
  </message>
  <message conversation_id="1748">
    <ts>2019-05-30T17:37:05.066600</ts>
    <user>Rosalee</user>
    <text>and commit</text>
  </message>
  <message conversation_id="1746">
    <ts>2019-05-30T17:37:15.066800</ts>
    <user>Milda</user>
    <text>Thanks! &lt;@Norbert&gt; &lt;@Danika&gt;</text>
  </message>
  <message conversation_id="1748">
    <ts>2019-05-30T17:37:27.067200</ts>
    <user>Milda</user>
    <text>So &lt;@Rosalee&gt;... you recommend vendoring?</text>
  </message>
  <message conversation_id="1749">
    <ts>2019-05-30T17:48:51.067400</ts>
    <user>Marquitta</user>
    <text>thanks! will do that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1749">
    <ts>2019-05-30T17:50:20.069200</ts>
    <user>Augustus</user>
    <text>Another alternative is a monorepo, put all your packages in one git repo and use `source-directories` to control which packages are referenced</text>
  </message>
  <message conversation_id="1749">
    <ts>2019-05-30T18:01:14.070000</ts>
    <user>Hoa</user>
    <text>So I was looking at this:  &lt;https://marketplace.visualstudio.com/items?itemName=Elmtooling.elm-ls-vscode&gt;   I’m correct in  believing that it replaces in functionalities the current Elm plugin fr VS Code?</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-30T18:55:42.070900</ts>
    <user>Raylene</user>
    <text>I think that it will replace it, but is currently immature?</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T02:49:07.073100</ts>
    <user>Hoa</user>
    <text>No idea.  I think I will give it a shot.  I’m asking because current Elm plugin in VSCode seems very fragile.  I remember that a while ago it had a feature that suggested a function signature if it was missing. No more. Sometime it completes stuff, other does not.</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T02:57:25.075400</ts>
    <user>Ruthann</user>
    <text>elm plugin support in intellij has come a long way
- auto complete
- auto import, detects aliases ( eg, HA.class will `import Html.Attributes as HA )
- inline editor compiler warnings eg ( type mismatch, non exhausive case )
- format on save
- goto definition, find usages
- unused imports, functions

i rarely go to the compiler output now that all errors are inlined in the editor</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T02:58:36.076400</ts>
    <user>Hoa</user>
    <text>Intelli J has the best support for Elm in the know universe. But for  a strange reason I don’t like the Intelli J UI</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T02:59:05.077400</ts>
    <user>Raylene</user>
    <text>Vscode plugin does most of that, but not everything tho</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T02:59:40.078300</ts>
    <user>Hoa</user>
    <text>I listened to the Elm town podcast with the Intelli J plugin authors. That’s amazing. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:01:24.079400</ts>
    <user>Hoa</user>
    <text>For example “unused imports, functions”. This used to work in VSCode too. No more</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:03:23.079900</ts>
    <user>Kris</user>
    <text>That support sounds great </text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:03:37.080400</ts>
    <user>Kris</user>
    <text>I’m using vim and it sucks a bit </text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:03:55.081000</ts>
    <user>Kris</user>
    <text>Atom had great tooling too, but the editor is so terribly slow</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:04:13.081200</ts>
    <user>Sharon</user>
    <text>I've removed all the toolbars and buttons so it looks very minimalistic. ^^</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:04:34.082200</ts>
    <user>Kris</user>
    <text>Can you share a screenshot? It’s been a while since I’ve touched it </text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:04:37.082500</ts>
    <user>Hoa</user>
    <text>Yeah, I switched from Atom because it was slow on my machine ;(</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:04:50.082700</ts>
    <user>Kris</user>
    <text>Yeah, me too </text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:05:10.083400</ts>
    <user>Kris</user>
    <text>They took the whole “premature optimization” mantra to a complete new level lol </text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:05:24.083600</ts>
    <user>Hoa</user>
    <text>LOL</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:06:52.083700</ts>
    <user>Sharon</user>
    <text>just an editor basically. I'm a vim user too, so I'm in the habit of using keybindings for everything</text>
  </message>
  <message conversation_id="1750">
    <ts>2019-05-31T03:15:42.084200</ts>
    <user>Hoa</user>
    <text>For the record: unused imports are back,thanks to `elm-vscode-ls`</text>
  </message>
  <message conversation_id="1751">
    <ts>2019-05-31T03:17:56.084900</ts>
    <user>Sharon</user>
    <text>if you want to follow along on its development: &lt;#C6ZRS3ALU|elm-language-server&gt;</text>
  </message>
  <message conversation_id="1752">
    <ts>2019-05-31T03:46:12.085200</ts>
    <user>Denae</user>
    <text>I know what you mean, I can't put my finger to it either. Maybe it's the Java font rendering or that even on high end hardware it just doesn't feel snappy like vscode does, or spacemacs for that matter :spacemacs:</text>
  </message>
  <message conversation_id="1753">
    <ts>2019-05-31T11:53:02.086600</ts>
    <user>Alicia</user>
    <text>&lt;@Kris&gt; elm-language-server supports elm-analyse (including lint as you type for it) in Vim, so far it has been tested it with ALE and Coc.nvim</text>
  </message>
  <message conversation_id="1753">
    <ts>2019-05-31T12:00:49.086700</ts>
    <user>Bari</user>
    <text>FYI, for elm-format I’ve been working on a mode that converts Elm files to/form a JSON AST — probably will get published in the next few months, though if you’re interested in the meantime, lmk.  Though that only doesn’t the parsing phase of the compiling — the real compiler does “canonicalization”, and then the type checking, both of which can produce errors.

also, the elm-compiler code is not very extendable, but it is well-organized, so I’d suggest starting to take a look at it — and in the context of a thesis project, I think it’d be reasonable to just for the compiler and modify the parts you need — that’s what I did for starting elm-format; I forked the compiler and then stripped out all the stuff I didn’t need, and then slowly modified the remaining parsing phase over time</text>
  </message>
  <message conversation_id="1753">
    <ts>2019-05-31T12:03:14.086900</ts>
    <user>Eveline</user>
    <text>Interesting. But not having to work in Haskell is currently a big game changer for me, so i think i'll try using elm-analyse.</text>
  </message>
  <message conversation_id="1754">
    <ts>2019-05-31T12:35:26.087500</ts>
    <user>Katharyn</user>
    <text>&lt;@Su&gt; did you ever find a solution to this?</text>
  </message>
  <message conversation_id="1754">
    <ts>2019-05-31T12:36:17.087800</ts>
    <user>Su</user>
    <text>I did not… I ended up debugging the `Debug.log` way</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T13:48:59.089100</ts>
    <user>Danika</user>
    <text>Is there any way I can compile/transpile elm code without the runtime? I know thats probably a ridiculous fringe use-case because without the runtime you lose a lot of the static type checking guarantees, but I'm curious if such tool exists regardless</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T13:54:14.089600</ts>
    <user>Alicia</user>
    <text>&lt;@Danika&gt; this one is a work in progress that &lt;@Florencia&gt; has been working on &lt;https://github.com/elm-in-elm/compiler&gt;</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T13:56:50.090300</ts>
    <user>Alicia</user>
    <text>&lt;@Kris&gt; one other thing you get with Coc.nvim and the most recent build of neovim is the floating window support</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T13:58:18.090700</ts>
    <user>Danika</user>
    <text>not quite useable yet, is it?</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T13:59:57.092400</ts>
    <user>Alicia</user>
    <text>I don’t think the elm-in-elm one is quite ready yet, but it’s the closest I’ve seen to it.  One the 0.18 version of Ellie it used a version of the compiler that was transpiled to JS through GHC-JS, but there were some changes in 0.19 that made it not possible IIRC</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:00:41.093000</ts>
    <user>Danika</user>
    <text>Ah bummer, I'll have to keep an eye on it ^^ Maybe I'll look at Reason for now</text>
  </message>
  <message conversation_id="1756">
    <ts>2019-05-31T14:12:19.094400</ts>
    <user>Laree</user>
    <text>Hi there, I see often people use parenthesis for argument separation, but sometimes I find it nicer to have something like `onClick &amp;lt;| Append "1'` instead of `onClick (Append "1")`. Are there some disavantages of using this little `&amp;lt;|` operator which I forgot the name?</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:13:38.095400</ts>
    <user>Alicia</user>
    <text>&lt;@Laree&gt; no disadvantage to using the backward pipe like that, only case where you can be limited is when you want to use forward pipes and backward pipes together</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:14:25.096000</ts>
    <user>Laree</user>
    <text>I see. Thanks for the answer &lt;@Alicia&gt;.</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:14:46.096300</ts>
    <user>Alicia</user>
    <text>no problem!</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:15:17.097000</ts>
    <user>Kris</user>
    <text>The runtime doesn’t have to do with typechecking, doesn’t it?</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:16:24.097700</ts>
    <user>Danika</user>
    <text>I tend to opt for `&amp;lt;|` before parenthesis too</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:17:27.098100</ts>
    <user>Kris</user>
    <text>I prefer parenthesis most of the time</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:18:37.099400</ts>
    <user>Alicia</user>
    <text>I like the backward pipe for ones like
```
Html.viewIf hasAward &amp;lt;|
    div [] [text "you have an award" ]
```</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:18:51.099600</ts>
    <user>Laree</user>
    <text>I'm using `Fira Code` with ligatures on VSCode and the `&amp;lt;|` really makes it appealing to the eye</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:19:33.099800</ts>
    <user>Laree</user>
    <text>None</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:23:45.100200</ts>
    <user>Nana</user>
    <text>yeah I use Fira Code too, it's neat :smile:</text>
  </message>
  <message conversation_id="1756">
    <ts>2019-05-31T14:25:52.101000</ts>
    <user>Maybelle</user>
    <text>I tried using a font with ligatures for about 5 minutes and it annoyed me so much I went back to my old font.</text>
  </message>
  <message conversation_id="1756">
    <ts>2019-05-31T14:25:56.101200</ts>
    <user>Maybelle</user>
    <text>It just bugs me for some reason</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:30:05.102300</ts>
    <user>Laree</user>
    <text>I agree when you are not familiar with the language's operators **and** the language itself it is really disturbing but it is really just eye candy haha :smile:</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:30:15.102500</ts>
    <user>Laree</user>
    <text>#markdownfail</text>
  </message>
  <message conversation_id="1757">
    <ts>2019-05-31T14:30:19.102600</ts>
    <user>Danika</user>
    <text>Not insomuch as the runtime _performs_ any type checking. What I'd like to be able to do is have an elm file full of functions like:
```
add2 : number -&amp;gt; number
add2 = (+) 2
```
and spit out a js file that has:
```
const add2 = x =&amp;gt; x + 2
```
This (arguably) has fairly limited utility because you can't control whatever calls add2. There's nothing stopping me importing add2 into another js file and calling `add2("hello")`.</text>
  </message>
  <message conversation_id="1756">
    <ts>2019-05-31T14:32:01.103400</ts>
    <user>Danika</user>
    <text>I rocked fira code for a while. I agree with &lt;@Maybelle&gt;, even having worked with haskell for a while I wasn't a fan of the ligatures</text>
  </message>
  <message conversation_id="1756">
    <ts>2019-05-31T14:33:56.105400</ts>
    <user>Danika</user>
    <text>So you can say although the static types are what give us the guarantees, it is the runtime that really ensures those guarantees are met.</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:33:57.105600</ts>
    <user>Nana</user>
    <text>yeah I could see it getting confusing with Haskell - Elm has so few operators though</text>
  </message>
  <message conversation_id="1755">
    <ts>2019-05-31T14:34:07.105900</ts>
    <user>Alicia</user>
    <text>they look pretty but I had the same problem, might be something with how I was using them in Vim but I remember not liking that I would see it as one character but it would still take two delete presses to remove it (going with the pipe example)</text>
  </message>
  <message conversation_id="1756">
    <ts>2019-05-31T14:34:18.106300</ts>
    <user>Danika</user>
    <text>I don't think it was confusing, I think it just had the opposite effect</text>
  </message>
  <message conversation_id="1756">
    <ts>2019-05-31T14:34:26.106600</ts>
    <user>Danika</user>
    <text>it kinda created _more_ visual noise for me</text>
  </message>
  <message conversation_id="1756">
    <ts>2019-05-31T14:37:14.108000</ts>
    <user>Maybelle</user>
    <text>My thing is just, I want to see what I type.  I don't want to see one character when I entered two (and would have to delete two), and it just bugs me to see extra wide characters in a monospace font.</text>
  </message>
  <message conversation_id="1756">
    <ts>2019-05-31T14:38:07.108300</ts>
    <user>Danika</user>
    <text>&amp;gt; it just bugs me to see extra wide characters in a monospace font.
I think this was it, for me</text>
  </message>
  <message conversation_id="1758">
    <ts>2019-05-31T15:05:28.109900</ts>
    <user>Laree</user>
    <text>This is true when replacing `==` with `/=` it starts getting strange, worse in JavaScript I often mistakenly replace the last `=` in `===` by `!` when changing the operator</text>
  </message>
  <message conversation_id="1758">
    <ts>2019-05-31T15:06:24.110700</ts>
    <user>Laree</user>
    <text>But hey! it looks cool and from time to time my Marketing Department's coworkers keep reminding me how beautiful my code looks so I got that for me :smile:</text>
  </message>
  <message conversation_id="1758">
    <ts>2019-05-31T15:12:22.111200</ts>
    <user>Danika</user>
    <text>:joy:</text>
  </message>
  <message conversation_id="1758">
    <ts>2019-05-31T15:23:05.111900</ts>
    <user>Maybelle</user>
    <text>It's true, Elm with firacode just looks like some fictional programming language in the background of a sci-fi show.  There are just triangles and arrows everywhere.  XD</text>
  </message>
  <message conversation_id="1759">
    <ts>2019-05-31T16:36:26.113300</ts>
    <user>Royce</user>
    <text>Hi all. Anybody else having lots of stability issues with Elm 19? I seem to trigger compiler crashes (&lt;https://github.com/elm/compiler/issues/1851&gt;) almost every week, and just now I hit my first runtime error (`Cannot read property '$' of undefined` on accessing a Maybe inside a record).</text>
  </message>
  <message conversation_id="1759">
    <ts>2019-05-31T16:39:17.113400</ts>
    <user>Carman</user>
    <text>I've hit the `Map!` bug. Compiling without `--debug` solved that for me. Otherwise 0.19 has been stable for me</text>
  </message>
  <message conversation_id="1760">
    <ts>2019-05-31T17:35:57.114800</ts>
    <user>Kris</user>
    <text>That’s not really the runtime, it’s just not messing around with compiled code </text>
  </message>
  <message conversation_id="1760">
    <ts>2019-05-31T17:36:29.115800</ts>
    <user>Kris</user>
    <text>Anyway, if you really want to, you can compile your code and grab the functions you want out of the compiled js</text>
  </message>
  <message conversation_id="1761">
    <ts>2019-05-31T18:45:55.116200</ts>
    <user>Augustus</user>
    <text>That runtime error I've seen when a custom element tries to fire an event after the `discinnectedCallback` has fired</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:02:26.117500</ts>
    <user>Lauri</user>
    <text>Hi everyone! I'm having this weird compile error:
```
This `errorList` value is a:

    List { message : String, path : List PathSegment }

But `foldl` needs the 3rd argument to be:

    List { message : String, path : List PathSegment }
```
&lt;https://ellie-app.com/5HhFLwyN98Ca1&gt;
I'm stumped. Does anyone know what could be the problem?</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:08:20.118400</ts>
    <user>Lauri</user>
    <text>I just realized that `PathSegment` is not a comparable type. From the `Dict` docs: _The keys can be any comparable type. This includes Int, Float, Time, Char, String, and tuples or lists of comparable types._</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:09:34.118800</ts>
    <user>Kris</user>
    <text>Hah</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:09:41.119100</ts>
    <user>Kris</user>
    <text>That's a pretty terrible message for that</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:11:19.119400</ts>
    <user>Danika</user>
    <text>It's caught a few people (myself included) out</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:12:11.120500</ts>
    <user>Danika</user>
    <text>When you think about it, the error is *technically* correct, in a weird "computer logic" sort of way. Definitely could be better given Elms fame for good error messages</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:14:55.121900</ts>
    <user>Lauri</user>
    <text>Yeah, technically, it's because they're not comparable. I hope the error message can be improved. I just don't know how.</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:15:48.123200</ts>
    <user>Lauri</user>
    <text>I'll try that &lt;@Maybelle&gt;. Thanks!</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:15:55.123500</ts>
    <user>Kris</user>
    <text>I annotated everything in his example </text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:15:59.123700</ts>
    <user>Kris</user>
    <text>And it still sucked </text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:16:13.124100</ts>
    <user>Danika</user>
    <text>In the meantime, you could look at the any-dict package if you need it: &lt;https://package.elm-lang.org/packages/turboMaCk/any-dict/latest/Dict-Any&gt;</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:16:30.124500</ts>
    <user>Danika</user>
    <text>Yes in this case, type annotations won't give you any better errors</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:17:40.125900</ts>
    <user>Lauri</user>
    <text>Interesting... Thanks &lt;@Danika&gt;!</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:18:41.127000</ts>
    <user>Maybelle</user>
    <text>Whoop ignore that, I typod, lol</text>
  </message>
  <message conversation_id="1762">
    <ts>2019-05-31T19:18:41.127100</ts>
    <user>Danika</user>
    <text>Oh, awesome</text>
  </message>
  <message conversation_id="1763">
    <ts>2019-06-01T02:18:13.128100</ts>
    <user>Raeann</user>
    <text>&lt;@Hoa&gt; &lt;@Kris&gt; which are the cases that you feel Atom is slow? I use it and it looks ok to me. I like the type inference of the elm plugin and i think Atom is the only one that support it</text>
  </message>
  <message conversation_id="1764">
    <ts>2019-06-01T03:06:07.128400</ts>
    <user>Raylene</user>
    <text>The problem is (I think) caused by the fact that comparable is compiler magic. So when the error comes it has already been replaced by the concrete type. Compare that to "the third parameter should have been `Ord Foo =&amp;gt; Foo` but was `Foo`"</text>
  </message>
  <message conversation_id="1763">
    <ts>2019-06-01T04:42:54.129400</ts>
    <user>Hoa</user>
    <text>I don’t really know anymore, I switched a time long ago. It might even got better since last time I tried :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1765">
    <ts>2019-06-01T11:35:16.136000</ts>
    <user>Bret</user>
    <text>I'd read that `Int` has at least 32 bits of precision, so it was kind of weird when I was bit twiddling and weird things were happening around the first and second MSBs. Here's a little demonstration:
```
&amp;gt; (0x80 |&amp;gt; Bitwise.or 0x40) == 0xC0
True : Bool
&amp;gt; (0x800000 |&amp;gt; Bitwise.or 0x400000) == 0xC00000
True : Bool
&amp;gt; (0x80000000 |&amp;gt; Bitwise.or 0x40000000) == 0xC0000000
False : Bool
```
Is that just a weird quirk of having js numbers under the hood?</text>
  </message>
  <message conversation_id="1765">
    <ts>2019-06-01T11:38:08.136400</ts>
    <user>Danika</user>
    <text>All numbers in js are 64bit floats</text>
  </message>
  <message conversation_id="1765">
    <ts>2019-06-01T11:40:47.136900</ts>
    <user>Bret</user>
    <text>I'm guessing that has something to do with it though?</text>
  </message>
  <message conversation_id="1765">
    <ts>2019-06-01T11:41:03.137100</ts>
    <user>Danika</user>
    <text>Yeah I'd imagine so</text>
  </message>
  <message conversation_id="1765">
    <ts>2019-06-01T11:41:21.137400</ts>
    <user>Danika</user>
    <text>I wont pretend to be an authority on that, though ^^</text>
  </message>
  <message conversation_id="1765">
    <ts>2019-06-01T11:41:39.137700</ts>
    <user>Bret</user>
    <text>Thanks :sweat_smile:</text>
  </message>
  <message conversation_id="1765">
    <ts>2019-06-01T11:50:24.137800</ts>
    <user>Virgie</user>
    <text>```
&amp;gt; 0x80000000
2147483648 : number
```
this is already the largest number a JS int (32 bits) can reliably store, so when you increase it further it overflows</text>
  </message>
  <message conversation_id="1766">
    <ts>2019-06-01T11:50:50.138000</ts>
    <user>Virgie</user>
    <text>specifically it is seen as a negative number now
```
 (0x80000000 |&amp;gt; Bitwise.or 0x40000000)
-1073741824 : Int
```</text>
  </message>
  <message conversation_id="1765">
    <ts>2019-06-01T11:51:22.138200</ts>
    <user>Virgie</user>
    <text>while the hex syntax is translated to the float representation, so this works
```
&amp;gt; 0xC0000000
3221225472 : number
```</text>
  </message>
  <message conversation_id="1767">
    <ts>2019-06-01T14:43:59.139700</ts>
    <user>Laree</user>
    <text>Hi there, quick question: when doing this `import Html exposing (..)`, since everything from the `Html` module is available to us, does this means that `import Html exposing (Html, div, text, button)` is more optimized (when using only those elements)? Or is there some kind of dead code elimination or tree shaking in use with the elm compiler?</text>
  </message>
  <message conversation_id="1767">
    <ts>2019-06-01T14:47:43.139800</ts>
    <user>Millie</user>
    <text>Preferring not to import everything is to avoid polluting the scope or to explicitly see in text, where used functions are coming from. Performance wise it doesn't make a difference. And yes, there is dead code elimination. &lt;https://elm-lang.org/blog/small-assets-without-the-headache&gt;</text>
  </message>
  <message conversation_id="1767">
    <ts>2019-06-01T14:48:48.140000</ts>
    <user>Laree</user>
    <text>Great! Anyway, I'm always using the second approach, as I am a beginner and don't know every exposed things in every module. Thanks for the answer!</text>
  </message>
  <message conversation_id="1767">
    <ts>2019-06-01T14:49:26.140900</ts>
    <user>Danika</user>
    <text>Exposing everything from a module is somewhat frowned upon anyway, you’ll be making a good habit :) </text>
  </message>
  <message conversation_id="1768">
    <ts>2019-06-01T15:17:40.141600</ts>
    <user>Kris</user>
    <text>They’re 53 or 54 bits or something like that </text>
  </message>
  <message conversation_id="1769">
    <ts>2019-06-01T20:08:19.144900</ts>
    <user>Dinah</user>
    <text>What’s the preferred markdown flavour for elm reactor? In github flavoured markdown I get syntax aware coloured elm code (in Atom text editor). But for the README.md file that pops up on elm reactor, it’s pretty plane. Any insight on how to make this better for readme documentation?</text>
  </message>
  <message conversation_id="1770">
    <ts>2019-06-02T04:33:45.146300</ts>
    <user>Lera</user>
    <text>Someone is interesting for a blockchain project?</text>
  </message>
  <message conversation_id="1768">
    <ts>2019-06-02T17:27:49.148300</ts>
    <user>Kris</user>
    <text>What's it about?</text>
  </message>
  <message conversation_id="1770">
    <ts>2019-06-02T22:44:06.148500</ts>
    <user>Erlene</user>
    <text>elm-analyze will throw a warning for using (..) so another reason to avoid this. But it's handy for quick throw-away code.</text>
  </message>
  <message conversation_id="1770">
    <ts>2019-06-02T22:44:32.148800</ts>
    <user>Erlene</user>
    <text>&lt;@Lera&gt; tell me more.</text>
  </message>
  <message conversation_id="1771">
    <ts>2019-06-03T00:42:01.149600</ts>
    <user>Reynaldo</user>
    <text>Hi everybody. I am passioned about webvr and education. I saw elm bindings for AFrame, but looks like they are not updated for a long time and not compatible with elm .19
Could you advise me about what challenges i would face while trying to implement webVR in Elm?

The ultimate goal is to have online school for kids in 3d. Like next generation Acellus.</text>
  </message>
  <message conversation_id="1771">
    <ts>2019-06-03T01:40:24.150000</ts>
    <user>Erlene</user>
    <text>&lt;@Reynaldo&gt; why not webxr? I thought webvr was obsolete.</text>
  </message>
  <message conversation_id="1770">
    <ts>2019-06-03T01:41:47.150800</ts>
    <user>Erlene</user>
    <text>The main thing you need to decide is if using ports to communicate with the API does work for you. If not, you may want to fork the compiler so you can write native code.</text>
  </message>
  <message conversation_id="1771">
    <ts>2019-06-03T04:52:38.156500</ts>
    <user>Reynaldo</user>
    <text>yes, i think this is the point where i gave up last time and used javascript + flow type.
so far as i understand forking compiler will never be available in main elm repo. Is there more to read about forking compiler and the future of that fork?</text>
  </message>
  <message conversation_id="1771">
    <ts>2019-06-03T04:53:30.157400</ts>
    <user>Reynaldo</user>
    <text>i did not knew about webxr, thanks for pointing into it.</text>
  </message>
  <message conversation_id="1770">
    <ts>2019-06-03T06:48:51.157800</ts>
    <user>Monnie</user>
    <text>a-frame is normal html, you dont need an Elm package.. Html.node "a-frame" [] []  works..  I use it in an augmenred reality app myself.

You can define it like this:
```
frame attr children =
    Html.node "a-frame" attr children
```</text>
  </message>
  <message conversation_id="1772">
    <ts>2019-06-03T09:35:33.158500</ts>
    <user>Delena</user>
    <text>does the `&amp;lt;template&amp;gt;` tag work in Elm?</text>
  </message>
  <message conversation_id="1772">
    <ts>2019-06-03T09:37:52.159400</ts>
    <user>Carman</user>
    <text>You can create any tag with `Html.node`. I'm not sure that the `&amp;lt;template&amp;gt;` tag is useful in languages/frameworks that use a virtual dom though?</text>
  </message>
  <message conversation_id="1772">
    <ts>2019-06-03T09:38:25.159600</ts>
    <user>Delena</user>
    <text>I am trying to recreate this &lt;https://onsen.io/playground/?framework=vanilla&amp;amp;category=reference&amp;amp;module=navigator&gt; using Elm, Cordova, and Onsen UI. When I use the html/js in the link in my index.html, it works. However when I make an elm version for it (via Html.node), it does not work</text>
  </message>
  <message conversation_id="1772">
    <ts>2019-06-03T09:47:18.162100</ts>
    <user>Carman</user>
    <text>This is using the templates to mutate the DOM. Elm doesn't really work like that. The equivalent of those two templates would be functions in an Elm program.</text>
  </message>
  <message conversation_id="1772">
    <ts>2019-06-03T09:47:51.162700</ts>
    <user>Carman</user>
    <text>You're probably better off referencing the React examples than the vanilla JS ones since React also works off a virtual dom</text>
  </message>
  <message conversation_id="1772">
    <ts>2019-06-03T09:52:44.163200</ts>
    <user>Delena</user>
    <text>&lt;@Carman&gt; oh, I see. Thank you!</text>
  </message>
  <message conversation_id="1773">
    <ts>2019-06-03T11:11:25.163400</ts>
    <user>Elodia</user>
    <text>Hey has anyone tried this app Link Reminder? It's in the Slack `New &amp;amp; Noteworthy` section: &lt;http://r.labfortysix.com/link-reminder-1&gt;

I'm interested in using it for my company, just want to get some feedback in case someone here has used it before. Looks pretty interesting, you add the bot to your work channel and it automatically creates reminders as your team chats, then if someone's done their task, it sends you a DM so you don't have to waste time or feel awkward following up with people.</text>
  </message>
  <message conversation_id="1774">
    <ts>2019-06-03T12:57:33.165500</ts>
    <user>Bret</user>
    <text>When you’re writing doc examples, can you treat it just like a REPL and show some binding like `x = MyDataType` before using it in the examples?</text>
  </message>
  <message conversation_id="1774">
    <ts>2019-06-03T12:58:15.166200</ts>
    <user>Bret</user>
    <text>I guess that was a two-part question: is that good practice? And, does it doctest?</text>
  </message>
  <message conversation_id="1774">
    <ts>2019-06-03T12:59:23.166500</ts>
    <user>Virgie</user>
    <text>kind of, I think it needs a type when you do that</text>
  </message>
  <message conversation_id="1774">
    <ts>2019-06-03T13:01:08.166900</ts>
    <user>Virgie</user>
    <text>&lt;https://github.com/stoeffel/elm-verify-examples#intermediate-definitions&gt;</text>
  </message>
  <message conversation_id="1774">
    <ts>2019-06-03T13:03:38.167700</ts>
    <user>Virgie</user>
    <text>but that won't print things that were defined before. I think the general pattern is to define everything in the doc example. This forces you to keep them small/self-contained</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T15:53:16.168000</ts>
    <user>Willodean</user>
    <text>hey out there</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T15:53:23.168300</ts>
    <user>Willodean</user>
    <text>I am having some _debbuggginggggingng_ pain</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T15:53:38.168700</ts>
    <user>Willodean</user>
    <text>I would just like to do... time travel debugging</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T15:54:13.169200</ts>
    <user>Willodean</user>
    <text>but if I pass `--debug` when compiling, I get unexpected end of input in my artifact</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T15:55:46.169400</ts>
    <user>Danika</user>
    <text>It's a compiler bug</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T15:56:25.169700</ts>
    <user>Willodean</user>
    <text>so what should I do?</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T15:56:56.170100</ts>
    <user>Danika</user>
    <text>there's a fork of the compiler with the fix merged, but otherwise you're SOL</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T15:57:14.170400</ts>
    <user>Willodean</user>
    <text>can you spoon me to that fork?</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:04:25.171300</ts>
    <user>Willodean</user>
    <text>Anyone know of this compiler fork?</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:10:09.171800</ts>
    <user>Willodean</user>
    <text>why is this ungooglable? geeze, I wouldn't think I am the only one searching for this fork</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:12:17.172400</ts>
    <user>Hoa</user>
    <text>0.19.1 cannot come soon enough  :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:18:31.173200</ts>
    <user>Willodean</user>
    <text>this is the fork unfindable</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:19:16.174200</ts>
    <user>Raylene</user>
    <text>Maybe the curry one? :thinking_face:</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:19:24.174400</ts>
    <user>Hoa</user>
    <text>I don’t know anything about this fork. But sure enough I’ve been bitten by a `--debug` compiler crash</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:19:56.174800</ts>
    <user>Willodean</user>
    <text>Using `!` in Haskell seems very un-Elm to me</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:20:36.175500</ts>
    <user>Willodean</user>
    <text>for a language where users are not allowed a `fromJust`, use of the partial function `!` is very odd</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:20:37.175600</ts>
    <user>Jae</user>
    <text>It's been linked here on slack a few times. I don't know if the 10k message limit means it's lost now though</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:21:16.175900</ts>
    <user>Raylene</user>
    <text>&lt;https://github.com/CurrySoftware/compiler&gt; this?</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:23:53.176100</ts>
    <user>Jae</user>
    <text>Huh, never seen that before</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T16:24:32.176300</ts>
    <user>Jae</user>
    <text>That's not what I was thinking of but that doesn't matter if it fixes the bug</text>
  </message>
  <message conversation_id="1775">
    <ts>2019-06-03T17:41:16.178100</ts>
    <user>Willodean</user>
    <text>Ok, so the CurrySoftware fork fixed my problem</text>
  </message>
  <message conversation_id="1776">
    <ts>2019-06-03T17:44:44.178800</ts>
    <user>Nana</user>
    <text>&lt;@Willodean&gt; cool, how did you install the fork?</text>
  </message>
  <message conversation_id="1776">
    <ts>2019-06-03T17:45:09.179200</ts>
    <user>Willodean</user>
    <text>I am using nix, so I modified my nix expression to override the elm compiler source to the fork</text>
  </message>
  <message conversation_id="1776">
    <ts>2019-06-03T17:50:06.179700</ts>
    <user>Nana</user>
    <text>ah, I'm using npm :thinking_face:</text>
  </message>
  <message conversation_id="1777">
    <ts>2019-06-03T18:24:46.180100</ts>
    <user>Danika</user>
    <text>i've heard some pretty insane things about nix</text>
  </message>
  <message conversation_id="1776">
    <ts>2019-06-03T18:40:43.181000</ts>
    <user>Willodean</user>
    <text>Nix is a game changer. Not only did I easily move to the fork, but my move is now reproducible and functioning on other developers machines, as well as CI CD</text>
  </message>
  <message conversation_id="1777">
    <ts>2019-06-03T18:41:17.181300</ts>
    <user>Kris</user>
    <text>Yeah, it’s pretty cool </text>
  </message>
  <message conversation_id="1776">
    <ts>2019-06-03T18:41:31.181800</ts>
    <user>Kris</user>
    <text>I use it with direnv to manage multiple ghc versions easily </text>
  </message>
  <message conversation_id="1777">
    <ts>2019-06-03T18:46:46.182300</ts>
    <user>Danika</user>
    <text>I wonder how much of a hassle getting nix to play nice with crostini is</text>
  </message>
  <message conversation_id="1777">
    <ts>2019-06-03T18:48:01.182500</ts>
    <user>Kris</user>
    <text>What’s that </text>
  </message>
  <message conversation_id="1777">
    <ts>2019-06-03T18:48:26.182800</ts>
    <user>Danika</user>
    <text>the linux container for chromeos</text>
  </message>
  <message conversation_id="1777">
    <ts>2019-06-03T18:49:19.183100</ts>
    <user>Danika</user>
    <text>To be honest, I was thinking straight ahead to nix os</text>
  </message>
  <message conversation_id="1778">
    <ts>2019-06-04T01:10:10.000800</ts>
    <user>Raylene</user>
    <text>Nix can be installed in any distro. Nixos requires systemd</text>
  </message>
  <message conversation_id="1778">
    <ts>2019-06-04T01:11:35.002700</ts>
    <user>Raylene</user>
    <text>Nix is really really really cool. I too have modified the elm expression (in my case I just applied the `!` patch)</text>
  </message>
  <message conversation_id="1778">
    <ts>2019-06-04T02:54:58.003000</ts>
    <user>Lynn</user>
    <text>this should be the pinned message on &lt;#C0CJ3SBBM|general&gt;</text>
  </message>
  <message conversation_id="1779">
    <ts>2019-06-04T09:48:03.004700</ts>
    <user>Garnett</user>
    <text>There’s also &lt;https://github.com/elm/compiler/pull/1850&gt; which I’m using (compiled the binary myself) to get around the `--debug` crash</text>
  </message>
  <message conversation_id="1780">
    <ts>2019-06-04T12:53:45.007200</ts>
    <user>Tawnya</user>
    <text>Hey everyone.
I'm having issues with `Browser.application`. From what I understood, if I'm using `Browser.application` and I click an `a` tag with an `href` attribute, my Elm code should be called before the new page load happens.
Part of my page is in React.
When I click a link in the Elm part, my urlRequest listener is called. When I click a link in the React part, it isn't.
Is this normal behaviour?</text>
  </message>
  <message conversation_id="1780">
    <ts>2019-06-04T13:03:32.009400</ts>
    <user>Lindsey</user>
    <text>&lt;@Tawnya&gt; Its my understanding that you use application if you want elm to 'own' the page.  If elm is just a part on that page then element is what you want.  Elm doesn't know about anything outside itself (unless you tell it via ports) so it won't know about clicks in react.</text>
  </message>
  <message conversation_id="1780">
    <ts>2019-06-04T13:03:58.009900</ts>
    <user>Lindsey</user>
    <text>if elm is trying to manage the url and also react is doing the same thing, hijinks may ensue.</text>
  </message>
  <message conversation_id="1780">
    <ts>2019-06-04T13:07:06.011300</ts>
    <user>Tawnya</user>
    <text>Thanks &lt;@Lindsey&gt;. Actually, Elm is controlling the entire page, but I have React widgets inside the Elm bit,
I've just figured out that actually the url capturing only works for nodes rendered by the Elm virtual DOM &lt;https://github.com/elm/browser/blob/1.0.1/src/Elm/Kernel/Browser.js#L157&gt;</text>
  </message>
  <message conversation_id="1780">
    <ts>2019-06-04T13:07:24.011700</ts>
    <user>Tawnya</user>
    <text>So I will have to capture the React ones myself and pop them through a port.</text>
  </message>
  <message conversation_id="1780">
    <ts>2019-06-05T01:39:22.000400</ts>
    <user>Maxwell</user>
    <text>From: &lt;https://github.com/elm/browser/blob/master/examples/wasd.elm&gt;
```
subscriptions model =
  Sub.batch
    [ Keyboard.downs (D.map (Change Down) keyDecoder)
    , Keyboard.ups (D.map (Change Up) keyDecoder)
    , Window.blurs (D.succeed Blur)
    , if anyIsDown then
        Animation.deltas TimeDelta
      else
        Sub.none
    ]
```</text>
  </message>
  <message conversation_id="1781">
    <ts>2019-06-05T01:39:41.000800</ts>
    <user>Maxwell</user>
    <text>I know this code is outdated, but can anybody explain how `anyIsDown` is passed the current model?</text>
  </message>
  <message conversation_id="1781">
    <ts>2019-06-05T01:39:52.001100</ts>
    <user>Maxwell</user>
    <text>It's a function defined as:

```
anyIsDown : Model -&amp;gt; Bool
anyIsDown model =
  isDown model.north
  || isDown model.south
  || isDown model.east
  || isDown model.west
```</text>
  </message>
  <message conversation_id="1781">
    <ts>2019-06-05T01:40:22.001400</ts>
    <user>Maxwell</user>
    <text>Shouldn't that be?
```
if (anyIsDown model) then
    Animation.deltas TimeDelta
  else
    Sub.none
```</text>
  </message>
  <message conversation_id="1781">
    <ts>2019-06-05T01:42:32.002200</ts>
    <user>Earlean</user>
    <text>&lt;@Maxwell&gt; sadly that example isn't just outdated, it's for never released features.</text>
  </message>
  <message conversation_id="1781">
    <ts>2019-06-05T01:43:00.002600</ts>
    <user>Earlean</user>
    <text>yes, `anyIsDown` would need to be passed the model</text>
  </message>
  <message conversation_id="1781">
    <ts>2019-06-05T01:52:22.002900</ts>
    <user>Maxwell</user>
    <text>Ah, okay, relieved to hear that.</text>
  </message>
  <message conversation_id="1781">
    <ts>2019-06-05T01:52:51.003500</ts>
    <user>Maxwell</user>
    <text>Hmm, what do you mean by "it's for never released features".</text>
  </message>
  <message conversation_id="1781">
    <ts>2019-06-05T01:53:18.004100</ts>
    <user>Maxwell</user>
    <text>Do you mean it's kept outdated on purpose to tell that those features weren't released?</text>
  </message>
  <message conversation_id="1781">
    <ts>2019-06-05T01:59:43.005200</ts>
    <user>Earlean</user>
    <text>Nope, it's an example that was written during development and was never updated for the actual released API of the package</text>
  </message>
  <message conversation_id="1782">
    <ts>2019-06-05T06:18:26.007000</ts>
    <user>Garnett</user>
    <text>Has anyone seen/written a bytes decoder for `tar.gz` files, to be used in `Http.expectBytes` and then with `File.Download.bytes`? Could I just blindly use `Bytes.Decode.bytes` with a safely big enough number?</text>
  </message>
  <message conversation_id="1782">
    <ts>2019-06-05T06:22:55.007700</ts>
    <user>Virgie</user>
    <text>if you don't need to actually look at the bytes, a `Bytes.Decode.bytes (Bytes.width myBytes)` should be safe</text>
  </message>
  <message conversation_id="1782">
    <ts>2019-06-05T06:23:21.008200</ts>
    <user>Virgie</user>
    <text>also, you need to use `Http.expectBytesResponse` in that case; it will give you an actual `Bytes` value that you can then run the decoder on</text>
  </message>
  <message conversation_id="1782">
    <ts>2019-06-05T06:23:28.008500</ts>
    <user>Virgie</user>
    <text>or really you could just pass on that value actually</text>
  </message>
  <message conversation_id="1782">
    <ts>2019-06-05T06:23:58.009000</ts>
    <user>Virgie</user>
    <text>&lt;https://package.elm-lang.org/packages/elm/http/latest/Http#expectBytesResponse&gt;</text>
  </message>
  <message conversation_id="1782">
    <ts>2019-06-05T06:24:16.009400</ts>
    <user>Garnett</user>
    <text>yeah I just want to blindly pass the file on to be downloaded (it’s from a safe source, an internal API)</text>
  </message>
  <message conversation_id="1782">
    <ts>2019-06-05T06:24:23.009600</ts>
    <user>Virgie</user>
    <text>will give a `Result Bytes`, in the case everything went well you can pass that `Bytes` value to the download</text>
  </message>
  <message conversation_id="1782">
    <ts>2019-06-05T06:25:00.010000</ts>
    <user>Garnett</user>
    <text>That sounds perfect, thank you!</text>
  </message>
  <message conversation_id="1783">
    <ts>2019-06-05T07:57:14.013800</ts>
    <user>Bud</user>
    <text>Anyone have opinions for collecting a list of strings via a form?</text>
  </message>
  <message conversation_id="1783">
    <ts>2019-06-05T07:58:08.014000</ts>
    <user>Sharri</user>
    <text>one per line in a text area?</text>
  </message>
  <message conversation_id="1783">
    <ts>2019-06-05T07:58:23.014400</ts>
    <user>Sharri</user>
    <text>a widget like the one for adding multiple `to` recipients in an email</text>
  </message>
  <message conversation_id="1783">
    <ts>2019-06-05T07:58:45.014800</ts>
    <user>Bud</user>
    <text>Yeah, that’s likely the simplest. I’ll go with that. Thanks &lt;@Sharri&gt;</text>
  </message>
  <message conversation_id="1783">
    <ts>2019-06-05T07:58:52.015000</ts>
    <user>Sharri</user>
    <text>np</text>
  </message>
  <message conversation_id="1784">
    <ts>2019-06-05T09:52:31.015600</ts>
    <user>Garnett</user>
    <text>&lt;@Virgie&gt; got it all working very nicely with `Http.expectBytesResponse` :pray:</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:35:07.019500</ts>
    <user>Danika</user>
    <text>where is it reasonable to draw the line when describing a function as `pure` or `referentially transparent`, could you consider the follow snippet a pure function:
```
function addTen (x) {
  var result = x
  for (let i = 0; i &amp;lt; 10; i++) {
    result += 1
  }

  return result
}
```
If you pass in 12 a hundred times you'll always get 22 and its functionality doesn't change based on anything but its inputs, but is it reasonable to call this function pure?</text>
  </message>
  <message conversation_id="1786">
    <ts>2019-06-05T10:39:13.020500</ts>
    <user>Nana</user>
    <text>Wikipedia says it's impure
&lt;https://en.wikipedia.org/wiki/Pure_function&gt;</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:39:17.020900</ts>
    <user>Mindy</user>
    <text>That function returns `NaN`, did you forget to initialize `result` to the value of `x` ?</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:40:49.021300</ts>
    <user>Karissa</user>
    <text>What in this snippet is impure? there's only (non-static) local variable mutation and no side effects.</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:40:54.021500</ts>
    <user>Huong</user>
    <text>modulo the bugs, I’d say it is both pure and referentially transparent. If not, very little Elm code is pure because it happens to be implemented with JS code that actually isn’t pure</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:41:08.021700</ts>
    <user>Huong</user>
    <text>you can replace the expression with its result without any observable changes in behaviour</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:41:12.021900</ts>
    <user>Huong</user>
    <text>(modulo runtime)</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:41:45.022200</ts>
    <user>Karissa</user>
    <text>performance is not considered a side effect as far as I know ^^</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:42:13.022400</ts>
    <user>Huong</user>
    <text>Yeah, traditionally it isn’t, just being explicit for clarity</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:42:28.022600</ts>
    <user>Leoma</user>
    <text>“no variation with *local* static variables” So it’s a matter of perspective. From outside the function, it’s pure. From inside, impure. No?</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:42:45.022900</ts>
    <user>Danika</user>
    <text>&lt;@Vonnie&gt; yes good spot, that should be result = x.</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:43:33.023100</ts>
    <user>Nana</user>
    <text>&lt;@Karissa&gt; oh, so a *local static* variable in C++ wouldn't be reinitialized for each function call?</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:43:41.023300</ts>
    <user>Nana</user>
    <text>I don't know C++ :smile:</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:44:31.023500</ts>
    <user>Danika</user>
    <text>&amp;gt; From outside the function, it’s pure.
I think this is the important part. If you dig deep enough, I'm sure many "pure" languages compile down to code like this, I suppose the question is how far removed from the messy mutable bits do you have to be to consider yourself in a pure space</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:45:12.023800</ts>
    <user>Nana</user>
    <text>okay then it looks like Wikipedia agrees that it's pure too :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:46:02.024000</ts>
    <user>Danika</user>
    <text>Wonderful</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:47:41.024600</ts>
    <user>Lewis</user>
    <text>kinda crazy to mix `var` and `let` in the same code, though! :wink:</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:48:20.025400</ts>
    <user>Leoma</user>
    <text>This is beyond me, but this shows that the ST Monad, with it’s internal state, is pure from the outside
&amp;gt; “equivalences that are expected to hold for pure computations do indeed hold in the presence of stateful computations encapsulated using runST”
&lt;https://iris-project.org/pdfs/2018-popl-runST-final.pdf&gt;</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:54:02.031000</ts>
    <user>Danika</user>
    <text>Here's another one. Assume we've essentially replicated Elms runtime in javascript, and enforce purity in all the appropriate places. We need to perform a fetch request but we want to let our imaginary runtime actually do the request so we have this:
```
const fetchEffect = (url, cmd) =&amp;gt; ({
  url,
  cmd,
  run (dispatch) {
    fetch(this.url).then(data =&amp;gt; dispatch(this.cmd, data))
  }
})

const update ([cmd, ...data], model) =&amp;gt; {
  switch (cmd) {
    case 'fetchFromURL': {
      const [ url ] = data
      return [model, fetchEffect(url, 'fetched')]
    }

    case 'fetched': {
      ...
    }
  }
}
```
We can assume that dispatch is some function that the runtime provides to trigger `update`. Is this code pure? It obviously has side effects, we perform a fetch request. But we pass off the actual operation to the runtime, which is off in a library that we don't see.</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:55:33.031100</ts>
    <user>Karissa</user>
    <text>&lt;@Leoma&gt; &lt;@Nana&gt; yes a `static` local variable is the same variable for each call, it's not scoped to a particular invocation of that function (&lt;https://stackoverflow.com/questions/12186857/on-local-and-global-static-variables-in-c&gt;)</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:56:20.031400</ts>
    <user>Danika</user>
    <text>In this scenario, calling `fetchEffect('&lt;http://example.com|example.com&gt;', 'fetched')` will always produce the same object. It's the result of `run` that has no purity guarantees</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:56:34.031600</ts>
    <user>Nana</user>
    <text>but if you're calling `fetch` it's not pure</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:56:53.031800</ts>
    <user>Danika</user>
    <text>You don't call fetch, the runtime calls the `run` method of that object whenever it wants</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:58:03.032100</ts>
    <user>Danika</user>
    <text>we've created an object that describes the computation we want the runtime to perform, the object that gets created will always be the same given the same input. We've not performed any side effects</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:58:19.032300</ts>
    <user>Danika</user>
    <text>(unless we cheat and call .run() ourselves)</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:58:39.032500</ts>
    <user>Raylene</user>
    <text>It's pure</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:59:32.032700</ts>
    <user>Danika</user>
    <text>provably?</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T10:59:36.032900</ts>
    <user>Nana</user>
    <text>it still contains a call to an impure function though :thinking_face: even though you never call it yourself</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:00:40.033100</ts>
    <user>Raylene</user>
    <text>No, it does not contain a call to an impure function, it contains a lambda to that, but doesn't call it</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:01:33.033300</ts>
    <user>Raylene</user>
    <text>What do you mean by "provably"?</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:02:02.033500</ts>
    <user>Danika</user>
    <text>could you (generally, not specifically) write a proof that this is pure?</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:02:17.033700</ts>
    <user>Raylene</user>
    <text>fetchEffect is pure</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:02:24.033900</ts>
    <user>Danika</user>
    <text>nice!</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:02:34.034100</ts>
    <user>Raylene</user>
    <text>So update is obviously pure</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:02:37.034300</ts>
    <user>Raylene</user>
    <text>Now</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:03:11.034500</ts>
    <user>Raylene</user>
    <text>Proving fetchEffect is pure is the interesting bit</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:03:24.034700</ts>
    <user>Nana</user>
    <text>hmm yeah I guess it does uphold the rules on Wikipedia:
&amp;gt; 1. Its return value is the same for the same arguments (no variation with local static variables, non-local variables, mutable reference arguments or input streams from I/O devices).
&amp;gt; 2. Its evaluation has no side effects (no mutation of local static variables, non-local variables, mutable reference arguments or I/O streams).</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:03:37.034900</ts>
    <user>Raylene</user>
    <text>Yupp</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:04:33.035100</ts>
    <user>Raylene</user>
    <text>If it helps, a good approximation is "pure = if I cache the result the program doesn't change"</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:07:37.035300</ts>
    <user>Danika</user>
    <text>Indeed!</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:12:58.035900</ts>
    <user>Merlene</user>
    <text>Is there ever a time you would use a record over a custom type? Maybe for open records, and that's it? Just seems like best practice to always use custom types</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:13:53.036300</ts>
    <user>Danika</user>
    <text>Records have the nice advantage of naming their fields</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:14:21.037100</ts>
    <user>Merlene</user>
    <text>But you can have a Custom Type with a String param that you can name with a type alias... same thing?</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:14:41.037700</ts>
    <user>Danika</user>
    <text>depending on what you're doing with those fields, having a load of type aliases for a String might just be unecessary</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:15:03.038100</ts>
    <user>Merlene</user>
    <text>Ok, thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:16:04.039300</ts>
    <user>Danika</user>
    <text>You can do js-style record destructuring if you only care about certain fields in a record, you have to pattern match out all the other values in a custom type</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:17:07.040400</ts>
    <user>Danika</user>
    <text>```
type alias Name = String
...

type Person = Person Age Address Name SomethingElse

viewName : Person -&amp;gt; Html msg
viewName (Person _ _ name _) =
  ...
```</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:17:13.040600</ts>
    <user>Charity</user>
    <text>This can be helpful for poly-morphic behavior.</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:17:24.041100</ts>
    <user>Charity</user>
    <text>I'll assemble an example</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:18:19.043600</ts>
    <user>Kris</user>
    <text>The value `const a = () =&amp;gt; console.log('abc');` is as pure as any other. If you didn't know the implementation, you'd not be ever using it to perform side effects</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:18:26.044200</ts>
    <user>Danika</user>
    <text>vs
```
type alias Person =
  { age : Int
  , ...
  , name : String
  }

viewName : Person -&amp;gt; Html msg
viewName { name } =
  ...
```</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:18:44.044800</ts>
    <user>Kris</user>
    <text>That's exactly how PS handles "commands" (`Eff/Effect` monad)</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:18:46.045000</ts>
    <user>Genesis</user>
    <text>One issue with the custom type variant is that it seems easier to swap two arguments by mistake (if they both alias to String for example).
Also you'll get worse error message when trying to add other arguments to your custom type than if it was a record</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:22:14.048100</ts>
    <user>Nana</user>
    <text>you can also get some polymorphism with records, for example I have:
`fullName : {r | firstName:String, lastName:String} -&amp;gt; String`
and I have a bunch of different record types, like User, UserFull, Employee, and it works on all of them</text>
  </message>
  <message conversation_id="1787">
    <ts>2019-06-05T11:23:02.048500</ts>
    <user>Charity</user>
    <text>Simon beat me to it.  &lt;https://elmlang.slack.com/archives/C0CJ3SBBM/p1559748134048100&gt;</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:23:28.049500</ts>
    <user>Charity</user>
    <text>I was writing an example, but &lt;@Nana&gt; beat me to it.  This is a great argument for records.</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:29:44.051600</ts>
    <user>Merlene</user>
    <text>Thanks for your help all :heart: I'm currently writing some docs on when to use Custom Types to share with my work colleagues so this really helpful! Thanks</text>
  </message>
  <message conversation_id="1788">
    <ts>2019-06-05T11:36:16.052700</ts>
    <user>Genesis</user>
    <text>The way I write Elm, is that I only use custom types when I have several variants (what's called Sum types in other FP languages). :smile:</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:38:52.055200</ts>
    <user>Genesis</user>
    <text>It can sometimes be useful to use custom types to differentiate between two records with the same field statically (do you don't get them mixed up). For example:

```
type Point = Point {x : Float, y : Float }

type Vector = Vector {x : Float, y : Float }
```</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:39:12.056000</ts>
    <user>Genesis</user>
    <text>But I try to stay away from positional arguments, I find them very error prone</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T11:39:59.057200</ts>
    <user>Nana</user>
    <text>I'm using a custom type for IDs, so that they can't be mixed up - it's a bit annoying though that it makes using Dict/Set difficult</text>
  </message>
  <message conversation_id="1788">
    <ts>2019-06-05T12:28:13.059400</ts>
    <user>Maxwell</user>
    <text>If I read the right docs, I understand that the DOM is rendered on the browser's next animation frame. There are some exceptions, but usually, it works like that as far as I can see. My question is, though, when are subscriptions patched? Is it immediately whenever the model updates or in the next frame like the view?</text>
  </message>
  <message conversation_id="1789">
    <ts>2019-06-05T13:53:37.060000</ts>
    <user>Dede</user>
    <text>There are good packages that mostly resolve that, e.g. &lt;https://package.elm-lang.org/packages/turboMaCk/any-dict/latest/Dict-Any&gt;</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T14:12:41.060200</ts>
    <user>Nana</user>
    <text>yeah but they all have downsides - that one stores functions in the model, and assoc-list has worse performance</text>
  </message>
  <message conversation_id="1789">
    <ts>2019-06-05T14:34:50.060400</ts>
    <user>Dede</user>
    <text>I don't view functions in the model as a downside, but I acknowledge the community does.</text>
  </message>
  <message conversation_id="1790">
    <ts>2019-06-05T15:27:49.060600</ts>
    <user>Marquitta</user>
    <text>I stumbled across this thread a while ago, &lt;https://discourse.elm-lang.org/t/when-is-subscriptions-called/1524/2&gt;.  According to the answer, subscriptions are called on every update, there is also the relevant source code linked in the linked post</text>
  </message>
  <message conversation_id="1790">
    <ts>2019-06-05T15:36:50.060800</ts>
    <user>Marquitta</user>
    <text>oh, this one is really good, &lt;https://discourse.elm-lang.org/t/when-is-subscriptions-called/1524/6&gt;</text>
  </message>
  <message conversation_id="1785">
    <ts>2019-06-05T16:49:47.062800</ts>
    <user>Leeanne</user>
    <text>I have created some small package with list range generation abstraction for custom types that have increment/decrement function implementations available:
&lt;https://package.elm-lang.org/packages/vViktorPL/elm-incremental-list/latest/&gt;</text>
  </message>
  <message conversation_id="1791">
    <ts>2019-06-05T22:27:32.063100</ts>
    <user>Leoma</user>
    <text>I’m using assoc-list. I have animations running on requestanimationframe speed. It’s fast enough for that with small (dozens) of entries.</text>
  </message>
  <message conversation_id="1792">
    <ts>2019-06-06T04:48:01.065300</ts>
    <user>Dora</user>
    <text>Hi there, anyone found cure for that `not enough bytes` compiler crash? Today I’m having that literally after each change. `rm -rf elm-stuff &amp;amp;&amp;amp; yarn start` after each occurence but few changes and BAM, I’m there again :confused:</text>
  </message>
  <message conversation_id="1792">
    <ts>2019-06-06T04:49:58.066300</ts>
    <user>Dora</user>
    <text>I’m using webpack runner and `elmcast/elm-vim` plugin. Could it be clash of those two? Any ideas are welcomed.</text>
  </message>
  <message conversation_id="1792">
    <ts>2019-06-06T04:51:58.066400</ts>
    <user>Iona</user>
    <text>It usually happens when there are multiple compiler processes at the same time. They end up clobbering files in `elm-stuff`, leaving a partial file. Hence the `not enough bytes`. This is one of the issues that we hope is corrected in 0.19.1 as Evan has been making changes in the compiler around this</text>
  </message>
  <message conversation_id="1792">
    <ts>2019-06-06T04:55:29.066600</ts>
    <user>Florencia</user>
    <text>try disabling `elm-vim` to see if it helps</text>
  </message>
  <message conversation_id="1793">
    <ts>2019-06-06T05:00:53.066900</ts>
    <user>Valeria</user>
    <text>Hello to everybody, Wednesday at 4 p.m. CEST I’m organising a webinar about : What we’ll experience at elm Europe ? I’m waiting for you all. Will give you the url at the time of the webinar.</text>
  </message>
  <message conversation_id="1792">
    <ts>2019-06-06T05:22:13.067100</ts>
    <user>Dora</user>
    <text>&lt;@Iona&gt; thanks, I know that it is causesed by that multiple processes run, I was just a bit frustrated by not knowing where those processes come from :confused: I’ll try to disable that `elm-vim` plugin and see if it helps.</text>
  </message>
  <message conversation_id="1794">
    <ts>2019-06-06T06:21:19.068400</ts>
    <user>Tawnya</user>
    <text>Hi beautiful people.
Is there a standard way to parse query strings? With Url.Parser I can get the query string itself, but I was hoping to have it turned into a Dict.</text>
  </message>
  <message conversation_id="1794">
    <ts>2019-06-06T06:23:41.068700</ts>
    <user>Lynne</user>
    <text>There is a `Url.Parser.Query` module</text>
  </message>
  <message conversation_id="1794">
    <ts>2019-06-06T06:25:44.069400</ts>
    <user>Lynne</user>
    <text>It can’t just give you a dict with arbitrary keys though. You need to know parameter names and their types to use this module.</text>
  </message>
  <message conversation_id="1794">
    <ts>2019-06-06T06:30:23.070200</ts>
    <user>Tawnya</user>
    <text>hehee silly me, I totally overlooked `Url.Parser.Query`</text>
  </message>
  <message conversation_id="1794">
    <ts>2019-06-06T06:30:31.070600</ts>
    <user>Tawnya</user>
    <text>Thanks &lt;@Lynne&gt; !</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:46:21.071700</ts>
    <user>Danika</user>
    <text>Was there ever any discussion about putting event listeners in `subscriptions` rather than in `view`, if there was what sort of discussion was that, and if there wasn’t why not/ what do you think about that idea now you’ve heard it</text>
  </message>
  <message conversation_id="1794">
    <ts>2019-06-06T06:48:22.072100</ts>
    <user>Lynne</user>
    <text>Are you talking about listening to all clicks in the document and dispatching them in `subscriptions` according to their targets?</text>
  </message>
  <message conversation_id="1794">
    <ts>2019-06-06T06:49:12.072300</ts>
    <user>Lynne</user>
    <text>Or what exactly do you mean, could you elaborate?</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:50:59.072500</ts>
    <user>Danika</user>
    <text>```
view : Model -&amp;gt; Html
view model =
  button [ "incr-button" ]
    [ text "+" ]

subscriptions : Model -&amp;gt; Sub Msg
subscriptions model =
  Sub.batch
    [ onClick ".incr-button" Increment
    , ...
    ]
```</text>
  </message>
  <message conversation_id="1794">
    <ts>2019-06-06T06:51:42.072700</ts>
    <user>Lynne</user>
    <text>So pretty much what I said, right?</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:52:14.072900</ts>
    <user>Danika</user>
    <text>Indeed, although the implementation itself is perhaps another discussion.</text>
  </message>
  <message conversation_id="1794">
    <ts>2019-06-06T06:52:27.073100</ts>
    <user>Lynne</user>
    <text>Feels very jquery’ish :smile:</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:52:46.073400</ts>
    <user>Danika</user>
    <text>I’m just interested in fielding some opinions about the separation of the View and events</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:52:53.073600</ts>
    <user>Danika</user>
    <text>In a good way or a bad way?</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:53:09.073900</ts>
    <user>Lynne</user>
    <text>Neither nor</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:54:09.074100</ts>
    <user>Lynne</user>
    <text>It just seems to be a jquery way: given a document find everything matching criteria and enrich it with something</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:54:14.074300</ts>
    <user>Lynne</user>
    <text>Click handlers in this case</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:54:46.074500</ts>
    <user>Huong</user>
    <text>Reminds me of cycles.js. I don’t know if it was considered; but to me it seems like prone to breakage and typos. Of course, a type-safe selector syntax could be thought up, but you’d still end up with having 2 separate places that need to know about your document structure, rather than _only_ the view.

Personally, I like to think of the view as being a subscription: it’s triggered on every update, and sets up a way to gather incoming events.</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:55:59.074700</ts>
    <user>Earlean</user>
    <text>Yeah, you can certainly think of `view` as a subscription.</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:56:31.074900</ts>
    <user>Lynne</user>
    <text>Yeah, same thinking, though sometimes you just can’t get rid of dispatching clicks from `subscriptions` but in my practice it was the other way around: if clicked on something EXCEPT &amp;lt;this&amp;gt; do this</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:56:51.075100</ts>
    <user>Huong</user>
    <text>(similar to how `onUrlRequest`/`onUrlChange` in `Browser.application` are basically “a mandatory subscription”, and - in 0.18 - were actually implemented as an implicit subscription)</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:57:01.075300</ts>
    <user>Lynne</user>
    <text>Like if you want to hide an open dropdown by clicking elsewhere</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:57:24.075500</ts>
    <user>Earlean</user>
    <text>Attaching event handlers to your view elements via subscriptions would require a lot of duplicated logic because your subscriptions would need to result in the right event handlers being created for the current elements in the `view`</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:57:48.075700</ts>
    <user>Earlean</user>
    <text>That was always the problem with Jquery</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:58:06.075900</ts>
    <user>Danika</user>
    <text>Yes, it’s very similar to cycle’s “sinks”. It’s reasonable to conceptualise the view as a type of subscription, which is partly why I’ve been thinking about this alternative way of doing things.

(to be clear, I don’t expect / want / think elm should change to this, but its interesting to think about)

Right now `subscriptions` is the place to respond to events, _except_ for the DOM that’s special. I wonder whether that separation is necessary / useful.</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:58:51.076100</ts>
    <user>Huong</user>
    <text>Yeah, from the “mandatory subscription” POV, the separation makes sense to me</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T06:59:25.076300</ts>
    <user>Earlean</user>
    <text>Subscriptions is called after every `update` but `view` waits for the animation frame, that's an important difference</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T07:00:39.076500</ts>
    <user>Danika</user>
    <text>&amp;gt; Indeed, although the implementation itself is perhaps another discussion.
&lt;@Earlean&gt; I’d really like to just focus the discussion on the premise, rather than how to make it happen.
&lt;@Huong&gt; more sense that cycle’s sinks?</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T07:04:03.076700</ts>
    <user>Danika</user>
    <text>&amp;gt; Attaching event handlers to your view elements via subscriptions would require a lot of duplicated logic because your subscriptions would need to result in the right event handlers being created for the current elements in the `view`
I can see [duplicated logic] being both a positive and a negative. Given both would be created from the same model it should be difficult to attach the _wrong_ listeners.

You’re right that for the majority of applications you’d probably end up verbatim copying logic from the view to subscriptions, but there are some more complicated usecases where separating event logic from view logic may be useful</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T07:06:50.076900</ts>
    <user>Danika</user>
    <text>For context, I’m building an elm-like framework in js with a focus on audio applications. There’s a uniform api for creating DOM nodes and Web Audio nodes but audio events go in the `subscriptions` equivalent, it got me thinking why the dom gets “special treatment” in this regard</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T07:17:17.077100</ts>
    <user>Lynne</user>
    <text>I think, mostly for convenience sake</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T07:21:36.077300</ts>
    <user>Danika</user>
    <text>There are probably some genuine performance / implementation issues too, but fair enough! Thanks for the discussion everyone.</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T07:27:11.077500</ts>
    <user>Earlean</user>
    <text>Early Elm had  Signals which unifies a lot of event handling but it turns out to be difficulty for beginners, had some hard to understand gotchas and usage converged on TEA anyway</text>
  </message>
  <message conversation_id="1795">
    <ts>2019-06-06T07:28:21.077700</ts>
    <user>Danika</user>
    <text>I think signals are another kettle of fish, I agree that FRP can be a complex beast _especially_ if you’re knew to fp in general as well</text>
  </message>
  <message conversation_id="1796">
    <ts>2019-06-06T10:55:36.080300</ts>
    <user>Tawnya</user>
    <text>Hey folks, I'm using `Url.Parser.Query` and I'm not finding it the most straightforward thing really.
Does anyone know why it defines its own `Parser` type instead of using the parser from the `Parser` module? It doesn't have `andThen`, `succeed` or `problem` which are functions that would make life quite a bit easier.</text>
  </message>
  <message conversation_id="1796">
    <ts>2019-06-06T11:59:08.080800</ts>
    <user>Lynne</user>
    <text>Probably it was developed for different set of scenarios &lt;@Tawnya&gt; What is your case if you could share?</text>
  </message>
  <message conversation_id="1796">
    <ts>2019-06-06T12:01:34.081900</ts>
    <user>Lynne</user>
    <text>`Url.Parser` does not expose `andThen`, `succeed` and `problem` either. It looks like you compare it with `elm/parser`’s `Parser` but that is a completely different thing.</text>
  </message>
  <message conversation_id="1796">
    <ts>2019-06-06T12:16:50.082800</ts>
    <user>Tawnya</user>
    <text>Yep, that is my question. Why is it a completely different thing? Aren't both cases for string parsing?</text>
  </message>
  <message conversation_id="1796">
    <ts>2019-06-06T12:18:17.083900</ts>
    <user>Lynne</user>
    <text>`elm/parser`’s `Parser` is a generic tool to parse whatever string but `Url.Parser` is more like a DSL to represent how URLs are structured. It is much higher level and thus more limited.</text>
  </message>
  <message conversation_id="1796">
    <ts>2019-06-06T12:18:41.084200</ts>
    <user>Lynne</user>
    <text>But I am not the author of the package so I am only guessing</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T17:32:43.085800</ts>
    <user>Erlene</user>
    <text>I have some JavaScript that needs to get some value out of an Elm model. So I can send a message using subscriptions, but I suppose that returns immediately without any value. How do I wait properly for Elm to return me that message?</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T17:34:40.086200</ts>
    <user>Niesha</user>
    <text>There's no way to wait synchronously, gotta do it async.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T17:42:51.086400</ts>
    <user>Erlene</user>
    <text>hmm, polling is annoying.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T17:45:56.087000</ts>
    <user>Danika</user>
    <text>You can promisify the two ports</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T17:46:54.087400</ts>
    <user>Erlene</user>
    <text>ah, thanks, I've never used that technique, need to look into that.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T17:49:51.088800</ts>
    <user>Lindsey</user>
    <text>I dunno what promisifying is, but you can set up a port with a callback in js, for data that comes out of elm.  Then you send your request in via another port.  Elm gets the message and responds by hopefully calling your callback.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T17:59:08.089800</ts>
    <user>Erlene</user>
    <text>&lt;@Danika&gt; are there any examples? I can't easily see how this will work. I was looking at util.promisify(), but my elm calls are of a different kind then the examples I see.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:04:44.090400</ts>
    <user>Nana</user>
    <text>yeah it's a little different in this case since Elm doesn't use the request/callback model</text>
  </message>
  <message conversation_id="1798">
    <ts>2019-06-06T18:05:12.090600</ts>
    <user>Nana</user>
    <text>but should be doable</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:06:47.091100</ts>
    <user>Niesha</user>
    <text>Send a token along, and succeed the Promise once a response with that token comes back</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:10:18.092400</ts>
    <user>Hoyt</user>
    <text>&lt;@Adrianna&gt; Just wanted to say that we’ve started using your form-decoder library, and it is really great, so far.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:11:46.093800</ts>
    <user>Briana</user>
    <text>&lt;@Erlene&gt; Are you familiar with Ports? You'll probably have something like this:

```
app.ports.myFunction.subscribe(function(data) {
  // in here, data is the thing you're looking for
});
```

Where `myFunction` is a `port` (defined in Elm).</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:12:47.094500</ts>
    <user>Erlene</user>
    <text>&lt;@Briana&gt; the issue is not with ports, perfectly familiar with them. This is the first time my JavaScript needs to retrieve a value from an Elm model. That does not appear to be super easy.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:13:15.095100</ts>
    <user>Briana</user>
    <text>Javascript doesn't have a way to reach into Elm and get anything, per say.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:13:59.095700</ts>
    <user>Briana</user>
    <text>You'll need to setup your Javascript to expect that, some day, at some point, the Elm code will push the value out.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:14:38.096200</ts>
    <user>Briana</user>
    <text>(Via a port)</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:15:47.098000</ts>
    <user>Briana</user>
    <text>_Something_ needs to happen to trigger that value getting sent to the JS (even if that something is the application initializing).</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:16:15.098600</ts>
    <user>Erlene</user>
    <text>&lt;@Briana&gt; I need to get a specific named value from a model, the specific name varies, and comes from the javascript side. To continuously copying all these values to javascript is not needed, especially since this is only needed for running BDD tests.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:17:43.100600</ts>
    <user>Briana</user>
    <text>You could definitely create an incoming port (JS -&amp;gt; Elm) that passes the key of the thing you need and have an outgoing port (Elm -&amp;gt; JS) that passes the value back in response.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:17:53.101100</ts>
    <user>Kris</user>
    <text>I don’t understand why you don’t seem to want to use ports</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:18:23.101200</ts>
    <user>Briana</user>
    <text>It's my impression that, especially in 0.19, there isn't a choice.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:18:48.101800</ts>
    <user>Kris</user>
    <text>I was talking to &lt;@Erlene&gt; </text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:18:59.102000</ts>
    <user>Briana</user>
    <text>Yup!</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:19:39.102200</ts>
    <user>Erlene</user>
    <text>&lt;@Kris&gt; I definitely am using ports! The point is that I need to poll for the response.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:20:32.103500</ts>
    <user>Erlene</user>
    <text>&lt;@Briana&gt; yes, that's how it works. The problem is I need to poll for the response.</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:20:45.103900</ts>
    <user>Briana</user>
    <text>Why do you need to poll for the response? Shouldn't the port's callback on the JS side trigger every time the port is fired from Elm?</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:21:52.105000</ts>
    <user>Briana</user>
    <text>(I'm almost certainly missing something about your testing setup, so I apologize if I'm way off base here!)</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:22:34.105500</ts>
    <user>Briana</user>
    <text>(Also, I'm so sorry, but I need to run. I'll try to be around on phone!)</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T18:23:54.106000</ts>
    <user>Erlene</user>
    <text>it needs to appear to be synchronous to the caller.</text>
  </message>
  <message conversation_id="1799">
    <ts>2019-06-06T21:51:59.106800</ts>
    <user>Dexter</user>
    <text>I think I had a similar problem Berend.
Ended up wrapping up my calls with transactions ids. Then when Elm has handled your cmd it returns the result with the given transaction id</text>
  </message>
  <message conversation_id="1799">
    <ts>2019-06-06T21:53:09.107000</ts>
    <user>Dexter</user>
    <text>(and on the JS part the port is wrapped by a class that just returns a promise and resolves when Elm is ready)</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T22:32:07.107200</ts>
    <user>Erlene</user>
    <text>Yeah, the promise stuff is new to me, not immediately clear to handle that. Have seen another person mention transaction ids as well. Is that something special, or just a random opaque value?</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T23:39:28.108200</ts>
    <user>Erlene</user>
    <text>Has anyone ever passed a file from javascript to Elm 0.19 using elm/file?</text>
  </message>
  <message conversation_id="1797">
    <ts>2019-06-06T23:40:01.108700</ts>
    <user>Erlene</user>
    <text>I'm thinking this should be possible using the Elm.File.decoder perhaps.</text>
  </message>
  <message conversation_id="14510">
    <ts>2019-06-06T23:41:45.109500</ts>
    <user>Earlean</user>
    <text>Yep, you can send a file in to Elm as a Json.Decode.Value via a port or flags or grab it off an event</text>
  </message>
</slack>