<slack>
  <team_domain>racket</team_domain>
  <channel_name>general</channel_name>
  <start_date>2014-11-07T12:02:12.695655</start_date>
  <end_date>2017-12-31T01:00:01.596486</end_date>
  <message conversation_id="1">
    <ts>2017-05-11T15:46:08.512661</ts>
    <user>Jacob</user>
    <text>`db` library doesn't seem to provide support for executing batch statements against a database. I'm trying to initialize and create an in-memory database using a SQL schema file. `query-exec` and its friends only support executing single SQL statements. Reading documentation isn't showing me a way to be able to execute more than one statement at once or allow a SQL text file to be read in and executed. Does anyone know a better method?</text>
  </message>
  <message conversation_id="2">
    <ts>2017-05-12T10:21:29.214211</ts>
    <user>David</user>
    <text>Is there a `match` predicate in the standard libraries? Something that means “if this given value matches this given pattern, then return `#t`, else return `#f`.” I keep finding myself writing this in terms of `match`, and I feel like there should be a better way.</text>
  </message>
  <message conversation_id="2">
    <ts>2017-05-12T11:21:34.597619</ts>
    <user>Theron</user>
    <text>&lt;@David&gt; I thought there was one, but cannot find it, so I may have imagined it. There's `check-match` from `rackunit` for tests (it does not return a boolean). Otherwise, seems like you will have to roll your own.</text>
  </message>
  <message conversation_id="2">
    <ts>2017-05-12T11:39:00.996497</ts>
    <user>David</user>
    <text>&lt;@Theron&gt;: Thank you for your answer.</text>
  </message>
  <message conversation_id="2">
    <ts>2017-05-12T11:47:05.175228</ts>
    <user>David</user>
    <text>&lt;@Theron&gt;: I’m doing something about this: &lt;https://github.com/racket/racket/issues/1690&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1">
    <ts>2017-05-12T14:03:18.960113</ts>
    <user>Melvina</user>
    <text>I read Fortifying Macros by Culpepper and Felleisen, where ports of `loop` and `parser` were made using `syntax-parse`. I can't seem to find the code for those, though. Does anybody know where/if they can be found?</text>
  </message>
  <message conversation_id="3">
    <ts>2017-05-12T16:09:26.321438</ts>
    <user>Jacob</user>
    <text>Answered by Alex Harsanyi on Racket Users listserv.</text>
  </message>
  <message conversation_id="1">
    <ts>2017-05-12T16:12:57.381337</ts>
    <user>Eun</user>
    <text>&lt;@Melvina&gt;: I'd email &lt;@Natosha&gt; and ask.</text>
  </message>
  <message conversation_id="1">
    <ts>2017-05-12T19:13:13.647582</ts>
    <user>Theron</user>
    <text>&lt;@Melvina&gt; Wait, so there's (already) a Racket implementation of the CL `loop` hiding somewhere?
_Throwing a glance at my early implementation draft which has been bitrotting for the last few weeks…_
Be sure to post back here if you get an answer from &lt;@Natosha&gt; !</text>
  </message>
  <message conversation_id="1">
    <ts>2017-05-12T19:33:34.790796</ts>
    <user>Kimbery</user>
    <text>&lt;@Theron&gt;: &lt;http://planet.racket-lang.org/display.ss?package=loop.plt&amp;amp;owner=jphelps&gt;</text>
  </message>
  <message conversation_id="1">
    <ts>2017-05-12T20:30:48.115167</ts>
    <user>Theron</user>
    <text>&lt;@Kimbery&gt; Sweet, thanks a lot!</text>
  </message>
  <message conversation_id="4">
    <ts>2017-05-12T20:52:21.207456</ts>
    <user>Corey</user>
    <text>Has anyone used, from `scribble/srcdoc`, any of `parameter-doc`, `thing-doc`, or `struct-doc`? All give me `"illegal use of syntax"` errors.  Whereas `proc-doc` works great.</text>
  </message>
  <message conversation_id="4">
    <ts>2017-05-12T20:53:18.211125</ts>
    <user>Corey</user>
    <text>For instance
```
#lang at-exp racket/base

(require scribble/srcdoc
         (for-doc racket/base
                  scribble/manual))

(define current-foo (make-parameter "bar"))

(parameter-doc current-foo
               (parameter/c string?)
               v
               @{Hi})
```</text>
  </message>
  <message conversation_id="4">
    <ts>2017-05-12T21:33:45.364198</ts>
    <user>Vincenzo</user>
    <text>&lt;@Corey&gt; A better error message would have been "must be used within a `provide` form" (and I'm guessing that you've used `proc-doc` successfully within `provide`)</text>
  </message>
  <message conversation_id="4">
    <ts>2017-05-12T21:52:33.426666</ts>
    <user>Corey</user>
    <text>&lt;@Vincenzo&gt; Thanks! I'd wrapped `proc-doc` in a `define/doc` macro, long enough ago, that I forgot it was nested in a `provide`. Dang.</text>
  </message>
  <message conversation_id="4">
    <ts>2017-05-12T22:35:17.559970</ts>
    <user>Corey</user>
    <text>It would be neat if &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; showed, in addition to direct dependencies, direct dependents ("needed by") as for example &lt;https://melpa.org/#/helm&gt;</text>
  </message>
  <message conversation_id="4">
    <ts>2017-05-13T13:50:20.226789</ts>
    <user>Corey</user>
    <text>Meanwhile: &lt;https://gist.github.com/greghendershott/b20effb9d9c48211e1c11d9486257918&gt; ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="5">
    <ts>2017-05-13T15:27:53.590389</ts>
    <user>Theron</user>
    <text>&lt;@Clorinda&gt; Thanks for the tip about using `Regexp` instead of `-Regexp`!
I'm checking that everything runs fine now, but I have issues with `tc-err`.
The test `[tc-err (ann (ann #px#"abc" Byte-PRegexp) PRegexp)]` fails:
```
actual:     (tc-results (list (tc-result PRegexp (Top | Bot) -)) #f)
expected:   (tc-results (list (tc-result Nothing (Bot | Bot) -)) #f)
```
I feel like I should supply one of the `ret:err-return` or `ex:expected` arguments to `tc-err`, but their exact meaning is not documented. Any hint?</text>
  </message>
  <message conversation_id="5">
    <ts>2017-05-13T15:29:31.595652</ts>
    <user>Clorinda</user>
    <text>I don't know there exact meaning either and wish it was documented =( that code is really clever/cute and I always struggle re-parsing what exactly it does</text>
  </message>
  <message conversation_id="5">
    <ts>2017-05-13T15:35:26.616470</ts>
    <user>Theron</user>
    <text>&lt;@Clorinda&gt; Seems like this does the trick (as I understand it, `tc-err` checks that the return type is correct, even if an error is there, and `ann` is clever enough to indicate its return type, even when it fails)
```
[tc-err (ann (ann #px#"abc" Byte-PRegexp) PRegexp) #:ret (tc-ret -PRegexp)]
```</text>
  </message>
  <message conversation_id="5">
    <ts>2017-05-13T15:53:29.679509</ts>
    <user>Theron</user>
    <text>&lt;@Clorinda&gt; Sorry for bothering you once more: in generalize.rkt, should I do `[(? (lambda (t) (subtype t -Base-Regexp))) -Base-Regexp]` (to generalize literals which are `regexp?` to `-BaseRegexp`), or should I generalize to `-Regexp`, i.e. `[(? (lambda (t) (subtype t -Base-Regexp))) -Regexp]` ?
I tried to see if it made any difference in the way the type is printed when entering a literal `#rx"abc"` at the REPL, but it makes no difference.
I also expected `(let ([x #rx"foo"]) (set! x #px"foo"))` to fail in the second case (generalizing to `-Base-Regexp`), but it still works (so it seems something else is further generalizing `-Base-Regexp` to `-Regexp`).
Any preference? I feel this will matter only if/when we decide to make the `Base-Regexp` type "public" (for now it seems to be used internally only).</text>
  </message>
  <message conversation_id="5">
    <ts>2017-05-13T18:20:46.159069</ts>
    <user>Clorinda</user>
    <text>&lt;@Theron&gt; sorry for the delay -- I'm not super familiar with typing regexps... my gut is to favor the more general Regexp, but like I said I don't have much experience working with those in practice</text>
  </message>
  <message conversation_id="5">
    <ts>2017-05-13T18:22:59.165498</ts>
    <user>Theron</user>
    <text>&lt;@Clorinda&gt; Okay, thanks! I'll put Regexp then (I think if we expose Basic-Regexp at some point, the user could always force it with (ann #rx"abc" Basic-Regexp).</text>
  </message>
  <message conversation_id="5">
    <ts>2017-05-14T11:48:12.794286</ts>
    <user>Theron</user>
    <text>I and others expressed concern in the past about Slack's logs, which are limited to 10K messages.
Seems like we could do something about it: &lt;https://github.com/mlegy/Slack-logger-bot&gt;
I don't have time to look into this right now, but it could be at some point a compromise between setting up a full-blown chat server (which some of the regulars rightfully expressed concerns about, since it increases the maintenance burden for the Racket team), and having a free-to-use-but-without-logs service like Slack.</text>
  </message>
  <message conversation_id="6">
    <ts>2017-05-14T12:12:25.871842</ts>
    <user>Helga</user>
    <text>isn’t this slack archived in that one public logging service for slack (forget the name)?</text>
  </message>
  <message conversation_id="6">
    <ts>2017-05-14T12:19:21.893661</ts>
    <user>Helga</user>
    <text>&lt;https://racket.slackarchive.io/&gt;</text>
  </message>
  <message conversation_id="6">
    <ts>2017-05-14T12:19:33.894346</ts>
    <user>Helga</user>
    <text>I don’t know if the logs are exportable</text>
  </message>
  <message conversation_id="6">
    <ts>2017-05-14T13:23:07.101024</ts>
    <user>Theron</user>
    <text>&lt;@Helga&gt; Hm. I thought the slackarchive log was also limited, but it seems it goes back further in time (the earliest message I can get in &lt;#C06V96CKX|general&gt; is from march 14th, but slackarchive goes back to November 15th). That's cool :slightly_smiling_face:</text>
  </message>
  <message conversation_id="7">
    <ts>2017-05-14T18:15:31.022736</ts>
    <user>Nelson</user>
    <text>anyone know how to center a `tabular` in a pdf?</text>
  </message>
  <message conversation_id="7">
    <ts>2017-05-14T18:42:22.102126</ts>
    <user>Nelson</user>
    <text>(well, renewing the `bigtabular` environment to `tabular` for the main document --- then back to `pltstabular` for the bibliography --- works as a LaTeX-level fix)</text>
  </message>
  <message conversation_id="7">
    <ts>2017-05-15T00:41:04.781681</ts>
    <user>Nelson</user>
    <text>&lt;@Sharolyn&gt; &lt;@Stefani&gt;  I just tried to make a new package and am getting "Save failed."</text>
  </message>
  <message conversation_id="7">
    <ts>2017-05-15T09:12:44.648389</ts>
    <user>Theron</user>
    <text>&lt;@Nelson&gt; Have a look at `tex-addition`. You can use that to inject LaTeX code and renew the environment "by hand", I suppose.</text>
  </message>
  <message conversation_id="7">
    <ts>2017-05-15T11:13:38.406036</ts>
    <user>Vincenzo</user>
    <text>&lt;@Nelson&gt; If I remember correctly, using `@tabular[#:style 'block]` has the same effect as switching to `tabular` at the Latex level, so `@centered` plus `@tabular[#:style 'block]` should work</text>
  </message>
  <message conversation_id="7">
    <ts>2017-05-15T15:05:04.494398</ts>
    <user>Nelson</user>
    <text>I think the problem was my tag `syntax/parse`</text>
  </message>
  <message conversation_id="8">
    <ts>2017-05-15T20:05:26.115110</ts>
    <user>Kimbery</user>
    <text>I’ve somehow managed to break my DrRacket installation in a confusing way. When I start it up, or when I run any module, the following error message is produced in the interactions window:
```
racket/collects/racket/compiled/errortrace/runtime-config_rkt.zo::1: read (compiled): wrong version for compiled code
  compiled version: 6.8.0.2
  expected version: 6.9.0.4
```
I’ve tried removing `racket/build/` and `racket/racket/src/build/` and re-running `make base`, and I’ve tried running `raco setup --clean` and rebuilding everything with `raco setup`, but the problem is still there, and I’m not sure what’s causing it or how to fix it.</text>
  </message>
  <message conversation_id="8">
    <ts>2017-05-15T20:08:05.137746</ts>
    <user>Kimbery</user>
    <text>I can’t seem to trigger the error at all in the REPL. Switching off debugging in the DrRacket Language menu also makes the issue go away, so it has _something_ to do with errortrace, but I don’t know what.</text>
  </message>
  <message conversation_id="8">
    <ts>2017-05-15T20:08:56.144789</ts>
    <user>Kimbery</user>
    <text>Maybe DrRacket’s .zos don’t get cleaned out by `raco setup --clean`?</text>
  </message>
  <message conversation_id="8">
    <ts>2017-05-15T20:13:58.186767</ts>
    <user>Kimbery</user>
    <text>Yeah, it seems like that may have been the problem. I ran `find racket/collects -type d -name errortrace -exec rm -rf {} \;` and that seemed to fix the issue. I still wonder what caused it, though…</text>
  </message>
  <message conversation_id="9">
    <ts>2017-05-16T01:50:11.521530</ts>
    <user>Roxanne</user>
    <text>Hey folks! Our startup &lt;http://Standuply.com|Standuply.com&gt; has partnered with two awesome events for AI, ML and chatbot enthusiasts. One is called Chatbot Summit and will be held in BERLIN on 26th of June. Now can offer you 30% discount. Visit their website at &lt;http://bit.ly/chatbotsummit|bit.ly/chatbotsummit&gt; and use the promo code STANDUPLYBOTS in order to get it.</text>
  </message>
  <message conversation_id="9">
    <ts>2017-05-16T01:50:27.523428</ts>
    <user>Roxanne</user>
    <text>The other one is AL ML World 2017 - in LONDON on 13-15 of June, we offer you 20% discount. Same thing - visit their vebsite at &lt;http://bit.ly/aimlworld2017|bit.ly/aimlworld2017&gt; and use promocode STANDUPLY</text>
  </message>
  <message conversation_id="9">
    <ts>2017-05-16T01:50:47.525617</ts>
    <user>Roxanne</user>
    <text>Hope this information will be helpful for those who might need it :wink:</text>
  </message>
  <message conversation_id="10">
    <ts>2017-05-16T14:09:58.245475</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; &lt;@Latarsha&gt; &lt;@Eun&gt; &lt;@Tina&gt; or someone else with admin privileges, gleb seems like a spam bot.  (If you are a real person I apologize.)</text>
  </message>
  <message conversation_id="10">
    <ts>2017-05-16T14:10:34.259061</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; I don't think we need to do anything unless someone spams multiple times</text>
  </message>
  <message conversation_id="10">
    <ts>2017-05-16T14:10:47.263625</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; okay</text>
  </message>
  <message conversation_id="10">
    <ts>2017-05-16T14:11:17.274905</ts>
    <user>Tina</user>
    <text>I don't think I have any admin privileges. </text>
  </message>
  <message conversation_id="10">
    <ts>2017-05-16T14:11:31.279774</ts>
    <user>Rosalee</user>
    <text>&lt;@Tina&gt; Oops, sorry.</text>
  </message>
  <message conversation_id="10">
    <ts>2017-05-16T14:11:58.289284</ts>
    <user>Rosalee</user>
    <text>Ya, I don’t know who manages this slack instance, only the #racket irc channel.</text>
  </message>
  <message conversation_id="10">
    <ts>2017-05-16T14:18:31.431990</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; I think I'm the person to talk to, or &lt;@Allen&gt;</text>
  </message>
  <message conversation_id="10">
    <ts>2017-05-16T14:21:06.488306</ts>
    <user>Rosalee</user>
    <text>Alright, good to know for future reference, thanks.</text>
  </message>
  <message conversation_id="11">
    <ts>2017-05-16T15:08:33.548824</ts>
    <user>Martin</user>
    <text>does raco test support just running a single test within a module?</text>
  </message>
  <message conversation_id="11">
    <ts>2017-05-16T15:36:12.111421</ts>
    <user>Stefani</user>
    <text>jamesswaine: It doesn't know anything about the tests in the module. It just runs the test submodule. It might be possible to use the same code that counts the number of tests to quit after a certain number of them</text>
  </message>
  <message conversation_id="11">
    <ts>2017-05-16T15:43:32.260042</ts>
    <user>Martin</user>
    <text>ah okay, bummer, i sort of figured</text>
  </message>
  <message conversation_id="11">
    <ts>2017-05-16T15:44:20.276463</ts>
    <user>Martin</user>
    <text>yeah i was looking for something like what rspec gives you (ruby testing framework), where you can run a specific test in a suite by giving either a name or source line number on the command line</text>
  </message>
  <message conversation_id="11">
    <ts>2017-05-16T16:13:40.891517</ts>
    <user>Tina</user>
    <text>&lt;@Martin&gt; that would be super useful, I agree. Right now the pipe of information isn’t very rich, but there is one, so it could probably be extended.  This is the current library: &lt;https://github.com/racket/rackunit/blob/master/testing-util-lib/rackunit/log.rkt&gt;</text>
  </message>
  <message conversation_id="11">
    <ts>2017-05-16T16:14:40.911781</ts>
    <user>Tina</user>
    <text>I imagine that someone could add something to say “I am interested only in tests with this name” or “on this line in this file” and then rackunit could look there and `raco test` could initialize it.</text>
  </message>
  <message conversation_id="11">
    <ts>2017-05-16T16:17:25.966631</ts>
    <user>Tina</user>
    <text>(not that that’d be high on your priority list, of course :wink: )</text>
  </message>
  <message conversation_id="11">
    <ts>2017-05-16T16:33:05.289955</ts>
    <user>Martin</user>
    <text>haha, well, i’ve been wanting that forever so</text>
  </message>
  <message conversation_id="12">
    <ts>2017-05-16T16:38:57.410112</ts>
    <user>Chantelle</user>
    <text>&lt;@Theron&gt; The highlighting change you proposed is super neat and makes me wonder if you could combine `scribble/lp` with cover usefully</text>
  </message>
  <message conversation_id="11">
    <ts>2017-05-16T17:18:03.171641</ts>
    <user>Latarsha</user>
    <text>&lt;@Martin&gt; I've found various command line forms like that very useful in python, so consider this another vote :wink:</text>
  </message>
  <message conversation_id="13">
    <ts>2017-05-16T17:25:59.308727</ts>
    <user>Julianna</user>
    <text>raco setup take forever…. and mostly on scribbling docs it seems like? has anyone looked at where the bottlenecks are in that process?</text>
  </message>
  <message conversation_id="13">
    <ts>2017-05-16T17:26:46.322194</ts>
    <user>Julianna</user>
    <text>&amp;gt;1GB of RAM for raco setup also seems a bit surprising.</text>
  </message>
  <message conversation_id="13">
    <ts>2017-05-16T17:29:22.366278</ts>
    <user>Latarsha</user>
    <text>&lt;@Julianna&gt; a lot of it is typed racket + plot</text>
  </message>
  <message conversation_id="13">
    <ts>2017-05-16T17:29:34.369463</ts>
    <user>Latarsha</user>
    <text>see &lt;http://build-plot.racket-lang.org|build-plot.racket-lang.org&gt; for details</text>
  </message>
  <message conversation_id="13">
    <ts>2017-05-16T19:21:14.812199</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; what specific part of typed racket causes the speed issues? Is it some weird artifact of how typed racket is implemented or is the type checking process itself just that expensive?</text>
  </message>
  <message conversation_id="13">
    <ts>2017-05-16T19:21:47.817953</ts>
    <user>Latarsha</user>
    <text>we believe that the type checking process is expensive</text>
  </message>
  <message conversation_id="14">
    <ts>2017-05-16T19:22:13.822243</ts>
    <user>Kimbery</user>
    <text>I eagerly await absolutely abysmal Hackett compile-times</text>
  </message>
  <message conversation_id="13">
    <ts>2017-05-16T20:20:35.356976</ts>
    <user>Stefani</user>
    <text>@jamesswainer &lt;@Latarsha&gt; &lt;@Tina&gt; - I think that raco test could do something like "raco test args files -- more" and when it ran an individual test submodule, it could make "more" be (current-command-line-arguments) then we could change rackunit, chk. eli-tester, and other popular testing libraries to look at those arguments to determine whether to run </text>
  </message>
  <message conversation_id="13">
    <ts>2017-05-16T20:20:35.356979</ts>
    <user>Stefani</user>
    <text>a test. For example, if it was empty, then they'd run everything, otherwise they'd consider it a set of tags to run, etc</text>
  </message>
  <message conversation_id="15">
    <ts>2017-05-16T20:23:33.382823</ts>
    <user>Theron</user>
    <text>&lt;@Chantelle&gt; thanks :slightly_smiling_face: . I added the highlighting stuff to &lt;http://docs.racket-lang.org/hyper-literate/&gt; (online docs are not up-to-date yet).
The highlighting form `@hlite[name pat . code]` works like `@chunk[name . code]`, but also expects a pattern. The pattern indicates which portions of the code should be highlighted as added/removed/dimmed/normal, so e.g. `{+ _ _ - _}` will highlight the first two expressions in green and the third in red (patterns can be more complex than that, and I hope to add support for syntax/parse-like syntax `{a:+ b:+ c:-}` soon, as it is more readable for complex patterns.
So I think it should be reasonably easy to generate the pattern from the coverage information, but we would have to add line numbers to `hlite` first, though — don't hold your breath, it won't happen overnight :slightly_smiling_face:.</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-16T20:27:23.413469</ts>
    <user>Tina</user>
    <text>It seems reasonable to consider a more general solution but there is something to be said (both error messagewise and human convenience wise) for a shorter command line. Maybe we can solve that with some specific shorthands, starting from the ruby experience that &lt;@Martin&gt; enjoyed?</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-16T20:33:48.465479</ts>
    <user>Latarsha</user>
    <text>From my pytest experience, the shorthand I used most was '-k foo' which ran every test whose name included foo</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-16T20:45:59.560013</ts>
    <user>Tina</user>
    <text>I am often copying a single test out and running it over and over as I work towards a fix for a bug, and generally in tests suites where I didn't bother to name the tests (like the thousands of tests in the contract system), so an option that took a line number would be great for me.  </text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-16T22:40:00.423935</ts>
    <user>Latarsha</user>
    <text>Right, I agree that the exact same thing wouldn't be as effective in Racket</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-16T22:40:16.425966</ts>
    <user>Latarsha</user>
    <text>Just documenting my experience</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-16T22:40:42.428789</ts>
    <user>Latarsha</user>
    <text>The other option I used a lot was "stop on first failure"</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T09:38:26.835594</ts>
    <user>Martin</user>
    <text>i do agree with robby that shorter is preferable, but support in any form is better than nothing</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T09:38:54.845609</ts>
    <user>Martin</user>
    <text>in the ruby rspec case, you just have `rspec &amp;lt;file&amp;gt;:&amp;lt;line-number&amp;gt;`</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T09:39:40.862001</ts>
    <user>Tina</user>
    <text>also, now that I think about it, it would be nice if DrRacket could get in on the fun too, so having the `raco test` command-line be a thin wrapper over a prgorammable interface would be nice</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T09:39:43.863166</ts>
    <user>Tina</user>
    <text>programmable</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T09:40:02.870459</ts>
    <user>Latarsha</user>
    <text>&lt;@Martin&gt; the major issue is that the current way rackunit works/is used is to just run the code, and testing is a side effect</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T09:40:14.874746</ts>
    <user>Martin</user>
    <text>right</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T09:40:22.877822</ts>
    <user>Latarsha</user>
    <text>whereas rspec/pytest/etc collect tests and then run them</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T09:45:04.980804</ts>
    <user>Martin</user>
    <text>would it be better to roll something totally different as opposed to bolting it onto raco test?</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T09:45:07.982212</ts>
    <user>Martin</user>
    <text>or worse?</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T15:57:08.602331</ts>
    <user>Corey</user>
    <text>robby: In that scenario, I could imagine giving that one test a name, then? (Maybe the name even includes the bug number; maybe handy to commit that edit for posterity, idk.)

That _seems_ plausible, to me, because often I'd be mucking in the test file or submodule, anyway. Say to write a comment with the bug number, and/or add more, regression test(s).

TL;DR: Maybe tests could be lazily named -- if/as/ever needed.  And that would fit with a run-tests-named-x feature.</text>
  </message>
  <message conversation_id="17">
    <ts>2017-05-17T15:58:19.628001</ts>
    <user>Helga</user>
    <text>&lt;@Theron&gt; hyper-literate seems pretty interesting</text>
  </message>
  <message conversation_id="16">
    <ts>2017-05-17T16:09:32.862557</ts>
    <user>Tina</user>
    <text>good point!</text>
  </message>
  <message conversation_id="17">
    <ts>2017-05-17T16:16:03.994831</ts>
    <user>Theron</user>
    <text>&lt;@Helga&gt; Thanks :slightly_smiling_face: For now it's mostly a collection of wishes for the future, though.
The features which are actualy implemented and useful are
* Choice of the language for `@chunk`s
* Choice of the at-exp `@` character, e.g. change it to `♦` or `꩜`, like with the `_-exp` package
* Ability to save chunks and show them multiple times (including display (but not definition (yet)) inside list items, whereas with `scribble/lp2` you cannot put a chunk in a list item at all)
* And very recently, highlighting parts of the code.
So there's not much yet, but given infinite time and resources, I would like to add the missing features:
* It's not drawing DrRacket-like arrows in the HTML,
* It's not showing the contract/type on hover
* It's not hyperlinking identifiers to their definition site
* It lacks an interactive REPL embedded in the HTML (we'll need a full-blown `whalesong` for that :smile: or a running server)
* It lacks a step-by-step debugger embedded in the HTML (but well, that would be very interesting for stepping through macro code running at compile-time, and we still don't have that in DrRacket yet!)
* It certainly lacks user-driven code navigation in the spirit of Code Bubbles (although that might not be as hard as it seems to actually implement, most of the information is there, and it needs a bit of glue and some HTML+JS UI)
* It definitely lacks multi-module capabilities (the HTML page should not be limited to describing a single `.rkt` file)
* It certainly lacks the possibility to write the literate program as an interactive story. Ideally, the reader would start with a nearly empty file, and choose an action (define foo, define bar, read the overview, …) and gradually build the program that way, with the possibility from the writer's point of view to switch between a couple of more or less in-depth explanations depending on whether an identifier was already defined or not). But that's me daydreaming :slightly_smiling_face:

The exciting part is that we can in principle get 90% of the way thanks to the awesomeness of Racket's macros and Scribble, without having to change language's core.</text>
  </message>
  <message conversation_id="18">
    <ts>2017-05-17T16:49:42.668864</ts>
    <user>Ka</user>
    <text>any good tutorials on using slideshow?</text>
  </message>
  <message conversation_id="18">
    <ts>2017-05-17T16:50:09.678192</ts>
    <user>Ka</user>
    <text>the documentation is pretty good, but i'm looking for quick helpers to make doing things like background images and font changes quick and easy</text>
  </message>
  <message conversation_id="18">
    <ts>2017-05-17T16:52:02.715588</ts>
    <user>Ka</user>
    <text>(i assume tutorials would have helpers or something that make that easy...)</text>
  </message>
  <message conversation_id="18">
    <ts>2017-05-17T18:16:13.101671</ts>
    <user>Theron</user>
    <text>&lt;@Ka&gt; I vaguely remember some of last year's racketcon presentations were made with `#lang slideshow`, but the website only hosts the PDFs. And a quick search for `#lang slideshow` on github did not return any code results. Maybe try to ask on the mailing list? I'm sure some people have some code lying around.</text>
  </message>
  <message conversation_id="18">
    <ts>2017-05-17T18:33:28.314286</ts>
    <user>Augustine</user>
    <text>Here's the code for a talk I gave last year, it's not a good example of well written racket code, but it demonstrates some of the things you can do in slideshow &lt;https://github.com/dfeltey/lwc2016/blob/master/talk/slides.rkt&gt;</text>
  </message>
  <message conversation_id="18">
    <ts>2017-05-17T20:29:39.443098</ts>
    <user>Ka</user>
    <text>&lt;@Theron&gt; ok. thanks!</text>
  </message>
  <message conversation_id="18">
    <ts>2017-05-18T09:53:22.203610</ts>
    <user>Tina</user>
    <text>&lt;@Ka&gt; I turn some of my talks into packages; links here: &lt;http://www.eecs.northwestern.edu/~robby/talks/&gt;</text>
  </message>
  <message conversation_id="18">
    <ts>2017-05-18T11:08:56.106161</ts>
    <user>Latarsha</user>
    <text>&lt;@Ka&gt; also &lt;@Vincenzo&gt; posted the source for all of his slideshow talks here: &lt;https://github.com/mflatt/talks&gt;</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T11:39:15.875493</ts>
    <user>Eun</user>
    <text>&lt;@Latarsha&gt;: I'm about merge TR PR 540 (from @georges-duperon). I noticed that the merge button seems to default to "squash and merge". Is that a repo setting you set?</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T11:39:57.892606</ts>
    <user>Eun</user>
    <text>FWIW, it's not what I want here (squash + rebase + merge is what I want), but switching the default to "rebase + merge" on the racket repos would be nice.</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T11:42:01.944942</ts>
    <user>Latarsha</user>
    <text>&lt;@Eun&gt; yes, that's a setting</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T11:42:25.953331</ts>
    <user>Latarsha</user>
    <text>I think "squash and merge" means "squash + rebase + merge"</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T11:42:53.965756</ts>
    <user>Latarsha</user>
    <text>and "rebase + merge" doesn't squash, but sqaush + merge without rebase doesn't make sense AFAICT</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T11:43:06.971050</ts>
    <user>Eun</user>
    <text>Ah, found it.</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T11:43:13.973925</ts>
    <user>Eun</user>
    <text>Disabling merge commits for racket/racket.</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T11:44:44.010858</ts>
    <user>Eun</user>
    <text>Doesn't seem to be an org-wide setting. Will write a script to do all of them later.</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T12:48:58.498459</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Is it okay if I merge this: &lt;https://github.com/racket/scribble/pull/111&gt;</text>
  </message>
  <message conversation_id="19">
    <ts>2017-05-18T12:58:18.700665</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; I left a suggestion (version and `history`) in the PR</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T13:14:03.041915</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt;: Could I ask you to take a quick look at this PR? It should be brief; the changeset is very small. &lt;https://github.com/racket/r5rs/pull/2&gt;</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T13:14:55.059973</ts>
    <user>Kimbery</user>
    <text>Someone else would probably also be able to review it, but it looks like you’re the primary maintainer for that repo?</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T13:16:25.092004</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; Done. (Does anyone have a guess at why GitHub sends me email alerts only sometimes?)</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T13:16:35.095722</ts>
    <user>Kimbery</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T13:18:00.125624</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt;: I have email notifications turned off for watched repos but turned on for threads I’ve participated in. What do your settings look at for the Notifications section in your GitHub settings?</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T13:18:13.130369</ts>
    <user>Eun</user>
    <text>&lt;@Vincenzo&gt;: There was a point in time where not all our repos had email integration, but I fixed that a couple (few?) months ago.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T13:18:57.145583</ts>
    <user>Vincenzo</user>
    <text>I have everything checked except "Include your own updates"</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T13:19:46.162360</ts>
    <user>Vincenzo</user>
    <text>I haven't yet tried unchecking "web"; maybe N browser tabs on GitHub confuse it?</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T13:20:25.176665</ts>
    <user>Kimbery</user>
    <text>I have no idea what the issue is then. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:49:24.356908</ts>
    <user>Eun</user>
    <text>&lt;@Kimbery&gt;: From the git history, it looks like you've been involved with the homebrew packaging for Racket. Is that correct?</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:49:39.362202</ts>
    <user>Kimbery</user>
    <text>I think I touched it once to update it</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:49:53.367026</ts>
    <user>Eun</user>
    <text>That's more than I have. :)</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:49:58.368610</ts>
    <user>Kimbery</user>
    <text>but it was a very easy change, IIRC</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:50:00.369005</ts>
    <user>Eun</user>
    <text>Any idea about &lt;https://github.com/racket/racket/issues/1680&gt;</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:50:02.369645</ts>
    <user>Eun</user>
    <text>?</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:50:22.376381</ts>
    <user>Eun</user>
    <text>ISTR we've had other reports, possibly about similar things, with homebrew before.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:50:47.384653</ts>
    <user>Kimbery</user>
    <text>I’m not sure, but I could make guesses. I don’t (and never have) run Racket from a Homebrew installation</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:51:38.400909</ts>
    <user>Eun</user>
    <text>Do you know how the main person behind Racket's homebrew package is?</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:52:46.422465</ts>
    <user>Kimbery</user>
    <text>I’m afraid I have no idea.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:55:48.482357</ts>
    <user>Kimbery</user>
    <text>&lt;@Eun&gt;: It sounds like Homebrew renamed the formula to `minimal-racket`, but whatever the installation is does not properly set the relevant prefix. I’m a bit surprised by this, since the formula appears to pass the right `--prefix` option.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T15:57:47.521600</ts>
    <user>Eun</user>
    <text>Hmm, that does sound odd.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T16:00:24.574292</ts>
    <user>Kimbery</user>
    <text>It looks like &lt;@David&gt; did the initial rename of `racket` to `minimal-racket`, so perhaps he knows more about this issue.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T16:05:10.670020</ts>
    <user>Eun</user>
    <text>&lt;@Kimbery&gt;: Talking to @florence, it seems like there's a cask for Racket, that uses our installers. So probably best to use that, instead of the recipe.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T16:05:26.674671</ts>
    <user>Eun</user>
    <text>So we may be able to just ask for the recipe to be removed. I'll post on the mailing list.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T16:07:38.717357</ts>
    <user>Latarsha</user>
    <text>&lt;@Eun&gt; I think some people have expressed a preference for formulas over casks</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T16:07:46.720150</ts>
    <user>Latarsha</user>
    <text>not that I understand this at all</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T16:08:09.727644</ts>
    <user>Eun</user>
    <text>I think most people also prefer working things to broken ones. :)</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T16:12:10.802833</ts>
    <user>Kimbery</user>
    <text>I think having the `minimal-racket` installation is a good idea if we can get it working. It mentions in the description to use the cask if you want the full installation.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T16:13:00.818166</ts>
    <user>Eun</user>
    <text>Yep, would be nice to get it working. But unless you're volunteering, it may be better to remove it. :)</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:08:49.866293</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; &lt;@Vincenzo&gt;: I can take a look at the broken test</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:21:14.072349</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt;, &lt;@Vincenzo&gt;: it seems like the relevant file, `psyntax.sch` is generated from `psyntax-input.txt`? is that true? if so, how do I regenerate it?</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:26:46.165355</ts>
    <user>Latarsha</user>
    <text>I think by running psyntax :wink:</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:27:01.169264</ts>
    <user>Latarsha</user>
    <text>but we don't want to be breaking that code, do we?</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:28:14.189133</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt;: `psyntax-input.txt` has a note that it was modified from the original version, and the offending line is a modified line that uses `[` `]` instead of parens.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:28:31.193975</ts>
    <user>Kimbery</user>
    <text>so my guess is that modification was basically a mistake and it should be replaced with parens.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:28:45.197791</ts>
    <user>Latarsha</user>
    <text>ah ok</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:41:20.398523</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt;: fixing `psyntax-input.txt` makes `raco test -l tests/racket/benchmarks/common/psyntax` pass, but it doesn’t change `psyntax.sch`, so I’m not sure if that’s a problem or not.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:42:08.410486</ts>
    <user>Latarsha</user>
    <text>I believe the problem (based solely on the change and what I think might happen) is that psyntax.sch calls `read` to read in `psyntax-input.sch`</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:42:21.413612</ts>
    <user>Latarsha</user>
    <text>and your change caused it to fail on the `[]` there</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:42:38.417748</ts>
    <user>Latarsha</user>
    <text>so we shouldn't need to change `psyntax.sch` at all</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:51:33.550757</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt;: what confuses me is that `psyntax.sch` is clearly a generated file, and it also has a single pair of square brackets that appear to correspond to the single pair of square brackets in `psyntax-input.txt`</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:52:35.566172</ts>
    <user>Latarsha</user>
    <text>those are read by the implementation of `read` inside `include` in `scheme/include` (see `psyntax.rkt`) which will accept them</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:53:03.572995</ts>
    <user>Kimbery</user>
    <text>right, but I’m still left wondering how `psyntax.sch` was created in the first place</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:55:40.609648</ts>
    <user>Latarsha</user>
    <text>probably by running psyntax on a system with different treatment of []</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:55:58.614287</ts>
    <user>Latarsha</user>
    <text>such as racket/r5rs before your change, or chez, or something</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:56:49.626456</ts>
    <user>Kimbery</user>
    <text>what I’m really getting at is that it seems like maybe `psyntax.sch` ought to be kept in sync with `psyntax-input.txt` and I don’t know how to do that</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:57:05.630203</ts>
    <user>Kimbery</user>
    <text>but if you are okay with just changing `psyntax-input.txt` so that the test passes, I have a patch I can push</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:58:11.645926</ts>
    <user>Latarsha</user>
    <text>That's my suggestion</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-18T17:59:01.658241</ts>
    <user>Kimbery</user>
    <text>alright, pushed</text>
  </message>
  <message conversation_id="21">
    <ts>2017-05-18T18:51:22.284887</ts>
    <user>Ka</user>
    <text>&lt;@Tina&gt; &lt;@Latarsha&gt; thanks for the links to slideshow talks. I gave a successful talk last night with slideshow (not *on* racket), but wasn't quite happy with the way the slides looked. Was happy with the tool itself though.</text>
  </message>
  <message conversation_id="21">
    <ts>2017-05-18T18:59:23.369874</ts>
    <user>Ka</user>
    <text>OK, so I guess what I didn't realize about slideshow, but now do, is that it doesn't do much more than create the UI and handle keyboard events, and provide some very naive things. Basically, it gives you the minimal scaffolding in order to build custom slideshows with the whole power of pict.</text>
  </message>
  <message conversation_id="21">
    <ts>2017-05-18T19:00:00.376308</ts>
    <user>Ka</user>
    <text>now that I have that understanding, it's even better.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T12:47:20.160100</ts>
    <user>David</user>
    <text>&lt;@Kimbery&gt;, &lt;@Eun&gt;: My involvement with the Racket formula/cask in Homebrew is: (1) I use the cask as my main Racket installation on my development machine; (2) I sometimes update the cask when a new version of Racket is released (other times other people do it before me); and (3) a few months ago the Homebrew team wanted to remove duplicates, so they removed the Racket cask, only giving the Minimal Racket version—I asked them to bring back the Racket cask.

In summary, I’m far from being a maintainer :stuck_out_tongue:

That said, if there’s anything I can do to help, I’m here :slightly_smiling_face:</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T12:56:58.347164</ts>
    <user>Eun</user>
    <text>&lt;@David&gt;: That's already more maintenance than the non-cask version gets.</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T12:57:02.348443</ts>
    <user>Eun</user>
    <text>Thanks for your help!</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T13:14:55.701087</ts>
    <user>David</user>
    <text>&lt;@Eun&gt;: My pleasure :slightly_smiling_face:</text>
  </message>
  <message conversation_id="22">
    <ts>2017-05-19T16:14:19.123570</ts>
    <user>Nelson</user>
    <text>&lt;@Vincenzo&gt; can you look at the "Last,First parsing" PR when you have time: &lt;https://github.com/racket/scribble/pull/92&gt;</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T16:19:31.209189</ts>
    <user>Kimbery</user>
    <text>I have a complex situation where I’m stashing an identifier somewhere and then pulling it out somewhere else, and I’m getting an unbound identifier error, but there are too many moving parts for me to figure out what is going on :/</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T16:20:17.222280</ts>
    <user>Kimbery</user>
    <text>I’ve been trying to use &lt;@Theron&gt;’s `debug-scopes` package, but I’m not totally sure how to read its output</text>
  </message>
  <message conversation_id="22">
    <ts>2017-05-19T16:40:08.549551</ts>
    <user>Vincenzo</user>
    <text>&lt;@Nelson&gt; That's &lt;@Stefani&gt;'s code, so he may have an opinion; I have no objections</text>
  </message>
  <message conversation_id="22">
    <ts>2017-05-19T16:40:35.557138</ts>
    <user>Nelson</user>
    <text>ok thank you</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T16:47:48.672374</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; what does the output look like?</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T16:48:21.680841</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; I ended up managing to fix it, but tbh I’m not sure why it works</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T16:49:45.702330</ts>
    <user>Kimbery</user>
    <text>typeclasses are real complicated :no_mouth:</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T18:23:57.884175</ts>
    <user>Theron</user>
    <text>&lt;@Kimbery&gt; You have to use `(displayln (+scopes id))`, and it indicates the scopes with sub/superscript numbers. Each Racket scope (which normally has a large 7-digit numeric identifier) is given a short and readable number starting with `0`. Ranges are indicated with `³˙˙⁹` (3 till 9). When you are done printing the scopes of one or more ids and stx objects, you'll want to call `(print-full-scopes)`, which prints a table associating short numbers with their long counterpart as well as other info (if it is a macro, use-site or module scope, and the module name for module scopes, i.e. the info that you get in DrRacket's macro stepper).</text>
  </message>
  <message conversation_id="20">
    <ts>2017-05-19T18:28:13.922833</ts>
    <user>Theron</user>
    <text>I'm not automatically running `(print-full-scopes)`, because it would clutter the output. Also, after executing `(print-full-scopes)` the scope counter is reset (and `+scopes` therefore starts numbering scopes starting from `0` again), so if you want to compare two ids, you have to call `(displayln (+scopes id1)) (displayln (+scopes id2)) (print-full-scopes)`, possibly across several macro invocations (I should probably add a parameter to `print-full-scopes` to ask it to not reset the counter).</text>
  </message>
  <message conversation_id="23">
    <ts>2017-05-22T12:34:34.026088</ts>
    <user>Tina</user>
    <text>&lt;@Niesha&gt; just noticed: &lt;https://plt.eecs.northwestern.edu/pkg-build/server/built/deps/debug.txt&gt;</text>
  </message>
  <message conversation_id="24">
    <ts>2017-05-23T14:28:55.983452</ts>
    <user>Jacob</user>
    <text>&lt;@Natosha&gt; hi Ryan, I would like to contribute a pull request in the near future to improve the `'multiple statements given'` error message being returned from `db` package when working with Sqlite3 databases. My changes involve the `connection.rkt` and `ffi.rkt` files in `collects/db/private/sqlite3` directory in the main racket repository. Since those files aren't in the `db` repository, where would be the appropriate place to put tests in? My guess is the `db` repository but wasn't sure.</text>
  </message>
  <message conversation_id="24">
    <ts>2017-05-23T14:30:34.023606</ts>
    <user>Eun</user>
    <text>&lt;@Jacob&gt;: I'm not ryanc, but I'd assume that would be the place: &lt;https://github.com/racket/db/tree/master/db-test/tests/db&gt;</text>
  </message>
  <message conversation_id="24">
    <ts>2017-05-23T14:32:21.065446</ts>
    <user>Jacob</user>
    <text>that was my first thought, I'd need to submit separate pull requests against the db repo and the racket repo, is that fine?</text>
  </message>
  <message conversation_id="24">
    <ts>2017-05-23T14:32:49.076379</ts>
    <user>Latarsha</user>
    <text>&lt;@Jacob&gt; yes, that's fine</text>
  </message>
  <message conversation_id="24">
    <ts>2017-05-23T14:34:41.119037</ts>
    <user>Jacob</user>
    <text>ok thank you</text>
  </message>
  <message conversation_id="25">
    <ts>2017-05-23T15:06:39.839037</ts>
    <user>Stefani</user>
    <text>mflatt: I get a really weird error building old versions of Racket on Ubuntu 16.04 --- &lt;https://gist.github.com/jeapostrophe/b8f7256657d490f83f5a453db049bf5a&gt; --- I've got it on 5.92, 5.93, 6.0 and 6.3</text>
  </message>
  <message conversation_id="24">
    <ts>2017-05-23T15:06:55.844908</ts>
    <user>Natosha</user>
    <text>&lt;@Jacob&gt;, confirming stamourv's and samth's answers</text>
  </message>
  <message conversation_id="25">
    <ts>2017-05-23T15:07:29.856797</ts>
    <user>Stefani</user>
    <text>the same error is here --- &lt;https://github.com/racket/racket/issues/1222&gt;</text>
  </message>
  <message conversation_id="25">
    <ts>2017-05-23T15:08:24.876403</ts>
    <user>Stefani</user>
    <text>so the problem is that back then we used a different compiler, so there wasn't a problem. very weird!</text>
  </message>
  <message conversation_id="24">
    <ts>2017-05-23T15:24:58.215742</ts>
    <user>Latarsha</user>
    <text>&lt;@Natosha&gt; would it be reasonable to disable the 4 failing tests here: &lt;http://drdr.racket-lang.org/40417/racket/share/pkgs/macro-debugger/tests/macro-debugger/all-tests.rkt&gt;</text>
  </message>
  <message conversation_id="25">
    <ts>2017-05-23T15:25:52.234582</ts>
    <user>Vincenzo</user>
    <text>&lt;@Stefani&gt; the xform step works by knowing that various functions are predefined and won't trigger a GC; that approach interacts badly with C headers that expand things that look like functions in different ways, since xform is looking at preprocessed input</text>
  </message>
  <message conversation_id="25">
    <ts>2017-05-23T15:26:53.255549</ts>
    <user>Stefani</user>
    <text>Ya, I think I understand the problem. I'm thinking about how to effectively warn users that old versions are broken because GCC isn't backwards compatible. It's a weird problem.</text>
  </message>
  <message conversation_id="25">
    <ts>2017-05-23T15:27:41.272225</ts>
    <user>Vincenzo</user>
    <text>probably you just want to annotate the definitions of `mz_long_double_eqv` and `double_eqv` with `XFORM_SKIP_PROC`, which goes after the argument list and before the function's opening `{`</text>
  </message>
  <message conversation_id="25">
    <ts>2017-05-23T15:28:15.284137</ts>
    <user>Vincenzo</user>
    <text>Oh – you're not just looking for a way to make the compile go through?</text>
  </message>
  <message conversation_id="25">
    <ts>2017-05-23T16:47:20.955041</ts>
    <user>Stefani</user>
    <text>mflatt: correct, i know how to make it work. i'm thinking about what to do about people that email saying all the old versions are broken because they are trying to build on a modern linux distribution.</text>
  </message>
  <message conversation_id="25">
    <ts>2017-05-23T16:53:27.081609</ts>
    <user>Vincenzo</user>
    <text>I think we don't get those requests because old software generally doesn't build</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:25:06.706282</ts>
    <user>Kimbery</user>
    <text>I have a sort of diabolical abuse of the macroexpander that produces an unbound identifier error, and I don’t understand why. Here’s a pasterack link, though pasterack produces a different error: &lt;http://pasterack.org/pastes/92495&gt;</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:25:24.711808</ts>
    <user>Kimbery</user>
    <text>The actual error I get when really running the program is this:
```
the-binding2: unbound identifier;
 also, no #%top syntax transformer is bound
```</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:26:23.729071</ts>
    <user>Kimbery</user>
    <text>I don’t understand why the identifier is unbound, though. I think I must be missing something about how scopes get introduced in this sort of situation, but I don’t know how to debug this problem.</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:27:55.756077</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; or &lt;@Latarsha&gt;, might either of you be able to help me with this? I realize this program is pretty bizarre, but yes, it is a reduction of a real (admittedly quite evil ;)) thing I am trying to do in Hackett.</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:28:08.759945</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; you seem to have `#@plain-app` where you mean `#%plain-app`</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:28:20.763593</ts>
    <user>Kimbery</user>
    <text>Yeah, I noticed that, but it doesn’t affect the program.</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:28:49.772161</ts>
    <user>Kimbery</user>
    <text>Here’s a fixed paste: &lt;http://pasterack.org/pastes/48560&gt;</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:30:46.808338</ts>
    <user>Latarsha</user>
    <text>I don't really understand what's going on there, but it looks like the usual issue where you communicate the identifier behind the back of the macro expander and thus it doesn't have the right scope</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:31:45.825786</ts>
    <user>Kimbery</user>
    <text>Yeah. I’m just not sure in this case how to arrange for the right scope, or even what scope is getting added or removed.</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:32:47.843513</ts>
    <user>Kimbery</user>
    <text>I think that to do this “right” might require some additional cooperation from the macroexpander, so right now it’s pretty hacky. :)</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:34:42.876091</ts>
    <user>Latarsha</user>
    <text>the problem is that when you expand the `lambda` that `bind` generates, it adds a scope to the binder and to the body</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:35:02.881669</ts>
    <user>Latarsha</user>
    <text>but that isn't there on the reference, since the reference is hidden from the expander in a parameter</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:35:46.893947</ts>
    <user>Kimbery</user>
    <text>that makes sense. so I might be able to expand the `lambda`, then stash the identifier with the extra scope on it.</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:36:09.900450</ts>
    <user>Latarsha</user>
    <text>yes</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:37:26.921598</ts>
    <user>Kimbery</user>
    <text>hmm, that gives me an `identifier used out of context` error, though I could be doing something else wrong.</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:38:07.932565</ts>
    <user>Latarsha</user>
    <text>really you want to put the identifier in some macro in the body of the lambda, and arrange for that macro to put it in the parameter</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:38:50.944411</ts>
    <user>Kimbery</user>
    <text>yeah. I should probably explain the actual motivation behind this whole thing, since it’s pretty gross and there might be a better way.</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:39:36.956906</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; Like this?
```
      [(#%plain-app @%bind-id ~! e:expr)
       (let ([id-to-bind (generate-temporary 'the-binding)])
         (exp #`(λ (#,id-to-bind)
                  (let-syntax ([result-transformer
                                (make-variable-like-transformer
                                 (parameterize ([current-id #'#,id-to-bind])
                                   (exp (walk+expand #'e))))])
                    result-transformer))))]

```</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:43:32.021834</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt;: Thanks, that works in that case, but it doesn’t seem to work in my real situation. I’ll fiddle with it a bit and see if I can make it work.</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:43:52.027075</ts>
    <user>Kimbery</user>
    <text>All this is actually part of typeclass dictionary elaboration. I need to perform a sort of “delimited expansion” where I leave placeholders in the expansion where typeclass dictionaries will be inserted later. However, I can’t call `local-expand` with a stop-list, since that won’t recursively expand.</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:44:03.029870</ts>
    <user>Latarsha</user>
    <text>right, what &lt;@Vincenzo&gt; said, although I have often wrapped that pattern in a macro called something like `(put-in-parameter id-to-bind expr)`</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T17:48:30.102690</ts>
    <user>Kimbery</user>
    <text>Yep, that seems to have worked. Thanks &lt;@Latarsha&gt; and &lt;@Vincenzo&gt;. I think this `local-expand` abuse is probably not the best solution to what I’m doing, but I admit I am not 100% sure what I’m doing, and it seems to sort of work so far. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="26">
    <ts>2017-05-23T18:01:08.305054</ts>
    <user>Kimbery</user>
    <text>I think, with those changes, I have working typeclasses in Racket. :)</text>
  </message>
  <message conversation_id="27">
    <ts>2017-05-24T14:03:52.029529</ts>
    <user>Stefani</user>
    <text>mflatt: I have a process that uses a lot of memory (more than system has) and I would expect it to give me an out of memory error. Instead, I get ```unmap failed: 7fda46834000, 16384, 12 [x100]</text>
  </message>
  <message conversation_id="27">
    <ts>2017-05-24T14:03:52.029537</ts>
    <user>Stefani</user>
    <text>mprotect failed: 7fdb09ea0000, 16384, 1, 12</text>
  </message>
  <message conversation_id="27">
    <ts>2017-05-24T14:03:52.029541</ts>
    <user>Stefani</user>
    <text>Seg fault (internal error during gc) at 0x7fdb09ea16c0</text>
  </message>
  <message conversation_id="27">
    <ts>2017-05-24T14:03:52.029542</ts>
    <user>Stefani</user>
    <text>SIGSEGV SEGV_ACCERR SI_CODE 2 fault on 0x7fdb09ea16c0```</text>
  </message>
  <message conversation_id="27">
    <ts>2017-05-24T14:09:27.157988</ts>
    <user>Stefani</user>
    <text>Why does racket not just abort when the unmap/mprotect fail? (As an aside, when I run without JIT, I don't get the segfault, but it appears to run forever.)</text>
  </message>
  <message conversation_id="27">
    <ts>2017-05-24T14:10:41.185267</ts>
    <user>Stefani</user>
    <text>If I increase the number of mmaps, with: "sysctl -w vm.max_map_count=131060", then I run out of memory (as I would otherwise expect). [Reading the manual suggest that when you unmap in the middle of a region, then it has to make two, so munmap consumes resources.]</text>
  </message>
  <message conversation_id="27">
    <ts>2017-05-24T14:38:23.816388</ts>
    <user>Vincenzo</user>
    <text>&lt;@Stefani&gt; It would make sense to abort if `munmap` or `mprotect` fails; I guess the current behavior is misguided optimism</text>
  </message>
  <message conversation_id="27">
    <ts>2017-05-24T16:49:04.585230</ts>
    <user>Stefani</user>
    <text>mflatt: k, i'll submit a pull request. I think the mprotect can be particular bad because it can cause the write barrier to not install.</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T00:56:58.513223</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt;, &lt;@Latarsha&gt;, &lt;@Tina&gt;: Is there a recommended way to include a piece of syntax in the expansion of a macro for the purposes of letting DrRacket pick up origin and disappeared-use/binding properties without actually impacting the program in any other way?</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T00:58:14.521755</ts>
    <user>Kimbery</user>
    <text>Right now I am producing a bunch of pieces of syntax that are basically nested invocations of `void`, so I end up with something silly like `(let () (void (void) (void (void) (void)))) my-real-expression)`.</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T00:58:50.525656</ts>
    <user>Kimbery</user>
    <text>But I am not sure if Racket guarantees that those will get optimized away or not.</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T06:46:15.950439</ts>
    <user>Tina</user>
    <text>I think they'll be gone. You can use raco decompile to check. </text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T09:38:29.201770</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; usually I use `(quote blah)` but I'm confident `void` works too</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T11:27:54.727730</ts>
    <user>Kimbery</user>
    <text>ok, thanks. checking with decompile is a good idea.</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T16:10:28.025759</ts>
    <user>Tina</user>
    <text>&lt;@Kimbery&gt; racket subscribes to the macro writers bill of rights iiuc, so you can consider not eliminating things like that to be bugs, I believe.</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T19:23:17.079090</ts>
    <user>Chantelle</user>
    <text>&lt;@Tina&gt; what do you mean "macro writers bill of rights"? are you using that phrase as a metaphor or is there some document somewhere that says what macro writers can expect racket to handle gracefully when it comes to macro expansion?</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T19:23:43.083234</ts>
    <user>Tina</user>
    <text>It is by Kent Dybvig</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T19:23:54.085196</ts>
    <user>Kimbery</user>
    <text>there’s a talk somewhere on youtube about it IIRC</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T19:24:07.087301</ts>
    <user>Kimbery</user>
    <text>though tbh I remember finding that talk a little vague</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-25T21:46:12.259520</ts>
    <user>Corey</user>
    <text>Somewhat specific starting at 13:00 &lt;https://youtu.be/LIEX3tUliHw?t=13m&gt;</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-26T00:34:54.412179</ts>
    <user>Kimbery</user>
    <text>I’m doing a lot of really weird things with syntax, and I have run into a `quote-syntax: cannot use identifier tainted by macro transformation` error, which unfortunately lists `racket/private/stxcase` as its source location. Is there any good way to debug these sorts of errors?</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-26T00:35:12.414151</ts>
    <user>Kimbery</user>
    <text>I remember running into them a while back, and I had no idea how to figure out where they were coming from in a large program.</text>
  </message>
  <message conversation_id="28">
    <ts>2017-05-26T00:47:49.491324</ts>
    <user>Kimbery</user>
    <text>Okay, now I’m even more confused. The error goes away if I replace a use of `syntax` with `quote-syntax`. Does `syntax` do something special I don’t know about related to taints/dye packs/other cute names?</text>
  </message>
  <message conversation_id="29">
    <ts>2017-05-28T11:46:58.498445</ts>
    <user>Theron</user>
    <text>&lt;@Vincenzo&gt; user mrm on IRC asked yesterday if there were any explanation of how linklets work. Do you have something within hyperlink's reach ? I had a quick look at your racket7 repo, but didn't see any obvious pointers.</text>
  </message>
  <message conversation_id="29">
    <ts>2017-05-28T12:18:16.591690</ts>
    <user>Vincenzo</user>
    <text>&lt;@Theron&gt; I guess this is as close as it gets to web-accessible: &lt;https://github.com/racket/racket7/blob/master/pkgs/racket-doc/scribblings/reference/linklet.scrbl&gt;</text>
  </message>
  <message conversation_id="29">
    <ts>2017-05-28T12:19:49.596113</ts>
    <user>Theron</user>
    <text>&lt;@Vincenzo&gt; Thanks! I had explicitly searched for files containing "linklet" in the repo, and somehow managed to miss that one :slightly_smiling_face:</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:24:17.608939</ts>
    <user>Rosalee</user>
    <text>Does anyone know how to ‘collapse’ the padding in two cstructs in the FFI?</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:24:59.610954</ts>
    <user>Rosalee</user>
    <text>Like, I have a struct with a lot of fields, and in the middle, I have for a list size, followed by a pointer to that list.</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:25:24.612171</ts>
    <user>Rosalee</user>
    <text>I want to make a ctype that will give me a safe list given those two values.</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:26:02.613857</ts>
    <user>Rosalee</user>
    <text>And I can do that in another cstruct, but because the padding is now larger, it messes up the offsets for the rest of the struct.</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:26:30.615100</ts>
    <user>Rosalee</user>
    <text>So, is there any way I can insert a cstruct into another cstruct such that it takes the paddings of the element in the inner cstruct?</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:26:37.615441</ts>
    <user>Rosalee</user>
    <text>Either way, thank you.</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:36:35.643595</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; You be able to achieve the effect you want by declaring `#:alignment`</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:37:00.644658</ts>
    <user>Rosalee</user>
    <text>Okay cool. In which cstruct?</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:38:17.648289</ts>
    <user>Rosalee</user>
    <text>Like, it seems like I’d need to set it in the outer one, and then manually calculate the allignment for the rest of the struct, is tht correct &lt;@Vincenzo&gt; ?</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:39:38.652149</ts>
    <user>Vincenzo</user>
    <text>I was thinking that you'd set it for the inner one</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:47:42.674049</ts>
    <user>Rosalee</user>
    <text>Oh, okay. In that case the docs kind of confused me what it does. As I thought you attached it to specific fields?</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:48:16.675601</ts>
    <user>Rosalee</user>
    <text>(I mean, I know you can attach it to the whole struct, but in this case, I only want one field to be alligned differently.)</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T12:49:10.678081</ts>
    <user>Rosalee</user>
    <text>Oh, I see what you mean, `#:alignment 1` worked, thank you &lt;@Vincenzo&gt;</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T17:33:04.463167</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Actually, after thinking about it a bit more, I don’t think `#:alignment 1` would work, or any ‘alignment’ on the inside struct would be good enough.</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T17:33:28.464261</ts>
    <user>Rosalee</user>
    <text>Because this is going to be context sensitive on the placement of the outside struct and its alignment.</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T17:35:27.469491</ts>
    <user>Rosalee</user>
    <text>Like, if I had:
```
struct{
char prefix,
char count,
void *data
}
```,
I would want it to be compacted (on 32-bit x86 for simplicity) as:
```
[prefix][count][padding][padding][padding][data][data][data][data]
```</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T17:35:56.470651</ts>
    <user>Rosalee</user>
    <text>(Where I have specified each byte in `[...]`)</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T17:37:04.473474</ts>
    <user>Rosalee</user>
    <text>But when I do `#:alignment 1` on the inner struct, the layout is going to be:

```
[prefix][count][data][data][data][data]
```

which removes the padding.</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T17:37:09.473663</ts>
    <user>Rosalee</user>
    <text>Any thoughts &lt;@Vincenzo&gt; ?</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T17:55:29.519362</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; I think you'd have to add the padding back manually in that case. There's not much in between "do the default thing" and "let me control layout completely".</text>
  </message>
  <message conversation_id="30">
    <ts>2017-05-28T17:58:04.525656</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Ah fair. Well thank you.</text>
  </message>
  <message conversation_id="31">
    <ts>2017-05-29T18:16:18.295135</ts>
    <user>Chantelle</user>
    <text>It looks like the slack irc bridge is down again</text>
  </message>
  <message conversation_id="31">
    <ts>2017-05-30T11:17:29.655179</ts>
    <user>Latarsha</user>
    <text>&lt;@Stefani&gt; pkgd appears to be down</text>
  </message>
  <message conversation_id="31">
    <ts>2017-05-30T16:50:22.505898</ts>
    <user>Kimbery</user>
    <text>&lt;@Aracely&gt;: ping</text>
  </message>
  <message conversation_id="31">
    <ts>2017-05-30T17:31:42.225890</ts>
    <user>Latarsha</user>
    <text>hi &lt;@Whitney&gt;</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:26:50.890918</ts>
    <user>Georgeanna</user>
    <text>,doc fails with (in a plain repl in OSX’s terminal.app): 0:131: execution error: “file:///MyApplications/dev/lisp/Racket/doc/reference/strings.html#(def._((lib._racket%2Fstring..rkt)._string-trim))” doesn’t understand the “open location” message. (-1708)</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:27:01.892530</ts>
    <user>Georgeanna</user>
    <text>running `open $ABOVE_URL` opens just fine</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:27:13.894493</ts>
    <user>Georgeanna</user>
    <text>(except that it ignores the anchor, but that’s separate)</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:27:24.896119</ts>
    <user>Georgeanna</user>
    <text>any hints? or suggestions where to poke?</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:29:24.914515</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt;: what version of racket is this on?</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:29:38.916629</ts>
    <user>Georgeanna</user>
    <text>sorry. 6.9 and latest osx too</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:30:08.921598</ts>
    <user>Kimbery</user>
    <text>stable, right? not a snapshot?</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:30:18.923209</ts>
    <user>Kimbery</user>
    <text>I ask because I know that code recently changed, but I don’t think it made it into the release</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:30:23.923948</ts>
    <user>Georgeanna</user>
    <text>correct. I’m not leet :stuck_out_tongue:</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:30:46.927589</ts>
    <user>Kimbery</user>
    <text>maybe try a snapshot and see if you get the same error? the answer would be informative, at least.</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:34:22.961244</ts>
    <user>Corey</user>
    <text>&lt;@Georgeanna&gt; I see you switched here from `#racket` on this so I will, too. :slightly_smiling_face:  Found the thing this reminded me of: &lt;https://groups.google.com/d/msg/racket-users/Jw3jMB2viCk/ggJbXHu5BQAJ&gt;</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:35:47.973967</ts>
    <user>Georgeanna</user>
    <text>hrm… left side of nightlies (6.9.0.4) or right side (current)?</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:36:35.981095</ts>
    <user>Georgeanna</user>
    <text>and wow… can I check this with minimal? 90% smaller and I’m in a cafe</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:38:57.002067</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt;: you can probably check it with minimal, but you’ll want to use `racket/help` instead of `xrepl`, since the latter is not shipped with minimal racket, and it ends up pulling in a lot of dependencies</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:39:13.004478</ts>
    <user>Kimbery</user>
    <text>(see &lt;https://github.com/racket/racket/issues/1465&gt; )</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:40:32.016227</ts>
    <user>Kimbery</user>
    <text>also, 6.9.0.4 and current are the same version, the latter is just a stable alias for things like CI scripts</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:57:51.165626</ts>
    <user>Georgeanna</user>
    <text>is there a way to isolate this? in ruby we can set GEM_HOME to create a temporary repository that you can later throw away</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:58:27.170753</ts>
    <user>Georgeanna</user>
    <text>moot point:

```
10058 % ./bin/raco pkg install --dry-run racket-help
Resolving "racket-help" via &lt;https://www.cs.utah.edu/plt/snapshots/20170527-7f1ab90/catalog/&gt;
tcp-connect: connection failed
  detail: host not found
  address: &lt;http://www.cs.utah.edu|www.cs.utah.edu&gt;
  port number: 443
  step: 1
  system error: nodename nor servname provided, or not known; errno=8
```</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:58:49.173902</ts>
    <user>Kimbery</user>
    <text>I mean the module `racket/help`. it’s in the `base` package; you won’t have to install it.</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T19:58:59.175297</ts>
    <user>Kimbery</user>
    <text>also, the snapshot should maintain its own set of packages.</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:01:57.203961</ts>
    <user>Georgeanna</user>
    <text>I can’t figure this out… ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:02:01.204549</ts>
    <user>Georgeanna</user>
    <text>```
&amp;gt; (help string-trim)
standard-module-name-resolver: collection not found
  for module path: help/help-utils
```</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:02:40.210543</ts>
    <user>Kimbery</user>
    <text>oh, right. apparently that requires the `racket-doc` package to be installed, which admittedly makes sense.</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:02:46.211376</ts>
    <user>Kimbery</user>
    <text>(since it’s opening the docs)</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:02:52.212219</ts>
    <user>Georgeanna</user>
    <text>yeah. as far as I can tell, minimal is too minimal for this :slightly_smiling_face:</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:02:59.213338</ts>
    <user>Kimbery</user>
    <text>but it’s `racket-doc` that will bring in the whole universe of dependencies. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:03:43.219818</ts>
    <user>Kimbery</user>
    <text>since `racket-doc` currently links to other docs, including the web server docs… which means you’ll end up installing the web server (and a whole bunch of other packages) if you “just” install the docs.</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:05:52.238255</ts>
    <user>Georgeanna</user>
    <text>yeah… I’ll just download the minimal+gui+docs package. it’s 80mb (instead of 9!)… it’ll just be slower on this cafe network</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:06:47.246104</ts>
    <user>Kimbery</user>
    <text>that’s probably the safest bet, yes</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:10:38.278129</ts>
    <user>Georgeanna</user>
    <text>maybe it should have a more descriptive name than “gui-6.9.0.4-x86_64-macosx.dmg” … maybe “racket” should be in there somewhere. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:10:58.280906</ts>
    <user>Georgeanna</user>
    <text>compared to: min-racket-6.9.0.4-x86_64-macosx.dmg</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:15:07.314363</ts>
    <user>Georgeanna</user>
    <text>ok. confirmed that on 6.9.0.4 that `,doc` is fixed. I wonder if I should steal the patch and try to compile it into my current version</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:17:22.332532</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt;: Make sure you try running the snapshot from outside of your home directory (that is, the snapshot distribution itself should be placed outside your home directory). IIUC, the issues around that feature stem from very odd macOS behavior around opening file URLs in/outside of your home directory.</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:17:47.335919</ts>
    <user>Kimbery</user>
    <text>If you had the snapshot in your home directory and the release outside of it, you might get false positives.</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:17:54.336776</ts>
    <user>Georgeanna</user>
    <text>I ran it straight out of the disk image</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:19:01.345593</ts>
    <user>Kimbery</user>
    <text>that’s probably safe then</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:27:07.410922</ts>
    <user>Georgeanna</user>
    <text>is there a bar-chart plot type somewhere? I’m trying to hack it into discrete-histogram and it’s screwing up w/ my x-axis.</text>
  </message>
  <message conversation_id="32">
    <ts>2017-05-30T20:29:02.426285</ts>
    <user>Georgeanna</user>
    <text>ah. it ignores negative values even if you set `y-min`</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-30T22:40:02.398868</ts>
    <user>Helga</user>
    <text>considering the irc bridge is down, I’ll ask here</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-30T22:40:32.402507</ts>
    <user>Helga</user>
    <text>how can I custom print objects? the reference says printable&amp;lt;%&amp;gt; should be implemented, and that it seems to be a wrapper around prop:custom-write</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-30T22:40:44.403841</ts>
    <user>Helga</user>
    <text>&lt;https://docs.racket-lang.org/reference/objectprinting.html&gt;</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-30T22:41:04.406060</ts>
    <user>Helga</user>
    <text>but the docs for prop:custom-write say it’s deprecated in favor of gen:custom-write</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-30T22:42:39.416713</ts>
    <user>Kimbery</user>
    <text>&lt;@Helga&gt;: `gen:custom-write` is for structs; it still uses `prop:custom-write` under the hood. if you’re using `racket/class`, I’m pretty sure `printable&amp;lt;%&amp;gt;` is the right thing to implement.</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-30T22:43:18.420828</ts>
    <user>Helga</user>
    <text>the docs are confusing then</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-30T22:43:55.424774</ts>
    <user>Kimbery</user>
    <text>my guess is that the `printable&amp;lt;%&amp;gt;` docs weren’t updated when `gen:custom-write` was added, since the latter is (I believe) a relatively recent addition.</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-30T22:57:29.514785</ts>
    <user>Helga</user>
    <text>yes, I see `printable&amp;lt;%&amp;gt;` is still defined in terms of `prop:custom-write`</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-30T23:00:41.537707</ts>
    <user>Kimbery</user>
    <text>as it probably ought to be. I somewhat doubt `prop:custom-write` itself is really deprecated; I think using it directly with `struct` via a `#:property` clause probably is.</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-31T09:53:50.938054</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; I think it really is deprecated in the sense that there's no need to ever use it yourself directly</text>
  </message>
  <message conversation_id="33">
    <ts>2017-05-31T13:47:05.295844</ts>
    <user>Helga</user>
    <text>My first thought was that the documentation is outdated, so maybe a different wording would be better</text>
  </message>
  <message conversation_id="34">
    <ts>2017-05-31T21:00:55.111812</ts>
    <user>Stefani</user>
    <text>mflatt: can you take a look at this and tell me if there's a work-around of if I need to make `make-import` different? &lt;https://gist.github.com/jeapostrophe/ab3e1837bf6c7627fe3b07555ba49bea&gt;</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T12:00:15.437988</ts>
    <user>Stefani</user>
    <text>mflatt: looks like the kernel error is that resolve-module-path-index returns `'#%kernel` rather than `''#%kernel`</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T12:01:07.460067</ts>
    <user>Stefani</user>
    <text>but that violates the return contract</text>
  </message>
  <message conversation_id="35">
    <ts>2017-06-01T14:19:28.640007</ts>
    <user>Chantelle</user>
    <text>IRC bridge is down again</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T19:15:46.837463</ts>
    <user>Vincenzo</user>
    <text>&lt;@Stefani&gt; `'#%kernel` seems like a fit for the contract of `resolve-module-path-index`, which promises to return a path or a symbol or an encoding of a submodule reference; possibly, you want `module-path-index-resolve`, or maybe you want to use `collapse-module-path-index`</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T20:59:32.698418</ts>
    <user>Stefani</user>
    <text>mflatt: `collapse-module-path-index` solves the #%kernel problem, but not the way to figure out what `self` is</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:02:30.724191</ts>
    <user>Vincenzo</user>
    <text>Normally, you'd do that with `variable-reference-&amp;gt;module-path-index`, but I don't see a way to use that for a require transfomer</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:03:47.734178</ts>
    <user>Vincenzo</user>
    <text>Or does the single-argument form of `collapse-module-path-index` work in this case?</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:04:18.738184</ts>
    <user>Vincenzo</user>
    <text>Or maybe you're looking for `(module-path-index-join #f #f)` as the "self" index</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:06:40.756943</ts>
    <user>Stefani</user>
    <text>I just updated the example and I get collapse-m-p-i to violate its own contract --- &lt;https://gist.github.com/jeapostrophe/ab3e1837bf6c7627fe3b07555ba49bea&gt;</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:06:52.758389</ts>
    <user>Stefani</user>
    <text>i'll try the self idea</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:09:55.780568</ts>
    <user>Stefani</user>
    <text>ya, i don't know how to make variable-reference-&amp;gt;module-path-index useful</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:20:27.857324</ts>
    <user>Vincenzo</user>
    <text>I think the contract of `collapse-module-path-index` with a single argument will have to be changed to allow a `#f` result if the given module path index is a "self" index. You can work around the bug by checking specifically for that before calling `collapse-module-path-index`</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:22:59.875995</ts>
    <user>Stefani</user>
    <text>it turns out that I can also pass in the thunk to lookup self and throw an error there</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:23:31.879780</ts>
    <user>Stefani</user>
    <text>no idea on how to get self though? (thinking ahead: suppose I could, I assume that `make-import` will fail if it tries to import from itself?)</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:24:33.887016</ts>
    <user>Stefani</user>
    <text>I assume it's clear what this transformer does? I'm pretty happy with it generally</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:24:38.887604</ts>
    <user>Vincenzo</user>
    <text>Right - it makes no sense for a module to import from itself, and it's not expressible as an `import` struct</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:25:00.890134</ts>
    <user>Vincenzo</user>
    <text>No, I haven't yet tried to figure out what the transformer does</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:25:35.894457</ts>
    <user>Stefani</user>
    <text>Ah, if you look down at the example, `(default-in m [id def])` imports `id` from `m` if `m` provides it OR it binds `id` to `def`</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:25:55.896698</ts>
    <user>Stefani</user>
    <text>right now it works assuming that `def` is actually imported from somewhere</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:26:11.898539</ts>
    <user>Stefani</user>
    <text>but it would be nice if it didn't have to be and could be locally defined</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:29:14.920343</ts>
    <user>Stefani</user>
    <text>(remix makes its so that when you require a module `m`, you automatically put `(m:#%required)` in your module, so it can mess with your environment)</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:32:31.945094</ts>
    <user>Vincenzo</user>
    <text>You can use `syntax-local-lift-module-end-declaration` during a require transformer, if that helps</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:33:09.949801</ts>
    <user>Stefani</user>
    <text>I just tried that :) for some reason I thought that wasn't allowed</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:33:14.950440</ts>
    <user>Stefani</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:35:11.964659</ts>
    <user>Stefani</user>
    <text>I'll just change `collapse-...`'s contract to allow #f</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:35:50.969336</ts>
    <user>Vincenzo</user>
    <text>I'll push a repair soon</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:36:04.970914</ts>
    <user>Stefani</user>
    <text>Ok, I'll wait</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:36:06.971219</ts>
    <user>Vincenzo</user>
    <text>(will need to rebuild, since I'm days behind)</text>
  </message>
  <message conversation_id="34">
    <ts>2017-06-01T21:36:15.972268</ts>
    <user>Stefani</user>
    <text>np</text>
  </message>
  <message conversation_id="36">
    <ts>2017-06-02T06:14:25.558766</ts>
    <user>Carson</user>
    <text>PLaneT seems to be down - index page works fine but browsing to any package results in proxy error</text>
  </message>
  <message conversation_id="37">
    <ts>2017-06-03T20:49:56.904131</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Do you have any thoughts about: &lt;https://github.com/racket/racket/pull/1713&gt;</text>
  </message>
  <message conversation_id="37">
    <ts>2017-06-04T06:09:45.121765</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; I vaguely remembered there are issues with calling `atexit()` directly, and I found the relevant code. See the PR comment.
Although no one is likely to try to compile Racket on SunOS 4 where `atexit()` is unavailable, the potential indirection through `replacement_at_exit` is important for Windows due to libc sharing (or not) in DLLs.</text>
  </message>
  <message conversation_id="38">
    <ts>2017-06-05T17:21:42.517624</ts>
    <user>Chantelle</user>
    <text>anyone available to review &lt;https://github.com/racket/rackunit/pull/27&gt;?</text>
  </message>
  <message conversation_id="38">
    <ts>2017-06-05T17:32:54.708687</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: I'd ping ryanc.</text>
  </message>
  <message conversation_id="38">
    <ts>2017-06-05T17:37:15.779353</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; here, email, or github?</text>
  </message>
  <message conversation_id="38">
    <ts>2017-06-05T17:38:01.790793</ts>
    <user>Eun</user>
    <text>Github, I'd say.</text>
  </message>
  <message conversation_id="39">
    <ts>2017-06-05T19:20:29.057706</ts>
    <user>Nelson</user>
    <text>does `racket/contract` have a direct analog to Typed Racket's `Rec`?
(seems like `recursive-contract` has to be used with a `define`)</text>
  </message>
  <message conversation_id="39">
    <ts>2017-06-05T19:20:57.062124</ts>
    <user>Nelson</user>
    <text>I want something like `(rec/c sexp (or/c symbol? (listof sexp)))` ... but this is just an example, my actual contract isn't just `(treeof symbol?)`</text>
  </message>
  <message conversation_id="40">
    <ts>2017-06-05T19:40:50.248551</ts>
    <user>Julianna</user>
    <text>(define-syntax (rec/c stx) (syntax-parse stx [(_ name:id ctc) #‘(let ([name (let-syntax ([name (recursive-contract name)])]) name)]))</text>
  </message>
  <message conversation_id="40">
    <ts>2017-06-05T19:40:52.248990</ts>
    <user>Julianna</user>
    <text>or there-abouts?</text>
  </message>
  <message conversation_id="40">
    <ts>2017-06-05T19:41:08.251118</ts>
    <user>Julianna</user>
    <text>not sure if my shadowing works on not… my need to make a transformer…</text>
  </message>
  <message conversation_id="39">
    <ts>2017-06-05T19:47:43.308696</ts>
    <user>Nelson</user>
    <text>WHOA. I did not realize you could do `(contract-out (f (let ([x ....]) ....)))`</text>
  </message>
  <message conversation_id="39">
    <ts>2017-06-05T20:00:16.419810</ts>
    <user>Kimbery</user>
    <text>contract expressions are just that—expressions :)</text>
  </message>
  <message conversation_id="40">
    <ts>2017-06-05T21:41:53.199560</ts>
    <user>Latarsha</user>
    <text>You probably need a letrec there</text>
  </message>
  <message conversation_id="40">
    <ts>2017-06-06T09:32:41.395154</ts>
    <user>Tina</user>
    <text>&lt;@Nelson&gt; check out section 2.4 of the 2002 icfp contracts paper</text>
  </message>
  <message conversation_id="41">
    <ts>2017-06-08T17:38:11.017641</ts>
    <user>Ka</user>
    <text>is there a danger of the con selling out?</text>
  </message>
  <message conversation_id="41">
    <ts>2017-06-08T17:39:55.044165</ts>
    <user>Latarsha</user>
    <text>no</text>
  </message>
  <message conversation_id="41">
    <ts>2017-06-08T17:50:01.197685</ts>
    <user>Corey</user>
    <text>but people should register early to ensure a seat in the main auditorium instead of getting bumped to the overflow venue</text>
  </message>
  <message conversation_id="41">
    <ts>2017-06-08T17:54:39.265698</ts>
    <user>Ka</user>
    <text>thanks, &lt;@Corey&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="41">
    <ts>2017-06-08T17:55:10.273166</ts>
    <user>Ka</user>
    <text>&lt;@Latarsha&gt; that was my thinking. likely have to wait until august to see if i'm making the trip from my new home in pdx.</text>
  </message>
  <message conversation_id="42">
    <ts>2017-06-10T20:44:55.391237</ts>
    <user>Georgeanna</user>
    <text>anyone know how the &lt;#C3PCSK2DN|mailing-lists&gt; channel works? I ‘d like to set up a similar channel in our group for our mailing list</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T02:36:25.119618</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; What do you think of adding a `(check-fail &amp;lt;some-check-expr&amp;gt;)` check to rackunit? So `(check-fail (check-equal? 1 1))` would be a failing test and `(check-fail (check-equal? 1 2))` would be a passing one.</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T02:47:34.140873</ts>
    <user>Nelson</user>
    <text>hmm</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T02:47:52.141370</ts>
    <user>Nelson</user>
    <text>I think it makes more sense to change `fail-check`</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T02:48:35.142596</ts>
    <user>Chantelle</user>
    <text>in what way?</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T02:49:47.144807</ts>
    <user>Chantelle</user>
    <text>suppose I have a custom check `check-foo`, how should I test it ideally?</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T02:50:38.146566</ts>
    <user>Chantelle</user>
    <text>`check-fail` plus just using `check-foo` directly seems like it'd cover testing that the check passes and fails at the right times, but it wouldn't let you test that the check adds the right check-info</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:07:04.180535</ts>
    <user>Nelson</user>
    <text>I thought you just wanted this for `define-check`, and the trouble with `define-check` is that when it raises an exception it always says 1 test failed</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:07:31.181330</ts>
    <user>Nelson</user>
    <text>so changing `fail-check` to get rid of the "1 failure" would fix that issue</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:08:07.182429</ts>
    <user>Nelson</user>
    <text>I don't really understand the second thing you last said ---</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:08:22.182896</ts>
    <user>Nelson</user>
    <text>is that a problem with `(check-fail (my-check ....))` ?</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:08:59.184134</ts>
    <user>Chantelle</user>
    <text>yes, I meant it's a problem with the hypothetical `(check-fail (my-check ....))` idea</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:09:10.184487</ts>
    <user>Chantelle</user>
    <text>the high level thing I want is a way to test custom checks so I know they pass when I expect, fail when I expect, and add whatever specialized check-info I expect</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:09:47.185797</ts>
    <user>Nelson</user>
    <text>ok, yes</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:09:49.185850</ts>
    <user>Chantelle</user>
    <text>it's easy enough to test that a custom check passes when you expect; just write some tests using it</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:10:13.186944</ts>
    <user>Chantelle</user>
    <text>the other two things I have no idea how to do reasonably and I think it would be useful for rackunit to provide ways to do that</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:20:06.208510</ts>
    <user>Chantelle</user>
    <text>a neat side effect might be that rackunit can simplify its own test suite</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:20:30.209469</ts>
    <user>Nelson</user>
    <text>haha yeah, I was just wondering what rackunit does</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:21:07.210788</ts>
    <user>Chantelle</user>
    <text>some of the tests rely on calling a module with failing tests in a separate namespace and checking the stderr output</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T03:21:26.211521</ts>
    <user>Chantelle</user>
    <text>that... I would like to avoid :p</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T17:40:04.644982</ts>
    <user>Nelson</user>
    <text>&lt;@Latarsha&gt; &lt;@Clorinda&gt;  I'm trying to work on types for immutable data and I have a problem</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T17:40:43.646995</ts>
    <user>Nelson</user>
    <text>I just added some cases to `types/subtype.rkt` and am getting "unbound identifier `uid:Immutable-Hashtable:`"</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T17:41:16.648699</ts>
    <user>Nelson</user>
    <text>I'm trying to read the source, but I haven't found where the `uid:` is supposed to get defined</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T17:42:07.651272</ts>
    <user>Nelson</user>
    <text>(I have a `def-structural Immutable-Hashtable ....`with its own mask)</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T17:48:51.672785</ts>
    <user>Nelson</user>
    <text>oh</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T17:49:10.673701</ts>
    <user>Nelson</user>
    <text>I had written `(case: Immutable-Hashtable: (Immutable-Hashtable: k v))`</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T17:49:23.674398</ts>
    <user>Nelson</user>
    <text>but it should be `(case: Immutable-Hashtable (Immutable-Hashtable: k v))`</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:15:10.756218</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; I've got an experimental change to rackunit that extracts the `rackunit/text-ui` code into a separate package, do you think that's a reasonable idea?</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:17:45.764249</ts>
    <user>Nelson</user>
    <text>I'm not sure</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:18:07.765510</ts>
    <user>Nelson</user>
    <text>I think that should be OK to do ... but I also think that shouldn't be necessary</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:18:22.766315</ts>
    <user>Nelson</user>
    <text>because (I hope) nothing in rackunit depends on `rackunit/text-ui`</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:18:29.766638</ts>
    <user>Nelson</user>
    <text>why do you want the separate package?</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:18:50.767711</ts>
    <user>Nelson</user>
    <text>(I'm guessing its to make rackunit more testable, I just don't see how, yet)</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:19:22.769387</ts>
    <user>Chantelle</user>
    <text>I'm trying to figure out what parts of `run-tests` need to be changed to make it easier for me to implement things like &lt;https://github.com/racket/rackunit/issues/10&gt;</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:20:02.771386</ts>
    <user>Chantelle</user>
    <text>because it currently uses a lot of internal details of the error message format and duplicates a bunch of logic in `display-test-failure/error` but with slight variations</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:20:33.773118</ts>
    <user>Chantelle</user>
    <text>so the separate package is an attempt to figure out what the hard boundary between `run-tests` and the core of rackunit is</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:20:57.774403</ts>
    <user>Nelson</user>
    <text>ok I like all of this</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:21:12.775158</ts>
    <user>Chantelle</user>
    <text>from reading the commit history I think Robby wanted to move towards making `run-tests` behave a lot more like `display-test-failure/error`</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T18:22:53.780019</ts>
    <user>Chantelle</user>
    <text>&lt;https://github.com/racket/rackunit/pull/34&gt; is slightly related as well</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:46:48.221287</ts>
    <user>Nelson</user>
    <text>&lt;@Latarsha&gt; &lt;@Clorinda&gt;  another question, I'm having trouble with `base-env/base-types.rkt`</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:48:11.226217</ts>
    <user>Nelson</user>
    <text>I'm able to do things like `(def-structural T (args ....))`, then apply T like a function in `base-env/base-types.rkt` (I mean, I can write `(T arg ...)`)</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:48:13.226356</ts>
    <user>Nelson</user>
    <text>but</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:48:57.228972</ts>
    <user>Nelson</user>
    <text>I want to define `-HT` as a name for `(-poly (a b) (Un (T1 a b) (T2 a b)))` (for some `T1` `T2`)</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:49:30.230858</ts>
    <user>Nelson</user>
    <text>so I tried `(define -HT (-poly ....))` and then I can't write `(-HT a b)` later in `base-env/base-types.rkt`</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:49:51.232183</ts>
    <user>Nelson</user>
    <text>I guess the question is, how do I define a polymorphic type?</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:49:58.232551</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; you seem to be confusing polymorphic types and functions</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:50:18.233903</ts>
    <user>Nelson</user>
    <text>should I do `(define -HT (lambda (a b) (-poly ....)))` ?</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:50:20.234016</ts>
    <user>Latarsha</user>
    <text>TR makes them seem like the same thing in the surface syntax</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:50:44.235656</ts>
    <user>Latarsha</user>
    <text>But the first thing you wrote was a polymorphic type, and the second is a function</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:51:04.237066</ts>
    <user>Latarsha</user>
    <text>It depends what you want</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:51:14.237670</ts>
    <user>Nelson</user>
    <text>`(-poly ...)` is a polymorphic type, `(lambda (a b) ...` is a function? ok that makes sense</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:51:21.238085</ts>
    <user>Latarsha</user>
    <text>Yes</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:51:48.239709</ts>
    <user>Latarsha</user>
    <text>-poly is just a shorthand for a type constructor</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:52:18.241529</ts>
    <user>Nelson</user>
    <text>so I guess I have to read `def-structural` to see what its making?</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:52:40.242882</ts>
    <user>Latarsha</user>
    <text>It's making types and type constructors</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:56:41.258531</ts>
    <user>Nelson</user>
    <text>is there a type constructor for `-poly`?</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:59:13.268583</ts>
    <user>Latarsha</user>
    <text>There's several levels of abstraction there to manage the binding</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:59:33.270039</ts>
    <user>Latarsha</user>
    <text>But -Poly is the function</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T20:59:53.271553</ts>
    <user>Latarsha</user>
    <text>I don't recommend using it directly though</text>
  </message>
  <message conversation_id="43">
    <ts>2017-06-11T21:11:12.320310</ts>
    <user>Tina</user>
    <text>&lt;@Chantelle&gt; I found that rackunit’s output when tests aren’t in a test suite to be hard to read and so I tried to clean things up to make that usecase a little bit nicer.</text>
  </message>
  <message conversation_id="44">
    <ts>2017-06-12T15:57:11.393890</ts>
    <user>Georgeanna</user>
    <text>what was yesterday’s drracket logo about?</text>
  </message>
  <message conversation_id="44">
    <ts>2017-06-12T15:58:15.415697</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; what did it look like?</text>
  </message>
  <message conversation_id="44">
    <ts>2017-06-12T15:58:31.421119</ts>
    <user>Chantelle</user>
    <text>Turtle with red and blue shell</text>
  </message>
  <message conversation_id="44">
    <ts>2017-06-12T15:59:07.433059</ts>
    <user>Latarsha</user>
    <text>&lt;https://en.wikipedia.org/wiki/Kamehameha_Day&gt;</text>
  </message>
  <message conversation_id="44">
    <ts>2017-06-12T16:00:10.455279</ts>
    <user>Georgeanna</user>
    <text>nice</text>
  </message>
  <message conversation_id="44">
    <ts>2017-06-12T16:00:11.455734</ts>
    <user>Georgeanna</user>
    <text>thanks</text>
  </message>
  <message conversation_id="44">
    <ts>2017-06-12T16:39:50.250764</ts>
    <user>Nelson</user>
    <text>lol, I thought June 11 was just an important day for `#lang honu` &lt;https://www.cs.utah.edu/~rafkind/papers/honu-2012.pdf&gt;</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:37:15.098527</ts>
    <user>Tova</user>
    <text>I'm not quite understanding the documentation on this &lt;http://docs.racket-lang.org/draw/bitmap_.html&gt;</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:37:45.104093</ts>
    <user>Tova</user>
    <text>How do I set individual pixels to be a certain color in a bitmap?</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:40:11.130287</ts>
    <user>Kimbery</user>
    <text>&lt;@Tova&gt;: `set-argb-pixels`, I think</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:41:48.147710</ts>
    <user>Tova</user>
    <text>What's the 'pixels' argument?</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:44:03.172206</ts>
    <user>Kimbery</user>
    <text>it’s documented here: &lt;http://docs.racket-lang.org/draw/bitmap-dc_.html#%28meth._%28%28%28lib._racket%2Fdraw..rkt%29._bitmap-dc~25%29._set-argb-pixels%29%29&gt;</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:45:43.190299</ts>
    <user>Tova</user>
    <text>I saw the documentation for it. I don't understand what it's saying.</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:46:44.201036</ts>
    <user>Marlin</user>
    <text>four consecutive bytes represent a single pixel: (alpha, red, green, blue)</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:46:50.201926</ts>
    <user>Kimbery</user>
    <text>if you want to set a single pixel, pass `1` for `width` and `height`, and provide a 4-byte byte array</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:47:58.214245</ts>
    <user>Tova</user>
    <text>Ah good, width and height you color a grid of pixels at the same time?</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:48:11.216512</ts>
    <user>Tova</user>
    <text>&lt;@Marlin&gt; Thanks</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:48:45.222670</ts>
    <user>Marlin</user>
    <text>you can set a block of pixels all at once, yes, starting at `(x, y)`</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:49:29.230680</ts>
    <user>Tova</user>
    <text>The coordinates are from the upper left corner, right?</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:49:57.235684</ts>
    <user>Kimbery</user>
    <text>yes</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:49:58.235837</ts>
    <user>Marlin</user>
    <text>says "The pixels are in row-major order, left to right then top to bottom."</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:50:01.236265</ts>
    <user>Marlin</user>
    <text>so yep</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:50:44.244475</ts>
    <user>Tova</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:56:16.302877</ts>
    <user>Tova</user>
    <text>I wrote a quick and dirty thing with pict a couple weeks ago to provide visualizations of some experimental math thing for some colleges, and now they kind of are depending on them a bit more regularly, so I'm trying to make it more efficient. I haven't done much with graphics or pictures prior to this, so all the stuff about alphas and back-channels and whatnot was making it kind of hard to parse.</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:57:13.313350</ts>
    <user>Tova</user>
    <text>(context)</text>
  </message>
  <message conversation_id="45">
    <ts>2017-06-12T18:57:33.316886</ts>
    <user>Tova</user>
    <text>Anyways, thanks for the help :slightly_smiling_face:</text>
  </message>
  <message conversation_id="46">
    <ts>2017-06-12T19:25:49.598882</ts>
    <user>Ka</user>
    <text>&lt;@Georgeanna&gt; is there a place to view all of the custom logos? I didn't know Dr Racket logos on different days was a thing. Though I don't spin it up all that often.</text>
  </message>
  <message conversation_id="46">
    <ts>2017-06-12T19:58:28.888556</ts>
    <user>Georgeanna</user>
    <text>no clue</text>
  </message>
  <message conversation_id="46">
    <ts>2017-06-12T20:01:38.917957</ts>
    <user>Georgeanna</user>
    <text>search for the-bitmap-spec in the racket source</text>
  </message>
  <message conversation_id="46">
    <ts>2017-06-12T20:02:48.927945</ts>
    <user>Georgeanna</user>
    <text>drracket/drracket/private/honu-logo.rkt etc</text>
  </message>
  <message conversation_id="46">
    <ts>2017-06-13T02:21:19.490845</ts>
    <user>Ka</user>
    <text>Ah. Of course it wouldn't just be a set of png files... :upside_down_face:</text>
  </message>
  <message conversation_id="47">
    <ts>2017-06-13T06:41:58.781533</ts>
    <user>Lavenia</user>
    <text>The bridge to IRC seems to be down?</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:40:12.826243</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; How many contributors are left in the Great Relicensing?</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:41:02.842698</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; I haven't gone through every repo yet searching for contributors, but my spreadsheet has 92 people left</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:41:24.849986</ts>
    <user>Latarsha</user>
    <text>many of them may not have seen any of the prior requests</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:41:48.857972</ts>
    <user>Chantelle</user>
    <text>what about contributors to only the racket/racket repo?</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:43:04.882261</ts>
    <user>Latarsha</user>
    <text>that's from racket/racket, racket/typed-racket, racket/htdp, racket/drracket, racket/racket-lang-org</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:43:11.884373</ts>
    <user>Latarsha</user>
    <text>but racket/racket is the majority</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:43:40.893809</ts>
    <user>Latarsha</user>
    <text>Only about ~20 have more than 1 commit</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:44:30.909854</ts>
    <user>Chantelle</user>
    <text>in theory could you undo the commits of those contributors in order to skip them for relicensing?</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:45:15.925304</ts>
    <user>Latarsha</user>
    <text>some of those remaining people are major past contributors who we just have to work harder to contact</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T16:45:25.928729</ts>
    <user>Latarsha</user>
    <text>no need to worry so far</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T17:41:37.945296</ts>
    <user>Georgeanna</user>
    <text>are any of them pre-github/git?</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T22:35:02.759665</ts>
    <user>Latarsha</user>
    <text>Yes</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T22:35:38.764021</ts>
    <user>Latarsha</user>
    <text>Fortunately I have the revision history back to 1995</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-13T22:42:20.809521</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; I opened &lt;https://github.com/racket/rackunit/issues/35&gt;, would like your feedback when you have a moment</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-14T07:57:40.458378</ts>
    <user>Latarsha</user>
    <text>I think someone is volunteering to be the new rackunit maintainer ... ;)</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-14T10:32:50.398990</ts>
    <user>Karine</user>
    <text>&lt;@Latarsha&gt; am i one of those 92 people left?</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-14T10:36:37.495457</ts>
    <user>Latarsha</user>
    <text>&lt;@Karine&gt; You aren't on my current list, which I assume means I have something from you</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-14T10:37:05.507136</ts>
    <user>Latarsha</user>
    <text>&lt;@Karine&gt; should you be on my list? if so, just comment on &lt;https://github.com/racket/racket/issues/1570&gt;</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-14T10:40:12.586236</ts>
    <user>Latarsha</user>
    <text>&lt;@Aracely&gt; You have some graph test failures: &lt;https://plt.eecs.northwestern.edu/pkg-build/server/built/test-fail/graph.txt&gt;</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-14T10:40:39.597131</ts>
    <user>Latarsha</user>
    <text>also the turnstile tests time out: &lt;https://plt.eecs.northwestern.edu/pkg-build/server/built/test-fail/turnstile.txt&gt;</text>
  </message>
  <message conversation_id="48">
    <ts>2017-06-14T10:43:15.660577</ts>
    <user>Karine</user>
    <text>&lt;@Latarsha&gt; great, thanks.</text>
  </message>
  <message conversation_id="49">
    <ts>2017-06-14T10:43:43.671851</ts>
    <user>Latarsha</user>
    <text>&lt;@Corey&gt; your markdown pkg also has a test failure &lt;https://plt.eecs.northwestern.edu/pkg-build/server/built/test-fail/markdown.txt&gt;</text>
  </message>
  <message conversation_id="49">
    <ts>2017-06-14T10:46:50.747857</ts>
    <user>Corey</user>
    <text>&lt;@Latarsha&gt; That perf test should be disabled in CI. It is on Travis by checking for env var. Remind me the DrDr env var to check, if any?</text>
  </message>
  <message conversation_id="49">
    <ts>2017-06-14T10:47:58.775671</ts>
    <user>Latarsha</user>
    <text>&lt;@Corey&gt; &lt;http://pkg-build.racket-lang.org/about.html&gt;</text>
  </message>
  <message conversation_id="49">
    <ts>2017-06-14T10:48:10.780447</ts>
    <user>Corey</user>
    <text>Thanks!!</text>
  </message>
  <message conversation_id="49">
    <ts>2017-06-14T10:50:31.838490</ts>
    <user>Corey</user>
    <text>I feel like I've asked this before (sorry!), but, never seem to be able to find that searching from &lt;https://docs.racket-lang.org/&gt; (like I did before I asked you again just now :smile:)</text>
  </message>
  <message conversation_id="49">
    <ts>2017-06-14T10:51:32.863817</ts>
    <user>Latarsha</user>
    <text>I don't know that it's there (maybe it should be)</text>
  </message>
  <message conversation_id="49">
    <ts>2017-06-14T11:29:39.822771</ts>
    <user>Corey</user>
    <text>Might be handy if `CI=true` env var were defined -- as does Travis CI, Circle CI, AppVeyor

&lt;https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables&gt;
&lt;https://circleci.com/docs/1.0/environment-variables/&gt;
&lt;https://www.appveyor.com/docs/environment-variables/&gt;

Meanwhile I'll push a commit that checks for `(ormap getenv '("CI" "TRAVIS" "PLT_PKG_BUILD_SERVICE"))`.</text>
  </message>
  <message conversation_id="49">
    <ts>2017-06-14T11:45:43.216931</ts>
    <user>Latarsha</user>
    <text>&lt;@Corey&gt; I bet mflatt would take that pull request</text>
  </message>
  <message conversation_id="50">
    <ts>2017-06-14T13:43:36.821040</ts>
    <user>Latarsha</user>
    <text>&lt;@Patrice&gt; can you respond to the relicensing request? &lt;https://github.com/racket/racket/issues/1570&gt;</text>
  </message>
  <message conversation_id="50">
    <ts>2017-06-14T14:03:06.248410</ts>
    <user>Patrice</user>
    <text>reponded! sorry for that</text>
  </message>
  <message conversation_id="50">
    <ts>2017-06-14T14:03:31.257538</ts>
    <user>Latarsha</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-14T14:14:45.497254</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; Somebody's gotta do it ;)</text>
  </message>
  <message conversation_id="49">
    <ts>2017-06-14T14:15:00.502450</ts>
    <user>Corey</user>
    <text>&lt;@Latarsha&gt; Point. Done: &lt;https://github.com/racket/pkg-build/pull/2&gt;</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-14T19:15:14.691223</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; what are some of the things you wish `test-case` did better in the Typed Racket tests?</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T10:57:37.750430</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; mostly I wish that it was simpler to put together test suites</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T10:57:50.756082</ts>
    <user>Latarsha</user>
    <text>in TR, we can do pretty much what we need, but it's complicated</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:03:55.292103</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; I’m curious: why is it complicated?</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:05:37.325327</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; why is which complicated? TR or rackunit?</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:06:20.339172</ts>
    <user>Georgeanna</user>
    <text>I assume both at the same time? rackunit is pretty straightforward. I don’t do TR but I suspect that *you* don’t find it that complicated. :wink:</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:07:16.356894</ts>
    <user>Latarsha</user>
    <text>the TR test suite code is complicated because it does a lot of different stuff (load a lot of files dynamically as tests, run in parallel, etc)</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:07:46.366718</ts>
    <user>Latarsha</user>
    <text>rackunit is complicated to use when you want to do more than just use `check-equal?` etc at the top-level of your `test` module</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:07:56.369899</ts>
    <user>Latarsha</user>
    <text>that use case is very simple (which is great)</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:18:43.573744</ts>
    <user>Georgeanna</user>
    <text>can you point me at any of the rackunit complication so I can wrap my head around it? I might be able to help out there a bit.</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:19:41.591592</ts>
    <user>Latarsha</user>
    <text>for example, the distinction between a test case and a test suite</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:20:48.612981</ts>
    <user>Latarsha</user>
    <text>I think this paragraph describes my unhappiness well:</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:20:50.613661</ts>
    <user>Latarsha</user>
    <text>"Test cases can themselves be grouped into test suites. A test suite can contain both test cases and test suites. Unlike a check or test case, a test suite is not immediately run. Instead use one of the functions described in User Interfaces or Programmatically Running Tests and Inspecting Results."</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:35:21.896443</ts>
    <user>Georgeanna</user>
    <text>yeah. I’m not entirely thrilled with that myself. IMHO any time you need to do anything more than just require something to run your tests you’ve failed.</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:36:28.918553</ts>
    <user>Georgeanna</user>
    <text>I’m not sure how to fix that in a way that would make “normal” racket devs happy tho. I know how to do it to make *me* happy but that’s different. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:36:59.928583</ts>
    <user>Latarsha</user>
    <text>something that makes one person happy is better than making 0 people happy</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:42:29.030936</ts>
    <user>Kimbery</user>
    <text>In my opinion, the things I find the most frustrating about rackunit is that test failures are often remarkably useless and “checks” don’t compose at all.</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:43:35.051437</ts>
    <user>Kimbery</user>
    <text>I have spent more time than I would like trying to understand why two things rackunit claims aren’t equal actually aren’t equal.</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:44:21.065111</ts>
    <user>Kimbery</user>
    <text>And writing custom checks that produce decent error messages is a huge chore, mostly because you can’t really implement a new check in terms of an existing one and still produce good check failure messages.</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:45:39.089363</ts>
    <user>Kimbery</user>
    <text>My understanding is that rackunit was just schemeunit, rolled into the main distribution, but I am not sure it’s really the same quality and adheres to the same principles as other libraries that get distributed with racket. :/</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T16:59:27.345927</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; I'm working on a library to improve rackunit error messages, especially when two data structures are "almost" the same: &lt;http://docs.racket-lang.org/expect/index.html?q=expect&gt;</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:00:12.361309</ts>
    <user>Chantelle</user>
    <text>It's not ready for a 0.1 release yet though (mainly due to needing some rackunit features implemented so the check info doesn't look awful)</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:02:26.405144</ts>
    <user>Georgeanna</user>
    <text>&lt;@Kimbery&gt; I published check-sexp-equal for that reason… but since I can’t define any formatting it is still kinda hard to read</text>
  </message>
  <message conversation_id="52">
    <ts>2017-06-15T17:02:32.407161</ts>
    <user>Chantelle</user>
    <text>here's an example:
```
&amp;gt; (expect! '(10 12) (expect-list (expect-pred number?) (expect-pred string?)))

expected a different kind of value
  subject: '(10 12)
  in: item at position 1
  expected: value satisfying string?
  actual: 12
```</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:03:06.417883</ts>
    <user>Georgeanna</user>
    <text>minitest (in ruby) does diffing on `assert_equal` failures and provides `make_my_diffs_pretty` to ensure that big things get printed structurally. makes finding the problems a breeze in comparison</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:05:10.456146</ts>
    <user>Georgeanna</user>
    <text>It does it that way specifically to find inequalities deep in a nested sexp and it is really really quick to hone in on where the problem is. `check-sexp-equal?` has to embed `#:new` and `#:old` tags to show you where the differences are but the whole sexp is printed flat</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:05:30.462264</ts>
    <user>Georgeanna</user>
    <text>just doing a pretty-print of the output would make it much better</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:06:04.472437</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; check-sexp-equal is very nice and was part of the inspiration for `expect` :)</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:06:09.473874</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; I’m not a fan of expectations (at least from the BDD perspective). I imagine that your RHS blows up really quickly on anything non-trivial</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:06:27.479598</ts>
    <user>Georgeanna</user>
    <text>thanks! if you have any insight on how to improve its output I’m all ears</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:07:09.492956</ts>
    <user>Chantelle</user>
    <text>there's "expectation conversion" so that you can write something like `(hash 'foo (list 1 2 (vector 'a 'b (expect-pred? number?))))` and it will convert it to an expectation that structurally matches things and reports errors in contexts</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:07:42.503161</ts>
    <user>Chantelle</user>
    <text>the above example I had didn't do that because `expect!` does not yet convert its expectation argument automatically</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:08:02.509083</ts>
    <user>Chantelle</user>
    <text>`(expect-equal? some-complex-data-with-hashes-and-lists-and-stuff)` will do it though</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T17:08:32.518330</ts>
    <user>Chantelle</user>
    <text>They're more like junit/hamcrest "matchers" than anything else, but I wanted a more noun-y name</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T18:34:21.752702</ts>
    <user>Delmy</user>
    <text>I'm currently working on a test filtering feature for chk and rackunit. The idea is to be able to call `raco test my/module -- args to forward` and the test lib interprets `args to forward` as filters for test names, files, lines to run. I'm looking for feedback/feature requests based on the WIP documentation: &lt;https://cfinegan.github.io/chk-docs/chk.html#(part._.Filtering_.Tests_with_.Command-line_.Arguments)&gt;</text>
  </message>
  <message conversation_id="53">
    <ts>2017-06-15T18:35:04.760748</ts>
    <user>Delmy</user>
    <text>Please let me know what you think. Rackunit docs are coming after I figure out what features are the most popular.</text>
  </message>
  <message conversation_id="51">
    <ts>2017-06-15T20:30:18.820748</ts>
    <user>Chantelle</user>
    <text>&lt;@Delmy&gt; instead of relying on command line arguments, would it be cleaner for `raco test` to define some sort of "filters" concept and pass it along to test submodules? module-level filtering could work with a config submod in the test module</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-15T20:37:15.872705</ts>
    <user>Corey</user>
    <text>There's always `getenv` plus the ability to define an env var on the command-line ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-15T20:37:22.873475</ts>
    <user>Corey</user>
    <text>```
$ cat example.rkt 
#lang racket/base

(module test racket/base
  (if (getenv "BIG_TEST")
      (println "Running big tests")
      (println "Skipping big tests")))

$ raco test example.rkt 
raco test: (submod "example.rkt" test)
"Skipping big tests"

$ BIG_TEST=1 raco test example.rkt 
raco test: (submod "example.rkt" test)
"Running big tests"
```</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-15T20:38:04.878350</ts>
    <user>Corey</user>
    <text>Just from the POV of "simplest thing that could possibly work".</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-15T20:39:07.885699</ts>
    <user>Corey</user>
    <text>Could still use some macros the sweeten the raw `getenv` stuff I suppose.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-15T20:39:43.889874</ts>
    <user>Chantelle</user>
    <text>I always imagined doing that kind of thing with a separate submodule</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-15T20:39:56.891395</ts>
    <user>Chantelle</user>
    <text>`(module+ integration-test ...)`</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-15T20:40:46.897451</ts>
    <user>Corey</user>
    <text>Actually yes I think I've done that way, too.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-15T20:41:14.900803</ts>
    <user>Chantelle</user>
    <text>I'm not sure how to write the "run these submods by default unless you're in the CI environment" logic though</text>
  </message>
  <message conversation_id="55">
    <ts>2017-06-16T01:12:13.670945</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; progress is a new info type &lt;https://github.com/racket/rackunit/pull/40&gt;</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T13:35:11.218264</ts>
    <user>Delmy</user>
    <text>&lt;@Chantelle&gt; `raco test` already allows you specify command-line arguments to forward in `info.rkt` so we could implement a better interface for specifying these filters (i.e. using data structures instead of raw strings) and allow users to do it either way, if that makes sense. What kind of interface would you like to see for something like this? I'm thinking along the lines of `(struct test-filters (names-to-run k/v-filters files-to-run lines-to-run))`.
&lt;@Corey&gt; Part of the idea is that users can drill down to pretty much any individual test without altering the test file itself, so you could do things like `raco test my/module -- file=foo.rkt line=20` and get just that one test result. I'm not sure that environment variables can offer the same flexibility.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T14:48:16.652782</ts>
    <user>Chantelle</user>
    <text>&lt;@Delmy&gt; the interface I'd ideally like is two part, where there's a way to filter "kinds" of tests (each test has exactly 1 kind) and there's a way to filter specific named tests</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T14:49:27.674833</ts>
    <user>Chantelle</user>
    <text>the "kinds" part requires a programmer declare what kinds of tests they have. I think different submodules like `test`, `integration-test`,  `perf-test`, etc. would be fine for that. Then `info.rkt` could declare what submodule names to look for by default (does `raco test` already support that?)</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:00:17.878829</ts>
    <user>Corey</user>
    <text>There is a `-s` command like flag e.g. `raco test -s slow-test file.rkt` run the `slow-test` submodule in `file.rkt`</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:01:07.895531</ts>
    <user>Corey</user>
    <text>You can specify `-s mod` multiple times, too.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:01:18.899621</ts>
    <user>Corey</user>
    <text>Per command line.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:01:33.904651</ts>
    <user>Chantelle</user>
    <text>the flag is definitely useful when you're in control of the test command, like when setting up Travis</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:01:51.910120</ts>
    <user>Chantelle</user>
    <text>but I'm specifically wondering how to say "these are tests that shouldn't run locally but should run in DrDr"</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:03:37.944029</ts>
    <user>Corey</user>
    <text>I think there a variety of usage scenarios, plus people have different kinds of projects with tests of varying number and speed, and also have seen different approaches in various languages.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:04:29.959952</ts>
    <user>Corey</user>
    <text>So for instance I'm thinking, "why would I want to run only a test at line 20?", but, that's just because I haven't been in that situation so far.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:04:56.968027</ts>
    <user>Corey</user>
    <text>I think it's probably good to lay out, "What are some situations where we want to run some but not all tests?"</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:05:10.972453</ts>
    <user>Chantelle</user>
    <text>I think we need to write the test frameworks that would actually need filtering before figuring out filtering :)</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:05:12.973218</ts>
    <user>Corey</user>
    <text>And maybe also, "What are some existing ways you can run some but not all code?"</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:05:33.979674</ts>
    <user>Chantelle</user>
    <text>&lt;@Corey&gt; what do you typically do for tests that make network calls?</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:05:44.982621</ts>
    <user>Corey</user>
    <text>And maybe think about economical but convenient ways to compose all those? idk</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:06:19.993465</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; &lt;@Corey&gt;: TR has a `--just` flag for its test suite</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:06:34.998063</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; what's that do?</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:06:49.002832</ts>
    <user>Latarsha</user>
    <text>runs a single integration test</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:08:39.035232</ts>
    <user>Corey</user>
    <text>&lt;@Chantelle&gt; That's a good example where, e.g. the AWS package, I just run the tests locally with my AWS creds and there are $$ involved, so I don't run those on Travis CI or on the pkg build server.
Also I run specific tests in the REPL, usually. In racket-mode if point is inside a `module` form, then when you "run" you "enter" that (sub)module. That includes test submods, of course. So I sometimes use that to run individual tests.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:12:58.108679</ts>
    <user>Corey</user>
    <text>btw I know you can feed creds securely to Travis CI, so I _could_ have it run tests against real AWS. I just mean that I don't want to have Travis run those tests on 10 different Racket versions, and on every little commit, on my nickel :wink:</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:13:32.117912</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; how large is an integration test? is it typically a couple of lines that does something heavyweight, or something module sized, or something with multiple sizable modules?</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:13:41.120472</ts>
    <user>Chantelle</user>
    <text>&lt;@Corey&gt; that's definitely a good use case to keep in mind</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:14:05.126996</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; Integration tests are by definition modules that we run to see if they typecheck/run (or if they error in the right way)</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:14:48.138614</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; out of curiosity, could you do that as a regular `check` that takes a syntax object and evals it?</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:14:50.139238</ts>
    <user>Latarsha</user>
    <text>you might be interested in the code here: &lt;https://github.com/racket/typed-racket/blob/master/typed-racket-test/main.rkt&gt;</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:15:09.144299</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; the code is really a lot more complicated than that</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:16:54.174038</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; oh wow it's spinning up multiple places and parallelizing too</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:17:07.177558</ts>
    <user>Latarsha</user>
    <text>yeah there's a lot there</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:17:53.190561</ts>
    <user>Chantelle</user>
    <text>_and_ conditionally doing text output or gui output</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:17:55.191189</ts>
    <user>Chantelle</user>
    <text>dang</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:18:03.193513</ts>
    <user>Latarsha</user>
    <text>you might also be interested in the much simpler match tests: &lt;https://github.com/racket/racket/blob/master/pkgs/racket-test/tests/match/main.rkt&gt;</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:18:21.198455</ts>
    <user>Latarsha</user>
    <text>the gui code is never used and probably doesn't work</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-16T15:18:31.201572</ts>
    <user>Chantelle</user>
    <text>heh</text>
  </message>
  <message conversation_id="56">
    <ts>2017-06-16T16:16:50.173010</ts>
    <user>Delmy</user>
    <text>I'm getting the impression that it's more popular to organize tests into modules than to name individual tests (or groups of tests) using the testing libraries' info tracking features. What about the ability to supply `raco test` a set of regular expressions that would be used to match against module names? Or would people be more likely to separate tests within the same module into named groups if there was better support for filtering upon that predicate?</text>
  </message>
  <message conversation_id="56">
    <ts>2017-06-16T16:17:20.181224</ts>
    <user>Latarsha</user>
    <text>cfinegan I bet better support would make it more used</text>
  </message>
  <message conversation_id="56">
    <ts>2017-06-16T16:23:47.284139</ts>
    <user>Delmy</user>
    <text>I agree, although it would have to be compatible with the way people organize their tests. Right now for example rackunit "names" tests after the type of test being invoked (`check-equal?`, `check-not-false`, etc.), which isn't a super useful thing to filter upon</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-17T10:31:01.099593</ts>
    <user>Vincenzo</user>
    <text>I'm preparing a substantial refactoring of Racket's I/O layer just above the OS: &lt;https://github.com/mflatt/racket/tree/rktio&gt;
The Windows part isn't ready. It's supposed to work on other platforms – but the 10k lines of code that shifted around are heavily `#ifdef`ed, and I also tried to clean up `#ifdef`s, so I expect configuration and compilation problems.
If you build Racket on anything other than the most common OS distributions, I'd appreciate reports (a reply there here would be good) on whether it builds and/or has build/test errors.</text>
  </message>
  <message conversation_id="56">
    <ts>2017-06-18T14:55:38.844789</ts>
    <user>Helga</user>
    <text>I'm not too familiar with the racket build process, but I think it built the base/minimal racket, failed building packages:</text>
  </message>
  <message conversation_id="56">
    <ts>2017-06-18T14:56:10.846589</ts>
    <user>Helga</user>
    <text>&amp;gt; raco pkg install: version mismatch for dependency
&amp;gt; for package: 2d-lib
&amp;gt; mismatch packages:
&amp;gt; base (have 6.5.0.7, need 6.6.0.3)</text>
  </message>
  <message conversation_id="56">
    <ts>2017-06-18T14:57:11.850095</ts>
    <user>Helga</user>
    <text>Windows 10, Visual Studio 2015</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-18T19:54:08.781874</ts>
    <user>Vincenzo</user>
    <text>andreiformiga: Thanks for checking! I should have been clearer that it's the `rktio` branch of the repo; I haven't used the main branch in a while, which (based on the version number) seems to be what you built.
Also, I'm going to count Windows 10 as a common OS distribution, and I'm checking that one directly. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="57">
    <ts>2017-06-19T03:30:02.517785</ts>
    <user>Georgeanna</user>
    <text>this is a bit premature where I’m at, but can someone point me towards any code that racket provides to do free-variable analysis at macro expansion or run time? I’m wanting to expand a system I have to allow for free variables to be treated symbolically (a la Mathmatica) instead of erroring out as undefined.</text>
  </message>
  <message conversation_id="56">
    <ts>2017-06-19T03:31:42.538244</ts>
    <user>Georgeanna</user>
    <text>I’m still working through BR so this is a bit ahead of myself. Concrete examples (that are understandable) would be nice</text>
  </message>
  <message conversation_id="57">
    <ts>2017-06-19T03:42:27.660117</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; if you _only_ wish to change the behavior of undefined variables, might I recommend looking at the `#%top` macro? it's inserted as a wrapper around all unbound identifiers and you can override it to change what happens when an unbound identifier occurs.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-19T07:54:50.908923</ts>
    <user>Stefani</user>
    <text>zenspider: (require syntax/free-vars)</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-19T09:23:55.265274</ts>
    <user>Vincenzo</user>
    <text>I've run out of immediately available test failures for the rtkio refactoring, so I'm going to push it to the main repo's master branch. I'm still interested in build reports, though.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-19T09:47:12.739573</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; here's a build failure: &lt;https://travis-ci.org/racket/racket/jobs/244521015&gt;</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-19T10:12:17.310853</ts>
    <user>Stefani</user>
    <text>mflatt: I like the log message :)</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-19T13:23:34.691983</ts>
    <user>Chantelle</user>
    <text>IRC-slack bridge is malfunctioning again</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-19T16:00:17.949862</ts>
    <user>Vincenzo</user>
    <text>&lt;@Eun&gt; It looks like the `contract-profile` commits on June 1 caused the documentation build for `contract-profile.scrbl` to take substantially more memory. At over 1GB, it's now the two peak memory-use points during a build (at "running" and "rendering") as shown on the graph &lt;http://build-plot.racket-lang.org/&gt; .
Do you know offhand what might have triggered the memory use and whether it would be easily avoidable?</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-19T16:28:21.498739</ts>
    <user>Eun</user>
    <text>&lt;@Vincenzo&gt;: Yes, I increased the size of the examples in the docs. The original input sizes were too small to show anything.</text>
  </message>
  <message conversation_id="54">
    <ts>2017-06-19T16:28:52.508742</ts>
    <user>Eun</user>
    <text>But I should find a better solution; that kind of memory use is not good.</text>
  </message>
  <message conversation_id="59">
    <ts>2017-06-19T16:52:14.965415</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; that might actually be perfect. thank you.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-19T18:47:16.663505</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; I'd like to be a contributor to `racket/rackunit` in order to label / organize issues and not deal with keeping my own fork in sync, who hath the authority to bestow this power upon me?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-19T18:56:15.761814</ts>
    <user>Nelson</user>
    <text>&lt;@Latarsha&gt; can you give jack push/issue-labeling access to `racket/rackunit`?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T08:56:03.304889</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; &lt;@Chantelle&gt; Done</text>
  </message>
  <message conversation_id="60">
    <ts>2017-06-20T10:39:26.639709</ts>
    <user>Delmy</user>
    <text>What does it mean when the Travis CI build fails? I submitted a pull request that's causing the travis build to fail with GCC errors even though I didn't touch any of the C code. &lt;https://github.com/racket/racket/pull/1726&gt;</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T11:47:30.374446</ts>
    <user>Latarsha</user>
    <text>&lt;@Delmy&gt; it's not clear to me what's going on with those build failures</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T11:49:01.411587</ts>
    <user>Latarsha</user>
    <text>I think that something's wrong with subprocess handling on linux on master, based on &lt;@Vincenzo&gt;'s recent changes</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T11:50:41.453206</ts>
    <user>Delmy</user>
    <text>Okay, I wanted to confirm that it wasn't an issue with the changes in my fork.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T11:54:32.548456</ts>
    <user>Vincenzo</user>
    <text>&lt;@Delmy&gt; It's probably not an issue with your changes, but I think your branch doesn't include the rktio changes that samth has in mind</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T11:56:23.594152</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; while &lt;@Delmy&gt;'s branch doesn't have those changes, Travis tests the merge of that with master</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T11:56:28.596082</ts>
    <user>Latarsha</user>
    <text>the revision tested is here: &lt;https://github.com/racket/racket/commit/4da654e8fdeee6d196979af760f98bd4bba15732&gt;</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T12:03:33.776610</ts>
    <user>Vincenzo</user>
    <text>Ok, that's good to know. I'm not seeing that particular failure elsewhere, but I'll watch for it.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T12:06:07.839747</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; the errors I see in &lt;@Delmy&gt;'s PR tests are the same ones I see in the tests for master -- timeouts either in git-related pkg tests, or in the regular subprocess tests</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T12:06:29.848583</ts>
    <user>Latarsha</user>
    <text>I don't know if that's related to your most recent change though</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T12:06:59.860462</ts>
    <user>Vincenzo</user>
    <text>I'm seeing the pkg-test failures, and I hope the most recent change addresses those. I'm probably not looking at the right variant to see the subprocess example; can you point me to one?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T12:07:41.877859</ts>
    <user>Latarsha</user>
    <text>here's an example: &lt;https://travis-ci.org/racket/racket/jobs/244965444&gt;</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T12:07:48.880503</ts>
    <user>Vincenzo</user>
    <text>Oh – it's the ones with places &amp;amp; futures disabled. Now I know how to find the bug.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T12:08:05.887188</ts>
    <user>Latarsha</user>
    <text>Great</text>
  </message>
  <message conversation_id="61">
    <ts>2017-06-20T14:57:36.658269</ts>
    <user>Chantelle</user>
    <text>Is "require all modules in directory X" a reasonable thing to do? or does it have subtle problems with when exactly the directory is read based on when modules are compiled?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:05:44.840421</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; It wouldn't be supported well by tools like `raco make`, which can't deal with a dependency on a directory</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:12:41.985018</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; what would it take to make `raco make` aware of unusual dependencies like that?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:14:14.016230</ts>
    <user>Vincenzo</user>
    <text>I'm not sure. One complication is assigning a hash code to the directory. Another is that creating a "compiled" subdirectory would change the enclosing directory, which would be interpreted as a need to recompile. I bet there are more complications that I won't think of offhand.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:15:35.043662</ts>
    <user>Chantelle</user>
    <text>How does the planet require form work with `raco make`?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:17:21.079913</ts>
    <user>Vincenzo</user>
    <text>The default module name resolver calls out to `planet-module-name-resolver` when it sees `planet`</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:18:01.093067</ts>
    <user>Vincenzo</user>
    <text>Other tools similarly have hard-wired support for `planet`, which helps explain a class of problems that PLaneT has</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:23:18.200632</ts>
    <user>Chantelle</user>
    <text>huh, never would have guessed that but it makes sense</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:24:06.216891</ts>
    <user>Latarsha</user>
    <text>yeah, when splitting the old code into pkgs, I tried to remove planet from "base" but was unsuccessful</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:35:41.456130</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; with your latest changes, only the `--disable-jit` tests failed, and that may just be the tests in general taking too long; I'm rerunning it (&lt;https://travis-ci.org/racket/racket/builds/245045634?utm_source=slack&amp;amp;utm_medium=notification&gt;)</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T15:36:40.475860</ts>
    <user>Latarsha</user>
    <text>more generally our tests have gotten to the point where we have lots of intermittent failures from hitting the time limit; we should probably either speed some up or run fewer tests</text>
  </message>
  <message conversation_id="62">
    <ts>2017-06-20T17:07:07.319705</ts>
    <user>Chantelle</user>
    <text>&lt;@Delmy&gt; got time for some questions about racket/rackunit#44?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:27:54.690347</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; Is it *just* a pure timeout or are these performance tests? If the former, you might want to dynamically pick the timeout based on the machine &amp;amp; load. If the latter, my test framework has a benchmark test type that does curve fitting and asserts the R^2 value instead of the time. Makes it much more CI/VM proof.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:28:24.698620</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; It's the former, and it's the Travis timeout, not ours</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:29:50.722424</ts>
    <user>Latarsha</user>
    <text>see &lt;https://travis-ci.org/racket/racket/jobs/245059751&gt; for an example</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:30:01.725685</ts>
    <user>Latarsha</user>
    <text>the major problem is that the pkg tests take about 20 minutes</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:30:15.729803</ts>
    <user>Georgeanna</user>
    <text>I didn't realize that travis had a global timeout. I've worked on many projects that take a really long time on CI</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:31:06.744891</ts>
    <user>Latarsha</user>
    <text>yeah, it's about 45 minutes</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:32:20.765576</ts>
    <user>Georgeanna</user>
    <text>I think that's configurable… definitely had projects that went over that before I got to them (I *hate* long test times)</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:33:34.786319</ts>
    <user>Georgeanna</user>
    <text>oh… but maybe those projects were on circleci…</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:33:46.789659</ts>
    <user>Georgeanna</user>
    <text>easy parallelization options there too</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:34:30.801644</ts>
    <user>Latarsha</user>
    <text>this doesn't parallelize well either, because you have to build racket to start with</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:34:52.807813</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt;: you're not parallelizing the make phase: `make CPUS="2" PKGS="racket-test db-test unstable-flonum-lib net-test" CONFIGURE_ARGS_qq="$RACKET_CONFIGURE_ARGS"`</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:35:02.810543</ts>
    <user>Georgeanna</user>
    <text>IIRC, racket does build well with `-j N`</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:35:10.812821</ts>
    <user>Latarsha</user>
    <text>`CPUS=2` does that</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:35:23.816609</ts>
    <user>Latarsha</user>
    <text>but also parallelizes `raco setup`</text>
  </message>
  <message conversation_id="63">
    <ts>2017-06-20T17:36:22.832725</ts>
    <user>Delmy</user>
    <text>&lt;@Chantelle&gt; might not be able to get to everything until tomorrow morning, but I'm happy to take questions</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:36:48.839803</ts>
    <user>Georgeanna</user>
    <text>I don't think so… I think you still need `-j`… checking.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:37:24.848947</ts>
    <user>Latarsha</user>
    <text>I promise, that does it</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:38:03.859074</ts>
    <user>Latarsha</user>
    <text>`CPUS=N` exists because you can't get the value passed to `-j` to use with `raco setup`</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:38:37.868007</ts>
    <user>Chantelle</user>
    <text>cfinegan: No rush</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:39:46.886518</ts>
    <user>Georgeanna</user>
    <text>I get the `raco` side of it wrt ENV… `CPUS` is not described at all throughout the gnu make doco. It's really obtuse doco, but seems thorough.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:40:12.893428</ts>
    <user>Latarsha</user>
    <text>no, `CPUS` is part of the racket makefile</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:40:15.894155</ts>
    <user>Chantelle</user>
    <text>My first impression is that the filtering logic seems complex and out of place, but I agree filtering is useful and thank you for working on it.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:40:38.900388</ts>
    <user>Latarsha</user>
    <text>see this code: &lt;https://github.com/racket/racket/blob/master/Makefile#L45-L53&gt;</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:40:39.900485</ts>
    <user>Georgeanna</user>
    <text>I'm post workout, so I'm probably not explaining myself well…</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:40:52.904092</ts>
    <user>Chantelle</user>
    <text>how specifically do you intend to use the filtering? in DrRacket with test submodules and without test suites and only checks? in CI with test suites? some other combination?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:41:51.919524</ts>
    <user>Georgeanna</user>
    <text>gotcha… kk. Could also tune it. I've found for GCC being mostly IO bound that nproc*2 often works quite well.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:42:22.927856</ts>
    <user>Latarsha</user>
    <text>that's true for the C build step, but not for the `raco setup` build step</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:42:39.932226</ts>
    <user>Latarsha</user>
    <text>but the C build on Travis takes very little time</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:42:41.932750</ts>
    <user>Georgeanna</user>
    <text>thank you for having such a clean makefile…</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:43:05.939148</ts>
    <user>Latarsha</user>
    <text>Really we just need to make some of the tests faster</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:43:43.949109</ts>
    <user>Georgeanna</user>
    <text>I can't see how long just the C side takes… but that whole thing is 15 minutes. That's 1/3rd the total timeout.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:44:13.957184</ts>
    <user>Georgeanna</user>
    <text>you could break up the raco vs gcc side and scale accordingly… but… I'll shut up now. you obviously have this in hand and I'm just making noise at this point</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:44:27.961015</ts>
    <user>Latarsha</user>
    <text>sadly we don't have it in hand</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:44:36.963212</ts>
    <user>Georgeanna</user>
    <text>hah. well… let me know if i can help</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:44:49.966739</ts>
    <user>Latarsha</user>
    <text>well, if you can make the pkg tests faster ... :slightly_smiling_face:</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:44:57.968851</ts>
    <user>Latarsha</user>
    <text>or even figure out which ones are particularly slow</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:45:02.970225</ts>
    <user>Latarsha</user>
    <text>that would be a big help</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:45:04.970767</ts>
    <user>Georgeanna</user>
    <text>I was curious… &lt;@Vincenzo&gt; was working on nuking C for chez… but then I saw a 10kloc diff for revamping IO in C. Is that a precursor to make porting easier?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:45:09.972209</ts>
    <user>Latarsha</user>
    <text>yes</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:45:28.977368</ts>
    <user>Latarsha</user>
    <text>the `rktio` library is intended to be usable from other places (such as Chez)</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:45:42.981123</ts>
    <user>Georgeanna</user>
    <text>I'm excited about the chez port, even if it is initially slower, I suspect it'll help in the medium+ term a lot</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:46:27.993047</ts>
    <user>Latarsha</user>
    <text>I'm also excited</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:46:49.999036</ts>
    <user>Georgeanna</user>
    <text>I was blown away by a recently published table of scheme benchmarks… chez was fairly consistently 1st-2nd place. Racket often in the top 5. I had no fucking idea… chicken always FELT faster because startup costs were zero, but overall perf was shite</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:47:15.005871</ts>
    <user>Georgeanna</user>
    <text>I should have dug in on those benchmarks to see if they were using /base</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:47:38.011728</ts>
    <user>Latarsha</user>
    <text>Chez is very good, although those benchmarks somewhat overstate the advantage over Racket</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:48:00.017389</ts>
    <user>Latarsha</user>
    <text>Chez is best on old-school Scheme code -- lots of plain functions and s-expressions</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:48:29.025069</ts>
    <user>Georgeanna</user>
    <text>basically.. the same problems all benchmarks have :stuck_out_tongue:</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:48:34.026187</ts>
    <user>Latarsha</user>
    <text>more user-defined data structures and tricky indirections reduce the advantage</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:48:44.028718</ts>
    <user>Latarsha</user>
    <text>which isn't to say that it isn't still there</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:49:29.040698</ts>
    <user>Georgeanna</user>
    <text>you(? I think) helped me make a CPU simulation fast for advent of code… really nice thing to study. Then I saw a chez impl that used `define-register` and… fuck. it was soo fast</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:49:39.043289</ts>
    <user>Georgeanna</user>
    <text>I didn't _understand_ it… but FAST</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:49:50.046085</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; in general, what effect do functions-stored-in-structs have on Chez's optimizations?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:50:14.052191</ts>
    <user>Chantelle</user>
    <text>is that sort of thing tricky to handle?</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:50:19.053520</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; I don't think I could give a useful answer there</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-20T17:50:24.054850</ts>
    <user>Latarsha</user>
    <text>that's certainly trickier</text>
  </message>
  <message conversation_id="64">
    <ts>2017-06-21T10:28:01.487786</ts>
    <user>Delmy</user>
    <text>I agree that the filtering logic is complex. However, I'm not sure that it can be improved through simplification. Using a strict `or` relationship would result in behaviors that, I think would be unintuitive to users. An argument `file:foo.rkt line:20`, for example, would result in all test that are in file `foo.rkt` *or* line 20 being run, when the user probably meant "run the test in foo.rkt on line 20." Similarly with names, under a strict `or` relationship, an argument of `mytest file:foo.rkt` would result in all tests with the name "mytest" *or* the file name `foo.rkt` being run. The user in this circumstance probably meant "Run all the tests named 'mytest' in foo.rkt." The `and` relationship allows users to make more specific queries, which in my opinion is more valuable than simplicity of implemenation, since a user who wishes to cast a wider net can simply run `raco test` multiple times.</text>
  </message>
  <message conversation_id="64">
    <ts>2017-06-21T10:34:54.665204</ts>
    <user>Delmy</user>
    <text>I think the primary use case is for users who want to avoid running tests which are computationally expensive or which clutter standard output. It's intended to be used in combination with racket pull request 1726 (&lt;https://github.com/racket/racket/pull/1726&gt;), which allows users of `raco test` to forward arguments to the test modules being invoked. This was inspired in part by the testing frameworks of other popular languages like Ruby and Python, which allow users to specify from the command line sets of names to run.</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-21T13:52:09.346562</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; I don't know if you saw this failing test, but it seems rktio-related: &lt;http://drdr.racket-lang.org/40902/racket/share/pkgs/unix-socket-test/tests/unix-socket/unix-socket.rkt&gt;</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-21T13:56:50.454622</ts>
    <user>Latarsha</user>
    <text>similarly this looks like a rktio failure: &lt;http://drdr.racket-lang.org/40902/racket/collects/file/private/glob.rkt&gt;</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-21T13:57:05.460532</ts>
    <user>Latarsha</user>
    <text>If it would be helpful to track these elsewhere, I can do that</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-21T14:00:22.537312</ts>
    <user>Latarsha</user>
    <text>and &lt;http://drdr.racket-lang.org/40902/pkgs/racket-test/tests/file/cache.rkt&gt;</text>
  </message>
  <message conversation_id="58">
    <ts>2017-06-21T14:36:23.344321</ts>
    <user>Vincenzo</user>
    <text>Thanks – I've been looking at those, but I haven't yet fixed them</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-21T16:27:13.680512</ts>
    <user>Vincenzo</user>
    <text>&lt;@Natosha&gt; I think the test failure with "unix-socket.rkt" is a bug in "unix-socket.rkt". When the custodian-shutdown callback is triggered for a listener, the listerner struct still has a value for `fd` – so the `prop:evt` callback can recreate the semaphore for `fd` even though that's not a valid file descriptor anymore. Adding a poll of `reg-box` before creating the semaphore makes the test to pass on my machine, but if I'm diagnosing the problem correctly, maybe there's a better repair.</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-21T17:37:17.016663</ts>
    <user>Natosha</user>
    <text>&lt;@Vincenzo&gt;, yes, that makes sense. But now I can't understand why it ever worked in the past. Any idea what changed?</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-21T17:38:24.034956</ts>
    <user>Vincenzo</user>
    <text>The way the fd-semaphore table interacts with the scheduler is probably slightly different than before</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-21T17:40:16.065237</ts>
    <user>Natosha</user>
    <text>I think maybe that code is trying too hard to compose a pretty solution out of nice pieces like custodian-boxes-acting-as-evts. It might be cleaner with another custodian shutdown procedure specialized to listeners. I'll try that.</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-21T18:36:33.843043</ts>
    <user>Natosha</user>
    <text>&lt;@Vincenzo&gt;, just pushed a fix</text>
  </message>
  <message conversation_id="66">
    <ts>2017-06-21T23:15:50.187291</ts>
    <user>Georgeanna</user>
    <text>my get-info function for my #lang is buggy… is there a lighter weight way to test it w/o reloading drracket left and right?</text>
  </message>
  <message conversation_id="66">
    <ts>2017-06-21T23:16:28.191431</ts>
    <user>Georgeanna</user>
    <text>```
exception raised by exception handler: result arity mismatch;
 expected number of values not received
  expected: 1
  received: 7
  values...:
   "\n"
   'white-space
   #f
   12
   13
   0
   #f; original exception raised: colorer.rkt:11:5: srcloc-token: unbound identifier in module
  in: srcloc-token
```</text>
  </message>
  <message conversation_id="66">
    <ts>2017-06-21T23:36:28.318345</ts>
    <user>Georgeanna</user>
    <text>ok… I have that fixed… tho I have to say I have no idea how / why the lexer coloring function works the way it does. Also seems buggy. If I type `prin` it in red. It should go black when I add the final `t` for `print` but then I have a word that is 80% red and 20% black. DrRacket doesn’t seem to re-lex &amp;amp; color the whole word as it changes?</text>
  </message>
  <message conversation_id="66">
    <ts>2017-06-22T09:38:41.280940</ts>
    <user>Vincenzo</user>
    <text>&lt;@Georgeanna&gt; DrRacket's colorer depends on the lexer giving it information to back up just enough to recolor. I'm guessing that something about the lexer prevented the colorer from going pack to the "p" to re-lex from there. Exactly what went wrong is difficult to guess, although I recall implementing error tokens wrong once or twice, maybe because it's easy to have the wrong backup or not have the error range covered by a single token.</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T11:53:36.583114</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; On Travis tests: It looks like we spend about 15 minutes on `make`, about 8 minutes on `racket-test-core`, about 20 minutes on `raco pkg` tests, and a little while for the rest.
What if we drop the `raco pkg` tests? Has that set of test ever exposed a problem via Travis that wasn't discovered otherwise (either through DrDr or other tests)?</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T11:54:48.611199</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; I think we probably have at some point, but maybe not enough to be worth it (or worth trying to make the `raco pkg` tests faster)</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T11:54:59.615999</ts>
    <user>Latarsha</user>
    <text>let me look at the history for the pkg code</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T12:12:19.035792</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; Travis exposed some problems in the `raco pkg` tests themselves, and it's possible that &lt;https://github.com/racket/racket/commit/a5f6bf34dc75e33dd8a09d6ee7c9ea509395feb2&gt; was motivated by Travis tests (but hard to tell now)</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T12:12:30.039842</ts>
    <user>Latarsha</user>
    <text>that seems to be it that I can find</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T12:13:47.068258</ts>
    <user>Latarsha</user>
    <text>Not sure that's enough of a positive record to be worth running 80 min of tests on every commit</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T12:51:25.898384</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; I don't recall the immediate motivation there, either. Turning off the `raco pkg` test for Travis seems right to me.</text>
  </message>
  <message conversation_id="67">
    <ts>2017-06-22T15:24:15.231393</ts>
    <user>Georgeanna</user>
    <text>&lt;@Vincenzo&gt; this is what I’m working from: &lt;http://beautifulracket.com/basic-2/the-syntax-colorer.html&gt; — seems straightforward to me. I would have thought it would always be going back some to do coloring… I do find it rather odd that it is creating a `basic-lexer` on each call. What if the language needed stateful info to tell?</text>
  </message>
  <message conversation_id="67">
    <ts>2017-06-22T15:31:09.369684</ts>
    <user>Vincenzo</user>
    <text>I'll look a little more, but to answer your last question, the coloring API supports an extended mode to let you thread through state (i.e., store-passing), so the colorer can keep track of which state to send back if it needs to resume from a particular point</text>
  </message>
  <message conversation_id="68">
    <ts>2017-06-22T15:56:10.873291</ts>
    <user>Jacob</user>
    <text>hi &lt;@Natosha&gt;, may I ask how you were able to configure the build you used to test &lt;https://github.com/racket/racket/pull/1704&gt; changes? I tried doing a local merge with the master branch but the build keeps failing with Racket aborting in middle of `raco setup` so I'm currently unable to replicate the errors you got.

I do totally believe you :slightly_smiling_face: and I understand that my code caused SQL_BUSY status codes to be converted into raised exceptions, breaking automatic retry. I'm just concerned that I'm effectively blind to seeing that at my end.</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T16:08:15.124427</ts>
    <user>Vincenzo</user>
    <text>zenspider: I'm not clear what code you're running. Do you mean that you're using "basic-2-tutorial.zip" unmodified?</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T16:16:06.277703</ts>
    <user>Georgeanna</user>
    <text>sorry, no. I have implemented all of basic up to the point of implementing the completed colorer, so `#lang basic` w/ my own main and basic/colorer. Lemme see if I’m fully pushed</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T16:16:57.294763</ts>
    <user>Georgeanna</user>
    <text>OK. I am: &lt;https://github.com/zenspider/schemers/tree/master/br/basic&gt;</text>
  </message>
  <message conversation_id="68">
    <ts>2017-06-22T16:31:19.582453</ts>
    <user>Natosha</user>
    <text>&lt;@Jacob&gt; I started with the current master branch and used `hub am` (`hub` is a github-enhanced version of the `git` command) to add your changes. The effect should be the same as starting with your PR branch and rebasing with the current master branch. (And probably the same as just doing a merge, except without the merge commit.) How is the build failing? Out of memory, or something else?</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T16:43:23.820688</ts>
    <user>Vincenzo</user>
    <text>Ok, I guess I'm actually unclear on how to get into the state you showed. But I also notice that keywords are given the style `'no-color`, which seems to mean "don't change the color" – that is, if "prin" was formerly red to show an error then it won't be changed to a different color if it becomes part of "print"</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T17:44:19.903115</ts>
    <user>Georgeanna</user>
    <text>that’s exactly the scenario. I can make a video to show it… but put `print” up there, it’ll turn a proper color, backspace once and wait until “prin” goes red, and then type “t”. Only the “t” is black at that point.</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T17:44:42.909336</ts>
    <user>Georgeanna</user>
    <text>sorry to bother you with this. mbutterick isn’t on anything online and doesn’t respond much to my MANY reports against his content</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-22T17:50:20.994746</ts>
    <user>Georgeanna</user>
    <text>well… damn. I can’t reproduce the red color right now either… I’m gonna have to back up to figure out why/how</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-23T04:21:37.231520</ts>
    <user>Georgeanna</user>
    <text>OK. Yes, I can reproduce. I had an extra commit from halfway through the next section which adds variables to the lexer. If I roll that out, then the 80% red 20% black thing sticks. If I change the no-color line to symbol, then it does redraw properly. Is there a “normal-but-not-no-color” value? I don’t see where drracket’s color semantics are documented</text>
  </message>
  <message conversation_id="65">
    <ts>2017-06-23T05:03:34.785433</ts>
    <user>Georgeanna</user>
    <text>OK. I used `ag` and dug up `syntax-color` module and decided a fair default was `other` and it seems to have fixed it… I’ll send that as feedback to BR</text>
  </message>
  <message conversation_id="69">
    <ts>2017-06-23T11:55:22.265052</ts>
    <user>Jacob</user>
    <text>So far when I'm building a fresh `amd64` binary on my Windows machine using `nmake win32-in-place` it fails with either error `nmake : fatal error U1077: 'racket/racket.EXE' : return code '0xc0000005'` or `nmake : fatal error U1077: 'racket/racket.EXE' : return code '0xc0000374'` Googling those error codes tell me that it appears to be a memory corruption issue. 

I tried doing build based off just the `master` branch without my changes merged and also a fresh build after doing a checkout of the v6.9 tag. I still get failing builds so I think this is something specific to my machine. I don't know yet what's wrong, I was able to build from the v6.9 codebase without issues at least a month ago.

I'll give this another try when I have access to a different Windows machine. Are you satisfied with the most recent PR commit push?</text>
  </message>
  <message conversation_id="69">
    <ts>2017-06-23T20:10:46.801683</ts>
    <user>Natosha</user>
    <text>&lt;@Jacob&gt; yes, I'll push them, thanks!</text>
  </message>
  <message conversation_id="70">
    <ts>2017-06-26T11:43:22.701180</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; did you have more comments on &lt;https://github.com/racket/rackunit/pull/41&gt; or shall I merge?</text>
  </message>
  <message conversation_id="70">
    <ts>2017-06-26T12:30:57.767575</ts>
    <user>Nelson</user>
    <text>go merge!</text>
  </message>
  <message conversation_id="70">
    <ts>2017-06-26T12:31:17.774855</ts>
    <user>Chantelle</user>
    <text>huzzah!</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:06:53.444660</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; since the rktio changes, this test and a few like it have been failing on and off: &lt;http://drdr.racket-lang.org/41014/pkgs/racket-benchmarks/tests/racket/benchmarks/shootout/typed/echo-non-optimizing.rkt&gt;</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:07:08.449020</ts>
    <user>Latarsha</user>
    <text>I realize that's not the most helpful diagnostic information</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:09:45.495072</ts>
    <user>Latarsha</user>
    <text>It's also not clear if this is a concurrency bug in the tests that just started happening because of your changes, or if it's a real bug in Racket</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:11:09.520486</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; Is port number 8888 reserved in DrDr for that test?</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:12:02.535826</ts>
    <user>Latarsha</user>
    <text>It's the only occurrence of 8888 in `racket/racket`</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:12:11.538483</ts>
    <user>Vincenzo</user>
    <text>I guess non-registration would be a `listen` error anyway</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:12:18.540211</ts>
    <user>Latarsha</user>
    <text>is there a reservation mechanism in DrDr that I've forgotten about?</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:12:50.549967</ts>
    <user>Vincenzo</user>
    <text>There's some list of ports somewhere. Maybe it's not actually registered other than being in the list.</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:13:12.556320</ts>
    <user>Vincenzo</user>
    <text>Looking at that test, though, isn't there a race between the client starting and the server listening?</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:16:33.614686</ts>
    <user>Latarsha</user>
    <text>it does look like a race</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:18:35.648829</ts>
    <user>Latarsha</user>
    <text>looks like the race was there from the beginning, in &lt;https://github.com/racket/racket/blob/d615bccb08274398f347b78a1dd746fe40eb3671/collects/tests/mzscheme/benchmarks/shootout/echo.ss&gt;</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:18:43.651144</ts>
    <user>Latarsha</user>
    <text>I'll add some synchronization</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:34:53.916921</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; what’s the racket’y way of doing that? I don’t find an equivalent to C/unix `select`, which is what I’d normally reach for…</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:35:15.922509</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; `sync` is the equivalent of `select`</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:35:28.926122</ts>
    <user>Latarsha</user>
    <text>but in this case I think I can just start the client later</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:36:10.936463</ts>
    <user>Latarsha</user>
    <text>no, that's wrong too</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:36:29.941640</ts>
    <user>Georgeanna</user>
    <text>heh. sure.</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:36:58.948997</ts>
    <user>Georgeanna</user>
    <text>hrm. sync is on _any_ data you send through the channel?</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:37:10.952408</ts>
    <user>Georgeanna</user>
    <text>that’s nice</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:37:30.957456</ts>
    <user>Latarsha</user>
    <text>`sync` is very nice</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:37:39.959628</ts>
    <user>Latarsha</user>
    <text>and more composable than select</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:38:12.967988</ts>
    <user>Georgeanna</user>
    <text>but `break` is an exception, not some sort of event you send through?</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:38:28.972080</ts>
    <user>Georgeanna</user>
    <text>hrm… I can’t tell how the break stuff gets fired</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:41:26.017247</ts>
    <user>Georgeanna</user>
    <text>is it more idiomatic to send off a `break-thread` to all your child threads or to send through some sort of `stop` datum/event to all of them?</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:43:06.042681</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; why would you need to do that?</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:43:57.055640</ts>
    <user>Georgeanna</user>
    <text>thinking of the worker model… fire off a pool of threads to do work, throw them things to work on via `sync`, then when you’re done shut them down by telling them to stop somehow</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:44:07.058037</ts>
    <user>Georgeanna</user>
    <text>might be backwards thinking in racket land</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:44:35.065411</ts>
    <user>Latarsha</user>
    <text>mostly you do `thread`-per-connection</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:52:21.181971</ts>
    <user>Chantelle</user>
    <text>worker thread pools are more useful when stopping and starting threads is expensive and the resource overhead per-thread is significant</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:52:56.190549</ts>
    <user>Chantelle</user>
    <text>for green thread systems like racket's that's typically not the case</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:53:20.196308</ts>
    <user>Latarsha</user>
    <text>right, I use pools of Racket places in some situations</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:53:24.197278</ts>
    <user>Latarsha</user>
    <text>since those are expensive</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:53:55.204826</ts>
    <user>Chantelle</user>
    <text>a package providing a nice place-pool abstraction might be useful</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:55:19.225491</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; out of curiosity, do you know of any multicore webservers written in racket with places?</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T17:55:53.233657</ts>
    <user>Latarsha</user>
    <text>I think I've seen examples, but not that I recall offhand</text>
  </message>
  <message conversation_id="72">
    <ts>2017-06-26T17:59:03.279019</ts>
    <user>Marlin</user>
    <text>&lt;@Chantelle&gt; I've played around with that idea in the past. I think it would be a bit more straightforward if a tcp listener could be sent over a place channel.</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T18:03:08.338884</ts>
    <user>Chantelle</user>
    <text>&lt;@Marlin&gt; how'd it work out? my first impression is that it seems like individual places should be responsible for binding to OS ports, but I haven't really done more than idly daydream about the problem</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T18:05:54.377426</ts>
    <user>Marlin</user>
    <text>&lt;@Chantelle&gt; I never took the idea very far :slightly_smiling_face:

You definitely could have different places bind to different ports, but then you'd need a proxy layer in front of that, right? You can also leave a single place in charge of accepting connections and handing them off to workers (which is what I was toying around with), but that seems like a bit lightweight of a task for a place.</text>
  </message>
  <message conversation_id="72">
    <ts>2017-06-26T18:06:57.391388</ts>
    <user>Chantelle</user>
    <text>proxy layer would definitely be needed, yes</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T18:07:10.394280</ts>
    <user>Chantelle</user>
    <text>specifically I was thinking of how to make a Racket web service with the SEDA architecture &lt;https://en.wikipedia.org/wiki/Staged_event-driven_architecture&gt;</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-26T21:23:02.249685</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; :party: :party: :party: &lt;https://github.com/racket/rackunit/pull/48&gt;</text>
  </message>
  <message conversation_id="73">
    <ts>2017-06-26T21:46:21.423778</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; &lt;http://drdr.racket-lang.org/41016/racket/share/pkgs/redex-test/redex/tests/run-tests.rkt&gt; looks like it's caused by your changes</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-27T17:11:48.420307</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; responded to #48, assuming your approval means it's good to merge</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-27T17:12:58.440984</ts>
    <user>Chantelle</user>
    <text>death to the monads :tada:</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-27T17:24:10.642788</ts>
    <user>Nelson</user>
    <text>yep! I just had those little questions</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-27T17:27:17.698440</ts>
    <user>Chantelle</user>
    <text>thanks for all the reviews :)</text>
  </message>
  <message conversation_id="71">
    <ts>2017-06-27T17:28:25.718344</ts>
    <user>Nelson</user>
    <text>of course, I'm just a concerned user of Rackunit. Thanks for all the improvements</text>
  </message>
  <message conversation_id="74">
    <ts>2017-06-27T19:54:34.546247</ts>
    <user>Chantelle</user>
    <text>would it be inappropriate for rackunit to depend on `syntax/parse`?</text>
  </message>
  <message conversation_id="74">
    <ts>2017-06-27T19:55:28.554953</ts>
    <user>Kimbery</user>
    <text>I doubt it would be a problem, given that `syntax/parse` is in `base`</text>
  </message>
  <message conversation_id="74">
    <ts>2017-06-27T19:56:21.562866</ts>
    <user>Chantelle</user>
    <text>I'm less worried about package dependencies and more worried about test execution speed slowing down if loading `syntax/parse` is expensive</text>
  </message>
  <message conversation_id="74">
    <ts>2017-06-27T19:57:27.573133</ts>
    <user>Kimbery</user>
    <text>I guess that’s a valid concern, yeah</text>
  </message>
  <message conversation_id="74">
    <ts>2017-06-27T19:58:30.582336</ts>
    <user>Chantelle</user>
    <text>but I have no idea how expensive loading `syntax/parse` is</text>
  </message>
  <message conversation_id="75">
    <ts>2017-06-27T20:28:51.849913</ts>
    <user>Latarsha</user>
    <text>It should be fine</text>
  </message>
  <message conversation_id="76">
    <ts>2017-06-27T23:37:19.233141</ts>
    <user>Georgeanna</user>
    <text>Is there a way to “run” an input file as if it had a `#lang xxx` line at the front… basically say eval this port/file/whatever with xxx lang?</text>
  </message>
  <message conversation_id="76">
    <ts>2017-06-27T23:38:02.237234</ts>
    <user>Georgeanna</user>
    <text>I want to write a more “traditional” style of tool, then have that slurp into racket as if it were a `.rkt` file with a proper `#lang`</text>
  </message>
  <message conversation_id="76">
    <ts>2017-06-28T07:35:17.241479</ts>
    <user>Julianna</user>
    <text>&lt;@Georgeanna&gt; if its a module language (and doesn’t have a special reader), you can read the file in, construct a module with the language xxx and the read in stuff as the body, and eval that. might be an easier way though</text>
  </message>
  <message conversation_id="76">
    <ts>2017-06-28T09:52:23.498947</ts>
    <user>Vincenzo</user>
    <text>&lt;@Georgeanna&gt; If the module language does have a reader, you can call it directory, but another option is to use `input-port-append` to add the `#lang` line. In any case, to handle relative paths,  you'll want to set `current-load-relative-directory` while reading; to get the module declaration associated with the original path, set `current-module-declare-name` during `eval`.</text>
  </message>
  <message conversation_id="75">
    <ts>2017-06-29T12:57:31.134607</ts>
    <user>Lavenia</user>
    <text>Is the order of the marks of continuation-mark-set-&amp;gt;list specified?  &lt;http://docs.racket-lang.org/reference/contmarks.html&gt;</text>
  </message>
  <message conversation_id="75">
    <ts>2017-06-29T13:14:35.510839</ts>
    <user>Latarsha</user>
    <text>&lt;@Lavenia&gt; the innermost mark is first, I think</text>
  </message>
  <message conversation_id="75">
    <ts>2017-06-29T13:14:54.517418</ts>
    <user>Lavenia</user>
    <text>Makes sense.</text>
  </message>
  <message conversation_id="75">
    <ts>2017-06-30T14:00:57.580946</ts>
    <user>Latarsha</user>
    <text>discussion about 2d syntax on Hacker News: &lt;https://news.ycombinator.com/item?id=14657857&gt; (cc &lt;@Tina&gt;)</text>
  </message>
  <message conversation_id="75">
    <ts>2017-06-30T14:02:18.609785</ts>
    <user>Tina</user>
    <text>whee!</text>
  </message>
  <message conversation_id="75">
    <ts>2017-06-30T14:02:29.613605</ts>
    <user>Latarsha</user>
    <text>it's actually pretty positive</text>
  </message>
  <message conversation_id="77">
    <ts>2017-06-30T15:14:52.015781</ts>
    <user>Lavenia</user>
    <text>There has been some Racket talk on HN lately.   &lt;https://hn.algolia.com/?query=racket&amp;amp;sort=byDate&amp;amp;prefix&amp;amp;page=0&amp;amp;dateRange=pastWeek&amp;amp;type=all&gt;</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T17:13:41.061803</ts>
    <user>Georgeanna</user>
    <text>are there macro forms of IO that don’t take thunks? (iow, use `expr ...`) just feels klunky</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T17:15:01.066821</ts>
    <user>Georgeanna</user>
    <text>also, I’m trying to do &lt;@Vincenzo&gt;’s suggestion of using `input-port-append` to prepend a `#lang` line … Will location info be for the concatenation or for each port being used? IE, will error info be off-by-one?</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T17:16:57.073900</ts>
    <user>Georgeanna</user>
    <text>Hrm… actually:

```
UNKNOWN::0: read: #lang not enabled in the current context
```</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T17:17:38.076465</ts>
    <user>Georgeanna</user>
    <text>… that must be from C? I can’t find it in the racket source</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T17:41:53.168949</ts>
    <user>Willian</user>
    <text>&lt;@Georgeanna&gt;  `#lang not enabled in the current context` usually means you want `with-module-reading-parameterization`</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T17:45:43.182552</ts>
    <user>Georgeanna</user>
    <text>looking… I used `(read-accept-reader #t)` and feel like I’m going down a rabbit hole</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T17:48:31.193241</ts>
    <user>Georgeanna</user>
    <text>same rabbit hole:

```
dynamic-require: name is not provided
name: 'read
module: #&amp;lt;resolved-module-path:(submod "/Users/ryan/Work/git/zenspider/schemers/br/basic/main.rkt" reader)&amp;gt;
```

the only dynamic-require I use anywhere is for the colorer, which shouldn’t be invoked at this point</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T17:48:59.194803</ts>
    <user>Georgeanna</user>
    <text>also, `syntax/modred` vs `syntax/module-reader`? :confused:</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T17:57:15.225582</ts>
    <user>Georgeanna</user>
    <text>ok. Stole some code from &lt;https://github.com/AlexKnauth/postfix-dot-notation/blob/master/postfix-dot-notation/lang/reader.rkt&gt; and have it reading in correctly. Don’t understand why `read` is the wrong approach but `read-syntax` works just fine</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T18:31:28.357277</ts>
    <user>Georgeanna</user>
    <text>can somebody help me with this last bit? I clearly don’t understand something in the glue of racket’s `#lang` handling:

&lt;https://gist.github.com/6c4e50cdea9925f706ac1ff0019e3105&gt;

outputs:

```
code:
(module basic-mod basic/expander
  (b-program
   (b-line ...lots of stuff...)))
define:
run:
dynamic-require: unknown module
  module name: #&amp;lt;resolved-module-path:'basic-mod&amp;gt;
  context...:
   /Users/ryan/Work/git/zenspider/schemers/br/basic/basic: [running body]
```</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T18:49:22.421178</ts>
    <user>Vincenzo</user>
    <text>The module is declared in `ns`, but `ns` isn't the current namespace when `dynamic-require` looks for a module.</text>
  </message>
  <message conversation_id="78">
    <ts>2017-07-01T18:55:45.443831</ts>
    <user>Georgeanna</user>
    <text>but if  I declare the module in current-namespace then it blows up because `module` and `#%app` aren’t defined</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T18:56:16.445680</ts>
    <user>Vincenzo</user>
    <text>I recommend using `dynamic-wind` with `ns`:
```
(parameterize ([current-namespace ns])
    (dynamic-require ''basic-mod #f))
```</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T18:57:01.448046</ts>
    <user>Georgeanna</user>
    <text>and not using `make-resolved-module-path` ?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T18:57:20.449300</ts>
    <user>Georgeanna</user>
    <text>that was it…</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T18:57:32.449980</ts>
    <user>Georgeanna</user>
    <text>how could I have figured that out??</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T18:59:37.457078</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; what led you to use `make-resolved-module-path` originally? was that described in Beautiful Racket?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:00:12.459518</ts>
    <user>Vincenzo</user>
    <text>Using `woot` in place of `''basic-mod` (uncommenting out the two earlier lines that set it up) is a fine idea. Usually the goal is to use a path instead of a symbol, though.</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:00:44.461934</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; I think I earlier recommended using `current-module-declare-name`, which needs a resolved module path</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:04:17.475386</ts>
    <user>Georgeanna</user>
    <text>wow! `Process Racket REPL abort trap: 6` go me!</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:05:00.477783</ts>
    <user>Georgeanna</user>
    <text>should my reader be doing a gensym for the module name? If I add multiple basic files on the cmdline the second one blows up because it’s the same name</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:05:41.480417</ts>
    <user>Georgeanna</user>
    <text>&lt;@Vincenzo&gt; thank you… that was 2 hours in the making and I wouldn’t have come up with that diagnosis or that 2 line block of code</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:06:16.482465</ts>
    <user>Georgeanna</user>
    <text>is there a way to tell that I’m running in the repl vs not?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:06:36.483596</ts>
    <user>Georgeanna</user>
    <text>right now I’m testing `(current-command-line-arguments)` being empty, but that isn’t right</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:07:19.486182</ts>
    <user>Chantelle</user>
    <text>The REPL wraps forms in `#%top-interaction`, so you could customize that form to set a parameter that you inspect</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:09:57.495544</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; … idgi… how would it know that it is in the repl? by being used? that implies I won’t know until it’s eval’d something and displayed it?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:11:20.500715</ts>
    <user>Chantelle</user>
    <text>Racket wraps all REPL expressions in `#%top-interaction` for you. So you define your lang's `#%top-interaction` to be a macro that sets a parameter like `(current-eval-is-repl?)` to true, then you can dynamically do something different in the repl.</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:12:27.504509</ts>
    <user>Chantelle</user>
    <text>The `#lang racket` language doesn't do this so it would only work in a custom language where you redefined `#%top-interaction`</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:35:19.583454</ts>
    <user>Georgeanna</user>
    <text>ok. `make-resolved-module-path` with `gensym` seems to be a happy combo</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:35:29.584073</ts>
    <user>Georgeanna</user>
    <text>here’s my latest version: &lt;https://gist.github.com/zenspider/6c4e50cdea9925f706ac1ff0019e3105&gt;</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:35:51.585290</ts>
    <user>Georgeanna</user>
    <text>I’m now trying to take it one step further and get it so I can shebang the basic files and run them directly</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:37:07.589854</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; can I suggest that you do development on your fork, rather than in `racket/rackunit`?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:37:19.590547</ts>
    <user>Latarsha</user>
    <text>I ask mostly because commits to `racket/rackunit` send a bunch of people mail</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:38:52.595687</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; is it possible to change the mail settings? working on the fork is slightly irritating</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:39:43.598697</ts>
    <user>Latarsha</user>
    <text>Sadly there's no option to only send mail for `master`</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:39:54.599551</ts>
    <user>Chantelle</user>
    <text>is it github mail or travis mail?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:40:50.602923</ts>
    <user>Latarsha</user>
    <text>it's github mail</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:42:07.607184</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; I think if you worked in a branch it wouldn’t send email</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:42:40.609011</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; that's not correct, sadly -- &lt;@Chantelle&gt; is working on a branch</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:42:44.609254</ts>
    <user>Chantelle</user>
    <text>I am working in branches - checking &lt;https://help.github.com/articles/about-notification-emails/&gt; for more details</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:42:58.610053</ts>
    <user>Georgeanna</user>
    <text>at least… that’s how we work on some of our projects and we don’t get inundated by my crazy commit storms</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:43:14.611013</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; it's a hook, that sends mail to a mailing list</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:43:19.611301</ts>
    <user>Latarsha</user>
    <text>it's not notification email</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:43:26.611703</ts>
    <user>Chantelle</user>
    <text>ohhh, so it's not coming directly from github?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:43:37.612265</ts>
    <user>Chantelle</user>
    <text>wait what list</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:44:09.614083</ts>
    <user>Latarsha</user>
    <text>github has an "email" service, and that's set up to email `&lt;mailto:committers@racket-lang.org|committers@racket-lang.org&gt;` which is basically all the people who got email before we moved the canonical repo to github</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:44:16.614490</ts>
    <user>Georgeanna</user>
    <text>ah. gotcha</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:44:43.616207</ts>
    <user>Chantelle</user>
    <text>this thing? &lt;https://help.github.com/articles/managing-notifications-for-pushes-to-a-repository/#enabling-email-service-notifications-for-pushes-to-your-repository&gt;</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:44:59.617128</ts>
    <user>Latarsha</user>
    <text>perhaps we should just get rid of it, but for the moment it's easier to just keep it</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:45:15.618218</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; yes</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:45:45.619997</ts>
    <user>Georgeanna</user>
    <text>final version… &lt;https://gist.github.com/zenspider/6c4e50cdea9925f706ac1ff0019e3105&gt; … is something like `run-with-lang` of general use?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:48:25.629611</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; I'll work on the fork, sorry about the noise</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:48:32.629966</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; thanks</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:48:39.630352</ts>
    <user>Chantelle</user>
    <text>shame it can't distinguish master from non-master though</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:49:07.631868</ts>
    <user>Latarsha</user>
    <text>This is in reality not a great system since it's really reliant on the not-true idea that there's a general "committers" set for all of Racket</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:49:25.632874</ts>
    <user>Chantelle</user>
    <text>was it created pre-package-split?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:50:16.635800</ts>
    <user>Latarsha</user>
    <text>no it was created to emulate the old behavior when we split the old repository</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:50:35.636883</ts>
    <user>Latarsha</user>
    <text>because the old repo of course had a single set of committers</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:50:47.637526</ts>
    <user>Chantelle</user>
    <text>gotcha</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:53:21.645456</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; the incomplete PRs I've got open already would be difficult to move, is it alright if I just do new dev on the fork?</text>
  </message>
  <message conversation_id="79">
    <ts>2017-07-01T19:53:51.647116</ts>
    <user>Latarsha</user>
    <text>yes that's certainly fine</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T06:27:48.540598</ts>
    <user>Georgeanna</user>
    <text>is it possible to profile / report where startup time is being spent? cost of requires and #langs I guess?</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T11:59:24.861468</ts>
    <user>Vincenzo</user>
    <text>&lt;@Georgeanna&gt; You could try `racket -l mzlib/traceld -t &amp;lt;your-module&amp;gt;`</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T17:14:41.175465</ts>
    <user>Georgeanna</user>
    <text>&lt;@Vincenzo&gt; are those milliseconds?</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T17:15:03.179803</ts>
    <user>Vincenzo</user>
    <text>Yes, CPU milliseconds since startup</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T17:16:23.196266</ts>
    <user>Georgeanna</user>
    <text>huh… it hits my lexer and loads rackunit, even tho the require is in a submodule that isn’t being activated</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T17:16:28.197360</ts>
    <user>Georgeanna</user>
    <text>```
  loading /Users/ryan/Work/git/zenspider/schemers/br/basic/lexer.rkt at 1063
   loading /MyApplications/dev/lisp/Racket/share/pkgs/rackunit-lib/rackunit/compiled/main_rkt.zo at 1243
```</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T17:18:26.221158</ts>
    <user>Kimbery</user>
    <text>it looks like it isn’t loading `lexer.rkt` from a `.zo`, so it would need to load rackunit to compile `lexer.rkt`</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T17:18:42.224116</ts>
    <user>Kimbery</user>
    <text>try precompiling the lexer?</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T17:18:49.225558</ts>
    <user>Georgeanna</user>
    <text>ah</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T17:20:06.240269</ts>
    <user>Georgeanna</user>
    <text>compiling the lexer and expander count for .6-.7s… but it’s still a lot more than it feels like it should be</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-03T17:20:32.245365</ts>
    <user>Georgeanna</user>
    <text>nice to see just how much is loading… I’ll write a post-processor for that tracer output to report the expensive bits nicely</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T17:54:59.626650</ts>
    <user>Georgeanna</user>
    <text>hey. I made a thing to make profiling load times easier to figure out: &lt;https://gist.github.com/d31e7d54e8350370b141393f4afc24d6&gt;</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T17:55:17.628752</ts>
    <user>Georgeanna</user>
    <text>I’ll port to racket later</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:04:26.691821</ts>
    <user>Rozella</user>
    <text>is there anyway to catch a `(values x y ...)` as a whole when passing it to a function?</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-04T18:16:32.770800</ts>
    <user>Georgeanna</user>
    <text>&lt;@Rozella&gt; ? can you explain?</text>
  </message>
  <message conversation_id="80">
    <ts>2017-07-04T18:19:30.788161</ts>
    <user>Rozella</user>
    <text>for example, I have a function `f` and it takes one argument, when applying `(values ...)` to `f`, I would like to use `(values ...)` as a single variable inside of `f`</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:19:34.788567</ts>
    <user>David</user>
    <text>Something like &lt;https://docs.racket-lang.org/reference/values.html#%28def._%28%28quote._~23~25kernel%29._call-with-values%29%29&gt; , or maybe &lt;https://docs.racket-lang.org/sugar/index.html?q=values-%3E#(form._((lib._sugar%2Flist..rkt)._values-~3elist))&gt; ?</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:20:23.793640</ts>
    <user>Georgeanna</user>
    <text>(call-with-values (thunk (values 1 2 3)) list) ; ‘(1 2 3)</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:20:55.797095</ts>
    <user>Georgeanna</user>
    <text>but… I don’t think you can make a function that takes a variable number of values… hence the thunk</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:20:57.797347</ts>
    <user>Rozella</user>
    <text>I do found `call-with-values` but it restricts me to put values inside of lambda, I’m just looking for a more elegant way to do this</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:21:35.801309</ts>
    <user>Georgeanna</user>
    <text>&lt;@Rozella&gt; why do you want to apply `values` as an arg? can you explain what you’re trying to do?</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:23:47.815077</ts>
    <user>Georgeanna</user>
    <text>&amp;gt; It is impossible to bind the evaluated result of values expression to a single variable unlike other Scheme expressions

&lt;http://docs.racket-lang.org/srfi/srfi-86.html&gt;

Might want to check out mu/nu from 86</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:23:52.815632</ts>
    <user>Georgeanna</user>
    <text>they look interesting</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:24:04.816775</ts>
    <user>Rozella</user>
    <text>Well, I have a function that returns `values`, I would like to compare the results of two applications of that function. Probably macro could do that?</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:24:40.820857</ts>
    <user>Georgeanna</user>
    <text>```
(define v (values 1 2 3))		=&amp;gt; error
(define v (lambda () (values 1 2 3)))	=&amp;gt; (lambda () (values 1 2 3))
(define m (mu 1 2 3))			=&amp;gt; (lambda (f) (f 1 2 3))
(define a (apply values 1 '(2 3)))	=&amp;gt; error
(define a
  (lambda () (apply values 1 '(2 3))))	=&amp;gt; (lambda () (apply values 1 '(2 3)))
(define n (nu 1 '(2 3)))		=&amp;gt; (lambda (f) (apply f 1 '(2 3)))

(call-with-values v list)	=&amp;gt; (1 2 3)
(m list)			=&amp;gt; (1 2 3)
(call-with-values a list)	=&amp;gt; (1 2 3)
(n list)			=&amp;gt; (1 2 3)
```</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:25:36.826735</ts>
    <user>Georgeanna</user>
    <text>so for testing? yeah… you could do that with a macro. wrap up LHS and RHS with call-with-values … list</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:25:48.828186</ts>
    <user>Georgeanna</user>
    <text>then use check-equal?</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:26:42.834146</ts>
    <user>Rozella</user>
    <text>yeah, for testing, right, for now I just put `values` into a lambda and use nested call-with-values, then I could compare the equality of two lists</text>
  </message>
  <message conversation_id="81">
    <ts>2017-07-04T18:27:36.839791</ts>
    <user>Rozella</user>
    <text>&lt;@Georgeanna&gt; anyway, SRFI-86 looks helpful, thank you!</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:14:12.614563</ts>
    <user>Latarsha</user>
    <text>&lt;@U0702F2CE|samth&gt; set the channel topic: Racket — &lt;http://racket-lang.org&gt; — &lt;http://pasterack.org&gt; - Slack invite link: &lt;http://racket-slack.herokuapp.com&gt; - Archives: &lt;http://racket.slackarchive.io/&gt;</text>
  </message>
  <message conversation_id="83">
    <ts>2017-07-06T17:21:59.810353</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; if I wanted to write benchmarks for a package that are part of a test suite and don't produce pretty plots, should I extend &lt;https://github.com/stamourv/racket-benchmark&gt; or would I be better off making my own package for that?</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:26:50.932734</ts>
    <user>Nelson</user>
    <text>notjack: extending `racket-benchmark` would be cool</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:27:49.956857</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; do you use it often?</text>
  </message>
  <message conversation_id="83">
    <ts>2017-07-06T17:28:01.961553</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: Sure, I'm all for making racket-benchmark better!</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:28:31.973815</ts>
    <user>Eun</user>
    <text>We have a number of experiments that use it, so not breaking it is important, but improvements would be welcome!</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:29:26.996674</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; do you have links to some of the experiments?</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:30:21.019787</ts>
    <user>Eun</user>
    <text>Not directly, but I think some of our research artifacts may have some, lemme check.</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:31:39.052635</ts>
    <user>Nelson</user>
    <text>never</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:32:13.066211</ts>
    <user>Nelson</user>
    <text>but yeah I had put some benchmarks here: &lt;https://github.com/nuprl/gradual-typing-performance/tree/master/benchmarks&gt;</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:32:34.074986</ts>
    <user>Nelson</user>
    <text>and then I put some others here: &lt;https://github.com/bennn/eidetic/tree/master/benchmarks/rkt&gt;</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:33:11.089712</ts>
    <user>Nelson</user>
    <text>and this is getting silly. Usually I want some tooling around these benchmarks (to reproduce data in a paper), but the code should all be in 1 place</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:33:40.101264</ts>
    <user>Nelson</user>
    <text>like the larceny benchmarks &lt;http://www.larcenists.org/benchmarksAboutR7.html&gt;</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:33:41.101785</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: Here's one artifact: &lt;http://drops.dagstuhl.de/opus/frontdoor.php?source_opus=5514&gt;</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:33:58.108793</ts>
    <user>Eun</user>
    <text>It's a large VM, that has a benchmark suite (and other stuff) inside.</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:34:26.119777</ts>
    <user>Chantelle</user>
    <text>thanks &lt;@Nelson&gt; and &lt;@Eun&gt;  for links :)</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:34:48.128476</ts>
    <user>Chantelle</user>
    <text>really the main thing I want is something like `(check-faster (foo-benchmark foo-impl1) (foo-benchmark foo-impl2))`</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:37:13.185709</ts>
    <user>Eun</user>
    <text>Oh, sure. That should be easy to do with the results data structure.</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:37:34.194115</ts>
    <user>Eun</user>
    <text>Beware of the case where the confidence intervals overlap, though. Can't conclude that either is faster.</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:40:57.271814</ts>
    <user>Chantelle</user>
    <text>memory consumption benchmarks instead of timing benchmarks would also be useful</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:52:40.537643</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; I have benchmark-ips… it might help normalize some of the error</text>
  </message>
  <message conversation_id="84">
    <ts>2017-07-06T17:53:30.557274</ts>
    <user>Georgeanna</user>
    <text>and in minitest, I have minitest/benchmark which allows you to assert that the performance of a block of code fits well to a particular curve. Allows tests to pass regardless of the hardware you run on.</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T17:59:12.681687</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; I definitely want curve-fitting perf tests for racket. The lens library in particular could benefit from perf testing.</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T18:00:38.715110</ts>
    <user>Georgeanna</user>
    <text>basically looks like:

```
    def bench_my_algorithm
      assert_performance_linear 0.9999 do |n| # n is a range value
        @obj.my_algorithm(n)
      end
    end
```

And asserts against the R^2 of the fit instead of actual measurements</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T18:01:30.734656</ts>
    <user>Georgeanna</user>
    <text>&lt;https://github.com/seattlerb/minitest/blob/master/lib/minitest/benchmark.rb&gt;</text>
  </message>
  <message conversation_id="82">
    <ts>2017-07-06T18:02:50.763522</ts>
    <user>Georgeanna</user>
    <text>benchmark-ips is my port of a ruby tool. Similar to racket’s benchmark, but it doesn’t graph and it is focused on iterations per second instead of some fixed number of iterations… I mostly use it when experimenting with N different implementations of something</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T14:40:23.988120</ts>
    <user>Chantelle</user>
    <text>Happy branch day! :party: </text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T14:57:33.484317</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: Haven't gotten to starting the festivities yet. ;)</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:36:21.523572</ts>
    <user>Latarsha</user>
    <text>&lt;@Eun&gt; I don't know if you get this email, but the stxparse tests failed on windows on the release branch &lt;https://ci.appveyor.com/project/plt/racket/build/1.0.2619&gt; cc &lt;@Natosha&gt;</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:38:12.571483</ts>
    <user>Eun</user>
    <text>FWIW, fails on master as well: &lt;https://ci.appveyor.com/project/plt/racket/build/1.0.2619&gt;</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:39:21.600634</ts>
    <user>Latarsha</user>
    <text>&lt;@Eun&gt; that link is to the release branch build</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:39:50.613180</ts>
    <user>Latarsha</user>
    <text>you can see the history here; it's passing on master: &lt;https://ci.appveyor.com/project/plt/racket/history&gt;</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:40:18.624996</ts>
    <user>Eun</user>
    <text>Oh, you're right. I can't read appveyor's page.</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:40:45.636754</ts>
    <user>Eun</user>
    <text>I guess I wasn't expecting it to test back from the tip of the branch?</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:49:53.873144</ts>
    <user>Latarsha</user>
    <text>looks like it failed similarly for the tip of the `release` branch (see &lt;#C3P4M37H7|notifications&gt;)</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:54:10.983925</ts>
    <user>Natosha</user>
    <text>&lt;@Eun&gt;, it "fails" under `raco test` but not when run directly by `racket`. I suspect a bug in one of the recent rackunit changes, but I won't really be inclined to spend time debugging it until tomorrow at 8:01am EDT :slightly_smiling_face:</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:54:50.000520</ts>
    <user>Eun</user>
    <text>Heh. :)</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:54:59.004367</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: ^</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:56:01.031681</ts>
    <user>Natosha</user>
    <text>If anyone else wants to investigate, I did narrow it down to the test case in `test-litset.rkt` labelled `"litset, #:at"`</text>
  </message>
  <message conversation_id="86">
    <ts>2017-07-07T15:57:27.069459</ts>
    <user>Chantelle</user>
    <text>&lt;@Natosha&gt; is it a failure in the sense of a rackunit check failing,  or an error of some sort? I recently started using syntax parse in rackunit, maybe there's a circular dependency somewhere?</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:59:05.111244</ts>
    <user>Chantelle</user>
    <text>this expression in that test looks funky: `(check-equal? (syntax-&amp;gt;datum (getvar lambda #'(lambda b c))))`</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T15:59:56.133451</ts>
    <user>Chantelle</user>
    <text>did that used to syntax error, which was expected, and now it runtime errors?</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:01:19.173013</ts>
    <user>Natosha</user>
    <text>&lt;@Chantelle&gt;: it's a misbehavior in that `racket test-litset.rkt` shows no failure output, but `raco test test-litset.rkt` prints "1/3 test failures"</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:02:26.202610</ts>
    <user>Chantelle</user>
    <text>&lt;@Natosha&gt; looking at `tcerr`, I think that test was never run before</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:02:40.208653</ts>
    <user>Natosha</user>
    <text>&lt;@Chantelle&gt;: ah, good point, I missed that...</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:02:50.213363</ts>
    <user>Chantelle</user>
    <text>old implementation of `check-equal?` would syntax error when given one argument instead of two, new version makes it a runtime error</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:03:10.221900</ts>
    <user>Chantelle</user>
    <text>and tcerr would catch the syntax error and try to match it against error message patterns, of which there are none for that test</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:03:12.222554</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; that seems potentially worrying</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:04:30.256155</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; I agree. The docs for rackunit never mentioned that checks test their arity during macro expansion though, so it's at least not a break in documented behavior. But rackunit has a lot of odd undocumented internal behavior.</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:04:58.268109</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; since it actually broke something, it seems like maybe that behavior needs to be kept</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:06:23.304913</ts>
    <user>Natosha</user>
    <text>&lt;@Latarsha&gt; well, the code in the test case is definitely wrong too, so I don't think we should hold rackunit to the old behaviour</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:07:08.324051</ts>
    <user>Kimbery</user>
    <text>it’d be cool if we had a versioning system that made it possible to break backwards compatibility</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:07:30.333306</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; don't get too radical :P</text>
  </message>
  <message conversation_id="86">
    <ts>2017-07-07T16:14:16.503747</ts>
    <user>Georgeanna</user>
    <text>Does the doco really need to explicitly mention checking arity tho? Seems a safe assumption to me unless it says otherwise.</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:15:19.530648</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; checking arity wouldn't need to be documented. checking arity at compile time using macros probably should be, I'd be really surprised if a library provided "functions" that did that without mentioning it</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:23:56.749016</ts>
    <user>Natosha</user>
    <text>Thanks &lt;@Chantelle&gt;, that explains the rackunit issue; I'll change the test case. Unfortunately, fixing the test case made me realize literal sets with `#:at` aren't working the way I expected, so I've got to think harder about that before I commit a fix.</text>
  </message>
  <message conversation_id="85">
    <ts>2017-07-07T16:26:26.811911</ts>
    <user>Chantelle</user>
    <text>glad to help, and happy to hear the rackunit changes didn't explode everything</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:24:45.326242</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; you might be interested in `datum-&amp;gt;syntax`</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:25:17.346995</ts>
    <user>Latarsha</user>
    <text>as well as this line from the docs for `datum-&amp;gt;syntax`: "Mutable vectors and boxes are replaced by immutable vectors and boxes."</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:28:16.461995</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; That makes sense for one direction. But then it doesn’t make sense why when its done at phase 1 the vector becomes mutable.</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:29:24.504253</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; I agree, I don't understand what's going on there</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:29:37.512243</ts>
    <user>Latarsha</user>
    <text>but that should be investigated without using 3 layers of quoting</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:29:48.518838</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; Ha, ya, I do agree with that.</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:29:48.519120</ts>
    <user>Latarsha</user>
    <text>and is unrelated to the typing issue</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:30:02.527793</ts>
    <user>Rosalee</user>
    <text>I also agree with that.</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:30:45.555559</ts>
    <user>Rosalee</user>
    <text>(I forgot that this originated from a typed/racket thing. &lt;@Nelson&gt; and I were discussing it (outside of slack) without the context of TR.)</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:31:45.594217</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; (Or anyone else familiar enough with the FFI to answer), I have the following program that uses ffi/unsafe/alloc: &lt;https://gist.github.com/LeifAndersen/353e0da21d9213dcd6a79cbd9b8c94ee&gt;</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:32:15.613341</ts>
    <user>Rosalee</user>
    <text>In a loop, it allocates a frame, relying on the GC to clean up.</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:32:22.617961</ts>
    <user>Rosalee</user>
    <text>However, it leaks memory very quickly.</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:32:24.618867</ts>
    <user>Nelson</user>
    <text>yes &lt;@Latarsha&gt; thanks for pointing out `datum-&amp;gt;syntax`. Here's another phase 1 example (still returns the weird result)
```
#lang racket/base
(require (for-syntax racket/base))

(define-syntax (foo stx)
  (with-syntax ((x (datum-&amp;gt;syntax stx (vector-immutable 1))))
   (syntax (syntax x))))

(immutable? (syntax-e (foo)))
```</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:32:36.626688</ts>
    <user>Rosalee</user>
    <text>BUT, if I remove line 15 (the deallocator wrapper), it stops leaking memory.</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:32:41.630027</ts>
    <user>Rosalee</user>
    <text>Does anyone have any suggestions?</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:33:58.677476</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; here's the bug:</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:33:58.677646</ts>
    <user>Rosalee</user>
    <text>(For the record, if I remove both alloc and dealloc, and just call the `av-frame-free` function by hand everything works fine.)</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:34:05.682117</ts>
    <user>Latarsha</user>
    <text>```
&amp;gt; (immutable? (syntax-e (quote-syntax #(1))))
#f
```</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T10:34:40.703492</ts>
    <user>Latarsha</user>
    <text>note that `syntax-&amp;gt;datum` does the right thing</text>
  </message>
  <message conversation_id="88">
    <ts>2017-07-12T10:59:39.664089</ts>
    <user>Vincenzo</user>
    <text>leif: The short answer is that the finalization system used by `allocator` is not good enough (and wouldn't be good enough in most runtimes). Finalizers via `allocator` are run in a separate thread, so the program requires a combination of a GC and a context switch and another GC before some relevant memory can be reclaimed. Some solutions might involve limiting the allocator via `(sleep)` or forcing an occasional GC via `(collect-garbage)`.</text>
  </message>
  <message conversation_id="88">
    <ts>2017-07-12T11:17:10.348840</ts>
    <user>Vincenzo</user>
    <text>I now see the rest of your original message, and I'm puzzled offhand that removing `#:wrap (deallocator)` helps, so I'll investigate a little more.</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T11:25:48.683637</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; and &lt;@Nelson&gt; FWIW, I ran this test on Racket7, and got:
```
leif@FATT ~/src/racket7/racket/bin (master) $ ./racket test.rkt
--------------------
FAILURE
name:       check-false
location:   test.rkt:4:0
params:     '(#t)
message:    "(syntax-e (syntax (vector))) made immutable vector"
--------------------
--------------------
FAILURE
name:       check-false
location:   test.rkt:19:0
params:     '(#t)
message:    "(syntax-e (syntax (vector))) made immutable vector"
--------------------
```</text>
  </message>
  <message conversation_id="89">
    <ts>2017-07-12T11:26:04.694412</ts>
    <user>Rosalee</user>
    <text>So I’m pretty sure there is a bug here.</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T11:27:03.732454</ts>
    <user>Nelson</user>
    <text>^ this test = &lt;http://pasterack.org/pastes/86496&gt;</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T11:27:17.741509</ts>
    <user>Nelson</user>
    <text>(point is, now the failures are consistent)</text>
  </message>
  <message conversation_id="88">
    <ts>2017-07-12T11:44:22.399419</ts>
    <user>Vincenzo</user>
    <text>As far as I can tell, adding `#:wrap (deallocator)` slows down `av-frame-free` enough that the finalization thread moves more slowly than the allocation thread, so my original answer is still what I think is happening. Removing `#:wrap (deallocator)` might be a reasonable solution if `av-frame-free` is not to be called directly.</text>
  </message>
  <message conversation_id="87">
    <ts>2017-07-12T13:25:01.912261</ts>
    <user>Rosalee</user>
    <text>Ah, okay, thanks makes a lot of sense. Thank you.</text>
  </message>
  <message conversation_id="89">
    <ts>2017-07-12T13:27:55.011655</ts>
    <user>Rosalee</user>
    <text>That would also explain why writing my own finalizer (and a single thread that calls the will executors in a loop), doesn’t have the same problem.</text>
  </message>
  <message conversation_id="90">
    <ts>2017-07-12T14:48:26.761040</ts>
    <user>Chantelle</user>
    <text>If I register a will for a value exported by a module, can that will ever be executed?</text>
  </message>
  <message conversation_id="90">
    <ts>2017-07-12T14:49:21.791620</ts>
    <user>Chantelle</user>
    <text>use case is a value used by test modules, wondering if it can be automatically cleaned up after the tests finish by relying on `raco test` somehow</text>
  </message>
  <message conversation_id="90">
    <ts>2017-07-12T15:04:59.319938</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; The namespace where the module is instantiated would have to become inaccessible, including not being `current-namespace`</text>
  </message>
  <message conversation_id="90">
    <ts>2017-07-12T15:28:43.050463</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; if I `raco test -p mypackage`, which contains some test submodules that require a module providing a value with an attached will, would `raco test`'s shutdown process trigger the will execution? would running the tests in parallel with `-j` affect that?</text>
  </message>
  <message conversation_id="90">
    <ts>2017-07-12T15:44:54.551223</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; No, I don't think `raco test` will trigger the will execution. Either you're in `--direct` mode and it's all done in one namespace or the relevant place/process exits still holding its namespace</text>
  </message>
  <message conversation_id="90">
    <ts>2017-07-12T15:45:40.576921</ts>
    <user>Chantelle</user>
    <text>drat</text>
  </message>
  <message conversation_id="91">
    <ts>2017-07-12T19:33:31.239905</ts>
    <user>Keisha</user>
    <text>leif: Hi Leif!</text>
  </message>
  <message conversation_id="92">
    <ts>2017-07-13T00:14:40.596134</ts>
    <user>Georgeanna</user>
    <text>Awwww</text>
  </message>
  <message conversation_id="92">
    <ts>2017-07-13T01:16:49.154057</ts>
    <user>Georgeanna</user>
    <text>is there an addendum for the redex book anywhere? the syntax in the book is a bit crufty. not sure what else changed</text>
  </message>
  <message conversation_id="93">
    <ts>2017-07-13T10:17:05.768802</ts>
    <user>Rosalee</user>
    <text>Hello</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T11:27:20.629834</ts>
    <user>Latarsha</user>
    <text>&lt;@Eun&gt; JFYI:</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T11:27:24.632064</ts>
    <user>Latarsha</user>
    <text>```
#hash(("semver" . (success test-fail))
        ("racketscript-extras" . (no-docs build-fail))
        ("wrap" . (install-conflict build-fail))
        ("css" . (success test-fail))
        ("racketscript" . (no-docs build-fail))
        ("turnstile" . (success test-fail))
        ("racketscript-compiler" . (no-docs build-fail)))
```</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T11:27:31.636535</ts>
    <user>Latarsha</user>
    <text>those are the current build regressions</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T11:28:09.660337</ts>
    <user>Latarsha</user>
    <text>I believe that `racketscript` and `racketscript-compiler` are &lt;https://github.com/racket/typed-racket/issues/579&gt;</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T11:29:50.723779</ts>
    <user>Latarsha</user>
    <text>`wrap` is &lt;https://github.com/racket/typed-racket/issues/581&gt;</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T11:31:42.796189</ts>
    <user>Latarsha</user>
    <text>`semver` is &lt;https://github.com/racket/rackunit/issues/60&gt;</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T11:32:10.814027</ts>
    <user>Latarsha</user>
    <text>`turnstile` is a timeout in the test suite</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T11:32:21.821394</ts>
    <user>Latarsha</user>
    <text>`css` I don't understand the test failure</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T11:39:11.074437</ts>
    <user>Latarsha</user>
    <text>also, `turnstile` passes on Travis on HEAD so we probably don't need to worry about it</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T13:55:49.691809</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; the rackunit issue is caused by one of my changes to the typed rackunit code in `typed-racket-more`. On a semi-related note, what would you think of moving the typed rackunit wrapper into the `racket/rackunit` repo?</text>
  </message>
  <message conversation_id="95">
    <ts>2017-07-13T14:19:49.480183</ts>
    <user>Nelson</user>
    <text>zenspider: no I don't think there's any "readers guide" that connects the book to "modern day redex" :slightly_smiling_face:</text>
  </message>
  <message conversation_id="95">
    <ts>2017-07-13T14:20:32.503862</ts>
    <user>Nelson</user>
    <text>but I don't remember the syntax being confusingly-different --- I think using the book you just miss out on new things like `#;binding-forms`</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T17:51:45.687911</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; I'm not sure what you're suggesting. I don't think that `rackunit` should depend on `typed-racket`</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T17:52:04.695396</ts>
    <user>Latarsha</user>
    <text>also, what needs to change to fix that regression?</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T17:52:47.712567</ts>
    <user>Chantelle</user>
    <text>Not positive on the fix yet, haven't had to time for more than a glance.</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T17:53:41.733307</ts>
    <user>Latarsha</user>
    <text>ok</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T17:54:08.743048</ts>
    <user>Rosalee</user>
    <text>Does anyone know if `async-channel-put` can be called in atomic mode?</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T17:54:13.744752</ts>
    <user>Chantelle</user>
    <text>About the suggestion, I mean making a `rackunit-typed` package in the rackunit repo and having `typed-racket-more` imply that package</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T17:56:09.788481</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; that seems reasonable to me</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T17:57:13.812695</ts>
    <user>Rosalee</user>
    <text>Actually, never mind. I can probably just use `call-with-semaphore`</text>
  </message>
  <message conversation_id="96">
    <ts>2017-07-13T18:43:08.696116</ts>
    <user>Jacob</user>
    <text>Ahh interesting I wasn't aware that the current version of Redex had diverged from the book version. Good to know so I'll be sure to pay attention carefully when I'm tackling the book.</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T19:14:56.207311</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt;: Neither `async-channel-put` nor `call-with-semaphore` seem like a good idea in atomic mode, since they can block. If `call-with-semaphore` can can't block in your use and you're already in atomic mode, then would the semaphore serve a purpose? I guess you could have a function where you know the `call-with-semaphore` won't block in cases where the function is called in atomic mode, but that sounds unusual.</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T19:26:34.376955</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; I think &lt;https://github.com/racket/typed-racket/pull/583&gt; isolates and fixes the rackunit issue. As an aside, rackunit's test suite code is probably due for quite a bit of housekeeping..</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T19:37:39.534987</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Woops, I meant, I can get away with using `call-with-semaphore`, instead of `call-as-atomic` in this case.</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T19:37:59.539663</ts>
    <user>Rosalee</user>
    <text>I absolutely agree that `call-with-semaphore`is a bad idea to do in a `call-as-atomic`.</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T19:38:23.545120</ts>
    <user>Rosalee</user>
    <text>Although the `async-channel-put` I was thinking of using had an unbounded buffer size.</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T19:46:21.653733</ts>
    <user>Vincenzo</user>
    <text>Oh, that makes sense!</text>
  </message>
  <message conversation_id="94">
    <ts>2017-07-13T19:49:00.688727</ts>
    <user>Rosalee</user>
    <text>Okay cool, thanks.</text>
  </message>
  <message conversation_id="97">
    <ts>2017-07-14T00:02:24.416932</ts>
    <user>Georgeanna</user>
    <text>&lt;@Keisha&gt; you should repost these in &lt;#C5T5RQ546|summer-school&gt; … I think you can do that in the `...` menu</text>
  </message>
  <message conversation_id="98">
    <ts>2017-07-14T10:01:05.201012</ts>
    <user>Latarsha</user>
    <text>&lt;@Natosha&gt; Is it possible to fix the stxparse tests soon? currently all of our CI except DrDr is failing because of that, which limits our test coverage as a whole and makes it hard to tell if we regress things</text>
  </message>
  <message conversation_id="98">
    <ts>2017-07-14T13:29:46.808681</ts>
    <user>Natosha</user>
    <text>&lt;@Latarsha&gt; should be fixed now</text>
  </message>
  <message conversation_id="98">
    <ts>2017-07-14T13:53:02.508107</ts>
    <user>Latarsha</user>
    <text>&lt;@Natosha&gt; great</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-14T18:54:07.578716</ts>
    <user>Chantelle</user>
    <text>why does a plumber flush callback receive its flush handle as an argument? the docs say it's so it can conveniently unregister itself, but why would it need to do that? is it to guard against the plumber being flushed more than once, or to deal with the case where flushing is unsuccessful and should be retried?</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-14T19:06:24.732350</ts>
    <user>Vincenzo</user>
    <text>Yes, helping to avoid another flush was the intent. But I'm often unsure whether it's better to make a callback receive a relevant argument or have the callback be a closure as needed.</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-14T19:07:13.741877</ts>
    <user>Chantelle</user>
    <text>is there a reason flushing the callbacks doesn't automatically unregister them?</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-14T21:45:00.913947</ts>
    <user>Georgeanna</user>
    <text>`test-log` is documented as displaying by default, but that’s not the case. I need to use `(void (test-log #:display? #t))` to get actual output. cc/ &lt;@Chantelle&gt; (since you’re in there a lot of late)</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-14T21:59:47.986154</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; I think the docs are just wrong there. Based on the git history those two arguments have always defaulted to `#f` and been documented as defaulting to `#t`</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-14T21:59:57.986818</ts>
    <user>Chantelle</user>
    <text>doc patches welcome :)</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-15T00:12:37.502245</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; &lt;https://github.com/racket/rackunit/pull/62&gt;</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-15T07:39:50.960025</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; For things like flushing output ports, the callback should be preserved for future flushes</text>
  </message>
  <message conversation_id="100">
    <ts>2017-07-15T18:05:23.784089</ts>
    <user>Georgeanna</user>
    <text>How am I supposed to write this?

```
(define-syntax (function stx)
  (syntax-parse stx
    [(_ id:id)
    #'(if (identifier-binding #'id)
          (if (procedure? id)           ; blows up here for missing
              id
              (or 'ERROR (error 'function "~v is not a function" id)))
          `(function ,'id)
        )]))

(define x 42)
(define y (fn 'y (lambda (x) 42)))

(function x)                            ; 'ERROR
(function y)                            ; (function y)
(function missing)                      ; missing: unbound identifier in module
```</text>
  </message>
  <message conversation_id="100">
    <ts>2017-07-15T18:09:31.799353</ts>
    <user>Georgeanna</user>
    <text>aaaaah… I push the `#'` down to the true and false results…</text>
  </message>
  <message conversation_id="100">
    <ts>2017-07-15T21:24:11.454007</ts>
    <user>Georgeanna</user>
    <text>```
redex-check: /Users/ryan/Work/git/zenspider/schemers/racket-summerschool/driver.rkt:70
no counterexamples in 1000 attempts
```</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-15T23:08:27.768303</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; I think I'm missing an understanding of when plumbers are flushed then. Wouldn't an output port's flush callback only be called just as a racket process was exiting or if someone manually called `plumber-flush-all`? Are there times other than exiting that plumbers are flushed automatically?</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-16T08:36:40.448692</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; There are no other times that plumbers are flushed automatically, but the intent is that `plumber-flush-all` can be called at any time (in much the same way that a C program might call `fflush(NULL)`).</text>
  </message>
  <message conversation_id="101">
    <ts>2017-07-16T20:17:08.626890</ts>
    <user>Latarsha</user>
    <text>&lt;@Eun&gt; we're now down to one pkg regression, in the `css` pkg tests</text>
  </message>
  <message conversation_id="101">
    <ts>2017-07-16T20:20:32.645508</ts>
    <user>Latarsha</user>
    <text>(after the next build with the TR changes)</text>
  </message>
  <message conversation_id="101">
    <ts>2017-07-16T21:15:39.969442</ts>
    <user>Eun</user>
    <text>&lt;@Latarsha&gt;: Thanks, good to know.</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-17T20:50:37.780040</ts>
    <user>Chantelle</user>
    <text>What's the best way to take a thunk and make it run after the current thread dies?</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-17T20:51:51.794194</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; I have no idea if this would work, but would `(let ([t (current-thread)]) (thread (lambda () (sync t) (thunk))))` do something useful?</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-17T20:52:15.798885</ts>
    <user>Kimbery</user>
    <text>I realize I don’t actually know what happens if a thread waits on the thread that spawned it</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-17T20:53:40.815175</ts>
    <user>Latarsha</user>
    <text>that should work</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-17T20:54:26.823542</ts>
    <user>Chantelle</user>
    <text>hmms. what about if the thread exits abnormally? e.g. an exception or escape continuation jump?</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-17T20:55:13.832835</ts>
    <user>Chantelle</user>
    <text>I've seen `thread-dead-evt` in the docs which might help</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-17T21:02:34.920411</ts>
    <user>Kimbery</user>
    <text>I think a continuation jump couldn’t change a thread’s liveness, since that would just change the continuation of the current thread</text>
  </message>
  <message conversation_id="99">
    <ts>2017-07-17T21:03:08.927205</ts>
    <user>Kimbery</user>
    <text>and an unhandled exception would still just kill the thread</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:07:58.975679</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Any idea what I’m missing here? ^</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:08:24.991336</ts>
    <user>Rosalee</user>
    <text>Namely, it looks like `ffi-lib` is not searching where `get-lib-search-dirs` says it will, despite what the docs says?</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:09:21.025016</ts>
    <user>Vincenzo</user>
    <text>You're definitely using a 32/64-bit DLL with a 32/64-bit Racket?</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:09:37.034295</ts>
    <user>Iva</user>
    <text>55 vs 57?</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:09:45.038764</ts>
    <user>Rosalee</user>
    <text>Woops, wrong image</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:09:57.045512</ts>
    <user>Rosalee</user>
    <text>&lt;@Iva&gt; I get the same issue with 57.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:10:02.048672</ts>
    <user>Vincenzo</user>
    <text>Does the DLL have any dependencies?</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:10:26.062784</ts>
    <user>Rosalee</user>
    <text>I get this issue with both 32 and 64 bit varients of windows.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:10:44.073979</ts>
    <user>Rosalee</user>
    <text>I downloaded them from the ffmpeg website. So honestly, I don’t know if they have any deps.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:10:49.077057</ts>
    <user>Rosalee</user>
    <text>I can check.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:12:33.137974</ts>
    <user>Rosalee</user>
    <text>Hmm…the website lets you pick. And I’m pretty sure I picked the right one. I’ll see if there is anyway to tell on Windows.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:12:43.143344</ts>
    <user>Rosalee</user>
    <text>Also, here is the website: &lt;https://ffmpeg.zeranoe.com/builds/&gt;</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:12:57.151569</ts>
    <user>Vincenzo</user>
    <text>I recommend "depends.exe"</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:13:11.160013</ts>
    <user>Rosalee</user>
    <text>Specifically 3.3.2 &amp;gt; 32/64 (in this case 32) &amp;gt; Shared</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:13:15.163077</ts>
    <user>Rosalee</user>
    <text>Oh cool, thanks.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:17:04.302389</ts>
    <user>Rosalee</user>
    <text>Hmm…that very likely could be the problem:</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:17:37.323091</ts>
    <user>Rosalee</user>
    <text>They look like standard libraries, but apparently they’re not there.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:20:18.421427</ts>
    <user>Vincenzo</user>
    <text>I think those are VC++ redistributable DLLs, which means that they don't come with the OS, but applications can redistribute and install them. They're a pain.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:20:18.422002</ts>
    <user>Rosalee</user>
    <text>OH</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:20:52.442960</ts>
    <user>Rosalee</user>
    <text>Yup, that’s what I just found out too. (Although its not clear what version of the packages they are).</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:20:55.445164</ts>
    <user>Rosalee</user>
    <text>Anyway…ugg…thanks.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:21:44.474535</ts>
    <user>Vincenzo</user>
    <text>Also keep in mind that just putting the dependencies in Racket's "lib" won't make them found. The strategy that works best is to manually load every dependency before anything that needs it.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:23:42.547763</ts>
    <user>Rosalee</user>
    <text>Welp…ugg… I see.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:23:55.555827</ts>
    <user>Rosalee</user>
    <text>Would you happen to have a good tutorial on the proper use of them?</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:24:07.563403</ts>
    <user>Rosalee</user>
    <text>(I’m going to assume no, but its worth asking anyway. :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:29:35.769845</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Oh interesting, it looks like the library was compiled on Ubuntu with the MinGW-w64 toolchain.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:31:30.845775</ts>
    <user>Vincenzo</user>
    <text>I have managed to avoid all VC redistributables – mostly by using MinGW-w64, but maybe there are modes that involve them even with MinGW-w64</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:31:58.863567</ts>
    <user>Vincenzo</user>
    <text>So, other than avoiding them, I don't have good advice for dealing with redistributables</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:36:14.024242</ts>
    <user>Rosalee</user>
    <text>Ha, fair, thanks.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:47:29.446140</ts>
    <user>Rosalee</user>
    <text>Interesting. I am not finding a mode where mingw-w64 uses VC++ libraries. I wonder if one of the DLLs that build used linked to those libraries.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:51:21.597378</ts>
    <user>Rosalee</user>
    <text>Oh, here’s a thought. Maybe GCC has its own runtime that tries to mimic the VC++ one.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:58:31.880475</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Hmm…apparently this post seems to indeicate that this might not be the case: &lt;https://www.windowsforum.org/topic/51273-mingw-c11-app-compiles-cant-run-outside-ide-0xc000007b/&gt;</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T10:58:43.887969</ts>
    <user>Rosalee</user>
    <text>Err…that dependency walker is misleading here.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:01:48.012605</ts>
    <user>Vincenzo</user>
    <text>Ok – now I understand the part of the screen shown by your image. For this purpose, you should pay attention only to the top-left panel of "depends.exe"</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:11:12.379236</ts>
    <user>Rosalee</user>
    <text>But wasn’t that screenshot from the top panel?</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:12:06.414166</ts>
    <user>Rosalee</user>
    <text>Like, here is the whole window.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:28:39.051449</ts>
    <user>Rosalee</user>
    <text>Ah, okay, I see what you mean now</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:28:43.054195</ts>
    <user>Rosalee</user>
    <text>(I needed a reboot apparently)</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:30:59.145439</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Ya, it doesn’t seem to have any extra libs.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:31:42.173262</ts>
    <user>Rosalee</user>
    <text>(AVUtil and SWResample are also part of ffmpeg and in the same directory as AVcocec)</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:32:07.189192</ts>
    <user>Vincenzo</user>
    <text>So, does it work to explicitly load "AVUTIL-55.DLL" and "SWRESAMPLE-2.DLL" first?</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:32:19.197015</ts>
    <user>Vincenzo</user>
    <text>(since they won't be found by just being in "lib")</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:33:53.255506</ts>
    <user>Rosalee</user>
    <text>Oh yes they are.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:33:57.258266</ts>
    <user>Rosalee</user>
    <text>err…yes it does work.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:34:03.262046</ts>
    <user>Rosalee</user>
    <text>Odd. I wonder why that worked on OS X. :confused:</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:34:32.280234</ts>
    <user>Rosalee</user>
    <text>(I used the @loader_path symbol when compiling it for os x, that might be why.)</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:34:34.281817</ts>
    <user>Rosalee</user>
    <text>Anyway, thanks. :smile:</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:35:07.301843</ts>
    <user>Vincenzo</user>
    <text>Yes, `@loader_path` avoids the problem</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:36:05.338138</ts>
    <user>Rosalee</user>
    <text>Anyway, this seems to work, if I just reorder the way I load the libraries. Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T11:42:36.583502</ts>
    <user>Rosalee</user>
    <text>So, question I should probably know the answer to; does this mean that if I have some lib `a.so`, that links to `b.so` (but the link has an absolute path), if the program dynamically loads `b.so` first, and then `a.so`, it doesn’t matter what directories the two libraries are in?</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T12:10:56.650558</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Possibly. Probably it depends on the OS, and it may depend on whether the shared library is opened in "global" mode versus "local" mode (where racket uses the latter by default, at least on most platforms)</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T12:13:24.738318</ts>
    <user>Rosalee</user>
    <text>That makes sense.</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T12:13:31.742806</ts>
    <user>Rosalee</user>
    <text>Well at least it seems to work on Windows. So thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T12:15:44.820470</ts>
    <user>Lavenia</user>
    <text>&lt;@Rosalee&gt; If you haven't seen it already:  &lt;https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf&gt;</text>
  </message>
  <message conversation_id="102">
    <ts>2017-07-18T12:39:21.646039</ts>
    <user>Rosalee</user>
    <text>&lt;@Lavenia&gt; Oh cool, thanks.</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T10:18:35.071340</ts>
    <user>Latarsha</user>
    <text>&lt;@Eun&gt; a new weird difference: &lt;https://plt.eecs.northwestern.edu/release-pkg-build/server/built/deps/dssl2.txt&gt; is only happening on the release build</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T10:18:50.080191</ts>
    <user>Latarsha</user>
    <text>also, `css` passed on HEAD, still failed on the release</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:19:54.670699</ts>
    <user>Eun</user>
    <text>&lt;@Latarsha&gt;: Re dssl2: I see that &lt;@Coral&gt; made changes to the deps between the pre-release pkg-build run and the HEAD pkg-build run. Let's see what the next pre-release pkg-build says.</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:20:05.677060</ts>
    <user>Latarsha</user>
    <text>ah ok</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:20:35.694574</ts>
    <user>Eun</user>
    <text>&lt;@Latarsha&gt;: Re css: Wargrey got back to me, looking more into it is on my to-do list.</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:20:59.708789</ts>
    <user>Latarsha</user>
    <text>also, I also ran the turnstile tests, they passed, I took it off the checklist</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:20:59.709326</ts>
    <user>Eun</user>
    <text>If you'd like to investigate too, I can forward you the info.</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:21:07.713938</ts>
    <user>Latarsha</user>
    <text>I won't have time</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:22:22.756801</ts>
    <user>Latarsha</user>
    <text>But I ran some tests and checked them off</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:22:25.758227</ts>
    <user>Coral</user>
    <text>&lt;@Eun&gt; indeed I added deps yesterday. Did I do something wrong?</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:24:17.822266</ts>
    <user>Eun</user>
    <text>&lt;@Coral&gt;: I don't think so? A pre-release pkg-build (see link from samth above) that happened before your changes had some deps errors. Your changes may have fixed them.</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:24:39.834694</ts>
    <user>Eun</user>
    <text>But we'll have to wait for the next pre-release pkg-build to know for sure.</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:25:12.853904</ts>
    <user>Coral</user>
    <text>Oh, okay, I think I fixed them. Cheers!</text>
  </message>
  <message conversation_id="103">
    <ts>2017-07-19T12:25:44.871876</ts>
    <user>Eun</user>
    <text>:)</text>
  </message>
  <message conversation_id="104">
    <ts>2017-07-20T01:40:18.047672</ts>
    <user>Chantelle</user>
    <text>Would it be bad to spawn a thread in a plumber flush callback that frees some resource and not wait on the thread before removing the flush callback registration? Could racket exit after the plumber is flushed but before the background thread finishes?</text>
  </message>
  <message conversation_id="104">
    <ts>2017-07-20T08:36:35.400841</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; Yes, Racket could exit before the thread finishes</text>
  </message>
  <message conversation_id="105">
    <ts>2017-07-20T13:13:58.815273</ts>
    <user>Chau</user>
    <text>is there a way to define something once and have it be available in both the for-syntax and the top-level without copying and pasting?
`(begin-for-syntax (define my-fn my-fn))`
is the dumb first thought that comes to mind, and obviously that doesn't work. (If it did, I would be surprised.)
(edit: where my-fn is already defined, of course)</text>
  </message>
  <message conversation_id="105">
    <ts>2017-07-20T13:31:34.394424</ts>
    <user>Corey</user>
    <text>&lt;@Chau&gt; You can define the thing in a module, then `require` the module both for runtime and `for-syntax`.

For instance using `module` in the same file:
```
#lang racket

(module m racket/base
  (provide f)
  (define (f)
    (println "f")
    42))

(require (for-syntax 'm)
         'm)
```</text>
  </message>
  <message conversation_id="105">
    <ts>2017-07-20T13:32:42.432902</ts>
    <user>Corey</user>
    <text>Or you could define `f` in a module that is another  file like `f.rkt`, and `(require "f.rkt" (for-syntax "f.rkt"))`. Same difference.</text>
  </message>
  <message conversation_id="105">
    <ts>2017-07-20T13:34:07.479866</ts>
    <user>Chau</user>
    <text>gotcha, thanks &lt;@Corey&gt;</text>
  </message>
  <message conversation_id="105">
    <ts>2017-07-20T13:35:12.516615</ts>
    <user>Corey</user>
    <text>&lt;@Chau&gt; You're welcome.  The TL;DR is define things once in a module. Then, how/when they're available is a function of how you `require` their module.</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:32:41.205883</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; How often do we update the versions of various native packages?</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:32:47.208762</ts>
    <user>Rosalee</user>
    <text>As listed here: &lt;https://github.com/racket/racket/tree/master/racket/src/native-libs&gt;</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:33:09.219705</ts>
    <user>Rosalee</user>
    <text>I ask because I would like to know if I can rely on Racket coming with libpng16. (Except on Linux obviously.)</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:33:23.226968</ts>
    <user>Vincenzo</user>
    <text>Rarely, and on no particular schedule</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:33:39.235110</ts>
    <user>Rosalee</user>
    <text>That makes sense. Do we have any announcement when we do?</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:34:57.273560</ts>
    <user>Rosalee</user>
    <text>I mean, I would be happy to have racket install libpng16 when its needed. But I’m worried about that conflicting with the one Racket comes with.</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:36:00.304993</ts>
    <user>Rosalee</user>
    <text>I guess, since its not going to update in the middle of a Racket version, I can just make a libpng16 package, and have an exception to not install libpng16 for versions that already have it installed.</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:37:40.354445</ts>
    <user>Vincenzo</user>
    <text>We provide libpng16 right now on Windows and Mac OS, right?</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:42:40.500818</ts>
    <user>Rosalee</user>
    <text>That is correct.</text>
  </message>
  <message conversation_id="106">
    <ts>2017-07-20T16:43:01.510747</ts>
    <user>Rosalee</user>
    <text>And on linux it needs to be installed (which it is on basically every distro….)</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T16:59:41.002857</ts>
    <user>Chau</user>
    <text>I've having trouble with the `str` syntax class (or, at least I think I am...?): I have a custom syntax class that uses `str` in its pattern, but when I give it a str in the correct location it fails to match, even though the output of `(string? (syntax-e stx))` is #t.

I made a gist of the issue in an effort to make up a minimal reproduction: &lt;https://gist.github.com/fluffywaffles/e616df5399d5e7140b76229af94b30d0&gt;

Any help would be much appreciated! I have absolutely no idea why this is happening.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:00:49.037385</ts>
    <user>Kimbery</user>
    <text>&lt;@Chau&gt; It looks like the `q` class matches a string, but the last subform provided to select is a list containing a string.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:01:08.047092</ts>
    <user>Chau</user>
    <text>Right; I explain that I still think the error is unexpected... Can you explain why it does what it does?</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:01:23.054515</ts>
    <user>Chau</user>
    <text>In the gist, rather, I explain in a comment (on the gist, not in the code)</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:03:01.102396</ts>
    <user>Kimbery</user>
    <text>I think you’ll get the behavior you expect if you add the `#:commit` option to the `q` syntax class.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:03:18.110170</ts>
    <user>Kimbery</user>
    <text>Unfortunately, I have to run—maybe someone else can explain in more detail (or I can once I get back).</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:03:35.118446</ts>
    <user>Chau</user>
    <text>that works -- thanks &lt;@Kimbery&gt;</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:03:51.126205</ts>
    <user>Chau</user>
    <text>I don't know why, but it works</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:04:49.153252</ts>
    <user>Kimbery</user>
    <text>I have another minute or two… basically, without `#:commit`, syntax-parse can backtrack back _into_ a syntax class even if the syntax class originally succeeded if a later parse fails.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:05:31.172918</ts>
    <user>Kimbery</user>
    <text>So your `q` pattern successfully matches `"hello"` against the first pattern, then continues matching the top-level pattern, and that fails. So it backtracks into `q` and tries to match `"hello"` against the second pattern, which always fails.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:05:56.184378</ts>
    <user>Kimbery</user>
    <text>And specifically, it fails by throwing an exception, not by using `~fail` or something like that, so that failure is unrecoverable, and parsing halts.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:07:33.228441</ts>
    <user>Chau</user>
    <text>oh, interesting -- so if the first syntax class pattern matches, but then after moving on, the next form in the overall syntax object doesn't match, it'll go back to the most recently tested syntax class and try other patterns?</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:07:34.229249</ts>
    <user>Chau</user>
    <text>Why is that?</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:07:36.230157</ts>
    <user>Kimbery</user>
    <text>You probably want to use `~fail` instead of `(~do (raise-syntax-error ...))`. Of course, in this case, you probably don’t want the second case at all, and instead might just want to add `#:description "question"` to `q` and just let syntax-parse generate its own error message.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:08:17.247811</ts>
    <user>Kimbery</user>
    <text>But yes, generally, syntax-parse tries _everything_. It backtracks to try every possible solution unless you explicitly add cuts/commits.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:08:59.266123</ts>
    <user>Kimbery</user>
    <text>It’s possible to construct a situation in which that backtracking behavior is desirable, but it often isn’t, so `#:commit` is a useful option for a lot of syntax classes.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:09:15.273111</ts>
    <user>Kimbery</user>
    <text>Unfortunately, I don’t have time to construct such an example, though.</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:12:44.366117</ts>
    <user>Chau</user>
    <text>No, you've been plenty helpful even without! Thanks &lt;@Kimbery&gt;</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-20T17:30:53.825327</ts>
    <user>Chantelle</user>
    <text>&lt;@Chau&gt; The "try everything" approach is also paired with a notion of "progress" - syntax-parse orders possible parses based on how early they fail. When parsing fails, this lets syntax-parse choose the parse that failed the latest and uses that parse for an error message, since that's likely what you want. The "Introduction" section of the syntax parse docs describes this and other aspects of syntax-parse in a friendly manner, I recommend reading it: &lt;http://docs.racket-lang.org/syntax/stxparse-intro.html?q=syntax%20parse&gt;</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:15:34.005978</ts>
    <user>Rosalee</user>
    <text>You can use the #:version keyword to specify a min version. Is there any easy way to specify a max version?</text>
  </message>
  <message conversation_id="107">
    <ts>2017-07-21T16:18:07.068771</ts>
    <user>Kimbery</user>
    <text>Not only is there not an easy way, there is no way at all.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:34:38.467182</ts>
    <user>Rosalee</user>
    <text>&lt;@Kimbery&gt; Hmm…welp lol</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:35:16.481782</ts>
    <user>Rosalee</user>
    <text>Looks like I’ll have to catch that at runtime instead then. That sucs.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:35:19.482861</ts>
    <user>Rosalee</user>
    <text>sucks*</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:35:28.486640</ts>
    <user>Rosalee</user>
    <text>(And is also _really_ bad. :confused: )</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:37:13.528862</ts>
    <user>Kimbery</user>
    <text>The correct policy, according to the current package system policies, is to never break backwards compatibility. That way, there’s never any reason to have a max version.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:37:26.534209</ts>
    <user>Kimbery</user>
    <text>I make no comment on whether or not I find that policy reasonable.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:41:58.643002</ts>
    <user>Rosalee</user>
    <text>Ya….that’s not ganna fly.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:42:16.649987</ts>
    <user>Rosalee</user>
    <text>FFmpeg, for example, WILL break backwards compatibility, on major version updates.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:42:32.656317</ts>
    <user>Rosalee</user>
    <text>(Minor ones will only add functionality, not breaking anything.)</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:42:46.661864</ts>
    <user>Rosalee</user>
    <text>As such, the only thing I can think of is to make a ffmpeg package for every version.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:42:46.662008</ts>
    <user>Kimbery</user>
    <text>Then, according to the current package system policy, you should make a new (Racket) package for each breaking version of FFmpeg.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:43:01.667805</ts>
    <user>Rosalee</user>
    <text>Well fun.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:44:00.691031</ts>
    <user>Kimbery</user>
    <text>See section 10.5 of the package documentation. &lt;http://docs.racket-lang.org/pkg/FAQ.html#%28part._.How_can_.I_specify_which_version_of_a_package_.I_depend_on_if_its_interface_has_changed_and_.I_need_an_old_version_%29&gt;</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:45:40.730786</ts>
    <user>Rosalee</user>
    <text>Welp great.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:46:09.742001</ts>
    <user>Rosalee</user>
    <text>So basically the official policy is to flood the package server with slightly different versions of ffmpeg.</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:46:19.746125</ts>
    <user>Rosalee</user>
    <text>(whenever they break compatibility anyway.)</text>
  </message>
  <message conversation_id="108">
    <ts>2017-07-21T16:46:43.755519</ts>
    <user>Rosalee</user>
    <text>I guess at worst, it’ll be ~200 packages.</text>
  </message>
  <message conversation_id="109">
    <ts>2017-07-24T12:01:58.868141</ts>
    <user>Jacob</user>
    <text>I'd been thinking about the current package policy, I was wondering if it would be feasible to layer a protocol on top of the current package system. Create a package of packages, a "meta-package", give it a canonical name, and each package in the meta-package would represent a major version with minor versions being kept within each package.</text>
  </message>
  <message conversation_id="109">
    <ts>2017-07-24T12:02:33.889879</ts>
    <user>Jacob</user>
    <text>I'm not sure how feasible that idea would be and whether the current system can be hacked in that fashion.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:24:58.653393</ts>
    <user>Corey</user>
    <text>I mean, as _users_ of packages I think everyone agrees we want them to act like persistent data structures -- only add new capabilities, never take away old ones?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:25:47.680947</ts>
    <user>Corey</user>
    <text>As _developers_ of packages: There's no shame in saying, well, after making Thing, I realize it should have had a whole other design -- and going on to make Other Thing.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:26:52.716953</ts>
    <user>Corey</user>
    <text>I think there's some shame in saying, Thing is now a shadow of its former self, and will suddenly break things. And transitively break things.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:27:35.740200</ts>
    <user>Corey</user>
    <text>I'd love to see us stick with this idea(l) as long as we can?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:28:35.773765</ts>
    <user>Corey</user>
    <text>But I don't know what to do about situations like &lt;@Rosalee&gt; trying to wrap or use something that is rampantly mutating its interface with contract-busting major versions.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:31:21.866622</ts>
    <user>Lavenia</user>
    <text>Have thing1, thing2, ..., thingN  and then have a bonus package named thing that just reexports  thingN ?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:35:10.991226</ts>
    <user>Jacob</user>
    <text>&lt;@Corey&gt;, I'm sympathetic to that idea, it is frustrating to manage compatibility breaking issues and I'm interested in seeing how far we can go with one package per compatibility-respecting code , but on the other hand, it would be nice to have some notion of namespace management to handle various versions</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:35:24.998691</ts>
    <user>Kimbery</user>
    <text>I strongly believe that Racket would benefit from a more ordinary language package management solution, with version bounds and a constraint solver.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:35:27.000437</ts>
    <user>Jacob</user>
    <text>&lt;@Lavenia&gt; yeah that pretty much sums up what I am talking about.</text>
  </message>
  <message conversation_id="111">
    <ts>2017-07-24T12:35:47.011114</ts>
    <user>Kimbery</user>
    <text>I’ve discussed a little bit about what that would take to do right with… &lt;@Vincenzo&gt; and &lt;@Latarsha&gt;, IIRC?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:35:52.013715</ts>
    <user>Kimbery</user>
    <text>But it’s been a little while.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:36:04.020133</ts>
    <user>Jacob</user>
    <text>Would that be possible to reexport packages through one package?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:36:27.032166</ts>
    <user>Lavenia</user>
    <text>&lt;@Jacob&gt;  If I recall correctly, there were a discussion on the mailing list (about the time the new package system arrived)</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:37:19.059947</ts>
    <user>Jacob</user>
    <text>yes, I do recall that as well, I read all of correspondence that got generated when the new system was released, I'd have to go back and review to see if any viable ideas were proposed</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:37:37.069436</ts>
    <user>Kimbery</user>
    <text>FWIW, I thought about adding a metaprotocol of sorts on top of the existing package system, but since then I’ve realized it would probably be easier to just extend the package system to add more metadata to packages and features to `raco pkg`.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:38:42.103752</ts>
    <user>Jacob</user>
    <text>yeah, I'm in agreement, it seems it'd be easier to just extend the system, most of the ideas to date can be categorized as "adding more metadata" and have better metadata aware tools.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:41:26.190952</ts>
    <user>Kimbery</user>
    <text>So, my current understanding is that there would need to be four changes to get the package system to where I want it to be. (1) Packages need to become a mapping from package name *+* version to package sources, instead of just package name. This can be added by adding more metadata to the existing package protocol. (2) Packages need to be able to specify version ranges in their `info.rkt` files. (3) `raco pkg` needs to be extended to do constraint solving when installing packages. (4) Racket needs support for package “sandboxes” a la Cabal sandboxes, Bundler environments, or Python virtualenv, so that multiple versions of a package can be installed on the same machine without breaking everything.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:42:09.213908</ts>
    <user>Kimbery</user>
    <text>None of those things are anywhere near new research, but they are still a lot of work.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:42:21.220540</ts>
    <user>Corey</user>
    <text>Should there also be Scribble enhancements -- so that as well as "added in version x" you can say "taken away in version x" or "gratuitously changed in version x"?  I am mostly but not entirely joking. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:43:02.242381</ts>
    <user>Kimbery</user>
    <text>I think so! Having better tooling support for deprecations would be good, too.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:43:11.247165</ts>
    <user>Jacob</user>
    <text>or available in #lang version4.5</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:43:28.256445</ts>
    <user>Jacob</user>
    <text>though that probably would be an abuse of the lang system!</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:44:19.283961</ts>
    <user>Kimbery</user>
    <text>Well, to be clear, my vision does _not_ involve installing multiple versions of a package at the same time, or specifying versions in imports a la PLaneT. There are various reasons why you want to decouple version specification from module imports.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:44:31.290366</ts>
    <user>Corey</user>
    <text>Are these versions a new dimension by which we multiply the `{-lib -doc -test}` packages, too?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:44:39.294877</ts>
    <user>Jacob</user>
    <text>&lt;@Kimbery&gt; your understanding seems spot-on and is what I was thinking too. The package sources are already uniquely identified by the package checksum so it would be a simple mapping from name to the checksum.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:45:19.316126</ts>
    <user>Kimbery</user>
    <text>&lt;@Corey&gt; No, not in the sense that they would take up multiple spots in the package index. Think closer to a generalization of version exceptions.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:45:21.317523</ts>
    <user>Jacob</user>
    <text>&lt;@Corey&gt; I would consider those packages to be "satellite packages" and grouped together</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:46:44.363507</ts>
    <user>Kimbery</user>
    <text>There are a lot of other changes I would ideally make to Racket’s package system if we could start from scratch, including a way to subsume the lib/doc/test split, but those things are far harder than anything I mentioned so far, since they would involve more fundamental changes to how Racket internally treats modules and module loading.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:47:18.382106</ts>
    <user>Kimbery</user>
    <text>The package system is currently designed in such a way that the core of Racket knows effectively nothing about packages. Packages just extend collections, and Racket only knows about collections.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:47:50.399877</ts>
    <user>Kimbery</user>
    <text>There are downsides to this, though, such as the fact that it’s impossible to resolve conflicts in the case where multiple packages provide modules at the same path.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:48:05.408342</ts>
    <user>Kimbery</user>
    <text>(And that includes multiple versions of the same package, in the proposed system.)</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:48:36.425024</ts>
    <user>Corey</user>
    <text>If the pkg mgr could handle modules (for the lib/doc/test purpose), it could handle modules like api1, api2 ... and _that_ feels better to me than arbitrary version numbers and disappearing interfaces.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:49:08.442836</ts>
    <user>Kimbery</user>
    <text>I don’t think you want multiple versions to be distinct packages because you really want to be able to depend on version ranges.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:49:43.461767</ts>
    <user>Corey</user>
    <text>But I don't care about version ranges. Those are a proxy for capabilities, which I do care about. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:50:21.482688</ts>
    <user>Corey</user>
    <text>I'd rather say, "I need api-that-gives-me-foo, and the docs, but not the tests", for example..</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:50:22.483559</ts>
    <user>Jacob</user>
    <text>I'm not sure if changing module treatment and loading would be good idea, at the end of the day, the packages are being combined to create a set of collections that are available for Racket to load.
lib/tests/docs don't necessarily need to be handled specially at the module level.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:51:24.517858</ts>
    <user>Jacob</user>
    <text>Indeed, I feel would rather have a capability that points to specified set of interfaces and dependencies, instead of harder to understand version numbers.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:52:03.539219</ts>
    <user>Jacob</user>
    <text>hmmm, that does seem like a potentially fruitful direction, but I fear it likely need a lot more research before it'd be viable for general community use.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:52:04.539621</ts>
    <user>Kimbery</user>
    <text>&lt;@Corey&gt; You could certainly try and design something much more elaborate than version numbers, but generally some notion of semantic versioning tends to be a good set of compromises to solve that problem.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:53:17.580148</ts>
    <user>Kimbery</user>
    <text>Especially since often you want to break compatibility in a small way, and you want some dependent packages to use conditional compilation to pave over the differences.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:54:57.635062</ts>
    <user>Corey</user>
    <text>I guess I've logged some time with things like `QueryInterface` in COM, `fboundp` in Emacs Lisp, and `dynamic-require` in Racket.
And I've found it preferable (to me) to ask directly for the thing I actually care about.
Than to have a level of indirection looking at hopefully correct docs and change logs.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:55:53.665821</ts>
    <user>Corey</user>
    <text>If the desired function turns out not to exist, and the pkg versioning theory is "only add", then I can give the user an error message like "Please update to the latest ___", and that's it.  [Edit: Or, maybe gracefully downgrade something.]</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:57:16.710536</ts>
    <user>Corey</user>
    <text>Maybe that's impractical but I stubbornly want to live in a world like that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:58:07.735161</ts>
    <user>Kimbery</user>
    <text>For what it’s worth, I abandoned the idea of using Racket at work because of the lack of versioning. And I’ve sort of drifted away from Racket development _in general_ because of it. The burden on package authors to divine a perfect architecture in the first version is far, far too much in a field that strongly benefits from rapid iteration on incremental changes.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T12:59:26.781265</ts>
    <user>Kimbery</user>
    <text>The strategy of adding an entirely new package for breaking changes isn’t good enough, since often the change in question is actually quite small, and you don’t want to completely fragment your own ecosystem just to change a small thing that likely won’t impact 90% of users.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:00:17.811137</ts>
    <user>Corey</user>
    <text>Those are great points. And to be clear, I'm definitely in favor of a boolean "I'm ready/willing for other packages to depend on mine" flag, and having the option not to set that until you're ready!</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:00:21.813190</ts>
    <user>Kimbery</user>
    <text>The current package policy works okay with very small teams, but I now work in a large organization that needs the ability to move asynchronously and update at their own pace.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:00:46.828425</ts>
    <user>Kimbery</user>
    <text>JS’s and Haskell’s package systems have supported our needs there quite nicely.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:00:55.834279</ts>
    <user>Chantelle</user>
    <text>for open source racket the problem is somewhat mitigated by the package-wide continuous build system</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:01:13.844274</ts>
    <user>Chantelle</user>
    <text>but if you're not using that and you write a lot of packages the pain will magnify</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:01:20.849120</ts>
    <user>Kimbery</user>
    <text>We have a number of internal packages that break compatibility on a monthly basis, and that’s okay, because we publish detailed changelogs and let people upgrade whenever they get the chance.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:01:46.864109</ts>
    <user>Kimbery</user>
    <text>CI can’t change the fundamental problem of backwards incompatible changes retroactively breaking code that worked before without changing anything, which is unacceptable.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:02:08.876555</ts>
    <user>Chantelle</user>
    <text>I didn't say it changed the fundamental problem, I said it somewhat mitigated it</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:03:17.916803</ts>
    <user>Kimbery</user>
    <text>I didn’t claim you did, but I’m mostly just expressing that these problems are not imaginary, since _I_ have basically ditched Racket for anything “real” because the tooling doesn’t support my needs.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:03:51.935357</ts>
    <user>Jacob</user>
    <text>&lt;@Kimbery&gt; it's concerning that you weren't able to accommodate the current package system to your organization's needs, that says to me the system needs at least a review. It's been in use for how long as it been? 3-4 years? That's long enough to reassess how successful the system has been and what improvements would be needed.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:04:43.964424</ts>
    <user>Kimbery</user>
    <text>I don’t think the changes I mentioned would be terribly controversial; they were formed in a discussion between me and a few other people. Someone just needs to implement them.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:05:01.974245</ts>
    <user>Kimbery</user>
    <text>But that takes time and effort, and currently nobody has enough of that to spare.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:05:14.981369</ts>
    <user>Jacob</user>
    <text>I'm in a position where I'm using Racket at work for small-scale projects, I've yet had the opportunity to seriously use the package system to manage my needs, so it'll be interesting to see how far I'm able to go.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:07:11.044222</ts>
    <user>Kimbery</user>
    <text>One example of something we’ve done at my organization that has been extremely successful is a Haskell DSL we use for writing deployment scripts. We use Haskell’s package versioning system to write self-executing scripts in Haskell (with a relevant shebang), which is pretty cool. Since the scripts express the version they depend on, we can judiciously break backwards compatibility whenever it makes sense, which has let us rapidly iterate without feeling a need for BDUF.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:07:40.059351</ts>
    <user>Kimbery</user>
    <text>I couldn’t really do that in Racket, even if it would be a good tool for the job.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:08:52.097277</ts>
    <user>Chantelle</user>
    <text>How well would a two stage solution work that first added everything except the ability to install multiple versions at the same time? The other three pieces are much easier to implement and might work as a temporary solution.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:10:02.135086</ts>
    <user>Kimbery</user>
    <text>They’re mostly independent, but the sandboxing is pretty necessary to avoid inventing Cabal Hell in the Racket ecosystem. Sandboxing is actually mostly implemented, too, so it’s actually probably not that much effort to add.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:10:50.161173</ts>
    <user>Kimbery</user>
    <text>If it were a huge amount of work, I would agree with you, but I don’t think it makes a ton of sense to skip if you’re also going to do the comparatively monumental amount of work to implement the other parts.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:10:56.164329</ts>
    <user>Jacob</user>
    <text>may you point me to where the sandbox environment has been implemented? Is it a raco feature?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:12:26.211495</ts>
    <user>Kimbery</user>
    <text>There isn’t really user-facing tooling for it, so the work would basically just be to integrate it with raco, but the infrastructure exists. I can’t remember exactly where the relevant features are documented, but the feature is called “tethering”.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:12:45.221720</ts>
    <user>Jacob</user>
    <text>ooh I do remember coming across that term</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:12:50.224321</ts>
    <user>Kimbery</user>
    <text>It’s alluded to here: &lt;http://docs.racket-lang.org/raco/dirs.html#%28def._%28%28lib._setup%2Fdirs..rkt%29._find-addon-tethered-console-bin-dir%29%29&gt;</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:14:27.277034</ts>
    <user>Chantelle</user>
    <text>An important question is whether implementing it would require help from mflatt, since he likely won't have time to focus on stuff other than racket7</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:15:17.304981</ts>
    <user>Kimbery</user>
    <text>I think it could be done with minimal knowledge of Racket internals. A few questions here and there maybe, but I don’t see why much of it would involve anything complicated.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:15:58.326976</ts>
    <user>Kimbery</user>
    <text>I would bet the majority of the work would be extending `raco pkg install` to do constraint solving and handle the notion of version conflicts.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:16:11.333523</ts>
    <user>Jacob</user>
    <text>Suppose the four main items are designed and made available in a side-branch of the racket mainline. Would it be able to accommodate the current style of additive changes. Suppose one package favors the additive style and other one takes the version numbering approach. How do we manage users experience so they don't get confused by two different styles?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:16:55.357135</ts>
    <user>Kimbery</user>
    <text>A package could easily just only make additive changes by only ever bumping the minor version.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:17:07.363744</ts>
    <user>Kimbery</user>
    <text>But there would certainly be some tricky migration/compat issues to work out.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:17:13.367260</ts>
    <user>Kimbery</user>
    <text>I don’t think any of them are super hard, though.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:17:17.369162</ts>
    <user>Jacob</user>
    <text>and by setting max version to #f indefinitely really</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:18:31.408670</ts>
    <user>Kimbery</user>
    <text>IIRC, the proposed compatibility solution was to basically (for now) treat packages specified without bounds as `&amp;gt;=1 &amp;amp;&amp;amp; &amp;lt;2`.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:18:47.417500</ts>
    <user>Chantelle</user>
    <text>The version constraint solving doesn't sound like the hard part, especially if it's implemented with the aid of a logic programming dsl</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:19:25.437452</ts>
    <user>Kimbery</user>
    <text>I don’t really mean the constraint solving algorithm itself, but I mean plumbing the inputs and outputs of that algorithm through the rest of the system.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:20:46.480769</ts>
    <user>Kimbery</user>
    <text>You need to set up the infrastructure to make the version information available to the solver and configurable by users. You need to handle all the corner cases of version conflicts and solver failures. You need to present meaningful error messages when the solver doesn’t come up with a solution. And you need to implement all of this while maintaining backwards compatibility with the old system.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:21:43.511361</ts>
    <user>Jacob</user>
    <text>indeed oof that sums up the problem.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:23:44.576274</ts>
    <user>Kimbery</user>
    <text>Doing package management right is really hard! I don’t know of any programming language that got it right from the beginning, most added it on only after it became obvious how necessary it was. :p</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:24:14.592476</ts>
    <user>Kimbery</user>
    <text>(And many langs still have awful package management. Go comes to mind…)</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:24:32.602176</ts>
    <user>Jacob</user>
    <text>we just need to find that magic wand everybody keeps talking about.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:24:45.609110</ts>
    <user>Rosalee</user>
    <text>I agree with &lt;@Kimbery&gt; Saying ‘make a new package’ whenever you make a breaking change seems fine, until you realize that what is going to happen is that your going to get a package catalog with hundreds of packages per actual package.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:25:02.618407</ts>
    <user>Rosalee</user>
    <text>&lt;@Jacob&gt;  Oh, its in the cellar, let me go grab it.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:25:11.623188</ts>
    <user>Chantelle</user>
    <text>Plus different users have different ideas of what a breaking change is</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:25:21.629034</ts>
    <user>Jacob</user>
    <text>and the current package index is not easy to parse so your own study case is only going to exacerbate it.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:26:03.652098</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; That too. So….this is why I make a new package for every git commit.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:26:12.657043</ts>
    <user>Rosalee</user>
    <text>(Or at least every commit I push.)</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:27:29.699632</ts>
    <user>Chantelle</user>
    <text>_Plus_ you can't even tell ahead of time whether a change is going to break any dependents with perfect accuracy!</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:27:56.714250</ts>
    <user>Chantelle</user>
    <text>in a large enough ecosystem someone's always using your thing in a way you never could have anticipated</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:28:02.717592</ts>
    <user>Kimbery</user>
    <text>Tbh that’s one of the reasons why I think Hackage’s ability to edit constraints after publishing a package is a good feature.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:28:35.736152</ts>
    <user>Kimbery</user>
    <text>A lot of tools get unhappy with the notion that releases are not immutable. But otherwise, if you don’t have that option, those bad constraints stick around and mess up the solver forever.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:29:22.762285</ts>
    <user>Chantelle</user>
    <text>a release's content being immutable while its declared relationships to other releases being mutable doesn't sound so bad to me either</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:29:25.764356</ts>
    <user>Kimbery</user>
    <text>But yeah. All of Maven, Bundler, NPM/Yarn, Cabal, etc. are tools added long after the lang was invented to solve this problem.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:29:54.780659</ts>
    <user>Kimbery</user>
    <text>I guess maybe Cargo gets this right from the beginning? But Rust is unique in a lot of different ways. :)</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:30:47.811198</ts>
    <user>Jacob</user>
    <text>so we have several notions at work here, some set of release source files, versions, canonical names, bundling variants with or without docs, constraints. Need to figure out how to stir all of them into a workable backwards compatible solution.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:31:59.851582</ts>
    <user>Jacob</user>
    <text>the idea of dependency relationships being modified after the release doesn't sound too bad to me either.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:32:24.865806</ts>
    <user>Kimbery</user>
    <text>Racket’s package model is more mutable than many, anyway, since the package system doesn’t even host the package sources.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:33:07.889742</ts>
    <user>Jacob</user>
    <text>The obvious next step for me is to study other package solutions, see what ideas they overlap in and what work and doesn't work.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:33:16.894554</ts>
    <user>Kimbery</user>
    <text>So a bad actor could just nuke a git repo or push a change to a release tag and cause a lot of problems. But I would not recommend addressing that problem with all of this.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:33:38.906477</ts>
    <user>Chantelle</user>
    <text>there's a really good blog post about package systems that's helpful for this</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:33:49.912525</ts>
    <user>Chantelle</user>
    <text>&lt;https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527&gt;</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:34:06.921494</ts>
    <user>Jacob</user>
    <text>That reminds me of that time when someone blew away their npm contributions and crashed the npm network which had been depending on one small packages released by that author departing with all of his toys.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:34:21.929921</ts>
    <user>Chantelle</user>
    <text>wasn't that the "leftpad" package?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:34:26.932805</ts>
    <user>Jacob</user>
    <text>yeah that sounds right</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:34:35.937613</ts>
    <user>Kimbery</user>
    <text>IMO, the Bundler/Cabal models are a really good set of tools to study. Yarn is good, too, but its model is different from Racket’s, so it’s not really relevant.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:35:53.979135</ts>
    <user>Jacob</user>
    <text>thanks &lt;@Chantelle&gt; and &lt;@Kimbery&gt; it's probably foolish of me to contemplate coming up with something that makes an impact but this is definitely a problem area that deserves a closer look.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:36:47.007788</ts>
    <user>Chantelle</user>
    <text>at the very least a tracking issue in the racket repo with some sort of plan and a breakdown of the work to do would be a big step forward</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:37:26.028930</ts>
    <user>Jacob</user>
    <text>ha, &lt;#C06V96CKX|general&gt; anybody wants to join in?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:37:42.037636</ts>
    <user>Chantelle</user>
    <text>maybe after I finish working on stuff for racketcon :p</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:38:03.048939</ts>
    <user>Jacob</user>
    <text>and a few other projects, or next year...</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:39:17.088798</ts>
    <user>Kimbery</user>
    <text>I’d be interested in working on it if I had about 40 more hours per week. ;)</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:39:21.090661</ts>
    <user>Jacob</user>
    <text>more seriously, is the general management interested in entertaining a significant update to the package system? Or would we need to do some lobbying?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:40:22.123466</ts>
    <user>Jacob</user>
    <text>I do realize this likely may need changes to be made to DrRacket's package manager, and the package index site, so that'll be nontrivial to coordinate.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:40:53.139784</ts>
    <user>Chantelle</user>
    <text>the package site probably wouldn't _have_ to change to support this</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:41:13.150796</ts>
    <user>Kimbery</user>
    <text>The package server would. But not necessarily the frontend, I suppose.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:43:49.236277</ts>
    <user>Kimbery</user>
    <text>I found the email thread from a little over a year ago between me, &lt;@Vincenzo&gt;, and &lt;@Latarsha&gt;. Here’s the bulk of what we concluded, as outlined by Matthew:
```
* Change the information for a package in a catalog to include a
  version -&amp;gt; source mapping.

  Concretely, this mapping could go under a `pkg-versions` key added
  to the current table. So, for backward compatibility, we still have
  the current information (for the latest version) as it's reported
  now. Also, package clients could continue to deal with catalogs that
  don;t include a `pkg-versions` entry.

  The version listed for a given source and checksum would be checked
  against the `version` declaration in a package's "info.rkt" file.
  The package manager would still only allow the installation of one
  checksum (as selected by version number, typically) per package.

* Change the catalog at &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; to accumulate a
  version-keyed mapping by noticing when, in the case of a Git-based
  source, a new checksum has a new version. When the version changes,
  the server can keep the previous version mapped to the previous
  checksum.

  For sources not based on Git, package authors would have to use some
  extra interface or tool to set a mapping. We'd want a `raco` tool
  for tasks like that. (It's strange to me that such a tool doesn't
  exist already.) The tool could also help authors using a Git repo
  update the package version number appropriately.

  If &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; missed a version due to a rapid sequence of
  version updates, if broken versions need to be removed, if a new
  revision for an old version needs to be introduced on a branch, etc.
  --- all of those would be possible manually. The automatic
  construction of the version table by &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; would just
  be a convenience for the common case and make it behave similar to
  the current system in those simple cases.

* Change the package-manager client to support the usual constraints
  on dependency versions. The package installation and update tools
  would have to solve those dependencies.

  The current `#:version` field in a dependency would be interpreted
  as allow &amp;gt;= version and &amp;lt;= the next major version (non-inclusive). A
  new keyword for a dependency would support more general constraints.

  [The "graphs" package declares a dependency on "base" version
   "5.3.2". That looks like the only package whose version dependency
   would need to be adjusted to fix this rule.]

  I imagine that `raco pkg update` should by default only update to a
  checksum for a version whose major number matches the current
  installation. Also, it should downgrade a package to solve
  constraints only if the user says that downgrades are ok.

  Right now, most dependency specifications are unversioned. I don't
  think it will work to assume "1.x", unless we add a special case for
  "base" to default to "6.x" and figure out something for "0.x".
  Unless we find something better, we'll end up allowing dependency
  specifications without a compatibility level, which is too bad.

  The dependency information currently provided by
  &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; is not precise enough to resolve dependencies
  --- it merges `deps` and `build-deps` --- but that should be easy
  to fix.

* A stack-like sequence of catalogs could provide a suitable set of
  default versions/checksums of packages (but, as always, that catalog
  can be overridden for a given package by specifying a non-catalog
  source) and serve as an archive of available packages.

* Tools like `raco pkg catalog-archive` could take a version
  constraint, which would typically be specified on "base", and solve
  constraints in the same way as installation.
```</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:44:43.265675</ts>
    <user>Kimbery</user>
    <text>There was a little more discussion after that, but that’s close to what we generally ended up agreeing on. I don’t think any of those changes would be especially controversial if someone went and implemented them, but that’s no small feat.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T13:45:24.288180</ts>
    <user>Jacob</user>
    <text>that was very helpful, good to know how the others stand on it.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T14:00:17.783512</ts>
    <user>Jacob</user>
    <text>one relevant question here, are the current package tools designed to help end-users or developers? Should the tools attempt to help both audiences?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T14:39:46.088770</ts>
    <user>Vincenzo</user>
    <text>As long as someone follows that kind of plan – one that doesn't involve changing the way that module-name resolution works – then I think anyone could implement the changes. It's mostly a matter of updating the package client in "collects/pkg" (and tests and docs), the package-catalog server's implementation at &lt;https://github.com/racket/pkg-index&gt; , possibly the pkg-build service's implementation at &lt;https://github.com/racket/pkg-build&gt; , and the GUI package manager at &lt;https://github.com/racket/gui-pkg-manager&gt; .

Anything that changes the way module-name resolution works, in contrast, is almost certainly more trouble than you expect, even after I tell you that it's trouble.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T14:53:44.549579</ts>
    <user>Jacob</user>
    <text>&lt;@Vincenzo&gt; thank you for the references to the repositories. I believe at this time the module-name resolution should be left alone. Modifying it in anyway would open a too big can of worms. I think the sensible approach at this time is to extend the current system in consecutive ways.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T14:56:37.644694</ts>
    <user>Corey</user>
    <text>&lt;@Kimbery&gt; I had to step away, and I'm catching up, and I think this thing you said is interesting for me:

&amp;gt; We have a number of internal packages that break compatibility on a monthly basis, and that’s okay, because we publish detailed changelogs and let people upgrade whenever they get the chance.

This is using the package manager in a way that hadn't really occurred to me. Here, "breaking changes" not only isn't bad, it's good -- because it means "people are making progress".

Whereas I've been thinking about the public package manager as a way for people/orgs to provide code for others to use. In which case, breaking changes is something I don't want to do to other people.  If I do it accidentally, I'll try to fix it quickly. And I'd like to depend on packages with a similar attitude.

So that's why I'm feeling, geez, this seems like a lot of work to support breaking changes, and instead why not try to encourage and help people not do that in the first place.  However, you're looking at it also from the point of view of using the package manager as part of in-house configuration management?</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T14:58:31.708583</ts>
    <user>Jacob</user>
    <text>This gets at the distinction between regular end-users and developer users. The link referred to by &lt;@Chantelle&gt; goes into the distinction in depth and is insightful about that difference.</text>
  </message>
  <message conversation_id="110">
    <ts>2017-07-24T14:59:37.744982</ts>
    <user>Corey</user>
    <text>Ah OK ... will catch up more! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="112">
    <ts>2017-07-24T16:05:07.735618</ts>
    <user>Eun</user>
    <text>@lexi.lambda. @abmclin, @leif, &lt;@Corey&gt;: I'm a bit late to the discussion, but this looks like it may lead to a good Racketeer Office Hours project in Seattle! :)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:06:57.790659</ts>
    <user>Rosalee</user>
    <text>FWIW, &lt;@Kimbery&gt; I don’t think any ‘lobbying’ to management, so to speak, is required to improve the package manager. Its more about not having the resources…..</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:07:18.801010</ts>
    <user>Kimbery</user>
    <text>That’s what I was saying, I think you want to direct that comment at &lt;@Jacob&gt;.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:07:26.805010</ts>
    <user>Rosalee</user>
    <text>Like, if someone where to do it, I don’t think anyone would reject the idea, just….its a lot of work.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:07:34.809155</ts>
    <user>Rosalee</user>
    <text>Ah, okay</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:07:36.810008</ts>
    <user>Rosalee</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:07:45.814566</ts>
    <user>Rosalee</user>
    <text>In that case… &lt;@Jacob&gt; ^</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:08:22.833290</ts>
    <user>Kimbery</user>
    <text>&lt;@Corey&gt; It’s not really configuration management. It’s that we have an internal tool that starts as the most minimal thing that could _possibly_ work, since we want to move quickly and do agile, incremental software design. The thing is, the tool is naturally going to grow in scope as our needs grow and we develop it further, and that means we could either (a) slot all the new features into the existing model, or (b) continuously refactor the architecture to meet new needs.

We need the ability to break changes as our software evolves in order to be able to add new features without things turning into a big ball of mud. That’s true whether or not it’s an internal tool or not, really. Moving fast sometimes means continuously rethinking the interface to keep it clean even in the face of new scope.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:09:08.855345</ts>
    <user>Georgeanna</user>
    <text>yay! I’m gonna meet even more of you in Seattle</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:09:12.857450</ts>
    <user>Kimbery</user>
    <text>I would prefer to use a library that kept a clean, consistent interface and kept migration to a new version *well-documented* over one that infinitely preserved backwards compatibility but ended up with an awful API.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:09:48.875255</ts>
    <user>Lavenia</user>
    <text>Other features on the wish list:  A daily / weekly email with new packages with links to documentation (and/or info on updated packages)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:09:54.878252</ts>
    <user>Georgeanna</user>
    <text>I agree… this is also why I spawn off new projects from old so that they can age/version at their own natural rates</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:10:27.895154</ts>
    <user>Georgeanna</user>
    <text>&lt;@Lavenia&gt; that would be lovely… “This week in Racket” type of thing would be awesome to keep up (for the time being)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:12:41.961110</ts>
    <user>Rosalee</user>
    <text>&lt;@Kimbery&gt; Or one like…cough…ffmpeg…cough….where the API just keeps getting more and more things tacked onto it (sometimes in api breaking ways. :disappointed: ), and now there’s 50 billion ways to do the same thing, and only one of them is right. But because all of the tutorial (intentionally singular) was written 10 years ago so it uses an old api…..) sigh. :disappointed:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:13:23.981421</ts>
    <user>Kimbery</user>
    <text>yeah, dynamic libs tend to suffer from API rot because C has no ability to ever break compatibility.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:16:52.082825</ts>
    <user>Lavenia</user>
    <text>&lt;@Rosalee&gt; luckily C is known to give friendly error messages, when things go wrong :wink:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:17:53.112796</ts>
    <user>Jacob</user>
    <text>I won't pretend it'd be easy, I understand it's a lot of work. This is something I'd only be able to work on the nights and other periods of free time so I have to be realistic, but I won't mind making an attempt. I think there's enough information to be able to construct a viable roadmap draft at the minimum as suggested by &lt;@Chantelle&gt;</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:24:46.315798</ts>
    <user>Rosalee</user>
    <text>&lt;@Lavenia&gt; lol………  Although I do have to say that is actually one area i was pleasantly surprised. Despite the shitty language, FFmpeg’s error messages are actually quite nice.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T16:25:04.325029</ts>
    <user>Rosalee</user>
    <text>And the code itself was quite nice. The only problem is the documentation, also known as the code. :disappointed:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:10:45.682257</ts>
    <user>Rosalee</user>
    <text>Is it just me, or are the latest nightlies of DrRacket kind of slow?</text>
  </message>
  <message conversation_id="114">
    <ts>2017-07-24T17:13:22.752627</ts>
    <user>Georgeanna</user>
    <text>nightlies?</text>
  </message>
  <message conversation_id="114">
    <ts>2017-07-24T17:13:59.769243</ts>
    <user>Eun</user>
    <text>&lt;http://pre.racket-lang.org/&gt;</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:14:26.780971</ts>
    <user>Rosalee</user>
    <text>&lt;@Georgeanna&gt; ya</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:14:56.793834</ts>
    <user>Rosalee</user>
    <text>Well…technically I’m using ones I’ve compiled from source, but they’re pretty similar.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:14:59.795128</ts>
    <user>Georgeanna</user>
    <text>I was (poorly) trying to imply that DrRacket is just slow.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:15:19.803668</ts>
    <user>Rosalee</user>
    <text>oh, I see…lol.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:15:27.807543</ts>
    <user>Rosalee</user>
    <text>Well yes it is. But even more slow than usual….</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:15:36.811183</ts>
    <user>Rosalee</user>
    <text>Like, usually I can type without a second of lag…. :confused:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:16:31.834841</ts>
    <user>Lavenia</user>
    <text>That doesn't sound right?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:17:11.852260</ts>
    <user>Rosalee</user>
    <text>Okay, so its not just me then.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:17:25.858573</ts>
    <user>Rosalee</user>
    <text>I’m going to blow everything away then and see if that helps.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:26:28.089313</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Are there any examples of using the FFI for C functions that have callbacks?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:26:37.093218</ts>
    <user>Rosalee</user>
    <text>(And I want to pass in a racket function)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:26:46.096974</ts>
    <user>Rosalee</user>
    <text>I’ve never gotten it to work anyway.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:30:40.192532</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; There are examples in the draw and GUI libraries; I see `png_create_read_struct` in `racket/draw/unsafe/png` is passed `error-esc` as a callback</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:30:56.199393</ts>
    <user>Rosalee</user>
    <text>okay thanks.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:31:53.223169</ts>
    <user>Rosalee</user>
    <text>Would this work if the last argument to the callback was a va_list?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:32:26.236177</ts>
    <user>Rosalee</user>
    <text>I ask because the function I am trying to call is: &lt;http://ffmpeg.org/doxygen/3.2/group__lavu__log.html#ga14034761faf581a8b9ed6ef19b313708&gt;</text>
  </message>
  <message conversation_id="115">
    <ts>2017-07-24T17:36:02.324761</ts>
    <user>Chantelle</user>
    <text>is there a way to lookup reverse dependencies in the package catalog? e.g. find all packages that use my packages?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:44:33.525928</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Taking a `va_list` argument is tricky, because the representation depends on the system. If you can ignore the `va_list` argument, then just have your callback take the first two</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:46:39.574749</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; I see. I thought a `va_list` arg was just a pointer to the actual list structure. (Where the list structure is platform dependent.)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:46:49.578468</ts>
    <user>Rosalee</user>
    <text>Compared to `...`, which just puts it inlined.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:47:18.590037</ts>
    <user>Rosalee</user>
    <text>Although I have to admit that my knowledge in this particular area of C is a bit…er…limited. (I can’t find many good resources on it anyway.)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:52:45.715727</ts>
    <user>Lavenia</user>
    <text>&lt;@Rosalee&gt; &lt;https://github.com/dyoo/ffi-tutorial/tree/master/ffi/tutorial/examples/struct-with-callbacks&gt;</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:56:37.804190</ts>
    <user>Rosalee</user>
    <text>&lt;@Lavenia&gt; Thanks. while a good callback example, it doesn’t seem to handle a va_list.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:57:29.823638</ts>
    <user>Lavenia</user>
    <text>Ok. I look in that repo for examples. A shame he never got to write the tutorial.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T17:58:32.847432</ts>
    <user>Lavenia</user>
    <text>A strange thing about the FFI:  The paper on the FFI is easier to grasp than the documentation.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T18:00:05.881163</ts>
    <user>Rosalee</user>
    <text>Ha…ya.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T18:00:21.888225</ts>
    <user>Rosalee</user>
    <text>IMO, that’s because the paper actually has a rational for why they designed it the way they did.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T18:00:34.893244</ts>
    <user>Rosalee</user>
    <text>Which makes it a lot easier to predict.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T18:01:05.905151</ts>
    <user>Rosalee</user>
    <text>Anyway, I sadly don’t see anything about va_list in that repo. Oh well. :disappointed:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T18:02:03.926534</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; okay, here is an alternative that might work. Is there any way to intercept what an FFI call prints to stdout?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T18:02:41.940125</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; no</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T18:03:11.950408</ts>
    <user>Rosalee</user>
    <text>rats. :disappointed:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T18:03:51.964926</ts>
    <user>Rosalee</user>
    <text>So basically I would have to have my whole program run in an environment that captures the stdout….that’s unfortunate.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-24T18:03:55.966092</ts>
    <user>Rosalee</user>
    <text>Thanks anyway though.</text>
  </message>
  <message conversation_id="116">
    <ts>2017-07-24T19:34:02.529702</ts>
    <user>Corey</user>
    <text>&lt;@Chantelle&gt; I've done that this way: &lt;https://gist.github.com/greghendershott/b20effb9d9c48211e1c11d9486257918&gt;</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:29:11.409657</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Since different architectures implement va_list differently, but still follow a common C interface, would it then be reasonable to add a primitive to internal racket to convert a va_list to a vector? Something like `va_list_to_vector()` or something like that?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:29:22.415527</ts>
    <user>Rosalee</user>
    <text>Then we could add that functionality to the FFI library.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:29:45.427190</ts>
    <user>Rosalee</user>
    <text>(Since at the moment it seems like there is no way to handle a va_list in our ffi)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:33:10.535581</ts>
    <user>Vincenzo</user>
    <text>I don't think `va_list_to_vector()` would work well, and probably the C interface would need to be followed more closely with something like `va_arg()`, and it needs to be in the FFI to work right with types. Also, we'd need a new primitive type for `va_list` itself.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:36:14.632119</ts>
    <user>Rosalee</user>
    <text>Sorry, but I couldn’t parse ‘would need to be followed more closely with something like `va_arg()`‘, could you clarify what you mean by that?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:37:49.681920</ts>
    <user>Rosalee</user>
    <text>Ah, I think I know what you are saying.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:38:17.696838</ts>
    <user>Rosalee</user>
    <text>Because we wouldn’t know what the types are, it would be hard to grab the resulting types of data out of the vector.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:39:43.742349</ts>
    <user>Rosalee</user>
    <text>Adding a `(_va-list …)` type to our FFI ‘seems’ doable.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:50:32.093596</ts>
    <user>Vincenzo</user>
    <text>It looks like `va_list` is pointer-sized in practice. So, if you're trying to call `vsnprintf` or something like that to format a log message, probably using `_pointer` will work. Or do you really need access to the individual arguments referenced by the `va_list`?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:51:25.123107</ts>
    <user>Rosalee</user>
    <text>Nah, in this case using `vsnprintf` should work.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:51:48.135635</ts>
    <user>Rosalee</user>
    <text>I have a format string, and I need expand it.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:51:55.139046</ts>
    <user>Rosalee</user>
    <text>But that’s about it.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T09:52:02.142674</ts>
    <user>Rosalee</user>
    <text>So I’ll give that a shot, thanks.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:17:14.035156</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Wouldn’t we actually want `vasnprintf`?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:17:30.045501</ts>
    <user>Rosalee</user>
    <text>Since I won’t know how much buffer space I’ll need?</text>
  </message>
  <message conversation_id="117">
    <ts>2017-07-25T10:18:49.094877</ts>
    <user>Vincenzo</user>
    <text>Sounds right</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:19:52.134133</ts>
    <user>Vincenzo</user>
    <text>(I don't know at the variants. I just know to throw in `s` for "string", `v` for `va_list`, and `n` at an attempt to be safe.)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:25:48.353689</ts>
    <user>Rosalee</user>
    <text>Yup</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:25:57.359233</ts>
    <user>Rosalee</user>
    <text>I had to read the man page to get it.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:26:05.364423</ts>
    <user>Rosalee</user>
    <text>But `a` is for allocate.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:26:16.370698</ts>
    <user>Rosalee</user>
    <text>Which means it will eventually need to be freed.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:26:24.376292</ts>
    <user>Rosalee</user>
    <text>But that one is easy enough to do.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:27:09.404600</ts>
    <user>Rosalee</user>
    <text>Ideally I would rather use `vsnprintf`, but there doesn’t seem to be a good api for determining if your buffer was big enough.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T10:27:31.419089</ts>
    <user>Rosalee</user>
    <text>And, as far as I can tell, for stuff like that, most c programmers seem to take a ‘good enough’ approach to this.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:23:57.567928</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; If I have a `(_ptr o _string)` in my FFI call, with the Racket GC collect the output pointer, or will I have to free it by hand?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:31:55.878364</ts>
    <user>Rosalee</user>
    <text>Anyway, modulo that possible memory leaked, your suggestion worked. So thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="118">
    <ts>2017-07-25T11:42:15.285189</ts>
    <user>Vincenzo</user>
    <text>`(_ptr o _string)` allocates GCable memory to receive the `_string` pointer as well as the string content, so you don't have to free either. If the called function was returning a `char*` that needs to be freed, though, then `(_ptr o _string)` is not a good choice, because you never get to see the returned pointer to free it</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:49:28.564370</ts>
    <user>Rosalee</user>
    <text>Ah, fair. It has an argument for a char**, which fills the pointer with a char*.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:50:12.593478</ts>
    <user>Rosalee</user>
    <text>So you’re saying it would be better to just use a `_pointer`, copy it into a _string`, and then free the _pointer then?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:50:20.598894</ts>
    <user>Rosalee</user>
    <text>(As I understand it anyway)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:51:44.654093</ts>
    <user>Vincenzo</user>
    <text>Yes. You can use `(_ptr o _pointer)`, but do the `_pointer` to `_string` cast (which will allocate a string) yourself, and then you can free the `_pointer` value</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:52:00.664589</ts>
    <user>Rosalee</user>
    <text>Cool, thanks.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:52:20.677632</ts>
    <user>Rosalee</user>
    <text>BTW, I have been meaning to ask, do you have any idea how the Racket7 codebase will effect the FFI?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:52:33.685872</ts>
    <user>Rosalee</user>
    <text>err…affect*</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:54:23.757058</ts>
    <user>Vincenzo</user>
    <text>So far, I think it will mostly work. Finalization will be different, but most finalization patterns will work in both.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:55:50.812846</ts>
    <user>Rosalee</user>
    <text>Okay, that’s good. Thanks.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T11:56:09.825016</ts>
    <user>Rosalee</user>
    <text>(I’ve obviously been making heavy use of it. :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="119">
    <ts>2017-07-25T13:03:08.204489</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; The racket7 progress is exciting, and your detailed transparency is, as always, much appreciated. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="120">
    <ts>2017-07-25T14:10:42.521073</ts>
    <user>Jacob</user>
    <text>ditto what Alexis said. The reason Racket-on-Chez-Scheme doesn't yet work on Windows is simply because Windows specific functions haven't been implemented yet?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T14:26:31.068099</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Is there any good way to specify to the Racket FFI that I would like version 6.69.100 and up?)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T14:26:55.082017</ts>
    <user>Rosalee</user>
    <text>Or rather, 6.69.100 and up, up to 7.x, and then its incompatible again.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T14:27:20.096646</ts>
    <user>Rosalee</user>
    <text>It seems like passing in a whole list of strings to `ffi-lib` would be massively too long.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T14:28:47.147816</ts>
    <user>Rosalee</user>
    <text>I guess I could just do the string processing myself.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T14:43:27.655633</ts>
    <user>Rosalee</user>
    <text>hmm…actually, no that won’t work. Because I have to give it an absolute path in that case. :confused:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T15:56:22.987679</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; I don't know how to do that generally, whether using the Racket FFI or anything else</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T15:57:57.038792</ts>
    <user>Rosalee</user>
    <text>Ya, I ended up just opening it up, and checking the version after the fact.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T15:58:17.050270</ts>
    <user>Rosalee</user>
    <text>I would imagine dlopen has something it does, but that’s more work than I think its worth at the moment.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T15:58:42.064045</ts>
    <user>Vincenzo</user>
    <text>&lt;@Jacob&gt; Racket-on-Chez doesn't yet build on Windows mostly because I haven't sorted out how a build will work there – not using Unix tools – but also because Windows path parsing is not yet implemented</text>
  </message>
  <message conversation_id="121">
    <ts>2017-07-25T18:26:36.142182</ts>
    <user>Nelson</user>
    <text>has anyone here tried sleeping in Mary Gates Hall at the University of Washington? (&lt;@Niesha&gt; do you know anyone to ask?)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T18:39:17.384736</ts>
    <user>Georgeanna</user>
    <text>heh. I think I did once back in the day. probably wasn’t SUPPOSED to. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T22:58:32.763256</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Hmm…functions like vasprintf don’t seem to be loaded in Racket’s windows build.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-25T23:00:14.781994</ts>
    <user>Rosalee</user>
    <text>Ah, that specific one is a gnu extension according to SO. oh well. &lt;https://stackoverflow.com/questions/40159892/using-asprintf-on-windows&gt;</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T11:36:03.023353</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; So for what its worth, treeting the va_list like a pointer seems to cause erratic behavior.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T11:36:30.041287</ts>
    <user>Rosalee</user>
    <text>I mean, the bug _could_ be somewhere else, and I’m seeing if I can reduce it down.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T11:36:33.043077</ts>
    <user>Rosalee</user>
    <text>But…a.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T11:36:34.044012</ts>
    <user>Rosalee</user>
    <text>ya*</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T11:38:00.097679</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; What platform are you on?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T11:40:16.183400</ts>
    <user>Vincenzo</user>
    <text>Nevermind – I see that `sizeof(va_list)` is 24 bytes on Mac OS, so it must vary more than I thought, and I must have mangled my experiment before</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T11:45:35.391452</ts>
    <user>Vincenzo</user>
    <text>Thinking about it more, a portable solution seems hopeless without `va_list` support in libffi, because the specific representation of a `va_list` can affect the way that it's passed in registers or on the stack. The only idea I have is to define `_va_list` in `ffi/unsafe` based on the result of `(system-library-subpath #f)` – so it would work only for platforms where we've specifically tracked down and hard-coded the representation.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T12:23:24.801877</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; ya, that sounds about right.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T12:23:31.805739</ts>
    <user>Rosalee</user>
    <text>Also I’m on OS X.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T12:24:30.840985</ts>
    <user>Rosalee</user>
    <text>I’ll look at the system V ABI specs, if they are at least consistent among different instruction sets we probably do have a chance</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T12:37:24.300075</ts>
    <user>Rosalee</user>
    <text>Looking at the c99 spec, it requires that va_list be a type.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T12:38:04.322932</ts>
    <user>Rosalee</user>
    <text>And if that is the case, it seems like if we make a _va-list type, while we won’t be able to do anything with it in Racket code, it could be passed to C code.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T12:38:34.340445</ts>
    <user>Rosalee</user>
    <text>(I’m looking at section 7.15 of the latest draft of the c99 spec.)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T12:38:45.346949</ts>
    <user>Rosalee</user>
    <text>(As I don’t have a copy of the actual release.)</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:42:17.603691</ts>
    <user>Lavenia</user>
    <text>&lt;@Rosalee&gt; Supporting va_list seems painful. Just found the section "Variable Length Arguments" in the SWIG manual. It has the subtitle "The horror. The horror."</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:42:24.607282</ts>
    <user>Lavenia</user>
    <text>&lt;http://www.swig.org/Doc1.3/Varargs.html&gt;</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:49:45.854793</ts>
    <user>Rosalee</user>
    <text>&lt;@Lavenia&gt; Not trying support varargs…That would be really hard. :confused:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:49:49.856976</ts>
    <user>Rosalee</user>
    <text>Just va_list.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:49:58.862323</ts>
    <user>Rosalee</user>
    <text>Which is doable, as its just another value.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:50:28.879899</ts>
    <user>Rosalee</user>
    <text>As long as it stays an opaque value to Racket, that is fine.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:50:54.894992</ts>
    <user>Rosalee</user>
    <text>Trying to mimick va_arg, va_first, etc. or the `...` protocol, that sounds scary.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:51:11.905010</ts>
    <user>Rosalee</user>
    <text>At least based on what I’ve ascertained at the moment.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:52:16.941841</ts>
    <user>Lavenia</user>
    <text>Iam clearly conflating those. Aren't va_list used to deal with variable arguments?</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:54:38.021906</ts>
    <user>Rosalee</user>
    <text>You are correct.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:54:50.028750</ts>
    <user>Rosalee</user>
    <text>va_list however, can also be passed to another function as a type.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:55:06.038438</ts>
    <user>Rosalee</user>
    <text>This is used if you, say, want to make a helper function.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:56:47.097239</ts>
    <user>Lavenia</user>
    <text>Ok. So va_list is also useful in other situations.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:57:15.112775</ts>
    <user>Rosalee</user>
    <text>```
int myfunc(const char *str, ...) {
    va_list ag;
    va_start(ag);
    helper(ag);
    va_end(ag);
}

int helper(va_list ag) {
    ...
    va_arg(ag);
    ...
}
```</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:57:21.116719</ts>
    <user>Rosalee</user>
    <text>Yup</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:57:27.120169</ts>
    <user>Rosalee</user>
    <text>in this case, I want to write `helper`</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:57:30.121583</ts>
    <user>Rosalee</user>
    <text>In particular…</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:57:43.129517</ts>
    <user>Rosalee</user>
    <text>I want to write `helper` that just passes the `va_list` to another (C) function.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:57:49.132988</ts>
    <user>Rosalee</user>
    <text>Because I’m hooking up two libraries.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:57:53.135319</ts>
    <user>Rosalee</user>
    <text>Through Racket….</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:58:50.167487</ts>
    <user>Rosalee</user>
    <text>Of course, this still isn’t enough to duplicate va_copy, as that’s  macro. To do that, we would need to make scheme_va_copy, or something like that.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T14:58:54.170072</ts>
    <user>Rosalee</user>
    <text>Which does nothing but call the macro.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T15:01:25.258431</ts>
    <user>Rosalee</user>
    <text>Of course, if we do that, it would make sense to do that for va_arg as well.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T15:01:56.276357</ts>
    <user>Rosalee</user>
    <text>We couldn’t do `va_start` and `va_end` though, because that would require supporting vaargs, and `...`, which, as you rightly pointed out, is terrifying.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T15:02:12.284906</ts>
    <user>Rosalee</user>
    <text>At least, what it looks like anyway. Perhaps I’m wrong.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T15:11:10.576959</ts>
    <user>Lavenia</user>
    <text>Thanks for the example.</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T15:16:46.754786</ts>
    <user>Rosalee</user>
    <text>Any time. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="113">
    <ts>2017-07-26T15:51:51.852433</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; worksp/librktio/… vs librktio/… these two directories seem pretty similar. Is one of them deprecated?</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T15:53:48.914235</ts>
    <user>Vincenzo</user>
    <text>There should be a "rktio" directory with the rktio implementation and a "worksp/librktio" directory with MSVC projects</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T15:54:05.923155</ts>
    <user>Vincenzo</user>
    <text>I'm not seeing multiple "librktio" directories</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T15:57:49.041781</ts>
    <user>Rosalee</user>
    <text>err…ya, I mean worksp/rktio. That makes sense that one is for windows. Thanks.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:02:58.210911</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; oh wait, no</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:03:05.214583</ts>
    <user>Rosalee</user>
    <text>I do see a worksp/librktio.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:03:22.224095</ts>
    <user>Rosalee</user>
    <text>racket/racket/src/worksp/librktio</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:03:51.239970</ts>
    <user>Vincenzo</user>
    <text>Just to be sure: there should only be one "rktio" and one "librktio" directory; the "librktio" directory should be in "worksp", and the "rktio" directory should not be in "worksp"</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:03:53.241242</ts>
    <user>Rosalee</user>
    <text>Although that one does look like a visual studio project.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:04:21.256330</ts>
    <user>Rosalee</user>
    <text>Ah, okay.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:04:30.261141</ts>
    <user>Rosalee</user>
    <text>That is correct.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:11:45.490081</ts>
    <user>Rosalee</user>
    <text>So, since windows has `src/worksp/libffi`, does that mean it doesn’t use `src/foreign`?</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:12:23.509754</ts>
    <user>Rosalee</user>
    <text>OH….</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:12:40.518088</ts>
    <user>Rosalee</user>
    <text>src/worksp/libffi probably is in pace of src/foreign/libffi.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:19:44.736755</ts>
    <user>Vincenzo</user>
    <text>The `foreign.c` part of `src/foreign` is included directly in `libracket`, while `src/worksp/libffi` is the project for `src/foreign/libffi`</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:24:44.894282</ts>
    <user>Rosalee</user>
    <text>Okay</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:25:10.907831</ts>
    <user>Rosalee</user>
    <text>Also, I realized, adding a primitive for va_list is silly, since per the spec, its just an (undefined) struct type.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:26:32.951142</ts>
    <user>Rosalee</user>
    <text>So it would make a lot more sense to just add a function to the core that calls `sizeof` (which I suspect already exists), and then define _va-list in racket.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:31:07.100463</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Is even `sizeof(va_list)` useful, since the calling convention can depend on more than the size? For example, `long` and `double` are often passed differently – though I'll grant that `va_list` is unlikely to be represented as a `double`. I still think it's best to use `(system-library-subpath #f)` and hardwire a representation in `ffi/unsafe` for various known results.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:34:46.219150</ts>
    <user>Rosalee</user>
    <text>Ah, fair.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:47:15.611982</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Actually, no. Since `va_list` is NOT a primitive in C (per the spec), it’ll be handled just like any other struct will.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:47:40.625065</ts>
    <user>Rosalee</user>
    <text>(Like, the size and field order of the struct is undefined, but the fact that it is a struct is.)</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:48:26.649131</ts>
    <user>Rosalee</user>
    <text>“The type declared is va_list which is an object type suitable for holding information needed by the macros va_start, va_arg, va_end, and va_copy”</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:50:02.699712</ts>
    <user>Vincenzo</user>
    <text>"object type" =&amp;gt; "struct"?</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:50:53.727262</ts>
    <user>Vincenzo</user>
    <text>Even so, I thought the way a struct is passed could depend on its content beyond just its size, but I forget these details</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:53:34.811066</ts>
    <user>Rosalee</user>
    <text>That is how I interpret it. Although I admit I didn’t make the spec so I’m not 100% sure.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:54:37.844205</ts>
    <user>Vincenzo</user>
    <text>Ok. FWIW, I don't think "object" means "struct" in the C standard</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:55:17.865641</ts>
    <user>Rosalee</user>
    <text>Also ya, it certainly is true that structs are passed differently based on what is in them.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:55:23.868773</ts>
    <user>Rosalee</user>
    <text>Hmm…okay.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T16:55:39.876664</ts>
    <user>Rosalee</user>
    <text>I’ll see if I can find an answer to that. Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T17:18:40.559050</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; “object: region of data storage in the execution environment, the contents of which can represent values”</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T17:18:48.562635</ts>
    <user>Rosalee</user>
    <text>So I guess it _could_ be a primitive.</text>
  </message>
  <message conversation_id="122">
    <ts>2017-07-26T17:19:00.568088</ts>
    <user>Rosalee</user>
    <text>Just not a macro.</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:08:16.168477</ts>
    <user>Carson</user>
    <text>According to &lt;https://www.openhub.net/p/racket&gt; the last commit to Racket happened about a year ago - what happened a year ago that it doesn't include anything since then?</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:11:15.228630</ts>
    <user>Lavenia</user>
    <text>&lt;@Carson&gt;   &lt;https://github.com/racket/racket/commits/master&gt;</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:11:47.239119</ts>
    <user>Lavenia</user>
    <text>Oh! You are asking why OpenHub does update. No idea.</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:12:36.255370</ts>
    <user>Carson</user>
    <text>yes, that's what I was wondering about</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:13:31.273478</ts>
    <user>Lavenia</user>
    <text>Do other projects show updates?</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:14:18.288808</ts>
    <user>Carson</user>
    <text>yes</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:16:55.339399</ts>
    <user>Carson</user>
    <text>maybe it doesn't redirect from plt/racket to racket/racket: &lt;https://www.openhub.net/p/racket/enlistments&gt;</text>
  </message>
  <message conversation_id="124">
    <ts>2017-07-27T18:34:45.667098</ts>
    <user>Lavenia</user>
    <text>yep - that's it - can you change it?</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:44:43.840029</ts>
    <user>Carson</user>
    <text>I tried but got this: "You can view, but not change this data. Only managers may change this data. "</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:45:38.856093</ts>
    <user>Lavenia</user>
    <text>who are the managers?</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:46:11.865559</ts>
    <user>Carson</user>
    <text>&lt;https://www.openhub.net/accounts/elibarzilay&gt;</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:46:30.870838</ts>
    <user>Carson</user>
    <text>Is he on Slack, can't find him?</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:47:29.887455</ts>
    <user>Lavenia</user>
    <text>send him a mail</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:47:49.892854</ts>
    <user>Lavenia</user>
    <text>&lt;http://www.barzilay.org/contact.html&gt;</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:48:06.897333</ts>
    <user>Carson</user>
    <text>will do, thanks</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-27T18:56:00.030547</ts>
    <user>Carson</user>
    <text>done</text>
  </message>
  <message conversation_id="125">
    <ts>2017-07-28T06:19:10.089072</ts>
    <user>Ivory</user>
    <text>Hi I'd like to improve my Racket programming and abstraction/algorithm design in general. Can anyone suggest a good place to post Racket scripts and discuss how to improve it, other than Code Review on StackExchange? Thanks</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-28T06:26:37.216909</ts>
    <user>Lavenia</user>
    <text>&lt;@Ivory&gt; Here would be ok. Use &lt;http://pasterack.org|pasterack.org&gt; then post url here.</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-28T10:27:03.459293</ts>
    <user>Rosalee</user>
    <text>&lt;@Carson&gt; Alternatively, he probably is on the &lt;#C088CK7J6|irc&gt; channel.</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-28T10:29:28.542648</ts>
    <user>Carson</user>
    <text>thanks &lt;@Rosalee&gt;</text>
  </message>
  <message conversation_id="126">
    <ts>2017-07-29T01:25:45.458617</ts>
    <user>Georgeanna</user>
    <text>I just had to rebuild a machine and things seem a bit wonky with my packages… is `raco setup --clean` sufficient to sanitize and sanity check everything?</text>
  </message>
  <message conversation_id="125">
    <ts>2017-07-29T04:36:41.116513</ts>
    <user>Ivory</user>
    <text>&lt;@Lavenia&gt; thanks</text>
  </message>
  <message conversation_id="125">
    <ts>2017-07-29T04:43:18.138394</ts>
    <user>Ivory</user>
    <text>&lt;@Lavenia&gt; pasted my code into paste &lt;http://rack.org|rack.org&gt;. The url is:  &lt;http://pasterack.org/pastes/72152&gt;. Thanks. Your feedback would be great.</text>
  </message>
  <message conversation_id="127">
    <ts>2017-07-29T17:18:28.424238</ts>
    <user>Nelson</user>
    <text>hi, here's a few comments:
- `(let (....) (define ....))` can be `(define ....) (define ....)`, saves an indentation
- `(eq? b #f)` is the same as `(not b)`
- I'd use a helper function for the `(number-&amp;gt;string ....)` 
- I'd also put all the defines "within" the define for dialog, so overall structure is:
```
(define dialog
  (let ()
    (define ....)
    ....))
(send dialog show #t)
```</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-31T13:21:18.132226</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; The FFI docs have the following pseudocode for malloc:
```
(let ([p (malloc from-type)])
  (ptr-set! p from-type v)
  (ptr-ref p to-type))
```</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-31T13:21:33.140550</ts>
    <user>Rosalee</user>
    <text>Errr….cast, they have the pseudocode for cast.</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-31T13:21:59.154392</ts>
    <user>Rosalee</user>
    <text>But in this example, shouldn’t the `malloc` be apointer, given tht `ptr-set!` and `ptr-ref` are happening to it?</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-31T13:22:28.170335</ts>
    <user>Rosalee</user>
    <text>As shown here:</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-31T13:22:31.172196</ts>
    <user>Rosalee</user>
    <text>&lt;http://docs.racket-lang.org/foreign/Miscellaneous_Support.html?q=cast#%28def._%28%28lib._ffi%2Funsafe..rkt%29._cast%29%29&gt;</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-31T13:22:36.175163</ts>
    <user>Rosalee</user>
    <text>If so I’d be happy to fix that.</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-31T14:25:38.292385</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; I'm not sure what you mean, and I think that code is right. (It's the actual implementation in the simple case, as reflected by the `convert` helper function.) `malloc` does return a pointer, but the pointer refers to `from-type` content, where `from-type` isn't isn't necessarily a pointer type. Similarly, `pre-set!` and `ptr-ref` want a pointer to a `from-type`/`to-type` to cast between those.</text>
  </message>
  <message conversation_id="123">
    <ts>2017-07-31T14:35:42.633342</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Ah, right, okay, that makes sense. Thanks.</text>
  </message>
  <message conversation_id="128">
    <ts>2017-07-31T20:34:48.281499</ts>
    <user>Cecile</user>
    <text>Which package provides `raco exe`?</text>
  </message>
  <message conversation_id="128">
    <ts>2017-07-31T20:37:37.317430</ts>
    <user>Cecile</user>
    <text>Answering my own question: `compiler-lib`</text>
  </message>
  <message conversation_id="129">
    <ts>2017-08-01T05:47:26.919968</ts>
    <user>Genna</user>
    <text>trying to make my Racket macro-writing experience a bit saner. I'm defining a simple module lang and was hoping `(expand-module/step mod)` would let me expand modules that use DSLs, but getting an error, e.g.

test.rkt
```
#lang racket
(require macro-debugger/stepper)
(expand-module/step "./scratch.rkt")
```

scratch.rkt
```
#lang racket
(module test racket
  (let ([x 1] [y 2]) (or (even? x) (even? y))))

```
Produces:
&amp;gt;derivation-parser: error on token #2: &amp;lt;local-value, #&amp;lt;syntax:/Users/ze/Code/racket/racket/share/pkgs/gui-lib/framework/private/sig.rkt:8:20 number-snip-class^&amp;gt;&amp;gt;</text>
  </message>
  <message conversation_id="129">
    <ts>2017-08-01T06:07:07.338935</ts>
    <user>Genna</user>
    <text>A more general question is how do I debug my #lang DSLs? Say, I prepare a file in such a language as in 
```
#lang rogue
(some rogue forms defined in ~/rogue/main.rkt)
```

Language is defined using syntax/module-reader and the collection is properly linked with `raco link rogue`, so Rogue script runs fine. How would go about stepping through its expansions steps? I'm trying to figure if I my transformations use bindings  i expect, e.g. the redefined #%app etc. Sadly, the above-mentioned `(expand-module/step mod)` didn't work for me out of the box. How do people debug such things?</text>
  </message>
  <message conversation_id="129">
    <ts>2017-08-01T06:21:04.605369</ts>
    <user>Genna</user>
    <text>One more question is about redefining kernel forms like `#%app` and friends in my #lang implementation, something like this

rogue/main.rkt has
```
(provide #%datum
         #%top-interaction
         #%top
         (all-defined-out)
         (rename-out [app #%app]
                               [module-begin #%module-begin]))

(define-syntax (app stx)
      ... my implentation of #%app)

(define-simple-macro (some-rogue-form pattern)
    (f a)) ;; &amp;lt;-- which binding of #%app will be used when this form is expanded inside a file written in #lang rogue? How do I confirm this using Racket tools?

(racket-module reader syntax/module-reader
  rogue)
```</text>
  </message>
  <message conversation_id="129">
    <ts>2017-08-01T07:37:49.951423</ts>
    <user>Genna</user>
    <text>omg Macro Debugger tools are awesome!</text>
  </message>
  <message conversation_id="129">
    <ts>2017-08-01T07:44:46.068604</ts>
    <user>Genna</user>
    <text>re the above #%app binding question syntax object browser in the stepper shows the binding comes from racket/base and not from my `(rename-out [app #%app])`, which is a bit confusing. I suspect I misunderstand scoping rules here, i.e. I expect #%app to be dynamically scope inside a file that uses my DSL `#lang rogue` when really macros defined in `rogue` end up expanding into forms that use lexically bound #%app, that is inside the module defining `rogue` the language. Could you guys correct my thinking here please?</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T07:52:26.204282</ts>
    <user>Vincenzo</user>
    <text>The implicit `#%app` form in `(f a)` takes its context from the open parenthesis. (More precisely, `(f a)` is a syntax list and there's a context attached to the list as a whole, in addition to contexts on the individual `f` and `a` tokens.) Since the `#%app` in the environment of `(f a)` is the one from `racket/base`, that's the one used when `(f a)` is treated as `(#%app f a)`.</text>
  </message>
  <message conversation_id="129">
    <ts>2017-08-01T08:03:03.407076</ts>
    <user>Genna</user>
    <text>ah I think I get it. I'm beginning to wonder how we ever managed to redefine kernel forms like #%app and #%module-begin then. I've seen things like this being used

```
(provide (except-out (all-from-out racket)
                     lambda
                     λ
                     define
                     eval
                     require
                     modulo
                     remainder
                     /
                     #%app)
         (rename-out [new-lambda lambda]
                     [new-lambda λ]
                     [new-define define]
                     [divide /]
                     [myapp #%app]
                     ))
```</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T09:00:04.680590</ts>
    <user>Vincenzo</user>
    <text>When `new-lambda` is used as `lambda` in some importing module, the expressions written inside that `lambda` will also be from the importing module – and so an open parentheses there will see `myapp` instead of `#%app` from `racket/base`. You may be thinking that the body of a`new-lambda` use is treated as being from the `new-lambda` place, but it's not; the body is treated as being from wherever it is written (i.e., lexical scope).</text>
  </message>
  <message conversation_id="129">
    <ts>2017-08-01T09:08:34.920462</ts>
    <user>Genna</user>
    <text>thank you Matthew! that really helps</text>
  </message>
  <message conversation_id="129">
    <ts>2017-08-01T09:08:58.931382</ts>
    <user>Genna</user>
    <text>ok, now  i need to think a bit harder about what I'm trying to do here</text>
  </message>
  <message conversation_id="129">
    <ts>2017-08-01T09:10:32.976298</ts>
    <user>Genna</user>
    <text>fwiw I'm just amazed at how much introspection macro-debugger/stepper offers. Like I'm no longer blind</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T11:28:24.971336</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Just a sanity check, environment variables that are set using `putenv` are also going to be set in FFI calls, correct?</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T11:28:45.985567</ts>
    <user>Rosalee</user>
    <text>Oh wait, no, it uses current-environment-variables, never mind.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T11:29:33.016962</ts>
    <user>Vincenzo</user>
    <text>If `(current-environment-variables)` returns its original value, then `putenv` affects OS-level environment variables</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T11:32:07.119738</ts>
    <user>Rosalee</user>
    <text>That makes sense. Thanks.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T11:32:24.130296</ts>
    <user>Rosalee</user>
    <text>So basically don’t change the parameter and it works. Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="131">
    <ts>2017-08-01T15:04:47.623507</ts>
    <user>Chantelle</user>
    <text>&lt;@Natosha&gt; &lt;@Nelson&gt; do either of you have more comments on &lt;https://github.com/racket/rackunit/pull/59&gt; ?</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T17:34:15.245586</ts>
    <user>Rosalee</user>
    <text>Does anyone know how to be more specific when requesting an opengl context than just core/compatibility?</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T17:34:24.249745</ts>
    <user>Rosalee</user>
    <text>Namely, I want core3.3</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T17:34:29.251714</ts>
    <user>Rosalee</user>
    <text>If I can get it anyway.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T17:35:13.271156</ts>
    <user>Rosalee</user>
    <text>&lt;http://docs.racket-lang.org/draw/gl-config_.html?q=gl-config&gt;</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T17:42:58.472060</ts>
    <user>Rosalee</user>
    <text>&lt;@Stefani&gt; You might now?</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:02:47.953539</ts>
    <user>Rosalee</user>
    <text>hmm…looks like not. At least not yet. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:03:06.960761</ts>
    <user>Rosalee</user>
    <text>It looks like when you request core, it starts at 4.x and goes down to 3.0</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:20:33.328125</ts>
    <user>Rosalee</user>
    <text>WAIT!!! No. Grr….despite asking for a core context, its still giving me a legacy one. That absolutely should be in the docs.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:22:17.362394</ts>
    <user>Rosalee</user>
    <text>That, and you should absolutely be able to find out what kind of context you got after the fact.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:24:19.402365</ts>
    <user>Rosalee</user>
    <text>Hmm…I guess in get-legacy? it says that it is only supported on mac 10.7+ and _some_ linux variants.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:24:53.413845</ts>
    <user>Rosalee</user>
    <text>But there still doesn’t seem to be a way to check which version you ended up getting once you go it.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:26:09.438554</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; I'm no GL expert, but I thought there were GL-level functions that will tell you</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:27:32.465891</ts>
    <user>Rosalee</user>
    <text>There are some.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:27:42.469065</ts>
    <user>Rosalee</user>
    <text>Namely, glGetString</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:32:15.559765</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Btw, its the line `(force lazy-GLX_ARB_create_context?)` that is causing it to create a compatibility context.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:32:40.567766</ts>
    <user>Rosalee</user>
    <text>When I comment out that line a compatibility context gets created. (Version 3.3)</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T18:40:13.708733</ts>
    <user>Vincenzo</user>
    <text>You get a *non-*compatibility context when it's commented out? Neil wrote that code, and I don't know the right answer in this case, but I'm happy to accept patches from people who do.</text>
  </message>
  <message conversation_id="132">
    <ts>2017-08-01T21:04:31.847331</ts>
    <user>Stefani</user>
    <text>leif: it is not common for OpenGL apis to give you the ability to ask for a specific version, because drivers typically don't support multiple options anyways. OpenGL versions never change the meaning of old stuff (i.e. it is forward compatible) and when you write GLSL you have to specify the version always... so what exactly is the problem that yo</text>
  </message>
  <message conversation_id="132">
    <ts>2017-08-01T21:04:31.847336</ts>
    <user>Stefani</user>
    <text>u are trying to solve?</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:35:52.221192</ts>
    <user>Rosalee</user>
    <text>I mean, newer versions _do_ remove deprecated stuff. Although the only instance I can think of this happening in a major way was 3.0 to 3.1</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:36:28.228328</ts>
    <user>Rosalee</user>
    <text>I have a GLSL shader, it is not doing anything fancy, just drawing a quad to the screen, and drawing a texture to that quad.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:36:32.229139</ts>
    <user>Rosalee</user>
    <text>(aka, its a media player)</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:36:51.232859</ts>
    <user>Rosalee</user>
    <text>The shader is written in GLSL 330</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:37:30.240513</ts>
    <user>Rosalee</user>
    <text>On my mac, I get 3.3 when I ask for the core profile.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:38:15.249351</ts>
    <user>Rosalee</user>
    <text>But on linux, despite asking for core, I got compatibility. Which corresponded to version OpenGL 3.0, so GLSL 130.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:38:52.256547</ts>
    <user>Rosalee</user>
    <text>&lt;@Stefani&gt; ^</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:39:41.266097</ts>
    <user>Rosalee</user>
    <text>Oh, also, glx (which is what the linux opengl bindings use), does let you request a specific version. Of course you are limited to what your hardware can support. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:41:10.283684</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Kind of. When you request a core profile, Racket’s opengl library tries a few tests to see if its compatible. If it is, and you requested a core profile, it gives you a context using the core profile. However, if it can’t, it ignores what you requested and silently gives you  a compatibility context.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:41:42.289638</ts>
    <user>Rosalee</user>
    <text>The only real way to test after the fact (as far as I can tell), which one you got is using the glGetString function and checking your opengl version.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:42:34.299879</ts>
    <user>Rosalee</user>
    <text>Anyway, I commented out one of the checks that was failing, to see what would happen, and the opengl context worked just fine. Which makes me think we are potentially checking more stuff than we need to.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:43:39.312367</ts>
    <user>Rosalee</user>
    <text>(Obviously I haven’t tested that thoroughly yet.)</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:43:49.314218</ts>
    <user>Rosalee</user>
    <text>Anyway, thanks.</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:51:11.401077</ts>
    <user>Stefani</user>
    <text>leif: 3.0 to later is basically a totally new API, which what the whole core vs compatibility thing is about</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:51:55.409641</ts>
    <user>Stefani</user>
    <text>it sounds like either something wrong with Racket checking of the version (which you said) or your driver doesn't really support new stuff, which is common on Linux software implementations</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:55:02.446835</ts>
    <user>Rosalee</user>
    <text>&lt;@Stefani&gt; yup. Or at least thats when they dropped the fixed pipeline in favor of the shaders from opengl 2. But how would I test if it doesn’t ‘really’ support newer stuff?</text>
  </message>
  <message conversation_id="130">
    <ts>2017-08-01T21:55:21.450571</ts>
    <user>Rosalee</user>
    <text>Like, I’m able to open up a window, and build and run a GLSL 330 program.</text>
  </message>
  <message conversation_id="133">
    <ts>2017-08-02T04:39:35.578509</ts>
    <user>Lavenia</user>
    <text>Apropos OpenGL and shaders: Is it possible to get GLSL version 130 version on mac? If not, how do I get a newer version?</text>
  </message>
  <message conversation_id="133">
    <ts>2017-08-02T04:39:57.585998</ts>
    <user>Lavenia</user>
    <text>(I can't get Ruckus to run mac)</text>
  </message>
  <message conversation_id="133">
    <ts>2017-08-02T04:40:26.596823</ts>
    <user>Lavenia</user>
    <text>To see which versions of GLSL that were supported I tried different values for the version in: &lt;https://github.com/cbiffle/ruckus/blob/master/viz/preamble.glsl&gt;</text>
  </message>
  <message conversation_id="133">
    <ts>2017-08-02T04:41:01.608911</ts>
    <user>Lavenia</user>
    <text>Version 120 seems to exist - but the preamble uses more recent features.</text>
  </message>
  <message conversation_id="133">
    <ts>2017-08-05T14:37:45.448327</ts>
    <user>Genna</user>
    <text>Got an interesting project which I think could make really good use of context + hole matching a-la `redex`. So, naturally curious if I could leverage or maybe just rip off what redex does. Could people familiar with redex codebase and matching algos it uses maybe give me some pointers or context so I can make sense of `redex-lib/private/(matcher.rkt|match-a-pattern.rkt)`. There's no language to compile, no semantics to analyze, just structurally match parts of the tree as context and a subtree in that context. So redex proper would be a massive overkill. &lt;@Tina&gt; maybe?</text>
  </message>
  <message conversation_id="134">
    <ts>2017-08-05T14:40:57.463510</ts>
    <user>Genna</user>
    <text>I expect the pipeline will be pretty much what redex does: match lhs of reduction rule → reduce, repeat</text>
  </message>
  <message conversation_id="133">
    <ts>2017-08-05T14:42:30.470830</ts>
    <user>Genna</user>
    <text>`reduce: (-&amp;gt; tree reduction-rules tree)`</text>
  </message>
  <message conversation_id="134">
    <ts>2017-08-05T14:53:12.521892</ts>
    <user>Genna</user>
    <text>oh, boy. I don't think I'll make much sense of that code, certainly not without substantial effort :joy:</text>
  </message>
  <message conversation_id="135">
    <ts>2017-08-08T15:57:55.095302</ts>
    <user>Chantelle</user>
    <text>did the installer script for the current snapshot change in any way recently? context: &lt;https://github.com/racket/rackunit/issues/68&gt;</text>
  </message>
  <message conversation_id="135">
    <ts>2017-08-08T15:58:44.122380</ts>
    <user>Latarsha</user>
    <text>when did it change? and did it affect any other travis jobs (such as TR)?</text>
  </message>
  <message conversation_id="135">
    <ts>2017-08-08T15:59:18.140859</ts>
    <user>Chantelle</user>
    <text>I'm guessing it changed yesterday, as it was last night's nightly travis run that broke</text>
  </message>
  <message conversation_id="135">
    <ts>2017-08-08T15:59:35.150190</ts>
    <user>Chantelle</user>
    <text>rerunning the build does not fix the issue, it fails in the same way</text>
  </message>
  <message conversation_id="135">
    <ts>2017-08-08T16:00:04.166613</ts>
    <user>Chantelle</user>
    <text>haven't checked any other repos yet</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T16:27:44.048897</ts>
    <user>Kimbery</user>
    <text>I want to write a `defdata` scribble form for documenting Hackett algebraic datatypes. I’ve peeked at the source for `defstruct`, but it is pretty complicated! Is there any simpler way to define a custom documentation form? If not, is there something that could help me understand how to write one myself?</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T16:28:17.066404</ts>
    <user>Kimbery</user>
    <text>I’ll also want to do the same thing for typeclasses.</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T16:29:10.094432</ts>
    <user>Eun</user>
    <text>lexi.lambda: &lt;https://github.com/rfindler/lindenmayer/blob/master/scribblings/deflsymbol.rkt&gt;</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T16:29:16.097552</ts>
    <user>Eun</user>
    <text>Or defthing.</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T16:32:21.198487</ts>
    <user>Kimbery</user>
    <text>&lt;@Eun&gt; Thanks, that’s helpful. I guess copying all that stuff out of `scribble/private` is currently the only way to do that? :/</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T16:33:48.245228</ts>
    <user>Eun</user>
    <text>I think that's the best way &lt;@Tina&gt; found. ;)</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T16:34:29.266868</ts>
    <user>Tina</user>
    <text>its just work! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T16:34:49.277574</ts>
    <user>Tina</user>
    <text>“just a small matter of programming” is the phrase that comes to mind.</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T16:36:35.335016</ts>
    <user>Kimbery</user>
    <text>I’ll be the first to admit I find the scribble internals a little scary :)</text>
  </message>
  <message conversation_id="136">
    <ts>2017-08-08T17:46:09.349302</ts>
    <user>Kimbery</user>
    <text>&lt;@Tina&gt; what is the purpose of the use of `datum-intern-literal` in `*defls`?</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T19:36:51.467103</ts>
    <user>Kimbery</user>
    <text>typesetting examples in my documentation is making me realize that some Hackett forms are totally broken at the top level :(</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T19:39:25.507122</ts>
    <user>Kimbery</user>
    <text>when evaluating something at the top level with the shape `(begin (define-syntax foo ....) (some-macro ....))`, is it possible to arrange for `foo` to have been bound by the time `some-macro` is expanded?</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T19:41:43.542845</ts>
    <user>Kimbery</user>
    <text>though, actually, it seems like maybe that _does_ normally happen. so I’m not sure why my tangled macro code is seeing otherwise. :(</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T19:58:34.794239</ts>
    <user>Kimbery</user>
    <text>Ah… the real issue is that I’m expanding to something like this:
```
(begin
  (define-for-syntax a ....)
  (define-syntax (b stx)
    .... a ....))
```
…and when `b` is expanded, `a`’s use produces a use-before-definition error for some reason.</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T19:59:49.812164</ts>
    <user>Kimbery</user>
    <text>I have no idea why this is the case, much less how to work around it. &lt;@Vincenzo&gt; or &lt;@Latarsha&gt;, can either of you give me some advice here?</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:00:39.826386</ts>
    <user>Kimbery</user>
    <text>This program reproduces the error:
```
#lang racket

(require syntax/parse/define)

(define-simple-macro (f m:id)
  (begin
    (define-for-syntax x "prop value")
    (define-syntax (m stx) x #'(void))))
```
```
&amp;gt; (f m)
&amp;gt; (m)
x: undefined;
 cannot reference an identifier before its definition
  phase: 1
```</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:03:19.865555</ts>
    <user>Latarsha</user>
    <text>Short answer: the top level is hopeless</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:03:42.871015</ts>
    <user>Kimbery</user>
    <text>I know that, but I would like users to be able to define datatypes in the REPL. :)</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:04:38.884322</ts>
    <user>Latarsha</user>
    <text>I think one of Matthew's posts in my gist on that topic discussed this issue but I'm not certain</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:04:49.886686</ts>
    <user>Kimbery</user>
    <text>lemme dig that gist up, then…</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:05:52.901864</ts>
    <user>Vincenzo</user>
    <text>I think the long answer is to use the `(define-syntaxes (x) (values))` hack - in this case under `begin-for-syntax`</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:06:15.907082</ts>
    <user>Vincenzo</user>
    <text>But only when expanding in a top-level context</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:07:23.923419</ts>
    <user>Kimbery</user>
    <text>I see that hack is alluded to here… &lt;http://lists.racket-lang.org/dev/archive/2009-October/001381.html&gt; …but I don’t really understand what it does.</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:09:27.951103</ts>
    <user>Kimbery</user>
    <text>I guess it’s documented in the reference under “Macro-Introduced Bindings”, but some of this makes my head spin.</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:12:09.988234</ts>
    <user>Kimbery</user>
    <text>Hmm… that hack doesn’t actually work here, though, anyway, unless I’m doing it wrong. This program produces the same error:
```
(define-simple-macro (f m:id)
  (begin
    (define-for-syntax x "prop value")
    (define-syntaxes [x] (values))
    (define-syntax (m stx) x #'(void))))
```</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:13:36.007469</ts>
    <user>Kimbery</user>
    <text>The thing that makes me think this is something different is that the issue is _not_ an unbound identifier error, merely a use-before-definition error.</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:14:06.014169</ts>
    <user>Kimbery</user>
    <text>The empty-`(values)` trick seems to be for a forward declaration, but I don’t need a forward declaration here.</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T20:22:19.122081</ts>
    <user>Kimbery</user>
    <text>I realized I _was_ doing the forward declaration wrong, but doing it right doesn’t change anything, as far as I can tell. :p</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T22:37:26.706983</ts>
    <user>Tina</user>
    <text>&lt;@Kimbery&gt; just looked at that code and I have no idea!</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T22:39:22.727495</ts>
    <user>Tina</user>
    <text>I guess there must an eq or an eq hash somewhere. sorry I’m of no use</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T22:41:48.754209</ts>
    <user>Kimbery</user>
    <text>That’s fine! I removed it and it seems to work okay, so I’m just hoping there isn’t some important reason that I’ll find out about later.</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T22:46:02.798925</ts>
    <user>Tina</user>
    <text>I think it was only performance. This appears to be the commit where it was introduced:</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T22:46:03.799179</ts>
    <user>Tina</user>
    <text>&lt;https://github.com/racket/scribble/commit/f1a593d3a3337478db7381290316fdc0f7e6246f&gt;</text>
  </message>
  <message conversation_id="137">
    <ts>2017-08-08T22:46:27.803456</ts>
    <user>Tina</user>
    <text>Of course, something somewhere may accidentally depend on eq-ness. (One of the reasons I don’t like eq!)</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:11:57.073608</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; I think you're seeing something different than the problem that can be solved with `(define-syntaxes [x] (values))`. Your example only fails for me in DrRacket if I haven't saved the module to a file, which maybe has to do with how DrRacket treats the module; more importantly, I don't see the problem when using the new expander implementation. I think it's yet another bug in the old expander's implementation of `module-&amp;gt;namespace`.</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:13:28.088186</ts>
    <user>Kimbery</user>
    <text>Ah, hmm, perhaps a DrRacket issue then. That means the actual issue in my code is probably something else, and that test case was oversimplified.</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:14:33.098536</ts>
    <user>Kimbery</user>
    <text>Thank you for looking into it. I’ll try digging into it some more.</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:22:14.174683</ts>
    <user>Vincenzo</user>
    <text>My guess is that DrRacket is sometimes masking the bug, and the problem you're seeing is in `module-&amp;gt;namespace`</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:22:48.180020</ts>
    <user>Kimbery</user>
    <text>How would the old expander be relevant here? I’m running a very new version of Racket.</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:25:24.206980</ts>
    <user>Vincenzo</user>
    <text>I guess there are too many "old" expanders now. To me, the current release and main Racket development branch are an old expander (i.e,. the one in C); the new expander (in Racket) is in the racket7 repo</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:27:27.227791</ts>
    <user>Kimbery</user>
    <text>Oh, I see. I am evidently not keeping up with the pace of innovation in the Racket ecosystem. :)</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:28:37.239767</ts>
    <user>Vincenzo</user>
    <text>I'll look into fixing the problem tomorrow</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:29:51.252120</ts>
    <user>Kimbery</user>
    <text>It’s not a big deal if that is, in fact, a red herring. I’ll try and do some more diligent testing to see if it’s actually related to the problem in my real code or not.</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:30:21.257669</ts>
    <user>Vincenzo</user>
    <text>Does your real problem involve top-level evaluation?</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:31:12.266753</ts>
    <user>Kimbery</user>
    <text>It does—I’m trying to get something working in the REPL, mostly so that I can use it with `scribble/example`.</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:34:32.299456</ts>
    <user>Vincenzo</user>
    <text>Likely related, then; it seems clearly to be a bug to fix, in any case</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-08T23:36:09.315714</ts>
    <user>Kimbery</user>
    <text>Alright, well, if you get around to fixing it before I figure out what’s wrong with my code, I can let you know if it was the culprit or not.</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-09T00:35:28.333661</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; I’m seeing behavior I don’t understand, but I am also having trouble reproducing it in a self-contained test case. I’ve inserted some `printf`s in my code, and I’m seeing `(local-expand stx 'expression '())` return `stx` unchanged, where `stx` is some identifier. However, `(identifier-binding stx (syntax-local-context) #t)` returns `#f`. This only happens at the top level; when the same code is encountered while expanding a module, `(identifier-binding stx)` is non-`#f`, and `local-expand` actually expands to something.

I’m very confused by this behavior. Is there some situation in which `local-expand` can pass an identifier through unchanged even though `identifier-binding` seems to claim it is unbound? I would expect an unbound identifier error in that scenario, but I also don’t know how the top level treats `local-expand`.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T01:56:32.123119</ts>
    <user>Kimbery</user>
    <text>Alright, I think I hunted down what was causing that strange error. I think, ultimately, it was user error, though I still don’t understand why `local-expand` was behaving that way. Anyway, I’ve run into a different issue, and this program is even smaller. Unfortunately, this fails to compile:
```
#lang racket

(require (for-syntax (for-syntax racket/base)
                     racket/syntax
                     syntax/transformer)
         syntax/parse/define)

(define-simple-macro (mac id:id)
  #:with val (generate-temporary #'id)
  (begin
    (begin-for-syntax
      (define-syntaxes [val] (values))
      (define val #'"something"))
    (define-syntax id (make-variable-like-transformer val))))

(begin-for-syntax
  (local-expand #'(mac foo) 'top-level '()))
```
This produces this error:
```
foo1: unbound identifier in the transformer environment;
 also, no #%top syntax transformer is bound
  in: foo1
```
I tried the `define-syntaxes` hack, but it doesn’t seem to help here.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T01:59:04.149041</ts>
    <user>Kimbery</user>
    <text>I also tried splitting up the definitions in `mac` into multiple macros to try and delay expansion, but that didn’t accomplish anything. I’m pretty lost about how to make this sort of macro cooperate with the top level.</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-09T09:02:24.962273</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; I don't know if that last example can work at all. The `local-expand` form can't generally deal with a mixture of top-level or module-level evaluation and expansion. For example, I struggle with the question: What would it mean to define `val` when the definition can be discarded after `local-expand`?</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-09T09:03:55.003028</ts>
    <user>Vincenzo</user>
    <text>So, your comment about delaying expansion seems like potentially the right idea, but I'm unclear on what part can be delayed. You might need to expand with a non-empty stop list and recognize sequences the way forms with internal-definition positions often do.</text>
  </message>
  <message conversation_id="138">
    <ts>2017-08-09T13:05:35.628270</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; That makes sense. This is probably an XY problem. I want to expand forms entered into the REPL to see if they end in a definition or expression, so I can print the expression’s type as well as its result. However, I’m not completely sure what the right way to do that is with partial expansion.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T13:06:16.651538</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; the TR repl does that</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T13:06:38.663828</ts>
    <user>Kimbery</user>
    <text>I thought TR might have some prior art. What is its technique?</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T13:07:44.700864</ts>
    <user>Latarsha</user>
    <text>see &lt;https://github.com/racket/typed-racket/blob/81b134cbb92e51073d9354f8095da79a68aae824/typed-racket-lib/typed-racket/core.rkt#L63&gt;</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T13:18:31.059148</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; I’m not entirely sure what I’m looking at</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T13:18:58.074491</ts>
    <user>Latarsha</user>
    <text>You probably have to look at the functions that calls</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T14:10:26.881913</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; does it basically just recursively call `local-expand` with kernel forms as the stop list?</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T14:10:43.890926</ts>
    <user>Kimbery</user>
    <text>I’m following the code as best as I can but TR is big</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T16:15:18.959815</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; &lt;@Vincenzo&gt; Unless I’m overlooking something, given what you said, I think doing partial expansion might still expand too much, since it would still require expanding the form that needs that `define-for-syntax` binding.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T16:15:45.973979</ts>
    <user>Kimbery</user>
    <text>I don’t feel like I understand how expansion at the top level works, though.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T18:18:11.353230</ts>
    <user>Kimbery</user>
    <text>Hmm… even after trying to simplify my macro to play nicer with the top level, I’ve discovered even something as simple as this still doesn’t work:
```
#lang racket

(require (for-syntax racket/syntax
                     syntax/transformer)
         syntax/parse/define)

(define-simple-macro (m1 id:id)
  (begin
    (define-syntax id (make-variable-like-transformer #'"something"))
    (m2 id)))

(define-simple-macro (m2 x)
  #:with result (local-expand #'x 'expression '())
  'result)

(begin-for-syntax
  (println (local-expand #'(m1 foo) 'top-level '())))
```</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T18:18:45.364527</ts>
    <user>Kimbery</user>
    <text>Partial expansion wouldn’t help here, because in order to determine if `(m1 foo)` is an expression, we’d need to expand `(m2 id)`, which fails.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T18:25:09.492004</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; I can't offer a long answer right now, but have you seen `expand-syntax-top-level-with-compile-time-evals` from `syntax/toplevel`?</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T18:26:16.514295</ts>
    <user>Kimbery</user>
    <text>No, I hadn’t! I wasn’t aware of `syntax/toplevel`; that looks helpful.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T18:43:55.849899</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; `syntax/toplevel` looks very close to what I’m looking for, but I can’t figure out how to use it correctly—if I use it at the top level or in the runtime body of a module, it does what I’d expect, but if I call it at phase 1 or during expansion of `#%top-interaction`, `(expand-syntax-top-level-with-compile-time-evals #'(m1 foo))` produces `(#%app m1 foo)` for some reason. It seems like maybe that happens because it treats the syntax object as a phase 1 expression? But I need to be able to expand it as a runtime expression.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-09T18:47:14.910554</ts>
    <user>Kimbery</user>
    <text>But now I need to drive for an hour, so I’ll be away from the keyboard as well.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-10T00:18:20.966003</ts>
    <user>Kimbery</user>
    <text>…hours later, my understanding is that I’d need access to the REPL’s namespace in order to properly use `expand-syntax-top-level-with-compile-time-evals`, but it doesn’t seem like `current-namespace` is set to the right thing during the expansion of `#%top-interaction`, and I’m not sure if there’s any way to get ahold of it.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-10T00:30:36.081639</ts>
    <user>Kimbery</user>
    <text>I suppose I can do something like this:
```
(define-simple-macro (#%top-interaction . form)
  (#%top-interaction*
   (expand-syntax-top-level-with-compile-time-evals/flatten
    (quote-syntax form))))

(define (#%top-interaction* forms)
  (for/last ([form (in-list forms)])
    (syntax-parse form
      #:literal-sets [kernel-literals]
      [(define-syntaxes . _) (void)]
      [_ (eval-syntax form)])))
```
…but I’m not sure if that’s a recommended approach or not!</text>
  </message>
  <message conversation_id="140">
    <ts>2017-08-10T17:07:46.106568</ts>
    <user>Helga</user>
    <text>if I just require a module in the REPL and run a function from it, will the function be JIT compiled?</text>
  </message>
  <message conversation_id="140">
    <ts>2017-08-10T17:09:49.161664</ts>
    <user>Latarsha</user>
    <text>&lt;@Helga&gt; yes</text>
  </message>
  <message conversation_id="140">
    <ts>2017-08-10T17:10:19.175437</ts>
    <user>Helga</user>
    <text>&lt;@Latarsha&gt; thank you, that’s good to know</text>
  </message>
  <message conversation_id="141">
    <ts>2017-08-10T19:56:08.351014</ts>
    <user>Corey</user>
    <text>I think Racket's REPL is more like a "RECEPL": Read Expand Compile Eval Loop.

Plus, Compile is really both (a) compile fully-expanded Racket to bytecode and (b) JIT compile bytecode to machine code.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-10T20:25:48.722823</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; That might work, but I think the best approach would be to do something like `expand-syntax-top-level-with-compile-time-evals`, but using `local-expand` with a non-empty stop list)to replace `expand-syntax-to-top-form`, and using a trampoline to replace `eval`. By "trampoline", I mean that the macro would return `(begin &amp;lt;form-to-eval&amp;gt; (#%top-interaction &amp;lt;rest-to-continue-with&amp;gt;))`. That would be similar to the way that internal-definition forms like `block` work (see `racket/block`), except that you don't have the hassle of an explicit definition context at the top level.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-10T20:33:44.816041</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Hmm, would that work? If I only expand to `(begin &amp;lt;form&amp;gt; (#%top-interaction &amp;lt;more&amp;gt;))`, won’t the use of `#%top-interaction` be expanded _before_ `&amp;lt;form&amp;gt;` is evaluated, ended up at the same place we started?</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-10T20:34:53.829272</ts>
    <user>Vincenzo</user>
    <text>No, `eval` splices `begin` into the top-level sequence, evaluating `&amp;lt;form&amp;gt;` before continuing the expansion of `(#%top-interaction &amp;lt;more&amp;gt;))`</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-10T20:35:58.841219</ts>
    <user>Vincenzo</user>
    <text>I've pushed a repair for the other problem, in case that helps with some part of the puzzle</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-10T20:37:07.853841</ts>
    <user>Kimbery</user>
    <text>I see, that makes sense. I ended up getting something working using the hack I wrote above, but your solution sounds better. I will try switching to something like what you describe at some point.</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-10T20:37:46.860941</ts>
    <user>Kimbery</user>
    <text>Is this a utility that would be useful in `syntax/toplevel`?</text>
  </message>
  <message conversation_id="139">
    <ts>2017-08-10T21:07:22.175818</ts>
    <user>Vincenzo</user>
    <text>It sounds useful in a library – maybe not in `syntax/toplevel`, but maybe cross-referenced with it, so that eval-time and expand-time functionality is not unnecessarily bundled together</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T18:53:03.799433</ts>
    <user>Carolyne</user>
    <text>Hello, is there any way to use the return value from a `yield` statement?</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T18:54:49.821342</ts>
    <user>Carolyne</user>
    <text>I'm trying to make a generator that can change its state when passed values, but doesn't necessarily need to be passed values</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T18:56:16.839796</ts>
    <user>Kimbery</user>
    <text>&lt;@Carolyne&gt; the docs for `yield` show an example of using the return value from a `yield` expression. is there something else you’re asking about? &lt;http://docs.racket-lang.org/reference/Generators.html#%28def._%28%28lib._racket%2Fgenerator..rkt%29._yield%29%29&gt;</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T18:57:50.859907</ts>
    <user>Carolyne</user>
    <text>The problem is it that it demands you use the value</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T18:57:58.861369</ts>
    <user>Kimbery</user>
    <text>ah, you might want to look at `call-with-values`.</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T18:57:59.861599</ts>
    <user>Carolyne</user>
    <text>if you try to NOT use a value, it has arity error</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T18:58:19.865942</ts>
    <user>Kimbery</user>
    <text>the issue here is the same as the error produced by this code:
```
(define x (values 1 2))
```</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T18:59:14.877675</ts>
    <user>Kimbery</user>
    <text>essentially, `yield` returns a varying number of values depend on the number of arguments passed to the generator. `call-with-values` can handle an arbitrary number of values, whereas `define`/`define-values`/`let`/`let-values` only handle a statically-known number of values.</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:00:26.894553</ts>
    <user>Kimbery</user>
    <text>you can, for example, write `(call-with-values (lambda () (yield 2)) list)`, and the values passed to the generator will be collected into a list.</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:01:22.907400</ts>
    <user>Carolyne</user>
    <text>I feel like I need a phd to use this language</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:03:24.933607</ts>
    <user>Kimbery</user>
    <text>there’s a `values-&amp;gt;list` form provided by various utility libraries, perhaps that would be more palatable?</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:03:45.938025</ts>
    <user>Carolyne</user>
    <text>call with values works pretty well</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:03:51.939185</ts>
    <user>Carolyne</user>
    <text>because then I don't have to unpack the list</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:04:28.946699</ts>
    <user>Carolyne</user>
    <text>I can  use a case-lambda with ([() ()'] [(x) ( _do something with the value_)])</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:05:22.957658</ts>
    <user>Carolyne</user>
    <text>I'm probably misusing this language</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:06:01.965694</ts>
    <user>Carolyne</user>
    <text>Too used to procedural languages</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:06:53.976266</ts>
    <user>Carolyne</user>
    <text>I think it would be cool if `yield` returned `void` when nothing is passed to the generator</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:07:49.986921</ts>
    <user>Kimbery</user>
    <text>that would make the zero-args case impossible to distinguish from passing a single argument, which is `#&amp;lt;void&amp;gt;`.</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:08:08.990447</ts>
    <user>Kimbery</user>
    <text>and it also wouldn’t help at all distinguish between other numbers of arguments.</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T19:08:58.000162</ts>
    <user>Kimbery</user>
    <text>I think a more pleasant interface would probably be to just produce a list, not multiple values, but some people find multi-valued return “elegant”. I will not comment on that. :)</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T22:40:51.451698</ts>
    <user>Carolyne</user>
    <text>Does having a let in a named loop have some undesirable interaction over define?</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:07:18.559540</ts>
    <user>Carolyne</user>
    <text>Does the 2nd let cause massive memory growth? If a define was used instead, would it be different?</text>
  </message>
  <message conversation_id="142">
    <ts>2017-08-11T23:09:56.570028</ts>
    <user>Kimbery</user>
    <text>&lt;@Carolyne&gt; after expansion, there is no difference between internal definitions and an equivalent `letrec`. in that code, `loop` is called in tail position, so there is no memory cost to the recursion.</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:12:05.578641</ts>
    <user>Carolyne</user>
    <text>so its like</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:12:16.579359</ts>
    <user>Carolyne</user>
    <text>internally converted to a let* or a letrec</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:12:48.581429</ts>
    <user>Carolyne</user>
    <text>not _converted_ but in the actual implementation it's equivalent</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:13:35.584306</ts>
    <user>Kimbery</user>
    <text>no, it actually _is_ converted; my phrasing was a little misleading. see the grammar for fully-expanded programs: &lt;http://docs.racket-lang.org/reference/syntax-model.html#%28part._fully-expanded%29&gt;</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:14:28.587560</ts>
    <user>Kimbery</user>
    <text>most notably, `define-values` and `define-syntaxes` are only `general-top-level-form`s. neither appears in the grammar for `expr`.</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:15:52.592997</ts>
    <user>Carolyne</user>
    <text>I feel like I need a PHD to use this language</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:18:40.603318</ts>
    <user>Kimbery</user>
    <text>to be fair, if you ask a low-level question, you will get a low-level answer. :)</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:21:03.612362</ts>
    <user>Carolyne</user>
    <text>and I'm thankful for it</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:21:06.612565</ts>
    <user>Carolyne</user>
    <text>I just can't understand it</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:26:22.633055</ts>
    <user>Kimbery</user>
    <text>well, “non-top-level definitions get turned into `letrec` internally” is probably a good enough, simpler explanation.</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:26:38.634005</ts>
    <user>Carolyne</user>
    <text>"A reference to a local binding in a fully expanded program has a scope set that matches its binding identifier exactly. "</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:26:45.634472</ts>
    <user>Carolyne</user>
    <text>this was a line in the thing you linked me</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:27:03.635601</ts>
    <user>Carolyne</user>
    <text>which I believe answers what I asked</text>
  </message>
  <message conversation_id="143">
    <ts>2017-08-11T23:27:21.636658</ts>
    <user>Carolyne</user>
    <text>:sweat_smile:</text>
  </message>
  <message conversation_id="144">
    <ts>2017-08-12T18:11:55.242934</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; To bother you some more… my rendered interactions in my Hackett docs sometimes have stdout duplicated for reasons I don’t understand, such as in the second interaction on this page: &lt;http://docs.racket-lang.org/hackett/guide-quick-start.html&gt;</text>
  </message>
  <message conversation_id="144">
    <ts>2017-08-12T18:12:32.245192</ts>
    <user>Kimbery</user>
    <text>I cannot reproduce that with `racket/sandbox` directly, but it happens consistently (and, as far as I can tell, deterministically) with `scribble/example`. Do you have any idea why that might be happening?</text>
  </message>
  <message conversation_id="144">
    <ts>2017-08-12T18:12:45.246049</ts>
    <user>Kimbery</user>
    <text>The weird thing is that it only happens for some examples, but they always appear to be the same ones.</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-12T22:22:43.139314</ts>
    <user>Corey</user>
    <text>I seem to be hitting an exception on the package web site?

When I visit &lt;https://pkgd.racket-lang.org/pkgn/search?q=trace&gt; I get:

```
Exception
The application raised an exception with the message:

get-implied-docs: arity mismatch;
 the expected number of arguments does not match the given number
  expected: 1
  given: 0
Stack trace:

for-loop at:
  line 628, column 4, in file /home/pkgserver/racket-pkg-website/src/site.rkt
build-pkg-rows/num-todos at:
  line 621, column 0, in file /home/pkgserver/racket-pkg-website/src/site.rkt
package-summary-table at:
  line 597, column 0, in file /home/pkgserver/racket-pkg-website/src/site.rkt
&amp;lt;unknown procedure&amp;gt; at:
  line 127, column 35, in file /home/pkgserver/racket-pkg-website/src/site.rkt
&amp;lt;unknown procedure&amp;gt; at:
  line 340, column 33, in file /home/pkgserver/racket/collects/racket/contract/private/arrow-higher-order.rkt
```</text>
  </message>
  <message conversation_id="144">
    <ts>2017-08-13T11:38:48.768796</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; When you have something like `(eval:check (+ 1 2) 3)`, the `(+ 1 2)` part is evaluated by itself and rendered, with the side-effect of the `: Integer` output that you expect. Then, `3` is evaluated, so its result can be compared to the result of (+ 1 2)`; in the process of evaluating `3`, another ": Integer" is printed, but that printout stays in the output buffer until a later rendering reads from it.</text>
  </message>
  <message conversation_id="144">
    <ts>2017-08-13T11:44:41.795524</ts>
    <user>Vincenzo</user>
    <text>Possible changes to `eval:check` include (1) waiting until after the second expression is evaluated to gather output; (2) discarding any output from the second expression. Either of those options would be less confusing than the current behavior, and I lean toward option (1), but that would mean you need to wrap expected-result expressions in some way so that they don't produce output.</text>
  </message>
  <message conversation_id="144">
    <ts>2017-08-13T12:56:19.133205</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Oh, of course. I should have realize what was going on there. Thanks.</text>
  </message>
  <message conversation_id="144">
    <ts>2017-08-13T20:25:34.280618</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Finally got around to implementing your `local-expand` + trampolining solution, and it looks like it works well. Thanks for your help. :)</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:41:17.639557</ts>
    <user>Rosalee</user>
    <text>Is there any way to prevent `raco pkg` from installing a package? Like, (pre-)install-collection for an `info.rkt` files, but can also fail.</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:42:04.665371</ts>
    <user>Rosalee</user>
    <text>The best I can think of is to have my package’s (pre)-install-collection function throw an error. But the collection will still end up installed, even after the error is thrown.</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:42:25.677250</ts>
    <user>Chantelle</user>
    <text>There's a way to turn off raco setup when installing, is that close to what you want?</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:42:49.690363</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; Can I do it programatically from within a package?</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:43:08.700595</ts>
    <user>Rosalee</user>
    <text>Like, I made package A. But package A requires some system dependency not provided.</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:43:36.715488</ts>
    <user>Rosalee</user>
    <text>I have code that can check to see if the dependency is met, but if it isn’t met, I can’t really fix it.</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:43:46.721233</ts>
    <user>Rosalee</user>
    <text>As such, I just want to bail, and don’t install the package.</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:44:00.728400</ts>
    <user>Rosalee</user>
    <text>(Rather than letting raco finish installing a broken package.)</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:44:23.741181</ts>
    <user>Chantelle</user>
    <text>Ah yeah, no idea how to do that</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:44:36.748768</ts>
    <user>Chantelle</user>
    <text>That seems like a reasonable thing to want to do though</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:45:11.768882</ts>
    <user>Rosalee</user>
    <text>Sad day. Well if it’s not possible, I’ll see if its possible to add it.</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:47:25.844888</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; That doesn't sound like a good idea. There can be all sorts of reasons to install a package that can't currently run, including installing to build documentation or a distribution. It's much better to have the library report a run-time error for unavailable functionality.</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:48:56.894395</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Ya, that makes sense, except for when the dep you need is specifically for building. Although I guess in that case an error is just fine.</text>
  </message>
  <message conversation_id="145">
    <ts>2017-08-14T14:49:00.896664</ts>
    <user>Rosalee</user>
    <text>Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T15:45:05.652040</ts>
    <user>Georgeanna</user>
    <text>&lt;@Corey&gt; seems back up/fixed</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:01:51.177164</ts>
    <user>Georgeanna</user>
    <text>I’m trying to clean up my package status… it is listing as having test errors. If I run tests in racket-mode, I get zero output. If I run with `raco test` I get:

```
% raco test --process -t main.rkt 
raco test: (submod "main.rkt" test)
3 14 main.rkt
3/14 test failures
```

which is entirely not helpful… the package status shows an error, but why am I not getting output with either method? Am I forgetting a flag?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:05:59.305851</ts>
    <user>Corey</user>
    <text>&lt;@Georgeanna&gt; These? &lt;http://pkg-build.racket-lang.org/server/built/test-fail/check-sexp-equal.txt&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:07:46.362616</ts>
    <user>Georgeanna</user>
    <text>yes… I’m starting to think that we’re running different things tho… I also have NO IDEA why `raco test` thinks I have 14 tests</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:08:29.385043</ts>
    <user>Georgeanna</user>
    <text>If I add a `(displayln 'done)` at the end of my test module, it prints and then I get the “test failures” line… I have no idea what’s running at this point</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:09:02.400763</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; which package are you looking at?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:09:21.409843</ts>
    <user>Kimbery</user>
    <text>fwiw, the “_n_ test failures” line is printed by `raco test`</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:09:30.414158</ts>
    <user>Georgeanna</user>
    <text>I did test coverage in drracket and I only have 2 expressions not covered… and exception and a failure case</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:09:46.422653</ts>
    <user>Georgeanna</user>
    <text>but I only have 3 calls to `check-exn-info?`</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:09:53.426817</ts>
    <user>Corey</user>
    <text>&lt;https://github.com/zenspider/check-sexp-equal/blob/master/main.rkt&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:10:36.448460</ts>
    <user>Georgeanna</user>
    <text>nope… the sha’s match… we’re running the same thing</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:10:53.456036</ts>
    <user>Corey</user>
    <text>&lt;@Georgeanna&gt; Is that the source?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:10:58.458151</ts>
    <user>Georgeanna</user>
    <text>yup!</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:11:10.464297</ts>
    <user>Latarsha</user>
    <text>it's probably all the different calls to `check-equal?` in loops that adds up to 14</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:11:24.471365</ts>
    <user>Georgeanna</user>
    <text>and I only have that displayln diff locally</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:12:48.513841</ts>
    <user>Kimbery</user>
    <text>one of the big flaws of rackunit, imo, is that there is basically no possibility for reuse: you generally cannot define a check in terms of another one without things leaking through</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:12:49.514130</ts>
    <user>Georgeanna</user>
    <text>haha</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:13:33.536537</ts>
    <user>Georgeanna</user>
    <text>&lt;@Kimbery&gt; agreed. I do a number of `define-simple-check` or whatever it is… but I don’t pay much attention to the numbers… but in this case, since I’m testing a test function… I’m a bit confused.</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:13:52.545978</ts>
    <user>Georgeanna</user>
    <text>still… I don’t know how to reproduce the error that the pkg system is reporting</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:14:28.563551</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; ^^^ composable assertions would be really really useful</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:14:55.577271</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; by my reasoning, the number should be 7, not 14</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:16:49.633908</ts>
    <user>Georgeanna</user>
    <text>it’s also running my scribble file? I’m not doing that…</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:17:34.656570</ts>
    <user>Latarsha</user>
    <text>the pkg build server runs all your files</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:17:39.659219</ts>
    <user>Georgeanna</user>
    <text>does anyone know what the flags are?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:18:41.689966</ts>
    <user>Latarsha</user>
    <text>see &lt;http://pkg-build.racket-lang.org/about.html&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:20:32.746757</ts>
    <user>Georgeanna</user>
    <text>`--drdr` did it! thanks</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:21:00.761193</ts>
    <user>Georgeanna</user>
    <text>`--drdr Configure defaults to imitate DrDr`… wtf does that mean?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:21:21.771765</ts>
    <user>Kimbery</user>
    <text>drdr is the Racket CI server &lt;http://drdr.racket-lang.org&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:21:53.788097</ts>
    <user>Georgeanna</user>
    <text>wait. no. oops… that didn’t do it. that was the stderr output from the scribble doco checker I stole from somewhere</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:22:33.808268</ts>
    <user>Kimbery</user>
    <text>what command are you running?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:22:57.820740</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; looks like the internal links on that page are broken. Try “Dealing with Test Failures”… should I file a bug?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:23:09.826929</ts>
    <user>Georgeanna</user>
    <text>&lt;@Kimbery&gt; `raco test --drdr  info.rkt main.rkt check-sexp-equal.scrbl`</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:23:22.833808</ts>
    <user>Kimbery</user>
    <text>try `raco test --drdr -p check-sexp-equal`</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:24:20.861508</ts>
    <user>Georgeanna</user>
    <text>hrm:

```
% raco test --drdr -p check-sexp-equal
raco test: 0 "/Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/check-sexp-equal.scrbl"
raco test: 1 "/Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/info.rkt"
raco test: 2 (submod "/Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/main.rkt" test)
   0 /Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/check-sexp-equal.scrbl
   0 /Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/info.rkt
3 14 /Users/ryan/Library/Racket/6.9/pkgs/../../../../Work/git/zenspider/check-sexp-equal/main.rkt
3/14 test failures
```</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:25:08.887126</ts>
    <user>Georgeanna</user>
    <text>I don’t want to port minitest to racket… but I’m close. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:25:40.904833</ts>
    <user>Latarsha</user>
    <text>just some `name` attributes that should be `id` attributes -- I'll fix it</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:26:22.926824</ts>
    <user>Kimbery</user>
    <text>I think `raco test` is okay… it’s mostly agnostic to testing lib. `rackunit` is eh.</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:27:08.949817</ts>
    <user>Georgeanna</user>
    <text>so it COULD work with another testing library? good to know…</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:27:23.957618</ts>
    <user>Kimbery</user>
    <text>`raco test` just runs your files, basically</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:28:02.977553</ts>
    <user>Georgeanna</user>
    <text>can you expand on what you’re “eh” about?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:28:13.982961</ts>
    <user>Kimbery</user>
    <text>not atm, I’m in a meeting :p</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:28:18.985851</ts>
    <user>Georgeanna</user>
    <text>heh. kk. later</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:28:39.996590</ts>
    <user>Kimbery</user>
    <text>but if you’re interested in writing another framework, you can report test results to `raco test` with `test-log!` &lt;http://docs.racket-lang.org/rackunit/Testing_Utilities.html#%28def._%28%28lib._rackunit%2Flog..rkt%29._test-log%21%29%29&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:28:49.001981</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; that's now fixed</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:29:01.008370</ts>
    <user>Kimbery</user>
    <text>it’s documented in the rackunit manual but it’s actually not in the rackunit package</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:29:15.015406</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; cool! thanks!</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:29:19.017005</ts>
    <user>Latarsha</user>
    <text>although that page won't be fixed until 6.11</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:29:27.021574</ts>
    <user>Georgeanna</user>
    <text>sure</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:29:30.022742</ts>
    <user>Latarsha</user>
    <text>but they're just internal links so it's not so bad</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:30:38.058976</ts>
    <user>Georgeanna</user>
    <text>“Adds a test result to the running log. If result is false, then the test is considered a failure.” … that’s… pretty opaque</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:31:10.075463</ts>
    <user>Kimbery</user>
    <text>it basically just means call `(test-log! #t)` if the test passes and `(test-log! #f)` if it fails</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:31:25.082966</ts>
    <user>Kimbery</user>
    <text>`raco test` uses those calls to display the “n/m test failures” message</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:34:03.164103</ts>
    <user>Georgeanna</user>
    <text>OK. so I’m still responsible for my own failure/error reporting… gotcha</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:34:19.172397</ts>
    <user>Georgeanna</user>
    <text>grr… I need to STOP thinking about porting minitest. no no no … I don’t need another project</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:41:32.389193</ts>
    <user>Georgeanna</user>
    <text>looks like i should poke at `current-check-around` to make inner failures opaque to the test runner</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T16:45:22.502733</ts>
    <user>Georgeanna</user>
    <text>heh. I *DO* use that already… so no…</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:11:57.282900</ts>
    <user>Georgeanna</user>
    <text>ok…. so `check-log!` is called inside of functions like `fail-check` and the like… THEN they raise exceptions for things like `current-check-around` to deal with… which doesn’t make much sense to me. I should be allowed to use `parameterize` to completely override how a test gets run/accounted-for.</text>
  </message>
  <message conversation_id="147">
    <ts>2017-08-14T17:13:06.313442</ts>
    <user>Kimbery</user>
    <text>that sounds like probably the wrong thing, yes</text>
  </message>
  <message conversation_id="147">
    <ts>2017-08-14T17:13:14.317285</ts>
    <user>Kimbery</user>
    <text>I imagine you could submit a PR to fix that and it would be accepted</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:14:11.342838</ts>
    <user>Georgeanna</user>
    <text>it’s a bit of a tangle… I need to wrap my head around it but at least I have a simple test case to reproduce it</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:15:25.377167</ts>
    <user>Georgeanna</user>
    <text>or … parameterize `test-log!` ?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:15:48.387713</ts>
    <user>Georgeanna</user>
    <text>that seems easier for sure… but… maybe less correct?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:16:20.402202</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; ^^^ opinions?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:33:53.861870</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; oh jeez I missed all of this conversation and it's so useful. Will respond when back at desk</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:37:30.952729</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; re composable assertions: yes! those would be very useful. so useful, that I've been working on a package that provides them: &lt;http://docs.racket-lang.org/expect/&gt;</text>
  </message>
  <message conversation_id="148">
    <ts>2017-08-14T17:38:08.968418</ts>
    <user>Chantelle</user>
    <text>they're not yet ready for prime time, but if you'd like to help it'd be very appreciated. the github repo has a lot of open issues documenting stuff I plan to add: &lt;https://github.com/jackfirth/racket-expect/issues&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:39:38.005724</ts>
    <user>Chantelle</user>
    <text>as for the `test-log!` weirdness: yes, ideally, `test-log!` would only occur in `current-check-around`. That's something I'd like to fix in rackunit but it might break things in strange places. I'm particularly concerned about how that interacts with the `test-case` / `test-suite` macros, since they parameterize `current-check-around`. Personally I think that in a test case or suite the entire case or suite should count as a single test.</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:40:08.017458</ts>
    <user>Chantelle</user>
    <text>oh, and I've been looking at minitest's features for inspiration on perf testing too so thanks :)</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:53:16.327742</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; &lt;https://github.com/racket/rackunit/issues/70&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:55:33.380372</ts>
    <user>Georgeanna</user>
    <text>saw that! cool thanks!</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:55:46.385373</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; what’s your opinion on parameterizing test-log! ?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:56:55.411677</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; it's provided as a simple low-level workaround to unblock people who need to extend rackunit or reflect over checks without all their legacy weirdness breaking them</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:57:35.426786</ts>
    <user>Chantelle</user>
    <text>so if it works feel no shame in using it, but if there's no other option that's probably because something isn't designed well and a bug to fix that would be welcome</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:57:59.436033</ts>
    <user>Georgeanna</user>
    <text>??? I’m not tracking… are you saying it already IS parameterized?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:58:22.444553</ts>
    <user>Chantelle</user>
    <text>oh! yeah I added a parameter to disable the log in the most recent racket release</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:58:34.449405</ts>
    <user>Chantelle</user>
    <text>`test-log-enabled?`</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:58:43.452734</ts>
    <user>Chantelle</user>
    <text>&lt;http://docs.racket-lang.org/rackunit/Testing_Utilities.html?q=test-log!#%28def._%28%28lib._rackunit%2Flog..rkt%29._test-log-enabled~3f%29%29&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:59:06.461487</ts>
    <user>Georgeanna</user>
    <text>oh shit… I missed the last release. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T17:59:17.465778</ts>
    <user>Georgeanna</user>
    <text>this should fix me right up then…</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T18:01:32.519170</ts>
    <user>Chantelle</user>
    <text>glad to help :)</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:36:28.172341</ts>
    <user>Chantelle</user>
    <text>Are `#:transparent` structs supposed to be allowed as place messages? The docs for places in general say "To a first approximation, place channels support only immutable, transparent values as messages" but the docs for `place-message-allowed?` say "pairs, lists, vectors, and immutable prefab structures containing message-allowed values, where a mutable vector is automatically replaced by an immutable vector" are allowed and make no mention of transparent structures. Attempting to send a transparent struct raises an error.</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:40:18.227063</ts>
    <user>Kimbery</user>
    <text>My guess is that the meaning of “transparent” there is not intended to mean “transparent structure”, but I think the wording could be improved.</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:40:58.236377</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; `#:transparent` structs are not meant to be allowed as place messages</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:41:30.243935</ts>
    <user>Chantelle</user>
    <text>ah, a doc improvement would be welcome then</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:54:34.431305</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; are there differences in the failure message output in the new release?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:55:02.438338</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; slight differences, yes</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:55:05.438895</ts>
    <user>Chantelle</user>
    <text>why do you ask?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:55:47.449195</ts>
    <user>Georgeanna</user>
    <text>I have new failures in my test suite… just making sure. I’d rather update my expected to match the latest version rather than trying to find some way to normalize it at this point</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:57:03.467043</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; you might be interested in &lt;https://github.com/racket/rackunit/pull/59&gt; which attempts to add some helpers for testing custom checks without everything breaking every time the message format changes slightly</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:57:17.470369</ts>
    <user>Georgeanna</user>
    <text>cool. thanks</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:58:38.489397</ts>
    <user>Georgeanna</user>
    <text>that’s slated for 6.11 I assume?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T19:59:22.500034</ts>
    <user>Chantelle</user>
    <text>ya, although I haven't gotten around to resolving the API issues yet</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:09:13.636042</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; is pretty-info (or accessors) exported? seems like not</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:09:25.638540</ts>
    <user>Georgeanna</user>
    <text>I’m failing because (pretty-info x) vs x</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:11:03.659956</ts>
    <user>Chantelle</user>
    <text>It's not. `pretty-info`, `verbose-info` and `location-info` were created when refactoring some internal rackunit code implementing `run-tests`. If you need them (or your test is failing because you're calling `check-equal?` on the info struct) they can be exported.</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:11:25.664762</ts>
    <user>Chantelle</user>
    <text>you could also use `make-check-expected` / `make-check-actual`, since those add `pretty-info` under the hood</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:11:35.666814</ts>
    <user>Georgeanna</user>
    <text>I just required `rackunit/private/check-info` and am back on track</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:12:20.676454</ts>
    <user>Chantelle</user>
    <text>that works, although I think using `make-check-expected` or `make-check-actual` might also work without you needing to require any private modules</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:13:50.695296</ts>
    <user>Georgeanna</user>
    <text>one thing at a time :slightly_smiling_face:</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:22:50.806911</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; hrm… maybe I’ll need to do that sooner rather than later:

```
(exn-message (with-handlers ([exn:test:check? identity])
               (parameterize ([current-check-around (λ (f) (f))])
                 (check-equal? 1 2 "a message"))))
```</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:24:39.829154</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; do what?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:25:50.843924</ts>
    <user>Georgeanna</user>
    <text>hrm… actually I’m confused by 2 things… 1) the above snippet doesn’t result in `"a message"`</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:26:11.848275</ts>
    <user>Georgeanna</user>
    <text>2) `make-check-expected` and `make-check-actual` wrap up in structs that can’t be compared</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:26:29.852047</ts>
    <user>Georgeanna</user>
    <text>```
(check-equal? (make-check-expected 42) (make-check-actual 42))
```</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:27:58.869513</ts>
    <user>Georgeanna</user>
    <text>totally open to changing my code around to fit a better strategy…</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:28:57.880955</ts>
    <user>Chantelle</user>
    <text>The message you pass to a check is stored as a check info with key `'message` unfortunately, it doesn't control the message of the exception directly</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:29:21.885655</ts>
    <user>Chantelle</user>
    <text>(personally I think the message argument just shouldn't be used)</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:30:08.894932</ts>
    <user>Georgeanna</user>
    <text>hrm… ok. It used to be “Check failure” ? … those are two different messages tho?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:31:35.912775</ts>
    <user>Chantelle</user>
    <text>Yeah there's two. The default message used to be "check failure" but now it's nothing. Unless the check passes a string to fail-check there won't be a message on its own line. The message argument at check use sites always added an info, it's unrelated to the "Check failure" line</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:32:02.918034</ts>
    <user>Georgeanna</user>
    <text>yeah. I was testing that because my previous version relayed everything via fail-check</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:32:12.920021</ts>
    <user>Georgeanna</user>
    <text>and now uses check-info</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:32:59.928910</ts>
    <user>Chantelle</user>
    <text>fail-check is the preferred way for a textual message for the user, info is best for structured values</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:35:16.954882</ts>
    <user>Georgeanna</user>
    <text>well… this is both :slightly_smiling_face:</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:35:31.957783</ts>
    <user>Georgeanna</user>
    <text>ok. I think I have things fixed in a way I like…</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:35:44.960182</ts>
    <user>Georgeanna</user>
    <text>do I need to bump the package system or will it pick it up automatically?</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:36:33.969280</ts>
    <user>Chantelle</user>
    <text>I don't think you need to bump it, the catalog points to your git head and the build server will build the latest every night</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:36:56.973623</ts>
    <user>Georgeanna</user>
    <text>I updated the description anyways…. maybe that’ll trigger something</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:37:30.980070</ts>
    <user>Georgeanna</user>
    <text>and apparently I never released benchmark-ips… I should get on that</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:40:44.017462</ts>
    <user>Georgeanna</user>
    <text>&lt;https://pkgd.racket-lang.org/pkgn/package/benchmark-ips&gt;</text>
  </message>
  <message conversation_id="146">
    <ts>2017-08-14T20:41:35.027185</ts>
    <user>Georgeanna</user>
    <text>I love this package… use it all the time to compare approaches</text>
  </message>
  <message conversation_id="149">
    <ts>2017-08-15T11:35:44.000178</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; Do you have a final opinion on meta checks? I'd like to get that resolved so your fix for the check-exn message can be tested.</text>
  </message>
  <message conversation_id="150">
    <ts>2017-08-15T19:51:57.000033</ts>
    <user>Rosalee</user>
    <text>Is there any way to alter the controls of the slideshow viewer?</text>
  </message>
  <message conversation_id="150">
    <ts>2017-08-15T19:52:16.000114</ts>
    <user>Rosalee</user>
    <text>I need to make it use up/down, rather than left/right.</text>
  </message>
  <message conversation_id="150">
    <ts>2017-08-15T20:05:58.000138</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; There's not a straightforward way to do that. We could just add up &amp;amp; down as aliases for left &amp;amp; right, though.</text>
  </message>
  <message conversation_id="150">
    <ts>2017-08-15T20:13:05.000062</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; that would be super helpful</text>
  </message>
  <message conversation_id="150">
    <ts>2017-08-15T20:13:13.000142</ts>
    <user>Rosalee</user>
    <text>Otherwise I’ll see if I can just remap it in os x.</text>
  </message>
  <message conversation_id="150">
    <ts>2017-08-15T20:24:50.000082</ts>
    <user>Vincenzo</user>
    <text>Done</text>
  </message>
  <message conversation_id="150">
    <ts>2017-08-15T20:43:54.000002</ts>
    <user>Rosalee</user>
    <text>Cool, thanks.</text>
  </message>
  <message conversation_id="150">
    <ts>2017-08-16T17:10:50.000424</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; running the handin server for our course causes racket to segfault consistently; this didn't happen previously (ie a year ago)</text>
  </message>
  <message conversation_id="150">
    <ts>2017-08-16T17:11:00.000507</ts>
    <user>Latarsha</user>
    <text>this happens both with 6.6 and 6.10</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:11:05.000198</ts>
    <user>Latarsha</user>
    <text>stacktrace looks like:</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:11:09.000130</ts>
    <user>Latarsha</user>
    <text>```
#2  0x00000000006c2019 in fault_handler ()                                                                                [0/1442]
#3  0x00007ffff76c85e0 in &amp;lt;signal handler called&amp;gt; () at /lib64/libpthread.so.0
#4  0x00007ffff738601f in __rawmemchr_sse2 () at /lib64/libc.so.6
#5  0x00007ffff736ffa2 in _IO_str_init_static_internal () at /lib64/libc.so.6
#6  0x00007ffff735f1b7 in __isoc99_vsscanf () at /lib64/libc.so.6
#7  0x00007ffff735f157 in __isoc99_sscanf () at /lib64/libc.so.6
#8  0x00007fffe62a7862 in epoxy_glx_version () at /lib64/libepoxy.so.0
#9  0x00007fffe7754757 in gdk_x11_screen_init_gl () at /lib64/libgdk-3.so.0
#10 0x00007fffe7754cd8 in _gdk_x11_screen_update_visuals_for_gl () at /lib64/libgdk-3.so.0
#11 0x00007fffe775da95 in _gdk_x11_screen_init_visuals () at /lib64/libgdk-3.so.0
#12 0x00007fffe775a910 in _gdk_x11_screen_new () at /lib64/libgdk-3.so.0
#13 0x00007fffe774a278 in _gdk_x11_display_open () at /lib64/libgdk-3.so.0
#14 0x00007fffe771e389 in gdk_display_manager_open_display () at /lib64/libgdk-3.so.0
#15 0x00007fffe54af0da in gtk_init_check () at /lib64/libgtk-3.so.0
#16 0x00000000006be858 in ffi_call_unix64 ()
#17 0x00000000006be21f in ffi_call ()
```</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:12:05.000028</ts>
    <user>Vincenzo</user>
    <text>Does running just `gracket` crash in the same way?</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:12:12.000256</ts>
    <user>Latarsha</user>
    <text>it goes away with `PLT_GTK2=1`, which I just tested</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:12:36.000227</ts>
    <user>Latarsha</user>
    <text>and yes, `gracket` crashes the same way</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:12:59.000155</ts>
    <user>Latarsha</user>
    <text>I don't think `PLT_GTK2` was needed a year ago (although that may have been an older Racket)</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:13:06.000018</ts>
    <user>Latarsha</user>
    <text>(older than 6.6, that is)</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:13:56.000509</ts>
    <user>Vincenzo</user>
    <text>And other Gtk+ 3 apps work? I ask because the crash appears to be in `gtk_init_check`.</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:16:12.000066</ts>
    <user>Latarsha</user>
    <text>no, they don't -- same segfault with xvfb</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:16:21.000099</ts>
    <user>Latarsha</user>
    <text>so probably not racket's fault</text>
  </message>
  <message conversation_id="151">
    <ts>2017-08-16T17:16:32.000176</ts>
    <user>Latarsha</user>
    <text>I will report this to other people, then -- thanks</text>
  </message>
  <message conversation_id="152">
    <ts>2017-08-17T11:11:30.000121</ts>
    <user>Jacob</user>
    <text>A DrRacket question is there a way to mark certain positions in an open file so I can jump back to them from anywhere else in the file? For example, when working on a large file, I often need to navigate to a different part to read code there while I'm actively working on a different part. It would be nice to be able to mark the active site and jump back to it after rather than tediously scrolling back and searching around for a few moments to reorient myself.

I looked around and didn't see such a feature. It probably doesn't exist but thought I'd ask and hope I'm lucky.</text>
  </message>
  <message conversation_id="152">
    <ts>2017-08-17T14:17:12.000665</ts>
    <user>Corey</user>
    <text>&lt;@Jacob&gt; If you have Emacs-style keybindings enabled in DrRacket, does `C-x C-x` work (like `exchange-point-and-mark` in Emacs)?</text>
  </message>
  <message conversation_id="152">
    <ts>2017-08-17T14:49:46.000229</ts>
    <user>Jacob</user>
    <text>&lt;@Corey&gt; that keybinding doesn't seem to work, I also looked at the list of active keybindings but don't see it listed on there either.</text>
  </message>
  <message conversation_id="152">
    <ts>2017-08-17T14:50:20.000153</ts>
    <user>Jacob</user>
    <text>I might switch back to Emacs, I hadn't realized there was such a thing as `exchange-point-and-mark`</text>
  </message>
  <message conversation_id="152">
    <ts>2017-08-17T15:24:56.000492</ts>
    <user>Corey</user>
    <text>I just upgraded Racket for something, jumping from 6.7 to 6.10.
Suddenly the logger is quite noisy with e.g.:

```
[warning] building projection of contract #&amp;lt;flat-contract: xexpr/c&amp;gt; for
  (build-context . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/prop.rkt&amp;gt; 319 0 10714 195))
  (get/build-projection . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/guts.rkt&amp;gt; 812 0 28280 301))
  (.../more-scheme.rkt:261:28 . #f)
  (mk-call . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-val-first.rkt&amp;gt; 400 5 17828 2114))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-val-first.rkt&amp;gt; 397 3 17564 3019))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&amp;gt; 342 33 18779 125))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&amp;gt; 342 33 18779 125))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&amp;gt; 342 33 18779 125))
  (#f . #(struct:srcloc #&amp;lt;path:/Users/greg/src/deals/web/main.rkt&amp;gt; 725 0 28187 355))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&amp;gt; 346 33 19012 147))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&amp;gt; 342 33 18779 125))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&amp;gt; 342 33 18779 125))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/share/pkgs/web-server-lib/web-server/dispatchers/dispatch-servlets.rkt&amp;gt; 63 2 2495 1974))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&amp;gt; 342 33 18779 125))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&amp;gt; 342 33 18779 125))
  (select-handler/no-breaks . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/private/more-scheme.rkt&amp;gt; 163 2 5402 511))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/collects/racket/contract/private/arrow-higher-order.rkt&amp;gt; 342 33 18779 125))
  (#f . #(struct:srcloc #&amp;lt;path:/Applications/Racket_v6.10/share/pkgs/web-server-lib/web-server/private/dispatch-server-with-connect-unit.rkt&amp;gt; 131 8 5179 445))
```

1. What is the warning trying to tell me, and how can I fix it?

2. Note: This seems to be using `log-warning`. It would be nicer if it defined its own logger e.g. `contract` and used `log-contract-warning`?  (That way, it could be silenced without silencing all other `log-warning`s?)</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T15:37:05.000393</ts>
    <user>Tina</user>
    <text>that was my passive-aggressive attempt to get people to update their contract combinators to use the more recent interface</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T15:37:21.000337</ts>
    <user>Tina</user>
    <text>I should move it over to `log-contract-warning`</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T15:39:55.000204</ts>
    <user>Tina</user>
    <text>oh, wait: it seems to already be that way?</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T15:41:20.000533</ts>
    <user>Tina</user>
    <text>```
      (log-racket/contract-info
       "no late-neg-projection passed to ~s~a"
       proc-name
       (build-context))
```</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T15:41:35.000351</ts>
    <user>Tina</user>
    <text>in racket/contract/private/prop, line 298?</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T15:41:38.000594</ts>
    <user>Tina</user>
    <text>(in 6.10)</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:01:37.000169</ts>
    <user>Corey</user>
    <text>&lt;@Tina&gt; Just to confirm, the `xexpr/c` contract would need to change (not something in my code using it)?</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:02:01.000378</ts>
    <user>Tina</user>
    <text>Right</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:02:24.000047</ts>
    <user>Tina</user>
    <text>(well, the logger isn’t using `log-warning` as far as I can tell, so maybe something needs to change elsewhere too?)</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:02:49.000628</ts>
    <user>Corey</user>
    <text>I'll see if I can figure out part of it.</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:03:59.000029</ts>
    <user>Corey</user>
    <text>(I recently added a `*Racket Logger*` mode/window to racket-mode, and want to make sure it's not some issue on that end (although atm I don't see how it could be; just make sure); and will share whatever I learn)</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:10:34.000591</ts>
    <user>Tina</user>
    <text>Thanks!!</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:11:30.000522</ts>
    <user>Tina</user>
    <text>oh, and I see that was the wrong log call. This is the right one, I think?</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:11:32.000372</ts>
    <user>Tina</user>
    <text>```
     (log-racket/contract-warning
      "building projection of contract ~s for~a"
      ctc
      (build-context))
```</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:11:44.000029</ts>
    <user>Tina</user>
    <text>line 816 of racket/contract/private/gut</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:11:44.000373</ts>
    <user>Tina</user>
    <text>s</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:20:31.000137</ts>
    <user>Corey</user>
    <text>I think what's confusing me is that `(define-logger foo)` normally prepends the text `foo:` -- the logger name -- to the message.</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:20:40.000316</ts>
    <user>Corey</user>
    <text>But I don't see `"racket/contract:"` starting the message.</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:20:48.000522</ts>
    <user>Corey</user>
    <text>So I assumed it was the generic logger.</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:23:33.000171</ts>
    <user>Corey</user>
    <text>It's _not_ some silly bug wrt the `/` in the logger name. This works:
```
#lang racket/base

(define-logger foo)
(define-logger foo/bar)

(log-foo-fatal "hi I'm foo")
(log-foo/bar-fatal "hi I'm foo/bar")

;; Logger output
;;  [  fatal] foo: hi I'm foo
;;  [  fatal] foo/bar: hi I'm foo/bar
```</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:23:53.000060</ts>
    <user>Corey</user>
    <text>Huh.</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:40:18.000293</ts>
    <user>Corey</user>
    <text>OK so
1. I'm totally stumped why `"racket/contract:"` doesn't start the log output and identify the logger. It would be good to figure that out.
2. Meanwhile, knowing that the logger name is `racket/contract`, I can crank the log receiver up from `warning` to `fatal` for that logger, to silence that output (in situations where that information isn't relevant).</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:40:54.000195</ts>
    <user>Corey</user>
    <text>&lt;@Tina&gt; thanks!</text>
  </message>
  <message conversation_id="154">
    <ts>2017-08-17T16:41:56.000307</ts>
    <user>Tina</user>
    <text>Should the topic be relevant here?</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T16:58:11.000322</ts>
    <user>Corey</user>
    <text>Sorry, what? Do you mean should the logger topic (a.k.a. logger name) be relevant in some situations, or, do you mean our discussion here on Slack :slightly_smiling_face:, or something else?</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-17T17:17:18.000431</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; This seems relevant to your interests: &lt;https://internals.rust-lang.org/t/pre-rfc-support-declaring-varargs-functions-and-processing-a-va-list/5772&gt;</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-17T17:18:55.000220</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; Oh cool, thanks.</text>
  </message>
  <message conversation_id="156">
    <ts>2017-08-17T17:19:27.000065</ts>
    <user>Georgeanna</user>
    <text>&lt;@Jacob&gt; if you do switch back to emacs, what you want is jump registers… there’s also bookmarks (temporary or permanent). There’s also C-x C-SPC to jump to your last edit… um. lots. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="153">
    <ts>2017-08-17T17:58:10.000357</ts>
    <user>Tina</user>
    <text>&lt;@Corey&gt; I mean that I would have thought you could filter based on the topic and not based on the characters that appear before the `:` in the logged message.</text>
  </message>
  <message conversation_id="157">
    <ts>2017-08-17T19:57:11.000221</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Based on my experimentation, it doesn’t seem like `make-evaluator` from `racket/sandbox` requires a `configure-runtime` submodule of the language provided to the evaluator. Is this behavior intentional, or would it be useful to add that?</text>
  </message>
  <message conversation_id="157">
    <ts>2017-08-17T20:53:29.000011</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; I think it would be useful to add that. I'm not certain of the compatibility implications (and there wouldn't be any if we had thought to add that when submodules like `configure-runtime` were introduced), but it may be ok.</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-17T23:53:46.000014</ts>
    <user>Rosalee</user>
    <text>Would it make sense to have a `test-deps` field in `#lang info`, like `build-deps`, but for testing.</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-17T23:54:07.000187</ts>
    <user>Rosalee</user>
    <text>Since there are some packages I want to instll, but they’re only really needed for testing.</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-18T00:39:33.000071</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; Test only packages are already build deps, or did you mean you want something to not be a build dep?</text>
  </message>
  <message conversation_id="158">
    <ts>2017-08-18T06:51:45.000230</ts>
    <user>Stephan</user>
    <text>I have a Typed Racket question, if anyone could help I'd appreciate it. I'd like to have a pattern matcher with exhaustion checking, like in ML, so I can be confident that I'm not omitting any cases. Does anyone know of such a pattern-matching macro?</text>
  </message>
  <message conversation_id="158">
    <ts>2017-08-18T06:53:07.000296</ts>
    <user>Stephan</user>
    <text>If not, would anyone have pointers for how to get to the type information I'd need, from a macro, so I could make a go at writing something to scratch my own itch?</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-18T09:17:36.000043</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; Fair. It just seems to me that having a separate test-dep list and doc-dep would make sense.</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-18T09:18:22.000301</ts>
    <user>Rosalee</user>
    <text>Because I could be installing in a context where I don’t care about installing the tests. And right now (as far as I can tell), the only way to do that is to make multiple packages.</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-18T09:18:47.000071</ts>
    <user>Rosalee</user>
    <text>The whole foo foo-lib foo-doc foo-test foo-extra thing.</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-18T09:19:13.000295</ts>
    <user>Rosalee</user>
    <text>(Which I guess makes sense for some dependency resolution, but still feels clunky to me in this simple case.)</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-18T09:28:37.000512</ts>
    <user>Jacob</user>
    <text>Thank you for the technical terms I can now look up!</text>
  </message>
  <message conversation_id="155">
    <ts>2017-08-18T10:19:34.000021</ts>
    <user>Clorinda</user>
    <text>&lt;@Stephan&gt; match is the most commonly used pattern matcher in Racket -- unfortunately Typed Racket cannot reason about its coverage, since it can expand into quite complex core forms. there was recently a discussion (&lt;https://github.com/racket/typed-racket/issues/594&gt;) about getting some straightforward coverage checking working. if you're interested in tinkering with your own approach solution, I threw together something along that line a while ago (&lt;https://github.com/pnwamk/datatype&gt;), but it's definitely not a polished, drop in solution (i.e. it works but is limited and does not work with arbitrary types, you have to define them similar to defining an algebraic datatype in a standard statically typed functional language)</text>
  </message>
  <message conversation_id="159">
    <ts>2017-08-18T10:26:01.000334</ts>
    <user>Clorinda</user>
    <text>there may be some other approaches people have put together as well, I'm just not familiar with what they are off the top of my head</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T11:01:08.000264</ts>
    <user>Rosalee</user>
    <text>&lt;@Willian&gt; &lt;@Eun&gt; &lt;@Tina&gt; Have you had font issues with your submission?</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T11:01:19.000309</ts>
    <user>Rosalee</user>
    <text>I seem to have tracked it down to `\renewcommand{\rmdefault}{ptm}`</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T11:01:29.000159</ts>
    <user>Rosalee</user>
    <text>Which really messes up the lower case `g`.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T11:02:47.000056</ts>
    <user>Tina</user>
    <text>That command chooses a font</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T11:02:59.000102</ts>
    <user>Tina</user>
    <text>Like the whole font, I believe</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T11:04:08.000327</ts>
    <user>Rosalee</user>
    <text>Yup. But `scribble/acmart` seems to put it in there.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T11:04:21.000703</ts>
    <user>Rosalee</user>
    <text>At least as far as I can (currently) tell</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T11:04:31.000467</ts>
    <user>Rosalee</user>
    <text>Would it makes sense to remove that?</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T12:39:52.000114</ts>
    <user>Tina</user>
    <text>&lt;@Rosalee&gt; scribble/acmart should not generate Tex code like that I agree. That should be in the cls file. </text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T12:40:45.000354</ts>
    <user>Tina</user>
    <text>But I am confused. If that had any effect it should have set the font to the standard latex roman font. And I don't see that in our paper</text>
  </message>
  <message conversation_id="161">
    <ts>2017-08-18T12:45:10.000236</ts>
    <user>Tina</user>
    <text>Maybe it just messed up the state in some more subtle way?</text>
  </message>
  <message conversation_id="162">
    <ts>2017-08-18T13:06:57.000192</ts>
    <user>Chantelle</user>
    <text>I think binary installs from the build server let you skip installing build deps</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:24:43.000244</ts>
    <user>Rosalee</user>
    <text>That….is a very good point. :confused:</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:25:56.000375</ts>
    <user>Rosalee</user>
    <text>Like, it certainly does look different than the standard computer modern font. But there are also similarities to times. SO I honestly have no idea.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:26:28.000180</ts>
    <user>Rosalee</user>
    <text>Sure, that makes sense.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:26:48.000411</ts>
    <user>Rosalee</user>
    <text>But I can still see a case where I want to build the docs, but I don’t want to run the tests.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:26:50.000199</ts>
    <user>Tina</user>
    <text>Removal of that line seems wise</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:26:58.000046</ts>
    <user>Rosalee</user>
    <text>Or I want to run the tests, but don’t care about building the docs.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:27:52.000280</ts>
    <user>Rosalee</user>
    <text>Ya, that’s the only way I was able to get rid of it. Unfortunately the line is in the main scribble.tex style file. So its not just as simple as removing it from acmart. :disappointed:</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:39:02.000278</ts>
    <user>Chantelle</user>
    <text>You can get the pre-built docs without tests currently (--binary vs --binary-lib) but yeah, there's no way to get runnable tests without building docs</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:39:27.000124</ts>
    <user>Chantelle</user>
    <text>Maybe a different kind of installation that was like `--binary` but included compiled test modules?</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T13:39:45.000356</ts>
    <user>Chantelle</user>
    <text>building docs without running tests could just be running `raco setup` right?</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T14:14:23.000145</ts>
    <user>Rosalee</user>
    <text>‘You can get the pre-built docs without tests’ Yes, but say I don’t want the pre-built docs, I want to build them myself.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T14:15:22.000048</ts>
    <user>Rosalee</user>
    <text>Say I’m making my own language that has its own theme for docs. And I’m using that library. I want to provide the docs for the library in the new format, which means getting the source, but I don’t care about building the tests.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T14:15:25.000545</ts>
    <user>Rosalee</user>
    <text>If that makes any sense anyway.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T14:16:05.000604</ts>
    <user>Rosalee</user>
    <text>Oh ya, building docs without building tests is easy, same as building tests without docs.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T14:16:13.000066</ts>
    <user>Rosalee</user>
    <text>The problem is just with dependency resolution.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T14:16:16.000054</ts>
    <user>Rosalee</user>
    <text>As the two are tied together.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T14:51:50.000032</ts>
    <user>Chantelle</user>
    <text>How does making scribble docs with custom themes work anyway?</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T16:05:18.000423</ts>
    <user>Rosalee</user>
    <text>Uhh…depends on what you want to change.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T16:05:28.000349</ts>
    <user>Rosalee</user>
    <text>The easiest thing is to just change the css file.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T16:05:37.000269</ts>
    <user>Rosalee</user>
    <text>(Which honestly wouldn’t really require getting the source.)</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T16:05:59.000009</ts>
    <user>Rosalee</user>
    <text>The other way is to take the `doc` structure scribble files provide, and munge it the way you want.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T16:06:07.000372</ts>
    <user>Rosalee</user>
    <text>IIRC, frog does  the former.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T16:11:09.000176</ts>
    <user>Chantelle</user>
    <text>What about if you want only docs for certain packages to look different? Like say we wanted all docs for Typed Racket packages (including libraries people wrote providing things for TR) to have a different visual theme of some sort</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T17:09:16.000038</ts>
    <user>Rosalee</user>
    <text>That’s easy if you have the source. Just change the style the doc uses.</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T17:09:25.000260</ts>
    <user>Rosalee</user>
    <text>(AKA, point the doc to its own css file.)</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T17:10:29.000103</ts>
    <user>Chantelle</user>
    <text>ah so you're referring to changing all docs globally for some set of packages to use a new style as a *consumer* of those packages, not an author of them? like how the &lt;http://docs.racket-lang.org|docs.racket-lang.org&gt; sets the logo for all docs?</text>
  </message>
  <message conversation_id="160">
    <ts>2017-08-18T17:10:43.000277</ts>
    <user>Chantelle</user>
    <text>I didn't catch that, my bad</text>
  </message>
  <message conversation_id="163">
    <ts>2017-08-19T09:05:33.000048</ts>
    <user>Stephan</user>
    <text>&lt;@Clorinda&gt; Thanks for the pointers. I'd already built myself a datatype macro whose surface syntax looks pretty much exactly like your define-datatype; I'm interested to check out your type-case. Giving the type explicitly isn't really a problem, but I'm curious if it would be possible to determine the type of the first form, since Typed Racket should know it (although maybe at the wrong time?).</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T09:53:06.000070</ts>
    <user>Rosalee</user>
    <text>Yup, that’s exactly what I’m talking about. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:41:40.000039</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; I want to double check with you as the docs aren’t 100% clear. When I allocate a cstruct using its make-&amp;lt;id&amp;gt; allocator, the result is still tracked by the GC, yes?</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:41:51.000028</ts>
    <user>Vincenzo</user>
    <text>yes</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:42:16.000060</ts>
    <user>Rosalee</user>
    <text>Okay. So it is then not safe to hand a pointer to it to a C function that then takes ownership of it?</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:42:38.000003</ts>
    <user>Vincenzo</user>
    <text>Correct.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:42:56.000030</ts>
    <user>Rosalee</user>
    <text>In which case it looks like the only way to make one is to: A. call malloc explicitly in raw mode, and manually set the fields.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:43:02.000016</ts>
    <user>Rosalee</user>
    <text>Okay cool, thanks you.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:43:32.000044</ts>
    <user>Vincenzo</user>
    <text>You can supply an alternative `malloc` mode with `#:malloc-mode` if you always want to allocate as, say, `'raw`</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:43:52.000044</ts>
    <user>Vincenzo</user>
    <text>Otherwise, yes, use `malloc`, etc..</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:44:00.000043</ts>
    <user>Rosalee</user>
    <text>okay cool, that makes sense.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:44:02.000002</ts>
    <user>Rosalee</user>
    <text>Thank you</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:50:00.000023</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Also, I presume list-&amp;gt;cblock allocates the block with atomic?</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:53:51.000070</ts>
    <user>Vincenzo</user>
    <text>That one does seem inadequately documented. I see that the implementation uses `malloc` with the given type, so that's not always atomic.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:56:25.000032</ts>
    <user>Rosalee</user>
    <text>Interesting, okay.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T20:56:31.000001</ts>
    <user>Rosalee</user>
    <text>Thank you</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T21:02:06.000079</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Its more that I wanted to hand it off to a c function.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-19T21:02:29.000035</ts>
    <user>Rosalee</user>
    <text>But it looks like I’ll have to keep a copy around on the Racket side until I know its safe to free it.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:34:25.000480</ts>
    <user>Rosalee</user>
    <text>Does anyone know why scribble would print out a `???` as the result of an expression in an examples block?</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:34:36.000073</ts>
    <user>Rosalee</user>
    <text>When I run the same example in a repl, I get the correct output.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:35:28.000088</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; I think that means it's unprintable in some fashion</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:36:31.000265</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; That would make sense, except that it still shows up in the repl just fine.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:37:04.000075</ts>
    <user>Rosalee</user>
    <text>I did add a prop:convertible property, that might be doing it….</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:40:16.000008</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Yes, it looks like the base renderer prints "???" for any convertible (where convertible values not recognized by the HTML renderer fall through to the base renderer). Maybe that's a bad idea in the base renderer.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:41:21.000282</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Mmmm…maybe. Given the `convertible?` interface I don’t think we can do much better though.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:41:36.000064</ts>
    <user>Rosalee</user>
    <text>It probably should be documented somewhere though.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:42:50.000050</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Although in this case, looking, it looks like assuming I can convert it into an image is bad.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:43:37.000137</ts>
    <user>Rosalee</user>
    <text>Like, I can convert it into a video, but I would honestly just rather it print out its type like in a repl: #&amp;lt;producer&amp;gt;</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:49:11.000331</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Mmm…looking at the docs, it actually says:
&amp;gt; If pretty-print? is true, the sandbox’s printer is set to pretty-print-handler. In that case, values that are convertible in the sense of convertible? are printed using write-special,</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:49:30.000260</ts>
    <user>Rosalee</user>
    <text>However, when I call write-special directly from within drracket, it shows up as you would expect:</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:49:43.000072</ts>
    <user>Rosalee</user>
    <text>```
#lang scratch

(require video/base)
(define x (clip "green"))

(write-special x)
```</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:50:25.000028</ts>
    <user>Vincenzo</user>
    <text>`write-special` means that rendering is up to the port; Scribble doesn't use DrRacket's `editor%`-based port</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:50:40.000126</ts>
    <user>Rosalee</user>
    <text>AH</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:50:41.000192</ts>
    <user>Rosalee</user>
    <text>okay</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:51:39.000371</ts>
    <user>Rosalee</user>
    <text>In that case, if I turn off `#:pretty-print?` when defining the evaluator, will the text no longer be formatted in a nicely indented way?</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:52:00.000220</ts>
    <user>Rosalee</user>
    <text>(I say that because it would make sense to have a middle ground here, where you want the nice indentation, but not the auto-conversion.)</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:54:46.000081</ts>
    <user>Vincenzo</user>
    <text>You could turn off `#:pretty-print?`, but I think adjusting the base renderer is more likely the right change</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:57:52.000186</ts>
    <user>Rosalee</user>
    <text>Fair. It also looks like it still tries to convert it even when pretty-print? is set to `#f`. :disappointed:</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:58:06.000605</ts>
    <user>Rosalee</user>
    <text>So, when you say adjust the base renderer, do you mean submitting a PR?</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:58:17.000069</ts>
    <user>Rosalee</user>
    <text>Or just for the documentation for one package?</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:58:18.000661</ts>
    <user>Vincenzo</user>
    <text>I'm looking into the right change.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T09:59:24.000197</ts>
    <user>Rosalee</user>
    <text>Okay cool, thanks.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T10:07:48.000289</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Setting `#:pretty-print?` to `#f` has no effect because the default operation–as long as `current-print` and `print-as-expression` are not changed–is to take the result value and typeset it with `to-element`</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T10:09:45.000559</ts>
    <user>Rosalee</user>
    <text>That makes sense.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T10:43:42.000347</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Change pushed</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T12:44:53.000392</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; cool, thank. checking them out now</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T12:56:11.000113</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Also, just to make sure, the package server builds the docs with the latest stable version of racket?</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T12:56:35.000060</ts>
    <user>Vincenzo</user>
    <text>No, &lt;http://docs.racket-lang.org|docs.racket-lang.org&gt; is built with the current release</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T12:57:02.000076</ts>
    <user>Rosalee</user>
    <text>Err…ya, okay.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T12:57:16.000211</ts>
    <user>Rosalee</user>
    <text>Basically 6.10, until the next version comes out.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T12:57:19.000598</ts>
    <user>Rosalee</user>
    <text>(As I understand it anyway)</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T13:00:03.000465</ts>
    <user>Vincenzo</user>
    <text>Sorry – I misread what you wrote. "latest stable version" is a reasonable synonym for "current release"!</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T13:00:21.000286</ts>
    <user>Rosalee</user>
    <text>No worries.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T13:00:44.000333</ts>
    <user>Rosalee</user>
    <text>Just wondering how long the `???` will stay on the package server’s docs. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T13:01:08.000286</ts>
    <user>Rosalee</user>
    <text>Also, fyi, it looks like packages with conflicts don’t show up in the search results.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T13:01:27.000601</ts>
    <user>Rosalee</user>
    <text>I suspect that’s probably because the package server doesn’t know which one to pick.</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T13:03:26.000409</ts>
    <user>Vincenzo</user>
    <text>right</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T13:05:24.000346</ts>
    <user>Rosalee</user>
    <text>Is there any way to tell the package server which one it should choose as the primary package?</text>
  </message>
  <message conversation_id="164">
    <ts>2017-08-21T13:10:38.000303</ts>
    <user>Rosalee</user>
    <text>(Also cool. After compiling the new build it looks like the base renderer is working as expected, thanks. :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:47:13.000112</ts>
    <user>Kimbery</user>
    <text>&lt;@Natosha&gt; when running `raco check-requires` on a file of mine, I’m getting an error that looks like this:
```
derivation-parser: error on token #229: &amp;lt;local-value, #&amp;lt;syntax:/Users/alexis/gits/racket/racket/racket/collects/syntax/parse/private/lib.rkt:63:55 -string&amp;gt;&amp;gt;
```</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:47:48.000185</ts>
    <user>Kimbery</user>
    <text>I am not sure what that means. does that mean anything to you, or should I just open a bug?</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:48:40.000167</ts>
    <user>Georgeanna</user>
    <text>I’ve got a demo file to prototype how I want a new hash-lang to be... right now I just want to poke around quickly so I’m using `#lang reader "literal.rkt"` and that file does port-&amp;gt;list to just dump everything it saw. It is failing on a line with a single `|` in it because it isn’t balanced. Is there another #lang reader (or whatever) that does a looser parse? I just want to prototype the syntax at this point and not get tripped up on racket readerisms…</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:49:59.000153</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; that is due to `port-&amp;gt;list`, not `reader`. `port-&amp;gt;list` calls `read`. is that really what you want, or do you want `port-&amp;gt;lines` or something like that?</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:50:32.000126</ts>
    <user>Georgeanna</user>
    <text>I’m _currently_ line oriented, but I don’t need to be… I want balanced parens and just about nothing else</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:50:42.000132</ts>
    <user>Georgeanna</user>
    <text>I only did `port-&amp;gt;list` because it calls `read` until exhausted, right?</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:51:01.000086</ts>
    <user>Kimbery</user>
    <text>you could use `port-&amp;gt;list`, but parameterize `read-accept-bar-quote` to `#f`</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:51:16.000023</ts>
    <user>Georgeanna</user>
    <text>interesting… I’ll try that</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:51:17.000257</ts>
    <user>Kimbery</user>
    <text>that would make `|` not act as a special character</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:52:09.000036</ts>
    <user>Georgeanna</user>
    <text>thanks. that did it. perfect</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T19:52:25.000124</ts>
    <user>Georgeanna</user>
    <text>I’m making a hash-lang for lexers… so I want bare `|`s</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-21T20:43:22.000027</ts>
    <user>Natosha</user>
    <text>&lt;@Kimbery&gt;, it means that that macro debugger's parser and the macro expander's instrumentation are out of sync. Yes, please file a bug in the macro-debugger repo.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-21T20:49:21.000046</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; The pkg-build service should pay attention to rings to pick among conflicting packages; it doesn't, yet. I'll try to make that improvement sometime soon.</text>
  </message>
  <message conversation_id="165">
    <ts>2017-08-22T13:04:06.000020</ts>
    <user>Kimbery</user>
    <text>&lt;@Natosha&gt; opened an issue here &lt;https://github.com/racket/macro-debugger/issues/23&gt;</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T13:41:20.000052</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; cool, thanks.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T13:41:30.000163</ts>
    <user>Rosalee</user>
    <text>BTW, does anyone know of a good way to write tests for DrRacket plugins?</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T13:41:49.000284</ts>
    <user>Rosalee</user>
    <text>About all I have so far is to keep as many of the smarts as possible out of the plugin, and then just not test the plugin.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T14:22:01.000300</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; There's extensive infrastructrue for testing DrRacket</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T14:37:14.000080</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; Perhaps I’m looking in the wrong place. Because I’m not seeing anything about that in the DrRacket plugin’s manual: &lt;http://docs.racket-lang.org/tools/index.html?q=drracket%3Atool%40&gt;</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T14:37:38.000170</ts>
    <user>Rosalee</user>
    <text>Like, I see stuff about making drracket tools for debugging</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T14:37:55.000488</ts>
    <user>Rosalee</user>
    <text>And elsewhere I can see tests for the drracket plugin infrastructure.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T14:38:06.001145</ts>
    <user>Rosalee</user>
    <text>But I don’t see anything about writing tests for DrRacket plugins.</text>
  </message>
  <message conversation_id="167">
    <ts>2017-08-22T15:28:45.000145</ts>
    <user>Chantelle</user>
    <text>what's up with the `acmart` package? it has a version exception pointing to `scribble-lib`?</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:16:44.000637</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; Ya, &lt;@Asuncion&gt; and I had a package going on the catalog. Then DVH added a collection to `scribble-lib` for `scribble/acmart`, thus conflicting with the existing package (and also being incompatible too. :disappointed: ), so we cleaned it up to make it inline with the existing package (and scribble conventions).</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:17:12.000577</ts>
    <user>Rosalee</user>
    <text>But we wanted to leave the acm package up there because it was still useful in old versions of racket.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:17:58.000547</ts>
    <user>Rosalee</user>
    <text>Although I am glad DVH merged it into scribble-lib. And to be fair, he did ask if anyone else had done it first. But I didn’t find out about it until it was too late. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:18:22.000472</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; the build server does not seem happy with this arrangement :p</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:18:27.000390</ts>
    <user>Rosalee</user>
    <text>Although I guess the other moral of the story is…check the package server before putting something int he main distro?</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:19:14.000261</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; ha, ya, I guess it would: &lt;http://pkg-build.racket-lang.org/server/built/fail/acmart.txt&gt;</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:19:43.000263</ts>
    <user>Rosalee</user>
    <text>Hmm…I guess we could just have acmart be a completely empty package.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:19:52.000215</ts>
    <user>Rosalee</user>
    <text>(In everything but racket 6.8)</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:20:21.000449</ts>
    <user>Chantelle</user>
    <text>version exception pointing to totally different package seems like it could have lots of strange consequences</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:20:32.000173</ts>
    <user>Chantelle</user>
    <text>empty package does seem better to me</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:21:03.000073</ts>
    <user>Chantelle</user>
    <text>(I gotta write stuff like this down for a future doc about good racket package practices)</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:22:09.000392</ts>
    <user>Rosalee</user>
    <text>While I agree, I do kind of think that this could also just be resolved by having a cleaner package system.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:22:33.000433</ts>
    <user>Rosalee</user>
    <text>(magically cleaner…. I don’t want to put myself on a burning steak….err.design it. :wink: )</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:22:57.000540</ts>
    <user>Chantelle</user>
    <text>no disagreement here</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:23:35.000199</ts>
    <user>Chantelle</user>
    <text>the specific case where package A depends on B and provides module X, then a new version of B also provides X, seems worth taking a look at though</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:24:35.000101</ts>
    <user>Chantelle</user>
    <text>I could see that coming up a lot both by accident and as a result of people deciding that X really belongs in the core and moving it into B from A by choice</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:28:28.000359</ts>
    <user>Rosalee</user>
    <text>Yup</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:28:43.000111</ts>
    <user>Rosalee</user>
    <text>So, right now the best I got is we should use c like conventions…</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:28:58.000049</ts>
    <user>Rosalee</user>
    <text>that is, only provide collections with a unique identifier.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:29:26.000424</ts>
    <user>Rosalee</user>
    <text>Kind of a sad idea given how nice things like…ya know…scope, is.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:29:36.000113</ts>
    <user>Rosalee</user>
    <text>But….again….its what we got, and I don’t have a better idea.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:29:43.000023</ts>
    <user>Rosalee</user>
    <text>(Nor want to spend the energy to come up with one right now.)</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T16:30:32.000364</ts>
    <user>Chantelle</user>
    <text>1) versioning packages and 2) extending the "version exception" idea to packages other than "main-distribution" seems like a decent way to do it</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T17:12:40.000158</ts>
    <user>Rosalee</user>
    <text>That solves a lot of problems,  but not all of them.</text>
  </message>
  <message conversation_id="166">
    <ts>2017-08-22T17:13:15.000241</ts>
    <user>Rosalee</user>
    <text>Because a package can have multiple collections, and the collections are cross cutting through multiple packages, it also should have a unique collection name.</text>
  </message>
  <message conversation_id="168">
    <ts>2017-08-22T18:12:12.000208</ts>
    <user>Latarsha</user>
    <text>I don't think you need to use a unique identifier</text>
  </message>
  <message conversation_id="168">
    <ts>2017-08-22T18:12:25.000192</ts>
    <user>Latarsha</user>
    <text>Racket is small enough that just "avoid conflicts" seems like enough at the moment</text>
  </message>
  <message conversation_id="169">
    <ts>2017-08-22T18:31:09.000204</ts>
    <user>Kimbery</user>
    <text>Haskell is much bigger, and it mostly avoids conflicts despite the hierarchal namespace. However, GHC has a much nicer story around collisions (it knows about some low-level notion of packages, so you can alias or hide packages as necessary, and you can also specify the package when importing if absolutely necessary).</text>
  </message>
  <message conversation_id="169">
    <ts>2017-08-22T18:37:28.000219</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; &lt;@Tina&gt; In my language, `.` is a valid identifier. Is there any way to get `@racket[|.|]` to typeset the `.` without the vertical bars? Or will I need to either make a custom version of the `racket`/`racketblock`/etc. forms or use `unsyntax` to escape to `@racketidfont{.}`? It would be nice to not have to reimplement the whole universe of typesetting functions, including the `scribble/example` forms.</text>
  </message>
  <message conversation_id="169">
    <ts>2017-08-22T18:47:35.000034</ts>
    <user>Tina</user>
    <text>Reimplementing the entire universe does sound daunting. </text>
  </message>
  <message conversation_id="169">
    <ts>2017-08-22T18:48:15.000268</ts>
    <user>Tina</user>
    <text>racketidfont sounds like a good start. </text>
  </message>
  <message conversation_id="169">
    <ts>2017-08-22T18:48:36.000049</ts>
    <user>Tina</user>
    <text>Sorry I don't have a better answer </text>
  </message>
  <message conversation_id="169">
    <ts>2017-08-22T18:57:18.000192</ts>
    <user>Rosalee</user>
    <text>&lt;@Tina&gt; Don’t worry. Matthew will have a re-implementation by monday. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="170">
    <ts>2017-08-22T19:09:37.000106</ts>
    <user>Kimbery</user>
    <text>`racketidfont` works okay, but it doesn’t work with `scribble/example` without `eval:alts`, which is unfortunate.</text>
  </message>
  <message conversation_id="170">
    <ts>2017-08-22T19:40:24.000060</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; Does something like this help?
```
#lang scribble/manual
@(require scribble/racket
          (for-syntax racket/base))

@(let-syntax ([|.| (make-element-id-transformer
                    (lambda (stx)
                     #'(racketidfont ".")))])
  @scheme[|.|])
```</text>
  </message>
  <message conversation_id="170">
    <ts>2017-08-22T20:02:12.000072</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; That gets me a lot closer, thanks! The issue with that is the resulting `.` is not hyperlinked to the definition of `.`. I’m looking at the `to-element` docs, but it doesn’t seem to have a way to use a different element for the content but keep the hyperlink.</text>
  </message>
  <message conversation_id="170">
    <ts>2017-08-22T20:02:59.000086</ts>
    <user>Kimbery</user>
    <text>It seems there’s probably a more indirect way to get the link target and generate the necessary link element, but I don’t know what it is.</text>
  </message>
  <message conversation_id="170">
    <ts>2017-08-22T20:06:08.000004</ts>
    <user>Vincenzo</user>
    <text>`racketlink`?</text>
  </message>
  <message conversation_id="170">
    <ts>2017-08-22T20:08:15.000100</ts>
    <user>Kimbery</user>
    <text>Aha! That should work; I was looking in the wrong section of the docs.</text>
  </message>
  <message conversation_id="170">
    <ts>2017-08-22T20:11:54.000035</ts>
    <user>Kimbery</user>
    <text>Yes, that works. Thanks for your help.</text>
  </message>
  <message conversation_id="170">
    <ts>2017-08-22T20:22:33.000116</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Relatedly, is there any way to override how `@defthing[|.| ....]` renders `.`? Or do I just need to roll my own definition form for defining `.`?</text>
  </message>
  <message conversation_id="171">
    <ts>2017-08-22T21:19:55.000076</ts>
    <user>Vincenzo</user>
    <text>I don't see a good way to adjust `defthing`</text>
  </message>
  <message conversation_id="172">
    <ts>2017-08-23T07:55:45.000112</ts>
    <user>Danelle</user>
    <text>Hi! I’m new to Racket and wanted to use it in a Calculus course starting september.
Totally unrelated but I’m currently at a summer course (&lt;http://school.grammaticalframework.org/2017&gt;) and wanted to make Racket bindings to the thing used here (&lt;http://www.grammaticalframework.org&gt;) using `ffi`.
Now the question: what is the right way to connect to a `cstruct` like this:
```typedef struct PgfApplication PgfApplication;

struct PgfApplication {
	PgfCId fun;
	int n_args;
	PgfExpr args[];
};
```
where `fun` is basically a string. The problem is `args` which is expected to be dynamically created and to have `n_args` elements.
Thanks in advance!</text>
  </message>
  <message conversation_id="171">
    <ts>2017-08-23T13:48:46.000130</ts>
    <user>Latarsha</user>
    <text>hashim: it's fine to ask here</text>
  </message>
  <message conversation_id="173">
    <ts>2017-08-23T16:02:27.000150</ts>
    <user>Rosalee</user>
    <text>Would anyone know why putting picts in code causes the code to become unaligned?</text>
  </message>
  <message conversation_id="171">
    <ts>2017-08-23T16:02:27.000577</ts>
    <user>Rosalee</user>
    <text>&lt;http://pasterack.org/pastes/6144&gt;</text>
  </message>
  <message conversation_id="173">
    <ts>2017-08-23T16:02:56.000291</ts>
    <user>Rosalee</user>
    <text>(If you remove the `(code "hello")` line, it gets aligned as you would expect</text>
  </message>
  <message conversation_id="173">
    <ts>2017-08-23T16:04:29.000531</ts>
    <user>Rosalee</user>
    <text>(it also remains if I replace that line with a different pict, or freeze the pict altogether.</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:01:52.000052</ts>
    <user>Chantelle</user>
    <text>why are scribble URLs the way they are? e.g. "&lt;http://docs.racket-lang.org/disposable/#%28form._%28%28lib._disposable%2Fmain..rkt%29._with-disposable%29%29&gt;"</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:07:32.000051</ts>
    <user>Latarsha</user>
    <text>it's the library path that the identifier is defined in</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:10:53.000293</ts>
    <user>Chantelle</user>
    <text>is there any way to control the url structure for a particular definition?</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:12:11.000229</ts>
    <user>Chantelle</user>
    <text>wondering if there's a way I can define a link relation as a racket value with a URL pointing to its documentation without the relation being really, really ugly looking / percent encoded / contain redundant information</text>
  </message>
  <message conversation_id="173">
    <ts>2017-08-23T17:23:32.000188</ts>
    <user>Nelson</user>
    <text>&lt;@Danelle&gt; I don't know the FFI, but this tutorial might help: &lt;http://prl.ccs.neu.edu/blog/2016/06/27/tutorial-using-racket-s-ffi/&gt;</text>
  </message>
  <message conversation_id="173">
    <ts>2017-08-23T17:24:43.000259</ts>
    <user>Nelson</user>
    <text>use `hyperlink` ?</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:29:11.000073</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; not put a link in scribble, but use scribble docs as a link relations registry like &lt;https://www.iana.org/assignments/link-relations/link-relations.xhtml&gt;</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:31:25.000343</ts>
    <user>Chantelle</user>
    <text>or just somehow get a registry out of a package catalog so I don't need to register a domain to get a unique url for a link relation</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:33:58.000286</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; It actually does that if there are conflicts</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:34:34.000311</ts>
    <user>Rosalee</user>
    <text>If you look at the video manual (&lt;http://lang.video/documentation.html&gt;) which uses the package server, each package gets its own url</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:34:39.000297</ts>
    <user>Rosalee</user>
    <text>If that’s what you’re talking about</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:35:27.000365</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; actually, thinking about it more, I specifically do not want the package name to be part of the url so I have the freedom to move the code between packages without breaking links</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:35:59.000229</ts>
    <user>Chantelle</user>
    <text>this would definitely not be possible with scribble, though maybe some weird extension built on top of the catalog that did things with info files could do it</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:39:24.000252</ts>
    <user>Nelson</user>
    <text>something like `&lt;http://docs.racket-lang.org/?pkg=foo&amp;amp;tag=bar&gt;` ?</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:39:56.000235</ts>
    <user>Nelson</user>
    <text>which would search for a package currently named `foo` and an identifier (or something) currently named `bar` (current = since most recent build of the docs)</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:41:05.000362</ts>
    <user>Chantelle</user>
    <text>no, more something like `&lt;http://registry.pkgs.racket-lang.org/relations/bar&gt;` which would redirect to the scribble docs for `bar` in `foo`</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:41:43.000068</ts>
    <user>Chantelle</user>
    <text>basically I want a way to use the package system to somehow let packages define unique identifiers across all packages in a catalog, in a way that lets the definition of the identifier move between packages without breaking things</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:42:07.000002</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; how would you deal with identifiers that need % encoding?</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:42:35.000188</ts>
    <user>Latarsha</user>
    <text>or, more significantly, packages that provide multiple bindings with the same name</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:42:57.000275</ts>
    <user>Latarsha</user>
    <text>for example, `typed-racket-lib` provides a lot of different `#%module-begin` bindings</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:43:36.000294</ts>
    <user>Chantelle</user>
    <text>specifically I'd want this registry server to look for conflicts and do something ring-like in choosing which one is the "official" one, with two packages providing the same relation ID being something you could consider a test failure</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:44:23.000014</ts>
    <user>Chantelle</user>
    <text>this is for ids that are "very special" in that they're not just code ids, they're ids for resources in some resful distributed system (like link relations)</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:44:55.000156</ts>
    <user>Nelson</user>
    <text>ok what if `&lt;http://docs.racket-lang.org/search/index.html?q=bar|docs.racket-lang.org/search/index.html?q=bar&gt;` just used rings to rank results?</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:45:26.000032</ts>
    <user>Nelson</user>
    <text>alright I see "very special"</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:46:43.000360</ts>
    <user>Chantelle</user>
    <text>emphasis on very</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:52:28.000095</ts>
    <user>Rosalee</user>
    <text>:pizza: ?</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:52:29.000154</ts>
    <user>Rosalee</user>
    <text>lol</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:52:32.000430</ts>
    <user>Rosalee</user>
    <text>I’m hungry now</text>
  </message>
  <message conversation_id="174">
    <ts>2017-08-23T17:54:01.000212</ts>
    <user>Chantelle</user>
    <text>:pizza: :pizza: :pizza:</text>
  </message>
  <message conversation_id="175">
    <ts>2017-08-23T18:52:41.000157</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; &lt;@Nelson&gt; that's close to what happens when you use an "indirect" link that goes through the "local-redirect" layer (but the use of rings is new as of today, when the pkg-build system started paying attention to rings);the indirect-link index is currently limited in what it covers, but you might look there for implementation ideas; anyway, unless I'm confused about what you're suggesting, this is not only possible with Scribble, but it's substantially already in place</text>
  </message>
  <message conversation_id="175">
    <ts>2017-08-23T19:01:26.000293</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; I didn't really explain what I wanted very well or in detail. The indirect links are sort of related though, thanks for the pointer</text>
  </message>
  <message conversation_id="175">
    <ts>2017-08-23T20:20:26.000074</ts>
    <user>Nathanial</user>
    <text>People are pretty quiet right now over on IRC, so I figured I'd ask here as well.</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T20:20:30.000026</ts>
    <user>Nathanial</user>
    <text>I was looking at &lt;https://github.com/racket/racket/blob/master/racket/src/racket/src/hash.c&gt; 
I was wondering . . . has anyone tried linear probing rather than double hashing in this hash table? 
And how sensitive is racket perf to the perf of this table?</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T20:20:54.000129</ts>
    <user>Nathanial</user>
    <text>I guess the last question would be, what's the bar for changing behavior at this level?</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T20:21:13.000010</ts>
    <user>Nathanial</user>
    <text>(I'm refering to the traditional hash table, not the mzhamt thing</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T20:56:31.000057</ts>
    <user>Latarsha</user>
    <text>&lt;@Nathanial&gt; I expect that &lt;@Vincenzo&gt; has tried other hash tables, I think improving them would help many Racket programs, and the bar is convincing improvement, I would say</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T20:58:20.000011</ts>
    <user>Nathanial</user>
    <text>So we aren't worried about people having dependencies on the exact shape of the internal hash function, for example? My thoughts were: 1. plug the hash function into SMHasher to see what we're working with. Linear probing is known to be very sensitive to hash function quality.</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T20:58:53.000120</ts>
    <user>Nathanial</user>
    <text>If there's any problem, try replacing the hash function with something of good quality.</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T20:59:07.000161</ts>
    <user>Nathanial</user>
    <text>After that, update the code, run some benchmarks, and see whether there is a detectable change.</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T21:01:59.000104</ts>
    <user>Vincenzo</user>
    <text>I don't think there would be any problem moving away from double hashing. The Racket-on-Chez port uses single hashing with linked lists for collisions, since that's what Chez Scheme provides.</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T21:02:33.000178</ts>
    <user>Nathanial</user>
    <text>OK. I'll take a look. Any particular benchmarks y'all like to run to verify changes to internals?</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T21:18:13.000002</ts>
    <user>Vincenzo</user>
    <text>Aside from microbenchmarks, trying a build (maybe plotting like &lt;http://build-plot.racket-lang.org/&gt;) is often a good exercise to make sure that things don't go surprisingly wrong, since a build relies on so many different things.</text>
  </message>
  <message conversation_id="177">
    <ts>2017-08-23T21:57:51.000082</ts>
    <user>Latarsha</user>
    <text>There are also some ok benchmarks in two places: &lt;https://github.com/racket/racket/tree/master/pkgs/racket-benchmarks/tests/racket/benchmarks&gt;</text>
  </message>
  <message conversation_id="177">
    <ts>2017-08-23T21:58:50.000022</ts>
    <user>Latarsha</user>
    <text>and &lt;https://github.com/stamourv/contract-benchmarks&gt;</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T23:26:44.000153</ts>
    <user>Nathanial</user>
    <text>I have been working on testing the string hashing function using SMHasher</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T23:27:09.000022</ts>
    <user>Nathanial</user>
    <text>I am just testing the initial value, to see what our collision properties are</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T23:27:19.000011</ts>
    <user>Nathanial</user>
    <text>It looks not so good</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T23:27:35.000052</ts>
    <user>Nathanial</user>
    <text>And at least on my VM, it's about 1/10th as fast as CityHash64 on longer strings</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T23:28:14.000104</ts>
    <user>Nathanial</user>
    <text>I wonder if there's an appetite for taking on a purpose built hashing library like xxhash as a dependency</text>
  </message>
  <message conversation_id="176">
    <ts>2017-08-23T23:30:32.000097</ts>
    <user>Nathanial</user>
    <text>But it's possible I'm doing something wrong. I'll have to look at it more later.</text>
  </message>
  <message conversation_id="178">
    <ts>2017-08-24T02:05:07.000189</ts>
    <user>Danelle</user>
    <text>Will try it, thanks :+1:</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T13:57:55.000101</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; If I have a native library that uses pthreads, lets the user set a callback, the callback goes to a Racket function, and the native library calls that callback from another thread, would that likely cause the Racket VM to segfault?</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:00:04.000252</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Yes. See `#:async-apply` for the way to solve that problem.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:01:57.000409</ts>
    <user>Rosalee</user>
    <text>Ah, okay, that would explain a lot.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:03:11.000420</ts>
    <user>Rosalee</user>
    <text>So that looks like its just a short function which is supposed to run quickly</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:03:26.000532</ts>
    <user>Rosalee</user>
    <text>That you can use to say, add something to a datastructure the main thread grabs.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:03:36.000494</ts>
    <user>Rosalee</user>
    <text>At least that’s what it looks like to mel</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:03:37.000326</ts>
    <user>Rosalee</user>
    <text>me*</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:04:22.000423</ts>
    <user>Rosalee</user>
    <text>Would I put that on the callback `_fun` type, or the function where I set the `_fun`?</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:05:03.000383</ts>
    <user>Vincenzo</user>
    <text>It's a property of the callback</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:06:57.000027</ts>
    <user>Rosalee</user>
    <text>That makes sense, so in the case of:
```
(define-libvid set-racket-log-callback
  (_fun (_fun _pointer _int _string -&amp;gt; _void) -&amp;gt; _void))
```
It would go on the inner callback.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:11:50.000464</ts>
    <user>Rosalee</user>
    <text>Or not, as this doesn’t seem to even print out ‘here’:
```
(define-libvid set-racket-log-callback
  (_fun (_fun #:async-apply (λ (th) (displayln "here") (th))
              _pointer _int _string -&amp;gt; _void) -&amp;gt; _void))
```</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:11:57.000348</ts>
    <user>Rosalee</user>
    <text>so I’m going to look for examples.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:13:10.000447</ts>
    <user>Rosalee</user>
    <text>Oh interesting, the only examples I see use it as a box.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:15:47.000256</ts>
    <user>Vincenzo</user>
    <text>There are non-box examples in "net/osx-ssl.rkt"</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:21:39.000111</ts>
    <user>Rosalee</user>
    <text>Hmm…that looks like what I was doing. Is it possible for the GC to collect a closure defined at the the module level?</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:21:50.000242</ts>
    <user>Rosalee</user>
    <text>(define and exported and immutable)</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:22:16.000077</ts>
    <user>Rosalee</user>
    <text>well, defined and exported and not `set!`ed anyway.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:23:00.000352</ts>
    <user>Latarsha</user>
    <text>no</text>
  </message>
  <message conversation_id="180">
    <ts>2017-08-24T14:23:17.000092</ts>
    <user>Latarsha</user>
    <text>unless the whole module instance is collected, which is unlikely</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:24:02.000692</ts>
    <user>Rosalee</user>
    <text>Ya, that’s what I thought. Oh well. :disappointed:</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:41:11.000117</ts>
    <user>Rosalee</user>
    <text>Ahhh…I’m not setting the keep flag propertly</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:41:12.000426</ts>
    <user>Rosalee</user>
    <text>properly*</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:42:24.000436</ts>
    <user>Rosalee</user>
    <text>BTW &lt;@Vincenzo&gt; the docs say: “…not suitable for a function used multiple times as a reatined callback”</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:42:33.000306</ts>
    <user>Rosalee</user>
    <text>I presume reatined -&amp;gt; retained, yes?</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:51:55.000383</ts>
    <user>Rosalee</user>
    <text>Oh wait, no. the function you can’t call multiple times is the set-callback function, not the callback itself.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T14:52:13.000277</ts>
    <user>Rosalee</user>
    <text>Which means hmmph. I’m back to not know why I’m segfaulting. Thanks anyway. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="181">
    <ts>2017-08-24T15:19:01.000553</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; I have a program that seems to expand differently in a sandbox vs. in a “real” top level REPL. Is this expected? Are the differences documented anywhere?</text>
  </message>
  <message conversation_id="181">
    <ts>2017-08-24T16:17:01.000123</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; That shouldn't normally happen, but it would be difficult to list all the ways that a namespace can be configured differently. Can you provide an example?</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:18:34.000014</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Are you working in DrRacket or plain Racket? Going back to your earlier example, a `(displayln "here")` definitely wouldn't work in atomic mode in DrRacket, and it's not ok in general, so the crash could be something like that.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:25:06.000210</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; plain cmdline racket.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:25:26.000181</ts>
    <user>Rosalee</user>
    <text>I thought it was only in automic mode if you give it  `#:automic? #t`</text>
  </message>
  <message conversation_id="181">
    <ts>2017-08-24T16:25:51.000085</ts>
    <user>Vincenzo</user>
    <text>The `#:async-apply` callback is always in atomic mode</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:26:06.000277</ts>
    <user>Rosalee</user>
    <text>Ah okay.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:26:33.000385</ts>
    <user>Rosalee</user>
    <text>Hmm…so I recompiled ffmpeg with pthreads explicitly disabled. And I”m still getting segfaults. So its probably something else.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:28:59.000131</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; FWIW, here is the C half of the call:
```
void (*racket_log_callback)(void*, int, const char*) = NULL;

void set_racket_log_callback(void (*callback)(void*, int, const char*)) {
  racket_log_callback = callback;
}
```</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:29:31.000084</ts>
    <user>Rosalee</user>
    <text>And then later on:
```
void ffmpeg_log_callback(void * avcl,  int level, const char * fmt, va_list vl) {
  int buffsize;
  char *buff;
  ...
  buffsize = ...
  buff = malloc((buffsize + 1) * sizeof(char));
  vsnprintf(buff, buffsize + 1, fmt, vl);
  if(racket_log_callback) {
    racket_log_callback(avcl, level, buff);
  } else {
    free(buff);
  }
}
```</text>
  </message>
  <message conversation_id="181">
    <ts>2017-08-24T16:32:21.000247</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; I am having a hard time coming up with a way to reduce it to a minimal test case, but it happens with some Hackett code.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:33:14.000353</ts>
    <user>Kimbery</user>
    <text>I’m starting a REPL with `racket -iI hackett` and running the same code as with a sandbox created with `(make-evaluator 'hackett #:require '((submod hackett configure-runtime)))`.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:37:31.000347</ts>
    <user>Rosalee</user>
    <text>OH…interesting. If I call the callback within the function (rather than storing it for later), it works out just fine…</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:37:45.000478</ts>
    <user>Rosalee</user>
    <text>It seems to be the `racket_log_callback = callback` that is problematic.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:38:24.000175</ts>
    <user>Rosalee</user>
    <text>Which is odd because the function being passed in is a module level function.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:39:49.000520</ts>
    <user>Rosalee</user>
    <text>AH, okay.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:40:01.000538</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; It looks like a module level variable WILL get GCed.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:40:06.000384</ts>
    <user>Rosalee</user>
    <text>And I suspect its a phase issue.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:42:56.000535</ts>
    <user>Latarsha</user>
    <text>Right, if the whole module instance itself is collected</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:45:34.000424</ts>
    <user>Rosalee</user>
    <text>Yup, but it seems like it happens as part of compilation.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:45:43.000112</ts>
    <user>Rosalee</user>
    <text>Although that _could_ just be something strange I’m doing with my setup.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:45:47.000359</ts>
    <user>Rosalee</user>
    <text>Its hard for me to tell.</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:45:50.000079</ts>
    <user>Rosalee</user>
    <text>Anyway, thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T16:53:47.000576</ts>
    <user>Rosalee</user>
    <text>Now if only I could attach a will to a module itself…</text>
  </message>
  <message conversation_id="182">
    <ts>2017-08-24T18:37:37.000244</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; I managed to get a test case:
```
#lang racket

(require racket/sandbox
         syntax/location)

(module forms racket
  (require (for-syntax racket/syntax)
           syntax/parse/define)

  (provide mac1)

  (define-syntax-parser mac1
    [(_)
     #:with id (generate-temporary)
     #'(define id (mac2 id))])

  (define-syntax-parser mac2
    [(_ id:id)
     (local-expand #'id 'expression '())
     #'(displayln "mac2" (current-error-port))]))

; works, prints "mac2"
(void (make-evaluator 'racket/base #:requires (list (quote-module-path forms)) '(mac1)))

; fails
(void ((make-evaluator 'racket/base #:requires (list (quote-module-path forms))) '(mac1)))
```</text>
  </message>
  <message conversation_id="179">
    <ts>2017-08-24T18:38:21.000255</ts>
    <user>Kimbery</user>
    <text>Adjusting the expansion of `mac1` to use the `(define-syntaxes (id) (values))` hack makes both work. But the fact that there is a difference is mysterious!</text>
  </message>
  <message conversation_id="182">
    <ts>2017-08-24T19:44:09.000092</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; I see that this is yet another case where `racket7` seems to behave better, so it's likely a bug in `module-&amp;gt;namespace` handling in the current `racket`; I should be able to look into it more tomorrow</text>
  </message>
  <message conversation_id="182">
    <ts>2017-08-24T19:49:36.000058</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; No worries, I worked around it with a `define-syntaxes` forward declaration (and I would like to support existing Racket versions, anyway). Cool to see that racket7 is better here, though. :)</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:18:44.000185</ts>
    <user>Rosalee</user>
    <text>Is it possible to get a conversion from slideshow pixels to your OS+Monitors pixels?</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:18:58.000169</ts>
    <user>Rosalee</user>
    <text>Like, as a function or just a number.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:19:14.000035</ts>
    <user>Rosalee</user>
    <text>I ask because I need to convert a slideshow rect into an interactive rect.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:19:22.000353</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; or &lt;@Tina&gt; one of you might know?</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:20:27.000001</ts>
    <user>Rosalee</user>
    <text>I see `size-in-pixels`, but that looks like its going the other way</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:21:33.000069</ts>
    <user>Tina</user>
    <text>Interactive's argument gets a frame. Fill it with a canvas. The canvas will be the right size</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:21:54.000038</ts>
    <user>Tina</user>
    <text>I don't believe you have to do any conversion. </text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:21:57.000280</ts>
    <user>Tina</user>
    <text>At least I don't. </text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:22:46.000218</ts>
    <user>Rosalee</user>
    <text>Interesting. Do you think that is also true for an opengl canvas?</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:23:05.000219</ts>
    <user>Rosalee</user>
    <text>(I say that because I’m getting OpenGL contexts of a different sizes.)</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:23:25.000026</ts>
    <user>Rosalee</user>
    <text>Depending on the pixel density of the monitor I’m using.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:24:13.000217</ts>
    <user>Rosalee</user>
    <text>Where a lower pixel density producers a smaller image…</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:24:28.000292</ts>
    <user>Rosalee</user>
    <text>(Or larger, I forget which way is which, but either way, it is consistent.)</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:24:42.000064</ts>
    <user>Rosalee</user>
    <text>Ah, higher is smaller.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:25:04.000433</ts>
    <user>Tina</user>
    <text>I haven't tried opengl </text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:25:28.000415</ts>
    <user>Rosalee</user>
    <text>Alright, thanks anyway. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:32:30.000067</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; The `canvas%` class provides a `get-gl-client-size` method</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:33:10.000592</ts>
    <user>Vincenzo</user>
    <text>You can compare that result to the `get-client-size` result</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:37:18.000087</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Oh cool thanks.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:45:08.000060</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; oh ineresting, they appear to be the same numbers.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T10:46:24.000427</ts>
    <user>Rosalee</user>
    <text>Its still kindof odd I only get this problem with slideshow. Like when I use a canvas outside of slideshow it is scaled as expected.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T11:04:39.000190</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; According to both `get-gl-client-size` and `get-client-size`, the size of the `canvas%` is 450x300</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T11:05:25.000589</ts>
    <user>Rosalee</user>
    <text>BUT, the actual amount of pixels given ~1.5x as much, at about 600x400</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T11:05:49.000071</ts>
    <user>Rosalee</user>
    <text>So it looks like `get-client-size` is still giving me the scaled amount, rather then the actual physical amount.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T11:09:25.000294</ts>
    <user>Rosalee</user>
    <text>Odd…even `get-scaled-client-size` returns 450x300.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T11:11:20.000131</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; AH, okay, I got it.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T11:11:41.000224</ts>
    <user>Rosalee</user>
    <text>It looks like the `interactive` call actually allocates a frame that can have a different resolution than the one you requested.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T11:11:56.000314</ts>
    <user>Rosalee</user>
    <text>And so you should base it off of the given width and height, rather than the one you requested.</text>
  </message>
  <message conversation_id="183">
    <ts>2017-08-25T11:12:00.000446</ts>
    <user>Rosalee</user>
    <text>That worked. Thanks.</text>
  </message>
  <message conversation_id="184">
    <ts>2017-08-25T14:36:38.000270</ts>
    <user>Kimbery</user>
    <text>is there a faster way to read from an input port until a nul byte besides looping with `read-byte`?</text>
  </message>
  <message conversation_id="184">
    <ts>2017-08-25T14:37:09.000354</ts>
    <user>Kimbery</user>
    <text>I don’t know if that is slow, per se, but I’m not sure if there is a better way</text>
  </message>
  <message conversation_id="184">
    <ts>2017-08-25T14:38:56.000310</ts>
    <user>Kimbery</user>
    <text>I guess `read-bytes-avail!*` could be faster if I really needed maximum speed, but that would make it possible to over-read, while `read-line` only ever reads up to a newline?</text>
  </message>
  <message conversation_id="184">
    <ts>2017-08-25T14:41:45.000524</ts>
    <user>Marlin</user>
    <text>Yeah, my recollection is that reading a byte at a time *is* pretty slow in Racket, comparatively. A fast-as-possible solution (without over-reading) might involve `peak-bytes-avail!`... maybe... Haven't tried it.</text>
  </message>
  <message conversation_id="184">
    <ts>2017-08-25T14:43:14.000113</ts>
    <user>Kimbery</user>
    <text>it probably doesn’t matter much for what I’m working on, since this is just a little script I’m running myself, but it would be nice to shave this yak :)</text>
  </message>
  <message conversation_id="184">
    <ts>2017-08-25T14:47:55.000096</ts>
    <user>Kimbery</user>
    <text>I think the easiest way to do it, from a programming-effort POV, might actually be to use a regexp.</text>
  </message>
  <message conversation_id="184">
    <ts>2017-08-25T14:56:08.000182</ts>
    <user>Kimbery</user>
    <text>yes, `(regexp-match (byte-pregexp #"^([^\0]*)\0") port)` seems to work, and it’s definitely fast enough for my needs :)</text>
  </message>
  <message conversation_id="185">
    <ts>2017-08-25T17:16:31.000195</ts>
    <user>Magnolia</user>
    <text>Is it just me or is the &lt;#C088CK7J6|irc&gt; bridge not actually working?</text>
  </message>
  <message conversation_id="185">
    <ts>2017-08-25T17:21:17.000185</ts>
    <user>Chantelle</user>
    <text>&lt;@Magnolia&gt; I think it's been semi-broken for a while, with intermittent spurts of actually working</text>
  </message>
  <message conversation_id="185">
    <ts>2017-08-25T17:21:41.000133</ts>
    <user>Chantelle</user>
    <text>does anyone know who maintains it?</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-25T21:35:42.000055</ts>
    <user>Rosalee</user>
    <text>Is there any way to run code right before a module instance gets collected?</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-25T21:36:21.000017</ts>
    <user>Rosalee</user>
    <text>I don’t care if it doesn’t get run and the program stops, I just want to inform some FFI code that a closure that was once available no longer is.</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-25T21:36:58.000073</ts>
    <user>Rosalee</user>
    <text>About all I got right now is have a will executor attached to a variable in the module, and hope that it will only get collected when the module itself is collected.</text>
  </message>
  <message conversation_id="187">
    <ts>2017-08-25T22:02:21.000053</ts>
    <user>Latarsha</user>
    <text>Why can't you attach the will-executor to the thing you're concerned about?</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-25T23:48:16.000003</ts>
    <user>Rosalee</user>
    <text>Ah, okay, that should work. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-26T10:51:27.000092</ts>
    <user>Rosalee</user>
    <text>If I have a null terminated char * in C, is there any good way to hand it to Racket?</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-26T10:52:01.000067</ts>
    <user>Rosalee</user>
    <text>(Like, give ownership of it to Racket, so that it doesn’t need to get freed on the C side)</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-26T10:52:55.000011</ts>
    <user>Rosalee</user>
    <text>Right now all I’ve got is using _bytes. But once I try to convert those bytes to a string, I get segfaults.  But if I keep it as bytes I’m not seeing segfaults.</text>
  </message>
  <message conversation_id="188">
    <ts>2017-08-26T13:51:30.000099</ts>
    <user>Corey</user>
    <text>I feel like I'm dancing on the edge of what I actually understand, and into "it works (?)" territory. Would welcome any feedback. &lt;https://github.com/greghendershott/racket-mode/blob/e87400982ba34dae5eaa619d3b63a535a080da08/namespace.rkt&gt;</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-26T22:52:11.000039</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Do asynch-channels not play well with the apply-async parameter in the FFI?</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-27T09:15:56.000060</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Async channels (or any operations that can block) cannot be used in atomic mode</text>
  </message>
  <message conversation_id="186">
    <ts>2017-08-27T09:20:02.000069</ts>
    <user>Vincenzo</user>
    <text>For your earlier question, if a C function returns a string that needs to be `free`d, then the only way to push the call to `free` to Racket's responsibility is to use a finalizer</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T14:21:27.000063</ts>
    <user>Tana</user>
    <text>have a super noob `raco` question but the docs don't help me. How do I get `raco setup` to install dependent packages from `info.rkt`?</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:02:40.000060</ts>
    <user>Chantelle</user>
    <text>&lt;@Tana&gt; `raco setup` only compiles files and collections, it doesn't know anything about packages, you need to use `raco pkg install` for that</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:02:53.000044</ts>
    <user>Chantelle</user>
    <text>`raco pkg install --link /some/dir` will let you install a local package</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:03:10.000006</ts>
    <user>Chantelle</user>
    <text>and using the `--auto` flag will automatically install all dependencies (by default it prompts you asking if you want to install them)</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:03:36.000029</ts>
    <user>Tana</user>
    <text>thinking of a way to be able to scan `info.rkt` for `deps` and pass them to `raco pkg install`</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:03:55.000038</ts>
    <user>Chantelle</user>
    <text>`raco pkg install` should do that automatically</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:04:02.000056</ts>
    <user>Tana</user>
    <text>hmm ok</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:04:38.000050</ts>
    <user>Chantelle</user>
    <text>if you've _already_ installed the package and then _added_ new dependencies to `info.rkt` though, I think you need to do something with `raco pkg update` instead</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:05:16.000070</ts>
    <user>Tana</user>
    <text>ok, for some reason never grokked that from the docs</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:05:38.000111</ts>
    <user>Chantelle</user>
    <text>the docs for package management and installation for package authors could use some better organization</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:06:17.000058</ts>
    <user>Kimbery</user>
    <text>imo it’s something of an oversight that `raco setup` does not ensure deps are still properly installed, even if a local `info.rkt` file changes after the package is initially installed</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:06:33.000019</ts>
    <user>Kimbery</user>
    <text>only `raco pkg install` and `raco pkg update` will check for missing deps</text>
  </message>
  <message conversation_id="189">
    <ts>2017-08-27T17:06:58.000049</ts>
    <user>Chantelle</user>
    <text>and it's even weirder because `raco setup` can check to see if your packages have missing deps...</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:21:24.000230</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Thank you, that makes sense. (Although fwiw I was using an async channel without a limit).</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:21:59.000104</ts>
    <user>Rosalee</user>
    <text>It just seems like its really easy to cause Racket to segfault when making callbacks. Although that ‘might’ just be ffmpeg.</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:38:23.000262</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt;

&amp;gt; Video v0.2-beta is now mature enough for programmers to reliably use it without segfaults. This is significant because it means Video is now one of the most stable open source video production tools available.

is the tool ecosystem for this really that bad? dang</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:41:17.000423</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; Sadly.</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:41:21.000326</ts>
    <user>Rosalee</user>
    <text>(The open source ones.)</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:41:25.000009</ts>
    <user>Rosalee</user>
    <text>Blender is stable.</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:41:28.000317</ts>
    <user>Rosalee</user>
    <text>The rest….less so.</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:41:43.000062</ts>
    <user>Rosalee</user>
    <text>(I guess ffmpeg is also pretty stable, if you like writing shell scripts. :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:42:04.000416</ts>
    <user>Chantelle</user>
    <text>guess that's proof you're working on something very useful then :p</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:42:18.000412</ts>
    <user>Rosalee</user>
    <text>True.</text>
  </message>
  <message conversation_id="190">
    <ts>2017-08-28T13:42:35.000010</ts>
    <user>Rosalee</user>
    <text>I want to add a nice GUI editor next.</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T18:36:02.000152</ts>
    <user>Jacob</user>
    <text>I'm reading the `Super 8 Languages for Making Movies` paper, very nice description of DSL making process!</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T18:37:06.000089</ts>
    <user>Jacob</user>
    <text>I especially like the explanation of the special syntax interposition points, very helpful</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T18:42:13.000359</ts>
    <user>Georgeanna</user>
    <text>is the package site broken? &lt;https://pkgd.racket-lang.org/pkgn/search?q=dotenv+&gt;</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T18:43:35.000126</ts>
    <user>Jacob</user>
    <text>&lt;@Georgeanna&gt; it doesn't seem to be loading for me either</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T18:46:56.000091</ts>
    <user>Jacob</user>
    <text>&lt;@Rosalee&gt; a question about Figure 8 line 3 in the `Super 8 Languages for Making Movies` paper, the paragraphs accompanying the figure makes me think line 3 should read as `(provide (rename-out [#%video-module-begin #%module-begin])` instead of `(provide (rename-out [#%video-module-begin module-begin])`?</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T18:47:12.000006</ts>
    <user>Jacob</user>
    <text>or is `module-begin` automatically prefixed with #%?</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T19:35:13.000149</ts>
    <user>Rosalee</user>
    <text>&lt;@Jacob&gt; ugg.....yes, yes it should.</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T19:35:23.000201</ts>
    <user>Rosalee</user>
    <text>Thank you for catching that.</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T19:37:23.000040</ts>
    <user>Rosalee</user>
    <text>Looks like I need to make an errata page.</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T19:40:28.000198</ts>
    <user>Jacob</user>
    <text>No problem, sorry to have added to your plate!</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T19:50:18.000028</ts>
    <user>Rosalee</user>
    <text>Nah, it's great. I would rather know about it, to improve the paper. So thanks for catching it. :)</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T19:50:47.000111</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; so hyped for the #lang video talk :)</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T20:01:24.000273</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; I am too.  ^.^ I hope to have v0.2 out of beta for it.</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T20:01:53.000107</ts>
    <user>Rosalee</user>
    <text>(I mean, it is usable now, but I want to add more effects.(</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T20:01:56.000131</ts>
    <user>Rosalee</user>
    <text>)*</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T20:02:06.000085</ts>
    <user>Rosalee</user>
    <text>But thanks. &amp;lt;3</text>
  </message>
  <message conversation_id="191">
    <ts>2017-08-28T21:19:21.000069</ts>
    <user>Rosalee</user>
    <text>&lt;@Jacob&gt; Thanks again for reporting it, I’ve now set up an errata page: &lt;http://lang.video/pub/icfp2017/errata.html&gt;</text>
  </message>
  <message conversation_id="192">
    <ts>2017-08-28T22:01:03.000143</ts>
    <user>Karina</user>
    <text>I’m trying to walk an xexpr and insert new nodes at various points</text>
  </message>
  <message conversation_id="192">
    <ts>2017-08-28T22:01:31.000226</ts>
    <user>Karina</user>
    <text>i’ve started going down the route using `match`, but it seems more complicated than it needs to be</text>
  </message>
  <message conversation_id="192">
    <ts>2017-08-28T22:01:43.000201</ts>
    <user>Karina</user>
    <text>is there something like `map-nodes`?</text>
  </message>
  <message conversation_id="192">
    <ts>2017-08-28T22:23:07.000024</ts>
    <user>Georgeanna</user>
    <text>&lt;@Karina&gt; regular map seems to work on them just fine…</text>
  </message>
  <message conversation_id="192">
    <ts>2017-08-28T22:58:29.000211</ts>
    <user>Chantelle</user>
    <text>&lt;@Karina&gt; does the `sxml` package have what you need?</text>
  </message>
  <message conversation_id="193">
    <ts>2017-08-29T08:41:06.000308</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; seems like you could just have the version on your web page have the corrections in it</text>
  </message>
  <message conversation_id="192">
    <ts>2017-08-29T09:47:53.000280</ts>
    <user>Karina</user>
    <text>oh, i think sxml might, thanks &lt;@Chantelle&gt; ; fyi &lt;@Georgeanna&gt; yes map works fine, but i was hoping to do something like “replace every `&amp;lt;a&amp;gt;` node with a different node”, which ends  up being pretty verbose to do recursively</text>
  </message>
  <message conversation_id="193">
    <ts>2017-08-29T09:58:25.000445</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; Yup. And I will do that soon. But it also seems reasonable to point out the diffs explicitly.</text>
  </message>
  <message conversation_id="194">
    <ts>2017-08-29T10:35:22.000427</ts>
    <user>Corey</user>
    <text>At the moment, searching for `foo` on &lt;https://pkgs.racket-lang.org/&gt; goes to &lt;https://pkgd.racket-lang.org/pkgn/search?q=foo&gt; which spins for a minute before giving `502 Proxy Error`

```
Proxy Error

The proxy server received an invalid response from an upstream server.
The proxy server could not handle the request GET /pkgn/search.

Reason: Error reading from remote server

Apache/2.4.7 (Ubuntu) Server at &lt;http://pkgd.racket-lang.org|pkgd.racket-lang.org&gt; Port 443
```</text>
  </message>
  <message conversation_id="194">
    <ts>2017-08-29T10:40:49.000376</ts>
    <user>Corey</user>
    <text>Not sure if that's a bat signal for &lt;@Stefani&gt; &lt;@Sharolyn&gt; &lt;@Delmy&gt; or other</text>
  </message>
  <message conversation_id="194">
    <ts>2017-08-29T11:21:29.000606</ts>
    <user>Corey</user>
    <text>New topic. This surprised me:

```
$ echo "#lang racket" &amp;gt; lang.rkt

$ echo "(module mod racket)" &amp;gt; mod.rkt

$ racket -e '(require syntax/modread) (with-module-reading-parameterization (λ () (with-input-from-file "lang.rkt" read)))'
'(module lang racket (#%module-begin))

$ racket -e '(require syntax/modread) (with-module-reading-parameterization (λ () (with-input-from-file "mod.rkt" read)))'
'(module mod racket)
```

That is, `#lang` files get `#%module-begin` added on `read`, but module expression files do not.  Even using `with-module-reading-parameterization` and `expand-to-top-form` doesn't add `#%module-begin`.</text>
  </message>
  <message conversation_id="194">
    <ts>2017-08-29T11:21:55.000115</ts>
    <user>Corey</user>
    <text>Of course it's N/A in most cases because you'd probably `expand` that before rewriting it, like the `errortrace` and `gui-debugger` annotators do, and _that_ will add the `#%module-begin`. (I just had an odd situation where I can't `expand` the whole thing.) ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="193">
    <ts>2017-08-29T11:26:23.000125</ts>
    <user>Latarsha</user>
    <text>here, `with-module-reading-parameterization` won't change that, because `read` in the second case is really just producing some s-expressions</text>
  </message>
  <message conversation_id="193">
    <ts>2017-08-29T11:26:46.000642</ts>
    <user>Latarsha</user>
    <text>`expand-to-top-form` doesn't change that because `module` is a top-form</text>
  </message>
  <message conversation_id="193">
    <ts>2017-08-29T11:28:42.000588</ts>
    <user>Latarsha</user>
    <text>I think the difference is that the reader for `#lang` (or maybe for `racket`) adds the `#%module-begin`, not some part of `read` itself</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:11:58.000153</ts>
    <user>Georgeanna</user>
    <text>```
(define/match (board-ref . args)
  [(r c) (board-ref board (-&amp;gt;coord r c))]
  [(rc)  (hash-ref (board-b board) rc)])

;; battleship.rkt:42:3: match: wrong number of match clauses, expected 1 and got 2
;;   in: (r c)
```

clue me? I thought dotting the args was the right way to do variable arity</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:12:26.000310</ts>
    <user>Georgeanna</user>
    <text>also really confused why that is about the number of clauses… not the pattern itself?</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:15:45.000241</ts>
    <user>Chantelle</user>
    <text>I think you want `((list* r c))` instead of `(r c)`</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:15:47.000114</ts>
    <user>Marlin</user>
    <text>First, I think the number of sub-patterns in each match*-pattern needs to be the same -- and needs to be equal to the number of arguments, where the rest argument counts as 1.</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:15:54.000030</ts>
    <user>Chantelle</user>
    <text>or `((cons r c))`</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:16:03.000216</ts>
    <user>Georgeanna</user>
    <text>same as: [(\`(,r ,c)) (board-ref board (-&amp;gt;coord r c))], yes?</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:16:06.000131</ts>
    <user>Georgeanna</user>
    <text>gah</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:16:17.000350</ts>
    <user>Georgeanna</user>
    <text>damnit</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:16:28.000038</ts>
    <user>Chantelle</user>
    <text>generally I avoid quoting in match patterns, they're a complex enough grammar as is</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:16:38.000069</ts>
    <user>Chantelle</user>
    <text>unless matching against something with lots of symbolic literals I want to ignore</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:19:11.000323</ts>
    <user>Georgeanna</user>
    <text>I got tangled up rewriting this and forgot the board argument… now it passes tests:

```
(define/match (board-ref . args)
  [(`(,board . (,r ,c))) (board-ref board (-&amp;gt;coord r c))]
  [(`(,board . (,rc)))  (hash-ref (board-b board) rc)])
```</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:19:27.000344</ts>
    <user>Georgeanna</user>
    <text>I’m not sure how to say that in non-quotey form. cons… list* ?</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:20:17.000036</ts>
    <user>Marlin</user>
    <text>list-rest?</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:21:36.000023</ts>
    <user>Marlin</user>
    <text>well, the first one could just be list</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:22:28.000225</ts>
    <user>Chantelle</user>
    <text>FWIW maybe a `define/convert` utility would be appropriate:

```
(define/convert (board-ref b (rc #:convert -&amp;gt;coord))
  (hash-ref (board-b board rc)))
```</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:23:14.000204</ts>
    <user>Georgeanna</user>
    <text>I’ve never seen that… cool, thanks</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:23:30.000073</ts>
    <user>Georgeanna</user>
    <text>wait. I’ve never seen that because it doesn’t exist?</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:23:40.000003</ts>
    <user>Chantelle</user>
    <text>it doesn't, I'm hypothesizing</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:23:44.000035</ts>
    <user>Georgeanna</user>
    <text>haha</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:23:52.000226</ts>
    <user>Chantelle</user>
    <text>I don't think it'd be tricky to make though</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:26:08.000279</ts>
    <user>Chantelle</user>
    <text>oh wait you're using multiple arguments to mean a list?</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:26:21.000007</ts>
    <user>Georgeanna</user>
    <text>ok. they can both be plain list patterns… that does seem cleaner</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:26:34.000325</ts>
    <user>Chantelle</user>
    <text>how is `board-ref` supposed to be called exactly? either `(board-ref b r c)` or `(board-ref b coord)`?</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:27:09.000026</ts>
    <user>Georgeanna</user>
    <text>```
(define/match (board-ref . args)
  [((list board r c)) (board-ref board (-&amp;gt;coord r c))]
  [((list board rc))  (hash-ref (board-b board) rc)])

;; vs

(define/match (board-ref . args)
  [(`(,board ,r ,c)) (board-ref board (-&amp;gt;coord r c))]
  [(`(,board ,rc))  (hash-ref (board-b board) rc)])
```</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:27:46.000189</ts>
    <user>Georgeanna</user>
    <text>yes, both. I’m gonna have to use one for a wire protocol and don’t want to write `string-&amp;gt;coords` but I want to write clean and easy tests and internal playtesting</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:29:40.000354</ts>
    <user>Georgeanna</user>
    <text>is there a parameter or something to un-truncate test failure output?</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:30:09.000103</ts>
    <user>Chantelle</user>
    <text>for rackunit? how is your output being truncated?</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:31:13.000321</ts>
    <user>Georgeanna</user>
    <text>the error coming up for match failures includes the call args, which is a 10x10 board… but the tail is the important part for me</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:31:27.000072</ts>
    <user>Chantelle</user>
    <text>ohhh</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:31:33.000046</ts>
    <user>Georgeanna</user>
    <text>moot point now, but I’d like to roll that up in some handler</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:31:53.000303</ts>
    <user>Chantelle</user>
    <text>I'd be surprised if there's a way to do that at all</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:32:13.000370</ts>
    <user>Chantelle</user>
    <text>you could make your board print differently with `gen:custom-write`</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:32:23.000045</ts>
    <user>Georgeanna</user>
    <text>boo</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:33:54.000133</ts>
    <user>Chantelle</user>
    <text>huh, there's no `define/case` built in to racket for use with `case-lambda`</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:35:14.000151</ts>
    <user>Georgeanna</user>
    <text>huh. haven’t used that one either… not sure when I’d want to pick that over the match one</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:36:32.000105</ts>
    <user>Chantelle</user>
    <text>`case-lambda` will report better arity information in this case</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:37:08.000050</ts>
    <user>Chantelle</user>
    <text>the `define/match` form constructs a function with an arity claiming to accept any number of arguments, but I think `case-lambda` is smarter than that and makes a function that knows it accepts either two or three arguments</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:37:48.000144</ts>
    <user>Chantelle</user>
    <text>```
(define-simple-macro
  (define/case f:id (~and clause [(arg:id ...) body:expr ...+]) ...)
  (define f (case-lambda clause ...)))

(define/case board-ref
  [(b r c) (board-ref b (-&amp;gt;coord r c))]
  [(b rc)  (hash-ref (board-b b) rc)])
```</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:40:52.000150</ts>
    <user>Georgeanna</user>
    <text>yeah.. the arity mismatch message truncates the one arg and shows the rest. that’s nice</text>
  </message>
  <message conversation_id="195">
    <ts>2017-08-29T18:40:56.000091</ts>
    <user>Georgeanna</user>
    <text>```
(define-simple-macro (define/case name (formals body ...+) ...)
  (define name (case-lambda [formals body ...] ...)))

(define/case board-ref2
  [(board r c) (board-ref2 board (-&amp;gt;coord r c))]
  [(board rc)  (hash-ref (board-b board) rc)])
```</text>
  </message>
  <message conversation_id="196">
    <ts>2017-08-29T19:12:10.000115</ts>
    <user>Georgeanna</user>
    <text>Is there a cleaner/better way of saying either of these things?

```
(define (board-&amp;gt;string board)
  (string-join
   (for/list ([r (in-list rows)])
     (string-join
      (for/list ([c (in-list cols)])
        (-&amp;gt;marker (board-ref board r c)))))
   "\n"))

(module+ test
  (check-equal? (board-&amp;gt;string (make-board))
                (string-join
                 (for/list ([r (in-list rows)])
                   ". . . . . . . . . .")
                 "\n")))
```</text>
  </message>
  <message conversation_id="196">
    <ts>2017-08-29T19:12:34.000084</ts>
    <user>Georgeanna</user>
    <text>I want to have something like `build-string` that takes a proc that returns strings (or just a string duplicated N times)</text>
  </message>
  <message conversation_id="196">
    <ts>2017-08-29T19:12:51.000115</ts>
    <user>Georgeanna</user>
    <text>Basically Ruby’s `String#*`</text>
  </message>
  <message conversation_id="196">
    <ts>2017-08-29T19:13:01.000196</ts>
    <user>Georgeanna</user>
    <text>but `board-&amp;gt;string` also feels stilted</text>
  </message>
  <message conversation_id="196">
    <ts>2017-08-29T20:39:58.000014</ts>
    <user>Georgeanna</user>
    <text>there’s a bug in GUI’s rectangles:

```
(require racket/gui/base)

(define (draw-box broken)
  (define canvas (make-bitmap 51 28))
  (define dc (send canvas make-dc))

  (send dc set-brush "WhiteSmoke" 'solid)

  (send dc set-pen "black" (if broken 1 2) 'long-dash)

  (send dc draw-rectangle 1 1 50 25)

  canvas)

(printf "only dashed on the sides:~n")
(draw-box 'broken)
(printf "correctly dashed, but needs to be 2x wide:~n")
(draw-box #f)
```</text>
  </message>
  <message conversation_id="196">
    <ts>2017-08-29T20:56:16.000107</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; there might be a way to use `math/array` to do that more cleanly, but it might also be a hassle</text>
  </message>
  <message conversation_id="197">
    <ts>2017-08-29T21:48:13.000181</ts>
    <user>Chantelle</user>
    <text>are all packages in the main distribution hosted in github repos under the "racket" organization?</text>
  </message>
  <message conversation_id="197">
    <ts>2017-08-29T21:51:35.000029</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; there are maybe a couple exceptions</text>
  </message>
  <message conversation_id="197">
    <ts>2017-08-29T21:52:33.000088</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; if new packages were added to the main distribution though, they'd go under the racket org?</text>
  </message>
  <message conversation_id="197">
    <ts>2017-08-29T21:53:07.000028</ts>
    <user>Latarsha</user>
    <text>that depends if they already existed someewhere else</text>
  </message>
  <message conversation_id="197">
    <ts>2017-08-29T21:53:15.000171</ts>
    <user>Latarsha</user>
    <text>in which case they would maybe stay there</text>
  </message>
  <message conversation_id="197">
    <ts>2017-08-29T21:53:26.000191</ts>
    <user>Latarsha</user>
    <text>there aren't really any rules here</text>
  </message>
  <message conversation_id="197">
    <ts>2017-08-29T21:57:23.000062</ts>
    <user>Chantelle</user>
    <text>gotcha</text>
  </message>
  <message conversation_id="198">
    <ts>2017-08-30T05:01:16.000295</ts>
    <user>Audria</user>
    <text>I'd love to do a HtDP certified course on a MOOC one day. What are the chances of something like that happening?</text>
  </message>
  <message conversation_id="197">
    <ts>2017-08-30T10:36:41.000254</ts>
    <user>Latarsha</user>
    <text>&lt;@Audria&gt; &lt;https://courses.edx.org/courses/course-v1:UBCx+SPD1x+2T2016/course/&gt;</text>
  </message>
  <message conversation_id="199">
    <ts>2017-08-30T19:30:16.000206</ts>
    <user>Corey</user>
    <text>re the "tan boxes" in docs -- that say e.g. `(require foo)    package: foo-lib` -- is there a plan for `foo-lib` to be a hyperlink back to the package server?</text>
  </message>
  <message conversation_id="199">
    <ts>2017-08-30T19:30:48.000019</ts>
    <user>Latarsha</user>
    <text>&lt;@Corey&gt; I think it would be nice -- does that count as a plan? :wink:</text>
  </message>
  <message conversation_id="199">
    <ts>2017-08-30T19:30:52.000093</ts>
    <user>Corey</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="199">
    <ts>2017-08-30T19:31:40.000133</ts>
    <user>Corey</user>
    <text>I keep stumbling on things searching in the docs, that look interesting, and it's a little unclear today what "comes with Racket" vs. is a separate package. Also lazy me wants to just click to learn more about the author, see the source, etc.</text>
  </message>
  <message conversation_id="199">
    <ts>2017-08-30T19:32:17.000031</ts>
    <user>Corey</user>
    <text>I didn't know if this was missing on purpose, because it's tricky or difficult, vs. just not done yet</text>
  </message>
  <message conversation_id="199">
    <ts>2017-08-30T19:32:39.000111</ts>
    <user>Latarsha</user>
    <text>I think the unclarity about what "comes with Racket" is somewhat intentional</text>
  </message>
  <message conversation_id="199">
    <ts>2017-08-30T19:32:52.000079</ts>
    <user>Latarsha</user>
    <text>and the rest is just not done yet</text>
  </message>
  <message conversation_id="199">
    <ts>2017-08-30T19:33:01.000150</ts>
    <user>Corey</user>
    <text>Fair enough. But then, "comes from where" is still interesting, to me :slightly_smiling_face:</text>
  </message>
  <message conversation_id="199">
    <ts>2017-08-30T19:34:12.000176</ts>
    <user>Corey</user>
    <text>I'll see if this is something I could try to help with, although atm I already have several engines spread across several garage floors so maybe I shouldn't try to take on another right now.</text>
  </message>
  <message conversation_id="200">
    <ts>2017-08-30T23:33:26.000016</ts>
    <user>Chantelle</user>
    <text>how do you tell scribble that an identifier is exported from two modules? in my case, one module reprovides everything from a bundle of modules</text>
  </message>
  <message conversation_id="201">
    <ts>2017-08-31T07:53:17.000091</ts>
    <user>Audria</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="201">
    <ts>2017-08-31T07:55:43.000007</ts>
    <user>Audria</user>
    <text>Seems I have missed enrollment. Does it repeat each year?</text>
  </message>
  <message conversation_id="202">
    <ts>2017-08-31T08:09:46.000244</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; How did you resolve the `\renewcommand{\rmdefault}{ptm}` problem with acmart? I wonder whether it makes sense to add `\renewcommand{\renewrmdefault}{}` to "acmart-load.tex".</text>
  </message>
  <message conversation_id="203">
    <ts>2017-08-31T09:52:24.000120</ts>
    <user>Latarsha</user>
    <text>I don't know -- it looked to me like it was in the future</text>
  </message>
  <message conversation_id="200">
    <ts>2017-08-31T11:39:32.000739</ts>
    <user>Corey</user>
    <text>Oh wow. I went to file an issue and discovered this from four days ago: &lt;https://github.com/racket/scribble/issues/135&gt; &lt;@Chantelle&gt; what is this remote mind control you are doing to me :open_mouth:</text>
  </message>
  <message conversation_id="200">
    <ts>2017-08-31T11:46:31.000248</ts>
    <user>Chantelle</user>
    <text>&lt;@Corey&gt; I finally got my future vision machine working ;)</text>
  </message>
  <message conversation_id="200">
    <ts>2017-08-31T11:54:50.000638</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; For scribble and exporting from two modules: you probably want to use `#:no-declare` with `defmodule` and use `declare-exporting` to list multiple modules (instead of having `defmodule` generate a `declare-exporting` with a single module)</text>
  </message>
  <message conversation_id="200">
    <ts>2017-08-31T11:57:18.000745</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; thanks!</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T15:24:33.000183</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Is there any easy way to change the font on comments in scribble?</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T15:24:37.000104</ts>
    <user>Rosalee</user>
    <text>errr. slideshow.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T15:25:07.000227</ts>
    <user>Rosalee</user>
    <text>I mean, I know I could just put a pict in there, but then I have to manually handle multiple lines.)</text>
  </message>
  <message conversation_id="205">
    <ts>2017-08-31T16:30:08.000471</ts>
    <user>Chantelle</user>
    <text>should I default to using `protect-out` on macros in public APIs? is there a reason not to for specific kinds of macros?</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T18:02:51.000385</ts>
    <user>Tilda</user>
    <text>&lt;@Vincenzo&gt; &lt;@Rosalee&gt; What's the current status of DrRacket 6.10 on Win10Creators?  Is it stable enough that I should direct students to install it, or should I still direct them to Leif's workaround (&lt;http://prl.ccs.neu.edu/blog/2017/05/26/racket-6-9-and-windows-10-creators-update/&gt;) -- and if so, Leif, is there a version of this vm with 6.10 installed?</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T18:20:41.000350</ts>
    <user>Vincenzo</user>
    <text>&lt;@Tilda&gt; I think Robby's most recent workaround (included in 6.10) is effective for everyone. At least, I don't know of anyone still having trouble with 6.10 and Windows Creator Update</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T18:20:59.000182</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; I don't recall a way to change the style of comments</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T18:21:45.000137</ts>
    <user>Tilda</user>
    <text>Thanks.  I'll holler if I find any :wink:</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T18:30:43.000095</ts>
    <user>Carson</user>
    <text>I had 2 problems with DrRacket 6.10 on Windows 10:</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T18:30:56.000209</ts>
    <user>Carson</user>
    <text>1. unknown certificate</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T18:31:30.000126</ts>
    <user>Carson</user>
    <text>2. "Copy from version" crashing DrRacket every time it was run</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T18:33:30.000114</ts>
    <user>Carson</user>
    <text>1st is not a big deal but 2nd is problematic if you don't want to start with vanilla installation</text>
  </message>
  <message conversation_id="204">
    <ts>2017-08-31T22:56:04.000066</ts>
    <user>Latarsha</user>
    <text>&lt;@Carson&gt; I don't think the second has been reported</text>
  </message>
  <message conversation_id="206">
    <ts>2017-08-31T22:56:17.000028</ts>
    <user>Latarsha</user>
    <text>So a bug report would be a good idea</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T03:02:19.000289</ts>
    <user>Carson</user>
    <text>&lt;@Latarsha&gt; it has been reported on 2nd of August: &lt;https://github.com/racket/drracket/issues/131&gt;</text>
  </message>
  <message conversation_id="207">
    <ts>2017-09-01T07:33:43.000114</ts>
    <user>Yevette</user>
    <text>Could anyone with more experience using WebSockets and custodians take a look at this issue &lt;https://github.com/tonyg/racket-rfc6455/issues/7&gt; and the corresponding pull request? Thanks. /cc &lt;@Sharolyn&gt;</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T09:54:53.000004</ts>
    <user>Latarsha</user>
    <text>&lt;@Carson&gt; If that's your report, more detail would be great</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T10:01:22.000152</ts>
    <user>Carson</user>
    <text>&lt;@Latarsha&gt; is there a way to force the migration again (I have all packages migrated now) or do I need to reinstall Racket?</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T10:02:12.000110</ts>
    <user>Latarsha</user>
    <text>&lt;@Carson&gt; I'm not sure</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T10:02:36.000107</ts>
    <user>Carson</user>
    <text>Ok, I will try reinstall</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T11:35:12.000043</ts>
    <user>Carson</user>
    <text>&lt;@Latarsha&gt; it appears some individual package installation is sufficient to crash DrRacket - I just did it with installing racketscript from gui</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T11:35:29.000031</ts>
    <user>Carson</user>
    <text>more details on the github issue</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T11:35:35.000152</ts>
    <user>Latarsha</user>
    <text>great, thanks</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T11:35:53.000490</ts>
    <user>Latarsha</user>
    <text>what happens if you remove and then reinstall that pkg from the command line with `raco pkg install`?</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T11:40:59.000078</ts>
    <user>Carson</user>
    <text>command line install works with no problem/no errors</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T11:41:08.000548</ts>
    <user>Latarsha</user>
    <text>ok good to know</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T11:58:44.000017</ts>
    <user>Carson</user>
    <text>&lt;@Latarsha&gt; I've just tried to install Racketscript from command line again this time with no administrative rights for cmd.exe - it resulted in access violation. If that's the main issue then running DrRacket with administrative rights didn't help to alleviate problem.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T11:59:28.000118</ts>
    <user>Latarsha</user>
    <text>&lt;@Carson&gt; I doubt that I can figure out further what's going on -- probably &lt;@Vincenzo&gt; or &lt;@Tina&gt; would need to take a look, and I think they're both traveling today</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T12:00:21.000438</ts>
    <user>Carson</user>
    <text>No worries - I am fine with my installation, just tried to narrow down the problem.</text>
  </message>
  <message conversation_id="208">
    <ts>2017-09-01T12:34:42.000280</ts>
    <user>Natosha</user>
    <text>&lt;@Chantelle&gt; No, `protect-out` is for preventing untrusted/restricted code (eg in a sandbox) from importing things that would let them break out of the sandbox, crash the Racket process, etc. For example, `ffi/unsafe` and `racket/unsafe/ops` protect most of their exports (although it's hard to tell from the source, since most of the exports are just re-provided from built-in modules). Were you thinking of `syntax-protect` instead?</text>
  </message>
  <message conversation_id="208">
    <ts>2017-09-01T13:25:03.000540</ts>
    <user>Chantelle</user>
    <text>&lt;@Natosha&gt; ah yes that's the one I was thinking of, I got the two mixed up</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:28:03.000068</ts>
    <user>Kimbery</user>
    <text>I admit I don’t know the syntax arming system as well as I probably should. Hackett’s typeclass dictionary elaborator currently works by recursively taking syntax objects apart and putting them back together again, and I’m pretty sure that will break on code that refers to macros that use `syntax-protect`.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:29:33.000364</ts>
    <user>Jacob</user>
    <text>I'd be interested in any references explaining the motivating reasons for having a syntax arming system, I've browsed through the online documentation but don't really understand the purpose of having such a feature.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:30:28.000464</ts>
    <user>Jacob</user>
    <text>It seems weird to me that syntax could be dangerous but then you have people hacking strange things people least expect to be a threat</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:32:12.000099</ts>
    <user>Kimbery</user>
    <text>The purpose is so that macros can serve as safe abstraction barriers. For example, a macro can expand to some identifier that is not exported by a module, call it `private-id`. The module that defines the macro may expect that users will never be able to call `private-id` directly, since the macro enforces some invariants that could be broken if `private-id` were invoked on its own.

A naughty/malicious user could expand a use of the macro using `local-expand`, then break the syntax object apart and pull out the `private-id` syntax object. That identifier could then be placed within another syntax object, allowing the malicious user to use `private-id` without conforming to the invariants enforced by the macro.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:33:19.000067</ts>
    <user>Kimbery</user>
    <text>The syntax arming system prevents that from happening, since the macro author can protect the syntax object with a code inspector that a malicious user will not have access to. That way, breaking apart the syntax object will taint the resulting syntax, and the user will not be able to get access to `private-id` by cheating.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:33:24.000348</ts>
    <user>Jacob</user>
    <text>ahhh that finally makes sense to me</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:33:54.000358</ts>
    <user>Jacob</user>
    <text>so that's how macros are able to prevent users from abusing their own identifiers that are created at expand sites</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:34:55.000087</ts>
    <user>Jacob</user>
    <text>I thought that was all due to module system being able to prevent private identifiers from being exported or otherwise used not as prescribed by macros but I'm now seeing that syntax arming has a role to play regarding that.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:35:40.000264</ts>
    <user>Chantelle</user>
    <text>imagine if you exported a function and someone was able to inspect it and get all internal helper functions it called,  and then call those helpers directly while skipping contracts and the module system, _and_ they could do that without reflection</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:36:25.000054</ts>
    <user>Kimbery</user>
    <text>Yes. The tricky thing is that Hackett’s elaborator needs to walk an entire syntax object and replace certain bits of it. The current implementation is sort of a hack.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:36:41.000454</ts>
    <user>Kimbery</user>
    <text>I think I might be able to do something by explicitly disarming/rearming syntax, but I don’t know how to arrange to have the right code inspector.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:37:03.000628</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; do you think defining typeclass methods as syntax parameters might get around that? so the elaborator could parameterize them to the expected types?</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:37:13.000291</ts>
    <user>Chantelle</user>
    <text>or using a syntax parameter to communicate with the methods indirectly</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:37:42.000309</ts>
    <user>Jacob</user>
    <text>ok then one would apply a syntax guard/armor or whatever it is, to those private internal identifiers that are inserted at expansion sites, to prevent users from being able to directly use those identifiers? The armor system automatically detects non-legal use or does macro has to inspect to verify identifiers are being properly used along with assistance of the armor system? I recall seeing something about syntax being tainted(able)</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:38:29.000302</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; The trouble is that the elaborator has to run _after_ typechecking, and typechecking is expansion. The constraint solver looks at fully-solved types, which are only known after the typechecker finishes its primary pass.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:39:16.000204</ts>
    <user>Kimbery</user>
    <text>So what I really want is a delimited/multi-phase expansion process. I want to be able to tell `local-expand` to expand something recursively, but stop when it sees a certain identifier. Currently, that isn’t possible.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:40:03.000312</ts>
    <user>Kimbery</user>
    <text>The stop-list argument to `local-expand` _sounds_ like what I want, but using the stop list prevents the macroexpander from recursively expanding things like definitions.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:40:29.000412</ts>
    <user>Kimbery</user>
    <text>This is one of the main things I want to discuss in-person with some people at RacketCon. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:40:44.000062</ts>
    <user>Chantelle</user>
    <text>good idea :P</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:41:04.000255</ts>
    <user>Jacob</user>
    <text>indeed, sounds like one of those that are best solved with in-person help</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:41:55.000385</ts>
    <user>Kimbery</user>
    <text>&lt;@Jacob&gt; Yes, the macroexpander will “taint” armed syntax objects that are pulled apart (using `syntax-e`) without first being disarmed. Tainted syntax objects cannot be used in the expansion of a macro; the macroexpander will halt with an error.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:42:38.000359</ts>
    <user>Kimbery</user>
    <text>Using the cute dye pack analogy, opening a syntax object without disarming the dye packs first causes the dye packs to explode.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:42:50.000517</ts>
    <user>Jacob</user>
    <text>whoosh! Very cute</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:42:54.000067</ts>
    <user>Kimbery</user>
    <text>&lt;https://en.wikipedia.org/wiki/Dye_pack&gt;</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:43:08.000203</ts>
    <user>Chantelle</user>
    <text>racket folks love their analogies</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:43:12.000152</ts>
    <user>Jacob</user>
    <text>haha yes, pretty much the imagery that's occupying my mind</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:44:00.000410</ts>
    <user>Jacob</user>
    <text>I'm guessing there's no way for malicious users to disarm syntax. The macroexpander somehow arranges for the original macros to only be allowed to disarm syntax they create?</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:45:03.000169</ts>
    <user>Kimbery</user>
    <text>That’s the part I understand less well. There is a hierarchy of _code inspectors_ that have privileges to arm/disarm syntax objects, but I don’t fully understand how they work at the moment.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:45:20.000499</ts>
    <user>Chantelle</user>
    <text>completely unrelated: the static information bound by `struct` is a `struct-info` value and the docs for `struct-info` say not all of the predicate, accessors, and mutators might be known. When can that happen? I can only construct situations with `struct` where they're either all bound or the transformer binding itself isn't created. Does it only apply to "custom" infos and not those created by `struct`?</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:45:28.000101</ts>
    <user>Kimbery</user>
    <text>&lt;@Jacob&gt; &lt;http://docs.racket-lang.org/reference/modprotect.html&gt;</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:46:35.000282</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; IIRC, it can happen if you use `#:super super-expr` instead of `super-id`, since `#:super` provides the superclass structure type via a dynamic runtime expression.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:47:12.000493</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; that makes sense, but the dynamic expression would fall into the category of things that make custom infos and not things that use infos created directly by `struct` right?</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:47:52.000486</ts>
    <user>Jacob</user>
    <text>&lt;@Kimbery&gt; thanks for the link</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:48:00.000118</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; Not necessarily. You can get access to the struct info for a `struct`-defined structure as a runtime value by using the `struct:struct-id` identifier.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:48:11.000007</ts>
    <user>Jacob</user>
    <text>and for the clear explanation</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:48:26.000085</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; I think modern Rackets also make the struct id itself serve as a reflective struct-info object using the properties system, but I forget if that’s true or not.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:49:29.000067</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; wait I think I just got it - the #:super option accepts the _runtime_ reflective information (`struct-type?`) but the transformer binding has the _static_ reflective stuff (`struct-info?`) and only the latter contains identifiers</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:49:35.000230</ts>
    <user>Kimbery</user>
    <text>Right.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:49:42.000222</ts>
    <user>Chantelle</user>
    <text>those two categories of info should really be called out more in the docs</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:50:10.000061</ts>
    <user>Kimbery</user>
    <text>The docs for structs are a little confusing. My guess is because the struct system has evolved a lot over the years. :)</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:50:10.000078</ts>
    <user>Chantelle</user>
    <text>for one, it explains why you can't get field names at runtime which I bet is surprising to a lot of racket folks the first time they find that out</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:51:07.000368</ts>
    <user>Kimbery</user>
    <text>Structs, according to the Racket runtime, don’t have any notion of field names. If you look at `make-struct-type`, you will see it defines an accessor function that accesses fields _by index_.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:51:33.000031</ts>
    <user>Chantelle</user>
    <text>yes but lots of forms have the ability to do stuff with struct field names, they just do it at compile time with the reflective info</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:51:47.000022</ts>
    <user>Chantelle</user>
    <text>it's easy for people to not get that distinction, is my point</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:51:49.000369</ts>
    <user>Kimbery</user>
    <text>Right. Struct accessors are a concept entirely defined by the `struct` macro, which adds a static information layer on top of the runtime values.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:52:49.000047</ts>
    <user>Chantelle</user>
    <text>and it's even _more_ confusing because the struct static info only uses "accessor" identifiers, the original "field" identifiers are not preserved, so forms like `struct-copy` will _construct_ the accessors from the field names themselves</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:53:06.000199</ts>
    <user>Kimbery</user>
    <text>Hmm, it looks like I was slightly wrong: modern Rackets _do not_ make the constructor bound by `struct` a valid `struct-type?` value, only the `struct:id` identifier.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:53:33.000063</ts>
    <user>Kimbery</user>
    <text>And yes, `struct-copy` is totally broken.</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:53:47.000493</ts>
    <user>Kimbery</user>
    <text>(Unfixably so.)</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:54:10.000024</ts>
    <user>Chantelle</user>
    <text>I mean, there's no way for `struct` to define accessors that don't fit the struct id + field id pattern</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:54:18.000358</ts>
    <user>Chantelle</user>
    <text>(I hope)</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:54:27.000075</ts>
    <user>Kimbery</user>
    <text>&lt;https://github.com/racket/racket/issues/1399&gt;</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:55:13.000558</ts>
    <user>Chantelle</user>
    <text>yeah that</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:56:09.000335</ts>
    <user>Chantelle</user>
    <text>I want to expose an api like struct copy in something though; guess that just means I need to provide an option to override the "inferred magic accessor binding" thing</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:56:19.000349</ts>
    <user>Chantelle</user>
    <text>gross to use though</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:57:42.000221</ts>
    <user>Kimbery</user>
    <text>I got deep into all this when I wrote `syntax/parse/class/struct-id`. :)</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:58:13.000519</ts>
    <user>Chantelle</user>
    <text>which is exactly what I'm using right now that led to this :) thanks btw</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T14:58:31.000218</ts>
    <user>Chantelle</user>
    <text>throwing some syntax classes in there for doing things with fields might be nice</text>
  </message>
  <message conversation_id="204">
    <ts>2017-09-01T15:41:36.000070</ts>
    <user>Chantelle</user>
    <text>today is one of those days where I'm really grateful for syntax-parse :)</text>
  </message>
  <message conversation_id="209">
    <ts>2017-09-01T15:45:08.000178</ts>
    <user>Nelson</user>
    <text>Leif and I sometimes talk about writing a Racket play</text>
  </message>
  <message conversation_id="209">
    <ts>2017-09-01T15:45:12.000234</ts>
    <user>Nelson</user>
    <text>it wouldn't be about Racket per-se</text>
  </message>
  <message conversation_id="209">
    <ts>2017-09-01T15:45:20.000124</ts>
    <user>Nelson</user>
    <text>but all the characters would be from the Racket docs</text>
  </message>
  <message conversation_id="209">
    <ts>2017-09-01T15:45:44.000278</ts>
    <user>Nelson</user>
    <text>plumbers, custodians, security guards, will executors</text>
  </message>
  <message conversation_id="209">
    <ts>2017-09-01T15:50:29.000469</ts>
    <user>Chantelle</user>
    <text>it sounds like it would play out as a revolution by an under-appreciated working class</text>
  </message>
  <message conversation_id="209">
    <ts>2017-09-01T15:52:15.000444</ts>
    <user>Eun</user>
    <text>You need a breach of contract as a plot point.</text>
  </message>
  <message conversation_id="209">
    <ts>2017-09-01T15:52:58.000270</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; slack needs a way to edit a message and make it point to the thread you meant to reply to :)</text>
  </message>
  <message conversation_id="210">
    <ts>2017-09-01T16:00:28.000068</ts>
    <user>Eun</user>
    <text>Threads?</text>
  </message>
  <message conversation_id="210">
    <ts>2017-09-01T16:02:32.000040</ts>
    <user>Chantelle</user>
    <text>threads ;)</text>
  </message>
  <message conversation_id="209">
    <ts>2017-09-01T17:13:03.000088</ts>
    <user>Chantelle</user>
    <text>&lt;@Nancie&gt; welcome!</text>
  </message>
  <message conversation_id="211">
    <ts>2017-09-01T17:17:24.000100</ts>
    <user>Jacob</user>
    <text>In that case who would be the privileged class? Lambda, cond, struct, cons?</text>
  </message>
  <message conversation_id="209">
    <ts>2017-09-01T17:19:16.000301</ts>
    <user>Chantelle</user>
    <text>clearly `struct` represents the existing social hierarchy</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-01T18:14:43.000246</ts>
    <user>Kimbery</user>
    <text>I heard that some code inspectors were _arming_ syntax objects. big if true</text>
  </message>
  <message conversation_id="210">
    <ts>2017-09-01T21:16:35.000019</ts>
    <user>Nancie</user>
    <text>My employer has tasked me with giving a training presentation to my coworkers about 10 days from now. I think I'm going to build it with `lang #slideshow`</text>
  </message>
  <message conversation_id="210">
    <ts>2017-09-01T21:18:10.000064</ts>
    <user>Nancie</user>
    <text>Hope this is a good idea</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-02T06:53:01.000021</ts>
    <user>Stefani</user>
    <text>&lt;!everyone&gt; &lt;@Kimbery&gt; and I are going to do an "Inside Racket Seminar" on Hackett's implementation. Please tell me when you are available if you'd like to tune in live --- &lt;http://whenisgood.net/g4xfey3&gt;</text>
  </message>
  <message conversation_id="213">
    <ts>2017-09-02T13:03:54.000065</ts>
    <user>Karina</user>
    <text>I’d love to receive an @ everyone whenever its published though</text>
  </message>
  <message conversation_id="214">
    <ts>2017-09-02T13:46:18.000003</ts>
    <user>Chantelle</user>
    <text>anyone got any ideas about how to handle this? &lt;https://github.com/racket/racket/issues/1790#issuecomment-326743875&gt;</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-02T14:51:45.000090</ts>
    <user>Clorinda</user>
    <text>TL;DR if you're in China, you can't use the Racket users' google group, since google services are blocked</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-02T15:05:13.000053</ts>
    <user>Chantelle</user>
    <text>it should still be possible to _read_ the mailing lists at least, because of the archives at &lt;https://lists.racket-lang.org/users/archive/&gt;</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-02T15:11:25.000061</ts>
    <user>Clorinda</user>
    <text>yah, and if you could successfully sign up for the mailing list, I would think you could email it and receive emails no problem</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-02T15:11:37.000041</ts>
    <user>Clorinda</user>
    <text>but I'm not sure if you can sign up w/o visiting the google groups site...?</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-02T15:17:52.000015</ts>
    <user>Chantelle</user>
    <text>You can. But I think the email server that the DNS redirects to is recognized by the firewall as a Google IP</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-02T15:18:16.000013</ts>
    <user>Chantelle</user>
    <text>I don't know much about this though</text>
  </message>
  <message conversation_id="215">
    <ts>2017-09-02T21:28:04.000031</ts>
    <user>Georgeanna</user>
    <text>I might be overlooking something… but there is `define-values` and `set!-values`… there is `match-define` but not `match-set!`. Would having `match-set!` be useful? I’m currently trying to clean up my code to not need such a thing, but it feels wordy</text>
  </message>
  <message conversation_id="215">
    <ts>2017-09-02T21:30:28.000047</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; I would bet there’s no `match-set!` because Racket programmers just don’t mutate things enough to consider writing it/asking for it</text>
  </message>
  <message conversation_id="215">
    <ts>2017-09-02T21:32:00.000018</ts>
    <user>Georgeanna</user>
    <text>I’m trying to convert this code into a let loop… but until I figure the exit logic out, I’m a bit stuck wanting that for now :slightly_smiling_face:</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-03T01:16:03.000033</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; voila! &lt;https://github.com/racket/rackunit/pull/59#issuecomment-326784918&gt;</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-03T15:32:58.000033</ts>
    <user>Chantelle</user>
    <text>I think `&lt;http://pkgd.racket-lang.org|pkgd.racket-lang.org&gt;` might be down again</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-03T15:55:05.000074</ts>
    <user>Nelson</user>
    <text>`pkgs.` is up for me. Use that instead?</text>
  </message>
  <message conversation_id="212">
    <ts>2017-09-03T15:59:17.000011</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; Can't sign in. I'm attempting to publish the `rackunit-typed` package.</text>
  </message>
  <message conversation_id="216">
    <ts>2017-09-03T21:08:21.000015</ts>
    <user>Corey</user>
    <text>Same issue as &lt;https://racket.slack.com/archives/C06V96CKX/p1504017322000427&gt;</text>
  </message>
  <message conversation_id="217">
    <ts>2017-09-04T02:47:36.000021</ts>
    <user>Georgeanna</user>
    <text>hey hey! I got racket back up and running in the scheme benchmarks! &lt;http://ecraven.github.io/r7rs-benchmarks/benchmark.html&gt;</text>
  </message>
  <message conversation_id="217">
    <ts>2017-09-04T02:47:41.000161</ts>
    <user>Georgeanna</user>
    <text>seems like we lost some progress in 6.10?</text>
  </message>
  <message conversation_id="217">
    <ts>2017-09-04T02:47:53.000154</ts>
    <user>Georgeanna</user>
    <text>(not sure if that is 6.10 getting slower somewhere or others speeding up)</text>
  </message>
  <message conversation_id="216">
    <ts>2017-09-04T11:27:37.000120</ts>
    <user>Eun</user>
    <text>&lt;!everyone&gt;: Less than two weeks left to get your RacketCon tickets at early bird prices! &lt;http://con.racket-lang.org/#register&gt;</text>
  </message>
  <message conversation_id="218">
    <ts>2017-09-04T14:08:18.000156</ts>
    <user>Nancie</user>
    <text>Is this the best way of getting whitespace characters into my console output?
```
(displayln (string-append "hello" (~a #\tab) "esteemed user"))
```</text>
  </message>
  <message conversation_id="218">
    <ts>2017-09-04T14:08:49.000062</ts>
    <user>Nancie</user>
    <text>Concatenating string parts together with converted whitespace characters</text>
  </message>
  <message conversation_id="218">
    <ts>2017-09-04T14:16:08.000050</ts>
    <user>Nancie</user>
    <text>Thinking I might write a little macro to provide convenient/dangerous interpolation that I'm accustomed to from PHP: &lt;http://php.net/manual/en/language.types.string.php#language.types.string.syntax.double&gt;</text>
  </message>
  <message conversation_id="219">
    <ts>2017-09-04T14:17:19.000101</ts>
    <user>Delmy</user>
    <text>Normal escape characters work fine in racket literals so you could have done `(displayln "hello\testeemed user")` and it would be the same afaik. Using `string-append` is fine too. What you did is also equivalent to `(displayln (format "hello~aesteemed user" #\tab"))`.</text>
  </message>
  <message conversation_id="218">
    <ts>2017-09-04T14:18:42.000103</ts>
    <user>Nancie</user>
    <text>Oh, thanks! I made the mistake of originally building this example with `writeln`</text>
  </message>
  <message conversation_id="218">
    <ts>2017-09-04T14:21:25.000072</ts>
    <user>Delmy</user>
    <text>Yeah that can be confusing. Good rule of thumb is that `display` formats for output (so for example `#\a` prints as simply `a`), while `write` formats so the output can be read back in as racket syntax (so `#\a` would print back as `#\a`).</text>
  </message>
  <message conversation_id="219">
    <ts>2017-09-04T16:34:21.000108</ts>
    <user>Nelson</user>
    <text>related: &lt;http://docs.racket-lang.org/reference/reader.html#%28part._parse-string%29&gt;</text>
  </message>
  <message conversation_id="218">
    <ts>2017-09-04T19:09:11.000038</ts>
    <user>Corey</user>
    <text>&lt;@Nancie&gt; For some things at-expressions can be handy: &lt;http://www.greghendershott.com/2015/08/at-expressions.html&gt;</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-04T20:25:44.000028</ts>
    <user>Karina</user>
    <text>I’ve been working with web-server/servlet for a little while now, and I’ve been wondering, does it matter if I reuse `embed/url` between requests? or should I get a new embed/url for each request?</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T11:40:46.000403</ts>
    <user>Stefani</user>
    <text>joelmccracken: it doesn't matter</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T11:40:56.000505</ts>
    <user>Karina</user>
    <text>thanks sir</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T11:41:33.000521</ts>
    <user>Stefani</user>
    <text>The only way it matters is if you expect the argument to embed/url to return</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T11:41:43.000218</ts>
    <user>Stefani</user>
    <text>because they all return to the same s/s/d</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T11:48:28.000629</ts>
    <user>Karina</user>
    <text>ah; didn’t realize that was possible! I don’t really understand what that would do, lol</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T11:55:20.000575</ts>
    <user>Stefani</user>
    <text>joelmccracken: here's an example &lt;https://github.com/racket/web-server/blob/master/web-server-lib/web-server/default-web-root/htdocs/servlets/examples/add-ssd.rkt&gt;</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T11:57:01.000191</ts>
    <user>Karina</user>
    <text>oh wow, that’s nuts. thanks. I might use this feature</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T14:34:51.000537</ts>
    <user>Tamela</user>
    <text>I have a weird bug in a large program due to subprocess I/O that affects Racket 6.10 only</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T14:34:59.000017</ts>
    <user>Tamela</user>
    <text>I understand there was a big rewrite for that version.</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T14:35:12.000654</ts>
    <user>Tamela</user>
    <text>Can anyone here help diagnose and work around it?</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T14:35:30.000040</ts>
    <user>Tamela</user>
    <text>I've gone about as deep as I think I can without entering the Racket internals.</text>
  </message>
  <message conversation_id="221">
    <ts>2017-09-05T15:55:10.000027</ts>
    <user>Nancie</user>
    <text>can you isolate the problem into a short section of code and post that?</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T16:23:15.000098</ts>
    <user>Tamela</user>
    <text>Unfortunately, I haven't, and in fact the bug is quite finicky</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T16:23:43.000348</ts>
    <user>Tamela</user>
    <text>It seems to depend, for example, on weird timing choices.</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T16:24:54.000253</ts>
    <user>Tamela</user>
    <text>This bug, from a friend, seems related: &lt;https://github.com/racket/racket/issues/1769&gt;</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T16:25:11.000544</ts>
    <user>Tamela</user>
    <text>It also has to do with juggling multiple Z3 processes and killing some of them.</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T16:33:05.000101</ts>
    <user>Kimbery</user>
    <text>&lt;@Tamela&gt; Can you reproduce the bug on a nightly snapshot? &lt;https://plt.eecs.northwestern.edu/snapshots/&gt;</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T16:40:51.000025</ts>
    <user>Tamela</user>
    <text>&lt;@Kimbery&gt; Working on it</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T16:42:17.000185</ts>
    <user>Tamela</user>
    <text>The bug does not occur on nightlies</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T16:49:38.000515</ts>
    <user>Tamela</user>
    <text>So looks like it will be fixed when the next version of Racket 6.10 comes out. Thanks all!</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T17:06:56.000058</ts>
    <user>Eun</user>
    <text>&lt;@Tamela&gt;: There are no planned updates for 6.10. The fix will most likely be in 6.11, which is scheduled for late October.</text>
  </message>
  <message conversation_id="220">
    <ts>2017-09-05T17:55:35.000227</ts>
    <user>Tamela</user>
    <text>Ok, great!</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T19:41:48.000138</ts>
    <user>Delmy</user>
    <text>For defining contracts on functions, is it generally preferred to use `contract-out` over `define/contract`? It seems like `contract-out` is more popular, and I'm curious what the reasoning is for this. If you already know the domain and range of a function, is there any benefit to pushing the contract definition out to the module boundary?</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T19:56:32.000182</ts>
    <user>Nancie</user>
    <text>Having the contract right there in the function definition seems more readable, doesn't it?</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T19:57:45.000023</ts>
    <user>Delmy</user>
    <text>it does, which is why I ask :slightly_smiling_face:</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T20:16:00.000086</ts>
    <user>Augustine</user>
    <text>Contracts can have a non-trivial performance overhead that you may not want to incur wherever a function is used within a module, whereas it's more likely to want to protect a function from invalid inputs that come from other modules </text>
  </message>
  <message conversation_id="223">
    <ts>2017-09-05T20:32:53.000079</ts>
    <user>Karina</user>
    <text>I’m using define/contract right now to debug something. I might remove them, or convert them to module level contracts when I’m done</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T20:46:24.000044</ts>
    <user>Chantelle</user>
    <text>`contract-out` turns the function exported into a macro that can pick up information about the module it's used in, so contract errors tell you both which module the contract is from (the module that used `contract-out`) and the module that misused the function.</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T20:47:54.000070</ts>
    <user>Chantelle</user>
    <text>also, when using `contract-out`, you can skim the first few lines of a module to get a sense of what functions it exports and what they do instead of having to dig through the entire module looking for contracts and function signatures</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T20:48:40.000150</ts>
    <user>Chantelle</user>
    <text>philosophically speaking, a module is a single "unit of trust" so it doesn't make sense for it to guard against inputs from itself (as `define/contract` would)</text>
  </message>
  <message conversation_id="223">
    <ts>2017-09-05T21:06:46.000175</ts>
    <user>Karina</user>
    <text>(unless, of course, you have buggy code to fix, or maybe i just am a poor racketeer)</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:08:05.000116</ts>
    <user>Chantelle</user>
    <text>that's a valid point. I think the counter argument is that contracts are not meant for debugging :)</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:09:36.000167</ts>
    <user>Delmy</user>
    <text>Thanks, that's a lot of good info! And yeah, I'm basically building something from scratch and want to make sure I get good error message when I accidentally violate my assumptions as the code evolves over time. But it sounds like you actually get better error reporting when you do it at the module level, so I'm inclined to stick with that.</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:10:50.000094</ts>
    <user>Chantelle</user>
    <text>oh have you seen the `debug` package? it's a really, really good debugging tool to be aware of</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:10:56.000062</ts>
    <user>Karina</user>
    <text>yeah i’m not sure how to debug this web server stuff,</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:11:14.000060</ts>
    <user>Karina</user>
    <text>i feel like youre about to be my hero after I look it up</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:11:24.000100</ts>
    <user>Delmy</user>
    <text>I haven't seen it, I'll look into it. Thanks!</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:12:04.000099</ts>
    <user>Chantelle</user>
    <text>not the one from the `mischief` package, which should probably be considered deprecated</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:12:29.000196</ts>
    <user>Chantelle</user>
    <text>&lt;https://docs.racket-lang.org/debug/&gt;</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:13:02.000011</ts>
    <user>Karina</user>
    <text>nice.</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:14:04.000098</ts>
    <user>Karina</user>
    <text>does racket have the ability to specify/lock versions of packages? you used to be able to include the planet specs directly in a file</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:14:31.000113</ts>
    <user>Chantelle</user>
    <text>nope, packages also can't declare that they depend only on a specific range of versions of another package</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:14:53.000001</ts>
    <user>Chantelle</user>
    <text>this is an area that needs more work..</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:15:09.000088</ts>
    <user>Chantelle</user>
    <text>you also can't install different versions of the same package</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:16:45.000044</ts>
    <user>Karina</user>
    <text>interesting</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:17:01.000150</ts>
    <user>Chantelle</user>
    <text>that's one word for it</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:17:02.000125</ts>
    <user>Karina</user>
    <text>(that it was removed, since it used to work)</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:17:26.000176</ts>
    <user>Chantelle</user>
    <text>planet let you do it but you had to specify the version in source code of every module that used the dependency</text>
  </message>
  <message conversation_id="222">
    <ts>2017-09-05T21:17:27.000052</ts>
    <user>Karina</user>
    <text>(maybe i’m misremembering though)</text>
  </message>
  <message conversation_id="224">
    <ts>2017-09-06T16:35:15.000490</ts>
    <user>Delmy</user>
    <text>Is there a way to define a macro that can be dropped into a match statement? I'm working with very deeply-nested JSON and I want to be able to define something like this:

```
(define-simple-macro (Range Start:id End:id)
  (hash-table ['start (? number? Start)]
              ['end (? number? End)]))
```

So that I can do this:

```
(match some-hash-table
  [(Range my-start my-end)
   (+ my-start my-end)])
```

But when I try it, match throws a syntax error, complaining about the expr `(Range my-start my-end)`. Is there a reason this isn't allowed?</text>
  </message>
  <message conversation_id="224">
    <ts>2017-09-06T16:37:52.000021</ts>
    <user>Marlin</user>
    <text>&lt;@Delmy&gt; `define-match-expander`</text>
  </message>
  <message conversation_id="224">
    <ts>2017-09-06T16:38:14.000167</ts>
    <user>Marlin</user>
    <text>&lt;http://docs.racket-lang.org/reference/match.html?q=define-match-expander#%28form._%28%28lib._racket%2Fmatch..rkt%29._define-match-expander%29%29&gt;</text>
  </message>
  <message conversation_id="224">
    <ts>2017-09-06T16:38:51.000138</ts>
    <user>Delmy</user>
    <text>thank you this is perfect!</text>
  </message>
  <message conversation_id="224">
    <ts>2017-09-06T16:47:40.000058</ts>
    <user>Morton</user>
    <text>Sorry if this has been discussed before: why does `(* 0 +inf.0)` results in `0` rather then NaN?</text>
  </message>
  <message conversation_id="225">
    <ts>2017-09-06T17:05:34.000226</ts>
    <user>Kimbery</user>
    <text>&lt;@Morton&gt; For no reason other than multiplying _anything_ by exact `0` is exact `0`. `(* 0.0 +inf.0)` is `+nan.0`.</text>
  </message>
  <message conversation_id="225">
    <ts>2017-09-06T17:09:57.000096</ts>
    <user>Eun</user>
    <text>(add1 @lexi-lambda)</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:15:11.000221</ts>
    <user>Nancie</user>
    <text>I'm in the process of building a library that's shaping up to have ~10 source files. Is there a standardized way of arranging tests for them in the Racket world? I'm thinking I could test them all in a test.rkt, or put a related test module into each source file, or put separate test files into a `private/tests` directory.</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:15:24.000153</ts>
    <user>Nancie</user>
    <text>Additional test module inside each file seems the cleanest in my mind</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:16:07.000143</ts>
    <user>Nancie</user>
    <text>Although that would change the runtime deps to include `rackunit`, wouldn't it?</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:24:19.000209</ts>
    <user>Chantelle</user>
    <text>&lt;@Nancie&gt; there's generally three ways to do this, depending on how heavyweight the tests are</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:24:54.000164</ts>
    <user>Chantelle</user>
    <text>First, test submodules. That works for most simple tests.</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:26:43.000168</ts>
    <user>Chantelle</user>
    <text>Second, you may include a `tests` directory in your package. That packages deps are automatically ignored for consideration in "runtime-deps", so you may write your tests as normal Racket files (you don't need to put all the code in submodules).</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:28:50.000082</ts>
    <user>Chantelle</user>
    <text>Third, make a wholly separate `foo-test` package for your `foo` package. This is typically done when the libraries used for testing are too expensive to include even as only `build-deps`, either because you're using multiple heavyweight packages only for testing or your package is used by a lot of other packages so minimizing its dependencies is really important</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:32:32.000056</ts>
    <user>Nancie</user>
    <text>Thanks! Test submodule sounds good for this project</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:32:56.000215</ts>
    <user>Nancie</user>
    <text>Especially after reading [this](&lt;http://blog.racket-lang.org/2012/06/submodules.html&gt;):
&amp;gt;The test submodule imports rackunit for its check form, but that import does not create a dependency on rackunit (which is a substantial library) for modules that import "fish2.rkt"; the dependency is only for the test submodule.</text>
  </message>
  <message conversation_id="226">
    <ts>2017-09-06T21:33:58.000073</ts>
    <user>Chantelle</user>
    <text>Right, submodule dependencies are different from the dependencies of their parent modules</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T10:07:00.000165</ts>
    <user>Rosalee</user>
    <text>Ha anyone managed to get the `-W` flag to work for topics with spaces in its name?</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T10:07:23.000032</ts>
    <user>Rosalee</user>
    <text>Whenever I do `racket -W debug@'AVFoundation input device' listdev.rkt`, I get something like:</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T10:07:31.000722</ts>
    <user>Rosalee</user>
    <text>```
$ racket -W debug@'AVFoundation input device' listdev.rkt
racket: stderr &amp;lt;levels&amp;gt; after -W switch must be one of the following
 &amp;lt;level&amp;gt;s:
   none fatal error warning info debug
 or up to one such &amp;lt;level&amp;gt; in whitespace-separated sequence of
   &amp;lt;level&amp;gt;@&amp;lt;name&amp;gt;
 given: debug@AVFoundation input device
Use the --help or -h flag for help.
```</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T10:13:59.000433</ts>
    <user>Tina</user>
    <text>Most shells would probably like `racket -W "debug@AVFoundation input device" listdev.rkt`</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T11:04:19.000082</ts>
    <user>Rosalee</user>
    <text>&lt;@Tina&gt; Hmm…no luck:
```
$ racket -W "debug@AVFoundation input device" listdev.rkt
racket: stderr &amp;lt;levels&amp;gt; after -W switch must be one of the following
 &amp;lt;level&amp;gt;s:
   none fatal error warning info debug
 or up to one such &amp;lt;level&amp;gt; in whitespace-separated sequence of
   &amp;lt;level&amp;gt;@&amp;lt;name&amp;gt;
 given: debug@AVFoundation input device
Use the --help or -h flag for help.
```</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T11:08:12.000729</ts>
    <user>Rosalee</user>
    <text>Okay, after talking to &lt;@Stefani&gt; it looks like the `-W` flag cannot handle topics with spaces. Thanks anyway. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="228">
    <ts>2017-09-07T13:05:51.000529</ts>
    <user>Chantelle</user>
    <text>that probably deserves a bug in the racket repo</text>
  </message>
  <message conversation_id="228">
    <ts>2017-09-07T13:20:50.000304</ts>
    <user>Tina</user>
    <text>yeah, looks like it!</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T15:15:11.000195</ts>
    <user>Corey</user>
    <text>&lt;@Rosalee&gt; You're defining/using it like this:
```
#lang racket/base
(define-logger |name with spaces|)
(|log-name with spaces-debug| "hi")
```
?</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T21:39:13.000111</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; Fair. I will file it when I get home. (Long plain rides are long…)</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T21:39:43.000047</ts>
    <user>Rosalee</user>
    <text>&lt;@Corey&gt;  Ha…..close, the log name is actually much more sane. Its just that the topic has spaces.</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T21:39:59.000061</ts>
    <user>Rosalee</user>
    <text>(For the record, I didn’t pick the topic, ffmpeg (or rather AVFoundation) did.)</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T22:56:13.000012</ts>
    <user>Rosalee</user>
    <text>Ooohhh…I just realized, I could easily turn video into a voip chat application.</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T22:56:30.000093</ts>
    <user>Rosalee</user>
    <text>(Admittedly not a very good one in terms of compression, but still pretty cool.)</text>
  </message>
  <message conversation_id="227">
    <ts>2017-09-07T23:04:20.000089</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; heckin' do it</text>
  </message>
  <message conversation_id="229">
    <ts>2017-09-10T09:02:13.000040</ts>
    <user>Kimber</user>
    <text>Hey, I read somewhere (I think I did) that the racket compiler backend is being rewritten to allow for other execution environments.
a) is this true
b) and if so what is the status
c) and if b) true is there a chance to test this?</text>
  </message>
  <message conversation_id="229">
    <ts>2017-09-10T09:07:45.000036</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimber&gt; See &lt;https://groups.google.com/d/msg/racket-dev/rkXuHNAmQaA/hjgPZHErAwAJ&gt;</text>
  </message>
  <message conversation_id="229">
    <ts>2017-09-10T09:40:59.000079</ts>
    <user>Kimber</user>
    <text>thanks for the link</text>
  </message>
  <message conversation_id="229">
    <ts>2017-09-10T09:45:04.000028</ts>
    <user>Kimber</user>
    <text>is there a specific reason on why to reimplement Racket on top of Chez Scheme?
Also the post doesn't talk about compiler backends - or I have missed that.
Another question - is this purely an experiment or is this suppossed to become Racket7?</text>
  </message>
  <message conversation_id="229">
    <ts>2017-09-10T09:47:50.000066</ts>
    <user>Vincenzo</user>
    <text>I should have included the original message: &lt;https://groups.google.com/d/msg/racket-dev/2BV3ElyfF8Y/4RSd3XbECAAJ&gt;</text>
  </message>
  <message conversation_id="229">
    <ts>2017-09-10T09:49:22.000059</ts>
    <user>Vincenzo</user>
    <text>The Racket backend itself is not being rewritten, since the idea is to replace it entirely with Chez Scheme in the near term. Longer term, we hope to be able to run Racket on other platforms/VMs/languages.</text>
  </message>
  <message conversation_id="229">
    <ts>2017-09-10T10:10:30.000049</ts>
    <user>Kimber</user>
    <text>wow. double wow ++
this looks really promising.
different racket langs running on a JVM or in the browser.
extremely cool</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T12:52:20.000004</ts>
    <user>Rosalee</user>
    <text>If I have multiple threads, and I press Ctr+C, does anyone know which thread the signal is going to go to?</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T12:52:50.000016</ts>
    <user>Rosalee</user>
    <text>(The docs seem a little vague on this. Just saying that you register a thread with thread-break.)</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T12:53:15.000019</ts>
    <user>Rosalee</user>
    <text>Or maybe it’ll go to all of them (that are registered and have breaks currently enabled.)</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T12:59:50.000038</ts>
    <user>Rosalee</user>
    <text>Running some tests also seems to indicate the main thread.</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T13:29:10.000007</ts>
    <user>Vincenzo</user>
    <text>Yes, Ctl+C sends a break to the main thread</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T13:31:00.000091</ts>
    <user>Rosalee</user>
    <text>Okay, thanks.</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T13:37:18.000077</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; In that case, is there any good way to have the signal be sent to another thread?</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T13:37:34.000092</ts>
    <user>Rosalee</user>
    <text>(About all I have at the moment is sending it through a channel or some shared state.)</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T13:44:17.000120</ts>
    <user>Vincenzo</user>
    <text>The `call-in-nested-thread` function sets up a redirect, but otherwise the main thread has to specifically resend it</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T13:49:34.000014</ts>
    <user>Rosalee</user>
    <text>Mmm…okay. thanks.</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T13:50:03.000005</ts>
    <user>Rosalee</user>
    <text>Ya, as far as I can tell, `call-in-nexted-thread` is very similar to jus `thread` followed by a `thread-wait`</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T13:50:13.000023</ts>
    <user>Rosalee</user>
    <text>(kind of anyway.)</text>
  </message>
  <message conversation_id="230">
    <ts>2017-09-10T13:50:18.000074</ts>
    <user>Rosalee</user>
    <text>So ya, thanks.</text>
  </message>
  <message conversation_id="231">
    <ts>2017-09-11T17:38:00.000274</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; will 6.10.1 include any updates to packages other than `base`? or does it only include the rktio bugfixes?</text>
  </message>
  <message conversation_id="231">
    <ts>2017-09-11T17:38:34.000082</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: Only rktio bugfixes.</text>
  </message>
  <message conversation_id="231">
    <ts>2017-09-11T17:38:42.000163</ts>
    <user>Chantelle</user>
    <text>gotcha</text>
  </message>
  <message conversation_id="231">
    <ts>2017-09-11T17:38:47.000410</ts>
    <user>Chantelle</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="231">
    <ts>2017-09-11T17:38:50.000297</ts>
    <user>Eun</user>
    <text>It's essentially 6.10 + patches.</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T18:24:45.000132</ts>
    <user>Rosalee</user>
    <text>&lt;@Kimbery&gt; Thank you so much for adding `index-of` (and `indexes-of`) to Racket. That call has been needed for a while.</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T18:24:56.000051</ts>
    <user>Rosalee</user>
    <text>:heart: :racket: :heart:</text>
  </message>
  <message conversation_id="233">
    <ts>2017-09-11T18:58:05.000124</ts>
    <user>Kimbery</user>
    <text>I’m glad people are already finding them useful :)</text>
  </message>
  <message conversation_id="233">
    <ts>2017-09-11T19:01:06.000010</ts>
    <user>Kimbery</user>
    <text>…though now I’m wondering if it should have been called `indicies-of`. hm.</text>
  </message>
  <message conversation_id="233">
    <ts>2017-09-11T19:02:13.000276</ts>
    <user>Nelson</user>
    <text>nah</text>
  </message>
  <message conversation_id="233">
    <ts>2017-09-11T19:02:41.000246</ts>
    <user>Nelson</user>
    <text>but maybe you want to add an `@index["indices-of"]` (example : &lt;https://github.com/racket/racket/blob/master/pkgs/racket-doc/scribblings/reference/pairs.scrbl#L1318&gt;)</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T19:14:47.000028</ts>
    <user>Rosalee</user>
    <text>Meh, I don’t care. You could have called it, `the-foobar-list-function-that-should-have-been-there-a-long-time-ago` and I would have been happy (except that the name was too long, so I guess you could have called it `tflftshbtalta` and I would have been…umm…confused. :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:17:36.000099</ts>
    <user>Kimbery</user>
    <text>Just for fun… here’s a tiny program that calculates who has the most packages on the package system:
```
#lang racket

(require net/url)

(define pkgs
  (call/input-url (string-&amp;gt;url "&lt;https://pkgs.racket-lang.org/pkgs-all&gt;") get-pure-port read))

(define pkgs-per-author
  (for*/fold ([acc (hash)])
             ([(name info) (in-hash pkgs)]
              #:unless (regexp-match? #px"-(lib|doc|test)$" name)
              #:unless (hash-ref (hash-ref info 'search-terms) 'deprecated #f)
              [author (in-list (hash-ref info 'authors))])
    (hash-update acc author add1 0)))

(sort (hash-&amp;gt;list pkgs-per-author) &amp;gt; #:key cdr)
```
&lt;@Chantelle&gt; is beating me by one. :)</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:18:04.000049</ts>
    <user>Kimbery</user>
    <text>For context, here are the top ten:
```
'(("&lt;mailto:mflatt@racket-lang.org|mflatt@racket-lang.org&gt;" . 88)
  ("&lt;mailto:jay.mccarthy@gmail.com|jay.mccarthy@gmail.com&gt;" . 44)
  ("&lt;mailto:alexander@knauth.org|alexander@knauth.org&gt;" . 36)
  ("&lt;mailto:neil@neilvandyke.org|neil@neilvandyke.org&gt;" . 35)
  ("&lt;mailto:robby@racket-lang.org|robby@racket-lang.org&gt;" . 33)
  ("&lt;mailto:jackhfirth@gmail.com|jackhfirth@gmail.com&gt;" . 29)
  ("&lt;mailto:lexi.lambda@gmail.com|lexi.lambda@gmail.com&gt;" . 28)
  ("&lt;mailto:leif@leifandersen.net|leif@leifandersen.net&gt;" . 27)
  ("&lt;mailto:georges.duperon@gmail.com|georges.duperon@gmail.com&gt;" . 26)
  ("&lt;mailto:mordae@anilinux.org|mordae@anilinux.org&gt;" . 25))
```</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:18:31.000108</ts>
    <user>Kimbery</user>
    <text>Matthew’s overachieving, as always.</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:22:31.000154</ts>
    <user>Magnolia</user>
    <text>I'm at 24. Darn. Just one too few to make the list. :p *goes to add a hello world package*</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:23:36.000101</ts>
    <user>Kimbery</user>
    <text>According to the script, you have 22 (it ignores `-{lib,doc,test}` packages to avoid inflated numbers).</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:23:51.000124</ts>
    <user>Kimbery</user>
    <text>You’re just below &lt;@Latarsha&gt;, who has 23. :)</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:24:57.000195</ts>
    <user>Magnolia</user>
    <text>Ah I see. Yeah I just looked at the pkg search number.</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:25:49.000135</ts>
    <user>Kimbery</user>
    <text>If you don’t ignore any packages, mflatt is listed as the author for a wild 167 packages.</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:26:48.000272</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; clearly you should publish the `__` package and the `___` package to pull ahead</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:28:38.000150</ts>
    <user>Marlin</user>
    <text>If I ever get around to publishing (automatically-built) localization packages for every locale in CLDR, I'll... well, I'll create a new category of package that you'll have to filter out.</text>
  </message>
  <message conversation_id="232">
    <ts>2017-09-11T20:29:53.000088</ts>
    <user>Kimbery</user>
    <text>I just realized some of mflatt’s packages aren’t even counted, since he has some of them under the `&lt;mailto:mflatt@cs.utah.edu|mflatt@cs.utah.edu&gt;` email address.</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T20:57:33.000088</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; Stealing my ideas are we? :stuck_out_tongue:</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T20:58:04.000083</ts>
    <user>Rosalee</user>
    <text>Also, I was thinking of publishing a package that just had a lot of empty (but common) collections, so that everyone else’s packages would conflict with it.</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T20:58:26.000179</ts>
    <user>Rosalee</user>
    <text>Which, given the current implementation, would remove them all from the searchable documentation.</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T20:58:44.000006</ts>
    <user>Rosalee</user>
    <text>Just so we are 100% clear, I am NOT going to do it, I just noticed its a social attack that exists at the moment. :wink:</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T20:59:09.000140</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; you monster</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T20:59:23.000107</ts>
    <user>Rosalee</user>
    <text>tee hee hee</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T21:00:22.000078</ts>
    <user>Georgeanna</user>
    <text>I guess I don’t know what `call/input-url` is…</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T21:00:47.000148</ts>
    <user>Georgeanna</user>
    <text>I was using `(port-&amp;gt;string (get-pure-port (string-&amp;gt;url uri)))` for our battleship workshop … is there a real difference?</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T21:01:47.000105</ts>
    <user>Chantelle</user>
    <text>I think `port-&amp;gt;string` won't close the port by default</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T21:01:58.000187</ts>
    <user>Rosalee</user>
    <text>&lt;@Kimbery&gt; lol, I’m right behind you.</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T21:02:05.000144</ts>
    <user>Rosalee</user>
    <text>Although half of those packages are video packages. :wink:</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T21:04:24.000239</ts>
    <user>Rosalee</user>
    <text>Also, I’m amused that Jay has two accounts he’s posting from. :wink:</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-11T21:04:40.000003</ts>
    <user>Rosalee</user>
    <text>Oh geez, so does Matthew.</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T09:17:12.000131</ts>
    <user>Carson</user>
    <text>regarding packages and &lt;https://pkgs.racket-lang.org/pkgs-all&gt; specifically - I wanted to write a script that would notify me of new packages but there seems to be inherent problem to the design of pkgs - there is no "date-created" property only "last-updated" or "last-edited".</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T09:17:48.000359</ts>
    <user>Carson</user>
    <text>The same problem is visible on the pkgs index - the packages that got just updated are flagged as new</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T09:20:31.000129</ts>
    <user>Carson</user>
    <text>which doesn't reflect reality as there are many packages that are months old yet they are always flagged as new due to some authors scripts updating the packages from local repositories on regular basis (even with no changes)</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T09:21:20.000201</ts>
    <user>Carson</user>
    <text>The way I would like to see pkgs working is having both "new" and "updated" flags</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T09:21:55.000377</ts>
    <user>Jacob</user>
    <text>The current package system does need improvement and there are several features I would like to see be added to packages too.</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T09:22:43.000100</ts>
    <user>Jacob</user>
    <text>As it happens I am interested in working on the package system to improve it. There have been prior discussions about various wishlist items that need to be worked on.</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T09:23:15.000077</ts>
    <user>Jacob</user>
    <text>I will create a post in the users/developers mailing list to check whether there are others working on the same thing and see about coordinating our efforts.</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T09:24:42.000217</ts>
    <user>Jacob</user>
    <text>Regrettably I won't be able to attend RacketCon this year. That would have been a perfect time to get into a deep discussion with other Racketeers so I'll just have to make do.</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T09:28:27.000312</ts>
    <user>Carson</user>
    <text>Though it's not the same - last year streaming of RacketCon allowed for some basic interaction for those of us who couldn't attend. I hope this year will be the same (or better)</text>
  </message>
  <message conversation_id="234">
    <ts>2017-09-12T11:58:48.000620</ts>
    <user>Ciara</user>
    <text>Sry to bug you with this, but I totally assumed that test--&amp;gt; uses alpha-equivalence by default to compare terms.</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T11:59:37.000352</ts>
    <user>Ciara</user>
    <text>I double-checked my binding forms but I can't quite figure out why these two terms aren't equivalent.</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:00:31.000333</ts>
    <user>Nelson</user>
    <text>nope, `test--&amp;gt;` doesn't use alpha equivalence by default</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:00:40.000371</ts>
    <user>Nelson</user>
    <text>you can set `default-equiv`</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:00:55.000304</ts>
    <user>Ciara</user>
    <text>that's exactly what I wanted to know, thanks.</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:00:58.000835</ts>
    <user>Nelson</user>
    <text>or pass `#:equiv my-alpha-equiv`</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:01:17.000475</ts>
    <user>Ciara</user>
    <text>let me check ...</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:01:50.000251</ts>
    <user>Nelson</user>
    <text>&lt;http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._test--~3e%29%29&gt;</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:05:20.000460</ts>
    <user>Ciara</user>
    <text>works brilliantly! many thanks!!</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:26:15.000504</ts>
    <user>Corey</user>
    <text>This package needs a "this package needs code, author, anything" label :simple_smile: &lt;https://pkgs.racket-lang.org/package/autoff&gt;</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:29:20.000455</ts>
    <user>Corey</user>
    <text>Hmm also the 4 "niceware" pkgs</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T12:30:00.000263</ts>
    <user>Corey</user>
    <text>and the "pointless" pkgs</text>
  </message>
  <message conversation_id="235">
    <ts>2017-09-12T13:33:57.000712</ts>
    <user>Carson</user>
    <text>&lt;@Corey&gt; yes, these are some of these "always new" packages I was thinking about.</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:46:07.000280</ts>
    <user>Chantelle</user>
    <text>&lt;@Carson&gt; There's a lot of discussion about package catalog wishlist items on the github repo</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:46:18.000162</ts>
    <user>Chantelle</user>
    <text>&lt;https://github.com/tonyg/racket-pkg-website/issues&gt;</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:48:10.000380</ts>
    <user>Chantelle</user>
    <text>in particular, these two issues:</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:48:11.000443</ts>
    <user>Chantelle</user>
    <text>&lt;https://github.com/tonyg/racket-pkg-website/issues/50&gt;</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:48:20.000069</ts>
    <user>Chantelle</user>
    <text>&lt;https://github.com/tonyg/racket-pkg-website/issues/53&gt;</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:51:26.000512</ts>
    <user>Corey</user>
    <text>&lt;@Carson&gt; The `autoff` `niceware` `pointless` packages have bad meta-data (lacking even author or code).
Not sure if someone bypassed authentication to create them maliciously.
Or some data loss glitch.
But regardless, I think they simply need to be deleted?
(As opposed to valid packages that are "new!" gratuitously frequently.)</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:53:09.000245</ts>
    <user>Chantelle</user>
    <text>lacking both an author and a source should definitely be grounds for removal by curators, since it's not even possible to figure out who to contact about removing it through other means</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:53:25.000624</ts>
    <user>Chantelle</user>
    <text>I'll open an issue for that</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:57:48.000161</ts>
    <user>Chantelle</user>
    <text>&lt;@Corey&gt; &lt;https://github.com/tonyg/racket-pkg-website/issues/60&gt;</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T13:59:32.000415</ts>
    <user>Corey</user>
    <text>&lt;@Chantelle&gt; Thank you and sorry -- maybe I should have just logged an issue there in the first place.</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T14:00:17.000340</ts>
    <user>Chantelle</user>
    <text>no worries, I'm glad you brought it up at all :)</text>
  </message>
  <message conversation_id="237">
    <ts>2017-09-12T14:12:07.000636</ts>
    <user>Eun</user>
    <text>&lt;@Carson&gt;: Re RacketCon streaming: Yes, we're planning to have streaming again this year.</text>
  </message>
  <message conversation_id="236">
    <ts>2017-09-12T14:40:17.000495</ts>
    <user>Corey</user>
    <text>I'm sad, I don't think I'm going to be at RacketCon this year.</text>
  </message>
  <message conversation_id="237">
    <ts>2017-09-12T14:41:09.000135</ts>
    <user>Eun</user>
    <text>Oh no. :(</text>
  </message>
  <message conversation_id="237">
    <ts>2017-09-12T14:41:25.000169</ts>
    <user>Eun</user>
    <text>Too far?</text>
  </message>
  <message conversation_id="237">
    <ts>2017-09-12T14:41:43.000453</ts>
    <user>Corey</user>
    <text>Well I thought I could combine Strange Loop and RacketCon into one long trip.</text>
  </message>
  <message conversation_id="237">
    <ts>2017-09-12T14:41:48.000121</ts>
    <user>Corey</user>
    <text>But that wasn't working out.</text>
  </message>
  <message conversation_id="237">
    <ts>2017-09-12T14:42:07.000421</ts>
    <user>Corey</user>
    <text>And flying out and back to each was looking non-optimal, too.</text>
  </message>
  <message conversation_id="237">
    <ts>2017-09-12T14:55:52.000379</ts>
    <user>Tina</user>
    <text>&lt;@Corey&gt;: I can sympathize with too much travel, for sure. I’m missing strange loop this year and that’s a bummer</text>
  </message>
  <message conversation_id="238">
    <ts>2017-09-12T15:42:58.000220</ts>
    <user>Carson</user>
    <text>&lt;@Chantelle&gt; I believe I know who the author of pointless and niceware is: &lt;https://gitlab.com/users/ether-ash/projects&gt;</text>
  </message>
  <message conversation_id="238">
    <ts>2017-09-12T15:43:52.000058</ts>
    <user>Chantelle</user>
    <text>&lt;@Carson&gt; fantastic!</text>
  </message>
  <message conversation_id="237">
    <ts>2017-09-12T16:10:53.000386</ts>
    <user>Corey</user>
    <text>I love the comments in &lt;https://gitlab.com/ether-ash/pointless/blob/master/pointless-lib/pointless/cond.rkt&gt;</text>
  </message>
  <message conversation_id="239">
    <ts>2017-09-12T17:24:38.000362</ts>
    <user>Delmy</user>
    <text>Is there a way to customize the reader so that curly braces mean `#hasheq`? I basically want `{foo "thing" bar "other"}` to be equivalent to `#hasheq((foo . "thing") (bar . "other"))`</text>
  </message>
  <message conversation_id="238">
    <ts>2017-09-12T17:28:59.000328</ts>
    <user>Kimbery</user>
    <text>&lt;@Carson&gt; Do you happen to know who that person is? I forget exactly why, but I remember seeing one of their projects at one point (maybe it was pointless?), and I was befuddled at their seeming lack of internet presence. :p</text>
  </message>
  <message conversation_id="239">
    <ts>2017-09-12T17:29:24.000331</ts>
    <user>Kimbery</user>
    <text>&lt;@Delmy&gt; You could add a custom entry for `#\{` to the readtable.</text>
  </message>
  <message conversation_id="237">
    <ts>2017-09-12T17:29:49.000344</ts>
    <user>Kimbery</user>
    <text>&lt;@Corey&gt; You will be sorely missed at RacketCon. :(</text>
  </message>
  <message conversation_id="238">
    <ts>2017-09-12T18:08:18.000277</ts>
    <user>Carson</user>
    <text>&lt;@Kimbery&gt; I am afraid not, but if my goog-fu skills are of any use here is my hunch: &lt;https://twitter.com/ether_ash/status/880159791414476800&gt;</text>
  </message>
  <message conversation_id="240">
    <ts>2017-09-12T18:08:26.000303</ts>
    <user>Nelson</user>
    <text>Hey slack, the SICP book uses the character "Alyssa P. Hacker" (a lisp hacker). What's a good character for "a racket hacker"?</text>
  </message>
  <message conversation_id="238">
    <ts>2017-09-12T18:09:18.000132</ts>
    <user>Kimbery</user>
    <text>I use Alyssa P. Hacker for everything, tbh, regardless of language :stuck_out_tongue:</text>
  </message>
  <message conversation_id="238">
    <ts>2017-09-12T18:09:53.000291</ts>
    <user>Kimbery</user>
    <text>&lt;@Carson&gt; Oh, thanks. I think I’ve seen that person on twitter, so I’m surprised I didn’t make the connection.</text>
  </message>
  <message conversation_id="238">
    <ts>2017-09-12T18:12:00.000048</ts>
    <user>Georgeanna</user>
    <text>&lt;@Ciara&gt; I asked something similar a month ago and never got an answer… May I see your `default-equiv`?</text>
  </message>
  <message conversation_id="238">
    <ts>2017-09-12T18:12:56.000069</ts>
    <user>Georgeanna</user>
    <text>&lt;@Corey&gt; you should come to Seattle! I owe you a coffee and/or beer</text>
  </message>
  <message conversation_id="241">
    <ts>2017-09-12T19:15:51.000155</ts>
    <user>Chantelle</user>
    <text>I made a package for this called `delimit-app`. It's an #%app macro instead of a reader extension though, so you'll have to quote the symbols</text>
  </message>
  <message conversation_id="242">
    <ts>2017-09-12T22:53:57.000118</ts>
    <user>Delmy</user>
    <text>Hey thanks for letting me know about this. It's pretty much exactly what I'm looking for - quoting symbols isn't a big deal.</text>
  </message>
  <message conversation_id="243">
    <ts>2017-09-13T13:37:35.000003</ts>
    <user>Latarsha</user>
    <text>&lt;@Willian&gt; you're the relevant person for the pict test timeouts on drdr, right?</text>
  </message>
  <message conversation_id="243">
    <ts>2017-09-13T13:37:50.000331</ts>
    <user>Latarsha</user>
    <text>Is there anything I can do to help you debug those (such as access to the drdr machine)?</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T15:17:17.000471</ts>
    <user>Kimber</user>
    <text>Is there a possibility to implement generic interfaces after one has defined a struct. Ok, since this is Lisp anything is possible ... but is there a well defined way (maybe documented even?)</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T15:18:38.000574</ts>
    <user>Kimber</user>
    <text>Sofar all examples first define the interface and then implement that interface while defining the struct. I know it must be possible as &lt;@Kimbery&gt; must have done something with the generic/collections</text>
  </message>
  <message conversation_id="245">
    <ts>2017-09-13T15:58:35.000378</ts>
    <user>Chantelle</user>
    <text>@robkuz it's possible but not with normal structs, you'll have to add an indirection later on top of them that supports it. And it probably wouldn't work with normal struct properties</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:21:45.000528</ts>
    <user>Kimbery</user>
    <text>&lt;@Kimber&gt; `racket/generic` doesn’t really allow that. I wrote a multimethod package that allows that sort of thing, but it’s pretty half-baked.</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:45:35.000275</ts>
    <user>Eun</user>
    <text>&lt;@Kimber&gt;: You can, by adding a #:defaults clause when defining the interface.</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:51:23.000475</ts>
    <user>Kimbery</user>
    <text>&lt;@Eun&gt; …but then it’s an O(_n_) predicate lookup instead of a hash lookup. :(</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:53:13.000297</ts>
    <user>Eun</user>
    <text>Yes, but I'd expect n to be pretty small in most cases. And it would be a struct type property lookup otherwise, which I don't think involves hashing.</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:54:08.000403</ts>
    <user>Kimbery</user>
    <text>oh, right. that’s even better—I would hope struct properties are constant time.</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:54:51.000200</ts>
    <user>Latarsha</user>
    <text>&lt;@Eun&gt; &lt;@Kimbery&gt; pretty sure it's a hash table</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:55:37.000205</ts>
    <user>Eun</user>
    <text>As in, struct type properties are stored in a hash table?</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:56:06.000083</ts>
    <user>Latarsha</user>
    <text>&lt;https://github.com/racket/racket/blob/master/racket/src/racket/src/struct.c#L1122&gt;</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:57:07.000179</ts>
    <user>Eun</user>
    <text>Ah, look at that. Didn't expect that.</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:57:27.000344</ts>
    <user>Kimbery</user>
    <text>totally out of curiosity, what did you expect it to be?</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:59:28.000019</ts>
    <user>Eun</user>
    <text>Alist?</text>
  </message>
  <message conversation_id="244">
    <ts>2017-09-13T16:59:50.000044</ts>
    <user>Eun</user>
    <text>The number of properties a struct type has would typically be small, I'd imagine.</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:31:51.000216</ts>
    <user>Chantelle</user>
    <text>what's a good way to make a struct safe for users to use without breaking if you add more fields while still allowing them to define subtypes of the struct?</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:35:17.000041</ts>
    <user>Chantelle</user>
    <text>I'm okay with field name overlap between sub and supertypes breaking clients, I just don't want adding any field at all to break them</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:35:20.000273</ts>
    <user>Ka</user>
    <text>that's a great question that i'm interested in, too</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:35:40.000057</ts>
    <user>Ka</user>
    <text>there's some really funky stuff when you want to use `#:super` around struct copy and such</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:35:40.000247</ts>
    <user>Chantelle</user>
    <text>it comes up a lot and it's the thing that frustrates me most about structs</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:49:31.000469</ts>
    <user>Willian</user>
    <text>&lt;@Latarsha&gt; I can reproduce the timeouts locally (on my linux desktop only), but the stacktraces are not really helpful, and im not sure how to proceed. It’s somehow related to: the JIT, unsafe-fl operations, and futures.</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:49:53.000512</ts>
    <user>Willian</user>
    <text>The test case is a small one, involving just the blur function, (which uses unsafe-fl and futures)</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:51:27.000345</ts>
    <user>Willian</user>
    <text>its hard to minimize further b/c inlining the blur function and modifying it in seemingly any way decreases the probability that the program will freeze</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:53:37.000222</ts>
    <user>Latarsha</user>
    <text>&lt;@Willian&gt; For that sort of thing, `rr` is very nice because you can just run the program repeatedly until failure, and then debug the failed one</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:55:38.000442</ts>
    <user>Willian</user>
    <text>it also will likely go away with the upcoming chez rewrite so its been fairly low priority.

I never got `rr` to work, but the programs actually just locked up so I was able to attach `gdb`. It tends to get stuck in seeming arbitrary functions who’s names suggest they have to do with allocation iirc.</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:57:09.000134</ts>
    <user>Willian</user>
    <text>I could also just disable the pict tests that call `jack-o-lantern` and `blur` for now to make drdr shut up, since the bug is ages old anyways</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:57:13.000114</ts>
    <user>Willian</user>
    <text>&lt;@Latarsha&gt; ^</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:58:21.000325</ts>
    <user>Latarsha</user>
    <text>what didn't work on `rr`?</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T17:58:40.000191</ts>
    <user>Latarsha</user>
    <text>also just disabling those tests would be good since that would reduce the hang-rate on drdr</text>
  </message>
  <message conversation_id="246">
    <ts>2017-09-13T18:04:55.000017</ts>
    <user>Willian</user>
    <text>There wasn't something prebuilt for my platform and I never got building from source working I think? Idr its been like a year since ive looked at this.

I'll update the issue and disable the tests when I get home.</text>
  </message>
  <message conversation_id="247">
    <ts>2017-09-14T07:16:30.000341</ts>
    <user>Kimber</user>
    <text>How does this "half-bakedness" manifests itself?</text>
  </message>
  <message conversation_id="247">
    <ts>2017-09-14T07:21:20.000183</ts>
    <user>Kimber</user>
    <text>I don't think this solves my problem.
My issue is that I do not want to implement that generic interface on my struct. Not becase the interface is not known when defining the struct (yet the reverse is) but simply I'd like to keep the struct definition clean from orthogonal features.
Imagine a generic interface for Jsonifying/Database/Automatic Routing/etc.
One could end up with a huge monster struct.</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T13:29:25.000265</ts>
    <user>Kimbery</user>
    <text>&lt;@Rosalee&gt; &lt;@Vincenzo&gt; Is the nanopass Racket compiler rewrite still a thing now that the Chez rewrite is planned? Or does the latter subsume the former?</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T14:00:11.000286</ts>
    <user>Rosalee</user>
    <text>&lt;@Kimbery&gt; I haven’t touched it in a while, although Chez’s compiler is nanopass.</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T14:01:07.000018</ts>
    <user>Rosalee</user>
    <text>Although I don’t know how hard it is to compile Racket code to chez code. &lt;@Vincenzo&gt; would obviously know about that more than me. :wink:</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T14:01:32.000405</ts>
    <user>Rosalee</user>
    <text>BTW, can anyone give me a good idea of when to use struct properties vs generics?:</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T14:01:40.000424</ts>
    <user>Rosalee</user>
    <text>woops, wrong question.</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T14:02:05.000435</ts>
    <user>Rosalee</user>
    <text>&lt;https://stackoverflow.com/questions/46225445/struct-properties-vs-generics-in-racket&gt;</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T14:03:13.000317</ts>
    <user>Rosalee</user>
    <text>I ask because the convertible library (and pict-convertible library), are still using properties. So if I make another convertible library (video-convertible), should I use properties rather than generics.</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T14:45:14.000596</ts>
    <user>Kimbery</user>
    <text>&lt;@Rosalee&gt; Thanks, that makes sense. I was just sort of idly wondering about how hard it would be to add GHC-style rewrite rules to Racket, and I figure it would be a lot easier to add to a compiler written in Racket rather than one written in C.</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T15:21:00.000216</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; probably struct properties should only be used when the value stored in the property isn't a function (or something function-like like a struct field index)</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T15:24:18.000296</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; I think if you're compatible with `convertible` (which sounds nice) then use properties</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T15:24:25.000326</ts>
    <user>Latarsha</user>
    <text>if you're building something new, use generics</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T15:27:33.000398</ts>
    <user>Chantelle</user>
    <text>I think the only thing generics can't do that props can is associate a value with a struct type itself in a way where you don't need an instance of the struct to access it; the generated methods of a generic interface always need an actual instance of the struct passed to them. Like how typeclasses let you associate a value with a type (such as `mempty` in `Monoid`) but OO interfaces can't do that.</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T15:45:56.000690</ts>
    <user>Chantelle</user>
    <text>How can I test that two syntax objects have the same scopes? Is using `(equal? (datum-&amp;gt;syntax stx1 #f) (datum-&amp;gt;syntax stx2 #f))` a reasonable way?</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T15:47:21.000457</ts>
    <user>Latarsha</user>
    <text>I think you could try that, but compare using `free-identifier=?` on a symbol instead of `#f`</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T15:48:10.000069</ts>
    <user>Chantelle</user>
    <text>ah, so `(let ([id (gensym)]) (free-identifier=? (datum-&amp;gt;syntax stx1 id) (datum-&amp;gt;syntax stx2 id)))` would be better?</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T15:48:35.000222</ts>
    <user>Latarsha</user>
    <text>that's my best suggestion</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T15:48:42.000522</ts>
    <user>Chantelle</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T16:10:47.000276</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; `bound-identifier=?` tests whether or not two things have the same scopes, not `free-identifier=?`</text>
  </message>
  <message conversation_id="249">
    <ts>2017-09-14T16:11:06.000279</ts>
    <user>Kimbery</user>
    <text>`free-identifier=?` tests if two identifiers have the same _binding_</text>
  </message>
  <message conversation_id="249">
    <ts>2017-09-14T16:11:10.000147</ts>
    <user>Chantelle</user>
    <text>oh right</text>
  </message>
  <message conversation_id="249">
    <ts>2017-09-14T16:11:18.000073</ts>
    <user>Chantelle</user>
    <text>yeah `bound-identifier=?` is definitely what I want</text>
  </message>
  <message conversation_id="248">
    <ts>2017-09-14T16:11:34.000164</ts>
    <user>Kimbery</user>
    <text>(I’m sure &lt;@Latarsha&gt; knows this, just a minor detail)</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T16:45:37.000524</ts>
    <user>Willian</user>
    <text>&lt;@Latarsha&gt; whelp. I have no clue why that last pict run timed out. IDK what else to do other than disable the `"auto pict conversion"` `test-suite` its associated tests entirely. (The computer on which I could reproduce this is currently borked atm too…)

BTW do you know if we can clear the timer logs for that file or something? Its currently  making the drdr page really slow to load it seems.</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T17:10:50.000412</ts>
    <user>Roxann</user>
    <text>Writing a paper in Scribble/acmart/@acmsmall, using bibtex. Was able to get citations as [1…99] numbers, aka `#:style number-style, but they are not linked to the bibtex entry. Is there a way, and probably an easier way, to make this happen. Was using a similar bib.rkt file from one of Van Horn’s papers:

```
#lang racket

(require scriblib/autobib scriblib/bibtex)
(provide ~cite citet generate-bib)
(provide (all-from-out scriblib/bibtex scriblib/autobib))

(define-bibtex-cite "occam.bib" ~cite citet generate-bib #:style number-style)```</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:26:48.000079</ts>
    <user>Nelson</user>
    <text>&lt;@Roxann&gt; try using the `small-number-style` code here: &lt;https://github.com/bennn/gtp-paper/blob/master/template/main.rkt#L94&gt;</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:27:16.000237</ts>
    <user>Nelson</user>
    <text>(I inherited that code from Asumu ... and I think it'll add the links like you want.)</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:27:29.000065</ts>
    <user>Roxann</user>
    <text>&lt;@Nelson&gt; thanks, i’ll try it out</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:33:44.000226</ts>
    <user>Roxann</user>
    <text>&lt;@Nelson&gt; it does indeed link things, but always takes me to the first page upon click</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:35:35.000050</ts>
    <user>Roxann</user>
    <text>we are using a bib file though</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:36:45.000251</ts>
    <user>Nelson</user>
    <text>that's weird and bad ...</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:37:09.000125</ts>
    <user>Roxann</user>
    <text>let me take a look at the generated tex</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:37:31.000199</ts>
    <user>Nelson</user>
    <text>here's a full example, also using a bib file: &lt;https://github.com/nuprl/gradual-typing-performance/tree/master/paper/popl-2016&gt;</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:38:05.000182</ts>
    <user>Nelson</user>
    <text>are you calling `generate-bibliography` somewhere?</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:39:41.000019</ts>
    <user>Roxann</user>
    <text>&lt;@Nelson&gt; yep, calling it the main scribble file</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:41:41.000073</ts>
    <user>Nelson</user>
    <text>at the bottom, after all the `include-section`s? (not sure if that matters)</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:41:55.000008</ts>
    <user>Roxann</user>
    <text>yep, it’s the last thing</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:42:12.000205</ts>
    <user>Nelson</user>
    <text>oops haha</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:42:15.000150</ts>
    <user>Roxann</user>
    <text>`~[\Thyperref{48}{autobiblab:48}]` is what a citation looks like in tex</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:42:21.000113</ts>
    <user>Nelson</user>
    <text>add this to your texstyle `\newcommand{\Thyperref}[2]{\hyperref[#2]{#1}}`</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:42:25.000186</ts>
    <user>Roxann</user>
    <text>ah, ok</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:43:28.000134</ts>
    <user>Nelson</user>
    <text>(or change `render-citation` to generate a call to `\hyperref`)</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:43:39.000042</ts>
    <user>Roxann</user>
    <text>ok</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:58:56.000061</ts>
    <user>Nelson</user>
    <text>is it working?</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T19:59:55.000321</ts>
    <user>Roxann</user>
    <text>not yet. going to look at generating hyperrefs</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:01:27.000254</ts>
    <user>Nelson</user>
    <text>ok (did "texstyle" make any sense?)</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:01:58.000136</ts>
    <user>Roxann</user>
    <text>yeah, i have a .tex file for other things we’re using and have `\newcommand{\Thyperref}[2]{\hyperref[#2]{#1}}`</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:02:00.000220</ts>
    <user>Roxann</user>
    <text>in there</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:02:18.000022</ts>
    <user>Roxann</user>
    <text>run it as per `raco scribble ++style style.tex...`</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:02:50.000147</ts>
    <user>Roxann</user>
    <text>was actually looking at &lt;https://github.com/migeed-z/retic_performance/blob/fdf795946b311e7d64f04902ab54e322f03594df/dls/common.rkt&gt; to see if I missed something. Odd that it works elsewhere</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:02:54.000165</ts>
    <user>Roxann</user>
    <text>for these</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:04:21.000121</ts>
    <user>Roxann</user>
    <text>I do realize that in popl-2016 example, define-site does not point to the .bib filename though</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:04:24.000015</ts>
    <user>Roxann</user>
    <text>the cs.bib</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:04:54.000244</ts>
    <user>Roxann</user>
    <text>as we’re doing, where we point to the bib file specifically</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:09:54.000084</ts>
    <user>Nelson</user>
    <text>oh, good point. Try using just `define-cite` ?</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:10:49.000070</ts>
    <user>Nelson</user>
    <text>... I guess you'd have to reformat your bib file</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:11:21.000292</ts>
    <user>Roxann</user>
    <text>yeah &lt;@Nelson&gt;. thinking that may do the trick as i build examples. Will try that tomorrow possibly.</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:13:00.000096</ts>
    <user>Roxann</user>
    <text>but, maybe I’ll play around w/ the code and see. it seems like it should still match up, but we’ll see.</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:15:09.000004</ts>
    <user>Nelson</user>
    <text>ok, feel free to send me your bib file if you get stuck. I can try later tonight.</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-14T20:15:52.000174</ts>
    <user>Roxann</user>
    <text>oh, great. Yeah. I’ll dm that to you</text>
  </message>
  <message conversation_id="251">
    <ts>2017-09-14T23:57:12.000004</ts>
    <user>Roxann</user>
    <text>as an update to our convo, seems like the snippet works find when using @sigplan, but not for @acmsmall or @acmtog, etc…</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-15T09:59:25.000362</ts>
    <user>Nelson</user>
    <text>&lt;@Rosalee&gt; the bibliography links in the super 8 paper are broken --- clicking a citation jumps to the first page. &lt;https://www2.ccs.neu.edu/racket/pubs/icfp17-acf.pdf&gt;</text>
  </message>
  <message conversation_id="252">
    <ts>2017-09-15T10:07:11.000683</ts>
    <user>Jacob</user>
    <text>is it acceptable etiquette to create two posts on Racket users and dev email lists about the same thing or to alert users about a topic on dev email list? I believe the dev email list is low traffic so I was thinking to alert interested users to check the other list but didn't want to seem spammy.</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-15T10:17:11.000348</ts>
    <user>Nelson</user>
    <text>&lt;@Roxann&gt; &lt;@Rosalee&gt; the problem seems to be, the section header for the Bib / References isn't a valid target for hyperref</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-15T10:17:28.000460</ts>
    <user>Nelson</user>
    <text>1. if I add a `\section{Foo}` just after the bibliography, links work</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-15T10:17:54.000210</ts>
    <user>Nelson</user>
    <text>2. if I change the bibliography from `\Ssectionstarx{Bibliography}` to `\Ssection{Bibliography}` (in the generated TeX), then links work</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-15T10:23:08.000058</ts>
    <user>Roxann</user>
    <text>oh, interesting.</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-15T10:23:51.000712</ts>
    <user>Nelson</user>
    <text>Adding `\phantomsection` to `\Sectionstarx` works ... setting up a PR now but I'm not going to test it now</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-15T10:27:36.000312</ts>
    <user>Roxann</user>
    <text>&lt;@Nelson&gt; thanks for all the work</text>
  </message>
  <message conversation_id="250">
    <ts>2017-09-15T13:29:54.000077</ts>
    <user>Rosalee</user>
    <text>&lt;@Nelson&gt; Interesting and good catch.</text>
  </message>
  <message conversation_id="253">
    <ts>2017-09-15T13:29:57.000039</ts>
    <user>Rosalee</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="253">
    <ts>2017-09-15T13:30:02.000351</ts>
    <user>Rosalee</user>
    <text>Did you already post a push to fix it?</text>
  </message>
  <message conversation_id="253">
    <ts>2017-09-15T13:31:00.000587</ts>
    <user>Rosalee</user>
    <text>&lt;@Jacob&gt; I think most of the people on the dev mailing list are also on the users mailing list so just posting to users will get everyone. (If that is what you’re going for.)</text>
  </message>
  <message conversation_id="253">
    <ts>2017-09-15T13:31:22.000248</ts>
    <user>Rosalee</user>
    <text>Although I personally think posting a link to the dev list to the users list conversation would be fine.</text>
  </message>
  <message conversation_id="253">
    <ts>2017-09-15T13:31:27.000132</ts>
    <user>Rosalee</user>
    <text>(Although I am just one person. :wink: )</text>
  </message>
  <message conversation_id="253">
    <ts>2017-09-15T14:03:45.000128</ts>
    <user>Jacob</user>
    <text>Ha ok, my reasoning had been that work on package system was more of a developer thing than general users. I'll post to the users list and link to the dev list post.</text>
  </message>
  <message conversation_id="254">
    <ts>2017-09-15T14:06:24.000223</ts>
    <user>Nelson</user>
    <text>&lt;https://github.com/racket/scribble/pull/142&gt;</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:17:40.000225</ts>
    <user>Chantelle</user>
    <text>&lt;@Jacob&gt; maybe a #pkg channel would be worth adding to the slack?</text>
  </message>
  <message conversation_id="253">
    <ts>2017-09-15T16:18:51.000548</ts>
    <user>Jacob</user>
    <text>sure, I would like that. There'll certainly be a need for at length discussions about ideas for improving the package system.</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:19:01.000528</ts>
    <user>Jacob</user>
    <text>who should I petition for adding the channel?</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:19:37.000371</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; dost thou hath channel create powers?</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:19:56.000186</ts>
    <user>Chantelle</user>
    <text>it would work as a good place for announcing new packages or talking about community packages too</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:20:24.000077</ts>
    <user>Jacob</user>
    <text>Agreed</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:20:34.000184</ts>
    <user>Jacob</user>
    <text>and looks like our wish has been granted</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:21:17.000039</ts>
    <user>Nelson</user>
    <text>GOTO &lt;#C74SV1NJJ|pkg&gt;</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:30:54.000548</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: Doesn't everyone?</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:33:56.000270</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; huh, I guess I just assumed I wouldn't be able to</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T16:35:23.000143</ts>
    <user>Chantelle</user>
    <text>Tested, anyone can make a channel. Will keep that in mind :p</text>
  </message>
  <message conversation_id="256">
    <ts>2017-09-15T21:42:17.000023</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; profiled: &lt;http://csprofiles.rice.edu/2017/09/13/flatt/&gt;</text>
  </message>
  <message conversation_id="256">
    <ts>2017-09-15T21:42:59.000006</ts>
    <user>Nelson</user>
    <text>wow, same picture as always</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-15T22:32:54.000056</ts>
    <user>Chantelle</user>
    <text>&amp;gt; In retrospect, I probably would have turned any job into a programming-language project.

#racketlife</text>
  </message>
  <message conversation_id="257">
    <ts>2017-09-16T01:59:04.000026</ts>
    <user>Kimbery</user>
    <text>&lt;@Nelson&gt; I’m starting to think there are only four pictures of Matthew on the internet…</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T15:20:13.000033</ts>
    <user>Chantelle</user>
    <text>&lt;@Willian&gt; does `raco cover` exit with a nonzero status code? I'm wondering how I can avoid running all my tests twice in CI</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:01:16.000006</ts>
    <user>Willian</user>
    <text>&lt;@Chantelle&gt; raco cover does do a non-zero exit code on test failure (I think) but it doesn't have the same notion of failure as raco test. I don't think I treats stderr as failure. Maybe it should.</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:03:56.000033</ts>
    <user>Chantelle</user>
    <text>&lt;@Willian&gt; I think ideally raco test would provide a way for packages to declare they should be instrumented somehow when being tested, and cover could use that to generate the coverage map. Then the raco cover command would just take the map and upload it or summarize it.</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:04:37.000072</ts>
    <user>Chantelle</user>
    <text>That way it's not possible for raco test and raco cover to have different notions of test failure</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:10:29.000050</ts>
    <user>Willian</user>
    <text>I'm not sure about the implications of doing that... Cover, for instance, is not compatible with running tests in parallel. Also I'm suspicious of this because cover can change a programs behavior</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:12:20.000039</ts>
    <user>Willian</user>
    <text>That being said, a unified CI interface would be reaalllyyy nice</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:22:35.000023</ts>
    <user>Chantelle</user>
    <text>&lt;@Willian&gt; maybe combined with an info field to control whether tests run in parallel? or something like that but more general</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:23:20.000013</ts>
    <user>Chantelle</user>
    <text>what sort of programs does cover change test behavior in?</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:27:58.000080</ts>
    <user>Willian</user>
    <text>There are a few behavior changes that i don't understand and are probably bugs, but in general it changes the runtime of programs---both because of all the extra code and the inserted set!s probably mess with the optimizer---which can changes tests with timeouts or might change race condition behavior. It also greatly increases the memory used, which has caused intermittent OOM errors in the past.</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:29:07.000031</ts>
    <user>Willian</user>
    <text>Also I'm not sure what effect cover will have on reflection now that I think about it...</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:29:52.000097</ts>
    <user>Willian</user>
    <text>Also module loading can deadlock if you change the logger before a dynamic require....</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:42:40.000008</ts>
    <user>Chantelle</user>
    <text>&lt;@Willian&gt; does cover only need to install errortrace during compilation and instrument running that compiled code or does it need to change `current-compile` in other ways too?</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:45:55.000056</ts>
    <user>Willian</user>
    <text>Neither? Cover uses errortrace's syntax traversal stuff to apply its own annotation function.</text>
  </message>
  <message conversation_id="258">
    <ts>2017-09-16T17:48:28.000048</ts>
    <user>Chantelle</user>
    <text>ohhh</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T17:49:32.000026</ts>
    <user>Willian</user>
    <text>It does a bunch of stuff differently: it sets up cross phase annotations, it handles #:cross-phase-persistant modules, it uses a different internal representation of coverage to handle multifile coverage more efficiently, etc. It does wind up reimplementing a bunch of stuff in errortrace though but I'm not sure how to get around that</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T18:04:30.000032</ts>
    <user>Chantelle</user>
    <text>&lt;@Willian&gt; thanks, that clears up my understanding a lot. I've been thinking about testing and CI stuff a lot lately so let's talk more at racketcon, if you like :)</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T18:05:32.000042</ts>
    <user>Willian</user>
    <text>&lt;@Chantelle&gt; yes! I thinking about working on the cover issue you logged as a hackathon project </text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T18:05:42.000066</ts>
    <user>Chantelle</user>
    <text>Which one? :P</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T18:06:09.000071</ts>
    <user>Willian</user>
    <text>The most recent one</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T18:06:12.000051</ts>
    <user>Willian</user>
    <text>&lt;https://github.com/florence/cover/issues/139&gt;</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T18:06:47.000006</ts>
    <user>Willian</user>
    <text>The other ones are... Hard...</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T18:07:00.000022</ts>
    <user>Chantelle</user>
    <text>Oh! Yes that's a great hackathon project and its something I definitely want to do</text>
  </message>
  <message conversation_id="255">
    <ts>2017-09-16T18:08:17.000030</ts>
    <user>Chantelle</user>
    <text>I'd like to combine that with two testing packages I have to do some neat stuff</text>
  </message>
  <message conversation_id="259">
    <ts>2017-09-16T20:04:40.000007</ts>
    <user>Corey</user>
    <text>&lt;@Kimbery&gt; That sort of fits my theory that, based on observable work output, Matthew is actually identical quadruplets.</text>
  </message>
  <message conversation_id="259">
    <ts>2017-09-17T10:09:09.000024</ts>
    <user>Tilda</user>
    <text>Hopefully quick question: in scribble, if I want to write `@racketblock[(cons (circle 30 "solid" "red") '())]`, it'll typeset all that text just fine.  How do I anti-quote the call to `circle` so that it evaluates to a picture,  and I get typeset output of `(cons &amp;lt;the actual circle&amp;gt; '())`?</text>
  </message>
  <message conversation_id="259">
    <ts>2017-09-17T10:13:23.000064</ts>
    <user>Vincenzo</user>
    <text>&lt;@Tilda&gt; `#,`</text>
  </message>
  <message conversation_id="259">
    <ts>2017-09-17T10:14:32.000071</ts>
    <user>Tilda</user>
    <text>perfect, thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="259">
    <ts>2017-09-17T10:15:29.000001</ts>
    <user>Tilda</user>
    <text>(might be nice to mention that in &lt;https://docs.racket-lang.org/scribble/reader.html...&gt;)</text>
  </message>
  <message conversation_id="259">
    <ts>2017-09-17T10:16:41.000037</ts>
    <user>Vincenzo</user>
    <text>Well, it's a `racketblock` escape, not an at-reader escape</text>
  </message>
  <message conversation_id="259">
    <ts>2017-09-17T10:18:58.000002</ts>
    <user>Tilda</user>
    <text>mmm, fair.  and it is indeed mentioned in racketblock, so I sit corrected :slightly_smiling_face:</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T13:15:05.000016</ts>
    <user>Rosalee</user>
    <text>Is calling `callback-proc` in atomic mode (in the following snippet) safe?:

```
(define ffmpeg-log-list '())
(struct ffmpeg-msg (name
                    level
                    msg))

(define (callback-proc name level len msg)
  (define name* (or name #"???"))
  (set! ffmpeg-log-list (cons (ffmpeg-msg name* level msg) ffmpeg-log-list)))
```</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T13:15:33.000136</ts>
    <user>Rosalee</user>
    <text>It doesn’t need to synchronize on anything. It does do two constructions (the pair and the `ffmpeg-msg`)</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T13:15:45.000037</ts>
    <user>Rosalee</user>
    <text>And it does do a set! on a list.</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T13:16:08.000010</ts>
    <user>Rosalee</user>
    <text>(One other place in the code also can set! the list, although it also runs in atomic mode.)</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T13:16:35.000039</ts>
    <user>Rosalee</user>
    <text>This code seems to be safe most of the time, but occasionally makes things deadlock.</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T13:41:40.000010</ts>
    <user>Rosalee</user>
    <text>Hmm…I seem to get the same behavior even when I do:
```
(define (callback-proc name level len msg)
  (define name* (or name #"???")
```</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T13:41:52.000052</ts>
    <user>Rosalee</user>
    <text>errr</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T13:41:58.000086</ts>
    <user>Rosalee</user>
    <text>```
(define (callback-proc name level len msg)
  (define name* (or name #"???")
  (void))
```</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T15:37:12.000094</ts>
    <user>Rosalee</user>
    <text>hmm…here’s any idea. &lt;@Vincenzo&gt;, what happens when Racket is already in atomic mode, and an FFI call from another os-thread calls a racket callback. Would the async-apply wait until Racket leaves atomic mode?</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:22:11.000023</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; the questions you ask when you're developing video make me scared to do anything FFI related :p</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:50:37.000040</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; lol</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:50:43.000021</ts>
    <user>Rosalee</user>
    <text>Its actually not that bad for the most part.</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:51:12.000067</ts>
    <user>Rosalee</user>
    <text>And honestly, the fact that I can even ask those questions is pretty impressive, and speaks a lot to how good the ffi is. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:55:13.000069</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; I believe you, but I remain cautious :p</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:55:22.000009</ts>
    <user>Rosalee</user>
    <text>lol, fair.</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:56:09.000020</ts>
    <user>Rosalee</user>
    <text>It is always kind of amusing when you have a program with multiple threading systems running around. And you have to remember which mutex is associated with which system to avoid deadlocks…</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:56:33.000031</ts>
    <user>Chantelle</user>
    <text>oh jeez</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:57:15.000022</ts>
    <user>Rosalee</user>
    <text>He, he. Hopefully Sam Caldwell will get some of his concurrency DSLs out there, as that can help eliminate a lot of the problems. )</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:57:16.000029</ts>
    <user>Rosalee</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:57:28.000020</ts>
    <user>Rosalee</user>
    <text>But ya. IMO, it really is quite fun. ^.^</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:58:15.000079</ts>
    <user>Chantelle</user>
    <text>have no idea who that is but concurrency dsls sound interesting</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:58:19.000015</ts>
    <user>Chantelle</user>
    <text>do you have a link?</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T17:59:41.000053</ts>
    <user>Rosalee</user>
    <text>Not yet no. He is a PhD student who was doing a lot of stuff with &lt;@Sharolyn&gt; (who does seem to actually be on here. :wink: )</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T18:00:12.000087</ts>
    <user>Rosalee</user>
    <text>&lt;https://github.com/tonyg/syndicate&gt;</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T18:00:25.000050</ts>
    <user>Chantelle</user>
    <text>syndicate I have poked at a little</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T18:00:50.000052</ts>
    <user>Rosalee</user>
    <text>I guess there is that: &lt;https://docs.racket-lang.org/syndicate/index.html?q=syndicate&gt;</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T18:00:51.000126</ts>
    <user>Rosalee</user>
    <text>Ah, okay</text>
  </message>
  <message conversation_id="260">
    <ts>2017-09-17T18:06:27.000006</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Yes, atomic mode means that `async-apply` callbacks must wait</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T18:28:54.000094</ts>
    <user>Chantelle</user>
    <text>what is the `user` package scope for? going through the docs it seems to be so different users of the same computer can have different packages installed, but conflict checking is across all installed packages. why would it be useful then?</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:06:02.000073</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; It doesn't work if installation-scope packages depend on user-scope packages, but the intent is that all dependencies go the other way. It also doesn't work if installation-scope packages change out from under a user. The normal case is that a distribution has installation scope and doesn't change, and everything else is in user-scope.</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:09:09.000037</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; would it prevent a command like `raco pkg update --auto mypkg` from updating installation scope packages because that might cause problems?</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:12:39.000046</ts>
    <user>Vincenzo</user>
    <text>In a setting with user-scoped packages, normally that's the default (so `raco pkg` actions tend not to affect installation scope) and normally the catalog is configured so that an unchanging set of packages are reported for the installation (i.e., the catalog for a release, which freezes all of the packages that are included in the main distribution).</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:14:12.000073</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; I think the main distribution packages are in both the normal catalog and a release catalog; do different installation scopes use different sets of package catalogs to resolve names to sources?</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:19:25.000060</ts>
    <user>Vincenzo</user>
    <text>No, they use the same catalogs, but the release catalog is ordered first in the search</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:22:00.000051</ts>
    <user>Chantelle</user>
    <text>I don't think I understand why there are package scopes then, since the "main distribution packages are frozen" behavior arises naturally due to how catalogs are configured</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:39:16.000013</ts>
    <user>Vincenzo</user>
    <text>It's not about which packages are updated, but about which directories can be written to install new packages. For a multi-user setting, the main distribution can be installed in "/usr/local" and shared among users. But users cannot install new packages there; they need to install packages in their own space, while sharing as much as possible with the main installation.</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:42:50.000049</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; ohhh, so it's more about machine permissions and administration, instead of isolating packages from each other or dependencies?</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:43:06.000019</ts>
    <user>Vincenzo</user>
    <text>yes</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T19:44:15.000007</ts>
    <user>Chantelle</user>
    <text>how does using a directory as a package scope instead of using the installation or user scopes play into that?</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T21:08:34.000059</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; A directory is meant to be an extra installation-like layer, similar to "/usr/lib" versus "/usr/local/lib".</text>
  </message>
  <message conversation_id="261">
    <ts>2017-09-17T21:12:23.000015</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; ah, that makes sense. thanks for explaining all this!</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T11:32:11.000473</ts>
    <user>Nelson</user>
    <text>&lt;@Rosalee&gt; can you explain this program to me? I don't know why `(eval 'vl-append pict-namespace)` is raising an error. &lt;http://pasterack.org/pastes/92108&gt;</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T11:32:40.000552</ts>
    <user>Nelson</user>
    <text>^ I mean, "why is `((eval 'vl-append pict-namespace) (blank 0 0))` raising an error"</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T11:51:01.000043</ts>
    <user>Rosalee</user>
    <text>&lt;@Nelson&gt; how did you constuct pict-namespace?</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T11:51:49.000023</ts>
    <user>Rosalee</user>
    <text>Because if it's a different namespace, the runtime could be thinking they are two different struct types.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T11:53:41.000267</ts>
    <user>Nelson</user>
    <text>`make-base-namespace` ... `(namespace-require 'pict)`; it is a different namespace</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T12:41:40.000069</ts>
    <user>Rosalee</user>
    <text>&lt;@Nelson&gt; Ya, that is just because its a different namespace (and has nothing to do with pict.)</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T12:41:49.000203</ts>
    <user>Rosalee</user>
    <text>For example, if you add:
```
(define-namespace-anchor anchor)
(define pict-namespace2
  (namespace-anchor-&amp;gt;namespace anchor))
```</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T12:41:58.000283</ts>
    <user>Rosalee</user>
    <text>and use `pict-namespace2` instead, it works out fine.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:15:36.000326</ts>
    <user>Vincenzo</user>
    <text>&lt;@Nelson&gt; &lt;@Rosalee&gt; If the goal of `pict-namespace` is to isolate effects, then it's better to use `namespace-attach-module` to attach `pict` to the new namespace. But maybe the just-pushed improvement to `namespace-attach-module` docs means that you' already know that.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:16:02.000266</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Yup, exactly.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:16:29.000068</ts>
    <user>Rosalee</user>
    <text>&lt;@Nelson&gt; and I (and Michael B.) figured that out, thanks though. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:16:48.000089</ts>
    <user>Nelson</user>
    <text>well we should post the solution</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:17:42.000264</ts>
    <user>Rosalee</user>
    <text>&lt;@Nelson&gt; We did, by updating the docs. But in your case just adding a `namespace-attach-module` works.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:17:59.000028</ts>
    <user>Rosalee</user>
    <text>Speaking of nothing….I just found out that if you have:</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:18:03.000356</ts>
    <user>Rosalee</user>
    <text>A) A slider,</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:18:16.000517</ts>
    <user>Rosalee</user>
    <text>B) A timer that updates the slider on a regular interval, and</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:18:25.000182</ts>
    <user>Rosalee</user>
    <text>C) Click and drag the slider,</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:19:02.000530</ts>
    <user>Rosalee</user>
    <text>then every time the timer goes off while you are still holding the slider gets treated as if it was a click, rather than being set via set-value!</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:19:15.000080</ts>
    <user>Rosalee</user>
    <text>Not sure if that’s a bug or an intended feature. Thoughts &lt;@Vincenzo&gt;?</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:25:55.000048</ts>
    <user>Nelson</user>
    <text>solution: &lt;http://pasterack.org/pastes/63734&gt;</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:27:15.000016</ts>
    <user>Nelson</user>
    <text>("short" way to eval a string to a function from your favorite library)</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:27:23.000483</ts>
    <user>Rosalee</user>
    <text>Such as in this example: &lt;https://gist.github.com/LeifAndersen/ff07cb0ffd516b0333f2753db6e96c37&gt;</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:28:09.000323</ts>
    <user>Rosalee</user>
    <text>If you click and drag the slider around, the first callback will be what you want, but then you get a bunch of others that are not what you wanted.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T15:28:31.000134</ts>
    <user>Rosalee</user>
    <text>Namely, you will get exactly how many as the amount the timer went off.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T16:59:19.000547</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; that's a bug</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T17:06:47.000006</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Okay. I’ll try to hunt it down unless you beat me to it.</text>
  </message>
  <message conversation_id="263">
    <ts>2017-09-18T17:08:41.000521</ts>
    <user>Vincenzo</user>
    <text>I haven't investigated, but I think I know the problem: dragging puts the control in a "slider-value update means that a the slider was moved" mode, and calling `set-value` doesn't temporarily suppress that mode while updating the value</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T17:11:30.000149</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; I agree that sounds like the bug. Its more a matter of digging in and finding it. :wink:</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T17:12:52.000275</ts>
    <user>Rosalee</user>
    <text>Mostly because the implementation for the functions is:
```
      (bounce 
       c
       (get-value)
       (set-value v))
```</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T17:13:25.000320</ts>
    <user>Rosalee</user>
    <text>Which I am sure is great for code re-use, means I need to track down the actual `get-value` without the help of DrRacket’s arrows.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T17:14:04.000314</ts>
    <user>Rosalee</user>
    <text>(which, to be clear, is absolutely fine with me. :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T17:22:00.000205</ts>
    <user>Vincenzo</user>
    <text>I expected to see the problem in "gui-lib/mred/private/wx/cocoa/slider.rkt", but I don't see anything there to control when `'slider` events are generated, so maybe my guess is wrong</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T17:25:35.000308</ts>
    <user>Rosalee</user>
    <text>Ya, about all I see is:
```
  (define/public (changed)
    (callback this (new control-event%
                        [event-type 'slider]
                        [time-stamp (current-milliseconds)])))
```</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T17:27:44.000091</ts>
    <user>Rosalee</user>
    <text>Ah, this looks promising:
```
(define-objc-class RacketSlider NSSlider
  #:mixins (FocusResponder KeyMouseResponder CursorDisplayer)
  [wxb]
  (-a _void (changed: [_id sender])
      (let ([wx (-&amp;gt;wx wxb)])
        (when wx
          (send wx update-message)
          (queue-window-event wx (lambda () (send wx changed)))
          (constrained-reply
           (send wx get-eventspace)
           (lambda () (let loop () (pre-event-sync #t) (when (yield/no-sync) (loop))))
           (void))))))

```</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-18T17:28:18.000233</ts>
    <user>Rosalee</user>
    <text>And the `queue-window-event` would explain why you see all of the calls right after you let go.</text>
  </message>
  <message conversation_id="264">
    <ts>2017-09-18T23:21:45.000053</ts>
    <user>Chantelle</user>
    <text>I'm getting `WARNING: bad 'scribblings info: '(("long//path/to/docs/main.scrbl"))` - do scribble document modules for a collection _have_ to only be one folder down from the collection? Do I have to make a second `info.rkt` module next to my scribble document with just `scribblings` defined?</text>
  </message>
  <message conversation_id="264">
    <ts>2017-09-18T23:27:27.000041</ts>
    <user>Chantelle</user>
    <text>nevermind, turned out to be a problem with the `categories` part of the scribblings info</text>
  </message>
  <message conversation_id="265">
    <ts>2017-09-19T07:39:22.000250</ts>
    <user>Yadira</user>
    <text>good day. question about lexer. how i must write code for lexer without return token. For example, in flex i can write 

"//" {/* do nothing*/}

but in lexer for drracket 

[(:seq #// #//) null]

return (position-token '() (position 7 #f #f) (position 10 #f #f))
i don't need any return from this token. 
Help me, please</text>
  </message>
  <message conversation_id="265">
    <ts>2017-09-19T10:31:20.000218</ts>
    <user>Marlin</user>
    <text>&lt;@Yadira&gt; Assuming you're using the `lexer` form from `parser-tools/lex`, you just want to call the lexer (tail-)recursively. That's it. If you're using a `lexer-src-pos` then you'd want to wrap your call in `return-without-pos`. The documentation for `return-without-pos` should be useful here: &lt;http://docs.racket-lang.org/parser-tools/Lexers.html?q=lexer-src-pos#%28form._%28%28lib._parser-tools%2Flex..rkt%29._return-without-pos%29%29&gt;</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-19T13:01:28.000599</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Interesting, the example from yesterday (&lt;https://gist.github.com/LeifAndersen/ff07cb0ffd516b0333f2753db6e96c37&gt;) also causes it to crash on windows.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-19T13:01:37.000047</ts>
    <user>Rosalee</user>
    <text>err….not crash</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-19T13:01:42.000648</ts>
    <user>Rosalee</user>
    <text>Cause it to jump to `42`.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-19T13:03:17.000445</ts>
    <user>Rosalee</user>
    <text>Oh wait, never mind. It is an os x bug</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-19T13:08:37.000112</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; O.O The behavior is different if I run it in DrRacket vs running it in the command line!</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-19T13:08:42.000409</ts>
    <user>Rosalee</user>
    <text>That is surprising.</text>
  </message>
  <message conversation_id="262">
    <ts>2017-09-19T13:13:42.000510</ts>
    <user>Rosalee</user>
    <text>(Also, it looks like the behavior goes back to Racket 5.2. It probably goes back even further although anything 5.1.x and older segfaults on startup.)</text>
  </message>
  <message conversation_id="266">
    <ts>2017-09-20T06:38:02.000071</ts>
    <user>Yadira</user>
    <text>hello. im'm write simple code for convert string into list of tokens. My question - is more simple way for converting, than my code 

(define (lex-list s)
    (let ((buf (open-input-string s)))
      (let loop ((results '()))
        (let ((next-token   (lexer buf)))
          (if (eq? 'EOF (token-name (position-token-token next-token)))
              (reverse results)
              (loop (cons  next-token results)))))))</text>
  </message>
  <message conversation_id="266">
    <ts>2017-09-20T09:39:19.000024</ts>
    <user>Latarsha</user>
    <text>&lt;@Yadira&gt; I might write it like this:</text>
  </message>
  <message conversation_id="266">
    <ts>2017-09-20T09:39:23.000097</ts>
    <user>Latarsha</user>
    <text>```
(define (lex-list s)
  (define buf (open-input-string s))
  (for/list ([next-token (in-producer (λ () (lexer buf)))]
             #:break (eq? 'EOF (token-name (position-token-token next-token))))
    next-token))
```</text>
  </message>
  <message conversation_id="266">
    <ts>2017-09-20T11:26:55.000521</ts>
    <user>Latarsha</user>
    <text>Someone on Reddit reported an issue that seems to be `.zo` files not being used: &lt;https://www.reddit.com/r/Racket/comments/713v6h/horrible_performance/&gt;</text>
  </message>
  <message conversation_id="266">
    <ts>2017-09-20T11:27:22.000307</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; I think we've seen issues like this before, but I can't find the discussion in my email archives</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:14:07.000278</ts>
    <user>Ezequiel</user>
    <text>I am making a image generator program but my image function was with 2htdp is there something I can do use (require) for the function?</text>
  </message>
  <message conversation_id="266">
    <ts>2017-09-20T17:14:31.000127</ts>
    <user>Latarsha</user>
    <text>`(require 2htdp/image)`</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:17:27.000015</ts>
    <user>Ezequiel</user>
    <text>What I want is to make the function available to the rest of the program.</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:19:50.000060</ts>
    <user>Chantelle</user>
    <text>&lt;@Ezequiel&gt; I'm unsure what you mean, could you provide more details?</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:20:49.000030</ts>
    <user>Ezequiel</user>
    <text>I mean (provide) with my function that is (require 2htdp/image) the rest of my program is #lang racket</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:22:34.000302</ts>
    <user>Latarsha</user>
    <text>&lt;@Ezequiel&gt; you can use `2htdp/image` in `#lang racket`</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:26:07.000034</ts>
    <user>Chantelle</user>
    <text>&lt;@Ezequiel&gt; This should work:

```
#lang racket
(require 2htdp/image)

(define (my-image-func arg ...) ...)

(provide my-image-func)
```</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:28:06.000116</ts>
    <user>Ezequiel</user>
    <text>provide = provide: this function is not defined</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:28:19.000199</ts>
    <user>Ezequiel</user>
    <text>1 sec</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:28:34.000238</ts>
    <user>Ezequiel</user>
    <text>I didn't think you could mix #lang racket with 2htdp</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:31:37.000096</ts>
    <user>Chantelle</user>
    <text>`2htdp/image` is a normal library that any module​ can `require` and `#lang 2htdp` will automatically `require` it for you (I think)</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:32:43.000309</ts>
    <user>Ezequiel</user>
    <text>LOL I lost a few hours trying to redo my function with pict  2htdp scale/xy</text>
  </message>
  <message conversation_id="267">
    <ts>2017-09-20T17:33:35.000073</ts>
    <user>Chantelle</user>
    <text>Glad to help :)</text>
  </message>
  <message conversation_id="268">
    <ts>2017-09-21T12:13:45.000329</ts>
    <user>Latarsha</user>
    <text>new ebook on racket &lt;http://serverracket.com/&gt; and discussion on HN: &lt;https://news.ycombinator.com/item?id=15301151&gt;</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:11:26.000251</ts>
    <user>Kimbery</user>
    <text>I was curious how Matthew’s scope-sets talk did all its fancy animations, so I decided to look at the source code… now I am afraid.</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:20:12.000008</ts>
    <user>Vincenzo</user>
    <text>That one is a bad example because it was written to "compile" to GL, but backed back out to picts</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:22:06.000436</ts>
    <user>Vincenzo</user>
    <text>The "meta-story" talk at &lt;https://github.com/mflatt/talks&gt; may be a better example; it's different kind of example, but I felt like I was starting to get a handle on cartoon-style animations</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:22:18.000137</ts>
    <user>Vincenzo</user>
    <text>I bet others have better examples that are animations but not cartoons</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:24:00.000500</ts>
    <user>Kimbery</user>
    <text>I was mostly interested in the code animations that sets-of-scopes has, the parts where syntax is colored, duplicated, and moved around.</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:25:30.000310</ts>
    <user>Latarsha</user>
    <text>that's in the less scary part of that code</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:27:02.000632</ts>
    <user>Kimbery</user>
    <text>it’s scary enough to me—I usually put my slides together with a point-and-click gui :)</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:34:41.000235</ts>
    <user>Latarsha</user>
    <text>my slides might be less scary</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:35:13.000317</ts>
    <user>Latarsha</user>
    <text>such as &lt;https://github.com/samth/edinburgh-2017&gt;</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:37:40.000266</ts>
    <user>Eun</user>
    <text>&lt;@Natosha&gt;: Is winooski set up to send mail?</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:42:11.000586</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; where do those submodules come from?</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:42:41.000274</ts>
    <user>Latarsha</user>
    <text>other private repos, I think</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:42:51.000641</ts>
    <user>Latarsha</user>
    <text>I should make some of those public</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:50:09.000432</ts>
    <user>Natosha</user>
    <text>&lt;@Eun&gt; yes, winooski sends mail for now, but might not in the future</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:54:55.000424</ts>
    <user>Eun</user>
    <text>&lt;@Natosha&gt;: Ok. I'm trying to replace some "pull" parts of the release with "push" equivalent (if that makes any sense), and sending mail would be the most convenient way, I think.</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T13:55:59.000064</ts>
    <user>Eun</user>
    <text>When you say "might not in the future", are you thinking of an active plan to get rid of it, or more as something that would get dropped in a transition, unless something is done to keep it?</text>
  </message>
  <message conversation_id="270">
    <ts>2017-09-21T15:51:55.000411</ts>
    <user>Rosalee</user>
    <text>Does anyone know when the racketio bug fix hit HEAD?</text>
  </message>
  <message conversation_id="269">
    <ts>2017-09-21T16:45:15.000194</ts>
    <user>Eun</user>
    <text>There have been several.</text>
  </message>
  <message conversation_id="270">
    <ts>2017-09-21T16:46:32.000247</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; if you go here: &lt;https://github.com/racket/racket/commits/v6.10.1&gt; then each commit message has a link to the commit it was taken from on master</text>
  </message>
  <message conversation_id="270">
    <ts>2017-09-21T16:47:39.000280</ts>
    <user>Rosalee</user>
    <text>&lt;@Eun&gt; thanks</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T17:57:22.000126</ts>
    <user>Usha</user>
    <text>Is there a way to have `raco exe` support multiple paths with the `--collects-path` option? We currently pass in several -S arguments to regular Racket.exe</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T18:01:27.000340</ts>
    <user>Georgeanna</user>
    <text>I don’t think they’re equivalent. the `--help` on `raco exe` says that it is the main collects dir where `racket` says “more collects”.</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T18:03:35.000173</ts>
    <user>Usha</user>
    <text>Sure, I just need to find a way to have the resulting .exe have a fully configured collects directory list. I just don't know how I translate a call to racket.exe with multiple -S options to bundle into a raco exe. Seems like I only get to have one collects directory with raco exe.</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T18:03:48.000031</ts>
    <user>Usha</user>
    <text>But normal racket operation will gladly support more</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T18:04:24.000257</ts>
    <user>Georgeanna</user>
    <text>I’m not seeing much in the doco to hint otherwise either.</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T18:04:52.000006</ts>
    <user>Georgeanna</user>
    <text>do you just need the paths in the executable for runtime, not compile? Maybe `++exf &amp;lt;flag&amp;gt;` ?</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T18:06:24.000233</ts>
    <user>Usha</user>
    <text>Hmm, would that prevent the embedding of modules referenced by those -S flags? I can give it a shot</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T18:07:06.000339</ts>
    <user>Georgeanna</user>
    <text>also look at doco for raco, section 19. maybe the config file thing can be of help</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T18:07:22.000191</ts>
    <user>Usha</user>
    <text>Basically I'm trying to find a way to make racket work better with our distributed build system and one of the things its not very great at is dealing with lots of small files. I'm trying to bundle as much as I can into as few files as possible to send over the wire.</text>
  </message>
  <message conversation_id="271">
    <ts>2017-09-21T18:07:28.000320</ts>
    <user>Georgeanna</user>
    <text>I’m not experienced with compiling executables tho</text>
  </message>
  <message conversation_id="272">
    <ts>2017-09-22T00:09:25.000078</ts>
    <user>Chantelle</user>
    <text>do log receivers store received messages in a queue? I'm trying to get a list of all messages sent to a log receiver over the extent of calling some thunk.</text>
  </message>
  <message conversation_id="272">
    <ts>2017-09-22T00:10:03.000156</ts>
    <user>Chantelle</user>
    <text>the only way I can find to get messages out of a log receiver is to call `sync` on it, but that blocks if no messages are immediately available</text>
  </message>
  <message conversation_id="272">
    <ts>2017-09-22T00:12:27.000058</ts>
    <user>Chantelle</user>
    <text>ah, I think I can use `sync/timeout` with a procedure instead of a timeout to poll the receiver. It hadn't occurred to me that `sync/timeout` would allow handling events that aren't ready with arbitrary behavior, instead of just a timeout.</text>
  </message>
  <message conversation_id="272">
    <ts>2017-09-22T12:03:27.000076</ts>
    <user>Nelson</user>
    <text>&lt;@Chantelle&gt; did you try `with-intercepted-logging` ? Here's an example: &lt;https://github.com/bennn/rosette-contract/blob/master/private/util/log.rkt#L75&gt;</text>
  </message>
  <message conversation_id="273">
    <ts>2017-09-22T12:24:02.000432</ts>
    <user>Latarsha</user>
    <text>That repo looks interesting, &lt;@Nelson&gt; </text>
  </message>
  <message conversation_id="273">
    <ts>2017-09-22T12:32:05.000030</ts>
    <user>Nelson</user>
    <text>Maybe someday. The idea was to do `contract-stronger?` with Rosette, but it only works now for datatypes Rosette can compile to SMT.</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:20:05.000319</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Is there any way to add a 0 width field to a c-struct?</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:20:42.000236</ts>
    <user>Rosalee</user>
    <text>Or is there any sort of public version `compute-offsets` I can use?</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:21:12.000353</ts>
    <user>Rosalee</user>
    <text>(Because `define-cstruct` explodes in size and I want to generate stuff dynamically)</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:26:47.000326</ts>
    <user>Vincenzo</user>
    <text>I don't think you can have a 0-sized field in a cstruct.</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:27:42.000161</ts>
    <user>Vincenzo</user>
    <text>Exporting something like `compute-offsets` would be fine. That function is not using anything private, anyway (so, in a pinch, you could just copy it)</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:31:48.000297</ts>
    <user>Rosalee</user>
    <text>Fair. I ask because I want to dynamically create about 10 or so sets of 4-5 structs or so of ~100 fields.</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:31:59.000424</ts>
    <user>Rosalee</user>
    <text>(Because if I statically create them I get a zo file of 100 MB)</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:32:07.000520</ts>
    <user>Rosalee</user>
    <text>But I still want one getter/setter for each field in the set.</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:35:28.000317</ts>
    <user>Vincenzo</user>
    <text>&lt;@King&gt; Did the `raco exe ++exf -S ++exf &amp;lt;path&amp;gt; ...` idea solve your problem?</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:40:13.000562</ts>
    <user>Usha</user>
    <text>No, I get `unknown switch: -S` when I run the generated .exe</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T14:42:19.000197</ts>
    <user>Usha</user>
    <text>I was trying with `++exf "-S &amp;lt;path&amp;gt;"`, so I just tried with separate `++exf` args, but it gave the same error</text>
  </message>
  <message conversation_id="274">
    <ts>2017-09-22T15:13:19.000089</ts>
    <user>Vincenzo</user>
    <text>&lt;@King&gt; It looks like `--exf --` is required, first, to remove the `--` that prevents Racket from consuming extra flags as its own.
So, you probably need something like `raco exe --collects-path &amp;lt;path&amp;gt; --exf -- ++exf -S ++exf /tmp/other x.rkt ++exf --`</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T15:21:01.000112</ts>
    <user>Stefani</user>
    <text>&lt;!everyone&gt; We are starting the Inside Racket Seminar shortly --- &lt;https://www.youtube.com/watch?v=3xFWcNarb3Q&gt;</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T15:45:17.000036</ts>
    <user>Georgeanna</user>
    <text>audio keeps dropping but the video keeps going so I don’t think it is my tubes</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T15:47:52.000183</ts>
    <user>Nelson</user>
    <text>uhoh audio + video just dropped for me</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T15:48:17.000148</ts>
    <user>Nelson</user>
    <text>hm, just had to refresh</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T15:50:08.000032</ts>
    <user>Georgeanna</user>
    <text>good to know. I’ll try refreshing next time</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T15:51:53.000027</ts>
    <user>Latarsha</user>
    <text>everything good here</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:03:29.000522</ts>
    <user>Georgeanna</user>
    <text>yeah… it’s been pretty stable</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:05:30.000052</ts>
    <user>Georgeanna</user>
    <text>damn… tau-double-arrow-slash-lambda-bang… how do you type all of that? an APL keyboard?</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:06:03.000391</ts>
    <user>Nelson</user>
    <text>something like `\tauC-\` in DrRacket</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:06:15.000385</ts>
    <user>Nelson</user>
    <text>where `C-\` is "control-\"</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:06:27.000315</ts>
    <user>Georgeanna</user>
    <text>I need to work with greg to get all these expansions into racket-mode</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:06:54.000316</ts>
    <user>Nelson</user>
    <text>I think you could just change input mode to TeX</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:07:15.000040</ts>
    <user>Georgeanna</user>
    <text>oh! looks like it might all be done… I need to learn how to activate it then</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:07:16.000356</ts>
    <user>Nelson</user>
    <text>or, I used to re-use agda mode</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:07:35.000118</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; is correct about Typed Racket, btw</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:09:38.000409</ts>
    <user>Corey</user>
    <text>IIUC &lt;https://github.com/greghendershott/racket-mode/blob/master/Reference.md#racket-unicode-input-method-enable&gt;</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:13:14.000338</ts>
    <user>Georgeanna</user>
    <text>I don’t know agda…</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:15:08.000538</ts>
    <user>Nelson</user>
    <text>doesn't matter, it's just for the shortcuts, like, `\-` instead of `\rightarrow`</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:28:21.000217</ts>
    <user>Rosalee</user>
    <text>&lt;@Kimbery&gt; You know what other compiler can loop? :wink:</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:34:59.000342</ts>
    <user>Rosalee</user>
    <text>&lt;@Nelson&gt; Do I need to bring you a :pizza: ?</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:39:13.000111</ts>
    <user>Rosalee</user>
    <text>&lt;@Nelson&gt; Eep, I only have one :heart: though…. I guess I could give you a kidney?</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T16:44:25.000093</ts>
    <user>Rosalee</user>
    <text>Okay &lt;@Nelson&gt;, here: :kidney:</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:08:28.000280</ts>
    <user>Nelson</user>
    <text>@lexi-lambda &lt;https://github.com/AlexKnauth/syntax-sloc&gt; !</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:08:34.000224</ts>
    <user>Nelson</user>
    <text>`raco sloc`</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:18:59.000278</ts>
    <user>Kimbery</user>
    <text>&lt;@Rosalee&gt; I don’t even get it :disappointed:</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:46:27.000211</ts>
    <user>Rosalee</user>
    <text>&lt;@Kimbery&gt; Ah, no worries. It was a bad attempt at a bad joke. At one point you were talking about the hacket (or haskell) compiler diverging. And I was making a bad joke that the Racket compiler is very easy to make diverge, at least if you include the macro expander. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="276">
    <ts>2017-09-22T17:46:41.000247</ts>
    <user>Rosalee</user>
    <text>(Which in this case I am.)</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:46:49.000120</ts>
    <user>Rosalee</user>
    <text>So ya, bad joke, sorry. :disappointed:</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:46:56.000092</ts>
    <user>Kimbery</user>
    <text>ah, yes. I ended up mentioning that, I think. :)</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:47:07.000224</ts>
    <user>Rosalee</user>
    <text>Ah, oh well.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:47:19.000145</ts>
    <user>Rosalee</user>
    <text>I guess I was too busy trying to be snarky. Sorry. :wink:</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:47:29.000022</ts>
    <user>Kimbery</user>
    <text>haha, it’s fine</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:47:31.000141</ts>
    <user>Rosalee</user>
    <text>Good talk though</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:47:38.000193</ts>
    <user>Rosalee</user>
    <text>or code walk…</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:47:40.000266</ts>
    <user>Rosalee</user>
    <text>or hybrid.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:47:46.000032</ts>
    <user>Kimbery</user>
    <text>thank you! it’s really dense.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:47:51.000060</ts>
    <user>Latarsha</user>
    <text>very nice job, &lt;@Kimbery&gt;</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:48:08.000108</ts>
    <user>Kimbery</user>
    <text>thanks! it was fun to do. :)</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:48:36.000126</ts>
    <user>Kimbery</user>
    <text>it gave me a good motivation to clean up parts of the codebase in the past few weeks, too, since it was even worse a month ago, if you can believe it. :wink:</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:49:13.000159</ts>
    <user>Rosalee</user>
    <text>Meh….check out the video codebase….or don’t. :wink:</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:49:21.000120</ts>
    <user>Rosalee</user>
    <text>(You may end up blind like me if you do…)</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:49:27.000238</ts>
    <user>Rosalee</user>
    <text>Still, it was pretty cool.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:50:20.000156</ts>
    <user>Kimbery</user>
    <text>it makes me wonder if I should back out the wild `τs⇔/λ!` names, haha</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:50:52.000178</ts>
    <user>Kimbery</user>
    <text>I did not put that much thought into them when I wrote them, and they have sort of… multiplied over time.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:51:16.000237</ts>
    <user>Kimbery</user>
    <text>there used to be just `τ⇒!` and `τ⇐!`, but then one thing led to another…</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:53:36.000181</ts>
    <user>Rosalee</user>
    <text>ya….</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:53:52.000393</ts>
    <user>Rosalee</user>
    <text>This is why I try to avoid having ..too… many greek symbols in my code.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:54:29.000208</ts>
    <user>Rosalee</user>
    <text>They are really good….up until you realize that you have variables that are 5 or 6 or 7 of them concatenated together and have no idea what they’re trying to say…</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:54:59.000144</ts>
    <user>Rosalee</user>
    <text>Although honestly `τs⇔/λ!` makes sense to me.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:55:29.000169</ts>
    <user>Nelson</user>
    <text>&lt;http://lamport.azurewebsites.net/pubs/lamport-paxos.pdf&gt;</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:55:41.000184</ts>
    <user>Rosalee</user>
    <text>I would just cringe at having to type that. I mean, I’m sure I can set up a keyboard layout for it, but there really isn’t a standard one I’m aware of, and typing in the latex codes (or unicode codes), seems painful…</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:55:47.000072</ts>
    <user>Nelson</user>
    <text />
    <text>Λων´ιδας Γ κ´ιµπας provided invaluable assistance with the Paxon
dialect.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:55:55.000373</ts>
    <user>Rosalee</user>
    <text>Oh god</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:55:56.000219</ts>
    <user>Rosalee</user>
    <text>lol</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:56:41.000035</ts>
    <user>Kimbery</user>
    <text>you end up building the muscle memory for `\tau`, `\Rightarr`, and `\Leftarr`, and they are definitely concise and readable when you know the mnemonics.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:57:13.000319</ts>
    <user>Rosalee</user>
    <text>Oh, I agree.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:57:28.000144</ts>
    <user>Kimbery</user>
    <text>(`τ` means “type”, `τs` means multiple types, `⇒` means infer, `⇐` means check, and `/λ` means “with bindings”)</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:58:21.000247</ts>
    <user>Rosalee</user>
    <text>I’ve done that. But even with the muscle memory, a variable names `\taus\\Rightarr!` is kind of long…</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:58:53.000051</ts>
    <user>Rosalee</user>
    <text>although I guess its not any longer than `define-syntax`</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:59:05.000032</ts>
    <user>Kimbery</user>
    <text>yeah. though not longer than the equivalent, which would be `infer+check-types/bindings`. but that’s more readable.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T17:59:33.000300</ts>
    <user>Kimbery</user>
    <text>(well, in that case it just would be `infer-type!`, I guess)</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T18:00:12.000249</ts>
    <user>Rosalee</user>
    <text>Maybe. Readabilities (as far as I can tell), is context sensitive.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T18:00:20.000202</ts>
    <user>Rosalee</user>
    <text>Readability*</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T18:00:40.000179</ts>
    <user>Rosalee</user>
    <text>So given that you are living in this code and I’m not, I must defer to you here. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T18:01:21.000233</ts>
    <user>Kimbery</user>
    <text>I like the short names—I think they’re very cute—but I think it might be better to get rid of them if I want more people to contribute.</text>
  </message>
  <message conversation_id="275">
    <ts>2017-09-22T18:01:32.000016</ts>
    <user>Kimbery</user>
    <text>I don’t want to end up with something like Control.Lens.Operators</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T18:35:11.000262</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; &lt;https://github.com/racket/racket/pull/1814#issuecomment-331569921&gt;</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T18:54:01.000155</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; maybe macro-added tooltips would work?</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T18:55:26.000262</ts>
    <user>Chantelle</user>
    <text>So mousing over the symbolic names would "translate" them to their much more wordy counterparts</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T18:55:57.000064</ts>
    <user>Kimbery</user>
    <text>that’s a fun idea… though I don’t know that everyone uses DrRacket, and it’d be pretty cryptic.</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:01:01.000214</ts>
    <user>Chantelle</user>
    <text>I think `racket-mode` understands tooltips</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:04:36.000142</ts>
    <user>Kimbery</user>
    <text>&lt;@Nelson&gt;: given the relevant topic… I’m very interested in talking to you, &lt;@Niesha&gt;, and &lt;@Aracely&gt; about some type-related things at RacketCon this year.</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:05:37.000083</ts>
    <user>Kimbery</user>
    <text>I haven’t really been following the Turnstile development since I stopped using it… but I peeked at it a little while ago and it looked like you’ve been improving it.</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:06:15.000127</ts>
    <user>Kimbery</user>
    <text>though I’m not entirely sure who’s working on what at this point.</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:10:38.000004</ts>
    <user>Nelson</user>
    <text>Steven, Alex, and Milo Turner are the "current" devs. I think Steven + Alex have been doing a Typed Rosette, and Milo's been doing linear + affine types.</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:11:33.000028</ts>
    <user>Kimbery</user>
    <text>have I met Milo? I don’t immediately recognize the name.</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:11:47.000073</ts>
    <user>Nelson</user>
    <text>he wasn't at racket-con last year</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:11:51.000139</ts>
    <user>Nelson</user>
    <text>so I think no</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:12:18.000136</ts>
    <user>Kimbery</user>
    <text>that would explain things then, yes.</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:12:22.000165</ts>
    <user>Nelson</user>
    <text>was there anything in particular you wanted to ask about?</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:12:35.000003</ts>
    <user>Nelson</user>
    <text>I think recent Turnstile might have performance improvements you can re-use</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:12:49.000136</ts>
    <user>Nelson</user>
    <text>I'm not sure about other stuff</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:13:31.000091</ts>
    <user>Kimbery</user>
    <text>I’m interested in a few different things. trying to come up with a better story for dictionary elaboration is a big one, but that’s not really turnstile-related.</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:14:03.000032</ts>
    <user>Kimbery</user>
    <text>I’m also interested in talking to Stephen about laziness, since I get the sense he may have opinions about it ;)</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:14:55.000146</ts>
    <user>Kimbery</user>
    <text>I’m curious what the performance improvements are. I remember looking at `syntax-local-expand-expression` at one point, but otherwise I’m unsure what they might be.</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:16:25.000130</ts>
    <user>Nelson</user>
    <text>it might just be syntax-parse tuning, like using `#:commit` (like you have already)</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:17:28.000005</ts>
    <user>Kimbery</user>
    <text>my bet is that `syntax-local-expand-expression` could give speedups, but I don’t think I can use it because of elaboration. :/</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:21:37.000024</ts>
    <user>Nelson</user>
    <text>oh! I just rememberd. Servant!</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:22:31.000159</ts>
    <user>Nelson</user>
    <text>that's something I was thinking about doing too, but never started</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:23:13.000058</ts>
    <user>Kimbery</user>
    <text>this is what the existing demo looks like in Hackett:
```
#lang hackett

(require hackett/demo/web-server)

(data Greeting (greeting String))

(instance (-&amp;gt;Body Greeting)
  [-&amp;gt;body (λ [(greeting name)] {"Hello, " ++ name ++ "!"})])

(defserver run-server
  [GET "/"               -&amp;gt; String   =&amp;gt; "Hello, world!"]
  [GET "greet" -&amp;gt; String -&amp;gt; Greeting =&amp;gt; greeting])

(main (do (println "Running server on port 8080.")
          (run-server 8080)))
```</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:23:15.000220</ts>
    <user>Nelson</user>
    <text>my idea was, have a DSL for web APIs, store these APIs in external files, and the macro expander can read the files &amp;amp; generate typed racket types</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:23:52.000023</ts>
    <user>Nelson</user>
    <text>cool</text>
  </message>
  <message conversation_id="277">
    <ts>2017-09-22T19:23:56.000011</ts>
    <user>Kimbery</user>
    <text>yeah, the ability to make “type providers” a feature of the macro system is a neat one.</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T20:40:06.000104</ts>
    <user>Chantelle</user>
    <text>How can I get a list of submodules a module declares using only a `module-path?` value? The closest things I've found are `module-compiled-submodules` and `syntax-local-submodules`, but the former requires a `compiled-module-expression?` value and the latter only works for finding submodules of a module while that module is expanding.</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T20:58:39.000005</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; `get-module-code` from `syntax/modcode` can help you load the code for a given module path. There's not really a way to list the possible submodules without consulting the code (in compiled or source form).</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:02:58.000088</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; can / should there be a way to do that?</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:04:30.000056</ts>
    <user>Vincenzo</user>
    <text>There can't be a very different way to do that, since submodules are sometimes loaded only on demand. There could be a way to read compiled source just enough to find out what the submodules are, without actually reading the implementations.</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:08:18.000015</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; as far as I can tell, what submodules a module has is a static property of a fully expanded module and not a dynamic one, so I'm not sure I understand the barriers to implementing such a `module-&amp;gt;submodule-names` function</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:08:27.000041</ts>
    <user>Chantelle</user>
    <text>am I missing something?</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:10:25.000080</ts>
    <user>Chantelle</user>
    <text>I'm okay with such a function requiring that a module be loaded to find out what its submodules are, even if some of those submodules are `module` forms that could be loaded without loading the enclosing module</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:11:11.000095</ts>
    <user>Chantelle</user>
    <text>(use case is reflecting over all the modules in a package)</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:12:15.000050</ts>
    <user>Vincenzo</user>
    <text>A module doesn't currently keep a list of submodule paths separate from the submodules themselves. So, if the submodules are loaded separately, the module doesn't remember them.</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:12:39.000074</ts>
    <user>Vincenzo</user>
    <text>If you want to know what modules are in a package, though, don't you want to be working with the module implementations, anyway?</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:16:08.000016</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; I'm not sure I understand your question. What I want is to go from a package name, to a tree of collection directories, to a list of files in each of those collections representing modules, to a tree of all submodules in each of those file modules. What do you mean by "working with the module implementations"?</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:20:08.000124</ts>
    <user>Vincenzo</user>
    <text>Since you have a filename for a module, then it seems like `get-module-code` is exactly what you want. You can use `module-compiled-submodules` on the result from `get-module-code` to traverse the tree of submodules.</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:22:36.000083</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; ah, so you were referring to if I wanted to get submodules for some module without knowing anything at all about the module's source code</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:23:07.000044</ts>
    <user>Chantelle</user>
    <text>including where it's located</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:27:08.000105</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; I assume `get-module-code` returns a `compiled-module-expression?` value if it uses the default `compile` procedure?</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:27:21.000115</ts>
    <user>Vincenzo</user>
    <text>Yes</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:29:21.000073</ts>
    <user>Chantelle</user>
    <text>perfect, that ought to work just fine then</text>
  </message>
  <message conversation_id="278">
    <ts>2017-09-22T21:29:25.000073</ts>
    <user>Chantelle</user>
    <text>thank you!</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-22T23:56:48.000007</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; your latest change broke the Travis build, which was evident on the PR</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-23T09:57:43.000014</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; The failed builds looked like they were independent networking errors.</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-23T09:58:26.000004</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; Which is also evident by the travis failure pattern. :wink:</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-23T09:59:09.000041</ts>
    <user>Rosalee</user>
    <text>```
ERROR: tcp-connect: connection failed
  address: &lt;http://www.unicode.org|www.unicode.org&gt;
  port number: 80
  system error: handle not found; rktio_err=17
```</text>
  </message>
  <message conversation_id="280">
    <ts>2017-09-25T00:06:19.000015</ts>
    <user>Sadye</user>
    <text>Ooh, I think I got my first TR soundness bug!</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T02:28:49.000183</ts>
    <user>Sadye</user>
    <text>Yes! I found a zero-day in TR. How much will you pay me?  Ooh, I should have asked that before filing the bug report. Darn!</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:44:29.000167</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; if there's something wrong with Travis, then lets talk about that in the PR before merging</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:45:47.000780</ts>
    <user>Latarsha</user>
    <text>In general we should have a rationale before breaking CI</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:47:51.000546</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; I have no idea what you are talking about as the build finished successfully: &lt;https://travis-ci.org/racket/racket/builds/278853287&gt;</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:50:57.000302</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; did you rerun some of the builds? it gave a message about failing here &lt;https://racket.slack.com/archives/C3P4M37H7/p1506138806000017&gt;</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:52:07.000405</ts>
    <user>Rosalee</user>
    <text>Yes, as the error had nothing to do with Racket, nor Travis, but (almost certainly) &lt;http://unicode.org|unicode.org&gt; being unavailable for the few minutes the build was running.</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:52:31.000226</ts>
    <user>Rosalee</user>
    <text>Like, I’m not trying to be obtuse. I just don’t know how that error could have been avoided.</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:52:55.000241</ts>
    <user>Rosalee</user>
    <text>Since, if we are going to depend on external sources like that in our build (which is fine imo), they will sometimes go down.</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:53:18.000643</ts>
    <user>Rosalee</user>
    <text>But I could be missing something.</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:55:49.000848</ts>
    <user>Rosalee</user>
    <text>I guess in this case I could have waited until &lt;http://unicode.org|unicode.org&gt; went back up. But that doesn’t really solve the problem because it can still go down when the merge test is running.</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:55:55.000370</ts>
    <user>Rosalee</user>
    <text>(Unless that is an acceptable risk?)</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:56:10.000406</ts>
    <user>Latarsha</user>
    <text>Just make a comment that the travis failure is due to &lt;http://unicode.org|unicode.org&gt; being down</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T10:57:57.000805</ts>
    <user>Rosalee</user>
    <text>Okay, will do</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T11:00:06.000279</ts>
    <user>Rosalee</user>
    <text>And done. And I will do that going into the future. Thanks &lt;@Latarsha&gt;</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T11:01:17.000215</ts>
    <user>Rosalee</user>
    <text>This sort of thing makes me wonder if travis has different error modes. Because errors caused by a server being unavailable should probably be put into a different category as errors from the code.</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T11:01:23.000564</ts>
    <user>Rosalee</user>
    <text>(sometimes…)</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T11:03:30.000483</ts>
    <user>Nelson</user>
    <text>Yeah, something like "could not run".</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T11:03:45.000405</ts>
    <user>Nelson</user>
    <text>I'd like this for when the northwestern machine is rebuilding, instead of:
```
0.28s$ curl -L -o installer.sh &lt;http://plt.eecs.northwestern.edu/snapshots/current/installers/racket-test-current-x86_64-linux-precise.sh&gt;
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   314  100   314    0     0   1899      0 --:--:-- --:--:-- --:--:--  1903
100   389  100   389    0     0   1474      0 --:--:-- --:--:-- --:--:--  1474
0.01s$ sh installer.sh --in-place --dest ~/racket/
installer.sh: 2: installer.sh: Syntax error: newline unexpected
```</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T11:28:29.000376</ts>
    <user>Rosalee</user>
    <text>Ya, that would be nice.</text>
  </message>
  <message conversation_id="279">
    <ts>2017-09-25T11:28:37.000410</ts>
    <user>Rosalee</user>
    <text>I’ll have to look into it a bit more later.</text>
  </message>
  <message conversation_id="281">
    <ts>2017-09-25T11:55:57.000119</ts>
    <user>Ezequiel</user>
    <text>I have three functions I want to iterate through till #f I want to avoid for loops what is the normal practice of this in Racket?</text>
  </message>
  <message conversation_id="281">
    <ts>2017-09-25T11:57:19.000542</ts>
    <user>Latarsha</user>
    <text>&lt;@Ezequiel&gt; I would use a for loop and use `in-producer`</text>
  </message>
  <message conversation_id="281">
    <ts>2017-09-25T12:20:12.000089</ts>
    <user>Ezequiel</user>
    <text>&lt;@Latarsha&gt; using a for loop in a functionalish language just feels wrong  :slightly_smiling_face:</text>
  </message>
  <message conversation_id="281">
    <ts>2017-09-25T12:20:36.000428</ts>
    <user>Latarsha</user>
    <text>&lt;@Ezequiel&gt; If you think about it as a comprehension then maybe it will feel better</text>
  </message>
  <message conversation_id="281">
    <ts>2017-09-25T12:22:31.000089</ts>
    <user>Ezequiel</user>
    <text>&lt;@Latarsha&gt; How about apply? In R that is the normal way for getting around loops</text>
  </message>
  <message conversation_id="281">
    <ts>2017-09-25T12:23:18.000574</ts>
    <user>Latarsha</user>
    <text>you can also use apply, but you shouldn't think of `for/list` or `for/fold` as "for loops" in the imperative sense you're trying to avoid</text>
  </message>
  <message conversation_id="281">
    <ts>2017-09-25T12:26:17.000308</ts>
    <user>Rosalee</user>
    <text>&lt;@Ezequiel&gt; From my experience, `lapply` (and friends), are more like `map` in other FP languages…</text>
  </message>
  <message conversation_id="281">
    <ts>2017-09-25T12:27:09.000393</ts>
    <user>Rosalee</user>
    <text>&lt;@Ezequiel&gt; Also (unlike in R), for loops are actually reasonably fast, and (imo) a much cleaner way of saying things.</text>
  </message>
  <message conversation_id="281">
    <ts>2017-09-25T12:27:36.000529</ts>
    <user>Rosalee</user>
    <text>(Also they are proper expressions, unlike in some other languages &amp;gt;.&amp;gt; )</text>
  </message>
  <message conversation_id="282">
    <ts>2017-09-26T03:06:35.000326</ts>
    <user>Ciara</user>
    <text>Redex seems to be geared towards Reduction Semantics, which I really dig. But suppose you were to define a reduction relation as a Structural Operational Semantics instead. To define the step relation playing SOS's premise-conclusion game would you rather a) define a reduction relation and encode the premises as side-conditions or b) define a judgment form even though I've only seen people use these for typing rules? Or is there a third option I've just not stumbled over?</text>
  </message>
  <message conversation_id="283">
    <ts>2017-09-26T05:16:19.000131</ts>
    <user>David</user>
    <text>I’d use a judgment form for that. I see people using judgment forms for all sorts of things besides typing rules. For example, in *An Introduction to Redex with Abstracting Abstract Machines* [1], Van Horn uses them for everything from a lookup relation to operational semantics.

[1]: &lt;https://dvanhorn.github.io/redex-aam-tutorial/#%28part._.Evaluation%29&gt;</text>
  </message>
  <message conversation_id="282">
    <ts>2017-09-26T05:24:03.000341</ts>
    <user>Ciara</user>
    <text>thanks &lt;@David&gt;. (it's good to hear from you btw.)</text>
  </message>
  <message conversation_id="282">
    <ts>2017-09-26T05:25:00.000033</ts>
    <user>Ciara</user>
    <text>I guess I'll try a judgment form then.</text>
  </message>
  <message conversation_id="282">
    <ts>2017-09-26T05:27:00.000262</ts>
    <user>Ciara</user>
    <text>yes, the link you sent me does exactly what I was asking about. A natural semantics is also an SOS.</text>
  </message>
  <message conversation_id="282">
    <ts>2017-09-26T05:27:28.000012</ts>
    <user>Ciara</user>
    <text>afaik.</text>
  </message>
  <message conversation_id="282">
    <ts>2017-09-26T09:50:48.000242</ts>
    <user>Ezequiel</user>
    <text>Loops hurt so bad</text>
  </message>
  <message conversation_id="284">
    <ts>2017-09-26T09:51:03.000036</ts>
    <user>Ezequiel</user>
    <text>&lt;https://www.brinckerhoff.org/blog/2017/05/20/loops-hurt-so-bad/&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T14:26:00.000337</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; I can never remember which is preferred: `module-path-index-resolve` or `resolve-module-path-index`.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T14:27:06.000201</ts>
    <user>Rosalee</user>
    <text>I’m thinking of putting a note in the docs, but since I can’t remember which is preferred, I’m not sure which to recommend.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T14:36:26.000016</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Although I once had in mind that `module-path-index-resolve` would be preferred, `resolve-module-path-index` does slightly more. So, I found it tricky and not obviously worthwhile to pick on as preferred.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T14:39:09.000488</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Ah, yes, that’s what it was. Thanks.</text>
  </message>
  <message conversation_id="286">
    <ts>2017-09-26T15:22:06.000048</ts>
    <user>Nelson</user>
    <text>&lt;@Latarsha&gt; just noticed, TR doesn't register a type for `vector` in `(vector 1 2 3)`. Should I submit a PR to call `add-typeof-expr` in the part of `tc-app` that's doing the type checking?</text>
  </message>
  <message conversation_id="286">
    <ts>2017-09-26T15:22:18.000327</ts>
    <user>Latarsha</user>
    <text>@ben yes</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:54:11.000138</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; How can I construct a module declaration?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:55:05.000132</ts>
    <user>Rosalee</user>
    <text>Like, I know I can use dynamic-require to instantiate and/or visit it, and I can use namespace-attach-* to attach a declaration of an already declared module.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:55:29.000034</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; `eval` is the usual way</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:56:27.000192</ts>
    <user>Georgeanna</user>
    <text>&lt;@Kimbery&gt; you had some network code (http, maybe?) in here the other day that used some call/thunky form I’d not seen before… I don’t remember it’s name. help?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:56:41.000055</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; Ya, but won’t that also eval it? Hence also visiting and instantiating it?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:56:51.000044</ts>
    <user>Latarsha</user>
    <text>no</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:57:14.000242</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; `call/input-url` &lt;http://docs.racket-lang.org/net/url.html#%28def._%28%28lib._net%2Furl..rkt%29._call%2Finput-url%29%29&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:57:14.000502</ts>
    <user>Rosalee</user>
    <text>Okay then. If I have a module on my filesystem, is there any way to declare it?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:57:36.000038</ts>
    <user>Rosalee</user>
    <text>Like, say I want to declare `foo.rkt`</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:57:40.000231</ts>
    <user>Latarsha</user>
    <text>```
&amp;gt; (eval '(module m racket (display 1)))
&amp;gt; (require 'm)
1
&amp;gt; 
```</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:57:48.000333</ts>
    <user>Rosalee</user>
    <text>Fair.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:58:28.000020</ts>
    <user>Georgeanna</user>
    <text>that was it… thanks. I’m using `port-&amp;gt;string (post-pure-port (string-&amp;gt;url ...` and not sure how it’ll differ but I want to poke</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:58:42.000396</ts>
    <user>Rosalee</user>
    <text>That does work for anonymous modules (so to speak), but I’m not sure how to get that to work for ones that are on the filesystem. I mean, I could `read` it first, but then wouldn’t it be a different module?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:59:16.000011</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; `port-&amp;gt;string` already closes the port, so I think it should be equivalent.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:59:21.000150</ts>
    <user>Georgeanna</user>
    <text>I want to build a simple webapp for the server side of a client I already wrote in racket. is there something like ruby’s sinatra I can start with?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:59:34.000256</ts>
    <user>Kimbery</user>
    <text>the `web-server` package.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:59:52.000448</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; why do you want to avoid visiting it?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T17:59:58.000169</ts>
    <user>Patrice</user>
    <text>&lt;@Rosalee&gt; I thought dynamic require `(void)` does the declaration</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:00:37.000103</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; you might like &lt;http://lisp.sh/crud-web-api-in-racket/&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:00:40.000054</ts>
    <user>Georgeanna</user>
    <text>huh. why do I already have that installed? I guess it is an auto-install</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:00:53.000293</ts>
    <user>Kimbery</user>
    <text>it’s part of the main distribution.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:01:33.000109</ts>
    <user>Georgeanna</user>
    <text>oh… but the doco says package. hrm</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:01:40.000429</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; as &lt;@Patrice&gt; suggests, `(dynamic-require "foo.rkt" (void))` may be what you want, if you're ok with visiting the module</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:01:42.000040</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; Because I don’t want to run the module, nor do I want to expand the module.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:01:58.000342</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; the main distribution is a set of packages. `base` is minimal racket.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:01:59.000175</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; declaration involves expansion</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:02:18.000121</ts>
    <user>Rosalee</user>
    <text>Mm…good point.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:02:36.000256</ts>
    <user>Rosalee</user>
    <text>Remind me the difference between visiting and expanding in this case then?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:03:00.000314</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; the main distribution has a lot of things in it. you can see them here: &lt;https://pkgs.racket-lang.org/package/main-distribution&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:03:10.000147</ts>
    <user>Latarsha</user>
    <text>&lt;http://docs.racket-lang.org/reference/syntax-model.html?q=dynamic-require#%28tech._visit%29&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:03:26.000380</ts>
    <user>Georgeanna</user>
    <text>so lisp.sh uses `serve/servlet` and `web-server` suggests stuffer chains… I assume the lisp.sh thing is more straightforward</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:04:01.000175</ts>
    <user>Georgeanna</user>
    <text>I think I just never noticed rackunit and the like listing as packages in the doco</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:04:12.000002</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; which docs for `web-server` suggest stuffer chains?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:04:15.000196</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; you probably want to look here, not at the place `#lang web-server` deep links to. &lt;http://docs.racket-lang.org/web-server/index.html&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:04:24.000039</ts>
    <user>Latarsha</user>
    <text>another good tutorial is &lt;http://docs.racket-lang.org/continue/index.html&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:04:49.000046</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; `#lang web-server` indexes into a weird spot for beginners.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:05:05.000132</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; I searched for web-server, clicked on the module result, and that drops you into section 3: stateless servers</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:05:14.000019</ts>
    <user>Georgeanna</user>
    <text>the example at the top of that is a stuffer chain</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:05:18.000317</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; that's (partly) because `#lang web-server` isn't really for beginners</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:05:36.000243</ts>
    <user>Latarsha</user>
    <text>it ought to have a different name</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:05:37.000274</ts>
    <user>Rosalee</user>
    <text>“That is, the expander instantiates any variables defined in the module within begin-for-syntax, and it also evaluates all expressions for define-syntaxes transformer bindings.”</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:06:26.000352</ts>
    <user>Rosalee</user>
    <text>If that is the case, _and_ declaring a module requires visiting it…</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:06:28.000225</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; `#lang web-server/stateless`? or `#lang web-server/continuation`? not that it can be changed now.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:06:42.000307</ts>
    <user>Georgeanna</user>
    <text>`#lang web-server/gah`</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:07:00.000056</ts>
    <user>Rosalee</user>
    <text>then its not at all clear how declaring a module and visiting a module differ. Like, is it possible to visit a module without declaring it, but not the other way around?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:07:06.000123</ts>
    <user>Georgeanna</user>
    <text>maybe the module link should drop into section 1 ?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:07:22.000151</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; the web server library is pretty old. if you stick to a good subset of it, it works pretty nicely. but there’s some weird stuff in there.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:07:32.000036</ts>
    <user>Patrice</user>
    <text>&lt;@Rosalee&gt; it is also possible that some module is copied from another namespace</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:08:01.000001</ts>
    <user>Patrice</user>
    <text>I think in that case declaration will happen, but maybe not visiting</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:08:13.000213</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; it would be nice to write a small layer on top of the web server that gives it a more consistent, modern interface. I started doing that at one point, but then I got roped into writing my programming language.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:08:20.000013</ts>
    <user>Latarsha</user>
    <text>me too</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:08:31.000386</ts>
    <user>Georgeanna</user>
    <text>haha</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:08:33.000238</ts>
    <user>Rosalee</user>
    <text>&lt;@Patrice&gt; that makes sense.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:08:36.000204</ts>
    <user>Patrice</user>
    <text>iirc there's some low-level functions that actually does the declaration work</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:08:45.000319</ts>
    <user>Georgeanna</user>
    <text>“…and now I have 43 problems”</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:09:11.000028</ts>
    <user>Patrice</user>
    <text>&lt;@Rosalee&gt; &lt;https://docs.racket-lang.org/reference/Module_Names_and_Loading.html?q=current-module-name-resolve#%28def._%28%28quote._~23~25kernel%29._current-module-name-resolver%29%29&gt; the two-argument mode of `current-module-name-resolve` does it</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:09:17.000361</ts>
    <user>Rosalee</user>
    <text>So then its safe to say that the ‘first’ time a module is declared, it _must_ be visited, but any further declarations do not require further visits (but can optionally still do it.)</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:09:35.000195</ts>
    <user>Latarsha</user>
    <text>&lt;@Rosalee&gt; the eval example does not visit the module</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:10:27.000219</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; here’s a tiny example of one of my uses of the web server, which uses the most modern-feeling bits, I think. &lt;https://github.com/lexi-lambda/imgcap/blob/ae4a303c577b6d451a9f8d274b6f1907291b6530/imgcap/main.rkt&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:11:13.000245</ts>
    <user>Georgeanna</user>
    <text>if I’m keeping an in-memory db… is there some hook or signal or something I can register to save to disk before the process quits? I don’t see anything on `serve/servlet`</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:11:15.000299</ts>
    <user>Rosalee</user>
    <text>&lt;@Patrice&gt; Okay, thank you.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:11:29.000388</ts>
    <user>Georgeanna</user>
    <text>&lt;@Kimbery&gt; awesome. thanks</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:11:30.000250</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; you might be interested in &lt;https://github.com/samth/ella&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:12:19.000372</ts>
    <user>Rosalee</user>
    <text>&lt;@Patrice&gt; So it seems like all declaring a module is…is applying that parameter’s function…</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:12:28.000144</ts>
    <user>Rosalee</user>
    <text>Which makes a _lot_ more sense. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:12:59.000216</ts>
    <user>Rosalee</user>
    <text>So now, if that is the case, I just need to find a way to call that function directly.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:13:18.000168</ts>
    <user>Rosalee</user>
    <text>(Since I wan’t to declare a module on the filesystem without visiting it.)</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:13:33.000125</ts>
    <user>Georgeanna</user>
    <text>ella is pretty</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:14:29.000025</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; I have a bunch of utility functions and things sitting around that I’ve basically copied between various web-server projects because I haven’t felt like I have enough to put them into a package. Then I got stuck because I decided my web framework needed an ORM, and then I decided it would be really nice to have return-type polymorphism…</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:18:22.000107</ts>
    <user>Kimbery</user>
    <text>I have some stuff that does signed/encrypted session storage using libcrypto, rails-style “flashes”, bindings to recaptcha, match expanders for HTML forms, a short-id generator, and a simple HTML sanitizer. Also some sendgrid integration for sending emails, but that’s probably pretty half-baked.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:21:04.000263</ts>
    <user>Georgeanna</user>
    <text>hrm… `exit-handler` isn’t like `at-exit` in that it adds a thunk to run at exit… instead, it assumes the entire exit process and doesn’t actually exit… what am I not getting?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:21:31.000123</ts>
    <user>Georgeanna</user>
    <text>AND! doesn’t actually run if via the cmdline?!?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:21:52.000258</ts>
    <user>Georgeanna</user>
    <text>(unless I manually call `(exit)`)</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:22:44.000247</ts>
    <user>Georgeanna</user>
    <text>should I be using `(executable-yield-handler)` instead?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:23:17.000049</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; my guess is that the exit handler isn’t really what you want. maybe you want a plumber? &lt;http://docs.racket-lang.org/reference/plumbers.html&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:25:21.000197</ts>
    <user>Georgeanna</user>
    <text>yeah. that is strange. if I use `executable-yield-handler` it does NOT get called if I call `(exit)`… too tangled (yet not tangled enough?)</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:25:24.000295</ts>
    <user>Georgeanna</user>
    <text>I’ll poke at plumbers</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:29:23.000098</ts>
    <user>Georgeanna</user>
    <text>honestly… plumbers don’t make much sense to me.

&amp;gt; There is no guarantee that a flush callback will be called before a process terminates—either because the plumber is not the original plumber that is flushed by the default exit handler […]</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:31:14.000096</ts>
    <user>Georgeanna</user>
    <text>ah. I shouldn’t make one. just use `current-plumber`</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:32:52.000106</ts>
    <user>Kimbery</user>
    <text>&lt;@Georgeanna&gt; my understanding is that the reason things like `exit-handler`, `executable-yield-handler`, and `current-plumber` can be changed is to support things like DrRacket, but most programs will not touch them.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:33:18.000168</ts>
    <user>Kimbery</user>
    <text>you certainly don’t want `(exit)` in DrRacket to exit DrRacket.</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T18:44:00.000097</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; Also, plumbers are for _optimistic_ resource cleanup, where it's acceptable if attempting to clean up the resource is abandoned. Custodian shutdown hooks are for things that absolutely _must_ happen during cleanup, and as such they're unsafe to use due to deadlocking / concurrency problems and you should be very careful about doing IO in them.</text>
  </message>
  <message conversation_id="287">
    <ts>2017-09-26T18:44:25.000278</ts>
    <user>Chantelle</user>
    <text>if you're writing stuff to disk you most definitely want a plumber flush callback</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T19:38:11.000026</ts>
    <user>Georgeanna</user>
    <text>is there a way to hook cancelling the web server in the repl?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T19:38:41.000023</ts>
    <user>Georgeanna</user>
    <text>I can catch exit on the cmdline just fine… but that isn’t as clean as just running the code in the repl and then C-c C-c</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T19:39:07.000177</ts>
    <user>Georgeanna</user>
    <text>looks like it calls bye, then shutdown-server… but that doesn’t have hooks</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T20:00:50.000094</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; I wound up expanding ella’s macros to include `(_ method route (e args ...) ...)` (arb code in body) and `(_ method route e)` (bare name)</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T20:01:19.000082</ts>
    <user>Georgeanna</user>
    <text>such that:

```
(get #rx"/incr" (incr params))
(get #rx"/incr2" incr)
(get #rx"/incr3"
     (set! db (cons (length db) db)) ...)
```</text>
  </message>
  <message conversation_id="288">
    <ts>2017-09-26T20:01:35.000258</ts>
    <user>Latarsha</user>
    <text>Cool</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T20:01:51.000012</ts>
    <user>Latarsha</user>
    <text>I haven't touched that code in a while as you can see</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T20:01:53.000042</ts>
    <user>Georgeanna</user>
    <text>I am guessing I’ll mostly use the middle form</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T20:02:04.000248</ts>
    <user>Latarsha</user>
    <text>So I'm happy to take any changes you make</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T20:02:33.000069</ts>
    <user>Georgeanna</user>
    <text>cool… question for you… is that first form in the examples file supposed to work at all? I’m guessing no?</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T20:02:53.000168</ts>
    <user>Georgeanna</user>
    <text>I was tempted to extend the macro to regexp-ify a bare word</text>
  </message>
  <message conversation_id="285">
    <ts>2017-09-26T20:26:55.000117</ts>
    <user>Patrice</user>
    <text>&lt;@Rosalee&gt;: rereading the doc again, now I'm not sure whether module declaration is actually performed by the default module name resolver</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-26T20:28:15.000058</ts>
    <user>Patrice</user>
    <text>the doc seems to say that when a module is declared, the current module name resolver will be invoked, not "the current module name resolver is invoked to declare a module"</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-26T20:46:17.000085</ts>
    <user>Rosalee</user>
    <text>&lt;@Patrice&gt; lol, thanks.</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-26T20:47:05.000012</ts>
    <user>Rosalee</user>
    <text>Which I guess leads back to my original question. How can I declare a module (without visiting it)?</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-26T20:47:16.000054</ts>
    <user>Rosalee</user>
    <text>Which I suspect &lt;@Vincenzo&gt; probably knows.</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-26T21:42:39.000208</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; There's no way to avoid running expand-time code in a `module` form if you start with the module in S-expression form. If you have a module in compiled form, you can `eval` the compiled module to declare it without running any phase of the module. (And if you want the declared name to correspond to a file, set `current-module-declare-name`.)</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-26T21:43:29.000181</ts>
    <user>Vincenzo</user>
    <text>If you have a file that contains a module, then you probably want to set `current-module-declare-name` and `current-load-relative-directory` while you use `load`.</text>
  </message>
  <message conversation_id="290">
    <ts>2017-09-26T22:17:04.000013</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; that first form is indeed supposed to work. did it break?</text>
  </message>
  <message conversation_id="290">
    <ts>2017-09-26T22:45:53.000007</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; it didn’t work for me… but I don’t remember how/why.</text>
  </message>
  <message conversation_id="290">
    <ts>2017-09-26T22:46:00.000024</ts>
    <user>Georgeanna</user>
    <text>could be user error :stuck_out_tongue:</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T11:43:02.000479</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Okay cool, thanks. :wink:</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T11:43:04.000427</ts>
    <user>Rosalee</user>
    <text>:slightly_smiling_face: *</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T11:47:09.000015</ts>
    <user>Rosalee</user>
    <text>If I have a macro that expands to a class, is it possible to have a field that is only in scope for the macro itself?</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T11:47:46.000252</ts>
    <user>Rosalee</user>
    <text>Something like this almost works, in that the method is only in scope for the macro, but still won’t work if the user creates a method with the same name. &lt;https://gist.github.com/LeifAndersen/1a5b188574c6756f6b888c7365276544&gt;</text>
  </message>
  <message conversation_id="290">
    <ts>2017-09-28T12:20:50.000210</ts>
    <user>Nelson</user>
    <text>&lt;@Latarsha&gt; is it ok if I merge &lt;https://github.com/racket/typed-racket/pull/599&gt; tonight?</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T13:43:14.000251</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Introduce a `define-local-member-name` alongside your class</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T13:48:43.000309</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Isn’t that what the example did?</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T13:50:01.000147</ts>
    <user>Rosalee</user>
    <text>Anyway, Michael helped me find a solution, as shown here: &lt;https://gist.github.com/LeifAndersen/1318798979267ea46ae8ac3933c64989&gt;

We ‘think’ the problem is that the internal method name is just a symbol (rather than an identifier), which is what causes the error.</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T13:51:01.000251</ts>
    <user>Vincenzo</user>
    <text>Oh, sorry --- I misread it. I'm not sure why that didn't work, and I can't investigate more just now.</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T13:51:11.000407</ts>
    <user>Rosalee</user>
    <text>But because its the internal binding, an identifier should work (we think anyway).</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T13:51:21.000320</ts>
    <user>Rosalee</user>
    <text>So we’re going to submit a bug report.</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-28T13:51:25.000124</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; okay cool, thanks.</text>
  </message>
  <message conversation_id="291">
    <ts>2017-09-28T14:23:45.000342</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; that seems fine to me</text>
  </message>
  <message conversation_id="291">
    <ts>2017-09-28T14:25:32.000507</ts>
    <user>Nelson</user>
    <text>thanks</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-29T16:12:58.000234</ts>
    <user>Rosalee</user>
    <text>Is using `define-local-member-name` supposed to interact with your init list in Racket Classes?, such as in this example: &lt;https://gist.github.com/LeifAndersen/05c46b068249b0d7312b635e993327b0&gt;</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-29T16:15:17.000526</ts>
    <user>Rosalee</user>
    <text>This error also persists if you replace the `init-field` line with:
```
(init [(internal-hello hello)])
(field [hello internal-hello])
```

Which is really odd to me.</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-29T16:57:12.000139</ts>
    <user>Rosalee</user>
    <text>Hmm…looking at the fully expanded macro, I’m inclined to think this is possibly a bug in `extract-arg` or `validate-local-member`</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-29T17:31:01.000174</ts>
    <user>Natosha</user>
    <text>&lt;@Rosalee&gt; from the docs for `define-local-member-name`: "Thus, methods, fields, and initialization arguments declared with such external-name ids are accessible only in the scope of the define-local-member-name declaration."</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-29T17:31:51.000309</ts>
    <user>Rosalee</user>
    <text>&lt;@Natosha&gt; Bleh, thanks, I missed that.</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-29T17:32:47.000287</ts>
    <user>Rosalee</user>
    <text>In that case, is there any way I can have the external name for an init variable be the same as a private field?</text>
  </message>
  <message conversation_id="289">
    <ts>2017-09-29T17:33:30.000052</ts>
    <user>Rosalee</user>
    <text>(Or rather, private in that instances of a class can access it for any object, like you would do in a copy method.)</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T20:57:42.000013</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; finally getting around to watching Inside Hackett!</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T20:58:03.000009</ts>
    <user>Chantelle</user>
    <text>I noticed the type checker structs are all prefab, I assume that is because of cross-phase uses?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:00:11.000033</ts>
    <user>Chantelle</user>
    <text>I had a problem once where I wanted cross-phase structs but didn't want them to be prefab so I could attach properties to them still (like custom write) and a method that ryan suggested was to declare a struct property in a cross phase persistent module and use that property in functions that I wanted to use in a cross-phase manner. Is that something you'd be interested in for those structs or is their prefab-ness not a problem?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:14:23.000012</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; I don’t think there’s any reason at the moment to make them non-prefab, but I could imagine a couple different ways to support that if it became necessary at some point.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:14:56.000009</ts>
    <user>Chantelle</user>
    <text>gotcha</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:18:29.000034</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; the transformation of a let to a lambda then back to a let - what problems come up if the lambda-&amp;gt;racket-let step isn't done and you just leave it as a lambda? is it for optimization reasons or something else?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:19:52.000037</ts>
    <user>Kimbery</user>
    <text>you mean implementing `let` in terms of `lambda`? you could do that for `let`, specifically, but not for things like `letrec` or more complicated forms.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:20:11.000008</ts>
    <user>Chantelle</user>
    <text>yeah I mean just for `let` specifically, no idea how to handle `letrec`</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:20:21.000014</ts>
    <user>Chantelle</user>
    <text>also is this the paper you were working off of? &lt;https://people.mpi-sws.org/~joshua/bitype.pdf&gt;</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:20:40.000021</ts>
    <user>Kimbery</user>
    <text>no, the paper is linked in the wiki page.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:20:43.000034</ts>
    <user>Chantelle</user>
    <text>gotta make sure I add the right thing to the reading list :P</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:20:56.000061</ts>
    <user>Kimbery</user>
    <text>&lt;https://github.com/racket/racket/wiki/Inside-Racket-Seminar-7.-Alexis-King-on-Hackett&gt;</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:21:05.000046</ts>
    <user>Kimbery</user>
    <text>specifically, this paper: &lt;http://www.cs.cmu.edu/%7Ejoshuad/papers/bidir/&gt;</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:21:17.000009</ts>
    <user>Chantelle</user>
    <text>ah I missed the wiki page, thanks</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:46:17.000021</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; Possible idea for the part of the hackett implementation that inserts `@%dictionary-placeholder` and then later performs a second expansion pass to insert the right dictionaries: what about using `syntax-local-lift-expression` and `local-expand/capture-lifts`? My thinking is that typeclass uses can use syntax-local-lift-expression to get an identifier for the dictionary they want and put their use-case-specific constraints in the lifted expression, then `#%module-begin` can call local expand, capture the lifted expressions, and manipulate the expressions to include the proper typeclass dictionary info based on the constraints in the lifted expressions. Do you think something like that could work?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:46:50.000057</ts>
    <user>Chantelle</user>
    <text>and do you think it would be simpler than what hackett does currently</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:52:05.000056</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; I don’t think that would work due to the way dictionary elaboration needs to consult local information introduced by `@%with-dictionary`.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:52:41.000011</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; what local information does dictionary elaboration need?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:53:13.000011</ts>
    <user>Kimbery</user>
    <text>It needs (1) a fully solved type environment and (2) the set of constraints locally in scope.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:53:31.000031</ts>
    <user>Kimbery</user>
    <text>The latter equivalently being the set of dictionaries in scope.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:54:36.000038</ts>
    <user>Kimbery</user>
    <text>More generally, my long-term goal is to make the constraint solver extensible, so that things like type equalities, typeclasses, implicit parameters, checked exceptions, and units of measure can all be implemented separately from the core.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:54:51.000019</ts>
    <user>Kimbery</user>
    <text>(And they can be mixed and matched.)</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:55:40.000002</ts>
    <user>Chantelle</user>
    <text>for things that are whole-program transformations, I'd expect the way to implement that would have to be as a `#lang` on top of hackett with the transformation implemented in `#%module-begin` somehow</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:55:53.000003</ts>
    <user>Chantelle</user>
    <text>did you have something different in mind?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:56:00.000045</ts>
    <user>Kimbery</user>
    <text>bluntly, yes.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:56:52.000018</ts>
    <user>Kimbery</user>
    <text>it’s not an unrestricted transformation, but I think the typechecker can provide hooks that allow the constraint domain to be extended in ways that add new source-to-source transformations, yet don’t sacrifice composition.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:57:05.000017</ts>
    <user>Chantelle</user>
    <text>maybe something where hackett exposes lots of syntax parameters that influence how constraints are solved in a set of expressions?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:57:42.000069</ts>
    <user>Kimbery</user>
    <text>I think it would be somewhat orthogonal to existing Racket metaprogramming constructs</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:59:00.000016</ts>
    <user>Chantelle</user>
    <text>interesting. in what ways? also, wild shot in the dark sort of question: do you think rosette or anything in its internals could be used in hackett's implementation of constraint solving?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:59:49.000040</ts>
    <user>Kimbery</user>
    <text>the idea behind much of hackett is using the typechecker as a way to propagate compile-time information that can then be used for metaprogramming. this is they key idea behind why I think hackett can, theoretically, do more than either racket or haskell.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T21:59:56.000021</ts>
    <user>Kimbery</user>
    <text>(wrt metaprogramming, that is.)</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:00:04.000119</ts>
    <user>Chantelle</user>
    <text>right, no complaints with that here</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:00:15.000072</ts>
    <user>Kimbery</user>
    <text>I will touch upon that in some degree in my racketcon talk</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:01:03.000069</ts>
    <user>Kimbery</user>
    <text>as for rosette: I don’t know, but I doubt it.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:02:44.000073</ts>
    <user>Kimbery</user>
    <text>they both use things called “constraint solvers”, but the sort of constraint solver used in haskell is a very different constraint solver from the one used in rosette. I am not sure the similarities extend beyond names.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:03:34.000063</ts>
    <user>Chantelle</user>
    <text>if i wanted to write a liquid-hackett sort of thing that needed access to an SMT solver, rosette seems like something I'd poke at since it's supposed to be for making langs that use SMT solvers to do stuff</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:03:50.000001</ts>
    <user>Chantelle</user>
    <text>but maybe for non-liquid-hackett it wouldn't be useful at all</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:04:19.000009</ts>
    <user>Kimbery</user>
    <text>right, if you wanted to add the notion of refinements to hackett’s constraint domain, that might be useful. but the point is more that hackett ought to be _agnostic_ to the constraint domain.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:04:33.000050</ts>
    <user>Kimbery</user>
    <text>like HM(X) and OutsideIn(X) are parameterized over the constraint domain.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:05:34.000003</ts>
    <user>Chantelle</user>
    <text>so it'd be more like hackett provides some sort of syntactic protocol for macros to declare, require, and influence constraints independent of what constraints actually are or how they're checked</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:05:51.000025</ts>
    <user>Chantelle</user>
    <text>non-local constraints particularly</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:05:57.000001</ts>
    <user>Kimbery</user>
    <text>right. and one of the nice properties of the Haskell type system is that’s actually possible.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:06:21.000080</ts>
    <user>Chantelle</user>
    <text>?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:06:38.000045</ts>
    <user>Kimbery</user>
    <text>OutsideIn(X) provides an especially strong framework with an extensible constraint domain, but Hackett’s typechecker isn’t nearly as fancy as OutsideIn at the moment.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:07:19.000009</ts>
    <user>Chantelle</user>
    <text>are `HM(X)` and `OutsideIn(X)` things in haskell's internals that are exposed to language extensions?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:07:20.000008</ts>
    <user>Kimbery</user>
    <text>but the fact that OusideIn works like that is encouraging, since it means Hackett can continue to be generalized even if it makes an extensible constraint domain a core, user-accessible feature.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:07:36.000045</ts>
    <user>Chantelle</user>
    <text>I write very little haskell :p</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:07:55.000036</ts>
    <user>Kimbery</user>
    <text>I think GHC typechecker plugins can add new sorts of constraint solvers, but I don’t believe they can add new constraints.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:08:45.000045</ts>
    <user>Kimbery</user>
    <text>OutsideIn(X) is the type system that GHC currently uses, though, for context.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:08:47.000010</ts>
    <user>Chantelle</user>
    <text>ah so `OutsideIn` is this thing: &lt;https://wiki.haskell.org/Simonpj/Talk:OutsideIn&gt;</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:09:31.000123</ts>
    <user>Chantelle</user>
    <text>then is `HM(X)` a constraint domain agnostic type system that ghc used to use but doesn't anymore?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:09:55.000066</ts>
    <user>Chantelle</user>
    <text>for hindley milner I'm guessing :p</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:10:39.000070</ts>
    <user>Kimbery</user>
    <text>I don’t believe GHC ever used HM(X)</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:12:11.000034</ts>
    <user>Chantelle</user>
    <text>found this paper presenting HM(X): &lt;http://www.cs.tufts.edu/~nr/cs257/archive/martin-odersky/tapos-final.pdf&gt;</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:12:17.000025</ts>
    <user>Chantelle</user>
    <text>is there anything else worth reading about it for context?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:12:54.000049</ts>
    <user>Kimbery</user>
    <text>I haven’t read that much about HM(X), since I’ve mostly focused on OutsideIn(X).</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:13:09.000065</ts>
    <user>Kimbery</user>
    <text>before OutsideIn, I believe GHC used a system known as “boxy type inference”</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:13:15.000007</ts>
    <user>Chantelle</user>
    <text>cute name</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:14:10.000010</ts>
    <user>Kimbery</user>
    <text>Hackett uses neither, since it uses a variant on Dunfield and Krishnaswami’s bidirectional system that’s similar to the PureScript typechecker</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:15:59.000016</ts>
    <user>Kimbery</user>
    <text>OutsideIn is very, very complex, but I think that’s largely because it’s designed to support type families, higher-rank polymorphism, and GADTs.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:16:15.000144</ts>
    <user>Kimbery</user>
    <text>Hackett currently only supports one of those things.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:19:11.000004</ts>
    <user>Chantelle</user>
    <text>lots to think about</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:19:20.000002</ts>
    <user>Chantelle</user>
    <text>thanks for entertaining my questions :P</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:19:27.000040</ts>
    <user>Chantelle</user>
    <text>really looking forward to the racketcon talk</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:20:46.000012</ts>
    <user>Kimbery</user>
    <text>a lot of this stuff is, of course, aspirational. I don’t yet know if all of it is even possible, and even if it is, I think it’d be new research.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:20:59.000044</ts>
    <user>Chantelle</user>
    <text>the best kind of research</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:21:19.000014</ts>
    <user>Kimbery</user>
    <text>well, the _only_ kind of research, I think.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:21:52.000017</ts>
    <user>Kimbery</user>
    <text>if you know it’ll work, it isn’t really research, is it? :)</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:22:14.000003</ts>
    <user>Chantelle</user>
    <text>that would be the joke :p</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:24:29.000032</ts>
    <user>Kimbery</user>
    <text>in the past six months or so that I’ve been developing Hackett in earnest, I’ve developed some intuitions for certain things, so I _think_ the ideas I have are possible, but I’m not 100% sure.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:26:11.000044</ts>
    <user>Chantelle</user>
    <text>heh I still want to figure out how `#lang hackett/script` with submodules could work for writing main and test submodules, and also pull the infix op code out into a package so I can use it for other stuff</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:27:05.000030</ts>
    <user>Kimbery</user>
    <text>I thought about extracting the infix stuff, but it’s seriously like a couple dozen lines of code, and the interface isn’t stable enough for those couple dozen lines to be put in a package</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:27:51.000018</ts>
    <user>Kimbery</user>
    <text>plus, there are advantages to keeping Hackett monolithic right now.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:28:36.000024</ts>
    <user>Chantelle</user>
    <text>not having to deal with racket's package system and versioning is one that comes to mind</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:29:39.000008</ts>
    <user>Kimbery</user>
    <text>that’s part of it, but a larger part is that I can worry about implementing exactly what Hackett needs and nothing more.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:29:55.000029</ts>
    <user>Chantelle</user>
    <text>true</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:29:58.000045</ts>
    <user>Chantelle</user>
    <text>helps keep focus</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:30:37.000064</ts>
    <user>Kimbery</user>
    <text>Hackett is, by LOC, extremely small.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:31:32.000058</ts>
    <user>Kimbery</user>
    <text>`hackett-lib` is a mere 3047 LOC</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:31:46.000059</ts>
    <user>Chantelle</user>
    <text>heh, racket is amazing</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:31:55.000106</ts>
    <user>Chantelle</user>
    <text>hypothetically, if there _was_ a package that implemented infix app syntax in such a way that hackett could use it, do you think using it would be a bad idea?</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:32:41.000104</ts>
    <user>Kimbery</user>
    <text>as of right now, probably. I think the time at which it _might_ make sense to extract is once precedence is squared away, and that means we need to learn more about usage patterns for infix operators in real Hackett code.</text>
  </message>
  <message conversation_id="292">
    <ts>2017-09-30T22:33:13.000071</ts>
    <user>Chantelle</user>
    <text>seems reasonable enough to me</text>
  </message>
  <message conversation_id="292">
    <ts>2017-10-02T11:02:25.000258</ts>
    <user>David</user>
    <text>Today, I learned that:

```
&amp;gt; (equal? 'Π ; \Pi
          '∏ ; \prod
          )
#f
&amp;gt; (equal? 'Σ ; \Sigma
          '∑ ; \sum
          )
#f
```</text>
  </message>
  <message conversation_id="292">
    <ts>2017-10-02T11:05:02.000097</ts>
    <user>David</user>
    <text>Moreover, when searching-and-replacing Σ → ∑ in DrRacket, it’s smart enough to match σ (lowercase Σ) as well :slightly_smiling_face:</text>
  </message>
  <message conversation_id="293">
    <ts>2017-10-02T12:42:12.000278</ts>
    <user>Nelson</user>
    <text>mimics! &lt;https://github.com/reinderien/mimic&gt;</text>
  </message>
  <message conversation_id="293">
    <ts>2017-10-02T12:46:38.000200</ts>
    <user>David</user>
    <text>:fearful:</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T15:57:29.000123</ts>
    <user>Georgeanna</user>
    <text>At racket summer school I was asking about racket hashlangs vs nanopass and Matt or Sriram (I don’t remember at this point, but I think it was the latter) advocated for racket hashlangs in the style of nanopass. There are pros and cons to both. With hashlangs, you lose the ability to insert/arrange/remove layers as easily as nonopass… But I’m not getting something about this approach. I spent an inordinate amount of time figuring out how to instantiate a module in order to implement `run-with-lang` for beautiful racket (so you can run via `./basic blahblah.bas`)… it is clearly not meant to be an easy thing…</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T15:59:24.000113</ts>
    <user>Georgeanna</user>
    <text>so… if I were to implement MANY racket hashlangs for a nanopass style architecture… how do a go from layer1 to layer2, etc?? I want to have completely separate passes for desugaring, ANF transformation, etc etc. (and at some point, I’d LOVE to disconnect entirely from racket as a backend and produce machine or VM code)… am I thinking about this wrong?</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:00:29.000002</ts>
    <user>Georgeanna</user>
    <text>(the more I type this, the more I suspect I’m thinking top-down and should be thinking bottom up… but I’m (possibly) even more confused by that approach. Designing languages _starts_ with the language, not the bottom layer mechanics)</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:02:18.000076</ts>
    <user>David</user>
    <text>I guess part of the pitch of the Racket approach, as opposed to the Nanopass one, is that you don’t have to disconnect from Racket to generate VM code, because the Racket compiler is doing that for you.</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:03:41.000326</ts>
    <user>Georgeanna</user>
    <text>absolutely. you get a TON for free… and I want that, for sure… ignore my parenthetical about eventually disconnecting from racket as a backend for now.</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:03:50.000384</ts>
    <user>Georgeanna</user>
    <text>that’s a success problem. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:04:51.000360</ts>
    <user>Georgeanna</user>
    <text>(I love questions like “what if we get too much traffic for heroku??” to which I answer “congratulations?“… but I’m not concerned with finishing, I’m concerned with starting)</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:05:08.000193</ts>
    <user>David</user>
    <text>In my experience, the Nanopass approach is more appropriate than the Racket approach when I’m building a *transpiler*. In that case, I’m not targeting a machine, so linguistic reuse doesn’t apply. For example, I built CSS-expressions (&lt;https://docs.racket-lang.org/css-expr/index.html&gt;) using Nanopass, and I don’t see how I could’ve used the Racket way. (Though, from having talked to Jay, I believe it’s possible, it’s just beyond my reach.)</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:06:35.000317</ts>
    <user>Georgeanna</user>
    <text>oh god… the domain in that doco… that’s amazing</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:08:25.000285</ts>
    <user>David</user>
    <text>My other point is, unless you want to directly write code for the languages in every pass on the compiler, then it’s not worth having ‘#lang’s for them. Let them just be a collection of macros expanding to other macros. Or, at most, module languages, as opposed to full ‘#lang’s with custom readers.</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:08:43.000167</ts>
    <user>David</user>
    <text>Are you referring to ‘&lt;http://bettermotherfuckingwebsite.com|bettermotherfuckingwebsite.com&gt;’?</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:09:24.000424</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; another idea is for hashlangs to provide more extension points that transform things that seem like they would require another language layer into things that hook into provided extension points and thus compose with other extensions</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:09:41.000164</ts>
    <user>Georgeanna</user>
    <text>&lt;@David&gt; yes… and I’m learning actual CSS from it. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:10:09.000372</ts>
    <user>Georgeanna</user>
    <text>&lt;@Chantelle&gt; ummm… I’m not following that</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:10:39.000065</ts>
    <user>Georgeanna</user>
    <text>is that basically the same as &lt;@David&gt;’s comment?</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:13:02.000178</ts>
    <user>Chantelle</user>
    <text>&lt;@Georgeanna&gt; things like #%app and #%datum can let you override parts of #lang racket by importing modules instead of changing the language's reader. I think racket langs should move towards doing more of that</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:16:16.000430</ts>
    <user>Chantelle</user>
    <text>I'd really like a way for requiring a module to somehow wrap all forms after the require statement in a macro defined by the required module</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:21:08.000400</ts>
    <user>Georgeanna</user>
    <text>that’d be interesting but possibly scary. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:21:45.000141</ts>
    <user>Chantelle</user>
    <text>absolutely :) but if langs don't provide it, people do it anyway with metalanguages that operate by chaining readers together and that's way easier to get wrong</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:23:40.000369</ts>
    <user>Georgeanna</user>
    <text>I think I’d want it to be opt-in tho… like `(require (inject-in somerequire form1 form2))`</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:24:49.000195</ts>
    <user>Chantelle</user>
    <text>that's a good idea, and means it might be possible to implement it as a regular require transformer instead of a wrapper on top of require</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:25:26.000114</ts>
    <user>Chantelle</user>
    <text>I like a name like `module-body-in` better tho :p `inject-in` makes me think it's for some dependency injection framework</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T16:27:13.000572</ts>
    <user>Chantelle</user>
    <text>I'd want to combine this with making `#%app` / `#%datum` / etc syntax parameters instead of magic identifiers inserted by the reader, that way a `module-body-in` form could override `#%app` by wrapping the module body in a `syntax-parameterize` form</text>
  </message>
  <message conversation_id="295">
    <ts>2017-10-02T17:56:33.000411</ts>
    <user>Delmy</user>
    <text>How can one create syntax for a keyword argument? I want to do something like `#'(lamdba (a #:b c) ...)` Where `#:b c` is generated from some identifiers in a macro.</text>
  </message>
  <message conversation_id="295">
    <ts>2017-10-02T17:58:40.000239</ts>
    <user>Latarsha</user>
    <text>&lt;@Delmy&gt; you might be interested in `#,@` or using `...`</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T17:59:10.000288</ts>
    <user>Chantelle</user>
    <text>&lt;@Delmy&gt; `(with-syntax ([foo-kw (make-keyword-dynamically ...)]) #'(lambda (a foo-kw c) ...)` ought to work</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T17:59:29.000105</ts>
    <user>Chantelle</user>
    <text>maybe</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T18:00:18.000215</ts>
    <user>Chantelle</user>
    <text>see this part of the docs for `with-syntax` in particular:

&amp;gt; However, if any individual stx-expr produces a non-syntax object, then it is converted to one using datum-&amp;gt;syntax and the lexical context and source location of the individual stx-expr.</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T18:01:09.000420</ts>
    <user>Georgeanna</user>
    <text>the basics
```
&amp;gt; (define val 'z)
&amp;gt; (define key '#:y)
&amp;gt; #`(lambda (x #,key #,val) 42)
#&amp;lt;syntax:12:2 (lambda (x #:y z) 42)&amp;gt;
```</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T18:01:38.000276</ts>
    <user>Chantelle</user>
    <text>^ and that example is using `quasisyntax` and `unsyntax`, and `unsyntax` performs the same conversion that `with-syntax` does</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T18:06:22.000085</ts>
    <user>Delmy</user>
    <text>But what if the `y` part of `#:y` is something I want to be generated from an identifier? Can I unquote just the part that is the name?</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T18:07:15.000201</ts>
    <user>Chantelle</user>
    <text>&lt;@Delmy&gt; You can use `string-&amp;gt;keyword` to produce a keyword dynamically from a string</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T18:07:33.000103</ts>
    <user>Delmy</user>
    <text>awesome that sounds like exactly what I need, i'll look into it. Thanks!</text>
  </message>
  <message conversation_id="294">
    <ts>2017-10-02T18:07:47.000289</ts>
    <user>Chantelle</user>
    <text>:+1:</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:39:49.000266</ts>
    <user>Chantelle</user>
    <text>does it still count as 3d syntax if a syntax object contains a non-prefab struct but that struct has an implementation of `gen:custom-write`?</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:41:04.000173</ts>
    <user>Kimbery</user>
    <text>yes</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:41:23.000004</ts>
    <user>Chantelle</user>
    <text>why?</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:41:51.000287</ts>
    <user>Kimbery</user>
    <text>custom-write converts things to strings. perhaps the better question should be asking about serializable structs?</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:42:57.000134</ts>
    <user>Kimbery</user>
    <text>more pointedly, custom-write does not have any notion of _reading_ the result. 3D syntax is about things that aren’t roundtrippable.</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:43:26.000041</ts>
    <user>Chantelle</user>
    <text>No, I mean custom write specifically. The case I'm thinking of is where a module is read with a reader that produces syntax objects containing structs to represent certain special kinds of syntactic constructs (as opposed to using tagged s-exps), and those structs implement custom write in such a way that the read-write contract holds _but only if the custom reader is used_</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:43:53.000181</ts>
    <user>Chantelle</user>
    <text>so it would round-trip as long as the extended reader was used</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:44:11.000060</ts>
    <user>Kimbery</user>
    <text>the notion of the reader is long gone by the time syntax objects are marshalled to bytecode</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:45:13.000144</ts>
    <user>Kimbery</user>
    <text>that would mean bytecode loading would need to call a reader, which is a string parser</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:45:17.000326</ts>
    <user>Kimbery</user>
    <text>that sounds like a very bad idea to me</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:47:39.000143</ts>
    <user>Chantelle</user>
    <text>fully expanded syntax objects are the only syntax objects that are marshalled to bytecode correct? this use of syntax objects wouldn't persist that far</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:48:21.000271</ts>
    <user>Kimbery</user>
    <text>I don’t really understand what you’re asking. 3D syntax is only a problem when syntax objects are marshalled to bytecode; that’s the whole reason the notion of 2D/3D syntax exists, IIUC.</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:49:06.000181</ts>
    <user>Kimbery</user>
    <text>If your syntax isn’t getting marshalled to bytecode, you can put whatever values you want in your syntax.</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:55:24.000227</ts>
    <user>Chantelle</user>
    <text>The way this relates to marshalling is if i did have a reader that did this and expected the lang it was used with to override `#%datum` in order to detect these special structs, that would work fine and these syntax objects wouldn't exist after expansion. But using the reader with a lang that uses the default definition of `#%datum` would expand it into `(quite &amp;lt;stx object&amp;gt;)`, and _that_ would result in a 3d syntax object surviving to a fully expanded module.</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:55:39.000101</ts>
    <user>Chantelle</user>
    <text>So I guess my question is: should the default `#%datum` form with a 3d syntax object be an error?</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T18:59:35.000211</ts>
    <user>Kimbery</user>
    <text>Should it be an error? I don’t think it _should_ be an error… not currently, at any rate. Whether or not it will do what you want is a separate question. I’m not entirely sure what “phase” the reader runs at (since it doesn’t really have one, currently), but I would imagine it is different from macroexpansion phases, so your struct might end up being from no phases at all… and it would _at least_ need to be cross-phase persistent to be defined behavior.</text>
  </message>
  <message conversation_id="296">
    <ts>2017-10-02T19:02:43.000066</ts>
    <user>Chantelle</user>
    <text>I think the reader and the expander share namespaces</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:02:28.000140</ts>
    <user>Rosalee</user>
    <text>&lt;@Tina&gt; Is the indentation settings for racket text% editors defined in `framework`?</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:02:44.000160</ts>
    <user>Rosalee</user>
    <text>If so could you point me to it? (Searching the docs appears to have failed me.)</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:03:10.000279</ts>
    <user>Tina</user>
    <text>I don't know what you mean by indentation settings exactly</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:04:19.000136</ts>
    <user>Tina</user>
    <text>What purpose are you trying to achieve?</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:05:11.000146</ts>
    <user>Rosalee</user>
    <text>Checking indentation, in specific:</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:06:05.000073</ts>
    <user>Rosalee</user>
    <text>At the moment I have an object that satisfies `racket:text&amp;lt;%&amp;gt;`, I can call one of the `tabify` functions on it to indent it.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:06:34.000088</ts>
    <user>Rosalee</user>
    <text>However, I also want the ability to change some of the tabbing rules, much like in the DrRacket preferences window.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:06:43.000175</ts>
    <user>Rosalee</user>
    <text>In fact, exactly like in the DrRacket preferences window.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:06:50.000189</ts>
    <user>Rosalee</user>
    <text>I’m just looking for a programatic way to do that. :wink:</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:07:54.000134</ts>
    <user>Rosalee</user>
    <text>If you know how I could do that that would be awesome. :smile: (If not thanks anyway though.)</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:10:29.000117</ts>
    <user>Tina</user>
    <text>`preferences:get` and `preferences:set`</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:10:42.000095</ts>
    <user>Tina</user>
    <text>You can avoid updating your own preferences file if you use:</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:11:18.000100</ts>
    <user>Tina</user>
    <text>`preferences:low-level-put-preferences` and the getter</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:11:28.000106</ts>
    <user>Tina</user>
    <text>(set up a hash table and avoid writing to the file)</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:11:53.000007</ts>
    <user>Tina</user>
    <text>You can look at the difference between the files before and after you make the modification via the drracket gui</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:12:08.000011</ts>
    <user>Tina</user>
    <text>and you probably also want to look in framework/private/main, I believe.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:12:12.000123</ts>
    <user>Tina</user>
    <text>hth</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:19:39.000171</ts>
    <user>Rosalee</user>
    <text>Ok, cool</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:20:06.000092</ts>
    <user>Rosalee</user>
    <text>So basically try it in drracket and check the preferences file to see the exact preference? Cool, much appreciated. :smile:</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:21:21.000204</ts>
    <user>Tina</user>
    <text>or read the code I pointed you to, in order to see what the settings are.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:21:23.000198</ts>
    <user>Tina</user>
    <text>or both, I suppose</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:22:51.000162</ts>
    <user>Rosalee</user>
    <text>Cool, thanks.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:23:08.000054</ts>
    <user>Rosalee</user>
    <text>Although hmm…the preferences file doesn’t seem to be in my ~/Library/Racket folder.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:23:47.000081</ts>
    <user>Tina</user>
    <text>See `find-system-path`</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:24:07.000111</ts>
    <user>Rosalee</user>
    <text>*facepalm* ah, thanks.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:25:10.000027</ts>
    <user>Rosalee</user>
    <text>`~/Library/Preferences`…ah, okay. Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:32:12.000185</ts>
    <user>Rosalee</user>
    <text>&lt;@Tina&gt; Ah, okay `plt:framework-pref:framework:tabify`, thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:32:40.000056</ts>
    <user>Tina</user>
    <text>when you call `preferences:set` you don’t pass the `plt:framework-pref` part</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T21:39:07.000071</ts>
    <user>Rosalee</user>
    <text>just `framework:tabify`? Makes sense. Thanks a lot for the help.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T22:12:44.000039</ts>
    <user>Tilda</user>
    <text>&lt;@Tina&gt; or &lt;@Rosalee&gt; or anyone who's worked with images in DrRacket: is there a reason `make-bitmap` requires its width/height arguments to be strictly positive?  Tonight, two students pasted into their code the rendered output of `empty-image`, i.e. a 0x0 image, and my Racket-&amp;gt;text converter choked on it because `make-bitmap` threw an error.</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T22:13:42.000035</ts>
    <user>Tina</user>
    <text>I guess one of the underlying bitmap construction operations on one of the platforms won't create a zero sized bit map</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T22:13:59.000100</ts>
    <user>Tina</user>
    <text>The image library has a bunch of special cases for this reason. </text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T22:14:14.000191</ts>
    <user>Tina</user>
    <text>(I don't actually know why tho. But that's my guess.)</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T22:24:28.000168</ts>
    <user>Tilda</user>
    <text>gotcha.  So in my code, I can use a workaround with `(equal? snip 2htdp:empty-image)`, and short-circuit the problem.  but it seemed kinda hackish to me :wink:</text>
  </message>
  <message conversation_id="297">
    <ts>2017-10-02T22:47:04.000187</ts>
    <user>Rosalee</user>
    <text>&lt;@Tilda&gt; Ya, fwiw, I suspect Matthew has done the most with that particular bit of the code (bitmap%)</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:48:14.000084</ts>
    <user>Rosalee</user>
    <text>Although can I ask why you are using bitmap% in the first place?</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:49:07.000015</ts>
    <user>Rosalee</user>
    <text>(I mean, don’t get me wrong, its frequently the right task for the job, but `pict` is usually _much_ nicer when it comes to silly edge cases like this. :wink: )</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:51:02.000162</ts>
    <user>Tilda</user>
    <text>I'm using neither; I'm walking the wxme tree of snips, finding the convertibles, and converting them to pngs</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:51:22.000085</ts>
    <user>Tilda</user>
    <text>do you happen to know how to ask a convertible what its width will be, if I try to convert it?</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:51:31.000035</ts>
    <user>Tilda</user>
    <text>assuming I don't know what type of snip it is, merely that it's convertible?</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:52:30.000074</ts>
    <user>Rosalee</user>
    <text>Oh wow, if you’re using `convert` to convert to a png and you’re getting an error that’s probably a bug.</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:53:12.000089</ts>
    <user>Rosalee</user>
    <text>So short answer, no, I don’t think you can do that. Long answer, that’s probably a bug…can you give me a sample?</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:53:22.000052</ts>
    <user>Tilda</user>
    <text>so, `(convert empty-image 'png-bytes)` will trigger the contract error</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:53:43.000090</ts>
    <user>Tilda</user>
    <text>You can rig it with some image snip if you want, but that's simple enough as it is</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:56:12.000020</ts>
    <user>Rosalee</user>
    <text>&lt;@Tilda&gt; Interesting, this is certainly a bug.</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:56:14.000279</ts>
    <user>Tilda</user>
    <text>also, really annoyingly: `(convert empty-image 'png-bytes 'fallback)` doesn't give me `'fallback`, it dies with the contract error, first.</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:56:16.000034</ts>
    <user>Rosalee</user>
    <text>As per the docs…</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:56:26.000152</ts>
    <user>Rosalee</user>
    <text>yup</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:56:31.000073</ts>
    <user>Rosalee</user>
    <text>which is why its a bug. :wink:</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:57:15.000126</ts>
    <user>Rosalee</user>
    <text>Either:
A) It should not say its convertible?, or
B) It should return fallback (which is by default an error iirc.)</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:58:18.000056</ts>
    <user>Rosalee</user>
    <text>Although…its probably a bug in the 2htdp library.</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:58:18.000127</ts>
    <user>Tilda</user>
    <text>I'd rather B: I don't want image snips to *not* claim that they're convertible things, but I do want a decent error-handling mechanism</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:59:26.000056</ts>
    <user>Rosalee</user>
    <text>Ya, this is almost certainly a bug in `2htdp`, for example, when trying to convert `blank`, I get:</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T22:59:30.000028</ts>
    <user>Rosalee</user>
    <text>```
&amp;gt; (convert (blank 0) 'png-bytes)
#"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\1\0\0\0\1\b\6\0\0\0\37\25\304\211\0\0\0\rIDAT\b\231c\370\377\377?\3\0\b\374\2\376\205\315\2534\0\0\0\0IEND\256B`\202"
```</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:00:04.000156</ts>
    <user>Rosalee</user>
    <text>I ‘think’ &lt;@Corliss&gt; manages that library? I’ll talk to him about it tomorrow morning if that works for you?</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:00:21.000175</ts>
    <user>Rosalee</user>
    <text>(Unless you need something sooner.)</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:00:51.000194</ts>
    <user>Tilda</user>
    <text>well, I can workaround it with a with-handlers on the exn:fail:contract error, but it's ugly.  I'd like a cleaner long-term solution</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:04:51.000076</ts>
    <user>Rosalee</user>
    <text>&lt;@Tilda&gt; Okay. Fwiw, something like this will solve your immediate problem, I’ll talk to Matthias tomorrow about getting it fixed properly:
```
#lang racket

(require (prefix-in file: file/convertible)
         pict)

(define (convert v request [default #f])
  (with-handlers ([exn:fail:contract? (λ (e)
                                        (case request
                                          [(png-bytes) (convert (blank 0) 'png-bytes default)]
                                          [else (raise e)]))])
    (file:convert v request default)))
```</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:06:11.000071</ts>
    <user>Tilda</user>
    <text>Thanks.  For now, I'm using a similar handler, but I'm not outputting the empty image itself.  In a minor sense, it's better that I handle the error, because a 0-pixel image is very hard to see on a monitor... :slightly_smiling_face:</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:06:47.000062</ts>
    <user>Rosalee</user>
    <text>LOL, very true. Which is why I *always* (aka never) use zero-width space characters in my racket variables. :wink:</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:07:01.000078</ts>
    <user>Rosalee</user>
    <text>Anyway, I need to be up early in the morning, so if that works for the moment I’m off to bed. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:07:10.000110</ts>
    <user>Tilda</user>
    <text>thanks</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:07:27.000148</ts>
    <user>Rosalee</user>
    <text>Thank you for finding the bug.</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:07:44.000020</ts>
    <user>Tilda</user>
    <text>don't thank me; thank students with wonky submissions!</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-02T23:08:18.000014</ts>
    <user>Tilda</user>
    <text>Found another bug too (filed in git) about indentation and highlighting; not urgent, just weird</text>
  </message>
  <message conversation_id="298">
    <ts>2017-10-03T08:19:05.000486</ts>
    <user>Tina</user>
    <text>&lt;@Tilda&gt; &lt;@Rosalee&gt; that’s a but in 2htdp/image (a library I maintain), but it is also a bug in `pict`:</text>
  </message>
  <message conversation_id="299">
    <ts>2017-10-03T08:21:28.000211</ts>
    <user>Tina</user>
    <text>```
#lang racket/base
(require file/convertible
         racket/class
         racket/gui/base)
(require (prefix-in p: pict))

(define bp
  (read-bitmap
   (open-input-bytes
    (convert (p:rectangle 0 0) 'png-bytes 'fallback))))

(send bp get-width) ;; ==&amp;gt; 1
(send bp get-height) ;; ==&amp;gt; 1
```</text>
  </message>
  <message conversation_id="299">
    <ts>2017-10-03T08:27:36.000322</ts>
    <user>Tina</user>
    <text>It isn’t obvious to me what the right behavior is here, but I’ve pushed a change that produces a 1x1 bitmap in that case</text>
  </message>
  <message conversation_id="299">
    <ts>2017-10-03T08:27:45.000067</ts>
    <user>Tina</user>
    <text>(but =&amp;gt; bug)</text>
  </message>
  <message conversation_id="299">
    <ts>2017-10-03T08:44:15.000477</ts>
    <user>Tina</user>
    <text>&lt;@Rosalee&gt;: you wrote earlier “it is probably a bug in the 2htdp library”; I just want to put out that the error message contains the line:</text>
  </message>
  <message conversation_id="299">
    <ts>2017-10-03T08:44:48.000310</ts>
    <user>Tina</user>
    <text>```
  blaming: &amp;lt;pkgs&amp;gt;/gui-lib/mrlib/image-core.rkt
   (assuming the contract is correct)
```</text>
  </message>
  <message conversation_id="299">
    <ts>2017-10-03T08:44:52.000085</ts>
    <user>Tina</user>
    <text>(lines)</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T08:58:00.000273</ts>
    <user>Rosalee</user>
    <text>Sure. I blamed 2htdp/image because pict didn’t fail. Although I personally thought making a 1x1 transparent png was the right thing to do here as apparently pngs can’t have a 0 width or height.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T08:58:34.000451</ts>
    <user>Tilda</user>
    <text>Where is that speced? I couldn't find that fact anywhere...</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T08:58:35.000334</ts>
    <user>Rosalee</user>
    <text>But yup, it was certainly the gui lib that tried to make the actual 0x0 picture. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:00:58.000404</ts>
    <user>Tilda</user>
    <text>Going back to a related question: do you happen to know how to ask a convertible what its width will be, if I try to convert it?</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:01:22.000657</ts>
    <user>Rosalee</user>
    <text>&lt;@Tilda&gt; I honestly forget. Here is an unofficial SO answer while I track down the actual spec: &lt;https://stackoverflow.com/questions/7909212/how-to-create-empty-0x0-image&gt;</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:03:23.000380</ts>
    <user>Rosalee</user>
    <text>&lt;@Tilda&gt; The closest thing that the convert library seems to support (by default) is: `'png-bytes+bounds`, which gives you the width and height at the same time as converting the image.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:04:35.000083</ts>
    <user>Rosalee</user>
    <text>You ‘could’ use `'png-bytes+bounds8`, which automatically pads the png image.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:05:02.000512</ts>
    <user>Rosalee</user>
    <text>This gives the effect of a 0x0 image being padded. And then it gives you the amount of padding added to each side.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:05:21.000430</ts>
    <user>Tilda</user>
    <text>I tried that, and consistently got #f as my output. Looks like the snip doesn't respond to that message</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:05:33.000106</ts>
    <user>Rosalee</user>
    <text>So in the case of `(convert empty-image 'png-bytes+bounds8)`, you get a 6x6 sized png with 3 pixels of padding on the left, top, right, and bottom.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:05:39.000034</ts>
    <user>Tilda</user>
    <text>Would be lovely if it did....</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:06:02.000238</ts>
    <user>Rosalee</user>
    <text>Ah, sad.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:06:16.000483</ts>
    <user>Rosalee</user>
    <text>Then nope, I highly suspect it’s not possible. :confused:</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:07:45.000229</ts>
    <user>Tilda</user>
    <text>Png-bytes+bounds I can understand why it fails, since it promises to return the actual bytes and bounds, and can't return a 0*0 image. But the padded version ought to work, and just doesn't seem to be supported right now</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:08:32.000229</ts>
    <user>Rosalee</user>
    <text>Okay</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:08:36.000362</ts>
    <user>Rosalee</user>
    <text>I think I have a solution.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:08:43.000093</ts>
    <user>Rosalee</user>
    <text>Its ugly and terrible, but….</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:08:48.000366</ts>
    <user>Rosalee</user>
    <text>convert to pdf-bytes.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:09:03.000213</ts>
    <user>Rosalee</user>
    <text>Then use the racket-poppler package to get the width and height of the pdf page.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:09:27.000141</ts>
    <user>Tilda</user>
    <text>Oh good grief. Srsly? </text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:09:49.000088</ts>
    <user>Rosalee</user>
    <text>Ya, that is worse than just catching the exception. :disappointed:</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:10:13.000347</ts>
    <user>Tilda</user>
    <text>Well now thanks to Robby's fix, there won't be an exception to catch... Irony.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:10:15.000212</ts>
    <user>Rosalee</user>
    <text>But ya, the convert library is kind of…lacking, imo.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:12:34.000322</ts>
    <user>Tilda</user>
    <text>I wonder if the contract for png-bytes+bounds might not be better as (list (or/c bytes default) num num num num), instead of (or/c (list bytes num num num num) default)...</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:13:21.000598</ts>
    <user>Tilda</user>
    <text>In that you could get the bounds even if you couldn't get the bytes</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:14:41.000602</ts>
    <user>Rosalee</user>
    <text>Eh, something you pass into the convert library might not even make sense to be a png file. In which case having it return default/c is the right thing.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:15:02.000303</ts>
    <user>Rosalee</user>
    <text>What would be much better would be having a ‘width and ‘height convert targets.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:16:34.000144</ts>
    <user>Tilda</user>
    <text>I can see efficiency reasons why that might not be ideal (eg if the image is recomputed each time, in order to measure it), but as an API that would be helpful</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:16:37.000038</ts>
    <user>Rosalee</user>
    <text>FYI, here is the png spec that makes a 0x0 png invalid: &lt;http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html&gt;</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:17:14.000066</ts>
    <user>Rosalee</user>
    <text>I absolutely agree.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:17:55.000032</ts>
    <user>Rosalee</user>
    <text>Honestly, I would just scrap the `file/convert` library altogether. Its a great idea, but its just too rigid in so many ways.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:18:10.000361</ts>
    <user>Rosalee</user>
    <text>`file/convertible`*</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:18:57.000204</ts>
    <user>Tilda</user>
    <text>Well, it's a nice trick that works with snips that I can't statically predict what that are, so it's got that going for it :-)</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:20:32.000283</ts>
    <user>Rosalee</user>
    <text>Sure. I think a convertiblity library absolutely must exist. Its just this particular instance which is too rigid.</text>
  </message>
  <message conversation_id="300">
    <ts>2017-10-03T09:20:50.000170</ts>
    <user>Rosalee</user>
    <text>I’ve actually been working on a replacement for use with video.</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:25:05.000541</ts>
    <user>Tina</user>
    <text>&lt;@Tilda&gt; if you want to avoid catching the exception, you can check to see if the image has either a 0 width or a 0 height.</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:25:41.000429</ts>
    <user>Tilda</user>
    <text>Yesss, that's exactly my question.  I don't have an image, I have a snip -- how do I ask the snip for its dimensions, if I don't know for certain that it's an image-snip?</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:25:56.000293</ts>
    <user>Tina</user>
    <text>get-extent</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:26:24.000521</ts>
    <user>Tina</user>
    <text>but maybe non-2htdp/image snips don’t have this problem, so maybe you can get the image out?</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:26:58.000700</ts>
    <user>Tilda</user>
    <text>Currently, my code for this case is simply,
```
          [(convertible? snip)
           (let ((converted
                  (with-handlers ([exn:fail:contract?
                                   (λ(e) 'conversion-failure)])
                    (convert snip 'png-bytes 'conversion-failure))))
             (if (equal? converted 'conversion-failure)
                 (display (add-empty-image "")
                          out)
                 (display (add-image (convert snip 'png-bytes))
                          out)))]
```</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:27:01.000502</ts>
    <user>Tina</user>
    <text>(I’ll note that `image-snip%` is an unrelated thing, which is slightly confusing to me at this point :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:28:28.000322</ts>
    <user>Tilda</user>
    <text>so I don't have a dc&amp;lt;%&amp;gt; to give to `(send a-snip get-extent dc x y)`.  unless that's not the get-extent you meant?</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:28:31.000445</ts>
    <user>Tina</user>
    <text>If you want to work around the bug, I suggest you check to see if the snip is actually an `image?` from 2htdp/image and if it has either a 0 width or a 0 height and then do the “conversion” yourself.</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:28:53.000066</ts>
    <user>Tina</user>
    <text>A bitmap dc would work fine for this purpose.</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:29:03.000230</ts>
    <user>Tina</user>
    <text>But that’s probably not the most direct approach</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:32:23.000583</ts>
    <user>Tina</user>
    <text>(If you want to stick with the code you have above, I suggest you use a regexp match on the error message so you don’t accidentally catch real bugs. I think that would also be just fine.)</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:34:39.000297</ts>
    <user>Tilda</user>
    <text>so using get-extent, it would be something like
```
[(convertible? snip)
           (let* ((bm (new bitmap-dc%))
                  (width (box 0))
                  (height (box 0)))
             (send snip get-extent bm 0 0 width height)
             (if (or (= (unbox width) 0) (= (unbox height) 0))
                 (display (add-empty-image "") out)
                 (display (add-image (convert snip 'png-bytes))
                          out)))]
```
?</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:35:24.000188</ts>
    <user>Tina</user>
    <text>I’m not sure what would go wrong exactly but you should probably put a 1x1 bitmap into the bitmap-dc.</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:36:16.000510</ts>
    <user>Tina</user>
    <text>(Also you don’t have to add an image to the html page when it is 0x0, right? You could just put something less? Maybe nothing?)</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:36:33.000722</ts>
    <user>Tina</user>
    <text>Also, you can use `define` in the rhs of a `cond`:</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:36:51.000477</ts>
    <user>Tilda</user>
    <text>right, that's what the add-empty-image is doing; it's letting me put a non-image placeholder into the resulting output</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:37:00.000276</ts>
    <user>Tina</user>
    <text>```
[(convertible? snip)
 (define bm (make-object bitmap-dc% (make-bitmap 1 1))))
 (define wb (box 0))
... etc
```</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:38:05.000407</ts>
    <user>Tilda</user>
    <text>good to know, thanks.  I wasn't certain about the scoping, so didn't bother</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:39:54.000636</ts>
    <user>Tina</user>
    <text>It is scoped to that arm of the `cond`</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:40:06.000716</ts>
    <user>Tina</user>
    <text>(to the square brackets)</text>
  </message>
  <message conversation_id="301">
    <ts>2017-10-03T10:44:01.000009</ts>
    <user>Tilda</user>
    <text>yup, makes sense.  I think I'd gotten so used to BSL that I forgot normal racket allows defines in places where they make sense :wink:</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:36:06.000158</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; re: the GH issue, is racket7 easy to build these days? I haven’t tried it yet.</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:36:23.000102</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; should be just `make`</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:36:47.000068</ts>
    <user>Kimbery</user>
    <text>but how can I write Racket without DrRacket? :)</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:39:24.000106</ts>
    <user>Kimbery</user>
    <text>oh, I see… racket7 does _not_ imply racket-on-chez.</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:40:16.000224</ts>
    <user>Latarsha</user>
    <text>right</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:40:29.000148</ts>
    <user>Latarsha</user>
    <text>no need to miss out on DrRacket</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:40:31.000015</ts>
    <user>Latarsha</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:41:55.000029</ts>
    <user>Kimbery</user>
    <text>so I should just expect `make base` to give me an ordinary Racket installation with a slower and less buggy expander?</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:44:11.000036</ts>
    <user>Latarsha</user>
    <text>yes</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:44:21.000485</ts>
    <user>Latarsha</user>
    <text>and maybe a slower IO system</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:54:16.000105</ts>
    <user>Latarsha</user>
    <text>you might want to build less than that</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T17:56:24.000097</ts>
    <user>Kimbery</user>
    <text>if I want to install drracket, I don’t really have a choice, do I?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-03T18:00:43.000114</ts>
    <user>Latarsha</user>
    <text>true</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T18:01:33.000205</ts>
    <user>Kimbery</user>
    <text>I did notice that `make base` did not set up static-links into the `pkgs/` dir… I don’t remember how those got set up in my normal from-source installation in the first place.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-03T18:02:22.000269</ts>
    <user>Latarsha</user>
    <text>`make` sets them up for the pkgs that are in there</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T18:03:19.000123</ts>
    <user>Kimbery</user>
    <text>okay. I seem to remember I stopped using `make` for some reason, but I don’t remember what the reason was.</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T18:03:41.000242</ts>
    <user>Kimbery</user>
    <text>I think I wanted to not install the whole main-distribution.</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T18:06:41.000274</ts>
    <user>Kimbery</user>
    <text>aww, my `raco setup` segfaulted.</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T18:11:25.000234</ts>
    <user>Latarsha</user>
    <text>if you can get a stack trace that would be a useful bug report</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T18:19:16.000364</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; I have a crash report, but re-running `raco setup` worked. should I still open an issue?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-03T18:19:27.000296</ts>
    <user>Latarsha</user>
    <text>Yes</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T18:51:06.000253</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; Alex’s program still fails on the new expander</text>
  </message>
  <message conversation_id="302">
    <ts>2017-10-03T18:54:19.000250</ts>
    <user>Latarsha</user>
    <text>Worth reporting on the bug</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T10:14:23.000414</ts>
    <user>Tana</user>
    <text>Question about Typed Racket: it looks like `&amp;gt;` wants a `Real` but most math operators want `Number` - is there a way to cast a `Number` to `Real` for something like `(if (&amp;gt; x (+ y z)) ...)`</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T10:31:48.000416</ts>
    <user>Tana</user>
    <text>&lt;https://dl.dropbox.com/s/tvdjxewbgik4nve/Screenshot%202017-10-04%2010.29.49.png&gt;</text>
  </message>
  <message conversation_id="304">
    <ts>2017-10-04T10:46:44.000532</ts>
    <user>Clorinda</user>
    <text>others who have _written_ more Typed Racket may have better advice... but from my view you could (1) use Real more often instead of Number if that works, or (2) something like the following that can quickly ensure something is a `Real` (or error in this case):</text>
  </message>
  <message conversation_id="304">
    <ts>2017-10-04T10:46:56.000145</ts>
    <user>Clorinda</user>
    <text>```
#lang typed/racket

(define x : Number 42)

(ann (assert x real?) Real)
```</text>
  </message>
  <message conversation_id="304">
    <ts>2017-10-04T10:48:11.000407</ts>
    <user>Clorinda</user>
    <text>Although many math operators may accept any `Number`, they will also accept `Real` (since any `Real` is a `Number`), and many (I think...) should know that if they got a Real, they will produce a Real</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T10:48:40.000029</ts>
    <user>Latarsha</user>
    <text>&lt;@Tana&gt; that's because `(&amp;lt; (sqrt -1) 1)` is a runtime error in regular untyped Racket</text>
  </message>
  <message conversation_id="304">
    <ts>2017-10-04T10:49:01.000148</ts>
    <user>Latarsha</user>
    <text>what I would do for that function is just have it take `Real` as input</text>
  </message>
  <message conversation_id="304">
    <ts>2017-10-04T10:53:05.000748</ts>
    <user>Tana</user>
    <text>ahhhh ok</text>
  </message>
  <message conversation_id="304">
    <ts>2017-10-04T10:53:10.000237</ts>
    <user>Tana</user>
    <text>lemme hack on it</text>
  </message>
  <message conversation_id="305">
    <ts>2017-10-04T11:20:22.000450</ts>
    <user>Ezequiel</user>
    <text>I want to make a volume meter in Racket. What library would I look for?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T12:05:28.000334</ts>
    <user>Tana</user>
    <text>Okay so the problem i have is that I have functions that return the result of a math operation which is a `Number` and I am passing that to another function which needs a `Real`</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T12:05:57.000419</ts>
    <user>Tana</user>
    <text>```
; Get magnitude of vector (length)
(: vector-mag (-&amp;gt; vect Number))
(define (vector-mag a)
  (sqrt (+ (expt (vect-x a) 2) (expt (vect-y a) 2))))

; Convert vector to a unit vector (magnitude of 1)
(: vector-normalize (-&amp;gt; vect vect))
(define (vector-normalize a)
  (define m (vector-mag a))
  (if (zero? m)
      a
      (vector/ a m)))
```</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T12:06:43.000387</ts>
    <user>Tana</user>
    <text>in this case `vector-mag` is returning the result of `sqrt` which is a `Number` and that is getting passed to `vector/` down in the bottom of `vector-normalize` which wants a `Real`</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T12:10:14.000129</ts>
    <user>Latarsha</user>
    <text>&lt;@Tana&gt; 
```
#lang typed/racket

(struct vect ([x : Real] [y : Real]))

; Get magnitude of vector (length)
(: vector-mag (-&amp;gt; vect Real))
(define (vector-mag a)
  (sqrt (+ (sqr (vect-x a)) (sqr (vect-y a)))))
```</text>
  </message>
  <message conversation_id="305">
    <ts>2017-10-04T12:10:51.000504</ts>
    <user>Latarsha</user>
    <text>&lt;@Ezequiel&gt; Racket GUI library? Sound library? Or some other kind of library?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T12:15:09.000212</ts>
    <user>Tana</user>
    <text>&lt;@Latarsha&gt; just so I understand, I need to use `sqr` because `expt` can return types other than `Number` or an exception or something?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T12:21:58.000620</ts>
    <user>Latarsha</user>
    <text>&lt;@Tana&gt; the issue is that `(expt i 3)` is not a `Real`, but `(expt i 2)` is, and Typed Racket isn't currently smart enough to tell the difference</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T12:22:08.000680</ts>
    <user>Latarsha</user>
    <text>but `sqr` always produces a `Real`</text>
  </message>
  <message conversation_id="306">
    <ts>2017-10-04T12:55:22.000173</ts>
    <user>Krysta</user>
    <text>Hello!  I'm trying to script GDB with racket as a subprocess.  However, I'm having trouble reading/writing to the subprocess.  I thought it was a buffering issue.  Here is a small reproduction of my issue:
```
#lang racket
(define GDB-PROMPT #"(gdb) \n")
(define NEWLINE 10)

(define-values (proc o i e) (subprocess #f #f #f "/usr/bin/gdb" "--interpreter=mi2"))

(file-stream-buffer-mode o 'none)
(file-stream-buffer-mode i 'none)
(file-stream-buffer-mode e 'none)

; read menu (10 lines long)
(read-bytes-line o)
(read-bytes-line o)
(read-bytes-line o)
(read-bytes-line o)
(read-bytes-line o)
(read-bytes-line o)
(read-bytes-line o)
(read-bytes-line o)
(read-bytes-line o)
(read-bytes-line o)

; read (gdb) \n
(read-bytes-line o)

(write-bytes #"-file-exec-and-symbols a.out\n" i)
(flush-output i)

(read-bytes-line o) ;
(read-bytes-line o) ; read done

(write-bytes #"-break-insert *main\n")
(flush-output i)

(sleep 1)
(read-byte o)
```
The final line blocks forever.  Could some one please suggest how I should go about reading/writing to a subprocess when I don't know exactly when it will respond?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:00:14.000147</ts>
    <user>Ezequiel</user>
    <text>&lt;@Latarsha&gt; there is RSound but it already isn't working on my computer and I want to distribute this to about 20 computers</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:01:47.000152</ts>
    <user>Ezequiel</user>
    <text>&lt;@Latarsha&gt; RSound uses portaudio "This package includes the portaudio dynamic libraries for Windows and Mac, where I believe that users will have trouble compiling and installing such a package"</text>
  </message>
  <message conversation_id="306">
    <ts>2017-10-04T13:03:43.000036</ts>
    <user>Vincenzo</user>
    <text>&lt;@Krysta&gt; It looks like you're missing `i` as the output port for the last `write-bytes`</text>
  </message>
  <message conversation_id="306">
    <ts>2017-10-04T13:05:23.000291</ts>
    <user>Krysta</user>
    <text>@mflatt you're right!  I should have known better.  I've made that mistake several times already :wink:  thank you</text>
  </message>
  <message conversation_id="306">
    <ts>2017-10-04T13:06:33.000519</ts>
    <user>Kimbery</user>
    <text>&lt;@Krysta&gt; if you wrap everything with `(parameterize ([current-output-port i]) ....)`, then you won’t have to specify the port, and you won’t be able to make the mistake :)</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:11:26.000204</ts>
    <user>Rosalee</user>
    <text>&lt;@Ezequiel&gt; What systems do you want to distribute it on?</text>
  </message>
  <message conversation_id="306">
    <ts>2017-10-04T13:11:38.000547</ts>
    <user>Rosalee</user>
    <text>(most linux systems have portaudio in their repos)</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:11:59.000447</ts>
    <user>Ezequiel</user>
    <text>&lt;@Rosalee&gt; Sadly Windows 7 and Windows 8 :disappointed:</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:12:25.000248</ts>
    <user>Rosalee</user>
    <text>&lt;@Ezequiel&gt; Oh, interesting.</text>
  </message>
  <message conversation_id="306">
    <ts>2017-10-04T13:12:42.000697</ts>
    <user>Rosalee</user>
    <text>I know some windows systems require you to init the package</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:13:10.000369</ts>
    <user>Rosalee</user>
    <text>Did you call `pa-maybe-initialize`?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:13:15.000493</ts>
    <user>Rosalee</user>
    <text>&lt;http://docs.racket-lang.org/portaudio/index.html?q=portaudio&gt;</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:14:04.000419</ts>
    <user>Rosalee</user>
    <text>Actually, better idea, can we take a step back…you want to make a volume meeter, may I ask what you want it for?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:20:15.000123</ts>
    <user>Latarsha</user>
    <text>&lt;@Ezequiel&gt; maybe ask about the RSound problems on the mailing list</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:21:16.000239</ts>
    <user>Ezequiel</user>
    <text>&lt;@Latarsha&gt; I'm checking on my OpenSUSE machine right now. I am thinking it is a Windows portaudio issue.  Doesn't look like there are other options besides portaudio currently</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:24:44.000390</ts>
    <user>Rosalee</user>
    <text>&lt;@Ezequiel&gt; More or less…depend on your application. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:26:24.000074</ts>
    <user>Ezequiel</user>
    <text>&lt;@Rosalee&gt; I teach LITTLE kids that wear headphones. I need to know if the computer is playing audio to them and if it is the kids need to know not to touch the screen yet.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:29:06.000357</ts>
    <user>Rosalee</user>
    <text>Ah, okay.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:29:42.000107</ts>
    <user>Rosalee</user>
    <text>So in that case you aren’t generating any sound, so much as you want to see the sound that the system is generating, coorect?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T13:31:20.000235</ts>
    <user>Krysta</user>
    <text>OK that was a bug in my reproduction of my real bug.  My real problem is that I cannot read from the gdb subprocess after I send any of the `exec-*` commands.  For example: &lt;https://gist.github.com/scottcarr/e9605a0b4c058f4e853b0ac11f1a3abe&gt;  Is it because gdb's `exec-*` commands fork or something like that?</text>
  </message>
  <message conversation_id="307">
    <ts>2017-10-04T14:25:07.000149</ts>
    <user>Nelson</user>
    <text>scribble PDF question: is there an easy way to print landscape &amp;amp; large fonts?</text>
  </message>
  <message conversation_id="307">
    <ts>2017-10-04T14:25:34.000342</ts>
    <user>Nelson</user>
    <text>(forwarded from `blerner`, the idea is to make an "accessible" version of a class handout)</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:17:13.000366</ts>
    <user>Ezequiel</user>
    <text>&lt;@Rosalee&gt; Yes I just want to know that sound is being played and then have some events triggered</text>
  </message>
  <message conversation_id="307">
    <ts>2017-10-04T16:17:53.000475</ts>
    <user>Ezequiel</user>
    <text>&lt;@Nelson&gt; have you tried quad for PDF?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:20:48.000072</ts>
    <user>Rosalee</user>
    <text>&lt;@Ezequiel&gt; Ah, okay. Hmmph. I’m not even sure if portaudio can handle that. As it’s just a library to produce sound, not monitor it.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:21:06.000270</ts>
    <user>Rosalee</user>
    <text>And this will probably be platform dependent.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:21:13.000168</ts>
    <user>Rosalee</user>
    <text>Windows 7 and 8 you say?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:21:43.000142</ts>
    <user>Ezequiel</user>
    <text>yes :disappointed:</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:21:49.000487</ts>
    <user>Nelson</user>
    <text>no</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:22:21.000578</ts>
    <user>Rosalee</user>
    <text>Okay….hmm…next question, is the sound coming out of a standard 3.5mm jack?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:23:06.000061</ts>
    <user>Ezequiel</user>
    <text>It is coming out of Either USB or 3.5mm</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:30:31.000240</ts>
    <user>Ezequiel</user>
    <text>seems like I need to have access to the Windows Mixer. I see how to access it in C , but my C skills are decades old</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:31:31.000200</ts>
    <user>Rosalee</user>
    <text>&lt;@Ezequiel&gt; Oh bleh, ya, that makes things harder.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:31:37.000562</ts>
    <user>Rosalee</user>
    <text>Can you link to the API?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:31:47.000087</ts>
    <user>Rosalee</user>
    <text>(Racket has a really good FFI)</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:33:39.000227</ts>
    <user>Rosalee</user>
    <text>Ah, it’s a c++ api, not c…that’s harder. :disappointed:</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:33:47.000357</ts>
    <user>Rosalee</user>
    <text>Investigating…</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:34:08.000366</ts>
    <user>Ezequiel</user>
    <text>&lt;@Rosalee&gt; Well this will be my new pet project for a little bit to try and get the API to sound mixer. I'm always thinking of fringe cases.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:34:43.000047</ts>
    <user>Rosalee</user>
    <text>lol, fair.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:34:55.000652</ts>
    <user>Rosalee</user>
    <text>Sadly C++ and FFIs don’t mix very well. :disappointed:</text>
  </message>
  <message conversation_id="308">
    <ts>2017-10-04T16:36:36.000064</ts>
    <user>Tennille</user>
    <text>hi racketeers, thanks in advance for looking.
I am trying to use the *rackdis* package to connect to a remote redis server. All of the examples I’ve found use the following to initiate a connection: 
&amp;gt;(define redis (new redis%))
&amp;gt;(send redis init)
I’m unsure about the syntax for adding the ip address and port of the remote server. In the docs the definition of *redis%* starts like this:
&amp;gt;(define redis%
&amp;gt;  (class
&amp;gt;      object%
&amp;gt;    (init-field [ip “127.0.0.1”] [port 6379] [timeout 1])
&amp;gt;    (field [out null] [in null])
&amp;gt;    (super-new)

and it ends like this:
&amp;gt;(define/public (init)
&amp;gt;      (define-values (i o) (tcp-connect ip port))
&amp;gt;      (set! in i)
&amp;gt;      (set! out o))))
I’m pretty new to Racket and can’t quite figure out how to set the IP and Port. There is “public” setter for timeout but not one for IP and Port</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:38:25.000144</ts>
    <user>Rosalee</user>
    <text>&lt;@Ezequiel&gt; Can you send me a copy of `mmsystem.h`?</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:38:34.000024</ts>
    <user>Rosalee</user>
    <text>It looks like this is the file that contains all of the smarts.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:38:40.000474</ts>
    <user>Rosalee</user>
    <text>But I don’t have immediate access to a windows pc.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:40:34.000448</ts>
    <user>Kimbery</user>
    <text>&lt;@Tennille&gt; try `(new redis% [ip "1.2.3.4"] [port 1234])`</text>
  </message>
  <message conversation_id="308">
    <ts>2017-10-04T16:44:55.000258</ts>
    <user>Tennille</user>
    <text>thank you &lt;@Kimbery&gt; I appreciate the help again (you’ve helped before!). I guess I should have tried that looking at the definition. What am I looking at there in the definition? *redis%* is defined as a class I guess? But I just don’t see where in the definition it shows that there is a short circuit to stuff my args into the *init-field* fn</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:45:03.000447</ts>
    <user>Tennille</user>
    <text>that worked, btw</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:45:50.000062</ts>
    <user>Kimbery</user>
    <text>that’s just how the racket class system works, so `init-field` is just a part of class syntax. you might want to read the section of the racket documentation on `racket/class`.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:46:15.000581</ts>
    <user>Kimbery</user>
    <text>this is probably a good place to start &lt;http://docs.racket-lang.org/guide/classes.html&gt;</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:46:34.000189</ts>
    <user>Tennille</user>
    <text>&lt;@Kimbery&gt; mostly joking but I was hoping by using racket I wouldn’t have to think about classes</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:46:38.000404</ts>
    <user>Kimbery</user>
    <text>(I find the section of the reference on classes a little uncharacteristically difficult to read)</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:47:02.000293</ts>
    <user>Kimbery</user>
    <text>&lt;@Tennille&gt; me, too. I don’t use `racket/class`. but the author of the redis package did, so you probably have to think about them if you want to use that package. :)</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:47:44.000067</ts>
    <user>Tennille</user>
    <text>thank you though. if `init-field` is part of the class syntax that makes perfect sense. I had not come across it before</text>
  </message>
  <message conversation_id="308">
    <ts>2017-10-04T16:47:50.000336</ts>
    <user>Tennille</user>
    <text>&lt;@Kimbery&gt; thanks again!</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:48:51.000178</ts>
    <user>Kimbery</user>
    <text>&lt;@Tennille&gt; if you search for identifiers in the docs, they’ll usually link to something useful &lt;http://docs.racket-lang.org/search/index.html?q=init-field&gt;</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:49:28.000098</ts>
    <user>Kimbery</user>
    <text>but… the `racket/class` reference is laid out in a bit of an odd way, so a lot of the docs for the various class-related forms are in other places. :/</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:49:36.000322</ts>
    <user>Kimbery</user>
    <text>and it doesn’t have enough examples.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:50:30.000257</ts>
    <user>Tennille</user>
    <text>slightly more examples than `rackdis` does though:
&lt;https://docs.racket-lang.org/rackdis/index.html&gt;</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:52:24.000388</ts>
    <user>Kimbery</user>
    <text>yes, rackdis looks like it needs a little love.</text>
  </message>
  <message conversation_id="303">
    <ts>2017-10-04T16:56:23.000227</ts>
    <user>Tennille</user>
    <text>apologies for the sarcasm. I actually really appreciate anyone who’s created a module/package and gone out of their way to get it published in a repo. we’re lucky to have anything at all</text>
  </message>
  <message conversation_id="309">
    <ts>2017-10-04T17:59:39.000338</ts>
    <user>Nelson</user>
    <text>update from `blerner` he's happy after: (1) using a TeX style to enter landscape mode for the document, and (2) putting `\fontsize{28pt}{40pt}\selectfont` at the top of the document</text>
  </message>
  <message conversation_id="309">
    <ts>2017-10-04T18:00:32.000332</ts>
    <user>Nelson</user>
    <text>&lt;@Rosalee&gt; any thoughts on turning a scribbled PDF into a "very large print" version? If not I'll turn this into a stackoverflow Q/A</text>
  </message>
  <message conversation_id="309">
    <ts>2017-10-04T18:01:47.000382</ts>
    <user>Rosalee</user>
    <text>Probably should be a so question. My main thought is you’ll want to replace the style file…</text>
  </message>
  <message conversation_id="310">
    <ts>2017-10-04T18:49:52.000221</ts>
    <user>Tennille</user>
    <text>hi, last question for the day. I’m getting a list back from redis, which is good. it looks like it’s a list of strings but string functions reject them. They members the list have a ‘#’ in front of them. For example:
&amp;gt;#“do I not look like a string”
I think this has something to do with the contract but can’t figure out how to massage it into a string</text>
  </message>
  <message conversation_id="310">
    <ts>2017-10-04T18:50:23.000229</ts>
    <user>Marlin</user>
    <text>those are bytestrings</text>
  </message>
  <message conversation_id="310">
    <ts>2017-10-04T18:51:03.000132</ts>
    <user>Delmy</user>
    <text>you want `bytes-&amp;gt;string/utf-8` to turn them into strings</text>
  </message>
  <message conversation_id="310">
    <ts>2017-10-04T18:51:23.000273</ts>
    <user>Tennille</user>
    <text>gotcha. found that fn</text>
  </message>
  <message conversation_id="310">
    <ts>2017-10-04T18:52:06.000148</ts>
    <user>Tennille</user>
    <text>is there an fn that I could have used to determine what type I had? something that would have returned ‘bytestring’?</text>
  </message>
  <message conversation_id="310">
    <ts>2017-10-04T18:54:51.000383</ts>
    <user>Marlin</user>
    <text>um, in a typed-racket repl, you could enter `#"dfsdgvsd"`, and you'll see the type</text>
  </message>
  <message conversation_id="310">
    <ts>2017-10-04T18:54:56.000185</ts>
    <user>Marlin</user>
    <text>so that's kinda a way</text>
  </message>
  <message conversation_id="310">
    <ts>2017-10-04T18:55:22.000227</ts>
    <user>Tennille</user>
    <text>ah ok</text>
  </message>
  <message conversation_id="310">
    <ts>2017-10-04T18:56:35.000358</ts>
    <user>Tennille</user>
    <text>&amp;gt;&amp;gt; #“haha”
&amp;gt;- : Bytes
&amp;gt;#“haha”</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:42:27.000222</ts>
    <user>David</user>
    <text>Is there an easy way to background a shelled out process in Racket? Currently, I’m using `system`, but adding a `&amp;amp;` to the end of the command does not behave the same as in Bash, Racket still blocks, waiting for completion.</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:44:43.000026</ts>
    <user>Clorinda</user>
    <text>`subprocess`?</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:47:47.000080</ts>
    <user>David</user>
    <text>Hmmm, I was hoping you wouldn’t say that :stuck_out_tongue:
I’m trying to avoid having to close ports and so forth.</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:48:22.000343</ts>
    <user>Clorinda</user>
    <text>there may be a better option -- I've just used subprocess before and it worked well</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:50:45.000504</ts>
    <user>Clorinda</user>
    <text>(I may have used `process` -- can't remember...)</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:51:37.000304</ts>
    <user>David</user>
    <text>My use case is I have a bunch of commands to run in a loop, and they’re all independent. Moreover, I don’t care about the outputs, I’m running them for their side-effects (creating files on the disk). I wrote a `for` loop which calls `system`, and it worked fine, but it was a waste of time waiting the things to go serially. Then I wrapped the thing in `(thread (λ () ___))`. It works, but I was looking for a more principled solution.</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:52:20.000081</ts>
    <user>David</user>
    <text>Of course, `subprocess` would work just as well, but then I’d have to juggle the many ports I don’t care about.</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:52:52.000403</ts>
    <user>David</user>
    <text>Ideally, there’d be a `for/parallel`, which uses a thread pool and all.</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:53:19.000355</ts>
    <user>David</user>
    <text>But I couldn’t find such a thing in the stdlib.</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:53:54.000362</ts>
    <user>Clorinda</user>
    <text>would a `for/thread` be a sensible for-form?</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:54:55.000119</ts>
    <user>Clorinda</user>
    <text>it would have to dome something (maybe throw away...) the thread descriptors... that seems... not ideal</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T09:58:33.000504</ts>
    <user>David</user>
    <text>I’m running this in DrRacket, so even throwing away the thread descriptors works, because the main thread sticks around anyway. But, to make `for/thread` (or `for/parallel`, as I called it) also work on the command-line, it’d `map thread-wait` on thread descriptors. The whole `for` form would block. While I’m here wishing things would exist, `for/parallel` would have a thread pool to avoid starvation.</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T10:01:35.000252</ts>
    <user>Clorinda</user>
    <text>would `for/thread` want to use `exit-handler` to update what should happen on exit, then? (I have no idea if that's a sensible suggestion, BTW -- we're way beyond my area of experience at this point, lol)</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T10:03:58.000053</ts>
    <user>David</user>
    <text>I guess the whole `for/thread` form could avoid blocking if it used `exit-handler`. But I wasn’t even this ambitious. I’d be happy if the `for` form itself blocked, but iterations ran in parallel.</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T10:07:25.000131</ts>
    <user>David</user>
    <text>In fact, I’d say blocking the whole form would be even more useful. Because then I’d be easy to construct parallel pipelines with the necessary contention points. For example, if I have a directory full of PDFs I want to process,¹ I can sequence a bunch of `for/parallel` and it’d never try to process a file before it’s ready.

¹ Oh, look at that! A directory full of PDFs is exactly what I have here :slightly_smiling_face:</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T13:45:19.000133</ts>
    <user>Chantelle</user>
    <text>&lt;@David&gt; a thread pool probably wouldn't do what you think it does most of the time</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T13:48:38.000297</ts>
    <user>Kimbery</user>
    <text>If you want, you can create a new custodian and use it when creating your processes, then call `custodian-shutdown-all` to close any dangling ports all at once.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T13:49:16.000729</ts>
    <user>Kimbery</user>
    <text>But, as &lt;@Chantelle&gt; says, I don’t think a thread pool makes sense in Racket (since Racket threads are green threads that all run on the same OS thread).</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T13:53:29.000447</ts>
    <user>Chantelle</user>
    <text>Also the Racket process isn't the one doing the work in this case. Racket has no idea how many OS threads or how much memory the bash subprocesses are using and logically it shouldn't, so there isn't really a sensible way for Racket to properly manage the resources consumed by those subprocesses.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T13:54:08.000369</ts>
    <user>Chantelle</user>
    <text>Racket's the client, not the server. Client load control is usually done via throttling / rate limiting.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T13:54:48.000024</ts>
    <user>Chantelle</user>
    <text>so instead of "run these tasks on X threads", think of it as "make no more than X requests per second"</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T13:57:24.000275</ts>
    <user>Kimbery</user>
    <text>Right… which is why, if you truly want to run a bunch of subprocesses in parallel, Racket’s threads are good enough. They’ll create a bunch of subprocesses concurrently, and the subprocesses will actually run in parallel (being, well, separate processes).</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T13:59:05.000273</ts>
    <user>Kimbery</user>
    <text>You could just do `(apply sync (for/list ([i (in-range 10)]) (thread (lambda () (system "blah")))))` to run a bunch of `blah` commands in parallel and wait for them all to finish.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T13:59:29.000142</ts>
    <user>Chantelle</user>
    <text>a throttling package would be a useful thing to have</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T13:59:45.000479</ts>
    <user>Kimbery</user>
    <text>Err… no, `(apply sync ....)` isn’t right, since that would wait for any _one_ to finish. You would want `(for-each sync ....)`.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:00:24.000160</ts>
    <user>Kimbery</user>
    <text>You could implement throttling pretty trivially with a single semaphore.</text>
  </message>
  <message conversation_id="311">
    <ts>2017-10-05T14:00:25.000035</ts>
    <user>Chantelle</user>
    <text>hey lexi didn't you write a `for/async` macro and stick it in some package?</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:00:31.000141</ts>
    <user>Kimbery</user>
    <text>no</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:00:47.000062</ts>
    <user>Chantelle</user>
    <text>must be thinking of something else then</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:01:24.000477</ts>
    <user>David</user>
    <text>I’m probably misunderstanding something about thread pools. My idea was that if I had to run 1000 processes, I might not want to run them all simultaneously, but only have, say, 100 active at a time. How would this go wrong?

How is `(for-each sync ___)` different than `(map thread-wait ___)`?</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:01:55.000588</ts>
    <user>Kimbery</user>
    <text>&lt;@David&gt; It isn’t really, except that `for-each` discards the results.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:02:04.000065</ts>
    <user>Chantelle</user>
    <text>&lt;@David&gt; because each process could spawn any number of its own threads</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:02:18.000359</ts>
    <user>Chantelle</user>
    <text>you don't want to only have 100 processes active at one time, you want 100 OS threads active at one time</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:02:46.000116</ts>
    <user>Chantelle</user>
    <text>so limiting the processes may indirectly work, or it might not</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:02:55.000458</ts>
    <user>Kimbery</user>
    <text>If you wanted to throttle to `n` things running at a time, you could just create a semaphore with `(make-semaphore n)` and wrap each `system` call with `call-with-semaphore`.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:06:04.000060</ts>
    <user>Kimbery</user>
    <text>```
(let ([s (make-semaphore 5)])
  (for-each thread-wait
            (for/list ([i (in-range 10)])
              (thread (thunk (call-with-semaphore
                              s (thunk (system (~a "sleep 1 &amp;amp;&amp;amp; echo " i)))))))))
```</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:06:48.000238</ts>
    <user>David</user>
    <text>Oh, right. I had `(void (map ___))`. That was naïve :stuck_out_tongue:

In any case, `sync` is equivalent to `thread-wait` in my use case, as I understand from reading the documentation. Is this right?</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:06:55.000452</ts>
    <user>Chantelle</user>
    <text>yes, that's right</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:07:03.000064</ts>
    <user>Kimbery</user>
    <text>Yes, IIRC `sync` and `thread-wait` do the same thing on threads.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:07:08.000601</ts>
    <user>David</user>
    <text>:+1: Thanks.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:08:28.000107</ts>
    <user>David</user>
    <text>I’m learning so much from this conversation. I just read about `thunk`, it’s great!</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:10:01.000267</ts>
    <user>David</user>
    <text>Alexis, you nailed it! That’s the implementation for the feature I wanted to find in the stdlib.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:10:45.000116</ts>
    <user>Kimbery</user>
    <text>Personally, I think it’s small enough and easy enough to build out of existing, composable pieces that there doesn’t need to be a separate abstraction for it. But YMMV.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:10:49.000320</ts>
    <user>David</user>
    <text>I understand &lt;@Chantelle&gt;’s point about OS threads, but, in my use case, it doesn’t matter.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:11:00.000321</ts>
    <user>Chantelle</user>
    <text>in the stdlib I'd want something where doing each for loop iteration concurrently and throttling are separate concerns</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:11:33.000482</ts>
    <user>Kimbery</user>
    <text>Isn’t that what the semaphore and the use of `thread` are? Separate concerns?</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:11:43.000644</ts>
    <user>Chantelle</user>
    <text>ugh `for/async` in `racket/future` is not well named :/</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:11:47.000266</ts>
    <user>Chantelle</user>
    <text>no I mean</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:12:01.000290</ts>
    <user>Chantelle</user>
    <text>there's more ways to throttle than just "x concurrent tasks"</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:12:04.000393</ts>
    <user>David</user>
    <text>How about a `for/parallel`, with optional `#:pool-size` argument?</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:12:47.000580</ts>
    <user>Chantelle</user>
    <text>`for/thread` / `for/future` / `for/place` would be the names I'd want</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:13:07.000302</ts>
    <user>Kimbery</user>
    <text>&lt;@David&gt; The thing here is that you aren’t making a pool of workers and distributing work over them. That isn’t really what you want from Racket’s threading model. Threads are cheap; feel free to make a million of them. Rather, you want to limit the number of processes you actually spawn at a time.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:13:35.000017</ts>
    <user>Kimbery</user>
    <text>A “thread pool” generally means you have a pool of workers, which isn’t the case here.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:13:47.000375</ts>
    <user>Chantelle</user>
    <text>yes, I wouldn't want any for forms to have any knowledge of pooling tasks or other kinds of resource control</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:13:53.000513</ts>
    <user>Chantelle</user>
    <text>there's too many different ways to do it</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:14:20.000013</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt;, you’re great, but I remain unconvinced that you do not overengineer these things. :)</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:14:40.000407</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; maybe I'm just planning for a different future :p</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:15:29.000131</ts>
    <user>Chantelle</user>
    <text>I'm very much thinking with web servers in mind right now</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:15:41.000106</ts>
    <user>Clorinda</user>
    <text>from left field: would it be `for/threads` (i.e. plural)?</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:16:00.000631</ts>
    <user>Clorinda</user>
    <text>XD</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:16:07.000124</ts>
    <user>Chantelle</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:16:15.000408</ts>
    <user>David</user>
    <text>My intent is: (1) given `(for ___ (system ___))`, I can make this run faster just by replacing `for` with `for/&amp;lt;your-favorite-name-here&amp;gt;`; and (2) this doesn’t freeze my DrRacket because it tried to spawn a thousand subprocesses. If threads are cheap, then something else is making DrRacket hang. Do you know what it could be?</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:16:38.000436</ts>
    <user>Kimbery</user>
    <text>I guess a `for/thread(s)` could be useful, but it really would just be a tiny abbreviation for wrapping the body of a use of `for/list` in `(thread (thunk ....))`…</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:17:06.000659</ts>
    <user>Chantelle</user>
    <text>arguably, there's a lot of tiny abbreviations in the `for/*` forms</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:17:28.000267</ts>
    <user>Kimbery</user>
    <text>Everything is just `for/fold` at the end of the day. :)</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:17:41.000306</ts>
    <user>Kimbery</user>
    <text>(…which in turn is just named `let`, which is just recursion…)</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:17:44.000171</ts>
    <user>Chantelle</user>
    <text>a fold a day keeps the object oriented programmers away</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:17:47.000083</ts>
    <user>Nelson</user>
    <text>please don't call if `for/threads` ... call it ~`parallel-for`~ (edit: maybe `thread-comprehension` ?) at least, or make a `map-reduce` package</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:17:58.000224</ts>
    <user>David</user>
    <text>Moreover, consider the case (1) above. I don’t want to think about threads or thunks, I just want my typesetting tasks to go faster :slightly_smiling_face:</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:17:58.000475</ts>
    <user>Chantelle</user>
    <text>it's not parallel though</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:18:01.000339</ts>
    <user>Kimbery</user>
    <text>&lt;@Nelson&gt; but it isn’t parallel</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:18:16.000351</ts>
    <user>Nelson</user>
    <text>`async-for`?</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:18:20.000475</ts>
    <user>Clorinda</user>
    <text>what's wrong with for/threads</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:18:29.000495</ts>
    <user>Clorinda</user>
    <text>out of curiosity</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:18:36.000677</ts>
    <user>Chantelle</user>
    <text>&lt;@David&gt; you _have_ to think about threads and the difference between IO and CPU tasks to do this without getting weird unexpected results though</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:19:36.000726</ts>
    <user>Nelson</user>
    <text>because `for/X` means `X` is the accumulator; with `for/threads` the threads aren't really the accumulator</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:19:40.000542</ts>
    <user>David</user>
    <text>Hmm, this is similar in spirit to `&amp;amp;` in Bash. And I don’t think about IO or CPU when using that.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:19:56.000382</ts>
    <user>Kimbery</user>
    <text>&lt;@David&gt; I think Racket’s threading model is relatively simple compared to most languages, and I think it’s worth learning. So much of the benefits of FP are building big things out of small, composable things. I think big abstractions (looking at you, `LOOP`) are usually only desirable when either incredibly common or too hard to build out of smaller pieces.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:20:11.000254</ts>
    <user>Kimbery</user>
    <text>`&amp;amp;` in bash is basically `thread` in Racket.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:20:17.000254</ts>
    <user>Chantelle</user>
    <text>&lt;@David&gt; in Bash nearly all tasks ever are IO tasks, so bash can provide a simpler model of parallelism without breaking too many unstated assumptions</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:20:33.000471</ts>
    <user>Chantelle</user>
    <text>a general-purpose form for Racket would not have that luxury</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:20:44.000016</ts>
    <user>Clorinda</user>
    <text>&lt;@Nelson&gt; that is not strictly the case (regarding accumulators)</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:21:02.000051</ts>
    <user>Kimbery</user>
    <text>&lt;@Nelson&gt; I wish that were the case, too, but that’s already sort of been broken in the stdlib.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:21:06.000752</ts>
    <user>Clorinda</user>
    <text>there are lots in the standard lib that break that convention</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:21:34.000283</ts>
    <user>Chantelle</user>
    <text>part of the problem is what racket calls threads are green threads, which are completely and entirely different from OS threads, making "thread" a highly overloaded term</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:23:25.000626</ts>
    <user>Kimbery</user>
    <text>I really like Racket’s concurrency model. I wish the parallelism story were better, but I think the concurrency model is pretty easy to understand and work with, more so than most other languages I’ve used.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:24:00.000460</ts>
    <user>Chantelle</user>
    <text>yeah racket concurrency is really pleasant to work with, and I can generally get a feel for how I would do complex things with it</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:24:57.000495</ts>
    <user>David</user>
    <text>Oh, I find my `for → for/&amp;lt;make-this-faster&amp;gt;` argument so good. It’s a shame no one else here is falling for it :stuck_out_tongue:

Of course, your concerns make sense when writing serious programs. But I’m writing a script to typeset my Redex models. This is not rocket science :stuck_out_tongue:</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:25:35.000274</ts>
    <user>Chantelle</user>
    <text>true. I think a `for/&amp;lt;make-this-faster&amp;gt;` form would be really great for something like Rash or one of those other "racket-but-for-shell-script" hashlangs</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:25:51.000422</ts>
    <user>Chantelle</user>
    <text>maybe even it should be the default in that sort of context</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:25:55.000190</ts>
    <user>Kimbery</user>
    <text>&lt;@David&gt; I think I would agree with you if Racket threads ran in parallel, but they don’t. So using threads without understanding what they’re doing would likely be confusing, and making that too accessible might be misleading.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:26:52.000272</ts>
    <user>Kimbery</user>
    <text>Having a parallel-map sort of feature is a great one. But Racket can’t really have that (barring futures, which I am convinced are not currently especially useful outside of extraordinarily specific scenarios).</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:27:05.000423</ts>
    <user>Kimbery</user>
    <text>Of course, Chez changes things.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:28:40.000198</ts>
    <user>Kimbery</user>
    <text>If you had a `for/make-this-faster`, you would get confused people writing `(for/make-this-faster ([i (in-range 100)]) (some-cpu-bound-racket-computation!))` complaining on the mailing list.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:29:00.000451</ts>
    <user>Chantelle</user>
    <text>actually with real threads, _that_ would be faster but IO bound tasks would be slower</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:29:03.000014</ts>
    <user>David</user>
    <text>I don’t understand Racket’s parallel/concurrency models. I don’t even understand why Racket threads don’t run in parallel.¹ But I added the `(for-each thread-wait (for/list (thread (thunk ___)))))` thing and it did make things go faster.² That’s more then I could’ve asked :slightly_smiling_face:

¹ Yes, I’ll read the documentation and learn about this, now that I’m curious.
² At the cost of making DrRacket hang for approximately 10 seconds.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:29:14.000758</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; That’s essentially my point.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:29:32.000164</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; oops I thought you meant in the context of real threads run on chez or something</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:29:58.000191</ts>
    <user>Kimbery</user>
    <text>No, I was talking a theoretical `for/async`-y thing using green threads.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:30:06.000751</ts>
    <user>Chantelle</user>
    <text>gotcha</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:32:01.000001</ts>
    <user>David</user>
    <text>DrRacket should show me a progress bar when working through the `for/make-this-faster` :stuck_out_tongue:</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:32:02.000560</ts>
    <user>Kimbery</user>
    <text>&lt;@David&gt; As for _why_ Racket threads don’t run in parallel, I think a large part of it is that Racket was not designed to be made parallel, and making it parallel turned out to be unreasonably hard. :)</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:32:37.000329</ts>
    <user>Kimbery</user>
    <text>There’s a talk mflatt gave a while back (at Mozilla, IIRC?) about some of the history around trying to make Racket parallel.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:32:44.000061</ts>
    <user>David</user>
    <text>It has some sort of Global Interpreter Lock (GIL)? I remember that from my days of Ruby…</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:33:03.000170</ts>
    <user>Chantelle</user>
    <text>&lt;@David&gt; racket doesn't have a GIL</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:33:12.000435</ts>
    <user>Kimbery</user>
    <text>&lt;https://air.mozilla.org/incremental-parallelization-of-dynamic-languages/&gt;</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:33:42.000518</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; racket might as well have a GIL</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:33:59.000382</ts>
    <user>David</user>
    <text>:+1: I’ll watch this later, thanks.</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:34:11.000323</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; how so?</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:35:05.000118</ts>
    <user>Kimbery</user>
    <text>I’m being a little facetious, but I’m saying Racket’s current runtime is not really able to run in parallel, whether it has an actual GIL or not, so the result from the user’s POV is more or less identical</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:35:46.000194</ts>
    <user>Kimbery</user>
    <text>what I’m really saying is that responding to people who ask “does Racket have a GIL?” with “no” is technically correct, the best kind of correct</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:36:04.000122</ts>
    <user>Kimbery</user>
    <text>but what they’re _really_ asking is “can I run my Racket in parallel?”</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:36:20.000551</ts>
    <user>Kimbery</user>
    <text>and the answer is “not in the way you’re probably hoping for”</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:36:43.000267</ts>
    <user>Chantelle</user>
    <text>I think no parallelism with IO in terms of green threads is a _really_ different model than no parallelism with IO in terms of OS threads, and the latter is why a GIL is so painful - in the former a GIL isn't nearly as big an issue and users won't think of those two cases as the same thing</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:37:28.000102</ts>
    <user>Kimbery</user>
    <text>you can have the latter with a GIL</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:39:35.000593</ts>
    <user>Chantelle</user>
    <text>you have both with and without a GIL - what I mean is that it's only the latter where a GIL is a huge problem for almost all users. In the former, a GIL is a problem much less often to the point where most users, even those doing complex things, wouldn't need to care</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:41:37.000157</ts>
    <user>Chantelle</user>
    <text>hmmm, I think I said that wrong</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:41:41.000355</ts>
    <user>Kimbery</user>
    <text>I’m not sure I understand why the latter is made any more complicated by a GIL</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:42:25.000445</ts>
    <user>Chantelle</user>
    <text>y'know I'm not sure what my point was anymore</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:43:13.000592</ts>
    <user>Kimbery</user>
    <text>alright</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T14:45:08.000577</ts>
    <user>Chantelle</user>
    <text>I think some a scribble book about general concurrency and parallelism concepts and where Racket's model fits in would be a great thing to have in the docs</text>
  </message>
  <message conversation_id="313">
    <ts>2017-10-05T15:24:42.000104</ts>
    <user>Ezequiel</user>
    <text>(require ffi/winapi) (win64? ) What argument is (win64?) wanting? I would figure it was  (= (system-type 'word) 64)</text>
  </message>
  <message conversation_id="313">
    <ts>2017-10-05T15:53:47.000237</ts>
    <user>Marlin</user>
    <text>&lt;@Ezequiel&gt; in the docs, it looks like `win64?` isn't a procedure: &lt;http://docs.racket-lang.org/foreign/winapi.html?q=win64%3F#%28def._%28%28lib._ffi%2Fwinapi..rkt%29._win64~3f%29%29&gt;</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T16:14:10.000202</ts>
    <user>David</user>
    <text>&lt;@Kimbery&gt;, &lt;@Chantelle&gt;: Just got a chance to get back to this. Thanks a lot for the conversation. I certainly learned a lot from you :slightly_smiling_face:</text>
  </message>
  <message conversation_id="312">
    <ts>2017-10-05T16:14:34.000084</ts>
    <user>Chantelle</user>
    <text>:D</text>
  </message>
  <message conversation_id="313">
    <ts>2017-10-05T17:36:29.000474</ts>
    <user>Ezequiel</user>
    <text>&lt;@Marlin&gt; I understand its not a procedure but I don't understand (win64? )'s arguement it is looking for.</text>
  </message>
  <message conversation_id="313">
    <ts>2017-10-05T17:40:23.000255</ts>
    <user>Kimbery</user>
    <text>&lt;@Ezequiel&gt; what &lt;@Marlin&gt; is saying is that `win64?` is not a function, so it does not accept any argument. it is a value. `win64?` is either `#t` or `#f`. I don’t think your question makes very much sense.</text>
  </message>
  <message conversation_id="313">
    <ts>2017-10-05T17:42:20.000368</ts>
    <user>Ezequiel</user>
    <text>&lt;@Kimbery&gt; Well I should say I expected (win64?) to return #t or #f. I am answer from the point of stupid. How are you suppose to use (win64?)</text>
  </message>
  <message conversation_id="313">
    <ts>2017-10-05T17:42:36.000336</ts>
    <user>Kimbery</user>
    <text>don’t put any parentheses around it. just write `win64?`.</text>
  </message>
  <message conversation_id="313">
    <ts>2017-10-05T17:43:02.000213</ts>
    <user>Kimbery</user>
    <text>```
&amp;gt; win64?
#f
```</text>
  </message>
  <message conversation_id="313">
    <ts>2017-10-05T17:43:20.000151</ts>
    <user>Ezequiel</user>
    <text>I was correct I was from the point of stupid :slightly_smiling_face:</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:07:51.000163</ts>
    <user>Ka</user>
    <text>hi folks... maybe especially &lt;@Eun&gt; -- what are the lunch options near the venue on Saturday?</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:09:29.000254</ts>
    <user>Georgeanna</user>
    <text>&lt;@Ka&gt; walk west to University Ave (just called “the ave” if you ask for directions) and take your pick… there is a ton. Probably stuff on campus too, but it won’t be half as good.</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:09:51.000301</ts>
    <user>Georgeanna</user>
    <text>what do you like?</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:12:53.000144</ts>
    <user>Ka</user>
    <text>&lt;@Georgeanna&gt; ah. thanks! I wasn't sure if there was a recommended campus spot, or if people would just self-organize and find something.</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:13:03.000220</ts>
    <user>Ka</user>
    <text>I'm vegan, so just trying to plan ahead.</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:14:18.000092</ts>
    <user>Georgeanna</user>
    <text>there’s many options for you… go north on the ave for explicitly vegan options. Pizza∏ and others nearby…</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:14:23.000240</ts>
    <user>Nelson</user>
    <text>there's at least 2 other vegans attending</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:14:43.000281</ts>
    <user>Ka</user>
    <text>Pizzaπ isn't as good as it used to be.</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:14:55.000155</ts>
    <user>Ka</user>
    <text>and is fairly far from the venue, no?</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:15:25.000269</ts>
    <user>Georgeanna</user>
    <text>it’s a short walk</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:15:49.000328</ts>
    <user>Ka</user>
    <text>maps say 22 minutes from Mary Gates Hall.</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:16:05.000001</ts>
    <user>Ka</user>
    <text>(doable, sure)</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:16:07.000166</ts>
    <user>Georgeanna</user>
    <text>there’s a korean place closer to our venue that I love… don’t know the name, but it’s about 42nd just off the ave</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:16:46.000141</ts>
    <user>Ka</user>
    <text>&lt;@Georgeanna&gt; &lt;@Nelson&gt; thanks for the info. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:17:34.000059</ts>
    <user>Georgeanna</user>
    <text>Araya’s Place is also popular w/ my vegan friends</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:17:37.000088</ts>
    <user>Georgeanna</user>
    <text>and closer</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:17:40.000279</ts>
    <user>Ka</user>
    <text>I guess if I play my cards right, I might even be able to go to Full Tilt for ice cream.</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T19:17:50.000067</ts>
    <user>Ka</user>
    <text>Araya's is good food.</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T20:50:16.000137</ts>
    <user>Eun</user>
    <text>apg: Food will be provided, including vegan options.</text>
  </message>
  <message conversation_id="314">
    <ts>2017-10-05T22:50:05.000047</ts>
    <user>Ka</user>
    <text>Oh! Even better! Thanks, &lt;@Eun&gt; !</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:17:42.000001</ts>
    <user>Kimbery</user>
    <text>Since there doesn't appear to be an organized thing the night before this year, do any Racketeers going to RacketCon want to get dinner this evening?</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:38:09.000435</ts>
    <user>Eun</user>
    <text>&lt;@Tana&gt;: The most general solution would be to wrap the relevant code with `(assert x real?)`. But depending on the specific code, you may be able to naturally get Real as a return type by tightening the arguments to whatever operations you're using.</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:38:42.000406</ts>
    <user>Eun</user>
    <text>&lt;@Kimbery&gt;: Sure! Should be getting in in time for dinner. Currently waiting at O'Hare. :)</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:42:04.000097</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; I think what &lt;@Eun&gt; means to say is that he's hoping the gods smile on him and that he leaves o'hare before tuesday :slightly_smiling_face:</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:42:43.000313</ts>
    <user>Eun</user>
    <text>Well, at least the food's better here than near the office. :P</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:43:32.000287</ts>
    <user>Augustine</user>
    <text>&lt;@Eun&gt; that's not saying very much</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:43:55.000138</ts>
    <user>Eun</user>
    <text>True.</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:53:35.000400</ts>
    <user>Eun</user>
    <text>Eh. I gotta admit that it's pretty convenient to have direct flights everywhere.</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:57:31.000125</ts>
    <user>Kimbery</user>
    <text>&lt;@Eun&gt; &lt;@Latarsha&gt; I'm just as bad; I'm currently waiting in LAX :)</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T13:57:56.000540</ts>
    <user>Latarsha</user>
    <text>probably more comfortably than this exit row</text>
  </message>
  <message conversation_id="315">
    <ts>2017-10-06T14:05:50.000381</ts>
    <user>Kimbery</user>
    <text>at least it's closer to Seattle than to St. Louis</text>
  </message>
  <message conversation_id="316">
    <ts>2017-10-06T15:03:20.000003</ts>
    <user>Chantelle</user>
    <text>Sorry, can't hear you all over the sound of my two hour long flight from SFO :)</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T16:58:08.000009</ts>
    <user>Georgeanna</user>
    <text>I’m having an off day… why does
```
(date-display-format 'iso-8601)
(date-&amp;gt;string (seconds-&amp;gt;date (current-seconds)))
```
not print the time portion? Looking at the code, it seems like it should</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T16:58:55.000410</ts>
    <user>Georgeanna</user>
    <text>I verified that `(seconds-&amp;gt;date (current-seconds))` still has the time portion of the data… but nothing</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T16:59:12.000424</ts>
    <user>Vincenzo</user>
    <text>Pass `#t` as the optional second argument</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T16:59:22.000457</ts>
    <user>Ka</user>
    <text>Am I crazy, or does the `--clock` option to slideshow not work anymore?</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T16:59:36.000194</ts>
    <user>Georgeanna</user>
    <text>derp. told you I was having an off day :slightly_smiling_face:</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:00:16.000526</ts>
    <user>Georgeanna</user>
    <text>I’m trying to follow some of the posts on lisp.sh and they refer to a lot of calls that aren’t part of racket and it is getting tedious… but I want to stick to plain racket for now</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:04:05.000006</ts>
    <user>Georgeanna</user>
    <text>thanks &lt;@Vincenzo&gt;</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:04:39.000285</ts>
    <user>Georgeanna</user>
    <text>&lt;@Kimbery&gt; I’ve got plans tonight. sorry. Lunch maybe?</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:07:03.000386</ts>
    <user>Vincenzo</user>
    <text>&lt;@Ka&gt; I don't know; `--clock` seems to work for me</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:09:23.000254</ts>
    <user>Ka</user>
    <text>&lt;@Vincenzo&gt; I've used it successfully in the past, and I thought it showed up on the preview window, but not happening now.</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:09:51.000336</ts>
    <user>Vincenzo</user>
    <text>It shows up on the main window for me, and not on the preview window</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:10:00.000058</ts>
    <user>Ka</user>
    <text>oh. where in the main window?</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:10:19.000237</ts>
    <user>Vincenzo</user>
    <text>(I didn't remember the `--clock` flag at all, but apparently I added it 4 years ago. And I never use the preview window.)</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:10:23.000212</ts>
    <user>Vincenzo</user>
    <text>In small text at the bottom left</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:10:39.000116</ts>
    <user>Ka</user>
    <text>oooh yes. I see it now. it's an actual "clock"</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:11:11.000117</ts>
    <user>Ka</user>
    <text>maybe I'm simply crazy. I could have sworn I've used a sort of timer on the preview window.</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:11:15.000314</ts>
    <user>Ka</user>
    <text>it was red.</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:11:28.000007</ts>
    <user>Ka</user>
    <text>but, likely I'm misremembering.</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:12:34.000225</ts>
    <user>Ka</user>
    <text>(*maybe* I used google present, and then thought I should add a timer to the preview window. That's probably the most likely scenario...)</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:12:48.000289</ts>
    <user>Ka</user>
    <text>anyway. thanks for sanity checking me &lt;@Vincenzo&gt;!</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:30:22.000235</ts>
    <user>Georgeanna</user>
    <text>doco says that the default log level is `'error` but I’m getting back `'(#f #f)` from `(log-all-levels (current-logger))`</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T17:30:59.000077</ts>
    <user>Georgeanna</user>
    <text>oh… this may be a racket-mode-ism… plain repl in terminal says `'error`</text>
  </message>
  <message conversation_id="318">
    <ts>2017-10-06T17:34:08.000348</ts>
    <user>Georgeanna</user>
    <text>not that I can figure out why… seems like it should work</text>
  </message>
  <message conversation_id="319">
    <ts>2017-10-06T19:39:26.000044</ts>
    <user>Kimbery</user>
    <text>so… I never ate lunch today, so if anyone else is in Seattle and interested, I would be very interested in getting some food :)</text>
  </message>
  <message conversation_id="319">
    <ts>2017-10-06T19:39:47.000015</ts>
    <user>Kimbery</user>
    <text>&lt;@Eun&gt; &lt;@Latarsha&gt; &lt;@Chantelle&gt; ^ ?</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:41:22.000014</ts>
    <user>Corey</user>
    <text>&lt;@Georgeanna&gt; doc: &lt;https://github.com/greghendershott/racket-mode/blob/master/Reference.md#racket-logger-config&gt;</text>
  </message>
  <message conversation_id="319">
    <ts>2017-10-06T19:41:40.000150</ts>
    <user>Corey</user>
    <text>src: &lt;https://github.com/greghendershott/racket-mode/blob/master/racket-custom.el#L215-L245&gt;</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:42:21.000110</ts>
    <user>Georgeanna</user>
    <text>&lt;@Corey&gt; yeah. even after reducing * from fatal to error I’m still not seeing anything. Not sure why</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:44:01.000014</ts>
    <user>Corey</user>
    <text>Oh in a `*Racket REPL*` buffer? I get:
```
&amp;gt; (log-all-levels (current-logger))
'(fatal
  #f
  debug
  deals
  warning
  http
  debug
  aws
  warning
  cm-accomplice
  info
  GC
  warning
  module-prefetch
  info
  optimizer
  error
  racket/contract
  info
  sequence-specialization)
```</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:44:56.000106</ts>
    <user>Corey</user>
    <text>(I might be misunderstanding the context what you're trying to do, or expecting)</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:45:32.000165</ts>
    <user>Georgeanna</user>
    <text>in my terminal:

```
&amp;gt; (log-all-levels (current-logger))
'(error #f)
```
in racket-mode-repl:
```
bserver.rkt﻿&amp;gt; (log-all-levels (current-logger))
'(#f #f)
```
with: `(* . error)` in the config saved for current session (and I killed the repl after)</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:46:03.000075</ts>
    <user>Georgeanna</user>
    <text>then when I call `(log-error "blah")` I get “blah” output in the terminal and not in racket-mode-repl</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:46:52.000189</ts>
    <user>Corey</user>
    <text>Oh OK. Hmm. I'll take a look, but might not be able to until tmr</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:47:28.000042</ts>
    <user>Georgeanna</user>
    <text>… maybe I can SHOW you tomorrow? Are you going to be here?</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:47:35.000013</ts>
    <user>Corey</user>
    <text>Alas no.</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:47:40.000125</ts>
    <user>Georgeanna</user>
    <text>boo!</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:48:12.000012</ts>
    <user>Georgeanna</user>
    <text>kk. well… hit me up here if you need any more infos. I’ve given up and yanked the error handler from the servlet for now</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:48:43.000172</ts>
    <user>Corey</user>
    <text>Will do.</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:48:53.000192</ts>
    <user>Georgeanna</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T19:49:47.000041</ts>
    <user>Corey</user>
    <text>btw speaking of loggers earlier this week I got stuff set up for a Racket log-receiver to also put things into AWS CloudWatch Logs for a project I'm working on.</text>
  </message>
  <message conversation_id="317">
    <ts>2017-10-06T20:03:09.000166</ts>
    <user>Corey</user>
    <text>&lt;@Georgeanna&gt; I can repro the problem you describe when I `(setq racket-logger-config ((* . error)))` and restart the REPL: Then `(log-all-levels (current-logger))` returns `'(#f #f)` as you report.
Until I figure this out: As a work-around can you try going to the `*Racket Logger*` buffer -- e.g. in a racket-mode buffer hit `C-c C-l` to open it -- then press `l` and choose `*` and type `error`?
IOW set `racket-logger-config` using the "UI".
(That works for me).</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T20:46:37.000046</ts>
    <user>Eun</user>
    <text>lexi.lambda: Just got to the hotel, and definetly interested in dinner in the short term.</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T20:46:49.000102</ts>
    <user>Eun</user>
    <text>@samth, &lt;@Chantelle&gt;: ^</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T20:47:03.000119</ts>
    <user>Kimbery</user>
    <text>&lt;@Eun&gt; shall I meet you in the lobby?</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T20:47:29.000011</ts>
    <user>Eun</user>
    <text>5 minutes?</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T20:47:41.000100</ts>
    <user>Kimbery</user>
    <text>sounds great</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T20:47:52.000021</ts>
    <user>Eun</user>
    <text>(Oh, and FYI, I don't have slack on my phone.)</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T20:48:18.000019</ts>
    <user>Kimbery</user>
    <text>you should get slack on your phone ;)</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T20:48:38.000121</ts>
    <user>Eun</user>
    <text>It's intentional. :)</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T21:20:23.000045</ts>
    <user>Kimbery</user>
    <text>Vincent and I are at Thanh Vi on University Way if anyone is interested in joining us</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T21:26:29.000021</ts>
    <user>Willian</user>
    <text>&lt;@Kimbery&gt; we ( &lt;@Augustine&gt;  &lt;@Patrice&gt; and I) will attempt to join! (Just getting off the train)</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T22:03:29.000088</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; &lt;@Willian&gt; I only just got off the plane so unless your meal lasts three hours I don't think I'll make it :p</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T23:02:32.000035</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; we just got back from dinner; I think the Chicago folks may be turning in, but I’d be down to meet up and chat for a while :)</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T23:03:10.000040</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; I could say hi but I gotta head to bed early tonight</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T23:03:23.000032</ts>
    <user>Kimbery</user>
    <text>oh?</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T23:03:49.000063</ts>
    <user>Chantelle</user>
    <text>ya, didn't get enough sleep and otherwise I'll sleep through the morning and miss my own talk :p</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T23:04:02.000113</ts>
    <user>Kimbery</user>
    <text>hah, that’s a good reason. see ya tomorrow then.</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-06T23:04:18.000075</ts>
    <user>Chantelle</user>
    <text>kk!</text>
  </message>
  <message conversation_id="321">
    <ts>2017-10-07T09:33:48.000019</ts>
    <user>Carson</user>
    <text>&lt;@Eun&gt; when and where can we expect a link to live stream from racketcon?</text>
  </message>
  <message conversation_id="321">
    <ts>2017-10-07T10:12:42.000089</ts>
    <user>Eun</user>
    <text>&lt;@Carson&gt;: I don't know yet. Will keep you posted.</text>
  </message>
  <message conversation_id="320">
    <ts>2017-10-07T11:24:38.000071</ts>
    <user>Vincenzo</user>
    <text>RacketCon wifi: UWNetID: event0531  Password: T3A7-F8U9-M7V6</text>
  </message>
  <message conversation_id="321">
    <ts>2017-10-07T12:21:47.000025</ts>
    <user>Eun</user>
    <text>@all: Streaming is up at: &lt;https://www.youtube.com/watch?v=et0C4ijed04&gt;</text>
  </message>
  <message conversation_id="321">
    <ts>2017-10-07T17:01:02.000021</ts>
    <user>Eun</user>
    <text>&lt;!everyone&gt;: Afternoon stream: &lt;https://www.youtube.com/watch?v=WI8uA4KjQJk&gt;</text>
  </message>
  <message conversation_id="322">
    <ts>2017-10-07T17:01:25.000018</ts>
    <user>Tana</user>
    <text>:+1:</text>
  </message>
  <message conversation_id="322">
    <ts>2017-10-07T18:26:18.000082</ts>
    <user>Helga</user>
    <text>pity I can’t watch most of the livestream… is there an ETA for when the videos will be available?</text>
  </message>
  <message conversation_id="322">
    <ts>2017-10-07T18:40:41.000044</ts>
    <user>Marlin</user>
    <text>volume just cut out</text>
  </message>
  <message conversation_id="322">
    <ts>2017-10-07T18:40:57.000013</ts>
    <user>Marlin</user>
    <text>and it's back</text>
  </message>
  <message conversation_id="321">
    <ts>2017-10-07T21:04:55.000009</ts>
    <user>Marlin</user>
    <text>&lt;@Eun&gt; is tomorrow's town hall going to be streamed?</text>
  </message>
  <message conversation_id="321">
    <ts>2017-10-08T02:26:19.000004</ts>
    <user>Eun</user>
    <text>&lt;@Marlin&gt;: Unfortunately not. Unless some brave soul volunteers to improvise something with their laptop.</text>
  </message>
  <message conversation_id="321">
    <ts>2017-10-08T02:26:24.000034</ts>
    <user>Eun</user>
    <text>@leif, &lt;@Willian&gt;: ^</text>
  </message>
  <message conversation_id="323">
    <ts>2017-10-08T12:07:22.000001</ts>
    <user>Vincenzo</user>
    <text>Owner found already!</text>
  </message>
  <message conversation_id="322">
    <ts>2017-10-08T14:07:05.000045</ts>
    <user>Rosalee</user>
    <text>&lt;@Marlin&gt; sorry, didn't see this in time. :(</text>
  </message>
  <message conversation_id="322">
    <ts>2017-10-08T14:16:05.000019</ts>
    <user>Marlin</user>
    <text>No problem, &lt;@Rosalee&gt; !</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-08T16:47:57.000069</ts>
    <user>Corey</user>
    <text>Is there any news from the town hall discussion?</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-08T16:49:24.000041</ts>
    <user>Lory</user>
    <text>What are the other places where Racket people talk?</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-08T16:50:49.000060</ts>
    <user>Corey</user>
    <text>AFAIK
1. Here on slack
2. `#racket` on freenode
3. Mailing list
4. Matthew's secret lair</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-08T19:41:20.000071</ts>
    <user>Kimbery</user>
    <text>&lt;@Analisa&gt; 
```
watch-exec -p . -- fish -c 'raco setup --check-pkg-deps --doc-index --pkgs hackett-lib hackett-demo hackett-test hackett-doc; and raco test -j 8 -p hackett-lib hackett-demo hackett-test'
```</text>
  </message>
  <message conversation_id="322">
    <ts>2017-10-09T01:00:59.000062</ts>
    <user>Chantelle</user>
    <text>Thanks for an incredible RacketCon everyone :)</text>
  </message>
  <message conversation_id="325">
    <ts>2017-10-09T01:29:12.000058</ts>
    <user>Latarsha</user>
    <text>Indeed! One of my favorites</text>
  </message>
  <message conversation_id="325">
    <ts>2017-10-09T01:29:37.000037</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; and you went and fixed typed rackunit for me too :p</text>
  </message>
  <message conversation_id="326">
    <ts>2017-10-09T01:54:39.000025</ts>
    <user>Analisa</user>
    <text>It made a good first impression for me!</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-09T10:45:19.000779</ts>
    <user>Vincenzo</user>
    <text>&lt;@Corey&gt; For the town-hall meeting, it was status reports and discussion – no decisions. The Racket-on-Chez report was that DrRacket now sort of runs, but it will probably take another year for things to run well. The pkgs report (Jay) was about plans to merge the doc and main-package views. The Typed Racket report (Sam) was improved refinement types. The typesetting report (MB) was that a pure Racket solution to generating PDFs is on the way, such as direct Scribble-to-PDF without Latex. I think I've missed one or two, so I hope others fill in.
After that, we had tutorials on how to contribute, as listed on the schedule. Finally, people broke up into groups and work. I had to leave mid-afternoon to catch my flight, but it looked to me like a lot of good discussion taking place around busy keyboards.</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-09T10:52:02.000733</ts>
    <user>Ka</user>
    <text>Pkgs/docs: does that mean it wouldn’t link out to &lt;http://docs.racket-lang.org|docs.racket-lang.org&gt;? If so, would docs hosting on docs. go away?</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-09T10:52:33.000464</ts>
    <user>Ka</user>
    <text>(I’m sure this was answered, so apologies for even asking)</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-09T10:53:37.000239</ts>
    <user>Latarsha</user>
    <text>&lt;@Ka&gt; The idea is to continue hosting docs, as now, but have the front page of docs and/or pkgs be a general front-end to "finding Racket code" rather than just a documentation page or just a "find a package" page</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-09T10:56:26.000348</ts>
    <user>Latarsha</user>
    <text>Exactly what that page would look like remains to be seen, but it might be something like a cross between the current &lt;http://docs.r-l.org|docs.r-l.org&gt;, the package search bar, and the "most common packages" that you see on the NPM front page</text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-09T11:13:32.000201</ts>
    <user>Ka</user>
    <text>Ohh!! Ok. Thats great! </text>
  </message>
  <message conversation_id="324">
    <ts>2017-10-09T11:13:52.000221</ts>
    <user>Ka</user>
    <text>Thanks for the details &lt;@Latarsha&gt; </text>
  </message>
  <message conversation_id="327">
    <ts>2017-10-09T12:30:20.000156</ts>
    <user>Ka</user>
    <text>the &lt;#C088CK7J6|irc&gt; channel is out of date again.</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:30:30.000490</ts>
    <user>Isabelle</user>
    <text>Hi, is there a racket function or library that's faster at splitting a string into a list of strings than string-split? (I'm processing a 2.5Mb text file, takes 2 seconds to read into a list of lines and takes 19 seconds to map string-split over those lines... it's even worse with my 150+Mb files)</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:31:23.000392</ts>
    <user>Ka</user>
    <text>&lt;@Isabelle&gt; can you do it without reading the full list of lines first?</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:31:59.000056</ts>
    <user>Isabelle</user>
    <text>Each line is independent except order matters</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:32:40.000297</ts>
    <user>Ka</user>
    <text>so, use something like `for/list` with `in-lines`</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:32:55.000363</ts>
    <user>Ka</user>
    <text>and then split-string on the generated line</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:33:08.000212</ts>
    <user>Ka</user>
    <text>you'll at least save the 2 seconds.</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:33:24.000206</ts>
    <user>Ka</user>
    <text>(in-lines will lazily read during iteration instead of all up front)</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:33:37.000099</ts>
    <user>Ka</user>
    <text>the string-split then is the problem.</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:34:14.000293</ts>
    <user>Isabelle</user>
    <text>The 2 seconds is trivial :slightly_smiling_face:</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:34:24.000113</ts>
    <user>Ka</user>
    <text>(but in the 150Mb case, it's longer than 2seconds I'm guessing?)</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:34:34.000263</ts>
    <user>Isabelle</user>
    <text>Yeah but it's still less than 10</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:34:51.000176</ts>
    <user>Ka</user>
    <text>how big are the lines?</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:34:51.000565</ts>
    <user>Isabelle</user>
    <text>Whereas the string splitting is still quite large</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:35:22.000321</ts>
    <user>Isabelle</user>
    <text>They vary but on average 8 words</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:36:00.000187</ts>
    <user>Ka</user>
    <text>are you splitting with regexp? or just a string?</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:36:22.000403</ts>
    <user>Isabelle</user>
    <text>I'm splitting with the default value to string-split</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:37:06.000395</ts>
    <user>Isabelle</user>
    <text>(which matches ' ' but I don't know if that's done with a string or a regexp internall)</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:37:24.000365</ts>
    <user>Marlin</user>
    <text>default is `#px"\\s+"`</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:39:52.000342</ts>
    <user>Marlin</user>
    <text>you can probably get better performance by reading and splitting bytes instead of strings</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:40:22.000030</ts>
    <user>Ka</user>
    <text>&lt;@Isabelle&gt; I'm trying to get a big enough file to test if I suffer the same problem.</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:40:23.000194</ts>
    <user>Ka</user>
    <text>one second</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:41:40.000190</ts>
    <user>Isabelle</user>
    <text>Cool :slightly_smiling_face: Sadly I have to leave the computer but I'll check back</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:42:43.000174</ts>
    <user>Ka</user>
    <text>so, i'm doing a 5M file (the bible from project gutenberg) in 2.235s of real time</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:42:57.000016</ts>
    <user>Ka</user>
    <text>114567 lines of varying sizes</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:43:11.000198</ts>
    <user>Ka</user>
    <text>and that includes the printing of the result.</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:46:16.000310</ts>
    <user>Ka</user>
    <text>(and less than a second if i suppress output)</text>
  </message>
  <message conversation_id="328">
    <ts>2017-10-09T12:47:54.000588</ts>
    <user>Ka</user>
    <text>anyway, &lt;@Isabelle&gt; I don't doubt that you're seeing this, but I'm guessing there's another explanation. Can you run &lt;http://pasterack.org/pastes/55271&gt; this with your file and see what you get?</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T13:09:51.000006</ts>
    <user>Marlin</user>
    <text>oh, I didn't break it up into lines first; not sure exactly what output you're looking for -- a list of lists of strings?</text>
  </message>
  <message conversation_id="330">
    <ts>2017-10-09T13:52:40.000519</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Is the text% editor implemented in Racket or does it use native text boxes (with a lot of Racket code on top)?</text>
  </message>
  <message conversation_id="330">
    <ts>2017-10-09T13:54:42.000193</ts>
    <user>Vincenzo</user>
    <text>The `text%` class along with snips, implements all drawing and manipulation at the level of `draw-text`, `on-char`, and `on-event`.</text>
  </message>
  <message conversation_id="330">
    <ts>2017-10-09T13:54:53.000054</ts>
    <user>Vincenzo</user>
    <text>So, no native text boxes.</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:02:06.000350</ts>
    <user>Isabelle</user>
    <text>&lt;@Marlin&gt; Thanks for the example, sadly it turns out my text input is not utf-8 (was news to me, I thought it was)</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:02:58.000184</ts>
    <user>Marlin</user>
    <text>you can use other encodings</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:03:15.000530</ts>
    <user>Marlin</user>
    <text>there's a `bytes-&amp;gt;string/latin-1`</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:04:00.000445</ts>
    <user>Marlin</user>
    <text>and if you need, say, WINDOWS-1252, you do that with `bytes-open-converter`, etc.</text>
  </message>
  <message conversation_id="330">
    <ts>2017-10-09T14:05:19.000090</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Okay cool, that’s what I thought.</text>
  </message>
  <message conversation_id="330">
    <ts>2017-10-09T14:05:20.000570</ts>
    <user>Rosalee</user>
    <text>thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="330">
    <ts>2017-10-09T14:08:14.000522</ts>
    <user>Isabelle</user>
    <text>Cut it to 6s on my 2.5Mb, still running the 150Mb</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:08:47.000401</ts>
    <user>Ka</user>
    <text>&lt;@Isabelle&gt; could you maybe share the relevant part of your program?</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:08:50.000157</ts>
    <user>Marlin</user>
    <text>&lt;@Isabelle&gt; are you running in DrRacket?</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:09:38.000123</ts>
    <user>Isabelle</user>
    <text>Well the relevant bit of program is now the bit &lt;@Marlin&gt; shared, and yes I'm running in DrRacket as I want to explore the data after I process it</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:10:07.000170</ts>
    <user>Ka</user>
    <text>&lt;@Isabelle&gt; ok.</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:10:10.000048</ts>
    <user>Marlin</user>
    <text>Did you turn off debugging/profiling?</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:10:21.000654</ts>
    <user>Marlin</user>
    <text>Because that imposes a heavy performance penalty.</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:12:02.000033</ts>
    <user>Marlin</user>
    <text>The options are in Language -&amp;gt; Choose Language, and you may need to "show details" if you haven't in the past.</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:14:09.000101</ts>
    <user>Ka</user>
    <text>hmm. maybe this is a hardware thing? &lt;@Isabelle&gt; are you running this on a relatively recent machine? Or running in virtualization or something?</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:14:50.000242</ts>
    <user>Ka</user>
    <text>(even with debugging, &lt;@Marlin&gt;, it still runs &amp;lt; 3 seconds for me)</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:15:04.000331</ts>
    <user>Marlin</user>
    <text>it could also be printing results, which is far more expensive than computing them</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T14:16:14.000439</ts>
    <user>Ka</user>
    <text>true. printing in drracket is extremely slow.</text>
  </message>
  <message conversation_id="331">
    <ts>2017-10-09T15:10:56.000498</ts>
    <user>Chantelle</user>
    <text>knew I'd forget something on the trip to RacketCon this year; I forgot to get a shirt!</text>
  </message>
  <message conversation_id="331">
    <ts>2017-10-09T15:11:18.000471</ts>
    <user>Chantelle</user>
    <text>Oops</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T15:14:30.000203</ts>
    <user>Marlin</user>
    <text>&lt;@Ka&gt; I didn't actually try the dead-simple version first; I had just assumed it was slower. Turns out it's faster.</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T15:22:46.000361</ts>
    <user>Ka</user>
    <text>&lt;@Marlin&gt; yay for doing the simple thing. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T15:25:55.000373</ts>
    <user>Ka</user>
    <text>I will say, one thing that I do happen to like about go is that they have equivalent packages that are very similar for functions to work on strings and []byte. Might be worth copying this if we can provide faster bytes-split for cases where that's needed.</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T16:31:13.000393</ts>
    <user>Isabelle</user>
    <text>&lt;@Marlin&gt; and &lt;@Ka&gt; This is running on a this-year model macbook pro, so hardware shouldn't be much of an issue, and the only thing printing out during this phase is the time measurement (which means it is measuring time as well as working but doesn't print out any of the file contents), but I haven't changed any DrRacket settings other than to beef up the RAM to 4Gb (I'm processing the files one after another, so my memory footprint does get big by the second 150+Mb file) so I'll try that tomorrow. Still 20s -&amp;gt; 6s helps me get to the more interesting exploration faster :slightly_smiling_face: So Thanks a bunch for the help</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T16:32:27.000166</ts>
    <user>Ka</user>
    <text>ooh! It's multiple files in a row?</text>
  </message>
  <message conversation_id="332">
    <ts>2017-10-09T16:32:39.000206</ts>
    <user>Isabelle</user>
    <text>Also printing in DrRacket is very slow and doesn't seem to be interruptible if the processing has finished (I accidentally let the file contents enter the interactions window early on, and it seemed the only action to take to stop it was to force quit DrRacket)</text>
  </message>
  <message conversation_id="332">
    <ts>2017-10-09T16:32:45.000550</ts>
    <user>Isabelle</user>
    <text>Four files in a row, shortest to biggest</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T16:33:16.000115</ts>
    <user>Ka</user>
    <text>ah. ok</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T16:33:21.000263</ts>
    <user>Isabelle</user>
    <text>In that window, in another two files in a row. The initial reading time doesn't seem to lag for multiple files although memory builds up</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T16:42:17.000400</ts>
    <user>Georgeanna</user>
    <text>&lt;@Isabelle&gt; `(time (void (do-the-thing))` can help a lot… but hit Cmd-L, “Show Details” and switch from “Debugging” to “No debugging or profiling”. It makes a huge difference</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T16:43:14.000322</ts>
    <user>Isabelle</user>
    <text>Oddly I just ran it without debugging and it was faster... there's a lot of GC time. Trying a fresh run of DrRacket</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T16:46:54.000347</ts>
    <user>Isabelle</user>
    <text>I mean it was faster With debugging turned on</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T16:49:39.000246</ts>
    <user>Georgeanna</user>
    <text>maybe it has a compile artifact w/ the debugging and it needs to recompile for non? I don’t know how that side works</text>
  </message>
  <message conversation_id="329">
    <ts>2017-10-09T16:50:23.000019</ts>
    <user>Ka</user>
    <text>i'd imagine the run button basically reloads the entire code window into the repl, no?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T17:43:40.000108</ts>
    <user>Georgeanna</user>
    <text>OK. I have a basic `#lang lexer` working… but one thing that confuses me is what functions are available… if my main.rkt implementing my hashlang is `racket` then things work fine… my lexer can use things like `string-trim`… but if I make it use `racket/base` then `string-trim` isn’t available EVEN IF I put in a `(require racket/string)` inside my `#%module-begin`.

What am I not getting?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T17:46:07.000052</ts>
    <user>Georgeanna</user>
    <text>```
#lang oedipuslex

digits = (:+ numeric)

(eof)                                                 : (return-without-srcloc eof)
"\n"                                                  : (token 'NEWLINE lexeme)
whitespace                                            : (token lexeme #:skip? #t)
(:or "print" "goto" "end" "+" ":" ";")                : (token lexeme lexeme)
digits                                                : (token 'INTEGER (string-&amp;gt;number lexeme))
(:or (:seq (:? digits) "." digits) (:seq digits ".")) : (token 'DECIMAL (string-&amp;gt;number lexeme))
(:or (from/to "\"" "\"") (from/to "'"  "'"))          : (token 'STRING (string-trim lexeme #px"."))
```

(so far…. I’d like to add more constructs)</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T17:47:27.000215</ts>
    <user>Georgeanna</user>
    <text>possible phase 3:

```
;; TODO: phase 3: maybe?
digits = (:+ numeric)

(eof)                                      : (return-without-srcloc eof)
"\n"                                       : (token 'NEWLINE lexeme)
whitespace                                 : (token lexeme #:skip? #t)
"rem" ... "\n"                             : (token 'REM lexeme)
"print" | "goto" | "end" | "+" | ":" | ";" : (token lexeme lexeme)
digits                                     : (token 'INTEGER (string-&amp;gt;number lexeme))
digits? "." digits | digits "."            : (token 'DECIMAL (string-&amp;gt;number lexeme))
 "\"" .. "\"" | "'" .. "'"                 : (token 'STRING (string-trim lexeme #px"."))
```</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:13:25.000060</ts>
    <user>Vincenzo</user>
    <text>&lt;@Georgeanna&gt; If your `#%module-begin` introduces the `(require racket/string)`, then the introduced bindings are not visible to references that are supplied to the macro. In other words, imports are hygienic the same as definitions. It's usually easiest to have the `oedipuslex` reader to inject a `require` that has empty lexical context, so that it behaves as if it were present with the references.</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:14:43.000175</ts>
    <user>Kimbery</user>
    <text>To add to what Matthew said, `require` introduces bindings with the same lexical context as the piece of syntax for the module name itself.</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:15:59.000248</ts>
    <user>Chantelle</user>
    <text>I think it would be easier if you had your #lang lexer expand into (module anonymous lexer body ...)</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:16:40.000297</ts>
    <user>Chantelle</user>
    <text>That way whatever (require lexer) would export is what will be visible in a #lang lexer module</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:16:51.000171</ts>
    <user>Chantelle</user>
    <text>But I haven't done this in a while and my memory is fuzzy</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:17:02.000367</ts>
    <user>Ka</user>
    <text>aside: is there a reason modules can't be, actually *anonymous* ?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:17:16.000394</ts>
    <user>Ka</user>
    <text>slideshow/simple creates a module `my-module` which seems silly</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:17:26.000399</ts>
    <user>Chantelle</user>
    <text>that part I'm fuzzy on</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:17:31.000116</ts>
    <user>Kimbery</user>
    <text>modules are not first-class, so they can’t be anonymous in that sense</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:17:59.000239</ts>
    <user>Ka</user>
    <text>that's explanation enough.</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:18:01.000001</ts>
    <user>Ka</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:18:05.000303</ts>
    <user>Chantelle</user>
    <text>can a lang expand to multiple modules? Without submodules I mean</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:18:11.000202</ts>
    <user>Kimbery</user>
    <text>no</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:19:12.000129</ts>
    <user>Ka</user>
    <text>that'd be a limitation of read-syntax?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:19:32.000066</ts>
    <user>Chantelle</user>
    <text>I wonder if there would be any reasonable use for it</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:20:00.000094</ts>
    <user>Chantelle</user>
    <text>can't think of anything that wouldn't be much more easily done with submodules</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:20:21.000027</ts>
    <user>Ka</user>
    <text>hmm. read-syntax could return #'(begin ... )</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:20:24.000097</ts>
    <user>Kimbery</user>
    <text>it’s not a limitation of the reader, no</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:20:40.000081</ts>
    <user>Kimbery</user>
    <text>there’s just the question of what it would _mean_ and what it would _do_.</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:20:51.000017</ts>
    <user>Chantelle</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:21:14.000071</ts>
    <user>Ka</user>
    <text>i think the first question is: can the current implementation somehow be tricked into it</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:21:22.000171</ts>
    <user>Kimbery</user>
    <text>modules in racket are uniquely identified by a module path.</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:21:22.000185</ts>
    <user>Ka</user>
    <text>then the second is: is that a good idea or not?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:21:42.000317</ts>
    <user>Ka</user>
    <text>it seems like it's a good idea to enforce 1 module. but does the current system do so?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:21:57.000115</ts>
    <user>Ka</user>
    <text>(i assume yes, based on this discussion)</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:22:09.000135</ts>
    <user>Kimbery</user>
    <text>yes. it won’t work if you expand to something other than a `module` form.</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:22:15.000176</ts>
    <user>Chantelle</user>
    <text>I think the reason readers have to make a module whose name doesn't matter is related to backwards compatibility with `load` and the top level</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:23:36.000329</ts>
    <user>Ka</user>
    <text>but it *does* matter, no? it'd mean I couldn't technically have two of my slideshows be required by another file?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:23:44.000048</ts>
    <user>Ka</user>
    <text>(or, another module)</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:23:57.000094</ts>
    <user>Ka</user>
    <text>assuming the things defined in that module are provided, of course?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:25:01.000021</ts>
    <user>Chantelle</user>
    <text>The module name doesn't come up when you require it as a file</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:25:29.000066</ts>
    <user>Chantelle</user>
    <text>I'm not sure if the name is important if you load the file into the top level</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:26:01.000104</ts>
    <user>Ka</user>
    <text>"After evaluation is triggered once, later requires do not re-evaluate the module body." -- &lt;https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._module-syntax%29&gt;</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:26:14.000131</ts>
    <user>Ka</user>
    <text>presumably it uses the name-id to know to not reevaluate the body?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:26:37.000176</ts>
    <user>Ka</user>
    <text>e.g. if I have foo.rkt -&amp;gt; resulting in (module foo ...) and foo2.rkt -&amp;gt; resulting in (module foo ...) --- will that work?</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:27:03.000345</ts>
    <user>Chantelle</user>
    <text>Yes because the path is part of the key used to id modules</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:27:16.000136</ts>
    <user>Chantelle</user>
    <text>File path, I mean</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:27:26.000007</ts>
    <user>Ka</user>
    <text>ah. ok</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:28:58.000195</ts>
    <user>Chantelle</user>
    <text>the module-path? and resolved-module-path? predicates are good places to go in the docs for more info</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:29:17.000331</ts>
    <user>Ka</user>
    <text>confirmed that this works via a quick experiment. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:30:01.000145</ts>
    <user>Ka</user>
    <text>(and also confirmed that slideshow simple slides can just be included in your #lang slideshow without issues, which is fun)</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:30:12.000186</ts>
    <user>Ka</user>
    <text>(well, required that is)</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:30:17.000011</ts>
    <user>Chantelle</user>
    <text>Sweeeet</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:30:26.000017</ts>
    <user>Chantelle</user>
    <text>I liked your talk a lot by the way</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:30:30.000155</ts>
    <user>Ka</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:30:55.000103</ts>
    <user>Ka</user>
    <text>i wish i was able to be there yesterday</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:30:56.000023</ts>
    <user>Ka</user>
    <text>:disappointed:</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:31:11.000100</ts>
    <user>Ka</user>
    <text>(sounded like a lot of fun was had by all)</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:32:09.000162</ts>
    <user>Chantelle</user>
    <text>Designing tools with the goal to make something you could use at the last minute to whip something up in an hour leads tools in interesting directions</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:32:42.000121</ts>
    <user>Ka</user>
    <text>ha!</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:32:45.000117</ts>
    <user>Chantelle</user>
    <text>Hopefully there's another office hours day next year :p it was great</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:33:59.000060</ts>
    <user>Ka</user>
    <text>if &lt;@Eun&gt; and the con team send out a survey, I'm sure "office hours next year" will be part of the feedback.</text>
  </message>
  <message conversation_id="333">
    <ts>2017-10-09T18:35:28.000317</ts>
    <user>Ka</user>
    <text>I'm just worried about the 11th con. There's not an `eleventh` in `racket/list` -- how will that work?</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-09T18:39:25.000130</ts>
    <user>Chantelle</user>
    <text>PRs welcome ;)</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T09:22:09.000130</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; any thoughts on my rackunit PR?</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T12:17:56.000446</ts>
    <user>Lashaunda</user>
    <text>&lt;@Chantelle&gt; You can have my tshirt if you want.  I got a Large.</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T15:19:09.000346</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; yes but I have a ton of work stuff to catch up on so I might not get a chance to review it until the weekend</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T15:19:48.000341</ts>
    <user>Chantelle</user>
    <text>&lt;@Lashaunda&gt; That's very kind, but I think I'll just check with vincent to see if there are any leftover shirts</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T15:23:46.000204</ts>
    <user>Lashaunda</user>
    <text>&lt;@Chantelle&gt; Roger. Let me know if you still lack a tshirt later. You definitely earned yours.</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T15:28:07.000133</ts>
    <user>Nelson</user>
    <text>Racket t-shirts are also on &lt;http://devswag.com/|devswag.com/&gt;</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T15:31:28.000230</ts>
    <user>Latarsha</user>
    <text>I saw Todd wearing one at RacketCon</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T15:39:52.000269</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; &lt;@Tina&gt; Do you know where I can find the futures benchmarks from Swaine et al, OOPSLA 2010? /cc &lt;@Gus&gt;</text>
  </message>
  <message conversation_id="335">
    <ts>2017-10-10T18:42:58.000164</ts>
    <user>Ka</user>
    <text>&lt;@Nelson&gt; &lt;@Latarsha&gt; those shirts are immensely comfortable.</text>
  </message>
  <message conversation_id="335">
    <ts>2017-10-10T18:44:06.000325</ts>
    <user>Ka</user>
    <text>I'm wearing mine right now.</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T21:11:52.000108</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; I just read your speaker bio from RacketCon, and I'm hoping that these are connected: "figuring out how to stop software from breaking all the time. He also likes punching things."</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T21:44:11.000075</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; oh if only poor test coverage could be fixed by just punching my laptop</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-10T21:44:37.000002</ts>
    <user>Chantelle</user>
    <text>(it's actually in there because I like martial arts)</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-11T01:11:42.000182</ts>
    <user>Analisa</user>
    <text>What's the best/most idiomatic way to give an example where a function diverges in scribble?</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-11T11:08:12.000385</ts>
    <user>Nelson</user>
    <text>&lt;@Analisa&gt; you can give `examples` an evaluator with a time limit: &lt;http://pasterack.org/pastes/66137&gt;</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-11T11:43:33.000131</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: All the shirts were gone by the end of Sat. Sorry.</text>
  </message>
  <message conversation_id="337">
    <ts>2017-10-11T13:18:09.000397</ts>
    <user>Lashaunda</user>
    <text>&lt;@Nelson&gt; did not know about &lt;http://pasterack.org|pasterack.org&gt;, thanks!</text>
  </message>
  <message conversation_id="334">
    <ts>2017-10-11T13:19:10.000334</ts>
    <user>Lashaunda</user>
    <text>&lt;@Chantelle&gt; Happy also to buy you a tshirt, (require size)</text>
  </message>
  <message conversation_id="337">
    <ts>2017-10-11T13:19:45.000713</ts>
    <user>Lashaunda</user>
    <text>(you saved me scribble time)</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-11T16:40:25.000008</ts>
    <user>Nelson</user>
    <text>Does anyone here have Windows 10 creators update, and want to check if DrRacket can handle the "God Mode" folder? &lt;https://www.excelsiorjet.com/blog/support-stories/the-folder-of-god/&gt;</text>
  </message>
  <message conversation_id="338">
    <ts>2017-10-11T17:38:24.000028</ts>
    <user>Vincenzo</user>
    <text>Racket sees it as a plain directory, since it doesn't use that part of the shell32.dll API</text>
  </message>
  <message conversation_id="339">
    <ts>2017-10-11T20:13:14.000077</ts>
    <user>Nancie</user>
    <text>Is there any way to use the optimization coach outside of DrRacket?</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-11T22:07:25.000056</ts>
    <user>Chantelle</user>
    <text>&lt;@Sadye&gt; You asked about a data frame library at racketcon right? &lt;https://github.com/alex-hhh/ActivityLog2/blob/master/doc/data-frame.md&gt;</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-12T13:30:31.000323</ts>
    <user>Chantelle</user>
    <text>TIL tonyg has a package for sending and receiving raw Ethernet frames in Racket &lt;https://github.com/tonyg/racket-packet-socket&gt;</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-12T13:36:04.000182</ts>
    <user>Tilda</user>
    <text>Not quite sure why, but the name of that packet reminds me of this gem: &lt;http://web.mit.edu/adorai/www/seuss-technical-writing.html&gt;</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-12T13:36:42.000306</ts>
    <user>Chantelle</user>
    <text>&lt;@Tilda&gt; you did read the README poem right? :p</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-12T13:36:53.000242</ts>
    <user>Chantelle</user>
    <text>because if not you're in for a fun surprise</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-12T13:37:07.000534</ts>
    <user>Tilda</user>
    <text>no, but I'm glad Tony and I thought along the same vein...</text>
  </message>
  <message conversation_id="340">
    <ts>2017-10-12T13:40:17.000805</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Welp, looks like I had the segfault solved, but its still there.</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-12T13:41:04.000154</ts>
    <user>Rosalee</user>
    <text>Possibly a different thing, as it does seem like this will make the callback last indefinitely:
```
(define-libvid set-racket-log-callback
  (_fun (_fun #:async-apply (λ (x) (let loop () (displayln "NO") (loop)) (x))
              #:keep malloc-immobile-cell
              _bytes _av-log-constant _int _bytes
              -&amp;gt; _void) -&amp;gt; _void))
```</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-12T13:42:03.000108</ts>
    <user>Rosalee</user>
    <text>I kind of wonder if I’m doing something in atomic mode that is not allowed. Namely, these two functions which are in atomic mode:
```
(define (callback-proc name level len msg)
  (define name* (or name #"???"))
  (set! ffmpeg-log-list (cons (ffmpeg-msg name* level msg) ffmpeg-log-list)))

(define (flush-ffmpeg-log-list!)
  (call-as-atomic
   (λ ()
     (define ret ffmpeg-log-list)
     (set! ffmpeg-log-list '())
     (reverse ret))))
```</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-12T13:59:35.000686</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; The callbacks look ok to run in atomic mode, but I'm unclear on the lifetime of the arguments pass to the callback installed by `set-racket-log-callback` – given that `callback-proc` keeps the arguments for use later and returns. Are those arguments things that live beyond the dynamic extent of the call to the callback (and they're eventually freed by whatever calls `flush-ffmpeg-log-list!`)?</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:00:33.000694</ts>
    <user>Eun</user>
    <text>&lt;@Nancie&gt;: Yes. There's a (not very friendly) command-line interface: racket -l optimization-coach/report my-file.rkt</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:01:52.000082</ts>
    <user>Nancie</user>
    <text>Friendly or not, sounds like a good starting point for integration with other editors or CI tools</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:02:37.000104</ts>
    <user>Eun</user>
    <text>Ah, if that's the goal, then it may not be so bad. Its output is mostly machine readable.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:03:03.000364</ts>
    <user>Nancie</user>
    <text>If you're willing to accept PRs for other output modes (like stdout) then that may be my next Racket experiment</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:03:40.000627</ts>
    <user>Nancie</user>
    <text>Oh wait, I totally misread that</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:03:46.000140</ts>
    <user>Nancie</user>
    <text>maybe that does print to stdout</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:04:39.000078</ts>
    <user>Chantelle</user>
    <text>at racketcon office hours there was mention of some work on getting racket to cooperate with some "editor server" protocol used by things like eclipse and visual studio, maybe the optimization coach could be part of that?</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:05:13.000061</ts>
    <user>Chantelle</user>
    <text>ah yes, found it: &lt;https://github.com/Microsoft/language-server-protocol&gt;</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:06:30.000123</ts>
    <user>Eun</user>
    <text>&lt;@Nancie&gt;: PRs definitely welcome!</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:06:46.000201</ts>
    <user>Eun</user>
    <text>And I think it should indeed be printing to stdout.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:07:28.000309</ts>
    <user>Nancie</user>
    <text>I'm thinking Emacs integration myself. Does anyone edit Racket with a tool that supports this protocol?</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:07:28.000326</ts>
    <user>Eun</user>
    <text>A `raco optimization-coach` command would be nice (and I have half the plumbing for that sitting around), but that would need a more human-friendly output.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:08:35.000080</ts>
    <user>Chantelle</user>
    <text>&lt;@Nancie&gt; re emacs integration: would that be built on top of `racket-mode` or would it be something completely separate?</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:09:07.000437</ts>
    <user>Nancie</user>
    <text>I don't understand it well enough to say. `racket-mode` seems like a fine candidate, but maybe it would be more appropriate to integrate with Flycheck?</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:09:29.000393</ts>
    <user>Nancie</user>
    <text>I only just adopted full-time emacs a few weeks ago after using Jetbrains tools for many years</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:09:33.000415</ts>
    <user>Chantelle</user>
    <text>I don't use emacs at all so I know virtually nothing about its ecosystem</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:14:00.000074</ts>
    <user>Corey</user>
    <text>wrt to emacs I'd suggest step 0 is simply make sure any command-line tool prints error-like messages in a standard way</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:14:21.000273</ts>
    <user>Corey</user>
    <text>like `/full/path/to/file:line:col some message here`</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:14:30.000052</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; That is correct.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:14:48.000278</ts>
    <user>Rosalee</user>
    <text>Although, I should mention that at the moment, those objects never get freed.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:14:56.000537</ts>
    <user>Rosalee</user>
    <text>They are (for the moment) a memory leak.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:15:55.000613</ts>
    <user>Rosalee</user>
    <text>(I will fix that later, for now keeping them takes relatively little space, and helps with debugging things.)</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:16:48.000292</ts>
    <user>Corey</user>
    <text>Then you can use various emacs things to run the tool (a shell, or `async-shell-command`), and `next-error` will work on the output</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:17:30.000337</ts>
    <user>Corey</user>
    <text>A counter-example, that's kind of awkward, is when Racket elides paths in messages with `&amp;lt;pkgs&amp;gt;/some/path/to/file` and then next-error can't work</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:17:59.000529</ts>
    <user>Corey</user>
    <text>For the racket-mode REPL, specifically, I set an error display handler to _not_ do those special prefixes</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:18:16.000298</ts>
    <user>Corey</user>
    <text>But for command-line tools in general, try to just do the full path in the first place :slightly_smiling_face:</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:18:27.000424</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; What is the C-level function that  corresponds to `set-racket-log-callback`? I think a callback installed with `av_log_set_callback` will not necessarily get values for the first (likely, but probably not guaranteed) or fourth (definitely not) arguments that live beyond the callback.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:19:25.000014</ts>
    <user>Corey</user>
    <text>Anyway, with that, even if you want to wrap `async-shell-command` and `next-error` in some convenience stuff, it's just a thin wrapper and there's no wheel re-inventing</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:19:29.000127</ts>
    <user>Nancie</user>
    <text>Thanks, I'll add these to my notes</text>
  </message>
  <message conversation_id="336">
    <ts>2017-10-12T14:19:51.000506</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Here it is:
```
void set_racket_log_callback(void (*callback)(RACKET_CALLBACK_TYPES)){
  racket_log_callback = callback;
}
```</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:19:53.000453</ts>
    <user>Corey</user>
    <text>Just my suggestion for step 0. Not necessarily trying to discourage steps 1 ... ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:20:15.000406</ts>
    <user>Rosalee</user>
    <text>Where `racket_log_callback` is:
```
void (*racket_log_callback)(RACKET_CALLBACK_TYPES) = NULL;
```</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:20:33.000285</ts>
    <user>Vincenzo</user>
    <text>I guess the interesting part is: what calls `racket_log_callback`?</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:21:09.000463</ts>
    <user>Rosalee</user>
    <text>That would be `ffmeg_log_callback`, whose implementation is:
```
void ffmpeg_log_callback(void * avcl,
                         int level,
                         const char * fmt,
                         va_list vl) {
  int buffsize;
  char find_size_buf[FIND_BUFF_SIZE];
  char *buff;
  va_list size_vl;
  size_t namesize;
  const char *tmp;
  char *name = NULL;

  if(avcl) {
    tmp = ((AVClass*)(*(void**)avcl))-&amp;gt;class_name;
    namesize = strlen(tmp);
    name = malloc((1 + namesize)*sizeof(char));
    strncpy(name, tmp, (1 + namesize));
  }

  if(racket_log_callback) {
    va_copy(size_vl, vl);
    buffsize = vsnprintf(find_size_buf, FIND_BUFF_SIZE, fmt, size_vl);
    buff = malloc((buffsize + 1) * sizeof(char));
    vsnprintf(buff, buffsize + 1, fmt, vl);
    va_end(size_vl);
    racket_log_callback(name, level, buffsize, buff);
  } else {
    vsnprintf(find_size_buf, FIND_BUFF_SIZE, fmt, vl);
  }
}
```</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:22:26.000208</ts>
    <user>Rosalee</user>
    <text>More or less it takes the va_list, duplicates it, calls `vsnprintf` once to get the buffer size, calls `vsnprintf` again (on the now duplicated list) again to fill in the actual buffer.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:22:32.000362</ts>
    <user>Rosalee</user>
    <text>And then it calls the racket callback and returns.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:23:00.000154</ts>
    <user>Vincenzo</user>
    <text>Ok, that makes sense. I'm out of ideas just by looking at the definitions.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:23:04.000258</ts>
    <user>Rosalee</user>
    <text>From the racket side, that call is defined as:
```
(define-libvid ffmpeg-log-callback _fpointer)
```</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:23:21.000002</ts>
    <user>Rosalee</user>
    <text>And the reason its called that way is because its used in this context:</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:23:53.000046</ts>
    <user>Rosalee</user>
    <text>```
  (av-log-set-callback ffmpeg-log-callback)
```</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:24:33.000556</ts>
    <user>Rosalee</user>
    <text>Where the type of `av-log-set-callback` is:
```
  (define-avutil av-log-set-callback (_fun _fpointer -&amp;gt; _void))
```</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:25:14.000309</ts>
    <user>Rosalee</user>
    <text>And `_fpointer` is used because the type includes a va_list, and so Racket is just plugging the one c function into the other.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:25:26.000245</ts>
    <user>Rosalee</user>
    <text>So I would imagine `_fpointer` is good enough for that.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:25:38.000668</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Ah, okay. Thanks anyway. :confused:</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:35:19.000237</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; hmm…you know, I wonder if I can start this up in gdb and get interesting results. (BTW, the error I am getting is):
```
racket(29704,0x7fff76471000) malloc: *** error for object 0xd01: pointer being freed was not allocated
*** set a breakpoint in malloc_error_break to debug
[1]    29704 abort      racket -W debug -l raco video mosaic.rkt
```</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T14:35:47.000446</ts>
    <user>Rosalee</user>
    <text>Which seems like a suspiciously low address to me…</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T15:35:02.000694</ts>
    <user>Rosalee</user>
    <text>And of course running racket in a debugger makes the segfault go away. :disappointed:</text>
  </message>
  <message conversation_id="342">
    <ts>2017-10-12T15:35:44.000026</ts>
    <user>Chantelle</user>
    <text>&lt;https://media.tenor.com/images/7f22622198e3786f805304418f8d35d6/tenor.gif&gt;</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T15:36:25.000398</ts>
    <user>Rosalee</user>
    <text>lol…thanks.</text>
  </message>
  <message conversation_id="343">
    <ts>2017-10-12T16:09:08.000406</ts>
    <user>Ka</user>
    <text>I'd be interesting to integrate this into say, racket-mode or something.</text>
  </message>
  <message conversation_id="342">
    <ts>2017-10-12T16:10:50.000429</ts>
    <user>Ka</user>
    <text>&lt;@Nancie&gt; &lt;@Chantelle&gt; it might actually be best to start with a something even smaller -- a simple minor-mode in the likes of `go-lint-mode` (&lt;https://github.com/golang/lint/blob/master/misc/emacs/golint.el&gt;)</text>
  </message>
  <message conversation_id="342">
    <ts>2017-10-12T16:12:06.000208</ts>
    <user>Ka</user>
    <text>but, to &lt;@Corey&gt;'s point, that's probably step 1. step 0 is making sure you can easily jump to the error with the output matching something emacs can understand.</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T17:12:00.000267</ts>
    <user>Sadye</user>
    <text>doc search question: how do I tag my rsound docs so that they show up for users searching in the lang/htdp-beginner context? I'm not even sure whether this information goes in the .scrbl file or in my info.rkt. I've spent my obligatory 10 minutes searching, so now I'm asking for help :slightly_smiling_face:.</text>
  </message>
  <message conversation_id="342">
    <ts>2017-10-12T18:27:35.000058</ts>
    <user>Ka</user>
    <text>&lt;@Sadye&gt; more basic question: how does doc search even *work*?</text>
  </message>
  <message conversation_id="342">
    <ts>2017-10-12T18:27:57.000277</ts>
    <user>Ka</user>
    <text>where's the index data? It's gotta be local since I don't see any network requests to search...</text>
  </message>
  <message conversation_id="342">
    <ts>2017-10-12T18:29:41.000345</ts>
    <user>Ka</user>
    <text>ah. it's in `plt-index.js`</text>
  </message>
  <message conversation_id="342">
    <ts>2017-10-12T18:33:57.000029</ts>
    <user>Kimbery</user>
    <text>the `racket-index` package is what actually renders the documentation index, IIUC &lt;https://github.com/racket/racket/tree/master/pkgs/racket-index&gt;</text>
  </message>
  <message conversation_id="341">
    <ts>2017-10-12T18:34:16.000129</ts>
    <user>Vincenzo</user>
    <text>&lt;@Sadye&gt; It looks like the set of places to search is hardwired into the language: &lt;https://github.com/racket/htdp/blob/master/htdp-lib/lang/htdp-langs.rkt#L600&gt;</text>
  </message>
  <message conversation_id="344">
    <ts>2017-10-13T01:44:27.000102</ts>
    <user>Shad</user>
    <text>I'm working out a definition for a standard-cat pict. Haven't played with whiskers yet. Here's the gist &lt;https://gist.github.com/deeglaze/31bc02c325acdef4d67daec8c3af06e1&gt;</text>
  </message>
  <message conversation_id="345">
    <ts>2017-10-13T07:20:55.000172</ts>
    <user>Nancie</user>
    <text>Wonderful! Also amazed to see how the image comes out in the emacs repl in `racket-mode`</text>
  </message>
  <message conversation_id="342">
    <ts>2017-10-13T08:40:29.000425</ts>
    <user>Tina</user>
    <text>&lt;@Sadye&gt; pull requests welcome to either add yours or make things extensible :slightly_smiling_face:</text>
  </message>
  <message conversation_id="342">
    <ts>2017-10-13T11:47:00.000447</ts>
    <user>Sadye</user>
    <text>&lt;@Tina&gt; Agh! Got me. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T11:55:17.000121</ts>
    <user>Latarsha</user>
    <text>/kick-drdr </text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T12:10:14.000637</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; What is the #:tag feature in `define-cpointer-type`, do?</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T12:10:36.000622</ts>
    <user>Rosalee</user>
    <text>(I ask because `define-cstruct` seems to use it, but its not documented.</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T12:11:23.000100</ts>
    <user>Rosalee</user>
    <text>(Trying to make my own `define-cstruct` that can make structs for different (ABI breaking) versions of the same library. Which is why this is relevant to me.)</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T12:12:34.000135</ts>
    <user>Vincenzo</user>
    <text>It specifies a tag as an alternative to the default `'id`. I'll make a note to add that to the docs.</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T12:28:47.000419</ts>
    <user>Rosalee</user>
    <text>Ah, okay</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T12:28:58.000028</ts>
    <user>Rosalee</user>
    <text>I’d be happy to do it if that helps.</text>
  </message>
  <message conversation_id="347">
    <ts>2017-10-13T12:53:08.000129</ts>
    <user>Ka</user>
    <text>&lt;@Shad&gt; standard-cat is rad!</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T14:01:03.000149</ts>
    <user>Rosalee</user>
    <text>Yes…it should get merged. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T14:01:08.000337</ts>
    <user>Rosalee</user>
    <text>We could have `pict/farm`. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T14:13:45.000312</ts>
    <user>Nancie</user>
    <text>&lt;@Latarsha&gt; what's that command do?</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T14:44:34.000431</ts>
    <user>Latarsha</user>
    <text>&lt;@Nancie&gt; it resets the CI server build at &lt;http://drdr.racket-lang.org|drdr.racket-lang.org&gt;</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T14:44:52.000066</ts>
    <user>Latarsha</user>
    <text>Best not to run it unless that's hung</text>
  </message>
  <message conversation_id="348">
    <ts>2017-10-13T15:08:12.000488</ts>
    <user>Shad</user>
    <text>&lt;@Nelson&gt; The cat-silhouette function would be good way to build that version. I can also have #:left-eye and #:right-eye options that take picts and place them appropriately. Probably #:nose too.</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T15:47:32.000400</ts>
    <user>Rosalee</user>
    <text>Also &lt;@Vincenzo&gt; I submitted a PR to add it to the docs: &lt;https://github.com/racket/racket/pull/1844&gt;</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T16:43:47.000162</ts>
    <user>Latarsha</user>
    <text>/kick-drdr </text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T17:03:15.000298</ts>
    <user>Kimbery</user>
    <text>Can someone explain why these two programs print different things? Maybe &lt;@Vincenzo&gt; or &lt;@Latarsha&gt;?
```
#lang racket

(require (for-syntax racket/syntax)
         syntax/parse/define)

(define-simple-macro (mac)
  #:do [(define x (generate-temporary))
        (define intdef-ctx (syntax-local-make-definition-context))
        (define x* (internal-definition-context-introduce intdef-ctx x))
        (syntax-local-bind-syntaxes (list x) #f intdef-ctx)
        (println (identifier-binding x*))]
  (void))

(mac) ; =&amp;gt; #f
```
```
#lang racket

(require (for-syntax racket/syntax)
         syntax/parse/define)

(define-simple-macro (mac)
  #:do [(define x (syntax-local-introduce (generate-temporary)))
        (define intdef-ctx (syntax-local-make-definition-context))
        (define x* (internal-definition-context-introduce intdef-ctx x))
        (syntax-local-bind-syntaxes (list x) #f intdef-ctx)
        (println (identifier-binding x*))]
  (void))

(mac) ; =&amp;gt; 'lexical
```
The only difference is the addition of `syntax-local-introduce` in the second program.</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T17:21:34.000072</ts>
    <user>Latarsha</user>
    <text>I don't see how that could happen, so I hope &lt;@Vincenzo&gt; can explain</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-13T17:23:00.000233</ts>
    <user>Kimbery</user>
    <text>It appears to happen in racket7 as well, fwiw.</text>
  </message>
  <message conversation_id="349">
    <ts>2017-10-13T18:50:43.000230</ts>
    <user>Shad</user>
    <text>I'm on a chrome book, so everything has to be done through the browser. I've been using &lt;http://pasterack.org|pasterack.org&gt; as a REPL, and that's a rough experience. Especially with all the captcha requirements as you iterate. Eagerly awaiting racketscript + pict + racket/draw support so I can fiddle with images faster. I can ssh into a machine with racket for text-based iteration, but graphical stuff is hard.</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-14T09:56:02.000067</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; The short answer is that `identifier-binding` doesn't implicitly switch to "macro result" view in the same way that `syntax-local-bind-syntaxes` or `syntax-local-value` does.
If you make the macro return `x*`, then you get an out-of-context error in either variant of your example. Equivalently, `(identifier-binding (syntax-local-introduce x*))` produces `'lexical` and both cases. Overall, the intent is that `x*` as a result of the macro should be bound. To achieve that goal, `syntax-local-bind-syntaxes` includes an implicit `syntax-local-introduce` on its argument, as does `syntax-local-value` and other `syntax-local-...` functions.
The `identifier-binding` function does not include an implicit `syntax-local-introduce`. That's why you get `#f` in the first example; the binding has macro-introduction marks, but the identifier passed to `identifier-binding` does not.
In the second example, you're effectively canceling the macro-introduction mark for the binding (by using `syntax-local-introduce` to make the identifier look like it came from the macro use), and then looking up a binding from an identifier with more scopes still finds the binding.
To make a long story short, use `syntax-local-introduce` on the argument to `identifier-binding` if you want to see a bindings that as it will visible in the example, and its kindof an accident that you get `'lexical` in your second example.
The documentation should be made more clear which operations implicitly switch to macro-result view (with an implicit `syntax-local-introduce`) and which ones don't.</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-14T12:02:56.000101</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Thank you for that explanation. I admit that I find it pretty difficult and confusing to remember all the subtle differences between different syntax functions and how they adjust scopes. Is that what the `syntax-local-` prefix actually means? Functions that include an implicit `syntax-local-introduce`?</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-14T12:05:33.000117</ts>
    <user>Vincenzo</user>
    <text>I don't think it's as simple as having a `syntax-local-` prefix. I expected to sort this out better with the expander rewrite, but it was too easy to just do whatever the current functions do without thinking about it more.</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-14T12:08:39.000091</ts>
    <user>Kimbery</user>
    <text>Okay. The actual problem I was trying to solve when I ran into this is that I was binding some identifiers into a definition context, then calling `local-expand` on some syntax using the context, and the identifiers in the resulting syntax were not `free-identifier=?` to the identifiers I had.</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-14T12:10:04.000044</ts>
    <user>Kimbery</user>
    <text>Adding the `syntax-local-introduce` before binding the identifiers fixed the issue, but I’ll try moving it to someplace after the binding and see if that still works, since that seems closer to the right thing to do based on your explanation.</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:34:00.000020</ts>
    <user>Shad</user>
    <text>I want to make a gui interface now, where I can fiddle with all the parameters to standard-cat and see what it looks like real time.</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:38:21.000028</ts>
    <user>Shad</user>
    <text>basically I want to play with the ear positioning, arc length, and extents, and then the whisker length and droop.</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:39:07.000037</ts>
    <user>Shad</user>
    <text>it's not rackety until it has 20 optional keyword arguments</text>
  </message>
  <message conversation_id="346">
    <ts>2017-10-14T16:39:09.000011</ts>
    <user>Noe</user>
    <text>&lt;@Kimbery&gt; Is there any chance the identifiers that were not free-identifier=? to your binders were accessed from a syntax property set within the local expansion but accessed outside? Local-expand in effect does a syntax-local-introduce on its argument and return. Ran into this issue with turnstile with my own conversion to definition contexts there. Need to syntax-local-introduce when adding the property and when accessing the property.</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:40:46.000080</ts>
    <user>Kimbery</user>
    <text>Yep, I thought about that, and that was my theory. Normally I wouldn’t need to do that sort of low-level mucking about with identifiers, but I had to do that because type variables are represented as identifiers, and I needed to do some type substitution.</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:41:18.000052</ts>
    <user>Kimbery</user>
    <text>The trouble is that it goes in as a syntax object to be expanded and comes out as a property.</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:42:29.000063</ts>
    <user>Kimbery</user>
    <text>Also, hello &lt;@Noe&gt;, I didn’t realize you were in slack. :wave:</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:43:16.000056</ts>
    <user>Noe</user>
    <text>So did you solve your problem, or is there still a difficulty?</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:44:59.000005</ts>
    <user>Noe</user>
    <text>(&lt;@Kimbery&gt;)</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:45:00.000099</ts>
    <user>Noe</user>
    <text>Question</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:45:33.000044</ts>
    <user>Kimbery</user>
    <text>I got it working by adding a `syntax-local-introduce` in the right spot. So far it seems to work fine.</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T16:47:49.000072</ts>
    <user>Noe</user>
    <text>Question for everyone: is it expected behavior that `racket` will use compiled files for dependencies built by raco make even when the source file has been modified since? If so, why? Seems like it would be friendlier to check the timestamps transitive dependencies like raco make does, but I guess I could see that being too expensive.</text>
  </message>
  <message conversation_id="350">
    <ts>2017-10-14T19:43:21.000063</ts>
    <user>Latarsha</user>
    <text>&lt;@Noe&gt; No, that's not the expected behavior, and `racket` shouldn't be doing that</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T19:44:25.000050</ts>
    <user>Latarsha</user>
    <text>or, perhaps to be more clear, if `a.rkt` depends on `b.rkt` and both have zo files, and then you modify `b.rkt`, then the zo for `a.rkt` will still be used since `a.rkt` is not newer than the zo file</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T19:45:20.000023</ts>
    <user>Latarsha</user>
    <text>but if you modify `b.rkt` and then run `a.rkt`, it will not use the zo file for `b.rkt`</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T20:23:53.000063</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; (or maybe someone else) I'd like to provide an argument to `resolve-module-path-index` that produces a module path with the same semantics as calling `dynamic-require` on the MPI directly</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T20:24:26.000020</ts>
    <user>Latarsha</user>
    <text>I got somewhere with `(resolved-module-path-name (current-module-declare-name))` but that doesn't work when running `raco make`</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T21:16:53.000038</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; I don't understand the question. Can you provide a more complete example?</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T21:17:50.000019</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; Currently, I have this function:</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T21:17:55.000027</ts>
    <user>Latarsha</user>
    <text>```
(define (do-requires [ns (current-namespace)])
  (parameterize ([current-namespace ns])
    (for ([m (in-list to-require)]
          #:when m)
      (dynamic-require (module-path-index-join '(submod "." #%type-decl) m)
                       #f))))
```</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T21:18:21.000048</ts>
    <user>Latarsha</user>
    <text>I want to write a similar function, but which generates a list of `(require ...)` syntax objects</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T21:18:37.000062</ts>
    <user>Latarsha</user>
    <text>I've written this:
```
(define (get-requires)
  (for/list ([m (in-list to-require)]
             #:when m)
    ;; FIXME: is this really the right code?                                                                                                                                    
    #`(require (only-in (submod #,(resolve-module-path-index
                                   m
                                   (resolved-module-path-name
                                    (current-module-declare-name)))
                                #%type-decl)))))
```</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T21:19:14.000084</ts>
    <user>Latarsha</user>
    <text>which works when the code that uses it is run with `racket`, but not with `raco make` or `raco expand`</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T21:20:05.000077</ts>
    <user>Latarsha</user>
    <text>the elements of the list `to-require` are generated by `(variable-reference-&amp;gt;module-path-index (#%variable-reference))` in other modules</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T21:42:21.000015</ts>
    <user>Latarsha</user>
    <text>I'm trying to arrange for the submodules of a Typed Racket module that declare types or contracts to have `require`s for the same submodules in the modules that the outer module depends on</text>
  </message>
  <message conversation_id="352">
    <ts>2017-10-14T21:55:33.000047</ts>
    <user>Vincenzo</user>
    <text>My first thought is `(variable-reference-&amp;gt;module-path-index (#%variable-reference))` in place of `(resolved-module-path-name (current-module-declare-name))`, but I'm not sure that's the right idea.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T21:57:38.000029</ts>
    <user>Latarsha</user>
    <text>Won't that point to the inside of the Typed Racket implementation, where that function is?</text>
  </message>
  <message conversation_id="352">
    <ts>2017-10-14T22:00:04.000019</ts>
    <user>Vincenzo</user>
    <text>I though you were trying to do something like that. If you want to be relative to the context where the `require` appears, I'm not following well enough to see why "." doesn't work.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:00:59.000014</ts>
    <user>Vincenzo</user>
    <text>Well, maybe I see...</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:01:51.000004</ts>
    <user>Latarsha</user>
    <text>If I have modules `a.rkt` and `b.rkt`, where b requires a, then in the `#%type-decl` submodule of b I want to generate a require for the `#%type-decl` submodule of a</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:02:41.000074</ts>
    <user>Latarsha</user>
    <text>and the MPI in the code (named `m`) points to `a`</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:05:43.000013</ts>
    <user>Vincenzo</user>
    <text>Is the issue that `m` in `get-requires` might be a submodule path, so you can't just wrap it with `submod`?</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:06:52.000026</ts>
    <user>Latarsha</user>
    <text>I tried just putting `m` directly in the `submod` form but apparently `require` can't take a module-path-index (which is what `m` is) directly</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:07:20.000064</ts>
    <user>Latarsha</user>
    <text>certainly `(submod #,m #%type-decl)` would be the nicest thing to be able to write there</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:08:02.000007</ts>
    <user>Vincenzo</user>
    <text>I'm not clear on where `m` came from that it's a module path index, but then it seems like `(module-path-join '(submod "." #%type-decl) m)` would be what you want.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:09:04.000003</ts>
    <user>Latarsha</user>
    <text>Do you mean `module-path-index-join`?</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:09:09.000044</ts>
    <user>Vincenzo</user>
    <text>Yes</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:09:34.000017</ts>
    <user>Latarsha</user>
    <text>`m` comes from a call to `(variable-reference-&amp;gt;module-path-index (#%variable-reference))` in the other module (`a` in my example)</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:13:20.000013</ts>
    <user>Latarsha</user>
    <text>That produces a similar error to one I had earlier:
```
?: bad syntax for require sub-form
  in: #&amp;lt;module-path-index:((submod "." #%type-decl) "x.rkt")&amp;gt;
```</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:17:03.000070</ts>
    <user>Latarsha</user>
    <text>However, that was enough to get me to this:</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:17:15.000040</ts>
    <user>Latarsha</user>
    <text>```
(define (get-requires)
  (for/list ([m (in-list to-require)]
             #:when m)
    ;; FIXME: is this really the right code?                                                                                                                                    
    #`(require (only-in #,(cons 'submod (resolved-module-path-name (module-path-index-resolve (module-path-index-join '(submod "." #%type-decl) m))))))))
```</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:17:41.000022</ts>
    <user>Latarsha</user>
    <text>which I think will make unportable zo files but should be enough to allow me to make progress on this</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:17:54.000033</ts>
    <user>Latarsha</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:23:54.000059</ts>
    <user>Vincenzo</user>
    <text>I agree that's not the right thing. How about `(collapse-module-path-index (module-path-index-join '(submod "." #%type-decl) m))`?</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-14T22:31:44.000028</ts>
    <user>Latarsha</user>
    <text>That seems to work!</text>
  </message>
  <message conversation_id="353">
    <ts>2017-10-14T22:51:12.000028</ts>
    <user>Natosha</user>
    <text>&lt;@Noe&gt; See the `custom-load` package. It provides a compiled-load handler that implements recursive timestamp checking.</text>
  </message>
  <message conversation_id="353">
    <ts>2017-10-15T09:46:46.000091</ts>
    <user>Patrice</user>
    <text>&lt;@Natosha&gt; Hi, I sent a pull request to `custom-load`. The default use-compiled handler will check the existence of a file, so I added that check</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T11:50:29.000036</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; Is there an equivalent to `ctype-scheme-&amp;gt;c` and `ctype-c-&amp;gt;scheme` in the ffi lib? I see it in `'#%foreign`, but the docs say that it shouldn’t be used directly.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T11:51:06.000051</ts>
    <user>Rosalee</user>
    <text>For reference, I’m trying to build my own `define-cstruct` macro, because the existing one doesn’t support versions, which I need.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:05:42.000027</ts>
    <user>Lory</user>
    <text>I'm learning Racket by working through Beautiful Racket, and I have a question about expanders. I don't get why the expander here (&lt;https://beautifulracket.com/stacker/source-listing.html&gt;) needs to `(provide handle)`, but the expander here (&lt;https://beautifulracket.com/bf/an-imperative-expander.html&gt;) doesn't need to `(provide gt)`, `(provide lt)`, etc.</text>
  </message>
  <message conversation_id="354">
    <ts>2017-10-15T12:20:05.000111</ts>
    <user>Nancie</user>
    <text>From the second page, I think this covers it:
```
(define-macro-cases bf-op
  [(bf-op "&amp;gt;") #'(gt)]
  [(bf-op "&amp;lt;") #'(lt)]
  [(bf-op "+") #'(plus)]
  [(bf-op "-") #'(minus)]
  [(bf-op ".") #'(period)]
  [(bf-op ",") #'(comma)])
(provide bf-op)
```</text>
  </message>
  <message conversation_id="354">
    <ts>2017-10-15T12:21:43.000016</ts>
    <user>Lory</user>
    <text>I read that, but I thought that just replaces instances of `(bf-op "&amp;gt;")` with `(gt)`, which led me to think that `(gt)` needs to be provided.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:24:28.000039</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; Those are not meant to be exposed, and the way that `define-cstruct` uses `ctype-scheme-&amp;gt;c` and `ctype-c-&amp;gt;scheme` looks like a hack to me. I recommend using `cpointer-push-tag!` for the C-&amp;gt;Scheme part, and use `cpointer-has-tag?` for the Scheme-&amp;gt;C part. The little bit of duplication that you'll have is better than the hack.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:29:09.000075</ts>
    <user>Vincenzo</user>
    <text>&lt;@Lory&gt; A reference to `handle` originates in the reader, before identifiers have scope, while references to `gt`, etc., originate in expansion. In other words, it's roughly that `handle` is introduced by a `'` form, while `gt`, etc., are introduced by `#'` forms.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:30:08.000086</ts>
    <user>Lory</user>
    <text>&lt;@Vincenzo&gt; Thanks! I had not noticed that distinction.</text>
  </message>
  <message conversation_id="354">
    <ts>2017-10-15T12:30:55.000010</ts>
    <user>Kimbery</user>
    <text>Can someone in here explain why we always write the former of these two programs instead of the latter?
```
#lang racket

(require (for-syntax racket/syntax)
         syntax/parse/define)


(define-simple-macro (definer1 x:id)
  (define-syntax x 42))
(define-simple-macro (consumer1 x:id)
  #:with value (syntax-local-value #'x)
  (quote value))

(definer1 foo)
(consumer1 foo)


(define-simple-macro (definer2 x:id)
  (define-for-syntax x 42))
(define-simple-macro (consumer2 x:id)
  #:with value (syntax-local-eval #'x)
  (quote value))

(definer2 foo)
(consumer2 foo)
```
I’ve never fully understood why we use phase 0 transformer bindings to store data that macros have access to instead of just using phase 1 bindings.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:34:36.000045</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; One possible reason: Since `begin-for-syntax` doesn't work in internal-definition contexts, the latter works only at the module level, while the former also works in local contexts.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:36:08.000018</ts>
    <user>Kimbery</user>
    <text>Ahh, that makes sense. So you can’t have a notion of nested local scopes from different phases.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:38:26.000053</ts>
    <user>Kimbery</user>
    <text>That means David’s suggestion to use phases as namespaces unfortunately probably won’t work. Let me ask a followup question, then: is there any way for Racket programmers to inject requires that have the same shadowing behavior as bindings imported by the module language? Alternatively, is there any way to adjust how bindings provided by a module language are imported?</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:40:09.000021</ts>
    <user>Kimbery</user>
    <text>Essentially, I have a require transformer `unmangle-types-in`, and I inject it into every `require`. That transformer finds all the mangled type imports, unmangles them, and applies the type scope. I can’t do that for types provided by the module language, though, because there are obviously no “module language transformers”.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:40:57.000057</ts>
    <user>Kimbery</user>
    <text>And if I adjust the reader to transform `#lang hackett` into `(module m hackett (require hackett))`, then users are unable to shadow bindings provided by `hackett` with other `require`s.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T12:41:35.000082</ts>
    <user>Kimbery</user>
    <text>I _think_ this would be a problem even if I were using something like submodules to store bindings instead of a name mangling scheme, but maybe I’m overlooking something.</text>
  </message>
  <message conversation_id="355">
    <ts>2017-10-15T13:03:00.000021</ts>
    <user>Delmy</user>
    <text>How can one write a macro such that it can report the name of procedure which invokes it? I basically want something like:

```
(define-syntax (foo)
  (syntax-parse stx
    [(_)
      (with-syntax ([invoking-proc (?? get-invoking-proc ??)])
        (syntax/loc stx
          (begin
            (eprintf "foo called from: ~v" invoking-proc)
            (void))))]))
```</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T13:04:51.000040</ts>
    <user>Kimbery</user>
    <text>What do you mean “the procedure that invokes it”? Isn’t the procedure that invokes macro transformers just the macroexpander? Or do you want to know something about where the macro is used?</text>
  </message>
  <message conversation_id="355">
    <ts>2017-10-15T13:06:11.000022</ts>
    <user>Delmy</user>
    <text>The context in which the macro is used. Like if I had `(define (my-fn) (foo))` then `my-fn` should printf `foo called from "my-fn"` as a side effect.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T13:06:40.000069</ts>
    <user>Kimbery</user>
    <text>I don’t think you can do that.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T13:07:29.000073</ts>
    <user>Kimbery</user>
    <text>You could create your own custom version of `define` that set up some lexical information that another macro could use. But I don’t think the built-in `define` does anything like that.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T13:08:28.000107</ts>
    <user>Delmy</user>
    <text>I thought the contract system could do things like this? I.e. when  a contract is broken, it gives you information about whether the blame lies with the function itself, or the context in which it was called. Either way not a huge deal.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T13:09:35.000013</ts>
    <user>Kimbery</user>
    <text>I think the contract system does that with `define/contract`, which has syntactic access to the name, but I think it usually only blames modules.</text>
  </message>
  <message conversation_id="351">
    <ts>2017-10-15T13:10:18.000099</ts>
    <user>Delmy</user>
    <text>Gotcha, thanks for the info.</text>
  </message>
  <message conversation_id="356">
    <ts>2017-10-15T15:26:43.000118</ts>
    <user>Noe</user>
    <text>&lt;@Natosha&gt; I take it from the existence of `custom-load` that `racket` does not by default behave the way &lt;@Latarsha&gt; describes? Do you know why `racket` isn’t more cautious? It seems like the timestamp check shouldn’t be too expensive compared to the rather larger cost of actually loading and instantiating a module.

To be clear, the behavior I’m talking about is the following:

```
mkdir example; cd example

cat &amp;lt;&amp;lt;EOF &amp;gt;a.rkt
#lang racket
(define x 'old)
(provide x)
EOF

cat &amp;lt;&amp;lt;EOF &amp;gt;b.rkt
#lang racket
(require "a.rkt")
x
EOF

raco make b.rkt

cat &amp;lt;&amp;lt;EOF &amp;gt;a.rkt
#lang racket
(define x 'new)
(provide x)
EOF

# Prints 'old
racket b.rkt

raco make b.rkt

# Prints 'new
racket b.rkt
```</text>
  </message>
  <message conversation_id="356">
    <ts>2017-10-15T15:32:48.000011</ts>
    <user>Latarsha</user>
    <text>I think that what's happening there is that the compiled version of `b.rkt` includes the actual symbol</text>
  </message>
  <message conversation_id="356">
    <ts>2017-10-15T15:33:23.000033</ts>
    <user>Latarsha</user>
    <text>so fixing this requires that b.rkt be recompiled, even though _its_ zo is not out of date</text>
  </message>
  <message conversation_id="356">
    <ts>2017-10-15T15:34:59.000070</ts>
    <user>Latarsha</user>
    <text>what I said earlier remains correct</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-15T16:11:59.000027</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; I’m trying to better understand the syntax model behind `(module* m #f ....)` submodules, since the docs seem a little sparse. Does it make sense for `splicing-syntax-parameterize` to affect such submodules? If not, why not? Currently, it looks like the implementation of `splicing-syntax-parameterize` ignores all `module*` submodules, but it would be convenient for me if it were possible to affect them that way (and, since they inherit bindings around them, it seems like it should theoretically be possible).</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-15T16:19:06.000104</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; I think it would make sense for `splicing-syntax-parameterize` to work with `(module* m #f ....)`, but I've never tried</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-15T16:19:41.000024</ts>
    <user>Vincenzo</user>
    <text>There's no way, as far as I can see, to import in a way that allows shadowing</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-15T16:20:39.000047</ts>
    <user>Kimbery</user>
    <text>Okay, that’s probably enough for me to go on… I just have little idea how syntax parameters actually work, so I didn’t want to try something completely wrong. :)</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-15T16:21:26.000002</ts>
    <user>Kimbery</user>
    <text>As for imports, I think the namespace issue is surprisingly hard. :( But I think I might be able to get something that _almost_ works, modulo the issue with import shadowing.</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-15T23:26:20.000072</ts>
    <user>Kimbery</user>
    <text>```
$ cat module-begin.rkt
#lang racket

(require syntax/parse/define)

(define-simple-macro (#%module-begin form ...)
  #'(#%plain-module-begin form ...))

(module* use #f)

$ racket module-begin.rkt
module-begin.rkt:8:0: module*: compiled body was not built with #%module-begin
  in: (module* use #f)
```
wat</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-15T23:29:13.000046</ts>
    <user>Kimbery</user>
    <text>oh, hah—the `#'` is wrong there. still have no idea what that error message is about…</text>
  </message>
  <message conversation_id="358">
    <ts>2017-10-16T08:11:39.000439</ts>
    <user>Patrice</user>
    <text>ha!
```
$ raco expand module-begin.rkt
$ raco expand module-begin.rkt 
(module module-begin racket
  (#%module-begin
   (module configure-runtime '#%kernel
     (#%module-begin (#%require racket/runtime-config) (#%app configure '#f)))
   (#%require syntax/parse/define)
   (define-syntaxes
    (#%module-begin)
    ...)
   (module* use #f (quote-syntax (#%plain-module-begin)))))
```</text>
  </message>
  <message conversation_id="358">
    <ts>2017-10-16T08:12:15.000316</ts>
    <user>Patrice</user>
    <text>so it does not begin with `#%module-begin`</text>
  </message>
  <message conversation_id="358">
    <ts>2017-10-16T13:54:00.000151</ts>
    <user>Natosha</user>
    <text>&lt;@Patrice&gt; yes, sorry, I wanted to try it and maybe adapt the test before I merged the PR but I haven't had a chance yet</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-16T14:04:25.000386</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; returning to our conversation about `module-path-index-join` from this weekend, I have another issue</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-16T14:05:09.000029</ts>
    <user>Latarsha</user>
    <text>I would like to create a module path that works from a submodule of the place I currently am</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-16T14:05:31.000292</ts>
    <user>Latarsha</user>
    <text>given a module path index (or a module path) pointing to a given place</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-16T14:06:17.000498</ts>
    <user>Latarsha</user>
    <text>Normally, if the original module path (index) is just `foo` or `"foo.rkt"` or `(submod "foo.rkt" bar)` then just using it directly works fine</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-16T14:06:47.000038</ts>
    <user>Latarsha</user>
    <text>but if the original module path is `(submod ".." foo)` then putting that in a further submodule just doesn't work</text>
  </message>
  <message conversation_id="358">
    <ts>2017-10-16T14:12:31.000462</ts>
    <user>Patrice</user>
    <text>&lt;@Natosha&gt; I see. Thanks!</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-16T14:12:35.000147</ts>
    <user>Vincenzo</user>
    <text>@samth If you're in the module-path-index world, then you can `module-path-index-join` a `(submod "." bar)`. If you're in the module-path world and want to stay there, then I don't know a better approach than looking for `submod` and adding to the end – that is, partially parsing the module path. (I forgot why allowing nested `submod` wasn't trivial in the first place.)</text>
  </message>
  <message conversation_id="357">
    <ts>2017-10-16T14:20:30.000392</ts>
    <user>Latarsha</user>
    <text>Ok, thanks</text>
  </message>
  <message conversation_id="359">
    <ts>2017-10-17T13:47:15.000183</ts>
    <user>Chantelle</user>
    <text>anyone happen to know who the other racketeer in Mountain View is? &lt;https://www.google.com/maps/d/u/0/edit?mid=1i3zN11e_6te5ytduAiv1cidrIi4&amp;amp;ll=37.31311276802874%2C-121.76553941601566&amp;amp;z=11&gt;</text>
  </message>
  <message conversation_id="359">
    <ts>2017-10-17T13:52:27.000579</ts>
    <user>Eun</user>
    <text> Eric Dobson, maybe?</text>
  </message>
  <message conversation_id="359">
    <ts>2017-10-17T13:52:56.000104</ts>
    <user>Chantelle</user>
    <text>oh right!</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:05:58.000185</ts>
    <user>Ka</user>
    <text>woah! what is this?</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:06:16.000461</ts>
    <user>Ka</user>
    <text>and, how do I get my name on the list?</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:06:25.000376</ts>
    <user>Chantelle</user>
    <text>&lt;@Ka&gt; &lt;https://groups.google.com/forum/#!topic/racket-users/Xss3WBAN5bU&gt;</text>
  </message>
  <message conversation_id="359">
    <ts>2017-10-17T14:06:36.000048</ts>
    <user>Chantelle</user>
    <text>brought to you by &lt;@Nelson&gt; towards the bottom of that thread</text>
  </message>
  <message conversation_id="359">
    <ts>2017-10-17T14:07:02.000700</ts>
    <user>Latarsha</user>
    <text>1. Look for "racketeers.csv" in the menu
2. Click the "vertical dots" to the right of "racketeers.csv". (If you
hover the mouse over these dots, it should say "Layer Options")
3. Click "Open Data Table"
4. Right-click any row, choose "Add Row"
5. Add yourself, hit enter</text>
  </message>
  <message conversation_id="359">
    <ts>2017-10-17T14:07:12.000635</ts>
    <user>Latarsha</user>
    <text>(those are &lt;@Nelson&gt;'s instructions)</text>
  </message>
  <message conversation_id="359">
    <ts>2017-10-17T14:07:46.000022</ts>
    <user>Ka</user>
    <text>&lt;@Chantelle&gt; &lt;@Latarsha&gt; great! I haven't seen the thread yet apparently.</text>
  </message>
  <message conversation_id="359">
    <ts>2017-10-17T14:07:46.000444</ts>
    <user>Ka</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:26:15.000343</ts>
    <user>Ka</user>
    <text>It might be fun to have a slack app that shows racketeers nearby. e.g. `/geo nearby`</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:27:16.000188</ts>
    <user>Ka</user>
    <text>and, allow for something like `/geo set 90210` and `/geo whereis @apg`</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:28:24.000454</ts>
    <user>Chantelle</user>
    <text>presumably opt-in with a way to have fine-grained access control - I don't want to be responsible for giving people the ability to stalk racketeers</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:29:59.000594</ts>
    <user>Ka</user>
    <text>yeah. that's a good point</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:30:05.000486</ts>
    <user>Ka</user>
    <text>works better as a company tool</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:30:17.000052</ts>
    <user>Chantelle</user>
    <text>definitely</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:30:19.000310</ts>
    <user>Ka</user>
    <text>(but yeah, it'd be opt-in)</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:30:50.000301</ts>
    <user>Ka</user>
    <text>The *other* thing that might be fun: &lt;https://racket.slack.com/apps/A11MJ51SR-donut&gt;</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:31:35.000490</ts>
    <user>Latarsha</user>
    <text>annoyingly we're at our limit for apps on free slack</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:31:39.000466</ts>
    <user>Chantelle</user>
    <text>that's both creepy and fascinating</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:32:06.000627</ts>
    <user>Ka</user>
    <text>ah! there you go.</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:32:20.000123</ts>
    <user>Ka</user>
    <text>&lt;@Chantelle&gt; works great for large companies... of course.</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:33:19.000432</ts>
    <user>Chantelle</user>
    <text>it's almost like slack only accidentally took over foss communities :P</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:41:12.000018</ts>
    <user>Ka</user>
    <text>not a huge fan of this trend...</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:41:25.000038</ts>
    <user>Ka</user>
    <text>but, if that's what people want, then...</text>
  </message>
  <message conversation_id="360">
    <ts>2017-10-17T14:41:52.000393</ts>
    <user>Chantelle</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T16:21:35.000043</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; I have Yet Another Question to throw your way… could you explain to me why this program produces an unbound identifier error?
```
#lang racket

(require syntax/parse/define)

(begin-for-syntax
  (define introducer (make-syntax-introducer #t)))

(define-simple-macro (begin/introduce form ...)
  #:with [form* ...] (map introducer (attribute form))
  (begin form* ...))

(begin/introduce
  (define x 42))

(module* name #f
  (begin/introduce
    x)) ; unbound identifier in module
```
I tried using the macro stepper to debug this example, but the macro stepper seems to actually error out on this code. I tried using &lt;@Theron&gt;’s `debug-scopes`, and at first glance, it seemed like the inner `x` has all the right scopes, so I don’t understand why it isn’t bound. (And for what it’s worth, it also happens on racket7.)</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T16:25:03.000262</ts>
    <user>Vincenzo</user>
    <text>At first glance, when the `name` submodule is compiled, there will be a fresh compile-time instantiation of the enclosing module, and it makes a fresh introducer.
If that's on the right track, the way to preserve a scope across module instantiations is to embed it in a syntax object (really, a pair: one with and one without) and extract it out later with `make-syntax-delta-introducer` (using the pair).</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T16:30:06.000142</ts>
    <user>Kimbery</user>
    <text>Oh, I see, that makes sense. I think using `make-syntax-delta-introducer` actually crossed my mind at one point over the past few days, but I forgot about it while I was dealing with a bunch of other things. :)</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T16:40:16.000585</ts>
    <user>Kimbery</user>
    <text>Yes, replacing the `begin-for-syntax` with this seems to solve the problem:
```
(define-simple-macro (define-introducer-pair x:id y:id)
  #:with a (datum-&amp;gt;syntax #f 'a)
  #:with b ((make-syntax-introducer #t) #'a)
  (begin
    (define-syntaxes [a b] (values #f #f))
    (begin-for-syntax
      (define-values [x y] (values (quote-syntax a) (quote-syntax b))))))

(define-introducer-pair unintro intro)

(begin-for-syntax
  (define introducer (make-syntax-delta-introducer intro unintro)))
```
…which seems a little roundabout, but I guess it makes sense.</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T16:49:21.000200</ts>
    <user>Kimbery</user>
    <text>With that fix + the extra `splicing-syntax-parameterize` changes, namespacing _finally_ seems to work properly inside `(module* m #f ....)` submodules.</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T16:55:17.000084</ts>
    <user>Kimbery</user>
    <text>Now I just need to figure out how on earth to handle the REPL/top-level. :/</text>
  </message>
  <message conversation_id="362">
    <ts>2017-10-17T16:55:36.000613</ts>
    <user>Chantelle</user>
    <text>Hopelessly? ;)</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T16:59:18.000085</ts>
    <user>Kimbery</user>
    <text>It does seem tricky. In modules, I surround the module body with a `splicing-syntax-parameterize` I introduce in `#%module-begin`. At the top-level, that’s obviously not an option. I’m not sure if it’s safe to use the same introducers for all forms at the top level, then just make `#%top-interaction` use them.</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T17:14:19.000162</ts>
    <user>Kimbery</user>
    <text>Okay, I got the top level working, which means my scribble docs render… but getting scribble to understand code with multiple namespaces is not going to be easy. :sob:</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T17:42:55.000395</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; I just pushed a commit without the unnecessary `with-syntax`, feel free to merge (or I can).</text>
  </message>
  <message conversation_id="363">
    <ts>2017-10-17T17:54:51.000123</ts>
    <user>Vincenzo</user>
    <text>Go ahead and merge - thanks!</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T18:03:52.000333</ts>
    <user>Kimbery</user>
    <text>I am planning on inlining the updated definition of `splicing-syntax-parameterize` into Hackett to support older Racket versions, but I am trying to make sure that I can legally do so, since Hackett is licensed under a BSD-like license and Racket is LGPL, which are incompatible. However, looking at the relicensing effort, it looks like all the authors of that code have granted permission to relicense under MIT, which _I think_ means I can safely reuse the code as long as I include the MIT license text. I’d imagine nobody in here is a lawyer, though. :)</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T18:06:21.000137</ts>
    <user>Ka</user>
    <text>IANAL, but :wave: seems fine. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T18:19:06.000435</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; IANAL, either, but it sounds right to me</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T19:06:03.000121</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; (warning: bad and vague legal advice) If inlining the updated definition involves copying only code that _you_ wrote, then I think licensing doesn't really apply since you own the copyright</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T19:06:24.000187</ts>
    <user>Kimbery</user>
    <text>it doesn’t, which is the problem.</text>
  </message>
  <message conversation_id="364">
    <ts>2017-10-17T19:06:53.000043</ts>
    <user>Chantelle</user>
    <text>welp, i tried</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T19:08:15.000179</ts>
    <user>Kimbery</user>
    <text>I’m not going to worry about it too much. I put the MIT license at the top of the module with a copyright notice for PLT Design, and all the copyright holders for that piece of code are core Racket folks, so I doubt anyone is going to take legal action against me for copying a couple dozen lines of code. :)</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T19:09:49.000013</ts>
    <user>Ka</user>
    <text>oracle didn't care :slightly_smiling_face:</text>
  </message>
  <message conversation_id="361">
    <ts>2017-10-17T19:10:24.000019</ts>
    <user>Kimbery</user>
    <text>I would be much more careful if Oracle were the copyright holder. ;)</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T22:36:32.000036</ts>
    <user>Nelson</user>
    <text>&lt;@Clorinda&gt; what do you recommend instead of `arr` for "arrow"?</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T22:58:38.000166</ts>
    <user>Nelson</user>
    <text>after reading the discussion in `&lt;https://github.com/racket/typed-racket/pull/633&gt;`, I'm thinking Racket could use a language like `scribble/manual`, but for internal documentation</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:00:48.000245</ts>
    <user>Nelson</user>
    <text>not sure what ought to be in the language ... just feeling that `scribble/manual` makes writing documentation convenient, and I'd want similar-but-not-exactly-the-same tools for internal docs</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:04:05.000106</ts>
    <user>Nelson</user>
    <text>on that note, reminds me that when I search the docs for `hc-append`, I should see there's a Typed Racket version of it (also if I'm just browsing the `pict` docs)</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:04:10.000063</ts>
    <user>Kimbery</user>
    <text>I’ve thought about that a lot, too. `scribble/manual` would be a good start. Unsure if you want full literate programming or not.</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:05:28.000045</ts>
    <user>Nelson</user>
    <text>I've never tried LP but I'm very skeptical</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:06:04.000120</ts>
    <user>Nelson</user>
    <text>because I think there'd be lots of things like: because of this 1 idea/goal, we change the code in N different places</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:06:28.000079</ts>
    <user>Kimbery</user>
    <text>I find `scribble/lp` is too “heavyweight”. But on the other hand, I have a _lot_ of comments in Hackett. It would be nice for them to render somewhere and let me link between them.</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:07:02.000073</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; When a TCP output port is closed _only_ via a custodian shutdown (no calls to `close-&amp;lt;i/o&amp;gt;-port` or to `tcp-abandon-port`) is a TCP FIN packet sent? If so, is there any way for a Racket program to forcefully close a TCP connection without sending a FIN packet? Use case is testing that servers / clients handle unexpectedly terminated TCP connections correctly.</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:09:13.000016</ts>
    <user>Chantelle</user>
    <text>(reading more, I think what I'm looking for is a way to control whether FIN, RST, or nothing at all is sent from one end to the other when ports are closed)</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:11:20.000170</ts>
    <user>Nelson</user>
    <text>if only we had `(module+ scribble/manual ....)` ?</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:12:14.000060</ts>
    <user>Chantelle</user>
    <text>yes please to scribble docs that cooperate well with `module+`</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:12:54.000063</ts>
    <user>Chantelle</user>
    <text>it's frustrating that docs are included via a single `doc` export so it's hard to define documentation in a piecemeal way...</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:14:15.000002</ts>
    <user>Nelson</user>
    <text>I think the `mcfly` package has a solution</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:14:19.000036</ts>
    <user>Nelson</user>
    <text>but I've never looked into it</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:15:42.000094</ts>
    <user>Nelson</user>
    <text>or, would it be possible to do `#lang doc+ racket` that looks for `(begin-doc ....)` syntax and lifts those into a "big" `module*` ?</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:18:03.000028</ts>
    <user>Kimbery</user>
    <text>in theory, yes, but meta-languages that introduce new forms are currently held together with spit and baling wire</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:18:26.000119</ts>
    <user>Chantelle</user>
    <text>if the docs are implicitly stitched together then the scribble prose section order is dependent on the order of how things are implemented in the module which sounds Not Fun</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:20:11.000108</ts>
    <user>Kimbery</user>
    <text>this problem is hard, and I would like someone to solve it, but I have no interest in trying to solve it myself in the near future :)</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:20:24.000124</ts>
    <user>Chantelle</user>
    <text>heh I feel that way about a lot of things</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:36:33.000023</ts>
    <user>Ka</user>
    <text>random question: how can I shadow a package with raco such that I can work on a smaller piece of the distribution (e.g. slideshow)?</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:36:53.000108</ts>
    <user>Ka</user>
    <text>`raco pkg install --link -u ./slideshow-lib` is what I thought might work... but that doesn't seem to do what i want.</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:38:37.000084</ts>
    <user>Kimbery</user>
    <text>`raco pkg update --link slideshow-lib` should do the trick if you already have `slideshow-lib` installed</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:41:16.000005</ts>
    <user>Nelson</user>
    <text>or `raco pkg update --clone slideshow` if you want a copy of the slideshow repo</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:42:18.000210</ts>
    <user>Ka</user>
    <text>hmm. so update instead! perfect!</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:43:05.000004</ts>
    <user>Ka</user>
    <text>thanks</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:46:35.000044</ts>
    <user>Ka</user>
    <text>hmm. doing that rebuilds the world?</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:46:46.000045</ts>
    <user>Ka</user>
    <text>that's unexpected.</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:46:54.000141</ts>
    <user>Nelson</user>
    <text>yes, it runs `raco setup` for you</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:47:18.000006</ts>
    <user>Ka</user>
    <text>i'd expect that, but i guess i wouldn't expect that it'd also re-setup all packages</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:47:20.000066</ts>
    <user>Nelson</user>
    <text>(there's a `--no-setup` option)</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:48:21.000096</ts>
    <user>Nelson</user>
    <text>IIUC it's because they might depend on slideshow.</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:48:32.000080</ts>
    <user>Nelson</user>
    <text>since most don't, the setup should go fast</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:49:26.000093</ts>
    <user>Ka</user>
    <text>it's tolerable, sure. it rebuilt everything -- the srfi-lib's and things I wouldn't expect.</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:49:31.000055</ts>
    <user>Ka</user>
    <text>but... ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:55:28.000037</ts>
    <user>Nelson</user>
    <text>is there a good alternative? I guess racket would have to know all things that depend on slideshow</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-17T23:56:46.000111</ts>
    <user>Chantelle</user>
    <text>how exactly is this happening? `raco setup` looks for packages that depend on slideshow's package, then `raco setup` checks each module in each of those packages and skips it (but still prints a `raco setup: /path/to/mod` line) if the module doesn't depend on slideshow?</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-18T00:00:28.000102</ts>
    <user>Nelson</user>
    <text>I think right now, `raco setup` rebuilds every collection. If a collection's dependencies haven't changed, then the rebuild doesn't happen.</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-18T00:01:43.000050</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; I don't think there's a way to close a TCP connection within Racket without sending FIN.</text>
  </message>
  <message conversation_id="366">
    <ts>2017-10-18T00:02:18.000175</ts>
    <user>Chantelle</user>
    <text>is that something that would be very difficult to change?</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-18T00:04:05.000114</ts>
    <user>Vincenzo</user>
    <text>When `raco pkg` runs `raco setup`, it rebuilds any collection that is included in any package that declares a dependency on the changed package, if I remember correctly</text>
  </message>
  <message conversation_id="366">
    <ts>2017-10-18T00:06:15.000039</ts>
    <user>Vincenzo</user>
    <text>Offhand, I don't even know how to do it in C. As for avoiding both FIN and RST, is that possible without unplugging the machine or otherwise disabling the OS?</text>
  </message>
  <message conversation_id="366">
    <ts>2017-10-18T00:06:56.000009</ts>
    <user>Chantelle</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="366">
    <ts>2017-10-18T00:07:58.000010</ts>
    <user>Chantelle</user>
    <text>I don't know enough about how kernels expose the tcp/ip stack to user programs. I'm only barely sure that it lives in the kernel and not userland.</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-18T00:12:31.000143</ts>
    <user>Vincenzo</user>
    <text>My quick searches don't turn up an easy way to control this</text>
  </message>
  <message conversation_id="365">
    <ts>2017-10-18T00:13:44.000083</ts>
    <user>Chantelle</user>
    <text>It's not an obstacle for me at the moment so don't sweat it</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:41:24.000087</ts>
    <user>Kimbery</user>
    <text>&lt;@Ka&gt; To add to Matthew’s comment, `raco setup` doesn’t really know about packages, only collections. When `raco pkg` installs or updates a package, it sets up the relevant links so that `raco setup` sees the package’s contents as “just another collection” (or set of collections, in the case of multi-collection packages). When `raco pkg` runs `setup`, it provides the collections of the package being updated. As Matthew notes, this can end up being a lot of extraneous things if other packages provide modules in the same collection as the package being updated, or if they provide modules in the same collections as a package’s dependents.</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:42:32.000131</ts>
    <user>Kimbery</user>
    <text>The underlying API in `setup/setup` hints at some of this: note that `setup` takes a `#:collections` argument, but it doesn’t let you specify anything about packages. &lt;http://docs.racket-lang.org/raco/setup-plt-plt.html#%28def._%28%28lib._setup%2Fsetup..rkt%29._setup%29%29&gt;</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:43:08.000141</ts>
    <user>Ka</user>
    <text>Hmmm.</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:43:22.000089</ts>
    <user>Ka</user>
    <text>Thanks for all the interesting context!</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:45:41.000192</ts>
    <user>Ka</user>
    <text>So is the Racket distribution a single collection?</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:46:44.000072</ts>
    <user>Kimbery</user>
    <text>No, a “collection” is just a top-level namespace, like `racket/` or `syntax/`, and the core provides modules in many collections. I think the terminology is a little odd.</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:46:57.000166</ts>
    <user>Kimbery</user>
    <text>But this is all the way it is for legacy reasons.</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:47:54.000022</ts>
    <user>Ka</user>
    <text>Thats what I thought a collection was. OK. I guess I still don’t quite understand the world rebuild...but it’s not necessary to at the moment.</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:48:56.000010</ts>
    <user>Kimbery</user>
    <text>Yes, it’s strange. It would be better if `raco setup` were smarter and knew about packages, but collections long predate the current package system, so packages were sort of bolted on top.</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:49:11.000120</ts>
    <user>Ka</user>
    <text>Ok.</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:49:22.000037</ts>
    <user>Kimbery</user>
    <text>(At least that is my understanding. I actually haven’t been using Racket long enough to have experienced it pre-package system.)</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:51:03.000070</ts>
    <user>Chantelle</user>
    <text>plus it's technically the second package system</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:51:31.000053</ts>
    <user>Chantelle</user>
    <text>I've no idea what using PLaneT (the first system) was like</text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T00:57:12.000172</ts>
    <user>Chantelle</user>
    <text>is there a way to peek channels or async buffered channel like one can peek a port?</text>
  </message>
  <message conversation_id="368">
    <ts>2017-10-18T07:19:57.000156</ts>
    <user>Clorinda</user>
    <text>&lt;@Nelson&gt; I think `arrow` is a great name =)  -- this is sort of a silly bias I have, but when we were using `arr` everywhere in Typed Racket (that used to be the name of the struct) in conversation and all over the code base you would see references to them as "arity" or similar. when I called them an "arity" Sam got annoyed and corrected me that it was "arrow" -- I appreciated the correction, and wanted us to avoid the confusion in the future, so I've been trying to avoid `arr`. This is probably just me being crazy and anal to some degree, TBH ¯\_(ツ)_/¯ </text>
  </message>
  <message conversation_id="367">
    <ts>2017-10-18T09:00:00.000057</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; There's no peek operation on normal channels (and I think adding one is probably not a good idea, since they're intended for synchronous, atomic exchange). Asynch channels don't currently provide a peek operation, but I see no particular obstacle to adding it.</text>
  </message>
  <message conversation_id="369">
    <ts>2017-10-18T09:13:01.000546</ts>
    <user>Latarsha</user>
    <text>There isn't a separate TR version, though</text>
  </message>
  <message conversation_id="369">
    <ts>2017-10-18T09:13:51.000185</ts>
    <user>Latarsha</user>
    <text>David Christiansen (sadly not on slack) has been working on a tool for this recently</text>
  </message>
  <message conversation_id="368">
    <ts>2017-10-18T10:19:51.000327</ts>
    <user>Clorinda</user>
    <text>&lt;https://github.com/racket/racket/commit/9e16d3f9c9c218825a483f6b53750ed9bbee2470&gt;</text>
  </message>
  <message conversation_id="368">
    <ts>2017-10-18T10:20:55.000138</ts>
    <user>Marlin</user>
    <text>That's something I've wanted for a long time. Thanks, &lt;@Clorinda&gt;</text>
  </message>
  <message conversation_id="368">
    <ts>2017-10-18T10:21:43.000394</ts>
    <user>Clorinda</user>
    <text>&lt;@Marlin&gt; me too! happy to be the one to add it! (it was pretty easy, all the hooks for such a customization already existed in the framework, thankfully. thank you all who helped design it that way!)</text>
  </message>
  <message conversation_id="370">
    <ts>2017-10-18T10:40:55.000296</ts>
    <user>Rosalee</user>
    <text>&lt;@Tina&gt; OMG Robby….best…email…ever. :smile:</text>
  </message>
  <message conversation_id="370">
    <ts>2017-10-18T10:41:08.000395</ts>
    <user>Rosalee</user>
    <text>(The one you sent about the v6.11 release.)</text>
  </message>
  <message conversation_id="370">
    <ts>2017-10-18T10:41:22.000504</ts>
    <user>Rosalee</user>
    <text>```
(regexp-replace*
 #rx" now"
 "DrRacket's Program Countour is now significantly more efficient;
using it now no longer hurts DrRacket's interactivity now"
 "")
```</text>
  </message>
  <message conversation_id="370">
    <ts>2017-10-18T10:43:28.000283</ts>
    <user>Tina</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="370">
    <ts>2017-10-18T10:43:39.000209</ts>
    <user>Tina</user>
    <text>I have a lot of trouble removing the “now”s on my own……</text>
  </message>
  <message conversation_id="371">
    <ts>2017-10-18T11:08:48.000211</ts>
    <user>Nelson</user>
    <text>edit: I'd like to see there's a `typed/pict` and "readable" versions of its types for pict functions</text>
  </message>
  <message conversation_id="371">
    <ts>2017-10-18T11:12:24.000241</ts>
    <user>Latarsha</user>
    <text>There should be a note that `typed/pict` exists in the docs where it lists other libraries provided with Typed Racket</text>
  </message>
  <message conversation_id="372">
    <ts>2017-10-18T11:38:05.000478</ts>
    <user>Jalisa</user>
    <text>Hey All,

I’m a frontend web developer and somewhat new to computer programming. Wanted to see if I could get some recommendations as to a systematic approach. I recently started the HtDP book and planned moving to the SICP book after that.

If anyone has any recommendations for books or resources for learning programming through Racket, I’d love to hear about it. I also have the Realm of Racket book coming soon.

Thanks!
Dustin </text>
  </message>
  <message conversation_id="372">
    <ts>2017-10-18T12:41:52.000082</ts>
    <user>David</user>
    <text>&lt;@Jalisa&gt;, I can give you an anti-recommendation: I believe SICP might be a good tenth book for a person somewhat new to computer programming, but not a second. The style of code in it is dated, and it talks about domains far removed from most people’s interests (for example, calculus). We have more accessible resources, including Realm of Racket and Beautiful Racket.</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:52:38.000758</ts>
    <user>Rosalee</user>
    <text>Has anyone else noticed that the latest version of the acmart template (the one &lt;@Vincenzo&gt; updated to a while back), has an ugly footnote on the first page?</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:53:27.000252</ts>
    <user>Rosalee</user>
    <text>I mean, it does appear to be part of the standard distribution (as shown from the sample), but it just looks gross.</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:54:46.000318</ts>
    <user>Latarsha</user>
    <text>I don't see any footnotes there</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:55:52.000560</ts>
    <user>Rosalee</user>
    <text>&lt;@Latarsha&gt; :
&amp;gt; Authors’ addresses: Gang Zhou, College of William and Mary, 104 Jamestown Rd, Williamsburg, VA, 23185, USA, &lt;mailto:gang_zhou@wm.edu|gang_zhou@wm.edu&gt;; Valerie Béranger, Inria Paris-Rocquencourt, Rocquencourt, France, &lt;mailto:beranger@inria.fr|beranger@inria.fr&gt;; Aparna Patel, Rajiv GandhiUniversity, Rono-Hills, Doimukh, Arunachal Pradesh, India, &lt;mailto:aprna_patel@rguhs.ac.in|aprna_patel@rguhs.ac.in&gt;; Huifen Chan, Tsinghua University,30 Shuangqing Rd, Haidian Qu, Beijing Shi, China, &lt;mailto:chan0345@tsinghua.edu.cn|chan0345@tsinghua.edu.cn&gt;; Ting Yan, Eaton Innovation Center, Prague,Czech Republic, &lt;mailto:yanting02@gmail.com|yanting02@gmail.com&gt;; Tian He, University of Virginia, School of Engineering, Charlottesville, VA, 22903,USA, University of Minnesota, USA, &lt;mailto:tinghe@uva.edu|tinghe@uva.edu&gt;; Chengdu Huang; John A. Stankovic; Tarek F. Abdelzaher, Universityof Virginia, School of Engineering, Charlottesville, VA, 22903, USA.</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:56:04.000205</ts>
    <user>Rosalee</user>
    <text>Right above the copyright notice.</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:56:28.000005</ts>
    <user>Latarsha</user>
    <text>Not sure I would call that a footnote, but sure</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:56:32.000383</ts>
    <user>Latarsha</user>
    <text>and yes, that's part of the template</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:56:43.000263</ts>
    <user>Rosalee</user>
    <text>Okay, what would you call it?</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:57:37.000112</ts>
    <user>Latarsha</user>
    <text>not sure (I would say that a footnote has a reference from the main text, like the footnote on p2 of that sample)</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:57:56.000033</ts>
    <user>Latarsha</user>
    <text>You could certainly complain to the PACM people about it</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:58:34.000125</ts>
    <user>Rosalee</user>
    <text>Fair</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:58:57.000462</ts>
    <user>Rosalee</user>
    <text>I just said footnote because (a) I didn’t have a better name for it and (b), I’ve seen people do that sort of thing accept just attached to the title.</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T12:59:04.000326</ts>
    <user>Rosalee</user>
    <text>Anyway, thanks.</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T13:03:34.000245</ts>
    <user>Jalisa</user>
    <text>&lt;@David&gt; I think you’re probably right on that, and I did wonder about it being a tad dated. I’ll instead move to _Realm of Racket_ and at some point _Beautiful Racket_. I didn’t realize it taught programming is such a way, thanks! 

My other thought (eventually) was _Software Foundations:_

&lt;http://softwarefoundations.cis.upenn.edu|softwarefoundations.cis.upenn.edu&gt; </text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T13:05:15.000414</ts>
    <user>Rosalee</user>
    <text>&lt;@Jalisa&gt; I would recommend against that.</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T13:05:21.000243</ts>
    <user>Rosalee</user>
    <text>(Using software foundations)</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T13:06:05.000262</ts>
    <user>Rosalee</user>
    <text>Its a great way to get into theorem provers (or at least coq)</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T13:06:49.000044</ts>
    <user>Rosalee</user>
    <text>But for generic programming, I suspect it won’t be as relevant.</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T13:06:52.000782</ts>
    <user>Rosalee</user>
    <text>But I could always be wrong. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T13:10:10.000526</ts>
    <user>Jalisa</user>
    <text>Okay, thanks! Perhaps I should instead do more hands-on exercises and explore the documentation. The thing I found most attractive about Racket was the documentation. Thanks again. </text>
  </message>
  <message conversation_id="374">
    <ts>2017-10-18T13:16:22.000642</ts>
    <user>Ka</user>
    <text>&lt;@Jalisa&gt; I'm not sure it's a great second book, but The New Turing Omnibus will introduce you to a lot of concepts in Computing. It won't teach you Racket though, if that's your goal.</text>
  </message>
  <message conversation_id="373">
    <ts>2017-10-18T13:17:54.000444</ts>
    <user>Jalisa</user>
    <text>My goal is to explore Racket for a while (who knows where that might go) and possibly learn Rust and Haskell later on. I’ll check that out, thanks!</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T16:11:19.000407</ts>
    <user>Nancie</user>
    <text>Is it possible to build a library that provides modules for both Racket and Typed Racket without writing the code twice? Any examples of this being done in the wild?</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:01:35.000167</ts>
    <user>Clorinda</user>
    <text>&lt;@Nancie&gt; It's not clear to me what you're asking. Typed Racket modules can be required in Racket code, and untyped Racket modules' definitions can be used if an adaptor module (i.e. a module that declares the types for any desired definitions) is written. But I think you're asking about something else -- can you say more about what you're trying to do?</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:32:31.000093</ts>
    <user>Ka</user>
    <text>&lt;@Clorinda&gt; &lt;@Nancie&gt; are you using contracts in the non-Typed Racket code?</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:34:54.000068</ts>
    <user>Nancie</user>
    <text>I think the adapter module is exactly what I'm looking for</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:35:43.000118</ts>
    <user>Nancie</user>
    <text>I just want to build a library that's convenient for users of either `#lang` without incurring any extra contract penalties</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:38:51.000224</ts>
    <user>Ka</user>
    <text>&lt;@Nancie&gt; i'm actually curious about this too -- having not played around too much with Typed Racket</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:39:22.000219</ts>
    <user>Ka</user>
    <text>my (not so informed) understanding was that contracts provide most of the bridge necessary -- but maybe that's not accurate enough</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:40:55.000200</ts>
    <user>Corey</user>
    <text>My take on this is that "ideally" you simply write your thing using Typed Racket. That is automatically usable by dynamic typed plain Racket, because it generates contracts. If you find the performance is fine, this is the simplest way to go.</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:41:02.000505</ts>
    <user>Corey</user>
    <text>There was also some discussion on the mailing list</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:41:04.000397</ts>
    <user>Nancie</user>
    <text>I watched this a few days ago and found it pretty enlightening
&lt;https://www.youtube.com/watch?v=mtR3NupaRAQ&gt;</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:41:24.000418</ts>
    <user>Corey</user>
    <text>My search fu only got the middle of the thread: &lt;https://groups.google.com/forum/#!topicsearchin/racket-users/butterick$20typed$20racket$20submodules;context-place=searchin/racket-users/butterick$20typed$20racket$20submodules$20%7Csort:date/racket-users/Z431HQqIg6g&gt;</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:41:42.000290</ts>
    <user>Corey</user>
    <text>That was about using submodules to expose alternate interfaces</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:42:12.000084</ts>
    <user>Corey</user>
    <text>(I have the full thread in Gmail but can't figure out how to link you to it in GGroups) ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:42:47.000266</ts>
    <user>Ka</user>
    <text>there's usually a "link" button somewhere. the interface to google groups is .... not very usable.</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:43:22.000255</ts>
    <user>Ka</user>
    <text>but, awesome! I think I got it backwards. Write Typed Racket, get contracts for free for untyped Racket</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:44:18.000207</ts>
    <user>Corey</user>
    <text>Yep. I mean, you _might_ find it too slow. But maybe not.
If you like "make it correct, then make it fast" approach, that's probably the way to go?</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:44:54.000217</ts>
    <user>Nancie</user>
    <text>Yeah, I think that's the right way to do things</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:51:43.000212</ts>
    <user>Corey</user>
    <text>Oh, circa May 2015 is when it switched to using Google Groups instead of the old list server. That explains why GGroups didn't have the start of that thread. :grin:</text>
  </message>
  <message conversation_id="375">
    <ts>2017-10-18T17:51:52.000014</ts>
    <user>Corey</user>
    <text>&lt;https://lists.racket-lang.org/users/archive/2015-March/066424.html&gt;</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:21:51.000040</ts>
    <user>Clorinda</user>
    <text>I'm trying to just `read` in the contents of a Racket file using `(read (open-input-file "Desktop/foo/foo.rkt"))`</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:22:06.000030</ts>
    <user>Clorinda</user>
    <text>getting error `read: #lang not enabled in the current context` -- am I doing something silly here?</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:23:01.000059</ts>
    <user>Clorinda</user>
    <text>(I was hoping to just get the datum, e.g. `'#lang` (the keyword))</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:26:42.000155</ts>
    <user>Marlin</user>
    <text>`(parameterize ([read-accept-lang #t]) ...)`, maybe?</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:29:32.000204</ts>
    <user>Marlin</user>
    <text>hm, that didn't seem to work.</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:30:34.000253</ts>
    <user>Marlin</user>
    <text>`read-accept-reader` did, but you don't get a `'#lang` datum; instead, you get a `(module ...)` for the whole file.</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:31:28.000096</ts>
    <user>Clorinda</user>
    <text>I'm not wanting to do anything fancy (I don't think) -- just read over the file's sexps as lists</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:31:48.000090</ts>
    <user>Vincenzo</user>
    <text>&lt;@Clorinda&gt; `#lang` isn't a keyword like `#:lang`, so you can't `read` just `#lang`</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:31:49.000032</ts>
    <user>Kimbery</user>
    <text>try `with-module-reading-parameterization`? &lt;http://docs.racket-lang.org/syntax/module-helpers.html#%28def._%28%28lib._syntax%2Fmodread..rkt%29._with-module-reading-parameterization%29%29&gt;</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:32:55.000140</ts>
    <user>Clorinda</user>
    <text>aaaah, duh -- thanks &lt;@Vincenzo&gt;. that's unfortunate for my simple, silly approach to skimming the file contents as a bunch of lists =(</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:34:18.000110</ts>
    <user>Vincenzo</user>
    <text>I haven't tried it, but you might be able to use `read-language` to discard the `#lang` line and then read the rest of the content (on the assumption that the rest is in S-expression form).</text>
  </message>
  <message conversation_id="376">
    <ts>2017-10-18T19:36:25.000283</ts>
    <user>Marlin</user>
    <text>yeah, that works</text>
  </message>
  <message conversation_id="377">
    <ts>2017-10-18T20:08:24.000041</ts>
    <user>Clorinda</user>
    <text>there's not a one-liner that will clone/download all the source code from pkgs.racket-lang.org... is there?</text>
  </message>
  <message conversation_id="377">
    <ts>2017-10-18T20:09:09.000151</ts>
    <user>Chantelle</user>
    <text>`raco pkg catalog-archive` I think</text>
  </message>
  <message conversation_id="377">
    <ts>2017-10-18T20:09:38.000161</ts>
    <user>Chantelle</user>
    <text>or at least I'm pretty sure theres a `raco pkg catalog-*` command that does it</text>
  </message>
  <message conversation_id="377">
    <ts>2017-10-18T20:14:28.000292</ts>
    <user>Clorinda</user>
    <text>thanks, &lt;@Chantelle&gt;! `raco pkg catalog-archive` was the trick!</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:27:19.000173</ts>
    <user>Jalisa</user>
    <text>I'm mainly using Racket to learn how to program, but does anyone know if there are many jobs using Racket? I realize it was renamed from Scheme, but it seems difficult to judge based on that. Thanks.</text>
  </message>
  <message conversation_id="377">
    <ts>2017-10-18T20:30:24.000233</ts>
    <user>Chantelle</user>
    <text>&lt;@Jalisa&gt; There are more academic users of Racket than there are industrial ones, but I would say Racket has more industrial users than most other schemes and lisps. Only other lispy langs I know of with comparable industry use are common lisp and clojure (both of which have vastly more industry use than racket as far as I know)</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:31:38.000204</ts>
    <user>Jalisa</user>
    <text>That's sort of what I was thinking. Thanks!</text>
  </message>
  <message conversation_id="377">
    <ts>2017-10-18T20:32:40.000125</ts>
    <user>Chantelle</user>
    <text>what sort of domain were you looking to use racket in?</text>
  </message>
  <message conversation_id="377">
    <ts>2017-10-18T20:33:02.000231</ts>
    <user>Chantelle</user>
    <text>(I ask because I want to make racket better for use in backend web dev myself)</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:37:46.000143</ts>
    <user>Jalisa</user>
    <text>I'm trying to stick with the web side of things as well. Came across this book which was interesting: &lt;http://serverracket.com/&gt;</text>
  </message>
  <message conversation_id="377">
    <ts>2017-10-18T20:39:31.000111</ts>
    <user>Chantelle</user>
    <text>Only a month and a half (I think) until it comes out :D</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:44:00.000087</ts>
    <user>Jalisa</user>
    <text>I don't know why, but I really enjoy the syntax and feel of Racket and Haskell over other C-like languages or JS.</text>
  </message>
  <message conversation_id="377">
    <ts>2017-10-18T20:44:22.000128</ts>
    <user>Chantelle</user>
    <text>if you like both Racket and Haskell, you might be interested in the Hackett language / project</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:46:10.000004</ts>
    <user>Jalisa</user>
    <text>Oh, for sure! I'm already checking that one out. Seems like the two make for an outstanding pair.</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:47:56.000007</ts>
    <user>Jalisa</user>
    <text>I think it essentially brings Racket's macros and keeps most of the syntax of Haskell?</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:48:35.000048</ts>
    <user>Chantelle</user>
    <text>it uses Racket syntax and is built on Racket's VM, macro system, and module system via `#lang`</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:48:41.000139</ts>
    <user>Chantelle</user>
    <text>but the semantics are pretty much haskell 98</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:48:59.000036</ts>
    <user>Chantelle</user>
    <text>the exception is it has `define-syntax` and you can make macros that interact with type information</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:50:14.000129</ts>
    <user>Jalisa</user>
    <text>Sounds very cool.</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:50:50.000169</ts>
    <user>Chantelle</user>
    <text>it is indeed incredibly cool</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:54:26.000094</ts>
    <user>Jalisa</user>
    <text>I spent a ton of time last night figuring out how to put Racket's location in my `$PATH` on a Mac. Turns out there's more than one way to do it. I think my mistake was relying on a command instead if simply restarting Terminal. Felt like a success even though it was a small achievement!</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:55:13.000008</ts>
    <user>Chantelle</user>
    <text>`$PATH` frustrates me in general</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:55:48.000143</ts>
    <user>Jalisa</user>
    <text>Thought it was only me..</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:56:54.000166</ts>
    <user>Chantelle</user>
    <text>something I really like about racket (and other langs that do this) is that after you add racket's location to `$PATH`, packages can put stuff in there so you can install packages that give you command line tools without messing around with `$PATH`</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T20:59:56.000091</ts>
    <user>Jalisa</user>
    <text>Right, that was another reason I looked at Racket; things seem to just work.</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:05:33.000211</ts>
    <user>Jalisa</user>
    <text>&lt;https://i.imgur.com/wQAR8Y0.jpg&gt;

Was excited to get this today.</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:09:39.000015</ts>
    <user>Chantelle</user>
    <text>I've heard good things :)</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:28:14.000249</ts>
    <user>Clorinda</user>
    <text>I'm trying to read through a large number of files with this script:</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:28:16.000029</ts>
    <user>Clorinda</user>
    <text>&lt;https://gist.github.com/pnwamk/02ce911d8a28e32a29bfc621c5c2f273&gt;</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:28:31.000073</ts>
    <user>Clorinda</user>
    <text>I used 30GB of swap space doing so...</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:29:10.000088</ts>
    <user>Clorinda</user>
    <text>I'm calling `close-input-port` at the end of processing each file...</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:30:51.000100</ts>
    <user>Chantelle</user>
    <text>each file is relatively small I assume?</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:30:59.000115</ts>
    <user>Clorinda</user>
    <text>yah</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:31:17.000028</ts>
    <user>Clorinda</user>
    <text>well... all the racket files from the package server...</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:31:24.000224</ts>
    <user>Chantelle</user>
    <text>ah gotcha</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:31:43.000122</ts>
    <user>Clorinda</user>
    <text>but they're racket source files -- I imagine none are too big</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:32:29.000061</ts>
    <user>Clorinda</user>
    <text>I wasn't expecting my code to win any races... but I'm a little puzzled why it's bringing my OS to a halt =\</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:32:59.000145</ts>
    <user>Chantelle</user>
    <text>if you don't call `search-sexp!` do you still get huge memory consumption?</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:33:09.000134</ts>
    <user>Clorinda</user>
    <text>let me try...</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:34:26.000063</ts>
    <user>Clorinda</user>
    <text>okay yah that seemed to fix it -- I bet I've got an embarrassing infinite loop in that function</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:34:32.000113</ts>
    <user>Clorinda</user>
    <text>thanks again &lt;@Chantelle&gt;! :smiley:</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:35:02.000146</ts>
    <user>Chantelle</user>
    <text>glad to help :D although I have no idea why your sexp function would be consuming tons of memory</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:35:18.000143</ts>
    <user>Clorinda</user>
    <text>me neither... more digging! :smiley:</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:35:39.000121</ts>
    <user>Chantelle</user>
    <text>testing this with `custodian-limit-memory` might be interesting</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:36:03.000136</ts>
    <user>Clorinda</user>
    <text>I prefer to live on the edge of my seat -- wondering if OS X will just freeze up and die</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:36:08.000084</ts>
    <user>Clorinda</user>
    <text>XD</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:36:11.000054</ts>
    <user>Chantelle</user>
    <text>that works too</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:47:27.000070</ts>
    <user>Marlin</user>
    <text>&lt;@Clorinda&gt; try changing `with-handlers` to `with-handlers*`</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:48:30.000017</ts>
    <user>Chantelle</user>
    <text>&lt;@Marlin&gt; if the `try-read` call isn't recursive, would the tail call benefits of `with-handlers*` matter?</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:49:22.000019</ts>
    <user>Marlin</user>
    <text>oh, yeah, I ~think I~ definitely misread that. sorry!</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T21:51:16.000122</ts>
    <user>Clorinda</user>
    <text>I added a sleep to the for loop (a tenth of a second) and things are okay so far... =)</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T22:03:42.000216</ts>
    <user>Clorinda</user>
    <text>hah! it's because one of the files has a cyclic data structure in it that my code just keeps diving into XD</text>
  </message>
  <message conversation_id="378">
    <ts>2017-10-18T22:05:00.000120</ts>
    <user>Clorinda</user>
    <text>didn't think I'd have to add cycle detection when reading source code contents, hahaha</text>
  </message>
  <message conversation_id="379">
    <ts>2017-10-19T13:00:54.000282</ts>
    <user>Ka</user>
    <text>The trick I use is to put (when I'm on macOS) `/Applications/Racket/bin` in my path and then symlink (`ln -s`) the current Racket distribution to `/Applications/Racket`. So, futz with it once, and be done forever.</text>
  </message>
  <message conversation_id="379">
    <ts>2017-10-19T13:59:08.000101</ts>
    <user>Lashaunda</user>
    <text>how do I make a text-field% right-justified?</text>
  </message>
  <message conversation_id="379">
    <ts>2017-10-19T14:02:18.000355</ts>
    <user>Jalisa</user>
    <text>@apg thanks. I think what I did was add it to `/etc/path`.</text>
  </message>
  <message conversation_id="380">
    <ts>2017-10-19T16:16:10.000141</ts>
    <user>Vincenzo</user>
    <text>&lt;@Lashaunda&gt; More difficult than it should be:
```
(define text-field-right-align%
  (class text-field%
    (inherit get-editor get-client-size)
    (define/private (reset-width)
      (define e (get-editor))
      (define wb (box 0.0))
      (send (send e get-admin) get-view #f #f wb #f)
      (send e set-max-width (- (unbox wb) 2))
      (send e set-paragraph-alignment 0 'right))
    (define/override (on-size w h)
      (super on-size w h)
      (reset-width))
    (init [callback void])
    (super-new [callback (lambda (t e)
                           ;; an editor tends to lose
                           ;; its alignment if all the text
                           ;; is deleted, so reset it
                           ;; after any change
                           (reset-width)
                           (callback t e))])
    (reset-width)))
```</text>
  </message>
  <message conversation_id="380">
    <ts>2017-10-19T16:17:27.000353</ts>
    <user>Lashaunda</user>
    <text>&lt;@Vincenzo&gt; Awesome, thanks so much!</text>
  </message>
  <message conversation_id="380">
    <ts>2017-10-19T16:19:46.000333</ts>
    <user>Vincenzo</user>
    <text>Well, the resizing part doesn't work for me. It looks like `on-size` isn't called on Mac OS, so that's a bug.</text>
  </message>
  <message conversation_id="380">
    <ts>2017-10-19T16:36:16.000048</ts>
    <user>Lashaunda</user>
    <text>It will take some tweaking, my digits are cut off a little on the right until I resize, but it's a good start, and gives me something to work with, thanks again!</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T17:30:36.000120</ts>
    <user>Kimbery</user>
    <text>I’m having a really rough time figuring out how to get Scribble to cooperate with multiple namespaces, largely because it seems like all the APIs for registering definitions of Racket identifiers are private APIs. Someone previously pointed me at some code that uses `id-to-target-maker` from `scribble/private/manual-bind`, but it’s all very complicated, and I don’t totally understand how it works.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T17:32:04.000323</ts>
    <user>Kimbery</user>
    <text>Frustratingly, Scribble doesn’t seem to be figuring out that my binding is being documented, complaining about undefined tags, but I have no idea how to debug _why_ they aren’t defined.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T17:44:34.000202</ts>
    <user>Kimbery</user>
    <text>It looks like `id-to-target-maker` accepts an `identifier?`, but doesn’t actually use its lexical context? And the symbolic name matters?</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T17:52:56.000225</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; Is `xref-binding-&amp;gt;definition-tag` from `scribble/xref` (a public API) on the right path for what you want?</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T17:55:34.000130</ts>
    <user>Kimbery</user>
    <text>That looks possibly closer, though I’m not sure how to use what it produces. I’m making my own form similar to `defproc` and friends, all of which appear to use this `id-to-target-maker` thing.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:06:26.000398</ts>
    <user>Vincenzo</user>
    <text>Actually, no, `xref-binding-&amp;gt;definition-tag` is not the right thing. That's for looking up a tag.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:07:57.000244</ts>
    <user>Kimbery</user>
    <text>Right. I’m looking to bind a tag. I got something that _almost_ seems to work by carefully arranging for the symbolic name to be the right one, but as far as I can tell, it isn’t easily possible to render a link to a racket identifier with `to-element`’s `#:defn? #t` style without making the text of the link the symbolic name of the export.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:11:55.000163</ts>
    <user>Vincenzo</user>
    <text>That problem sounds familiar. I vaguely remember trying to work around that once myself and not succeeding, but I don't remember the details or whether I found another way.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:13:30.000055</ts>
    <user>Vincenzo</user>
    <text>I think I tried to use `make-element-id-transformer`.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:14:52.000080</ts>
    <user>Vincenzo</user>
    <text>I may have ended up arranging a `for-label` import with the name that I wanted to render.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:15:07.000062</ts>
    <user>Kimbery</user>
    <text>I was thinking about trying for that latter thing.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:16:22.000032</ts>
    <user>Kimbery</user>
    <text>The unfortunate thing here is that, even if I _do_ manage to get this working, the hacks are starting to pile up rather high. It’s not too bad if it’s all contained within Hackett’s implementation, but some of this Scribble stuff would leak out into users’ library documentation.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:17:15.000038</ts>
    <user>Kimbery</user>
    <text>And I usually try very hard to avoid complaining about this sort of thing, but the Scribble internals do not seem especially pleasant. :/</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:18:30.000347</ts>
    <user>Vincenzo</user>
    <text>It's even more of a prototype-that-got-out-of-hand than most things</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-19T18:46:21.000359</ts>
    <user>Kimbery</user>
    <text>Well, I was feeling about ready to throw in the towel, but arranging for the right `for-label` import seems to have worked(ish), so that was helpful.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-20T14:46:20.000041</ts>
    <user>Kimbery</user>
    <text>I think I am _very_ close to getting multiple namespaces working semi-smoothly in Hackett. The only significant remaining obstacle is documenting Hackett’s base types and type-level forms, like `forall`. I use `defform` and `defidform` to document them, but frustratingly, it seems impossible to get `defform` to document an identifier with any other name than how it is exported from the module. I am, however, reluctant to reimplement half of `defform` in Hackett.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-20T14:48:49.000468</ts>
    <user>Kimbery</user>
    <text>I guess I _could_ just copy `scribble/private/manual-form` into Hackett’s codebase and tweak it slightly, but that seems like the option of last resort. Maybe it will be necessary, though.</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-20T14:56:17.000381</ts>
    <user>Ka</user>
    <text>all the software i've ever worked on / written professionally is exactly this. :disappointed:</text>
  </message>
  <message conversation_id="382">
    <ts>2017-10-20T16:48:47.000217</ts>
    <user>Shad</user>
    <text>Is there not an introducer you can use on an identifier to assert which namespace it's in?</text>
  </message>
  <message conversation_id="381">
    <ts>2017-10-20T16:52:03.000178</ts>
    <user>Kimbery</user>
    <text>The trouble is that Scribble’s binding documentation forms don’t really pay any attention to hygiene. (But shhh, don’t tell anyone.)</text>
  </message>
  <message conversation_id="382">
    <ts>2017-10-20T17:26:09.000210</ts>
    <user>Shad</user>
    <text>Oh that's a pity</text>
  </message>
  <message conversation_id="382">
    <ts>2017-10-20T17:28:29.000097</ts>
    <user>Nelson</user>
    <text>time for a "Scribble: closing the book on unhygienic documentation tools" ?</text>
  </message>
  <message conversation_id="382">
    <ts>2017-10-20T17:28:50.000249</ts>
    <user>Kimbery</user>
    <text>`#lang scribble/manual2`</text>
  </message>
  <message conversation_id="382">
    <ts>2017-10-20T17:30:23.000167</ts>
    <user>Kimbery</user>
    <text>I’m not even sure if respecting hygiene would actually solve this problem, though, sadly. There’s a variety of moving parts at play.</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:09:48.000181</ts>
    <user>Chantelle</user>
    <text>can a module provide the same symbol with two different bindings?</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:10:08.000209</ts>
    <user>Chantelle</user>
    <text>if not I'm not sure how hygiene applies to scribble</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:11:02.000198</ts>
    <user>Noe</user>
    <text>Can anyone remind me why syntax parameters can’t be just be implemented with parameterize at phase 1 + syntax-local-expand-expression? The Scheme Workshop paper includes a comment that this wouldn’t work because compile-time state is ephemeral, but I can’t figure how to construct an example where it would matter given local-expand’s refusal to look under let-syntax anyway. The solution in the racket 7 expander doesn’t feel appreciably different than using a phase 1 parameter, as there it’s using the current expand context parameter.</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:12:22.000028</ts>
    <user>Chantelle</user>
    <text>&lt;@Noe&gt; not sure, but since parameters are intrinsically related to thread cells and the like it seems like a strange choice in general. Macro expansion isn't performed in a multi-threaded way (at least within a module)</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:12:55.000203</ts>
    <user>Chantelle</user>
    <text>so why add the complexity of thread cells at all if there's no concurrency involved?</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:13:42.000130</ts>
    <user>Noe</user>
    <text>Isn’t that just an argument to use fluid-let instead of parameterize?</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:14:58.000109</ts>
    <user>Noe</user>
    <text>I guess my impression from the seeming deprecation of fluid-let is that parameterize is just as efficient for Racket, or at least efficient enough, but I don’t really know.</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:16:19.000215</ts>
    <user>Noe</user>
    <text>Parameters also have a nicer API where you explicitly call out your dynamically bound values as parameters up-front, which is another reason to like them regardless of whether you care about the threading behavior.</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:21:58.000206</ts>
    <user>Chantelle</user>
    <text>I'm guessing the compile time state part of the paper is referring to how using state and side effects during macro expansion can cause differences to arise based on whether modules are compiled ahead of time or compiled and run interactively</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T19:23:47.000009</ts>
    <user>Chantelle</user>
    <text>I don't know the details well enough to think of a specific example and demonstrate how it goes wrong, but reading The Separate Compilation Guarantee in the racket reference and reading the Composable and Compilable Macros paper are probably good places to go hunting for details</text>
  </message>
  <message conversation_id="384">
    <ts>2017-10-20T20:18:07.000086</ts>
    <user>Kimbery</user>
    <text>not at the same phase.</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T20:19:31.000045</ts>
    <user>Kimbery</user>
    <text>&lt;@Noe&gt; I don’t know, but using `syntax-local-expand-expression` would force a specific expansion order, whereas syntax parameters don’t.</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T23:35:23.000018</ts>
    <user>Vincenzo</user>
    <text>&lt;@Noe&gt; I think the paper's explanation was probably intended to address wrapping a `local-expand` with `parameterize`, and probably we agree that such an implementation wouldn't work. I don't quite see what you have in mind with `let-syntax`. In any case, the current implementation also supports `splicing-syntax-parameterize` in a way that I think parameters can't. (I forget where splicing parameterize is used, but it seemed important at some point.)</text>
  </message>
  <message conversation_id="383">
    <ts>2017-10-20T23:36:53.000036</ts>
    <user>Kimbery</user>
    <text>I’m getting good milage out of it :)</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:39:55.000066</ts>
    <user>Latarsha</user>
    <text>I've just developed a very odd problem. After a few seconds (or sometimes immediately) the slideshow keybindings stop working</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:43:23.000054</ts>
    <user>Latarsha</user>
    <text>No slides switch, and I can't quit (have to kill the program). Any thoughts on how to debug this issue are welcome, since I have to give a talk in a few days.</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:43:35.000067</ts>
    <user>Latarsha</user>
    <text>cc &lt;@Vincenzo&gt; &lt;@Tina&gt;</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:44:21.000169</ts>
    <user>Tina</user>
    <text>You could put a printf down inside the low level key handling routine and see if that shows up</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:44:53.000044</ts>
    <user>Tina</user>
    <text>I don’t have any good ideas, in case that wasn’t obvious from the above. :grinning:</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:46:15.000093</ts>
    <user>Latarsha</user>
    <text>&lt;@Tina&gt; Do you know offhand which file I should look in? Otherwise I'll find it</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:50:04.000001</ts>
    <user>Tina</user>
    <text>not offhand; I would have to poke around to recall</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:50:15.000053</ts>
    <user>Latarsha</user>
    <text>Ok, thanks, I'll have a look</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:50:16.000037</ts>
    <user>Tina</user>
    <text>(But Matthew did a lot more than I ever did.</text>
  </message>
  <message conversation_id="385">
    <ts>2017-10-22T21:50:19.000037</ts>
    <user>Tina</user>
    <text>)</text>
  </message>
  <message conversation_id="386">
    <ts>2017-10-22T22:13:29.000054</ts>
    <user>Latarsha</user>
    <text>Well, further investigation (thanks for the suggestion Robby) tells me that `do-key-event` in `mred/private/wx/window.rkt` is never called when the bad behavior happens</text>
  </message>
  <message conversation_id="386">
    <ts>2017-10-22T22:14:52.000038</ts>
    <user>Latarsha</user>
    <text>Which I think means that somehow the connection to GTK has gone wrong</text>
  </message>
  <message conversation_id="386">
    <ts>2017-10-23T08:44:23.000190</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; This is with the current git master and not the v6.11 pre-release or earlier, right?
William is having similar problems: &lt;https://github.com/racket/gui/issues/80&gt;
I haven't investigated enough, yet</text>
  </message>
  <message conversation_id="386">
    <ts>2017-10-23T08:46:38.000328</ts>
    <user>Latarsha</user>
    <text>This is indeed with git master</text>
  </message>
  <message conversation_id="386">
    <ts>2017-10-23T08:46:49.000337</ts>
    <user>Latarsha</user>
    <text>I haven't tried the prerelease</text>
  </message>
  <message conversation_id="387">
    <ts>2017-10-23T09:03:45.000122</ts>
    <user>Vincenzo</user>
    <text>I've pushed a possible repair</text>
  </message>
  <message conversation_id="386">
    <ts>2017-10-23T09:48:46.000164</ts>
    <user>Latarsha</user>
    <text>&lt;@Stefani&gt; would it make sense to just remove this package? &lt;https://pkgs.racket-lang.org/package/qudongfang&gt;</text>
  </message>
  <message conversation_id="386">
    <ts>2017-10-23T12:11:59.000364</ts>
    <user>Stefani</user>
    <text>&lt;@Latarsha&gt; done</text>
  </message>
  <message conversation_id="386">
    <ts>2017-10-23T12:24:30.000014</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; so far, things seem to be working with that repair -- thanks for the quick fix!</text>
  </message>
  <message conversation_id="386">
    <ts>2017-10-23T12:25:14.000098</ts>
    <user>Latarsha</user>
    <text>Question -- how do I build the racket web pages, after the conversion to pollen? The instructions in the readme don't seem to work</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:07:38.000219</ts>
    <user>Nelson</user>
    <text>anyone know how to insert latex symbols in DrRacket on windows?</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:08:35.000270</ts>
    <user>Nelson</user>
    <text>I tried, `\tauC-\` and that didn't work. Searched the help menu and saw `~cm:\` but I don't know what that means.</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:22:44.000124</ts>
    <user>Georgeanna</user>
    <text>&lt;@Nelson&gt; I just did `\Downarrow` and then `C-\` and it worked. So I think that means  “either control or meta backslash”</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:23:33.000178</ts>
    <user>Georgeanna</user>
    <text>I found “3.3.8 LaTeX and TeX inspired keybindings” in the doco searching for latex</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:24:04.000261</ts>
    <user>Georgeanna</user>
    <text>`\Tau C-\` works too</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:32:23.000139</ts>
    <user>Nelson</user>
    <text>ok thanks, I emailed this to the person who's having trouble. Will let you know if it worked :slightly_smiling_face:</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-23T18:33:01.000194</ts>
    <user>Latarsha</user>
    <text>Anyone here going to SPLASH in Vancouver?</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:38:28.000010</ts>
    <user>Nelson</user>
    <text>wooo success! here's the play-by-play:</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:38:28.000126</ts>
    <user>Nelson</user>
    <text>Just tried \Tau with c:\, m:\ and neither worked?</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:38:38.000098</ts>
    <user>Nelson</user>
    <text>Oh. \Downarrow with m:\ works</text>
  </message>
  <message conversation_id="388">
    <ts>2017-10-23T18:38:46.000005</ts>
    <user>Nelson</user>
    <text>Ok yes m:\ is the way to go. Thanks a lot!!!!!</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-23T18:59:12.000228</ts>
    <user>Georgeanna</user>
    <text>I am!</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-23T19:00:26.000146</ts>
    <user>Georgeanna</user>
    <text>it’s been a long time since I’ve been, but there’s usually “camp smalltalk” with Don and others perma-camped there… we should do the same for racket. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="390">
    <ts>2017-10-23T20:03:50.000275</ts>
    <user>Ka</user>
    <text>SPLASH looks crazy</text>
  </message>
  <message conversation_id="390">
    <ts>2017-10-23T20:03:58.000132</ts>
    <user>Ka</user>
    <text>so many talks and things.</text>
  </message>
  <message conversation_id="391">
    <ts>2017-10-23T20:22:30.000078</ts>
    <user>Lory</user>
    <text>I'm in Vancouver and don't know anything about splash</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-23T20:23:35.000163</ts>
    <user>Lory</user>
    <text>Oh I just read about it. Looks decent. Not my area though</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-23T21:30:24.000221</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; cool, I'll see you there (I get in tonight late)</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-24T16:57:58.000011</ts>
    <user>Tina</user>
    <text>&lt;@Nelson&gt; &lt;@Georgeanna&gt; see the docs on keymap% for how to interpret those strings.</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-25T11:34:31.000404</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; it I'd soooo small! Making me sad.</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-25T11:42:25.000437</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; ?</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-25T11:45:00.000172</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; just being wistful... This conference used to be huge. I worry it won't have the impact it used to have.</text>
  </message>
  <message conversation_id="392">
    <ts>2017-10-25T12:50:37.000060</ts>
    <user>Ora</user>
    <text>So I’m using Racket for a class and discovered this, if I do (require 2htdp/planetcute) and then (list heart heart), the REPL only shows one image (the heart isn’t repeated), though interestingly if I ask for the length of that same list, it’s 2</text>
  </message>
  <message conversation_id="392">
    <ts>2017-10-25T12:51:30.000274</ts>
    <user>Ora</user>
    <text>Any idea if that’s expected behavior? Easy enough to tell my class to ignore the fact that the repl isn’t printing out the expected list so it’s not a big deal, just thought I’d bring it up</text>
  </message>
  <message conversation_id="392">
    <ts>2017-10-25T12:55:57.000009</ts>
    <user>Latarsha</user>
    <text>&lt;@Ora&gt; that's definitely a bug</text>
  </message>
  <message conversation_id="392">
    <ts>2017-10-25T13:00:12.000176</ts>
    <user>Ora</user>
    <text>Thanks &lt;@Latarsha&gt;, I’ll report it as such :thumbsup:</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-25T13:24:18.000488</ts>
    <user>Georgeanna</user>
    <text>&lt;@Latarsha&gt; I just did Chris Granger’s “how long does it take to make a counting button” example… Even learning enough of `racket/gui` it only took me 3-4 minutes… but is there something I can have represented in the repl that could do the same thing? I had to have a `[parent frame]` thingy to make this demo work and would just like to have a thing drop into the repl w/ some state.</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-25T13:25:33.000419</ts>
    <user>Latarsha</user>
    <text>&lt;@Georgeanna&gt; I don't think there's a really easy way to add a button to the repl, but I know very little `racket/gui` programming</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-25T13:25:50.000300</ts>
    <user>Georgeanna</user>
    <text>looks like `button-snip%` would be close if it weren’t backed by an image</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-25T13:26:13.000192</ts>
    <user>Georgeanna</user>
    <text>oh! `text-button-snip%`</text>
  </message>
  <message conversation_id="389">
    <ts>2017-10-25T13:27:57.000154</ts>
    <user>Georgeanna</user>
    <text>hrm. nope :confused:</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:17:35.000284</ts>
    <user>Ka</user>
    <text>I'm trying to wrap my head around units and how to think about them. They seem mostly prevalent in gui code written in the pre-Racket days (PLT Games, Slideshow, etc), but they seem like a pretty powerful construct for building other applications and structuring libraries around.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:19:08.000235</ts>
    <user>Ka</user>
    <text>As an example, &lt;@Kimbery&gt;'s envy project seems like a natural fit. envy could produce a signature, and the environment parsing could produce a unit that matches the signature for use everywhere.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:19:43.000293</ts>
    <user>Ka</user>
    <text>but, in testing, you could provide a "mocked" unit...</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:20:46.000233</ts>
    <user>Ka</user>
    <text>but, based on my peering into slideshow's code, it seems like units "infect" -- I'm not sure if that's just the style of slideshow's codebase, or a practical "limitation" of working with them. Is my understanding accurate?</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:22:21.000207</ts>
    <user>Ka</user>
    <text>And, finally: does it make sense to think of a unit as a "parameterizable, reinvokable" module?</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:30:29.000732</ts>
    <user>Vincenzo</user>
    <text>&lt;@Ka&gt; Yes, a parameterizable, reinvokable module is definitely the right idea. A unit cannot import or export macros, although macros can be "exported" in unit signatures.
Yes, units tend infect if you want to parameterize in interesting ways, and the overhead of doing that is why they're not used as pervasively as we originally imagined.
Units are still a decent option for dealing with mutual dependencies, since units allow cycles in the dependency graph, and modules don't. Units can also be good for parameterization, but `lambda` turns out to be enough more often than not.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:36:54.000074</ts>
    <user>Ka</user>
    <text>&lt;@Vincenzo&gt; thanks for the explanation! the other analogy I thought of is simply a class. but, that's more squinty.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:44:21.000268</ts>
    <user>Ka</user>
    <text>what if units were extended to support a notion of *calling into* -- `send` in class terms, such that they could be linked without affecting local bindings (which is where I think the "infectiousness" stems from)?</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:45:43.000675</ts>
    <user>Ka</user>
    <text>so for every exportable you could write the equivalent of `(unit@ some-function-in-sig)` ?</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:48:11.000476</ts>
    <user>Ka</user>
    <text>to call the `some-function-in-sig` *without* binding it in your current module's namespace</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:48:48.000171</ts>
    <user>Ka</user>
    <text>sort of a dynamic "fluid" import of sorts</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:48:52.000300</ts>
    <user>Vincenzo</user>
    <text>You can use `(let () (define-values/invoke-unit ....) ....)` to do that kind of thing.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:49:37.000336</ts>
    <user>Ka</user>
    <text>hmm.. does invoking the unit cost a lot though?</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:51:04.000647</ts>
    <user>Vincenzo</user>
    <text>It costs some, similar to calling a function that contains definitions in its body. If you want a single instance that acts like an object, then you could certainly implement that macro. There's a compile-time API to inspect signatures.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:51:47.000420</ts>
    <user>Ka</user>
    <text>yeah, i guess the thing I want is temporary, or fluid "linkage"</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:52:44.000446</ts>
    <user>Ka</user>
    <text>if the unit performs some sort of expensive computation, invoking it multiple times to call a single function from it (like, with the define-values/invoke-unit) seems costly</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:53:37.000526</ts>
    <user>Ka</user>
    <text>where as, an already invoked unit that wasn't linked (if such a thing is possible) provides this sort of first class object that I can "tap" into when needed only.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:53:45.000143</ts>
    <user>Ka</user>
    <text>but, i guess i could just use a class for that, too.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:54:23.000222</ts>
    <user>Ka</user>
    <text>does any of this make sense?</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:55:33.000431</ts>
    <user>Ka</user>
    <text>with the *advantage* that these things can be parameterized and customized effectively.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:55:41.000429</ts>
    <user>Ka</user>
    <text>(e.g. a plugin system or something)</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T14:59:44.000241</ts>
    <user>Vincenzo</user>
    <text>Yes, that all make sense, including the idea that you might just use a class (possibly under a `lambda`)</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:01:55.000545</ts>
    <user>Ka</user>
    <text>is there an easy way in racket/class classes to enforce a thing implements an interface, in the same way a unit is checked against a signature?</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:13:30.000175</ts>
    <user>Ka</user>
    <text>I guess as a final point, maybe the best idea is a macro, like you suggested (and I'm just catching up to), that invokes a unit, captures and saves off it's exports into a first class thing (e.g. a struct) that can get the dynamic linkage I'm searching for, without the cost of reinvoking the unit each time.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:18:09.000375</ts>
    <user>Ka</user>
    <text>maybe a struct with a prop:procedure that ties it all together. :thinking_face:</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:18:17.000476</ts>
    <user>Ka</user>
    <text>thanks again, &lt;@Vincenzo&gt;</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:36:54.000027</ts>
    <user>Corey</user>
    <text>&lt;@Ka&gt; If you want runtime linkage another idea is to start with `dynamic-require`, and build up from that that?</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:37:19.000058</ts>
    <user>Corey</user>
    <text>Let's say, the plugin interface requires plugins to provide functions named `start` `do` and `finish` -- or provide a struct or class named `the-interface`.</text>
  </message>
  <message conversation_id="394">
    <ts>2017-10-25T15:37:35.000642</ts>
    <user>Corey</user>
    <text>On the consuming side your app could store the `dynamic-require`d result(s) in var(s) wrapped in contract(s) if you wish.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:38:31.000568</ts>
    <user>Corey</user>
    <text>(Maybe I didn't follow the discussion well. Just wanted to point out that `dynamic-require` is a thing. Maybe too low-level for what you're trying to do.)</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:44:55.000197</ts>
    <user>Ka</user>
    <text>&lt;@Corey&gt; I'm not, yet, trying to do anything. Just exploring what units are (and are not) good for.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:45:45.000121</ts>
    <user>Ka</user>
    <text>`dynamic-require` sounds worth exploring, though I'm not sure it gets at the ability to "mock" things like in my example with envy.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:45:54.000215</ts>
    <user>Ka</user>
    <text>maybe.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:53:27.000153</ts>
    <user>Ka</user>
    <text>hmmm, yeah, I guess other than the signature aspect of it, &lt;@Corey&gt;, this could work the same way.</text>
  </message>
  <message conversation_id="393">
    <ts>2017-10-25T15:54:11.000017</ts>
    <user>Ka</user>
    <text>you still get the separation of namespaces that are important in this theoretical use case. worth considering, for sure.</text>
  </message>
  <message conversation_id="395">
    <ts>2017-10-25T19:06:02.000028</ts>
    <user>Ka</user>
    <text>does anyone have context on neil van dyke's "uri-old" package?</text>
  </message>
  <message conversation_id="395">
    <ts>2017-10-25T19:06:17.000095</ts>
    <user>Ka</user>
    <text>is it called "uri-old" because there's a new thing? or something else?</text>
  </message>
  <message conversation_id="395">
    <ts>2017-10-25T19:07:10.000226</ts>
    <user>Ka</user>
    <text>oh. nevermind. it's "old and obsolete, but nevertheless still in use."</text>
  </message>
  <message conversation_id="395">
    <ts>2017-10-25T19:11:55.000198</ts>
    <user>Ka</user>
    <text>I ask, mostly, because I'm curious why net/url doesn't provide a `#url"&lt;http://blargh&gt;"` reader like uri-old does.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T19:43:14.000112</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Do you have any intuition around whether or not it would be possible to make `splicing-syntax-parameterize` used in a `'module-begin` context apply to declarations lifted with `syntax-local-lift-module-begin-declaration`? It seems like it would be necessary to force expansion using `local-expand`, but that seems like it would be okay in a `'module-begin` context, since the expander is going to recursively expand the module, anyway. Does that make sense, or am I speaking nonsense?</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:46:24.000002</ts>
    <user>Vincenzo</user>
    <text>&lt;@Kimbery&gt; Do you mean `local-expand/capture-lifts`? It sounds like that could work.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:47:09.000044</ts>
    <user>Kimbery</user>
    <text>I just mean `local-expand`… my understanding is `local-expand/capture-lifts` is only for `syntax-local-lift-expression`. I want to make this work for something that uses `syntax-local-lift-module-end-declaration`.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:48:01.000006</ts>
    <user>Vincenzo</user>
    <text>Oh, I see. I'm less optimistic about that.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:48:43.000073</ts>
    <user>Kimbery</user>
    <text>I’ve hacked something together since I asked the question, and it passes the tests I wrote. However, it doesn’t seem to be working in my “real” problem, so I’m not sure what’s going on.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:49:22.000007</ts>
    <user>Kimbery</user>
    <text>I _did_ observe that calling `local-expand` with `'module-begin` as the context seems to, indeed, capture things lifted by `syntax-local-lift-module-end-declaration`.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:52:29.000160</ts>
    <user>Kimbery</user>
    <text>For context, here are the changes I attempted so far: &lt;https://github.com/lexi-lambda/racket/commit/eb5a3be3c8c4ca2e5b3e5c8eed06b60b78e13262&gt;</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:53:30.000103</ts>
    <user>Vincenzo</user>
    <text>My guess is that expansion for `'module-begin` either goes too far or a partial doesn't go far enough to expose all of the relevant lifts, but maybe it can be made to work</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:55:25.000151</ts>
    <user>Kimbery</user>
    <text>When in a `'module-begin` context, after the initial introduction of `#%module-begin`, doesn’t the expander recursively expand the module, anyway? There’s no more partial expansion at that point, right?</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:56:41.000006</ts>
    <user>Vincenzo</user>
    <text>Yes, but I was thinking that you need something to be partial to add the parameterization. But maybe I haven't given it enough thought, and I can look more tomorrow</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T20:57:30.000029</ts>
    <user>Kimbery</user>
    <text>Okay. My naïve attempt just bound the identifiers in a first-class definition context, then called `(local-expand stx 'module-begin '() ctx)`.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T21:00:28.000216</ts>
    <user>Kimbery</user>
    <text>The main reason I’m trying this, for what it’s worth, is to avoid needing to reimplement `module+` for Hackett. I started by trying to ditch syntax parameters entirely and just use phase 1 parameters, but I don’t think that interacts with submodules properly, an issue I stumbled into before.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T21:01:25.000032</ts>
    <user>Kimbery</user>
    <text>So it _seems_ like binding the right identifiers and forcing recursive expansion should work alright, even if it’s a little roundabout. But it isn’t working, so I’m trying to figure out why.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T21:23:39.000103</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Here’s a reduced program I’ve managed to come up with that completely perplexes me:
```
#lang racket

(require syntax/parse/define)

(define-syntax x #f)

(define-simple-macro (print-shadower!)
  #:do [(println (syntax-local-value (syntax-local-get-shadower #'x)))]
  (void))

(define-simple-macro (expand-and-shadow form ...)
  #:do [(define ctx (syntax-local-make-definition-context))
        (syntax-local-bind-syntaxes (list (syntax-local-introduce (syntax-local-get-shadower #'x)))
                                    #'#t
                                    ctx)]
  #:with result (local-expand #'(#%plain-module-begin form ...) 'module-begin '() ctx)
  #:do [(println (syntax-&amp;gt;datum #'result))]
  result)

(module* a #f (expand-and-shadow (print-shadower!)))
(module* b #f (expand-and-shadow (define y (print-shadower!))))
```
Here’s the output:
```
#t
'(#%plain-module-begin (#%app void))
#f
'(#%plain-module-begin (define-values (y) (#%app void)))
```
Why does the second example print `#f`?</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T21:23:57.000099</ts>
    <user>Kimbery</user>
    <text>I think I must not understand how first-class definition contexts work.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T21:24:43.000017</ts>
    <user>Kimbery</user>
    <text>Also, excitingly, it seems that using `syntax-local-make-definition-context` in a `'module-begin` context produces an internal expander error on racket7.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T21:32:05.000170</ts>
    <user>Kimbery</user>
    <text>Here’s an even simpler test case:
```
#lang racket

(require syntax/parse/define)

(define-simple-macro (bind-and-expand x:id form ...)
  #:do [(define ctx (syntax-local-make-definition-context))
        (syntax-local-bind-syntaxes (list #'x) #'(λ (stx) (println stx) #'(void)) ctx)]
  #:with result (local-expand #'(#%plain-module-begin form ...) 'module-begin '() ctx)
  #:do [(writeln (syntax-&amp;gt;datum #'result))]
  result)

(module* a #f (bind-and-expand x x))
(module* b #f (bind-and-expand x (define y x)))
```
The first `module*` declaration compiles fine, but the second produces an identifier-used-out-of-context error.</text>
  </message>
  <message conversation_id="396">
    <ts>2017-10-25T21:39:40.000086</ts>
    <user>Kimbery</user>
    <text>This weirdness really does seem potentially specific to `'module-begin` because I can’t get similar behavior with other expansion contexts, and the fact that it crashes the new expander seems like reason to believe it’s doing something strange.</text>
  </message>
  <message conversation_id="397">
    <ts>2017-10-26T00:34:05.000121</ts>
    <user>Chantelle</user>
    <text>I have Many Opinions about both this and uris in general</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T13:36:39.000027</ts>
    <user>Ka</user>
    <text>I've been fiddling with my corporate issued laptop this morning trying to find a free SVG editor to PNGize them after changing some colors, because PowerPoint (in 2016) doesn't support SVG. BUT THEN, I realized: "rsvg exists, why the hell am I not just using that?"</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T13:37:30.000325</ts>
    <user>Ka</user>
    <text>I'd love to hear them!</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T13:39:36.000095</ts>
    <user>Chantelle</user>
    <text>main first issue is that URIs have a generic syntax and DNS addresses are not part of that syntax</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T13:39:52.000125</ts>
    <user>Chantelle</user>
    <text>specific schemes refine the syntax</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T13:40:02.000295</ts>
    <user>Chantelle</user>
    <text>so a generic reader wouldn't be able to tell you as much as you'd assume</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T13:43:10.000035</ts>
    <user>Ka</user>
    <text>you might not be able to completely *validate* at read time, sure.</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T13:43:33.000154</ts>
    <user>Ka</user>
    <text>but a url has parts: scheme host path query, etc.</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T13:43:53.000295</ts>
    <user>Ka</user>
    <text>that are generally standardized, yes?</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T13:48:43.000363</ts>
    <user>Ka</user>
    <text>hmmm. though, i can't seem to use pict to colorize the result.</text>
  </message>
  <message conversation_id="399">
    <ts>2017-10-26T14:10:09.000070</ts>
    <user>Latarsha</user>
    <text>Maybe turn it to a bitmap and then colorize?</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:13:14.000496</ts>
    <user>Ka</user>
    <text>&lt;@Latarsha&gt; yeah, that's likely my strategy, and what &lt;@Magnolia&gt; said on irc. likely easier to just add the color to the document though. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:13:26.000355</ts>
    <user>Ka</user>
    <text>(and scale and render to png with racket)</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:17:24.000207</ts>
    <user>Chantelle</user>
    <text>they are and a reader syntax would be nice</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:17:40.000049</ts>
    <user>Chantelle</user>
    <text>but it would be less nice than having a proper definition of uris and related types in the first place</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:18:17.000045</ts>
    <user>Chantelle</user>
    <text>(which I'm working on right now btw! contributions welcome)</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:18:58.000412</ts>
    <user>Ka</user>
    <text>where is the work being done?</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:20:02.000603</ts>
    <user>Chantelle</user>
    <text>github repo that's temporarily private due to google IP assignment bureaucracy</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:20:33.000318</ts>
    <user>Ka</user>
    <text>ah ha!</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:20:45.000081</ts>
    <user>Chantelle</user>
    <text>I can send you an invite (which I have to a few others who like backend web dev stuff)</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:21:48.000054</ts>
    <user>Chantelle</user>
    <text>I'm at work conference in NYC all week though so I'm shorter on time than usual</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:24:39.000187</ts>
    <user>Ka</user>
    <text>please do send an invite. would be interesting to see if i could help in some way.</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:44:37.000169</ts>
    <user>Chantelle</user>
    <text>will do, also the &lt;#C7KDZQKL5|web&gt; channel is a channel I made and invited everyone else I sent invites to</text>
  </message>
  <message conversation_id="398">
    <ts>2017-10-26T14:48:21.000426</ts>
    <user>Ka</user>
    <text>awesome</text>
  </message>
  <message conversation_id="400">
    <ts>2017-10-26T15:29:37.000234</ts>
    <user>Jalisa</user>
    <text>I spend a lot of my time with Haskellers—no doubt they’re very smart people! But I’m truly trying to _learn_ programming the proper way. Seems like I’m always brought back to Racket.

Had a chance to listen to this podcast which was totally enlightening and mostly unbiased. Very good points made:

&lt;https://www.functionalgeekery.com/episode-112-micheal-sperber/&gt;</text>
  </message>
  <message conversation_id="400">
    <ts>2017-10-26T20:10:46.000007</ts>
    <user>Jalisa</user>
    <text>If you didn't get to listen, here [partly cut and paraphrased] is one key point I received from the podcast:

&amp;gt; *Question:* Are there certain things you wished you had across all the languages? For instance, some people fall in love with macros or types. What are some of the things you've found from all these different languages, that, if you had to pick—maybe wave a magic wand ... what true language if you could get some of these features out in addition to the immutability and, at least, _thinking_ in types?

&amp;gt; *Answer:* Well, it's definitely not static types. But macros or syntactic abstraction is something that I think makes sense across the entire spectrum of functional languages. Few people understand it. A lot of the pioneering work in syntactic abstraction has been done in the context of the Scheme and Racket language. They introduce things like: you could write macros [originating in Lisp] in the language you're also writing your programs in. The Scheme language has the idea of hygiene, and then there's a couple of things Racket refines. Macros are great for teaching and for doing things systematically. *The mechanisms to make that happen are very poorly understood outside of the Scheme and Racket community. For example, the Haskell people have a bunch of hacks to solve the same kind of problems that Racket and Scheme solve with a very small number of very powerful mechanisms.* —_Functional Geekery Episode 112 – Micheal Sperber_</text>
  </message>
  <message conversation_id="400">
    <ts>2017-10-26T20:17:31.000130</ts>
    <user>Stefani</user>
    <text>Scribble-y question... any way to put something after @subsection to make the content go into the subsection's parent?</text>
  </message>
  <message conversation_id="400">
    <ts>2017-10-26T20:38:47.000119</ts>
    <user>Jalisa</user>
    <text>I've learned that _indentation_ matters in Haskell. Is that the case with Racket, too?</text>
  </message>
  <message conversation_id="400">
    <ts>2017-10-26T20:41:34.000076</ts>
    <user>Marlin</user>
    <text>&lt;@Jalisa&gt; the short answer is no; the longer answer is: it depends on the reader</text>
  </message>
  <message conversation_id="400">
    <ts>2017-10-26T21:23:03.000048</ts>
    <user>Jalisa</user>
    <text>HtDP2e keeps saying in DrRacket to hit `Enter` but I'm almost certain (at least on a Mac) that doesn't work. You have to hit `CMD + R`.</text>
  </message>
  <message conversation_id="401">
    <ts>2017-10-26T21:39:58.000004</ts>
    <user>Kimbery</user>
    <text>I believe it only says to hit enter when you’re in the _interactions window_. It sounds like you’re typing into the definitions window.</text>
  </message>
  <message conversation_id="400">
    <ts>2017-10-26T22:21:16.000043</ts>
    <user>Jalisa</user>
    <text>You're totally right! Thanks.</text>
  </message>
  <message conversation_id="400">
    <ts>2017-10-26T22:22:10.000194</ts>
    <user>Jalisa</user>
    <text>Suppose I didn't realize that was a working REPL. For some reason, I assumed it was only generating the output.</text>
  </message>
  <message conversation_id="400">
    <ts>2017-10-26T22:24:09.000094</ts>
    <user>Jalisa</user>
    <text>DrRacket sure takes up a decent amount of RAM though...</text>
  </message>
  <message conversation_id="401">
    <ts>2017-10-27T13:08:06.000082</ts>
    <user>Ka</user>
    <text>Where the reader is the *user*, and in some cases the text -&amp;gt; racket object reader.</text>
  </message>
  <message conversation_id="402">
    <ts>2017-10-27T13:44:42.000376</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; For the purposes of maintaining two separate namespaces, would there be anything dangerous about making each namespace’s scope a _global_, well-known scope, rather than a separate scope per module? I’m trying to think about if there are corner cases that would break hygiene, but I don’t think so, since the existing per-module scope will prevent bindings across modules from interacting in undesirable ways.</text>
  </message>
  <message conversation_id="402">
    <ts>2017-10-27T14:23:39.000036</ts>
    <user>Shad</user>
    <text>&lt;@Kimbery&gt; would that not entail needing a scope that purports to be distinct from other scopes and the same across builds?</text>
  </message>
  <message conversation_id="402">
    <ts>2017-10-27T14:24:27.000030</ts>
    <user>Kimbery</user>
    <text>It would, but that can be done with the `make-syntax-delta-introducer` trick Matthew pointed out to me the other day:
```
(define-simple-macro (define-value/type-introducers value-introducer:id type-introducer:id)
  #:with scopeless-id (datum-&amp;gt;syntax #f 'introducer-id)
  #:with value-id ((make-syntax-introducer #t) #'scopeless-id)
  #:with type-id ((make-syntax-introducer #t) #'scopeless-id)
  (begin
    (define value-introducer (make-syntax-delta-introducer #'value-id #'scopeless-id))
    (define type-introducer (make-syntax-delta-introducer #'type-id #'scopeless-id))))

(define-value/type-introducers value-introducer type-introducer)
```</text>
  </message>
  <message conversation_id="402">
    <ts>2017-10-27T14:24:52.000203</ts>
    <user>Kimbery</user>
    <text>By embedding the syntax objects in the resulting program and using `make-syntax-delta-introducer`, the scope is preserved across module instantiations.</text>
  </message>
  <message conversation_id="402">
    <ts>2017-10-27T14:28:01.000083</ts>
    <user>Kimbery</user>
    <text>I just tried this approach, and it seems to work fine. It simplifies the implementation a lot, so I am leaning towards it—it eliminates the need for a patched version of `racket/splicing` and a reimplementation of `module+` to cooperate with submodules.</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:40:56.000265</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; saw racket/racket#1870, I've looked into racket on docker stuff a bunch and I'm curious what your plan is there</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:41:51.000403</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; just using it in the linked repo for automated release testing purposes</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:43:01.000003</ts>
    <user>Chantelle</user>
    <text>at a first pass I'm guessing the github issue is dockerfile related rather than racket related</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:49:23.000225</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; Try changing the `# mflatt` section of the dockerfile to this:

```
CMD ["/racket-in-place/bin/racket", "-l", "tests/racket/test", "-l", "tests/htdp-lang/test-htdp", "-l", "tests/compiler/embed/test", "-f", "racket-test-core/tests/racket/pack.rktl"]
```</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:50:01.000063</ts>
    <user>Chantelle</user>
    <text>then to run tests, run the command `sudo docker build . -f Dockerfile-tests -t racket-test &amp;amp;&amp;amp; sudo docker run racket-test`</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:50:42.000371</ts>
    <user>Latarsha</user>
    <text>The GitHub issue fails if I connect to the image and run the command manually</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:51:30.000200</ts>
    <user>Chantelle</user>
    <text>images and containers are different things - image is like binary you compile, container is like process you run</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:51:58.000310</ts>
    <user>Chantelle</user>
    <text>that dockerfile is running the test command when you build the image, so you're in "build mode" and have an AUFS filesystem that does weird things</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:52:16.000267</ts>
    <user>Chantelle</user>
    <text>I think you want to run the tests inside a container spawned from the image instead</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:52:37.000313</ts>
    <user>Chantelle</user>
    <text>containers are the only things you can connect / shell into, you can't "connect" to an image</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T16:55:01.000017</ts>
    <user>Chantelle</user>
    <text>(as an example of AUFS weirdness, putting `RUN rm -rf /some/dir` in a dockerfile does something that's almost, but not quite, entirely unlike what you meant)</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:04:02.000378</ts>
    <user>Latarsha</user>
    <text>Sorry, what I mean is that if I run that docker file, and then connect to the resulting container, and then run the failing test, it continues to fail</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:04:12.000437</ts>
    <user>Latarsha</user>
    <text>Also, what should I do instead of rm?</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:04:46.000066</ts>
    <user>Latarsha</user>
    <text>Also, is there a way to roll back to an earlier point in the build inside a dockerfile?</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:06:04.000227</ts>
    <user>Chantelle</user>
    <text>hmmm</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:06:12.000237</ts>
    <user>Chantelle</user>
    <text>how familiar are you with docker?</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:39:14.000104</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; I've written some docker stuff before, but only for basically scripting a container creation reproducibly</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:42:00.000103</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; okay, so the most important thing to know is that you should assume containers have read-only filesystems and try and understand dockerfiles and the docker command line in terms of that</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:42:29.000165</ts>
    <user>Chantelle</user>
    <text>more accurately, assume containers have _immutable_ filesystems</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:42:41.000252</ts>
    <user>Latarsha</user>
    <text>Ok, that's confusing since I can download and install things</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:42:49.000007</ts>
    <user>Chantelle</user>
    <text>exactly</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:43:14.000344</ts>
    <user>Latarsha</user>
    <text>also, your suggested command also fails</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:44:18.000065</ts>
    <user>Chantelle</user>
    <text>could you paste all output of the `sudo &amp;lt;docker build+run&amp;gt;` command?</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:47:18.000021</ts>
    <user>Latarsha</user>
    <text>basically just some cache hits and then the usual racket test output and then the error message</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:48:44.000090</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; &lt;https://gist.github.com/83e2062f81ce02d55d9f97db41d5c30b&gt;</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:49:54.000098</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; can you nuke your cache first? the output of each build step would be useful</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:50:06.000166</ts>
    <user>Latarsha</user>
    <text>remind me how to do that?</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:50:14.000251</ts>
    <user>Chantelle</user>
    <text>`docker build --no-cache`</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:53:58.000078</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt;, same error: &lt;https://gist.github.com/e6f518b171f893cc89a95fc2543e95b3&gt;</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:57:09.000189</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; I don't think I see error output in that log</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:57:26.000015</ts>
    <user>Latarsha</user>
    <text>yeah that's because I failed to redirect stderr</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:57:32.000117</ts>
    <user>Latarsha</user>
    <text>it's just the same last line</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:57:41.000202</ts>
    <user>Chantelle</user>
    <text>ah okay</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T17:58:11.000217</ts>
    <user>Chantelle</user>
    <text>I don't know racket's tests well enough to debug the specific failure, but I can give general docker guidance that will probably help</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:00:09.000036</ts>
    <user>Latarsha</user>
    <text>My suspicion is that it's something to do with running as root or in `/`</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:00:41.000284</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; Ah, then I probably know how to fix that. But first...</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:11:08.000135</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; Think of containers as extremely well-isolated UNIX processes (possibly with subprocesses), and images as executables with metadata describing that isolation. Running a container involves choosing an image, setting up isolation described by that image, then running the image's executable in that isolated environment. Network configuration, OS capabilities, user and group config, and what the filesystem looks like are all included in an image's isolation metadata. This means that by default:

- Attempting to write or create files in a container is _only visible to processes inside that container_ and writes won't persist after the container dies
- The container has an isolated network with a different IP address than the IP address of the host machine the container is running on
- The container runs as a root user, but this does not affect the container isolation. Images can further restrict this if they want by creating users and user groups and defining what user/group the container runs as when it first starts up.
- Containers running on the same host share the operating system kernel (unlike VMs where each gets its own hypervisor) but syscalls and the like can be intercepted and restricted
- All processes inside a container run in a single process group and the host may kill them all and restrict their resources arbitrarily
- Images do clever things to make having lots of them cheap in terms of storage space, and containers are _very cheap_ to start and run (unlike VMs)</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:15:02.000083</ts>
    <user>Latarsha</user>
    <text>Right, I understand a bunch about how containers work, but have not used them a huge amount (this is a common academic affliction)</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:26:55.000101</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; Gotcha. So I think the part that's confusing here is how a dockerfile gets turned into an image, and how an image describes the filesystem of containers run from it. An image has a list of _layers_, starting with the "base layer" which is empty(-ish), and each layer describes a filesystem diff from the previous layer. So images are like git repos, and if you take a base image (like `ubuntu`) and make ten different images that add 10MB of different stuff on top of it, you can cache all the layers in the `ubuntu` image when downloading those ten images.

Dockerfiles describe how to build images. *Each RUN, ADD, and COPY command makes a new layer*. So if you add a file in one RUN command, then remove it in the next, you don't actually save any space in the image. In fact, you _double_ the space taken up by the thing you wanted to remove, because now the image has to store it twice: once in a diff that adds it, and once in a diff that removes it.</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:29:50.000032</ts>
    <user>Latarsha</user>
    <text>right, that all makes sense</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:30:06.000172</ts>
    <user>Latarsha</user>
    <text>the reason I'm removing things in the other dockerfile in that repo is to have a clean state, not to save space</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:30:30.000179</ts>
    <user>Latarsha</user>
    <text>what I'd prefer to do is basically have the equivalent of slideshow `'alts` for dockerfiles</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:30:57.000085</ts>
    <user>Latarsha</user>
    <text>IOW, download some stuff, and then say, first do this, and then go back to the layer after downloading and do this other stuff, etc</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:33:32.000012</ts>
    <user>Chantelle</user>
    <text>Yeah docker does not encourage doing that within an image because saving space and structuring layers so you can cache them across different builds of different images is crucial. Instead, you can use "multi-stage builds" which let you define a pipeline of _multiple_ different images in a single dockerfile and you can use files from one image as an input to building the next image.</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:33:36.000298</ts>
    <user>Chantelle</user>
    <text>You do this by having multiple FROM commands</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:33:41.000183</ts>
    <user>Chantelle</user>
    <text>&lt;https://docs.docker.com/engine/userguide/eng-image/multistage-build/#before-multi-stage-builds&gt;</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:36:58.000118</ts>
    <user>Latarsha</user>
    <text>ok, that looks helpful</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:43:04.000223</ts>
    <user>Chantelle</user>
    <text>other random tips:

- Always use absolute paths to refer to stuff in the image's filesystem, because otherwise you have to keep track of the current directory inside the image and the current directory outside the image while you're building it. Gets messy fast.
- Pay attention to how ENTRYPOINT and CMD are different, and always use "exec form"
- Make sure to use the most recent stable versions of Docker and anything related to Docker, because the space is progressing so fast that a "best practice" from six months ago may easily be terrible advice today
- Read this: &lt;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&gt;</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:45:32.000155</ts>
    <user>Latarsha</user>
    <text>thanks</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:45:41.000044</ts>
    <user>Latarsha</user>
    <text>you can have a look at &lt;https://github.com/samth/docker-racket-build&gt; for where I currently am</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:52:47.000022</ts>
    <user>Chantelle</user>
    <text>I've been peeking at it. FYI, I've got a repo (&lt;https://github.com/jackfirth/racket-docker&gt;) that builds docker images for already-released racket versions using the installers.</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:53:06.000087</ts>
    <user>Chantelle</user>
    <text>but I do think racket should have an official docker image that's built from source as part of its release process.</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:54:05.000130</ts>
    <user>Latarsha</user>
    <text>the goal here isn't to produce anything for general consumption</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:54:14.000047</ts>
    <user>Latarsha</user>
    <text>but to have a nice contained way of doing testing</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:54:25.000161</ts>
    <user>Latarsha</user>
    <text>producing a docker image would be nice to do too</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:54:51.000049</ts>
    <user>Chantelle</user>
    <text>baby steps :)</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:56:39.000191</ts>
    <user>Noe</user>
    <text>Is there some magic that prevents DrRacket from recompiling racket/base code with errortrace annotations? If I call a function in racket/base and it raises an error---perhaps I’ve called `(first '())`---the stacktrace doesn’t include frames inside the implementation of `first`. But if I define `first` myself in some file I require, it does include frames inside my implementation.</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:57:30.000244</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; is there a reason that xvfb keeps randomly failing to start?</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T18:59:50.000042</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; probably docker's default security setup assumes you won't be doing gui-like things in containers</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:00:06.000198</ts>
    <user>Latarsha</user>
    <text>answer, it doesn't like being re-run in close succession with itself</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:01:46.000239</ts>
    <user>Nancie</user>
    <text>this thread right here: &lt;https://twitter.com/lambda_calculus/status/923989942354759682&gt;</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:02:03.000085</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; also, docker does not give containers access to the gpu</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:02:18.000057</ts>
    <user>Latarsha</user>
    <text>I don't think that'll be a problem</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:02:32.000089</ts>
    <user>Chantelle</user>
    <text>&lt;@Nancie&gt;...okay, I laughed at that one a bit too much</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:02:45.000005</ts>
    <user>Latarsha</user>
    <text>the whole thread is actually great</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:02:52.000134</ts>
    <user>Latarsha</user>
    <text>and not just for the joke</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:05:33.000115</ts>
    <user>Chantelle</user>
    <text>how am I not already following this person</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:06:12.000075</ts>
    <user>Latarsha</user>
    <text>oh were you not already following david?</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:06:15.000108</ts>
    <user>Latarsha</user>
    <text>you should do that</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:06:52.000217</ts>
    <user>Chantelle</user>
    <text>done</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:08:13.000102</ts>
    <user>Nancie</user>
    <text>Racket users are the best thing on Twitter</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:08:18.000018</ts>
    <user>Nancie</user>
    <text>besides dril, ofc</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:12:19.000100</ts>
    <user>Chantelle</user>
    <text>added a :dril: emoji, you're all welcome</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:15:11.000149</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; did a little googlin' and I think the Right Way for testing graphics stuff inside docker containers is to put the xvfb headless server inside its own separate container</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:15:29.000065</ts>
    <user>Chantelle</user>
    <text>since X is a client server model anyways</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T19:27:58.000174</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; I just noticed that `distro-build-test` is not on &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt;, and that it's info.rkt specifies a collection that's probably not what's intended (my guess is `'multi` is intended)</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T20:09:39.000140</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; I made you a collaborator in the hopes that you'll fix all my bugs :slightly_smiling_face:</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-27T20:38:47.000082</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; there's been a change in Google's FOSS policies so I might not be able to help much, unless you're fine with patches being copyright Google instead of copyright me (they'd be under the same license either way)</text>
  </message>
  <message conversation_id="404">
    <ts>2017-10-27T22:19:10.000039</ts>
    <user>Latarsha</user>
    <text>I don't particularly care who owns the copyright</text>
  </message>
  <message conversation_id="405">
    <ts>2017-10-27T23:26:55.000049</ts>
    <user>Chantelle</user>
    <text>probably because docker uses the Open Containers Initiative standardized image format which many different container runtimes understand now</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-28T09:57:46.000049</ts>
    <user>Vincenzo</user>
    <text>DrRacket refrains from applying errortrace to anything that's from the main "collects" or from packages that you're not editing. There are many reasons for that rule, among them that DrRacket cannot in general write to "compiled" directories in those places.</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-28T09:59:44.000010</ts>
    <user>Vincenzo</user>
    <text>It's true that I never got around to adding it to pkgs, and I should do that. I think the "distro-build" collection is as intended, though.</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-28T10:25:07.000126</ts>
    <user>Latarsha</user>
    <text>If it's in that collection, then the checklist instruction is wrong</text>
  </message>
  <message conversation_id="404">
    <ts>2017-10-28T10:26:44.000064</ts>
    <user>Latarsha</user>
    <text>Or maybe the instructions expect a particular current directory?</text>
  </message>
  <message conversation_id="404">
    <ts>2017-10-28T12:40:56.000095</ts>
    <user>Vincenzo</user>
    <text>I don't see any particular problem, either</text>
  </message>
  <message conversation_id="403">
    <ts>2017-10-28T12:53:48.000024</ts>
    <user>Vincenzo</user>
    <text>I've pushed repairs, where the two expanders had different bugs, but the same underlying cause that I hadn't considered the possibility of internal-definition contexts for `'module-begin` mode. I wouldn't be surprised if you run into further problems, especially with the old expander.</text>
  </message>
  <message conversation_id="404">
    <ts>2017-10-28T12:58:48.000001</ts>
    <user>Vincenzo</user>
    <text>The checklist was wrong; now fixed</text>
  </message>
  <message conversation_id="404">
    <ts>2017-10-28T12:59:08.000061</ts>
    <user>Vincenzo</user>
    <text>I didn't notice because I do always run the test from its directory</text>
  </message>
  <message conversation_id="404">
    <ts>2017-10-28T13:13:32.000034</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Thank you for both of those fixes, though I think ultimately I can get away with neither of them, since the strategy of just using unique, global scopes for namespacing eliminates my need for `splicing-syntax-parameterize`. (Which almost seems disappointing, since it was a fun use-case, but this approach works a lot better.)</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T19:56:50.000004</ts>
    <user>Latarsha</user>
    <text>&lt;@Corey&gt; This test continues to be somewhat flaky &lt;http://drdr.racket-lang.org/43204/racket/share/pkgs/http/http/request.rkt&gt; ; would it make sense to add more retries?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:00:26.000080</ts>
    <user>Corey</user>
    <text>&lt;@Latarsha&gt; Although I've only glanced at it I think &lt;@Stefani&gt;’s PR from this morning will do that: &lt;https://github.com/greghendershott/http/pull/10&gt;</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:01:32.000118</ts>
    <user>Latarsha</user>
    <text>That URL definitely responds for me</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:04:11.000054</ts>
    <user>Chantelle</user>
    <text>what if the catalog test runner gave tests the ability to run docker containers? You could make a non-flaky http test suite with that</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:05:03.000022</ts>
    <user>Latarsha</user>
    <text>the issue here is the CI server at &lt;http://drdr.racket-lang.org|drdr.racket-lang.org&gt;, which doesn't have the restrictions that the pkg-build system does</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:05:19.000061</ts>
    <user>Latarsha</user>
    <text>but does apparently have periodic issues reaching &lt;http://yahoo.com|yahoo.com&gt;</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:05:34.000014</ts>
    <user>Chantelle</user>
    <text>bizarre</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:07:07.000016</ts>
    <user>Latarsha</user>
    <text>and it's really genuinely just &lt;http://yahoo.com|yahoo.com&gt;, as you can see at that link (click the green back button a bunch of times to see various issues)</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:15:46.000018</ts>
    <user>Chantelle</user>
    <text>the drdr links aren't working for me</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:15:52.000032</ts>
    <user>Chantelle</user>
    <text>not able to connect</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:16:22.000046</ts>
    <user>Latarsha</user>
    <text>&lt;http://downforeveryoneorjustme.com/drdr.racket-lang.org&gt;</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:16:34.000050</ts>
    <user>Latarsha</user>
    <text>it works for me</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:17:11.000073</ts>
    <user>Chantelle</user>
    <text>....oh I have https everywhere set to block non-https connections because I was using public wifi hotspots...</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:20:06.000054</ts>
    <user>Chantelle</user>
    <text>it's yahoo closing the tcp connection so I don't think there's much you can do there</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:20:45.000029</ts>
    <user>Latarsha</user>
    <text>yeah but it usually works so i think just retrying a few times should fix it</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:21:09.000021</ts>
    <user>Chantelle</user>
    <text>How often does that test run?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:21:24.000012</ts>
    <user>Latarsha</user>
    <text>about once an hour</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:21:37.000015</ts>
    <user>Latarsha</user>
    <text>the CI server just runs continously</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:22:03.000057</ts>
    <user>Latarsha</user>
    <text>(it used to be triggered by pushes but we gave up on that when we split the main repo)</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:22:18.000024</ts>
    <user>Chantelle</user>
    <text>gotcha</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:22:59.000080</ts>
    <user>Latarsha</user>
    <text>the main &lt;http://drdr.racket-lang.org|drdr.racket-lang.org&gt; page shows the history of all builds</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:23:31.000012</ts>
    <user>Chantelle</user>
    <text>how different are drdr and the package build server?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:23:50.000041</ts>
    <user>Latarsha</user>
    <text>quite</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:24:22.000058</ts>
    <user>Latarsha</user>
    <text>drdr is intended to be a highly comprehensive test of the main distribution</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:25:36.000004</ts>
    <user>Latarsha</user>
    <text>for example, it builds from source every time, runs tests that need a gui or arbitrary system access or the network, and tests every file in every package in main-distribution and main-distribution-test, and doesn't have an overall time limit</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:26:01.000063</ts>
    <user>Latarsha</user>
    <text>but it doesn't build anything that's not in the main-distribution or needed by it</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:26:54.000014</ts>
    <user>Chantelle</user>
    <text>interesting</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:27:07.000005</ts>
    <user>Chantelle</user>
    <text>gui bits tested with xvfb?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:28:21.000006</ts>
    <user>Chantelle</user>
    <text>oh by the way &lt;@Latarsha&gt;, could you add a license to samth/docker-racket-build?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:29:27.000009</ts>
    <user>Latarsha</user>
    <text>done</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:29:56.000013</ts>
    <user>Chantelle</user>
    <text>perfect, thanks</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:30:19.000012</ts>
    <user>Latarsha</user>
    <text>actually, i want to add the other license too</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:31:04.000003</ts>
    <user>Chantelle</user>
    <text>other license?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:32:00.000059</ts>
    <user>Latarsha</user>
    <text>apache as well</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:32:05.000024</ts>
    <user>Chantelle</user>
    <text>oh, dual licensing it?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:32:22.000028</ts>
    <user>Chantelle</user>
    <text>you're probably better off using just apache instead of using dual licenses</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:32:42.000030</ts>
    <user>Chantelle</user>
    <text>licenses don't compose as neatly as functions do unfortunately</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:33:13.000001</ts>
    <user>Latarsha</user>
    <text>We're dual-licensing Racket generally as MIT and Apache, for roughly the same reasons that Rust does</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:33:20.000038</ts>
    <user>Latarsha</user>
    <text>so I want to do the same thing here</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:33:31.000017</ts>
    <user>Chantelle</user>
    <text>oh rust does that? neat</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:34:24.000006</ts>
    <user>Latarsha</user>
    <text>yes</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:34:34.000059</ts>
    <user>Chantelle</user>
    <text>ah, I gotcha, dual licensing means that pull request authors implicitly agree to both</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:34:53.000035</ts>
    <user>Latarsha</user>
    <text>yeah</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:35:13.000048</ts>
    <user>Latarsha</user>
    <text>that's why I wanted to do it now before you do anything that might get you in trouble with Google Legal</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:37:22.000007</ts>
    <user>Latarsha</user>
    <text>oh, and it actually runs a real X server, not xvfb</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:38:34.000065</ts>
    <user>Chantelle</user>
    <text>good call on license thing then - relicensing stuff that's partially copyright google would be... not simple, probably</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:38:50.000018</ts>
    <user>Chantelle</user>
    <text>as for real X server: why?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:42:29.000074</ts>
    <user>Latarsha</user>
    <text>not certain, &lt;@Stefani&gt; would know better</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:42:42.000033</ts>
    <user>Chantelle</user>
    <text>oh and, how are snapshot and pre-release installers made?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:43:01.000029</ts>
    <user>Latarsha</user>
    <text>those are built with the `distro-build` package</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:44:36.000032</ts>
    <user>Chantelle</user>
    <text>do you want the dockerfile to only describe how to build stuff in terms of what's at &lt;http://pre-release.racket-lang.org|pre-release.racket-lang.org&gt; or do you want it to conceivably work in racket CI before those are uploaded anywhere?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:45:39.000026</ts>
    <user>Latarsha</user>
    <text>mostly the former</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:46:09.000043</ts>
    <user>Latarsha</user>
    <text>the goal is to automate the process when &lt;@Eun&gt; sends out an email telling people to do testing items that are on their checklist</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:46:21.000036</ts>
    <user>Latarsha</user>
    <text>current checklist here: &lt;https://github.com/racket/racket/wiki/Release-Checklist&gt;</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:46:55.000021</ts>
    <user>Chantelle</user>
    <text>and I presume the way that's done is people take the pre-release installer and install racket with it, then run those tests?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:47:06.000044</ts>
    <user>Latarsha</user>
    <text>yes</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:47:43.000026</ts>
    <user>Latarsha</user>
    <text>and so this is just automating that process in a nice reproducible way</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:48:00.000039</ts>
    <user>Chantelle</user>
    <text>kk</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:48:19.000037</ts>
    <user>Chantelle</user>
    <text>then I think ill file some issues about stuff we could do</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:49:11.000006</ts>
    <user>Latarsha</user>
    <text>there's an issue filed already for all the things that don't work (which may be harder to fix for you), plus a couple of issues about the Docker code</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T20:49:21.000058</ts>
    <user>Latarsha</user>
    <text>based on what you suggested yesterday</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-28T21:45:03.000102</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; filed issues for all the stuff I could think of off the top of my head</text>
  </message>
  <message conversation_id="407">
    <ts>2017-10-29T11:25:41.000101</ts>
    <user>Casey</user>
    <text>Hello,
is there a racket foundation or a project fund ?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-29T11:26:35.000105</ts>
    <user>Latarsha</user>
    <text>&lt;@Casey&gt; not currently, although we're looking in to making it possible to make tax-deductible donations to racket</text>
  </message>
  <message conversation_id="407">
    <ts>2017-10-29T11:27:07.000014</ts>
    <user>Casey</user>
    <text>tax?</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-29T11:29:03.000089</ts>
    <user>Latarsha</user>
    <text>In the united states, if you make a donation to a charitable organization you don't have to pay taxes on that money</text>
  </message>
  <message conversation_id="407">
    <ts>2017-10-29T11:32:31.000024</ts>
    <user>Casey</user>
    <text>I never paid tax and I don't intent to do so. I am interested in making regular donations to push racket into a new field, and hope to get support.
I am here to evaluate racket for our new project. Most interestingly for us is how much the racket devs and ecosystem around this project is willing to support us. We are interested in supporting racket officially by donating two core devs a wage if they help expanding racket to our use cases. Please, let me know if that sounds interesting to you.</text>
  </message>
  <message conversation_id="407">
    <ts>2017-10-29T11:35:04.000043</ts>
    <user>Latarsha</user>
    <text>&lt;@Casey&gt; for a significant contribution such as that, it would probably be better to discuss over email</text>
  </message>
  <message conversation_id="407">
    <ts>2017-10-29T11:35:35.000041</ts>
    <user>Casey</user>
    <text>sure thing. I PM you</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-30T14:40:00.000751</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; dockerfile progress: I'm able to build and partially test minimal and non-minimal installs of the x86_64 and i368 linux installers</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-30T14:44:05.000217</ts>
    <user>Chantelle</user>
    <text>x86_64 linux natipkg installers seem to have issues due to the openssl libs included in the `racket-x86_64-linux-natipkg-2` package</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-30T14:44:17.000204</ts>
    <user>Chantelle</user>
    <text>haven't attempted proper xvfb setup yet</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-30T14:45:45.000532</ts>
    <user>Chantelle</user>
    <text>in-place installs are all that's tested so far - not unix-style nor the generated uninstall script</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-30T14:47:45.000302</ts>
    <user>Chantelle</user>
    <text>this is with docker-compose and multi-stage builds</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-30T15:58:31.000144</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; nice</text>
  </message>
  <message conversation_id="406">
    <ts>2017-10-31T09:22:08.000349</ts>
    <user>Stefani</user>
    <text>&lt;@Chantelle&gt; DrDr appears to need a real X server because when I used Xvfb the DrR tests did not pass because the mouse/screen/drawing wasn't exactly the same as it expected.</text>
  </message>
  <message conversation_id="408">
    <ts>2017-10-31T12:20:50.000247</ts>
    <user>Jacob</user>
    <text>with the new 6.11 update, I'm very happy with how fast the program contour feature is now. It's much useful on my large files now.</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:29:20.000589</ts>
    <user>Rosalee</user>
    <text>The documentation for snip-editors’s `get-inset` method says the inset is “how much space is left between the edge of the snip and the border.”</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:29:25.000111</ts>
    <user>Rosalee</user>
    <text>What border is it referring to?</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:29:39.000012</ts>
    <user>Rosalee</user>
    <text>I assume its not the editor’s border, as that’s the margin.</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:29:55.000149</ts>
    <user>Rosalee</user>
    <text>Would it be the edge of the external editor?</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:32:10.000608</ts>
    <user>Rosalee</user>
    <text>It could also be the snip’s border, but then wouldn’t the edge of the snip and the snip’s border be the same, leading to a value of 0?</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:48:31.000224</ts>
    <user>Rosalee</user>
    <text>Ohh…I _think_ I get it. The editor’s border is smaller than the snip’s border. So the inset is the distance between the two of them.</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:48:43.000378</ts>
    <user>Rosalee</user>
    <text>And the margin is the extra space beyond the snip’s border.</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:48:46.000152</ts>
    <user>Rosalee</user>
    <text>Something like this:</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:54:33.000637</ts>
    <user>Rosalee</user>
    <text>Oh jeez, maybe not. THere is also a concept of padding too…. :disappointed:</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:54:41.000784</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; You might know this stuff.</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:58:52.000216</ts>
    <user>Rosalee</user>
    <text>ohh..its just the css box model:</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:58:55.000564</ts>
    <user>Rosalee</user>
    <text>padding = padding</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:58:58.000114</ts>
    <user>Rosalee</user>
    <text>inset = border</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T13:59:02.000016</ts>
    <user>Rosalee</user>
    <text>margin = margin</text>
  </message>
  <message conversation_id="410">
    <ts>2017-10-31T14:07:09.000328</ts>
    <user>Vincenzo</user>
    <text>I think padding and margin are as in CSS, but the border is always drawn with width 1 and doesn't add to the box's size. Inset specifies where a border is drawn relative to the box created by padding + margin (and a larger inset value doesn't mean the box gets bigger, but that the border is drawn further from the edge of the box).</text>
  </message>
  <message conversation_id="409">
    <ts>2017-10-31T14:11:54.000546</ts>
    <user>Rosalee</user>
    <text>hmm…interesting. So the border’s position isn’t really connected to the padding and margin per se? If so interesting, thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="409">
    <ts>2017-11-01T04:47:24.000094</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; voilà! &lt;https://github.com/samth/docker-racket-build/pull/16&gt;</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:06:34.000395</ts>
    <user>Latarsha</user>
    <text>&lt;@Quintin&gt; you might be interested in &lt;https://github.com/dundalek/closh&gt;</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:07:28.000454</ts>
    <user>Clorinda</user>
    <text>am I missing something obvious -- why does TR _insist_ that my default value for `hash-ref` be `#f` or a thunk?</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:09:03.000011</ts>
    <user>Latarsha</user>
    <text>&lt;@Clorinda&gt; because it's hard to give another less-specific type</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:09:31.000266</ts>
    <user>Latarsha</user>
    <text>you could give a type that's `(U Boolean String Number Symbol Input-Port)` or something like that</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:11:22.000446</ts>
    <user>Clorinda</user>
    <text>I don't follow</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:11:32.000396</ts>
    <user>Clorinda</user>
    <text>so, this wouldn't work? `(All (K V D) (-&amp;gt; (HashTable K V) K D (U V D)))`</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:12:11.000522</ts>
    <user>Latarsha</user>
    <text>Because if I instantiate D with `(-&amp;gt; String)` then it doesn't ever return that, and does potentially return `String`</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:13:29.000391</ts>
    <user>Clorinda</user>
    <text>ugh -- well I don't want to wrap my symbol in a thunk! =p</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:14:04.000025</ts>
    <user>Latarsha</user>
    <text>we could change the `#f` case to use an intersection type bounded by some big union</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:14:08.000231</ts>
    <user>Clorinda</user>
    <text>with a negation type we could express it, right?</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:14:23.000721</ts>
    <user>Clorinda</user>
    <text>one case for not a procedure, one for a procedure?</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:14:42.000457</ts>
    <user>Latarsha</user>
    <text>yes</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T13:14:48.000386</ts>
    <user>Clorinda</user>
    <text>all the better!</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T14:58:48.000331</ts>
    <user>Quintin</user>
    <text>&lt;@Latarsha&gt; Thanks!  It's interesting to see other people approaching the same problem.  I couldn't find many before I started rash, but in the last month I've found several projects that are to some degree trying to do something similar.</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T15:05:18.000264</ts>
    <user>Eun</user>
    <text>&lt;@Quintin&gt;: Also: &lt;https://github.com/ergonomica/ergonomica&gt;</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T15:05:31.000569</ts>
    <user>Eun</user>
    <text>By a high schooler I know.</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T15:07:06.000014</ts>
    <user>Kimbery</user>
    <text>&amp;gt; In Ergonomica, as with similar functional programming languages, the only statement in the language is the `if/elif/else` statement.
Then, immediately, the next section title:
&amp;gt; `with` statement
what</text>
  </message>
  <message conversation_id="412">
    <ts>2017-11-01T15:26:11.000277</ts>
    <user>Ka</user>
    <text>documentation is hard.</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T15:55:54.000001</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; can you add instructions on how to run your code?</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T15:59:55.000344</ts>
    <user>Quintin</user>
    <text>&lt;@Eun&gt; Thanks also.  I've seen that one before.</text>
  </message>
  <message conversation_id="411">
    <ts>2017-11-01T16:01:17.000112</ts>
    <user>Quintin</user>
    <text>Actually the coolest shell project I've found (other than Rash, of course....) is Xonsh.  It is a python-superset shell that is actually fairly stable and usable.  I'm not sure how I didn't find it before I started Rash.</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T16:12:00.000259</ts>
    <user>Chantelle</user>
    <text>yes, though I might not have time until later this week</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T16:12:28.000383</ts>
    <user>Chantelle</user>
    <text>I'll make sure to add them before merging</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T16:12:34.000427</ts>
    <user>Latarsha</user>
    <text>Is there just some simple call to `docker-compose`?</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T16:18:47.000109</ts>
    <user>Chantelle</user>
    <text>`docker-compose build` == download and run all installers, producing images with racket successfully installed</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T16:19:07.000481</ts>
    <user>Chantelle</user>
    <text>`docker-compose up` == run all tests, exit 0 on all successful exit nonzero on fail or error (including OOMEs)</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T16:19:35.000667</ts>
    <user>Chantelle</user>
    <text>`docker-compose run &amp;lt;service-in-docker-compose.yml&amp;gt;` == run that service, exiting with 0 on success or 1 on failure</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T16:20:38.000551</ts>
    <user>Chantelle</user>
    <text>every "foo-test" service in the compose yml runs the same `test.sh` script - different test services just run using different base images (and thus different installers)</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T16:21:42.000328</ts>
    <user>Chantelle</user>
    <text>ex: `docker-compose run racket-x86-minimal-test` will run the tests in a container whose `racket` and `raco` binaries were installed by building the `racket-x86-minimal` image</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T17:43:15.000460</ts>
    <user>Latarsha</user>
    <text>seems like I need to install non-packaged versions of docker and docker-compose</text>
  </message>
  <message conversation_id="414">
    <ts>2017-11-01T17:58:42.000183</ts>
    <user>Ka</user>
    <text>xonsh always did look interesting</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:28:38.000202</ts>
    <user>Chantelle</user>
    <text>You need a recent version of docker installed. Docker for Mac and Docker for Windows are the current best ways to get docker onto those systems</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:29:11.000413</ts>
    <user>Latarsha</user>
    <text>Yeah, I use linux, but that doesn't mean I get a .deb for docker-compose</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:29:15.000025</ts>
    <user>Latarsha</user>
    <text>:disappointed:</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:29:38.000286</ts>
    <user>Latarsha</user>
    <text>also, what's the best way to try another test without re-running all the previous tests?</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:30:29.000116</ts>
    <user>Chantelle</user>
    <text>I think there's a Docker for Linux thing. Installing packages might not be the recommended way to do stuff</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:30:49.000096</ts>
    <user>Latarsha</user>
    <text>yeah, turns out there's a docker-provided .deb for docker itself, but not for compose</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:30:57.000315</ts>
    <user>Latarsha</user>
    <text>I have it all running now, though</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:31:34.000277</ts>
    <user>Chantelle</user>
    <text>You can use `docker-compose run &amp;lt;service&amp;gt; &amp;lt;command&amp;gt;` to override the command that would normally be run</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:32:24.000205</ts>
    <user>Chantelle</user>
    <text>So I think `docker-compose run racket-x86-test raco test -p some-package` would do what you want, for example</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:33:21.000289</ts>
    <user>Chantelle</user>
    <text>That runs just those tests instead of running the `test.sh` script from the CMD instruction</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:34:10.000003</ts>
    <user>Latarsha</user>
    <text>ok great</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:34:46.000132</ts>
    <user>Latarsha</user>
    <text>this is all very nice, thanks a ton!</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:41:54.000005</ts>
    <user>Chantelle</user>
    <text>Glad to help, I love this sort of stuff :)</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:44:30.000051</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; &lt;@Stefani&gt; Are `raco test -l` and `racket -l` intentionally setting `current-load-relative-directory` differently?</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:45:01.000241</ts>
    <user>Latarsha</user>
    <text>To see the difference, try `raco test -l tests/htdp-lang/test-htdp` and the same with `racket -l` (the latter will fail with an unknown path)</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:53:24.000159</ts>
    <user>Chantelle</user>
    <text>By the way, would you happen to know _why_ the db tests consume over a gigabyte of memory?</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T18:54:06.000164</ts>
    <user>Latarsha</user>
    <text>no, I was going to look into that</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T19:01:08.000150</ts>
    <user>Vincenzo</user>
    <text>Unlike `racket`, `raco test` sets the current directory to the file's directory for testing, as documented. I don't think either will have `current-load-relative-directory` set after the module declaration is loaded. Probably the directory-changing behavior in `raco test` should have been specific to the `--drdr` flag, though, since it seems to have been added as part of the `--drdr` addition.</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-01T19:08:26.000142</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; thanks, I had missed that in the docs</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-02T11:24:06.000548</ts>
    <user>Latarsha</user>
    <text>somehow xvfb-run causes tests to have no output</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-02T11:24:18.000458</ts>
    <user>Latarsha</user>
    <text>or maybe that was just the framework tests hanging</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-02T11:30:17.000571</ts>
    <user>Latarsha</user>
    <text>no, the problem is that `docker-compose run xvfb-run ...` doesn't work, have to wrap it in `sh -c`</text>
  </message>
  <message conversation_id="413">
    <ts>2017-11-02T13:02:22.000268</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; The most recent Travis build keeps hanging on linux in the `file.rktl` tests, and I have no idea why: &lt;https://travis-ci.org/racket/racket/builds/295988203&gt;</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T15:57:06.000078</ts>
    <user>Chantelle</user>
    <text>that's probably caused by the daemon process that `xvfb-run` spawns not being reaped properly by `xvfb-run` when it runs as PID 1</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T15:58:06.000600</ts>
    <user>Chantelle</user>
    <text>which is one of the reasons I think `xvfb` should be in a different container</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:01:39.000277</ts>
    <user>Latarsha</user>
    <text>There's one test that hasn't worked under xvfb</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:02:05.000321</ts>
    <user>Chantelle</user>
    <text>which test?</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:04:28.000190</ts>
    <user>Latarsha</user>
    <text>The leak test in DrRacket</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:04:38.000381</ts>
    <user>Latarsha</user>
    <text>Mentioned in the issue I think</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:05:10.000417</ts>
    <user>Chantelle</user>
    <text>is that the one that jay mentioned in slack?</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:05:24.000420</ts>
    <user>Chantelle</user>
    <text>the one that needs a real X server instead of xvfb for some bizarre reason?</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:07:29.000253</ts>
    <user>Latarsha</user>
    <text>Probably</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:07:40.000166</ts>
    <user>Latarsha</user>
    <text>The tests have changed some since then</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:10:16.000161</ts>
    <user>Chantelle</user>
    <text>I think I'm confused. Is that related to the docker setup or an entirely separate issue?</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:18:40.000115</ts>
    <user>Chantelle</user>
    <text>ah I only just saw the commit you added to the PR</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:19:43.000601</ts>
    <user>Chantelle</user>
    <text>I'll merge the PR as is unless you've got objections</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:22:52.000179</ts>
    <user>Chantelle</user>
    <text>my plan is to do the following next:

- Split gui tests into a separate Dockerfile
- Add config to docker-compose.yml to run one gui test service for each installer variant in addition to the non-gui test service
- Add a Dockerfile for an image that _only_ runs xvfb
- Add an xvfb service to docker-compose.yml and update each gui test service to use that xvfb instead of wrapping tests in `xvfb-run`, to avoid process weirdness and make the tests run in an environment that's more similar to how they'd run when talking to a real X server</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:24:00.000292</ts>
    <user>Chantelle</user>
    <text>that also means we could swap out the xvfb service for a different docker image that runs a real X server without changing any of the tests or test scripts</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:26:29.000332</ts>
    <user>Chantelle</user>
    <text>also: what exactly is the point of `--skip-installed`? shouldn't `raco pkg install` just do that by default? or is it to avoid updating packages or something?</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:36:39.000155</ts>
    <user>Latarsha</user>
    <text>That plan sounds good, and I'm for merging now</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:36:57.000556</ts>
    <user>Chantelle</user>
    <text>ack</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:37:15.000031</ts>
    <user>Latarsha</user>
    <text>What I meant about the tests changing is that the DrRacket tests have been changed to avoid some concurrency problems</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:37:26.000432</ts>
    <user>Latarsha</user>
    <text>so that maybe more of them needed a real X server in the past</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:37:41.000039</ts>
    <user>Latarsha</user>
    <text>I also think `--skip-installed` should be the default behavior</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:37:46.000031</ts>
    <user>Latarsha</user>
    <text>but it isn't</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:38:07.000251</ts>
    <user>Chantelle</user>
    <text>ah</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:42:59.000084</ts>
    <user>Chantelle</user>
    <text>how much do you know about the individual test suites run in the release tests?</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:43:14.000405</ts>
    <user>Latarsha</user>
    <text>it varies a lot, as you might expect</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:43:48.000137</ts>
    <user>Latarsha</user>
    <text>I wrote the match and TR tests, I don't understand the DrRacket tests, other things are in between</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:43:55.000615</ts>
    <user>Chantelle</user>
    <text>from what I can gather, a lot of them are doing things that can tend to make tests flaky / unportable, and I'm wondering how much effort it would take to make some improvements there</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:44:22.000385</ts>
    <user>Latarsha</user>
    <text>making them less flaky would be good</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:44:32.000345</ts>
    <user>Latarsha</user>
    <text>but some of them are very un-maintained</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:44:53.000627</ts>
    <user>Latarsha</user>
    <text>and/or maintained by people with widely varying skill/time investment</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:45:17.000541</ts>
    <user>Chantelle</user>
    <text>(granted my point of comparison is my employer, where most tests are entirely capable of being executed across machine clusters where none of the machines even have hard disks...)</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:46:07.000560</ts>
    <user>Latarsha</user>
    <text>in general, we try to avoid flakiness in DrDr</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:46:15.000576</ts>
    <user>Latarsha</user>
    <text>but many of the release tests are not run there</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:46:49.000320</ts>
    <user>Chantelle</user>
    <text>also I presume DrDr does not run tests for every possible installation environment?</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:46:58.000005</ts>
    <user>Latarsha</user>
    <text>right</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:47:02.000292</ts>
    <user>Latarsha</user>
    <text>it's just a particular machine</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:47:13.000634</ts>
    <user>Chantelle</user>
    <text>whereas the release tests should probably be run on each permutation of installation options</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:47:39.000049</ts>
    <user>Latarsha</user>
    <text>&lt;http://drdr.racket-lang.org/help&gt;</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:47:50.000419</ts>
    <user>Latarsha</user>
    <text>yes, although that isn't currently done</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:48:01.000247</ts>
    <user>Chantelle</user>
    <text>how are the installers built from source anyways? is there a list of which commits to use from each of the racket repos that the release manager maintains somewhere?</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:48:13.000526</ts>
    <user>Latarsha</user>
    <text>yes</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:48:40.000347</ts>
    <user>Latarsha</user>
    <text>&lt;https://github.com/racket/racket/wiki/Release-process&gt; has a lot of detail</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:49:01.000244</ts>
    <user>Latarsha</user>
    <text>this repo &lt;https://github.com/racket/release-catalog&gt; has all the releases</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:49:39.000264</ts>
    <user>Chantelle</user>
    <text>ah hah!</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:49:50.000130</ts>
    <user>Chantelle</user>
    <text>that catalog repo is the part of the release process I was missing</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:53:46.000249</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: There's yet more pieces, actually. :)</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:54:14.000568</ts>
    <user>Eun</user>
    <text>But many of them no one but me needs to bother with.</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:55:26.000425</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; let me first say that I've got enough projects already, but I like release automation and it seems like an area where I'm able to help a lot :)</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:56:58.000632</ts>
    <user>Eun</user>
    <text>Oooh, interesting.</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:57:20.000267</ts>
    <user>Eun</user>
    <text>I'm actually in the process of increasing automation for some of these hidden parts.</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:57:38.000080</ts>
    <user>Eun</user>
    <text>But the testing checklist that's on the wiki is by far the most painful part.</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:57:50.000257</ts>
    <user>Eun</user>
    <text>The manual tests, especially.</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:58:01.000212</ts>
    <user>Chantelle</user>
    <text>well I do like testing</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T16:59:46.000295</ts>
    <user>Chantelle</user>
    <text>care to reveal more details, O Mysterious Vincent?</text>
  </message>
  <message conversation_id="415">
    <ts>2017-11-02T17:00:23.000094</ts>
    <user>Chantelle</user>
    <text>part of the reason I'm interested is because I have to remember to add new docker images for each racket version in my racket docker images repo and I always forget</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T17:18:40.000318</ts>
    <user>Ida</user>
    <text>Perhaps this is silly, but are there "placeholder" arguments for curried functions in Racket?</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T17:18:52.000071</ts>
    <user>Ida</user>
    <text>(curry fn _ _ 3)</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T17:19:01.000203</ts>
    <user>Chantelle</user>
    <text>&lt;@Ida&gt; no, but the `fancy-app` package does something similar</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T17:19:20.000090</ts>
    <user>Ida</user>
    <text>Does Racket instead prescribe a different idiom?</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T17:19:38.000131</ts>
    <user>Chantelle</user>
    <text>I think Racket has no style recommendations on lambda shorthands</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T17:22:52.000347</ts>
    <user>Chantelle</user>
    <text>most folks use one of the following:

- the `curry` function, `((curry + 1 2) 3) =&amp;gt; 6`
- the `cut` and `cute` SRFI macros, `((cut + 1 2 &amp;lt;&amp;gt;) 3) =&amp;gt; 6`
- the `fancy-app` package, `((+ 1 2 _) 3) =&amp;gt; 6`
- the `afl` package, `(#λ(+ 1 2 %) 3) =&amp;gt; 6`
- the `curly-fn` package, `(#{+ 1 2} 3) =&amp;gt; 6`</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T17:27:26.000214</ts>
    <user>Ida</user>
    <text>hmmm, perhaps I shall check out the fancy-app package, but so far I haven't been dowloading other people's libraries</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T17:27:36.000326</ts>
    <user>Ida</user>
    <text>thanks</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T17:27:43.000138</ts>
    <user>Chantelle</user>
    <text>glad to help!</text>
  </message>
  <message conversation_id="416">
    <ts>2017-11-02T18:03:25.000421</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: No time right now, but I can tell you more later.</text>
  </message>
  <message conversation_id="417">
    <ts>2017-11-02T19:42:40.000222</ts>
    <user>Ka</user>
    <text>&lt;@Ida&gt; srfi-26 (which has cut) should be available in racket without having to download someone elses package</text>
  </message>
  <message conversation_id="418">
    <ts>2017-11-02T20:10:50.000245</ts>
    <user>Corey</user>
    <text>Likewise my racket-travis repo</text>
  </message>
  <message conversation_id="419">
    <ts>2017-11-02T21:01:50.000030</ts>
    <user>Magnolia</user>
    <text>Anyone else have build problems on git HEAD? (edit: seems to happen for me on v6.11 too, I wonder if Racket doesn't like something with my OS config...)</text>
  </message>
  <message conversation_id="419">
    <ts>2017-11-02T21:02:14.000214</ts>
    <user>Magnolia</user>
    <text>I get `mprotect failed: 7f9ae8800000, 524288, 1, 12` during the collects setup.</text>
  </message>
  <message conversation_id="419">
    <ts>2017-11-02T21:03:02.000186</ts>
    <user>Magnolia</user>
    <text>I'm on commit `4f1ef42d071c060973b69de001ad577261f13a61` and should be a clean checkout since I just did `git clean -fxd`</text>
  </message>
  <message conversation_id="419">
    <ts>2017-11-02T21:52:04.000138</ts>
    <user>Magnolia</user>
    <text>Ah argh, looks like I recently built some networking software that modifies `vm.max_map_count`. Setting that too low can cause `mprotect` failures. I bet that's it. Sorry for the noise.</text>
  </message>
  <message conversation_id="420">
    <ts>2017-11-02T22:23:34.000146</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; &lt;@Ida&gt; actually most people just use lambda</text>
  </message>
  <message conversation_id="420">
    <ts>2017-11-02T22:23:55.000091</ts>
    <user>Chantelle</user>
    <text>well yes there's that</text>
  </message>
  <message conversation_id="420">
    <ts>2017-11-03T04:53:20.000388</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; I may have gone a little overboard.... but I'm now able to run the GUI tests while _watching_ what the tests are doing to the X server in a browser</text>
  </message>
  <message conversation_id="420">
    <ts>2017-11-03T04:54:27.000106</ts>
    <user>Chantelle</user>
    <text>xvfb container + x11vnc container which turns x server into vnc server + websockify container which gives access to vnc server over websockets + nginx with novnc, which is a client web app somebody made that shows you a live feed of a vnc-over-websocket server in a browser window</text>
  </message>
  <message conversation_id="421">
    <ts>2017-11-03T07:15:17.000238</ts>
    <user>Latarsha</user>
    <text>Woot</text>
  </message>
  <message conversation_id="421">
    <ts>2017-11-03T12:12:40.000239</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; I haven't figured out why the Travis build is hanging . I've tried a few Linux builds, including ones with the same package set as on Travis, but didn't provoke the problem.</text>
  </message>
  <message conversation_id="421">
    <ts>2017-11-03T12:13:26.000348</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; I'll push a PR which runs the file tests in non-quiet mode</text>
  </message>
  <message conversation_id="422">
    <ts>2017-11-03T13:38:51.000095</ts>
    <user>Nelson</user>
    <text>can someone explain _how_ this program typechecks?
```
#lang typed/racket/base
(define (f (x : Integer)) #|: Integer|# x)
(ann f (-&amp;gt; Natural Natural))
```
(It doesn't typecheck if I uncomment the return type --- that part makes sense to me)</text>
  </message>
  <message conversation_id="422">
    <ts>2017-11-03T13:39:16.000217</ts>
    <user>Nelson</user>
    <text>I tried this in the repl too, and `(:print-type f)` is `(-&amp;gt; Integer Integer)`</text>
  </message>
  <message conversation_id="421">
    <ts>2017-11-03T13:40:13.000428</ts>
    <user>Latarsha</user>
    <text>I think it's because TR knows that the output is the input</text>
  </message>
  <message conversation_id="421">
    <ts>2017-11-03T13:40:25.000132</ts>
    <user>Latarsha</user>
    <text>and uses that, together with the input type, in subtyping</text>
  </message>
  <message conversation_id="421">
    <ts>2017-11-03T13:40:54.000357</ts>
    <user>Latarsha</user>
    <text>(innovation due to Eric Dobson)</text>
  </message>
  <message conversation_id="421">
    <ts>2017-11-03T13:41:19.000573</ts>
    <user>Nelson</user>
    <text>thank you Eric Dobson</text>
  </message>
  <message conversation_id="423">
    <ts>2017-11-03T15:19:49.000299</ts>
    <user>Chantelle</user>
    <text>does typed racket do any logging besides warnings about dead code?</text>
  </message>
  <message conversation_id="421">
    <ts>2017-11-03T15:21:21.000265</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; it does a bunch of internal timing logging</text>
  </message>
  <message conversation_id="423">
    <ts>2017-11-03T15:22:00.000305</ts>
    <user>Chantelle</user>
    <text>with racket loggers instead of stdout / something else I assume?</text>
  </message>
  <message conversation_id="423">
    <ts>2017-11-03T15:23:01.000138</ts>
    <user>Chantelle</user>
    <text>I think making TR log everything with the topic `typed/racket` or `typed/racket/base` might be a good idea</text>
  </message>
  <message conversation_id="423">
    <ts>2017-11-03T15:23:11.000474</ts>
    <user>Nelson</user>
    <text>&lt;@Chantelle&gt; the `tr-timing` logger</text>
  </message>
  <message conversation_id="423">
    <ts>2017-11-03T15:24:11.000277</ts>
    <user>Latarsha</user>
    <text>yeah</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T16:59:39.000434</ts>
    <user>Nancie</user>
    <text>If I wanted to write a library of common validation functions like `valid-email?` would it be super cool or awkward and asinine to provide them as contracts?</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:00:32.000280</ts>
    <user>Nancie</user>
    <text>I suppose there's nothing to stop me from providing both</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:01:04.000015</ts>
    <user>Nelson</user>
    <text>super cool</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:01:15.000353</ts>
    <user>Chantelle</user>
    <text>&lt;@Nancie&gt; I'd either provide them as contracts like `valid-email/c` _or_ use something that's specifically only for flat data</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:01:27.000011</ts>
    <user>Nelson</user>
    <text>but I'm usually happy with stuff like `(-&amp;gt; valid-email? blah-blah-blah)`</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:01:34.000223</ts>
    <user>Nelson</user>
    <text>using the predicate as a contract</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:01:36.000191</ts>
    <user>Chantelle</user>
    <text>like expectations (self plug)</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:02:26.000001</ts>
    <user>Chantelle</user>
    <text>&lt;@Nelson&gt; I think for server programming in particular it's really useful to have more than just a predicate so error messages for bad requests can be more informative</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:03:06.000158</ts>
    <user>Chantelle</user>
    <text>particularly when parsing string input</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:04:25.000246</ts>
    <user>Nancie</user>
    <text>k, this is going into my sheet of notes for Obvious Web Stuff Racket Doesn't Have Yet</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:11:45.000163</ts>
    <user>Ka</user>
    <text>&lt;@Nancie&gt; that must be a big giant list. :troll:</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:12:28.000101</ts>
    <user>Nancie</user>
    <text>Yes, that's why I like it! I'm greedy and vain enough to take all the easy problems for myself</text>
  </message>
  <message conversation_id="424">
    <ts>2017-11-03T17:12:52.000162</ts>
    <user>Chantelle</user>
    <text>that's the way to do it :p</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:24:55.000121</ts>
    <user>Latarsha</user>
    <text>question: what "kids these days" editor has the best racket support currently?</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:27:14.000441</ts>
    <user>Chantelle</user>
    <text>do any of them?</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:27:30.000363</ts>
    <user>Latarsha</user>
    <text>i just installed VS code and it has two racket plugins</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:27:36.000423</ts>
    <user>Latarsha</user>
    <text>but I can't really tell what they do</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:27:43.000109</ts>
    <user>Latarsha</user>
    <text>besides syntax highlighting</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:27:44.000371</ts>
    <user>Chantelle</user>
    <text>I use Atom a lot and vaguely recall a random racket plugin someone wrote that kinda sorta worked, but not by doing any of the stuff drracket does</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:28:10.000406</ts>
    <user>Latarsha</user>
    <text>&lt;https://atom.io/packages/language-racket&gt;</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:28:43.000040</ts>
    <user>Chantelle</user>
    <text>I think emacs and drracket are the only editors where "racket support" includes actually macroexpanding the code to figure out how to properly highlight stuff</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:31:29.000215</ts>
    <user>Ka</user>
    <text>where's the atom plugin that uninstalls it and installs emacs instead?</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:44:10.000029</ts>
    <user>Kimbery</user>
    <text>there was a time when I wanted to add all the drracket features to atom, and then I (1) realized I like having time to sleep and (2) stopped worrying and learned to love drracket</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:45:26.000294</ts>
    <user>Chantelle</user>
    <text>honestly I'd rather figure out a way for drracket to infer `#lang`s for files based on file extensions and then just write `#lang`s for all the stuff I'd normally edit in atom...</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:45:54.000216</ts>
    <user>Chantelle</user>
    <text>then I could just open `.gitignore` and similar files in drracket and not need two editors</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:46:02.000156</ts>
    <user>Chantelle</user>
    <text>at least, not need two most of the time</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:46:10.000364</ts>
    <user>Kimbery</user>
    <text>I am not actually sure which of intellij, drracket, and atom consume the most memory on my computer</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:46:22.000005</ts>
    <user>Chantelle</user>
    <text>The Terrible Trio</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:46:29.000190</ts>
    <user>Chantelle</user>
    <text>ramsticks quake in fear as they boot up</text>
  </message>
  <message conversation_id="425">
    <ts>2017-11-03T17:46:41.000209</ts>
    <user>Kimbery</user>
    <text>I should switch to emacs, but I have never managed to stick with it for more than two weeks</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:47:10.000317</ts>
    <user>Ka</user>
    <text>&lt;@Kimbery&gt; it's funny that *you* have memory issues. That's always been the complaint against emacs!</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:47:23.000037</ts>
    <user>Ka</user>
    <text>oh how far we've come.</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:47:37.000122</ts>
    <user>Ka</user>
    <text>where emacs isn't the memory hog.</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:48:01.000010</ts>
    <user>Latarsha</user>
    <text>I love DrRacket and use it all the time</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:48:09.000146</ts>
    <user>Kimbery</user>
    <text>I don’t actually think I have any memory problems, except when I decide to ask maven to do a clean build of my company’s entire monolithic jvm codebase</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:48:15.000201</ts>
    <user>Latarsha</user>
    <text>but I also think it's important to make sure the experience in other editors is ok</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:48:21.000268</ts>
    <user>Nancie</user>
    <text>I only just switched to it full time about a month ago after several months of part-time use. My need for editing gigantic yaml files drove me there from Jetbrains and racket-mode helped me to stay</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:48:56.000096</ts>
    <user>Ka</user>
    <text>I'm an emacs + geiser user. I think there are things in racket-mode that I'd like, but haven't plunged yet.</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:48:56.000241</ts>
    <user>Kimbery</user>
    <text>that was my main motivation for wanting to get Atom integration</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:49:04.000085</ts>
    <user>Chantelle</user>
    <text>there's that json-rpc language editor server project thing that got discussed at racketcon office hours briefly</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:49:41.000018</ts>
    <user>Kimbery</user>
    <text>plus I think it would be super cool to have DrRacket’s binding arrows in another editor, and I think Atom/VSCode could theoretically support that</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:49:47.000031</ts>
    <user>Ka</user>
    <text>&lt;@Chantelle&gt; specifically for racket?</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:49:56.000318</ts>
    <user>Nancie</user>
    <text>I do love the binding arrows</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:50:34.000241</ts>
    <user>Chantelle</user>
    <text>&lt;@Ka&gt; there's a generic json-rpc protocol for language editor stuff that Microsoft was working on for vscode, and at office hours I think &lt;@Stefani&gt; brought up a desire to get racket to integrate with it</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:50:39.000168</ts>
    <user>Corey</user>
    <text>&lt;@Nancie&gt; wrt validating email addresses, something I needed to do recently: &lt;https://gist.github.com/greghendershott/4019ddefeba6d928637f797e8f0f8ef6&gt; (maybe outside the scope of what you wanted to do, idk)</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:50:49.000347</ts>
    <user>Kimbery</user>
    <text>at first I found the binding arrows sort of weird, but I’ve gotten used to them enough that I don’t really think about them at all except when someone comments on them in surprise while looking over my shoulder while I write racket</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:51:22.000027</ts>
    <user>Ka</user>
    <text>&lt;@Chantelle&gt; ah, interesting.</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:52:14.000155</ts>
    <user>Chantelle</user>
    <text>I like binding arrows because they're a really easy-to-explain example of something incredibly cool that racket can do because of how it does things</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:52:21.000365</ts>
    <user>Chantelle</user>
    <text>or at least easy-to-demo</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:54:16.000138</ts>
    <user>Kimbery</user>
    <text>it’s especially fun to show off the binding arrows for (1) non-s-exp languages and (2) macros that do weird things with scope and/or `'sub-range-binders`</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:55:43.000409</ts>
    <user>Corey</user>
    <text>At one point I considered trying to do the arrows in racket-mode. But I sat down for awhile until the feeling passed.</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:55:58.000059</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; yeah, that's the language server protocol or something like that</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:57:23.000100</ts>
    <user>Corey</user>
    <text>I mean there is ASCII art and "overlays", and even images in some emacs builds &lt;https://www.gnu.org/software/emacs/manual/html_node/elisp/Images.html&gt;</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:57:30.000055</ts>
    <user>Corey</user>
    <text>But yeah. No.</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:58:00.000163</ts>
    <user>Corey</user>
    <text>`racket-check-syntax-mode` lets you jump among the definitions and uses, that's it.</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T17:59:37.000014</ts>
    <user>Kimbery</user>
    <text>I’m curious, &lt;@Corey&gt;, how much did you have to replicate to do Check Syntax’s analysis outside of DrRacket? and how much of that could you just re-use without reinventing? I know Check Syntax does a lot of work to handle things like tail position analysis, inspection of `syntax-original?`-ness, and props like `'disappeared-use`, `'disappeared-binding`, and `'sub-range-binders`.</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T18:00:05.000254</ts>
    <user>Chantelle</user>
    <text>I've wondered that too</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T18:00:14.000065</ts>
    <user>Kimbery</user>
    <text>could you basically just use `drracket/check-syntax` directly?</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T18:00:24.000147</ts>
    <user>Corey</user>
    <text>Robby exposed it and I use a list of things produced by it.</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T18:01:38.000129</ts>
    <user>Kimbery</user>
    <text>neat. so the analysis is entirely reused, and racket-mode “just” has to do the work to map that information onto the current buffer?</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T18:02:48.000380</ts>
    <user>Corey</user>
    <text>The racket side is just &lt;https://github.com/greghendershott/racket-mode/blob/master/cmds.rkt#L779-L832&gt;</text>
  </message>
  <message conversation_id="426">
    <ts>2017-11-03T18:03:36.000199</ts>
    <user>Corey</user>
    <text>The emacs side is creating a bunch of overlays using that list -- and ignoring the arrow info</text>
  </message>
  <message conversation_id="427">
    <ts>2017-11-03T20:33:29.000016</ts>
    <user>Stefani</user>
    <text>&lt;@Chantelle&gt; &lt;@Ka&gt; &lt;https://github.com/jeapostrophe/racket-langserver&gt;</text>
  </message>
  <message conversation_id="427">
    <ts>2017-11-03T20:35:43.000099</ts>
    <user>Ka</user>
    <text>oh nice!</text>
  </message>
  <message conversation_id="427">
    <ts>2017-11-04T00:29:35.000033</ts>
    <user>Chantelle</user>
    <text>_nice_</text>
  </message>
  <message conversation_id="427">
    <ts>2017-11-04T00:29:46.000046</ts>
    <user>Chantelle</user>
    <text>this is using the json RPC protocol right?</text>
  </message>
  <message conversation_id="427">
    <ts>2017-11-04T00:30:00.000033</ts>
    <user>Chantelle</user>
    <text>also: hey cool it's using my `delimit-app` package!</text>
  </message>
  <message conversation_id="428">
    <ts>2017-11-04T09:45:57.000087</ts>
    <user>Corey</user>
    <text>Oh, interesting. I wrote `(and/c exact-integer? (between/c 1 2))` and the contract "expected" message said the simpler `(integer-in 1 2)`. I wonder if the contract itself was optimized like that or just the message. I'm guessing the former.</text>
  </message>
  <message conversation_id="429">
    <ts>2017-11-04T09:59:50.000050</ts>
    <user>Latarsha</user>
    <text>Looks awesome</text>
  </message>
  <message conversation_id="429">
    <ts>2017-11-04T09:59:58.000071</ts>
    <user>Latarsha</user>
    <text>What do I do to use it?</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-04T16:41:08.000040</ts>
    <user>Genevie</user>
    <text>Today I downloaded the Racket 6.11 package for Mac. When I double-click on DrRacket, it does not start. I see the following in the system logs:
```
Nov  4 14:22:11 gris com.apple.xpc.launchd[1] (com.apple.xpc.launchd.oneshot.0x10000007.DrRacket[1053]): Service exited with abnormal code: 1
Nov  4 14:22:27 gris com.apple.xpc.launchd[1] (org.racket-lang.DrRacket.16768[1060]): Service exited with abnormal code: 1
```
Have others seen this?
FWIW, earlier today I installed the latest macOS security update.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-04T16:41:31.000062</ts>
    <user>Genevie</user>
    <text>If I run `racket` from the command line, that (seems to) work fine.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-04T19:17:16.000021</ts>
    <user>Latarsha</user>
    <text>&lt;@Genevie&gt; what about `racket -l drracket` on the command line?</text>
  </message>
  <message conversation_id="431">
    <ts>2017-11-05T04:42:47.000015</ts>
    <user>Chantelle</user>
    <text>Is it possible for two different Racket threads to use `racket/gui` on linux-y systems to talk to two different X servers? The only way I can think of how that would work is if the threads set the `DISPLAY` environment variable in the `current-environment-variables` parameter and that didn't explode when GTK was called via FFI</text>
  </message>
  <message conversation_id="431">
    <ts>2017-11-05T08:01:01.000095</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; that seems unlikely to be possible to me, but it's more likely in racket than in other systems</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T08:32:34.000082</ts>
    <user>Genevie</user>
    <text>I will try that and get back to you.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T10:38:59.000005</ts>
    <user>Vincenzo</user>
    <text>&lt;@Genevie&gt; Which version of macOS are you running? I'm still on 10.11 (El Capitan), and the current security update didn't affect DrRacket for me, but maybe I need to be on [High] Sierra to see the problem.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T11:20:17.000091</ts>
    <user>Genevie</user>
    <text>&lt;@Vincenzo&gt; I am running macOS 10.12.6 “Sierra.”</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T11:42:44.000105</ts>
    <user>Vincenzo</user>
    <text>&lt;@Genevie&gt; I updated a Sierra machine, and things still work for me. Maybe the output from Sam's suggestion will help.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T11:43:16.000057</ts>
    <user>Genevie</user>
    <text>I will try that when I get back to my house, later today.</text>
  </message>
  <message conversation_id="432">
    <ts>2017-11-05T12:17:35.000020</ts>
    <user>Ida</user>
    <text>What do people here think of the idea of named partially applied functions?</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T14:43:57.000027</ts>
    <user>Genevie</user>
    <text>&lt;@Vincenzo&gt; &lt;@Latarsha&gt; Running `bin/racket -l drracket` seems to work without problem on my Mac.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T14:48:51.000013</ts>
    <user>Genevie</user>
    <text>Doubling-clicking the DrRacket icon yields the same error that I reported earlier, in `system.log`:
```
Nov  5 12:41:40 gris com.apple.xpc.launchd[1] (com.apple.xpc.launchd.oneshot.0x1000002f.DrRacket[3153]): Service exited with abnormal code: 1
```</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T14:52:44.000041</ts>
    <user>Genevie</user>
    <text>Sometimes (?) I see that a volume is mounted and then quickly unmounted around the time that I run DrRacket by double-clicking on it. The volume seems to be a random hex string, different each tim—a UUID? (The mounting and unmounting is reported to me by HardwareGrowler.)</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T14:53:56.000016</ts>
    <user>Genevie</user>
    <text>The mounting/unmounting does not happen when I run `bin/racket -l drracket` from the command line.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T15:40:36.000006</ts>
    <user>Vincenzo</user>
    <text>&lt;@Genevie&gt; That behavior sounds like macOS trying to sandbox the application as untrusted. But the disk image that you used to install should have been signed, and so the application shouldn't be tagged as needing a sandbox.
Maybe something has gone wrong with signing, but I'd expect to have seen and heard about more problems in that case.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T15:53:37.000025</ts>
    <user>Genevie</user>
    <text>FWIW, I downloaded the Racket 6.11 package from the Utah mirror.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T15:59:11.000065</ts>
    <user>Genevie</user>
    <text>Just now, I downloaded the Racket 6.11 package again, from the Utah mirror, to another Mac running macOS 10.12.6. Double-clicking on DrRacket starts right up, no problem.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:00:20.000027</ts>
    <user>Genevie</user>
    <text>My machine on which it works is “fairly new”: an iMac (Retina 5K, 27-inch, Late 2015) with a 4GHz Interl Core i7.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:02:06.000026</ts>
    <user>Genevie</user>
    <text>My machine on which it does not work is “fairly old”: a MacBook Pro (15", Mid 2012) with a 2.6GHz Intel Core i7.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:03:40.000087</ts>
    <user>Genevie</user>
    <text>Perhaps the biggest difference between the machines is the graphics systems. Notably, my MacBook Pro does not have a retina display.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:09:49.000009</ts>
    <user>Vincenzo</user>
    <text>I've been trying via VNC to a 2012 Mac mini, so I don't think the vintage or display is the problem
Does `codesign -v racket-6.11-x86_64-macosx.dmg` say anything? Or `codesign -v /Applications/Racket\ v6.11/DrRacket.app` (if you installed to "Applications")?</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:11:21.000111</ts>
    <user>Genevie</user>
    <text>I ran both commands. Neither one produced any output.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:17:34.000066</ts>
    <user>Vincenzo</user>
    <text>That's good in that no output means no detected signing problem, but it leaves me with no more guesses</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:18:34.000048</ts>
    <user>Genevie</user>
    <text>Well, if you think of another hypothesis, let me know. Thanks for pondering!</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:18:41.000002</ts>
    <user>Genevie</user>
    <text>:thinking_face:</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:30:09.000108</ts>
    <user>Lashaunda</user>
    <text>&lt;@Genevie&gt; Sometimes when I download a nightly build, when I run it (double-click on the icon), nothing happens, other than DrRacket seems to start to start and then quickly shuts down again.  At some point in the past, someone told me (on MacOS) when this happens to drag the DrRacket icon/app out of the folder it's in, to the folder above, and then to drag it back into the original folder and try double-clicking again.  When I do that, the problem goes away and DrRacket starts normally from that point forward.  I don't know if this is related to the problem you saw, but I'm mentioning it in case it might be.</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:40:28.000006</ts>
    <user>Genevie</user>
    <text>&lt;@Lashaunda&gt; I tried that procedure on my MacBook Pro (where DrRacket was not working), and— _the problem went away!_</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:40:35.000088</ts>
    <user>Genevie</user>
    <text>Your trick worked!</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T16:40:48.000008</ts>
    <user>Genevie</user>
    <text>“Huh.”</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T18:29:30.000010</ts>
    <user>Genevie</user>
    <text>Thank you for your help, &lt;@Lashaunda&gt;!</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-05T19:08:35.000138</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; &lt;@Eun&gt; hopefully for the 6.12 release you'll be able to watch the GUI tests from your friendly neighborhood web browser &lt;https://github.com/samth/docker-racket-build/pull/18&gt;</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T21:05:02.000002</ts>
    <user>Jalisa</user>
    <text>&lt;@Genevie&gt; I’m on macOS. Installing the new version was a breeze for me. Simply drag the old folder to the trash, and then the new (entire folder—after opening package) to Applications. After that, running `sudo sh -c 'echo "/Applications/Racket v6.11/bin" &amp;gt;&amp;gt; /etc/paths'` seems to work flawlessly. Here also is another guide for that &lt;http://beautifulracket.com/setting-the-mac-os-path.html|beautifulracket.com/setting-the-mac-os-path.html&gt;</text>
  </message>
  <message conversation_id="430">
    <ts>2017-11-05T22:36:01.000170</ts>
    <user>Genevie</user>
    <text>Thanks for the help, &lt;@Jalisa&gt;!</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T11:11:35.000028</ts>
    <user>Tina</user>
    <text>&lt;@Corey&gt; you are right about `and/c`: &lt;https://github.com/racket/racket/blob/master/racket/collects/racket/contract/private/and.rkt#L182-L246&gt;</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:19:30.000240</ts>
    <user>Corey</user>
    <text>What I've been doing lately is making a web site:
```
$ curl -I -s &lt;https://deals.extramaze.com&gt; | grep Server
Server: Racket
```</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:22:27.000267</ts>
    <user>Chantelle</user>
    <text>&lt;@Corey&gt; how's the experience been this time around?</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:23:46.000082</ts>
    <user>Corey</user>
    <text>It's been good so far. (It's really my first time around.)</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:26:14.000063</ts>
    <user>Chantelle</user>
    <text>huh, I could have sworn you'd made sites with racket before</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:26:28.000060</ts>
    <user>Chantelle</user>
    <text>then again my memory is severely inadequate</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:26:37.000097</ts>
    <user>Corey</user>
    <text>Just static with Frog or Scribble</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:27:06.000239</ts>
    <user>Chantelle</user>
    <text>ahhhh</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:27:07.000532</ts>
    <user>Corey</user>
    <text>I have also doinked around with ClojureScript</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:27:56.000331</ts>
    <user>Corey</user>
    <text>This site is 0% XxxScript (except for what Stripe supplies).
It's all Racket plus Postgres on AWS.</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:28:15.000449</ts>
    <user>Chantelle</user>
    <text>_nice_</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:28:30.000424</ts>
    <user>Chantelle</user>
    <text>what're you using to talk to postgres with racket? just the `db` library or any extra stuff?</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:28:49.000008</ts>
    <user>Corey</user>
    <text>The `db` library, plus most queries written as sexprs using Ryan's `sql` lib</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:29:00.000291</ts>
    <user>Chantelle</user>
    <text>fantastic</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:29:11.000635</ts>
    <user>Chantelle</user>
    <text>how's using that `sql` package been?</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:29:39.000337</ts>
    <user>Corey</user>
    <text>It's been better than embedding text string literals, even within at-expr blocks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:30:21.000494</ts>
    <user>Jalisa</user>
    <text>Does anyone know of projects and Racket related to new cryptocurrencies?</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:30:54.000465</ts>
    <user>Chantelle</user>
    <text>there's none that I know of</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:34:21.000453</ts>
    <user>Jalisa</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:40:27.000096</ts>
    <user>Eun</user>
    <text>&lt;@Latarsha&gt;: Is there a minimum docker version needed to run your testing setup?</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:40:38.000665</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; yes, and it's fairly recent</text>
  </message>
  <message conversation_id="434">
    <ts>2017-11-06T14:40:48.000152</ts>
    <user>Eun</user>
    <text>I have 1.9.1 (latest from homebrew), and I get strange errors.</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:40:58.000767</ts>
    <user>Chantelle</user>
    <text>is that docker-compose version or docker engine version?</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:41:00.000130</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: Ah, ok.</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:41:11.000200</ts>
    <user>Eun</user>
    <text>Docker engine, lemme check docker-compose.</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:41:11.000585</ts>
    <user>Chantelle</user>
    <text>are you installing onto a mac?</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:41:23.000213</ts>
    <user>Eun</user>
    <text>1.5.2</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:41:32.000040</ts>
    <user>Eun</user>
    <text>Yes, I'm running this on my laptop, which is a mac.</text>
  </message>
  <message conversation_id="434">
    <ts>2017-11-06T14:41:46.000226</ts>
    <user>Eun</user>
    <text>That should be possible, right?</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:41:58.000479</ts>
    <user>Chantelle</user>
    <text>my advice is: don't install from homebrew, only install it with the official Docker for Mac installer</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:42:35.000600</ts>
    <user>Chantelle</user>
    <text>it should be possible but generally Docker for Mac is simpler and auto-updates</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:42:56.000231</ts>
    <user>Chantelle</user>
    <text>I'm not sure the homebrew formula is officially maintained by docker</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:46:00.000693</ts>
    <user>Eun</user>
    <text>Ah, ok, will try that.</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:52:39.000506</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: Got a newer version, now things seem to be happening. Thanks!</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:55:07.000312</ts>
    <user>Chantelle</user>
    <text>&lt;@Eun&gt; :+1:</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:57:19.000316</ts>
    <user>Corey</user>
    <text>Some Docker trivia: &lt;https://99designs.com/logo-design/contests/create-cool-open-source-project-logo-219415/entries&gt;</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:58:17.000040</ts>
    <user>Chantelle</user>
    <text>huh, so that's where the whale came from</text>
  </message>
  <message conversation_id="433">
    <ts>2017-11-06T14:58:36.000228</ts>
    <user>Chantelle</user>
    <text>I hope that designer got paid well and got a lot more work from docker for all the other logs and stuff they needed</text>
  </message>
  <message conversation_id="435">
    <ts>2017-11-06T16:44:21.000327</ts>
    <user>Nelson</user>
    <text>reminds me that Typed Racket could use a logo</text>
  </message>
  <message conversation_id="435">
    <ts>2017-11-06T16:44:35.000507</ts>
    <user>Nelson</user>
    <text>maybe also syntax/parse</text>
  </message>
  <message conversation_id="435">
    <ts>2017-11-06T16:52:00.000268</ts>
    <user>Eun</user>
    <text>&lt;@Nelson&gt;: Re TR, maybe that's too easy, but what about a Tau replacing the Lambda in the Racket logo?</text>
  </message>
  <message conversation_id="435">
    <ts>2017-11-06T16:54:28.000223</ts>
    <user>Latarsha</user>
    <text>I've seen that before -- I think Typed Clojure did something like that</text>
  </message>
  <message conversation_id="435">
    <ts>2017-11-06T17:12:38.000308</ts>
    <user>Jalisa</user>
    <text>Wow, that's awesome. _faved designer_</text>
  </message>
  <message conversation_id="435">
    <ts>2017-11-06T17:15:03.000120</ts>
    <user>Jalisa</user>
    <text>$430 is a great price for that quality of work: &lt;https://99designs.com/profiles/asammanis/services/284&gt;</text>
  </message>
  <message conversation_id="436">
    <ts>2017-11-06T17:23:15.000365</ts>
    <user>Jalisa</user>
    <text>&lt;@Corey&gt; I think this is by the same designer &lt;http://rickylinn.com/albums/arizona-iced-tea/&gt;</text>
  </message>
  <message conversation_id="437">
    <ts>2017-11-07T13:27:46.000002</ts>
    <user>Kimbery</user>
    <text>a Hackett logo would logically be a combination of the Haskell and Racket logos… but a lambda combined with a lambda is still just a lambda :/</text>
  </message>
  <message conversation_id="437">
    <ts>2017-11-07T13:28:31.000358</ts>
    <user>Kimbery</user>
    <text>I guess it could use the lambda/`&amp;gt;&amp;gt;=` hybrid that Haskell’s logo has</text>
  </message>
  <message conversation_id="438">
    <ts>2017-11-07T13:33:52.000447</ts>
    <user>Eun</user>
    <text>Can you make a lambda out of two smaller lambdas?</text>
  </message>
  <message conversation_id="438">
    <ts>2017-11-07T13:34:41.000223</ts>
    <user>Eun</user>
    <text>&lt;@Corey&gt;: ISTR you having a random generator for docs for fake (but plausible) syntax-zoo functions, but I can't find it. Is it still around?</text>
  </message>
  <message conversation_id="438">
    <ts>2017-11-07T13:40:59.000319</ts>
    <user>Corey</user>
    <text>I don't seem to have it handy. I pasterack-ed it but that's scrolled off by now. I think it's on an old laptop drive. I didn't dignify it by making it a repo :stuck_out_tongue:</text>
  </message>
  <message conversation_id="438">
    <ts>2017-11-07T13:44:45.000264</ts>
    <user>Eun</user>
    <text>That's a bummer.</text>
  </message>
  <message conversation_id="437">
    <ts>2017-11-07T14:21:39.000063</ts>
    <user>Jalisa</user>
    <text>&lt;@Kimbery&gt; I use a guy who does them for $100. I can monitor it, get your feedback, and have it made for you. I can front the money if you're seriously interested, and you can send it back to me when you're satisfied with the design. Let me know.</text>
  </message>
  <message conversation_id="437">
    <ts>2017-11-07T14:22:10.000637</ts>
    <user>Kimbery</user>
    <text>it’s fine, haha, I think it’s a little premature to be worrying about that right now.</text>
  </message>
  <message conversation_id="437">
    <ts>2017-11-07T14:23:54.000059</ts>
    <user>Jalisa</user>
    <text>Right. Here's one he did for me. Second.</text>
  </message>
  <message conversation_id="437">
    <ts>2017-11-07T14:24:36.000545</ts>
    <user>Jalisa</user>
    <text>&lt;https://i.imgur.com/gzr4TlL.jpg&gt;</text>
  </message>
  <message conversation_id="437">
    <ts>2017-11-07T14:27:33.000066</ts>
    <user>Jalisa</user>
    <text>Another one

&lt;https://i.imgur.com/TZZo2MH.jpg&gt;</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T15:27:27.000430</ts>
    <user>David</user>
    <text>How do I save a pict to a file? Preferably an SVG or a PDF, but without cropping the figure.</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:11:54.000192</ts>
    <user>Ka</user>
    <text>&lt;@David&gt; `(send (pict-&amp;gt;bitmap sp) save-file png-name 'png))))` works pretty well. `sp` is the pict</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:12:20.000209</ts>
    <user>Ka</user>
    <text>I'm guessing you figured it out though, as it's been nearly 3 hours.</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:13:15.000148</ts>
    <user>Ka</user>
    <text>but... oh, you were looking for svg or a PDF....</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:19:14.000243</ts>
    <user>David</user>
    <text>Still no luck with a scalable image format. But thanks anyway :slightly_smiling_face:</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:21:26.000169</ts>
    <user>Ka</user>
    <text>so, i've been looking a bit</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:21:46.000379</ts>
    <user>Ka</user>
    <text>slideshow can do to pdf, and what I've found is that there's a svg-dc% and a ps-dc%</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:21:50.000345</ts>
    <user>Ka</user>
    <text>so.</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:22:16.000324</ts>
    <user>Ka</user>
    <text>&lt;https://docs.racket-lang.org/draw/svg-dc_.html&gt;</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:24:21.000048</ts>
    <user>Ka</user>
    <text>it'll probably work to then use `(draw-pict yourpict svgdc ...)`</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T18:24:46.000035</ts>
    <user>Ka</user>
    <text>but, i'm not sure if it'll end up being scalable on the svgdc or not.</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T20:02:36.000041</ts>
    <user>David</user>
    <text>Hmmm, I’ll check this out. Thank you.</text>
  </message>
  <message conversation_id="439">
    <ts>2017-11-07T22:43:32.000069</ts>
    <user>Ka</user>
    <text>&lt;@Georgeanna&gt; thanks for that detailed example!</text>
  </message>
  <message conversation_id="440">
    <ts>2017-11-08T06:59:24.000208</ts>
    <user>David</user>
    <text>Thank you very much :slightly_smiling_face:
But, hey, that’s a lot of hoops we have to jump through for such a simple task. Would there be interest for ‘save-image’ and ‘save-svg-image’ functions for pict, à la 2htdp/image?</text>
  </message>
  <message conversation_id="440">
    <ts>2017-11-08T08:32:03.000251</ts>
    <user>Latarsha</user>
    <text>&lt;@David&gt; yeah that would be great</text>
  </message>
  <message conversation_id="440">
    <ts>2017-11-08T08:39:10.000329</ts>
    <user>David</user>
    <text>:+1: I opened this issue, then: &lt;https://github.com/racket/pict/issues/35&gt;</text>
  </message>
  <message conversation_id="441">
    <ts>2017-11-08T08:55:25.000187</ts>
    <user>Tilda</user>
    <text>It looks like picts are convertible, and that the convertible protocol implementation for picts accepts 'svg-bytes as a target format. Would that suffice here?</text>
  </message>
  <message conversation_id="440">
    <ts>2017-11-08T08:59:11.000131</ts>
    <user>David</user>
    <text>Unfortunately, I can’t tell, because I don’t know what “convertibles” are. But even if they suffice, I think there’s still room for some helper functions, or, at the very least, for some improvements to the documentation.</text>
  </message>
  <message conversation_id="441">
    <ts>2017-11-08T09:02:14.000046</ts>
    <user>Tilda</user>
    <text>see &lt;http://docs.racket-lang.org/file/convertible.html?q=file%2Fconvertible&gt; -- essentially, `(convert your-pict 'svg-bytes)` should give you a bytestring containing a valid svg</text>
  </message>
  <message conversation_id="441">
    <ts>2017-11-08T09:02:32.000072</ts>
    <user>Tilda</user>
    <text>(not all the conversion targets are supported by all convertible things, annoyingly, but it looks like picts do support svg-bytes)</text>
  </message>
  <message conversation_id="441">
    <ts>2017-11-08T09:03:14.000166</ts>
    <user>Tilda</user>
    <text>(someone else more knowledgeable about this should chime in here; I know just enough about `convert` to know that it exists, but I haven't played around with picts very much)</text>
  </message>
  <message conversation_id="441">
    <ts>2017-11-08T09:06:32.000296</ts>
    <user>David</user>
    <text>Yes, this seems to be in the direction I’m thinking about…</text>
  </message>
  <message conversation_id="442">
    <ts>2017-11-08T12:21:16.000233</ts>
    <user>Eun</user>
    <text>&lt;@Vincenzo&gt;: Quick distro-build question: is `make site` guaranteed to exit with a non-0 return code if any of the build clients failed?</text>
  </message>
  <message conversation_id="442">
    <ts>2017-11-08T12:38:28.000719</ts>
    <user>Vincenzo</user>
    <text>&lt;@Eun&gt; It looks like the non-0 status may only happen with completely sequential builds. That could be fixed for builds that include parallel parts.</text>
  </message>
  <message conversation_id="442">
    <ts>2017-11-08T13:05:01.000097</ts>
    <user>Eun</user>
    <text>Ok, thanks for confirming! I'll try implementing the change.</text>
  </message>
  <message conversation_id="442">
    <ts>2017-11-08T13:13:40.000738</ts>
    <user>Eun</user>
    <text>That turned out to be pretty easy, actually. I'll push the change.</text>
  </message>
  <message conversation_id="442">
    <ts>2017-11-08T13:16:22.000212</ts>
    <user>Vincenzo</user>
    <text>Great - thanks</text>
  </message>
  <message conversation_id="443">
    <ts>2017-11-08T16:01:08.000473</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; how nondeterministic is the distro-build process?</text>
  </message>
  <message conversation_id="443">
    <ts>2017-11-08T16:03:46.000258</ts>
    <user>Vincenzo</user>
    <text>There's non-determinism in bytecode compilation (reduced over time, but not eliminated outside the main "collects") and in C compilation (because C compilers tend to have some non-determinism, too, if you're not at Google)</text>
  </message>
  <message conversation_id="444">
    <ts>2017-11-08T16:54:57.000246</ts>
    <user>Georgeanna</user>
    <text>&lt;@Tilda&gt; does that mean I can remove metapict from the equation and just do all this directly?</text>
  </message>
  <message conversation_id="444">
    <ts>2017-11-08T16:57:24.000303</ts>
    <user>Tilda</user>
    <text>I don't think metapict was part of the issue.  It's just a library you used to create the pict, no? So for example,
```
#lang racket
(require pict file/convertible)
(define p (filled-rectangle 40 40))
(convert p 'svg-bytes)
```</text>
  </message>
  <message conversation_id="444">
    <ts>2017-11-08T16:58:40.000275</ts>
    <user>Tilda</user>
    <text>if you want to make a metapict-based pict, that's your prerogative, but it doesn't seem to have to do anything with how to convert the underlying pict to a svg, unless I misunderstand your problem scenario</text>
  </message>
  <message conversation_id="444">
    <ts>2017-11-08T17:05:42.000232</ts>
    <user>Georgeanna</user>
    <text>I’m just trying to peel back the onion and see how much code this really takes. metapict is providing a lot of drawing… I wasn’t sure what type of thing I was getting back therefore didn’t know whether I could do the convertable (I can—so much cleaner than that bottom blob I had!)… now I’m trying to peel back the drawing code from metapict</text>
  </message>
  <message conversation_id="444">
    <ts>2017-11-08T17:07:00.000150</ts>
    <user>Georgeanna</user>
    <text>I guess I should also poke at `2htdp/image`</text>
  </message>
  <message conversation_id="444">
    <ts>2017-11-08T17:07:34.000295</ts>
    <user>Tilda</user>
    <text>I suspect (but am not an expert here) that metapict is a convenience library over the underlying pict datatype.  It makes it easier to construct sophisticated picts, but that's orthogonal to how to save them.  Likewise, 2htdp/images are convertible, which is ultimately how I save them, by converting them to png-bytes :slightly_smiling_face:</text>
  </message>
  <message conversation_id="444">
    <ts>2017-11-08T17:11:28.000337</ts>
    <user>Georgeanna</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="444">
    <ts>2017-11-08T17:13:26.000359</ts>
    <user>Tilda</user>
    <text>&lt;http://soegaard.github.io/docs/metapict/metapict.html#%28part._reference-pict%29&gt; documentation: "All images in MetaPict are represented as picts. A pict is a structure that holds information on how to draw a picture. A pict can be rendered to produce an image in various formats such as png, pdf, and, svg."</text>
  </message>
  <message conversation_id="444">
    <ts>2017-11-09T04:00:10.000251</ts>
    <user>Karine</user>
    <text>I am trying to run raco in a docker container based on fedora:26 and I keep getting: `SSL_library_init: implementation not found; no arguments provided`</text>
  </message>
  <message conversation_id="445">
    <ts>2017-11-09T04:00:29.000073</ts>
    <user>Karine</user>
    <text>Which dep am I missing here? I am installing openssl and openssl-devel which I thought was the requirement.</text>
  </message>
  <message conversation_id="445">
    <ts>2017-11-09T04:32:13.000287</ts>
    <user>Karine</user>
    <text>ah.. .the missing dep was openssl-libs. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T09:41:17.000665</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; you can see a more verbose file test output here: &lt;https://travis-ci.org/racket/racket/builds/299648951&gt;</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T09:41:25.000659</ts>
    <user>Latarsha</user>
    <text>they all seem to hang in the same place</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T09:47:42.000072</ts>
    <user>Vincenzo</user>
    <text>Looks like they're hanging at an IPv6 test</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T09:48:00.000406</ts>
    <user>Vincenzo</user>
    <text>line 1528 of "file.rktl"</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T09:49:46.000118</ts>
    <user>Latarsha</user>
    <text>this suggests that maybe we shouldn't expect that to work: &lt;https://github.com/travis-ci/travis-ci/issues/3302#issuecomment-159748795&gt;</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T10:04:26.000276</ts>
    <user>Vincenzo</user>
    <text>The test is set up to accommodate environments where IPv6 is not supported so that listening at "::1" or connecting to "::1" raises an exception. Maybe something has gone wrong in error handling for that case. (If trying to use "::1" fails without reporting an error, then I don't know offhand how to accommodate that.)</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T10:46:46.000150</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; is there an expression I could try to run that would tell us the difference?</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T10:49:15.000016</ts>
    <user>Vincenzo</user>
    <text>It might be interesting to know whether `(listen "::1")` by itself hangs, but I think it will take more work to track down the problem</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T15:19:47.000283</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; what's the `listen` function you refer to? `tcp-listen` doesn't seem like the right thing there</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T16:06:06.000544</ts>
    <user>Vincenzo</user>
    <text>Oh, I see... I did mean `tcp-listen`, but I see that `tcp-listen` in the test doesn't have a hostname. I wonder if adding the hostname to `tcp-listen` would help. (I think it would still be a valid test.)</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T16:08:27.000399</ts>
    <user>Latarsha</user>
    <text>I'm still confused -- what does "::1" mean then?</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T16:11:30.000095</ts>
    <user>Ka</user>
    <text>::1 looks like an ipv6 address</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T16:11:49.000417</ts>
    <user>Latarsha</user>
    <text>right, it is</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T16:11:58.000086</ts>
    <user>Ka</user>
    <text>(sorry, should have read up)</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T16:12:07.000039</ts>
    <user>Latarsha</user>
    <text>but I'm confused about what mflatt means to try with tcp-listen</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T16:13:22.000122</ts>
    <user>Vincenzo</user>
    <text>as the 4th argument</text>
  </message>
  <message conversation_id="446">
    <ts>2017-11-09T16:13:58.000568</ts>
    <user>Vincenzo</user>
    <text>That is, I orginally had in mind `(tcp-listen 0 5 #t "::1")`</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-09T19:12:30.000079</ts>
    <user>Chantelle</user>
    <text>Btw I made some docker images for Racket that you might be able to use instead. I'm curious how you're planning on using Racket and docker together</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-09T20:46:50.000198</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; I'm planning on merging the linux-natipkg docker build PR later tonight unless you've got objections</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-09T20:47:26.000129</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; I think my thoughts here are less useful than yours anyway ;)</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-09T20:48:20.000077</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; ack ;)</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-09T20:49:21.000141</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; oh, could you enable Travis on that repo? There's a docker service available to travis runs so I want to try and get the installer tests running on that</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-09T20:52:11.000060</ts>
    <user>Latarsha</user>
    <text> Done</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-09T20:56:49.000248</ts>
    <user>Chantelle</user>
    <text>Fantastic, thanks</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-09T23:27:28.000092</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; that `tcp-listen` test failed: &lt;https://travis-ci.org/racket/racket/jobs/299991848#L1661&gt;</text>
  </message>
  <message conversation_id="448">
    <ts>2017-11-10T04:13:19.000322</ts>
    <user>Karine</user>
    <text>Does anyone know where the quickcheck pkg source is?</text>
  </message>
  <message conversation_id="448">
    <ts>2017-11-10T04:13:31.000219</ts>
    <user>Karine</user>
    <text>Can't seem to find a link to it from the docs.</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-10T08:26:34.000123</ts>
    <user>Latarsha</user>
    <text>&lt;@Karine&gt; if you go here &lt;https://pkgs.racket-lang.org/package/quickcheck&gt; there's a link to the source</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-10T08:50:39.000256</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; Thanks! That error is good news, and I'll try to adapt "file.rktl"</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-10T08:53:12.000548</ts>
    <user>Latarsha</user>
    <text>also, note for the future: the `.travis.yml` syntax doesn't understand that a `#` inside `" ... "` shouldn't start a new comment :disappointed:</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-10T10:33:35.000507</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; your repair has fixed the travis issue</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-10T13:31:41.000626</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; it looks like the Typed Racket tests run in the gui test script includes some tests that depend on ext flonums, and those tests fail on the 32-bit builds (racket-i386 and racket-i386-minimal)</text>
  </message>
  <message conversation_id="449">
    <ts>2017-11-10T13:32:56.000118</ts>
    <user>Chantelle</user>
    <text>I think adding code to those tests to recognize when they're being run on 32-bit racket and skipping those tests would be appropriate</text>
  </message>
  <message conversation_id="447">
    <ts>2017-11-10T13:42:24.000095</ts>
    <user>Latarsha</user>
    <text>I think they should just test if extflonums are available explicitly</text>
  </message>
  <message conversation_id="449">
    <ts>2017-11-10T16:47:36.000180</ts>
    <user>Chantelle</user>
    <text>that does sound better</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T02:55:25.000149</ts>
    <user>Karine</user>
    <text>Does anybody know of a project using quickcheck that is defining their own generators? I am having a hard time understanding how to do this from the docs.</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T02:55:52.000160</ts>
    <user>Karine</user>
    <text>The problem is not so much creating the generator itself: `(make-generator (lambda (size rgen) ...))` would do it...</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T02:56:11.000064</ts>
    <user>Karine</user>
    <text>but reusing existing generators in the definition of a new one.</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T03:59:16.000246</ts>
    <user>Chantelle</user>
    <text>&lt;@Karine&gt; I've worked on that project a little, and I don't think it's easy to do that yet</text>
  </message>
  <message conversation_id="451">
    <ts>2017-11-13T03:59:53.000249</ts>
    <user>Chantelle</user>
    <text>You're most likely to have success sending PRs to improve the data model</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:01:48.000062</ts>
    <user>Karine</user>
    <text>&lt;@Chantelle&gt; that's unfortunate.  For larger projects creation of new generators is a must. Can't be that hard. If I have a struct of two integers, creating a generator for the struct by reusing the generator for integers should really be straightforward. :disappointed: Thanks anyway.</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:02:07.000359</ts>
    <user>Chantelle</user>
    <text>&lt;@Karine&gt; Have you seen the Hypothesis python library?</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:02:25.000462</ts>
    <user>Chantelle</user>
    <text>it's a very advanced property testing library that does some really neat things with how generators / arbitraries are represented</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:03:09.000043</ts>
    <user>Chantelle</user>
    <text>in particular, under Hypothesis's model generators monadically compose and allow effective shrinking to be derived automatically for a composed generator</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:03:55.000133</ts>
    <user>Karine</user>
    <text>yes, I use Hypothesis regularly. However, this specific project is racket-based. Unless you know of a solution on how to plug Hypothesis with racekt.</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:05:12.000020</ts>
    <user>Chantelle</user>
    <text>I think implementing hypothesis's representation of arbitraries into the racket quickcheck library would be a really great thing to do</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:05:29.000143</ts>
    <user>Chantelle</user>
    <text>although that would take more time than you likely have if you're trying to just use quickcheck in your racket project</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:05:54.000013</ts>
    <user>Karine</user>
    <text>understood but I am juggling quite a few balls at the moment. Unlikely I will able to pick up on that tbh.</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:06:08.000027</ts>
    <user>Chantelle</user>
    <text>completely understandable</text>
  </message>
  <message conversation_id="450">
    <ts>2017-11-13T04:06:49.000048</ts>
    <user>Chantelle</user>
    <text>it's on my list of things to do eventually in some Far Distant Future where somebody's finally invented a way to freeze life responsibilities indefinitely</text>
  </message>
  <message conversation_id="452">
    <ts>2017-11-13T07:49:26.000190</ts>
    <user>Tilda</user>
    <text>&lt;@Tina&gt;, &lt;@Vincenzo&gt; a student of mine is seeing the following bug on Win10FCU, DrR6.11: "Whenever I sleep my computer with DrR running, it gives me the following error when I wake it up.  Resolved by closing and restarting DrR."</text>
  </message>
  <message conversation_id="452">
    <ts>2017-11-13T07:49:45.000150</ts>
    <user>Tilda</user>
    <text>Before I file a bug report, what extra diagnostic info would be useful to you, and how do I collect it with this student?</text>
  </message>
  <message conversation_id="452">
    <ts>2017-11-13T09:06:26.000189</ts>
    <user>Vincenzo</user>
    <text>&lt;@Tilda&gt; I think that's enough information for us to find the bug</text>
  </message>
  <message conversation_id="453">
    <ts>2017-11-13T09:23:14.000014</ts>
    <user>Karine</user>
    <text>what's the necessary magic to get rid of my relative path requires all over my project and use collection like paths? i.e. `(require myproject/lib/utils)` as opposed to `(require "../src/lib/utils.rkt")`?</text>
  </message>
  <message conversation_id="454">
    <ts>2017-11-13T11:07:18.000843</ts>
    <user>Patrice</user>
    <text>how about installing `myproject` as a package?
```
SOME-PATH/myproject $ raco pkg install
```</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-14T11:32:33.000418</ts>
    <user>Ida</user>
    <text>Does anyone know why Racket differentiates Lists from Pairs?</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-14T11:32:38.000130</ts>
    <user>Ida</user>
    <text>They appear to be so similar</text>
  </message>
  <message conversation_id="454">
    <ts>2017-11-14T11:46:43.000516</ts>
    <user>Nancie</user>
    <text>Just a guess, but usually the cdr of a list is also a list, not an atom</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-14T11:47:24.000475</ts>
    <user>Nancie</user>
    <text>so if you passed a pair to a contract that specified list, there could still be a runtime error if it does something with the tail of it</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-14T22:07:53.000205</ts>
    <user>Jacob</user>
    <text>Lists are built out of pairs, and if the pair notation was the only thing we had available then a list would be written as ( a . ( b . ( c . ( d . ())))). It's rather cumbersome to write a list like that so it's just easier to employ a list notation (a b c d) and be done with it. </text>
  </message>
  <message conversation_id="456">
    <ts>2017-11-14T22:15:29.000070</ts>
    <user>Jacob</user>
    <text>And why the need for () as the very last thing in the list written out in the pair notation? If you consider a list of just one element, (d). How would you want to write that in pair notation? You might try write it as (d . ) but that doesn't work, a pair always has two elements, the car and cdr of a pair always return valid elements. So we just define the concept of an empty list, identify it as (), which is a valid value in Racket. Now we can write (d) as (d . ()). Thus the cdr of (d) will always be ().</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:09:18.000351</ts>
    <user>Ida</user>
    <text>I was particularly confused about `first` and `rest` vs. `car` and `cdr`</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:09:42.000288</ts>
    <user>Ida</user>
    <text>For example, `(cons '() 3)` is apparently not a list, and `first` and `rest` won't work on it</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:10:04.000044</ts>
    <user>Ida</user>
    <text>but `car` and `cdr` work just fine</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:10:34.000372</ts>
    <user>Jacob</user>
    <text>That is because car and cdr operate on a low level, they see a list as a linked list of pairs</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:11:10.000447</ts>
    <user>Ida</user>
    <text>But to me, the structure looks all very list-like</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:11:21.000494</ts>
    <user>Jacob</user>
    <text>`cons` always return a pair, `(cons '(), 3)` will return `('() . 3)` which is a pair</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:11:50.000630</ts>
    <user>Jacob</user>
    <text>`first` and `rest` operates on a more abstract level, they expect their parameters to be lists</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:12:27.000424</ts>
    <user>Jacob</user>
    <text>the reason `cons`, `car`, and `cdr` work fine on a list is because they sees a list just as linked pairs</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:12:32.000461</ts>
    <user>Ida</user>
    <text>So a list of size 2 is different from a pair?</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:12:58.000615</ts>
    <user>Ida</user>
    <text>`(list '() 3)` versus `(cons '() 3)`</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:13:07.000180</ts>
    <user>Jacob</user>
    <text>yes, they are different</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:13:30.000676</ts>
    <user>Jacob</user>
    <text>why don't you write out `(list '() 3)` using pair notation like I did in yesterday's message?</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:13:47.000472</ts>
    <user>Jacob</user>
    <text>and compare to what `(cons '() 3)` looks like in pair notation</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:13:50.000067</ts>
    <user>Ida</user>
    <text>Racket spits it back out without the period</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:14:00.000121</ts>
    <user>Ida</user>
    <text>But conceptually I thouht they are the same</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:14:14.000527</ts>
    <user>Ida</user>
    <text>I thought my `(list '() 3)` is built out of a pair</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:14:34.000168</ts>
    <user>Ida</user>
    <text>so I thought the smallest list and a pair should be identical</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:14:41.000391</ts>
    <user>Jacob</user>
    <text>there is more than one pair involved in `(list '() 3)`</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:15:21.000160</ts>
    <user>Jacob</user>
    <text>written out in pair notation, `(list '() 3)` would look like `('() . (3. '()))`</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:15:52.000256</ts>
    <user>Jacob</user>
    <text>`(cons '() 3)` in pair notation would look like `('() . 3)`</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:16:26.000170</ts>
    <user>Ida</user>
    <text>Oh I see you're saying there's an implicit hidden `'()`</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:16:27.000049</ts>
    <user>Jacob</user>
    <text>as you can see, `(list '() 3)` and `(cons '() 3)` look nothing like each other when viewed as pairs</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:16:48.000693</ts>
    <user>Ida</user>
    <text>My Dr. Racket doesn't give out those periods</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:16:56.000126</ts>
    <user>Ida</user>
    <text>I mean, it normally does, but not for list</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:17:22.000239</ts>
    <user>Jacob</user>
    <text>the Racket printer hides the underlying pair nature of a list from you by printing as ('() 3) without any periods</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:18:33.000483</ts>
    <user>Ida</user>
    <text>Is there a Racket tool to more easily visualize the linked pairs underneath?</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:18:49.000640</ts>
    <user>Jacob</user>
    <text>I think so yes, there's an option to configure the Racket printer</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:18:51.000081</ts>
    <user>Jacob</user>
    <text>let me see</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:22:31.000385</ts>
    <user>Jacob</user>
    <text>not able to find it at the moment, maybe others will be able to point it out for us</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:23:02.000101</ts>
    <user>Ida</user>
    <text>Ah well on your hint I dived into `1.4.5` of the Reader docs</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:23:15.000186</ts>
    <user>Ida</user>
    <text>but it appears my Dr Racket is on maximum verbosity</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:23:33.000301</ts>
    <user>Latarsha</user>
    <text>&lt;@Ida&gt; if you're new to lists and pairs, you might find the "Beginning Student Language" helpful, and trying things out there</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:23:40.000151</ts>
    <user>Jacob</user>
    <text>if you'd like to practice in your DrRacket, try `(cons 'a 'b)` and `(cons 'a '())` and compare the two results</text>
  </message>
  <message conversation_id="455">
    <ts>2017-11-15T13:23:46.000473</ts>
    <user>Latarsha</user>
    <text>where you will only be able to use `cons` to construct lists</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T17:56:52.000313</ts>
    <user>Vada</user>
    <text>Sorry for the noob question but what is the difference between the top window in DR Racket and the bottom/REPL one?

In particular why can’t I evaluate this form `(include-book "j-bob-lang" :dir :teachpacks)` in the bottom window but can in the top?

(I’m trying to go through the little prover)</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T17:57:09.000304</ts>
    <user>Vada</user>
    <text>(so have installed Dracula/ACL2)</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T17:59:05.000195</ts>
    <user>Latarsha</user>
    <text>&lt;@Vada&gt; what does DrRacket say the Language is?</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T18:01:45.000151</ts>
    <user>Vada</user>
    <text>ACL2</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T18:04:33.000392</ts>
    <user>Vada</user>
    <text>&lt;@Latarsha&gt;: I use emacs/clojure mainly - so am familiar with having a file/buffer and a repl.  I’m assuming that’s going on here, but would’ve expected the `include-book` form to evaluate the same in both places.  So mainly curious about that aspect.</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T18:05:17.000045</ts>
    <user>Latarsha</user>
    <text>&lt;@Vada&gt; It looks like you can do `include-book` in the top but not the bottom?</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T18:05:25.000402</ts>
    <user>Vada</user>
    <text>yes</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T18:06:26.000385</ts>
    <user>Vada</user>
    <text>oh that’s strange doing it now it works</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T18:06:27.000006</ts>
    <user>Latarsha</user>
    <text>So I assume that the ACL2 language only allows new books in the definitions area, but I don't know why</text>
  </message>
  <message conversation_id="457">
    <ts>2017-11-15T18:06:48.000389</ts>
    <user>Vada</user>
    <text>not sure what has changed</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T19:34:02.000057</ts>
    <user>Ka</user>
    <text>i feel as though i've seen something, even recently but can't find it... has someone done a language usage survey -- like that of &lt;http://taylor.fausak.me/2017/11/15/2017-state-of-haskell-survey-results/&gt; before?</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T19:34:17.000021</ts>
    <user>Ka</user>
    <text>(obviously for racket)</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T19:34:31.000355</ts>
    <user>Latarsha</user>
    <text>&lt;@Ka&gt; no, I don't think we've done anything like that</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T19:35:04.000028</ts>
    <user>Ka</user>
    <text>&lt;@Latarsha&gt; ah. ok.</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T19:35:26.000193</ts>
    <user>Ka</user>
    <text>for some reason I though I remembered something like that happening recently.. obviously I'm wrong. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T19:36:29.000046</ts>
    <user>Ka</user>
    <text>The survey questions from the Haskell survey linked above are actually quite interesting and I think mostly applicable to Racket... aside maybe from the different packages servers and tools, of course.</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T19:36:49.000234</ts>
    <user>Ka</user>
    <text>I'm tempted to try to put something like this together for racket -- any interest?</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T19:37:31.000200</ts>
    <user>Latarsha</user>
    <text>&lt;@Ka&gt; I think something like that would be cool</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T19:39:00.000036</ts>
    <user>Ka</user>
    <text>yeah, me too. if anyone is interested in helping, let me know. I'll start thinking about how to pull it off.</text>
  </message>
  <message conversation_id="459">
    <ts>2017-11-15T20:41:57.000175</ts>
    <user>Ida</user>
    <text>You mean a State of Racket survey? That would be interesting</text>
  </message>
  <message conversation_id="459">
    <ts>2017-11-15T20:59:02.000188</ts>
    <user>Ida</user>
    <text>Can anyone point me in the right direction on making a simple http get request in Racket?</text>
  </message>
  <message conversation_id="459">
    <ts>2017-11-15T20:59:25.000148</ts>
    <user>Ida</user>
    <text>The docs for the http client are a little terse ~_~</text>
  </message>
  <message conversation_id="459">
    <ts>2017-11-15T22:12:36.000033</ts>
    <user>Latarsha</user>
    <text>&lt;@Ida&gt;
```
#lang racket

(require net/url)
(port-&amp;gt;string (get-pure-port (string-&amp;gt;url "&lt;https://google.com/&gt;")))
```</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T22:37:25.000104</ts>
    <user>Eun</user>
    <text>&lt;@Ka&gt;: Maybe you were thinking of the recent RacketCon survey?</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T22:37:35.000041</ts>
    <user>Eun</user>
    <text>Also, seconding the "this would be great" comment!</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-15T22:58:32.000117</ts>
    <user>Ka</user>
    <text>&lt;@Eun&gt; it wasn’t the racketcon survey. I must have dreamed about a results post, because I swear Ben wrote it. Apparently, I dream about racket surveys? idk.</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-16T03:05:58.000085</ts>
    <user>Ka</user>
    <text>so, i've got a little scribble helper that works like this: &lt;https://gist.github.com/apg/7d3eda32a2925d8270f2dabef2b968fd&gt;</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-16T03:07:11.000224</ts>
    <user>Ka</user>
    <text>basically, it allows me to inline a graphviz diagram (eventually I'd like to draw this with pict, but I digress) by passing it as an argument to `@image`, but I'm also trying to setup a `@figure` with a label.</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-16T03:08:20.000336</ts>
    <user>Ka</user>
    <text>I've figured out how to make little extensions for scribble, but what I don't yet understand is how to actually combine them into a bigger thing. Maybe the answer is that I just need a macro here?</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-16T03:09:28.000075</ts>
    <user>Ka</user>
    <text>(see thing.scrbl ... but, really I'd rather have something like `@graphviz-figure[#:ref "foo-bar" #:label "Some Foo Bar"]{ ... }`</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-16T03:36:49.000379</ts>
    <user>Ka</user>
    <text>oh wait. i guess a function will do!</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-16T04:11:34.000085</ts>
    <user>Ka</user>
    <text>(got it)</text>
  </message>
  <message conversation_id="460">
    <ts>2017-11-16T05:00:07.000315</ts>
    <user>Karine</user>
    <text>Anyone here with experience in interfacing go and racket?</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-16T10:02:15.000242</ts>
    <user>Ka</user>
    <text>&lt;@Karine&gt; uf you find things, please let me know.</text>
  </message>
  <message conversation_id="460">
    <ts>2017-11-16T11:47:45.000248</ts>
    <user>Karine</user>
    <text>apg sure will</text>
  </message>
  <message conversation_id="458">
    <ts>2017-11-16T11:47:50.000575</ts>
    <user>Karine</user>
    <text>&lt;@Ka&gt; ^^^</text>
  </message>
  <message conversation_id="461">
    <ts>2017-11-16T12:29:42.000060</ts>
    <user>Jacob</user>
    <text>I just discovered that Racket commits to left-to-right evaluation order. I had been assuming that Racket was like Scheme in keeping evaluation order unspecified. I was wondering if there are any specific reasons for picking and sticking to left-to-right, other than simple convenience?</text>
  </message>
  <message conversation_id="461">
    <ts>2017-11-16T12:30:17.000041</ts>
    <user>Latarsha</user>
    <text>&lt;@Jacob&gt; making it easier to understand what your program will do</text>
  </message>
  <message conversation_id="461">
    <ts>2017-11-16T12:30:48.000583</ts>
    <user>Jacob</user>
    <text>makes sense and good reason to have as many things specified as possible</text>
  </message>
  <message conversation_id="461">
    <ts>2017-11-16T12:31:37.000350</ts>
    <user>Jacob</user>
    <text>I was reading the schemify.rkt file in racket7's cs folder and saw the comment about transforming to enforce left-to-right which surprised me. Good to improve my understanding of Racket's semantics nuances</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T13:51:54.000127</ts>
    <user>Rosalee</user>
    <text>&lt;!everyone&gt; The RacketCon 2017 videos are now live! &lt;https://www.youtube.com/playlist?list=PLXr4KViVC0qIgkwFFzM-0we_aoOfAl16Y&gt;</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T13:52:02.000327</ts>
    <user>Rosalee</user>
    <text>Thank you to everyone who participated.</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T13:53:59.000412</ts>
    <user>Ka</user>
    <text>&lt;@Rosalee&gt; thanks for *your* hard work to make that happen!</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T13:55:25.000436</ts>
    <user>Lory</user>
    <text>Does this preclude optimizations that would parallelize?</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T13:55:26.000435</ts>
    <user>Eun</user>
    <text>Thanks @leif!</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T13:55:57.000370</ts>
    <user>Eun</user>
    <text>And thanks to all our speakers! And sponsors! And helpers! :)</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:02:45.000252</ts>
    <user>Jacob</user>
    <text>perhaps &lt;@Latarsha&gt; can clarify for you</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:11:05.000056</ts>
    <user>David</user>
    <text>This is a coincidence, I was watching the archived stream now :slightly_smiling_face:

It seems like there’s something wrong with this video: &lt;https://www.youtube.com/watch?v=1CORm7A8uWo&gt;</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:11:26.000478</ts>
    <user>David</user>
    <text>And this one: &lt;https://www.youtube.com/watch?v=HJjd-Y9GCAY&gt;</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:11:52.000334</ts>
    <user>David</user>
    <text>(Namely, they’re all black screen.)</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:13:40.000427</ts>
    <user>Shad</user>
    <text>Ruh roh</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:14:16.000083</ts>
    <user>Latarsha</user>
    <text>not really, because parallel semantics is even weaker than what's in the Scheme standard</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:14:17.000511</ts>
    <user>Latarsha</user>
    <text>but in general, implicit parallelism in that sort of thing has not been a big win anywhere</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:17:44.000351</ts>
    <user>Rosalee</user>
    <text>&lt;@David&gt; Eep. It looks like it was a problem with youtube’s conversion process. On it.</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:19:45.000234</ts>
    <user>Rosalee</user>
    <text>Actually no, I should have noticed that. This looks like it came from the videos that the recorder gave us.</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:21:46.000135</ts>
    <user>Rosalee</user>
    <text>I ‘may’ need to grab the videos from the live stream. This will probably take a day to fix. :disappointed:</text>
  </message>
  <message conversation_id="462">
    <ts>2017-11-16T14:22:01.000048</ts>
    <user>David</user>
    <text>Uhh, I’m sorry about that.</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T17:38:23.000075</ts>
    <user>Ka</user>
    <text>does scribble provide a parameter that can tell me what the current file being processed is? or, actually, maybe that's a more general parameter than something from scribble/base...</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T17:42:45.000305</ts>
    <user>Corey</user>
    <text>&lt;@Ka&gt; If you mean at compile time, like a sort of `__FILE__` for Racket, you can use `(syntax-source #'here)`.</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T17:43:16.000162</ts>
    <user>Corey</user>
    <text>If you mean at run time I'm not sure.</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T17:46:32.000421</ts>
    <user>Corey</user>
    <text>p.s. Nothing special about `#'here`. Also `(syntax-source #'42)` or `(syntax-source (syntax "whatever I am just some syntax"))`.</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T18:20:22.000387</ts>
    <user>Ka</user>
    <text>&lt;@Corey&gt; yeah, Ideally runtime, but this is great, too.</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T18:21:15.000112</ts>
    <user>Ka</user>
    <text>the idea is that I can cache the output of my embedded graphviz documents iff i can compare mtimes between the scribble file it's defined in and the mtime of the cached file on disk.</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T18:21:54.000251</ts>
    <user>Ka</user>
    <text>it's not a huge deal, really, but if it's simple to do, because there's a parameter that gives me the info, then I'd do it.</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T18:39:50.000397</ts>
    <user>Ka</user>
    <text>@greg uhhh, duh. I can make my thing a macro, capture the syntax-source and then use it. At least in theory!</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T18:44:23.000128</ts>
    <user>Ka</user>
    <text>Actually, I don’t think that works. Not sure how to use a macro in a scribble doc...</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T18:54:01.000042</ts>
    <user>Chantelle</user>
    <text>&lt;@Ka&gt; caching the output of an embedded graph doc based on when the doc file changes sounds like something a compiler should be doing</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T18:54:46.000022</ts>
    <user>Chantelle</user>
    <text>can you compute the output at compile time and tell `raco make` that the great source file is a compilation dependency?</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T21:34:45.000055</ts>
    <user>Ka</user>
    <text>@notjack it doesn’t really need to be done at all, and the way its done now involves creating a tmpfile to dump the contents into, run `dot` and copy the output file appropriately. </text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-16T21:35:02.000136</ts>
    <user>Ka</user>
    <text>Also: I need to look at raco make. </text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T12:04:43.000445</ts>
    <user>Nelson</user>
    <text>would it make sense for `raco make` to check that dependencies exist?</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T12:05:25.000413</ts>
    <user>Nelson</user>
    <text>right now if `a.rkt` depends on `b.rkt`, and I compile them, then I delete `b.rkt`, I can still compile and run `a.rkt`</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T12:10:18.000741</ts>
    <user>Ka</user>
    <text>&lt;@Nelson&gt; certainly seems reasonable for me to have a `make` check dependencies. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T13:35:36.000672</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; that's intentional</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-17T13:35:54.000474</ts>
    <user>Latarsha</user>
    <text>You don't need to have the source file if you have the zo</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T14:23:56.000022</ts>
    <user>Ka</user>
    <text>&lt;@Latarsha&gt; does that mean the .zo satisfies the dependency just the same as b.rkt then? And so the behavior _does_ check dependencies?</text>
  </message>
  <message conversation_id="463">
    <ts>2017-11-17T14:45:21.000376</ts>
    <user>Latarsha</user>
    <text>Yes</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T15:03:03.000183</ts>
    <user>Nelson</user>
    <text>okay then, I'll try adding a flag to `raco make`</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T15:03:41.000360</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; what exactly would the flag do in that case?</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T15:04:38.000157</ts>
    <user>Nelson</user>
    <text>well I'm hoping `raco make file.rkt` has a list of things `file.rkt` depends on</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T15:04:49.000194</ts>
    <user>Nelson</user>
    <text>and things in that list can be mapped to filesystem locations</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T15:04:58.000003</ts>
    <user>Nelson</user>
    <text>then the flag would assert that they all exist</text>
  </message>
  <message conversation_id="464">
    <ts>2017-11-17T15:05:38.000510</ts>
    <user>Nelson</user>
    <text>in my case I just had `(require "file.rkt")` and I'd renamed `"file.rkt"` to something else</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:06:12.000049</ts>
    <user>Ida</user>
    <text>I was reading under the Racket functional data structures section in the docs, and I found a mention of *vlists*</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:06:37.000048</ts>
    <user>Ida</user>
    <text>and I noticed the examples used the function name `list`, as opposed to something like `vlist`</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:06:56.000058</ts>
    <user>Ida</user>
    <text>Is it the case that Racket secretly implements `list` as vlists or something?</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:07:38.000071</ts>
    <user>Chantelle</user>
    <text>&lt;@Ida&gt; no, the `pfds/vlist` module merely uses the same name</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:07:49.000024</ts>
    <user>Chantelle</user>
    <text>They're two different `list` functions</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:07:58.000001</ts>
    <user>Ida</user>
    <text>So requiring that module will overwrite `list`?</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:08:36.000004</ts>
    <user>Chantelle</user>
    <text>Yes, assuming `list` was imported from the current language (which happens when you use `#lang racket` or `#lang racket/base`)</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:08:55.000036</ts>
    <user>Chantelle</user>
    <text>if you try to `require` two modules that define the same name you get a syntax error</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:09:21.000022</ts>
    <user>Chantelle</user>
    <text>but you can `require` a module that defines the same name as a name defined by the `#lang` used</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:09:41.000047</ts>
    <user>Ida</user>
    <text>oh I see hmm, that's quite aggressive to take the same name</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:10:01.000074</ts>
    <user>Chantelle</user>
    <text>yes, it's rather atypical for racket modules to do that</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:10:22.000011</ts>
    <user>Chantelle</user>
    <text>Using `vlist` in all the function names would have been better, probably</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:11:19.000054</ts>
    <user>Chantelle</user>
    <text>one last note: if you _want_ to use two different modules that both provide the same name you can use `rename-in` and `prefix-in` to change the names of stuff imported from the module, letting you get around the name conflict</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:11:57.000046</ts>
    <user>Ida</user>
    <text>Oh I see, so it's not tooo bad</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:12:06.000024</ts>
    <user>Ida</user>
    <text>thanks for the help</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-18T00:12:22.000032</ts>
    <user>Chantelle</user>
    <text>happy to help :)</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-19T22:39:39.000116</ts>
    <user>Ida</user>
    <text>This is probably like sinning, but does anyone know how to rename `define` to something like `def`?</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-19T22:40:14.000137</ts>
    <user>Ida</user>
    <text>I tried to use `procedure-rename` but to no luck</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-19T22:40:16.000185</ts>
    <user>Kimbery</user>
    <text>`(require (rename-in racket/base [define def]))`</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-19T22:41:13.000083</ts>
    <user>Ida</user>
    <text>omg</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-19T22:41:16.000001</ts>
    <user>Ida</user>
    <text>laziness commences</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-19T22:41:17.000090</ts>
    <user>Ida</user>
    <text>thanks</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-19T22:42:11.000031</ts>
    <user>Ida</user>
    <text>surely I'm not the only one!</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-20T00:52:46.000102</ts>
    <user>Chantelle</user>
    <text>&lt;@Ida&gt; the idea that core language features like `define` are just bindings you can import and rename like anything else can be a little mind bending at first :)</text>
  </message>
  <message conversation_id="466">
    <ts>2017-11-20T03:20:57.000057</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; `racket -l tests/racket/test` now works in docker! (the problem was some tests didn't work when run as `root`, and docker runs the container entrypoint process as root and PID 0 by default)</text>
  </message>
  <message conversation_id="466">
    <ts>2017-11-20T03:35:23.000372</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; &lt;https://github.com/samth/docker-racket-build/pull/36&gt; :party:</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-20T10:14:25.000171</ts>
    <user>Ida</user>
    <text>Does anyone know why `compose` takes arguments in reverse order?</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-20T12:58:28.000704</ts>
    <user>Jacob</user>
    <text>&lt;@Ida&gt; my guess is it's because it's standard mathematical composition order. Given functions `f` `g` and `h` composed as `g(h(f(x)))` in standard mathematical notation. It is always evaluated inside out so using Racket's `compose` you'd write it as `(compose g h f)`</text>
  </message>
  <message conversation_id="467">
    <ts>2017-11-20T13:33:35.000102</ts>
    <user>David</user>
    <text>I don’t think of it as “reverse order,” but as “let’s move some parentheses around:”

```
&amp;gt; (displayln (add1 0))
1
&amp;gt; ((compose displayln add1) 0)
1
```

Note how `displayln` and `add1` are in the same order in both.

Maybe this intuition helps you too.</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-20T13:33:58.000004</ts>
    <user>Ida</user>
    <text>I see now</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-20T13:36:02.000051</ts>
    <user>Ida</user>
    <text>though intuitively, I still feel like it's natural to think from inner to outer</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-20T13:36:07.000355</ts>
    <user>Ida</user>
    <text>as A -&amp;gt; B -&amp;gt; C</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-20T13:36:42.000393</ts>
    <user>Nelson</user>
    <text>there might be a library for that ("diagram order"), but I can't find it right now</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-20T14:11:03.000219</ts>
    <user>David</user>
    <text>&lt;@Ida&gt; It’s not *exactly* `compose`, but you might be interested in threading macros: &lt;https://docs.racket-lang.org/threading/index.html&gt;</text>
  </message>
  <message conversation_id="465">
    <ts>2017-11-20T14:28:45.000630</ts>
    <user>Ida</user>
    <text>mmm very interesting</text>
  </message>
  <message conversation_id="468">
    <ts>2017-11-20T14:43:47.000384</ts>
    <user>Jacob</user>
    <text>maybe you can try writing a new function `compose*` that takes arguments in a more "intuitive" order, it'll be fairly easy to write.</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T17:49:56.000021</ts>
    <user>Ida</user>
    <text>Now I think I understand some of the funny arrows I've seen in Clojure</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T17:51:00.000196</ts>
    <user>Kimbery</user>
    <text>&lt;@Nelson&gt;, &lt;@Ida&gt;: &lt;@Chantelle&gt;’s `point-free` package provides a flipped version of `compose`</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:04:20.000242</ts>
    <user>Ida</user>
    <text>Ah I think the threading library has funny interactions with lambdas -_-a</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:05:06.000289</ts>
    <user>Kimbery</user>
    <text>&lt;@Ida&gt; if you want a real function, use `point-free`, not `threading`</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:05:18.000426</ts>
    <user>Kimbery</user>
    <text>`threading` is a macro.</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:06:06.000060</ts>
    <user>Chantelle</user>
    <text>what lexi said</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:06:36.000012</ts>
    <user>Chantelle</user>
    <text>if you want a real function but _also_ want the pretty underscore chaining syntax, use the `thrush` function from `point-free` combined with the `fancy-app` package for pretty lambdas</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:06:55.000312</ts>
    <user>Chantelle</user>
    <text>actually whoops</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:06:59.000450</ts>
    <user>Chantelle</user>
    <text>`thrush+` is for that</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:07:01.000256</ts>
    <user>Kimbery</user>
    <text>if you want to thread into a lambda with `threading`, wrap it in extra parens, e.g. `(~&amp;gt; 3 ((lambda (x) (+ x 2))))`</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:07:06.000213</ts>
    <user>Chantelle</user>
    <text>`thrush` is the reversed version of `compose`</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:07:25.000153</ts>
    <user>Ida</user>
    <text>ohhh I see</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:07:42.000114</ts>
    <user>Chantelle</user>
    <text>`(thrush f g h) == (compose h g f)`</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:08:09.000240</ts>
    <user>Chantelle</user>
    <text>`(thrush+ x f g h) == ((thrush f g h) x)`</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:08:13.000016</ts>
    <user>Ida</user>
    <text>But am I wrong in saying that threading is like an official library of Racket, and thrush is someone's personal library on Github?</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:08:31.000231</ts>
    <user>Kimbery</user>
    <text>no, threading is my library; it isn’t official.</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:08:45.000385</ts>
    <user>Chantelle</user>
    <text>that would be correct; also thrush is part of `point-free` which is my library</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:09:14.000300</ts>
    <user>Chantelle</user>
    <text>fwiw both lexi and I also work on standard racket libs so we're not entirely inexperienced :)</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:09:27.000058</ts>
    <user>Kimbery</user>
    <text>speak for yourself :)</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:09:38.000163</ts>
    <user>Ida</user>
    <text>ohh whoaa I see</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:09:39.000423</ts>
    <user>Chantelle</user>
    <text>im pretty sure I've seem at least _some_ commits from you to stuff in the main dist</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:09:54.000044</ts>
    <user>Chantelle</user>
    <text>then again, my memory is not so good</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:10:40.000032</ts>
    <user>Kimbery</user>
    <text>yes, I’m just teasing re: “not entirely inexperienced”</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:10:56.000087</ts>
    <user>Nelson</user>
    <text>why is it called `thrush`?</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:11:03.000009</ts>
    <user>Kimbery</user>
    <text>birds</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:11:05.000224</ts>
    <user>Chantelle</user>
    <text>birds</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:11:10.000268</ts>
    <user>Nelson</user>
    <text>??????</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:11:13.000364</ts>
    <user>Chantelle</user>
    <text>Birds</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:11:26.000197</ts>
    <user>Ida</user>
    <text>Ah a songbird</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:11:29.000422</ts>
    <user>Kimbery</user>
    <text>there’s a book called To Mock a Mockingbird that’s about the combinator calculus</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:11:38.000107</ts>
    <user>Kimbery</user>
    <text>and it assigns bird names to a bunch of combinators</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:11:43.000212</ts>
    <user>Nelson</user>
    <text>lol</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:11:48.000161</ts>
    <user>Nelson</user>
    <text>I'm only on the barbers chapter</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:12:19.000297</ts>
    <user>Kimbery</user>
    <text>&lt;http://www.angelfire.com/tx4/cus/combinator/birds.html&gt;</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:12:35.000177</ts>
    <user>Kimbery</user>
    <text>see also &lt;https://hackage.haskell.org/package/data-aviary-0.4.0/docs/Data-Aviary-Birds.html&gt;</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:12:40.000160</ts>
    <user>Chantelle</user>
    <text>looking back, calling it `thrush` in the `point-free` package is more "cute" than "useful"...</text>
  </message>
  <message conversation_id="469">
    <ts>2017-11-20T18:51:42.000204</ts>
    <user>Ida</user>
    <text>I thought it was a technical term I never heard of hehe</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T18:51:52.000068</ts>
    <user>Ida</user>
    <text>Something from the deep lore of category theory</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T18:56:11.000242</ts>
    <user>Chantelle</user>
    <text>in your defense, the bird combinators are pretty related to category theory</text>
  </message>
  <message conversation_id="471">
    <ts>2017-11-20T19:00:38.000116</ts>
    <user>Kimbery</user>
    <text>err, *unrelated?</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T19:00:56.000276</ts>
    <user>Kimbery</user>
    <text>I don’t think the bird combinators are very related to category theory</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T19:08:52.000124</ts>
    <user>Chantelle</user>
    <text>They're compositional patterns for morphisms. At least, I think I remember reading something forever ago claiming the two were related and that thinking about their relationship is useful. I don't exactly do much category theory...</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T19:13:31.000091</ts>
    <user>Kimbery</user>
    <text>oh, maybe… but then again, everything is related to category theory if you try hard enough. they definitely don’t _come_ from category theory.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T19:13:41.000253</ts>
    <user>Chantelle</user>
    <text>oh definitely</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T22:24:29.000211</ts>
    <user>Jalisa</user>
    <text>&lt;@Kimbery&gt; I respect your opinions because you have so much experience programming. But I’ll tell you what. I’ve been trying to learn Haskell as my first real programming language, and it’s been extremely tough. Would you say as someone who’s learned Racket, Haskell, and probably many other languages, that I’m making a reasonable decision? I’ve talked to a ton of people in the Lisp and FP world—everyone has their opinions. That alone is perhaps more fascinating than _actual_ programming. Perhaps there’s no true one road or way to learn, but I’m open to opinions. Some people tell me learning Haskell is easy with the right tools. I’ve yet to see anyone learn it _easily_—or probably any language for that matter.</text>
  </message>
  <message conversation_id="472">
    <ts>2017-11-20T22:32:25.000020</ts>
    <user>Jalisa</user>
    <text>I love Racket as a language, but I feel like if I want to make money doing this, it may not be the right decision. Then I think—if I invest so much of myself into one language, will I have the same bias? At that point, I suppose I’d have to think my way out _familiarity_. I realize Racket is an educational/academic language—well—sort of like Haskell (don’t say that to Haskellers!), but I suppose it’s interesting some of the most advanced languages originated as academic languages or remain so.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T22:44:47.000007</ts>
    <user>Kimbery</user>
    <text>I would not personally recommend learning Haskell as your first language</text>
  </message>
  <message conversation_id="472">
    <ts>2017-11-20T23:05:10.000227</ts>
    <user>Chantelle</user>
    <text>&lt;@Jalisa&gt; do you want to pick up an "industry" language that's slightly functional-ish and easy to get jobs with or a language that's much more functional and you have an alright _chance_ at getting a job with if you're in the right area?</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:05:55.000049</ts>
    <user>Chantelle</user>
    <text>for the latter, I think clojure's got a shallower learning curve than haskell while still seeing much more industry use than racket</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:06:42.000152</ts>
    <user>Jalisa</user>
    <text>Here’s a better question. What path would you take knowing what you know now? I’m going to guess you’d say Racket; I could be wrong. But one of the nicer things about Racket, I think, is the documentation, and how you can create a language of your own. I’ve also thought about learning JavaScript _well enough_ and then moving onto PureScript. But then, I get a bunch of other varying opinions. Some feel learning PureScript is _doable_—others think you need some other FP experience. I feel like Haskell is so _minimal_ and foreign, it’s hard to grasp because of that. PureScript is probably similar in that regard. Elm makes it easier, but then I get the feeling of using something dumbed-down.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:09:36.000099</ts>
    <user>Marlin</user>
    <text>For a first language, it's a good idea to use a simple language. You're trying to learn how to program, not how to use *this particular brand of hammer*.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:10:27.000064</ts>
    <user>Marlin</user>
    <text>(This is why the HTDP course doesn't use Racket as its language but, instead, languages designed specifically for teaching.)</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:12:02.000223</ts>
    <user>Jalisa</user>
    <text>&lt;@Chantelle&gt; that’s a really great question. I’ve thought about Clojure, but when you say _shallower_, what sort of resources are available? I’ve only somewhat researched Clojure. Most of my efforts are shattered after talking to a few Haskellers.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:12:55.000007</ts>
    <user>Kimbery</user>
    <text>if you’re learning to program, I second &lt;@Marlin&gt; and recommend How to Design Programs and its teaching languages.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:15:22.000079</ts>
    <user>Jalisa</user>
    <text>Alright, thanks. I realize a lot of this stuff is subjective, but I do like how friendly and _less_ opinionated the Racket community is.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:28:44.000223</ts>
    <user>Chantelle</user>
    <text>&lt;@Jalisa&gt; I'm not super experienced with clojure so I don't know. My limited experience did find the docs for most of clojure very lacking, especially when compared to racket's docs</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:30:28.000175</ts>
    <user>Chantelle</user>
    <text>but &lt;@Marlin&gt; is right, racket is probably the best way to go if you're looking to first learn programming, especially structured programming on projects that are more than just toys</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:34:29.000086</ts>
    <user>Marlin</user>
    <text>You'll find, eventually, that learning a particular language is easy. The important stuff that you learn while working with one language will (mostly) transfer over to another. There are some things, though, that you'll only learn from exposure to multiple languages. You know this already, of course, but, for example, if you only work with untyped languages, you may find type systems hard to grasp.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:35:30.000155</ts>
    <user>Marlin</user>
    <text>A great deal of the complexity that you find in languages has little to do with good programming.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:37:03.000070</ts>
    <user>Jalisa</user>
    <text>Is there a _where to go from here_ section in HTDP?</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:38:34.000033</ts>
    <user>Marlin</user>
    <text>There is [&lt;http://www.ccis.northeastern.edu/home/matthias/HtDP2e/part_epilogue.html#%28part._moving-on-devs%29&gt;], though I'm not sure if it's quite what you're looking for.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:42:21.000041</ts>
    <user>Jalisa</user>
    <text>This is a really great point.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-20T23:51:14.000163</ts>
    <user>Jalisa</user>
    <text>This is a seriously good quote from that section:

&amp;gt;Some of you wanted to see what computing and programming are all about. You now know that computing is merely a generalization of calculating, and you may sense how useful program design is to you. *Even if you never develop programs again, you know what distinguishes a garage programmer from a serious software developer.* When you interact with developers as a professional, you know that systematic design matters because it affects your quality of life and the bottom line of your business.

Think I've been talking to too many of those.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T00:03:44.000192</ts>
    <user>Jalisa</user>
    <text>I wanted to like the Scala language, but every time I'd mention it around a Haskeller, they immediately say something like: Scala is dishonest about what it can do, it's a horrible language—no one should ever use it— on and on, etc.

I think one of the things I look for in languages/libraries/tools (at least in my experience with frontend), is the support system, documentation, all of that. I think the Racket community understands this. Alexis made a post about documentation and I thought she summed that up nicely:

&lt;http://lexi-lambda.github.io/blog/2017/08/28/hackett-progress-report-documentation-quality-of-life-and-snake/|lexi-lambda.github.io/blog/2017/08/28/hackett-progress-report-documentation-quality-of-life-and-snake/&gt;

It's probably one of my single most regarded ways in making decisions: quality of life—that's a great way to put it.</text>
  </message>
  <message conversation_id="473">
    <ts>2017-11-21T07:06:02.000183</ts>
    <user>Jacob</user>
    <text>The nice thing about Racket is it actively encourages you to design well which is far more important than what programming language you learn. Once you learn two or three languages, rest become much easier and somewhat redundant.</text>
  </message>
  <message conversation_id="473">
    <ts>2017-11-21T07:08:23.000210</ts>
    <user>Jacob</user>
    <text>I won't worry about what or which language or paradigm to learn. Focus on learning how to design and organize your programs, try different languages without worrying about whether they are "in" or "out". You'll be able to make better informed decisions once you've been exposed to diverse programming styles.</text>
  </message>
  <message conversation_id="473">
    <ts>2017-11-21T09:58:24.000233</ts>
    <user>Corey</user>
    <text>My anecdata/observation is that Clojure "in industry" means dealing frequently with Java/JVM concepts, tooling, builds, ecosystem. Clojure is hosted on Java. For some people this is a feature (e.g. helps sneak it into certain companies). For me, meh.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T10:07:24.000103</ts>
    <user>Jalisa</user>
    <text>Yeah, I sort of felt the same way. Found some interesting points on Clojure here: &lt;https://news.ycombinator.com/item?id=14006242&gt;</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T10:15:21.000142</ts>
    <user>Lashaunda</user>
    <text>&lt;@Jalisa&gt; I use Scala every day for work.  I don’t think it’s a horrible language at all.  There are parts of it that are ugly (that’s true of just about any language including beloved Scheme &amp;amp; Racket), or rather, I’ve seen people resort to ugly things in every language to get things done.  Why did I choose Scala at work?  Well, at work there is a .NET ecosystem and a JVM-based ecosystem, plus mobile apps (Android, iOS, Windows).  I didn’t want to get tied down to one platform so that was a con for .NET.  Also, more of my work ties into the Java-ecosystem.  Scala fits very comfortably in that world.  In Scala, you can write code that almost looks like Haskell, or you can write code that looks object-oriented (I remember the 80/90s when that was “a thing”), you can even write Scala that looks just like Java, so you don’t scare off the Java-only people.  In short, you can write Scala in some pretty different ways, according to your taste, and the tastes of your colleagues.  My Scala programs are much shorter and have less junk in them than the equivalent Java programs.  My colleagues have been picking up Scala too, and like it.  There are quirks, but you learn to deal with them pretty early on and then you forget about them.  I use Racket at work for things that are experimental and/or where I want speed but don’t want to go back to C.  I used Racket on the side at at home for all my own personal projects.  Where does Haskell fit in?  I want to learn more Haskell to improve my Scala programming and indeed anything I do in the functional world.  I said as much in my annual personal goals statement at work.  If I learn enough Haskell I may be able to finally understand all the category theory the most advanced Scala people float over my head at every Scala conference I attend.  If I learn enough Haskell it may help me write Scala or Racket libraries with more finesse.  Who knows.  If I learn enough Haskell it may turn out Haskell can do everything with great elegance.  We’ll see.  Small aside:  When I picked up Scala at first, I noticed in the preface to Odersky’s book that he’d been encouraged and given advice by the top thinkers in the Racket community, so that kind of cemented the deal for me in terms of the respectability of the journey.  I definitely write better Scala given the lessons I’ve learned from the Racket and HtDP community over the years.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T10:33:45.000250</ts>
    <user>Jalisa</user>
    <text>One of the biggest issues with Haskell in my opinion, is the lack of good documentation and libraries that feel a bit clunky.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T10:37:14.000437</ts>
    <user>Jalisa</user>
    <text>That, and how I’d have a better chance (it seems) at understanding hieroglyphics!</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T10:52:01.000304</ts>
    <user>Lashaunda</user>
    <text>Ha, I just looked for a book, meanwhile found a different one I could use to sharpen my Haskell *and* Russian: &lt;https://goo.gl/iNjv3N&gt;</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T10:55:40.000774</ts>
    <user>Lashaunda</user>
    <text>&lt;@Jalisa&gt;: This is a book I’ve been working through: &lt;http://haskellbook.com/&gt;  I have a number of other Haskell books on my bookshelf, but this one seemed to try to make the journey easier.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T10:57:08.000163</ts>
    <user>Jalisa</user>
    <text>I've tried a lot of resources to learn Haskell. I think this post sums of some of the best ways: &lt;https://argumatronic.com/noobs.html&gt;

(That one is in the list as well.)</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T10:57:51.000478</ts>
    <user>Lashaunda</user>
    <text>Thanks &lt;@Jalisa&gt;.  I’m now going to return to my DrRacket window.  :slightly_smiling_face:</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:01:00.000486</ts>
    <user>Marlin</user>
    <text>This is a site for beginners, and it links to an article called "Function Composition and the $ Operator"? As if the lexical syntax of a particular language is what a beginner should be spending time on?</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:02:22.000063</ts>
    <user>Marlin</user>
    <text>The article's title could just as well be "How to avoid using parentheses, for... reasons."</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:10:15.000506</ts>
    <user>Jalisa</user>
    <text>I think the links are the gist of what's available to learn Haskell. The book Geoff linked is probably the most understandable, but it also has its challenges at trying to teach a language where beginner resources are nearly non-existent. If you can make it through configuring Stack, or learning how to _avoid_ the Haskell Platform, you're doing well. Oh, and if you want a decent code editor, you might have to use Cabal or Stack to install additional resources for a nice IDE/editor experience. I probably spent days on silly things like messing with Vim, Spacemacs/Emacs, making sure I had the right version of GHC, etc. I learned a lot but I couldn't live with myself after not being able to fully understand lambda calculus.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:16:54.000506</ts>
    <user>Jalisa</user>
    <text>I think because Haskell is so verbose, it's difficult to remember and grasp things. But I also felt like there was this _secret club_, and because things aren't well-documented, you must begin to _try_ harder. Either that, or once you learn Haskell, trying to explain every needed detail to a beginner becomes one of the most difficult tasks one can do. I often found myself staring at code and re-reading material many times over. I did get those epiphany moments, but the process was very slow. In that sense, I don't know that learning Haskell as a first language is the best choice, even though many Haskellers will tell you it's the best decision you could possibly make.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:26:28.000057</ts>
    <user>Jalisa</user>
    <text>If ETA succeeds, there might finally be more support for learning (in a sense) Haskell on the JVM: &lt;http://eta-lang.org|eta-lang.org&gt;</text>
  </message>
  <message conversation_id="474">
    <ts>2017-11-21T11:26:39.000390</ts>
    <user>Jacob</user>
    <text>I don't think Haskell is a good place to learn lambda calculus, if that's what you meant in your earlier comment.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:28:14.000145</ts>
    <user>Jalisa</user>
    <text>I couldn't seem to find a direct correlation to make the two work in my head.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:31:09.000317</ts>
    <user>Jalisa</user>
    <text>The _Haskell Book_ (linked earlier) goes through a whole chapter at the beginning on lambda calculus, offering steps for things like alpha and beta reduction. I could _maybe_ understand those things better, but some of the examples to be reduced were like 20-25 characters long.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:33:05.000445</ts>
    <user>Jacob</user>
    <text>I haven't read that particular book but I'm rather surprised they've included a chapter on LC and reductions, that sounds like a good way to confuse beginners even more.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:34:04.000417</ts>
    <user>Jacob</user>
    <text>Knowing lambda calculus absolutely is not a prerequisite for learning programming in any form, even Haskell. While it's nice to know to understand the theoretical and mathematical properties of computable systems, it's not relevant to every day programming.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:34:10.000095</ts>
    <user>Marlin</user>
    <text>In a typical (well, I think typical) undergrad program, that sort of thing is usually part of a programming languages course that you'd take in, what, your third year?</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:35:20.000334</ts>
    <user>Jacob</user>
    <text>yeah in my own undergrad experience, we were exposed to lambda calculus in the last two years.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:37:27.000610</ts>
    <user>Jacob</user>
    <text>in any event &lt;@Jalisa&gt;, don't beat yourself up if you don't grasp Haskell at first, it's perfectly OK not to understand something at first. You've given yourself time and put in efforts to explore Haskell, you can move on to other things and come back to Haskell later.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:38:37.000244</ts>
    <user>Jalisa</user>
    <text>Here's one example for beta reduction taken from chapter 1:

*a)* (𝜆𝑥𝑦𝑧.𝑥𝑧(𝑦𝑧))(𝜆𝑥.𝑧)(𝜆𝑥.𝑎)
*b)* (𝜆𝑥.𝜆𝑦.𝜆𝑧.𝑥𝑧(𝑦𝑧))(𝜆𝑥.𝑧)(𝜆𝑥.𝑎)
*c)* (𝜆𝑦.𝜆𝑧1(𝜆𝑥.𝑧)𝑧1(𝑦𝑧1))(𝜆𝑥.𝑎)
*d)* (𝜆𝑧1.(𝜆𝑥.𝑧)(𝑧1)((𝜆𝑥.𝑎)𝑧1))
*e)* (𝜆𝑧1.𝑧((𝜆𝑥.𝑎)(𝑧1)))
*f)* (𝜆𝑧1.𝑧𝑎)</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:39:48.000024</ts>
    <user>Jalisa</user>
    <text>When I seemed confused, the author told me a ten-year-old made it through the book.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:40:46.000024</ts>
    <user>Jacob</user>
    <text>heh that doesn't sound like a kind compliment.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:42:26.000379</ts>
    <user>Jacob</user>
    <text>I won't worry about what the author said, he's motivated to believe his book is easy even for ten year olds but that doesn't say much. People have diverse learning styles and background knowledge that influence how well they assimilate given material.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:43:00.000544</ts>
    <user>Jacob</user>
    <text>Other than the author's claim, we have no way of knowing how well the ten-year old actually understood the book, for all we know she or he just skipped right over the chapter and focused on the more interesting chapters.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:44:25.000128</ts>
    <user>Linnie</user>
    <text>Or if it was the author's _own_ ten year old child who i'm sure was given help more graciously</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:45:33.000349</ts>
    <user>Linnie</user>
    <text>Maybe this is terrible advice, but I found redex traces to be very helpful for understanding how lambda calculus expressions reduce.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:47:22.000177</ts>
    <user>Lashaunda</user>
    <text>Regarding the ten year-old λ-calculus wizard, when I was in my mid-forties, I had a problem with my Mac.  I got on some forum and a genius helped me out.  When my problem was fixed, I said to him, “Man, I can’t believe how much you know about these machines,” he answered, “Yeah, I’ve been working on Macs for ten years, since I was five.”</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:49:25.000043</ts>
    <user>Jacob</user>
    <text>good story</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:49:49.000114</ts>
    <user>Jalisa</user>
    <text>Ha! That's funny. The kid was male, I believe, and his mom is a linguist and thoroughly knows algebra.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:50:33.000896</ts>
    <user>Jacob</user>
    <text>of course</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:51:42.000371</ts>
    <user>Jacob</user>
    <text>Classical lambda calculus while a excellent model for understanding what computing means on an abstract level in terms of reduction and transformations, but it's a very simplistic model and doesn't even have any concept of mapping expressions to values or even typing.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:53:41.000774</ts>
    <user>Jacob</user>
    <text>It's about a far as you could get from normal variety programming and computing. The most important concept from lambda calculus to have made its way into programming probably would be first-class functions as values which is the keystone to being able to parameterize code over arbitrary inputs, otherwise also known as lambda</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:55:24.000404</ts>
    <user>Jacob</user>
    <text>Racket's own lambda is far more rich than lambda calculus's lambda and you can work with it without needing to know anything about lambda calculus. Nonetheless, if you're interested in knowing more about classical untyped lambda, check this tutorial out &lt;http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf&gt;</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:58:57.000431</ts>
    <user>Jacob</user>
    <text>the main takeaway I would offer is that the only thing Racket's `lambda` and lambda calculus' `lambda` have in common is the name and concept of first-class function values being applied to inputs</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:59:25.000068</ts>
    <user>Latarsha</user>
    <text>&lt;@Jacob&gt; I don't think that's really accurate</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:59:49.000213</ts>
    <user>Jalisa</user>
    <text>I'm going to start of HtDP. Is it safe to use the draft version?</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T11:59:57.000667</ts>
    <user>Latarsha</user>
    <text>&lt;@Jalisa&gt; yes, you should</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T12:00:12.000221</ts>
    <user>Lashaunda</user>
    <text>&lt;@Jacob&gt; Hadn’t seen that tutorial before, I’m glad it’s 9 pages instead of 900, thanks.</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T12:00:16.000359</ts>
    <user>Jacob</user>
    <text>&lt;@Latarsha&gt; I probably am oversimplying things no question</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T12:00:30.000444</ts>
    <user>Jacob</user>
    <text>I welcome corrections :slightly_smiling_face:</text>
  </message>
  <message conversation_id="470">
    <ts>2017-11-21T12:04:44.000616</ts>
    <user>Lashaunda</user>
    <text>&lt;@Jalisa&gt; Yes to HtDP!  When I was first exposed to it, after the first day or two, it was almost magical, that is:  recognize these basic patterns, follow this recipe, and programs mostly write themselves.  And they work, because of course you wrote your tests.  The hardest part of HtDP is not HtDP, it’s later, when you begin to cut corners, thinking, “Oh I know how to do this, I don’t really need a test for this, or I don’t really need to use that pattern I learned, I’ll just wing it…” and then you find you would have been done hours earlier if you had just stuck to the lessons HtDP teaches.</text>
  </message>
  <message conversation_id="475">
    <ts>2017-11-21T12:16:52.000618</ts>
    <user>Kimbery</user>
    <text>I have personally seen intelligent, experienced programmers with 15 years experience struggle to grasp Haskell concepts. Haskell is a complicated programming language. That isn’t intrinsically bad, not by any stretch—with great investment comes great reward—but it is an awful language to teach to beginners. I think most of the people who advocate it are well-intentioned but have used it long enough they have forgotten why it’s so hard for someone new to wrap their head around.</text>
  </message>
  <message conversation_id="475">
    <ts>2017-11-21T12:33:05.000409</ts>
    <user>Jalisa</user>
    <text>I think you're exactly right about that. Thanks for all of the comments.</text>
  </message>
  <message conversation_id="476">
    <ts>2017-11-21T12:45:21.000227</ts>
    <user>Jalisa</user>
    <text>It's been a while since I've done pre/algebra. Should I get those fundamentals down well before starting HtDP?</text>
  </message>
  <message conversation_id="475">
    <ts>2017-11-21T12:55:43.000074</ts>
    <user>Kimbery</user>
    <text>I don’t think it’s necessary</text>
  </message>
  <message conversation_id="476">
    <ts>2017-11-21T12:56:16.000157</ts>
    <user>Jalisa</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:24:28.000062</ts>
    <user>Ida</user>
    <text>Personally I'd think it may be fruitful to learn how to build apps with JS</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:24:44.000175</ts>
    <user>Ida</user>
    <text>It's hard to go from low-level patterns to app-level organization</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:24:52.000589</ts>
    <user>Ida</user>
    <text>But the JS world has a community that's actively figuring that out right now</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:25:08.000147</ts>
    <user>Ida</user>
    <text>So there will be a lot of learning pathways from nothing to app</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:25:47.000048</ts>
    <user>Ida</user>
    <text>The only caveat is that the JS world's tooling is downright painful</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:29:28.000237</ts>
    <user>Marlin</user>
    <text>I have to disagree (strongly) with that. </text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:30:03.000780</ts>
    <user>Marlin</user>
    <text>Unless, I suppose, you only learn from mistakes.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:30:22.000335</ts>
    <user>Ida</user>
    <text>I would suggest that in the JS world</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:30:35.000287</ts>
    <user>Ida</user>
    <text>you learn by mocking, by modelling, by mimicking the architecture of people who are greater than yourself</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:30:51.000685</ts>
    <user>Ida</user>
    <text>and it's a world that places app architecture at the forefront of its thinking</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:31:31.000391</ts>
    <user>Ida</user>
    <text>it's hard to go from a programming paradigm, or design patterns, all the way to APP</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:31:40.000446</ts>
    <user>Lashaunda</user>
    <text>The only JavaScript apps I write in JavaScript are really small ones.  For anything medium to big, I compile a language I like into JavaScript.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:32:18.000178</ts>
    <user>Jalisa</user>
    <text>meow: It almost sounds as if you're referring to React.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:32:29.000267</ts>
    <user>Kimbery</user>
    <text>If the Elm people are any indication, the HtDP approach _does_ scale to whole applications.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:32:36.000428</ts>
    <user>Ida</user>
    <text>Or just how unidirectional architecture has taken over the web</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:32:52.000224</ts>
    <user>Kimbery</user>
    <text>Since the “Elm architecture” is exactly the same as HtDP universe programs.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:33:51.000517</ts>
    <user>Jalisa</user>
    <text>Wow, I didn't know that! Very interesting, indeed. Perhaps it attributes to some of their success.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:38:34.000069</ts>
    <user>Ida</user>
    <text>though I would also say that later on, some of the major languages of the industry are "small"</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:38:40.000347</ts>
    <user>Ida</user>
    <text>so learning a wrong language or two isn't really bad</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:38:59.000372</ts>
    <user>Ida</user>
    <text>Javascript might be accounted for by 80-120 constructs, not including all the API's</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:39:37.000146</ts>
    <user>Jalisa</user>
    <text>All I know, is it's difficult to talk about Elm around Haskell and PureScript people. But I think their approach is why they're so successful. They've told me: Elm is a library, and not a language. . .</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:40:26.000677</ts>
    <user>Ida</user>
    <text>That makes it better, surely</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:40:31.000487</ts>
    <user>Kimbery</user>
    <text>That’s silly. It’s a language bundled with a highly opinionated framework.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:42:27.000333</ts>
    <user>Kimbery</user>
    <text>I personally don’t use Elm because I think it is limiting, but some people achieve great success with it, and simplicity has its advantages. But this is largely besides the point—JavaScript and Elm are engineering tools, not educational ones. If you understand how to design good programs, you should be able to work productively in either, but neither are particularly fit for the purpose of learning to program (though Elm is probably much closer than JavaScript).</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:42:58.000101</ts>
    <user>Ida</user>
    <text>If you look at the language by itself, you might judge it unfit</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:43:04.000137</ts>
    <user>Ida</user>
    <text>But I would look at the immense learning ecosystem</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:43:12.000212</ts>
    <user>Ida</user>
    <text>That has distilled the higher quality educators and materials to the top over time</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:43:28.000229</ts>
    <user>Ida</user>
    <text>including video materials</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:43:30.000402</ts>
    <user>Kimbery</user>
    <text>I think I just fundamentally disagree, and I assure you I am well immersed within the JavaScript ecosystem.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:43:46.000260</ts>
    <user>Kimbery</user>
    <text>I think many of those learning materials are subpar and quite unhelpful to teaching good program design.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:44:33.000035</ts>
    <user>Kimbery</user>
    <text>Many of them are useful for teaching someone how to solve a very specific engineering problem, like “build a CRUD app” or “build an interactive user interface”. But good design is still the starting point.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:44:36.000617</ts>
    <user>Lashaunda</user>
    <text>&lt;@Kimbery&gt; I guess it’s time for me to take a look at Elm, thanks.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:45:05.000279</ts>
    <user>Ida</user>
    <text>But you don't think even the skeleton of a unidirectional, reactive CRUD app is mind-bending?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:45:24.000007</ts>
    <user>Ida</user>
    <text>I've seen a lot of people have handfuls of patterns but can't seem to think of an entire app</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:45:41.000421</ts>
    <user>Kimbery</user>
    <text>I’m not saying it’s unhelpful. I’m saying it’s a bad place to _start_.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:45:42.000231</ts>
    <user>Ida</user>
    <text>The JS world doesn't aim to teach you computing, it aims to teach you a sensible app architecture</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:46:40.000139</ts>
    <user>Ida</user>
    <text>Like most of their materials are aimed towards making an app</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:46:45.000083</ts>
    <user>Ida</user>
    <text>I feel like the Racket world has two major texts</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:46:46.000589</ts>
    <user>Kimbery</user>
    <text>I don’t think HtDP claims to be a curriculum you can go through and end up capable of building anything without further learning. If anything, one of its purposes is providing a framework for learning more.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:46:50.000103</ts>
    <user>Ida</user>
    <text>How to design programs, and SICP</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:47:26.000128</ts>
    <user>Kimbery</user>
    <text>I don’t think SICP is part of the Racket world; it comes from Scheme. And I don’t even think HtDP is really about Racket, either.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:47:41.000277</ts>
    <user>Ida</user>
    <text>For online help, there's Stack Overflow, the docs, and Slack!</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:47:58.000154</ts>
    <user>Ida</user>
    <text>The SO is quite sparse</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:48:28.000077</ts>
    <user>Kimbery</user>
    <text>I agree that Racket is rather lacking in the department of resources on engineering applications in Racket. But that’s not the point of HtDP—it isn’t training you to be a Racket programmer. It’s training you to be a _programmer_. You are expected to move onto another language after HtDP, and there’s a good chance it won’t be Racket.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:49:22.000327</ts>
    <user>Latarsha</user>
    <text>The racket world has ~0.5 texts</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:49:27.000028</ts>
    <user>Jalisa</user>
    <text>For me, I always wanted a resource on _how to program/design_ instead of _how to make this thing right now_, and I think that’s what’s being said, as HtDP teaches principles for a better foundation. In my experience, frontend is very fragmented, and hardly anyone agrees on the same approach.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:49:38.000284</ts>
    <user>Latarsha</user>
    <text>unless you count the online docs</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:49:47.000254</ts>
    <user>Latarsha</user>
    <text>oh, well, now it has BR</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:49:49.000667</ts>
    <user>Latarsha</user>
    <text>so 1.5</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:50:01.000061</ts>
    <user>Kimbery</user>
    <text>&lt;@Latarsha&gt; is RoR the half-a-text?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:50:03.000780</ts>
    <user>Latarsha</user>
    <text>yes</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:50:19.000761</ts>
    <user>Latarsha</user>
    <text>and since you knew that you probably also understand why I say that</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:50:32.000055</ts>
    <user>Kimbery</user>
    <text>I do, I think</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:54:47.000212</ts>
    <user>Chantelle</user>
    <text>That wouldn't happen to have been Chris would it?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:55:04.000278</ts>
    <user>Chantelle</user>
    <text>(there's two authors and one of them is a _significantly_ more... empathetic person than the other)</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:58:37.000131</ts>
    <user>Chantelle</user>
    <text>I'm at a loss, but I haven't read RoR yet</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:59:40.000360</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; by the way, the docker setup runs significantly more of the release checklist than I thought it did :) sweet</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T13:59:52.000224</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; woo!</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:00:08.000033</ts>
    <user>Latarsha</user>
    <text>also I think the unix-style builds would be a good next thing to add</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:00:08.000571</ts>
    <user>Chantelle</user>
    <text>I think it's over half the checklist items</text>
  </message>
  <message conversation_id="478">
    <ts>2017-11-21T14:00:12.000426</ts>
    <user>Chantelle</user>
    <text>yup</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:00:27.000443</ts>
    <user>Latarsha</user>
    <text>since they're a simple argument change to the installer script</text>
  </message>
  <message conversation_id="478">
    <ts>2017-11-21T14:01:04.000275</ts>
    <user>Chantelle</user>
    <text>there's a little more to it because it will change what paths the binaries end up at, which changes what directories the test setup has to `chown`</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:01:09.000313</ts>
    <user>Chantelle</user>
    <text>but yeah, it shouldn't be complex</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:01:14.000026</ts>
    <user>Latarsha</user>
    <text>as to RoR, it's 50% how to use Racket, 50% programming education</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:01:14.000147</ts>
    <user>Jalisa</user>
    <text>I’d like to maybe learn Rust later on, but is it weird I don’t like nested 

```
{


}
```</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:01:44.000156</ts>
    <user>Latarsha</user>
    <text>why does the test setup have to chown the binaries?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:03:13.000173</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; because some of the tests write and create stuff in the racket package dirs so the `racket` user has to own the package installation dirs. And that has to happen _after_ packages are installed and built, because there's no way to chown a dir and all future subdirectories without using ACLs and lord I do not have the time to figure out how that nonsense works</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:03:47.000254</ts>
    <user>Chantelle</user>
    <text>really the tests just shouldn't be doing that, but alas</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:03:56.000422</ts>
    <user>Latarsha</user>
    <text>they really shouldn't be creating things in directories they don't own</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:04:17.000442</ts>
    <user>Latarsha</user>
    <text>ie, you should be able to run the tests even if racket is installed globally</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:04:42.000547</ts>
    <user>Jalisa</user>
    <text>No, I’m mean I prefer parenthesis to curly braces. But many will repeatedly tell me _syntax doesn’t matter_ which, I’m sure, has some truth to it.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:06:36.000696</ts>
    <user>Ida</user>
    <text>Have you peeked at the aesthetics of Python or Ruby?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:08:33.000689</ts>
    <user>Ida</user>
    <text>Seeing how people in several languages solve the same problem can be interesting, such as with Project Euler</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:08:41.000650</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; more strongly, I don't think any test should _ever_ be creating or writing to a file or dir that wasn't explicitly given to it by the test framework for testing purposes - something as simple as reading a `TEST_TMPDIR` env var would work for that</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:09:07.000573</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; I might agree with that, but I don't think we could consider all current instances of that bugs</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:09:37.000259</ts>
    <user>Chantelle</user>
    <text>agreed, and I certainly don't think unix installation or the 6.11 milestone in general should be blocked on it</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:09:39.000125</ts>
    <user>Latarsha</user>
    <text>but I think that "install unix-style racket as sudo, run tests as regular user" should work currently</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:10:13.000366</ts>
    <user>Chantelle</user>
    <text>`sudo` is recommended against in containerized setups in general because it does some weird things that are far more suited for interactive shell usage than for scripted builds</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:10:35.000172</ts>
    <user>Latarsha</user>
    <text>sure</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:10:47.000359</ts>
    <user>Latarsha</user>
    <text>I just mean that your description sounds like that would also fail</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:11:06.000051</ts>
    <user>Chantelle</user>
    <text>ah</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:12:06.000004</ts>
    <user>Chantelle</user>
    <text>yes, "install unix-style racket as sudo, run tests as regular user" would fail in a dockerized unix install unless the regular user was granted permission to read and write some of the racket installation dirs</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:12:21.000497</ts>
    <user>Latarsha</user>
    <text>would it fail in a non-dockerized install?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:12:47.000032</ts>
    <user>Chantelle</user>
    <text>unsure</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:13:01.000175</ts>
    <user>Chantelle</user>
    <text>I think it would if the user installing racket did so while running as root and then ran the tests as a normal user</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:13:52.000437</ts>
    <user>Chantelle</user>
    <text>but docker can introduce a lot of permissions weirdness that makes it hard to guess what will happen by default</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:15:25.000259</ts>
    <user>Latarsha</user>
    <text>well, if you can test without the chown and then see what happens that would be instructive</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:15:46.000024</ts>
    <user>Jalisa</user>
    <text>Yeah, I started on this journey with functional programming. Many I encountered harshly criticized those languages a lot. I think it not only made me think, but probably arose even more questions. Ruby isn’t quite as popular anymore; other tell me learning it had them un-learning a lot of things. I tried to decipher all of the opinions, but I think the better way is to see what works for me.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:16:54.000484</ts>
    <user>Chantelle</user>
    <text>if you remove the racket dir chowns from the current docker setup, the release tests fail to create a couple specific dirs that get written to as part of the `tests/racket/file.rktl` tests</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:17:30.000263</ts>
    <user>Latarsha</user>
    <text>are those in `/tmp`?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:18:27.000028</ts>
    <user>Chantelle</user>
    <text>ah, the `file.rktl` failures were for dirs in `/tmp` but there were some other failures I don't remember in the `tests/racket/test` command, and those ones were for creating directories in either the package or collection dirs, I forget which</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:18:54.000630</ts>
    <user>Chantelle</user>
    <text>I can file an issue to investigate which tests are making what directories, then we could file bugs with those tests to make that more configurable somehow</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:19:20.000309</ts>
    <user>Latarsha</user>
    <text>that would probably be good</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:19:58.000399</ts>
    <user>Chantelle</user>
    <text>I've been meaning to write a doc of what a racket test "should" do for proper cooperation with test runners and different environments</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:20:36.000149</ts>
    <user>Chantelle</user>
    <text>maybe doing that and getting some agreement from racket folks would be best before filing bugs on racket repos</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:20:41.000171</ts>
    <user>Latarsha</user>
    <text>yes</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:20:54.000068</ts>
    <user>Latarsha</user>
    <text>but investigating first for the file tests would be good too</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:23:57.000167</ts>
    <user>Ida</user>
    <text>No I don't mean to suggest those languages</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:24:08.000159</ts>
    <user>Ida</user>
    <text>And choosing a language on brackets would be bizzare</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:24:40.000353</ts>
    <user>Ida</user>
    <text>I meant to peek at them only, to look at their aesthetics</text>
  </message>
  <message conversation_id="479">
    <ts>2017-11-21T14:25:22.000453</ts>
    <user>Jalisa</user>
    <text>I have briefly. Maybe for design aesthetics?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:25:36.000451</ts>
    <user>Ida</user>
    <text>Other languages borrow those aesthetics too,</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:25:39.000505</ts>
    <user>Ida</user>
    <text>For example</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:25:53.000693</ts>
    <user>Ida</user>
    <text>Matlab and Crystal look Ruby-like</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:26:15.000513</ts>
    <user>Ida</user>
    <text>Python is quite unique in its look</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:26:17.000262</ts>
    <user>Ida</user>
    <text>It's spartan</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:27:45.000232</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; this is a neat project, I'm glad to help with it :)</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:28:14.000170</ts>
    <user>Latarsha</user>
    <text>well it wouldn't be nearly as good without someone like you who knew what they're doing</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:28:16.000185</ts>
    <user>Jalisa</user>
    <text>The main argument I’ve heard against Python was maintainability in larger codebases. Others say, no problem. A lot of it, I think, comes from who writes the code.</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:28:26.000492</ts>
    <user>Ida</user>
    <text>But you said you're after learning, right?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:28:32.000424</ts>
    <user>Ida</user>
    <text>You're okay learning a 2nd language after, right?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:28:34.000385</ts>
    <user>Chantelle</user>
    <text>this is in my wheelhouse I suppose</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:28:39.000064</ts>
    <user>Ida</user>
    <text>But I don't mean to suggest Python anyway</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:28:41.000749</ts>
    <user>Ida</user>
    <text>and Ruby is on its way down</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:28:46.000323</ts>
    <user>Ida</user>
    <text>though Python is shooting up massively</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:29:11.000300</ts>
    <user>Ida</user>
    <text>I was only mentioning it as visual contrast to the problem of brackets hehe</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:29:14.000076</ts>
    <user>Ida</user>
    <text>Python goes one way</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:29:17.000223</ts>
    <user>Ida</user>
    <text>Ruby goes another way</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:29:19.000264</ts>
    <user>Ida</user>
    <text>both quite weird</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:29:45.000065</ts>
    <user>Jalisa</user>
    <text>Sure, tell me what language you have in mind :).</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:29:53.000260</ts>
    <user>Ida</user>
    <text>For learning you mean?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:30:01.000119</ts>
    <user>Ida</user>
    <text>I really do recommend JS</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:30:04.000392</ts>
    <user>Ida</user>
    <text>hehe</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:30:11.000220</ts>
    <user>Ida</user>
    <text>I don't think you'll be poisoned by learning JS</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:30:20.000021</ts>
    <user>Ida</user>
    <text>like after, you try go back to Clojure or Racket or w/e</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:30:33.000545</ts>
    <user>Ida</user>
    <text>It's not like a classical musician tryign to learn Jazz, but finds his soul poisoned by bach</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:31:01.000333</ts>
    <user>Ida</user>
    <text>that being said</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:31:03.000431</ts>
    <user>Ida</user>
    <text>I am learning Racket</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:31:07.000012</ts>
    <user>Ida</user>
    <text>and intend to fully learn it</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:31:15.000169</ts>
    <user>Ida</user>
    <text>So if you're joining this journey with me</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:31:19.000355</ts>
    <user>Ida</user>
    <text>perhaps we can learn from each other</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:31:49.000083</ts>
    <user>Jalisa</user>
    <text>Haha! Well, it’s funny you say that, because I’ve returned to JS a lot. But I’m also interested in Functional JS if you have any suggestions there. I’ve looked into Ramda and Reason ML by Facebook (based on Ocaml).</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:31:49.000196</ts>
    <user>Ida</user>
    <text>I think it's quite healthy to learn 4-5 languages</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:32:07.000421</ts>
    <user>Ida</user>
    <text>It's also not an arrogant suggestion to learn 4-5 languages</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:32:16.000434</ts>
    <user>Ida</user>
    <text>Because after awhile, you get a knack for them</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:32:23.000008</ts>
    <user>Ida</user>
    <text>And few languages are truly unique, like Haskell</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:32:51.000121</ts>
    <user>Ida</user>
    <text>My suggestion is that instead of thinking about FP</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:32:54.000500</ts>
    <user>Ida</user>
    <text>you think about architecture</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:33:01.000336</ts>
    <user>Ida</user>
    <text>Do you recoil at the idea of OO?</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:33:24.000212</ts>
    <user>Ida</user>
    <text>Part of the reason I suggest JS is because many programmers never get to do everything</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:33:28.000154</ts>
    <user>Ida</user>
    <text>but in JS, you do</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:33:34.000108</ts>
    <user>Ida</user>
    <text>It's possible to explore full stack</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:34:01.000320</ts>
    <user>Ida</user>
    <text>and when you do</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:34:15.000105</ts>
    <user>Ida</user>
    <text>you realize that it's more important to think about major pieces of architecture communicating with each other</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:34:17.000111</ts>
    <user>Ida</user>
    <text>and how they behave</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:34:18.000566</ts>
    <user>Ida</user>
    <text>for example</text>
  </message>
  <message conversation_id="477">
    <ts>2017-11-21T14:34:37.000554</ts>
    <user>Jalisa</user>
    <text>Right, I like that idea. And yes, a study partner is a motivating factor. I’m driving at the moment, but I should have more to say when I get home.</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T14:55:43.000091</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; well that led to a fun bug :slightly_smiling_face:</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:06:04.000411</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; _wow_ &lt;https://github.com/racket/racket/issues/1896&gt;</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:07:12.000563</ts>
    <user>Chantelle</user>
    <text>I notice it's only the gc events tagged "MST"</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:07:20.000582</ts>
    <user>Latarsha</user>
    <text>yeah</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:07:24.000555</ts>
    <user>Latarsha</user>
    <text>I added that to the issue</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:07:44.000060</ts>
    <user>Latarsha</user>
    <text>those are related to places</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:10:44.000059</ts>
    <user>Corey</user>
    <text>From Jan 2011 "racket http server, major GC: -216 bytes collected" &lt;https://lists.racket-lang.org/users/archive/2011-January/043760.html&gt;</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:11:46.000089</ts>
    <user>Chantelle</user>
    <text>gasp, a zombie bug</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:12:08.000583</ts>
    <user>Corey</user>
    <text>The answer is in that thread:
```
&amp;gt; On Tue, Jan 11, 2011 at 5:28 AM, Noel Welsh &amp;lt;noelwelsh at gmail.com&amp;gt; wrote:
&amp;gt; On Mon, Jan 10, 2011 at 9:53 PM, Greg Hendershott
&amp;gt; &amp;lt;greghendershott at gmail.com&amp;gt; wrote:
&amp;gt;&amp;gt;
&amp;gt;&amp;gt; What does it mean for the GC to collect a negative number of bytes?
&amp;gt;
&amp;gt; I'm ducking this one...

Clearly it means that the garbage collector thought it could throw
something out, put it in the trash, and then realized later that it
really needed it, so it reached in, pulled it back out, and then tried
to flatten it out and wipe off the bits of food which went in on top
of it.

Hasn't this ever happened to you? :-)

Todd
```</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:13:34.000276</ts>
    <user>Latarsha</user>
    <text>I doubt that's the same thing</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:33:16.000282</ts>
    <user>Latarsha</user>
    <text>Does rackunit have a mode to print all the names of the tests it runs?</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:33:23.000044</ts>
    <user>Latarsha</user>
    <text>`verbose` doesn't seem to do that</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:38:14.000148</ts>
    <user>Jalisa</user>
    <text>&lt;@Ida&gt; those are all very good points. I think you nailed it about studying architecture instead, since by exploring multiple languages, I'm sure you can get a better _grasp_ at that. I'm sort of hoping to go through HtDP. Did you already make it through that one? I'm also enrolled in Frontend Masters and have access to some of Kyle Simspon's workshops about his book series.

Another one I meant to explore is &lt;https://watchandcode.com/p/practical-javascript&gt;

but I've not made it there yet. Let me know what you think.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:40:50.000148</ts>
    <user>Jalisa</user>
    <text>Well, yeah. There were times I felt like letting him know how I felt about his teaching style--how it didn't seem to make things better, but I always held back. I know he means well in teaching people, but I'm not sure he has the patience, and probably also has a day job.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:44:44.000002</ts>
    <user>Jalisa</user>
    <text>I really enjoyed Julie Moronuki's podcast about Haskell below. I found it inspiring and she explained it from a beginner's standpoint, but still, I think learning Haskell is tough.

&lt;https://frontsidethepodcast.simplecast.fm/91ecc4ec&gt;</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:45:11.000220</ts>
    <user>Jalisa</user>
    <text>I'm not sure the authors are doing work together anymore.</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:51:33.000656</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; found it</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:54:35.000534</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; yeah copying a giant string will do it :p</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:55:05.000555</ts>
    <user>Chantelle</user>
    <text>The authors are very much not working together anymore. Julie super cool tho</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:55:57.000360</ts>
    <user>Jalisa</user>
    <text>I agree, she is. I came away from the podcast with a lot to think about.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:56:13.000571</ts>
    <user>Chantelle</user>
    <text>and that does sound like a good rackunit feature, maybe something triggered by an env var or something</text>
  </message>
  <message conversation_id="480">
    <ts>2017-11-21T15:56:39.000014</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; there's a `verbose` argument to `run-tests` but it doesn't do much</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:56:55.000364</ts>
    <user>Chantelle</user>
    <text>yup</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:57:09.000043</ts>
    <user>Latarsha</user>
    <text>maybe it could be made to be not useless</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:57:33.000564</ts>
    <user>Chantelle</user>
    <text>I'd want the test suite implementation made less incomprehensible first</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:57:51.000269</ts>
    <user>Chantelle</user>
    <text>but yes</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T15:58:32.000013</ts>
    <user>Chantelle</user>
    <text>more broadly, more docs describing what the responsibilities of a test runner tool like `raco test` are vs a test framework like `rackunit` or `chk` would be great</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:01:12.000610</ts>
    <user>Ida</user>
    <text>Mozilla docs are also top notch and in clear English most of the times</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:03:00.000688</ts>
    <user>Ida</user>
    <text>But imo, you should do one approach at a time</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:03:06.000120</ts>
    <user>Ida</user>
    <text>So if you're doing racket, then do racket</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:06:28.000538</ts>
    <user>Ida</user>
    <text>As you're going along HTDP and making stuff</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:06:40.000456</ts>
    <user>Ida</user>
    <text>Or if you have a mini project you wish to work on</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:06:44.000506</ts>
    <user>Ida</user>
    <text>I'd be interested in working on it with you</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:06:49.000417</ts>
    <user>Ida</user>
    <text>esp if you ever wish to do Racket + web stuff</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:06:53.000226</ts>
    <user>Ida</user>
    <text>That's what I'm working toward</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:08:02.000004</ts>
    <user>Ida</user>
    <text>I went to Racket because I thought it was the most beginner-friendly Lisp language</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:15:11.000262</ts>
    <user>Jalisa</user>
    <text>Ahh, yes. I found Racket from the FP community and immediately latched onto the documentation and one called _beautiful Racket_. Racket + the web is definitely something I'm interested in. I have a decent amount of experience in creating websites, CSS, HTML, minor server configuration, but only enough of JS to get by when needed... I also own the book _Realm of Racket_, so this is surely something we can study together. I'll probably work through HtDP and try to make my way through the Racket book I own, and go through HtDP as fast as I can. Have a decent amount of concepts down to get started.</text>
  </message>
  <message conversation_id="482">
    <ts>2017-11-21T16:17:46.000466</ts>
    <user>Jalisa</user>
    <text>One thing that confuses me about Racket. Is DrRacket the only real way to work on projects?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:20:00.000384</ts>
    <user>Ida</user>
    <text>No, but it's pretty convenient</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:20:14.000135</ts>
    <user>Ida</user>
    <text>Unfortunately support on all the other popular IDE's requires a larger community</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:20:26.000399</ts>
    <user>Ida</user>
    <text>I've found Racket support on Visual Studio Code, Atom, etc. to be lacking</text>
  </message>
  <message conversation_id="482">
    <ts>2017-11-21T16:20:50.000550</ts>
    <user>Jalisa</user>
    <text>That's what I thought.</text>
  </message>
  <message conversation_id="482">
    <ts>2017-11-21T16:22:25.000214</ts>
    <user>Jalisa</user>
    <text>As many who don't particularly like Clojure, they seem to have some great tools for editors...</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:22:42.000278</ts>
    <user>Ida</user>
    <text>They do indeed, because Java has some of the best tooling in the entire industry</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:22:50.000311</ts>
    <user>Ida</user>
    <text>The most advanced programmer assistance tools</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:23:02.000366</ts>
    <user>Ida</user>
    <text>I'm not touching Java though!</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:23:17.000006</ts>
    <user>Ida</user>
    <text>At least I don't wish to ~_~</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:23:19.000003</ts>
    <user>Ida</user>
    <text>It is quite verbose</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:23:19.000445</ts>
    <user>Jalisa</user>
    <text>Me either lol.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:23:26.000349</ts>
    <user>Ida</user>
    <text>And doesn't give you the full payoff for all that verbosity</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:23:59.000035</ts>
    <user>Ida</user>
    <text>But Java is able to help the programmer catch mistakes that other language communities don't understand</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:24:07.000067</ts>
    <user>Jalisa</user>
    <text>Yeah, I've heard someone compare its type system (in the context of Haskell) to the toy-maker Fisher-Price.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:24:07.000273</ts>
    <user>Ida</user>
    <text>like I see some people being fancy using Vim to edit Python</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:24:21.000567</ts>
    <user>Ida</user>
    <text>No, that's rude</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:24:32.000147</ts>
    <user>Jalisa</user>
    <text>Agreed. I have a nice CS book based on Java.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:24:32.000186</ts>
    <user>Ida</user>
    <text>Java is stronger than Go</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:02.000371</ts>
    <user>Ida</user>
    <text>But I would also say too much focus on FP or OO isn't that good</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:07.000322</ts>
    <user>Ida</user>
    <text>I hear a lot of people talk about it</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:12.000298</ts>
    <user>Ida</user>
    <text>And then, especially in real life</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:17.000243</ts>
    <user>Ida</user>
    <text>when I ask them about it, I might say something like</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:23.000611</ts>
    <user>Ida</user>
    <text>"Oh, so you like Haskell too!"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:24.000166</ts>
    <user>Jalisa</user>
    <text>Yeah, it is a bit rude. But most FP people don't think highly of Go either. I need to stay away from those groups, I think they're making my head hurt lol.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:28.000309</ts>
    <user>Ida</user>
    <text>"I'm trying to learn FP"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:41.000449</ts>
    <user>Ida</user>
    <text>"How does FP help you with app design?"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:43.000620</ts>
    <user>Ida</user>
    <text>And they cannot answer</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:25:51.000018</ts>
    <user>Ida</user>
    <text>or</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:05.000603</ts>
    <user>Ida</user>
    <text>"So you do OO, doesn't that mean state is sometimes distributed?"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:11.000366</ts>
    <user>Jalisa</user>
    <text>They have the mentality that it eliminates bugs mostly, and makes their lives easier...</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:13.000632</ts>
    <user>Ida</user>
    <text>"What strategy do you use to prevent problems?"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:21.000419</ts>
    <user>Ida</user>
    <text>Yes, but those are very small level concerns</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:25.000576</ts>
    <user>Ida</user>
    <text>I think an interesting level of thinking is</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:31.000572</ts>
    <user>Ida</user>
    <text>How do I delegate work to person A, B, C, D, E, F</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:41.000196</ts>
    <user>Ida</user>
    <text>And while they have varying code level quality</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:45.000453</ts>
    <user>Ida</user>
    <text>I know that if they keep their "code contracts"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:49.000093</ts>
    <user>Ida</user>
    <text>The entire system will run</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:53.000331</ts>
    <user>Ida</user>
    <text>How does a person know such things?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:26:57.000235</ts>
    <user>Ida</user>
    <text>architecture</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:12.000114</ts>
    <user>Ida</user>
    <text>Another thing I would note about FP is</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:21.000009</ts>
    <user>Ida</user>
    <text>Let's say you find out that you are joining an FP team, great</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:27.000579</ts>
    <user>Ida</user>
    <text>And you code you module in the FP style, very good</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:33.000540</ts>
    <user>Ida</user>
    <text>it connects with the team's app and works well</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:35.000128</ts>
    <user>Ida</user>
    <text>all nice</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:41.000260</ts>
    <user>Ida</user>
    <text>and then one day you look over at your coworker's module code</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:48.000134</ts>
    <user>Ida</user>
    <text>and you realize some of the code is imperative!</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:49.000354</ts>
    <user>Ida</user>
    <text>how dare they!</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:55.000021</ts>
    <user>Ida</user>
    <text>but from the outside, it looks 100% functional</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:27:58.000255</ts>
    <user>Ida</user>
    <text>it's 100% deterministic</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:28:04.000022</ts>
    <user>Ida</user>
    <text>so... is it bad?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:28:10.000550</ts>
    <user>Ida</user>
    <text>One day you look underneath the Scala code</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:28:16.000527</ts>
    <user>Ida</user>
    <text>and you realize, it's 99.9% imperative</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:28:34.000533</ts>
    <user>Ida</user>
    <text>is it bad?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:28:36.000237</ts>
    <user>Jalisa</user>
    <text>Have you looked into Rust?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:28:39.000023</ts>
    <user>Ida</user>
    <text>oh</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:28:40.000038</ts>
    <user>Ida</user>
    <text>yes</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:28:56.000153</ts>
    <user>Ida</user>
    <text>Rust interests me</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:29:06.000188</ts>
    <user>Ida</user>
    <text>But I'm waiting for it to catch a harder bit of success first</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:29:18.000370</ts>
    <user>Ida</user>
    <text>As it's a high commitment, and it's very verbose, and it doesn't agree with my aesthetics, but it has the characteristics I want</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:29:29.000436</ts>
    <user>Ida</user>
    <text>Macros, FP, concurrency, memory safety</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:29:37.000133</ts>
    <user>Jalisa</user>
    <text>Yeah, my attempts were very slow and probably not too beneficial.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:29:54.000074</ts>
    <user>Jalisa</user>
    <text>That was exactly my thought.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:30:21.000099</ts>
    <user>Ida</user>
    <text>so I would say don't be too biased towards FP or OO</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:30:28.000295</ts>
    <user>Ida</user>
    <text>and that the lore in both worlds goes very deep</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:30:29.000183</ts>
    <user>Jalisa</user>
    <text>What would you say interests you the most in a language?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:30:34.000066</ts>
    <user>Ida</user>
    <text>hm</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:30:38.000121</ts>
    <user>Ida</user>
    <text>it depends</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:30:40.000669</ts>
    <user>Ida</user>
    <text>You mean for general use?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:31:47.000167</ts>
    <user>Ida</user>
    <text>I care if the language is (1) mildly popular, so that it won't suddenly die on me and I can get some help, (2) has first-class consideration for concurrency and parallelism, (3) has support for FP and OO concepts, (4) has nice off-the-shelf data structures and standard library</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:32:35.000168</ts>
    <user>Ida</user>
    <text>As a side factor, I want a language to help me on my learning goals</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:34:21.000509</ts>
    <user>Jalisa</user>
    <text>Hmm, that sort of sounds like Elixir, Go, or maybe even Rust.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:34:28.000104</ts>
    <user>Ida</user>
    <text>Yup!</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:34:29.000480</ts>
    <user>Ida</user>
    <text>but not Go</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:34:40.000360</ts>
    <user>Ida</user>
    <text>I have some experience with Go, and I don't like it</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:34:44.000327</ts>
    <user>Ida</user>
    <text>It has barely any support for FP</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:34:51.000277</ts>
    <user>Jalisa</user>
    <text>Yeah, I have the same preferences.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:34:58.000022</ts>
    <user>Jalisa</user>
    <text>Oh, right.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:35:11.000433</ts>
    <user>Ida</user>
    <text>Rob Pike thinks that FP is a bad paradigm</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:35:21.000518</ts>
    <user>Ida</user>
    <text>He calls it "not machine simple"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:35:28.000261</ts>
    <user>Ida</user>
    <text>or not close to how the machine operates</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:35:47.000098</ts>
    <user>Ida</user>
    <text>So he is resistant to even simple constructs like `map`</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:36:17.000502</ts>
    <user>Ida</user>
    <text>How would you assess your current Racket knowledge?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:36:19.000004</ts>
    <user>Jalisa</user>
    <text>That's interesting.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:36:33.000032</ts>
    <user>Jalisa</user>
    <text>Limited but I know it's dynamic.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:36:55.000026</ts>
    <user>Ida</user>
    <text>You know how to make functions, use them etc?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:37:04.000111</ts>
    <user>Jalisa</user>
    <text>Sometimes I left myself wondering if learning FP would have me lacking in other areas.. maybe not able to appreciate other paradigms.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:37:31.000262</ts>
    <user>Ida</user>
    <text>The most essential aspect of computation is studied in algorithms IMO</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:37:34.000228</ts>
    <user>Jalisa</user>
    <text>Yeah, I'm aware of how to create functions, but not so much how to implement them in a working program.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:37:43.000344</ts>
    <user>Ida</user>
    <text>Which is unfortunate and painful</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:37:46.000215</ts>
    <user>Jalisa</user>
    <text>That's interesting.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:37:52.000044</ts>
    <user>Jalisa</user>
    <text>Ha.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:37:58.000261</ts>
    <user>Ida</user>
    <text>algorithms is the abstract study of problems</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:38:09.000487</ts>
    <user>Ida</user>
    <text>those problems tend to be well-stated CS / math problems involving information storage, retrieval, and computation</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:38:22.000211</ts>
    <user>Ida</user>
    <text>the language of algorithms is often in an informal, English-like code</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:38:28.000301</ts>
    <user>Ida</user>
    <text>which shows you how free-form and abstract it is</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:38:39.000098</ts>
    <user>Ida</user>
    <text>the most limitless programming Language is your lazy English speech!</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:38:46.000257</ts>
    <user>Ida</user>
    <text>Communicating to yourself the way you think is most obvious!</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:39:21.000473</ts>
    <user>Jalisa</user>
    <text>The Eve language looks interesting, but I'm not sure I'm a fan yet of having a program (Photoshop-ish) doing everything... &lt;http://witheve.com/&gt;</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:39:38.000359</ts>
    <user>Ida</user>
    <text>So doing things in a FP or OO way, or a procedural way, or wahtever doesn't really matter</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:39:41.000450</ts>
    <user>Jalisa</user>
    <text>Right, I was thinking about the English language when learning Haskell..</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:39:50.000022</ts>
    <user>Ida</user>
    <text>If you wish to do interesting problems in computation, you cannot avoid the study of algorithms</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:40:29.000600</ts>
    <user>Ida</user>
    <text>One of the alluring ways that FP people think about data and programs</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:40:54.000178</ts>
    <user>Ida</user>
    <text>is your program is a function, and you throw inputs, and the output is the desired program result</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:41:06.000147</ts>
    <user>Jalisa</user>
    <text>So, maybe you'd be interested in machine learning and neural networks as well. I've thought about that a lot, but wondered if I should contribute to the end of mankind lol. (joke)</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:41:18.000369</ts>
    <user>Ida</user>
    <text>I'm interested in AI</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:41:40.000316</ts>
    <user>Ida</user>
    <text>but that's a very distal interest</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:41:50.000454</ts>
    <user>Ida</user>
    <text>I'm interested in mathematical models of causal learning</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:43:28.000466</ts>
    <user>Jalisa</user>
    <text>Yeah, honestly, I got to some of the _meat_ languages, I think, through wanting to know more about _how_ computers work, and that probably lead to CS. But I've not yet begun to delve too much into that either, as there's varying opinions on how to go about it. But I'll probably stick with the Racket community and go from there. I think it probably has a lot to teach in that realm.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:43:58.000541</ts>
    <user>Ida</user>
    <text>Have you heard of Project Euler?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:44:21.000216</ts>
    <user>Ida</user>
    <text>&lt;https://projecteuler.net/problem=1&gt;</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:45:12.000313</ts>
    <user>Jalisa</user>
    <text>That's interesting. Yeah, I've enrolled into a few math courses. I'll have to look more into it.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:47:10.000005</ts>
    <user>Ida</user>
    <text>Does that first problem sound hard in Racket</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:47:19.000189</ts>
    <user>Ida</user>
    <text>Ignoring all mathematical insights that may help make this problem easier</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:47:37.000200</ts>
    <user>Jalisa</user>
    <text>I think the only way for me to memorize or appreciate that stuff is to make something with it.</text>
  </message>
  <message conversation_id="483">
    <ts>2017-11-21T16:47:44.000227</ts>
    <user>Jalisa</user>
    <text>Speaking of which...</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:48:07.000416</ts>
    <user>Jalisa</user>
    <text>Have you heard of &lt;https://p5js.org/&gt;</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:49:08.000072</ts>
    <user>Jalisa</user>
    <text>I found out about it through &lt;https://leanpub.com/codingforvisuallearners&gt;</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:52:16.000261</ts>
    <user>Jalisa</user>
    <text>I tried learning discrete mathematics but that was way over my head.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:54:25.000277</ts>
    <user>Jalisa</user>
    <text>I would guess, no, it's not hard in Racket? Only a guess, but I'd imagine Racket can do that easily.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:56:39.000447</ts>
    <user>Jalisa</user>
    <text>Thanks for sharing the link. I'm going to bookmark it and try to do some problems in my spare time. I'd spent a little time at Kahn Academy today.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T16:58:25.000488</ts>
    <user>Jalisa</user>
    <text>I can't believe there are 604 problems, that's amazing.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:05:54.000231</ts>
    <user>Ida</user>
    <text>Ah I think of it as a good benchmark for programming ability, that first problem</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:06:04.000462</ts>
    <user>Ida</user>
    <text>It basically asks you do deal with conditionals and looping</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:07:04.000399</ts>
    <user>Jalisa</user>
    <text>What do you think of Mathematica?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:07:16.000080</ts>
    <user>Ida</user>
    <text>It's probably not the right language for you</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:07:23.000236</ts>
    <user>Ida</user>
    <text>It's a lab language for universities that are uncomfortable with open source</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:07:30.000010</ts>
    <user>Ida</user>
    <text>so they'd rather have the proprietary support</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:07:34.000559</ts>
    <user>Ida</user>
    <text>do you have a free license or something?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:07:40.000212</ts>
    <user>Jalisa</user>
    <text>Ahhh. Got it. Good answer.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:07:45.000103</ts>
    <user>Jalisa</user>
    <text>No.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:08:24.000608</ts>
    <user>Ida</user>
    <text>What kind of programming destination are you after</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:09:02.000094</ts>
    <user>Jalisa</user>
    <text>See, I already have a web background, so I don't want to abandon that.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:09:20.000037</ts>
    <user>Ida</user>
    <text>Why art thou avoiding JS...</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:09:28.000050</ts>
    <user>Ida</user>
    <text>That makes 0 sense...</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:04.000431</ts>
    <user>Ida</user>
    <text>JS is such a small programming language</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:06.000202</ts>
    <user>Ida</user>
    <text>It really is</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:15.000234</ts>
    <user>Ida</user>
    <text>I meant it when I said 80-120 constructs</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:19.000205</ts>
    <user>Ida</user>
    <text>which is about the same as Go or C</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:26.000506</ts>
    <user>Jalisa</user>
    <text>I'm not really. But perhaps I was a bit influenced by how people feel about JS. I can sort of see things in the bigger picture now, but yeah.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:31.000164</ts>
    <user>Ida</user>
    <text>It's so small it's painful</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:37.000235</ts>
    <user>Ida</user>
    <text>like</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:40.000007</ts>
    <user>Ida</user>
    <text>small is easy to learn</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:42.000332</ts>
    <user>Ida</user>
    <text>hard to master</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:10:57.000241</ts>
    <user>Ida</user>
    <text>The reason is because so many tools you wish someone had built for you weren't built</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:11:06.000569</ts>
    <user>Ida</user>
    <text>JS has no standard library, unlike Racket, which has a huge library</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:11:10.000052</ts>
    <user>Ida</user>
    <text>so does Python</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:11:11.000173</ts>
    <user>Jalisa</user>
    <text>Oh and, because I was looking into FP compile-to languages like PureScript and Elm, but even those require _some_ knowledge of JS.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:11:21.000180</ts>
    <user>Ida</user>
    <text>aghh those are all crazy stuffs TBH</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:11:24.000008</ts>
    <user>Ida</user>
    <text>like, job-wise</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:11:37.000163</ts>
    <user>Ida</user>
    <text>they have almost 0 chance of winning</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:11:43.000162</ts>
    <user>Ida</user>
    <text>like almost 0 popularity</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:12:26.000205</ts>
    <user>Ida</user>
    <text>JS is a really fine language</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:12:28.000100</ts>
    <user>Ida</user>
    <text>it's minimal</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:12:33.000114</ts>
    <user>Ida</user>
    <text>If you've been learning HTML CSS</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:12:35.000060</ts>
    <user>Ida</user>
    <text>but not learning JS</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:12:38.000216</ts>
    <user>Ida</user>
    <text>it's kind of crazy</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:12:45.000223</ts>
    <user>Ida</user>
    <text>because JS boosts your HTML CSS powers like 10x</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:12:48.000412</ts>
    <user>Jalisa</user>
    <text>Yeah, I realized that when I started looking more into that, but I think it's improving, only very slowly.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:13:26.000271</ts>
    <user>Ida</user>
    <text>What are some things that an aspiring learner might feel bad about learning JS with?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:13:37.000223</ts>
    <user>Ida</user>
    <text>Well, JS has extremely limited parallelism</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:13:42.000052</ts>
    <user>Ida</user>
    <text>It has weak representation of underlying memory</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:13:52.000276</ts>
    <user>Jalisa</user>
    <text>Callbacks?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:13:56.000354</ts>
    <user>Ida</user>
    <text>callbacks are fine</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:14:06.000054</ts>
    <user>Ida</user>
    <text>People who complain about callbacks are those who dont' know how to work with streams</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:14:25.000434</ts>
    <user>Ida</user>
    <text>plus, JS has some really modern async constructs from the C# land</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:14:31.000524</ts>
    <user>Ida</user>
    <text>which has since been adopted by Python</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:14:44.000226</ts>
    <user>Ida</user>
    <text>Callbacks are a local code issue</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:14:48.000307</ts>
    <user>Jalisa</user>
    <text>I don't actually know why, but I have a pretty big interest in JS--or did at one point--but I'm going back in that direction.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:15:01.000095</ts>
    <user>Ida</user>
    <text>I would totally recommend it</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:15:10.000186</ts>
    <user>Ida</user>
    <text>You can do a very fast lightning review of JS pretty easily</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:16:06.000338</ts>
    <user>Jalisa</user>
    <text>Have you heard of a static builder called GatsbyJS? It's based on React and GraphQL. I was highly interested in that at one point; you know what, I think it was tooling that had me back out when I should've first learned VanillaJS.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:16:22.000182</ts>
    <user>Ida</user>
    <text>You should learn React before you touch Gatsby or GraphQL</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:16:32.000170</ts>
    <user>Ida</user>
    <text>GraphQL has nothing to do with React, but it works great with React</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:16:49.000335</ts>
    <user>Ida</user>
    <text>I totally believe in the mission of Gatsby</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:16:56.000355</ts>
    <user>Ida</user>
    <text>&lt;http://fog.pw/#/&gt;</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:16:59.000485</ts>
    <user>Jalisa</user>
    <text>Yeah, GraphQL boggled my mind when I tried to understand it.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:17:02.000283</ts>
    <user>Ida</user>
    <text>This is a static website I've been toying with</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:17:15.000291</ts>
    <user>Ida</user>
    <text>It's part of why I believe in static websites with React</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:17:27.000098</ts>
    <user>Ida</user>
    <text>I think one of the most interrupting moments of web experience is in making a new web request</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:17:35.000259</ts>
    <user>Ida</user>
    <text>there are physical constraints that make it so your website can never reach someone that fast</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:17:47.000089</ts>
    <user>Ida</user>
    <text>the only way to break past this is smart http requests</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:17:48.000177</ts>
    <user>Ida</user>
    <text>with JS</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:17:54.000257</ts>
    <user>Ida</user>
    <text>so most of the links don't work</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:17:56.000175</ts>
    <user>Ida</user>
    <text>but for the top bar</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:18:00.000084</ts>
    <user>Ida</user>
    <text>you'll notice that the site loads instantly</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:18:07.000276</ts>
    <user>Jalisa</user>
    <text>Is that a Gatsby site?</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:18:07.000348</ts>
    <user>Ida</user>
    <text>like click settings, or add boomark</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:18:20.000225</ts>
    <user>Ida</user>
    <text>it's a React static site, so it could easily be deployed on Gatsby</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:18:32.000155</ts>
    <user>Ida</user>
    <text>it has the same philosophy and faith in React's place for a niche of websites</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:18:37.000302</ts>
    <user>Jalisa</user>
    <text>Oh, and then there's Webpack sorcery. That is _tough_.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:18:43.000200</ts>
    <user>Ida</user>
    <text>Yes, webpack is hard</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:18:50.000309</ts>
    <user>Ida</user>
    <text>But it won't limit your learning</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:18:58.000215</ts>
    <user>Ida</user>
    <text>The lack of decent parallelism and memory represntation will</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:19:11.000325</ts>
    <user>Ida</user>
    <text>The lack of types means you're not being experienced with a nice typed language</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:19:20.000198</ts>
    <user>Ida</user>
    <text>Obviously if you landed a job with a language like Rust right away</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:19:25.000341</ts>
    <user>Ida</user>
    <text>You'd be getting a way different learning experience</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:19:31.000247</ts>
    <user>Ida</user>
    <text>one which doesn't neglect concurrency or parallelism at all</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:20:10.000120</ts>
    <user>Ida</user>
    <text>But React is very much a functional way of organizing apps</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:20:25.000147</ts>
    <user>Ida</user>
    <text>Which is why I would recommend learning React + Redux together, even though everyone might say that is a little heavy</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:20:31.000513</ts>
    <user>Ida</user>
    <text>but tons of beginners have walked this pathway</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:20:57.000472</ts>
    <user>Jalisa</user>
    <text>Decisions lol. Yeah, I'll probably follow through with HtDP and Racket. Later, I'm sure I'll finish what I can learn about JS. Someone told me they learned FP first and JS later. That was probably the strangest paths I've heard thus far, but maybe even in the direction I was going.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:21:11.000240</ts>
    <user>Ida</user>
    <text>I would ask how much FP they know, though</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:21:17.000474</ts>
    <user>Ida</user>
    <text>I love FP, I keep on trying to advance my knowledge</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:21:27.000012</ts>
    <user>Ida</user>
    <text>whenever I meet techy people</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:21:32.000182</ts>
    <user>Ida</user>
    <text>especially IRL</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:21:39.000251</ts>
    <user>Ida</user>
    <text>I ask their impressions of FP</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:21:43.000315</ts>
    <user>Ida</user>
    <text>everyone who has loved FP has disappointed me</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:21:58.000271</ts>
    <user>Ida</user>
    <text>for one thing</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:22:05.000103</ts>
    <user>Ida</user>
    <text>the land of FP data structures and algorithms is high lore</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:22:13.000468</ts>
    <user>Jalisa</user>
    <text>This person was an advanced Haskeller. You'd be surprised how many Haskell programmers don't know a thing about JS.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:22:40.000481</ts>
    <user>Ida</user>
    <text>I wouldn't be surprised if advanced haskeller doesn't work with advanced functional data structures</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:22:44.000173</ts>
    <user>Ida</user>
    <text>it really is a land of deep lore</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:02.000114</ts>
    <user>Ida</user>
    <text>like the academic literary output in that realm is scant</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:07.000296</ts>
    <user>Ida</user>
    <text>you would think that academia loves FP</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:09.000179</ts>
    <user>Ida</user>
    <text>it does not</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:09.000236</ts>
    <user>Jalisa</user>
    <text>Yeah, everyone disappoints me. Hah! So many perspectives, but I can appreciate them all and learn.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:18.000015</ts>
    <user>Ida</user>
    <text>academia loves imperative algorithms</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:29.000177</ts>
    <user>Ida</user>
    <text>99.99% of algorithms studies are non-functional data structures</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:46.000173</ts>
    <user>Ida</user>
    <text>when you read literature on FP data structures</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:49.000239</ts>
    <user>Ida</user>
    <text>sometimes authors leave sad statements</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:55.000267</ts>
    <user>Ida</user>
    <text>about how much some other author's work helped them</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:23:58.000068</ts>
    <user>Ida</user>
    <text>but then you think</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:24:03.000195</ts>
    <user>Ida</user>
    <text>"omg, I know that work, that work is over 10 years old"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:24:08.000025</ts>
    <user>Ida</user>
    <text>"This field moves at 1 MPH"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:24:14.000037</ts>
    <user>Jalisa</user>
    <text>That's why I admire Alexis. She knows Haskell, Racket, built Hackett, and I think, does frontend work with JS and such.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:25:37.000096</ts>
    <user>Jalisa</user>
    <text>But you're right, the JS community has too much to offer to pass up. I'd better do some work today. Thanks for the discussion.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:25:56.000346</ts>
    <user>Ida</user>
    <text>If you want help with JS, I can offer some</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:26:02.000298</ts>
    <user>Ida</user>
    <text>including how to transport your FP knowledge over to JS</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:26:18.000088</ts>
    <user>Ida</user>
    <text>But aside from the most simple DRY stuff</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:26:21.000071</ts>
    <user>Ida</user>
    <text>I haven't seen interesting FP</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:26:38.000181</ts>
    <user>Ida</user>
    <text>I tend to practice functional JS just for the aesthetics</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:27:15.000080</ts>
    <user>Jalisa</user>
    <text>That'd be great. I think Frontend Masters has a FP JS course, and there's another one of GitHub if I recall. But I'll definitely have to get more of your thoughts on certain things when I get stuck! Ha.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:27:23.000167</ts>
    <user>Ida</user>
    <text>I also find it odd that FP people would talk about type correctness</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:27:32.000369</ts>
    <user>Ida</user>
    <text>But one of the most interesting kinds of correctness in a program is, "will it get stuck"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:27:35.000251</ts>
    <user>Ida</user>
    <text>"will it freeze"</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:27:42.000410</ts>
    <user>Ida</user>
    <text>but they don't talk about that!</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:28:06.000190</ts>
    <user>Ida</user>
    <text>That is the study of waiting and progress</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:28:16.000389</ts>
    <user>Jalisa</user>
    <text>Someone told me the FP community is very _tribal_, and in that, I would partly agree...</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:28:49.000305</ts>
    <user>Ida</user>
    <text>I notice you're walking up some math pathway</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:28:53.000386</ts>
    <user>Jalisa</user>
    <text>I think if you cut off everyone's ideas and efforts, you may be missing out on a lot.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:29:01.000144</ts>
    <user>Ida</user>
    <text>perhaps out of some math anxiety</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:29:08.000015</ts>
    <user>Ida</user>
    <text>discrete math is a great programmer's catch-all course</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:29:14.000341</ts>
    <user>Ida</user>
    <text>but when you go into the Haskell channel</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:29:25.000185</ts>
    <user>Ida</user>
    <text>you no doubt notice a bias for abstract algebra and category theory</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:29:28.000173</ts>
    <user>Ida</user>
    <text>including with alexis</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:29:30.000109</ts>
    <user>Ida</user>
    <text>and the people here</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:29:47.000106</ts>
    <user>Jalisa</user>
    <text>Oh yeah, I think it makes some people angry.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:29:51.000452</ts>
    <user>Ida</user>
    <text>Ok, so I've walked up to abstract algebra so far, dipping my toes into category theory, and so far all I see are great applications in MATH</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:30:37.000475</ts>
    <user>Ida</user>
    <text>And a confident to read technical papers NOT in abstract algebra</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:30:41.000062</ts>
    <user>Ida</user>
    <text>*confidence</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:30:48.000227</ts>
    <user>Jalisa</user>
    <text>The _theory_ part is the most telling. Haha. How can math be theory? But I suppose calculus is somewhat that.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:31:32.000057</ts>
    <user>Jalisa</user>
    <text>If they knew everything, we wouldn't still be on this forsaken planet. Lol.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:31:47.000046</ts>
    <user>Ida</user>
    <text>but I would be wary about thinking that you have to revisit calculus</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:31:51.000258</ts>
    <user>Ida</user>
    <text>and walk all the way through math again</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:32:06.000025</ts>
    <user>Ida</user>
    <text>Discrete Math is a great programmer's catch-all of need-to-know math</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:32:20.000111</ts>
    <user>Ida</user>
    <text>but yeah see ya</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:32:33.000458</ts>
    <user>Jalisa</user>
    <text>Yeah, that's what most people have told me. I don't know why I feel like I'm missing out on that, but perhaps later would be more logical and helpful.</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:32:37.000506</ts>
    <user>Jalisa</user>
    <text>Later!</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:33:01.000366</ts>
    <user>Nelson</user>
    <text>&lt;@Eun&gt; or &lt;@Rosalee&gt; , can you help me run the contract profiler on a plot3d module? &lt;https://github.com/racket/gui/issues/86&gt;</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:33:52.000049</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; I wonder if the issue is threads, somehow</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:33:52.000198</ts>
    <user>Nelson</user>
    <text>Clicking &amp;amp; dragging is slow. I want to see what contracts are causing the slowdown (I know the slowdown is because of an `(Instance Snip%)` type)</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:36:17.000367</ts>
    <user>Nelson</user>
    <text>:disappointed: I don't know where to start looking for thread problems</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:42:11.000001</ts>
    <user>Nelson</user>
    <text>okay threads is probably the issue with profiling. Running `raco profile ....` prints a summary just after the GUI renders. So it's not profiling anything about clicks &amp;amp; drags</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T17:42:52.000365</ts>
    <user>Latarsha</user>
    <text>I think the profiling library has something for threads</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T18:15:31.000107</ts>
    <user>Nelson</user>
    <text>after looking at the docs I tried `(profile-thunk (lambda () (send f show #t)) #:threads #true)`, but this doesn't seem to profile the GUI thread either</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T19:18:13.000352</ts>
    <user>Jalisa</user>
    <text>Came across this after you mentioned Rob Pike &lt;http://users.ece.utexas.edu/~adnan/pike.html&gt;</text>
  </message>
  <message conversation_id="481">
    <ts>2017-11-21T19:37:45.000129</ts>
    <user>Ida</user>
    <text>A data structure is an algorithm problem well defined ; }</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T22:52:52.000059</ts>
    <user>Jalisa</user>
    <text>Are there plans to make DrRacket more aesthetically pleasing? I'm sure it's not a priority, but I think it will help Racket's cause. The logo could probably use an update as well.</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:14:28.000073</ts>
    <user>Jalisa</user>
    <text>On a side note, I suppose the default Emacs theme is completely outdated. Perhaps this isn't important much at all.</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:15:50.000202</ts>
    <user>Chantelle</user>
    <text>&lt;@Jalisa&gt; there is a way to change drracket's color scheme with custom plugins</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:16:12.000101</ts>
    <user>Chantelle</user>
    <text>but yes I find drracket a little clunky at times</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:16:23.000010</ts>
    <user>Chantelle</user>
    <text>I don't think there's any specific plans to work on that though</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:16:27.000092</ts>
    <user>Chantelle</user>
    <text>too much other stuff to do</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:16:39.000016</ts>
    <user>Jalisa</user>
    <text>Yeah, I didn't realize until today (for some reason) that DrRacket was a complete IDE.</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:17:07.000053</ts>
    <user>Chantelle</user>
    <text>it does a _lot_</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:17:16.000043</ts>
    <user>Chantelle</user>
    <text>99% of which I have no idea how to use</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:17:33.000044</ts>
    <user>Chantelle</user>
    <text>so, guess that means it really is an IDE</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:22:31.000198</ts>
    <user>Jalisa</user>
    <text>Is it recommended after HtDP, moving to &lt;http://www.plai.org|www.plai.org&gt;?</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:22:56.000110</ts>
    <user>Chantelle</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:23:13.000123</ts>
    <user>Chantelle</user>
    <text>I don't think there's any formal recommendations for next books beyond what's in htdp itself</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:30:40.000095</ts>
    <user>Jalisa</user>
    <text>I came across PLAI before, but came across it again through Andrew Brinker in his course: &lt;http://www.proglangs.com|www.proglangs.com&gt;. Seems to cover a lof of stuff.</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-21T23:31:43.000050</ts>
    <user>Jalisa</user>
    <text>I not sure how many updates it's received since 2007-2012 but apparently it's still being used.</text>
  </message>
  <message conversation_id="485">
    <ts>2017-11-22T06:37:16.000236</ts>
    <user>Lashaunda</user>
    <text>Regarding PLAI, there was a time when Shriram’s CS 173 course at Brown, which used PLAI, was online, and I took the online public version the one time he made that an option.  The material was interesting but one thing I remember vividly was how engaged and excited the Brown students were—they were bright and lively to a degree that exceeded what I’d seen at Harvard, where by comparison it seemed professors had to encourage students more to participate.  Maybe that is Shriram’s style, to make a class exciting, to make it impossible for students to *not* engage, but the Brown students certainly responded with great enthusiasm.  As for the PLAI material itself, I guess the takeaway for me was that it got you to think out of the box, to go in language directions uncharted and new, to see Racket as the toolkit that could help you design and implement whatever crazy idea might be in your head.  I guess from a practical (“industry”) point of view, if you were designing a DSL, PLAI would help you see how to do that.</text>
  </message>
  <message conversation_id="485">
    <ts>2017-11-22T07:03:21.000196</ts>
    <user>Lashaunda</user>
    <text>Regarding DrRacket as an IDEA, it’s improved a lot in recent years, to the point where I do most of my Racket coding in DrRacket now, and less in Emacs.  Emacs is still my go-to tool to do _anything_ that other tools can’t do, but where my Emacs:DrRacket ratio for Racket coding used to be 50:50, it is now 90:10 or maybe even 95:5.  The arrows in DrRacket are pretty cool, but sometimes there are so many of them and I find myself wondering which ones lead where.  The ability to jump to a definition or go to any number of the bindings, and to do rename-all, is very helpful.  It’s not as powerful as I find in IntelliJ with Scala in terms of refactoring power, but it’s getting there.  There are ways to put in debugging/evaluation breakpoints in DrRacket, but that’s where I find things clunky compared with IntelliJ, where I feel I have very fine control when bugs need to be found and fixed; in the DrRacket world, I find myself resorting to printf-style debugging more often.  Things like the macro-expander in DrRacket are pretty bloody amazing and mind-blowing.  One thing I found myself wishing for yesterday when I was coding in DrRacket:  I was deep in some code, and what I wanted was to click on a function or structure name and be able to launch a little “sticky” (as in the old Mac stickies) window that just had the definition of that function or structure so I could keep it on my screen without having to leave where I was.  I asked myself what it would take to implement such a feature.  IntelliJ has an auto-complete that is great for typed languages, it shows you the options along with the full type signature.  I know auto-complete is controversial in the Racket community but I’ll just say that IntelliJ’s auto-complete speeds my work, at work, appreciably, and that makes the bosses happy, developer “velocity” being the buzzword of the year.  What do I miss about Emacs when I use DrRacket?  I do use Emacs key-bindings (not everyone does), so I miss the kill-ring and the ability to assign points to registers sometimes.  The DrRacket version of Emacs’ set-mark is strange in that if you’re not careful, after you copy a region from here to there, the region is still active, so if you do more typing without doing something to unhighlight the region first, you can accidentally blow it away (and then you get it back with Undo or a second paste).  One little DrRacket feature I love is the ability to highlight s-expressions with an easy key chord and move them from where they are to where I’ve just decided they need to be instead.  Every time I do that, which is literally dozens of times a day, in refactoring usually, I wish the parenthesis-hating people were nearby so I could ask them, “So how do _you_ do such easy grouping and rearranging without parentheses?”</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T11:54:22.000264</ts>
    <user>Latarsha</user>
    <text>&lt;@Jalisa&gt; if there are particular things you'd like changed in DrRacket, then that would certainly be a reasonable thing to discuss</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T11:54:49.000397</ts>
    <user>Latarsha</user>
    <text>Also, the logo is quite recent -- I don't think we're likely to change it again soon</text>
  </message>
  <message conversation_id="486">
    <ts>2017-11-22T12:03:25.000375</ts>
    <user>Nelson</user>
    <text>I have a "reference to a module that is not available". The way to fix that is adding more requires (somewhere), right?</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T12:05:01.000173</ts>
    <user>Latarsha</user>
    <text>&lt;@Nelson&gt; yes</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T12:05:30.000097</ts>
    <user>Latarsha</user>
    <text>basically you generated an identifier that the residual program does not require</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T12:05:43.000023</ts>
    <user>Latarsha</user>
    <text>usually because there's a dynamic-require of the module doing the actual generating</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T12:06:02.000189</ts>
    <user>Jalisa</user>
    <text>&lt;@Latarsha&gt; I could probably give better feedback after using it more. But I will say, after going through Racket’s documentation, I don’t think there’s a better language to learn programming in. My goal is to learn Rust, and then move into a bit of Haskell. I don’t feel like with Racket that I’m completely perplexed. With Haskell, I could stare for hours trying to figure out why something works and doesn’t. 

The logo is decent, and as mentioned, maybe it’s not a priority. It’s hard to complain with such good documentation and practicality is better. I see Racket also has a section for systems programming, which is great. My brain is slowly digesting certain concepts, and I think going from super-hard to slightly easier and less verbose, is something that makes me appreciate languages like Racket.</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T12:07:25.000292</ts>
    <user>Latarsha</user>
    <text>&lt;@Jalisa&gt; I think most of us quite like the current logo</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T12:09:53.000297</ts>
    <user>Jalisa</user>
    <text>No, don’t get me wrong—it’s great.</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T12:14:55.000515</ts>
    <user>Jalisa</user>
    <text>When everyone was talking about logos a few weeks ago, I proposed something for Hackett, but I know Alexis has other priorities than logo design, like, _language design_. I can see now why she wouldn’t want to focus on that just yet. As a front end person, I think we focus too much on aesthetics and not as much usability. But if you want to see what I had someone come up with, here’s the logo. I think it’s decent but maybe someone can provide better feedback. There were 3 other variations but I chose this one out of uniqueness. We’d sort of just played around with this.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T14:24:45.000105</ts>
    <user>Arnetta</user>
    <text>is there a DrRacket keyboard shortcut to go to the end of a line, even when the line is word-wrapped at the edge of the window? The End key seems to only go to edge of window.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T14:25:28.000212</ts>
    <user>Arnetta</user>
    <text>^pardon if that's answered somewhere easily; I looked in the editor itself and didn't see anything</text>
  </message>
  <message conversation_id="488">
    <ts>2017-11-22T18:06:50.000153</ts>
    <user>Ida</user>
    <text>I'm curious myself how Racket people do the nitty gritty of editing</text>
  </message>
  <message conversation_id="484">
    <ts>2017-11-22T18:34:11.000145</ts>
    <user>Jalisa</user>
    <text>I'd wondered about that myself, but it looks as though there's some documentation on it: &lt;https://docs.racket-lang.org/drracket/&gt;</text>
  </message>
  <message conversation_id="488">
    <ts>2017-11-22T18:36:55.000011</ts>
    <user>Jacob</user>
    <text>We just grow extra fingers over time.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T18:48:14.000138</ts>
    <user>Corey</user>
    <text>&lt;@Arnetta&gt; C-e (CTRL + e) works for me? (If it doesn't for you: I have Emacs keybindings on for DrRacket, plus I just tried that on macOS where C-e tends to do that generally.)</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T18:55:11.000146</ts>
    <user>Jalisa</user>
    <text>Also, I think column width is a matter of preference in Racket. I know some languages provide a recommended length in their style guide. It doesn't look like Racket adheres to one. Personally, I like somewhere between 70-80 characters, but I'm seeing recent commits in the Racket repo nearly 120. I think a lot of it depends on your screen resolution, and preference really.

In DrRacket where to set a preferred width:

&lt;https://i.imgur.com/kgFyQ7J.jpg&gt;

More info in the documentation:

&lt;https://docs.racket-lang.org/style/Textual_Matters.html#%28part._.Line_.Width%29&gt;

_That's cool; I didn't know you could use Emacs keybindings!_</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T18:56:47.000086</ts>
    <user>Corey</user>
    <text>&lt;@Jalisa&gt; Yes I agree that "consider not having the line run off the right edge of the window" is the ideal answer when possible. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T18:58:17.000177</ts>
    <user>Jalisa</user>
    <text>I only know that because Haskell has some very strange rules for things, and I think Rust has a preferred column length.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T19:00:36.000337</ts>
    <user>Corey</user>
    <text>I've seen some quite old Racket source code where things nest very deeply (and off the right). But in fairness I think that's at least partly because old Racket (back when it was called PLT Scheme) lacked certain constructs, or it's a part of Racket that's more primitive than where the constructs are defined. And so there's a lot of nested `let-values` and so on.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T19:01:31.000087</ts>
    <user>Corey</user>
    <text>When I encounter that kind of code, I bow respectfully, back away slowly, and close the window.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T19:22:32.000087</ts>
    <user>Ka</user>
    <text>ok, so in scribble, `@tabular` is .... not awesome :smiley:. Is there a better approach to making nice tables that can maybe have headers and things?</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T19:28:48.000049</ts>
    <user>Ka</user>
    <text>OK, so digging in it's a little better than I thought, but still pretty rough.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T19:30:05.000058</ts>
    <user>Ka</user>
    <text>but it does support "headers" with generouse use of 'cont</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:03:22.000065</ts>
    <user>Ka</user>
    <text>ALSO: thanks to all the people who have contributed such great documentation over the years. As someone who is trying to get my team into a mode of documenting the design of new features as a prereq of actually developing said features, I've found myself slowly building out documentation to *describe* what we currently have.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:03:30.000104</ts>
    <user>Ka</user>
    <text>it's a lot of work.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:04:46.000198</ts>
    <user>Chantelle</user>
    <text>&lt;@Ka&gt; honestly I think of Scribble as rackets truly unparalleled killer feature</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:05:17.000020</ts>
    <user>Ka</user>
    <text>except for it's table support. :wink:</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:05:21.000182</ts>
    <user>Chantelle</user>
    <text>;)</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:05:47.000046</ts>
    <user>Chantelle</user>
    <text>I think some well-chosen additions to the pict library might help with that</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:06:57.000037</ts>
    <user>Ka</user>
    <text>I think the problem here is actually the fact that scribble supports so many output formats</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:07:03.000075</ts>
    <user>Ka</user>
    <text>(well, in theory)</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:07:25.000189</ts>
    <user>Ka</user>
    <text>you need to define a minimum set of useful features that can easily be rendered everywhere.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:07:38.000077</ts>
    <user>Ka</user>
    <text>so you can't just rely on what HTML provides.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:08:15.000048</ts>
    <user>Ka</user>
    <text>I wouldn't want pict here, though if I could easily draw UML ER diagrams, then I wouldn't need tables in the first place.</text>
  </message>
  <message conversation_id="487">
    <ts>2017-11-22T20:10:07.000007</ts>
    <user>Ka</user>
    <text>I could *probably* make something not horrible in graphviz for this... so maybe that's a non-horrible option.I've already got other diagrams via graphviz in this set of docs.</text>
  </message>
  <message conversation_id="489">
    <ts>2017-11-23T15:30:09.000099</ts>
    <user>Latarsha</user>
    <text>Happy Thanksgiving, Racketeers!</text>
  </message>
  <message conversation_id="489">
    <ts>2017-11-23T15:30:16.000097</ts>
    <user>Lashaunda</user>
    <text>You too!</text>
  </message>
  <message conversation_id="489">
    <ts>2017-11-23T15:30:56.000024</ts>
    <user>Lashaunda</user>
    <text>I’m actually hacking in Racket (while the turkey is in the oven), so you know I’m having a good Thanksgiving.</text>
  </message>
  <message conversation_id="490">
    <ts>2017-11-25T01:45:24.000018</ts>
    <user>Ida</user>
    <text>I'm curious about the typical Racket idiom or pattern to "react" to a port</text>
  </message>
  <message conversation_id="490">
    <ts>2017-11-25T03:40:47.000033</ts>
    <user>Chantelle</user>
    <text>&lt;@Ida&gt; synchronizable events and using things like `read-bytes-evt` with `wrap-evt` / `handle-evt`, probably</text>
  </message>
  <message conversation_id="490">
    <ts>2017-11-25T13:18:06.000015</ts>
    <user>Ida</user>
    <text>ah I see thanks</text>
  </message>
  <message conversation_id="491">
    <ts>2017-11-25T15:02:13.000018</ts>
    <user>Arnetta</user>
    <text>is it possible to write a macro that converts something like (func10) to (func 10)?</text>
  </message>
  <message conversation_id="490">
    <ts>2017-11-25T15:04:40.000024</ts>
    <user>Arnetta</user>
    <text>and wrt window size and column length, if I'm editing on a monitor that's smaller (so less screen space overall) and have open a webpage/etc, too, then often the DrRacket window will be thinner. I concur at &amp;lt;80char in general.</text>
  </message>
  <message conversation_id="490">
    <ts>2017-11-25T19:23:38.000007</ts>
    <user>Ida</user>
    <text>&lt;@Arnetta&gt; I know that DrRacket at least can adjust column guides</text>
  </message>
  <message conversation_id="491">
    <ts>2017-11-26T09:30:45.000042</ts>
    <user>Arnetta</user>
    <text>thx</text>
  </message>
  <message conversation_id="491">
    <ts>2017-11-26T09:32:16.000044</ts>
    <user>Arnetta</user>
    <text>with regard to the macro, what I actually want right now is something like (function arg1) to expand to something like (function (arg 1))</text>
  </message>
  <message conversation_id="491">
    <ts>2017-11-26T09:35:31.000074</ts>
    <user>Arnetta</user>
    <text>I was thinking maybe it would be possible if there was a list of understood "arg"s and the inputs to the function are converted to strings, check if the first part of the string matches an understood arg, then send the value of the rest of the string to the function?</text>
  </message>
  <message conversation_id="491">
    <ts>2017-11-26T09:35:49.000091</ts>
    <user>Arnetta</user>
    <text>does that sound like a workable path?</text>
  </message>
  <message conversation_id="491">
    <ts>2017-11-26T12:05:38.000051</ts>
    <user>Jacob</user>
    <text>&lt;@Arnetta&gt; I think it could be a potentially workable idea if you restrict the set of possible functions you might be interested in. Otherwise I think it'd be likely you'd have too many valid matches if the namespace of possible functions is unlimited.</text>
  </message>
  <message conversation_id="492">
    <ts>2017-11-26T16:55:21.000077</ts>
    <user>Dora</user>
    <text>Quick question for the channel. If I want to find something like the source for the "for" construct (I assume it's a macro somewhere?), where should I look?</text>
  </message>
  <message conversation_id="492">
    <ts>2017-11-26T17:08:10.000103</ts>
    <user>Kimbery</user>
    <text>&lt;@Dora&gt; I’ll give you two answers. The first is the direct answer to your question: `for`’s source code comes from the module `racket/private/for`, which is in the racket/racket GitHub repo in `racket/collects/racket/private/for.rkt`. The second is perhaps a slightly more useful answer: if you want to find the source code for various forms and functions, you can use DrRacket to right-click on an identifier and click “Open Defining File”, or you can use racket-mode in emacs and use `racket-visit-definition`.</text>
  </message>
  <message conversation_id="492">
    <ts>2017-11-26T18:20:39.000032</ts>
    <user>Dora</user>
    <text>Got it. Thanks &lt;@Kimbery&gt;.</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:02:08.000096</ts>
    <user>Ida</user>
    <text>How does one convert #\5 to 5?</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:02:14.000149</ts>
    <user>Ida</user>
    <text>I know of `display`, but doesn't that have side effects?</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:07:17.000117</ts>
    <user>Marlin</user>
    <text>`display` doesn't convert; it just displays. There isn't a built-in `char-&amp;gt;number` (as far as I know), but you could either create a string containing only that one character and use `string-&amp;gt;number`, or you could write your own `char-&amp;gt;number`.</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:09:14.000001</ts>
    <user>Marlin</user>
    <text>not sure what you mean</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:13:52.000048</ts>
    <user>Corey</user>
    <text>`(- (char-&amp;gt;integer #\5) 48)` ?</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:14:07.000026</ts>
    <user>Ida</user>
    <text>ah is that the unicode conversion</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:14:09.000088</ts>
    <user>Ida</user>
    <text>I didn't know that</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:14:41.000015</ts>
    <user>Ida</user>
    <text>My motivation for all this was to try and figure out how to do a number in some base into a sequence hehe</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:15:04.000014</ts>
    <user>Ida</user>
    <text>I know there's an algorithm for doing floor division and modulo, but I want something that works for negative numbers too</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:15:51.000008</ts>
    <user>Marlin</user>
    <text>simplest thing would be to re-use `string-&amp;gt;number`, e.g., `(string-&amp;gt;number (string #\5))`</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:16:18.000070</ts>
    <user>Ida</user>
    <text>Ohh I see</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:16:20.000031</ts>
    <user>Marlin</user>
    <text>`(string-&amp;gt;number (string #\- #\5))`</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:16:34.000091</ts>
    <user>Ida</user>
    <text>Earlier I thought you meant something else</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:16:44.000050</ts>
    <user>Ida</user>
    <text>Now I see both approaches work</text>
  </message>
  <message conversation_id="493">
    <ts>2017-11-26T19:17:29.000041</ts>
    <user>Ida</user>
    <text>ahh I see thanks</text>
  </message>
  <message conversation_id="494">
    <ts>2017-11-27T18:04:58.000226</ts>
    <user>Latarsha</user>
    <text>egads, someone doing metaprogramming nicer than racket! &lt;https://docs.rs/structopt-derive/0.1.5/structopt_derive/&gt;</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:00:42.000262</ts>
    <user>Ka</user>
    <text>is that _nicer_ ?</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:01:41.000254</ts>
    <user>Latarsha</user>
    <text>&lt;@Ka&gt; the syntax is pretty ugly, but it's getting a lot more than what we do for cmd line options</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:01:56.000005</ts>
    <user>Latarsha</user>
    <text>in particular, auto-parsing from the struct definition</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:02:35.000040</ts>
    <user>Ka</user>
    <text>just requires rolling up the sleeves and doing the work though. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:02:35.000064</ts>
    <user>Kimbery</user>
    <text>I’ve wanted that for a while, fwiw. Haskell has optparse-generic, which does a similar thing.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:03:01.000311</ts>
    <user>Kimbery</user>
    <text>But this is all way nicer with ~~typeclasses~~ because you can use the type information to know how to parse each field. :)</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:03:15.000018</ts>
    <user>Kimbery</user>
    <text>(And Rust has traits, which I imagine can do the same thing here.)</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:05:09.000323</ts>
    <user>Latarsha</user>
    <text>yeah</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:05:24.000076</ts>
    <user>Latarsha</user>
    <text>plus annotations on struct fields</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:05:58.000049</ts>
    <user>Ka</user>
    <text>annotations on struct fields would be great</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T19:44:59.000058</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; oh I've been meaning to ask you: what approaches to hackett's type-value namespaces _didn't_ work?</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:00:16.000024</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; I tried a few slightly different things before I got something work, but most of the dramatically different things that wouldn’t have worked I dismissed without trying</text>
  </message>
  <message conversation_id="496">
    <ts>2017-11-27T20:01:43.000201</ts>
    <user>Kimbery</user>
    <text>I think the most significant difference between my first attempt and the current implementation is that I originally tried having different type/value scopes _per module instantiation_, but that ended up being needlessly complicated.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:02:44.000046</ts>
    <user>Kimbery</user>
    <text>the only remotely plausible alternative approach I thought about was to use phases instead of scopes, but that didn’t really hold up to scrutiny.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:10:39.000030</ts>
    <user>Chantelle</user>
    <text>I'm wondering if using the same approach within a module but doing one of the following instead of name mangling might work:

- Providing from one of either a `value-namespace` or a `type-namespace` submodule, with hackett's `require` looking for those submodules and adding type/value scopes to imports based on which submodule they came from (maybe the parent providing module should provide the scope introducer functions it used as well? not sure)
- Providing syntax bound to a struct containing a field for a value identifier and a field for a type identifier, each having their type/value scope already added, with hackett's `require` recognizing these bindings and unpacking them.

But I don't know how much work either of those would take to make them cooperate with scribble.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:11:57.000100</ts>
    <user>Kimbery</user>
    <text>The problem with both of those approaches is that it makes it very difficult to make them transparently work with `require` and `provide`.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:12:30.000036</ts>
    <user>Kimbery</user>
    <text>Specifically, you want to be able to do things like `(require (rename-in [Tuple tuple]))` and have it only rename the value-level `Tuple`.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:13:04.000335</ts>
    <user>Chantelle</user>
    <text>that's already rather painful no? You have to rename-in the `#%hackett-type:id` form</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:13:06.000186</ts>
    <user>Kimbery</user>
    <text>So packing things together doesn’t really work. And you can’t easily lift the appropriate values into submodules when to do `provide`.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:13:48.000012</ts>
    <user>Kimbery</user>
    <text>It might work if you did the packing with an entirely custom `provide` form?</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:14:30.000078</ts>
    <user>Chantelle</user>
    <text>what other kinds of requires get painful besides `rename-in`?</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:14:36.000080</ts>
    <user>Kimbery</user>
    <text>The trouble is that `require` can only be customized so much… you can’t make a `require` introduce a new syntax binding.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:14:50.000016</ts>
    <user>Chantelle</user>
    <text>oh dang you can't?</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:15:28.000212</ts>
    <user>Kimbery</user>
    <text>No, provide transformers can lift, but they can’t expand to a definition.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:16:13.000070</ts>
    <user>Chantelle</user>
    <text>hm wait</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:16:45.000094</ts>
    <user>Kimbery</user>
    <text>I think I tried hacking something with `syntax-local-lift-module`, but IIRC the lifted module isn’t available when the `require` is expanded, so you can’t `require` it in the expansion.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:17:40.000161</ts>
    <user>Chantelle</user>
    <text>confused about which of these is possible:

- provide transformer introduces new normal binding and exports it
- provide transformer introduces new syntax binding and exports it
- require transformer binds and declares import of new normal binding
- require transformer binds and declares import of new syntax binding

and which `lift` functions are used for this? just `syntax-local-lift-*` stuff or things that are specific to require/provide?</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:19:43.000075</ts>
    <user>Kimbery</user>
    <text>Yeah, it’s `syntax-local-lift-*`. And note that provide pre-transformers can lift, but provide transformers can’t… and only provide transformers have access to the set of bindings imported/exported when doing something like `(provide (all-from-out foo/bar/baz))`.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:20:36.000181</ts>
    <user>Chantelle</user>
    <text>also: do these require/provide limitations have good reasons for existing, or could some patches to the require/provide system implement them without much issue?</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:21:18.000215</ts>
    <user>Kimbery</user>
    <text>I looked at the source code for Racket’s `require` and `provide`, and I examined `#%require` and `#%provide` a little.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:21:41.000038</ts>
    <user>Kimbery</user>
    <text>Here’s what I learned: require transformers and provide pre-transformers are implemented in Racket. Provide transformers are implemented in C.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:23:02.000194</ts>
    <user>Kimbery</user>
    <text>I think provide transformers are pretty restricted because they have access to the bindings exported by `all-from-out` and things like that, but in order to know that, the module needs to know which bindings are shadowed by the module body. So provide transformers are essentially the very last step of macro transformation in a module’s expansion.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:23:31.000183</ts>
    <user>Kimbery</user>
    <text>This is a bit tricky, since it means provide transformers can’t do any lifting, but it means provide pre-transformers can’t know the precise set of bindings being exported.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:31:13.000112</ts>
    <user>Kimbery</user>
    <text>Require transformers can do pretty much anything by comparison, but “anything” is restricted by the fact that it can only expand to `#%require` clauses and lift things. That restriction could probably be lifted, providing some API to make a require transformer expand to a fresh definition? But you’d have to be careful, since an imported definition could be hidden with `only-in` or something similar.</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:33:09.000210</ts>
    <user>Chantelle</user>
    <text>commuting; will read in more detail later. Off the cuff thought: wondering if the racket implementation of the macro system will make changes here possible / easier</text>
  </message>
  <message conversation_id="495">
    <ts>2017-11-27T20:34:11.000136</ts>
    <user>Kimbery</user>
    <text>The `provide` restrictions are semi-fundamental AFAICT, and `require` transformers are already implemented entirely in Racket, so my gut says “no”, but it’s possible I am being insufficiently creative.</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:06:44.000189</ts>
    <user>Ida</user>
    <text>I would be curious one day to see an indentation-based Lisp</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:06:54.000085</ts>
    <user>Ida</user>
    <text>A Lisp with minimal parens!</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:08:03.000213</ts>
    <user>Ida</user>
    <text>I notice that Lisp users kind of already have an indentation-based organization</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:09:44.000165</ts>
    <user>Analisa</user>
    <text>&lt;https://srfi.schemers.org/srfi-49/srfi-49.html&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:09:52.000131</ts>
    <user>Analisa</user>
    <text>It looks like that was a scheme proposal</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:10:23.000107</ts>
    <user>Analisa</user>
    <text>Also this
&lt;https://srfi.schemers.org/srfi-110/srfi-110.html&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:10:50.000171</ts>
    <user>Analisa</user>
    <text>where have I seen infix curly brace notation :thinking_face:</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:14:21.000211</ts>
    <user>Ida</user>
    <text>Hmm most results look more readable in srfi 110</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:14:24.000082</ts>
    <user>Ida</user>
    <text>Some are mixed results</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:18:02.000262</ts>
    <user>Analisa</user>
    <text>My biggest issue is when switching back to a lisp after writing in languages with more typical syntax</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T02:18:46.000259</ts>
    <user>Analisa</user>
    <text>Like earlier today, when I mixed up `(&amp;lt;= 1)` and `(lambda [x] (&amp;lt;= x 1))`, because Hackett's partial applications look like Haskell's operator sections</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T17:44:41.000252</ts>
    <user>Ida</user>
    <text>Is the vector basically what I'm thinking of reaching for when I'm looking for a multidimensional array?</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T17:52:29.000262</ts>
    <user>Ida</user>
    <text>It seems to have awkward access syntax</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T17:53:53.000313</ts>
    <user>Latarsha</user>
    <text>&lt;@Ida&gt; vectors are one dimensional arrays</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T17:54:05.000269</ts>
    <user>Latarsha</user>
    <text>the `math/array` library has multi-dimensional arrays</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T17:57:04.000432</ts>
    <user>Ida</user>
    <text>Oh I see, I'm surprised it would be tucked there and not somewhere more general</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T19:35:43.000147</ts>
    <user>Nelson</user>
    <text>&lt;https://docs.racket-lang.org/sweet/index.html&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2017-11-28T20:12:29.000093</ts>
    <user>Ida</user>
    <text>Is the best way to do an immediately-invoked procedure just to wrap a lambda with more parens?</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:21:22.000273</ts>
    <user>Kimbery</user>
    <text>Why would you want an immediately-invoked procedure?</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:24:34.000242</ts>
    <user>Ida</user>
    <text>I wanted to use a lambda right away for its results</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:29:00.000114</ts>
    <user>Ida</user>
    <text>I suppose that's a code smell and I should just define the function somewhere else?</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:29:31.000227</ts>
    <user>Kimbery</user>
    <text>I just don’t understand why you would wrap your code in a lambda if you wanted to evaluate it immediately.</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:29:53.000053</ts>
    <user>Kimbery</user>
    <text>That is, if you had `((lambda () (+ 1 2)))`, why wouldn’t you just write `(+ 1 2)`, instead?</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:30:47.000052</ts>
    <user>Ida</user>
    <text>What if you wanted a lambda that takes an input?</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:31:08.000171</ts>
    <user>Kimbery</user>
    <text>Then you should probably use `let` or an internal `define`.</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:31:45.000161</ts>
    <user>Kimbery</user>
    <text>That is, instead of `((lambda (x) (+ x 2)) 3)`, write `(let ([x 3]) (+ x 2))`.</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:31:55.000265</ts>
    <user>Ida</user>
    <text>ah that is clearer</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:32:05.000215</ts>
    <user>Ida</user>
    <text>that almost makes let look like lambda too</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:32:25.000195</ts>
    <user>Kimbery</user>
    <text>Indeed, you can implement `let` as a macro in terms of `lambda`.</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:32:49.000006</ts>
    <user>Kimbery</user>
    <text>Many blocks also accept internal definitions, so you could write
```
(let ()
  (define x 3)
  (+ x 2))
```
instead.</text>
  </message>
  <message conversation_id="498">
    <ts>2017-11-28T20:34:49.000220</ts>
    <user>Ida</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-28T23:00:41.000234</ts>
    <user>Delmy</user>
    <text>Is there a way to get non-buffered keyboard input from a console window in racket? I basically want behavior identical to `get-key-press` from `graphics/graphics` (&lt;https://docs.racket-lang.org/graphics/Keyboard_Operations.html#%28def._%28%28lib._graphics%2Fgraphics..rkt%29._get-key-press%29%29&gt;), but without the viewport. I.e., the console window should block and wait for the next keypress it detects.</text>
  </message>
  <message conversation_id="500">
    <ts>2017-11-28T23:20:11.000089</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; I think this PR got missed in the 6.11 release: &lt;https://github.com/racket/main-distribution/pull/1&gt;</text>
  </message>
  <message conversation_id="500">
    <ts>2017-11-28T23:21:44.000023</ts>
    <user>Chantelle</user>
    <text>nothing's broken, but I think the `rackunit-typed` package now isn't locked to release catalogs. Or maybe it is? I'm not sure how the `main-distribution` package interacts with transitive dependencies</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T00:06:50.000023</ts>
    <user>Jalisa</user>
    <text>This browser is neat &lt;https://github.com/nEXT-Browser/nEXT&gt;</text>
  </message>
  <message conversation_id="500">
    <ts>2017-11-29T11:56:58.000084</ts>
    <user>Eun</user>
    <text>&lt;@Chantelle&gt;: If rackunit-typed is transitively depended on by something in the main-distribution, then its repo will be in the release catalog.</text>
  </message>
  <message conversation_id="500">
    <ts>2017-11-29T12:00:17.000055</ts>
    <user>Latarsha</user>
    <text>I merged the PR anyway</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:11:37.000439</ts>
    <user>Georgeanna</user>
    <text>&lt;@Jalisa&gt; I’ve been seeing that on /r/lisp… seems very early… do you actually use it?</text>
  </message>
  <message conversation_id="501">
    <ts>2017-11-29T16:13:26.000357</ts>
    <user>Ida</user>
    <text>once it develops enough features, it will become an editor</text>
  </message>
  <message conversation_id="501">
    <ts>2017-11-29T16:13:29.000407</ts>
    <user>Ida</user>
    <text>^_~</text>
  </message>
  <message conversation_id="501">
    <ts>2017-11-29T16:13:53.000091</ts>
    <user>Georgeanna</user>
    <text>but of course</text>
  </message>
  <message conversation_id="501">
    <ts>2017-11-29T16:15:56.000703</ts>
    <user>Ida</user>
    <text>this is probably silly, but what do you people think about curried named arguments?</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:33:31.000174</ts>
    <user>Jalisa</user>
    <text>&lt;@Georgeanna&gt; I’ve not had a chance to try it yet. And yes, I think the project is fairly new. But I thought it was interesting because I don’t think there’s many browsers that work in the way programmers do.</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:47:26.000777</ts>
    <user>Corey</user>
    <text>&lt;https://pkgs.racket-lang.org/package/echonest&gt;
This package of mine has failing tests -- but IIUC they fail because the EchoNest API no longer exists due to Spotify gobbling them up and shutting it down some years ago.
Should I just delete the package?
On the one hand that seems harsh. But on the other hand I'm pretty sure anything depending on it has been broken a long time anyway and I can't fix it.
Suggestions?  (Racket package system is new enough I don't think there's much precedent for this?)</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:48:02.000280</ts>
    <user>Latarsha</user>
    <text>I think deleting it seems unnecssary -- the code might be interesting to someone</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:48:33.000441</ts>
    <user>Corey</user>
    <text>I could push a commit that disables the tests and updates the README</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:48:55.000483</ts>
    <user>Corey</user>
    <text>Also on GitHub I could use their newfangled "archive" thing to signal it's end-of-life</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:49:25.000603</ts>
    <user>Latarsha</user>
    <text>that's what I think makes sense</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:50:15.000125</ts>
    <user>Jacob</user>
    <text>nEXT looks quite interesting, I'm unclear on whether it's capable of executing Javascript? I noticed that there's no mention of any security features which makes me rather concerned. Web browsing is one of the most hazardous computer activity one can do today. The manual is lacking in additional details unfortunately but still it looks really cool.</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:50:15.000278</ts>
    <user>Corey</user>
    <text>OK thanks for the advice!</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:51:17.000247</ts>
    <user>Georgeanna</user>
    <text>archive? huh</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:52:23.000015</ts>
    <user>Corey</user>
    <text>&lt;@Georgeanna&gt; &lt;https://github.com/blog/2460-archiving-repositories&gt;</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:53:27.000607</ts>
    <user>Georgeanna</user>
    <text>cool. thanks. That’ll probably help me. I have a ton of repos</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T16:55:23.000953</ts>
    <user>Georgeanna</user>
    <text>they’ve been rolling out a number of new features. I got tagged on one of the security alerts (for something that should be archived)</text>
  </message>
  <message conversation_id="499">
    <ts>2017-11-29T17:15:02.000452</ts>
    <user>Georgeanna</user>
    <text>aaaand now I wish there was a tool to archive all my projects based on last commit date or somesuch.</text>
  </message>
  <message conversation_id="502">
    <ts>2017-11-29T18:15:43.000395</ts>
    <user>Ida</user>
    <text>i'm surprised that searching for keyworded currying turns up so little</text>
  </message>
  <message conversation_id="502">
    <ts>2017-11-29T18:16:25.000182</ts>
    <user>Ida</user>
    <text>i guess people prefer index locations to names</text>
  </message>
  <message conversation_id="502">
    <ts>2017-11-29T18:16:46.000167</ts>
    <user>Ida</user>
    <text>but it also allows easier insertion of arguments in an order-free manner</text>
  </message>
  <message conversation_id="502">
    <ts>2017-11-29T18:27:47.000349</ts>
    <user>Chantelle</user>
    <text>&lt;@Ida&gt; curried named arguments sound a bit odd, but not totally unreasonable - I encourage you to make an `#%app` macro exploring the possibility :)</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:25:34.000312</ts>
    <user>Latarsha</user>
    <text>I think curry already does that, actually</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:27:13.000206</ts>
    <user>Kimbery</user>
    <text>It doesn’t
```
Welcome to Racket v6.11.0.2.
&amp;gt; (define (f #:x x #:y y) (cons x y))
&amp;gt; ((curry f) #:x 3)
; application: procedure does not accept keyword arguments
;   procedure: curried
; [,bt for context]
```
but it could.</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:29:30.000282</ts>
    <user>Kimbery</user>
    <text>Interestingly, you _are_ allowed to provide keyword arguments to `curry` if you do it as part of the initial application. However, it’s pretty broken, and it does weird things.</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:29:41.000288</ts>
    <user>Delmy</user>
    <text>&lt;@Kimbery&gt; I think this does what you want regarding keyword args &lt;https://docs.racket-lang.org/kw-utils/Partial_application_with_keywords.html&gt;</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:29:55.000005</ts>
    <user>Kimbery</user>
    <text>Like this, for example:
```
&amp;gt; (define (g #:x x #:y y z) (list x y z))
&amp;gt; (curry g #:x 3 #:y 5)
#&amp;lt;procedure:curried&amp;gt;
&amp;gt; ((curry g #:x 3 #:y 5) 7)
#&amp;lt;procedure:curried&amp;gt;
```</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:31:54.000152</ts>
    <user>Kimbery</user>
    <text>&lt;@Delmy&gt; As the docs mention, that has much more of a partial application feel than a currying feel. To be consistent with `curry`, it would need to support something like this:
```
&amp;gt; ((((curry (lambda (#:x x #:y y #:z z) (list x y z))) #:y 2) #:x 1) #:z 3)
'(1 2 3)
```</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:35:50.000095</ts>
    <user>Kimbery</user>
    <text>(Of course, “currying” means a very specific thing, and `curry` is really closer to auto-`partial`. But whatever.)</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:35:51.000221</ts>
    <user>Delmy</user>
    <text>Heh, I wasn't aware of the difference until you pointed it out. It's strange that a util exits for one, but not both.</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:39:48.000060</ts>
    <user>Kimbery</user>
    <text>I think `curry` is essentially broken in the presence of keyword arguments. The fact that `((curry (lambda (x #:k k) (cons x k)) #:k 2) 1)` doesn’t apply the function means it doesn’t really work.</text>
  </message>
  <message conversation_id="503">
    <ts>2017-11-29T19:40:13.000152</ts>
    <user>Kimbery</user>
    <text>That’s a bug, though, going by the documentation… it should probably be fixed.</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:11:12.000259</ts>
    <user>Ida</user>
    <text>I dooo wish I could write my own, but I'm going to get better at the basics first</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:14:32.000022</ts>
    <user>Ida</user>
    <text>I find that I'm often using directional, sequential methods even on non-sequential data</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:14:54.000007</ts>
    <user>Ida</user>
    <text>It's very tempting to shove everything into lists</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:18:22.000130</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; what's the best way to debug a macro that was broken by the set-of-scopes expander?</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:30:24.000010</ts>
    <user>Ida</user>
    <text>How does one see the code behind a standard Racket function?</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:31:26.000237</ts>
    <user>Latarsha</user>
    <text>&lt;@Ida&gt; it depends if they're implemented in the runtime or in a library, but for most, right click in drracket and go to the definition</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:32:13.000268</ts>
    <user>Ida</user>
    <text>You mean where it brings you to the Docs?</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:32:27.000302</ts>
    <user>Latarsha</user>
    <text>no</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:32:59.000064</ts>
    <user>Ida</user>
    <text>Oh thanks I found it</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:44:26.000148</ts>
    <user>Jalisa</user>
    <text>Anyone using macOS High Sierra might want to update ASAP. There's a security concern that allows login using the username `root` with no password. This happens to occur remotely as well.</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:45:21.000117</ts>
    <user>Jalisa</user>
    <text>Thought it was maybe a hoax until I saw this:

&lt;https://i.imgur.com/4sJsDiV.png&gt;</text>
  </message>
  <message conversation_id="504">
    <ts>2017-11-29T20:53:49.000218</ts>
    <user>Ida</user>
    <text>It's amusing because the general sysadmin advice is not to set a root pw</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T22:18:15.000223</ts>
    <user>Ida</user>
    <text>What small mini app do Racketers make as a stepping stone of progress?</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T22:21:37.000221</ts>
    <user>Latarsha</user>
    <text>a programming language :wink:</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T22:23:51.000229</ts>
    <user>Ida</user>
    <text>ahhhhh</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T22:36:05.000182</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; &lt;@Ida&gt; if pressing f1 opens the docs for a definition, maybe f2 should open the source</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T22:36:11.000011</ts>
    <user>Chantelle</user>
    <text>seems like a useful and easily taught shortcut</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T23:34:01.000166</ts>
    <user>Jalisa</user>
    <text>&lt;@Ida&gt; have you seen &lt;https://beautifulracket.com/&gt;</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T23:35:51.000144</ts>
    <user>Ida</user>
    <text>Yes it's a beautiful website</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T23:35:56.000030</ts>
    <user>Ida</user>
    <text>I find it a little... episodic?</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T23:36:00.000011</ts>
    <user>Ida</user>
    <text>It jumps around and has funny gaps</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T23:41:16.000031</ts>
    <user>Jalisa</user>
    <text>I think this one comes out in a day &lt;http://serverracket.com/&gt;</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T23:43:42.000035</ts>
    <user>Ida</user>
    <text>oh quite exciting</text>
  </message>
  <message conversation_id="505">
    <ts>2017-11-29T23:43:46.000095</ts>
    <user>Ida</user>
    <text>you are on top of every bit of news</text>
  </message>
  <message conversation_id="506">
    <ts>2017-11-30T09:38:46.000132</ts>
    <user>Vincenzo</user>
    <text>I don't think I have any special strategies, although I typically use `syntax-debug-info` to check scopes and get a sense of what's going on</text>
  </message>
  <message conversation_id="507">
    <ts>2017-11-30T11:33:07.000399</ts>
    <user>Tammera</user>
    <text>Hi everyone, I just saw a tweet about the PhD application deadline at NEU PRL in about 2 weeks.</text>
  </message>
  <message conversation_id="507">
    <ts>2017-11-30T11:34:46.000326</ts>
    <user>Tammera</user>
    <text>I want to apply and was hoping to get some insight into the college before committing.</text>
  </message>
  <message conversation_id="507">
    <ts>2017-11-30T11:39:29.000572</ts>
    <user>Tammera</user>
    <text>My background is very technical -- math and CS -- but my interests and strengths seem to fall at the intersection of technical and non-technical.</text>
  </message>
  <message conversation_id="507">
    <ts>2017-11-30T11:43:52.000023</ts>
    <user>Tammera</user>
    <text>My Masters project applied results from sociology and political science to designing, building, and operating scalable ad hoc decentralized systems.</text>
  </message>
  <message conversation_id="507">
    <ts>2017-11-30T11:47:04.000392</ts>
    <user>Tammera</user>
    <text>My advisor was supportive, but could not get involved. He did not share my research interests and had PhD students to manage.</text>
  </message>
  <message conversation_id="507">
    <ts>2017-11-30T11:47:27.000383</ts>
    <user>Tammera</user>
    <text>Would I run into similar obstacles at NEU, particularly in the PRL?</text>
  </message>
  <message conversation_id="507">
    <ts>2017-11-30T12:06:33.000334</ts>
    <user>Latarsha</user>
    <text>&lt;@Tammera&gt; I would encourage you to contact people specifically that you might be interested in working with there</text>
  </message>
  <message conversation_id="507">
    <ts>2017-11-30T12:16:34.000788</ts>
    <user>Tammera</user>
    <text>&lt;@Latarsha&gt; ok, thanks.</text>
  </message>
  <message conversation_id="508">
    <ts>2017-11-30T18:04:57.000023</ts>
    <user>Ida</user>
    <text>Does anyone here use / prefer typed Racket?</text>
  </message>
  <message conversation_id="508">
    <ts>2017-11-30T18:07:57.000523</ts>
    <user>Nelson</user>
    <text>use</text>
  </message>
  <message conversation_id="508">
    <ts>2017-11-30T18:51:42.000038</ts>
    <user>Ida</user>
    <text>ah I just read it seems not to perform well with the rest of the ecosystem</text>
  </message>
  <message conversation_id="508">
    <ts>2017-11-30T18:51:43.000380</ts>
    <user>Ida</user>
    <text>that is unfortunate</text>
  </message>
  <message conversation_id="508">
    <ts>2017-11-30T19:06:36.000551</ts>
    <user>Georgeanna</user>
    <text>&lt;@Ida&gt; dunno if the videos for oopsla/splash are up yet, but &lt;@Latarsha&gt; gave a good talk on that</text>
  </message>
  <message conversation_id="508">
    <ts>2017-11-30T19:06:45.000133</ts>
    <user>Georgeanna</user>
    <text>(and a couple other related talks)</text>
  </message>
  <message conversation_id="508">
    <ts>2017-11-30T19:09:14.000482</ts>
    <user>Latarsha</user>
    <text>It does, in many cases, perform just fine</text>
  </message>
  <message conversation_id="508">
    <ts>2017-11-30T19:10:08.000048</ts>
    <user>Latarsha</user>
    <text>Some times you'll have to move an extra module to typed racket</text>
  </message>
  <message conversation_id="508">
    <ts>2017-11-30T19:10:37.000288</ts>
    <user>Latarsha</user>
    <text>And that talk is already up on YouTube</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T19:56:46.000144</ts>
    <user>Jalisa</user>
    <text>Heard about this from a podcast (Magic Read Along) today. It's a web-based IDE inspired by, and geared towards Haskell, Lisp/Racket, Scala, etc.

&lt;https://isomorf.io/#!/syntax-picker/tours-overview&gt;</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:04:52.000006</ts>
    <user>Ida</user>
    <text>I heard about an interesting kind of compose that takes a kind of function like map or filter, and doesn't produce the intermediate data structures</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:06:18.000186</ts>
    <user>Ida</user>
    <text>I wonder if Racket does those kinds of optimizations under the hood</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:07:08.000001</ts>
    <user>Latarsha</user>
    <text>&lt;@Ida&gt; that's usually called "deforestation" or "stream fusion"</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:07:16.000045</ts>
    <user>Latarsha</user>
    <text>and Racket doesn't do that automatically</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:07:22.000135</ts>
    <user>Ida</user>
    <text>ah I see, so it's beneficial to write one</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:07:37.000011</ts>
    <user>Latarsha</user>
    <text>(it's quite hard unless your language is like Haskell -- lazy and pure)</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:07:40.000005</ts>
    <user>Ida</user>
    <text>I'm surprised to see that talk of this idea is like over 10 years old</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:08:07.000180</ts>
    <user>Latarsha</user>
    <text>yeah, it's quite old in functional languages, probably older when considering arrays</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:09:00.000048</ts>
    <user>Latarsha</user>
    <text>the first paper on deforestation was written 30 years ago</text>
  </message>
  <message conversation_id="509">
    <ts>2017-11-30T22:10:46.000056</ts>
    <user>Latarsha</user>
    <text>other papers on related topics are older</text>
  </message>
  <message conversation_id="510">
    <ts>2017-12-01T01:47:31.000108</ts>
    <user>Alla</user>
    <text>Hello all :wave::skin-tone-5: Where is the best place to find help for slideshow?</text>
  </message>
  <message conversation_id="510">
    <ts>2017-12-01T01:52:17.000006</ts>
    <user>Nelson</user>
    <text>right here</text>
  </message>
  <message conversation_id="510">
    <ts>2017-12-01T02:12:39.000167</ts>
    <user>Alla</user>
    <text>Good :blush:. Let's start with the easy one. How do I move the presentation to the second screen? I used it yesterday for a dry run , and couldn't make it move to the proyector screen, so ended mirroring the display (which meant couldn't have the comments and the next slide views available)</text>
  </message>
  <message conversation_id="510">
    <ts>2017-12-01T05:12:36.000209</ts>
    <user>Alla</user>
    <text> Aaaah, found the -M switch. Found even the -h switch that now seems stupid I didn't think about it yesterday. Probably that should be in the tutorial.</text>
  </message>
  <message conversation_id="511">
    <ts>2017-12-01T14:34:58.000206</ts>
    <user>Ka</user>
    <text>that reminds me, &lt;@Nelson&gt; any update on my PR (&lt;https://github.com/racket/slideshow/pull/11&gt;)</text>
  </message>
  <message conversation_id="511">
    <ts>2017-12-01T14:38:26.000768</ts>
    <user>Nelson</user>
    <text>It still looks good to me, lets merge it</text>
  </message>
  <message conversation_id="511">
    <ts>2017-12-01T14:38:51.000542</ts>
    <user>Nelson</user>
    <text>do you want to squash any of the commits?</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T15:19:24.000513</ts>
    <user>Rosalee</user>
    <text>Is there any good way to learn about the mechanics of `for-label` or the label phase in general? Namely, I’m wondering what scribble actually gets out of using the macro expander to build hyperlinks.</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T15:19:40.000004</ts>
    <user>Rosalee</user>
    <text>(As opposed to just using the bindings at, say, phase 0.)</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T15:35:15.000182</ts>
    <user>Ida</user>
    <text>Does anyone jot down their thoughts in a Jupyter-like notebook solution?</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T15:42:57.000181</ts>
    <user>Chantelle</user>
    <text>&lt;@Rosalee&gt; I think scribble's use of the label phase was because submodules didn't exist yet, and if they did scribble would have used them instead</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T16:01:46.000385</ts>
    <user>Rosalee</user>
    <text>&lt;@Chantelle&gt; That was &lt;@Noe&gt; and I first thought. But there seems to be some major differences here.</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T16:02:01.000443</ts>
    <user>Rosalee</user>
    <text>Like, 1. phases allow for an interleaved execution that submodules just don’t.</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T16:02:52.000280</ts>
    <user>Rosalee</user>
    <text>And 2. It seems like the label phase is the only way in Racket to declare a module (and possibly visit it) while getting the bindings statically without instantiating it.</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T16:59:50.000381</ts>
    <user>Rosalee</user>
    <text>Also, this combination of features confuses me: &lt;https://gist.github.com/LeifAndersen/0fe797a827db037a39a5574d1e90ada9&gt;</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T17:00:16.000478</ts>
    <user>Rosalee</user>
    <text>Like, why on earth does begin-for-syntax blocks get top-level like semantics. :disappointed:</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T17:00:19.000117</ts>
    <user>Rosalee</user>
    <text>(Thanks to &lt;@Noe&gt; for finding it.)</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T17:28:05.000338</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; While a `begin-for-syntax` form is being expanded at phase N, there will be no expansion of forms at level N-1, so there's no need to run code at phase N; it can be compiled as a group. As soon as you go back to expanding at level N-1 after a `begin-for-syntax`, expansion may involve macros that run at phase N, so the `begin-for-syntax`ed code needs to have been run. That explains why the use of `g` in the last example can't be a macro use. At the time time, you'd really like for mutually recursive `define-for-syntax`ed functions to work, and that's why the second example compiles: the expanded/run `begin-for-syntax` assumes that not-yet-bound identifiers refer to values.</text>
  </message>
  <message conversation_id="513">
    <ts>2017-12-01T17:30:59.000241</ts>
    <user>Vincenzo</user>
    <text>It's true that `for-label` imports binding without setting up an invocation/visit dependency. I don't know whether submodules could achieve the same goal, but I think probably an extra ingredient of some sort is needed – and `for-label` (which I think of as phase +∞) might be as simple as any other extra ingredient.</text>
  </message>
  <message conversation_id="512">
    <ts>2017-12-01T18:07:32.000033</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; That makes sense, thanks.</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-01T21:51:39.000012</ts>
    <user>Nelson</user>
    <text>ping &lt;@Ka&gt; do you mind if I squash &amp;amp; merge, or do you want to keep the commits separate?</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-01T21:57:00.000035</ts>
    <user>Ka</user>
    <text>Whatever you typically do is totally fine by me.</text>
  </message>
  <message conversation_id="515">
    <ts>2017-12-02T11:37:54.000067</ts>
    <user>Ida</user>
    <text>Why are non-strict arrays more difficult to reason about in terms of performance?</text>
  </message>
  <message conversation_id="515">
    <ts>2017-12-02T11:40:58.000038</ts>
    <user>Nelson</user>
    <text>because it's hard to predict what an array operation will do</text>
  </message>
  <message conversation_id="515">
    <ts>2017-12-02T11:41:27.000098</ts>
    <user>Nelson</user>
    <text>you get the same result, but maybe do more work / more memory accesses to get it</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-02T12:06:41.000118</ts>
    <user>Ida</user>
    <text>When might one reach for vectors/gvectors over arrays?</text>
  </message>
  <message conversation_id="516">
    <ts>2017-12-02T16:04:49.000024</ts>
    <user>Nelson</user>
    <text>Does anyone here know Chinese? &lt;https://github.com/OnRoadZy/RackGuideInChinese&gt;</text>
  </message>
  <message conversation_id="516">
    <ts>2017-12-02T16:09:07.000124</ts>
    <user>Nelson</user>
    <text>I like vectors for 1-2 dimensional data</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-02T16:57:12.000012</ts>
    <user>Ida</user>
    <text>Whoa very cool</text>
  </message>
  <message conversation_id="517">
    <ts>2017-12-02T18:12:26.000025</ts>
    <user>Corey</user>
    <text>What does this macOS test failure mean? &lt;https://travis-ci.org/racket/racket/jobs/310616809#L1881-L1883&gt;</text>
  </message>
  <message conversation_id="517">
    <ts>2017-12-02T18:40:43.000034</ts>
    <user>Vincenzo</user>
    <text>&lt;@Corey&gt; It looks like (1) Travis-CI has upgraded to Sierra, and (2) Apple fixed a bug in `setenv` (that Racket was working around) as of Sierra.</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-03T12:52:30.000026</ts>
    <user>Jalisa</user>
    <text>High Sierra has been very buggy.</text>
  </message>
  <message conversation_id="518">
    <ts>2017-12-03T12:53:01.000074</ts>
    <user>Jalisa</user>
    <text>I won't immediately update next time.</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-03T12:57:09.000054</ts>
    <user>Ida</user>
    <text>You're on a macbook?</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-03T12:59:25.000058</ts>
    <user>Jalisa</user>
    <text>I have a MacBook and a Linux desktop.</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-03T12:59:53.000016</ts>
    <user>Jalisa</user>
    <text>There are times when I'd rather have a ThinkPad.</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-03T16:32:35.000087</ts>
    <user>Tracy</user>
    <text>&lt;@Jalisa&gt; I had a Thinkpad 10 years ago, running Gentoo Linux. I loved it, but I spent an inordinate amount of time maintaining the OS. Probably more than working. My ex-wife used to call it “the other woman”. I wonder how convenient it is these days to set up the kernel to use up to date mobile hardware, and how tempted I would be to dive into the bleeding edge OS bandwagon.</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-03T16:34:15.000059</ts>
    <user>Tracy</user>
    <text>So far MacOS has been my antidote for OS optimisation procrastination </text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-03T16:34:46.000042</ts>
    <user>Jalisa</user>
    <text>Most are using Ubuntu. It works out of the box.</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-04T04:23:20.000291</ts>
    <user>Alla</user>
    <text>Currently using a Dell xps 13" with Manjaro and Gnome. Other than a few apps that don't handle high dpi (like Gitter), I have had no issues. Nothing to setup in terms of drivers and such. It just works. </text>
  </message>
  <message conversation_id="519">
    <ts>2017-12-04T04:23:39.000063</ts>
    <user>Ida</user>
    <text>ah, you're using the 4k Dell?</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-04T04:23:46.000273</ts>
    <user>Ida</user>
    <text>I've been eyeying that one</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-04T04:26:38.000398</ts>
    <user>Alla</user>
    <text>Yep. Battery is not as good as my MacBook Air. But other than that is a superb machine. And thanks to the touchscreen I run most of the time with the touchpad off (like being in heaven). A couple of gnome extensions (no hot corner and the one that disables the on screen keyboard) are needed, but that is gnome being annoying</text>
  </message>
  <message conversation_id="514">
    <ts>2017-12-04T11:06:04.000515</ts>
    <user>Jalisa</user>
    <text>I've thought about the XPS, too.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:51:14.000025</ts>
    <user>Rochelle</user>
    <text>Hello, is this channel the appropriate place to ask for help?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:51:59.000082</ts>
    <user>Genevie</user>
    <text>&lt;@Rochelle&gt; Yes.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:52:28.000283</ts>
    <user>Rochelle</user>
    <text>So, I downloaded the minimal racket package and tried to install "main-distribution" packages</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:52:33.000222</ts>
    <user>Rochelle</user>
    <text>installation works fine</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:52:47.000712</ts>
    <user>Rochelle</user>
    <text>but the files are copied to some weird folder under AppData\Roaming</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:52:59.000008</ts>
    <user>Rochelle</user>
    <text>can I just keep everything in one place?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:53:35.000287</ts>
    <user>Rochelle</user>
    <text>is there some command line switch or environment variable</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:55:42.000245</ts>
    <user>Jacob</user>
    <text>&lt;@Rochelle&gt; what happened is you installed the packages in user scope which will install to a default location on a per user basis. AppData\Roaming is the normal place to store per user data under Windows</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:55:59.000639</ts>
    <user>Rochelle</user>
    <text>yes, I realized that</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:56:17.000575</ts>
    <user>Jacob</user>
    <text>if you want `main-distribution` to be saved in the same place as the main Racket installation, you need to use installation scope</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:56:53.000410</ts>
    <user>Jacob</user>
    <text>`raco pkg install --scope installation &amp;lt;your package&amp;gt;`</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:57:13.000436</ts>
    <user>Rochelle</user>
    <text>nice!</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:57:20.000234</ts>
    <user>Rochelle</user>
    <text>will try that right now</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:57:25.000525</ts>
    <user>Jacob</user>
    <text>I imagine it's probably possible to configure a different installation directory</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:57:30.000667</ts>
    <user>Jacob</user>
    <text>&lt;https://docs.racket-lang.org/pkg/cmdline.html&gt; has more info</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:58:23.000427</ts>
    <user>Rochelle</user>
    <text>this might be the solution: --scope-dir ‹dir› — Select ‹dir› as the package scope.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T13:59:04.000190</ts>
    <user>Jacob</user>
    <text>yes that sounds right, you can supply a directory path which will cause packages to be saved to that path</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T14:00:32.000110</ts>
    <user>Jacob</user>
    <text>you likely will need to configure Racket to find your directory though</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T14:11:39.000176</ts>
    <user>Rochelle</user>
    <text>how should I setup racket?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-05T14:36:04.000144</ts>
    <user>Jacob</user>
    <text>try &lt;https://docs.racket-lang.org/raco/config-file.html&gt; see if it has the info you need</text>
  </message>
  <message conversation_id="521">
    <ts>2017-12-05T21:28:03.000124</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; I think your recent macOS change broke the db tests on Travis: &lt;https://travis-ci.org/racket/racket/jobs/310672787#L2102&gt;</text>
  </message>
  <message conversation_id="521">
    <ts>2017-12-05T22:00:50.000240</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; I think it may have broken with the same Travis Mac OS upgrade, but it failed before the envvar change: &lt;https://travis-ci.org/racket/racket/jobs/310616809#L2219&gt;</text>
  </message>
  <message conversation_id="521">
    <ts>2017-12-05T22:04:46.000117</ts>
    <user>Latarsha</user>
    <text>This may have more details: &lt;https://blog.travis-ci.com/2017-10-16-a-new-default-os-x-image-is-coming&gt; -- looks like the primary change was to xcode</text>
  </message>
  <message conversation_id="522">
    <ts>2017-12-06T01:41:08.000102</ts>
    <user>Arnetta</user>
    <text>is it possible to write a macro that converts:
'(a b c)
to a string of "a b c"
but
(list a b c)
to a list?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T09:43:15.000169</ts>
    <user>Jacob</user>
    <text>I'm far from a macro expert (yet) but I don't see why it'd be difficult to write a macro to do what you want. In spite of superficial similarities, '(a b c) and (list a b c) are two different things and have different shapes. '(a b c) is really (quote (a b c)). At the minimum it should be a quite simple matter of having your macro match on the two different shapes and process '(a b c) into "a b c" using standard string functions and return (list a b c) as a list.</text>
  </message>
  <message conversation_id="521">
    <ts>2017-12-06T10:09:58.000090</ts>
    <user>Natosha</user>
    <text>&lt;@Latarsha&gt; &lt;@Vincenzo&gt; that test is meant to check that (for "well-behaved" connection types), long-running queries don't block the execution of other racket threads. I don't know a good way to test that directly, so it's written using heuristics that Seemed To Work At The Time.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T12:30:24.000122</ts>
    <user>Tammera</user>
    <text>&lt;@Arnetta&gt; &lt;@Jacob&gt; With the default reader, `'(a b c)` equals `(quote (a b c))` equals `(list 'a 'b 'c)`. I'm not sure you can tell the difference in a regular macro.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T12:36:55.000005</ts>
    <user>Tammera</user>
    <text>Hey, it works.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T12:37:41.000023</ts>
    <user>Kimbery</user>
    <text>&lt;@Tammera&gt; that isn’t true. `'(a b c)` does read as `(quote (a b c))`, but expansion stops at `quote`.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T12:39:46.000445</ts>
    <user>Tammera</user>
    <text>&lt;@Kimbery&gt; so in  `(quote (a b c))`, the `(a b c)` part is an unexpanded list?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T12:44:00.000333</ts>
    <user>Kimbery</user>
    <text>&lt;@Tammera&gt; I don’t know what you mean by “unexpanded list”. consider reading this &lt;https://stackoverflow.com/a/34984553/465378&gt;</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T12:45:35.000329</ts>
    <user>Tammera</user>
    <text>&lt;@Kimbery&gt; just trying to figure out what we're calling things. Still not sure how my original statement isn't true.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T12:54:45.000189</ts>
    <user>Kimbery</user>
    <text>well, macros operate on syntax. so while `'(a b c)` does indeed become `(quote (a b c))` at the _reader_ level, it’s quite distinct from `(list (quote a) (quote b) (quote c))` at the _syntax_ level, which is the level macros operate at.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T12:59:43.000054</ts>
    <user>Kimbery</user>
    <text>you could write:
```
#lang racket
(require (for-syntax racket) syntax/parse/define)
(define-syntax-parser mac
  #:literals [quote]
  [(_ '(id:id ...)) #`(quote #,(datum-&amp;gt;syntax #f (string-append* (map (compose1 symbol-&amp;gt;string syntax-e) (attribute id)))))]
  [(_ other:expr) #'other])
```</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T13:01:41.000120</ts>
    <user>Tammera</user>
    <text>ohh.. ok, I was confused about the ordering.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T13:03:02.000156</ts>
    <user>Tammera</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T13:05:01.000209</ts>
    <user>Kimbery</user>
    <text>mhmm. the order of evaluation is read -&amp;gt; macroexpand -&amp;gt; compile -&amp;gt; runtime eval. `'(a b c)` and `(list 'a 'b 'c)` do indeed evaluate to the same thing at runtime, but they are distinct expressions, so prior phases can distinguish them.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T13:08:19.000355</ts>
    <user>Tammera</user>
    <text>I tried this: ```
racket@foo.rkt&amp;gt; 
(define-syntax f
  (syntax-rules (list quote)
    [(f '(a b c)) "tick"]
    [(f (quote (a b c))) "quote"]
    [(f (list a b c)) "list"]))

racket@foo.rkt&amp;gt; (f '(a b c))
"tick"
racket@foo.rkt&amp;gt; (f (quote (a b c)))
"tick"
racket@foo.rkt&amp;gt; (f (list 'a 'b 'c))
"list"```</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T13:09:56.000366</ts>
    <user>Tammera</user>
    <text>and this: ```
racket@foo.rkt&amp;gt; (and (equal? '(a b c) (list 'a 'b 'c))
                     (equal? '(a b c) (quote (a b c))))
#t```</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T13:10:49.000357</ts>
    <user>Kimbery</user>
    <text>yes, `equal?` compares the expressions after evaluation (since it is just a regular function).</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T13:12:11.000348</ts>
    <user>Kimbery</user>
    <text>the `'x` -&amp;gt; `(quote x)` translation happens in the reader, which is before macroexpansion, so those two are indistinguishable to macros.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T13:12:23.000618</ts>
    <user>Tammera</user>
    <text>just about to ask that</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-06T13:14:17.000583</ts>
    <user>Kimbery</user>
    <text>there are infinitely many distinct expressions that produce `'(a b c)` when evaluated, so macros can’t detect (without evaluation) “an expression that evaluates to `'(a b c)`”, since that would solve the halting problem. they can only make decisions based on the syntactic structure of their subforms.</text>
  </message>
  <message conversation_id="523">
    <ts>2017-12-06T13:51:43.000502</ts>
    <user>Arnetta</user>
    <text>&amp;lt;3Lisp</text>
  </message>
  <message conversation_id="523">
    <ts>2017-12-07T00:23:48.000148</ts>
    <user>Arnetta</user>
    <text>is it possible to write a macro so that
([function name] a b c)
becomes
(function-name a b c)
?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T00:36:38.000107</ts>
    <user>Kimbery</user>
    <text>yes
```
#lang racket
(require (for-syntax racket syntax/parse/class/paren-shape) syntax/parse/define (prefix-in r: racket))
(define-syntax-parser #%app
  [[~brackets _ i:id ...+] (datum-&amp;gt;syntax (first (attribute i)) (string-&amp;gt;symbol (string-join (map (compose1 symbol-&amp;gt;string syntax-e) (attribute i)) "-")))]
  [(_ other ...) #'(r:#%app other ...)])
```
but I wouldn’t recommend it.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:20:24.000086</ts>
    <user>Shad</user>
    <text>Because paren-shape is a syntax property that can be lost? I'm still not clear on that bit. &lt;@Kimbery&gt; </text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:21:49.000466</ts>
    <user>Kimbery</user>
    <text>more that (a) `#%app` should really only be modified by the provider of a `#lang` or module language, since different implementations of `#%app` do not compose and some languages may use `#%app` to enforce invariants, and (b) that macro seems a little weird and confusing.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:24:02.000063</ts>
    <user>Chantelle</user>
    <text>I'd like it if `#%app` macros composed better</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:25:15.000483</ts>
    <user>Kimbery</user>
    <text>I don’t think they can compose in general, but you might be able to come up with a more restricted protocol that makes arbitrary composition more feasible</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:25:34.000216</ts>
    <user>Chantelle</user>
    <text>I'm comfortable with that</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:31:48.000377</ts>
    <user>Chantelle</user>
    <text>Hmmm. Should this work? Does it now?

```racket
(function-call-expression-with-special-app)
(require-special-app)
```

How's it work with local require?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:34:47.000140</ts>
    <user>Kimbery</user>
    <text>it doesn’t work any more than
```
(my-macro)
(require something-that-provides-my-macro)
```
does. the fun part is that it will actually get partially expanded to `(#%app my-macro)`, so it doesn’t produce an unbound identifier error… it produces `bad syntax`.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:35:49.000149</ts>
    <user>Chantelle</user>
    <text>ah right that makes sense - custom app could introduce requires so partial expansion can't delay it</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:36:09.000168</ts>
    <user>Chantelle</user>
    <text>actually</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:36:16.000414</ts>
    <user>Chantelle</user>
    <text>would `#%expression` change that?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:36:51.000699</ts>
    <user>Chantelle</user>
    <text>the interactions between partial expansion, internal definitions, requires, and provides at the module body context are unclear to me</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:39:03.000366</ts>
    <user>Kimbery</user>
    <text>yes, if you wrapped it in something that deferred expansion of the form, it would produce something different! which is fun.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:39:38.000083</ts>
    <user>Chantelle</user>
    <text>how do those rules differ between module body contexts and internal definition contexts?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:40:46.000377</ts>
    <user>Kimbery</user>
    <text>```
#lang racket

(module quote-app racket
  (require syntax/parse/define)
  (provide #%app)
  (define-simple-macro (#%app form ...)
    (quote (form ...))))

(+ 1 2)
(#%expression (+ 1 2))
(require 'quote-app)
(+ 1 2)
```
produces
```
3
'(+ 1 2)
'(+ 1 2)
```</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:41:20.000472</ts>
    <user>Chantelle</user>
    <text>and `local-require` in a `(let () body ...)` does the same thing?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:41:36.000434</ts>
    <user>Chantelle</user>
    <text>(... _can_ you local require syntax?)</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:41:47.000109</ts>
    <user>Chantelle</user>
    <text>(looks like it)</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:41:49.000020</ts>
    <user>Kimbery</user>
    <text>re: the differences between module contexts and intdef contexts, they’re mostly similar… but `require` isn’t allowed in an intdef context. I imagine `local-require` would do the same thing, though.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:42:11.000527</ts>
    <user>Kimbery</user>
    <text>you can `local-require` syntax, just not `lazy-require`/`dynamic-require` syntax (for probably obvious reasons)</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:42:22.000178</ts>
    <user>Chantelle</user>
    <text>what happens if you `local-require` a require transformer? same rules as module context?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:42:33.000103</ts>
    <user>Chantelle</user>
    <text>right that makes sense</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:43:25.000172</ts>
    <user>Kimbery</user>
    <text>yes, require transformers are essentially just ordinary expanders that `require` looks up with `syntax-local-value`.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:43:37.000068</ts>
    <user>Kimbery</user>
    <text>require transformers aren’t special in any way. only provide transformers are.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:44:44.000005</ts>
    <user>Chantelle</user>
    <text>right and `local-provide` is nonsensical so there's no worries there</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:48:16.000366</ts>
    <user>Chantelle</user>
    <text>would it make sense to have some way of delaying `provide` expansion in the same way that `#%expression` delays things, so that provide transformers didn't need their importing require to be in a particular place?</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:48:27.000113</ts>
    <user>Chantelle</user>
    <text>my guess is "probably not because complicated reasons"</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:51:20.000335</ts>
    <user>Kimbery</user>
    <text>that’s exactly what provide transformers already do. it’s provide pre-transformers that don’t.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:51:39.000015</ts>
    <user>Kimbery</user>
    <text>provides and provide transformers are expanded as the very last step of module expansion.</text>
  </message>
  <message conversation_id="520">
    <ts>2017-12-07T14:59:42.000415</ts>
    <user>Chantelle</user>
    <text>and it's the pre-transformers that can't for complicated reasons</text>
  </message>
  <message conversation_id="524">
    <ts>2017-12-07T15:24:58.000388</ts>
    <user>Latarsha</user>
    <text>&lt;@Magnolia&gt; Can you make the PPA work for some older Ubuntu versions?</text>
  </message>
  <message conversation_id="524">
    <ts>2017-12-07T15:26:22.000188</ts>
    <user>Magnolia</user>
    <text>@samth if the older versions are supported on launchpad yeah. I think it should be possible on trusty &amp;amp; precise. Dunno why it didn’t build those actually.</text>
  </message>
  <message conversation_id="525">
    <ts>2017-12-07T19:49:14.000172</ts>
    <user>Ida</user>
    <text>Is there a default suite of tools for Racket performance testing?</text>
  </message>
  <message conversation_id="525">
    <ts>2017-12-07T20:08:16.000173</ts>
    <user>Chantelle</user>
    <text>&lt;@Ida&gt; not yet, but there are loose sketches and notions to work on top of if you're interested in working on that</text>
  </message>
  <message conversation_id="525">
    <ts>2017-12-07T20:21:45.000026</ts>
    <user>Georgeanna</user>
    <text>&lt;@Ida&gt; what type do you need?</text>
  </message>
  <message conversation_id="525">
    <ts>2017-12-07T21:22:13.000156</ts>
    <user>Ida</user>
    <text>Something for easy benchmarking?</text>
  </message>
  <message conversation_id="525">
    <ts>2017-12-07T22:32:44.000134</ts>
    <user>Latarsha</user>
    <text>&lt;@Ida&gt; you might like &lt;https://github.com/stamourv/racket-benchmark&gt;</text>
  </message>
  <message conversation_id="526">
    <ts>2017-12-08T11:00:14.000675</ts>
    <user>Corey</user>
    <text>Sanity check: For multi-collection packages I've been putting the `LICENSE` file down in the collection directory, not in the git project top dir. Rationale? That way it gets installed. Am I doing it wrong? &lt;https://github.com/greghendershott/frog/issues/205&gt;</text>
  </message>
  <message conversation_id="526">
    <ts>2017-12-08T11:01:03.000532</ts>
    <user>Latarsha</user>
    <text>There's reasons both ways, I'd say</text>
  </message>
  <message conversation_id="527">
    <ts>2017-12-08T12:36:52.000478</ts>
    <user>Corey</user>
    <text>I guess it's moot when not a multi-collection package.
IIRC all of mine are multi-collect only because that was the only option originally (or I followed that template for newer ones).
Any packages that don't attempt to support &amp;lt; Racket 6.0, I guess I could change to single-collect. If/when I have time.</text>
  </message>
  <message conversation_id="527">
    <ts>2017-12-10T12:26:14.000075</ts>
    <user>Tana</user>
    <text>Currently working with the SQL package &lt;http://docs.racket-lang.org/sql/index.html?q=sql&gt; and wondering if there is a way to add `IF NOT EXISTS` to the `create-table` expression &lt;http://docs.racket-lang.org/sql/index.html?q=sql#%28form._%28%28lib._sql%2Fmain..rkt%29._create-table%29%29&gt;</text>
  </message>
  <message conversation_id="527">
    <ts>2017-12-10T12:26:54.000056</ts>
    <user>Tana</user>
    <text>Ideally would like to create SQL such as `CREATE TABLE IF NOT EXISTS links (....)`</text>
  </message>
  <message conversation_id="527">
    <ts>2017-12-10T12:27:16.000013</ts>
    <user>Tana</user>
    <text>otherwise need to fall back to string SQL statements</text>
  </message>
  <message conversation_id="527">
    <ts>2017-12-10T12:28:05.000044</ts>
    <user>Tana</user>
    <text>same with `insert`, would like to add `INSERT OR IGNORE INTO links (...)`</text>
  </message>
  <message conversation_id="527">
    <ts>2017-12-10T12:35:31.000115</ts>
    <user>Tana</user>
    <text>ah found the repo, will ask there</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T06:55:28.000224</ts>
    <user>Chantelle</user>
    <text>dear synchronizable event experts, are these functions bad ideas:

```
(define (unbreakable-evt evt)
  (guard-evt (λ () (parameterize-break #f (sync evt)))))

(define (breakable-evt evt)
  (guard-evt (λ () (parameterize-break #t (sync evt)))))
```</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:02:51.000379</ts>
    <user>Natosha</user>
    <text>&lt;@Chantelle&gt; yes, bad idea</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:03:31.000386</ts>
    <user>Natosha</user>
    <text>```(sync (unbreakable-evt evt1) evt2)
-&amp;gt; (sync (parameterize-break #f (sync evt1)) evt2)
!= (parameterize-break #f (sync evt1 evt2))```</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:05:16.000402</ts>
    <user>Chantelle</user>
    <text>&lt;@Natosha&gt; for context I'm trying to use events to represent a sequence of two actions, where the first requires breaks be disabled and the second requires waiting an arbitrary amount of time</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:06:44.000154</ts>
    <user>Chantelle</user>
    <text>also: is that example equivalent to saying `(choice-evt (unbreakable-evt e1) e2) != (unbreakable-evt (choice-evt e1 e2))`? because that non-equivalence seems reasonable to me</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:14:05.000398</ts>
    <user>Natosha</user>
    <text>&lt;@Chantelle&gt; The point of events is their cooperative nature. You can `sync` on multiple events and the first one that becomes ready is chosen (modulo scheduling granularity, etc). But your `[un]breakable-evt` functions construct an event that immediately captures the scheduler's attention with the inner `sync` call, preventing any of its peers from being chosen.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:16:58.000121</ts>
    <user>Chantelle</user>
    <text>&lt;@Natosha&gt; ah so the wrappers just completely prevent the event from working together properly with `choice-evt`?</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:17:26.000322</ts>
    <user>Chantelle</user>
    <text>how would I go about making events that abstract over sequences of other events? or should I just not do that and use a regular thunk to represent that sort of thing?</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:17:28.000245</ts>
    <user>Natosha</user>
    <text>if you think of `sync` with multiple arguments as implicitly constructing a `choice-evt`, then yes</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:20:13.000255</ts>
    <user>Natosha</user>
    <text>I'm not clear on what you're trying to do, but it doesn't sound like the end result is an event.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:20:43.000052</ts>
    <user>Chantelle</user>
    <text>I'm trying to figure out what the right thing to do about this issue in my `disposable` package is: &lt;https://github.com/jackfirth/racket-disposable/issues/114&gt;</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:23:39.000280</ts>
    <user>Chantelle</user>
    <text>but in general I'm a little unclear on when events are the Right Tool for the Job (TM) as opposed to:

1. just blocking the current thread, which is cheap since they're not OS threads
2. spawning a new thread to do something
3. using engines, maybe?
4. using promises / streams / other stuff that seems to be mostly for lazy compute instead of lazy I/O</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:26:05.000228</ts>
    <user>Chantelle</user>
    <text>is it a good idea to think of events as only the right thing to use if there's some meaningful way of applying `choice-evt` to choose one event and nack others? if I want to wait on a bunch of completely independent events should I just spawn one thread per event?</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:32:33.000205</ts>
    <user>Natosha</user>
    <text>re that issue: Are you disabling breaks just to prevent interruptions between allocation and registration? If so, I think the right answer in cases like this is to disable breaks but then use `tcp-accept/enable-break` so that users can break out of waiting for the connection.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:33:31.000260</ts>
    <user>Chantelle</user>
    <text>yes that's exactly why breaks are disabled - specifically by functions like `call/disposable` and `acquire-global` that actually use them to do stuff</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:34:19.000164</ts>
    <user>Chantelle</user>
    <text>that makes sense but I can't shake the feeling I'm doing _something_ wrong with disposables and events</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:40:33.000131</ts>
    <user>Natosha</user>
    <text>Well, disabling breaks doesn't stop `kill-thread` or the thread being killed when the custodian that owns it is shut down.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:41:22.000297</ts>
    <user>Chantelle</user>
    <text>right, which I'm fine with - disposables are for network-y things where there's no hard guarantees anyway</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:45:01.000040</ts>
    <user>Chantelle</user>
    <text>I think the thing I'm stuck on is: how do I call and wait on two functions concurrently, getting both their results, while ensuring breaks are propagated to both functions? the `disposable-apply` function is the main thing that makes me suspect I should do something clever with events instead of what it does now, which is use `delay/thread` to acquire each disposable in a child thread</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:45:30.000153</ts>
    <user>Chantelle</user>
    <text>pretty sure that's broken as-is for break propagation</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:51:25.000300</ts>
    <user>Natosha</user>
    <text>The event system cannot handle things like "if *both* of these events are ready, then choose both and proceed". So don't worry if you haven't found a clean way of doing that; it's hard.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:53:01.000156</ts>
    <user>Chantelle</user>
    <text>I'm less worried about that part and more worried about avoiding accidentally serializing independent operations</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:54:31.000415</ts>
    <user>Chantelle</user>
    <text>I want disposables to make it easy to open two unrelated connections to totally different servers without starting the second connection waiting on the first connection finishing, successfully or otherwise</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:55:34.000185</ts>
    <user>Chantelle</user>
    <text>_but_ I want breaks to propogate to both "open connection" operations since either could take an arbitrary amount of time</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T07:59:41.000484</ts>
    <user>Natosha</user>
    <text>(I was going to point you at the code for `call-in-nested-thread`, but that seems to be implemented in C.)</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:00:09.000641</ts>
    <user>Chantelle</user>
    <text>I was looking at the docs for it but I'm unsure how that would work with calling _two_ nested threads</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:05:58.000245</ts>
    <user>Natosha</user>
    <text>It doesn't; I was going to suggest adapting the code to multiple threads.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:07:23.000308</ts>
    <user>Chantelle</user>
    <text>sending patches to racket's c codebase is probably not something I'm looking to do</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:07:33.000264</ts>
    <user>Chantelle</user>
    <text>both for tech and social reasons</text>
  </message>
  <message conversation_id="529">
    <ts>2017-12-11T08:16:24.000348</ts>
    <user>Natosha</user>
    <text>```;; parallel-apply : (Listof (-&amp;gt; Any)) -&amp;gt; (Listof Any)
;; Applies the given list of thunks in parallel, propagating
;; breaks to the evaluation threads.
(define (parallel-apply thunks)
  (define result-boxes (map (lambda _ (box #f)) thunks))
  (define threads null)
  (with-handlers ([exn:break?
                   (lambda (e)
                     (for-each break-thread threads)
                     (raise e))])
    (start-atomic)
    (set! threads
          (for/list ([thunk (in-list thunks)]
                     [result-box (in-list result-boxes)])
            (thread (lambda () (set-box! result-box (thunk))))))
    (end-atomic)
    (for-each thread-wait threads))
  (map unbox result-boxes))```</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:19:00.000127</ts>
    <user>Natosha</user>
    <text>You could also create a custodian for the nested threads and shut it down, but that would be escalating a break to the equivalent of `kill-thread`...</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:23:50.000246</ts>
    <user>Chantelle</user>
    <text>does that handle if one of the thunks raises an exception?</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:24:34.000548</ts>
    <user>Natosha</user>
    <text>no, but that's not hard to add</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:25:18.000155</ts>
    <user>Chantelle</user>
    <text>also: it's so odd to me that nobody in 20 years of racket history has built a function with type `Evt a -&amp;gt; Evt b -&amp;gt; Evt (a, b)`, sync choice caveats aside</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:26:30.000002</ts>
    <user>Chantelle</user>
    <text>`replace-evt` gets so close to it</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:30:40.000221</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; can't you use `handle-evt` to do that by syncing on the other one in the function?</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:31:04.000281</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; I can, but then the events get sequenced unnecessarily and I lose concurrency</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:31:28.000221</ts>
    <user>Latarsha</user>
    <text>I was thinking `(handle-evt (choice-evt a b) ...)`</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:32:46.000233</ts>
    <user>Chantelle</user>
    <text>oh that's what you mean, totally misread</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:33:17.000102</ts>
    <user>Latarsha</user>
    <text>it might be a little tricky to figure out which one was chosen</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:33:17.000321</ts>
    <user>Natosha</user>
    <text>consider `(both-evt some-channel never-evt)`</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:33:32.000005</ts>
    <user>Chantelle</user>
    <text>maybe fmap-ing each with a gensym first?</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:33:45.000016</ts>
    <user>Latarsha</user>
    <text>&lt;@Natosha&gt; that's never going to work with the signature &lt;@Chantelle&gt; wants</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:34:11.000017</ts>
    <user>Latarsha</user>
    <text>so the choice will pick the channel, and then the wrap will wait forever</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:34:39.000023</ts>
    <user>Natosha</user>
    <text>&lt;@Latarsha&gt; exactly; that's why that function doesn't exist</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:35:05.000500</ts>
    <user>Chantelle</user>
    <text>but `replace-evt` exists</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:35:25.000311</ts>
    <user>Chantelle</user>
    <text>you get the same problem with `(replace-evt some-channel (const never-evt))`</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:35:41.000402</ts>
    <user>Chantelle</user>
    <text>I think</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:35:43.000355</ts>
    <user>Latarsha</user>
    <text>no, because that's an event, not a computation</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:35:53.000162</ts>
    <user>Latarsha</user>
    <text>so you can `sync` on it _and_ something else</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:35:59.000177</ts>
    <user>Latarsha</user>
    <text>instead of just waiting forever</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:36:49.000412</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; I'm confused - which things are you referring to as an event and as a computation</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:37:29.000035</ts>
    <user>Latarsha</user>
    <text>what I suggested was more like `(replace-evt some-channel (lambda _ (sync never-evt)))` which is bad</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:38:16.000185</ts>
    <user>Chantelle</user>
    <text>ah, I see what you mean</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:38:22.000232</ts>
    <user>Chantelle</user>
    <text>so would using `replace-evt` instead of wrap/handle be a not/less bad way?</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:38:37.000094</ts>
    <user>Latarsha</user>
    <text>I think so</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:39:00.000233</ts>
    <user>Latarsha</user>
    <text>and you want to wrap the second evt to produce the pair</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:39:06.000257</ts>
    <user>Chantelle</user>
    <text>I'm okay with the same caveat that `replace-evt` has, where not choosing the returned pair event does not imply the left and right events weren't chosen</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:40:10.000360</ts>
    <user>Natosha</user>
    <text>Let me summarize: there are some *transactions* that cannot be expressed as events. In particular, you can't express things like "synchronize only if both events are ready". You can synchronize on at a time, but then you risk getting stuck halfway.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:42:14.000406</ts>
    <user>Chantelle</user>
    <text>so not all transactions can be events - but should all events be transactions? does it make sense to use events for things that aren't "transaction-y"? I'm only reaching for them because I don't know what else to use for doing two independent things at once, aside from the manual thread spawning and exception+break shuffling</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:43:26.000608</ts>
    <user>Chantelle</user>
    <text>it _seems_ like `replace-evt` implies that events have more use beyond transactions and as long as the user is aware of that, that's not necessarily a bad thing</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:45:31.000138</ts>
    <user>Natosha</user>
    <text>Most events consist of a little transaction followed by some arbitrary Racket wrapper/handler code. But the transactional part has to be one of the things the Racket schedule can handle transactionally.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:47:17.000370</ts>
    <user>Natosha</user>
    <text>I'm not really sure what `replace-evt` is useful for.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:48:18.000106</ts>
    <user>Chantelle</user>
    <text>it was added around 6.1 by &lt;@Vincenzo&gt; in this commit: &lt;https://github.com/racket/racket/commit/bc69a9b05cf7d8fb21353d9473c73d28c323e1fa&gt;</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:49:05.000275</ts>
    <user>Latarsha</user>
    <text>I think this is the thread that led to it: &lt;https://www.mail-archive.com/dev@racket-lang.org/msg11562.html&gt;</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:50:56.000276</ts>
    <user>Chantelle</user>
    <text>it's weird to have `replace-evt`, `handle-evt`, and _not_ have some sort of `both-evt` function, because `replace-evt` makes events a monad and `handle-evt` makes them a functor</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:51:11.000426</ts>
    <user>Chantelle</user>
    <text>-ish</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:52:13.000199</ts>
    <user>Chantelle</user>
    <text>a `both-evt` function would be the middle-ground that makes events an applicative functor</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:53:24.000289</ts>
    <user>Chantelle</user>
    <text>cutely, I think haskell parsing libraries wanted applicatives for the same reasons I do: they let you express that things are independent and get more free concurrency/parallelism</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:55:08.000294</ts>
    <user>Natosha</user>
    <text>To clarify: I'm not sure `replace-evt` actually/generally solves the class of problems that Jan and/or Matthew hoped it would solve.</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:56:37.000270</ts>
    <user>Chantelle</user>
    <text>does a sequence of transactions where individual transactions are handled transactionally by the scheduler but not the whole sequence make sense as an event?</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T08:56:51.000355</ts>
    <user>Chantelle</user>
    <text>that seems like the main use case of `replace-evt` to me</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T09:01:38.000140</ts>
    <user>Chantelle</user>
    <text>aha! &lt;https://www.mail-archive.com/dev@racket-lang.org/msg10945.html&gt;</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T09:12:51.000010</ts>
    <user>Chantelle</user>
    <text>disregarding multiple values, I think this works for what I want:

```
(define (pair-evt a b)
  (define left (handle-evt a (cons 'left _)))
  (define right (handle-evt b (cons 'right _)))
  (replace-evt (choice-evt left right)
    (match-lambda
      [(cons 'left v) (handle-evt b (cons v _))]
      [(cons 'right v) (handle-evt b (cons _ v))])))
```</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T09:14:25.000419</ts>
    <user>Chantelle</user>
    <text>specifically, `(sync (choice-evt (pair-evt A B) C))` may result in either `A+B`, `C`, `A+C`, or `B+C` being chosen for synchronization - but not all three and no event is chosen more than once</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T09:18:29.000312</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; make a package!</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T09:19:10.000435</ts>
    <user>Chantelle</user>
    <text>&lt;@Latarsha&gt; not until I make sure &lt;@Vincenzo&gt; can do a code review :p</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T09:19:24.000624</ts>
    <user>Latarsha</user>
    <text>make a package and then ask him :slightly_smiling_face:</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T09:23:46.000413</ts>
    <user>Chantelle</user>
    <text>eventually!</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T09:28:45.000255</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; Looks right, except that I think you meant `a` instead of `b` in the last line of `pair-evt`</text>
  </message>
  <message conversation_id="528">
    <ts>2017-12-11T09:28:59.000343</ts>
    <user>Chantelle</user>
    <text>oops</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T16:33:15.000774</ts>
    <user>Tammera</user>
    <text>Yay, events!</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T16:33:35.000458</ts>
    <user>Tammera</user>
    <text>I use this a lot: ```(define (all-evts . es)
  (if (null? es)
      (handle-evt always-evt (λ _ #t))
      (replace-evt (apply choice-evt (map (λ (e) (handle-evt e (λ _ e))) es))
                   (λ (e) (apply all-evts (remq e es))))))```</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T16:35:47.000035</ts>
    <user>Tammera</user>
    <text>and this ```(define (seq-evt* maker0 makers)
  (foldl (λ (maker evt) (replace-evt evt maker)) (maker0) makers))

(define (seq-evt maker0 . makers)
  (seq-evt* maker0 makers))```</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T16:36:22.000292</ts>
    <user>Tammera</user>
    <text>last one ```(define (loop-evt* maker0 makers)
  (define loop (λ _ (seq-evt* maker0 (append makers (list loop)))))
  (loop))

(define (loop-evt maker0 . makers)
  (loop-evt* maker0 makers))```</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T16:37:10.000120</ts>
    <user>Tammera</user>
    <text>Then I can make consistent chains of events and use `sync` as an event loop driver.</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T16:42:25.000487</ts>
    <user>Tammera</user>
    <text>An example of the former: ```(sync
 (seq-evt (λ () (port-closed-evt in-port)) die)
 (seq-evt (λ () (recv-evt π)) (λ (msg) (if (eof? msg) quit (emit-evt msg)))))```</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T16:44:40.000053</ts>
    <user>Tammera</user>
    <text>```(sync
 (loop-evt (λ () (recv-evt π1)) (λ (msg) (give-evt π2 msg)))
 (loop-evt (λ () (recv-evt π2)) (λ (msg) (give-evt π1 msg)))
 π1 π2)
;; where π1,π2 are processes exchanging messages```</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T16:45:29.000610</ts>
    <user>Tammera</user>
    <text>I have no idea if this is wise, or even sound.</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T17:15:25.000399</ts>
    <user>Tammera</user>
    <text>An embedded DSL could make this fun to use. ```(concurrent
 (seq (wait π) (emit eof) (die))
 (seq (let ([msg (recv)]) (if (eof? msg) (quit) (emit msg)))))

(concurrent
 (choice
  (loop (give π2 (recv π1)))
  (loop (give π1 (recv π2)))
  π1 π2))```</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T17:55:21.000144</ts>
    <user>Chantelle</user>
    <text>&lt;@Tammera&gt; those helpers and some others are things that should probably go in a package together somewhere</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T18:19:09.000248</ts>
    <user>Tammera</user>
    <text>&lt;@Chantelle&gt; others?</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T18:32:50.000254</ts>
    <user>Chantelle</user>
    <text>&lt;@Tammera&gt; off the top of my head, here are some things that might be useful in making event chains more readable:

```
pair-evt :: (Evt a, Evt b) -&amp;gt; Evt (a, b)
list-evt :: [Evt a] -&amp;gt; Evt [a]
apply-evt :: (Evt (a -&amp;gt; b), Evt a) -&amp;gt; Evt b
seq-evt :: (Evt a, Evt b) -&amp;gt; Evt b
call-evt :: Thunk a -&amp;gt; Evt a
call-evt* :: Thunk a -&amp;gt; Thunk (Evt a)
wait-evt :: Evt a -&amp;gt; Evt ()
deadline-evt :: (Evt a, Duration) -&amp;gt; Evt (Maybe a)
fold-evt :: (Evt a, a -&amp;gt; Either (Evt a) b) -&amp;gt; Evt b
forever-evt :: Evt a -&amp;gt; Evt Void
```</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T18:33:10.000381</ts>
    <user>Chantelle</user>
    <text>(but with variadic signatures instead of pair-based signatures)</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T18:37:45.000144</ts>
    <user>Tammera</user>
    <text>oh, cool!</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T18:39:02.000178</ts>
    <user>Tammera</user>
    <text>Sometimes, cooperative concurrency is easier to think about.</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T18:39:48.000054</ts>
    <user>Chantelle</user>
    <text>oh and one more: `const-evt :: a -&amp;gt; Evt a`</text>
  </message>
  <message conversation_id="530">
    <ts>2017-12-11T18:41:39.000079</ts>
    <user>Chantelle</user>
    <text>the `call-evt` one is probably the trickiest - that would encapsulate spawning a nested thread to call a function and making sure exceptions and breaks are shuffled between the two correctly</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T08:31:03.000023</ts>
    <user>Natosha</user>
    <text>&lt;@Vincenzo&gt; is there a reason the docs for `unsafe-poller` say the polling function should return a list to indicate the event is ready? The implementation seems to accept any non-false value. (And I originally assumed that the "list of results" would get turned into multiple values, but that doesn't seem to be true either.)</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T10:07:45.000775</ts>
    <user>Vincenzo</user>
    <text>The docs and your assumption are right, and the implementation is wrong</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T10:08:03.000471</ts>
    <user>Vincenzo</user>
    <text>(It's meant to match the Racket-on-Chez implementation.)</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T10:09:27.000247</ts>
    <user>Vincenzo</user>
    <text>I'll fix the implementation, but support a non-list single-value result to smooth the transition</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T10:16:18.000296</ts>
    <user>Natosha</user>
    <text>&lt;@Vincenzo&gt; thanks! Another question: is there a (cheap, direct) way to check if a custodian is shut down? The context: if I call `scheme_make_fd_output_port` when the current custodian is already shut down, I get a segfault. This is a problem for `unix-socket-{connect,accept}`.</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T10:17:38.000158</ts>
    <user>Vincenzo</user>
    <text>`register-custodian-shutdown` from `ffi/unsafe/custodian` does that check for you, and it returns #f if the custodian is shut down. I think that check is a relatively new feature, though.</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T10:17:52.000364</ts>
    <user>Natosha</user>
    <text>BTW, thanks for `unsafe-poller`; with it, I should be able to add `unix-socket-accept-evt`</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T10:20:40.000384</ts>
    <user>Natosha</user>
    <text>I don't have a separate callback I want to register; I just want to safely rely on custodian-registration work that `scheme_make_fd_output_port` already does.</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T10:21:56.000362</ts>
    <user>Vincenzo</user>
    <text>Oh, I see. The right answer here is to add a Racket function so your code can work with Racket-on-Chez. Are there other C functions that you're using?</text>
  </message>
  <message conversation_id="531">
    <ts>2017-12-12T10:24:02.000927</ts>
    <user>Natosha</user>
    <text>For this library, that and `scheme_fd_to_semaphore`</text>
  </message>
  <message conversation_id="532">
    <ts>2017-12-12T14:13:21.000277</ts>
    <user>Patrice</user>
    <text>Is there any good way to iterate over a list in pairs other than writing a loop? (Iterating through a list of form `(prop prop-val ... ...)`)</text>
  </message>
  <message conversation_id="532">
    <ts>2017-12-12T14:15:30.000223</ts>
    <user>Chantelle</user>
    <text>&lt;@Patrice&gt; I just know there's a library function somewhere that does that</text>
  </message>
  <message conversation_id="532">
    <ts>2017-12-12T14:15:57.000316</ts>
    <user>Kimbery</user>
    <text>&lt;@Patrice&gt; `in-slice` will do it &lt;http://docs.racket-lang.org/reference/sequences.html#%28def._%28%28lib._racket%2Fsequence..rkt%29._in-slice%29%29&gt;</text>
  </message>
  <message conversation_id="532">
    <ts>2017-12-12T14:16:13.000447</ts>
    <user>Chantelle</user>
    <text>_that's_ the one</text>
  </message>
  <message conversation_id="532">
    <ts>2017-12-12T14:16:16.000277</ts>
    <user>Patrice</user>
    <text>oh that's nice! thanks &lt;@Chantelle&gt; &lt;@Kimbery&gt;</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T00:40:48.000020</ts>
    <user>Arnetta</user>
    <text>is it possible to have a macro where usually
(function xyz)
becomes
(list "x" "y" "z")
but "wz" is a special combination and
(function xywz)
becomes
(list "x" "y" "wz")
?</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T00:42:24.000134</ts>
    <user>Kimbery</user>
    <text>Sure. That’s just a string processing problem.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:02:02.000062</ts>
    <user>Arnetta</user>
    <text>:blush:</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:08:56.000070</ts>
    <user>Kimbery</user>
    <text>&lt;@Natosha&gt; I’m trying to fix &lt;https://github.com/racket/racket/issues/1909&gt;, but I have a question or two if you have a moment</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:41:27.000468</ts>
    <user>Natosha</user>
    <text>&lt;@Kimbery&gt; yes?</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:42:03.000440</ts>
    <user>Kimbery</user>
    <text>&lt;@Natosha&gt; I actually just opened a PR with a hack that resolves the issue, but I don’t know if it’s a good/acceptable solution &lt;https://github.com/racket/racket/pull/1911&gt;</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:42:15.000248</ts>
    <user>Kimbery</user>
    <text>I’d appreciate your review</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:43:19.000193</ts>
    <user>Kimbery</user>
    <text>I originally tried to implement it with `splicing-let-syntax` instead of the cheap switch on `definition?`… but that broke Typed Racket because TR does a surprising thing.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:45:15.000198</ts>
    <user>Kimbery</user>
    <text>&lt;@Natosha&gt; I think the alternative solution would be to attach a syntax property to the expansion that has the original identifier in it, then adjust each of the macros exported by syntax/parse to inspect the syntax property.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:45:38.000243</ts>
    <user>Kimbery</user>
    <text>that would be a little more work, but it might cause fewer problems.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:57:29.000080</ts>
    <user>Natosha</user>
    <text>&lt;@Kimbery&gt; I'd rather avoid the extra indirection if possible. Another approach I wanted to try is basically making `lazy-require` work on macro transformers. That is, the setup is similar, but the proxy macro, instead of constructing a new term with the result of `(get-id)`, calls `syntax-local-value` on the result of `(get-id)` to get the original macro's transformer, then applies the transformer directly.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:57:57.000148</ts>
    <user>Kimbery</user>
    <text>oh, that’s an interesting idea. I could try that.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:59:06.000485</ts>
    <user>Natosha</user>
    <text>If that works, it might be possible to generate the auxiliary modules automatically as submodules and wrap up the whole thing as `lazy-require-syntax` :slightly_smiling_face:</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T13:59:36.000387</ts>
    <user>Kimbery</user>
    <text>I’m trying it right now, but I don’t see why it wouldn’t</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:00:46.000270</ts>
    <user>Kimbery</user>
    <text>all the tests pass, at least :)</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:01:11.000281</ts>
    <user>Natosha</user>
    <text>Yet another thing to try is the procedure variant of `prop:rename-transformer`... but that might interact badly with `provide`, since it tries to bypass normal rename-transformers unless ordered not to.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:01:59.000110</ts>
    <user>Kimbery</user>
    <text>and the only way to order it not to is to make the rename transformer not `free-identifier=?`, right?</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:02:31.000014</ts>
    <user>Natosha</user>
    <text>yes, as a syntax-property on the identifier, iirc</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:04:18.000051</ts>
    <user>Kimbery</user>
    <text>the `syntax-local-value` approach seems to work well, and it’s much simpler. I could try and implement `lazy-require-syntax`, but I don’t think I _fully_ understand what needs to be done to preserve the laziness.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:04:45.000524</ts>
    <user>Kimbery</user>
    <text>I remember you explaining this in the inside racket stream you did on syntax/parse, but I didn’t fully understand all the mechanics</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:07:42.000392</ts>
    <user>Natosha</user>
    <text>thanks, if you update or replace the PR I'll merge that</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:08:28.000039</ts>
    <user>Kimbery</user>
    <text>just pushed</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:10:12.000348</ts>
    <user>Natosha</user>
    <text>Getting the old `lazy-require` solution to work for `syntax-parse` was a lot of trial and error and running into random details about things like how `dynamic-require` interacts with module-path-index (de?)serialization.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:14:04.000711</ts>
    <user>Kimbery</user>
    <text>I think I also just don’t really understand all the details of when Racket maintains a module dependency from a macro use. I understand that if a macro expanded to a top-level `define-syntax` or `begin-for-syntax`, some of that phase 1 code will stick around in the compiled module… is that the only detail? so `syntax/parse` ensures the only thing left behind after expansion comes from the residual module? why can’t Racket detect that only the residual things are left behind and eliminate the dependency on `syntax/parse/private/sc`?</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:33:37.000057</ts>
    <user>Natosha</user>
    <text>Typically, Racket just preserves the module dependencies declared through `require`. Macros typically only insert references from `require`d modules. So if Racket instantiates all of a module's dependencies before instantiating the module itself, all of the residual references will have been defined. Using `lazy-require` to trim the set of instantiated modules can interfere with Racket's bookkeeping, runs two risks. First, a needed module can get left out. Second, a residual reference points to a definition site with a module-path-index that can contain a chain of relative module paths. If some of those relative requires aren't executed, Racket can't figure out what (absolute) module path the reference is supposed to be linked to.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:36:10.000207</ts>
    <user>Natosha</user>
    <text>See also &lt;https://macrologist.blogspot.com/2011/10/lazy-module-loading.html&gt;, which was written when some of the details were fresher in my mind.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:51:53.000121</ts>
    <user>Kimbery</user>
    <text>&lt;@Natosha&gt; Thanks, that’s helpful. I think the issue is that I’m grappling with my intuition of macros-as-compilers, where the macro spits out some code as a byproduct, but all the macros go away by the time the module is compiled. Therefore, shouldn’t the macro be an exclusively compile-time dependency? And shouldn’t Racket understand that and not instantiate phase 1 things after the module has already been compiled?</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T14:59:09.000115</ts>
    <user>Vincenzo</user>
    <text>Racket doesn't instantiate phase-1 things at run time – as long as you use something like `dynamic-require`, which `racket` does when given a module on the command line.
But modules carry all dependencies in case you use `eval` in a way that needs to trigger phase-1 instantiations.
If you know that `eval` and variants won't be used (because you know more than the compiler and run-time system), you can use a tool like the demodularizer to discard phase 1 and up.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T15:02:49.000015</ts>
    <user>Chantelle</user>
    <text>&lt;@Vincenzo&gt; is there a way for a module to declare it's "un-eval-able" that would let rackets compilation process do that without users having to mess with extra command line tools? something similar to how cross phase persistence is declared?</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T15:04:01.000028</ts>
    <user>Chantelle</user>
    <text>by "is there a way" I think I mean "is it possible to add that to Racket with reasonable semantics" rather than "can I do it myself with the latest Racket right now"</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T16:20:34.000094</ts>
    <user>Vincenzo</user>
    <text>&lt;@Chantelle&gt; I think that would be technically possible, but it's not obvious to me how to make it work reasonably with even basic tools, such as a REPL.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T16:22:44.000212</ts>
    <user>Chantelle</user>
    <text>I think I'd only use it as a way to write a tiny "main entrypoint" module for a webserver to keep build script complexity down, so simply not offering a REPL (like `#lang info`) in that case is fine by me</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T16:28:27.000506</ts>
    <user>Vincenzo</user>
    <text>It's not clear to me what that would buy you compared to running the main entrypoint with `racket`, assuming that there really aren't any `eval`s.</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T16:32:47.000620</ts>
    <user>Chantelle</user>
    <text>as in, I would want `raco setup` to "automagically" make demodularized forms of these sorts of modules so when running that sort of entrypoint with `racket` the compiled stuff it uses is demodularized already</text>
  </message>
  <message conversation_id="533">
    <ts>2017-12-13T16:33:14.000312</ts>
    <user>Chantelle</user>
    <text>but I don't really know enough about how those tools work to know if that makes sense</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T17:06:22.000379</ts>
    <user>Kimbery</user>
    <text>&lt;@Natosha&gt; I also just saw your `#:undo` addition! That’s exciting.</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T19:03:21.000221</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; When using the handin-server this semester, we (&lt;@Wanetta&gt; and &lt;@Laureen&gt; and I) saw occasional instances of `tcp-write` erroring with "Broken pipe", causing submissions to be unsuccessful. From reading online, this seems like the result of the socket being closed by the client at an inopportune moment. Have you seen this? Is there some way we can adjust `handin-server` to handle this situtation? We can certainly do the implementation if there's a place we should look.</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T20:14:28.000292</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; I'm not sure what you mean. Broken pipe errors are a fact of life with TCP on a real network, so the handin server and clients will see them occasionally, and a user on the client side will have to try again occasionally. Is there some more serious consequence that you're seeing?</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T20:25:00.000016</ts>
    <user>Latarsha</user>
    <text>Yes, we've gotten multiple reports that students see the "Handin successful" message and then nothing is there on the server.</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T20:26:20.000098</ts>
    <user>Latarsha</user>
    <text>Certainly we've seen this error in the log without hearing about any corresponding error messages displayed to students (and I expect we would have heard if they got them)</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T20:35:22.000059</ts>
    <user>Vincenzo</user>
    <text>If you run a server for a while and don't get "Broken pipe" messages, it means that your network cable is unplugged.</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T20:38:08.000103</ts>
    <user>Vincenzo</user>
    <text>I don't think you want to chase network errors. If the server can report success before it actually commits to success, then that's certainly a problem. I haven't looked at this code in a long time, so it's taking me a while to work out how and when success is reported.</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T21:01:05.000048</ts>
    <user>Vincenzo</user>
    <text>&lt;@Latarsha&gt; I don't see a way for a client to show "Handin successful" without getting the final `'ok` message from the server, and I don't see a way for the server to send `'ok` until it has renamed an attempt to "SUCCESS-&amp;lt;n&amp;gt;". I certainly could be overlooking something, but I doubt that the issue is an ill-timed broken connection.</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T21:05:58.000085</ts>
    <user>Latarsha</user>
    <text>What we've seen is several students at various times emailing to say that they submitted and didn't get an error (they say they got the success message but that isn't totally trustworthy), but that the file isn't on the server. In almost all of these cases, the log shows their most recent submission to the relevant assignment errored with a broken pipe</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-13T21:16:35.000045</ts>
    <user>Vincenzo</user>
    <text>I don't remember what an error other than a test failure looks like on the client side, so maybe an error isn't reported prominently enough. In any case, if there's a bug here, it can't be in mishandling network errors, and it must be in a report of success before first committing to success.</text>
  </message>
  <message conversation_id="535">
    <ts>2017-12-14T01:10:13.000050</ts>
    <user>Kimbery</user>
    <text>It seems like pkgd may have fallen over again…</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-14T09:44:56.000603</ts>
    <user>Latarsha</user>
    <text>&lt;@Stefani&gt; ping re pkgd</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-14T10:38:13.000730</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; Just talked to &lt;@Stefani&gt;, he plans to fix soon</text>
  </message>
  <message conversation_id="535">
    <ts>2017-12-14T10:47:18.000281</ts>
    <user>Kimbery</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-14T11:15:08.000402</ts>
    <user>Stefani</user>
    <text>&lt;@Kimbery&gt; it's up</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-14T11:23:39.000969</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; ok, thanks for investigating. Is there a best way to generate that error myself so that I can see what the error behavior is from the client side?</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-14T11:27:36.000500</ts>
    <user>Vincenzo</user>
    <text>You could modify the server to close the connection (or even just exit) before returning 'ok. I guess you could also have a slow checker and disconnect your client machine from the network before the success message comes back.</text>
  </message>
  <message conversation_id="534">
    <ts>2017-12-14T11:32:48.000528</ts>
    <user>Latarsha</user>
    <text>Ok, thanks, I'll try that</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T16:23:06.000043</ts>
    <user>Karine</user>
    <text>Just noticed that the snapshots page: &lt;https://pre.racket-lang.org/installers/&gt; lists northwestern but this doesn't seem to work anymore. i.e. the link &lt;http://plt.eecs.northwestern.edu/snapshots/&gt; times out.</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T16:23:20.000264</ts>
    <user>Karine</user>
    <text>&lt;@Corey&gt; ^^^</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T16:29:25.000268</ts>
    <user>Eun</user>
    <text>&lt;@Karine&gt;: I believe there's some network shuffling happening today at NWU.</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T16:29:28.000345</ts>
    <user>Eun</user>
    <text>&lt;@Tina&gt;: ^</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T16:30:39.000197</ts>
    <user>Weldon</user>
    <text>I’ve created a &lt;#C8FS3SS22|drracket&gt; channel for anyone interested in working on DrRacket. </text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T16:37:40.000340</ts>
    <user>Tina</user>
    <text>The site seems to be back now</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T17:10:38.000206</ts>
    <user>Corey</user>
    <text>&lt;@Tina&gt; For Travis CI builds that need Racket snapshot, is Northwestern or Utah preferable (meaning, better uptime, as well as friendly to your resources)?
(I ask because I seem to recall switching this in years past, but was advised to switch it back. So I'm not sure whether to accept &lt;@Karine&gt;' PR to switch it from NW to Utah.)</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T17:11:14.000276</ts>
    <user>Tina</user>
    <text>I don't ever intend for it to be down and there are no resource constraints from our end</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T17:12:33.000599</ts>
    <user>Corey</user>
    <text>&lt;@Tina&gt; Cool I'll stick with Northwestern then -- thanks!</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T18:13:44.000120</ts>
    <user>Tina</user>
    <text>Sorry it has been down recently.</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T18:14:02.000172</ts>
    <user>Tina</user>
    <text>Does it make sense to send requests to both and take the one that comes back first?</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T18:24:41.000350</ts>
    <user>Corey</user>
    <text>No worries, I wouldn't expect any one server to have 100% uptime.</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-14T18:26:19.000307</ts>
    <user>Corey</user>
    <text>&amp;gt; Does it make sense to send requests to both and take the one that comes back first?
Maybe. I guess the question is where to put that.
e.g. Are you proposing that folks do this try-both logic in various shell scripts etc.?
Or are you proposing to put both behind one load balancer that does this, and to which we point? :grin:</text>
  </message>
  <message conversation_id="537">
    <ts>2017-12-14T18:38:33.000128</ts>
    <user>Chantelle</user>
    <text>did somebody say load balancing? :grin:</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-15T11:33:40.000342</ts>
    <user>Latarsha</user>
    <text>&lt;@Corey&gt; I think (by which I mean I'm 100% sure) that &lt;@Tina&gt; is suggesting try-both, not a 3rd server</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-15T11:34:18.000054</ts>
    <user>Tina</user>
    <text>I was suggesting try both.</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-15T11:34:30.000017</ts>
    <user>Tina</user>
    <text>A third server seems like it might not help with the problem we’re having. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-15T11:34:44.000043</ts>
    <user>Tina</user>
    <text>meanwhile, I got a message about some more potential downtime locally.</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-15T11:35:10.000017</ts>
    <user>Tina</user>
    <text>It is hard to tell if it will affect &lt;http://plt.eecs.northwestern.edu|plt.eecs.northwestern.edu&gt; (it doesn’t seem like it should, but the previous messages also seemed like they shouldn’t and apparently did)</text>
  </message>
  <message conversation_id="536">
    <ts>2017-12-15T11:35:57.000194</ts>
    <user>Tina</user>
    <text>Also, I’m not suggesting load balancing. I’m suggesting load doubling. :wink:</text>
  </message>
  <message conversation_id="538">
    <ts>2017-12-15T12:21:36.000165</ts>
    <user>Corey</user>
    <text>I understand how adding another server might sound like adding another potentially-failing turtle.</text>
  </message>
  <message conversation_id="538">
    <ts>2017-12-15T12:22:53.000198</ts>
    <user>Corey</user>
    <text>But e.g. the server hosting &lt;http://www.racket-lang.org|www.racket-lang.org&gt; seems to have greater uptime, and/or, you could imagine hosting a server someplace with more uptime/control than a given university.</text>
  </message>
  <message conversation_id="538">
    <ts>2017-12-15T12:23:43.000085</ts>
    <user>Corey</user>
    <text>Also, I feel like there should be a URL structure that works to get various downloads -- but _how_ it works from time to time is not really something for each/every client to implement?</text>
  </message>
  <message conversation_id="538">
    <ts>2017-12-15T12:24:25.000340</ts>
    <user>Corey</user>
    <text>Making an even more complicated (for try-both retries) version of this &lt;https://github.com/greghendershott/travis-racket/blob/master/install-racket.sh#L6-L37&gt; out at clients, seems not quite right?</text>
  </message>
  <message conversation_id="538">
    <ts>2017-12-15T12:25:20.000461</ts>
    <user>Corey</user>
    <text>Instead of repeating that logic at clients, define it once at the server.</text>
  </message>
  <message conversation_id="538">
    <ts>2017-12-15T12:26:50.000283</ts>
    <user>Corey</user>
    <text>So I think we all agree it's good to try any of the available servers, until one works.
I think the question is, who does this retrying and where? :smile:</text>
  </message>
  <message conversation_id="538">
    <ts>2017-12-15T12:28:04.000031</ts>
    <user>Corey</user>
    <text>Of course the status quo is not horrible and we're all busy so maybe the smartest thing is to leave it as-is. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="538">
    <ts>2017-12-15T12:44:42.000461</ts>
    <user>Chantelle</user>
    <text>&lt;@Corey&gt; somewhat related: &lt;https://github.com/samth/docker-racket-build/issues/28&gt;</text>
  </message>
  <message conversation_id="539">
    <ts>2017-12-15T13:17:54.000133</ts>
    <user>Patrice</user>
    <text>If a module is required as: `(require mod (for-syntax mod))`, then it will only be compiled once and the same, compiled module expression will be instantiated twice in different phases. Does this sound right?</text>
  </message>
  <message conversation_id="539">
    <ts>2017-12-15T15:26:39.000048</ts>
    <user>Natosha</user>
    <text>&lt;@Patrice&gt; yes</text>
  </message>
  <message conversation_id="539">
    <ts>2017-12-15T15:38:46.000421</ts>
    <user>Patrice</user>
    <text>thanks</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T19:27:34.000107</ts>
    <user>Kimbery</user>
    <text>&lt;@Stefani&gt; I want to play with mode-lambda, but I don’t think I really understand how it works</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T19:37:42.000131</ts>
    <user>Kimbery</user>
    <text>why is a lux “word” called a “word”?</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T19:39:51.000067</ts>
    <user>Kimbery</user>
    <text>and, for that matter, why is a “chaos” called a “chaos”?</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T20:49:15.000094</ts>
    <user>Kimbery</user>
    <text>I’m currently having a very strange problem where `racket/tcp` is taking an enormously long time to resolve hostnames on my machine… but other programs work okay.</text>
  </message>
  <message conversation_id="541">
    <ts>2017-12-15T20:50:33.000083</ts>
    <user>Chantelle</user>
    <text>That sounds super weird</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T20:51:46.000077</ts>
    <user>Kimbery</user>
    <text>I don’t know how to debug this. I should probably try restarting my computer, but I am in the middle of some things and would sort of rather not…</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T20:57:16.000093</ts>
    <user>Kimbery</user>
    <text>The weird thing is it happens on both HEAD and a copy of 6.8 I have installed, so it can’t be rktio…</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:04:59.000095</ts>
    <user>Stefani</user>
    <text>&lt;@Kimbery&gt; First, lux and mode-lambda are totally independent, neither requires the other. Your question is about lux</text>
  </message>
  <message conversation_id="541">
    <ts>2017-12-15T21:05:31.000027</ts>
    <user>Stefani</user>
    <text>lux is an elaborate pun on big-bang, so does everything big-bang does, but slightly differently. so naturally, it uses creationist nomenclature</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:05:40.000020</ts>
    <user>Kimbery</user>
    <text>yes, my first comment was about mode-lambda and my following two were about lux. but mode-lambda seems designed to work well with lux?</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:06:01.000073</ts>
    <user>Stefani</user>
    <text>in the beginning was chaos and God formed the world with a word, in particular the words "Fiat Lux" (let there be light)</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:06:47.000088</ts>
    <user>Stefani</user>
    <text>lux allows a reactive program (a word) to run inside an environment (a chaos) and there are many different possible environments (unlike big-bang, where there is just one, so the environment doesn't get a name in big-bang)</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:07:26.000040</ts>
    <user>Stefani</user>
    <text>mode-lambda's make-render function returns the thing that lux's gui chaos expects to receive, yes, but both can and have been used with other things</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:08:24.000103</ts>
    <user>Stefani</user>
    <text>(specifically, stage-draw/dc ultimately returns a function that takes a width, height, and dc then returns void after drawing on it</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:08:42.000105</ts>
    <user>Kimbery</user>
    <text>I see, yes. I was looking at the `one.rkt` example in the mode-lambda repo.</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:09:04.000026</ts>
    <user>Stefani</user>
    <text>while lux's gui chaos expects to receive the same kind of value on word-output</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:09:35.000020</ts>
    <user>Stefani</user>
    <text>&lt;https://github.com/jeapostrophe/mode-lambda/blob/master/mode-lambda/examples/jens.rkt&gt; doesn't use lux</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:09:54.000117</ts>
    <user>Stefani</user>
    <text>and &lt;https://github.com/jeapostrophe/mode-lambda/blob/master/mode-lambda/examples/transparency/open-gl-issue.rkt&gt; is super simple (one.rkt has a lot going on)</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:10:54.000072</ts>
    <user>Kimbery</user>
    <text>could you explain to me the difference/purpose of the static/dynamic lists?</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:11:39.000027</ts>
    <user>Stefani</user>
    <text>the static is drawn first and then the dynamic is drawn, so the static is always a background</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:11:45.000059</ts>
    <user>Stefani</user>
    <text>other than that there is no functional difference</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:11:50.000054</ts>
    <user>Stefani</user>
    <text>however there is a performance impact</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:12:26.000138</ts>
    <user>Stefani</user>
    <text>mode-lambda retains a pointer to the last list given to it and if another frame comes with an eq? object list, then there is no memory transfer to the graphics card for that pass of the renderer</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:12:43.000017</ts>
    <user>Stefani</user>
    <text>the slowest thing in basically all graphics engines (including mode-lambda) are such memory transfers</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:13:00.000106</ts>
    <user>Stefani</user>
    <text>so in practice you would use the static for the level layout and the dynamic for the changing sprites and hud</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:13:14.000101</ts>
    <user>Stefani</user>
    <text>(you would render the ENTIRE level statically and just move the camera)</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:13:29.000037</ts>
    <user>Stefani</user>
    <text>(i.e. there's no need to do cpu-side culling with mode-lambda)</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:13:41.000083</ts>
    <user>Kimbery</user>
    <text>gotcha, that makes sense. moving the camera by moving the layers?</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:13:52.000026</ts>
    <user>Stefani</user>
    <text>correct, by moving the center of the layer</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:14:21.000063</ts>
    <user>Kimbery</user>
    <text>I tinkered with SMW romhacking for a little bit many years ago, so I am not entirely unfamiliar with the SNES’s graphics model :)</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:14:22.000051</ts>
    <user>Stefani</user>
    <text>although i'm pretty sure there's an error in the layer computation (discovered recently and not fixed yet), so you may find that</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:15:28.000010</ts>
    <user>Kimbery</user>
    <text>an error of what kind?</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:16:10.000106</ts>
    <user>Stefani</user>
    <text>it doesn't shift properly relative to other layers, so something like a parallax effect is off</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:18:03.000004</ts>
    <user>Kimbery</user>
    <text>ah, hmm. so you can’t have layers that move relative to each other? or am I misinterpreting?</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:18:17.000002</ts>
    <user>Stefani</user>
    <text>you should be able to, there's just a mistake right now</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:19:07.000058</ts>
    <user>Stefani</user>
    <text>basically, don't worry about it, but if something looks strange wrt layers, make sure you ask rather than think you did something wrong</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:19:19.000065</ts>
    <user>Stefani</user>
    <text>any other pressing questions?</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:21:05.000009</ts>
    <user>Kimbery</user>
    <text>I don’t think so, I think that’s enough to get started. though I am a little curious if the contracts on the `static-st` and `dynamic-st` arguments to `stage-draw/dc` should be something other than `any/c`. I’d expect `(listof sprite-data?)`.</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:21:57.000012</ts>
    <user>Stefani</user>
    <text>they should be (tree-of sprite-data?) but that's too expensive to check every frame. it goes out of its way to only look at the tree once</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:23:07.000128</ts>
    <user>Stefani</user>
    <text>that's a cons-tree</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:26:08.000035</ts>
    <user>Stefani</user>
    <text>i'm about to disappear</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:26:08.000138</ts>
    <user>Stefani</user>
    <text>:heart:</text>
  </message>
  <message conversation_id="540">
    <ts>2017-12-15T21:37:39.000105</ts>
    <user>Kimbery</user>
    <text>alright, thanks for your help, &lt;@Stefani&gt;. it might be useful to put the proper contract in the scribble docs and leave it out in the implementation for performance? I’m not sure what your philosophy is about that sort of thing.</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:10:30.000023</ts>
    <user>Kimbery</user>
    <text>```
$ time nslookup &lt;http://www.google.com|www.google.com&gt;
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	&lt;http://www.google.com|www.google.com&gt;
Address: 216.58.216.4

        0.02 real         0.00 user         0.00 sys
$ time racket -e '(require racket/tcp) (tcp-connect "&lt;http://www.google.com|www.google.com&gt;" 80)'
#&amp;lt;input-port:www.google.com&amp;gt;
#&amp;lt;output-port:www.google.com&amp;gt;
       75.90 real         0.24 user         0.10 sys
$ time racket -e '(require racket/tcp) (tcp-connect "216.58.216.4" 80)'
#&amp;lt;input-port:216.58.216.4&amp;gt;
#&amp;lt;output-port:216.58.216.4&amp;gt;
        0.45 real         0.24 user         0.08 sys
```
I don’t get it. &lt;@Vincenzo&gt;, is there any way I could debug this issue?</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:15:39.000056</ts>
    <user>Vincenzo</user>
    <text>Just to be sure, `nslookup -query=AAAA &lt;http://www.google.com|www.google.com&gt;` is also fast, right?</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:16:05.000006</ts>
    <user>Kimbery</user>
    <text>yes, it is.</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:17:50.000007</ts>
    <user>Vincenzo</user>
    <text>You might try compiling with places and futures disabled, just to make sure it's not something wrong with the way Racket runs `getaddrinfo` in a thread.</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:18:56.000045</ts>
    <user>Kimbery</user>
    <text>The weirdest thing is that this hasn’t happened before, but it affects all my installations of Racket as far as I can tell… but I can try that.</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:19:22.000062</ts>
    <user>Vincenzo</user>
    <text>You could also try building and runing "hostinfo.c" in &lt;http://www.eng.utah.edu/~cs4400/udp+tcp.zip&gt;, which uses the same OS APIs that Racket is using</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:19:42.000055</ts>
    <user>Kimbery</user>
    <text>Neat, I’ll try that.</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:21:34.000005</ts>
    <user>Kimbery</user>
    <text>```
$ time ./hostinfo &lt;http://www.google.com|www.google.com&gt;
216.58.216.4
        0.00 real         0.00 user         0.00 sys
```</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:21:42.000043</ts>
    <user>Vincenzo</user>
    <text>Maybe `PF_UNSPEC` instead of `AF_INET`, though</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:22:07.000070</ts>
    <user>Vincenzo</user>
    <text>Since that's fast, my only guess is still something about threads</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:22:44.000021</ts>
    <user>Kimbery</user>
    <text>Alright, I’ll give that a try.</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:32:25.000032</ts>
    <user>Kimbery</user>
    <text>I think I borked my Racket installation trying to figure out how to properly reconfigure it, so I just cleaned everything and started building from scratch, but is there a better way?</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:47:55.000005</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; With places and futures disabled, I still have the same problem.</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:54:53.000032</ts>
    <user>Vincenzo</user>
    <text>Maybe it's not worth trying harder before a reboot.
But looking again at rktio and "hostinfo.c", another difference is
```
#include &amp;lt;netdb.h&amp;gt;
....
  hints.ai_protocol = getprotobyname("tcp")-&amp;gt;p_proto;
  Getaddrinfo....
```</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:58:12.000036</ts>
    <user>Kimbery</user>
    <text>One observation: not all domains have this problem. `raco pkg` (and, after testing, `racket/tcp`) has no trouble at all resolving `&lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt;`.</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T22:59:24.000081</ts>
    <user>Kimbery</user>
    <text>`&lt;http://github.com|github.com&gt;` resolves quickly. `&lt;http://example.com|example.com&gt;` hangs. Perhaps my computer really is the thing at fault here. :)</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-15T23:00:55.000026</ts>
    <user>Kimbery</user>
    <text>And, for what it’s worth, adding `hints.ai_protocol = ...` did not appear to change anything.</text>
  </message>
  <message conversation_id="542">
    <ts>2017-12-16T17:19:44.000088</ts>
    <user>Kimbery</user>
    <text>FWIW, I restarted my computer and the issue went away, as I expected. How strange.</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:14:15.000029</ts>
    <user>Ida</user>
    <text>Must `for/fold` return as many values as it takes in?</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:15:09.000095</ts>
    <user>Ida</user>
    <text>(can it return 1?)</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:16:54.000022</ts>
    <user>Kimbery</user>
    <text>It must return as many values as starts with on each iteration because those become the new values of those accumulators for the subsequent iteration. Racket 6.12 will have a `#:result` option to specify the final result of the loop, which could be just one of the accumulators, but existing releases of Racket don’t have that option.</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:20:23.000010</ts>
    <user>Ida</user>
    <text>How does one know when 6.12 is coming about?</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:20:53.000008</ts>
    <user>Kimbery</user>
    <text>Racket is released quarterly, so I imagine it will be released sometime in the first 3 months of 2018.</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:21:09.000036</ts>
    <user>Ida</user>
    <text>Nuuu I see hehe</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:21:20.000053</ts>
    <user>Kimbery</user>
    <text>But if you want, you can download a snapshot build of the very latest development version of Racket. &lt;https://pre.racket-lang.org/installers/&gt;</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:21:41.000093</ts>
    <user>Ida</user>
    <text>It's alright, I better stick to mainstream builds</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:21:45.000097</ts>
    <user>Ida</user>
    <text>Lest I confuse my learning setup</text>
  </message>
  <message conversation_id="543">
    <ts>2017-12-16T19:22:00.000063</ts>
    <user>Kimbery</user>
    <text>I generally support that idea. :)</text>
  </message>
  <message conversation_id="544">
    <ts>2017-12-16T22:59:10.000018</ts>
    <user>Latarsha</user>
    <text>There's a wiki page with the release schedule, but I think the next release is January</text>
  </message>
  <message conversation_id="545">
    <ts>2017-12-16T23:41:42.000014</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Uh oh… restarting my computer fixed the problem for a while, but it seems to have come back.</text>
  </message>
  <message conversation_id="546">
    <ts>2017-12-17T13:52:01.000034</ts>
    <user>Delmy</user>
    <text>What kind of keys can be used on the procedure returned by `read-language` if the language is `#lang racket` or `#lang racket/base`? I tried `'color-lexer` (the key used in the docs as an example), but it returns the default instead of an info procedure. The docs say to see the Dr. Racket documentation for more keys, but the link is broken?

When I run:

```
(define in (open-input-string "#lang racket/base\n(+ 2 3)\n"))
(define lang-info (read-language in))
(lang-info 'color-lexer #f)
```

I just get `#f`, when I was expecting a procedure.</text>
  </message>
  <message conversation_id="546">
    <ts>2017-12-17T13:53:58.000056</ts>
    <user>Delmy</user>
    <text>When I say "the docs", I'm referring to: file:///C:/Program%20Files/Racket/doc/reference/Reading.html?q=read-language#%28def._%28%28quote._~23~25kernel%29._read-language%29%29</text>
  </message>
  <message conversation_id="546">
    <ts>2017-12-17T13:54:18.000022</ts>
    <user>Delmy</user>
    <text>ugh sorry I mean this one:
&lt;https://docs.racket-lang.org/reference/Reading.html?q=lexer#%28def._%28%28quote._~23~25kernel%29._read-language%29%29&gt;</text>
  </message>
  <message conversation_id="546">
    <ts>2017-12-17T13:54:43.000031</ts>
    <user>Delmy</user>
    <text>It says:
&amp;gt;The first argument to the function serves as a key on such information; acceptable keys and the interpretation of results is up to external tools, such as DrRacket (see the DrRacket documentation).
But the link it provides is broken</text>
  </message>
  <message conversation_id="546">
    <ts>2017-12-17T15:29:00.000005</ts>
    <user>Tammera</user>
    <text> &lt;@Delmy&gt; link breaks for me, too, with some weird message about search results.</text>
  </message>
  <message conversation_id="547">
    <ts>2017-12-17T15:34:01.000151</ts>
    <user>Latarsha</user>
    <text>I reported that as racket/racket#1914</text>
  </message>
  <message conversation_id="548">
    <ts>2017-12-18T07:14:22.000087</ts>
    <user>Natosha</user>
    <text>&lt;@Vincenzo&gt; when a fd-semaphore mapping is removed, is the existing semaphore (if any) guaranteed to become ready?</text>
  </message>
  <message conversation_id="548">
    <ts>2017-12-18T07:22:15.000319</ts>
    <user>Natosha</user>
    <text>(oh, never mind, I just read the new documentation at `unsafe-file-descriptor-&amp;gt;semaphore`)</text>
  </message>
  <message conversation_id="546">
    <ts>2017-12-18T08:37:56.000119</ts>
    <user>Vincenzo</user>
    <text>&lt;@Delmy&gt; That's right, but the default color lexer is the `racket/base` one, so `racket/base` doesn't specify one. You'll get a non-#f result with "#lang scribble/base".</text>
  </message>
  <message conversation_id="548">
    <ts>2017-12-18T08:57:42.000467</ts>
    <user>Natosha</user>
    <text>&lt;@Vincenzo&gt; `unsafe-socket-&amp;gt;port` looks like it walks up the custodian chain from the current custodian until it finds one that isn't shut down, and puts the new ports there, which seems odd. In contrast, `unsafe-file-descriptor-&amp;gt;port` segfaults if the current custodian is shut down. Can you add `custodian-shut-down?` to `racket/base` or `ffi/unsafe/custodian`?</text>
  </message>
  <message conversation_id="548">
    <ts>2017-12-18T10:14:04.000132</ts>
    <user>Vincenzo</user>
    <text>&lt;@Natosha&gt; I'll add it later today</text>
  </message>
  <message conversation_id="548">
    <ts>2017-12-18T10:19:15.000285</ts>
    <user>Natosha</user>
    <text>&lt;@Vincenzo&gt; thanks</text>
  </message>
  <message conversation_id="549">
    <ts>2017-12-18T12:20:39.000172</ts>
    <user>Brendon</user>
    <text>Hello, I am new to racket. Is this the place to be asking newbie questions? I didn't see a forum, and I've no idea how mailing lists work.</text>
  </message>
  <message conversation_id="549">
    <ts>2017-12-18T12:38:11.000334</ts>
    <user>Corey</user>
    <text>&lt;@Brendon&gt; Welcome! Check out the &lt;#C09L257PY|beginners&gt; channel here.</text>
  </message>
  <message conversation_id="549">
    <ts>2017-12-18T14:25:36.000109</ts>
    <user>Patrice</user>
    <text>&lt;@Brendon&gt; Also the user mailing list ( &lt;https://groups.google.com/forum/#!forum/racket-users&gt; ) is kind of like a forum. You can post to the mailing list from the web interface or send email to &lt;mailto:racket-users@googlegroups.com|racket-users@googlegroups.com&gt; after joining the mailing list.</text>
  </message>
  <message conversation_id="549">
    <ts>2017-12-18T14:59:23.000602</ts>
    <user>Brendon</user>
    <text>Ok, but I'm not going to get flooded with a bunch of emails right?</text>
  </message>
  <message conversation_id="549">
    <ts>2017-12-18T15:05:59.000037</ts>
    <user>Chantelle</user>
    <text>&lt;@Brendon&gt; it's configurable whether you want to receive email from the list or not. I pretty much only use the Google groups interface</text>
  </message>
  <message conversation_id="549">
    <ts>2017-12-18T15:10:08.000278</ts>
    <user>Brendon</user>
    <text>Oh, ok cool :slightly_smiling_face:</text>
  </message>
  <message conversation_id="549">
    <ts>2017-12-18T15:14:36.000559</ts>
    <user>Chantelle</user>
    <text>It's also not super active in the first place so a dozen emails a day is not likely :)</text>
  </message>
  <message conversation_id="550">
    <ts>2017-12-18T15:35:17.000394</ts>
    <user>Corey</user>
    <text>FWIW I use Gmail and one of my many "filters" (what Gmail calls mail processing rules) is, if something matches `list:"&lt;http://racket-users.googlegroups.com|racket-users.googlegroups.com&gt;` then (a) skip inbox and (b) apply label Racket.
In other words I have a "folder" with all the Racket mailing list emails I check if/when I'm in the mood for that. Doesn't clutter the inbox.
Of course can do similar with other web and native mail apps.</text>
  </message>
  <message conversation_id="551">
    <ts>2017-12-18T18:45:47.000348</ts>
    <user>Kimbery</user>
    <text>Are the bindings to imagemagick in `ffi/examples/magick` appropriate for use, or should I write my own bindings if I intend to use imagemagick from Racket?</text>
  </message>
  <message conversation_id="552">
    <ts>2017-12-19T05:35:01.000331</ts>
    <user>Karine</user>
    <text>Interesting, I just noticed I can do `(define foo identity)`, however I cannot define a method like this. `(class object% (super-new) (define/public foo identity))` complains that this is a bad form for method definition. Why is this?</text>
  </message>
  <message conversation_id="553">
    <ts>2017-12-19T07:42:06.000343</ts>
    <user>Weldon</user>
    <text>Looks like `(define/public ...)` has a (reasonably?) strict definition of what might constitute a method? I’m unfamiliar with the `identity` identifier - is it a synonym for `(lambda (i) i)`?</text>
  </message>
  <message conversation_id="551">
    <ts>2017-12-19T08:40:19.000136</ts>
    <user>Latarsha</user>
    <text>&lt;@Kimbery&gt; I would think taking that code as a starting position is a good idea, but trusting it to be complete or correct is not</text>
  </message>
  <message conversation_id="554">
    <ts>2017-12-19T09:18:14.000580</ts>
    <user>Luvenia</user>
    <text>Is there any particular place discussing the AdventofCode2017 puzzles (and completing in racket)?</text>
  </message>
  <message conversation_id="554">
    <ts>2017-12-19T11:36:06.000370</ts>
    <user>Latarsha</user>
    <text>I think Matthew Butterick is doing them in Racket, you can see his code on GitHub</text>
  </message>
  <message conversation_id="554">
    <ts>2017-12-19T11:39:49.000022</ts>
    <user>Luvenia</user>
    <text>oh cool, thanks</text>
  </message>
  <message conversation_id="553">
    <ts>2017-12-19T12:03:44.000372</ts>
    <user>Luvenia</user>
    <text>wow, some of that looks really nice</text>
  </message>
  <message conversation_id="555">
    <ts>2017-12-19T13:22:31.000005</ts>
    <user>Ida</user>
    <text>I'm working on Advent as well</text>
  </message>
  <message conversation_id="556">
    <ts>2017-12-19T17:07:47.000569</ts>
    <user>Patrice</user>
    <text>How to specify a free-id=? in `syntax-parse` as in `syntax-case*`? I wish to supply something like `(free-identifier=? a b ph 0)`</text>
  </message>
  <message conversation_id="556">
    <ts>2017-12-19T17:08:42.000080</ts>
    <user>Patrice</user>
    <text>the `#:phase` option will compare the literals as if it is `(free-identifier=? a b ph ph)` right?</text>
  </message>
  <message conversation_id="556">
    <ts>2017-12-19T17:08:55.000321</ts>
    <user>Chantelle</user>
    <text>&lt;@Patrice&gt; huh, I didn't know `syntax-case*` existed</text>
  </message>
  <message conversation_id="556">
    <ts>2017-12-19T17:09:31.000290</ts>
    <user>Chantelle</user>
    <text>my wildly speculative guess is you could make a syntax class</text>
  </message>
  <message conversation_id="556">
    <ts>2017-12-19T17:12:00.000287</ts>
    <user>Patrice</user>
    <text>thanks, let me check that</text>
  </message>
  <message conversation_id="556">
    <ts>2017-12-19T17:15:48.000239</ts>
    <user>Patrice</user>
    <text>Oh, maybe #:phase will just be okay. I'm applying syntax-parse to syntax objects that are `expand`ed, so the relevant bindings should be there</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T02:50:02.000366</ts>
    <user>Karine</user>
    <text>That's what I expected `identity` to be.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:16:03.000024</ts>
    <user>Karine</user>
    <text>&lt;@Corey&gt; is there a way in racket-mode to have source level debugging? i.e. setting breakpoints, running in debug mode, etc?</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:18:39.000536</ts>
    <user>Corey</user>
    <text>&lt;@Karine&gt; No.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:19:11.000098</ts>
    <user>Corey</user>
    <text>I mean, a couple years ago I got this mostly working. Including, when you hit a breakpoint, you have a full REPL at that point.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:19:33.000031</ts>
    <user>Corey</user>
    <text>But that's a pretty stale branch on GitHub now.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:19:55.000115</ts>
    <user>Corey</user>
    <text>I never merged because I wasn't sure I wanted to sign up to support that as a feature, if no one really _needed_ it.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:20:09.000098</ts>
    <user>Corey</user>
    <text>And I've only heard a few requests for that.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:20:56.000064</ts>
    <user>Corey</user>
    <text>For myself, I find that `print`, `racket/trace`, and logging (plus of course a REPL) are all I really need -- at least for what I do. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:21:15.000183</ts>
    <user>Corey</user>
    <text>Also there is `#R` and `debug-repl` from... dang, what's the package...</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:21:45.000053</ts>
    <user>Corey</user>
    <text>Oh, `debug` :slightly_smiling_face: &lt;https://pkgs.racket-lang.org/package/debug&gt;</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:23:58.000263</ts>
    <user>Corey</user>
    <text>And of course DrRacket has a step debugger.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:25:46.000108</ts>
    <user>Corey</user>
    <text>One caveat with DrRacket (and with my experimental stale branch) is that they work by rewriting your program -- into a step- and breakpoint-able version of your program.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:25:51.000249</ts>
    <user>Corey</user>
    <text>So it's significantly slower.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:26:54.000141</ts>
    <user>Corey</user>
    <text>Also there's the question, beyond some foo.rkt file, how many other files do you -- or can you -- rewrite this way so that you can step through them, too?  And the UX for that has always been kind of non-satisfying, in my experience.</text>
  </message>
  <message conversation_id="557">
    <ts>2017-12-20T15:28:06.000027</ts>
    <user>Corey</user>
    <text>TL;DR I decided not to add this to my list of windmills to tilt</text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-20T17:42:30.000168</ts>
    <user>Rosalee</user>
    <text>&lt;@Vincenzo&gt; or &lt;@Tina&gt; If you have any thoughts: &lt;https://github.com/racket/racket/issues/1916&gt;</text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-20T17:42:53.000277</ts>
    <user>Rosalee</user>
    <text>(I’m not sure if its a DrRacket bug or a Racket module registry bug (or something else).)</text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-20T17:50:40.000279</ts>
    <user>Tina</user>
    <text>That's how Racket works I am sorry to say</text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-20T17:50:55.000463</ts>
    <user>Tina</user>
    <text>When you load a file and then change the file on the disk, you need a new namespace</text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-20T17:51:19.000364</ts>
    <user>Tina</user>
    <text>You could say that drr should not let you into its namespace </text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-20T17:51:33.000468</ts>
    <user>Chantelle</user>
    <text>:'(</text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-20T17:51:34.000006</ts>
    <user>Tina</user>
    <text>And that is a drr bug. </text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-20T17:51:47.000359</ts>
    <user>Tina</user>
    <text>I hope to fix it someday but it isn't simple. </text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-20T18:43:31.000278</ts>
    <user>Rosalee</user>
    <text>&lt;@Tina&gt; That makes sense. I just didn’t know what drr was doing.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-20T18:44:10.000050</ts>
    <user>Rosalee</user>
    <text>But ya, if it is loading the snip into the same namespace the error makes sense.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-20T18:44:37.000075</ts>
    <user>Rosalee</user>
    <text>Which I guess means it _is_ a caching bug :wink: … just a non-trivial one to fix.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-20T18:44:39.000321</ts>
    <user>Rosalee</user>
    <text>Anyway, thank you.</text>
  </message>
  <message conversation_id="558">
    <ts>2017-12-21T08:30:03.000195</ts>
    <user>Karine</user>
    <text>&lt;@Corey&gt; thanks for the explanation. Makes sense although I would love to have a debugger that I can use to step through code. I will take a look at `debug` package and `racket/trace`.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:40:31.000021</ts>
    <user>Kimbery</user>
    <text>&lt;@Rosalee&gt; can nanopass consume and produce syntax objects?</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:50:10.000111</ts>
    <user>Rosalee</user>
    <text>&lt;@Kimbery&gt; Not really. (Technically yes, but then it won’t do all of the template generation for you.)</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:50:21.000350</ts>
    <user>Rosalee</user>
    <text>(At which point there’s not much point.)</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:50:28.000365</ts>
    <user>Rosalee</user>
    <text>pun not intended. :wink:</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:50:29.000113</ts>
    <user>Kimbery</user>
    <text>okay. that is what I suspected, but it’s good to know for sure.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:50:40.000717</ts>
    <user>Rosalee</user>
    <text>Can I ask what you are doing?</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:51:01.000047</ts>
    <user>Rosalee</user>
    <text>Because if what you want is things like source locations then that should still be fine.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:51:06.000612</ts>
    <user>Kimbery</user>
    <text>I am interested in adding an optimizer to Hackett. I would like to expand Hackett to a core language, then run the optimizer on the core language before expanding to `#%kernel`.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:52:27.000021</ts>
    <user>Rosalee</user>
    <text>Okay. in that case (depending on how you want to do it), nanopass might still be good.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:52:43.000005</ts>
    <user>Rosalee</user>
    <text>I presume you want to do whole module compilation, yes?</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:53:03.000052</ts>
    <user>Kimbery</user>
    <text>yes, the optimizer would essentially run after module expansion.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:53:23.000595</ts>
    <user>Kimbery</user>
    <text>that is, in `#%module-begin`.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:53:52.000282</ts>
    <user>Rosalee</user>
    <text>Okay</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:54:04.000260</ts>
    <user>Rosalee</user>
    <text>In that case nanopass would probably be the way to go.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:54:12.000156</ts>
    <user>Rosalee</user>
    <text>(Depending on how large your compiler is going to be.)</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:54:38.000418</ts>
    <user>Rosalee</user>
    <text>(If its a small one, or if you want to use a single IR, then there are obviously other ways to get the boilerplate reduction.)</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:55:18.000238</ts>
    <user>Rosalee</user>
    <text>What I would do is when you have your ‘parse’ pass, store the binding information yourself.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:55:31.000266</ts>
    <user>Kimbery</user>
    <text>I’m not sure yet. Right now I mostly want to do simple things. If I’m going to do laziness, I need to be able to do strictness analysis. Eventually I’ll need to be able to do type-directed specialization.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:55:38.000391</ts>
    <user>Rosalee</user>
    <text>Either by storing the literal identifier (rather than the symbol), or with some `binding` structure.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:55:56.000329</ts>
    <user>Rosalee</user>
    <text>Ah, fair.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:56:12.000380</ts>
    <user>Rosalee</user>
    <text>Well if you do choose nanopass, feel free to let me know and I will do what I can to help. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:56:30.000238</ts>
    <user>Kimbery</user>
    <text>Okay, that’s helpful. I might experiment with a few different things. :)</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T12:58:26.000280</ts>
    <user>Rosalee</user>
    <text>Okay cool. Well good luck, and I hope it goes well. ^.^</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-21T13:00:17.000084</ts>
    <user>Kimbery</user>
    <text>The main obstacle is finding the time, but I’ve been toying with the idea for a while with my spare cycles, so I think I just need to sit down and start writing some code.</text>
  </message>
  <message conversation_id="560">
    <ts>2017-12-21T21:02:40.000152</ts>
    <user>Rosalee</user>
    <text>Does anyone know if there is a good mapping from editor or display coordinates from a snips `on-event` method, to the dc coordinates in its `draw` method?</text>
  </message>
  <message conversation_id="560">
    <ts>2017-12-21T21:03:33.000057</ts>
    <user>Rosalee</user>
    <text>Like, it looks like I can use the dx and dy variables to re-position the origin, but then I’m worried about the dc coordinates using a different scale than the editor (or display) ones.</text>
  </message>
  <message conversation_id="560">
    <ts>2017-12-21T21:03:46.000058</ts>
    <user>Rosalee</user>
    <text>Like iirc, on os x its 2 to 1 or something like that.</text>
  </message>
  <message conversation_id="560">
    <ts>2017-12-22T09:05:10.000068</ts>
    <user>Vincenzo</user>
    <text>&lt;@Rosalee&gt; If I understand what you mean, that scaling is applied internally just before calling the underlying drawing toolbox, so you don't have to worry about it. A canvas's event and drawing coordinates are the same.</text>
  </message>
  <message conversation_id="559">
    <ts>2017-12-22T18:34:35.000092</ts>
    <user>Chantelle</user>
    <text>I think the dynamic part of &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; might be down again</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:29:04.000037</ts>
    <user>Nicol</user>
    <text>Hello all. I am working on a http client for some webapi services that my company has in C#. I am running into the issue when trying to send a POST request. I have searched the web quite a bit in the last few days, and it `appears` that Racket only supports sending POST requests with type `form-encoded`. Even libraries such as simple-http appear to default to this as well (has code `(define POST-FORM '("Content-Type: application/x-www-formurlencoded"))`). Also found a doc page that says:

`1.1.1 How do I send properly formatted POST form requests?`
```You should send a Content-Type header with the value application/x-www-form-urlencoded and send the data formatted by net/uri-codec's form-urlencoded-encode function. For example,

(http-conn-send!
   hc "/login"
   #:method "POST"
   #:data
   (alist-&amp;gt;form-urlencoded
    (list (cons 'username "Ryu")
          (cons 'password "Sheng Long")))
   #:headers (list "Content-Type: application/x-www-form-urlencoded"))
```

 Am I missing something? Our webapi endpoints use application/json as the media type.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:31:33.000043</ts>
    <user>Kimbery</user>
    <text>You can certainly send whatever you want in the payload. If you want to send JSON, just use `jsexpr-&amp;gt;string` instead of `list-&amp;gt;form-urlencoded` and provide `Content-Type: application/json` as a header.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:34:44.000066</ts>
    <user>Nicol</user>
    <text>I see. I tried this. Perhaps, I am doing it wrong though. The endpoint returns 415 (unsupported media type) and content type is not set when inspecting the request. My initial attempt was using the post-pure-port function. Can post some code to provide context.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:35:26.000037</ts>
    <user>Kimbery</user>
    <text>Sure, some code would probably help.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:40:25.000062</ts>
    <user>Nicol</user>
    <text>Alright. I think this should be good.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:41:17.000059</ts>
    <user>Nicol</user>
    <text>```
(define get-site-info-url "&lt;http://localhost:5252/rpc/System/Site/GetSiteInfo&gt;")
(define post-body-string (string-&amp;gt;jsexpr "{\"UID\": \"86d59b9f-1cd5-11e4-a3b3-22000b060c92\"}"))
(define post-body-bytes (jsexpr-&amp;gt;bytes post-body-string))
(define headers (list (insert-field "Authenticate" (string-trim (build-authentication-header "POST" "/rpc/System/Site/GetSiteInfo" "OMITTED" "OMITTED") "\n\r") empty-header)
                      (insert-field "Content-Type" "application/json;" empty-header)))
(define polaris-port (post-pure-port (string-&amp;gt;url get-site-info-url) post-body-bytes headers))

(define response-string (port-&amp;gt;string polaris-port))```</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:43:26.000049</ts>
    <user>Chantelle</user>
    <text>&lt;@Nicol&gt; the unfortunate tl;dr here is that sending requests to traditional http+json web services can kind of suck in racket, at least currently</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:43:54.000051</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; Why’s that? I’ve never had an issue with that, myself.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:43:59.000016</ts>
    <user>Chantelle</user>
    <text>(in my experience)</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:44:12.000010</ts>
    <user>Kimbery</user>
    <text>&lt;@Nicol&gt; I admit I had no idea `net/head` existed, but it seems like the wrong thing here.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:45:03.000070</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; mostly lack of library support and decent structs</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:45:59.000073</ts>
    <user>Chantelle</user>
    <text>especially if you want decent concurrency in requests</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:46:21.000007</ts>
    <user>Kimbery</user>
    <text>I’ve interacted with a whole lot of JSON HTTP libraries with Racket, so… YMMV, I guess?</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:46:40.000051</ts>
    <user>Kimbery</user>
    <text>One script even did them concurrently using a job queue of threads and async channels.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:46:57.000049</ts>
    <user>Chantelle</user>
    <text>I'm comparing to microservice frameworks and the like so admittedly my perspective is skewed</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:47:19.000070</ts>
    <user>Chantelle</user>
    <text>Job queue does not perform well because it doesn't separate the connection pool from the worker pool</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:47:57.000013</ts>
    <user>Chantelle</user>
    <text>(where "perform well" is in high concurrency long-lived server-side contexts)</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:49:24.000018</ts>
    <user>Chantelle</user>
    <text>racket serving does resource isolation very well though</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:50:43.000045</ts>
    <user>Nicol</user>
    <text>I will try the same thing using something other than net/head. Any suggestions to save me Google time? Seems like I could just build the headers myself too.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:50:58.000013</ts>
    <user>Kimbery</user>
    <text>I would just do that.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:51:04.000039</ts>
    <user>Chantelle</user>
    <text>the http package is a good foundation</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:51:48.000038</ts>
    <user>Chantelle</user>
    <text>everything else (including my own packages in this space) is less stable / tested and more variable in API quality</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:51:57.000090</ts>
    <user>Kimbery</user>
    <text>I would write `(define headers (list (bytes-append #"Authenticate" (build-authentication-header ....))))`.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:52:08.000039</ts>
    <user>Kimbery</user>
    <text>And then otherwise do exactly what you’re already doing.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:53:05.000023</ts>
    <user>Nicol</user>
    <text>Both are great suggestions. After I get this client working, I think I am going to gently nudge my team into possibly using Racket since it seems like I could get so much more work done with it rather than .NET.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:54:03.000021</ts>
    <user>Chantelle</user>
    <text>&lt;@Nicol&gt; if that's your plan I _strongly_ recommend infecting your team's build / deploy / operations scripts with racket</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:54:30.000021</ts>
    <user>Chantelle</user>
    <text>Racket is uniquely suited to that task</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:54:48.000027</ts>
    <user>Chantelle</user>
    <text>and people pay less attention to what languages are used for that</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:55:15.000052</ts>
    <user>Nicol</user>
    <text>That is fair. We use Team city as CI/CD, so that may be possible.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:56:12.000018</ts>
    <user>Chantelle</user>
    <text>If you're using docker in your ci/cd pipeline currently (or can add that without much effort) I've got a few docker images for Racket</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:58:06.000014</ts>
    <user>Nicol</user>
    <text>Right. I have seem an image or two. Thought it would be really nice to use in ECS or something. We are using Docker for almost every new project on my team at least.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-22T23:59:42.000006</ts>
    <user>Kimbery</user>
    <text>(ECS is way easier to use as of this year’s recent re:Invent, too! …but I like to pretend I don’t know that so that people don’t try and get me to do operations work. :wink:)</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-23T00:02:46.000012</ts>
    <user>Chantelle</user>
    <text>&lt;@Nicol&gt; for future reference: &lt;https://github.com/jackfirth/racket-docker&gt;</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-23T00:11:57.000049</ts>
    <user>Nicol</user>
    <text>Good stuff. Will look into it. I will update you all with when I get a change to see if those changes work too.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-23T00:28:45.000036</ts>
    <user>Nicol</user>
    <text>Well. Building the headers myself worked for sure. Not sure what is going on with that net/head lib, but am considering putting in an issue if they have a Github.</text>
  </message>
  <message conversation_id="561">
    <ts>2017-12-23T00:30:31.000037</ts>
    <user>Nicol</user>
    <text>See, I thought I needed to use that lib bc inserting the newlines manually to conform to the RFC standard would have been more work, but it looks like  post-pure-port handles that for you anyways.</text>
  </message>
  <message conversation_id="562">
    <ts>2017-12-24T15:49:29.000034</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; since you seem interested in this sort of thing, it would be very nice to have a benchmarking library for Racket like Haskell’s `criterion`</text>
  </message>
  <message conversation_id="562">
    <ts>2017-12-24T16:53:15.000023</ts>
    <user>Chantelle</user>
    <text>&lt;@Kimbery&gt; I am _very_ interested. How useful are the `criterion` docs? Or should I search for blog posts or something like that instead</text>
  </message>
  <message conversation_id="562">
    <ts>2017-12-24T16:53:53.000016</ts>
    <user>Kimbery</user>
    <text>&lt;@Chantelle&gt; this is pretty good &lt;http://www.serpentine.com/criterion/tutorial.html&gt;</text>
  </message>
  <message conversation_id="562">
    <ts>2017-12-24T16:56:42.000014</ts>
    <user>Chantelle</user>
    <text>added to reading list, merry christmas to me</text>
  </message>
  <message conversation_id="562">
    <ts>2017-12-26T14:04:11.000242</ts>
    <user>Latarsha</user>
    <text>&lt;@Chantelle&gt; &lt;@Kimbery&gt; I know that &lt;@Homer&gt; is thinking about similar things</text>
  </message>
  <message conversation_id="563">
    <ts>2017-12-27T00:45:23.000075</ts>
    <user>Lory</user>
    <text>after some time away from Racket, I always have to relearn how to think about quoting and quasi-quoting</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T11:04:15.000345</ts>
    <user>Latarsha</user>
    <text>&lt;@Vincenzo&gt; I assume you noticed the current DrDr failure -- is there a change that would make it stop failing to run all the other tests?</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T11:27:53.000272</ts>
    <user>Vincenzo</user>
    <text>No, I forgot to check after recent changes. I’ll fix the compiler warnings(?) when I can this afternoon</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T13:12:43.000319</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; I’m having a weird issue in which Racket installed on Ubuntu can’t load a `.so` put in its `lib` directory via `ffi-lib`, complaining it doesn’t even exist:
```
root@d82c5e3ffd27:/# ls /racket/lib/libMagick*
/racket/lib/libMagickCore-7.Q16HDRI.so  /racket/lib/libMagickWand-7.Q16HDRI.so
root@d82c5e3ffd27:/# racket -e '(require ffi/unsafe) (ffi-lib "libMagickWand-7.Q16HDRI")'
ffi-lib: couldn't open "libMagickWand-7.Q16HDRI.so" (libMagickWand-7.Q16HDRI.so: cannot open shared object file: No such file or directory)
```
However, if I set `LD_LIBRARY_PATH` to `/racket/lib`, then `ffi-lib` loads it correctly, so somehow the OS can find it, but Racket can’t. Do you know how I could debug this?</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:08:20.000043</ts>
    <user>Vincenzo</user>
    <text>It sounds like that shared object depends on others that are on only found if you set `LD_LIBRARY_PATH`</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:09:17.000017</ts>
    <user>Vincenzo</user>
    <text>Wand needs Core?</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:10:41.000175</ts>
    <user>Kimbery</user>
    <text>That seems likely, yes. What is the proper way to express that dependency to Racket?</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:10:47.000240</ts>
    <user>Vincenzo</user>
    <text>I forget how it goes on Linux, but does loading Core first help?</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:10:56.000171</ts>
    <user>Kimbery</user>
    <text>Hmm, let me see.</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:14:14.000033</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; Annoyingly, Core depends on symbols in Wand, so loading it first produces an undefined symbol error. However, that still only happens with `LD_LIBRARY_PATH` set… doing it without it set still fails with `libMagickCore-7.Q16HDRI.so: cannot open shared object file: No such file or directory`.</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:22:15.000189</ts>
    <user>Vincenzo</user>
    <text>What does `ldd` say for the two ".so"s?</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:35:34.000141</ts>
    <user>Vincenzo</user>
    <text>The `ldd` output makes sense, but the undefined symbol error doesn't make sense to me. So, I don't understand why libMagickCore doesn't load, either.</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:41:07.000371</ts>
    <user>Kimbery</user>
    <text>Well, to be clear, I get the undefined symbol error if I do this:
```
~ $ LD_LIBRARY_PATH=/app/racket/lib racket -e '(require ffi/unsafe) (ffi-lib "libMagickCore-7.Q16HDRI")'
ffi-lib: couldn't open "libMagickCore-7.Q16HDRI.so" (/app/racket/lib/libMagickCore-7.Q16HDRI.so: undefined symbol: DrawPathStart)
```
since apparently `libMagickCore` uses symbols from `libMagickWand` for whatever reason.</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:41:54.000168</ts>
    <user>Kimbery</user>
    <text>That makes sense to me. What I don’t understand is why omitting `LD_LIBRARY_PATH` causes that to fail with a _different_ error, namely `No such file or directory`.</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:42:54.000210</ts>
    <user>Vincenzo</user>
    <text>Oh, maybe the issue is the dependencies on other libraries (like freetype) that have different builds in “lib”</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:45:19.000288</ts>
    <user>Vincenzo</user>
    <text>Or does Core use dlopen to implement mutual dependencies?</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:45:52.000210</ts>
    <user>Vincenzo</user>
    <text>(But I don’t see how that would fail at load time.)</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:46:43.000254</ts>
    <user>Kimbery</user>
    <text>Right… both those things don’t seem to reflect the error message I’m seeing, which is
```
ffi-lib: couldn't open "libMagickCore-7.Q16HDRI.so" (libMagickCore-7.Q16HDRI.so: cannot open shared object file: No such file or directory)
```</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:47:15.000134</ts>
    <user>Kimbery</user>
    <text>…which seems to indicate to me that for some reason Racket can’t find the .so at all. But I don’t know how that could be possible.</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:52:33.000017</ts>
    <user>Vincenzo</user>
    <text>I suppose I'm not going to be able to guess the problem at this point. I can tell you that the recipe for success has been to (1) make sure all the relevant libraries are built together (really: make sure the load-time library is compatible with the build-time one); (2) adjust the dependencies to have no path, so that the right library really will be used at load time; and (3) load libraries that are dependencies before the libraries that depend on them.
As far as I know, shared libraries cannot have direct mutual dependencies, so that's why step 3 has seemed well-defined.</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T14:54:51.000178</ts>
    <user>Kimbery</user>
    <text>Alright, I’ll keep fiddling with knobs. ImageMagick is very complicated… and I’m still not sure I’m configuring it properly when I build it.</text>
  </message>
  <message conversation_id="564">
    <ts>2017-12-28T16:00:19.000213</ts>
    <user>Kimbery</user>
    <text>&lt;@Vincenzo&gt; FWIW, I managed to get ImageMagick to build in such a way that `libMagickCore` stopped referencing symbols in `libMagickWand`, and that plus your suggestion of explicitly loading Core before Wand seems to have solved the problem. Thanks!</text>
  </message>
  <message conversation_id="6757">
    <ts>2017-12-28T16:01:23.000071</ts>
    <user>Kimbery</user>
    <text>The error message when I load Wand without first loading Core is still perplexing… but I am willing to be happy with this now that it works. :)</text>
  </message>
</slack>