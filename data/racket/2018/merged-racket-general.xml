<slack>
  <team_domain>racket</team_domain>
  <channel_name>general</channel_name>
  <start_date>2017-12-31T00:00:01.928207</start_date>
  <end_date>2018-12-31T01:00:02.012478</end_date>
  <message conversation_id="1">
    <ts>2017-12-31T11:38:10.000028</ts>
    <user>Marnie</user>
    <text>&lt;@Carlyn&gt; hackett is so fun</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T11:38:43.000070</ts>
    <user>Marnie</user>
    <text>I'm fiddling around with typeclass hiearchies and it's a blast</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T11:39:53.000077</ts>
    <user>Marnie</user>
    <text>would you be interested in a PR that rounds out the functor-applicative-monad hierarchy? specifically one that added contravariant functors, `Alternative`, and `MonadPlus`</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T12:42:29.000058</ts>
    <user>Carlyn</user>
    <text>&lt;@Marnie&gt; Probably, yeah.</text>
  </message>
  <message conversation_id="2">
    <ts>2017-12-31T12:43:46.000063</ts>
    <user>Carlyn</user>
    <text>I think `Contravariant` and `Alternative` are pretty straightforward. I think `MonadPlus` is more questionably the right thing, so maybe hold off on that one for now?</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T12:45:05.000032</ts>
    <user>Marnie</user>
    <text>right now I'm trying to get a feel for the "proper" hierarchy (I spent way too much of my vacation reading things by edward kmett)</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T12:47:23.000045</ts>
    <user>Carlyn</user>
    <text>There’s definitely a balance to be struct between the extremes of simplicity and completeness.</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T12:47:32.000033</ts>
    <user>Marnie</user>
    <text>yup</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T12:47:42.000071</ts>
    <user>Carlyn</user>
    <text>I haven’t decided yet if I think PureScript’s extensions to the hierarchy are things I want to emulate.</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T12:54:00.000068</ts>
    <user>Marnie</user>
    <text>What do you think Hackett's goal for standard library typeclasses is?</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T12:55:54.000027</ts>
    <user>Carlyn</user>
    <text>Well, I think it’s good to have all the noncontroversial basic classes in the standard library, since it avoids orphan hell. We obviously want things like `Functor f =&amp;gt; Applicative f`, `Applicative m =&amp;gt; Monad m`, and `Semigroup a =&amp;gt; Monoid a`, since those are pretty universally agreed to be good things.</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T12:56:48.000080</ts>
    <user>Carlyn</user>
    <text>I think, for the most part, people are satisfied with much of Haskell’s typeclass hierarchy, with the exception of the `Num` hierarchy, which most people agree is poorly-designed.</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T13:01:59.000057</ts>
    <user>Marnie</user>
    <text>For context on my viewpoint, I look at Hackett as a future standard rackety way of doing referentially transparent FP - I would like to use it by default whenever I make a package whose domain plays nicely with that paradigm</text>
  </message>
  <message conversation_id="3">
    <ts>2017-12-31T14:27:08.000038</ts>
    <user>Coral</user>
    <text>Hmm from a surface POV, Hackett looks so much like Racket</text>
  </message>
  <message conversation_id="1">
    <ts>2017-12-31T14:27:58.000041</ts>
    <user>Carlyn</user>
    <text>It’s closer to Haskell than it is to Racket.</text>
  </message>
  <message conversation_id="3">
    <ts>2017-12-31T14:28:26.000024</ts>
    <user>Coral</user>
    <text>Is it close enough that you can transfer most of your knowledge and techniques over?</text>
  </message>
  <message conversation_id="3">
    <ts>2017-12-31T14:29:12.000006</ts>
    <user>Carlyn</user>
    <text>To Haskell? Yes. To Racket? No.</text>
  </message>
  <message conversation_id="3">
    <ts>2017-12-31T14:29:21.000004</ts>
    <user>Coral</user>
    <text>ahh</text>
  </message>
  <message conversation_id="4">
    <ts>2018-01-01T01:32:12.000021</ts>
    <user>Gina</user>
    <text>I'm using Dr Racket and FFI. When I load a DLL it seems to be holding on to it even after I hit the "Stop" button. This causes the post-build step for copying the DLL next to my racket file to fail b/c Dr Racket is holding onto the file and the copy needs to overwrite it. Any idea how to tell Dr Racket to let go of this file (without closing Dr Racket)?</text>
  </message>
  <message conversation_id="5">
    <ts>2018-01-01T11:45:12.000070</ts>
    <user>Hilda</user>
    <text>to be a little more robust, is it possible to create a macro so that:
(hyphenate[function name] input)
becomes
(function-name input)
?</text>
  </message>
  <message conversation_id="5">
    <ts>2018-01-01T11:46:04.000038</ts>
    <user>Hilda</user>
    <text>I know just
([function name] input) to (function-name input) was suggested against</text>
  </message>
  <message conversation_id="5">
    <ts>2018-01-01T11:47:38.000004</ts>
    <user>Hilda</user>
    <text>from a syntax purity point of view I'd rather there be no space between in "hyphenate[", but I suppose I'll take what I can get</text>
  </message>
  <message conversation_id="5">
    <ts>2018-01-01T14:31:18.000027</ts>
    <user>Carlyn</user>
    <text>&lt;@Hilda&gt; You ask a lot of curious “is it possible…” questions. Just write a custom reader if you want custom syntax.</text>
  </message>
  <message conversation_id="5">
    <ts>2018-01-01T16:43:21.000033</ts>
    <user>Hilda</user>
    <text>That may have to be a solution. I do a lot of programming in my head and don't just use text, so a heavy-handed approach like string manipulation isn't as elegant.</text>
  </message>
  <message conversation_id="5">
    <ts>2018-01-01T16:45:52.000087</ts>
    <user>Hilda</user>
    <text>As example of not-just-text, ever seen Unreal Engine 4's Blueprint scripting language?</text>
  </message>
  <message conversation_id="5">
    <ts>2018-01-01T16:47:19.000056</ts>
    <user>Hilda</user>
    <text>I do a lot of VR work, too, so generalizing programming to higher dimensions is appreciated.</text>
  </message>
  <message conversation_id="5">
    <ts>2018-01-01T16:49:19.000002</ts>
    <user>Hilda</user>
    <text>Nonetheless, a custom reader may indeed be the fastest solution right now. I just wanted to know if it was possible in principle, without adding a bunch of things (because of course Racket is Turing-complete).</text>
  </message>
  <message conversation_id="5">
    <ts>2018-01-02T02:12:38.000092</ts>
    <user>Wally</user>
    <text>&lt;@Hilda&gt; the UE4 editor reminds me of NoFlo, a visual flow-based programming language ~for~ that compiles to JavaScript.</text>
  </message>
  <message conversation_id="6">
    <ts>2018-01-02T02:19:16.000100</ts>
    <user>Wally</user>
    <text>I would love something like that for Racket.</text>
  </message>
  <message conversation_id="7">
    <ts>2018-01-02T02:22:36.000089</ts>
    <user>Wally</user>
    <text>...minus the JavaScript part.</text>
  </message>
  <message conversation_id="6">
    <ts>2018-01-02T02:23:34.000025</ts>
    <user>Wally</user>
    <text>Just run visual programs directly, I guess. </text>
  </message>
  <message conversation_id="8">
    <ts>2018-01-02T10:43:11.000053</ts>
    <user>Odis</user>
    <text>Does anyone know where the `#hash` reader macro is defined? (Or `#true`/`#false`). I want to know how it enforces that there should be no space between the word `hash` and the next  character it reads.</text>
  </message>
  <message conversation_id="8">
    <ts>2018-01-02T10:44:29.000001</ts>
    <user>Odis</user>
    <text>About all I have is to read the next token after the hash, and then do a `read-char` (or `read-byte`) and see if its a whitespace character.</text>
  </message>
  <message conversation_id="8">
    <ts>2018-01-02T12:48:01.000161</ts>
    <user>Monserrate</user>
    <text>&lt;@Odis&gt; in read.c (or in the reader directory in the new expander)</text>
  </message>
  <message conversation_id="8">
    <ts>2018-01-02T14:06:44.000164</ts>
    <user>Odis</user>
    <text>Wow…that was thorough. I forgot just how many characters can come after `#`. Anyway, thanks &lt;@Monserrate&gt; :smile:</text>
  </message>
  <message conversation_id="9">
    <ts>2018-01-02T23:26:13.000057</ts>
    <user>Sima</user>
    <text>Has anyone used Racket with Dialogflow or Actions on Google?</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T16:51:24.000096</ts>
    <user>Marnie</user>
    <text>&lt;@Lashell&gt; is there an easy way to configure all drracket preferences _entirely_ with a `#lang &amp;lt;something&amp;gt;` program? something a person could stick in their "dotfiles" repo</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T16:56:01.000450</ts>
    <user>Carrol</user>
    <text>&lt;@Marnie&gt; on osx it is `~/Library/Preferences/org.racket-lang.prefs.rktd`</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T16:56:49.000362</ts>
    <user>Carrol</user>
    <text>not exactly valid scheme tho</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T16:56:59.000524</ts>
    <user>Carrol</user>
    <text>esp not valid racket, as there is no hashlang</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T16:57:01.000168</ts>
    <user>Marnie</user>
    <text>that's a big old hash meant for `read` I presume?</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T16:57:15.000370</ts>
    <user>Marnie</user>
    <text>I'd like a program I could write rather than plain data</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T16:57:24.000231</ts>
    <user>Carrol</user>
    <text>minus a quote mark? I guess?</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T16:57:52.000012</ts>
    <user>Carrol</user>
    <text>I would like to find the code that creates that, so you could write a program that actually saves off your differences</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T16:57:53.000471</ts>
    <user>Marnie</user>
    <text>though the existence of that file means I could probably write a lang that makes a program that sets that file when run</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T17:01:42.000432</ts>
    <user>Carrol</user>
    <text>Check out `share/pkgs/drracket/drracket/tool-lib.rkt`</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T17:02:26.000060</ts>
    <user>Marnie</user>
    <text>this? &lt;http://docs.racket-lang.org/tools/index.html?q=tool-lib&gt;</text>
  </message>
  <message conversation_id="11">
    <ts>2018-01-03T17:31:01.000114</ts>
    <user>Lashell</user>
    <text>tool-lib is for making DrRacket Plugins</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:42:57.000126</ts>
    <user>Odis</user>
    <text>&lt;@Marnie&gt; &lt;@Lashell&gt; &lt;@Carrol&gt; That file is generally accessed through the `framework` collection.</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:43:08.000195</ts>
    <user>Odis</user>
    <text>Its kind of…err…disgusting. :confused:</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:43:28.000238</ts>
    <user>Odis</user>
    <text>(Not because its badly written per se, just that its way outgrown what it was originally designed to do. :wink: )</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:44:28.000290</ts>
    <user>Odis</user>
    <text>But…if you do want to set it without permanently changing it for the user, that is possible.</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:44:40.000233</ts>
    <user>Odis</user>
    <text>Umm…let me dig up some old code for you (if I can find it)</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:46:28.000231</ts>
    <user>Odis</user>
    <text>```
(define (tabify-file file)
  (parameterize* ([preferences:low-level-put-preferences
                   (λ _ (void))]
                  [preferences:low-level-get-preference
                   (λ _ #f)])
    (define t (load-file file))
    (define untabbed (send t get-text))
    (define tabbed
      (let ()
        (match-define (list table rx1 rx2 rx3 rx4)
          (preferences:get 'framework:tabify))
        (hash-remove! table 'big-bang)
        (preferences:set 'framework:tabify
                         (list table rx1 rx2 rx3 rx4))
        (send t tabify-all)
        (send t get-text)))
    (define lambda-tabbed
      (let ()
        (match-define (list table rx1 rx2 rx3 rx4)
          (preferences:get 'framework:tabify))
        (hash-set! table 'big-bang 'lambda)
        (preferences:set 'framework:tabify
                         (list table rx1 rx2 rx3 rx4))
        (send t tabify-all)
        (send t get-text)))
    (values untabbed tabbed lambda-tabbed)))
```</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:46:48.000232</ts>
    <user>Odis</user>
    <text>In this case, its just setting the indentation preferences.</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:47:12.000036</ts>
    <user>Odis</user>
    <text>(For a given `text%` object.</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:48:22.000219</ts>
    <user>Odis</user>
    <text>The whole sample is here: &lt;https://gist.github.com/LeifAndersen/c5cd6946c8b92ed7e4393acf04e2fd4f&gt;</text>
  </message>
  <message conversation_id="10">
    <ts>2018-01-03T19:49:20.000162</ts>
    <user>Odis</user>
    <text>&lt;@Marnie&gt; &lt;@Lashell&gt; &lt;@Carrol&gt; hope that helps. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="12">
    <ts>2018-01-03T21:24:49.000114</ts>
    <user>Catrice</user>
    <text>I recognize that code... :slightly_smiling_face:</text>
  </message>
  <message conversation_id="12">
    <ts>2018-01-04T16:23:02.000684</ts>
    <user>Faith</user>
    <text>Any pollen users that could do me a favour of a code review of my first small pollen project? (Custom pollen.rkt, .pm files rendered into html using a template, some custom tags..)</text>
  </message>
  <message conversation_id="12">
    <ts>2018-01-05T10:30:33.000032</ts>
    <user>Bertha</user>
    <text>&lt;@Faith&gt; Maybe go ahead and post a link? (Although I'm not one, I think there are some Pollen users here. It might be a slow week what with holidays, idk.)</text>
  </message>
  <message conversation_id="12">
    <ts>2018-01-05T11:51:59.000328</ts>
    <user>Faith</user>
    <text>sounds good :slightly_smiling_face: I'm most interested in feedback on my custom tags in `pollen.rkt` &lt;https://github.com/sanchom/sanchom.github.io/blob/master/pollen.rkt&gt;</text>
  </message>
  <message conversation_id="12">
    <ts>2018-01-05T12:18:03.000697</ts>
    <user>Lynna</user>
    <text>A status report for the Racket-on-Chez project: &lt;http://blog.racket-lang.org/2018/01/racket-on-chez-status.html&gt;</text>
  </message>
  <message conversation_id="13">
    <ts>2018-01-05T14:46:17.000194</ts>
    <user>Tiesha</user>
    <text>&lt;@Lynna&gt; Thanks for the status report on Racket-on-Chez. Awesome work. I wonder how much of this will affect code that uses foreign function interfaces (FFI)?</text>
  </message>
  <message conversation_id="13">
    <ts>2018-01-05T14:50:47.000504</ts>
    <user>Lynna</user>
    <text>The most common changes required in FFI uses: replacing access to the C API's `scheme_...`functions with new `ffi/unsafe/...` libraries, and avoiding `scheme-make-sized-byte-string`. So far, when I've adjusted FFI-using libraries, it has been easy to change to something that works in both variants of Racket.</text>
  </message>
  <message conversation_id="13">
    <ts>2018-01-05T14:51:55.000101</ts>
    <user>Tiesha</user>
    <text>Great, thanks, that sounds just right to me.</text>
  </message>
  <message conversation_id="14">
    <ts>2018-01-06T09:00:37.000001</ts>
    <user>Annalisa</user>
    <text>Hi guys, is anyone interested to do some freelance?
I need someone to help me with some tiny dr racket tasks and of course he will be paid :slightly_smiling_face:</text>
  </message>
  <message conversation_id="15">
    <ts>2018-01-06T17:50:13.000054</ts>
    <user>Monserrate</user>
    <text>&lt;@Eugena&gt; you said something a while back about the current Travis DB test failure, but I don't remember what it was. Is that fixable?</text>
  </message>
  <message conversation_id="15">
    <ts>2018-01-06T17:50:30.000077</ts>
    <user>Monserrate</user>
    <text>see &lt;https://travis-ci.org/racket/racket/builds/324857221&gt; (either of the Mac builds) for reference</text>
  </message>
  <message conversation_id="16">
    <ts>2018-01-07T20:14:17.000115</ts>
    <user>Wally</user>
    <text>Is there an easy way to remove the blue border on `scriblib/figure` HTML figures?</text>
  </message>
  <message conversation_id="15">
    <ts>2018-01-07T20:32:19.000109</ts>
    <user>Monserrate</user>
    <text>&lt;@Wally&gt; they probably produce a reliable css class, so I'd use css to style it</text>
  </message>
  <message conversation_id="15">
    <ts>2018-01-07T22:41:12.000057</ts>
    <user>Wally</user>
    <text>&lt;@Monserrate&gt; thx</text>
  </message>
  <message conversation_id="17">
    <ts>2018-01-08T20:31:51.000141</ts>
    <user>Trey</user>
    <text>Is there any way to write a contract that matches any function returning a symbol, no matter how many arguments the function may or may not take?</text>
  </message>
  <message conversation_id="17">
    <ts>2018-01-08T20:32:38.000166</ts>
    <user>Trey</user>
    <text>`(-&amp;gt;* () #:rest (listof any/c) symbol?)` does not work, because it requires the function to accept any number of arguments, whereas I want to match functions like `(lambda (x) 'ok)`</text>
  </message>
  <message conversation_id="17">
    <ts>2018-01-08T20:33:49.000171</ts>
    <user>Trey</user>
    <text>(For now, I can use `procedure?` but then I am omitting the function output check)</text>
  </message>
  <message conversation_id="17">
    <ts>2018-01-08T20:34:50.000276</ts>
    <user>Stuart</user>
    <text>&lt;http://docs.racket-lang.org/reference/function-contracts.html?q=contract#%28form._%28%28lib._racket%2Fcontract%2Fbase..rkt%29._unconstrained-domain-~3e%29%29&gt;</text>
  </message>
  <message conversation_id="17">
    <ts>2018-01-08T20:38:46.000213</ts>
    <user>Trey</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="17">
    <ts>2018-01-08T20:38:49.000176</ts>
    <user>Stuart</user>
    <text>So, `(unconstrained-domain-&amp;gt; symbol?)`</text>
  </message>
  <message conversation_id="17">
    <ts>2018-01-08T20:39:06.000116</ts>
    <user>Trey</user>
    <text>Is there any way to say, "I don't care how many arguments there are, but all of them should be symbols?"</text>
  </message>
  <message conversation_id="17">
    <ts>2018-01-08T20:42:16.000141</ts>
    <user>Carlyn</user>
    <text>I think you could do it with `dynamic-&amp;gt;*` inside of `-&amp;gt;i`, but I don’t know how to do it otherwise.</text>
  </message>
  <message conversation_id="18">
    <ts>2018-01-09T13:40:48.000377</ts>
    <user>Odis</user>
    <text>Is there any way to use snip styles to, say, change a word to another language?</text>
  </message>
  <message conversation_id="18">
    <ts>2018-01-09T13:40:59.000260</ts>
    <user>Odis</user>
    <text>(Rather than just recoloring it and changing the font.)</text>
  </message>
  <message conversation_id="18">
    <ts>2018-01-09T13:48:09.000489</ts>
    <user>Odis</user>
    <text>I guess I ‘could’ extend the text% class to have change-style take in different arguments. But that still seems cludgy.</text>
  </message>
  <message conversation_id="19">
    <ts>2018-01-09T14:02:25.000118</ts>
    <user>Phyliss</user>
    <text>Quick question, how does `equal-hash-code` compose hash values for lists? I'm implementing something similar for our reference checking but I'd like to do it the Racket Way™</text>
  </message>
  <message conversation_id="18">
    <ts>2018-01-09T14:09:44.000105</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; I don't think snip styles will work for that</text>
  </message>
  <message conversation_id="18">
    <ts>2018-01-09T14:12:22.000050</ts>
    <user>Lynna</user>
    <text>&lt;@Phyliss&gt; &lt;https://github.com/racket/racket/blob/master/racket/src/racket/src/hash.c#L1556&gt;
or &lt;https://github.com/racket/racket7/blob/master/racket/src/cs/rumble/hash-code.ss#L108&gt;
Those are not the same, obviously, and the latter is based on Chez Scheme's code, but they're similar.</text>
  </message>
  <message conversation_id="19">
    <ts>2018-01-09T14:12:48.000737</ts>
    <user>Phyliss</user>
    <text>&lt;@Lynna&gt; thanks!</text>
  </message>
  <message conversation_id="20">
    <ts>2018-01-09T16:23:52.000065</ts>
    <user>Eugena</user>
    <text>&lt;@Monserrate&gt; The test is checking to make sure that the `#:use-place` connection option achieves its goal of allowing other Racket threads to execute during long queries. The test works by spawning a thread that increments a counter between naps, running the query, and then comparing the counter against the elapsed time. There's already a fudge factor of 0.5 compared to absolutely fair scheduling.</text>
  </message>
  <message conversation_id="18">
    <ts>2018-01-09T16:26:26.000644</ts>
    <user>Eugena</user>
    <text>I can relax the test even more, but I wonder whether this is a Travis idiosyncrasy or a change to the Mac OS scheduler. And if the latter, is there anything that Racket can and/or should do to compensate? (&lt;@Lynna&gt;?)</text>
  </message>
  <message conversation_id="20">
    <ts>2018-01-09T16:28:14.000368</ts>
    <user>Monserrate</user>
    <text>Can you look back to see when it started failing, and see if that corresponded to some Racket change?</text>
  </message>
  <message conversation_id="20">
    <ts>2018-01-09T16:28:31.000327</ts>
    <user>Monserrate</user>
    <text>I can do that once I'm back at a real computer</text>
  </message>
  <message conversation_id="18">
    <ts>2018-01-09T16:29:35.000409</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Sad, thanks though.</text>
  </message>
  <message conversation_id="20">
    <ts>2018-01-09T16:31:33.000292</ts>
    <user>Eugena</user>
    <text>My recollection is it happened around the time that people said Travis changed the Mac OS version they used. I can't dig into it right now, though.</text>
  </message>
  <message conversation_id="21">
    <ts>2018-01-09T19:47:39.000378</ts>
    <user>Freida</user>
    <text>should be easy: can I write a pict to a file? Slideshow can do it, right? I'm hoping to write to... an SVG? A PDF? I feel like I must just not be looking in quite the right place in the docs.</text>
  </message>
  <message conversation_id="21">
    <ts>2018-01-09T20:02:21.000064</ts>
    <user>Carlyn</user>
    <text>&lt;@Freida&gt; maybe `draw-pict` combined with `svg-dc%` or `pdf-dc%`?</text>
  </message>
  <message conversation_id="21">
    <ts>2018-01-09T20:10:54.000100</ts>
    <user>Catrice</user>
    <text>From &lt;https://docs.racket-lang.org/pict/Pict_Datatype.html?q=convertible#%28tech._pict%29&gt;: "A pict is a convertible datatype through the file/convertible protocol. Supported conversions include 'png-bytes, 'eps-bytes, 'pdf-bytes, 'svg-bytes, and variants such as 'png-bytes+bounds and 'png-bytes+bounds8."</text>
  </message>
  <message conversation_id="21">
    <ts>2018-01-09T20:12:00.000053</ts>
    <user>Catrice</user>
    <text>so, `(convert your-pict 'png-bytes)` will give you a byte-string that's easy to save as a .png file</text>
  </message>
  <message conversation_id="21">
    <ts>2018-01-09T20:12:30.000090</ts>
    <user>Carlyn</user>
    <text>huh, I didn’t know about `file/convertible`</text>
  </message>
  <message conversation_id="21">
    <ts>2018-01-09T20:12:38.000157</ts>
    <user>Catrice</user>
    <text>when it works, it's great :slightly_smiling_face:</text>
  </message>
  <message conversation_id="21">
    <ts>2018-01-09T20:20:33.000191</ts>
    <user>Carrol</user>
    <text>I’ve used that… it’s really elegant</text>
  </message>
  <message conversation_id="21">
    <ts>2018-01-10T10:40:58.000663</ts>
    <user>Freida</user>
    <text>&lt;@Catrice&gt; thanks!</text>
  </message>
  <message conversation_id="22">
    <ts>2018-01-10T12:58:45.000076</ts>
    <user>Faith</user>
    <text>How can I figure out in what order the various `#:*-proc` functions are applied in `decode` (&lt;https://docs.racket-lang.org/pollen/Decode.html&gt;)?</text>
  </message>
  <message conversation_id="23">
    <ts>2018-01-10T14:25:30.000154</ts>
    <user>Aimee</user>
    <text>In `dynamic-require`, how can a module be instantiated but not visited? Is this possible only when the module is already available?</text>
  </message>
  <message conversation_id="23">
    <ts>2018-01-10T14:33:27.000273</ts>
    <user>Lynna</user>
    <text>&lt;@Aimee&gt; I'm not sure I understand the question. The `dynamic-require` function can instantiate a module without visiting it or making it available (where "available" is a lazy "visit"). So, `dynamic-require` is a core operation, and it's the way that a module instance gets into that state.</text>
  </message>
  <message conversation_id="23">
    <ts>2018-01-10T14:39:43.000272</ts>
    <user>Aimee</user>
    <text>Here is what I have in mind:
- visit: triggered mostly by `require` when expanding (and compiling) a module; will execute programs in `begin-for-syntax` or higher
- instantiation: evaluates the code in a module outside `begin-for-syntax`</text>
  </message>
  <message conversation_id="23">
    <ts>2018-01-10T14:42:14.000637</ts>
    <user>Aimee</user>
    <text>Then it seems like even if we use `dynamic-require` to instantiate a module (either with `#f` or `0`), the module could be visited if it is not already compiled / registered in the namespace. Is this correct?</text>
  </message>
  <message conversation_id="23">
    <ts>2018-01-10T14:54:54.000250</ts>
    <user>Lynna</user>
    <text>An operation like `require` of `dynamic-require` works in two steps: resolve a module path, and then do something involving instantiation and visits. Resolution of a module path may have the side effect of causing a module to be declared, perhaps even by loading it from source — in which case, yes, an instance will be visited as part of expanding it to arrive at a module's own declaration. That's an instance of an instance of an ephemeral "module being expanded" module, though. After expansion and evaluation, the newly declared module starts out in a state with no instances and visits.</text>
  </message>
  <message conversation_id="23">
    <ts>2018-01-10T14:55:37.000360</ts>
    <user>Aimee</user>
    <text>That clears up things! Thanks a lot</text>
  </message>
  <message conversation_id="23">
    <ts>2018-01-10T14:56:15.000718</ts>
    <user>Aimee</user>
    <text>Right, I almost forgot about module loading from source triggered by module name resolving</text>
  </message>
  <message conversation_id="24">
    <ts>2018-01-10T16:05:19.000395</ts>
    <user>Bertha</user>
    <text>&lt;@Faith&gt; The source appears to be here &lt;https://github.com/mbutterick/pollen/blob/master/pollen/decode.rkt#L51-L70&gt; At a quick glance the order they're applied is a result of recursively walking the x-expr, and some procs obviously only apply to certain kinds of elements.</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T13:36:35.000388</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; Could you point me to where in DrRacket’s implementation paren matching happens?</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T13:37:02.000220</ts>
    <user>Odis</user>
    <text>Just the file (or even the mixin responsible) would help a lot.</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T13:37:10.000156</ts>
    <user>Odis</user>
    <text>If you remember anyway. If you don’t know worries. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T13:46:05.000195</ts>
    <user>Aimee</user>
    <text>&lt;@Odis&gt; AFAIK, there's some code in `framework/color.rkt` in `gui-lib` that handles parenthesis matching</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T13:52:42.000250</ts>
    <user>Eileen</user>
    <text>Yes that it how the general library hooks into the framework (and drr uses it)</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T13:52:53.000192</ts>
    <user>Eileen</user>
    <text>There is another library that you may want tho</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T13:53:05.000651</ts>
    <user>Eileen</user>
    <text>But you can follow the dependency from there I guess</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T13:53:15.000588</ts>
    <user>Eileen</user>
    <text>Let me know if you can't find it</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T14:02:17.000437</ts>
    <user>Odis</user>
    <text>Okay. I thought color.rkt mainly handled lexing. But I’ll take another look. Thanks. :slightly_smiling_face: &lt;@Aimee&gt; &lt;@Eileen&gt;</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T14:03:09.000281</ts>
    <user>Eileen</user>
    <text>Yes it is layered on top of Lexing</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T14:03:20.000166</ts>
    <user>Eileen</user>
    <text>All tied together</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T14:04:44.000253</ts>
    <user>Odis</user>
    <text>Ah, okay. Thanks.</text>
  </message>
  <message conversation_id="25">
    <ts>2018-01-11T14:47:24.000062</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; or &lt;@Lynna&gt; The surrogate docs say “If #:use-wrapper-proc does not appear, the host mixin…also adds…get-surrogate-wrapper-proc, and set-surrogate-wrapper-proc” This seems like it was a slight oversight and I’m happy to fix it. But I just want to double check that the getters and setters for `surrogate-wrapper-proc` are only supposed to appear when #use-wrapper-proc does appear.</text>
  </message>
  <message conversation_id="26">
    <ts>2018-01-11T14:54:22.000047</ts>
    <user>Odis</user>
    <text>If it is supposed to also generate those methods even when `#:use-wrapper-proc` is not provided, then the implementation doesn’t seem to do it.</text>
  </message>
  <message conversation_id="26">
    <ts>2018-01-11T15:25:15.000053</ts>
    <user>Eileen</user>
    <text>Probably the docs are wrong if the docs and the implementation disagree </text>
  </message>
  <message conversation_id="27">
    <ts>2018-01-11T15:37:46.000472</ts>
    <user>Catrice</user>
    <text>Does anyone happen to know of a package for drawing simple class/object/UML diagrams in scribble?  I'd like to replace the ascii "art" in my lecture notes if possible, and if convenient.</text>
  </message>
  <message conversation_id="27">
    <ts>2018-01-11T16:08:46.000063</ts>
    <user>Odis</user>
    <text>&lt;@Catrice&gt; I’m not aware of a public package, but you could use the same code that the `scribble/core` docs use to build its uml diagram: &lt;https://registrar.northeastern.edu/app/uploads/form-gs-thesis.pdf&gt;</text>
  </message>
  <message conversation_id="27">
    <ts>2018-01-11T16:09:10.000546</ts>
    <user>Catrice</user>
    <text>eh, wrong link?</text>
  </message>
  <message conversation_id="27">
    <ts>2018-01-11T16:09:58.000004</ts>
    <user>Odis</user>
    <text>WOOPS, sorry. &lt;@Gaynell&gt; was looking for a form. The actual link I meant was: &lt;http://docs.racket-lang.org/scribble/core.html?q=scribble%2Fcore&gt;</text>
  </message>
  <message conversation_id="27">
    <ts>2018-01-11T16:10:16.000407</ts>
    <user>Odis</user>
    <text>And the source code is: &lt;https://github.com/racket/scribble/blob/master/scribble-doc/scribblings/scribble/struct-hierarchy.rkt&gt;</text>
  </message>
  <message conversation_id="27">
    <ts>2018-01-11T16:10:33.000107</ts>
    <user>Catrice</user>
    <text>sweet, thanks</text>
  </message>
  <message conversation_id="27">
    <ts>2018-01-11T16:10:40.000155</ts>
    <user>Odis</user>
    <text>g’luck.</text>
  </message>
  <message conversation_id="27">
    <ts>2018-01-11T16:11:47.000363</ts>
    <user>Odis</user>
    <text>If you do make it a standalone package that would be awesome btw. Although iirc you’re already pretty booked with work. :wink:</text>
  </message>
  <message conversation_id="27">
    <ts>2018-01-11T16:14:33.000063</ts>
    <user>Catrice</user>
    <text>ain't gonna happen any time soon :slightly_smiling_face:</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-11T20:22:52.000171</ts>
    <user>Wally</user>
    <text>How often does `&lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt;` rebuild packages?</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-11T20:23:09.000051</ts>
    <user>Monserrate</user>
    <text>&lt;@Wally&gt; once a day</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-11T20:23:24.000185</ts>
    <user>Monserrate</user>
    <text>although only when it's changed</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-11T20:26:40.000256</ts>
    <user>Wally</user>
    <text>&lt;@Monserrate&gt; thanks. Burned by a typo!</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-11T20:28:46.000304</ts>
    <user>Wally</user>
    <text>In the mean time, I guess I'll throw the rendered docs on GitHub pages.</text>
  </message>
  <message conversation_id="29">
    <ts>2018-01-12T06:53:31.000088</ts>
    <user>Andreas</user>
    <text>is there any library with a bitvector implemention?</text>
  </message>
  <message conversation_id="29">
    <ts>2018-01-12T06:54:17.000260</ts>
    <user>Andreas</user>
    <text>whoops: &lt;https://docs.racket-lang.org/data/bit-vector.html&gt; thanks &lt;@Franklin&gt;</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T10:27:03.000241</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; &lt;@Eugena&gt; following up on the travis failure, it started failing on macOS on 12/2, with this build &lt;https://travis-ci.org/racket/racket/builds/310672782&gt; of this commit &lt;https://github.com/racket/racket/commit/0de27b6ce96df044422ac41c29d9df1d149fbb5e&gt; which did change rktio on macOS</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T10:29:46.000303</ts>
    <user>Monserrate</user>
    <text>However, between that build and the previous successful build, Travis also rolled out a change from xcode 7.3 to 8.3 (&lt;https://blog.travis-ci.com/2017-11-21-xcode8-3-default-image-announce&gt;) so that could also have caused the problem</text>
  </message>
  <message conversation_id="30">
    <ts>2018-01-12T12:47:28.000150</ts>
    <user>Alesha</user>
    <text>which package has the raco test command? I thought rackunit-lib was it but apparently not.</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T12:49:10.000130</ts>
    <user>Monserrate</user>
    <text>compiler-lib</text>
  </message>
  <message conversation_id="30">
    <ts>2018-01-12T12:49:54.000364</ts>
    <user>Alesha</user>
    <text>thank you</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:20:52.000293</ts>
    <user>Monserrate</user>
    <text>&lt;@Willette&gt; ping</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:21:27.000323</ts>
    <user>Willette</user>
    <text>&lt;@Monserrate&gt;: pong</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:21:50.000042</ts>
    <user>Monserrate</user>
    <text>do you have any knowledge of the profiler infrastructure + threads?</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:22:22.000230</ts>
    <user>Monserrate</user>
    <text>(see &lt;https://github.com/racket/gui/issues/86#issuecomment-356643160&gt; for context)</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:23:31.000556</ts>
    <user>Willette</user>
    <text>Not particularly, but lemme have a quick look.</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:24:05.000037</ts>
    <user>Willette</user>
    <text>The contract-profiler and the regular profiler share sampling infrastructure, so seeing the same result makes sense.</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:24:05.000240</ts>
    <user>Monserrate</user>
    <text>basically, I want to profile a program that starts a gui, and I can't seem to</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:27:34.000369</ts>
    <user>Willette</user>
    <text>#:threads starts a new custodian, and profiles anything under that. IIUC, this won't sample the GUI thread. Can you try creating the sampler yourself (`create-sampler`), and passing the current custodian as the `to-track` argument?</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:34:34.000298</ts>
    <user>Monserrate</user>
    <text>that errors because the custodian isn't a subcustodian</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:34:45.000284</ts>
    <user>Monserrate</user>
    <text>but there's now an unsafe function for the root custodian</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:45:16.000109</ts>
    <user>Monserrate</user>
    <text>actually, no, there isn't, so I have to use the FFI</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T16:54:18.000569</ts>
    <user>Monserrate</user>
    <text>&lt;@Willette&gt; having now failed a couple times, do you have a suggestion for getting the root custodian?</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T16:59:28.000245</ts>
    <user>Willette</user>
    <text>Unfortunately not.</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T16:59:44.000099</ts>
    <user>Willette</user>
    <text>It does sound like what you would need, though.</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T17:00:35.000103</ts>
    <user>Monserrate</user>
    <text>ok, I'll write this annoying ffi code</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:22:49.000084</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Is there any good way to suppress the `"Warning: lexer at ~a can accept the empty string.\n"` warning when using `parser-tools/lex` to make a lexer you very intentionally want to lex the empty string?</text>
  </message>
  <message conversation_id="32">
    <ts>2018-01-12T17:23:31.000302</ts>
    <user>Odis</user>
    <text>(Alternatively, would it be bad to add a keyword argument to the `lexer` form to suppress it?)</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:23:59.000215</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; No idea if a way already exists; a keyword to suppress sounds fine</text>
  </message>
  <message conversation_id="28">
    <ts>2018-01-12T17:25:36.000411</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; do you have Racket code lying around that gets the root custodian?</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:25:57.000465</ts>
    <user>Lynna</user>
    <text>I think it's intentionally impossible</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:26:09.000151</ts>
    <user>Monserrate</user>
    <text>I mean using the FFI</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:26:14.000146</ts>
    <user>Lynna</user>
    <text>Even using the FFI</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:26:35.000123</ts>
    <user>Lynna</user>
    <text>Using the root custodian as an argument to various functions might break; I'm not sure</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:27:01.000553</ts>
    <user>Monserrate</user>
    <text>I seem to recall doing this once, by following parent pointers</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:27:49.000362</ts>
    <user>Odis</user>
    <text>Okay cool, thanks.</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:28:01.000164</ts>
    <user>Lynna</user>
    <text>Looking again, the root custodian is the initial custodian, so I guess it's ok. (Maybe I was thinking of something else.)</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:29:45.000191</ts>
    <user>Monserrate</user>
    <text>hmm, just following the `parent` field seems to get `NULL` for the parent of the initial `(current-custodian)`</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:30:05.000516</ts>
    <user>Monserrate</user>
    <text>but I suppose that's consistent with what you just said</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T17:49:20.000178</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; since this code doesn't seem to work, do you have an alternate suggestion for getting a custodian to use in profiler sampling that will include the gui thread?</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T18:11:21.000034</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt; Do you have control over the way the program is started, so that you can create a new custodian and use the original to inspect the new one?</text>
  </message>
  <message conversation_id="31">
    <ts>2018-01-12T19:07:55.000076</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; Thanks, I tried that. I now see the the loop in gtk/queue in the profile, but none of the actual plot code I'm trying to profile /cc &lt;@Willette&gt;</text>
  </message>
  <message conversation_id="33">
    <ts>2018-01-13T00:51:16.000041</ts>
    <user>Rolf</user>
    <text>Hi friends!</text>
  </message>
  <message conversation_id="33">
    <ts>2018-01-13T00:54:11.000033</ts>
    <user>Rolf</user>
    <text>Is Racket using continuations to implement any functions in standard libraries?
I'm just trying to clearly understand how continuations work and what benefits they provide, that's why I'm looking for examples, especially quite complicated ones. Thank you very much in advance!</text>
  </message>
  <message conversation_id="33">
    <ts>2018-01-13T10:25:50.000127</ts>
    <user>Monserrate</user>
    <text>&lt;@Rolf&gt; a limited form of continuations are used to implement exceptions, and they're used in the web server a bunch</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T14:02:48.000139</ts>
    <user>Tamra</user>
    <text>Is there a machine readable format of all the packages which include the checksum on &lt;https://pkgs.racket-lang.org&gt; ?</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T14:12:14.000015</ts>
    <user>Carlyn</user>
    <text>&lt;@Tamra&gt; &lt;https://pkgs.racket-lang.org/pkgs-all&gt;</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T14:14:53.000016</ts>
    <user>Tamra</user>
    <text>Ah yes, just found that, thanks</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T14:41:45.000095</ts>
    <user>Tamra</user>
    <text>I see many packages simply mention `source` with no version, am I to take that the racket community have a convention of using master as the definitive version? To describe my question better, I see one occurance of `name . "base"` implying there is one `base` package, yet there are multiple references to different base versions in other package dependencies e.g. `("base" #:version "6.8.0.2")` and `("base" #:version "6.2.900.6")`. How does racket know to checkout the correct version? Are the packages stored as git repos in the local racket packages checkout directory? Then racket will quickly checkout the tag, load the code into memory then rinse and repeat for every version? Normally, every versioned reference of `base` in pkg `dependencies` should be accompanied by a separate definition of `base` with an explicit matching version.</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T15:05:56.000069</ts>
    <user>Tamra</user>
    <text>```
A version is intended to reflect available features of a package, and should not be confused with different releases of a package as indicated by the checksum.
``` - &lt;https://docs.racket-lang.org/pkg/Package_Concepts.html?q=%23version#%28tech._version%29&gt;</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T15:19:00.000026</ts>
    <user>Monserrate</user>
    <text>&lt;@Tamra&gt; yes, it's common to use master as the definitive version. if you use a package backed by a git repo, it fetches the data from the git repo but doesn't do a clone. if you want to do a clone so you can use git operations, you can use the `--clone` option</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T15:29:44.000062</ts>
    <user>Tamra</user>
    <text>I'm quite happy to see master as definitive version, it reduces dependency calculation considerably. This way just the package name is needed when in semantic versioning and other atrocities the actual name of a package is `name+version` hence you have `n` packages all doing approximately the same thing. Now releasing on master means the racket community doesn't remove or change previously exported function names I hope. I also take it one cannot delete a package from &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt;! Are these conventions documented anywhere?</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T15:31:22.000012</ts>
    <user>Monserrate</user>
    <text>&lt;@Tamra&gt; right, the convention is to try to maintain backwards compatibility always</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T15:31:36.000114</ts>
    <user>Monserrate</user>
    <text>and to create a new package if you need to break something</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T15:37:24.000062</ts>
    <user>Tamra</user>
    <text>perfect, very happy to hear this.</text>
  </message>
  <message conversation_id="35">
    <ts>2018-01-13T21:36:23.000020</ts>
    <user>Faith</user>
    <text>I'm writing a little online textbook on Canadian aviation regulations and am actually so happy to have learned how to use Pollen</text>
  </message>
  <message conversation_id="35">
    <ts>2018-01-13T21:37:44.000079</ts>
    <user>Faith</user>
    <text>Canada even publishes the regs in xml</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-13T22:24:24.000059</ts>
    <user>Monserrate</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-14T02:54:47.000029</ts>
    <user>Marnie</user>
    <text>it does have tradeoffs - maintaining constant backwards compatibility is both extraordinarily difficult and quite limiting. There's interest in exploring alternatives for racket.</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-14T06:20:00.000056</ts>
    <user>Tamra</user>
    <text>&lt;@Marnie&gt; (in response to you side channel msg "it does have tradeoffs - maintaining constant backwards compatibility is both extraordinarily difficult and quite limiting. There's interest in exploring alternatives for racket.") Jill, why doesn't the Racket community explore a form of function annotation whereby exported function have a lifecycle in that the start out as `raw` (only the library writer uses/develops it at this stage, thenmove onto `draft` - this stage maybe one consumer might use it, but both `raw` and `draft` are susceptible to change, anyone using it knows this is shifty sand. Once happy the library writer puts a `stable` annotation, signalling this function signature will not change. Only newly named function exports may be used should it be required. After `stable` the `deprecated` annotation is used, the function implementation still exists but an evaluation warning is printed. After this the `legacy` annotation is used, here the entire function implementation is replaced by an `assert`. This gives the pkg implementor flexibility to evolve the exported function against a wider user base. 2cw</text>
  </message>
  <message conversation_id="36">
    <ts>2018-01-14T07:58:39.000066</ts>
    <user>Rolf</user>
    <text>&lt;@Monserrate&gt; thank you! )</text>
  </message>
  <message conversation_id="35">
    <ts>2018-01-14T11:38:07.000119</ts>
    <user>Bertha</user>
    <text>&lt;@Tamra&gt; Although I don't think I've seen it formally documented (?), there is a convention about not using things a package provides under a `private` module path.
A related signal is that if a package doesn't document something yet/ever, maybe I shouldn't use it.
IMHO these are fine, existing ways to handle the "raw" and "draft" stages you mention.
(Also, it's wonderful to share code on GitHub or wherever, even if you're not yet willing/able to commit making it a package for other people to depend on.)

As for "deprecated", I think that's something to signal through documentation. (Not a code warning, because next point...)
As for "legacy" a.k.a. 410 Gone, I think the answer is "please just don't do that; why would you do that to users of your package."

I've seen &lt;@Dia&gt; point out that package ecosystems are as much social as technical.</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-14T12:30:59.000103</ts>
    <user>Wally</user>
    <text>&amp;gt; package ecosystems are as much social as technical
The old Perl community is an excellent example of this.</text>
  </message>
  <message conversation_id="37">
    <ts>2018-01-14T12:33:52.000115</ts>
    <user>Wally</user>
    <text>And JavaScript / npm is a good example of the prevailing alternative.</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-15T08:07:24.000316</ts>
    <user>Dia</user>
    <text>&lt;@Tamra&gt; &lt;@Bertha&gt; re: `private`/etc, I think the Racket mores are that you don't use things aren't documented (you mention this), so everything not document is "private" and you use `private` to help yourself remember. being document is also how we measure backwards compatibility, roughly reading old documentation should let you write code for any version of the package. I think it's good that there's no technical barrier to using undocumented stuff though, because sometimes a package extends another in a way that relies on these undocumented details and it is too onerous in the beginning to document them or combine the packages.</text>
  </message>
  <message conversation_id="38">
    <ts>2018-01-15T11:12:44.000343</ts>
    <user>Willette</user>
    <text>@samth, &lt;@Marnie&gt;: What's the status of your docker testing project? Testing for 6.12 will start later today. Can I / someone else use it for something?</text>
  </message>
  <message conversation_id="38">
    <ts>2018-01-15T12:36:04.000394</ts>
    <user>Monserrate</user>
    <text>&lt;@Willette&gt; you can use it to test many things but not quite as many things as you might want</text>
  </message>
  <message conversation_id="38">
    <ts>2018-01-15T12:42:43.000027</ts>
    <user>Willette</user>
    <text>Who is the intended audience at this point? i.e., who could benefit from it now?</text>
  </message>
  <message conversation_id="34">
    <ts>2018-01-15T12:48:26.000134</ts>
    <user>Tamra</user>
    <text>&lt;@Bertha&gt; &lt;@Dia&gt; I agree packages are very much social. Hence conventions are created. I really don't think one fosters a stable package base if 3rd parties use private functions. Public exports are contracts saying I supply X and it won't change (after `draft` stage). If I change it, I'm breaking that contract. I, as a library developer, don't want that the commitment to extend to my private functions as it locks me down. Private function usage creates unclear expectations. I will certainly break other dependent code *when* not *if* I change the code. Anyway, thank you I have a better understanding now.
</text>
  </message>
  <message conversation_id="39">
    <ts>2018-01-15T13:08:14.000168</ts>
    <user>Andreas</user>
    <text>Are there any good usage cases of the logging facilities? I have slightly stumped on how to use logging at the basic level. Like, do I always need a receiver? </text>
  </message>
  <message conversation_id="39">
    <ts>2018-01-15T14:34:30.000053</ts>
    <user>Sandi</user>
    <text>i too have always found logging difficult and rely on some cargo cult scripts i got off stack overflow</text>
  </message>
  <message conversation_id="40">
    <ts>2018-01-15T14:43:49.000420</ts>
    <user>Helena</user>
    <text>For basic logging, I usually do this: (1) make a new logger with `define-logger`, e.g. `(define-logger foo)`; (2) log at the info level `(log-foo-info "hi")`; (3) set the `PLTSTDERR` flag, `PLTSTDERR="error info@foo" raco make file.rkt`</text>
  </message>
  <message conversation_id="38">
    <ts>2018-01-15T14:43:51.000193</ts>
    <user>Monserrate</user>
    <text>&lt;@Willette&gt; I think you could benefit from it currently</text>
  </message>
  <message conversation_id="39">
    <ts>2018-01-15T14:48:57.000309</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Normally you'll use a log _receiver_ that's already created by you. Such as the default one, with command-line Racket. Or maybe one created by a tool like xrepl, DrRacket, or racket-mode.
The only time I've created my own, recently, is to forward things to Amazon CloudWatch Logs.</text>
  </message>
  <message conversation_id="40">
    <ts>2018-01-15T15:04:27.000290</ts>
    <user>Bertha</user>
    <text>I think the biggest deficiency of Racket's logging is that, unlike Android, it lacks a `WTF` log level: &lt;https://developer.android.com/reference/android/util/Log.html#wtf&gt;</text>
  </message>
  <message conversation_id="40">
    <ts>2018-01-15T15:06:20.000465</ts>
    <user>Karry</user>
    <text>oh that's wonderful -- documented as "What a Terrible Failure: Report a condition that should never happen. "</text>
  </message>
  <message conversation_id="40">
    <ts>2018-01-15T15:10:26.000053</ts>
    <user>Bertha</user>
    <text>I'd really like to see this implemented with a video snippet, "Oh what a terrible failure" along these lines: &lt;https://youtu.be/kp5HCDGJsvM?t=27s&gt;</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T09:48:31.000280</ts>
    <user>Alesha</user>
    <text>Greetings racketeers, does anyone here have a good familiarity with using `subprocess` under Windows? I'm experimenting with it but it doesn't seem to operate the way I'm expecting. Even my simplest example doesn't seem to work so I'm trying to understand where I'm going wrong.

`(define-values (sp in out err) (subprocess #f #f #f "dir"))`

when I execute that in a REPL on my Windows machine, I expect to receive the current working directory's listing in the output port in the `in` variable but when I do `(read-line in)` I only get `#&amp;lt;eof&amp;gt;` `(subprocess-status sp)` gives me `0` so seems nothing is amiss, except I'm not getting the output of the `dir` command. Even when I subprocess a command that I expect to take several seconds to run, as verified by directly executing it on the command-line, the subprocess returns immediately with a status of 0 and nothing given on the output port.</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T09:49:46.000466</ts>
    <user>Alesha</user>
    <text>Would appreciate any examples for using subprocess under Windows. Interestingly when I create a batch script file containing the desired command and call that directly via `subprocess`, it works so does that mean it only works with executable files as opposed to command strings?</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T10:12:58.000336</ts>
    <user>Alesha</user>
    <text>I've discovered `process` binding in `racket/system` and it does the job</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T10:29:51.000605</ts>
    <user>Alesha</user>
    <text>Reading `process` source code has told me the proper way to use subprocess to handle command-line execution. have to explicitly call cmd.exe first before passing to it additional command strings. I had been assuming that subprocess automatically called the default OS shell which in fact is not the case at all.</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T11:36:52.000805</ts>
    <user>Monserrate</user>
    <text>&lt;@Alesha&gt; the 'system' function does that</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T12:15:40.000206</ts>
    <user>Alesha</user>
    <text>&lt;@Monserrate&gt; indeed it does but its behavior is synchronous which is not what I want</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T12:16:20.000841</ts>
    <user>Alesha</user>
    <text>the commands I'm executing has the potential to fail to complete so don't want to block my Racket app on a command that may not return</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T12:17:12.000093</ts>
    <user>Monserrate</user>
    <text>You might want to put it in a thread</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T12:18:11.000314</ts>
    <user>Alesha</user>
    <text>oh that's a good idea then I'd just `sync/timeout` on a channel between the main and the inferior thread</text>
  </message>
  <message conversation_id="41">
    <ts>2018-01-17T12:18:24.000027</ts>
    <user>Alesha</user>
    <text>that should do the trick</text>
  </message>
  <message conversation_id="42">
    <ts>2018-01-17T15:18:10.000535</ts>
    <user>Odis</user>
    <text>Bleh, stupid slack, the screenshot is at the top.</text>
  </message>
  <message conversation_id="42">
    <ts>2018-01-17T15:18:58.000775</ts>
    <user>Odis</user>
    <text>Anyway, &lt;@Gaynell&gt; and I have been trying to figure it out.</text>
  </message>
  <message conversation_id="42">
    <ts>2018-01-17T15:19:14.000702</ts>
    <user>Odis</user>
    <text>Oh, also &lt;@Carlyn&gt; IIRC, you were trying to do something similar with hackett, yes?</text>
  </message>
  <message conversation_id="42">
    <ts>2018-01-17T15:22:07.000543</ts>
    <user>Odis</user>
    <text>I guess using `module-&amp;gt;namespace` instead of `make-base-namespace`, solves the problem. But I don’t know why.

```
#lang racket
(define-syntax (f stx)
  (current-namespace (module-&amp;gt;namespace 'racket/base))
  (define stx (datum-&amp;gt;syntax #f '(+ 1 2)))
  (syntax-shift-phase-level (namespace-syntax-introduce stx) -1))

(f)
```</text>
  </message>
  <message conversation_id="42">
    <ts>2018-01-17T16:01:06.000098</ts>
    <user>Carlyn</user>
    <text>&lt;@Odis&gt; I don’t think I do anything quite like that in Hackett. I don’t try and mix runtime namespaces with expander-time scopes.</text>
  </message>
  <message conversation_id="42">
    <ts>2018-01-17T16:05:12.000502</ts>
    <user>Odis</user>
    <text>Ah, okay. Well thanks anyway. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="43">
    <ts>2018-01-17T16:31:18.000091</ts>
    <user>Alesha</user>
    <text>Is there a way to override inferred package name which is based on directory name and provide a canonical name in info.rkt? For example, if I have a directory called `a-directory` performing `raco pkg install` in that directory will cause raco to install a pkg called `a-directory` I would prefer to use a canonical name `fancy-pkg` that doesn't bear any relation to what the directory happens to be called such so `raco pkg install` will instead install `fancy-pkg`. I was hoping that putting `(define name "fancy-pkg")` in the `info.rkt` within the directory would do the trick, but alas seems not.</text>
  </message>
  <message conversation_id="43">
    <ts>2018-01-17T16:32:41.000076</ts>
    <user>Carlyn</user>
    <text>&lt;@Alesha&gt; no, packages installed with `--link` but not `--name` will always attempt to infer the name</text>
  </message>
  <message conversation_id="43">
    <ts>2018-01-17T16:33:11.000206</ts>
    <user>Carlyn</user>
    <text>but, on the other hand, as long as you specify the collection in the `info.rkt` file, the package name is largely irrelevant</text>
  </message>
  <message conversation_id="43">
    <ts>2018-01-17T16:34:35.000036</ts>
    <user>Alesha</user>
    <text>hmm I'll experiment with using --name. The package name may be largely irrelevant but due to combination of how things are organized in terms of git repository/packages, the actual directory naming and desired package names are unfortunately not syncing up in a nice way</text>
  </message>
  <message conversation_id="43">
    <ts>2018-01-17T16:35:01.000446</ts>
    <user>Alesha</user>
    <text>so I was hoping to get around that by using info.rkt metadata to enforce preferred package names in spite of what the directory organization happens to be</text>
  </message>
  <message conversation_id="43">
    <ts>2018-01-17T16:35:36.000182</ts>
    <user>Alesha</user>
    <text>in any event, not a huge deal, it can be solved by changing directory naming scheme</text>
  </message>
  <message conversation_id="43">
    <ts>2018-01-17T16:39:24.000185</ts>
    <user>Alesha</user>
    <text>ok `raco pkg install --name fancy-pkg` does what I wanted so I'm happy now</text>
  </message>
  <message conversation_id="44">
    <ts>2018-01-17T20:10:57.000040</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; Putting a top-level context on an identifier and then moving the identifier into a module is indeed strange, and it triggers a "fallback" mechanism for dealing with awkward top-level interactions. Also, it turns out that the first example works in plain Racket, but not with errortrace's re-expansion (as used by DrRacket). A `module-&amp;gt;namespace` namespace is more module-like and gives the expander more of a sure footing. I haven't worked out exactly how hopeless the variant with the top-level namespace is.
Is the application interesting and something that should be supported better?</text>
  </message>
  <message conversation_id="44">
    <ts>2018-01-17T20:23:06.000108</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Ah, okay. I hadn’t realized that `make-base-namespace` was top-level like. `module-&amp;gt;namespace` seems to be working.</text>
  </message>
  <message conversation_id="44">
    <ts>2018-01-17T20:23:52.000224</ts>
    <user>Odis</user>
    <text>I guess if I really wanted to dynamically create a module like namespace, I could use `make-base-namespace` to create a module, and then use that module’s namespae.</text>
  </message>
  <message conversation_id="44">
    <ts>2018-01-17T20:23:55.000169</ts>
    <user>Odis</user>
    <text>namespace*</text>
  </message>
  <message conversation_id="44">
    <ts>2018-01-17T20:24:18.000157</ts>
    <user>Odis</user>
    <text>But if using the namespace returned by `(module-&amp;gt;namespace 'racket/base)` isn’t bad, I can just use that.</text>
  </message>
  <message conversation_id="44">
    <ts>2018-01-17T20:24:20.000122</ts>
    <user>Odis</user>
    <text>Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="44">
    <ts>2018-01-17T21:56:24.000236</ts>
    <user>Aimee</user>
    <text>&lt;@Odis&gt;: I think what was top-level like was `namespace-syntax-introduce`, not `make-base-namespace`</text>
  </message>
  <message conversation_id="44">
    <ts>2018-01-17T22:00:53.000347</ts>
    <user>Aimee</user>
    <text>Wait no I was wrong; didn't read the entire conversation</text>
  </message>
  <message conversation_id="45">
    <ts>2018-01-17T22:12:16.000166</ts>
    <user>Carlyn</user>
    <text>FWIW, my completely uninformed intuition was that namespaces were essentially a reflective mechanism, and that `namespace-syntax-introduce` would not necessarily make sense outside the scope of a piece of syntax passed to `eval`, but in retrospect, that assumption might have been wrong. Just when I think I understand Racket’s syntax model, I find out something new…</text>
  </message>
  <message conversation_id="45">
    <ts>2018-01-17T22:18:18.000044</ts>
    <user>Aimee</user>
    <text>I thought that the namespace scope introduced by `namespace-syntax-introduce` is the same regardless of where the namespace come from, but
&amp;gt; Except for namespaces generated by a module (see module-&amp;gt;namespace), every namespace uses the same scope as the one added to all phase levels, ...
and
&amp;gt; [module-&amp;gt;namespace] Returns a namespace that corresponds to the body of an instantiated module ...</text>
  </message>
  <message conversation_id="45">
    <ts>2018-01-17T22:21:36.000061</ts>
    <user>Aimee</user>
    <text>So it could be that the 'namespace scope' for `module-&amp;gt;namespace` namespaces is module scope. I don't know if we can describe this with ``reflexive operations in `module-&amp;gt;namespace` namespaces starts in module context while reflexive operations in other namespaces starts in top-level context''.</text>
  </message>
  <message conversation_id="46">
    <ts>2018-01-18T05:36:00.000220</ts>
    <user>Andreas</user>
    <text>What's the best way to calculate the startup time of a racket program? I notice that when I do `racket myprogram.rkt x y z`, sometimes it looks like my program only really starts after 7secs or so. That's a lot. My program takes less than that to complete.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T13:14:10.000597</ts>
    <user>Alesha</user>
    <text>More `raco pkg` questions; what's the usefulness of the `--scope-dir` option? When I use it for installing a pkg, I noticed that the package dependency resolution process seems to ignore the installation and user scopes and `raco pkg` will try to download pkgs that are already installed in installation scope. That seems to reduce the utility of `--scope-dir` so I was wondering what use cases `--scope-dir` is meant to support.</text>
  </message>
  <message conversation_id="48">
    <ts>2018-01-18T16:49:39.000238</ts>
    <user>Catrice</user>
    <text>quick `date` manipulation question in Racket: is there a function that lets me compute e.g. "February 27, 2018 plus 3 days yields March 2, 2018"?  I'd like to be able to fold starting from an initial date and some list of deltas (2 days later, 1 day later, 4 days later,  etc) and compute all the valid dates along the way</text>
  </message>
  <message conversation_id="48">
    <ts>2018-01-18T16:50:05.000583</ts>
    <user>Catrice</user>
    <text>(I don't care about string manipulation; I assume the `racket/date` library's `date-&amp;gt;string` function will suffice from there)</text>
  </message>
  <message conversation_id="48">
    <ts>2018-01-18T16:50:24.000292</ts>
    <user>Carlyn</user>
    <text>consider using the `gregor` library instead of `racket/date` / `srfi/19`</text>
  </message>
  <message conversation_id="48">
    <ts>2018-01-18T16:51:20.000306</ts>
    <user>Catrice</user>
    <text>that'll do it, thanks</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T18:43:48.000430</ts>
    <user>Odis</user>
    <text>I am trying to get an identifier whose binding is a particular module. And it seems like combining `module-&amp;gt;namespace` with `namespace-symbol-&amp;gt;identifier` does the trick at phase 0. But at phase 1 I am getting the same `#%top` undefined error.</text>
  </message>
  <message conversation_id="48">
    <ts>2018-01-18T18:44:20.000182</ts>
    <user>Odis</user>
    <text>Here is my code: &lt;https://gist.github.com/LeifAndersen/beafcce478771f577a6af533dfd221ea&gt;</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T18:44:43.000552</ts>
    <user>Odis</user>
    <text>Obviously if you remove the `begin-for-syntax` Its properly bound.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T18:45:12.000271</ts>
    <user>Odis</user>
    <text>I wonder if I’m still doing overly strange stuff &lt;@Lynna&gt;?</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T18:52:58.000627</ts>
    <user>Odis</user>
    <text>Also, if I do a `syntax-shift-phase-level` by `-1`, it is able to find the binding again.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T18:54:13.000202</ts>
    <user>Odis</user>
    <text>Which makes me think that the one of those two namespace functions aren’t properly shifting the phases given that they’re in a begin-for-syntax.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T18:58:23.000130</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; While running at phase N for N &amp;gt; 0, `identifier-binding` implicitly checks bindings at phase N-1 (because the expectation is that you're using `identifier-binding` at compile time to inspect run-time code), while namespace operations work at the current phase N (because the expectation is that you're dynamically loading code at the current phase). So that's why shifting by -1 does what you want. Another possibility is to supply the current phase to `identifier-binding`, where `(variable-reference-&amp;gt;phase (#%variable-reference))` is one way to get the current phase.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:01:45.000022</ts>
    <user>Odis</user>
    <text>I guess that makes sense. But then why does the following macro complain about the match identifier being unbound?:

```
(define-syntax (my-m stx)
  (dynamic-require 'racket/match 0)
  (define x
   (parameterize ([current-namespace (module-&amp;gt;namespace 'racket/match)])
     (namespace-symbol-&amp;gt;identifier 'match)))
  x)
```</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:13:44.000105</ts>
    <user>Lynna</user>
    <text>Since the namespace operations in the macro happen at phase 1, the `match` identifier will have a binding at phase 1 and not at phase 0.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:16:23.000377</ts>
    <user>Odis</user>
    <text>That would make sense, but if I shift it down a phase with:
```
  (define x
    (syntax-shift-phase-level
     (parameterize ([current-namespace (module-&amp;gt;namespace 'racket/match)])
       (namespace-symbol-&amp;gt;identifier 'match))
     -1))
```</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:16:45.000291</ts>
    <user>Odis</user>
    <text>then I get an error saying the module is not available:
```
require: namespace mismatch;
 reference to a module that is not available
  reference phase: 0
  referenced module: "/Users/leif/racket/racket/collects/racket/match/match.rkt"
  referenced phase level: 0
  in: match
  context...:
   /Users/leif/racket/racket/collects/syntax/wrap-modbeg.rkt:46:4
   standard-module-name-resolver
```</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:20:23.000087</ts>
    <user>Lynna</user>
    <text>Yes, that is a correct error. Since you're manipulating the phase of the syntax object, you're breaking the connection between the instantiation of the source module and the reference to that module.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:22:49.000080</ts>
    <user>Lynna</user>
    <text>But, for example, if you `(require match)` in a phase-0 position (such as in the same place where `my-m` is defined), then `match` will be available.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:25:39.000482</ts>
    <user>Odis</user>
    <text>That would make sense. I however don’t want to do that because (as I understand it), that would bring `match` in as an identifier for the rest of the module.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:26:13.000023</ts>
    <user>Odis</user>
    <text>I did try a dynamic-require in the template, but that gave the same error.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:26:26.000383</ts>
    <user>Lynna</user>
    <text>A `(require (only-in match))` would make the module available without binding anything</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:26:45.000110</ts>
    <user>Odis</user>
    <text>OH!!!</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:26:47.000351</ts>
    <user>Odis</user>
    <text>That’s a great idea.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:26:49.000268</ts>
    <user>Odis</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:27:21.000548</ts>
    <user>Lynna</user>
    <text>Or something like `(namespace-require '(for-template racket/match))` in the macro</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:29:13.000301</ts>
    <user>Odis</user>
    <text>Oh cool, that worked, thanks:
```
(define-syntax (my-m stx)
  (dynamic-require 'racket/match 0)
  (define x
    (syntax-shift-phase-level
     (parameterize ([current-namespace (module-&amp;gt;namespace 'racket/match)])
       (namespace-symbol-&amp;gt;identifier 'match))
     -1))
  (namespace-require '(for-template racket/match))
  #`(#,x '(1 2 3)
           [_ 'yay]))
```</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:29:53.000361</ts>
    <user>Odis</user>
    <text>Actually…never mind.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:30:01.000328</ts>
    <user>Odis</user>
    <text>Because the identifier is still bound there: (identifier-binding #’match)</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:30:55.000387</ts>
    <user>Odis</user>
    <text>That is, if I do:
```
(my-m)
(identifier-binding #'match)
```
under that, I get the binding to racket/match</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:33:23.000164</ts>
    <user>Odis</user>
    <text>Oh, also doing the `(namespace-require '(for-template racket/match))` only works in the terminal, not drracket. That’s odd…</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:36:39.000063</ts>
    <user>Lynna</user>
    <text>Ok, re-expansion (as in DrRacket) won't work, because the macro side-effect won't happen for the re-expansion. I guess you get the idea, anyway.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:38:11.000406</ts>
    <user>Odis</user>
    <text>Ah, okay.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:38:28.000122</ts>
    <user>Odis</user>
    <text>So probably put it in the template and have it do it, or something like that.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T19:38:30.000123</ts>
    <user>Odis</user>
    <text>Anyway, thanks.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:14:04.000109</ts>
    <user>Carlyn</user>
    <text>&lt;@Odis&gt; &lt;@Lynna&gt; I'm probably missing something here, but why doesn't syntax-local-lift-require do the trick?</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:17:18.000129</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; Because I…err…didn’t know of its existence. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:17:25.000272</ts>
    <user>Odis</user>
    <text>Thanks for pointing it out to me. :heart:</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:23:36.000086</ts>
    <user>Carlyn</user>
    <text>&lt;@Odis&gt; I think `#%namespaced` from that old PR of mine basically does this for you &lt;https://github.com/lexi-lambda/racket/blob/0ef4118f876eb2d565be7d5345690e789ab698b1/racket/collects/racket/private/namespaced-transformer.rkt&gt;</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:27:05.000097</ts>
    <user>Odis</user>
    <text>Oh cool, thanks.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:28:00.000286</ts>
    <user>Odis</user>
    <text>Sadly, when I use take `syntax-local-lift-require` out of the toy example and put it in my actual project, I get an ambiguous binding error:
```
editest.rkt:3:22: vertical-block$:elaborate: identifier's binding is ambiguous
  context...:
   #(78302 module) #(78303 module editest 0) #(78313 macro) #(78316 local)
   #(78317 intdef)
  matching binding...:
   #&amp;lt;module-path-index:(editor)&amp;gt;
   #(78302 module) #(78303 module editest 0)
  matching binding...:
   #&amp;lt;module-path-index:(editor/stdlib)&amp;gt;
   #(78303 module editest 0) #(78313 macro)
  in: vertical-block$:elaborate
  context...:
   standard-module-name-resolver
```</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:28:06.000109</ts>
    <user>Odis</user>
    <text>So now I get to detangle that.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:28:11.000060</ts>
    <user>Odis</user>
    <text>Anyway, thanks &lt;@Carlyn&gt;</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:28:44.000356</ts>
    <user>Carlyn</user>
    <text>I’d try and make sure you’re using `syntax-local-introduce` appropriately and stripping all the other scopes.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:29:25.000169</ts>
    <user>Ozell</user>
    <text>Can someone help me with this, I am struggling.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:29:32.000115</ts>
    <user>Ozell</user>
    <text>We are asked to help out with a new software for manipulating images. The team needs us to write a function that will detect if an image is larger than some other image. An image is larger than another image when both the width and height of the first image is larger than the width and height of the second image.

Design a function called image&amp;gt;? that consumes two images and returns #true when the height and width of the first image is larger than the height and width of the second image.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:30:29.000136</ts>
    <user>Ozell</user>
    <text>I am attempting to learn racket and trying to write this code but cant grasp it. Any help would be awesome. Thanks</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:31:47.000079</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; `syntax-local-introduce` didn’t work, but: `(datum-&amp;gt;syntax #f (syntax-&amp;gt;datum #'modname))` did.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:32:01.000046</ts>
    <user>Odis</user>
    <text>I’m sure there’s a better way to strip away other lexical information though. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:32:05.000135</ts>
    <user>Odis</user>
    <text>Anyway, thanks again.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:32:08.000312</ts>
    <user>Carlyn</user>
    <text>&lt;@Odis&gt; yes, that’s what I mean by “stripping the other scopes”</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:32:21.000300</ts>
    <user>Carlyn</user>
    <text>but I think you probably want to do that _plus_ `syntax-local-introduce`</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:32:46.000302</ts>
    <user>Carlyn</user>
    <text>(that is, call `syntax-local-introduce` on the result of the call to `syntax-local-lift-require` to avoid the macro-introduction scope)</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:32:56.000321</ts>
    <user>Carlyn</user>
    <text>but that’s maybe not really necessary</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:33:06.000310</ts>
    <user>Odis</user>
    <text>Oh,  interesting…</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:33:14.000008</ts>
    <user>Odis</user>
    <text>Well I’ll keep that in mind.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:33:32.000072</ts>
    <user>Odis</user>
    <text>I honestly haven’t been able to find a good intuition as to when I need `syntax-local-introduce` and when I don’t.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:33:35.000089</ts>
    <user>Carlyn</user>
    <text>The `#%namespaced` form uses a function that strips the lexical information but preserves source locations: &lt;https://github.com/lexi-lambda/racket/blob/0ef4118f876eb2d565be7d5345690e789ab698b1/racket/collects/racket/private/namespaced-transformer.rkt#L9-L23&gt;</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:33:43.000157</ts>
    <user>Odis</user>
    <text>(And when I do but the error is not immediately obvious…)</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:33:53.000031</ts>
    <user>Carlyn</user>
    <text>I only understood `syntax-local-introduce` after I learned about the sets-of-scopes expander.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:34:00.000338</ts>
    <user>Odis</user>
    <text>That makes sense.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:34:16.000255</ts>
    <user>Odis</user>
    <text>I don’t care about source locations in this instance, but thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:34:30.000346</ts>
    <user>Odis</user>
    <text>(I don’t care because no user will ever see them. :wink: )</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:34:41.000346</ts>
    <user>Odis</user>
    <text>I mean, I know what `syntax-local-introduce` does.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:34:47.000335</ts>
    <user>Odis</user>
    <text>It makes perfect sense what it does.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:35:01.000130</ts>
    <user>Carlyn</user>
    <text>&lt;@Ozell&gt; That sounds like homework, so we will probably not answer directly, but we might be able to help if you describe specifically what you are confused about.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:35:03.000284</ts>
    <user>Odis</user>
    <text>I just haven’t been able to get a good intuition of when I need to use it, you know?</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:35:34.000195</ts>
    <user>Carlyn</user>
    <text>It’s definitely subtle. But I know too much now, and I can’t remember not knowing it.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:36:36.000240</ts>
    <user>Carlyn</user>
    <text>The main instances in which I get confused about `syntax-local-introduce` these days are when certain functions implicitly apply `syntax-local-introduce` in ways that don’t seem well-documented.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:36:39.000052</ts>
    <user>Odis</user>
    <text>Ya, that makes sense.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:37:33.000369</ts>
    <user>Odis</user>
    <text>Also, I tend to agree with &lt;@Gaynell&gt; that ideally `syntax-local-introduce` should be an internal detail.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:37:49.000084</ts>
    <user>Odis</user>
    <text>It just…can’t…because its hard to create the theory for it.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:38:01.000206</ts>
    <user>Odis</user>
    <text>(Given how powerful racket’s macro system is.)</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:38:12.000223</ts>
    <user>Carlyn</user>
    <text>I think Racket’s macro system suffers a little bit from a variety of functions that try to have a “do what I mean” feel to them, which works okay for simple macros, but you need to understand what’s going on under the covers to do _really_ weird things, and the implicit behavior makes it harder to reason about.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:38:27.000113</ts>
    <user>Carlyn</user>
    <text>Like how `identifier-binding` implicitly shifts the phase, as you bumped into earlier.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:38:29.000323</ts>
    <user>Odis</user>
    <text>But sure, how did you get a good intuition for when you need it?</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:38:48.000249</ts>
    <user>Odis</user>
    <text>Like, I get when you need to use custom syntax introducers, as well as custom syntax delta introducers.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:39:04.000123</ts>
    <user>Odis</user>
    <text>Its just specifically flipping the macro scope. :wink:</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:39:32.000184</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; Oh yes, I absolutely agree.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:39:45.000395</ts>
    <user>Carlyn</user>
    <text>Right. And I’m not sure there is more to it than that, in isolation. I guess the hard part is learning when you need/want the macro scope and when you don’t?</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:39:59.000146</ts>
    <user>Odis</user>
    <text>There is so many useful things that are just…weird.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:40:14.000127</ts>
    <user>Odis</user>
    <text>And either they’re not documented, or they are, but its a wall of technical details.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:40:32.000216</ts>
    <user>Odis</user>
    <text>mmm…good point.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:40:37.000373</ts>
    <user>Odis</user>
    <text>Well in that case I have that.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:41:07.000356</ts>
    <user>Odis</user>
    <text>I just guess I don’t find it satisfying. Oh well.¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:41:45.000188</ts>
    <user>Carlyn</user>
    <text>The name of `syntax-local-introduce` is sort of indicative of this DWIM intent, I think… the name is not “`syntax-local-flip-macro-introduction-scope`” because, in simple situations, you use `syntax-local-introduce` to really introduce a binding into the surrounding scope? So it’s named in such a way that the scope-flipping is supposed to be an implementation detail.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:42:12.000116</ts>
    <user>Odis</user>
    <text>Ehh…</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:42:21.000123</ts>
    <user>Carlyn</user>
    <text>But I never managed to build an intuition for it until I understood what it actually did (i.e. flipped the scope), so I don’t think that abstraction is very watertight.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:42:22.000118</ts>
    <user>Odis</user>
    <text>But even in simple case, its better to use  #:with …</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:42:43.000011</ts>
    <user>Carlyn</user>
    <text>`#:with` doesn’t adjust scopes at all, though? I don’t follow… what is the relationship?</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:43:32.000042</ts>
    <user>Odis</user>
    <text>I mean, for introducing new piece of syntax.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:43:37.000422</ts>
    <user>Odis</user>
    <text>a new piece of syntax.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:43:49.000061</ts>
    <user>Odis</user>
    <text>Which is why syntax-local-introduce is kind of…an odd name choice.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:44:09.000296</ts>
    <user>Odis</user>
    <text>But ya, syntax-local-flip-the…. is ..well…ya.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:44:55.000408</ts>
    <user>Carlyn</user>
    <text>Well, `syntax-local-introduce` is about introducing a binding into the enclosing, relative-phase-0 scope. `#:with` is just about binding a pattern variable for use in phase 1 macro code. So I don’t think there’s much of a conflict/ambiguity there?</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:46:11.000187</ts>
    <user>Odis</user>
    <text>There isn’t.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:46:39.000112</ts>
    <user>Carlyn</user>
    <text>I guess what I’m saying is that Racket tries to be a declarative macro system in the spirit of the original syntax-rules, and it is pretty good at that for a lot of simple things, but I think the abstraction totally breaks down once you start doing slightly nontrivial hygiene bending.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:47:06.000121</ts>
    <user>Carlyn</user>
    <text>Which isn’t _necessarily_ bad? It’s just an observation.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:47:14.000027</ts>
    <user>Odis</user>
    <text>But its a common pattern to use with combined with format-id to break hygiene. Which in my monkey brain sounds like introducing new syntax.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:47:40.000206</ts>
    <user>Odis</user>
    <text>I’m not saying theirs a conflict, just an unfortunate name choice that fucks with my personal intuition. :wink:</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:47:54.000459</ts>
    <user>Carlyn</user>
    <text>Right… the subtlety there is that `format-id` copies the lexical context from another piece of syntax, and that syntax already has the macro-introduction scope. :upside_down_face:</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:48:05.000274</ts>
    <user>Odis</user>
    <text>Yup</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:48:09.000164</ts>
    <user>Odis</user>
    <text>exactly</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:48:23.000172</ts>
    <user>Odis</user>
    <text>Still….you can’t ‘choose’ what fucks with your brain sadly. :disappointed:</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:49:12.000010</ts>
    <user>Odis</user>
    <text>And ya, I am okay with it being mostly declarative,  but the current implementation leads to some leaky cases that causes programmers in other languages to shy away from it.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:50:57.000247</ts>
    <user>Carlyn</user>
    <text>Definitely! I think the general failure to properly develop any book or documentation that introduces the low-level macro programming facilities gives at least some reason to think that maybe it’s just too complicated (though a simple lack of time is a big part of that problem, too).</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:52:16.000279</ts>
    <user>Carlyn</user>
    <text>I don’t know how to make it better, though. I’m not sure there’s a simpler or more internally-consistent formulation that makes sense?</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:53:42.000505</ts>
    <user>Odis</user>
    <text>Maybe.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:53:54.000440</ts>
    <user>Odis</user>
    <text>That is the problem &lt;@Gaynell&gt; is trying to solve.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:54:05.000242</ts>
    <user>Odis</user>
    <text>Its also what set of scopes tried to solve.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:54:28.000203</ts>
    <user>Odis</user>
    <text>But every solution seems to break down when you get syntax-local-* and local-expand related stuff.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:54:40.000074</ts>
    <user>Odis</user>
    <text>(Every solution that I’m aware of anyone trying.)</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:55:01.000238</ts>
    <user>Odis</user>
    <text>I’m still keeping my fingers crossed that there is actually a nice clean mathematical model.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:55:33.000005</ts>
    <user>Carlyn</user>
    <text>I know some of &lt;@Gaynell&gt;’s thoughts, though I do personally find sets-of-scopes _relatively_ easy to understand, probably with the exception of inside/outside-edge scopes (which I know are one of Michael’s pet peeves).</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:56:54.000233</ts>
    <user>Carlyn</user>
    <text>It’s just that Racket doesn’t really provide a direct interface to sets-of-scopes. Or, well… it does, but the names are all different! And different functions implicitly do all sorts of different things based on different edge cases and circumstances.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:56:55.000228</ts>
    <user>Odis</user>
    <text>Oh yes</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:56:59.000009</ts>
    <user>Odis</user>
    <text>I absolutely agree.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:57:09.000217</ts>
    <user>Odis</user>
    <text>Compared to the mark/anti-mark model, scope sets are a godsend.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:57:16.000274</ts>
    <user>Odis</user>
    <text>I just don’t think its simple enough. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:57:45.000299</ts>
    <user>Odis</user>
    <text>Hmm..</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:57:51.000448</ts>
    <user>Odis</user>
    <text>Interesting.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:58:18.000293</ts>
    <user>Odis</user>
    <text>I wonder what it would be like to use a macro system that is still scope sets, but tried, as a principle, to avoid having special cases.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T20:58:28.000115</ts>
    <user>Odis</user>
    <text>Like, would it be nice to program in.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:00:09.000273</ts>
    <user>Carlyn</user>
    <text>Right. Do you think understanding procedural macros would be easier or harder if we had functions like `make-fresh-scope` instead of `make-syntax-introducer`, `identifier-bindings=?` instead of `free-identifier=?`, and `identifier-scopes=?` instead of `bound-identifier=?`? I don’t know. Maybe it’d be a lateral move.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:01:44.000314</ts>
    <user>Carlyn</user>
    <text>And don’t get me started on `syntax-local-identifier-as-binding`. :)</text>
  </message>
  <message conversation_id="49">
    <ts>2018-01-18T21:07:12.000057</ts>
    <user>Odis</user>
    <text>lol…</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:07:21.000389</ts>
    <user>Odis</user>
    <text>I 100% think it would be easier for crazy stuff.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:07:29.000351</ts>
    <user>Odis</user>
    <text>I just don’t know about simple stuff.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:07:45.000415</ts>
    <user>Odis</user>
    <text>And its not really a system where you can have a ‘simpler’ api and a ‘complex’ api.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:07:49.000218</ts>
    <user>Carlyn</user>
    <text>That’s my feeling, too. Maybe it doesn’t make sense for them to share the same names, or even the same set of functions.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:07:50.000003</ts>
    <user>Odis</user>
    <text>Because that would be worse.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:08:25.000108</ts>
    <user>Carlyn</user>
    <text>I think it’s not impossible to have a low-level and high-level API. We already have syntax/parse ways of doing things that are different from older approaches.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:10:00.000003</ts>
    <user>Odis</user>
    <text>True.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:10:27.000156</ts>
    <user>Odis</user>
    <text>Although to be fair, the current way our docs introduce macros to new people is kind of…bleh? you know?</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:10:59.000431</ts>
    <user>Odis</user>
    <text>Like, they introduce simple syntax-rules like macros, and then sort of jump in at the deep end.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:11:13.000255</ts>
    <user>Odis</user>
    <text>I really prefer &lt;@Bertha&gt;’s approach in fear of macros.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:11:24.000194</ts>
    <user>Odis</user>
    <text>Where he gives you a simple understanding of the model.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:11:29.000307</ts>
    <user>Odis</user>
    <text>Which you can then build on.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:11:57.000314</ts>
    <user>Odis</user>
    <text>So, like, if we were to do that, I would (ideally) want the simple api to grow into the complex api.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:12:18.000011</ts>
    <user>Odis</user>
    <text>So that new programmers have a path for how to do progressively more crazy things.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:12:48.000050</ts>
    <user>Carlyn</user>
    <text>I think it’s hard to have a one-size-fits all approach to teaching macros, since for many people, `syntax-rules` (or `define-simple-macro`, as the case may be) is enough.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:13:35.000081</ts>
    <user>Odis</user>
    <text>Yup</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:13:43.000129</ts>
    <user>Odis</user>
    <text>I never said it was easy.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:13:47.000246</ts>
    <user>Odis</user>
    <text>It might even be impossible.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:14:11.000076</ts>
    <user>Odis</user>
    <text>Still, its a thing that I strive for…at least ideally.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-18T21:14:23.000190</ts>
    <user>Odis</user>
    <text>I’d also like a solution to the halting problem and a unicorn. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="50">
    <ts>2018-01-18T23:20:39.000378</ts>
    <user>Helena</user>
    <text>Anyone know how to go from "an identifier exported by Typed Racket" to "the identifier that the programmer defined, before Typed Racket created a new identifier to protect the export" ?</text>
  </message>
  <message conversation_id="50">
    <ts>2018-01-18T23:21:03.000242</ts>
    <user>Helena</user>
    <text>This github comment has some more details: &lt;https://github.com/racket/typed-racket/pull/422#issuecomment-358862732&gt;</text>
  </message>
  <message conversation_id="50">
    <ts>2018-01-18T23:46:51.000345</ts>
    <user>Carlyn</user>
    <text>&lt;@Helena&gt; Dang, before I finished reading your question, my instinct was to respond with “I think there’s an `unsafe-reprovide` form or something that does that”. :)</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-19T09:26:18.000642</ts>
    <user>Odis</user>
    <text>&lt;@Helena&gt; Wasn’t that what Milo D. was trying to do for a while? Do you know if he ever succeeded?</text>
  </message>
  <message conversation_id="50">
    <ts>2018-01-19T10:13:46.000293</ts>
    <user>Helena</user>
    <text>This question is easier. I'm ~at phase 1 and~ in typed code. (edit: milo was at phase 1 too, but working with fully expanded untyped code)</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-19T15:23:41.000597</ts>
    <user>Odis</user>
    <text>OH, oka.</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-19T15:23:43.000276</ts>
    <user>Odis</user>
    <text>okay*</text>
  </message>
  <message conversation_id="47">
    <ts>2018-01-19T15:24:47.000468</ts>
    <user>Odis</user>
    <text>Well in that case &lt;@Carlyn&gt;’s `unsafe-reprovide`’s implementation might actually tell you what you need.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:31:34.000387</ts>
    <user>Carlyn</user>
    <text>Hmm? I don’t have an `unsafe-reprovide` implementation…</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:55:23.000338</ts>
    <user>Alesha</user>
    <text>how do I make subcollections? I have a main collection, and would like to group several collections under that main collection. I'm not seeing how to do that in the documentation or the user mailing list.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:57:18.000026</ts>
    <user>Helena</user>
    <text>&lt;@Alesha&gt; I think you just need to make a directory</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:57:53.000477</ts>
    <user>Helena</user>
    <text>if you have a package that defines the `foo` collection, you can define the `foo/bar` collection and `foo/bar/baz` collections by putting directories inside `foo/`</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:59:07.000217</ts>
    <user>Alesha</user>
    <text>I thought so too but am getting module not found errors, for example `(require main/sub)` is giving me main/sub.rkt not found. The main.rkt in the sub directory isn't being found</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:59:17.000770</ts>
    <user>Alesha</user>
    <text>maybe I screwed up something, I'll try redoing it from scratch</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:59:27.000236</ts>
    <user>Helena</user>
    <text>no you're okay</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:59:34.000138</ts>
    <user>Helena</user>
    <text>there's something confusing here</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:59:42.000319</ts>
    <user>Alesha</user>
    <text>yeah definitely</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:59:46.000393</ts>
    <user>Helena</user>
    <text>`(require main)` will go to `main/main.rkt`</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T15:59:56.000469</ts>
    <user>Helena</user>
    <text>`(require main/sub)` will go to `main/sub.rkt`</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:00:04.000623</ts>
    <user>Alesha</user>
    <text>I was thinking collections and subcollections correspond to a directory structure but maybe I'm mistaken?</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:00:07.000514</ts>
    <user>Helena</user>
    <text>`(require main/sub/a)` will go to `main/sub/a.rkt`</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:00:09.000375</ts>
    <user>Alesha</user>
    <text>ok</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:00:11.000157</ts>
    <user>Alesha</user>
    <text>hmm</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:00:30.000185</ts>
    <user>Helena</user>
    <text>so there's a special case for just a collection name (goes to main.rkt)</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:00:37.000440</ts>
    <user>Helena</user>
    <text>and the others are filepaths without `.rkt`</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:00:45.000447</ts>
    <user>Alesha</user>
    <text>ok I think I see now</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:01:10.000764</ts>
    <user>Carlyn</user>
    <text>this is documented here &lt;http://docs.racket-lang.org/reference/require.html#%28form._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._lib%29%29&gt;</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:01:17.000380</ts>
    <user>Alesha</user>
    <text>will experiment by using your examples</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:01:47.000268</ts>
    <user>Helena</user>
    <text>another link: &lt;http://docs.racket-lang.org/reference/collects.html&gt;</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:02:20.000386</ts>
    <user>Alesha</user>
    <text>&lt;@Carlyn&gt; I did read that documentation but I was confused because I thought `(require main/sub)` would map to main.rkt in the directory main/sub</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:03:12.000120</ts>
    <user>Carlyn</user>
    <text>&amp;gt; If a single `rel-string` is provided, and if it consists of multiple `/`-separated elements, then each element up to the last names a collection, subcollection, etc., and *the last element names a file*. If the last element has no file suffix, `".rkt"` is added, while a `".ss"` suffix is converted to `".rkt"`.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:03:18.000449</ts>
    <user>Carlyn</user>
    <text>(emphasis mine)</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:03:55.000302</ts>
    <user>Alesha</user>
    <text>indeed, that is clear to me now</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:05:22.000064</ts>
    <user>Letha</user>
    <text>Hi folks! I sent this to the mailing list too... but you know, people slack nowadays. Please excuse the big copy paste...</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:05:26.000043</ts>
    <user>Letha</user>
    <text>''' Here's what I see... any ideas? 

I've been running it under dtruss/dtrace to try and spot what is different, but so far no luck.

If run the IDE it also works!

bash-3.2$ racket
Welcome to Racket v6.11.
standard-module-name-resolver: collection not found
  for module path: (submod (lib "racket/init") configure-runtime)
  collection: "racket"
  in collection directories:
   /usr/local/collects
   /usr/local/Cellar/minimal-racket/6.11/share/racket/pkgs/racket-lib
  context...:
   show-collection-err
   standard-module-name-resolver
standard-module-name-resolver: collection not found
  for module path: racket/interactive
  collection: "racket"
  in collection directories:
   /usr/local/collects
   /usr/local/Cellar/minimal-racket/6.11/share/racket/pkgs/racket-lib
  context...:
   show-collection-err
   standard-module-name-resolver
standard-module-name-resolver: collection not found
  for module path: racket/base
  collection: "racket"
  in collection directories:
   /usr/local/collects
   /usr/local/Cellar/minimal-racket/6.11/share/racket/pkgs/racket-lib
  context...:
   show-collection-err
   standard-module-name-resolver

bash-3.2$ sudo racket
Password:
Welcome to Racket v6.11.
&amp;gt; "totally works"
"totally works"
&amp;gt;</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:05:55.000644</ts>
    <user>Helena</user>
    <text>haha, I saw you joined slack &amp;amp; was about to reply to your mail</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:06:10.000105</ts>
    <user>Letha</user>
    <text>I've checked permissions (as best I can tell) and no luck!</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:06:16.000238</ts>
    <user>Helena</user>
    <text>:(</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:06:33.000609</ts>
    <user>Helena</user>
    <text>yeah I'm not sure what's wrong, but can you install from `&lt;http://download.racket-lang.org|download.racket-lang.org&gt;` instead of brew?</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:07:18.000287</ts>
    <user>Letha</user>
    <text>That was how I started... which worked for the IDE, but not the command line. I can certainly try again.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:07:57.000432</ts>
    <user>Helena</user>
    <text>oh</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:08:12.000554</ts>
    <user>Helena</user>
    <text>you mean you used the installer and typing `racket` on the command line didn't do anything?</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:08:13.000387</ts>
    <user>Letha</user>
    <text>Also - I think the cask install uses the .dmg version available there.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:08:37.000358</ts>
    <user>Letha</user>
    <text>It just gave me the error messages above.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:09:11.000117</ts>
    <user>Letha</user>
    <text>Again - it works when I ``` sudo racket ```, which makes it sound like a permission issue.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:10:36.000353</ts>
    <user>Letha</user>
    <text>(re, re installing....)</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:15:02.000027</ts>
    <user>Letha</user>
    <text>The .dmg puts it in Applications, so running from there generates:</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:15:38.000057</ts>
    <user>Letha</user>
    <text>/Applications/Racket\ v6.11/bin/racket
Welcome to Racket v6.11.
default-load-handler: cannot open module file
  module path: (lib "racket/init")
  path: /Applications/Racket v6.11/share/pkgs/racket-x86_64-macosx-2/racket/init.rkt
  system error: No such file or directory; errno=2
  context...:
   standard-module-name-resolver
default-load-handler: cannot open module file
  module path: racket/interactive
  path: /Applications/Racket v6.11/share/pkgs/racket-x86_64-macosx-2/racket/interactive.rkt
  system error: No such file or directory; errno=2
  context...:
   standard-module-name-resolver
default-load-handler: cannot open module file
  module path: racket/base
  path: /Applications/Racket v6.11/share/pkgs/racket-x86_64-macosx-2/racket/base.rkt
  system error: No such file or directory; errno=2
  context...:
   standard-module-name-resolver
bash-3.2$</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:18:43.000228</ts>
    <user>Letha</user>
    <text>Which is true, since only info.rkt is in that file. However, if I launch the IDE from the finder, it works. :_(</text>
  </message>
  <message conversation_id="52">
    <ts>2018-01-19T16:19:34.000027</ts>
    <user>Helena</user>
    <text>you got this from brew cask?</text>
  </message>
  <message conversation_id="52">
    <ts>2018-01-19T16:19:43.000216</ts>
    <user>Letha</user>
    <text>And when running as root,</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:19:45.000127</ts>
    <user>Letha</user>
    <text>bash-3.2$ sudo /Applications/Racket\ v6.11/bin/racket
Password:
Welcome to Racket v6.11.
&amp;gt;</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:20:14.000170</ts>
    <user>Letha</user>
    <text>I downloaded it directly. Just turns out that the cask install also uses the .dmg</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:21:29.000666</ts>
    <user>Letha</user>
    <text>I've be looking at dtruss outputs and there is a difference in search directories before it fails... but it doesn't make any sense to me.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:23:16.000594</ts>
    <user>Helena</user>
    <text>it sounds like Racket is trying to resolve ` (lib "racket/init")` into a filesystem path &amp;amp; failing</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:23:38.000265</ts>
    <user>Helena</user>
    <text>I think `racket/init` should be at `/Applications/Racket v6.11/racket/collects/racket/init.rkt`</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:23:49.000601</ts>
    <user>Helena</user>
    <text>but that's all I know, sorry</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:25:27.000023</ts>
    <user>Letha</user>
    <text>Well... at least its not something completely obvious :slightly_smiling_face:</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:27:31.000455</ts>
    <user>Odis</user>
    <text>oey, this is weird.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:27:45.000576</ts>
    <user>Odis</user>
    <text>I need to figure out a way to test this.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:29:27.000275</ts>
    <user>Letha</user>
    <text>FYI</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:29:28.000081</ts>
    <user>Letha</user>
    <text>ProductName:	Mac OS X
ProductVersion:	10.12.4
BuildVersion:	16E195</text>
  </message>
  <message conversation_id="52">
    <ts>2018-01-19T16:30:09.000489</ts>
    <user>Odis</user>
    <text>Okay</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:30:21.000380</ts>
    <user>Odis</user>
    <text>Are you also using Racket from `brew` or `brew cask`?</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:30:29.000362</ts>
    <user>Odis</user>
    <text>(iirc one is minimal and the other is not)</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:31:24.000452</ts>
    <user>Letha</user>
    <text>I just installed via the .dmg, and dragging into Applications, and then running the "configure command line tools" under help</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:32:10.000470</ts>
    <user>Letha</user>
    <text>I've also tried both the `minimal` and `brew cask` versions with same results</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:34:30.000312</ts>
    <user>Letha</user>
    <text>In looking @ the dtruss output, the first difference is an "Err#60" after setting up some 'ioctls' on stdout and stderr. I don't see then when running as root.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:34:37.000039</ts>
    <user>Letha</user>
    <text>'''ioctl(0x1, 0x4004667A, 0x7FFF56C425AC)		 = 0 0
ioctl(0x2, 0x4004667A, 0x7FFF56C425AC)		 = 0 0
mmap(0x0, 0x10000, 0x7, 0x1002, 0xFFFFFFFF, 0x0)		 = 0x10A2C4000 0
__semwait_signal(0xB03, 0x0, 0x1)		 = -1 Err#60'''</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:37:34.000092</ts>
    <user>Letha</user>
    <text>but permissions look OK</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:37:42.000329</ts>
    <user>Letha</user>
    <text>```ls -lat /dev/fd/{0,1,2}
crw--w----  1 scott  tty   16,   0 Jan 19 13:36 /dev/fd/0
crw--w----  1 scott  tty   16,   0 Jan 19 13:36 /dev/fd/1
crw--w----  1 scott  tty   16,   0 Jan 19 13:36 /dev/fd/2 ```</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:38:52.000717</ts>
    <user>Odis</user>
    <text>Hmm…I’m having some trouble replicating it. Any luck &lt;@Helena&gt;</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:38:56.000339</ts>
    <user>Odis</user>
    <text>?*</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:40:50.000589</ts>
    <user>Helena</user>
    <text>nope, I can `brew cask install racket; /Applications/Racket\ v6.11/bin/racket` no problem</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:41:28.000126</ts>
    <user>Odis</user>
    <text>I am running 10.11, so that may have something to do with it.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:41:32.000383</ts>
    <user>Odis</user>
    <text>(OS X 10.11)</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:41:53.000035</ts>
    <user>Odis</user>
    <text>what are you on?</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:42:04.000031</ts>
    <user>Helena</user>
    <text>me too, 10.11.1</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:45:43.000617</ts>
    <user>Odis</user>
    <text>Interesting.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:45:50.000127</ts>
    <user>Odis</user>
    <text>I wonder if its a 10.12 issue then.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:45:54.000420</ts>
    <user>Letha</user>
    <text>My buddies have had no problems, I'll find out what version they're running.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:50:07.000388</ts>
    <user>Odis</user>
    <text>Okay cool</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:50:31.000058</ts>
    <user>Odis</user>
    <text>Also wow…apparently everyone else in the lab (at least as of this evening) is on os x 10.11 or 10.10…</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:50:44.000231</ts>
    <user>Odis</user>
    <text>(I think the ones that are on newer systems are out at the moment…)</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T16:52:42.000648</ts>
    <user>Letha</user>
    <text>Can't remember what induced me to upgrade... I'm usually a laggard!</text>
  </message>
  <message conversation_id="53">
    <ts>2018-01-19T17:01:23.000292</ts>
    <user>Helena</user>
    <text>would you want to try building from source + built packages? Instructions:</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:01:29.000351</ts>
    <user>Helena</user>
    <text>download this &lt;https://mirror.racket-lang.org/installers/6.11/racket-6.11-src-builtpkgs.tgz&gt;</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:01:40.000455</ts>
    <user>Helena</user>
    <text>unzip, `cd` to `racket/src`</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:01:48.000075</ts>
    <user>Helena</user>
    <text>`mkdir build; cd build`</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:01:56.000387</ts>
    <user>Helena</user>
    <text>`../configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install`</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:02:37.000523</ts>
    <user>Helena</user>
    <text>and that should make a `bin` folder at the top of the unzipped folder</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:03:35.000481</ts>
    <user>Letha</user>
    <text>At this point, sure! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:04:04.000204</ts>
    <user>Letha</user>
    <text>Will lyk</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:11:08.000069</ts>
    <user>Letha</user>
    <text>My friend is on 12.3 and is OK. Also - build error:</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:11:12.000447</ts>
    <user>Letha</user>
    <text>```/Applications/Xcode.app/Contents/Developer/usr/bin/make xsrc/precomp.h
env XFORM_PRECOMP=yes ../racketcgc  -cqu ../../../racket/gc2/xform.rkt --setup . --depends --cpp "gcc -E -I./.. -I../../../racket/gc2/../include -I../../../racket/gc2/../../rktio -I../../rktio -g -O2  -DOS_X -D_DARWIN_UNLIMITED_SELECT  -fno-common -DUSE_SENORA_GC  -Wno-nullability-completeness  "  --keep-lines -o xsrc/precomp.h ../../../racket/gc2/precomp.c
default-load-handler: cannot open module file
  module path: racket/base
  path: /Users/scott/Downloads/racket-6.11/share/pkgs/draw-lib/racket/base.rkt
  system error: No such file or directory; errno=2
  context...:
   standard-module-name-resolver
   /Users/scott/Downloads/racket-6.11/src/racket/gc2/xform.rkt:97:24
   retry
   /Users/scott/Downloads/racket-6.11/src/racket/gc2/xform.rkt: [running body]
make[4]: *** [xsrc/precomp.h] Error 1
make[3]: *** [all] Error 2
make[2]: *** [3m] Error 2
make[1]: *** [3m] Error 2
make: *** [all] Error 2```</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:17:52.000556</ts>
    <user>Helena</user>
    <text>:( thank you for trying</text>
  </message>
  <message conversation_id="53">
    <ts>2018-01-19T17:22:04.000068</ts>
    <user>Letha</user>
    <text>Well - now I'm wondering what's up! The file 'path: /Users/scott/Downloads/racket-6.11/share/pkgs/draw-lib/racket/base.rkt' is NOT in the /share/.../draw-lib/racket directory</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:30:46.000539</ts>
    <user>Lynna</user>
    <text>&lt;@Letha&gt; Do you have any environment variables set, especially ones that include "PLT" in the name?</text>
  </message>
  <message conversation_id="54">
    <ts>2018-01-19T17:30:55.000037</ts>
    <user>Lynna</user>
    <text>Maybe `PLTCOLLECTS`?</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:31:23.000231</ts>
    <user>Letha</user>
    <text>maybe... :confused:</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:31:38.000093</ts>
    <user>Letha</user>
    <text>that would explain a thing or two..</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:33:40.000540</ts>
    <user>Letha</user>
    <text>And we're building again... :slightly_smiling_face:</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:34:56.000270</ts>
    <user>Lynna</user>
    <text>If you had environment variables set, you may not need to build after all. That would affect all of your attempts to run Racket.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:36:16.000193</ts>
    <user>Letha</user>
    <text>Yep - I thought sudo left your local env alone and just elevated your permissions, but it resets the env! Honestly - it's the first thing that should have occured to me.</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:37:30.000075</ts>
    <user>Letha</user>
    <text>And ALL is well. THANKS EVERYONE!</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:37:34.000253</ts>
    <user>Lynna</user>
    <text>I didn't know that either, but it does make sense in retrospect</text>
  </message>
  <message conversation_id="51">
    <ts>2018-01-19T17:38:17.000081</ts>
    <user>Letha</user>
    <text>btw... it was from years ago. Fun to have a reason to be back in the world of modern schemes!</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:44:53.000263</ts>
    <user>Wally</user>
    <text>Running `raco setup -D &amp;lt;collection&amp;gt;` compiles modules but not docs. Is there a way to invert this, to _only_ compile docs?</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:46:11.000208</ts>
    <user>Helena</user>
    <text>I don't think so. (It would be impossible to build some docs if some compiled files were out of date.)</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:47:57.000231</ts>
    <user>Wally</user>
    <text>Then is it possible to make raco compile only when needed, like make?</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:48:42.000035</ts>
    <user>Wally</user>
    <text>Or am I missing some bigger picture? I develop in Emacs, FWIW.</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:49:41.000085</ts>
    <user>Helena</user>
    <text>if you run `raco make file.rkt` on the same file twice, racket won't re-compile it</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:50:20.000341</ts>
    <user>Helena</user>
    <text>and `raco setup collection-name` should run a little faster if only documentation changed since the last setup</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:50:25.000008</ts>
    <user>Helena</user>
    <text>does that help?</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:50:38.000315</ts>
    <user>Wally</user>
    <text>Sure, thansk &lt;@Helena&gt;.</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:51:45.000152</ts>
    <user>Wally</user>
    <text>I was hoping for an easy `raco setup` switch because recompiling takes "forever."</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:53:03.000192</ts>
    <user>Wally</user>
    <text>Like 10 seconds sometimes</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T18:53:59.000069</ts>
    <user>Carlyn</user>
    <text>`raco setup`, by default, inspects everything to see if it needs to be rebuilt, but it will still only actually rebuild things that changed. You can restrict the things it checks by passing a package with `--pkgs` or a collection with `-l`.</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T19:00:35.000313</ts>
    <user>Wally</user>
    <text>On my computer, it takes ~4.5 secs to run `raco setup &amp;lt;collection&amp;gt;` with no changes. Most of that time is on `raco setup: --- building documentation ---`.</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T19:04:19.000064</ts>
    <user>Wally</user>
    <text>&lt;@Carlyn&gt; the switches have no effect on run time. Compiling after a small change to docs pushes the dining time to 11 seconds, where `raco setup` explains which scribble files are being compiled and rendered.</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T19:04:41.000237</ts>
    <user>Wally</user>
    <text>Haha dining time. Autocorrect must be hungry.</text>
  </message>
  <message conversation_id="55">
    <ts>2018-01-19T19:05:56.000049</ts>
    <user>Wally</user>
    <text>I guess 4 is better than 11, but both are higher than expected.</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:01:58.000110</ts>
    <user>Marnie</user>
    <text>does `raco setup` determine what changed based on timestamps of all files in collection directories?</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:04:48.000020</ts>
    <user>Marnie</user>
    <text>hmm, this section of docs suggests it just does whatever `raco make` does:
&amp;gt; Running raco setup is sensitive to the PLT_COMPILED_FILE_CHECK environment variable in the same way as raco make.
&lt;https://docs.racket-lang.org/raco/running.html&gt;</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:06:30.000063</ts>
    <user>Marnie</user>
    <text>and then in `raco make` it says it has to SHA1 hash every module to check for changes:
&amp;gt; The raco make command accept filenames for Racket modules to be compiled to bytecode format. Modules are re-compiled only if the source Racket file is newer than the bytecode file and has a different SHA-1 hash, or if any imported module is recompiled or has a different SHA-1 hash for its compiled form plus dependencies.</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:12:39.000123</ts>
    <user>Lynna</user>
    <text>Yes, `raco setup` / `raco make` checks the timestamp; it the timestamp is newer, then it double-checks the SHA-1. (It won't try a SHA-1 check if the timestamps are older.) It doesn't have to check modules recursively, though, so there are plenty of dependencies of just `racket/base` to check.</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:13:05.000119</ts>
    <user>Wally</user>
    <text>According to `raco setup -v &amp;lt;collection&amp;gt;`, ~50% of the time is while `using: &amp;lt;pkgs&amp;gt;/[...].scrbl`</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:14:00.000084</ts>
    <user>Wally</user>
    <text>And by `raco setup -D &amp;lt;collection&amp;gt;`, the other ~50% is deciding not to compile everything before docs.</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:20:13.000062</ts>
    <user>Marnie</user>
    <text>I think the primary way to speed it up would be architectural changes - `raco make` could rely on a daemon that listened for filesystem events for instance. Then the daemon could reliably tell `raco make` to skip entire directory trees.</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:22:09.000080</ts>
    <user>Marnie</user>
    <text>since AFAIK, it's not common for an OS to provide an API to get the timestamp of when any file in a directory tree changed (at least, not that's faster than just checking the timestamps of every file in the tree)</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:26:20.000046</ts>
    <user>Wally</user>
    <text>This would speed up my Linux workflow. Not sure how portable change notification is these days.</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:28:10.000091</ts>
    <user>Marnie</user>
    <text>No idea. Still need the daemon though, otherwise two distinct `raco make` calls have no way of sharing event listening state.</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:37:57.000195</ts>
    <user>Monserrate</user>
    <text>&lt;@Marnie&gt; I think there are other ways it could be optimized, for example racket looks at a lot of paths to find the right one, and avoiding some IO calls would help, I think</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:42:27.000053</ts>
    <user>Marnie</user>
    <text>&lt;@Monserrate&gt; by "primary way"  I mean that I think that approach is the only way to get an algorithmic speedup, such that the absolute minimum amount of IO syscall work running plain `raco setup` has to do is reduced from `O(module-files)` to `O(root-collection-directories) + O(changed-module-files)` - I'm sure there's room for other constant-factor improvements</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:43:38.000063</ts>
    <user>Monserrate</user>
    <text>another way to get algorithmic speedup is to do finer-grained dependency tracking, so that you can avoid looking at some files that are currently examined</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:45:33.000166</ts>
    <user>Marnie</user>
    <text>I don't know how that would work across two distinct `raco setup` calls - how could the second call know that all files in a collection tree can be skipped without checking the timestamps of each one and comparing to timestamps recorded in the first call? since nobody's listening for changes in between the two calls, the first call can't reliably record any information about whole directory tree change timestamps</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:46:41.000164</ts>
    <user>Monserrate</user>
    <text>i just mean that it could reduce the # of module-files in your equation</text>
  </message>
  <message conversation_id="56">
    <ts>2018-01-19T20:48:23.000142</ts>
    <user>Marnie</user>
    <text>hmm, I don't think I understand what you have in mind</text>
  </message>
  <message conversation_id="57">
    <ts>2018-01-20T19:16:00.000123</ts>
    <user>Leonard</user>
    <text>Hi, does anyone know how to use the &amp;lt;quote&amp;gt; in scribble?:disappointed_relieved:</text>
  </message>
  <message conversation_id="57">
    <ts>2018-01-20T20:08:03.000030</ts>
    <user>Helena</user>
    <text>which &amp;lt;quote&amp;gt; ?</text>
  </message>
  <message conversation_id="57">
    <ts>2018-01-20T20:08:34.000045</ts>
    <user>Helena</user>
    <text>(if you want to put a Racket value `v` in a scribble file, you can put an `@` in front of it --- like `@|v|`)</text>
  </message>
  <message conversation_id="57">
    <ts>2018-01-20T20:17:42.000091</ts>
    <user>Leonard</user>
    <text>My fault, it’s the &amp;lt;blockquote&amp;gt; actually! like the one rendered with indentation in HTML!</text>
  </message>
  <message conversation_id="57">
    <ts>2018-01-20T20:23:56.000071</ts>
    <user>Helena</user>
    <text>I think there isn't really a blockquote for scribble; but you can do `@nested[#:style 'inset]{This text will be indented}`</text>
  </message>
  <message conversation_id="57">
    <ts>2018-01-20T20:24:45.000046</ts>
    <user>Leonard</user>
    <text>Wow Thanks!</text>
  </message>
  <message conversation_id="58">
    <ts>2018-01-21T09:38:34.000050</ts>
    <user>Bertha</user>
    <text>I chuckled because when I see `&amp;lt;quote&amp;gt;` I made a mistake quoting a symbolic entity in an x-expression, e.g.:

```
#lang racket/base
(require xml)
(xexpr-&amp;gt;string '(p "yay" nbsp  "yay")) ;=&amp;gt; "&amp;lt;p&amp;gt;yay&amp;amp;nbsp;yay&amp;lt;/p&amp;gt;"
(xexpr-&amp;gt;string '(p "boo" 'nbsp "boo")) ;=&amp;gt; "&amp;lt;p&amp;gt;boo&amp;lt;quote&amp;gt;&amp;amp;nbsp;&amp;lt;/quote&amp;gt;boo&amp;lt;/p&amp;gt;"
```

(The other ingredient is the Racket reader expands `'thing` to `(quote thing)`.)</text>
  </message>
  <message conversation_id="58">
    <ts>2018-01-21T13:57:34.000117</ts>
    <user>Leonard</user>
    <text>To be honest I made the same mistake before I post the question here X )</text>
  </message>
  <message conversation_id="58">
    <ts>2018-01-22T09:18:34.000566</ts>
    <user>Bertha</user>
    <text>Whenever I haven't used x-exprs for a long time, I re-make that mistake at least once. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="59">
    <ts>2018-01-22T09:21:26.000293</ts>
    <user>Bertha</user>
    <text>" ' "Quoting is hard", he said', he said."</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T15:35:13.000545</ts>
    <user>Alesha</user>
    <text>I've gotten my raco tool into a bad state due to a malformed `raco-commands` definition in my package. As a result I'm now unable to invoke any of raco's commands due to errors raised when it attempts to read or parse its list of available raco commands. I'm guessing the best way to get out of this situation is to manually remove the bad command from raco's list but where to find that list?</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T15:52:41.000565</ts>
    <user>Lynna</user>
    <text>&lt;@Alesha&gt; You can run `racket -l setup` to do the same thing as `raco setup`, including un-registering any `raco` commands that you disable by editing the "info.rkt" file</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T15:53:29.000198</ts>
    <user>Odis</user>
    <text>So, in the following code, I (understandably) get an unbound identifier error: &lt;https://gist.github.com/LeifAndersen/ab54e9ede832d94b6e4fc49dcb39e008&gt;</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T15:54:10.000396</ts>
    <user>Odis</user>
    <text>Because macro `M` expands to a (post)submodule, and tries to use the `N` macro.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T15:55:17.000145</ts>
    <user>Odis</user>
    <text>Here is the problem I’m having, is there any way I could have macro `M` also require its source module in the one it expands to?</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T15:55:36.000718</ts>
    <user>Odis</user>
    <text>(So that `N` can be used inside `M`)</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T15:55:48.000787</ts>
    <user>Odis</user>
    <text>Ideally I would like to do this without having to install this as a collection.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T15:59:01.000424</ts>
    <user>Lynna</user>
    <text>Does this work?
```
(define-syntax (M stx)
(syntax-parse stx
[(_ body ...)
#:with racket/base (format-id stx "racket/base")
#:with req (datum-&amp;gt;syntax stx '(require (submod "..")))
#`(module* foo racket/base
req
body ...)]))
```</text>
  </message>
  <message conversation_id="61">
    <ts>2018-01-22T15:59:11.000521</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt; thank you, those steps repaired the bad state and everything is back in working order.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:01:18.000442</ts>
    <user>Odis</user>
    <text>That only works if I define and use `M` in the same module.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:01:43.000131</ts>
    <user>Odis</user>
    <text>If I want to use `M` in a different module I can’t really just require that submod.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:01:51.000714</ts>
    <user>Odis</user>
    <text>err. that module path `(submod "..")`</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:04:14.000173</ts>
    <user>Odis</user>
    <text>Like in say:
```
(provide M N)
(module* bar racket/base
  (require (submod ".."))
  (M (N)))
```</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:10:35.000110</ts>
    <user>Lynna</user>
    <text>I see that you're already trying `syntax/location`...
How about this?
```
     #:with req (datum-&amp;gt;syntax stx `(#%require ,(quote-module-path)))
```
The use of `#%require` there to allow a literal path is not obvious. Probably `require` should allow a literal path, too.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:11:55.000395</ts>
    <user>Jarrod</user>
    <text>Does anybody know the how to "clean" a racket build, so that when I do 'make' everything is built again?</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:12:33.000347</ts>
    <user>Jarrod</user>
    <text>I recall &lt;@Monserrate&gt; telling me that just deleting the 'build' directories wasn't sufficient</text>
  </message>
  <message conversation_id="62">
    <ts>2018-01-22T16:13:40.000032</ts>
    <user>Helena</user>
    <text>`raco setup --clean` ?</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:23:56.000182</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Oh, and it looks like even if I do put a path there, Racket complains about a cycle:

```
#lang racket

(define foo 42)
(provide foo)

(module* foo racket
  (require "atest.rkt")
  ;(require (submod ".."))
  foo)
```</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:24:10.000769</ts>
    <user>Odis</user>
    <text>(As shown by this file if saved as `"atest.rkt"`.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:24:26.000344</ts>
    <user>Odis</user>
    <text>Changing the req to `(submod "..")` causes it to load just fine. :confused:</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:26:40.000380</ts>
    <user>Alesha</user>
    <text>I think &lt;@Jarrod&gt; meant compiling racket itself, `git clean` may do what you need, though be warned, it will remove any untracked files</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:27:23.000156</ts>
    <user>Alesha</user>
    <text>think I've seen a `clean` rule somewhere in the Makefile but don't know if that's sufficient.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:28:15.000089</ts>
    <user>Jarrod</user>
    <text>Yes, I did mean racket itself.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:28:41.000349</ts>
    <user>Odis</user>
    <text>&lt;@Jarrod&gt; Do `git clean -fxd`</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:28:54.000784</ts>
    <user>Odis</user>
    <text>It will delete EVERYTHING in your git repo that is not committed.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:29:03.000116</ts>
    <user>Odis</user>
    <text>As if you just made a fresh checkout.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:29:06.000017</ts>
    <user>Odis</user>
    <text>Then, you can just make.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:29:14.000384</ts>
    <user>Odis</user>
    <text>I end up having to do it every so often.</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:29:40.000110</ts>
    <user>Odis</user>
    <text>(Used to be once a week three years ago, now I can get away with doing it only once every 3-6 months or so.)</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:30:14.000126</ts>
    <user>Jarrod</user>
    <text>ok thanks, i will try that!</text>
  </message>
  <message conversation_id="60">
    <ts>2018-01-22T16:34:28.000297</ts>
    <user>Alesha</user>
    <text>does anyone know of a good example of a package implementing subcommands in a straightforward manner for a raco command? I tried using `pkg` as a working example for my own efforts to add some subcommands but I'm finding it to be really complex so am hoping for a more friendly example.</text>
  </message>
  <message conversation_id="63">
    <ts>2018-01-22T17:52:02.000035</ts>
    <user>Monserrate</user>
    <text>the implementation of `raco fc` here is pretty simple: &lt;https://github.com/takikawa/raco-find-collection/blob/master/find-collection/info.rkt&gt;</text>
  </message>
  <message conversation_id="63">
    <ts>2018-01-22T17:52:31.000547</ts>
    <user>Monserrate</user>
    <text>and &lt;https://github.com/takikawa/raco-find-collection/blob/master/find-collection/run.rkt&gt;</text>
  </message>
  <message conversation_id="63">
    <ts>2018-01-22T18:07:10.000508</ts>
    <user>Odis</user>
    <text>(Also, I get the same thing when doing the `#%require` method you suggested.)</text>
  </message>
  <message conversation_id="64">
    <ts>2018-01-22T20:11:35.000258</ts>
    <user>Lashell</user>
    <text>Just saw this: parsing libraries in racket scheme | &lt;http://rain-1.github.io|rain-1.github.io&gt;
&lt;https://rain-1.github.io/racket-parsing-libraries.html&gt;</text>
  </message>
  <message conversation_id="63">
    <ts>2018-01-23T08:57:00.000134</ts>
    <user>Alesha</user>
    <text>&lt;@Monserrate&gt; thanks! That package does look more comprehensible.</text>
  </message>
  <message conversation_id="65">
    <ts>2018-01-23T09:02:07.000513</ts>
    <user>Andreas</user>
    <text>Is there a way to create a sandboxed function where it cannot access any variable defined outside it's environment (i.e. can only access arguments and variables defined inside it?) I am refactoring a program and something like this would come in handy.</text>
  </message>
  <message conversation_id="65">
    <ts>2018-01-23T09:23:07.000588</ts>
    <user>Kendall</user>
    <text>&lt;@Andreas&gt; I haven't had to do that myself, but about using namespaces (&lt;https://docs.racket-lang.org/guide/mk-namespace.html&gt;)?</text>
  </message>
  <message conversation_id="64">
    <ts>2018-01-23T13:26:42.000346</ts>
    <user>Anton</user>
    <text>i just saw pyret, interesting development</text>
  </message>
  <message conversation_id="66">
    <ts>2018-01-23T13:33:56.000719</ts>
    <user>Catrice</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="67">
    <ts>2018-01-23T14:40:03.000084</ts>
    <user>Erika</user>
    <text>I have a complex data structure that I want to explore in DrRacket. Something like the collapsible view for syntax objects would be perfect (see image below). How do I do it?</text>
  </message>
  <message conversation_id="67">
    <ts>2018-01-23T14:43:53.000645</ts>
    <user>Helena</user>
    <text>try &lt;https://github.com/tonyg/racket-explorer&gt;</text>
  </message>
  <message conversation_id="67">
    <ts>2018-01-23T14:54:11.000054</ts>
    <user>Erika</user>
    <text>Brilliant! Thank you :grinning:</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-23T21:06:40.000137</ts>
    <user>Wally</user>
    <text>Is there a way to convert `(-&amp;gt; input-port? any/c)` to a predicate? I see functions for checking arity but not return values.</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-23T21:08:27.000203</ts>
    <user>Helena</user>
    <text>I guess you can do `(lambda (x) (contract-first-order-passes? (-&amp;gt; input-port? any/c) x))`</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-23T21:09:54.000318</ts>
    <user>Carlyn</user>
    <text>It isn’t possible to know if a function will work with a particular argument without calling it, at least not without knowing its source code and trying to perform some kind of static analysis.</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-23T21:11:00.000022</ts>
    <user>Carlyn</user>
    <text>Which is why a contract like `(-&amp;gt; input-port? any/c)` will only raise a violation for returning multiple values if the function is actually called.</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-23T21:11:46.000167</ts>
    <user>Wally</user>
    <text>cool, thanks</text>
  </message>
  <message conversation_id="69">
    <ts>2018-01-24T12:56:10.000625</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; What is the difference between using `local-expand` with `#f` as the stop list and `(kernel-form-identifier-list)` as the stop list? The only difference I can immediately discover via experimentation is that the latter introduces `#%app` wrappers and expands them if they’re not `#%plain-app`, but I’m not sure if anything else differs.</text>
  </message>
  <message conversation_id="70">
    <ts>2018-01-24T13:03:27.000886</ts>
    <user>Helena</user>
    <text>The 2nd &amp;amp; 4th paragraphs of the docs for `local-expand` try to explain this</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-24T14:14:22.000055</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt;... or `(list #'lambda)` as the stop list, since that's implicitly expanded to `(kernel-form-identifier-list)`. Although there's the `#%app` difference, I think there's not a deep difference, and it's just that we arrived at the same behavior from two different directions. (Originally, a non-empty stop list was not implicitly expanded.)</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-24T14:22:03.000127</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; On that note, could you explain why a non-empty stop list _is_ expanded? I always figured there was some deep reason with respect to expansion order, but I’m not sure if that’s actually true anymore.</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-24T14:24:18.000033</ts>
    <user>Lynna</user>
    <text>I don't think it's true anymore, either. The deep reason with marks+renames was that re-expansion of a binding form doesn't work unless you expand all potential references to remove extra marks. Scope sets don't have that problem, and we've just never taken the step of adding back the ability to expand more selectively.</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-24T14:26:46.000697</ts>
    <user>Carlyn</user>
    <text>Interesting, thanks! I still don’t really understand the marks+renames model.</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-24T15:49:08.000187</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; For constraining variable references, a macro that uses `free-vars` from `syntax/free-vars` might do what you want.
For the package issue, does it work to install with `--force` to ignore the version requirement?</text>
  </message>
  <message conversation_id="71">
    <ts>2018-01-24T15:50:21.000012</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; to follow up on `free-vars`, note that that only finds lexical variable references, not imports, but could be extended to track those fairly easily</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-24T15:53:04.000681</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt; It looks like Vincent added a `#:module-bound?` option a couple of years ago</text>
  </message>
  <message conversation_id="68">
    <ts>2018-01-24T16:00:04.000298</ts>
    <user>Monserrate</user>
    <text>Indeed. I should keep up with the times!</text>
  </message>
  <message conversation_id="71">
    <ts>2018-01-25T02:37:34.000249</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; thanks or the `free-vars` suggestion, this might be exactly what I need.</text>
  </message>
  <message conversation_id="71">
    <ts>2018-01-25T02:54:12.000176</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; with regards to force, I am just not sure how I can force a specific version, for example, version 1.1 of package foo. `raco pkg update --force foo==1.1` doesn't work.</text>
  </message>
  <message conversation_id="71">
    <ts>2018-01-25T04:00:58.000415</ts>
    <user>Andreas</user>
    <text>&lt;@Jettie&gt; in rash, it seems I cannot do `(define foo "ls -l") (rash foo)`. Is there another way of achieving this?</text>
  </message>
  <message conversation_id="71">
    <ts>2018-01-25T06:01:25.000002</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; you can't force a specific version because there aren't versions - each package name in the package catalog maps to one implementation at a given point in time. You'd have to pick a git commit of the package repo and install the git url for that commit.</text>
  </message>
  <message conversation_id="71">
    <ts>2018-01-25T07:16:21.000058</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; but you can say in `info.rkt`: `(define deps '(["rash" #:version "0.1"]))`, what's that about then?</text>
  </message>
  <message conversation_id="71">
    <ts>2018-01-25T15:46:00.000466</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; a package name maps to one source, and a package source can say what version it is. When you use `#:version` in a dependency list it's a _minimum_ version and the package installer will raise an error if the source it found for the dependency says it's version is lower. It doesn't change what implementation of the package is actually installed. It's mostly meant as an assertion to get more user-friendly errors when installing packages.</text>
  </message>
  <message conversation_id="72">
    <ts>2018-01-25T15:52:34.000615</ts>
    <user>Letha</user>
    <text>Any ZeroMQ users out there? Just wondering if one package more canonical...</text>
  </message>
  <message conversation_id="72">
    <ts>2018-01-25T16:56:22.000053</ts>
    <user>Alesha</user>
    <text>I saw a behavior with `peek-bytes` which puzzles me. If I use `peek-bytes` to examine a file that's say 50 bytes long; assuming a valid input-port to that file `in` calling `(peek-bytes 1 60 in)` for the first time will produce `#""` not `#&amp;lt;eof&amp;gt;` which is what I was expecting. Calling `(peek-bytes 1 60 in)` again for second time will produce `#&amp;lt;eof&amp;gt;` and subsequent calls will continue to produce `#&amp;lt;eof&amp;gt;` just not the first time it's invoked. That seems weird to me, I'd have thought the first time would produce `#&amp;lt;eof&amp;gt;` not an empty byte string.</text>
  </message>
  <message conversation_id="71">
    <ts>2018-01-25T17:14:32.000472</ts>
    <user>Alesha</user>
    <text>If I have `(define buffer (make-bytes 50 5))` and `(define in (open-input-bytes buffer))` then `(peek-bytes 1 60 in)` will produce `#&amp;lt;eof&amp;gt;` the first time so to me the behavior with the file input port is inconsistent.</text>
  </message>
  <message conversation_id="73">
    <ts>2018-01-25T17:16:37.000081</ts>
    <user>Lynna</user>
    <text>&lt;@Alesha&gt; I agree that the `#""` result seems wrong. (As it happens, Racket-on-Chez produces `#&amp;lt;eof&amp;gt;`.)</text>
  </message>
  <message conversation_id="73">
    <ts>2018-01-25T18:35:23.000285</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt; ok shall I file an issue ticket in the github repo?</text>
  </message>
  <message conversation_id="73">
    <ts>2018-01-25T18:35:48.000231</ts>
    <user>Lynna</user>
    <text>Yes, that would be helpful</text>
  </message>
  <message conversation_id="73">
    <ts>2018-01-26T13:06:48.000469</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I’m trying to add `splicing-parameterize` to `racket/splicing`, but I’m not quite sure how to implement &lt;@Eugena&gt;’s suggestion to let go of the reference to the parameterization after the bodies. I thought about treating the final body specially, but as a particularly perplexing edge case, it could expand into `(begin)`, in which case inspecting the _previous_ body is necessary.</text>
  </message>
  <message conversation_id="73">
    <ts>2018-01-26T14:26:12.000792</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; I think Ryan's suggestion was to add `(set! new-parameterization #f)` only in a module or top-level context. It should be easy there, and it should be unneeded elsewhere.</text>
  </message>
  <message conversation_id="73">
    <ts>2018-01-26T14:27:15.000407</ts>
    <user>Carlyn</user>
    <text>That will still cause different behavior in the REPL, right? It will always produce `#&amp;lt;void&amp;gt;` instead of printing a value, if relevant.</text>
  </message>
  <message conversation_id="73">
    <ts>2018-01-26T14:27:27.000241</ts>
    <user>Carlyn</user>
    <text>But maybe that’s acceptable.</text>
  </message>
  <message conversation_id="73">
    <ts>2018-01-26T14:28:06.000335</ts>
    <user>Lynna</user>
    <text>I see what you mean, and I agree that it's acceptable.</text>
  </message>
  <message conversation_id="73">
    <ts>2018-01-26T14:28:30.000536</ts>
    <user>Carlyn</user>
    <text>Okay, works for me. Thanks for your input; I’ll probably open a PR soon.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T14:41:11.000126</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; YAY! :heart:</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T15:46:59.000369</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; I have a question involving two modules `A` and `B`, as well as a third module `C` that dynamically visits `A`.

`B` uses an accumulator during expansion</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T15:48:41.000326</ts>
    <user>Odis</user>
    <text>Which it provides (for-syntax).

`A` requires `B`, and since this accumulator is used at phase 1 B is freshly…err…instantiated (I think that’s the word?)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T15:49:32.000607</ts>
    <user>Odis</user>
    <text>Anyway, if `C` dynamically visits `A`, is there any way I can get the accumulators that `B` built up (and provided) for that specific instantiation for `A`?</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T15:50:57.000176</ts>
    <user>Lynna</user>
    <text>How does `C` dynamically visit `A`?</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T15:59:04.000166</ts>
    <user>Odis</user>
    <text>Honestly, any way that makes it possible.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T15:59:22.000384</ts>
    <user>Odis</user>
    <text>`A` and `B` are files on the machine.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:00:08.000210</ts>
    <user>Odis</user>
    <text>I’m happy to parse them as syntax objects and call `expand`, I’m happy to call `dynamic-require` on the module path, and honestly, I’m happy to do other things which I’m sure I left out as well.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:00:40.000343</ts>
    <user>Monserrate</user>
    <text>&lt;@Odis&gt; have `A` serialize the accumulator into a `begin-for-syntax` that re-creates it when C visits A</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:00:50.000819</ts>
    <user>Monserrate</user>
    <text>a la YWIW</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:01:46.000345</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; So, I am not directly writing `A`.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:02:00.000306</ts>
    <user>Odis</user>
    <text>However, I do have control over the language `A` is written in.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:02:11.000361</ts>
    <user>Monserrate</user>
    <text>so make the language do that</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:02:19.000055</ts>
    <user>Odis</user>
    <text>So are you saying all modules written in the language `A` is written in should have that export?</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:03:14.000553</ts>
    <user>Monserrate</user>
    <text>yes (although I wouldn't describe it as an export)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:04:39.000091</ts>
    <user>Odis</user>
    <text>Okay, then if `A` doesn’t export it (or its serialization), how can `C` get it?</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:04:58.000489</ts>
    <user>Odis</user>
    <text>I mean, making the box isn’t the problem, its getting it from `B` to `C`.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:06:44.000292</ts>
    <user>Odis</user>
    <text>Oh, or are you just saying that `A` should define it, but not export it.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:06:47.000150</ts>
    <user>Monserrate</user>
    <text>the technique I described is how C can get it</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:06:54.000204</ts>
    <user>Odis</user>
    <text>And then `C` should grab the namespace for `A`.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:06:59.000392</ts>
    <user>Odis</user>
    <text>I guess that might work.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:07:01.000141</ts>
    <user>Monserrate</user>
    <text>and neither "define" nor "export" are good words here</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:14:01.000362</ts>
    <user>Odis</user>
    <text>So, IIRC, YWIW uses `begin-for-syntax` inside of a syntax object to sort of…re-build information every time module `A` is visited.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:15:10.000033</ts>
    <user>Odis</user>
    <text>Where as I don’t really care about whether or not the data is there after re-expansions. Rather, I would like something a little more subtle.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:16:15.000334</ts>
    <user>Odis</user>
    <text>I want the actual accumulator used during the visit to B, not just a serialization. And I want it because I am expecting `A` to be an incomplete (readable but with, say, buggy macros) file.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:17:32.000102</ts>
    <user>Odis</user>
    <text>This is because that accumulator contains, more or less diagnostic information that `B` uses in the language implementation. But now I’m also trying to make a tool to print that information out. And I don’t want to assume `A` actually finished expanding.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:18:57.000139</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; So if YWIW talks about that sort of thing and I completely missed it, I’m sorry. If I understand its section 3 (where you implement records) of the paper you’re talking about, yes?</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:19:12.000445</ts>
    <user>Monserrate</user>
    <text>Yes, that's right</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:19:25.000490</ts>
    <user>Monserrate</user>
    <text>I don't think you can get "the actual value"</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:19:42.000314</ts>
    <user>Odis</user>
    <text>Ah, okay.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:19:51.000301</ts>
    <user>Odis</user>
    <text>hmmph…sad day. Thanks.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:20:30.000084</ts>
    <user>Odis</user>
    <text>But ya, that’s why I was asking &lt;@Lynna&gt;, because if its at all possible, I’m sure he’d know. (As I’m not aware of anyone in the Racket ecosystem actually trying to do such a…odd…thing.)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:20:31.000594</ts>
    <user>Monserrate</user>
    <text>but why is "the actual value" needed</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:20:45.000313</ts>
    <user>Odis</user>
    <text>Because `A` may not have finished expanding.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:20:55.000285</ts>
    <user>Monserrate</user>
    <text>I don't see how that's related</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:21:45.000265</ts>
    <user>Odis</user>
    <text>Like, say, they could have written the file:

```
#lang the-lang
(f 1 2 3)
```
And the expander throws and error saying `f` is unbound.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:22:00.000381</ts>
    <user>Monserrate</user>
    <text>sure</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:22:13.000341</ts>
    <user>Odis</user>
    <text>From what I gather, the technique used in YWIW assumes the `Zoo` file actually expands.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:22:29.000023</ts>
    <user>Odis</user>
    <text>So it can grab the serialized value from its code.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:22:38.000421</ts>
    <user>Monserrate</user>
    <text>no, that's not how it works</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:23:27.000395</ts>
    <user>Monserrate</user>
    <text>the technique inserts expressions which mutate state, and then other code looks at that state</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:24:26.000002</ts>
    <user>Odis</user>
    <text>Right. IIRC it inserts something like:
```
(register-def #'c-name #'p-name
    #'(f-name ...)))
``` (copy/paste from the paper)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:24:48.000332</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:25:16.000198</ts>
    <user>Odis</user>
    <text>Mmm…so you’re saying that `C` should get access to the registry that `register def` adds to</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:25:22.000131</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:25:39.000243</ts>
    <user>Odis</user>
    <text>AH, okay.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:25:52.000272</ts>
    <user>Odis</user>
    <text>Wow, that’s subtle.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:26:25.000864</ts>
    <user>Odis</user>
    <text>(I mean, there was a LOT of really cute subtle stuff in the paper I did pick up, but that use of the idea was not one I put two and two together.)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:32:41.000449</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Ah, okay. I think I remember the problem I had with that. Namely, I still can’t get my hands on the registry `register-def` mutates. (Unless its somehow parameterizable by `C`)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:33:13.000371</ts>
    <user>Monserrate</user>
    <text>B should provide it</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:33:20.000492</ts>
    <user>Monserrate</user>
    <text>and the C requires B</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:33:39.000308</ts>
    <user>Odis</user>
    <text>Oh, you mean `B` should provide it at phase 0?</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:34:04.000047</ts>
    <user>Odis</user>
    <text>(I mean, it already provides it at phase 1, but obviously it will get reset every time the module runs.)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:34:47.000110</ts>
    <user>Odis</user>
    <text>err…every time module `A` gets visited.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:36:15.000557</ts>
    <user>Monserrate</user>
    <text>I mean B should be something like:</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:36:41.000287</ts>
    <user>Monserrate</user>
    <text>```
(module B racket/base
  (define registry (make-hash))
  (provide registry))
```</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:48:39.000198</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Sure, I have a module:
```
(module submod-acc racket/base
  (provide (all-defined-out))
  (define editor-list-box (box '()))
  (define editor-mixin-list-box (box '())))
(require (for-syntax 'submod-acc))
```</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:48:48.000137</ts>
    <user>Odis</user>
    <text>Where `editor-list-box` is the registry.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:49:20.000015</ts>
    <user>Odis</user>
    <text>But whenever I do a dynamic-require of `A`, that box is (expectedly) empty.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:50:51.000417</ts>
    <user>Odis</user>
    <text>(I’ve also been doing the dynamic require with the `(void)` argument)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:51:00.000400</ts>
    <user>Odis</user>
    <text>So it visits the module.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:51:38.000365</ts>
    <user>Monserrate</user>
    <text>right, so you need to make A update that box</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:51:51.000127</ts>
    <user>Monserrate</user>
    <text>or B, since A depends on B</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:53:05.000212</ts>
    <user>Odis</user>
    <text>I already do that (unless its wrong):

```
(define-for-syntax (add-syntax-to-editor! stx)
  (define existing (unbox editor-submod-box))
  (when (null? existing)
    (syntax-local-lift-module-end-declaration
     #'(define-editor-submodule)))
  (set-box! editor-submod-box (append (reverse (syntax-&amp;gt;list stx)) existing)))

(define-syntax (editor-submod stx)
  (syntax-parse stx
    [(_ body ...)
     (add-syntax-to-editor! (syntax-local-introduce #'(body ...)))
     #'(begin)]))
```</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:53:16.000643</ts>
    <user>Odis</user>
    <text>(The same trick that also lets module+ work.)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:53:42.000052</ts>
    <user>Odis</user>
    <text>OH</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T16:54:11.000170</ts>
    <user>Odis</user>
    <text>Except I forgot to add it to the template for the `editor-submod`….</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:02:02.000334</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Hmm…nope, still empty.

I added:
```
#'(begin
     (begin-for-syntax
      (set-box! editor-list-box ....)))
```</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:02:15.000408</ts>
    <user>Odis</user>
    <text>Into the template.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:02:50.000358</ts>
    <user>Monserrate</user>
    <text>that will change the box at at phase 1 of the expansion of A</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:02:51.000261</ts>
    <user>Odis</user>
    <text>Also I’m currently trying to get it with something like:
```
(dynamic-require 'editor/stdlib (void))
(dynamic-require '(submod editor/lang submod-acc)
                 'editor-list-box)
```</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:02:57.000518</ts>
    <user>Monserrate</user>
    <text>is that what you want?</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:03:20.000051</ts>
    <user>Monserrate</user>
    <text>that won't do what you want wrt those dynamic-require calls, which are doing things at phase 0</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:03:51.000285</ts>
    <user>Monserrate</user>
    <text>what you want is to generate code that updates the box at whatever phase you actually want it</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:03:53.000322</ts>
    <user>Odis</user>
    <text>Ah, woops, the second one should be `dynamic-require-for-syntax`</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:04:26.000235</ts>
    <user>Odis</user>
    <text>But ya, it should be at module A’s phase 1.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:04:43.000388</ts>
    <user>Odis</user>
    <text>OMG, it `dynamic-require-for-syntax` worked:</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:04:47.000068</ts>
    <user>Odis</user>
    <text>```
(dynamic-require 'editor/stdlib (void))
(dynamic-require-for-syntax '(submod editor/lang submod-acc)
                            'editor-list-box)
```</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:05:39.000273</ts>
    <user>Monserrate</user>
    <text>you might find our PLDI'11 or Scheme'07 papers clearer on this</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:06:41.000372</ts>
    <user>Odis</user>
    <text>That’s the advanced macrology paper iirc right?</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:07:07.000587</ts>
    <user>Odis</user>
    <text>(Or the TR paper from the macro perspective.)</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:11:01.000349</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:11:51.000614</ts>
    <user>Odis</user>
    <text>Okay cool.</text>
  </message>
  <message conversation_id="74">
    <ts>2018-01-26T17:12:03.000139</ts>
    <user>Odis</user>
    <text>It looks like its working now. Thanks so much for your help.</text>
  </message>
  <message conversation_id="75">
    <ts>2018-01-28T04:35:12.000056</ts>
    <user>Tasia</user>
    <text>Hi all</text>
  </message>
  <message conversation_id="75">
    <ts>2018-01-28T04:35:30.000058</ts>
    <user>Tasia</user>
    <text>Im learning Racket via HTDP book and the edx course :slightly_smiling_face:</text>
  </message>
  <message conversation_id="75">
    <ts>2018-01-28T04:35:46.000010</ts>
    <user>Tasia</user>
    <text>Is anyone here following the course/book?</text>
  </message>
  <message conversation_id="75">
    <ts>2018-01-28T04:35:46.000073</ts>
    <user>Tasia</user>
    <text>:smile:</text>
  </message>
  <message conversation_id="75">
    <ts>2018-01-28T06:37:04.000039</ts>
    <user>Tasia</user>
    <text>Anyone here o.o</text>
  </message>
  <message conversation_id="76">
    <ts>2018-01-28T09:28:13.000073</ts>
    <user>Rolf</user>
    <text>People are sleeping</text>
  </message>
  <message conversation_id="75">
    <ts>2018-01-28T11:06:14.000061</ts>
    <user>Tasia</user>
    <text>wow :3</text>
  </message>
  <message conversation_id="75">
    <ts>2018-01-28T11:06:18.000091</ts>
    <user>Tasia</user>
    <text>timezones &amp;gt;.&amp;lt;</text>
  </message>
  <message conversation_id="77">
    <ts>2018-01-28T12:22:27.000047</ts>
    <user>Catrice</user>
    <text>Scribble experts, is there an easy way to change the pict_###.png filenames generated by embedded images? </text>
  </message>
  <message conversation_id="77">
    <ts>2018-01-28T14:03:15.000001</ts>
    <user>Lynna</user>
    <text>&lt;@Catrice&gt; not currently; the name "pict.png" is hardwired, as is the "_###" convention for disambiguating</text>
  </message>
  <message conversation_id="77">
    <ts>2018-01-28T14:45:35.000157</ts>
    <user>Catrice</user>
    <text>Bummer. Where is it hardwired, though? If it's in the html renderer, well, I've already patched that before, could do it again if needed</text>
  </message>
  <message conversation_id="77">
    <ts>2018-01-28T17:11:40.000156</ts>
    <user>Catrice</user>
    <text>Coming back to this now.  Seems like ./pkgs/scribble-lib/scribble/html-render.rkt:1452 defines this via `(install-file "pict.png" bstr)`  Could that `"pict.png"` filename become a `make-parameter` instead?</text>
  </message>
  <message conversation_id="77">
    <ts>2018-01-28T17:12:39.000097</ts>
    <user>Catrice</user>
    <text>(potentially the same thing should happen for "pict.svg" a few lines later)</text>
  </message>
  <message conversation_id="77">
    <ts>2018-01-28T21:51:50.000242</ts>
    <user>Lynna</user>
    <text>&lt;@Catrice&gt; Yes, adding a parameter or initialization argument to `render%` would be good.</text>
  </message>
  <message conversation_id="77">
    <ts>2018-01-29T09:52:22.000581</ts>
    <user>Bertha</user>
    <text>&lt;@Catrice&gt; If that will become a pull-request to Racket, a suggestion: Make the new parameter not just `string?` but something like `(or/c string? (-&amp;gt; bytes? string?))`. In other words, can supply a function that, given the file bytes, returns the file name to use.

Why: As a caching strategy, sometimes people want the name of an HTTP resource (like an image or style) to include a "fingerprint" (e.g. SHA). (See last diagram here &lt;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&gt; for one explanation.)

OTOH If this is just your local change, never mind. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="77">
    <ts>2018-01-29T09:56:13.000891</ts>
    <user>Catrice</user>
    <text>for now it's all local.  I've hacked up a scribble run.rkt with several changes by this point, and I haven't had time to make a proper, clean PR out of any of them</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T13:21:29.000329</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Are VM parameters supposed to be cross phase/namespace? For example, if I set the `current-logger` parameter, it stays set in other threads/namesapces.</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T13:21:49.000323</ts>
    <user>Odis</user>
    <text>(And if that is the desired behavior, is this going to change in Racket on Chez?)</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T13:39:13.000092</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; For example, the logger in this program seems to get preserved:
```
(define-syntax (foo stx)
  (define logger (make-logger))
  (current-logger logger)
  #`#,logger)

(define x (foo))

(equal? x (current-logger))
```</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T13:41:57.000825</ts>
    <user>Odis</user>
    <text>But this one (as expected), does not preserve the value across phase boundaries:

```
(module param racket
  (struct unit ())
  (define current-param (make-parameter (unit)))
  (provide current-param))
(require 'param
         (for-syntax 'param))

(begin-for-syntax
  (current-param 42))
(current-param)
```</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T13:58:29.000602</ts>
    <user>Odis</user>
    <text>And while `current-logger` appears to be defined as part of `'#%kernel` in Racket6, it looks like you’ve reimplemented it with `racket/base` in racket7, which makes me wonder if the behavior will change.</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T16:19:54.000795</ts>
    <user>Aimee</user>
    <text>wow, didn't know that `current-logger` is implemented as part of `racket/base` in racket7</text>
  </message>
  <message conversation_id="79">
    <ts>2018-01-29T16:20:48.000156</ts>
    <user>Setsuko</user>
    <text>If the logger is reimplemented in `racket/base`, will it lose its ability to smuggle messages between phases? (Cover relies on this right now)</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T16:25:52.000136</ts>
    <user>Aimee</user>
    <text>I searched a bit in the code base. It looks like `current-logger` is not really implemented in `racket/base`</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T16:30:03.000387</ts>
    <user>Aimee</user>
    <text>it's a special thing that the new expander and the underlying racket-to-chez layer knows about
&lt;@Odis&gt; when I'm implementing a annotator, I also found that `current-compile` is cross-phase and cross-namespace</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T16:37:09.000048</ts>
    <user>Odis</user>
    <text>&lt;@Aimee&gt; &lt;@Setsuko&gt; Ya, that seems to be the case.</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T16:37:41.000046</ts>
    <user>Odis</user>
    <text>Like, while it is ‘written’ in racket/base, its compiled into part of ’#%kernel during the bootstrapping process.</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T16:38:16.000023</ts>
    <user>Odis</user>
    <text>And since ’#%kernel is cross phase, the parameter still can be used to smuggle values.</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T16:38:48.000581</ts>
    <user>Odis</user>
    <text>Which is…actually its probably really bad, since this means you can pass _any_ value that has a logger struct info type across phases.</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T16:59:09.000082</ts>
    <user>Odis</user>
    <text>&lt;@Aimee&gt; &lt;@Setsuko&gt; But while we’re talking about smuggling values around, &lt;@Gaynell&gt; helped me make this gem: &lt;https://gist.github.com/LeifAndersen/01bed2a4b6fd933a94286abce2b6d941&gt;</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T16:59:13.000022</ts>
    <user>Odis</user>
    <text>WHich is just…ew…</text>
  </message>
  <message conversation_id="80">
    <ts>2018-01-29T17:17:42.000347</ts>
    <user>Aimee</user>
    <text>it's 3D syntax plus the hopeless top-level tho</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T17:25:49.000398</ts>
    <user>Odis</user>
    <text>I just used the top level to make the example nicer to look atl.</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T17:26:08.000014</ts>
    <user>Odis</user>
    <text>Its actually 3d syntax combined with a parametrizable module load path.</text>
  </message>
  <message conversation_id="81">
    <ts>2018-01-29T18:19:49.000075</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt;, I was wondering if you could point me to where in the Racket codebase the two log receivers are created during Racket start-up as explained in the third paragraph at &lt;https://docs.racket-lang.org/reference/logging.html&gt;</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-29T19:59:11.000156</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; Yes, primitive parameters span phases and namespace. And, yes, it's a hole in the enforcement of phase separation.</text>
  </message>
  <message conversation_id="81">
    <ts>2018-01-29T20:05:52.000351</ts>
    <user>Lynna</user>
    <text>&lt;@Alesha&gt; In the current Racket implementation, those log receivers are not created explicitly. Instead, logging to stdout and syslog is built into `log-message`. See &lt;https://github.com/racket/racket/blob/master/racket/src/racket/src/error.c#L3925&gt; where `scheme_log_name_pfx_message` is the most primitive layer of `log-message.
In Racket-on-Chez, the stderr receiver is an explicit receiver created at &lt;https://github.com/racket/racket7/blob/master/racket/src/cs/main.sps#L448&gt; , but with a primitive implementation at &lt;https://github.com/racket/racket7/blob/master/racket/src/io/logger/receiver.rkt#L91&gt; . (I think I haven't filled in the syslog receiver, yet.)</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-30T00:21:31.000014</ts>
    <user>Helena</user>
    <text>&lt;@Odis&gt; do you remember if `scirbble/acmart` ever supported `include-abstract` ? &lt;https://github.com/racket/scribble/issues/159&gt;</text>
  </message>
  <message conversation_id="78">
    <ts>2018-01-30T00:22:47.000026</ts>
    <user>Helena</user>
    <text>(seems like something that might have gotten lost when `'pretitle` was added)</text>
  </message>
  <message conversation_id="81">
    <ts>2018-01-30T08:51:53.000502</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt; thank you for the pointers! Appreciate them.</text>
  </message>
  <message conversation_id="81">
    <ts>2018-01-30T08:53:11.000493</ts>
    <user>Alesha</user>
    <text>reason I asked for them was because I wanted to study how the log receivers were reporting log messages to their respective stderr and system log since I want to replicate the same setup for my own application which will be logging to its own stderr and log files.</text>
  </message>
  <message conversation_id="82">
    <ts>2018-01-30T09:38:06.000430</ts>
    <user>Tamra</user>
    <text>Where should one post Racket jobs in this community?</text>
  </message>
  <message conversation_id="82">
    <ts>2018-01-30T09:54:08.000352</ts>
    <user>Tamra</user>
    <text>Anyway I need to hire 2 full-time Racket programmers, please DM me with your github account.</text>
  </message>
  <message conversation_id="82">
    <ts>2018-01-30T10:12:02.000131</ts>
    <user>Willette</user>
    <text>&lt;@Tamra&gt;: I would recommend the Racket Users mailing list: &lt;https://groups.google.com/forum/#!forum/racket-users/&gt;</text>
  </message>
  <message conversation_id="83">
    <ts>2018-01-30T10:12:14.000159</ts>
    <user>Willette</user>
    <text>That's probably the channel that has the broadest reach.</text>
  </message>
  <message conversation_id="82">
    <ts>2018-01-30T10:15:08.000059</ts>
    <user>Tamra</user>
    <text>&lt;@Willette&gt; thank you! </text>
  </message>
  <message conversation_id="84">
    <ts>2018-01-30T14:36:36.000083</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Could I have a moment of your time to take a brief look at this PR sometime this week? &lt;https://github.com/racket/racket/pull/1939&gt;</text>
  </message>
  <message conversation_id="84">
    <ts>2018-01-30T21:23:58.000229</ts>
    <user>Lynna</user>
    <text>&lt;@Dia&gt; Is `srfi-lib-nonfree` registered at &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt;? It doesn't seem to be, but I may be misreading something.</text>
  </message>
  <message conversation_id="84">
    <ts>2018-01-30T21:36:51.000292</ts>
    <user>Lynna</user>
    <text>I tried using the upload script, and I hope that ends up being an improvement after a while (instead of interfering with some update in progress)</text>
  </message>
  <message conversation_id="84">
    <ts>2018-01-30T21:38:49.000350</ts>
    <user>Lynna</user>
    <text>That seemed to work, but now I hit `srfi-doc-nonfree`, so I'll add that one</text>
  </message>
  <message conversation_id="85">
    <ts>2018-01-31T16:06:12.000352</ts>
    <user>Odis</user>
    <text>&lt;@Helena&gt; Good catch, no it doesn’t. I’m adding it now.</text>
  </message>
  <message conversation_id="85">
    <ts>2018-01-31T16:24:11.000610</ts>
    <user>Odis</user>
    <text>&lt;@Helena&gt; &lt;https://github.com/racket/scribble/pull/160&gt;</text>
  </message>
  <message conversation_id="85">
    <ts>2018-01-31T16:24:21.000429</ts>
    <user>Odis</user>
    <text>I’ll merge after I get an lgtm.</text>
  </message>
  <message conversation_id="85">
    <ts>2018-01-31T16:32:57.000203</ts>
    <user>Jen</user>
    <text>&lt;@Odis&gt; thanks!</text>
  </message>
  <message conversation_id="86">
    <ts>2018-02-01T16:30:10.000768</ts>
    <user>Pearl</user>
    <text>I'm looking to programatically get indentation info for use with a `text%` object. For this I'm looking into using `read-language` to get the `determine-spaces` procedure for a given language, but this doesn't seem to work with `#lang racket` or `#lang racket/base`. For example, if I run the following code:

```
(define scrib-in (open-input-string "#lang scribble/base"))
(define scrib-info (read-language scrib-in))
(scrib-info 'drracket:indentation #f))
```

I get back `#&amp;lt;procedure:determine-spaces&amp;gt;`, which is exactly what I want. However, when I run the following similar code for `#lang racket/base`:

```
(define rkt-in (open-input-string "#lang racket/base"))
(define rkt-info (read-language rkt-in))
(rkt-info 'drracket:indentation #f)
```

I get back `#f`. I know that this is the intended behavior, i.e. when `language-info` returns false, then that means that the language is either racket or racket/base. But I'm wondering if there's any way to work around this so I can get the procedures I need for the racket and racket/base languages. Is there a "default" version exposed somewhere that I can access in the case that `language-info` returns `#f`?</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:12:27.000739</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; Did you change `splicing-syntax-parameterize` when you were adding `splicing-parameterize`?</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:12:45.000359</ts>
    <user>Carlyn</user>
    <text>no, but I did change `splicing-syntax-parameterize` a month or two ago</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:12:54.000406</ts>
    <user>Odis</user>
    <text>Ah, okay.</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:13:13.000260</ts>
    <user>Odis</user>
    <text>Well I think it might have broken some of my code that used it.</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:13:28.000121</ts>
    <user>Odis</user>
    <text>Can you share with me the change you made?</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:13:53.000225</ts>
    <user>Carlyn</user>
    <text>I made a couple of small changes… maybe open a bug on racket/racket and ping me</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:14:07.000065</ts>
    <user>Carlyn</user>
    <text>preferably with a program that works on Racket 6.11 but not 6.12</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:14:23.000032</ts>
    <user>Helena</user>
    <text>&lt;@Odis&gt; maybe you want &lt;https://github.com/racket/racket/commit/00d438cfbe8ea4d8db8277fc712d3315cf4a9e5f&gt;</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:14:37.000132</ts>
    <user>Helena</user>
    <text>or something from this list: &lt;https://github.com/racket/racket/commits?author=lexi-lambda&gt;</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:15:28.000164</ts>
    <user>Carlyn</user>
    <text>&lt;@Helena&gt;’s commit is the first one, but it was largely superseded by &lt;https://github.com/racket/racket/commit/1e38918aa9719d212534d2027aa1a3a8b46462dd&gt;</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:15:52.000316</ts>
    <user>Carlyn</user>
    <text>if you have a program that changed behavior, it would be very useful to add it as a test case to the splicing-syntax-parameterize test suite</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:16:22.000527</ts>
    <user>Odis</user>
    <text>Ya, I will do that as soon as I can make a minimal example.</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:16:35.000557</ts>
    <user>Odis</user>
    <text>It was...err...well, super complicated.</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:16:49.000592</ts>
    <user>Odis</user>
    <text>And kind of broke sets of scopes in very odd ways. :wink:</text>
  </message>
  <message conversation_id="85">
    <ts>2018-02-01T17:17:14.000324</ts>
    <user>Odis</user>
    <text>Anyway, thanks &lt;@Helena&gt; and &lt;@Carlyn&gt;</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T14:41:14.000076</ts>
    <user>Wally</user>
    <text>I'm having trouble with `@defthing[#:id ...]`. When my _id-expr_ does not produce a syntax object, I get this: ```datum-&amp;gt;syntax: contract violation
  expected: (or/c syntax? #f)``` But when I try a syntax object instead, it has no visible effect. I found no clear examples in the docs or racket source. Help?</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T15:22:40.000064</ts>
    <user>Wally</user>
    <text>Maybe I'm solving the wrong problem. I want to `deftogether` a few `defthings` that share a ~"variable"~ `var` name prefix: _name_-thing1 and _name_-thing2</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:28:35.000004</ts>
    <user>Helena</user>
    <text>&lt;@Wally&gt; that might be a bug in scribble --- that `@defthing[#:id #'A B ....]` will use `A` internally but render `B`</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:31:14.000035</ts>
    <user>Wally</user>
    <text>The docs seem to suggest `A` and `B` should be the other way around.</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:33:48.000133</ts>
    <user>Helena</user>
    <text>other way around?</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:33:52.000140</ts>
    <user>Helena</user>
    <text>I don't understand</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:34:13.000015</ts>
    <user>Wally</user>
    <text>&amp;gt;If #:id id-expr is supplied, then the result of id-expr is used in place of id.</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:34:55.000058</ts>
    <user>Wally</user>
    <text>I understand that to mean, if `A` is supplied, then `A` is used in place of `B`.</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:35:29.000065</ts>
    <user>Wally</user>
    <text>Where I guess "is used" refers to "appears in the output"</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:36:57.000083</ts>
    <user>Helena</user>
    <text>okay, we basically agree
(I looked at the implementation of `defthing`, and it uses the `id` in 2 places --- but yeah if `#:id` is there, it sounds like it should be used in both those places)</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:38:54.000119</ts>
    <user>Wally</user>
    <text>Somehow, it's being ignored for me. I'll work out a minimal example.</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:39:36.000076</ts>
    <user>Helena</user>
    <text>wait 1 sec</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:39:59.000099</ts>
    <user>Helena</user>
    <text>ok, here's the example I tried &lt;https://github.com/racket/scribble/pull/161&gt;</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:41:21.000117</ts>
    <user>Helena</user>
    <text>and the `#:id` identifier doesn't render, but that identifier seems to be getting used for links because when I run `scribble --html foo.scrbl` for the sample program, I get this warning:
```
WARNING: no declared exporting libraries for definition
  in: foo
```</text>
  </message>
  <message conversation_id="87">
    <ts>2018-02-04T16:42:25.000138</ts>
    <user>Wally</user>
    <text>Cool, thanks! I see the same output here.</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T08:50:33.000478</ts>
    <user>Andreas</user>
    <text>Is there any way to perform structural matching for elements in a sequence. For example, for an assoc list: `for ([(k . v) alist]) ...`</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T08:50:35.000206</ts>
    <user>Andreas</user>
    <text>?</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:06:56.000008</ts>
    <user>Karry</user>
    <text>&lt;@Andreas&gt; if you're not really concerned about performance, `in-dict` might meet your needs</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:07:37.000386</ts>
    <user>Karry</user>
    <text>if you're looking at something that doesn't have all the associated overhead that comes with the generic `dict` operations, I've thrown together an `in-assoc` that seems to work well for us in TR:</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:07:38.000134</ts>
    <user>Karry</user>
    <text>&lt;https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/utils/utils.rkt#L413&gt;</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:09:48.000596</ts>
    <user>Karry</user>
    <text>I think I assumed you were specifically talking about association lists for some reason... I'm not aware of a "generic" way to match on the lhs of a for-loop iteration clause</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:10:28.000644</ts>
    <user>Karry</user>
    <text>You may find `in-value` in a `for*` variant a useful way to bind things before entering the body of the loop</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:10:54.000460</ts>
    <user>Andreas</user>
    <text>&lt;@Karry&gt; I will take a look at in-dict. that would be fine since these is unit test code. but yes, I am interested in this specific case in alists.</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:11:07.000242</ts>
    <user>Andreas</user>
    <text>Why is `in-assoc` not available in normal racket?</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:11:15.000353</ts>
    <user>Karry</user>
    <text>no one has added it?</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:11:19.000483</ts>
    <user>Karry</user>
    <text>I don't know</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T09:13:17.000716</ts>
    <user>Karry</user>
    <text>perhaps it has been intentionally not added because of the existence of primitive `hash` tables and the available (and efficient) `in-hash` functions? (I'm totally speculating! It could just be as simple as no one has bothered to ask/submit a PR)</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T10:11:58.000647</ts>
    <user>Andreas</user>
    <text>&lt;@Karry&gt; ok, thanks</text>
  </message>
  <message conversation_id="89">
    <ts>2018-02-06T10:17:29.000045</ts>
    <user>Erika</user>
    <text>I want to call an executable in a synchronous subprocess and control its standard ports (`stdio`, `stdout` and `stderr`). Here’s what I got:

```
(define in (open-input-string "&amp;lt;my-input&amp;gt;"))
(define out (open-output-string))
(parameterize ([current-input-port in]
               [current-output-port out]
               [current-error-port out])
  (system* "&amp;lt;command&amp;gt;" "&amp;lt;arguments&amp;gt;" "..."))
(begin0
  (get-output-string out)
  (close-input-port in)
  (close-output-port out))
```

Is there a form that encapsulates this pattern? I searched among the `with-*` forms from `racket/port` to no success. Thanks in advance.</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T10:22:39.000296</ts>
    <user>Karry</user>
    <text>`process`?</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T10:22:43.000809</ts>
    <user>Karry</user>
    <text>&lt;http://docs.racket-lang.org/reference/subprocess.html?q=system&gt;</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T10:23:29.000532</ts>
    <user>Karry</user>
    <text>Or some other form in the `racket/system` section perhaps?</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T10:24:23.000586</ts>
    <user>Karry</user>
    <text>(unless you're talking about that very specific pattern, and I'm just pointing you to the functions you're already aware of -- if so sorry! =)</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T10:30:53.000647</ts>
    <user>Erika</user>
    <text>Thanks for the answer, but those aren’t what I’m looking for. I want something that allows me to treat an executable more or less like a `string → string` function.</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T10:45:26.000305</ts>
    <user>Erika</user>
    <text>I built my abstraction for what I want:

```
(define ((system*→λ command . arg) input/string)
  (define in (open-input-string input/string))
  (define out (open-output-string))
  (parameterize ([current-input-port in]
                 [current-output-port out]
                 [current-error-port out])
    (apply system* command arg))
  (begin0
    (get-output-string out)
    (close-input-port in)
    (close-output-port out)))

&amp;gt; ((system*→λ "/bin/cat") "abc")
"abc"
```

Please let me know if there’s a better way to achieve this or if there are reasons why I shouldn’t be doing it at all :stuck_out_tongue:</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T11:37:37.000132</ts>
    <user>Alesha</user>
    <text>&lt;@Erika&gt; I like that abstraction! Though often its easier to work with system*'s boolean result which tells you if the command exited successfully or not instead of trying to analyze what was emitted to output. In that case it could be `string -&amp;gt; boolean string` if you want multiple values or could be `string -&amp;gt; Listof boolean string`</text>
  </message>
  <message conversation_id="90">
    <ts>2018-02-06T11:39:02.000851</ts>
    <user>Alesha</user>
    <text>Another thing, there's always the possibility that the command won't complete so `system*-&amp;gt;λ` won't return. Not sure if you're thinking of using it with another mechanism like sync/timeout or will you be handling that within `system*-&amp;gt;λ` itself?</text>
  </message>
  <message conversation_id="90">
    <ts>2018-02-06T11:39:41.000211</ts>
    <user>Alesha</user>
    <text>by won't complete, I meant the command doesn't exit at all, instead it diverges</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T11:41:31.000388</ts>
    <user>Erika</user>
    <text>My purpose is to use the result of `system*-&amp;gt;λ` in the REPL, so I don’t have to worry about divergence :slightly_smiling_face:</text>
  </message>
  <message conversation_id="90">
    <ts>2018-02-06T11:42:29.000251</ts>
    <user>Alesha</user>
    <text>indeed, in that case, no need to worry about that</text>
  </message>
  <message conversation_id="88">
    <ts>2018-02-06T11:44:24.000452</ts>
    <user>Erika</user>
    <text>Thank you for bringing up these issues, though.</text>
  </message>
  <message conversation_id="90">
    <ts>2018-02-06T11:46:04.000502</ts>
    <user>Alesha</user>
    <text>no problem, I often use `system` and its cousins in my scripts for automating building artifacts so I might borrow your new abstraction, it's easier to reason about</text>
  </message>
  <message conversation_id="90">
    <ts>2018-02-06T11:54:22.000121</ts>
    <user>Erika</user>
    <text>I’m glad it might help you.</text>
  </message>
  <message conversation_id="91">
    <ts>2018-02-06T13:43:33.000532</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; question about `define-runtime-path` -- my understanding was that it should prevent absolute paths from occurring in zo files, but there are some where it does, such as `scriblib/book-index.rkt`</text>
  </message>
  <message conversation_id="91">
    <ts>2018-02-06T13:47:40.000149</ts>
    <user>Monserrate</user>
    <text>the issue seems to be this call: `(path-&amp;gt;collects-relative "/home/samth/sw/plt/racket/share/pkgs/scribble-lib/scriblib/unknown")`</text>
  </message>
  <message conversation_id="91">
    <ts>2018-02-06T13:48:00.000045</ts>
    <user>Monserrate</user>
    <text>which just produces that path again</text>
  </message>
  <message conversation_id="91">
    <ts>2018-02-06T13:49:01.000510</ts>
    <user>Lynna</user>
    <text>That does seem wrong. Possibly, the path should be preserved as a path (insteda of a byte string) so that it gets made relative in the usual way for paths in bytecode.</text>
  </message>
  <message conversation_id="91">
    <ts>2018-02-06T13:50:02.000731</ts>
    <user>Monserrate</user>
    <text>I don't actually understand why we're in that case, though, since it should only happen if `(syntax-source stx)` doesn't give us a path, which shouldn't happen there</text>
  </message>
  <message conversation_id="91">
    <ts>2018-02-06T13:58:53.000655</ts>
    <user>Lynna</user>
    <text>I'm not sure how you arrived at that conclusion, but from a quick look, it seems like line 44 of "collects/racket/private/this-expresson-source-directory.rkt" may be the place to change. (I didn't try it.)</text>
  </message>
  <message conversation_id="91">
    <ts>2018-02-06T14:02:51.000005</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; just peeking out of curiosity… on line 187 of runtime-path.rkt, it appears to copy lexical context but not source location information.</text>
  </message>
  <message conversation_id="91">
    <ts>2018-02-06T14:03:14.000017</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; aha, that would explain it</text>
  </message>
  <message conversation_id="91">
    <ts>2018-02-06T14:04:56.000056</ts>
    <user>Monserrate</user>
    <text>that fixes that problem</text>
  </message>
  <message conversation_id="92">
    <ts>2018-02-07T10:01:21.000171</ts>
    <user>Dia</user>
    <text>Does anyone know the recipe for a functional hash table in Java? I feel like my google-fu is terrible because of different ideas about functional/persistent mean to java people</text>
  </message>
  <message conversation_id="92">
    <ts>2018-02-07T10:37:16.000231</ts>
    <user>Dia</user>
    <text>You gotta google "purely functional" :slightly_smiling_face:</text>
  </message>
  <message conversation_id="92">
    <ts>2018-02-07T11:20:17.000081</ts>
    <user>Karry</user>
    <text>&lt;@Dia&gt; maybe &lt;https://github.com/usethesource/capsule&gt;</text>
  </message>
  <message conversation_id="92">
    <ts>2018-02-07T11:20:39.000376</ts>
    <user>Karry</user>
    <text>from this paper &lt;https://michael.steindorfer.name/publications/oopsla15.pdf&gt;</text>
  </message>
  <message conversation_id="93">
    <ts>2018-02-07T12:07:22.000633</ts>
    <user>Carolyne</user>
    <text>For the Mac users out there: if you hide DrRacket (DrRacket menu -&amp;gt; Hide DrRacket or cmd-H), does it just immediately pop back up? That's what I'm seeing on High Sierra</text>
  </message>
  <message conversation_id="93">
    <ts>2018-02-07T12:08:59.000050</ts>
    <user>Carolyne</user>
    <text>I'm only seeing this on one computer and it's the only one I have with High Sierra, so I'm trying to narrow down the problem before I open an issue</text>
  </message>
  <message conversation_id="94">
    <ts>2018-02-07T15:29:40.000057</ts>
    <user>Lynna</user>
    <text>&lt;@Burton&gt; &lt;@Dia&gt; Is this an internal package-server error?
&lt;https://pkgs.racket-lang.org/package/handy&gt;</text>
  </message>
  <message conversation_id="95">
    <ts>2018-02-07T15:51:04.000601</ts>
    <user>Alesha</user>
    <text>a question for my curiosity, how does DrRacket's documentation pop up (or expand in?) found at the upper right corner determine what topic to automatically display? It seems to choose based on what I had just typed in, I was thinking it would be nice if it instead chose based on where I placed the caret. Is there a way to configure the documentation system to look up based on caret's location?</text>
  </message>
  <message conversation_id="94">
    <ts>2018-02-07T16:19:49.000259</ts>
    <user>Dia</user>
    <text>&lt;@Lynna&gt; Yes, I'll fix it</text>
  </message>
  <message conversation_id="93">
    <ts>2018-02-07T18:14:54.000080</ts>
    <user>Carrol</user>
    <text>&lt;@Carolyne&gt; I’m not on high sierra, and it does the same here. It doesn’t pop up… the next app in line stays forefront, but it does become immediately available. Please file a bug on racket/drracket</text>
  </message>
  <message conversation_id="95">
    <ts>2018-02-07T18:16:13.000245</ts>
    <user>Carrol</user>
    <text>&lt;@Alesha&gt; it does show the documentation based on where the text cursor is. Either on what you just typed, or clicked on.</text>
  </message>
  <message conversation_id="96">
    <ts>2018-02-07T18:47:40.000381</ts>
    <user>Helena</user>
    <text>does anyone know how contract combinators use the `#:stronger` argument?</text>
  </message>
  <message conversation_id="96">
    <ts>2018-02-07T18:48:33.000263</ts>
    <user>Helena</user>
    <text>I tried adding some prints to `racket/contract/private/box.rkt`, and then I tried running this program: 
```
#lang racket
(for/fold ([acc (box 'hello)])
          ([i (in-range 4)])
  (contract (box/c symbol?) acc 'pos 'neg))
```
and my prints aren't showing up, so it looks like `box/c-stronger` isn't getting called</text>
  </message>
  <message conversation_id="96">
    <ts>2018-02-07T18:50:07.000063</ts>
    <user>Helena</user>
    <text>I had thought something like `contract-stronger?` would get called any time a value with a contract got a new contract ... so `(contract (box/c A) (contract (box/c B) val 'pos 'neg) 'pos 'neg)` should call stronger? one time</text>
  </message>
  <message conversation_id="96">
    <ts>2018-02-07T19:53:37.000187</ts>
    <user>Jen</user>
    <text>&lt;@Helena&gt; I'm not actually sure it's used anywhere other than this bit in the instanceof/c projection to avoid building up contracts: &lt;https://github.com/racket/racket/blob/master/racket/collects/racket/private/class-c-old.rkt#L1297&gt;</text>
  </message>
  <message conversation_id="96">
    <ts>2018-02-07T20:46:32.000283</ts>
    <user>Helena</user>
    <text>thanks &lt;@Jen&gt; , that matches what I'm seeing. This is very surprising to me.</text>
  </message>
  <message conversation_id="97">
    <ts>2018-02-07T21:42:50.000066</ts>
    <user>Dia</user>
    <text>&lt;@Lynna&gt; fixed now!</text>
  </message>
  <message conversation_id="98">
    <ts>2018-02-08T09:06:53.000333</ts>
    <user>Alesha</user>
    <text>&lt;@Carrol&gt; thank you for your comment, it would seem that clicking on identifiers don't work for me, meaningthat the documentation display doesn't change when I click on something. As far as I can tell, the only thing that works is what I just typed.</text>
  </message>
  <message conversation_id="98">
    <ts>2018-02-08T09:24:34.000081</ts>
    <user>Alesha</user>
    <text>Ok I've discovered that the trick is you have to click on the lock icon or press F2 the keyboard equivalent to keep the popup open and only then clicking on identifiers will cause the popup to update</text>
  </message>
  <message conversation_id="98">
    <ts>2018-02-09T00:19:46.000050</ts>
    <user>Carrol</user>
    <text>oh! yes, that is what I did too</text>
  </message>
  <message conversation_id="98">
    <ts>2018-02-09T00:20:06.000026</ts>
    <user>Carrol</user>
    <text>sorry. I always have a doco browser open as I don’t use drRacket much</text>
  </message>
  <message conversation_id="98">
    <ts>2018-02-09T00:20:11.000112</ts>
    <user>Carrol</user>
    <text>(just for debugging)</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:28:49.000176</ts>
    <user>Wally</user>
    <text>Any redex wizards in the room? I've modeled a language design on paper and want to use redex to explore / prove interesting properties, like I might with CoQ. I prefer to model "reductions" as judgments, as in Pierce's TaPL.</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:29:37.000648</ts>
    <user>Wally</user>
    <text>I've got a grammar compiled and can write a simple judgment, but it's not clear what to do afterwards.</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:31:56.000579</ts>
    <user>Wally</user>
    <text>So far, I've figured out how to use `#:binding-forms` and `#:refers-to` to make `substitute` work properly.</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:32:41.000173</ts>
    <user>Helena</user>
    <text>I guess you'll want a metafunction to reduce terms to values</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:32:55.000653</ts>
    <user>Helena</user>
    <text>and then write tests to see that evaluation works like you expect</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:33:21.000248</ts>
    <user>Wally</user>
    <text>here's what I'm working with ```
(define-language lambda
  [t ::= (λ (x) t) (t t) n x]
  [v ::= (λ (x) t) n]
  [n := number]
  [x ::= variable-not-otherwise-mentioned]
  #:binding-forms
  (λ (x) t #:refers-to x))

(define-judgment-form lambda
  #:mode (steps I O)
  #:contract (steps t t)
  [(steps ((λ (x) t) v) t*)
   (where t* (substitute x v t))
   "E-AppAbs"])```</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:33:59.000051</ts>
    <user>Helena</user>
    <text>is this a typo: `[v ::= (λ (x) t n)]`</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:34:26.000035</ts>
    <user>Wally</user>
    <text>no, that's a single-var abstraction</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:35:19.000840</ts>
    <user>Wally</user>
    <text>Can I make progress with a judgment of this form?</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:35:55.000323</ts>
    <user>Wally</user>
    <text>oh</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:35:56.000411</ts>
    <user>Wally</user>
    <text>wait</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:35:57.000259</ts>
    <user>Wally</user>
    <text>yes</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:36:02.000516</ts>
    <user>Helena</user>
    <text>ok</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:36:22.000424</ts>
    <user>Helena</user>
    <text>well the next things I'd do are: (1) write tests with `redex-match?` and (2) write tests for `steps`</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:36:45.000421</ts>
    <user>Wally</user>
    <text>fixed the typo. Sorry, losing sleep over this</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:36:47.000579</ts>
    <user>Helena</user>
    <text>(with `judgment-holds`)</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:40:55.000034</ts>
    <user>Wally</user>
    <text>ok cool, so `redex-match?` will generate test cases automatically, like haskell quickcheck?</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:41:02.000272</ts>
    <user>Helena</user>
    <text>no</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:42:09.000596</ts>
    <user>Wally</user>
    <text>oh, then it matches a pattern against a term</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:42:48.000412</ts>
    <user>Wally</user>
    <text>i see, the "curried" version of `redex-match` is for efficiency</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:43:24.000669</ts>
    <user>Helena</user>
    <text>yep. I think there's a way to use `redex-check` though</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:45:26.000776</ts>
    <user>Helena</user>
    <text>maybe `(redex-check lambda t (redex-match? lambda t))`</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:46:48.000803</ts>
    <user>Helena</user>
    <text>(I usually write tests by hand)</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:46:57.000055</ts>
    <user>Wally</user>
    <text>Neat, `redex-check` will search for counter-examples at least.</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:48:51.000113</ts>
    <user>Wally</user>
    <text>I'm curious, what is redex intended for?</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:49:47.000386</ts>
    <user>Helena</user>
    <text>modeling!</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:50:05.000776</ts>
    <user>Helena</user>
    <text>quickly build a language, judgments</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:50:11.000680</ts>
    <user>Helena</user>
    <text>and test that everything works like you expect</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:50:19.000149</ts>
    <user>Helena</user>
    <text>then later, you can add new features to the languages</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:50:22.000564</ts>
    <user>Helena</user>
    <text>*language</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:50:27.000599</ts>
    <user>Helena</user>
    <text>and test that you didn't break anything</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:50:57.000690</ts>
    <user>Wally</user>
    <text>Could I use it to prove my model is sound?</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:51:04.001056</ts>
    <user>Helena</user>
    <text>no</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:51:09.000367</ts>
    <user>Helena</user>
    <text>but you can test soundness</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:51:25.000733</ts>
    <user>Helena</user>
    <text>and yeah, coq on the other hand would help you prove soundness</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:51:30.000825</ts>
    <user>Wally</user>
    <text>I see. Hence the "practical" qualifier?</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:51:37.000011</ts>
    <user>Helena</user>
    <text>but you have to do more work to get that</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:51:38.000159</ts>
    <user>Helena</user>
    <text>yep</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:51:49.000265</ts>
    <user>Wally</user>
    <text>cool, thanks &lt;@Helena&gt;!</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:52:34.000361</ts>
    <user>Helena</user>
    <text>it would be great if someone extended redex to prove coq-like theorems</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:52:47.000691</ts>
    <user>Helena</user>
    <text>but I'm not sure I would use it as much as "basic redex"</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:53:16.000502</ts>
    <user>Helena</user>
    <text>(because no matter what, there's usually a big gap between the model &amp;amp; actual language, so I just want a model that's quick and easy to work with)</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:53:29.000045</ts>
    <user>Wally</user>
    <text>I've got a use case or two in mind</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:54:31.000221</ts>
    <user>Wally</user>
    <text>At this point in a project (too much mess, time to fix some structure), I have to transition from Racket to Haskell or CoQ.</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:54:33.000487</ts>
    <user>Karry</user>
    <text>&lt;@Helena&gt; did we ever consider not distinguishing between mutable and weak hashes at the type level?</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:55:22.000697</ts>
    <user>Wally</user>
    <text>Neither is ideal because they have entirely different sets of quirks that won't matter back in Racket land.</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:55:35.000712</ts>
    <user>Helena</user>
    <text>no, I don't think so</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:56:24.000171</ts>
    <user>Wally</user>
    <text>Sometimes, there's too much friction to return to Racket land, which is tragic.</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T11:58:38.000424</ts>
    <user>Helena</user>
    <text>so you'd want to be able to use redex instead of coq?</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T12:02:00.000391</ts>
    <user>Wally</user>
    <text>short answer, yes</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T12:08:09.000335</ts>
    <user>Wally</user>
    <text>I want the benefits of types and ~inductive logic~ structural induction, but without the overhead of multiple toolchains. I was hoping to use Redex models to explore the language design as it evolves.</text>
  </message>
  <message conversation_id="100">
    <ts>2018-02-09T12:50:03.000076</ts>
    <user>Wally</user>
    <text>Found a tool called Ott (&lt;http://www.cl.cam.ac.uk/~pes20/ott/top2.html&gt;) that does something like what I thought redex would</text>
  </message>
  <message conversation_id="99">
    <ts>2018-02-09T12:50:59.000163</ts>
    <user>Wally</user>
    <text>Except more racket-y, like output to scribble</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T09:50:22.000330</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; What is going to happen with `raco ctool` and Racket modules made in C in Racket 7?</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T09:50:41.000016</ts>
    <user>Odis</user>
    <text>As far as I can tell it seems to not be in the current implementation.</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T13:35:07.000283</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; `raco ctool` is still there for `racket7` = "the current Racket VM, but with a Racket-implemented expander". For Racket-on-Chez, `raco ctool` will not do anything useful.</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T13:36:56.000450</ts>
    <user>Lynna</user>
    <text>Oh, it's possible that I haven't set up the part that can load a C implementation of a module in `racket7`, which is probably what you mean. I'll have to look into that.</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T13:53:29.000696</ts>
    <user>Odis</user>
    <text>Yup, that is what I was trying to get at. I was talking with &lt;@Gaynell&gt; about it.</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T13:54:03.000256</ts>
    <user>Odis</user>
    <text>(I noticed that I could us swig to generate c++ bindings for Racket, but it used the sort of C-level Racket modules to do so.)</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T13:58:58.000116</ts>
    <user>Alesha</user>
    <text>&lt;@Odis&gt; I hadn't heard of swig before. I likely will need to use a C++ library for my Racket project and was dreading needing to create a C wrapper for it so swig may be my knight in shining armor.</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T14:10:36.000076</ts>
    <user>Odis</user>
    <text>&lt;@Alesha&gt; Hopefully it does help.</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T14:11:04.000523</ts>
    <user>Odis</user>
    <text>Obviously it does have to work by generating C wrappers. But swig does at least support racket directly. (Although it still refers to it as mzscheme)</text>
  </message>
  <message conversation_id="102">
    <ts>2018-02-12T14:28:27.000438</ts>
    <user>Alesha</user>
    <text>I noticed that part too, I'll give it a try and see how it goes :crossed_fingers:</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T14:28:38.000466</ts>
    <user>Odis</user>
    <text>g’luck</text>
  </message>
  <message conversation_id="103">
    <ts>2018-02-12T19:45:01.000209</ts>
    <user>Monserrate</user>
    <text>Swig was created by one of my professors from undergrad</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T19:55:11.000178</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; That’s pretty cool.</text>
  </message>
  <message conversation_id="101">
    <ts>2018-02-12T19:55:38.000264</ts>
    <user>Odis</user>
    <text>I wonder what the chances of adding a different flag for ‘racket’ (then the existing mzscheme one)</text>
  </message>
  <message conversation_id="104">
    <ts>2018-02-12T20:52:39.000169</ts>
    <user>Carlyn</user>
    <text>What is the easiest way to create a synchronizable event that is just like an existing synchronizable event, but after it first becomes ready for synchronization, it stays ready for synchronization and its result is cached? Sort of like a promise, but for events?</text>
  </message>
  <message conversation_id="104">
    <ts>2018-02-12T20:58:10.000010</ts>
    <user>Carlyn</user>
    <text>It seems like I can get what I want with the following:
```
#lang racket

(define (promise-evt evt)
  (let ([sem (make-semaphore)]
        [val #f])
    (thread (λ ()
              (set! val (sync evt))
              (semaphore-post sem)))
    (wrap-evt (semaphore-peek-evt sem)
              (λ (evt) val))))

(define chan (make-channel))
(define one-time-chan-evt (promise-evt chan))

(thread (λ ()
          (sleep 2)
          (channel-put chan 'hello)))

(sync one-time-chan-evt)
(sync one-time-chan-evt)
```
…which waits 2 seconds, then prints `'hello` twice, but I’m wondering if I’m overlooking a better way.</text>
  </message>
  <message conversation_id="104">
    <ts>2018-02-12T21:01:30.000183</ts>
    <user>Carlyn</user>
    <text>In fact, what I am really trying to build here is an abstraction that represent a box to be filled in later by another thread, but it will only ever be empty for one continuous period, and then it will be filled forever. Again, sort of like a promise, except it is explicitly resolved by an imperative update by a producer thread.</text>
  </message>
  <message conversation_id="104">
    <ts>2018-02-12T21:07:38.000222</ts>
    <user>Alesha</user>
    <text>Why not just create a filled box and return it through a channel, then throw away the channel since you won't need to use it again. It seems unnecessary to need to sync repeatedly if the value never changes.</text>
  </message>
  <message conversation_id="104">
    <ts>2018-02-12T21:08:19.000302</ts>
    <user>Carlyn</user>
    <text>Multiple threads might wish to synchronize on the same event.</text>
  </message>
  <message conversation_id="104">
    <ts>2018-02-12T21:19:16.000124</ts>
    <user>Alesha</user>
    <text>Ahh ok so sync would be the preferred way to coordinate the threads</text>
  </message>
  <message conversation_id="104">
    <ts>2018-02-12T21:19:52.000179</ts>
    <user>Alesha</user>
    <text>The promise-evt approach seems good to me. I'm wondering if could remove the need for a thread in the promise-evt definition</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-12T21:57:46.000049</ts>
    <user>Wally</user>
    <text>I found a thread-less version, FWIW</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-12T21:58:06.000042</ts>
    <user>Wally</user>
    <text>(sorry, addicted to `sync`)</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-12T21:58:18.000081</ts>
    <user>Wally</user>
    <text>In `redex`, is it possible to specify or render judgments that look like this? ```
       e_1 --&amp;gt; e_1*
   -------------------- E-App1
   e_1 e_2 --&amp;gt; e_1* e_2
```</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-12T22:00:00.000201</ts>
    <user>Wally</user>
    <text>Also, is it possible to render normal primes instead of subscripted asterisks?</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-12T22:14:51.000156</ts>
    <user>Carlyn</user>
    <text>&lt;@Wally&gt; I’d be curious to see a threadless implementation.</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-12T22:51:50.000113</ts>
    <user>Wally</user>
    <text>```
(define (promise-evt evt)
  (let ([sem (make-semaphore 0)]
        [val #f])
    (choice-evt
      (handle-evt (semaphore-peek-evt sem) (λ _ val))
      (replace-evt evt (λ (v)
                         (set! val v)
                         (semaphore-post sem)
                         never-evt)))))
```</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-12T22:53:55.000184</ts>
    <user>Wally</user>
    <text>Maybe the semaphore needs some fiddling to avoid a race</text>
  </message>
  <message conversation_id="106">
    <ts>2018-02-13T08:36:04.000078</ts>
    <user>Alesha</user>
    <text>That's pretty neat, I started to fiddle around with using replace-evt and handle-evt to see if I could figure out a threadless version but wasn't able to make it work. I see I was missing choice-evt. This is quite fun exercise.</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:23:24.000457</ts>
    <user>Wally</user>
    <text>&lt;@Alesha&gt; I love events -- faster than threads for IO-bound concurrency. There's a thread-friendly "cooperative" multitasking DSL or two in them somewhere, I'm sure.</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:27:39.000286</ts>
    <user>Wally</user>
    <text>With a more convenient arrangement, they're easier to work with. I've started collecting event-based primitives in another project, documented here (&lt;http://docs.racket-lang.org/neuron/Control_Your_Resources.html#%28def._%28%28lib._neuron%2Fconcurrency..rkt%29._evt-set%29%29&gt;)</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:30:38.000054</ts>
    <user>Wally</user>
    <text>The reset of the procedures in that section are implemented as events, threads, or both.</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:36:30.000529</ts>
    <user>Wally</user>
    <text>Neuron is (at the moment) a dataflow networking library, where thread-like "processes" can exchange messages through synchronous channels.</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:37:30.000531</ts>
    <user>Ezra</user>
    <text>&lt;@Wally&gt; what is the end goal of the Neuron?</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:38:39.000757</ts>
    <user>Wally</user>
    <text>&lt;@Ezra&gt; roughly, to turn the Internet into a giant artificial brain.</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:40:57.000262</ts>
    <user>Wally</user>
    <text>Right now, it's just a dataflow networking library on top of a custom concurrency model</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:42:07.000065</ts>
    <user>Wally</user>
    <text>I have apps working as PoCs driving a multiplayer game server back end and small-scale web app stuff.</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:42:35.000224</ts>
    <user>Ezra</user>
    <text>&lt;@Wally&gt; interesting what problem does Neuron address?</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:42:47.000590</ts>
    <user>Wally</user>
    <text>That's a great question</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:44:21.000516</ts>
    <user>Wally</user>
    <text>I think the Web has become too dependent on massive centralized services and want to level the playing field, so to speak, without having to fight big companies head on</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:45:29.000017</ts>
    <user>Wally</user>
    <text>I think society has problems related to these circumstances and want to provide healthier alternatives to toxic echo chambers and stuff like that</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:45:53.000387</ts>
    <user>Ezra</user>
    <text>I like it even more now :wink:</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:46:13.000382</ts>
    <user>Ezra</user>
    <text>Can you give an ultimate use case for Neuron</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:48:06.000259</ts>
    <user>Wally</user>
    <text>That's a tough one</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:48:53.000630</ts>
    <user>Wally</user>
    <text>It's a toolkit for growing software ecosystems, like Racket and its package manager and all the communications tools we use to coordinate and share.</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:48:54.000090</ts>
    <user>Ezra</user>
    <text>sorry :wink:</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:49:31.000022</ts>
    <user>Wally</user>
    <text>It's all about building communities online by leveraging real world relationships</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:49:41.000671</ts>
    <user>Wally</user>
    <text>Right now, it's just concurrency and some distributed computing</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:50:00.000157</ts>
    <user>Wally</user>
    <text>The next big step is to add capability-based security</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:50:40.000303</ts>
    <user>Ezra</user>
    <text>thanks for your time - I've found neuron on the pkgs website but wasn't sure what exactly is the purpose of it - it is much clearer now</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:50:57.000181</ts>
    <user>Wally</user>
    <text>Cool, thanks for asking. It's good practice :smiley:</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T11:52:39.000565</ts>
    <user>Ezra</user>
    <text>love the idea, will keep an eye on the project!</text>
  </message>
  <message conversation_id="105">
    <ts>2018-02-13T12:36:25.000505</ts>
    <user>Alesha</user>
    <text>&lt;@Wally&gt; thanks for the reference to Neuron, it looks interesting. I'm encouraged to study concurrency more extensively. I don't have a good grasp of the implications of "faster than threads for IO-bound concurrency." To me concurrency has always had that notorious reputation of being difficult to reason about so it'll be a good exercise for me to use Racket's events to solve classical concurrency problems.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T12:40:38.000488</ts>
    <user>Alesha</user>
    <text>looks like Neuron's been inspired by the pi-calculus, is that a fair assessment?</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:02:53.000056</ts>
    <user>Wally</user>
    <text>&lt;@Alesha&gt; yes, pi calculus also uses synchronous channels</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:03:40.000647</ts>
    <user>Wally</user>
    <text>and the dual give/take emit/recv are modeled on pi calculus channel operations</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:11:50.000054</ts>
    <user>Wally</user>
    <text>You know, in Neuron's control flow code, there's no obvious correlation between events and IO performance. For example, a `bridge`, which forwards values between two processes, isfaster as a composite event than a collection of threads. A `proxy`, which does roughly the same thing for a single process, is faster as threads.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:14:06.000003</ts>
    <user>Alesha</user>
    <text>my question is how is `bridge` faster than using a collection of threads? Is it due to overhead of threads or because using events basically is as fast as copy between two memory locations?</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:14:37.000295</ts>
    <user>Wally</user>
    <text>I wish I knew how to answer questions like that easily</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:14:41.000069</ts>
    <user>Alesha</user>
    <text>I had been under the impression that threads are very cheap in Racket</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:15:06.000576</ts>
    <user>Wally</user>
    <text>Yeah, and processes are thread + kitchen sink, but sometimes using processes is faster than using threads.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:15:37.000428</ts>
    <user>Alesha</user>
    <text>interesting, I find that surprising, though I don't really have a good intuition yet when Racket threads and concurrency are involved</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:16:15.000568</ts>
    <user>Wally</user>
    <text>My totally un-educated guess is some sort of compile-time optimizations</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:16:32.000443</ts>
    <user>Alesha</user>
    <text>ok</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:17:19.000571</ts>
    <user>Alesha</user>
    <text>were you using timing measurements to compare the performance of say `bridge` versus threads</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:17:32.000322</ts>
    <user>Alesha</user>
    <text>am just curious about how one would go around measuring this kind of stuff</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:18:32.000272</ts>
    <user>Wally</user>
    <text>I'd implement using threads first, then `raco setup -D neuron &amp;amp;&amp;amp; (time raco test control.rkt &amp;lt;three times&amp;gt;)` and eyeball the average</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:18:43.000401</ts>
    <user>Wally</user>
    <text>Then, repeat with events only</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:18:51.000052</ts>
    <user>Wally</user>
    <text>Sometimes, try a combination.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:18:58.000645</ts>
    <user>Alesha</user>
    <text>makes sense, ok cool</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:19:28.000321</ts>
    <user>Wally</user>
    <text>Threaded code is much nicer to look at</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:20:50.000330</ts>
    <user>Alesha</user>
    <text>as opposed to using only or mostly events for concurrency?</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:22:11.000390</ts>
    <user>Wally</user>
    <text>Yes, events have more syntactic noise because you're using a continuation-passing style.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:22:58.000121</ts>
    <user>Alesha</user>
    <text>ok understood</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:23:08.000020</ts>
    <user>Alesha</user>
    <text>is Neuron still experimental or a stable alpha package?</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:23:35.000115</ts>
    <user>Wally</user>
    <text>Been struggling with that. I think the package is too big.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:24:35.000664</ts>
    <user>Wally</user>
    <text>Part 1 is stable alpha, Part 2 design is stablizing now.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:24:55.000265</ts>
    <user>Wally</user>
    <text>Parts 3 and 4 are vaporware</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:25:25.000489</ts>
    <user>Alesha</user>
    <text>I noticed that based on how much documentation had been filled out for each of the parts</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:25:57.000113</ts>
    <user>Wally</user>
    <text>What you see so far is about one Masters thesis worth ofwork</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:26:02.000027</ts>
    <user>Alesha</user>
    <text>while I've only given it a cursory glance, the package doesn't seem that big to me, but I'll defer to your judgement</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:27:49.000271</ts>
    <user>Alesha</user>
    <text>seems like a nice piece of work, I won't try to worry too much about trying to perfect it or you'll never be able to be at peace :sob:</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:28:01.000183</ts>
    <user>Wally</user>
    <text>haha learning that the hard way</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:28:10.000039</ts>
    <user>Alesha</user>
    <text>might be better to let it gain more real-world experience to help guide future improvements</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:28:35.000611</ts>
    <user>Wally</user>
    <text>The project stalled until I watched &lt;@Marnie&gt; start the `net2` package.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:29:07.000541</ts>
    <user>Wally</user>
    <text>Any more advice on how to think about sharing this would be a huge help</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:29:40.000390</ts>
    <user>Alesha</user>
    <text>if you feel all the relevant procedures and operations are there and ready to be used in real-world applications then I'd say the first version is ready</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:30:40.000467</ts>
    <user>Alesha</user>
    <text>part 3 seems rather important since I can see this being useful for types of applications that need to spawn asynchronous processes such as email notifications, background processing, updates, etc</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:30:59.000508</ts>
    <user>Alesha</user>
    <text>so would be nice to see how Part 3 could help with those kind of scenarios</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:31:33.000317</ts>
    <user>Wally</user>
    <text>Ok, good to know.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:32:26.000265</ts>
    <user>Alesha</user>
    <text>I'm also thinking of gitlab which basically is a large distributed system of Ruby processes handling various operations such as building, testing, listening and receiving git client connections, monitoring programs, and admin functionality</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:32:55.000223</ts>
    <user>Alesha</user>
    <text>most of it is implemented in propriety licensed Ruby libraries so not really available for open-source without paying up</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:33:49.000675</ts>
    <user>Alesha</user>
    <text>I'm thinking of how the Neuron abstractions could serve similar purposes while I'm studying the package docs</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:36:32.000457</ts>
    <user>Alesha</user>
    <text>the only reason I'm even thinking about gitlab is because I spent the last month setting up and configuring a local gitlab instance for my use so was poking around the innards</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:37:12.000167</ts>
    <user>Wally</user>
    <text>Cool! I've never peeked inside Gitlab.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:37:18.000369</ts>
    <user>Wally</user>
    <text>It seemed complicated.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:37:30.000357</ts>
    <user>Alesha</user>
    <text>it is! but it does its job very well</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:38:41.000631</ts>
    <user>Wally</user>
    <text>Neuron is about ready for custom back-end data pipelines. I've used similar designs for artificial intelligence and machine learning applications. That could be a v1.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:39:31.000243</ts>
    <user>Marnie</user>
    <text>hello, `neuron` is cool :wave:</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:39:35.000404</ts>
    <user>Alesha</user>
    <text>why not? Seems you already have use cases to showcase Neuron, why not create small-scale examples of AI and ML apps using Neuron. That would be a good way to eat your own dog food.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:39:44.000328</ts>
    <user>Wally</user>
    <text>&lt;@Marnie&gt; hello!</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:40:37.000170</ts>
    <user>Wally</user>
    <text>Then maybe v1 should include HTTP/1.1 endpoints</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:42:17.000538</ts>
    <user>Alesha</user>
    <text>are you thinking of incorporating Racket's networking support or something from scratch?</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:43:57.000570</ts>
    <user>Wally</user>
    <text>From scratch. I actually had them working on an older prototype.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:44:40.000259</ts>
    <user>Marnie</user>
    <text>and someday there will be http2 in racket :D</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:45:19.000128</ts>
    <user>Wally</user>
    <text>Yes, `net2` will be a drop-in performance upgrade.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:45:52.000552</ts>
    <user>Alesha</user>
    <text>that's neat</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:46:21.000233</ts>
    <user>Wally</user>
    <text>&lt;@Alesha&gt; by networking support, you mean the `net` library?</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:47:17.000581</ts>
    <user>Alesha</user>
    <text>yes that's the library I'm thinking of, it has http functions and etc, seems a shame to reinvent the wheel if you could avoid that</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:48:48.000644</ts>
    <user>Wally</user>
    <text>It didn't work out so well with the Neuron paradigm.</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:49:08.000448</ts>
    <user>Marnie</user>
    <text>HTTP has changed drastically in the time since the `net` implementation was written, so it could use some reinventing</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:49:50.000269</ts>
    <user>Alesha</user>
    <text>yeah such as http2</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:50:13.000212</ts>
    <user>Marnie</user>
    <text>more than that though, the way http1 is used has changed a lot</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:50:45.000024</ts>
    <user>Marnie</user>
    <text>JSON web APIs (and even XML ones) weren't nearly so common then</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:50:58.000366</ts>
    <user>Alesha</user>
    <text>right that is true, the use cases have changed a lot</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:51:27.000317</ts>
    <user>Alesha</user>
    <text>it's all about user-side interactivity with JSON/XML snippets being passed back and forth</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:51:59.000692</ts>
    <user>Marnie</user>
    <text>plus the http/1.1 spec has been updated and some behaviors in the `net` implementation are now highly discouraged</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:52:34.000533</ts>
    <user>Alesha</user>
    <text>ahh I hadn't been aware of that, would you mind giving an example or two of the discouraged behaviour?</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:52:39.000604</ts>
    <user>Marnie</user>
    <text>also I really don't like fiddling with headers as `:` joined bytestrings directly</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:52:55.000260</ts>
    <user>Alesha</user>
    <text>yeah I won't like to do that either</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:53:19.000360</ts>
    <user>Marnie</user>
    <text>This used to be legal:

```
Foo: value1
value2
value3
Bar: whatever
```</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:53:44.000750</ts>
    <user>Marnie</user>
    <text>Header lines that don't contain colons were considered continuations of the previous header line</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:54:44.000504</ts>
    <user>Marnie</user>
    <text>that behavior was deprecated in the updated HTTP/1.1 RFCs (7230 through 7235)</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:54:59.000287</ts>
    <user>Alesha</user>
    <text>I'm following you so far</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:55:13.000718</ts>
    <user>Alesha</user>
    <text>I probably should review the RFCs, it's been a long since I've done that</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:55:40.000079</ts>
    <user>Alesha</user>
    <text>the reason that behavior is now deprecated is because the previously legal format is too error prone?</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:55:56.000530</ts>
    <user>Marnie</user>
    <text>I think so, I'm not positive on the specifics</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:56:20.000503</ts>
    <user>Marnie</user>
    <text>I do know that all headers except `Set-Cookie` are defined to allow "splicing" values together with commas</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:56:29.000456</ts>
    <user>Alesha</user>
    <text>ok, I rarely ever need to work with headers directly in my work so I'm not sure either</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:56:44.000083</ts>
    <user>Marnie</user>
    <text>`Foo: value1\nFoo:value2` is equivalent to `Foo: value1,value2`</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:57:01.000107</ts>
    <user>Alesha</user>
    <text>ahh that does look awkward</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:57:28.000124</ts>
    <user>Alesha</user>
    <text>I can see how allowing multiple legal variants can lead to ambiguity, especially when different browser implementations are available in the wild</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:59:06.000046</ts>
    <user>Marnie</user>
    <text>there's also stuff the current racket http implementations encourage around connections that can lead to issues</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:59:21.000039</ts>
    <user>Marnie</user>
    <text>for instance, opening multiple TCP connections to the same origin is very rarely a good idea</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T13:59:31.000081</ts>
    <user>Marnie</user>
    <text>simultaneously, I mean</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T14:00:00.000015</ts>
    <user>Alesha</user>
    <text>yeah that's definitely a no-no most of the time</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T14:00:27.000613</ts>
    <user>Alesha</user>
    <text>I'll be looking forward to seeing your new `net2` library</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T14:01:39.000615</ts>
    <user>Marnie</user>
    <text>it's slow going since I won't have much free time for a while, but I'm looking forward to it too :)</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T14:03:19.000643</ts>
    <user>Alesha</user>
    <text>always appreciate your hard work one way or another :slightly_smiling_face:</text>
  </message>
  <message conversation_id="107">
    <ts>2018-02-13T14:04:00.000684</ts>
    <user>Marnie</user>
    <text>happy to hear it's been useful :thumbsup:</text>
  </message>
  <message conversation_id="108">
    <ts>2018-02-13T16:19:36.000586</ts>
    <user>Ezra</user>
    <text>&lt;@Wally&gt; from the conversation above - are you saying Neuron could already be used for let's say some ETL process?</text>
  </message>
  <message conversation_id="108">
    <ts>2018-02-13T16:20:31.000462</ts>
    <user>Wally</user>
    <text>If you're writing your own interop layer, then sure.</text>
  </message>
  <message conversation_id="108">
    <ts>2018-02-13T16:22:30.000637</ts>
    <user>Wally</user>
    <text>Out of the box, Neuron instances can exchange messages over the network using s-exp or JSON.</text>
  </message>
  <message conversation_id="108">
    <ts>2018-02-13T16:24:33.000027</ts>
    <user>Ezra</user>
    <text>cool, looking forward to see some sample application as I feel I may have found a use case to play with it in my project</text>
  </message>
  <message conversation_id="108">
    <ts>2018-02-13T16:26:36.000398</ts>
    <user>Wally</user>
    <text>Cool, thanks! I'll announce any new developments here.</text>
  </message>
  <message conversation_id="109">
    <ts>2018-02-14T13:16:00.000332</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt; are there any tests defined for various raco commands like raco make, raco test, raco pkg etc? I'm trying create unit tests for a raco command I've created but am finding it tricky since the main way to invoke a raco command programmatically seems to be `dynamic-require`ing the module but `dynamic-require` won't reload the module if its already been required in a `test-case` earlier in the file.

I'm wondering if the right approach is to create a fresh namespace for each `test-case` and `dynamic-require`ing the raco command into that namespace. Not sure what's the most effective way to unit test a raco command.</text>
  </message>
  <message conversation_id="109">
    <ts>2018-02-14T13:19:19.000018</ts>
    <user>Lynna</user>
    <text>&lt;@Alesha&gt; The `raco exe` tests are in "pkgs/compiler-test/tests/compiler/embed/test.rkt", and you'll see that those use `system*`. The `raco pkg` tests do, too, with a more sophisticated harness. But using `dynamic-require` in a fresh namespace seems like a better idea.</text>
  </message>
  <message conversation_id="109">
    <ts>2018-02-14T13:19:58.000355</ts>
    <user>Alesha</user>
    <text>thanks! I'll go check those tests out</text>
  </message>
  <message conversation_id="109">
    <ts>2018-02-14T13:41:53.000607</ts>
    <user>Alesha</user>
    <text>using the fresh namespace approach works very well but an argument can be made that using `system*` captures the natural way a raco command would be invoked so it's debatable whether one or the other is better.</text>
  </message>
  <message conversation_id="110">
    <ts>2018-02-14T17:48:12.000189</ts>
    <user>Odis</user>
    <text>Does `scale/improve-new-text` still do anything different than `scale`?</text>
  </message>
  <message conversation_id="110">
    <ts>2018-02-14T17:48:46.000351</ts>
    <user>Odis</user>
    <text>I ask because the example in the docs look exactly the same to me, and when I try to make an example that would make it extremely obvious, it still looks exactly the same:</text>
  </message>
  <message conversation_id="110">
    <ts>2018-02-14T17:48:47.000331</ts>
    <user>Odis</user>
    <text>&lt;http://pasterack.org/pastes/46342&gt;</text>
  </message>
  <message conversation_id="110">
    <ts>2018-02-14T17:50:50.000382</ts>
    <user>Lynna</user>
    <text>It depends on the graphics library, but I don't know whether there are any left where `scale/improve-new-text` still improves new text.</text>
  </message>
  <message conversation_id="110">
    <ts>2018-02-14T17:51:16.000081</ts>
    <user>Odis</user>
    <text>AH, okay.</text>
  </message>
  <message conversation_id="110">
    <ts>2018-02-14T17:51:36.000409</ts>
    <user>Odis</user>
    <text>I guess I only tried it on macosx and linux builds.</text>
  </message>
  <message conversation_id="110">
    <ts>2018-02-14T17:51:51.000202</ts>
    <user>Odis</user>
    <text>Kind of interesting that that would make a difference, thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="111">
    <ts>2018-02-15T08:41:13.000147</ts>
    <user>Lizeth</user>
    <text>hello! I was hoping to go through the SICP text book and wanted to use racket for it as I hear there is good SICP tooling for it. But i'm on an old chromebook and basically have a command line only linux environment installed and use vim. is it still feasible to do this? can i still use the racket SICP (dialect?) if I'm only using vim and the command line?</text>
  </message>
  <message conversation_id="112">
    <ts>2018-02-15T10:05:20.000547</ts>
    <user>Alesha</user>
    <text>@chasote yes you can! SICP does not care which editor or shell you use. You're free to use whatever tool you want to write and run your code.</text>
  </message>
  <message conversation_id="113">
    <ts>2018-02-15T16:17:39.000434</ts>
    <user>Carrol</user>
    <text>@chasote (not sure why I can’t tab complete you?)</text>
  </message>
  <message conversation_id="113">
    <ts>2018-02-15T16:18:24.000512</ts>
    <user>Carrol</user>
    <text>@chasote you can do everything in the terminal EXCEPT the portion of chapter 2 that does functional graphics composition… that’s fine tho. You can still work through them and think about the problems even if you can’t visualize them</text>
  </message>
  <message conversation_id="113">
    <ts>2018-02-15T16:21:41.000489</ts>
    <user>Carrol</user>
    <text>oh. deactivated. meh</text>
  </message>
  <message conversation_id="114">
    <ts>2018-02-15T17:15:51.000160</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Have you ever had slideshow lock up (like its trying to cache in new slides), but never return? (Also it ignores `Ctr`+`C` events to kill it get ignored)?</text>
  </message>
  <message conversation_id="114">
    <ts>2018-02-15T17:16:24.000041</ts>
    <user>Odis</user>
    <text>I ask because I’m having that problem, and trying to diagnose a cause. At first I thought it was video, but it seems to happen on non-video slides as well.</text>
  </message>
  <message conversation_id="114">
    <ts>2018-02-15T17:16:45.000003</ts>
    <user>Odis</user>
    <text>(But only sporadically)</text>
  </message>
  <message conversation_id="114">
    <ts>2018-02-15T17:17:05.000588</ts>
    <user>Lynna</user>
    <text>I don't see that. I would attach to the process with gdb to get an idea of why it's not responding to Ctl-C</text>
  </message>
  <message conversation_id="114">
    <ts>2018-02-15T17:18:51.000313</ts>
    <user>Odis</user>
    <text>Mmm…good idea. I’ll try that the next time it happens.</text>
  </message>
  <message conversation_id="114">
    <ts>2018-02-15T17:19:12.000515</ts>
    <user>Odis</user>
    <text>(Its very hard to catch when like 99% of the time it doesn’t freeze. :confused: )</text>
  </message>
  <message conversation_id="114">
    <ts>2018-02-15T20:47:42.000133</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Okay, it happened again, and this is the output lldb gave: &lt;https://gist.github.com/LeifAndersen/64cc0971d737217502c0bbef093c32e6&gt;</text>
  </message>
  <message conversation_id="115">
    <ts>2018-02-15T20:47:49.000184</ts>
    <user>Odis</user>
    <text>Does that mean anything to you?</text>
  </message>
  <message conversation_id="115">
    <ts>2018-02-15T20:48:13.000193</ts>
    <user>Lynna</user>
    <text>try `bt`</text>
  </message>
  <message conversation_id="115">
    <ts>2018-02-15T20:52:01.000249</ts>
    <user>Odis</user>
    <text>Ah, good call. It looks like its ffmpeg (or at least how I am using it):

```
  * frame #0: 0x00007fff90f1c5fe libsystem_c.dylib`__vfprintf + 507
    frame #1: 0x00007fff90f466c9 libsystem_c.dylib`__v2printf + 669
    frame #2: 0x00007fff90f2a915 libsystem_c.dylib`_vsnprintf + 596
    frame #3: 0x00007fff90f2a9ca libsystem_c.dylib`vsnprintf + 80
    frame #4: 0x000000010f75c319 libavutil.55.dylib`av_bprintf + 265
```</text>
  </message>
  <message conversation_id="115">
    <ts>2018-02-15T20:52:38.000118</ts>
    <user>Odis</user>
    <text>It looks like its the logger that’s causing the problem. Sigh. Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="116">
    <ts>2018-02-17T12:34:24.000073</ts>
    <user>Wally</user>
    <text>Hello, any Typed Racket users around? I'm having trouble understanding how to handle structured data.</text>
  </message>
  <message conversation_id="116">
    <ts>2018-02-17T12:34:54.000080</ts>
    <user>Wally</user>
    <text>Structs seem to be a pain point for the language?</text>
  </message>
  <message conversation_id="116">
    <ts>2018-02-17T13:04:43.000005</ts>
    <user>Wally</user>
    <text>with sum and product types, I guess rolling my own ADTs might be easy enough</text>
  </message>
  <message conversation_id="116">
    <ts>2018-02-17T13:09:03.000135</ts>
    <user>Wally</user>
    <text>Is there an existing alternative to structs in typed Racket with polymorphism and subtyping?</text>
  </message>
  <message conversation_id="116">
    <ts>2018-02-17T13:09:38.000011</ts>
    <user>Wally</user>
    <text>I don't see anything in pkgs</text>
  </message>
  <message conversation_id="116">
    <ts>2018-02-17T16:49:14.000070</ts>
    <user>Monserrate</user>
    <text>&lt;@Wally&gt; structs are the intended approach</text>
  </message>
  <message conversation_id="117">
    <ts>2018-02-17T16:49:23.000062</ts>
    <user>Monserrate</user>
    <text>What problem are you having?</text>
  </message>
  <message conversation_id="116">
    <ts>2018-02-17T20:37:35.000053</ts>
    <user>Wally</user>
    <text>&lt;@Monserrate&gt; working on a better question now</text>
  </message>
  <message conversation_id="118">
    <ts>2018-02-18T00:10:50.000024</ts>
    <user>Anton</user>
    <text>are there any chatrooms where folks chat about pollen/beautiful racket?</text>
  </message>
  <message conversation_id="118">
    <ts>2018-02-18T03:05:04.000090</ts>
    <user>Marnie</user>
    <text>&lt;@Anton&gt; probably just here</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T10:01:29.000434</ts>
    <user>Karry</user>
    <text>has anyone else had the experience that DrRacket usage is very "broken" on newer Ubuntu versions (i.e. those using Wayland) and had to switch back to the X Window system to make it tolerable?</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T10:01:33.000634</ts>
    <user>Karry</user>
    <text>e.g. &lt;https://github.com/racket/drracket/issues/153&gt;</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:12:46.000569</ts>
    <user>Lynna</user>
    <text>It makes sense that `racket/gui` still has problems with Wayland. It just needs more work. (Ubuntu 18.04 is switching back to Xorg, though.)</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:16:37.000435</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt;, &lt;@Karry&gt; and others: How much does TR depend on the internal protocol for optional arguments, as exposed by expansion?
I'd like to switch from a pair of arguments for optionals – the value and a boolean indicating whether the value is meaningful – to a single argument with `unsafe-undefined` to mean that argument wasn't supplied. In common cases where the default expression is an immediate, the immediate can be used instead of `unsafe-undefined`, and then a callee-side test can be removed.</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:18:23.000322</ts>
    <user>Karry</user>
    <text>&lt;@Lynna&gt; w.r.t. Wayland/Xorg -- I had not noticed Ubuntu had decided to use Xorg for the next LTS release. That greatly lowers the priority if the issue for me :smiley: Thanks for the info!</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:25:55.000259</ts>
    <user>Karry</user>
    <text>&lt;@Lynna&gt; I'm not _intimately_ familiar with the code that handles optional args (and I didn't deal with having to write it the first time), but I've poked around in there some and my sense is we'd have to rewrite most/all of it to support the new protocol. From your description, it doesn't sound like it would be too difficult to cope with the new approach... it's just one or two modules.</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:26:16.000604</ts>
    <user>Karry</user>
    <text>(only 400 LOC in kw-types, for example)</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:36:27.000194</ts>
    <user>Lynna</user>
    <text>Can you point me to the right module?</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:38:17.000159</ts>
    <user>Lynna</user>
    <text>I'm looking at "tc-lambda-unit.rkt", but maybe that's not the right place.</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:39:45.000135</ts>
    <user>Karry</user>
    <text>yah it's tucked away...</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:40:00.000551</ts>
    <user>Karry</user>
    <text>in `kw-types.rkt`:</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:40:01.000625</ts>
    <user>Karry</user>
    <text>&lt;https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/types/kw-types.rkt#L314&gt;</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:40:42.000196</ts>
    <user>Karry</user>
    <text>there's code that converts types from what a user would see (i.e. an arrow with an optional argument) into what the actual expanded definition would have (i.e. an arg-flag and the arg itself)</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:41:17.000320</ts>
    <user>Karry</user>
    <text>(there's a few helper functions in there that would have to be updated to reason about Undefined, etc)</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:43:08.000318</ts>
    <user>Karry</user>
    <text>Yes and I think you're right, there would need to be tweaks in `tc-lambda-unit.rkt` probably, e.g. this code is explicitly reasoning about the flags that currently exist:</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:43:08.000528</ts>
    <user>Karry</user>
    <text>&lt;https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/typecheck/tc-lambda-unit.rkt#L184&gt;</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:44:33.000186</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; I agree with &lt;@Karry&gt; -- the code would have to change, but it sounds like it would be reasonably easy to adapt</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:45:40.000494</ts>
    <user>Monserrate</user>
    <text>Actually, thinking about it more, we would have to think about what the semantics of unsafe-undefined are in TR</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:46:02.000420</ts>
    <user>Monserrate</user>
    <text>IE, is it included in the Any type</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:46:25.000530</ts>
    <user>Monserrate</user>
    <text>So there might be a bit of complication</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:46:41.000341</ts>
    <user>Monserrate</user>
    <text>But it ought to be doable</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:47:32.000118</ts>
    <user>Karry</user>
    <text>Is this a fundamentally different "undefined" than the one we're already reasoning about here: &lt;https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/rep/base-types.rkt#L191&gt;</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:48:36.000358</ts>
    <user>Karry</user>
    <text>&lt;@Monserrate&gt; ^</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:53:27.000216</ts>
    <user>Monserrate</user>
    <text>Yes, those are different values</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:54:52.000154</ts>
    <user>Lynna</user>
    <text>I've pushed the revised protocol to the `newopt6` branch of `&lt;http://github.com:mflatt/racket|github.com:mflatt/racket&gt;`
Do you have time to look at adapting TR? I imagine we'd have to sync Racket and TR changes.</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:55:50.000288</ts>
    <user>Lynna</user>
    <text>As you may expect, this is motivated by `racket7` and looking that things that provide even a tiny improvement in the hope that the tiny improvements add up</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:56:48.000186</ts>
    <user>Monserrate</user>
    <text>I will try to look this evening, not sure about &lt;@Karry&gt; </text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T11:57:45.000402</ts>
    <user>Monserrate</user>
    <text>If you can just post a snippet demonstrating the protocol, especially if you make a stab at typing it in TR, that would be very helpful</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T12:05:17.000441</ts>
    <user>Lynna</user>
    <text>&lt;http://pasterack.org/pastes/82158&gt;</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T12:10:51.000012</ts>
    <user>Lynna</user>
    <text>If I define `unsafe-undefined` as `'unsafe-undefined`, then TR is happy with `(: f7 (Integer (U 'unsafe-undefined (Boxof Integer)) Integer Integer -&amp;gt; (List Integer Integer Integer (Boxof Integer))))`</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-19T12:13:20.000483</ts>
    <user>Lynna</user>
    <text>I guess TR and the implementation of optional arguments may need to agree on which default-argument expressions mean that `unsafe-undefined` won't happen. That's currently defined by `immediate-default?` in "collects/racket/private/kw.rkt"</text>
  </message>
  <message conversation_id="120">
    <ts>2018-02-20T07:49:13.000302</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; Thanks for the great reply. That certainly seems to set the context.</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-20T10:15:33.000330</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; just to be sure I understand, the intended behavior is that if you pass `unsafe-undefined` as the argument to an optional position, it's like it isn't there</text>
  </message>
  <message conversation_id="119">
    <ts>2018-02-20T11:11:49.000211</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt; Yes.
For example, I had to change a test case for `check-not-unsafe-undefined`, because it was passing `unsafe-undefined` as an optional argument to the test harness.</text>
  </message>
  <message conversation_id="121">
    <ts>2018-02-20T12:34:19.000436</ts>
    <user>Erika</user>
    <text>DrRacket runs tests in the `test` submodule, but not tests in a `test` submodule of a submodule, for example:

```
#lang racket
(module+ test
  (displayln "DrRacket runs me"))

(module my-submodule racket
  (module+ test
    (displayln "but doesn’t run me")))
```

I want all tests to run, and my current solution is to add the following at the top level: `(module+ test (require (submod ".." my-submodule test)))`. Is there a more principled approach, or a reason why this is a bad idea?</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T16:42:34.000383</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; Can you point me to where DrRacket draws its arrows in a `text%` field.</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T16:43:25.000481</ts>
    <user>Odis</user>
    <text>(I presume showing the results of `make-traversal` or something like that in the actual buffer.)</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T16:43:54.000078</ts>
    <user>Odis</user>
    <text>I say that because I would like to make a new `racket:text%` buffer that also has the arrows, if that’s possible anyway.</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T16:44:04.000303</ts>
    <user>Odis</user>
    <text>Also &lt;@Jen&gt; might now?</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T16:46:50.000026</ts>
    <user>Odis</user>
    <text>I do see the docs for `syncheck:add-arrow`, but it doesn’t seem to say much about it.</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T16:58:24.000358</ts>
    <user>Eileen</user>
    <text>drracket/private/syncheck/gui.rkt</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T16:59:15.000384</ts>
    <user>Eileen</user>
    <text>Probably better to reuse that code instead of reimplement it</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T17:04:40.000190</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; Okay, thanks.</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T17:05:18.000461</ts>
    <user>Odis</user>
    <text>As I understand it though, that only defines a unit that expects the entire drracket tool, yes?</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T17:06:24.000543</ts>
    <user>Odis</user>
    <text>Like, as far as I can tell it expects the entire drracket tool, so I couldn’t just embed it in a larger snip. Yes?</text>
  </message>
  <message conversation_id="122">
    <ts>2018-02-20T17:20:33.000272</ts>
    <user>Eileen</user>
    <text>I’m sorry, I don’t understand the question.</text>
  </message>
  <message conversation_id="123">
    <ts>2018-02-20T17:55:39.000483</ts>
    <user>Wally</user>
    <text>&lt;@Marnie&gt; &lt;@Andreas&gt; re: in-source docs, I would love to have them -- just like tests, and for the same reasons. This was my first impression of `module+ doc`. I'd be disappointed to learn otherwise.</text>
  </message>
  <message conversation_id="123">
    <ts>2018-02-20T18:13:47.000145</ts>
    <user>Wally</user>
    <text>I think Perl POD had the right idea. Reference doc entries can go right next to the code -- or not. There's POD-only source files for user guides and other docs, and the master index can be searched from the command line.</text>
  </message>
  <message conversation_id="123">
    <ts>2018-02-20T18:14:57.000306</ts>
    <user>Wally</user>
    <text>Scribble does a lot more than POD, and sometimes it gets in the way. Take page breaks. When I don't plan ahead, I'd rather `(newpage)` than break flow to twiddle `title`s.</text>
  </message>
  <message conversation_id="123">
    <ts>2018-02-20T19:08:11.000327</ts>
    <user>Wally</user>
    <text>Maybe I'm conflating "doc" with "spec." The trifecta of responsibility: code, spec, test. Code does something. Spec tells human what code should do. Test tells machine what code should do. Types, as executable specs, do a little bit of both.</text>
  </message>
  <message conversation_id="123">
    <ts>2018-02-20T19:08:28.000063</ts>
    <user>Wally</user>
    <text>Having them all in one place is convenient.</text>
  </message>
  <message conversation_id="124">
    <ts>2018-02-21T02:07:59.000045</ts>
    <user>Jackie</user>
    <text>anybody knows bfs dfs search code examples for graph data</text>
  </message>
  <message conversation_id="124">
    <ts>2018-02-21T02:25:09.000236</ts>
    <user>Jackie</user>
    <text>&lt;https://paste.ee/p/WY4Vp&gt;</text>
  </message>
  <message conversation_id="125">
    <ts>2018-02-21T06:54:16.000025</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; Basically, I would like to take the definitions text% field in DrRacket and place it in a new window, if that’s possible.</text>
  </message>
  <message conversation_id="125">
    <ts>2018-02-21T06:54:34.000177</ts>
    <user>Eugena</user>
    <text>&lt;@Odis&gt; the mixins in macro-debugger/syntax-browser/text might be useful</text>
  </message>
  <message conversation_id="125">
    <ts>2018-02-21T06:55:02.000282</ts>
    <user>Odis</user>
    <text>&lt;@Eugena&gt; Oh cool, thanks. I’ll take a look at that.</text>
  </message>
  <message conversation_id="126">
    <ts>2018-02-21T07:17:03.000299</ts>
    <user>Eileen</user>
    <text>Cmd-n isn't what you want, I presume, but it does that job. </text>
  </message>
  <message conversation_id="125">
    <ts>2018-02-21T07:17:18.000430</ts>
    <user>Eileen</user>
    <text>(So I am still not getting it.)</text>
  </message>
  <message conversation_id="125">
    <ts>2018-02-21T07:23:41.000213</ts>
    <user>Odis</user>
    <text>Hmm…well you know how you can use the `slideshow/repl` package to embed a `racket:text%` object in  a slideshow, I would like to put a text object in a slideshow and still have arrows being drawn.</text>
  </message>
  <message conversation_id="125">
    <ts>2018-02-21T07:24:22.000043</ts>
    <user>Odis</user>
    <text>Does that make any more sense?</text>
  </message>
  <message conversation_id="125">
    <ts>2018-02-21T07:31:20.000149</ts>
    <user>Odis</user>
    <text>Although as a side note (and &lt;@Lynna&gt; might know this one), in `slideshow/repl`, is there any way to have interactions typed into the `result-area` take place inside of a module, like the interactions area in drracket?</text>
  </message>
  <message conversation_id="125">
    <ts>2018-02-21T07:31:38.000070</ts>
    <user>Odis</user>
    <text>Or at least have the provided variables bound?</text>
  </message>
  <message conversation_id="125">
    <ts>2018-02-21T08:10:30.000142</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; That might be possible by supplying `make-namespace` functions to `repl-area` and `make-repl-group` so that they work together, but I wouldn't be surprised if an extra hook is needed to make it work well.</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T12:34:42.000690</ts>
    <user>Alesha</user>
    <text>hello &lt;@Lynna&gt; I was using PLTADDONDIR environment variable to configure a private addon directory to install various packages for a Racket application's use. I noticed that if I give relative paths to the different addon directory I get collection not found errors. It appears the addon directory is being resolved relative to location of the installed package instead of the working directory I was in when I export the PLTADDONDIR variable which I had naively been expecting. If I use absolute paths, it works fine which isn't a surprise. Documentation doesn't mention addon-dir should be given as absolute path, is this something that should be mentioned?</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T12:59:06.000611</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; I've used `scribble/srcdoc` a little (in Frog) and I like it for reference docs. (I haven't gone back and rewritten existing docs to use it, but I'd use it for new projects.)
Of course I'd still have a main container `.scrbl` for prose and `@include-extracted` each `.rkt` with a srcdoc mod.
I did find I wanted a little sugar around `proc-doc` such as &lt;https://github.com/greghendershott/frog/blob/master/frog/private/define-doc.rkt&gt;.</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T13:11:44.000666</ts>
    <user>Lynna</user>
    <text>&lt;@Alesha&gt; The `PLTADDONDIR` environment variable is converted to an absolute path when Racket reads the variable on startup, so normally only an absolute path makes sense. I'll update the docs to clarify.</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T13:15:26.000519</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; I'd like to try to get the Travis and AppVeyor builds working again before merging racket7 -- any thoughts on either the db+macOS issue on Travis, or the strdup issue on Windows (my attempted fix for the strdup issue didn't work)?</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T14:47:43.000621</ts>
    <user>Lynna</user>
    <text>&lt;@Eugena&gt; How well it work for the db concurrency test to use `(sync (system-idle-evt))` instead of sleeping and measuring time? Your comment before characterized the test as checking whether other threads get to run, and `(system-idle-evt)` is a general way to test that property (as long as you can assume no other tests running in threads in the same place).</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T14:49:42.000212</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt; Probably "msvcrt.dll" needs to be specified to get "strdup" or "_strdup" on Windows. I'll see if that makes it work.</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T15:26:44.000352</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; great! why did it produce that strange crash with `#f`?</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T15:28:00.000496</ts>
    <user>Monserrate</user>
    <text>I'm used to getting "undefined symbol" for issues like that</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T15:28:12.000478</ts>
    <user>Lynna</user>
    <text>I guess it's not so much that "mvcrt.dll" is needed as that you need to use a `_strdup` and `free` that connect to the same allocator. (Only on Windows is there a question of which `free` you use.)</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T15:29:06.000078</ts>
    <user>Monserrate</user>
    <text>ah, that makes sense</text>
  </message>
  <message conversation_id="127">
    <ts>2018-02-21T15:48:22.000362</ts>
    <user>Ezra</user>
    <text>DrRacket (6.12) on Windows brings unknown certificate message upon startup</text>
  </message>
  <message conversation_id="128">
    <ts>2018-02-21T15:55:21.000393</ts>
    <user>Lashell</user>
    <text>Which version of Windows? (I can test 8 &amp;amp;10)</text>
  </message>
  <message conversation_id="128">
    <ts>2018-02-21T15:55:31.000483</ts>
    <user>Ezra</user>
    <text>windows 10</text>
  </message>
  <message conversation_id="128">
    <ts>2018-02-21T15:55:47.000644</ts>
    <user>Lashell</user>
    <text>Ok I’ll try </text>
  </message>
  <message conversation_id="128">
    <ts>2018-02-21T15:56:13.000137</ts>
    <user>Eugena</user>
    <text>&lt;@Lynna&gt; I'm not sure how to use that in a test. To recap the problem: suppose T1 and T2 are threads, and T1 executes a db operation; I want to check that T2 is scheduled periodically for the entire duration of T1's db op. If I only perform a single check from T2, then I can't be sure that T2 didn't sneak in just before or after the db operation. So I could have T2 test `(sync/timeout 0 (system-idle-evt))` over and over, but that doesn't seem better than the sleep and counter approach. I'll change the test's fudge factor (meant to earlier, but forgot).</text>
  </message>
  <message conversation_id="128">
    <ts>2018-02-21T15:57:22.000399</ts>
    <user>Lynna</user>
    <text>If T2 can't get past `(sync (system-idle-evt))` by "sneaking in". T1 would have to be specifically blocked somehow – on a semaphore, file descriptor, or something else that the scheduler would know about.</text>
  </message>
  <message conversation_id="128">
    <ts>2018-02-21T16:14:25.000355</ts>
    <user>Eugena</user>
    <text>Oh, I see, right. It's not exactly the property I want, but it sounds like a reasonable proxy. I'll try that instead.</text>
  </message>
  <message conversation_id="128">
    <ts>2018-02-23T11:42:51.000624</ts>
    <user>Tiesha</user>
    <text>Very happy to see CACM 3/18 cover story on programmable programming languages today!</text>
  </message>
  <message conversation_id="129">
    <ts>2018-02-23T16:11:36.000229</ts>
    <user>Helena</user>
    <text>I'm using scribble to write a paper, and I want it to output `\begin{multicols}{2} ... stuff ... \end{multicols}`. Is there an easy way to do this?</text>
  </message>
  <message conversation_id="129">
    <ts>2018-02-23T16:12:30.000008</ts>
    <user>Helena</user>
    <text>`@nested[#:style "multicols"]{... stuff ...}` outputs `\begin{multicols}{2} ... stuff ... \end{multicols}` , but I want to add the `2`</text>
  </message>
  <message conversation_id="129">
    <ts>2018-02-23T16:14:57.000321</ts>
    <user>Willette</user>
    <text>&lt;@Helena&gt;: For stuff like that, I just fall back to TeX directly.</text>
  </message>
  <message conversation_id="129">
    <ts>2018-02-23T16:16:05.000308</ts>
    <user>Helena</user>
    <text>but I'd like `... stuff ...` to be in scribble</text>
  </message>
  <message conversation_id="129">
    <ts>2018-02-23T16:18:30.000289</ts>
    <user>Lynna</user>
    <text>&lt;@Helena&gt; I'd fall back to LaTex to make an `MultiColsTwo` environment that inserts `\begin{multicols}{2}` and `\end{multicols}`.</text>
  </message>
  <message conversation_id="129">
    <ts>2018-02-23T16:18:51.000519</ts>
    <user>Lynna</user>
    <text>Then use `@nested[#:style "MultiColsTwo"]{... stuff ...}`</text>
  </message>
  <message conversation_id="129">
    <ts>2018-02-23T16:19:17.000106</ts>
    <user>Helena</user>
    <text>ok</text>
  </message>
  <message conversation_id="130">
    <ts>2018-02-24T14:49:27.000019</ts>
    <user>Anton</user>
    <text>is there a list of websites written in pollen available anywhere?</text>
  </message>
  <message conversation_id="129">
    <ts>2018-02-24T16:21:01.000021</ts>
    <user>Helena</user>
    <text>this blog is written in pollen &lt;https://github.com/otherjoel/try-pollen&gt;</text>
  </message>
  <message conversation_id="129">
    <ts>2018-02-24T16:22:20.000011</ts>
    <user>Helena</user>
    <text>(I don't know if there's a list of websites written in pollen --- &lt;@Marinda&gt; might)</text>
  </message>
  <message conversation_id="131">
    <ts>2018-02-26T03:40:09.000232</ts>
    <user>Andreas</user>
    <text>How can I enable logging at a certain level with `raco test`? I can do `racket -W "debug@foo" ...` however this is not available in `raco test`. Any suggestions?</text>
  </message>
  <message conversation_id="131">
    <ts>2018-02-26T07:43:02.000119</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; One option is to set `PLTSTDERR`: `env PLTSTDERR="debug@foo" raco test ....`.
Another option is is to run `raco test` as `racket -W "debug@foo" -l- raco test ....`.
The second option is less contagious if the tested program starts new processes, which is good or bad, depending.</text>
  </message>
  <message conversation_id="131">
    <ts>2018-02-26T09:10:03.000256</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; Thanks. For me it seems the first option is cleaner.</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T10:51:37.000100</ts>
    <user>Erika</user>
    <text>Check &lt;https://docs.racket-lang.org/pollen/Getting_more_help.html#%28part._.More_projects___guides%29&gt;</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:25:39.000656</ts>
    <user>Erika</user>
    <text>QUESTION

How do I find the path of current the module, regardless of whether it’s being `require`d by another module or not?

USE CASE

I’m working on a project in which there’s an executable called from Racket:

```
.
├── my-executable
├── run-my-executable.rkt
└── directory
    └── another-module.rkt

;; run-my-executable.rkt
#lang racket
(system* "my-executable")

;; directory/another-module.rkt
#lang racket
(require "../run-my-executable.rkt")
```

When I run `run-my-executable.rkt`, it find `my-executable` and everything works. But when I run `directory/another-module.rkt`, it fails to find `my-executable`, for it not being in `directory`. I wish to solve this problem by modifying `run-my-executable.rkt` so that it provides an absolute path to `my-executable`, but I believe that requires me to find where `run-my-executable.rkt` itself lives.

NON-SOLUTION

The `current-directory` parameter gives me the current working directory, which is different if running `run-my-executable.rkt` directly or by `require`ing it from `directory/another-module.rkt`.

WORKAROUND

I found a Stack Overflow answer [1] that mentions the following code:

```
(variable-reference-&amp;gt;module-path-index (#%variable-reference))
```

This is halfway there, but it seems like overkill for my use case.

[1]: &lt;https://stackoverflow.com/questions/42632854/dynamic-require-a-module-with-respect-to-the-current-module-path-in-racket-or-h&gt;</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:26:59.000775</ts>
    <user>Lynna</user>
    <text>&lt;@Erika&gt; I think you want `define-runtime-path`</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:29:16.000254</ts>
    <user>Lynna</user>
    <text>&lt;!everyone&gt; Any objections to merging `racket7` to `racket` at 1:30pm MST today (= 20:30 GMT)?
In case anyone is missing context: &lt;https://groups.google.com/d/msg/racket-dev/KXBAIJsfDuE/WztXWZctAgAJ&gt;</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:29:41.000356</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt; no objections from me</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:30:31.000002</ts>
    <user>Anton</user>
    <text>o damn</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:33:22.000170</ts>
    <user>Erika</user>
    <text>&lt;@Lynna&gt; Thank you for your answer, that’s exactly what I needed. I changed `run-my-executable.rkt` to the following and it’s working:

```
;; run-my-executable.rkt
#lang racket
(require racket/runtime-path)
(define-runtime-path my-executable "my-executable")
(system* my-executable)
```</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:35:37.000774</ts>
    <user>Anton</user>
    <text>Throughout the years, i have always been very impressed by the racket team’s ability to keep making major changes to things</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:36:01.000535</ts>
    <user>Anton</user>
    <text>when if first started paying attention this was mostly rewriting c++ code in racket</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:36:24.000606</ts>
    <user>Willette</user>
    <text>&lt;@Lynna&gt;: Fine by me.</text>
  </message>
  <message conversation_id="132">
    <ts>2018-02-26T11:36:35.000717</ts>
    <user>Tiesha</user>
    <text>looking forward to the future</text>
  </message>
  <message conversation_id="133">
    <ts>2018-02-26T11:44:00.000260</ts>
    <user>Eugena</user>
    <text>&lt;@Lynna&gt; sounds good. I probably won't have my PR ready by then, but I'll just make it against the main repo.</text>
  </message>
  <message conversation_id="133">
    <ts>2018-02-26T13:17:15.000068</ts>
    <user>Jordon</user>
    <text>&lt;@Lynna&gt; i'm just about to start learning Racket, but i'm thrilled about racket7 --&amp;gt; racket merge! :moneybag:</text>
  </message>
  <message conversation_id="134">
    <ts>2018-02-26T13:47:42.000605</ts>
    <user>Odis</user>
    <text>&lt;@Erika&gt; If that worked for you would you mind adding it as an answer to the SO question?</text>
  </message>
  <message conversation_id="134">
    <ts>2018-02-26T13:47:54.000321</ts>
    <user>Odis</user>
    <text>(So that there is a (more) permanent archive of that question)</text>
  </message>
  <message conversation_id="134">
    <ts>2018-02-26T13:49:09.000010</ts>
    <user>Odis</user>
    <text>&lt;@Eugena&gt; Is this adding `??` and `?@` to the `syntax` macro?</text>
  </message>
  <message conversation_id="134">
    <ts>2018-02-26T14:30:41.000573</ts>
    <user>Erika</user>
    <text>&lt;@Odis&gt; You make a good point: &lt;https://stackoverflow.com/questions/42632854/dynamic-require-a-module-with-respect-to-the-current-module-path-in-racket-or-h/48995770#48995770&gt;</text>
  </message>
  <message conversation_id="134">
    <ts>2018-02-26T15:18:11.000382</ts>
    <user>Odis</user>
    <text>&lt;@Erika&gt; Great, thanks.</text>
  </message>
  <message conversation_id="135">
    <ts>2018-02-26T15:31:27.000550</ts>
    <user>Lynna</user>
    <text>If you have an existing checkout of the `racket` repo: the makefiles aren't good enough to deal with the change, so you'll need to either drop the old "racket/src/build" directory or delete "module.o" (probably both of them), "libracket.a", and "libracket3m.a"</text>
  </message>
  <message conversation_id="134">
    <ts>2018-02-26T16:13:05.000479</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; COol, thanks for the heads up. Have you pushed?</text>
  </message>
  <message conversation_id="135">
    <ts>2018-02-26T16:13:22.000420</ts>
    <user>Lynna</user>
    <text>Yes, 43 minutes ago</text>
  </message>
  <message conversation_id="134">
    <ts>2018-02-26T16:13:53.000293</ts>
    <user>Odis</user>
    <text>thanks</text>
  </message>
  <message conversation_id="135">
    <ts>2018-02-26T16:15:53.000495</ts>
    <user>Willette</user>
    <text>Building. :)</text>
  </message>
  <message conversation_id="135">
    <ts>2018-02-26T16:22:39.000151</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt; other than &lt;https://groups.google.com/forum/#!topic/racket-dev/9AhG12ITQII&gt; and the comments in the repo itself, is there any additional documentation about `linklet` such as papers or reports?</text>
  </message>
  <message conversation_id="135">
    <ts>2018-02-26T16:39:47.000286</ts>
    <user>Lynna</user>
    <text>&lt;@Alesha&gt; There's a new section in the Reference (14.13), but nothing else so far</text>
  </message>
  <message conversation_id="135">
    <ts>2018-02-26T16:40:20.000423</ts>
    <user>Alesha</user>
    <text>ok thanks</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-26T17:54:51.000489</ts>
    <user>Wally</user>
    <text>Hello, I made a thing I'd like to share.</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-26T17:55:12.000360</ts>
    <user>Wally</user>
    <text>After some time with Redex, I've decided it's a little too opinionated for some things I want to do, and not quite powerful enough for others.</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-26T17:55:47.000263</ts>
    <user>Wally</user>
    <text>To help with the former, I've ade a little reader extension for `$...$` math notation, which is clean enough for me to actually read my research, even if I can't quite run it (yet).</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-26T17:56:06.000042</ts>
    <user>Wally</user>
    <text>&lt;https://pkgd.racket-lang.org/pkgn/package/TeXmath&gt;</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-26T17:56:23.000310</ts>
    <user>Wally</user>
    <text>This is enough to keep me in Scribble instead of reaching for LaTeX while modeling.</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-26T17:58:09.000319</ts>
    <user>Wally</user>
    <text>I'd like the output to be cleaner, which means a better (than yacc) parser. By "better," I mean easier to define/understand. Any recommendations?</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-27T00:47:26.000152</ts>
    <user>Marnie</user>
    <text>&lt;@Wally&gt; that is super neat and I wonder if `turnstile` could benefit from it in some way</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-27T00:49:02.000175</ts>
    <user>Marnie</user>
    <text>the `$...$` notation reminds me of some of the Beautiful Racket dsls, did you use that for implementation guidance?</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-27T01:20:42.000079</ts>
    <user>Wally</user>
    <text>haven't seen it yet</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-27T01:21:07.000181</ts>
    <user>Wally</user>
    <text>It's just the standard LaTeX syntax</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-27T01:22:33.000159</ts>
    <user>Wally</user>
    <text>The `lang` parts are mostly copied and pasted from the Racket Guide and some examples in the racket repo</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-27T01:23:45.000125</ts>
    <user>Wally</user>
    <text>It's not compiling on `raco setup` yet and I'm not sure why. The `scribble` command line works, though.</text>
  </message>
  <message conversation_id="136">
    <ts>2018-02-27T01:27:37.000053</ts>
    <user>Wally</user>
    <text>turnstile looks interesting</text>
  </message>
  <message conversation_id="137">
    <ts>2018-02-27T09:51:46.000166</ts>
    <user>Eugena</user>
    <text>&lt;@Odis&gt; no, this one is some basic fixes for the macro debugger for the new expander. OTOH, this would be a good time for me to finish up and merge the other PR too.</text>
  </message>
  <message conversation_id="137">
    <ts>2018-02-27T10:09:00.000198</ts>
    <user>Odis</user>
    <text>It would be. ^.^</text>
  </message>
  <message conversation_id="137">
    <ts>2018-02-27T10:19:25.000605</ts>
    <user>Monserrate</user>
    <text>&lt;@Eugena&gt; here's hoping that the new expander makes it possible to fix macro hiding :)</text>
  </message>
  <message conversation_id="137">
    <ts>2018-02-27T10:22:45.000603</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; &lt;@Eugena&gt; &lt;@Gaynell&gt; I thought it was a little more fundamental of a problem than that?</text>
  </message>
  <message conversation_id="137">
    <ts>2018-02-27T10:23:25.000331</ts>
    <user>Monserrate</user>
    <text>My understanding was that it's not fundamental, just hard -- it used to work</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T13:22:56.000708</ts>
    <user>Tiesha</user>
    <text>I just discovered the Server:Racket book.  Immediately bought it.  Very happy to see more books on Racket, especially ones that get people doing things right away and then leading them down the yellow brick road, to adventure, Oz, and home.</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T13:23:34.000241</ts>
    <user>Anton</user>
    <text>i bought it, but havent read any of it</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T13:23:37.000602</ts>
    <user>Anton</user>
    <text>oh i might use it soon though!</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T13:23:55.000111</ts>
    <user>Anton</user>
    <text>integrate it + pollen for my new blog muhahahaha</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T13:24:22.000428</ts>
    <user>Anton</user>
    <text>i also never read that game programming in racket book at all</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T13:30:35.000066</ts>
    <user>Tiesha</user>
    <text>Haven't checked out the game programming book yet, but I will.  But the server book I hope will be useful.  I have lots of little and some big Racket programs, I want to get some of them up on the web, I have a few fairly vanilla Racket webapps, but I'm always interested in what the "cool kids" are doing these days with their webapps written in Racket.  At work, I try to keep up with developments in the Scala world, but I use Racket at work too, when it makes sense, e.g., when I want to create DSLs or I don't need to hook into the Java ecosystem at all.</text>
  </message>
  <message conversation_id="139">
    <ts>2018-02-27T13:49:57.000120</ts>
    <user>Carlyn</user>
    <text>For a toy project I am experimenting with, I am interested in using a CLOS-like object system. I know Swindle exists, but its documentation has never been converted to Scribble, and I know little about it. Is it worth looking at? And are there any other CLOS-like object systems implemented for Racket?</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T15:09:16.000146</ts>
    <user>Monserrate</user>
    <text>At some point there was something like tinyclos for racket</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T15:09:39.000641</ts>
    <user>Monserrate</user>
    <text>Swindle is a full life experience rather than just a library</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T15:09:57.000098</ts>
    <user>Carlyn</user>
    <text>that is the impression I got from it, yes</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T15:10:42.000514</ts>
    <user>Carlyn</user>
    <text>I am thinking of implementing something like tinyclos in a way that might play nicely with some of Racket’s idioms, but I’m not sure I’ll actually get around to it</text>
  </message>
  <message conversation_id="140">
    <ts>2018-02-27T15:15:03.000079</ts>
    <user>Marnie</user>
    <text>what's the history of swindle anyway?</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T15:15:08.000573</ts>
    <user>Monserrate</user>
    <text>That would certainly be a cool thing to have</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T15:15:40.000357</ts>
    <user>Monserrate</user>
    <text>Swindle was implemented by Eli Barzilay to try to get as faithful a version of clos as possible</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T15:15:46.000296</ts>
    <user>Monserrate</user>
    <text>Long long ago</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T15:16:49.000255</ts>
    <user>Monserrate</user>
    <text>It was then re-implemented by him with the "new" expander around 2005 (sic) which was much simpler than the initial version</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T15:17:51.000613</ts>
    <user>Carlyn</user>
    <text>I will admit that I am thinking about this because I started by trying to use `racket/class` and just found it kind of unpalatable (sorry matthew and robby)</text>
  </message>
  <message conversation_id="141">
    <ts>2018-02-27T15:46:44.000627</ts>
    <user>Carlyn</user>
    <text>Does Racket include a topological sorting algorithm anywhere in the distribution?</text>
  </message>
  <message conversation_id="141">
    <ts>2018-02-27T15:54:42.000568</ts>
    <user>Tiesha</user>
    <text>I don't know about topological sorting, but Peter Norvig just released a pile of Lisp code from his PAIP book on GitHub:  &lt;https://github.com/norvig/paip-lisp&gt;</text>
  </message>
  <message conversation_id="141">
    <ts>2018-02-27T15:57:07.000103</ts>
    <user>Tiesha</user>
    <text>Note, I haven't checked this code, just googled:  &lt;https://rosettacode.org/wiki/Topological_sort#Racket&gt;</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T16:50:29.000147</ts>
    <user>Ezra</user>
    <text>&lt;@Carlyn&gt; out of curiosity - what are your main points of contention re: racket/class</text>
  </message>
  <message conversation_id="142">
    <ts>2018-02-27T16:56:36.000252</ts>
    <user>Willette</user>
    <text>&lt;@Monserrate&gt;: That's the best description of swindle I've ever seen. :)</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T17:03:28.000532</ts>
    <user>Carlyn</user>
    <text>&lt;@Ezra&gt; I don’t loathe it as much as I probably make it seem, but for my particular use, I would like multiple dispatch, so `racket/class` is immediately disqualified.</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T17:05:57.000110</ts>
    <user>Ezra</user>
    <text>&lt;@Carlyn&gt; I was actually hoping you would say multiple dispatch as this is one I would gladly welcome - btw have you been dog feeding your own implementation (the one on your blog)?</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T17:07:50.000296</ts>
    <user>Carlyn</user>
    <text>No, I haven’t. The implementation in my blog post is a toy; I have considered taking it off the package server multiple times to give up the `multimethod` name. I doubt anyone is using it (and I kind of hope they aren’t). Part of this project might involve combining that approach with something more featureful and CLOS-like.</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-27T18:05:44.000008</ts>
    <user>Anton</user>
    <text>why doesn’t racket have a polymorphic collection processing library again? or does it now?</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-27T18:32:54.000158</ts>
    <user>Marnie</user>
    <text>&lt;@Anton&gt; because implementing one isn't the main obstacle, adapting documentation and interfaces in common libraries to work in terms of it by default is</text>
  </message>
  <message conversation_id="138">
    <ts>2018-02-27T18:41:49.000254</ts>
    <user>Carlyn</user>
    <text>&lt;@Anton&gt; &lt;http://docs.racket-lang.org/collections/index.html&gt;</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-27T18:42:37.000381</ts>
    <user>Anton</user>
    <text>oh beautiful</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-27T18:42:42.000206</ts>
    <user>Anton</user>
    <text>so it does currently exist</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-27T18:42:54.000279</ts>
    <user>Carlyn</user>
    <text>disclaimer: I wrote it, but I don’t really use it</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-27T18:43:23.000343</ts>
    <user>Anton</user>
    <text>oh?</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-27T18:43:46.000372</ts>
    <user>Anton</user>
    <text>i started googling for it and saw you wrote some document about generics in racket on a wiki somewhere</text>
  </message>
  <message conversation_id="144">
    <ts>2018-02-27T22:18:08.000046</ts>
    <user>Helena</user>
    <text>`tsort` from the `graph` library is the closest I know of</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-27T22:34:44.000217</ts>
    <user>Carlyn</user>
    <text>```
#lang swindle
(defclass a ())
(defclass b ())
(defclass c (a b))
(defclass d (b a))
(defclass e (c d))
```
```
stderr:
  top-sort: invalid constraints
```
wonderful</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-27T22:37:58.000209</ts>
    <user>Carlyn</user>
    <text>Interestingly, Swindle appears to just straight-up ship tinyclos in `swindle/tiny-clos`.</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-28T13:07:17.000445</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; &lt;@Eileen&gt; Anecdotally, I’ve had a couple of times since upgrading to Racket 7 where DrRacket’s background expansion seems to get “stuck”—the dot in the corner stays blue indefinitely. Toggling background expansion off and on doesn’t seem to fix it, nor does closing and reopening the file. Restarting DrRacket solves the problem, but that’s it. I can’t reliably reproduce this, but it seems to happen sporadically. (I’m a few commits behind HEAD, so if a recent commit might have fixed this issue already, let me know, and I can pull and rebuild.)</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-28T13:15:38.000345</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; Thanks for the report! So far, I've spent most of my time building and rebuilding Racket, so I haven't spent much time observing DrRacket, but I'll keep an look out for related issues.</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-28T15:04:31.000334</ts>
    <user>Eileen</user>
    <text>&lt;@Lynna&gt; &lt;@Carlyn&gt; if you start DrRacket in the shell you might see some helpful output; it’s definitely the case that an unexpected exception in that code will wedge things. The `drracket-background-compilation` logger might be useful</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-28T15:11:09.000614</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; I didn’t see any output in the shell, but I can restart it with some logger output turned on. Should `PLTSTDERR="error info@drracket-background-compilation"` do the trick?</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-28T15:11:20.000602</ts>
    <user>Eileen</user>
    <text>looks right</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-28T15:11:22.000130</ts>
    <user>Eileen</user>
    <text>bummer</text>
  </message>
  <message conversation_id="143">
    <ts>2018-02-28T15:11:49.000492</ts>
    <user>Carlyn</user>
    <text>I’ll turn that on and let you know if I see any output if it gets stuck again.</text>
  </message>
  <message conversation_id="145">
    <ts>2018-02-28T15:14:21.000015</ts>
    <user>Wally</user>
    <text>Hello, all the recent buzz around language-oriented programming is very exciting. I have been reading about the topic for some time. Do people actively discuss LOP today?</text>
  </message>
  <message conversation_id="146">
    <ts>2018-02-28T17:41:53.000226</ts>
    <user>Carlyn</user>
    <text>I have a request for bikeshedding. In CLOS, specializers for dispatch in `defmethod` are specified inline with argument names, like this:
```
(defmethod distance ((a point) (b point)) ...)
```
…but this conflicts with Racket’s default argument syntax. Should a Racket-y CLOS use a keyword, like `[a #: point%]`, an identifier, like `[a : point%]`, a symbolic datum, also like `[a : point%]`, or something else?</text>
  </message>
  <message conversation_id="145">
    <ts>2018-02-28T17:54:08.000439</ts>
    <user>Monserrate</user>
    <text>I would do it like syntax-parse</text>
  </message>
  <message conversation_id="146">
    <ts>2018-02-28T17:57:26.000214</ts>
    <user>Carlyn</user>
    <text>That’s an interesting idea. It would probably also need an escape syntax like `syntax/parse`’s `~var`, then, as well. What would you envision that looking like?</text>
  </message>
  <message conversation_id="147">
    <ts>2018-02-28T19:07:15.000248</ts>
    <user>Ezra</user>
    <text>is there any XSL Transformer in racket -&amp;gt; I need to reuse existing *.xsl files so the SXML/SXSLT approach wouldn't work for me</text>
  </message>
  <message conversation_id="147">
    <ts>2018-02-28T19:28:55.000164</ts>
    <user>Ezra</user>
    <text>it doesn't seem like there is one... I've just found c libxslt so that should hopefully suffice</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:38:58.000054</ts>
    <user>Bertha</user>
    <text>Although I haven't had time to keep up with Racket 7 :cry:, today I encountered had my first Travis CI run against HEAD a.k.a. snapshot.
IIUC Racket 7 adds the word "is" to an error message ("provided identifier *is* not defined or imported"), which breaks a `check-exn` using a regexp.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:39:04.000144</ts>
    <user>Bertha</user>
    <text>Travis: &lt;https://travis-ci.org/greghendershott/frog/jobs/347497352#L679&gt;</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:39:15.000096</ts>
    <user>Bertha</user>
    <text>Code: &lt;https://github.com/greghendershott/frog/blob/master/frog/config/main.rkt#L46&gt;</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:39:59.000003</ts>
    <user>Bertha</user>
    <text>Now, maybe it's not a wonderful idea to use the regexp form of `check-exn`, because it can be fragile like this.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:40:09.000232</ts>
    <user>Bertha</user>
    <text>But I think I've seen it used a lot.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:40:26.000233</ts>
    <user>Bertha</user>
    <text>So I guess I'm wondering what that means wrt any "policy" about changing error messages?</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:40:40.000209</ts>
    <user>Bertha</user>
    <text>(Sorry, not a fun topic)</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:41:24.000081</ts>
    <user>Marnie</user>
    <text>it's somewhat fun / amusing for me because internally at work there's an explicit policy against writing tests that assert things about error message strings</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:42:34.000101</ts>
    <user>Bertha</user>
    <text>I can understand that policy. OTOH I can understand people not wanting to create a bazillion `exn` sub-structs.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:43:17.000024</ts>
    <user>Bertha</user>
    <text>Anyway, I've seen it done in Racket code. Not just my own. :smile:</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:53:08.000022</ts>
    <user>Lynna</user>
    <text>I'm happy to drop that "is" in that case. It doesn't improve the message, and it wasn't an intended change.
More generally, though, I'd like to make this an opportunity to adjust some messages. Most notably, reader errors have changed to use the backquote...backquote form of talking about literal text, instead of the old backquote...quote form.
The "unbound identifier" error message used to say "in module". I haven't restored the "in module", so far, because it doesn't seem helpful. (Where else could an identifier be? No... surely not... well, you have other problems in that case.) But I can put "in module" back if we want to avoid that change.
In short: there's not a clear policy so far, but I think we want something in between " no changes" and "anything goes".</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:57:17.000023</ts>
    <user>Bertha</user>
    <text>"No 'gratuitous' changes" might be a reasonable way to minimize miscellaneous breakage.
I'm not proposing we end up with the equivalent of HTTP "Referer" headers.
I'm not even proposing anything; just pointing it out and asking.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T21:58:17.000254</ts>
    <user>Bertha</user>
    <text>I mean, I might even be on board with deprecating the regexp variant of `check-exn`, and encouraging people to use Better Thing, whatever that is (IDK). At least that's a clean break.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T22:01:13.000042</ts>
    <user>Lynna</user>
    <text>For this message, I see that the new one is actually "defined or required", while the old one was "defined or imported". In contrast to just dropping "is", changing "imported" to "required" is the kind of terminology cleanup that I might have intended. (And maybe I added "is" if it was going to change, anyway; I don't remember.) So, I'm less sure what to do in this case.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T22:01:54.000022</ts>
    <user>Bertha</user>
    <text>Clean sheet, I definitely prefer "required", too.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T22:04:09.000278</ts>
    <user>Bertha</user>
    <text>Maybe it makes sense to punt this --  just improve the messages, then later we get some package build evidence, and depending on how much/what breaks, decide. Maybe people just need to edit some regexps.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T22:08:18.000191</ts>
    <user>Carlyn</user>
    <text>Some part of me prefers “imported” over “required” due to the way other `#lang`s can use other names for imports/requires, and “import” seems to be more common and immediately understandable to me in the absence of a corresponding keyword, but it also makes me wonder if those error messages should be customizable or if languages are expected to do their own error reporting if they change those things.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T22:08:48.000085</ts>
    <user>Carlyn</user>
    <text>(But that’s pretty tangential to the current conversation, I think.)</text>
  </message>
  <message conversation_id="148">
    <ts>2018-02-28T22:18:04.000147</ts>
    <user>Lynna</user>
    <text>I think that's an interesting problem, too. (The "easy" solution hasn't worked, so far, in that I failed to convince various grad students to work on the problem.)</text>
  </message>
  <message conversation_id="149">
    <ts>2018-02-28T22:21:58.000048</ts>
    <user>Carlyn</user>
    <text>:)</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:08:13.000385</ts>
    <user>Bertha</user>
    <text>&lt;https://github.com/google/schism&gt;</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:18:44.000775</ts>
    <user>Wally</user>
    <text>Very cool. With closures and tail recursion, this could be a JavaScript killer for me.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:23:53.000940</ts>
    <user>Bertha</user>
    <text>Well, and with GC, and any macro-expander at all much less a Racket quality one, and with....  :smile:</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:24:31.000492</ts>
    <user>Bertha</user>
    <text>It's really fun to read the code and see it work at all in a couple thousand lines.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:26:15.000362</ts>
    <user>Ezra</user>
    <text>With Racket-On-Chez wouldn't it make it almost straight-forward to have also Racket-&amp;gt;WebAssembly?</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:28:57.000150</ts>
    <user>Bertha</user>
    <text>Yes, personally I would wait for that to use in production.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:29:35.000389</ts>
    <user>Bertha</user>
    <text>Or if I needed something today, I'd try &lt;https://github.com/vishesh/racketscript&gt; ?</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:31:24.000909</ts>
    <user>Bertha</user>
    <text>Or actually if I needed something today, I'd probably just try write reasonable modern Javascript.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:33:22.000048</ts>
    <user>Ezra</user>
    <text>probably true, still the vision of full Racket in the browser is quite amazing (subject to performance ;)</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:36:17.000451</ts>
    <user>Wally</user>
    <text>All good options. My opinion of JS is so low because it's been the  _only_ option in the browser for so long.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:37:57.000264</ts>
    <user>Wally</user>
    <text>Not sure it's worth the trouble anymore</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:39:48.000399</ts>
    <user>Bertha</user>
    <text>I did some work using ClojureScript about a year ago and enjoyed it. The dev experience was nicer than full Clojure JVM, for me.
But when I first tried ClojureScript maybe 2 or 3 years ago, it was very much duct tape and magic spells.
So I think, even Racket-&amp;gt;JS, early days maybe we should have low expectations until the tooling is matured.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:41:37.000170</ts>
    <user>Ezra</user>
    <text>The reason I would welcome Racket on the WebAssembly is mostly due to its DSL capabilities, just thinking how long it took to develop new DSLs like jquery or JSX, it makes me feel where could we be already with languages/tools like Racket</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:43:08.000688</ts>
    <user>Bertha</user>
    <text>For sure, yes!
I'm just saying there are many months (years?) of tedious work by many people to get to where you and I could save time like that?
Hopefully I'm wrong.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:45:14.000571</ts>
    <user>Ezra</user>
    <text>it makes one appreciate the hard work by Matthew and the rest of the team on current transition</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:45:50.000173</ts>
    <user>Wally</user>
    <text>yearh, wish I got my head in the game earlier so I could follow the progress more directly</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:47:11.000062</ts>
    <user>Wally</user>
    <text>I'm probably jaded from years of pre-Racket webdev. Java got way cooler once language implementers started taking full advantage of the JVM.</text>
  </message>
  <message conversation_id="148">
    <ts>2018-03-01T11:49:55.000532</ts>
    <user>Ezra</user>
    <text>to the list of current alternatives I would add: &lt;https://github.com/soegaard/urlang&gt;</text>
  </message>
  <message conversation_id="150">
    <ts>2018-03-01T12:34:31.000254</ts>
    <user>Marnie</user>
    <text>&lt;@Carlyn&gt; your syntax/parse bug report is the evilest thing I can imagine</text>
  </message>
  <message conversation_id="150">
    <ts>2018-03-01T14:49:12.000558</ts>
    <user>Carlyn</user>
    <text>&lt;@Marnie&gt; imo it makes it clear that sort of identifier munging is a bad idea, and it ought to be done at the reader level (but that isn’t practical currently)</text>
  </message>
  <message conversation_id="150">
    <ts>2018-03-01T14:49:52.000693</ts>
    <user>Carlyn</user>
    <text>though, on second thought, I should temper that… I think that sort of identifier munging is not “the right thing”, but maybe it isn’t a bad idea with the current tools available</text>
  </message>
  <message conversation_id="151">
    <ts>2018-03-01T14:52:12.000045</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; The following file works on the old expander, but not the new one: &lt;https://gist.github.com/LeifAndersen/bf555a85203ec41761bce5b4d5046855&gt;</text>
  </message>
  <message conversation_id="151">
    <ts>2018-03-01T14:53:30.000614</ts>
    <user>Odis</user>
    <text>Or even this program:
```
#lang racket/base

(define first "Hello")

(require racket/list)
```</text>
  </message>
  <message conversation_id="151">
    <ts>2018-03-01T14:53:35.000408</ts>
    <user>Odis</user>
    <text>Which seems like a bug to me.</text>
  </message>
  <message conversation_id="151">
    <ts>2018-03-01T15:01:41.000489</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; Yes, that's a bug. I'll look into it now.</text>
  </message>
  <message conversation_id="151">
    <ts>2018-03-01T15:12:55.000660</ts>
    <user>Odis</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="152">
    <ts>2018-03-01T16:44:16.000110</ts>
    <user>Carrol</user>
    <text>how in the hell? google/schism is a self-hosted compiler, yet:

&amp;gt; As mentioned, the goal has been to prioritize features needed for self hosting. Here are some of the current restrictions:
&amp;gt; 
&amp;gt; No lambda, no closures.</text>
  </message>
  <message conversation_id="152">
    <ts>2018-03-01T16:47:40.000566</ts>
    <user>Carrol</user>
    <text>oh. `(define (fn ...) ...)` form works (but maybe doesn’t close over?)</text>
  </message>
  <message conversation_id="152">
    <ts>2018-03-01T22:14:00.000128</ts>
    <user>Violet</user>
    <text>&lt;@Carrol&gt; it’s not a scheme it’s just a lisp 1</text>
  </message>
  <message conversation_id="152">
    <ts>2018-03-01T22:14:19.000045</ts>
    <user>Violet</user>
    <text>&lt;@Carrol&gt; yea I know I was fooled too until I saw the features </text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:08:57.000002</ts>
    <user>Andreas</user>
    <text>Is anyone aware of any public repo with a Poleen book, so that I can understand what's the best way to structure the sources and info.rkt?</text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:36:54.000478</ts>
    <user>Ezra</user>
    <text>&lt;@Andreas&gt; here is a handful:</text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:36:57.000249</ts>
    <user>Ezra</user>
    <text>&lt;https://github.com/otherjoel/try-pollen&gt;</text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:37:04.000456</ts>
    <user>Ezra</user>
    <text>&lt;https://github.com/otherjoel/thenotepad&gt;</text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:37:12.000479</ts>
    <user>Ezra</user>
    <text>&lt;https://github.com/malcolmstill/mstill.io&gt;</text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:38:50.000037</ts>
    <user>Ezra</user>
    <text>&lt;https://github.com/mbutterick/pollen-tfl&gt;</text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:39:02.000057</ts>
    <user>Andreas</user>
    <text>&lt;@Ezra&gt; that's great, thanks. Strangely github found no repos, based on pollen keyword.</text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:39:31.000154</ts>
    <user>Ezra</user>
    <text>no problem</text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:43:32.000091</ts>
    <user>Ezra</user>
    <text>&lt;https://github.com/halla/mindonmaps-book&gt;</text>
  </message>
  <message conversation_id="153">
    <ts>2018-03-02T05:44:36.000289</ts>
    <user>Ezra</user>
    <text>&lt;https://github.com/sanchom/sanchom.github.io&gt;</text>
  </message>
  <message conversation_id="154">
    <ts>2018-03-02T09:38:37.000542</ts>
    <user>Karry</user>
    <text>is the current Racket version for new builds correct? (e.g. 6.90.0.17--2018-03-01)</text>
  </message>
  <message conversation_id="154">
    <ts>2018-03-02T09:39:13.000449</ts>
    <user>Karry</user>
    <text>(not that this is important, just seems many versions ahead of 6.12, hahaha)</text>
  </message>
  <message conversation_id="154">
    <ts>2018-03-02T09:40:33.000458</ts>
    <user>Lynna</user>
    <text>Yes, that's as intended. "6.90.x" means "pre-7.0".</text>
  </message>
  <message conversation_id="154">
    <ts>2018-03-02T09:42:27.000412</ts>
    <user>Anton</user>
    <text>what is the difference between pollen and Scribble, besides surface syntax?</text>
  </message>
  <message conversation_id="154">
    <ts>2018-03-02T09:53:38.000003</ts>
    <user>Anton</user>
    <text>eh ill ask the mailing list</text>
  </message>
  <message conversation_id="155">
    <ts>2018-03-02T10:27:59.000254</ts>
    <user>Alesha</user>
    <text>why is today a special date for Racket? (based on the loading splash image when I spin up DrRacket)</text>
  </message>
  <message conversation_id="155">
    <ts>2018-03-02T10:31:18.000517</ts>
    <user>Karry</user>
    <text>&lt;http://www.on-this-day.com/cgi-bin/otd/statesotd/otdTX.pl&gt;</text>
  </message>
  <message conversation_id="155">
    <ts>2018-03-02T10:31:45.000574</ts>
    <user>Karry</user>
    <text>(a guess)</text>
  </message>
  <message conversation_id="155">
    <ts>2018-03-02T10:37:16.000407</ts>
    <user>Alesha</user>
    <text>ahh that would explain the prominent star in the splash image</text>
  </message>
  <message conversation_id="156">
    <ts>2018-03-02T10:45:20.000756</ts>
    <user>Omar</user>
    <text>Hi, is it a known issue that `typed/racket/base/no-check` is slower than `racket/base`? For a program that simply `(displayln "hello")`, `typed/racket/base/no-check` consistently takes 0.4s while `racket/base` takes 0.1s</text>
  </message>
  <message conversation_id="155">
    <ts>2018-03-02T10:54:37.000203</ts>
    <user>Karry</user>
    <text>&lt;@Omar&gt; there has been effort to reduce startup overhead with Typed Racket... I'm not sure if it has been observed/noted that in particular the `typed/racket/base/no-check` variant also has startup overhead. (It seems like it should be able to avoid most of it after the files are expanded... &lt;@Monserrate&gt; could better answer this for sure)</text>
  </message>
  <message conversation_id="156">
    <ts>2018-03-02T10:57:50.000738</ts>
    <user>Monserrate</user>
    <text>Is that with or without running raco make first?</text>
  </message>
  <message conversation_id="156">
    <ts>2018-03-02T11:01:01.000098</ts>
    <user>Karry</user>
    <text>(I observed it after making the two modules)</text>
  </message>
  <message conversation_id="156">
    <ts>2018-03-02T11:01:25.000597</ts>
    <user>Karry</user>
    <text>```
➜ raco make example1.rkt 
➜ raco make example2.rkt 
➜ time racket example1.rkt 
hello
racket example1.rkt  0.04s user 0.02s system 92% cpu 0.068 total
➜ time racket example2.rkt
hello
racket example2.rkt  0.29s user 0.10s system 97% cpu 0.403 total
```</text>
  </message>
  <message conversation_id="157">
    <ts>2018-03-02T11:23:08.000153</ts>
    <user>Anton</user>
    <text>cool!</text>
  </message>
  <message conversation_id="156">
    <ts>2018-03-02T13:51:47.000390</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Interestingly enough, the fix you pushed doesn’t seem to work if the variable is specifically called `version`:

```
#lang racket/base

(define version 42)

(module M racket/base
  (provide (all-defined-out))
  (define version 42))
(require 'M)
```</text>
  </message>
  <message conversation_id="158">
    <ts>2018-03-02T13:56:15.000205</ts>
    <user>Odis</user>
    <text>(or any other variable defined in `racket/base`.</text>
  </message>
  <message conversation_id="158">
    <ts>2018-03-02T14:57:39.000400</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; Thanks for the example! I think I have a repair for the case that a `require` shadows the initial language require, and I'll push if a rebuild and further tests work.</text>
  </message>
  <message conversation_id="158">
    <ts>2018-03-02T14:58:49.000391</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Okay cool. Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="158">
    <ts>2018-03-02T15:54:54.000031</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; It looks like video compiles again with the new expander. Thanks. ^.^</text>
  </message>
  <message conversation_id="159">
    <ts>2018-03-03T06:33:17.000055</ts>
    <user>Hilda</user>
    <text>Y'all have any recommendations for running/studying Racket code on mobile devices (e.g., Android/iOS/web)?</text>
  </message>
  <message conversation_id="159">
    <ts>2018-03-03T06:34:19.000071</ts>
    <user>Hilda</user>
    <text>I found a Scheme interpreter, which definitely helps, but it's not as advanced as Racket itself, especially with macros.</text>
  </message>
  <message conversation_id="159">
    <ts>2018-03-03T06:36:04.000043</ts>
    <user>Hilda</user>
    <text>There is some web stuff, and could use remoting into bigger computer, but have had some issues with key input (e.g., Command key), so it's clunky.</text>
  </message>
  <message conversation_id="159">
    <ts>2018-03-03T10:16:01.000104</ts>
    <user>Wally</user>
    <text>&lt;@Hilda&gt; On Android, Hacker's Keyboard is helpful. ~There are~ I've seen some text editors in the app store that support scheme syntax.</text>
  </message>
  <message conversation_id="160">
    <ts>2018-03-03T10:27:56.000064</ts>
    <user>Wally</user>
    <text>Until Java supports tail call optimization, scheme on JVM doesn't make much sense to me.</text>
  </message>
  <message conversation_id="161">
    <ts>2018-03-03T10:29:40.000065</ts>
    <user>Wally</user>
    <text>I used Scheme Droid to teach my 10 year old s-expressions and simple recursive functions, fwiw.</text>
  </message>
  <message conversation_id="161">
    <ts>2018-03-03T11:06:29.000138</ts>
    <user>Wally</user>
    <text>For remoting, I use ConnectBot and text-mode Emacs or Vim, my usual Racket dev tools (sans graphics).</text>
  </message>
  <message conversation_id="160">
    <ts>2018-03-03T11:09:50.000106</ts>
    <user>Wally</user>
    <text>Total Commander + a plug-in gives you sshfs access.</text>
  </message>
  <message conversation_id="160">
    <ts>2018-03-03T11:12:31.000099</ts>
    <user>Wally</user>
    <text>All these apps are ad-free with no in-app purchases. You might find more in the F-Droid app store - haven't checked in a while.</text>
  </message>
  <message conversation_id="162">
    <ts>2018-03-03T14:28:08.000093</ts>
    <user>Hilda</user>
    <text>Thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="160">
    <ts>2018-03-04T00:31:18.000099</ts>
    <user>Anton</user>
    <text>&lt;@Lanette&gt; which scheme interpreter are you using?</text>
  </message>
  <message conversation_id="163">
    <ts>2018-03-04T08:12:55.000103</ts>
    <user>Tasia</user>
    <text>Hi</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T14:33:53.000082</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; Can I get some clarification on this issue? Can I close it? &lt;https://github.com/lexi-lambda/racket-2htdp-typed/issues/6&gt;</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:28:23.000067</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; I agree that your program is the right one, but why was there that error with a wrapper in the original program?</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:28:56.000015</ts>
    <user>Carlyn</user>
    <text>What error? When I ran that program, I didn’t get an error.</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:30:57.000072</ts>
    <user>Monserrate</user>
    <text>Oh weird</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:31:29.000118</ts>
    <user>Monserrate</user>
    <text>I didn't actually try it, just forwarded a bug report from John Reppy, who's teaching with it</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:31:39.000152</ts>
    <user>Monserrate</user>
    <text>I'll ask him</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:32:08.000075</ts>
    <user>Monserrate</user>
    <text>Oh I know what happened</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:32:21.000088</ts>
    <user>Monserrate</user>
    <text>It's the bug with Union contracts</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:32:43.000021</ts>
    <user>Monserrate</user>
    <text>So it's fixed now, but before missed the unwrapping</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:33:19.000030</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; on another note, you would be interested in the work by Andre van Tonder on macro hygiene</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:33:43.000051</ts>
    <user>Monserrate</user>
    <text>He has a srfi with a system that does hygiene with the quotation rather than the expansion step</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:33:51.000129</ts>
    <user>Monserrate</user>
    <text>Which is really what you're looking for</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:35:28.000118</ts>
    <user>Carlyn</user>
    <text>Interesting, I’ll look into that, thanks.</text>
  </message>
  <message conversation_id="164">
    <ts>2018-03-04T17:36:13.000015</ts>
    <user>Carlyn</user>
    <text>Re: typed/2htdp, is the appropriate response “update Racket”, then, or is there something I should change?</text>
  </message>
  <message conversation_id="165">
    <ts>2018-03-04T18:42:34.000053</ts>
    <user>Monserrate</user>
    <text>I doubt you need to do anything</text>
  </message>
  <message conversation_id="165">
    <ts>2018-03-04T18:42:58.000058</ts>
    <user>Monserrate</user>
    <text>I see that &lt;@Lynna&gt; made the same suggestion on email</text>
  </message>
  <message conversation_id="166">
    <ts>2018-03-05T04:19:11.000441</ts>
    <user>Hilda</user>
    <text>I want a macro or something (may need to be a reader [is that what it's called?] over the initial text ?) for
'(a, b, c)
to become
'("a, b, c")
, but it becomes
'(a ,b ,c)
which then something like
(symbol-&amp;gt;string input)
errors, seems likez
I'm still learning more of the basics for more immediately helpful stuff; thanks so much for this more complicated stuff.
Is there a way to make this work?</text>
  </message>
  <message conversation_id="166">
    <ts>2018-03-05T04:20:20.000539</ts>
    <user>Hilda</user>
    <text>Thanks so much for all your help; studying more Racket and Lisp has been very helpful and joy producing.</text>
  </message>
  <message conversation_id="167">
    <ts>2018-03-05T04:57:31.000060</ts>
    <user>Thaddeus</user>
    <text>```(displayln "Hello there :D")```</text>
  </message>
  <message conversation_id="167">
    <ts>2018-03-05T07:27:22.000277</ts>
    <user>Marnie</user>
    <text>```
(pretty-print "welcome :)")
```</text>
  </message>
  <message conversation_id="168">
    <ts>2018-03-05T10:06:48.000708</ts>
    <user>Eugena</user>
    <text>Poll regarding &lt;https://github.com/racket/racket/pull/1803&gt;: `??` and `?@` or `~?` and `~@`?</text>
  </message>
  <message conversation_id="166">
    <ts>2018-03-05T10:56:43.000725</ts>
    <user>Wally</user>
    <text>&lt;@Hilda&gt; Are you using these commas as list delimiters? Your example input reads as `'(a ,b ,c)`, which is the quoted form of `(list 'a (quasi-unquote b) (quasi-unquote c))`, which makes no sense unless you're trying to do something unusual with quasiquotes.</text>
  </message>
  <message conversation_id="169">
    <ts>2018-03-05T11:01:16.000485</ts>
    <user>Helena</user>
    <text>`??` and `?@`</text>
  </message>
  <message conversation_id="169">
    <ts>2018-03-05T11:01:45.000844</ts>
    <user>Wally</user>
    <text>If those commas really are list delimiters, just drop them -- Racket lists use whitespace to delimit list elements, and commas to escape from a quote. Then, your original problem is to produce `'("a b c")` from `'(a b c)`.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T11:44:07.000849</ts>
    <user>Thaddeus</user>
    <text>which is one `string-join` away :wink:</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T11:46:12.000600</ts>
    <user>Thaddeus</user>
    <text>```
&amp;gt; (list (string-join (map ~a '(a b c))))
'("a b c")
```
(you can replace `~a` with `symbol-&amp;gt;string` for the same result)</text>
  </message>
  <message conversation_id="171">
    <ts>2018-03-05T12:46:14.000446</ts>
    <user>Carlyn</user>
    <text>I’ve always wondered if `~seq` and `~optional` (or `?seq` and `?optional`) would be better names than the symbol soup, since they’d correspond more closely to their matching counterparts, but that might be too likely to break programs.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T13:42:21.000310</ts>
    <user>Hilda</user>
    <text>The commas aren't being used as list delimiters. The language I'm/(my company is) developing was using simply (e.g.,)
(define x '(a, b, c))
to mean x is defined to be the string of "a, b, c". Overall though I am thinking doing explict string quotes (e.g.,)
(define x ("a, b, c"))
whenever there is punctuation like that ("," ";", etc.), and allowing for symbol-&amp;gt;string for if there's no conflicting punctuation, if really a more robust system, fundamentally.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T13:43:24.000319</ts>
    <user>Hilda</user>
    <text>Thanks though. :blush:</text>
  </message>
  <message conversation_id="172">
    <ts>2018-03-05T13:43:52.000675</ts>
    <user>Wally</user>
    <text>Oh, I get it.</text>
  </message>
  <message conversation_id="172">
    <ts>2018-03-05T13:46:10.000410</ts>
    <user>Wally</user>
    <text>How do you differentiate between normal Racket and things to parse differently?</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T13:48:26.000742</ts>
    <user>Wally</user>
    <text>:+1: for less symbol soup</text>
  </message>
  <message conversation_id="173">
    <ts>2018-03-05T15:44:52.000046</ts>
    <user>Carlyn</user>
    <text>Related to the discussion of van Tonder’s system on the mailing list, the system has some really interesting properties. For example, this program:
```
(define x 'module)

(define-syntax (mac stx)
  (syntax-case stx ()
    [(_)
     #`(let ([x 'local])
         (list x #,#'x))]))

(mac)
```
produces `'(local module)`, which I think is just fascinating.</text>
  </message>
  <message conversation_id="174">
    <ts>2018-03-05T18:19:45.000420</ts>
    <user>Ezra</user>
    <text>&lt;@Alesha&gt; I've just accidentally stumbled upon this page detailing racket logos history - near the bottom there is the one with a star: &lt;http://www.eecs.northwestern.edu/~robby/logos/&gt;</text>
  </message>
  <message conversation_id="174">
    <ts>2018-03-05T18:25:05.000147</ts>
    <user>Alesha</user>
    <text>Fascinating history! Thanks for the link. I do miss the logo version used for RAcket v 4.3 - 6.7. The history behind the stepper foot is amusing. Neato.</text>
  </message>
  <message conversation_id="172">
    <ts>2018-03-05T21:44:11.000042</ts>
    <user>Hilda</user>
    <text>&lt;@Wally&gt; yeah, we're moving away from that system because it has issues. Always evolving!</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T22:03:26.000112</ts>
    <user>Wally</user>
    <text>:smiley:</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T22:05:29.000013</ts>
    <user>Wally</user>
    <text>To the Scribble wizards, I'm having a couple of problems with `scribble/examples`.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T22:07:36.000085</ts>
    <user>Wally</user>
    <text>Issue 1: an opaque struct inside an `eval:error` is being printed as if it was transparent. You can see it here (&lt;http://docs.racket-lang.org/neuron/Control_Your_Resources.html#%28part._.Concurrency%29&gt;) in the first example. The raised value is a transparent struct that contains the opaque one.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T22:09:04.000215</ts>
    <user>Wally</user>
    <text>Issue 2: I made a macro that quasiquotes a supplied term, but scribble complains that valid quasi-unquoted terms are not inside a quasiquote.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-05T22:10:23.000130</ts>
    <user>Wally</user>
    <text>Are either of these expected behavior in certain cases, for instance if my evaluator sandbox is too strict? I've tried twiddling parameters to no avail.</text>
  </message>
  <message conversation_id="175">
    <ts>2018-03-06T01:18:41.000292</ts>
    <user>Marnie</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="175">
    <ts>2018-03-06T01:20:31.000004</ts>
    <user>Marnie</user>
    <text>I really ought to read about this macro system too because it makes a disturbing amount of sense</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-06T10:40:51.000666</ts>
    <user>Lynna</user>
    <text>&lt;@Wally&gt; Issue 1: How are you creating the evaluator for examples? If you make a sandbox evaluator, then the default is to create a new inspector, so results will be transparent outside the sandbox where they're rendered. You can set `sandbox-make-inspector` to `current-inspector` to avoid that.
Issue 2: Difficult to say without more information, but it's possible that you're using `#,` and it's interpreted as an `examples` escape instead of a require syntax unquote. If that's it, you use use `#:escape` to pick a different escape form.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-06T11:07:54.000388</ts>
    <user>Wally</user>
    <text>&lt;@Lynna&gt; issue 1 resolved, and issue 2 is back on my radar. Thanks!</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-06T12:01:29.000527</ts>
    <user>Wally</user>
    <text>Is it possible for `make-evaluator` to require a submodule in the same file? This isn't working: ```
(module m racket)

(parameterize
    ([sandbox-security-guard current-security-guard])
  (make-evaluator 'racket #:requires '('m)))
```
It gives ```
require: unknown module
  module name: #&amp;lt;resolved-module-path:'m&amp;gt;
```</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-06T12:02:39.000602</ts>
    <user>Wally</user>
    <text>Setting all parameters to the trusted sandbox configuration values gives the same error</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-06T12:15:51.000625</ts>
    <user>Lynna</user>
    <text>The `'m` style to access a relative submodule only works in static positions, like `require`. For a dynamic context, like calling `make-evaluator`, you'll need to provide an absolute module path. The `quote-module-path` form from `syntax/location` may be the right way to go.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-06T15:49:57.000067</ts>
    <user>Wally</user>
    <text>&lt;@Lynna&gt; that did the trick! Now I can make Scribble MWEs.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-06T15:56:47.000438</ts>
    <user>Wally</user>
    <text>Issue 2 resolved! I was using the `#:lang` argument instead of `#:eval` since yesterday.</text>
  </message>
  <message conversation_id="170">
    <ts>2018-03-06T15:57:04.000068</ts>
    <user>Wally</user>
    <text>:sweat_smile:</text>
  </message>
  <message conversation_id="176">
    <ts>2018-03-06T18:39:59.000116</ts>
    <user>Hilda</user>
    <text>I like how with Python a multi-line string is easily formed with triple quotes:
str = “”"multiple
lined
string”“”
I’ve been using heredocs with Racket:
(define str #&amp;lt;&amp;lt;EOF
multiple
lined
string
EOF
)
but that’s a lot less elegant (IMHO), and more syntax-y (meaning less obvious what’s going on).</text>
  </message>
  <message conversation_id="176">
    <ts>2018-03-06T18:40:06.000096</ts>
    <user>Hilda</user>
    <text>Is there a better way to do multi-line strings in Racket? Perhaps a way to map the heredoc behavior to triple quotes?</text>
  </message>
  <message conversation_id="176">
    <ts>2018-03-06T18:42:52.000204</ts>
    <user>Ezra</user>
    <text>&lt;@Hilda&gt; I personally prefer to use at-exp reader for that</text>
  </message>
  <message conversation_id="176">
    <ts>2018-03-06T18:43:20.000122</ts>
    <user>Ezra</user>
    <text>```#lang at-exp racket
@~a{first line
second line
third line}
```</text>
  </message>
  <message conversation_id="176">
    <ts>2018-03-06T18:44:43.000101</ts>
    <user>Ezra</user>
    <text>@~a will give you what you need once at-exp is enabled</text>
  </message>
  <message conversation_id="176">
    <ts>2018-03-06T18:48:12.000421</ts>
    <user>Ezra</user>
    <text>here is a nice overview of what you can do with at-exp in regards to strings: &lt;http://www.greghendershott.com/2015/08/at-expressions.html&gt;</text>
  </message>
  <message conversation_id="177">
    <ts>2018-03-06T19:19:48.000160</ts>
    <user>Wally</user>
    <text>those regexps look very perly</text>
  </message>
  <message conversation_id="177">
    <ts>2018-03-06T19:22:05.000296</ts>
    <user>Hilda</user>
    <text>Thanks. I’ll try to get it working better with SublimeREPL in Sublime Text (my main environment). That is, “#lang” doesn’t work it seems.</text>
  </message>
  <message conversation_id="177">
    <ts>2018-03-06T19:22:51.000378</ts>
    <user>Hilda</user>
    <text>I do like the triple-quote method, too; is there a simple way to replicate that behavior?</text>
  </message>
  <message conversation_id="177">
    <ts>2018-03-06T19:23:55.000054</ts>
    <user>Hilda</user>
    <text>The reason being that sometimes when I’m editing the company wiki I want to parse a copy-pasted bit and run a script on the string really quickly, and every complication slows things. :disappointed:</text>
  </message>
  <message conversation_id="177">
    <ts>2018-03-06T19:27:27.000111</ts>
    <user>Wally</user>
    <text>That would be a reader extension, I think</text>
  </message>
  <message conversation_id="177">
    <ts>2018-03-06T19:27:44.000125</ts>
    <user>Wally</user>
    <text>(chapter 17 in the Racket Guide)</text>
  </message>
  <message conversation_id="177">
    <ts>2018-03-06T19:48:50.000101</ts>
    <user>Ezra</user>
    <text>&lt;@Hilda&gt; probably reader extension is the way as &lt;@Wally&gt; said, as to your #lang not working - to set up racket to use different language you would start your racket with the following command e.g.: `racket -I typed/racket`</text>
  </message>
  <message conversation_id="178">
    <ts>2018-03-06T19:49:40.000094</ts>
    <user>Ezra</user>
    <text>the problem is I don't know how to add the reader extension so it would work: `racket -I at-exp racket` doesn't work</text>
  </message>
  <message conversation_id="178">
    <ts>2018-03-06T19:55:04.000298</ts>
    <user>Hilda</user>
    <text>hmmm</text>
  </message>
  <message conversation_id="178">
    <ts>2018-03-06T19:56:24.000359</ts>
    <user>Hilda</user>
    <text>for right now at least I made a macOS Keyboard Maestro macro:
(define x KEYBOARD_MAESTRO_MACRO[#&amp;lt;&amp;lt;EOF
{{paste}}
EOF
)
]</text>
  </message>
  <message conversation_id="178">
    <ts>2018-03-06T19:56:56.000125</ts>
    <user>Hilda</user>
    <text>still not quite as elegant as something like triple quotes, though, since in files themselves all the heredocs are very syntax-y</text>
  </message>
  <message conversation_id="178">
    <ts>2018-03-06T19:58:06.000278</ts>
    <user>Ezra</user>
    <text>triple quotes would also "work" here :wink: : ```(define multi-line #&amp;lt;&amp;lt;"""
  Some multi-line
  string literal.
"""
)```</text>
  </message>
  <message conversation_id="178">
    <ts>2018-03-06T20:26:58.000293</ts>
    <user>Hilda</user>
    <text>hmmm, great point!</text>
  </message>
  <message conversation_id="179">
    <ts>2018-03-07T08:36:21.000227</ts>
    <user>Karry</user>
    <text>redex users -- is there a way to render a `define-term`? e.g. `(define-term foo blah)` might render as `foo ≣ blah` or similar, so you can explain what `foo` is without worrying about the definition getting out of sync with the model</text>
  </message>
  <message conversation_id="179">
    <ts>2018-03-07T08:37:56.000417</ts>
    <user>Karry</user>
    <text>(I guess I could write a macro that produces the image/pict `foo ≣ blah` and also asserts that those two redex terms are `equal?`)</text>
  </message>
  <message conversation_id="180">
    <ts>2018-03-07T11:17:44.000585</ts>
    <user>Monserrate</user>
    <text>&lt;@Willette&gt; do these changes seem like they should just be accepted (TR optimizer test failures): &lt;http://drdr.racket-lang.org/45682/racket/share/pkgs/typed-racket-test/run.rkt&gt; ?</text>
  </message>
  <message conversation_id="180">
    <ts>2018-03-07T11:34:33.000098</ts>
    <user>Willette</user>
    <text>&lt;@Monserrate&gt;: I haven't looked at them yet.</text>
  </message>
  <message conversation_id="180">
    <ts>2018-03-07T11:34:42.000233</ts>
    <user>Willette</user>
    <text>I suspect that they</text>
  </message>
  <message conversation_id="180">
    <ts>2018-03-07T11:34:46.000665</ts>
    <user>Willette</user>
    <text>'re more likely fine.</text>
  </message>
  <message conversation_id="180">
    <ts>2018-03-07T11:34:52.000308</ts>
    <user>Willette</user>
    <text>s/more/most/</text>
  </message>
  <message conversation_id="180">
    <ts>2018-03-07T11:35:07.000499</ts>
    <user>Willette</user>
    <text>But I want to inspect them.</text>
  </message>
  <message conversation_id="180">
    <ts>2018-03-07T11:35:20.000566</ts>
    <user>Willette</user>
    <text>Should have some time on Friday.</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T17:36:04.000145</ts>
    <user>Omar</user>
    <text>Is there something like modeline for DrRacket, so that the settings can vary for different files? For example, I might define a macro named `λ*` which I intend to be lambda-like. I think it doesn't make sense to add this to the "Lambda-like keywords" in the preferences dialog since
- Other people who edit my file might not have the same setting as mine
- For my other files, `λ*` might not be lambda-like</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:06:17.000248</ts>
    <user>Bertha</user>
    <text>Is anyone accessing Slack via IRC gateway?
It looks like Slack is going to drop that because it doesn't provide enough ~lock-in~ "security".</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:07:07.000266</ts>
    <user>Bertha</user>
    <text>&lt;https://news.ycombinator.com/item?id=16539857&gt;</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:07:18.000098</ts>
    <user>Willette</user>
    <text>I am. I'm annoyed at that.</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:08:06.000221</ts>
    <user>Willette</user>
    <text>By I expect that by the time they stop supporting it, someone on the internet will have built an alternative, and we'll just be able to keep using IRC.</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:08:22.000008</ts>
    <user>Willette</user>
    <text>s/By/but/</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:15:52.000199</ts>
    <user>Bertha</user>
    <text>If you like &lt;http://irccloud.com|irccloud.com&gt; for IRC (I do) they're testing their own gateway using the Slack API: &lt;https://twitter.com/IRCCloud/status/971416931373854721&gt;</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:16:52.000328</ts>
    <user>Bertha</user>
    <text>Also there is of course an :emacs: front-end for Slack :slightly_smiling_face:</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:17:49.000318</ts>
    <user>Bertha</user>
    <text>Also there is of course good old `#racket` on freenode :smile:</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:19:19.000252</ts>
    <user>Willette</user>
    <text>Good to know! I'm not sure I'd want to use irccloud, but good to have that option if it comes to that.</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:19:52.000205</ts>
    <user>Willette</user>
    <text>I had a brief look at the emacs front-end, but I couldn't tell if it was a standalone thing, or if it integrates with erc. The latter would be great.</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:23:05.000038</ts>
    <user>Bertha</user>
    <text>For me, emacs is my programming/writing "room"; mixing in realtime-ish stuff like IRC, mail is a kind of mental buffer overflow ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:23:31.000288</ts>
    <user>Bertha</user>
    <text>So I haven't tried the emacs front-end.</text>
  </message>
  <message conversation_id="181">
    <ts>2018-03-07T21:31:16.000296</ts>
    <user>Willette</user>
    <text>Well, for me emacs is the whole house. ;)</text>
  </message>
  <message conversation_id="182">
    <ts>2018-03-08T05:59:26.000331</ts>
    <user>Marnie</user>
    <text>it's bizarre to me that people put so much emphasis on how slack vs irc is about "open protocols" when slack runs on just as open a protocol as irc does (http)  and that choice of protocol is the source of slacks killer feature for me: I don't have to install, configure, setup, or administer anything whatsoever to use it on my computer, it just works like any other website</text>
  </message>
  <message conversation_id="182">
    <ts>2018-03-08T05:59:46.000029</ts>
    <user>Marnie</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T10:42:44.000145</ts>
    <user>Anton</user>
    <text>can anyone build a slack client?</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T10:43:20.000575</ts>
    <user>Anton</user>
    <text>(there’s also the lack of history for communities like this one that makes non-paid-slack a PITA)</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T10:49:22.000304</ts>
    <user>Ezra</user>
    <text>I wonder if gitter wouldn't be a better choice for open source project like racket</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T10:56:37.000106</ts>
    <user>Anton</user>
    <text>im not sure how the two match feature-for-feature</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T10:56:46.000505</ts>
    <user>Anton</user>
    <text>but it would seem better to me</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T13:54:15.000228</ts>
    <user>Marnie</user>
    <text>&lt;@Anton&gt; I don't see why not, the API lets you read and write messages</text>
  </message>
  <message conversation_id="184">
    <ts>2018-03-08T13:55:17.000660</ts>
    <user>Marnie</user>
    <text>also I actually _like_ that message history is off by default</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T13:57:36.000787</ts>
    <user>Anton</user>
    <text>welp</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T13:58:04.000359</ts>
    <user>Anton</user>
    <text>maybe there really is no issue?</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T13:58:23.000350</ts>
    <user>Anton</user>
    <text>&lt;https://github.com/wee-slack/wee-slack&gt; exists</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T14:04:52.000324</ts>
    <user>Marnie</user>
    <text>I'd say the issue is way more about the cultures slack and irc each came from as opposed to anything about the tech or protocols</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T14:08:22.000620</ts>
    <user>Anton</user>
    <text>I just assumed you couldn’t make a fully-featured client</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T14:08:36.000644</ts>
    <user>Anton</user>
    <text>it just reminds me a lot of what twitter did years ago</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T14:09:09.000142</ts>
    <user>Marnie</user>
    <text>I wonder if you can make a fully-featured _server_ and plug wee-slack into it</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T14:10:31.000262</ts>
    <user>Anton</user>
    <text>oh thats interesting</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T14:12:00.000385</ts>
    <user>Marnie</user>
    <text>I suppose in theory you _must_ be able to right? if the api exposes enough stuff for wee-slack to work, the endpoints must be well spec'd enough that you could make your own implementation of them</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T14:12:31.000691</ts>
    <user>Anton</user>
    <text>unless it specifically was designed to not be usable, then idk why you couldn’t</text>
  </message>
  <message conversation_id="183">
    <ts>2018-03-08T14:12:37.000437</ts>
    <user>Marnie</user>
    <text>I'm wildly speculating though, and far too lazy to actually analyze the docs and find out</text>
  </message>
  <message conversation_id="185">
    <ts>2018-03-08T15:29:13.000337</ts>
    <user>Carrol</user>
    <text>&lt;@Bertha&gt; have you used the emacs slack client? I haven’t set it up yet. Feel like ERC? I’m quite tired of how much slack eats memory and battery</text>
  </message>
  <message conversation_id="185">
    <ts>2018-03-08T15:32:06.000674</ts>
    <user>Bertha</user>
    <text>&lt;@Carrol&gt; No I haven't tried it.
I'm actually fine with Slack as a browser tab (not via Electron "native" app). And for something like this Racket group the memory and battery is OK-ish (for me).</text>
  </message>
  <message conversation_id="185">
    <ts>2018-03-08T15:33:42.000488</ts>
    <user>Bertha</user>
    <text>The main thing about Slack I like vs. IRC is the ability to edit messages. If I make a typo I can fix it, instead of typing a Vim command. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="185">
    <ts>2018-03-08T15:33:51.000115</ts>
    <user>Carrol</user>
    <text>yeah. I’m using the osx client and electron is certainly the problem.</text>
  </message>
  <message conversation_id="185">
    <ts>2018-03-08T15:34:09.000698</ts>
    <user>Bertha</user>
    <text>See like right there, I typed "live" instead of "like" and I just edited it. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="185">
    <ts>2018-03-08T15:36:16.000691</ts>
    <user>Bertha</user>
    <text>As I mentioned above, I have two main buckets: emacs and browser. That's it. I like my writing/programming stuff in emacs, and my browsing/communicating stuff in the browser. And I'm happy. That's just me.</text>
  </message>
  <message conversation_id="185">
    <ts>2018-03-08T15:43:39.000325</ts>
    <user>Carrol</user>
    <text>I like to push almost all of that to emacs. I don’t do mail in it anymore because the IMAP support wasn’t there (and mail.app is actually pretty damn good)… but comms + code + shell == emacs for me</text>
  </message>
  <message conversation_id="185">
    <ts>2018-03-08T15:43:54.000296</ts>
    <user>Carrol</user>
    <text>(has the IMAP story improved in emacs?)</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-08T16:35:58.000174</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; I don't know if you get the AppVeyor emails, but currently it has both test failures with unsafe operations and a segfault while running places tests</text>
  </message>
  <message conversation_id="185">
    <ts>2018-03-08T16:51:34.000293</ts>
    <user>Willette</user>
    <text>&lt;@Carrol&gt;: Been using wanderlust with IMAP for years, and it's working fine for me.</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-08T20:16:06.000063</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt; I didn't figure out how to subscribe to the AppVeyor results, but I've pushed repairs</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-08T21:05:09.000190</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; hooray, it now passes (and I usually track the results using the &lt;#C3P4M37H7|notifications&gt; channel here)</text>
  </message>
  <message conversation_id="187">
    <ts>2018-03-10T09:50:35.000105</ts>
    <user>Shery</user>
    <text>Is there anything analogous to a Gemfile or cabal file in the pkg system?</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T10:55:37.000090</ts>
    <user>Monserrate</user>
    <text>&lt;@Shery&gt; info.rkt is the analagous file</text>
  </message>
  <message conversation_id="187">
    <ts>2018-03-10T10:57:12.000140</ts>
    <user>Shery</user>
    <text>Will that work regardless of whether I’m making a package myself?  In other words raco pkg knows to look for that in the current working directory?</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T13:15:03.000097</ts>
    <user>Monserrate</user>
    <text>&lt;@Shery&gt; I'm not sure what you mean</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T13:15:24.000106</ts>
    <user>Monserrate</user>
    <text>Racket doesn't (really) have a concept analagous to `cabal build`</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T13:15:51.000116</ts>
    <user>Monserrate</user>
    <text>`raco pkg install` with no other arguments looks in the current directory</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T13:16:23.000065</ts>
    <user>Monserrate</user>
    <text>other `raco pkg` subcommands don't do things where the current directory is relevant</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T13:16:59.000026</ts>
    <user>Monserrate</user>
    <text>every other pkg-related command (such as `raco setup` or `raco test`) take pkg names as arguments (in their modes where they consult packages)</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T13:57:31.000006</ts>
    <user>Bertha</user>
    <text>&lt;@Shery&gt; To add to what &lt;@Monserrate&gt; said:
When developing a package locally, say in a `foo` directory:
From the parent dir of `foo`, you can do `raco pkg install --link foo`, once.
(Note the `--link`.)
Thereafter, `foo` is a package name that `raco pkg` commands will understand, regardless of the current directory.
(Maybe you already knew this, but just in case that might be a point of confusion.)</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T13:58:59.000034</ts>
    <user>Monserrate</user>
    <text>To further add, note that `raco pkg install` in the `foo` directory does what &lt;@Bertha&gt; says as well, without knowing any options :slightly_smiling_face:</text>
  </message>
  <message conversation_id="188">
    <ts>2018-03-10T13:59:45.000090</ts>
    <user>Bertha</user>
    <text>Oh. :slightly_smiling_face: Did it always, even in older Racket versions?  Once upon a time, I learned `--link` as a magic spell.</text>
  </message>
  <message conversation_id="188">
    <ts>2018-03-10T14:01:21.000036</ts>
    <user>Bertha</user>
    <text>Anyway, I think my point is, that initial install (with or w/o `--link` :smile:) will _name_ the package and then you can use that name with `raco pkg` -- in case that wasn't clear.</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T14:02:04.000009</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; it's possible that there was a release with that behavior</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T14:02:32.000071</ts>
    <user>Monserrate</user>
    <text>also it infers `--link` if you type a directory name, so `raco pkg install foo/` will work too</text>
  </message>
  <message conversation_id="186">
    <ts>2018-03-10T14:07:32.000032</ts>
    <user>Bertha</user>
    <text>&lt;https://youtu.be/Nf_Y4MbUCLY?t=35s&gt;</text>
  </message>
  <message conversation_id="189">
    <ts>2018-03-10T15:57:34.000033</ts>
    <user>Shery</user>
    <text>sorry, i don't think i was clear in what i was after before.  suppose i'm making a little sample app called `thing` i want to put on github or whatever.  i make a directory called `thing` and inside it i have `main.rkt` and `helpers.rkt`.  code in both of those files may use functions from packages A, B, and C.  i'm wondering whether i could add an `info.rkt` file and `raco pkg install` or some other pkg command could be used to just install all dependencies listed in there.  analogous in Ruby to having a Gemfile and running `bundle install`</text>
  </message>
  <message conversation_id="188">
    <ts>2018-03-10T17:04:29.000089</ts>
    <user>Bertha</user>
    <text>Yes, you can.</text>
  </message>
  <message conversation_id="189">
    <ts>2018-03-10T17:04:30.000013</ts>
    <user>Alesha</user>
    <text>Yes `info.rkt` is where pkg dependencies are listed. An easy shortcut to figuring out which dependencies to put in `info.rkt` first do a `raco pkg install` inside the `thing` directory to install your pkg. Once it's installed and assuming your pkg is implementing a collection also called `thing` then do `raco setup -l thing --fix-pkg-deps` which will adjust your `thing` pkg's `info.rkt` to have the missing dependencies `raco setup` finds</text>
  </message>
  <message conversation_id="188">
    <ts>2018-03-10T17:05:54.000075</ts>
    <user>Alesha</user>
    <text>`-l thing` option tells `setup` to only limit itself to checking `thing` collection's pkg to avoid scanning everything that's installed</text>
  </message>
  <message conversation_id="190">
    <ts>2018-03-11T17:37:06.000084</ts>
    <user>Coral</user>
    <text>This is probably already known here, but I found out that How to Design Programs (2nd edition, 2018) was just updated.</text>
  </message>
  <message conversation_id="190">
    <ts>2018-03-11T17:37:15.000033</ts>
    <user>Coral</user>
    <text>&lt;http://www.htdp.org/2018-01-06/&gt;</text>
  </message>
  <message conversation_id="189">
    <ts>2018-03-11T23:18:15.000203</ts>
    <user>Anton</user>
    <text>news to me! thanks meow</text>
  </message>
  <message conversation_id="191">
    <ts>2018-03-12T08:12:47.000097</ts>
    <user>Ezra</user>
    <text>this is still bugging me: how to open racket terminal with at-exp enabled; `Racket -I at-exp racket` doesn't work?</text>
  </message>
  <message conversation_id="191">
    <ts>2018-03-12T08:24:57.000007</ts>
    <user>Andreas</user>
    <text>&lt;@Odis&gt; MFelleisen has mentioned you have developed an indentation checker. Is that available anywhere?</text>
  </message>
  <message conversation_id="191">
    <ts>2018-03-12T08:38:44.000213</ts>
    <user>Odis</user>
    <text>&lt;@Andreas&gt; I mean, I just slapped a small script together to help him with one of his classes. But its not particularly robust.</text>
  </message>
  <message conversation_id="191">
    <ts>2018-03-12T08:38:52.000311</ts>
    <user>Odis</user>
    <text>Would you like me to send it to you?</text>
  </message>
  <message conversation_id="191">
    <ts>2018-03-12T08:39:25.000215</ts>
    <user>Andreas</user>
    <text>That would be great, thanks. pmatos@linki.tools</text>
  </message>
  <message conversation_id="191">
    <ts>2018-03-12T08:40:20.000066</ts>
    <user>Odis</user>
    <text>Okay, one moment.</text>
  </message>
  <message conversation_id="191">
    <ts>2018-03-12T08:45:53.000100</ts>
    <user>Odis</user>
    <text>&lt;@Andreas&gt; sent.</text>
  </message>
  <message conversation_id="191">
    <ts>2018-03-12T09:09:02.000400</ts>
    <user>Andreas</user>
    <text>&lt;@Odis&gt; thanks.</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T16:04:53.000522</ts>
    <user>Carrol</user>
    <text>&lt;@Ezra&gt; huh. not sure. `racket -i -I typed/racket` works fine, but `racket -i -I at-exp` complains about not finding `share/pkgs/at-exp-lib/at-exp/main.rkt`… but typed/racket doesn’t have a main (by file name). Maybe something in the info.rkt hints at the how?</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T16:05:24.000052</ts>
    <user>Carrol</user>
    <text>hrm.. there isn’t one of those either [ETA: I was wrong on this, dunno how I missed it]</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T16:06:57.000104</ts>
    <user>Carrol</user>
    <text>the typed/racket info.rkt is a 1 line mess. But I just found `raco read &amp;lt;path&amp;gt;` which helps tremendously</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T16:10:26.000678</ts>
    <user>Monserrate</user>
    <text>the `typed/racket.rkt` file is probably what you want</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T16:10:50.000178</ts>
    <user>Monserrate</user>
    <text>but in general, `at-exp` is a module language and not necessarily something you can use at the repl</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T17:26:34.000051</ts>
    <user>Ezra</user>
    <text>&lt;@Carrol&gt; thanks for actually trying it out to see what I mean :slightly_smiling_face:</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T17:27:39.000304</ts>
    <user>Ezra</user>
    <text>&lt;@Monserrate&gt; but shouldn't it be available as an option to use reader extension like the at-exp from the level of REPL?</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T17:30:03.000295</ts>
    <user>Monserrate</user>
    <text>The at-exp reader is not necessarily something that works for repls</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T17:30:10.000612</ts>
    <user>Monserrate</user>
    <text>Module readers can be different</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T17:31:06.000639</ts>
    <user>Monserrate</user>
    <text>Additionally, there's not a command line option for configuring the reader at the repl</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T17:35:30.000401</ts>
    <user>Ezra</user>
    <text>OK, my question was more general than at-exp: I was planning to build reader extension but than I realised I can't find the right syntax to even make repl work with at-exp. At least I know there is none. So it is more a feature request then...</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T18:19:20.000506</ts>
    <user>Monserrate</user>
    <text>&lt;@Ezra&gt; you can do something like `racket -e '(current-readtable (make-at-readtable))'`</text>
  </message>
  <message conversation_id="192">
    <ts>2018-03-12T18:35:30.000256</ts>
    <user>Ezra</user>
    <text>thanks &lt;@Monserrate&gt;, will try it</text>
  </message>
  <message conversation_id="193">
    <ts>2018-03-13T20:44:47.000148</ts>
    <user>Aimee</user>
    <text>Is it possible to disable `compile-context-preservation-enabled` when compiling racket from git head?</text>
  </message>
  <message conversation_id="193">
    <ts>2018-03-13T20:44:57.000084</ts>
    <user>Aimee</user>
    <text>sorry, *enable</text>
  </message>
  <message conversation_id="193">
    <ts>2018-03-13T20:48:13.000054</ts>
    <user>Aimee</user>
    <text>Is adding `--disable-inline` to raco arguments in `in-place-setup` enough?</text>
  </message>
  <message conversation_id="193">
    <ts>2018-03-13T21:06:46.000029</ts>
    <user>Lynna</user>
    <text>&lt;@Aimee&gt; I don't think `raco setup` supports `--disable-inline`. If you're wiling to change code, you could add the `init_param(cells, paramz, MZCONFIG_DISALLOW_INLINE, scheme_true);` around &lt;https://github.com/racket/racket/blob/master/racket/src/racket/src/thread.c#L7874&gt; to change the built-in default.</text>
  </message>
  <message conversation_id="193">
    <ts>2018-03-13T21:07:53.000355</ts>
    <user>Aimee</user>
    <text>&lt;@Lynna&gt;: aha, thanks!!</text>
  </message>
  <message conversation_id="194">
    <ts>2018-03-13T21:50:24.000052</ts>
    <user>Carlyn</user>
    <text>I’m interested in going further with my embedding of André van Tonder’s macro system in Racket, but reimplementing `syntax` / `quasisyntax` seems fairly complicated for little gain (I just need to swap out Racket’s `quote-syntax` for my own `quote-syntax`). Pattern variables are straightforward, but ellipses make things suddenly a lot harder. Is there any way I could re-use some of the existing `syntax` and `quasisyntax` implementations without copying them and modifying the source code?</text>
  </message>
  <message conversation_id="194">
    <ts>2018-03-13T21:52:04.000040</ts>
    <user>Carlyn</user>
    <text>I suppose I could `local-expand` something using `syntax`, then recursively walk the resulting syntax object and replace `quote-syntax` with my own, but that is pretty icky, and I don’t think it would work for `quasisyntax` (though I could probably do a preprocessing step, collect all the expressions under `unquote`, and lift them into `let` bindings before calling `local-expand`).</text>
  </message>
  <message conversation_id="195">
    <ts>2018-03-14T06:22:53.000471</ts>
    <user>Andreas</user>
    <text>Does anybody know of a library that allows you to read from the command line without echo? The obvious example is to read a password.</text>
  </message>
  <message conversation_id="194">
    <ts>2018-03-14T08:23:03.000346</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; i recommend abstracting their definitions so that they take an identifier for `quote-syntax`</text>
  </message>
  <message conversation_id="194">
    <ts>2018-03-14T09:06:41.000145</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; Looking back at your mailing list post, I'm surprised by the `'(local module)` result.  I thought that SRFI 72's "evaluation of any nested, unquoted syntax or quasisyntax forms counts as part of the evaluation of an enclosing quasisyntax" would imply `'(local local)`.</text>
  </message>
  <message conversation_id="196">
    <ts>2018-03-14T09:58:21.000003</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; I've now seen this error in both the Windows and Mac CI tests: &lt;https://ci.appveyor.com/project/plt/racket/build/1.0.3058#L3576&gt;</text>
  </message>
  <message conversation_id="196">
    <ts>2018-03-14T09:58:36.000602</ts>
    <user>Monserrate</user>
    <text>`((chaperones) (#f #t (threads-finished #f)))`</text>
  </message>
  <message conversation_id="196">
    <ts>2018-03-14T10:28:49.000855</ts>
    <user>Monserrate</user>
    <text>&lt;@Dia&gt; I'd like to remove or fix the `ramunk`, `racket`, `formica`, and `rclp` packages, none of which have a working package source</text>
  </message>
  <message conversation_id="196">
    <ts>2018-03-14T10:29:39.000334</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; another odd error:
```
Section(file)
ERROR: tcp-connect: connection failed
  address: ::1
  port number: 55598
  system error: Operation timed out; errno=60
```
(from &lt;https://travis-ci.org/racket/racket/jobs/353322682&gt;)</text>
  </message>
  <message conversation_id="196">
    <ts>2018-03-14T10:32:20.000052</ts>
    <user>Monserrate</user>
    <text>&lt;@Dia&gt; sorry, that wasn't 100% accurate -- they all error when trying to get the checksum, but only `racket` and `rclp` are missing the source entirely</text>
  </message>
  <message conversation_id="196">
    <ts>2018-03-14T10:32:51.000087</ts>
    <user>Monserrate</user>
    <text>`formica` and `ramunk` error when getting the checksum in ways that I think the pkg server should handle</text>
  </message>
  <message conversation_id="197">
    <ts>2018-03-14T12:06:52.000727</ts>
    <user>Willette</user>
    <text>&lt;@Andreas&gt;: When I've needed to do that, I've just called out to stty. Not ideal, I agree.</text>
  </message>
  <message conversation_id="196">
    <ts>2018-03-14T12:48:14.000388</ts>
    <user>Dia</user>
    <text>&lt;@Monserrate&gt; I deleted `racket` and `rclp`</text>
  </message>
  <message conversation_id="196">
    <ts>2018-03-14T12:51:17.000609</ts>
    <user>Monserrate</user>
    <text>We should probably email the authors</text>
  </message>
  <message conversation_id="196">
    <ts>2018-03-14T12:51:27.000671</ts>
    <user>Monserrate</user>
    <text>Do you want to do that, or should I?</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T13:36:49.000099</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I think you are correct; I overlooked that last bit, and my implementation diverges from SRFI 72 there. That said, I’m not immediately sure which behavior I think is better. On the one hand, the SRFI 72 behavior means that program must be rearranged to lift the nested `#'x` into a separate binding in order to get the behavior I was aiming for, which avoids the confusion of the nested `#'x` being lexically inside the syntax-quoted `let` but not being captured by it. On the other hand, as the SRFI itself points out, it yields the following behavior:
```
(bound-identifier=?
 (syntax x)
 (syntax x))            ; ==&amp;gt; #f

(quasisyntax
 #,(bound-identifier=?
    (syntax x) 
    (syntax x)))         ; ==&amp;gt; #t
```
…which I can’t help but feel is confusing, since there is no binding of `x` “capturing” the uses of `syntax` (unlike in the example I posted to the mailing list). I’ll have to think about the ramifications of including or not including that rule.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:34:48.000383</ts>
    <user>Carrol</user>
    <text>I’m looking at the `net/imap` package and wondering if I’m not understanding something or if there’s some abstraction over the `net/*` packages I don’t know yet… there seems to be no function to represent the `SEARCH` command for imap, nor is there a generalized function for sending more raw commands to the imap server. `SEARCH` seems like a really basic idea, so I’m guessing I’m missing something.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:41:06.000754</ts>
    <user>Carrol</user>
    <text>digging in… internally there is `imap-send` which isn’t exported and I’ve verified that `SEARCH` isn’t anywhere within.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:41:17.000651</ts>
    <user>Carrol</user>
    <text>Is there a way to get my hands on `imap-send`?</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:41:51.000589</ts>
    <user>Carrol</user>
    <text>Also, it really should be exported (or the full IMAP protocol should be covered—it isn’t a moving target so that should be easy to do and maintain)</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:46:22.000496</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt; I think I fixed the `threads-finished` test</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:46:46.000522</ts>
    <user>Monserrate</user>
    <text>&lt;@Carrol&gt; you might look at the sirmail code for uses of imap</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:46:57.000451</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; great</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:47:23.000024</ts>
    <user>Carrol</user>
    <text>general question tho: is it possible to dig in and grab a non-exported function?</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:47:36.000080</ts>
    <user>Carrol</user>
    <text>in this case, it’d make it easier for me to submit patches back</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:47:54.000241</ts>
    <user>Lynna</user>
    <text>I don't know that the SirMail code is any use; the suggested functionality is just missing, and adding it would be great.
You can get an unexpected function by using `module-&amp;gt;namespace`, but don't do that. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:48:21.000280</ts>
    <user>Carrol</user>
    <text>(ie, I won’t have to have a full build to extend this—yet)</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:53:37.000291</ts>
    <user>Carrol</user>
    <text>hrm… I don’t know how I’m supposed to get ahold of that function. `module-&amp;gt;namespace` is defined with:

&amp;gt; New provide declarations are not allowed.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:56:30.000114</ts>
    <user>Lynna</user>
    <text>```
(require net/imap)
(eval 'imap-send (module-&amp;gt;namespace 'net/imap))
```</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:58:03.000558</ts>
    <user>Carrol</user>
    <text>derp</text>
  </message>
  <message conversation_id="199">
    <ts>2018-03-14T16:58:25.000697</ts>
    <user>Marnie</user>
    <text>&lt;@Lynna&gt; tangentially related: what's the underlying reason `(module-&amp;gt;namespace 'mod)` doesn't automatically require `'mod` for you? I don't have a good enough handle on modules and the runtime to understand that.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T16:59:42.000562</ts>
    <user>Lynna</user>
    <text>There's probably no good reason</text>
  </message>
  <message conversation_id="199">
    <ts>2018-03-14T17:00:54.000373</ts>
    <user>Marnie</user>
    <text>huh</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T17:01:57.000425</ts>
    <user>Marnie</user>
    <text>thank you very much for writing the linklet docs by the way, I found them very helpful</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T17:04:41.000151</ts>
    <user>Carrol</user>
    <text>heh</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T17:05:02.000351</ts>
    <user>Carrol</user>
    <text>&lt;@Lynna&gt; thank you. that got me back on track. I should be able to use that and wrap up search</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T18:38:38.000333</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; What UI framework does Racket’s Windows GUI API use?</text>
  </message>
  <message conversation_id="199">
    <ts>2018-03-14T18:39:00.000302</ts>
    <user>Odis</user>
    <text>I know os x uses cocoa and linux is gtk+, but the windows folder just seems to say win32.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T18:40:44.000279</ts>
    <user>Lynna</user>
    <text>Yes, plain native win32.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-14T18:42:56.000168</ts>
    <user>Odis</user>
    <text>Ah, okay. thanks.</text>
  </message>
  <message conversation_id="200">
    <ts>2018-03-15T09:51:57.000309</ts>
    <user>Andreas</user>
    <text>&lt;@Willette&gt; Thanks. Guess I will be calling `stty` directly as well.</text>
  </message>
  <message conversation_id="200">
    <ts>2018-03-15T09:52:47.000740</ts>
    <user>Andreas</user>
    <text>What's the best ORM library out there for Racket? I couldn't really find anything. There's mongodb orm layer but it feels like it needs some love. Anything besides that?</text>
  </message>
  <message conversation_id="200">
    <ts>2018-03-15T10:52:32.000569</ts>
    <user>Ezra</user>
    <text>&lt;@Andreas&gt; there is also &lt;https://pkgs.racket-lang.org/package/racquel&gt;</text>
  </message>
  <message conversation_id="200">
    <ts>2018-03-15T11:31:28.000348</ts>
    <user>Andreas</user>
    <text>&lt;@Ezra&gt; Thanks, couldn't find that one.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T16:54:37.000594</ts>
    <user>Odis</user>
    <text>&lt;@Willette&gt; You around?</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T16:55:20.000166</ts>
    <user>Odis</user>
    <text>(And if so, do you prefer skype, hangouts, jitsi, or something else?)</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T16:59:36.000095</ts>
    <user>Willette</user>
    <text>&lt;@Odis&gt;: Just logged in to skype.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T16:59:39.000197</ts>
    <user>Willette</user>
    <text>Can also use hangouts if need be,</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:00:12.000276</ts>
    <user>Odis</user>
    <text>Okay cool. I will now rangle MF and Jan. (Who are currently in their offices.)</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:01:34.000492</ts>
    <user>Odis</user>
    <text>Skype says your not online. :disappointed:</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:01:57.000674</ts>
    <user>Willette</user>
    <text>Yeah, it crashed and won't come back up.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:02:02.000328</ts>
    <user>Willette</user>
    <text>Hangouts?</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:02:02.000670</ts>
    <user>Odis</user>
    <text>Okay</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:02:06.000125</ts>
    <user>Odis</user>
    <text>Works for me.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:03:01.000323</ts>
    <user>Willette</user>
    <text>Hmm, it beachballs.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:03:16.000218</ts>
    <user>Odis</user>
    <text>Can we call you on the phone?</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:03:23.000251</ts>
    <user>Odis</user>
    <text>If so, pm me your number?</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:03:27.000090</ts>
    <user>Willette</user>
    <text>I think it worked.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:03:34.000138</ts>
    <user>Odis</user>
    <text>Okay, well hangouts works.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:03:41.000068</ts>
    <user>Odis</user>
    <text>What’s your address?</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:04:04.000444</ts>
    <user>Willette</user>
    <text>Beach balls again...</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:04:16.000253</ts>
    <user>Willette</user>
    <text>Let's just use the phone. I'll PM you my number.</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:04:21.000487</ts>
    <user>Odis</user>
    <text>thanks</text>
  </message>
  <message conversation_id="198">
    <ts>2018-03-15T17:05:19.000447</ts>
    <user>Willette</user>
    <text>Technology...</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T03:50:52.000126</ts>
    <user>Andreas</user>
    <text>Is there a way to access low level integers in Racket? For example, I would like to build fast bitvector arithmetic, but I need access to raw-bytes or fixed size integers that wrap-around to do this. I initially thought that this was the idea of unsafe fixnums but I was wrong as they don't seem to wrap around. Any suggestions or do I need to pull them from C using the ffi?</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:03:50.000489</ts>
    <user>Carrol</user>
    <text>&lt;@Andreas&gt; (are there two of you in here?)  have you seen `data/bit-vector` ? maybe you can poke inside that?</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:15:43.000321</ts>
    <user>Andreas</user>
    <text>&lt;@Carrol&gt; two of me? don't think so. Yes, I looked at `data/bit-vector`. From the docs, it looks like it was not using a compressed representation. However, I was just looking at the implementation and it's using bytes as the representation. However, it has no arithmetic built on top of that, therefore my question on bitvector arithmetic. It seems I might have to implement it -- `data/bit-vector` looks like a good start.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:15:50.000454</ts>
    <user>Andreas</user>
    <text>&lt;@Carrol&gt; why would there be two of me?</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:17:00.000134</ts>
    <user>Carrol</user>
    <text>God I thought I lost my mind… I went over to emacs in &lt;#C6X5JF8AJ|racket&gt; and couldn’t for the life of me find this convo. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:17:14.000064</ts>
    <user>Carrol</user>
    <text>&lt;@Salome&gt; vs &lt;@Andreas&gt;</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:18:18.000102</ts>
    <user>Carrol</user>
    <text>While you’re poking around in there, also look at `racket/private/vector-wraps`</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:18:26.000164</ts>
    <user>Andreas</user>
    <text>thanks.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:18:35.000556</ts>
    <user>Carrol</user>
    <text>what are you trying to do anyways?</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:18:55.000100</ts>
    <user>Andreas</user>
    <text>interesting... why do I have a pmatos here as well... i wonder if that's the username i have when logged in through my phone.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:19:40.000461</ts>
    <user>Andreas</user>
    <text>&lt;@Carrol&gt; I am trying to emulate the rosette bitvector library using concrete values / as opposed to rosette symbolic.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:22:05.000129</ts>
    <user>Carrol</user>
    <text>I know nothing of rosette other than it was born up the road (I think)</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:22:32.000461</ts>
    <user>Andreas</user>
    <text>ok :slightly_smiling_face:</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:22:57.000353</ts>
    <user>Carrol</user>
    <text>what does it do that, for example, plain racket integers don’t?</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:22:58.000368</ts>
    <user>Andreas</user>
    <text>anyway, my pmatos username seems to have been created by the github integration. I have never sent a message using it.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:24:38.000458</ts>
    <user>Carrol</user>
    <text>wow. they name the functions terribly on the rosette side</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:24:53.000177</ts>
    <user>Andreas</user>
    <text>&lt;@Carrol&gt; mostly, they are faster. implementing it on top of racket integers is what I have at the moment. However, there's quite a bit to be gained after hours of arithmetic on racket integers if one uses a faster representation.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:25:20.000487</ts>
    <user>Carrol</user>
    <text>but it does look like the functional overlap between ints and rosette’s bitvectors is very close</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:25:50.000187</ts>
    <user>Carrol</user>
    <text>the unsafe stuff would probably be the right way to go to get some speed out of it, but then you need to provide your own guarantees of correctness</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:26:13.000321</ts>
    <user>Andreas</user>
    <text>With racket integers representing a bitvector 32bits, means I need to do a lot of checks by myself to ensure proper wrap around, etc. Using a low-level representation would give me that almost for free.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:26:53.000060</ts>
    <user>Carrol</user>
    <text>The wrap around part was the only part I didn’t really understand… like, rotate the bits w/o dropping values?</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:27:17.000142</ts>
    <user>Andreas</user>
    <text>also, the reason _not_ to use bitvectors from rosette using concrete values is because since they also support symbolic values every operation needs to check types, etc.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:27:38.000029</ts>
    <user>Andreas</user>
    <text>(2*32 - 1) + 1 == 0</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:27:58.000146</ts>
    <user>Andreas</user>
    <text>thats (2^32 - 1) + 1 == 0</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:28:10.000319</ts>
    <user>Andreas</user>
    <text>for unsigned bitvector 32 arithmetic.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:28:35.000200</ts>
    <user>Andreas</user>
    <text>but there are other operations which are faster if using a lower level representation directly.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:29:05.000485</ts>
    <user>Carrol</user>
    <text>ooooh… and you want fixed size. derp. ok… that was the part I really was losing you on…. this scotch is doing its job. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:29:23.000245</ts>
    <user>Andreas</user>
    <text>I actually was completely convinced that if I had an unsafe fixnum, it would wrap around but it turns out that's not the cae.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:30:47.000140</ts>
    <user>Carrol</user>
    <text>AFAIK, unsafe JUST means it doesn’t do all the extra bounds/safety checks</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:32:08.000117</ts>
    <user>Andreas</user>
    <text>yes, i reached the same conclusion.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:32:18.000484</ts>
    <user>Carrol</user>
    <text>have you seen racket/fixnum and unsafe-fixnum?</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:32:27.000332</ts>
    <user>Carrol</user>
    <text>I’m probably not helping at this point. :stuck_out_tongue:</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:32:35.000085</ts>
    <user>Carrol</user>
    <text>(um… not to imply that I’ve helped at all)</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:33:27.000018</ts>
    <user>Andreas</user>
    <text>yes, had a read but doesn't seem to be what I need.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:33:45.000135</ts>
    <user>Andreas</user>
    <text>I might just create a super-simple C wrapper for `stdint` types and pull them to racket.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:33:59.000060</ts>
    <user>Carrol</user>
    <text>doesn’t have the bit arithmetic functions, ironically</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:34:10.000293</ts>
    <user>Andreas</user>
    <text>that's right.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:35:12.000326</ts>
    <user>Carrol</user>
    <text>before you go off the deep end, read the link in the fixnum doco to the fixnum optimizations in the performance section</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:35:30.000185</ts>
    <user>Carrol</user>
    <text>might be worth it to wrap fixnum with the functionality you don’t have</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:35:35.000222</ts>
    <user>Carrol</user>
    <text>or at the very least, steal :stuck_out_tongue:</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:37:17.000361</ts>
    <user>Ezra</user>
    <text>&lt;@Andreas&gt; you may also want to check with &lt;@Franklin&gt; who is the co author of the math library - he is regular at IRC as soegaard</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:38:05.000121</ts>
    <user>Andreas</user>
    <text>&lt;@Carrol&gt; i will take a look</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:38:20.000202</ts>
    <user>Andreas</user>
    <text>&lt;@Ezra&gt; thanks for the ref.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:38:30.000420</ts>
    <user>Carrol</user>
    <text>hrm… looks like it all comes in via `'#%flfxnum` which, I’m guessing, implies it’s not .rkt but .c</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:39:48.000169</ts>
    <user>Andreas</user>
    <text>can't find the optimization doc you mentioned.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:39:55.000105</ts>
    <user>Carrol</user>
    <text>and `share/pkgs/r6rs-lib/rnrs/arithmetic/fixnums-6.rkt`</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:39:59.000494</ts>
    <user>Carrol</user>
    <text>that has rotate and some others</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:40:04.000309</ts>
    <user>Carrol</user>
    <text>no clue as to the speed tho</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:40:13.000516</ts>
    <user>Carrol</user>
    <text>`rnrs/arithmetic/bitwise-6`</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:40:14.000428</ts>
    <user>Carrol</user>
    <text>sec</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:40:47.000322</ts>
    <user>Carrol</user>
    <text>&lt;https://docs.racket-lang.org/guide/performance.html#%28part._fixnums%2Bflonums%29&gt;</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:42:39.000304</ts>
    <user>Carrol</user>
    <text>I’m fading… goodnight all.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:43:32.000183</ts>
    <user>Andreas</user>
    <text>sure, thanks for your help. good night.</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:43:56.000059</ts>
    <user>Andreas</user>
    <text>*faints* after noticing your local time is 3.40am</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T06:45:04.000515</ts>
    <user>Carrol</user>
    <text>I told you rosette was just up the street! (I’m in Seattle) :stuck_out_tongue:</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T12:22:56.000366</ts>
    <user>Helena</user>
    <text>&lt;@Marnie&gt; can you confirm that the number of people using Dart is `&amp;gt;= 1` ?</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T12:32:42.000260</ts>
    <user>Andreas</user>
    <text>&lt;@Helena&gt; lol</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T12:34:56.000482</ts>
    <user>Andreas</user>
    <text>Guys, what's the best way to do a dynamic compile time require? Let's say I have the path to the directory containing a file to require. During compile time I want to append foo.rkt to the path and require it without incurring the time taken to dynamic require each time I run the file?</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T12:35:30.000570</ts>
    <user>Andreas</user>
    <text>Is this something I can achieve using a macro? Can I require something into the top level with a macro?</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T12:50:35.000465</ts>
    <user>Helena</user>
    <text>yep a macro can expand to a require: &lt;http://docs.racket-lang.org/syntax-parse-example/index.html?q=conditional-require#%28part._conditional-require%29&gt;</text>
  </message>
  <message conversation_id="201">
    <ts>2018-03-16T13:00:33.000235</ts>
    <user>Andreas</user>
    <text>&lt;@Helena&gt; interesting example. Thanks.</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:06:13.000235</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; definitely the number of people using dart is `&amp;gt;= 10000`</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:10:52.000005</ts>
    <user>Helena</user>
    <text>thank you Sam, that settled my argument here with Stephen Chang :)</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:11:24.000073</ts>
    <user>Helena</user>
    <text>he cited Mark Miller ~2012 saying "nobody uses Dart". The new point of reference is Tobin-Hochstadt ~2018</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:12:34.000746</ts>
    <user>Monserrate</user>
    <text>I think (a) Dart is more used now (b) Mark probably meant `|Dart users|/|JS users| ~= 0`</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:24:45.000310</ts>
    <user>Ezra</user>
    <text>&lt;https://www.dartlang.org/community/who-uses-dart&gt;</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:36:46.000339</ts>
    <user>Marnie</user>
    <text>&lt;@Helena&gt; inside Google or outside Google? :P</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:38:42.000467</ts>
    <user>Helena</user>
    <text>yes, either inside or outside</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:42:28.000426</ts>
    <user>Marnie</user>
    <text>there's still several google projects built on dart AFAIK</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:43:05.000024</ts>
    <user>Helena</user>
    <text>with at least 2 people working on them?</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:43:11.000215</ts>
    <user>Marnie</user>
    <text>yes</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:43:30.000504</ts>
    <user>Helena</user>
    <text>excellent I will tell Stephen</text>
  </message>
  <message conversation_id="203">
    <ts>2018-03-16T13:43:34.000349</ts>
    <user>Thaddeus</user>
    <text>Hello there ! Sorry for the newbie question, but this is the first time I try this:
I'd like to make a macro with optional keyword arguments.
I naively tried this:
```
(define-syntax-rule
  (define-cascader (name arg ...)
                   #:description [desc #f]
                   #:unless [unless #f]
                   #:fail [fail #f]
                   #:fail-reason [reason #f]
                   body ...)
  ...yada yada...)
```
but of course, it's more complicated than that.
Is there any shortcuts that would prevent me from spending the next 4 hours reading the syntax-parse doc?</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:43:51.000599</ts>
    <user>Marnie</user>
    <text>&lt;@Thaddeus&gt; reading the syntax parse docs is probably your best bet</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:44:03.000368</ts>
    <user>Marnie</user>
    <text>there's a section in the tutorial specifically on how to make optional keyword arguments</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:44:10.000783</ts>
    <user>Thaddeus</user>
    <text>oh nice</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:44:52.000377</ts>
    <user>Marnie</user>
    <text>See the Examples section: &lt;http://docs.racket-lang.org/syntax/stxparse-examples.html?q=syntax%2Fparse&gt;</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:46:33.000676</ts>
    <user>Thaddeus</user>
    <text>Thanks :smile:</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:46:33.000695</ts>
    <user>Marnie</user>
    <text>&lt;@Helena&gt; 
&amp;gt; Dart is an officially approved language for web development in Google3, and is heavily used by the Ads PA.</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:47:11.000195</ts>
    <user>Marnie</user>
    <text>huh looks like there's even compatibility libraries to use Angular on dart</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:48:07.000556</ts>
    <user>Helena</user>
    <text>thank you all for the help everyone, we've convinced Stephen that there are people who use Dart</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:48:46.000192</ts>
    <user>Marnie</user>
    <text>for a second I thought you just said you'd convinced Stephen to _use_ Dart and whoa there, not so fast :p</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:49:47.000639</ts>
    <user>Ezra</user>
    <text>&lt;@Helena&gt; are you trying to say it is time to stop procrastinating and start doing something of value :wink: ?</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:52:28.000503</ts>
    <user>Helena</user>
    <text>haha, wishful thinking. It's phd visit day here (Northeastern) &amp;amp; just starting to get busy</text>
  </message>
  <message conversation_id="202">
    <ts>2018-03-16T13:55:21.000618</ts>
    <user>Marnie</user>
    <text>Whoa when did dart start getting all this activity? &lt;https://medium.com/dartlang/announcing-dart-2-80ba01f43b6&gt;</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:41:37.000012</ts>
    <user>Thaddeus</user>
    <text>Okay, I got my macro working... almost...
It is supposed to expand to a lambda form.
But when trying to syntax-parse `(hello . words)` (the lambda dot notation) with the pattern `(name arg ...)` I get a bad syntax.
How do I match usages like `(my-macro (count . stuff))`?</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:42:33.000751</ts>
    <user>Marnie</user>
    <text>&lt;@Thaddeus&gt; dotted pairs aren't matched by elipses</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:42:47.000027</ts>
    <user>Marnie</user>
    <text>(which I find irritating, but alas)</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:42:51.000708</ts>
    <user>Thaddeus</user>
    <text>Yes x)</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:44:10.000641</ts>
    <user>Marnie</user>
    <text>You have to have another pattern clause which includes the dot, like this:

```
(syntax-parse stx
  [(_ (name arg ...) body ...) something]
  [(_ (name arg ... . rest-arg) body ...) something])
```</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:44:26.000395</ts>
    <user>Marnie</user>
    <text>or at least, I don't know of a better way</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:44:38.000084</ts>
    <user>Thaddeus</user>
    <text>I see</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:46:42.000469</ts>
    <user>Thaddeus</user>
    <text>mmmh, maybe a splicing-syntax-class like `maybe-rest-arg` that would match `(~seq #'. rest-args:id)`?</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:47:41.000177</ts>
    <user>Marnie</user>
    <text>the dot isn't an identifier, it's reader syntax - the actual AST is differently structured (it's an improper list of syntax objects instead of a proper list)</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:48:01.000270</ts>
    <user>Thaddeus</user>
    <text>that's what I feared...</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:49:59.000685</ts>
    <user>Wally</user>
    <text>&lt;@Helena&gt; &lt;@Marnie&gt; Mark Miller? Capabilities? Someone working on/with? Anything worth mentioning?</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:50:44.000276</ts>
    <user>Helena</user>
    <text>nothing worth mentioning, just joking about a conversation from 2012</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:51:17.000457</ts>
    <user>Marnie</user>
    <text>???</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:51:53.000692</ts>
    <user>Thaddeus</user>
    <text>I always wondered... How do I prevent repeating myself in the `something` part?</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:51:54.000107</ts>
    <user>Helena</user>
    <text>that's why I posted about Dart</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:52:10.000012</ts>
    <user>Helena</user>
    <text>"Dart ... do people use that"</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:52:12.000349</ts>
    <user>Helena</user>
    <text>"yeah for sure"</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:52:32.000216</ts>
    <user>Helena</user>
    <text>"I dunno, I asked Mark Miller at a conference and he said _nobody_ uses Dart ... but that was 2012"</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:52:39.000645</ts>
    <user>Marnie</user>
    <text>oh!</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:52:45.000125</ts>
    <user>Helena</user>
    <text>"ok I'll ask Jack on slack if at least 1 person uses Dart"</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:53:19.000467</ts>
    <user>Marnie</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:53:44.000346</ts>
    <user>Marnie</user>
    <text>making syntax classes so that `something` is pretty simple is what I usually do for that</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:54:59.000422</ts>
    <user>Thaddeus</user>
    <text>:cry:</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:55:14.000008</ts>
    <user>Frederic</user>
    <text>I am new to both Scheme &amp;amp; Racket, but I think I might have stumbled upon a bug in v5.3.6 (which is what my distro provides)
Forgive me, because I'm about to do something inane:
```
$ racket
Welcome to Racket v5.3.6.
&amp;gt; 'x
'x

&amp;gt; (define 'x 11)

&amp;gt; 'x
x: undefined;
 cannot reference undefined identifier
  context...:
   /usr/share/racket/collects/racket/private/misc.rkt:87:7

&amp;gt; (define x 10)

&amp;gt; x
10

&amp;gt; 'x
11
```
I'm not sure that `(define 'x 11)` is a kosher thing to do.  But certainly Racket's inconsistency in evaluating 'x afterwards can't be right?</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:56:01.000157</ts>
    <user>Marnie</user>
    <text>`'x` is reader syntax for `(quote x)`, which is what the macroexpander sees</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:57:39.000648</ts>
    <user>Marnie</user>
    <text>so your example is equivalent to this:

```
&amp;gt; (quote x)
'x
&amp;gt; (define (quote x) 11)
&amp;gt; (quote x) ;; function call with variable x as argument!
x: undefined
&amp;gt; (define x 10)
&amp;gt; x
10
&amp;gt; (quote x)
11
```</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:58:34.000418</ts>
    <user>Marnie</user>
    <text>in particular, `(define 'x 11)` defines a function named `quote` that _shadows_ the special form `quote` provided by `#lang racket`</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:58:47.000403</ts>
    <user>Frederic</user>
    <text>I follow so far</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:59:09.000147</ts>
    <user>Marnie</user>
    <text>so, not a bug - just really confusing</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:59:30.000604</ts>
    <user>Frederic</user>
    <text>But why did the last `(quote x)` change its mind about undefined vs 11 ?</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:59:56.000529</ts>
    <user>Marnie</user>
    <text>because the first `quote` was referring to the special form `quote`, but the second one was referring to the function created by `(define 'x 11)`</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T14:59:59.000444</ts>
    <user>Frederic</user>
    <text>Oh -- because `x` is no longer undefined</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T15:00:10.000190</ts>
    <user>Marnie</user>
    <text>oh whoops I misunderstood your question</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T15:00:11.000094</ts>
    <user>Marnie</user>
    <text>yes that's right</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T15:00:18.000306</ts>
    <user>Frederic</user>
    <text>Cool, thanks.</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T15:00:48.000486</ts>
    <user>Marnie</user>
    <text>which distro are you using? 5.3.6 is a few years old I think</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T15:01:02.000199</ts>
    <user>Marnie</user>
    <text>we're almost at 7 now :)</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T15:01:14.000558</ts>
    <user>Marnie</user>
    <text>7.0, that is</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T15:02:25.000257</ts>
    <user>Frederic</user>
    <text>My box is Ubuntu 14.04, I'm stuck with what it provides.</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T15:02:38.000668</ts>
    <user>Frederic</user>
    <text>We plan to upgrade to 18.04 next month though</text>
  </message>
  <message conversation_id="204">
    <ts>2018-03-16T15:13:36.000577</ts>
    <user>Ezra</user>
    <text>&lt;@Frederic&gt; have you considered building racket from source: &lt;https://github.com/racket/racket/tree/master/racket/src&gt;</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:19:50.000298</ts>
    <user>Thaddeus</user>
    <text>damn it works but it feels sooo wrooong
```
(syntax-parse stx
  [(define-cascader (name arg ...) md:maybe-desc mu:maybe-unless mf:maybe-fail body ...)
   (with-syntax ([proc-head #'(name arg ...)])
     (make-pattern stx #'proc-head #'md.desc #'mu.unless #'mf.fail #'mf.reason #'(body ...)))]

  [(define-cascader (name arg ... . rest-args) md:maybe-desc mu:maybe-unless mf:maybe-fail body ...)
   (with-syntax ([proc-head #'(name arg ... . rest-args)])
     (make-pattern stx #'proc-head #'md.desc #'mu.unless #'mf.fail #'mf.reason #'(body ...)))])
```</text>
  </message>
  <message conversation_id="206">
    <ts>2018-03-16T15:28:03.000114</ts>
    <user>Monserrate</user>
    <text>also there are 6.10 packages for trusty here: &lt;https://launchpad.net/~plt/+archive/ubuntu/racket&gt;</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:32:35.000393</ts>
    <user>Thaddeus</user>
    <text>When I have a bunch of syntax objects alive in current scope, let's say `a`, `b` and `c`, I can directly use them in a `#'(a b c)` form. But if I want to generate my syntax form with a helper function, I need to pass them all in the arguments, then inside my helper do `(quasisyntax/loc stx (#,a #,b #,c))`.
Is there a better way? Especially for syntax-class instances, which I can't pass around.
Maybe I'm missing something there.</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:37:58.000591</ts>
    <user>Thaddeus</user>
    <text>May it be that syntax-parse is actually doing that under the hood?</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:43:26.000501</ts>
    <user>Helena</user>
    <text>looks good to me. One alternative is `(with-syntax ((a a) (b b) (c c)) (syntax/loc stx (a b c)))`</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:43:46.000417</ts>
    <user>Thaddeus</user>
    <text>Yeah, that's what I was thinking too</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:44:55.000233</ts>
    <user>Thaddeus</user>
    <text>I thought I was maybe doing something wild. I guess it's just the way it is.</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:46:44.000275</ts>
    <user>Thaddeus</user>
    <text>Thanks for your answers btw :slightly_smiling_face:</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:48:11.000021</ts>
    <user>Thaddeus</user>
    <text>I'm using racket for about a 6 months now and this is the first time I get to ask questions to knowledgeable people.</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:49:40.000030</ts>
    <user>Thaddeus</user>
    <text>I need to go so.. see you around!</text>
  </message>
  <message conversation_id="205">
    <ts>2018-03-16T15:55:28.000712</ts>
    <user>Frederic</user>
    <text>I occasionally do this sort of thing.  But with scheme, I'm so new I don't think it matters that much for me yet.</text>
  </message>
  <message conversation_id="207">
    <ts>2018-03-16T15:55:55.000012</ts>
    <user>Frederic</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="208">
    <ts>2018-03-16T19:22:35.000145</ts>
    <user>Marnie</user>
    <text>ah okay! that one I can help with</text>
  </message>
  <message conversation_id="208">
    <ts>2018-03-16T19:23:58.000109</ts>
    <user>Marnie</user>
    <text>```
(define-syntax-class proc-head
  (pattern (name arg ...))
  (pattern (name arg ... . rest-args)))
```</text>
  </message>
  <message conversation_id="208">
    <ts>2018-03-16T19:24:41.000261</ts>
    <user>Marnie</user>
    <text>```
(syntax-parse stx
  [(define-cascader head:proc-head md:maybe-desc mu:maybe-unless mf:maybe-fail body ...)
   (make-pattern stx #'head #'md.desc #'mu.unless #'mf.fail #'mf.reason #'(body ...)))])
```</text>
  </message>
  <message conversation_id="208">
    <ts>2018-03-16T19:26:08.000173</ts>
    <user>Marnie</user>
    <text>then you can use attributes in the syntax class definition to consolidate logic that depends on whether or not there are rest args</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-16T23:19:48.000070</ts>
    <user>Omar</user>
    <text>What is the best way to reduce `(require ...)` time overhead? (`lazy-require` is not a solution since I do use the required functions)</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-16T23:21:41.000062</ts>
    <user>Monserrate</user>
    <text>&lt;@Omar&gt; to `require` something smaller?</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-16T23:21:53.000007</ts>
    <user>Monserrate</user>
    <text>what file is slow when you `require` it?</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-16T23:27:40.000106</ts>
    <user>Omar</user>
    <text>`(require racket/string racket/list racket/set racket/bool)`</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-16T23:28:51.000109</ts>
    <user>Monserrate</user>
    <text>which one takes a long time?</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-17T04:38:49.000057</ts>
    <user>Rolf</user>
    <text>¡Hola a todos! I need help...</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T04:40:00.000030</ts>
    <user>Rolf</user>
    <text>Is it possible to write a (let loop (...) ...) form that is able to return (values ...) instead of (list ...) ?</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-17T04:49:53.000072</ts>
    <user>Carlyn</user>
    <text>Yes.</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-17T04:53:08.000078</ts>
    <user>Rolf</user>
    <text>Great! Should I use (let-values loop (...) ...) form instead of (let loop (...) ...) ?</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-17T04:53:55.000054</ts>
    <user>Carlyn</user>
    <text>No, you can just use `(let loop (....) ....)`. Named `let` is just sugar for a lambda that is immediately invoked.</text>
  </message>
  <message conversation_id="209">
    <ts>2018-03-17T04:56:11.000036</ts>
    <user>Rolf</user>
    <text>I'm going to figure out</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:14:39.000037</ts>
    <user>Rolf</user>
    <text>So, I cannot. ( Is there any example of this?</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:19:13.000055</ts>
    <user>Carrol</user>
    <text>&lt;@Rolf&gt; what have you tried? what is not working for you?</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:40:04.000084</ts>
    <user>Rolf</user>
    <text>I'd like to return an entry-list and the number of entries using (values ...).
Currently I receive the next form (list (entry ...) ... i), but I need the next one (values v i) or at least (list (list (entry ...)) i)

I tried to wrap the cons expression by (values ...) but I get an error:

; result arity mismatch;
;  expected number of values not received
;   expected: 1
;   received: 2</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:41:30.000055</ts>
    <user>Rolf</user>
    <text>So currently I just use a simple form that returns entries and then another function just counts their number.</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:47:55.000039</ts>
    <user>Carrol</user>
    <text>you said you wanted to *return* with `values` but now you’re talking about recursing/looping with `values`…</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:49:00.000064</ts>
    <user>Carrol</user>
    <text>I’m not sure I understand</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:52:06.000077</ts>
    <user>Carrol</user>
    <text>example: `(let loop ((x 3)) (if (zero? x) (values 'a 'b 'c) (loop (sub1 x))))`</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:54:40.000065</ts>
    <user>Rolf</user>
    <text>&amp;gt; but now you’re talking about recursing/looping with `values`…
Yes, you understood it right.
I want to produce a list and a number of the elements of the list at the same time and then return the result as two values by using `values` form. 
Now I made a function that returns the number just as the last element of the list which could have unpredictable number of elements.</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:56:59.000038</ts>
    <user>Rolf</user>
    <text>&lt;@Carrol&gt; yes, your example helped me to understand that I did something wrong.</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:57:15.000045</ts>
    <user>Carrol</user>
    <text>cool. glad to help.</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T05:57:35.000123</ts>
    <user>Rolf</user>
    <text>Good night!</text>
  </message>
  <message conversation_id="210">
    <ts>2018-03-17T07:32:56.000066</ts>
    <user>Thaddeus</user>
    <text>Thanks a lot!</text>
  </message>
  <message conversation_id="211">
    <ts>2018-03-17T08:36:34.000068</ts>
    <user>Thaddeus</user>
    <text>That way I only have one syntax-parse clause for everything, and I don't need a helper function, which makes everything wayyy simpler.</text>
  </message>
  <message conversation_id="211">
    <ts>2018-03-17T23:15:18.000068</ts>
    <user>Omar</user>
    <text>It's `racket/set`! (I just discovered that it is the sole bottleneck)</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T07:28:39.000406</ts>
    <user>Andreas</user>
    <text>I am attempting to write a macro that loads a file whose path is stored in an environment variable. The macro seems to expand to the right thing... but the provided names seem not to be available. This might have to do with how phases work and I am not completely clear on how to get that to work. The macro is simple enough:
```
(define-syntax (require/from-env stx)
  (syntax-parse stx
    [(_ v:str)
     (with-syntax ([mod-name (getenv (syntax-&amp;gt;datum #'v))])
       #'(require mod-name))]))
```
and yet if you try to use this to require a module which provides a variable `name`, after `(require/from-env "NAME")` where `export NAME=name.rkt`, `name` is still not defined. Any suggestions on how to get something like this to work?</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:12:18.000642</ts>
    <user>Eugena</user>
    <text>&lt;@Andreas&gt; `require` is an unhygienic binding form. It introduces names based on, in this case, the scopes on the `mod-name` syntax. Try  wrapping the result of `get-env` with `(datum-&amp;gt;syntax #'v _ #'v)`. (Or instead of `#'v`, you could use `stx`. Both should work if you use the macro directly; but they are different if you have macros expanding into `require/from-env` uses.)</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:14:54.000587</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; Thanks for the clarification, however I remaining confused. Why is this different from what `conditional-require` does `&lt;https://docs.racket-lang.org/syntax-parse-example/index.html?q=conditional-require#%28part._conditional-require%29&gt;` ?</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:16:29.000387</ts>
    <user>Andreas</user>
    <text>by wrapping you mean `[mod-name (datum-&amp;gt;syntax stx (getenv (syntax-&amp;gt;datum #'v)) #'v)]`?</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:18:01.000640</ts>
    <user>Eugena</user>
    <text>&lt;@Andreas&gt; `conditional-require` just passes one of its arguments through, so the thing being required has the scopes of the macro use. In contrast, `require/from-env` is *creating* a new syntax object, and by default it gets a scope marking it as originating from your macro.</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:18:07.000612</ts>
    <user>Andreas</user>
    <text>I understand why it is unhygienic because it inserts new bindings based on what the required file provides. However, this is surely possible somehow and I cannot understand how it's different from `conditional-require`. I haven't actually tested `conditional-require` although I assumed it works.</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:18:34.000555</ts>
    <user>Andreas</user>
    <text>humm... let me process that message...</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:19:59.000295</ts>
    <user>Eugena</user>
    <text>Yes, that wrapping should work.</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:20:54.000246</ts>
    <user>Andreas</user>
    <text>by scope, do you mean namespace? are they interchangeable?</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:21:17.000253</ts>
    <user>Andreas</user>
    <text>ah, the `datum-&amp;gt;syntax stx...` part ensures the scope is the same as the scope of the macro?</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:22:08.000505</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; there is a huge amount of information on scopes, phases, namespaces out there. Which one should I look at to understand what is happening with scopes? Any suggestions?</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:25:20.000539</ts>
    <user>Andreas</user>
    <text>I can however confirm that your suggestion works but it still feels like magic to me.</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:31:26.000509</ts>
    <user>Eugena</user>
    <text>sorry, right now I don't have all the sources paged in well enough to make a recommendation</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:31:56.000220</ts>
    <user>Eugena</user>
    <text>I hope the rest of channel has some opinions, though</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T09:36:04.000453</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; sure, thanks.</text>
  </message>
  <message conversation_id="212">
    <ts>2018-03-19T10:52:42.000648</ts>
    <user>Alesha</user>
    <text>&lt;@Andreas&gt; Matthew Flatt's report about the `set of scopes` binding model for macro expansion may be helpful &lt;http://www.cs.utah.edu/plt/scope-sets/&gt;</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T11:25:45.000437</ts>
    <user>Monserrate</user>
    <text>Scope and namespace are not the same thing</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T11:47:39.000563</ts>
    <user>Thaddeus</user>
    <text>&lt;@Andreas&gt; the `datum-&amp;gt;syntax` ensures `mod-name` is a syntax that can be pushed into the final expression, and not a value for the syntax phase.</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T11:50:05.000528</ts>
    <user>Thaddeus</user>
    <text>I guess you could also try `dynamic-require` if you don't directly care about performance. You usually write a macro to prevent something from being calculated at run time, but most of the time it's premature optimization and a good old function just works.</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T12:00:02.000589</ts>
    <user>Andreas</user>
    <text>&lt;@Thaddeus&gt; Tried dynamic require already. Takes 20secs on a performance bounce app. Really need compile time dynamic require.</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T12:00:27.000430</ts>
    <user>Andreas</user>
    <text>Performance bound. Not performance bounce. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:06:17.000743</ts>
    <user>Thaddeus</user>
    <text>Makes sense then :wink:</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T12:14:54.000445</ts>
    <user>Monserrate</user>
    <text>If dynamic-require takes 20 seconds then probably you should run raco make on that file first</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:17:58.000788</ts>
    <user>Eugena</user>
    <text>&lt;@Thaddeus&gt; how about `(append (if mc.condition (list mc.value) null) ...)`? Or `(let* ([result null] [result (if mc.condition (cons mc.value result) result)] ...) (reverse result))`? I would avoid `set!` unless it's truly necessary.</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:18:48.000545</ts>
    <user>Thaddeus</user>
    <text>&lt;@Eugena&gt; does `null` disappear from the list ?</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T12:19:08.000071</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; raco make can't do anything afaict if the choice of lib to require is done at runtime. Moving it to a compile time require and a raco make seems to help.</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T12:19:55.000706</ts>
    <user>Monserrate</user>
    <text>You want to ensure that whatever library you are calling dynamic-require on is compiled ahead of time</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:20:47.000716</ts>
    <user>Andreas</user>
    <text>Will give it a go and benchmark some alternatives.</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T12:21:20.000017</ts>
    <user>Andreas</user>
    <text>To raco make  a library, it's enough to call raco make on all rkt files belonging to the library, right?</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:21:43.000208</ts>
    <user>Eugena</user>
    <text>&lt;@Thaddeus&gt; yes: `(append (list 1) null (list 3))` = `(list 1 3)`</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:21:43.000504</ts>
    <user>Thaddeus</user>
    <text>&lt;@Eugena&gt; oh wait I got it null is the empty list x)</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:22:24.000589</ts>
    <user>Eugena</user>
    <text>&lt;@Thaddeus&gt; yes; you can use `'()` if you prefer</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:22:25.000805</ts>
    <user>Thaddeus</user>
    <text>I always write `'()`, I forgot `null` was equivalent</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:22:54.000614</ts>
    <user>Thaddeus</user>
    <text>this is definitely better, thanks!</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:28:44.000494</ts>
    <user>Thaddeus</user>
    <text>it never came to me that you could use `let*` to modify the same value multiple times, thanks for pointing me that.</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:34:50.000487</ts>
    <user>Eugena</user>
    <text>&lt;@Thaddeus&gt; to nitpick, there's no modification going on. The macro creates a sequence of bindings of the same name, each one shadowing the last. But use shadowing carefully; it actually does have some of the headaches of `set!`: instead of different values at different points in time, you have to worry about different values at different shadowing levels.</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:35:16.000133</ts>
    <user>Thaddeus</user>
    <text>oh, I see</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:35:52.000500</ts>
    <user>Thaddeus</user>
    <text>I guess the compiler handles that, at least in the context of this macro</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:36:39.000118</ts>
    <user>Thaddeus</user>
    <text>some kind of "discard all the unused shadows" going on</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:38:31.000145</ts>
    <user>Eugena</user>
    <text>compilers typically rename all local variables to have distinct names to simplify their work</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:40:41.000485</ts>
    <user>Eugena</user>
    <text>Actually, the Racket macro expander does that too. When it sees a local variable binding, it creates a new "variable identity" for it. It just doesn't change the symbol.</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T12:41:07.000220</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; raco make follows dependencies, so you just need to use it on the particular modules that might be used in dynamic-require</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T12:58:43.000874</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; will try. Thinking about it now, the time taken by the 20 might be due to unit linking, not necessarily requiring them. Have to measure.</text>
  </message>
  <message conversation_id="214">
    <ts>2018-03-19T12:59:50.000844</ts>
    <user>Andreas</user>
    <text>Using units has they allow to easily share public interfaces without sharing internal details. A bit like shared library files (units) and include files (sigs). Have found no better way to do this in racket.</text>
  </message>
  <message conversation_id="213">
    <ts>2018-03-19T13:00:34.000823</ts>
    <user>Andreas</user>
    <text>Argh, apologies for the typos, writing this on my phone.</text>
  </message>
  <message conversation_id="215">
    <ts>2018-03-19T13:24:51.000583</ts>
    <user>Erika</user>
    <text>*Today I Learned*

The Redex documentation has this to say about the ‘term’ form: “Symbols in a term whose names end in guillemets (French quotes) around a number (for example asdf«5000») will be modified to contain a smiley face character (for example asdf«5000:relaxed:»). This is to prevent collisions with names generated by the freshening process that binding forms use.” But what if the term ends in guillemets around a number *with* a smiley face?

```
#lang racket
(require redex)
(term a«1») ;; =&amp;gt; 'a«1☺»
(term a«1☺») ;; =&amp;gt; 'a«1☹»
(term a«1☹») ;; =&amp;gt; 'a«1☹☺»
(term a«1☹☺») ;; =&amp;gt; 'a«1☹☹»
(term a«1☹☹») ;; =&amp;gt; 'a«1☹☺☺»
```

Binary counting with smiley and frowning faces. That is clever. Redex is clever.</text>
  </message>
  <message conversation_id="215">
    <ts>2018-03-19T13:28:09.000606</ts>
    <user>Odis</user>
    <text>Does anyone have any recommendations for alternatives to DrRacket for someone who is new to programming?</text>
  </message>
  <message conversation_id="215">
    <ts>2018-03-19T13:28:30.000666</ts>
    <user>Odis</user>
    <text>Asking someone new to set up emacs and `racket-mode` on their own seems like a bit…much…to me.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T13:45:38.000715</ts>
    <user>Alesha</user>
    <text>How about just plain notepad or notepad++?</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T13:45:46.000242</ts>
    <user>Thaddeus</user>
    <text>IMHO, DrRacket is the best I can think of because it embeds an interactive editor and a REPL with a big *RUN* button, and visual results for images or graphics. But I guess any user-friendly editor like SublimeText (alas not FOSS) or Notepad-like software are good, as long as you can open a terminal in another window and show how to run `racket my-program.rkt`.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T13:50:10.000537</ts>
    <user>Thaddeus</user>
    <text>I definitely did my first program on notepad when I was 11yo, writing html, saving the file, and double-clicking on it to see the result. (sorry I'm fairly young, but I did use floppy disks to save my work, don't judge me :P)</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T13:52:56.000087</ts>
    <user>Thaddeus</user>
    <text>Anything that triggers the "edit &amp;gt; see result &amp;gt; adapt" loop, in a graphic way, is good to take.
&lt;@Odis&gt; What kind of audience is it for?</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T13:57:33.000397</ts>
    <user>Thaddeus</user>
    <text>I found that some people are more at ease with imperative languages and infix notation because they have a mathematical background of thinking about stuff equal to other stuff. They feel at home writing `"fruits = 5"`. I usually push them to Python.
For people that are more at ease with words instead of symbols, I push them to Racket because it feels like writing a story, and you can use whatever identifiers you like, there are no syntax rules apart from s-exps.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T13:58:07.000149</ts>
    <user>Lashell</user>
    <text>I started a thread by ‘Alternatives to DrRacket’  on 26-nov-17 There were even some suggestions that were not Emacs. :grinning: [I was trolling for DrRacket development ideas- I settled on doing a navigation bar but that is currently in the spaghetti code phase of development:sob:]
</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:00:08.000724</ts>
    <user>Odis</user>
    <text>I’m looking for something that allows someone to learn programming with Racket, possiblyusing the HTDP student languages.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:00:10.000510</ts>
    <user>Thaddeus</user>
    <text>For me the biggest issue that prevents me from using DrRacket in my daily programming is that I can't open a folder in a sidebar, and see all the files in it, calling that a "project" in which I can easily navigate.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:00:27.000633</ts>
    <user>Odis</user>
    <text>Unfortunately DrRacket is a non-starter because it doesn’t work at all with screen readers.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:00:40.000408</ts>
    <user>Thaddeus</user>
    <text>oh ok</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:00:55.000044</ts>
    <user>Thaddeus</user>
    <text>I think emacs has a good screen reader</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:01:07.000814</ts>
    <user>Odis</user>
    <text>And it will take some time (and probably some api enhancements I will need to clear with &lt;@Lynna&gt;) before I will be able to get drracket to work with them.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:01:11.000113</ts>
    <user>Thaddeus</user>
    <text>but it's hard to configure (as always...)</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:01:34.000640</ts>
    <user>Odis</user>
    <text>Ya, emacs does have one. But ya, since this person is new, I feel kind of bad just dumping them in emacs, ya know?</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:01:43.000089</ts>
    <user>Thaddeus</user>
    <text>Yes x)</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:02:19.000241</ts>
    <user>Odis</user>
    <text>Alrigh, no idea then?</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:04:28.000403</ts>
    <user>Thaddeus</user>
    <text>Once I tried configuring my environment so that I could code without a screen. It appears to be extremely difficult, and the open source community of blind people is sparse. Proprietary software is still the rule here.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:05:55.000203</ts>
    <user>Eugena</user>
    <text>Maybe try Pyret or WeScheme (?). I would guess that things that run in web browsers would be most likely to work with screen readers (but I don't know firsthand).</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:06:43.000663</ts>
    <user>Odis</user>
    <text>&lt;@Thaddeus&gt; I mean, NVDA is fine. Its honestly just the fact that DrRacket is a giant `snip%`, and the snip GUI layer doesn’t support screen reader.  :disappointed:</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:06:50.000315</ts>
    <user>Thaddeus</user>
    <text>&lt;@Eugena&gt; Yes, web browsers are well supported by most screen reading solutions, and web technology is easier to configure for disabled people.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:07:32.000098</ts>
    <user>Odis</user>
    <text>&lt;@Lionel&gt; I guess pyret would work. Wescheme seems to support some scheme like constructs, but there doesn’t seem to be any way to set the #lang.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:07:51.000424</ts>
    <user>Odis</user>
    <text>But yes, web browsers are a good approach.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:10:36.000753</ts>
    <user>Eugena</user>
    <text>You could also use iracket with jupyter, but it also doesn't have an easy way to change the #lang (although you might be able to clone and adapt kernels for the HtDP languages). It also has all of the drawbacks of the top level and then some (re out of sync definitions).</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:11:47.000382</ts>
    <user>Odis</user>
    <text>Mmmm…okay.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:12:15.000167</ts>
    <user>Odis</user>
    <text>Well I’ll suggest wescheme or pirate first. Hopefully one of those will work. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:15:32.000532</ts>
    <user>Thaddeus</user>
    <text>It looks like WeScheme is locking the keyboard in its text editor though, I can't escape once I have focus on it.</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:16:24.000284</ts>
    <user>Thaddeus</user>
    <text>Oh, you can change focus with `F6`</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:20:54.000629</ts>
    <user>Monserrate</user>
    <text>&lt;@Monserrate&gt; set the channel topic: Sign up for Racket School! &lt;https://news.ycombinator.com/newest&gt; — Racket — &lt;http://racket-lang.org&gt; — &lt;http://pasterack.org&gt; - Slack invite link: &lt;http://racket-slack.herokuapp.com&gt; - Archives: &lt;http://racket.slackarchive.io/&gt;</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:21:00.000414</ts>
    <user>Odis</user>
    <text>Hmm…I’ll have to try it with other screen readers in a bit. Thanks for the heds up</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:21:25.000331</ts>
    <user>Monserrate</user>
    <text>Everyone, check out Racket School 2018: &lt;https://summer-school.racket-lang.org/2018/&gt;</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:21:34.000562</ts>
    <user>Monserrate</user>
    <text>&lt;@Monserrate&gt; set the channel topic: Sign up for Racket School! &lt;https://summer-school.racket-lang.org/2018/&gt; — Racket — &lt;http://racket-lang.org&gt; — &lt;http://pasterack.org&gt; - Slack invite link: &lt;http://racket-slack.herokuapp.com&gt; - Archives: &lt;http://racket.slackarchive.io/&gt;</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:23:49.000003</ts>
    <user>Thaddeus</user>
    <text>&lt;@Monserrate&gt; will it be recorded?</text>
  </message>
  <message conversation_id="216">
    <ts>2018-03-19T14:24:04.000306</ts>
    <user>Monserrate</user>
    <text>I don't know, but I don't think that's planned</text>
  </message>
  <message conversation_id="217">
    <ts>2018-03-19T14:46:26.000057</ts>
    <user>Karry</user>
    <text>scribble+redex picts -- I've got a large html document with lots of redex figures/terms and I'm getting large number of duplicate .png's generated for rendered terms that I frequently mention in the text (e.g. τ). I tried manually caching the picts instead of directly using `render-term` (i.e. don't render the same redex term more than once) and that didn't seem to help. Is this just a general scribble/html issue (i.e. that it generates a .png for every occurrence of a pict)?</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:33:19.000195</ts>
    <user>Ezra</user>
    <text>&lt;@Odis&gt; VS Code has nice accessibility story: &lt;https://code.visualstudio.com/docs/editor/accessibility&gt;</text>
  </message>
  <message conversation_id="217">
    <ts>2018-03-19T15:35:24.000245</ts>
    <user>Helena</user>
    <text>sounds like a scribble issue</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:38:45.000631</ts>
    <user>Odis</user>
    <text>&lt;@Ezra&gt; Oh cool. Does VSCode also have a good Racket story?</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:39:31.000643</ts>
    <user>Ezra</user>
    <text>For beginners I believe it should work just fine</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:39:40.000112</ts>
    <user>Ezra</user>
    <text>some extensions:</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:39:42.000349</ts>
    <user>Ezra</user>
    <text>&lt;https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner&gt;</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:39:52.000683</ts>
    <user>Ezra</user>
    <text>&lt;https://marketplace.visualstudio.com/items?itemName=karyfoundation.racket&gt;</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:41:01.000570</ts>
    <user>Ezra</user>
    <text>VS Code is definitely much easier to set up than emacs</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:41:10.000551</ts>
    <user>Ezra</user>
    <text>especially for beginners</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:42:02.000207</ts>
    <user>Odis</user>
    <text>OMG, thank you so much.</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T15:43:13.000429</ts>
    <user>Ezra</user>
    <text>you're welcome</text>
  </message>
  <message conversation_id="219">
    <ts>2018-03-19T16:21:38.000454</ts>
    <user>Thaddeus</user>
    <text>That's a nice catch, I didn't thought about VSCode. There's an issue with the access to the menu though, due to a bug in electron (&lt;https://github.com/electron/electron/issues/2504&gt;) that prevents users from accessing the menu using the ALT key and moving around with ← and →.</text>
  </message>
  <message conversation_id="219">
    <ts>2018-03-19T16:22:36.000002</ts>
    <user>Thaddeus</user>
    <text>You need to check if that's an issue.</text>
  </message>
  <message conversation_id="219">
    <ts>2018-03-19T16:24:57.000206</ts>
    <user>Catrice</user>
    <text>&lt;@Odis&gt; Pyret (specifically &lt;http://code.pyret.org|code.pyret.org&gt;) should work well with screen readers, and I believe we have further screen-reader-friendliness coming in a PR soon.  please feel free to file bugs if it doesn't work for you :slightly_smiling_face:</text>
  </message>
  <message conversation_id="218">
    <ts>2018-03-19T17:19:02.000522</ts>
    <user>Odis</user>
    <text>&lt;@Catrice&gt; Oh cool. Thanks.</text>
  </message>
  <message conversation_id="220">
    <ts>2018-03-19T17:31:28.000526</ts>
    <user>Lynna</user>
    <text>If I remember correctly, Scribble should only use one copy of a byte-equivalent file. Is it that the files are not byte-equivalent, or that the intended merging doesn't work?</text>
  </message>
  <message conversation_id="221">
    <ts>2018-03-20T04:02:08.000198</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; on yesterdays discussion of dynamic require... it takes the 20secs:</text>
  </message>
  <message conversation_id="221">
    <ts>2018-03-20T04:02:22.000078</ts>
    <user>Andreas</user>
    <text>Timing - Dynamically requiring arch-info: real: 19356 ms, process: 19286 ms, gc: 4182 ms</text>
  </message>
  <message conversation_id="221">
    <ts>2018-03-20T04:02:29.000029</ts>
    <user>Andreas</user>
    <text>Then you suggested raco make so:</text>
  </message>
  <message conversation_id="221">
    <ts>2018-03-20T04:02:35.000061</ts>
    <user>Andreas</user>
    <text>raco make archs/riscv/arch-info.rkt</text>
  </message>
  <message conversation_id="221">
    <ts>2018-03-20T04:02:37.000413</ts>
    <user>Andreas</user>
    <text>and...</text>
  </message>
  <message conversation_id="221">
    <ts>2018-03-20T04:02:45.000095</ts>
    <user>Andreas</user>
    <text>Timing - Dynamically requiring arch-info: real: 99 ms, process: 98 ms, gc: 24 ms</text>
  </message>
  <message conversation_id="221">
    <ts>2018-03-20T04:02:51.000116</ts>
    <user>Andreas</user>
    <text>errr... :slightly_smiling_face: Thanks.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T07:41:51.000214</ts>
    <user>Alesha</user>
    <text>Is there a reason why `dynamic-require` doesn't automatically compile the module? From the above conversation it seemed to me that was the case.</text>
  </message>
  <message conversation_id="223">
    <ts>2018-03-20T08:33:10.000305</ts>
    <user>Ezra</user>
    <text>woah! from 20 sec down to 0.1 sec that's a huge difference</text>
  </message>
  <message conversation_id="221">
    <ts>2018-03-20T09:13:44.000519</ts>
    <user>Andreas</user>
    <text>&lt;@Alesha&gt; not sure. i actually hoped racket to be compiling a module before running, but that doesn't seem to be the case. It seems an explicit `raco make` is necessary before hand.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:14:29.000599</ts>
    <user>Alesha</user>
    <text>Indeed, I was surprised to see that from your observations</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:15:19.000479</ts>
    <user>Alesha</user>
    <text>&lt;@Andreas&gt; I also noticed that your issues were arising from your ongoing efforts in porting Chez Scheme to RISCV, how's that going?</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:19:15.000229</ts>
    <user>Andreas</user>
    <text>Partly but not only.... I have two projects going on with regards to riscv. The one with regards to the port is going slow as I have very little knowledge of chez so I am just poking around and getting the general architectural files setup. However, I should get my linux riscv board next month or so and hope by then to be able to do native testing.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:20:13.000634</ts>
    <user>Andreas</user>
    <text>By that I meant that I am making slow progress but enough to be able to do some native testing in 4-6 weeks... *fingers crossed*</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:20:54.000123</ts>
    <user>Andreas</user>
    <text>However, I am not really interested in Chez, the whole point is really to have Racket 7 running on the riscv once it's released.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:21:09.000057</ts>
    <user>Alesha</user>
    <text>very nice! I'm psyched to hear that. my working knowledge of RISC-V is only from reading the manuals so it'll be cool to see it in action</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:22:15.000331</ts>
    <user>Alesha</user>
    <text>right that makes sense, Chez Scheme is just the means to an end, I've tried studying its source code, but like you, have found it to be a challenge. Made some progress in understanding how its incremental compilation technology works but the lack of documentation other than postings to the user mailing list is really putting a damper on it</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:22:56.000590</ts>
    <user>Andreas</user>
    <text>That's right, lack of docs is my issue as well so I just focusing on what is needed for a new arch.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:22:58.000368</ts>
    <user>Alesha</user>
    <text>If I'm recalling correctly RISC-V is broken down into the base integer instruction set and several standard extensions for multiplication, floating point operations, etc, have you already made a determination of which extensions in addition to the base would be needed to get Racket7 working?</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:28:34.000637</ts>
    <user>Andreas</user>
    <text>that's correct</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:28:42.000650</ts>
    <user>Andreas</user>
    <text>the 64bit base is rv64i</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:29:47.000656</ts>
    <user>Andreas</user>
    <text>for the port i am targetting rv64imafd</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:30:01.000272</ts>
    <user>Andreas</user>
    <text>which includes multiplication, atomic instructions, floating point and double.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:30:23.000588</ts>
    <user>Alesha</user>
    <text>makes sense</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:31:27.000629</ts>
    <user>Alesha</user>
    <text>are you currently maintaining a public repository with your work to date? Would love to see the code if you have it available</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:32:31.000352</ts>
    <user>Alesha</user>
    <text>I'm also wondering if the J extension would be helpful, but guess that's for future experimenting</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:32:47.000735</ts>
    <user>Alesha</user>
    <text>since it doesn't seem to be yet implemented</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:33:08.000342</ts>
    <user>Andreas</user>
    <text>my idea was to get something working before I push the changes, which are currently in a company internal branch. I can make them public if you want to see the progress.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:33:20.000639</ts>
    <user>Alesha</user>
    <text>sure, only if it's not too inconvenient for you</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:33:29.000668</ts>
    <user>Andreas</user>
    <text>I will push them here: &lt;https://github.com/LinkiTools/ChezScheme&gt;</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:33:35.000036</ts>
    <user>Alesha</user>
    <text>ok!</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:34:06.000251</ts>
    <user>Andreas</user>
    <text>I will tag what I have an push to a branch, probably `wip-riscv`.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:34:24.000513</ts>
    <user>Alesha</user>
    <text>ok cool, am looking forward to it</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:35:07.000661</ts>
    <user>Andreas</user>
    <text>yes, the J extension might be interesting but the working group was just created so it might take a while to get something stable for the port. Certainly nothing will come out of it before the racket7 release. However, I will be in the RISCV workshop in may and have more info.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:36:05.000639</ts>
    <user>Alesha</user>
    <text>ok, I'll be also looking for the workshop's published materials whenever they come out</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:36:47.000714</ts>
    <user>Alesha</user>
    <text>I assume your RISCV board is HiFive?</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:37:53.000189</ts>
    <user>Andreas</user>
    <text>yes, i got a free pass on a hifive unleashed 'cause i run the gcc buildbot, so I got it for gcc riscv continuous integration purposes.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:38:23.000126</ts>
    <user>Alesha</user>
    <text>advantages of being in the right places with right contacts :wink:</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:38:31.000014</ts>
    <user>Andreas</user>
    <text>true.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:38:51.000476</ts>
    <user>Alesha</user>
    <text>well thank you for sharing information about your RISCV progress, appreciate it</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:40:44.000247</ts>
    <user>Andreas</user>
    <text>no worries, I will try to get it pushed later after work. Will let you know.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T09:41:28.000197</ts>
    <user>Andreas</user>
    <text>Want to clean up a few nasty comments beforehand. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="224">
    <ts>2018-03-20T12:29:23.000735</ts>
    <user>Bertha</user>
    <text>&amp;gt; i actually hoped racket to be compiling a module before running, but that doesn't seem to be the case. It seems an explicit `raco make` is necessary before hand.

Someone will surely correct me but IIUC the steps are ~=
1. read
2. expand
3. emit bytecode
4. JIT compile to native code

Generally the slowest step by far can be 2 (esp with many transitive `require`s and/or non-trivial macro expansion e.g. Typed Racket)
`raco make` caches through step 3, in a `.zo` file

However in many of my projects 1-3 is negligible and I don't even bother with `raco make` (either directly or indirectly as called by `raco setup`).
But in some projects it's significant.</text>
  </message>
  <message conversation_id="225">
    <ts>2018-03-20T13:38:11.000060</ts>
    <user>Tiesha</user>
    <text>I’m at NE Scala 2018, but the reason people talk to me is my Racket stickers.</text>
  </message>
  <message conversation_id="226">
    <ts>2018-03-20T14:53:33.000348</ts>
    <user>Willette</user>
    <text>Hurray! :D</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T14:54:48.000454</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; &lt;@Andreas&gt; Greg is correct in general. Racket does compile before running, but does not update `.zo` files automatically unless you tell it to</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T15:09:13.000671</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; shame. So, if you never run raco make, no zos are ever created?</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T15:09:28.000618</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; `raco setup` also generates zo files</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T15:10:41.000053</ts>
    <user>Monserrate</user>
    <text>you can also use this package: &lt;https://pkgs.racket-lang.org/package/custom-load&gt;</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T15:10:54.000638</ts>
    <user>Andreas</user>
    <text>Ah... Makes sense. And then they are only updated with raco make, fair enough.</text>
  </message>
  <message conversation_id="222">
    <ts>2018-03-20T15:11:01.000716</ts>
    <user>Andreas</user>
    <text>Will take a look at it...</text>
  </message>
  <message conversation_id="227">
    <ts>2018-03-20T15:54:53.000610</ts>
    <user>Thaddeus</user>
    <text>Hum, I'm stumbling with something here. How can I unsplice a `(~seq)` head-pattern into the resulting syntax?
If I just use the syntax-class like `#'(struct maybe-super)`, it renders as `(struct (one two))` and I'd like `(struct one two)`.</text>
  </message>
  <message conversation_id="227">
    <ts>2018-03-20T15:56:36.000442</ts>
    <user>Thaddeus</user>
    <text>Formulating web searches with terms like 'unsplice' and 'splicing-syntax-class' does not help x)</text>
  </message>
  <message conversation_id="227">
    <ts>2018-03-20T16:30:34.000609</ts>
    <user>Eugena</user>
    <text>&lt;@Thaddeus&gt; at the moment, you need to `(require syntax/parse/experimental/template)` and then you can write this: `(template (struct (?@ . maybe-super)))`. I hope to merge that feature into the main implementation of `syntax` (`#'`) soon.</text>
  </message>
  <message conversation_id="227">
    <ts>2018-03-20T16:35:18.000315</ts>
    <user>Thaddeus</user>
    <text>So I'm not crazy, it's not possible yet \o/</text>
  </message>
  <message conversation_id="227">
    <ts>2018-03-20T17:20:03.000017</ts>
    <user>Thaddeus</user>
    <text>I tried `#,@maybe-super` but it doesn't work because maybe-super is already a pattern variable.</text>
  </message>
  <message conversation_id="227">
    <ts>2018-03-20T17:27:20.000066</ts>
    <user>Eugena</user>
    <text>try ` #,@ #'maybe-super `</text>
  </message>
  <message conversation_id="228">
    <ts>2018-03-21T05:22:57.000112</ts>
    <user>Andreas</user>
    <text>Is anyone aware why `class*` is not available in typed racket? What is the alternative to `interface` when you move to typed racket?</text>
  </message>
  <message conversation_id="227">
    <ts>2018-03-21T05:26:55.000350</ts>
    <user>Andreas</user>
    <text>Ah ok, I found `#:implements` in typed racket... that's probably the answer.</text>
  </message>
  <message conversation_id="227">
    <ts>2018-03-21T16:45:41.000482</ts>
    <user>Thaddeus</user>
    <text>I felt asleep thinking about it. I wanted to try this solution the next day. Well, it actually works :wink:</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T18:08:00.000270</ts>
    <user>Ezra</user>
    <text>I am having problem with one of my packages scribble rendering - all my definitions are red underlines and raco setup screams of WARNING: undefined tag in ...</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T18:08:33.000402</ts>
    <user>Ezra</user>
    <text>package installs/links correctly I use `for label` but to no avail</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T18:09:14.000284</ts>
    <user>Ezra</user>
    <text>I am out of ideas - any suggestions?</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T18:15:04.000202</ts>
    <user>Carlyn</user>
    <text>&lt;@Ezra&gt; Maybe you need a `defmodule` somewhere?</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T18:15:22.000492</ts>
    <user>Ezra</user>
    <text>it is there at the top</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T18:17:17.000006</ts>
    <user>Ezra</user>
    <text>none of my other local packages had this problem, I wouldn't be surprised if it is something simple</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T18:20:52.000370</ts>
    <user>Ezra</user>
    <text>I tried with package name and relative path, raco setup and Scribble HTML button it doesn't see any of these definitions</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T19:31:59.000154</ts>
    <user>Wally</user>
    <text>&lt;@Ezra&gt; have you specified `#:packages` explicitly in your defmodule?</text>
  </message>
  <message conversation_id="230">
    <ts>2018-03-21T19:32:30.000277</ts>
    <user>Wally</user>
    <text>```@defmodule[texmath #:packages ("texmath")]```</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T19:35:27.000316</ts>
    <user>Ezra</user>
    <text>I have just tried this but unfortunately it didn't help</text>
  </message>
  <message conversation_id="230">
    <ts>2018-03-21T19:38:14.000333</ts>
    <user>Wally</user>
    <text>D'oh! Another guess: have you tried deleting the old output directory, `doc`?</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T19:38:38.000120</ts>
    <user>Wally</user>
    <text>I seem to remember having this problem once before and it was something basic I overlooked.</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T19:44:56.000238</ts>
    <user>Ezra</user>
    <text>thanks for ideas - I have just tried to remove anything generated (doc compiled etc.) still no effect</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T19:45:38.000078</ts>
    <user>Ezra</user>
    <text>it seems after few hours trying to resolve it I will try to rebuild new package from scratch as I am out of ideas</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T19:46:03.000238</ts>
    <user>Ezra</user>
    <text>still it would be good to know what's happening</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T19:46:23.000348</ts>
    <user>Ezra</user>
    <text>just in case I will try with different name</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T19:46:43.000149</ts>
    <user>Ezra</user>
    <text>for the package</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T21:31:13.000251</ts>
    <user>Ezra</user>
    <text>no clue what was wrong but I got it working now with new package</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-21T23:31:32.000091</ts>
    <user>Marnie</user>
    <text>&lt;@Ezra&gt;  maybe you were missing a `(require (for-label whatever))`? This has frustrated me before as well</text>
  </message>
  <message conversation_id="229">
    <ts>2018-03-22T02:20:29.000239</ts>
    <user>Rolf</user>
    <text>Hello everyone!</text>
  </message>
  <message conversation_id="231">
    <ts>2018-03-22T02:21:49.000091</ts>
    <user>Rolf</user>
    <text>I write a scribble doc and there's a question. How can I describe an optional argument in @defproc?</text>
  </message>
  <message conversation_id="231">
    <ts>2018-03-22T02:48:07.000149</ts>
    <user>Wally</user>
    <text>&lt;@Rolf&gt; you can add a default value to the end of an argument definition inside the `@defproc`</text>
  </message>
  <message conversation_id="231">
    <ts>2018-03-22T02:48:34.000085</ts>
    <user>Rolf</user>
    <text>Woo-hoo! Thank you very much!:+1:</text>
  </message>
  <message conversation_id="231">
    <ts>2018-03-22T02:49:02.000242</ts>
    <user>Wally</user>
    <text>:grin:</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T05:57:05.000468</ts>
    <user>Andreas</user>
    <text>I am trying to use bibtex with scribble for the first time. I have a bunch of .bib files downloaded from ACM to include in a short paper. How can I do this with scribble? I can see a `path-&amp;gt;bibdb` but how can I call racket functions from a scribble file?</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T08:38:04.000465</ts>
    <user>Andreas</user>
    <text>ok, i am one step further, I have joined all refs into a `refs.bib` and loaded it with `@(define refs (path-&amp;gt;bibdb "refs.bib"))` however there's not much documentation on how to actually generate a bibliography part from this.</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:12:35.000649</ts>
    <user>Andreas</user>
    <text>Interestingly there's absolutely no examples on using `path-&amp;gt;bibdb` it seems... I am surprised to say the least.</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:14:19.000588</ts>
    <user>Ezra</user>
    <text>&lt;@Andreas&gt; you got me curious so I searched on github for its uses and... not a single use (not including implementation and documentation of bibtex)</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:14:44.000592</ts>
    <user>Andreas</user>
    <text>I just finished going through the 5 pages of results as well.</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:14:53.000106</ts>
    <user>Andreas</user>
    <text>only docs and definition.</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:14:53.000481</ts>
    <user>Ezra</user>
    <text>same here :slightly_smiling_face:</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:15:48.000217</ts>
    <user>Andreas</user>
    <text>What I was wondering was ... surely the PLT guys use scribble for their papers. Have they really manually converted their bib databases into scribble? and therefore don't need `path-&amp;gt;bibdb`?</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:16:02.000317</ts>
    <user>Andreas</user>
    <text>`path-&amp;gt;bibdb` gives you a `bibdb?`</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:16:12.000727</ts>
    <user>Andreas</user>
    <text>but it doesn't seem that there's anything to consume it....</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:16:14.000286</ts>
    <user>Ezra</user>
    <text>you will probably have to wait for US to wake up!</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:16:22.000094</ts>
    <user>Andreas</user>
    <text>:slightly_smiling_face: indeed</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:16:29.000697</ts>
    <user>Andreas</user>
    <text>are we the only ones in Europe?</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:16:30.000680</ts>
    <user>Andreas</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:16:37.000274</ts>
    <user>Andreas</user>
    <text>assuming you are...</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:16:41.000039</ts>
    <user>Andreas</user>
    <text>or... an early riser</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:16:52.000256</ts>
    <user>Ezra</user>
    <text>I am in Europe</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:18:29.000035</ts>
    <user>Ezra</user>
    <text>Not many of us here it seems</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T09:39:30.000063</ts>
    <user>Andreas</user>
    <text>true!</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T09:39:54.000010</ts>
    <user>Andreas</user>
    <text>We're missing a RacketConf -- Europe. PLT Team *hint*</text>
  </message>
  <message conversation_id="232">
    <ts>2018-03-22T09:42:09.000050</ts>
    <user>Ezra</user>
    <text>Although I gather a conference in Europe may be too big right now, meet ups - more feasible.</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T09:44:38.000456</ts>
    <user>Andreas</user>
    <text>Racket European Meetup sounds good. Who's organizing?</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T09:45:33.000396</ts>
    <user>Rolf</user>
    <text>Heh, I'd like to go to Europe to the conf, but I live in deep Siberia, too far away.</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T09:45:44.000125</ts>
    <user>Sherry</user>
    <text>&lt;@Andreas&gt; I haven’t used bibdb before with scribble, but it looks like define-bibtex-cite should be close to what you want. The related form, define-cite, has some examples that might also help</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T09:48:12.000556</ts>
    <user>Andreas</user>
    <text>&lt;@Rolf&gt; siberia... wow, the kind of place we only hear about in nature documentaries. :slightly_smiling_face: No wonder your profile says "Working remotely" . That sounds as *remote* as it gets.</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T09:48:19.000046</ts>
    <user>Andreas</user>
    <text>&lt;@Sherry&gt; will take a look</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T09:49:44.000132</ts>
    <user>Andreas</user>
    <text>Strange that `define-bibtex-cite` gets a path instead of the `bibdb` returned by `path-&amp;gt;bibdb`</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T09:49:48.000200</ts>
    <user>Andreas</user>
    <text>Will give it a try.</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T10:04:27.000113</ts>
    <user>Sherry</user>
    <text>Strange indeed. I think path-&amp;gt;bibdb is something people are likely to stumble upon, so some connection between it and define-bibtex-cite would help</text>
  </message>
  <message conversation_id="234">
    <ts>2018-03-22T10:26:20.000289</ts>
    <user>Alesha</user>
    <text>Internet truly is a marvelous invention; allowing distant corners of the globe to converse with each other.</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T10:34:30.000244</ts>
    <user>Willette</user>
    <text>&lt;@Andreas&gt;: My bibliographies are all scribble. (As are my papers, web pages, exams, etc.)</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T11:25:09.000621</ts>
    <user>Rolf</user>
    <text>&lt;@Willette&gt; and CV too?</text>
  </message>
  <message conversation_id="235">
    <ts>2018-03-22T11:25:45.000702</ts>
    <user>Rolf</user>
    <text>I wrote my CV entirely in LaTeX, but it would be great to use Racket infrastructure instead.</text>
  </message>
  <message conversation_id="233">
    <ts>2018-03-22T11:26:07.000189</ts>
    <user>Willette</user>
    <text>No, that one is TeX. Started it before Scribble existed, and just been adding to it since. :)</text>
  </message>
  <message conversation_id="236">
    <ts>2018-03-22T12:15:31.000577</ts>
    <user>Wally</user>
    <text>&lt;@Andreas&gt; this worked for me, once upon a time
```
#lang scribble/base

@(require
  scriblib/autobib
  scriblib/bibtex)

@(define-bibtex-cite
   "scribblings/refs.bib"
   ~cite citet generate-bibliography)

...

@(generate-bibliography)
```</text>
  </message>
  <message conversation_id="236">
    <ts>2018-03-22T12:16:36.000309</ts>
    <user>Wally</user>
    <text>this was in `scribblings/main.scrbl` for bibtex file `scribblings/refs.bib`</text>
  </message>
  <message conversation_id="236">
    <ts>2018-03-22T12:34:51.000336</ts>
    <user>Thaddeus</user>
    <text>Is it easier to bring US folks to Iceland than, say, France or the UK? I've always wanted to go to Iceland though, so I guess it'll make a good opportunity :smile:</text>
  </message>
  <message conversation_id="237">
    <ts>2018-03-22T12:46:08.000125</ts>
    <user>Bertha</user>
    <text>I don't get a tourism commission from Iceland, but:
- The 20 hours of daylight thing in June is pretty nice.
- Icelandair usually lets you do free stop-overs (so you could visit Iceland _and_ {UK, France} for the same price).
- Fun small city, and amazing outdoorsy stuff, both.
- The Blue Lagoon.
- Huldufólk</text>
  </message>
  <message conversation_id="237">
    <ts>2018-03-22T14:49:53.000283</ts>
    <user>Ezra</user>
    <text>&lt;@Bertha&gt; true, you couldn't be more in between the two continents than Iceland: &lt;http://www.theworldisabook.com/10369/between-continents-icelands-reykjanes-peninsula/&gt;</text>
  </message>
  <message conversation_id="237">
    <ts>2018-03-22T14:51:24.000575</ts>
    <user>Ezra</user>
    <text>not only geographically but also geologically - a perfect spot for intercontinental meeting :slightly_smiling_face:</text>
  </message>
  <message conversation_id="237">
    <ts>2018-03-22T14:57:02.000705</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; when did you propose that? I think I might have missed it. Need to thumbs it up!</text>
  </message>
  <message conversation_id="238">
    <ts>2018-03-22T15:25:33.000126</ts>
    <user>Eugena</user>
    <text>&lt;@Lynna&gt; Currently, if `s` is a string, then `(cast s _string/ucs4 _gcpointer)` returns a pointer to the backing storage of `s`. Will that be true in Racket-on-Chez? If not, is there another way to memcpy to/from a string? The context: I need to convert between strings and UTF-16 and UCS-4 bytes. (I'm also currently using `scheme_{ucs4,utf16}_to_{utf16,ucs4}`.)</text>
  </message>
  <message conversation_id="238">
    <ts>2018-03-22T15:30:05.000346</ts>
    <user>Lynna</user>
    <text>&lt;@Eugena&gt; No, that will not be true in Racket-on-Chez. The easy answer is to use `open-bytes-converter`, but if that's insufficient or too slow, we'll probably have to add some library that provides more string conversions.</text>
  </message>
  <message conversation_id="238">
    <ts>2018-03-22T15:37:14.000178</ts>
    <user>Eugena</user>
    <text>&lt;@Lynna&gt; The docs for `open-bytes-converter` don't mention UCS-4 at all, as far as I see. I thought about doing string &amp;lt;-&amp;gt; UCS-4 conversion in Racket, but IIUC it could involve allocating characters within the loop. (I'm guessing only ASCII chars are interned?) Versions of `string-{ref,set!}` that use fixnums instead of chars might be useful.</text>
  </message>
  <message conversation_id="238">
    <ts>2018-03-22T17:22:24.000307</ts>
    <user>Lynna</user>
    <text>&lt;@Eugena&gt; "UCS-4" isn't currently in the set of guaranteed transformations, but it will generally be available from iconv. We could add it as a built-in format if that seems like the best way. Using a bytes converter doesn't allocate characters, since it converts to and from byte strings.</text>
  </message>
  <message conversation_id="238">
    <ts>2018-03-22T17:27:02.000509</ts>
    <user>Lashell</user>
    <text>I’m working(stuck really) on a nav-bar, but I agree a sidebar is a useful tool - and very popular with other modern editors.  &lt;#C8FS3SS22|drracket&gt; </text>
  </message>
  <message conversation_id="238">
    <ts>2018-03-23T08:35:34.000488</ts>
    <user>Thaddeus</user>
    <text>Yeah, if I have some time I'll see if I can put something together.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T09:30:33.000573</ts>
    <user>Rolf</user>
    <text>Hello everyone!)</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T09:32:18.000082</ts>
    <user>Rolf</user>
    <text>Is it possible to disable hygiene in a macro definition? Everything looks like okay, expands okay but when I try to evaluate the entire module I get an error: "unbound identifier in module".</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:15:27.000563</ts>
    <user>Rolf</user>
    <text>All the day I struggle and suffer. Using Common Lisp or Clojure I'd solve it long time ago. (</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:18:26.000488</ts>
    <user>Thaddeus</user>
    <text>&lt;@Rolf&gt; You can use `raco macro-stepper file.rkt` and press the `End &amp;gt;&amp;gt;|` button to get to your error message, then press `|&amp;lt; Step` to go back step by step until your error disappears. This will show you the current state of the macro expander, allowing you to see what's going wrong with your macro.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:19:05.000816</ts>
    <user>Thaddeus</user>
    <text>It's a bit hard to read at first, but you'll soon get the grasp of it</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:20:53.000612</ts>
    <user>Thaddeus</user>
    <text>As for hygiene, it's built-in in Racket and allows a very powerful (alas complex at first) macro system. But they are ways to break hygiene. If you want to inject identifiers in scope, for example (thus breaking lexical scope) the prefered way is to use `syntax-parameterize`</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:22:06.000792</ts>
    <user>Bertha</user>
    <text>I mean, there exists `defmacro` but it's a footgun and kittens will die if you use it &lt;https://docs.racket-lang.org/compatibility/defmacro.html&gt;</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:22:24.000046</ts>
    <user>Thaddeus</user>
    <text>A simple example is the `aif` macro (anaphoric if): &lt;https://github.com/jsmaniac/anaphoric/blob/master/aif.rkt&gt;</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:23:02.000476</ts>
    <user>Bertha</user>
    <text>It's better to follow &lt;@Thaddeus&gt;’s advice and try to figure it out for real</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:23:15.000742</ts>
    <user>Rolf</user>
    <text>Here what I wrote &lt;http://pasterack.org/pastes/52135&gt;</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:24:41.000521</ts>
    <user>Rolf</user>
    <text>Okay. I'll try `syntax-parameterize`,  &lt;@Thaddeus&gt; thank you!</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:25:52.000396</ts>
    <user>Rolf</user>
    <text>&lt;@Bertha&gt; you made the great article! I mean "the fear of macros". Thank you! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:26:28.000351</ts>
    <user>Thaddeus</user>
    <text>Yes, greg's article is very helpful :smile:</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:28:37.000368</ts>
    <user>Thaddeus</user>
    <text>&lt;@Rolf&gt; btw I think there's an issue in your code, as you are using an `unquote` instead of a `syntax-unquote` here:
```
#`(define (fn-id ld attr ...) ,req resp)
```
I think it should be `#,req`, but maybe I'm wrong.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:29:41.000131</ts>
    <user>Thaddeus</user>
    <text>Or maybe actually no unquoting at all, since `req` is a syntax variable.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:31:05.000160</ts>
    <user>Rolf</user>
    <text>&lt;@Thaddeus&gt; I already removed , from ,req, I added the comma there accidentally. Anyway, the error is:
`; rdn: unbound identifier in module
;   context...:
;    #(2290265 module) #(2290266 module ldap 0) #(2292600 macro) #(2292909 local)
;    #(2292910 intdef) #(2292913 local) #(2292914 intdef) #(2292917 local)
;    #(2292918 intdef) #(2292921 local) #(2292922 intdef) #(2292925 local)
;    #(2292926 intdef)`</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:32:56.000249</ts>
    <user>Bertha</user>
    <text>"unbound identifier in module" can happen when your macro supplies some identifier, but you didn't `require` the module that provides it, where you defined the macro.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:33:46.000829</ts>
    <user>Bertha</user>
    <text>So e.g. this will give that error:
```
#lang racket/base

(module m racket/base
  (require (for-syntax racket/base
                       syntax/parse))
  (define-syntax (s stx)
    (syntax-parse stx
      [_ #'get-pure-port]))
  (provide s))

(require 'm)
s
```</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:34:19.000485</ts>
    <user>Bertha</user>
    <text>But this will work:
```
#lang racket/base

(module m racket/base
  (require (for-syntax racket/base
                       syntax/parse))
  (require net/url) ;; &amp;lt;============== NEW ========
  (define-syntax (s stx)
    (syntax-parse stx
      [_ #'get-pure-port]))
  (provide s))

(require 'm)
s
```</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:35:17.000155</ts>
    <user>Bertha</user>
    <text>TL;DR: If your macro is supplying things like `write-asn1/DER` then in your macro-defining file be sure to `require` the modules that provide it</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:35:42.000547</ts>
    <user>Bertha</user>
    <text>Not sure that's _the_ problem here, but it's a mistake you can make</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:35:49.000168</ts>
    <user>Thaddeus</user>
    <text>in his case I think `rdn` stands for an attribute passed when using the macro, so I guess the macro actually compiles.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:42:59.000722</ts>
    <user>Rolf</user>
    <text>Hmm... I realized that I cannot pass attr ... to `syntax-parameterize`</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:44:57.000346</ts>
    <user>Rolf</user>
    <text>The problem is in attr ... in that it can have different length in various the macro calls.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:45:40.000686</ts>
    <user>Thaddeus</user>
    <text>yes, you can use `syntax-class` to simplify your macro. Wait a bit, I'm putting something together for you.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:52:26.000807</ts>
    <user>Thaddeus</user>
    <text>the issue is that you're putting parts of the syntax in a hash to then build up the result. But using syntax-class, you can remove the hash stuff and use `req.asn1-type`, `req.app` ..etc</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T10:55:14.000180</ts>
    <user>Rolf</user>
    <text>&amp;gt; you're putting parts of the syntax in a hash
It seemed to me that it's the wrong technique, now I used it to be able to put keys and values in random order. Okay, I'll try to rewrite it withous this hash. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:00:39.000111</ts>
    <user>Thaddeus</user>
    <text>This is a beginning
```
(define-syntax (define-ldap stx)
  (define-splicing-syntax-class type
    (pattern (~seq #:asn1-type type:id))
    (pattern (~seq) #:with type #'SomeDefaultValue))
  
  (define-splicing-syntax-class req-expr
    (pattern (~seq t:type a:app)))

  (syntax-parse stx
    [(_ (name:id ld attr ...)
        [request re:req-expr ...]
        [response resp-expr]) ;; ...rest of the macro
```</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:02:11.000632</ts>
    <user>Thaddeus</user>
    <text>In short, you can declare every possible part of the request syntax, and put them together</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:02:56.000853</ts>
    <user>Thaddeus</user>
    <text>here I declare a `type` class which must be a sequence of two elements, `#:asn1-type` followed by an identifier called `type`</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:03:54.000183</ts>
    <user>Thaddeus</user>
    <text>it can also be an empty sequence `(~seq)`, in which case type will be equal to `SomeDefaultValue`</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:04:44.000140</ts>
    <user>Thaddeus</user>
    <text>then I declare a `req-expr` class to be able to contain a sequence of a `type` class and an `app` class (not shown here)</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:06:08.000202</ts>
    <user>Thaddeus</user>
    <text>the code is not complete, and I gotta go, but you can check out the `(~seq)` documentation &lt;https://docs.racket-lang.org/syntax/stxparse-patterns.html?q=syntax%2Dparse#%28form._%28%28lib._syntax%2Fparse..rkt%29._~7eseq%29%29&gt;</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:07:05.000040</ts>
    <user>Thaddeus</user>
    <text>to use a class, just add it after a colon `:` on your macro identifiers</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:07:37.000481</ts>
    <user>Thaddeus</user>
    <text>for example `(_ name:id age:int photo:my-photo-class)`</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:09:12.000647</ts>
    <user>Thaddeus</user>
    <text>then you can use the class in your template with a dot notation:
```
#'(define (student)
    (let ([my-name name]
          [my-age age])
      (display photo.description)
      (display photo.image)))
```</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:21:34.000519</ts>
    <user>Rolf</user>
    <text>I tried to use `define-splicing-syntax-class` when I read asn1 library sources &lt;https://github.com/rmculpepper/asn1/blob/master/asn1-lib/main.rkt&gt;
So, probably it's worth to try to use it again. )</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T11:28:52.000198</ts>
    <user>Thaddeus</user>
    <text>my `syntax-parse` knowledge is fairly new, other people will surely correct me :wink:
You need to find a `(pattern)` that allows a sequence of request "parts". I don't know if you need them in the right order or not.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T12:05:29.000063</ts>
    <user>Rolf</user>
    <text>&lt;@Thaddeus&gt; it nearly works!:) I'm about completing it, I hope soon it will be working fine</text>
  </message>
  <message conversation_id="240">
    <ts>2018-03-23T12:31:37.000006</ts>
    <user>Rolf</user>
    <text>A-a-a-a-a-a!!! It works!!! &lt;http://pasterack.org/pastes/61195&gt;</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T12:47:44.000473</ts>
    <user>Thaddeus</user>
    <text>Great :smile: I think you don't need those extra `syntax-parse` though</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T12:47:51.000799</ts>
    <user>Rolf</user>
    <text>&lt;@Thaddeus&gt; &lt;@Bertha&gt; thank you very much!:+1:</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T12:50:02.000432</ts>
    <user>Thaddeus</user>
    <text>You're welcome :slightly_smiling_face:</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:40:10.000008</ts>
    <user>Rolf</user>
    <text>So, now I use #,(stx-cadr #'req.n) instead of #,(syntax-parse #'req.n [(k:keyword n) #'n]) form. Maybe there's something better, maybe I'll fix it in the near future.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:40:39.000253</ts>
    <user>Rolf</user>
    <text>Oh, it's great to be able to develop some macros in Racket.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:41:18.000643</ts>
    <user>Thaddeus</user>
    <text>I discovered `syntax-parse` and `syntax-class` some time ago. I can't go back, it's too good :smile:</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:42:33.000672</ts>
    <user>Thaddeus</user>
    <text>Yeah I don't know yet how to do stuff like `#'(hello my.super.deep.nested.value)`</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:42:47.000464</ts>
    <user>Thaddeus</user>
    <text>I guess it's not possible yet</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:43:05.000357</ts>
    <user>Thaddeus</user>
    <text>That would be cool though</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:44:55.000476</ts>
    <user>Rolf</user>
    <text>If I understood it right, &lt;@Bertha&gt; wrote about it here at 4.3 section: &lt;http://www.greghendershott.com/fear-of-macros/all.html&gt;</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:45:45.000491</ts>
    <user>Rolf</user>
    <text>I guess it's possible to develop something like this</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:46:50.000574</ts>
    <user>Rolf</user>
    <text>But probably it won't be easy for a racketeer who doesn't have enough experience with Racket's metaprogramming.</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:47:56.000568</ts>
    <user>Rolf</user>
    <text>For example, I spent 2-3 days to write `define-ldap` macro and I'd be struggling 2-3 days more without community's great help</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:49:13.000336</ts>
    <user>Thaddeus</user>
    <text>Yes, the first time you try something with macros in Racket, it can be a real struggle. But when the frustration passes by, you realize you learned something valuable for the rest of your life x)</text>
  </message>
  <message conversation_id="239">
    <ts>2018-03-23T13:54:48.000101</ts>
    <user>Bertha</user>
    <text>Sometime after I wrote that infix dot example, Racket added a reader option to produce `#%dot` forms.
Which might be a better way to do this if you control the reader, e.g. for your own `#lang`.
(But I guess maybe not for a generic macro?)
&lt;http://docs.racket-lang.org/reference/reader.html?q=dot%20reader#%28part._parse-cdot%29&gt;</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T15:43:08.000492</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; If I eval a require statement for a relative module path, how would I tell Racket to require the file relative to a different directory.</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T15:44:15.000675</ts>
    <user>Lynna</user>
    <text>By setting `current-load-relative-directory`, or by building up a more absolute module path with operations like `module-path-index-join`</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T15:46:52.000468</ts>
    <user>Odis</user>
    <text>Okay thanks. I also see `current-load`, and `current-module-name-resolver`, where do they fit in the picture?</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T15:47:53.000356</ts>
    <user>Odis</user>
    <text>It almost looks to me like `current-load` and `current-module-name-resolver` both use the `current-load-relative-directory` parameter, but I’m not sure how those two interplay, as the docs seem to imply they are both used for `require` forms.</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T15:57:39.000087</ts>
    <user>Gaynell</user>
    <text>&lt;@Lynna&gt;: I’m trying to construct and evaluate a module with syntax I load from a file, such that relative requires in that syntax will be relative to the file I loaded it from. I can’t just load from a path because I want to control the `#lang` independently from the file.</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T15:58:10.000387</ts>
    <user>Gaynell</user>
    <text>(This is for a test runner where I have several equivalent implementations of a language and want to run the same test file with each implementation)</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T15:59:05.000327</ts>
    <user>Gaynell</user>
    <text>Whoops: nevermind. Just realized the code I pasted didn’t have the `current-load-relative-directory` parameterize around the require that finally triggers evaluation.</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T15:59:08.000276</ts>
    <user>Gaynell</user>
    <text>With that it’s fixed.</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T15:59:52.000123</ts>
    <user>Gaynell</user>
    <text>Though if there’s a better way to do this, I’d be interested.</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T16:04:03.000064</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; &lt;@Gaynell&gt; Is that actually right though?</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T16:04:34.000404</ts>
    <user>Odis</user>
    <text>Like, if I require `a.rkt`, which in tern requires `b.rkt`, I would expect `b.rkt` to be required relative to `a.rkt`, not the file that required `a.rkt`.</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T16:10:43.000387</ts>
    <user>Odis</user>
    <text>Oh interesting, if I just switch the `(eval '(require 'a))` to `(require "Desktop/a.rkt")`, and then print out the load paths with:

```
(begin-for-syntax
  (define prev-load (current-load))
  (current-load
   (λ args
     (displayln args)
     (apply prev-load args))))
```
it does update the path properly.</text>
  </message>
  <message conversation_id="241">
    <ts>2018-03-23T18:13:26.000079</ts>
    <user>Odis</user>
    <text>Ah, okay. So if I make another `c.rkt` file that `b.rkt` requires, then you _do_ get the right path. It seems like its just because the initial require is in an `eval`.</text>
  </message>
  <message conversation_id="242">
    <ts>2018-03-24T05:45:31.000070</ts>
    <user>Carrol</user>
    <text>mmmm footgun</text>
  </message>
  <message conversation_id="242">
    <ts>2018-03-24T05:46:21.000016</ts>
    <user>Carrol</user>
    <text>&lt;@Lynna&gt; is there a way to compile your chez fork on osx w/o X11? I wanted to poke but it dies on compile very quickly and I don’t see obvious config options for this.</text>
  </message>
  <message conversation_id="242">
    <ts>2018-03-24T08:30:25.000050</ts>
    <user>Lynna</user>
    <text>&lt;@Carrol&gt; That's an issue with building Chez Scheme that has bothered many. I don't have an easy workaround, but I think it must be a solvable problem, and I'll take a look again soon.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T10:53:51.000087</ts>
    <user>Rolf</user>
    <text>Hello everyone! )</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T10:54:44.000012</ts>
    <user>Rolf</user>
    <text>I don't know why, but `(list-&amp;gt;string (list #\\))` produces double backslash `"\\"` instead of the single one `"\"`</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T10:55:52.000047</ts>
    <user>Rolf</user>
    <text>Is there any solution to use a backslash like a symbol? By using `#\backslash` for example (the last one unfortunately doesn't exist).</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:03:22.000067</ts>
    <user>Bertha</user>
    <text>Racket uses the same convention as some other programming languages like C, that in literal and printed strings, `\` is an escape character. So e.g. `"\n"` means the newline character ASCII 11. `"\r"` means the return character ASCII 13. And so on.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:03:36.000127</ts>
    <user>Bertha</user>
    <text>They're actually single characters.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:04:03.000169</ts>
    <user>Bertha</user>
    <text>And if you want `\`, then you use two of them, `"\\"`.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:05:53.000135</ts>
    <user>Bertha</user>
    <text>For instance, try `(car (string-&amp;gt;list (list-&amp;gt;string (list #\\))))`. It prints `#\\`.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:06:52.000103</ts>
    <user>Bertha</user>
    <text>&lt;@Rolf&gt; Does that help or am I misunderstanding your question?</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:07:41.000117</ts>
    <user>Rolf</user>
    <text>Hm, when I try to eval `(displayln (list-&amp;gt;string '(#\/ #\1 #\\ #\2 #\/ #\3 #\\ #\4 #\/ #\5 #\\)))` every backslash behaves itself as expected. So, the result is `/1\2/3\4/5\`.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:08:47.000089</ts>
    <user>Rolf</user>
    <text>I meant above, the problem didn't exist at all. It was my misunderstanding.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:08:57.000023</ts>
    <user>Bertha</user>
    <text>As well as `displayln`, try `print`.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:09:01.000147</ts>
    <user>Rolf</user>
    <text>&lt;@Bertha&gt; Sorry please, all is okay.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:09:20.000005</ts>
    <user>Rolf</user>
    <text>Ok, I'll try `print` right now</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:09:56.000062</ts>
    <user>Rolf</user>
    <text>`(print (list-&amp;gt;string '(#\/ #\1 #\\ #\2 #\/ #\3 #\\ #\4 #\/ #\5 #\\)))` the result is `"/1\\2/3\\4/5\\"`.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:10:57.000153</ts>
    <user>Bertha</user>
    <text>So `print` shows you it the same as you'd write it as a Racket literal string -- e.g. `\\`.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:11:19.000079</ts>
    <user>Bertha</user>
    <text>`display` shows you the "result" when displayed -- e.g. `\`.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:11:35.000031</ts>
    <user>Bertha</user>
    <text>Maybe I'm explaining the distinction badly here but hopefully you get the idea. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:11:52.000059</ts>
    <user>Bertha</user>
    <text>Once in awhile it can be confusing.</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:12:28.000027</ts>
    <user>Rolf</user>
    <text>&lt;@Bertha&gt; your explanation is great! Seriously. Thank you! )</text>
  </message>
  <message conversation_id="243">
    <ts>2018-03-24T11:12:44.000077</ts>
    <user>Bertha</user>
    <text>Great! Have fun.</text>
  </message>
  <message conversation_id="244">
    <ts>2018-03-24T13:55:09.000074</ts>
    <user>Hilda</user>
    <text>Does `;` before `#|` turn off the multi-line commenting in Racket? It seems to in mine.</text>
  </message>
  <message conversation_id="245">
    <ts>2018-03-25T09:36:46.000041</ts>
    <user>Rolf</user>
    <text>Hello everyone!</text>
  </message>
  <message conversation_id="245">
    <ts>2018-03-25T09:39:28.000082</ts>
    <user>Rolf</user>
    <text>Ah, ok. I just wanted to ask about the scribble support in Emacs, does it exist or not. 
But suddenly I found a package on github `emacs-pe/scribble-mode`.</text>
  </message>
  <message conversation_id="246">
    <ts>2018-03-25T13:21:07.000030</ts>
    <user>Franklin</user>
    <text>I have small problem. In DrRacket I can import special? from scribble/text/output like so:   (require (only-in scribble/text/output special?))</text>
  </message>
  <message conversation_id="246">
    <ts>2018-03-25T13:21:39.000092</ts>
    <user>Franklin</user>
    <text>That works in racket 6.7, but has stopped working in 6.12.</text>
  </message>
  <message conversation_id="246">
    <ts>2018-03-25T13:22:20.000085</ts>
    <user>Franklin</user>
    <text>As far as I can tell, there have been no changes to that file recently:  &lt;https://github.com/racket/scribble/commits/master/scribble-text-lib/scribble/text/output.rkt&gt;</text>
  </message>
  <message conversation_id="246">
    <ts>2018-03-25T13:24:29.000086</ts>
    <user>Franklin</user>
    <text>Oh! I am blind!  There is a #; before the recursive contract. That means special? is no longer exported :disappointed:</text>
  </message>
  <message conversation_id="246">
    <ts>2018-03-25T13:33:46.000082</ts>
    <user>Franklin</user>
    <text>Hmm. I need special? to test for entities such as nbsp and others.</text>
  </message>
  <message conversation_id="247">
    <ts>2018-03-25T14:43:45.000078</ts>
    <user>Rolf</user>
    <text>Is there a possibility to use optional arguments in Typed Racket?</text>
  </message>
  <message conversation_id="247">
    <ts>2018-03-25T14:51:21.000106</ts>
    <user>Wally</user>
    <text>&lt;@Rolf&gt; In Haskell, I'd use `Maybe`. There's an `Option` type in the TR reference that looks equivalent, as long as the argument is never `#f` when present.</text>
  </message>
  <message conversation_id="247">
    <ts>2018-03-25T14:56:56.000023</ts>
    <user>Wally</user>
    <text>Sorry, I've been reading too many papers on algebraic data types. The idiomatic TR way is to use the `-&amp;gt;*` type constructor, I believe.</text>
  </message>
  <message conversation_id="247">
    <ts>2018-03-25T14:57:30.000001</ts>
    <user>Wally</user>
    <text>(section 4.3 in the Type Racket Guide)</text>
  </message>
  <message conversation_id="247">
    <ts>2018-03-25T14:58:15.000036</ts>
    <user>Rolf</user>
    <text>¡Gracias amigo!) I'll take a look the section right now! &lt;@Wally&gt; thank you again! )</text>
  </message>
  <message conversation_id="248">
    <ts>2018-03-26T09:28:13.000722</ts>
    <user>Helena</user>
    <text>why is today Honu Day?</text>
  </message>
  <message conversation_id="248">
    <ts>2018-03-26T10:01:11.000663</ts>
    <user>Willette</user>
    <text>&lt;@Helena&gt;: &lt;https://en.wikipedia.org/wiki/Prince_K%C5%ABhi%C5%8D_Day&gt;</text>
  </message>
  <message conversation_id="249">
    <ts>2018-03-26T12:22:27.000047</ts>
    <user>Odis</user>
    <text>Is it just me or does the splash in DrRacket cause it tot take significantly longer to start up?</text>
  </message>
  <message conversation_id="248">
    <ts>2018-03-26T12:22:40.000538</ts>
    <user>Odis</user>
    <text>&lt;@Helena&gt; &lt;@Willette&gt; ^</text>
  </message>
  <message conversation_id="249">
    <ts>2018-03-26T12:23:32.000359</ts>
    <user>Willette</user>
    <text>I can't tell.</text>
  </message>
  <message conversation_id="249">
    <ts>2018-03-26T12:23:53.000057</ts>
    <user>Odis</user>
    <text>Mmm…okay. It might also be the build I’m using.</text>
  </message>
  <message conversation_id="249">
    <ts>2018-03-26T12:31:32.000189</ts>
    <user>Lashell</user>
    <text>Turning off tools speeds the splash significantly</text>
  </message>
  <message conversation_id="250">
    <ts>2018-03-27T04:12:50.000030</ts>
    <user>Hilda</user>
    <text>Is it hard to make `condition` map to `cond` and `construct` map to `cons`?</text>
  </message>
  <message conversation_id="250">
    <ts>2018-03-27T06:20:38.000140</ts>
    <user>Franklin</user>
    <text>&lt;@Hilda&gt;   (define-syntax condition (make-rename-transformer #'cond))</text>
  </message>
  <message conversation_id="251">
    <ts>2018-03-27T06:20:41.000157</ts>
    <user>Franklin</user>
    <text>voila!</text>
  </message>
  <message conversation_id="252">
    <ts>2018-03-27T08:18:28.000535</ts>
    <user>Andreas</user>
    <text>Does anyone know how to (in emacs) with `emacs-mode` (maybe this comes from `paredit` or `smartparens`) highlight the current parenthesized region?</text>
  </message>
  <message conversation_id="252">
    <ts>2018-03-27T08:18:34.000150</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; ^?</text>
  </message>
  <message conversation_id="252">
    <ts>2018-03-27T08:21:23.000162</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; I haven't tried this recently but &lt;https://melpa.org/#/highlight-parentheses&gt;</text>
  </message>
  <message conversation_id="252">
    <ts>2018-03-27T08:24:12.000005</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; awesome!</text>
  </message>
  <message conversation_id="252">
    <ts>2018-03-27T08:24:14.000090</ts>
    <user>Andreas</user>
    <text>thanks</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T08:32:31.000351</ts>
    <user>Rolf</user>
    <text>`rainbow-delimiters-mode` is also good choice. )</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T08:33:13.000059</ts>
    <user>Rolf</user>
    <text>By the way, are there similar plugins for DrRacket?</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T08:37:06.000320</ts>
    <user>Thaddeus</user>
    <text>The nearest feature I can think of in DrRacket is to go to "Preferences &amp;gt; Colors &amp;gt; Background &amp;gt; Parenthesis color scheme" and select "Shades of grey".</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T08:37:34.000179</ts>
    <user>Thaddeus</user>
    <text>But it's not rainbowy enough :disappointed:</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T08:40:21.000421</ts>
    <user>Rolf</user>
    <text>&lt;@Thaddeus&gt; it's well enough! ) I've chosen the winter color scheme.</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T08:42:10.000379</ts>
    <user>Rolf</user>
    <text>It would be great to have something like this &lt;https://ericscrivner.me/wp-content/uploads/2015/06/rainbow-delimiters.png&gt;
I already have it in Emacs, the mode was mentioned above.</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T08:48:06.000317</ts>
    <user>Thaddeus</user>
    <text>`raco test -c tests/web-server` &amp;gt; "raco test: collection not found"
How am I supposed to run tests when I modify a raco package?
I already ran `raco pkg update --no-setup --catalog &lt;https://pkgs.racket-lang.org&gt; web-server` and `raco pkg update --clone web-server`.</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T08:56:18.000151</ts>
    <user>Thaddeus</user>
    <text>&lt;@Dia&gt; How do I test the `web-server` package? I'm lost between the contribution tutorial, the files "all-web-server-tests.rkt" and "run-all-tests.rkt"... `raco update --clone` and all that fuss.</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T09:16:30.000636</ts>
    <user>Andreas</user>
    <text>&lt;@Rolf&gt; i find rainbow delimiters quite distracting, at least with my theme -- zenburn.</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T09:19:40.000009</ts>
    <user>Rolf</user>
    <text>I use solarized-dark</text>
  </message>
  <message conversation_id="254">
    <ts>2018-03-27T10:50:46.000369</ts>
    <user>Dia</user>
    <text>&lt;@Thaddeus&gt; I do `raco test -c tests/web-server` --- Is it possible that you don't have `web-server-test` installed?</text>
  </message>
  <message conversation_id="253">
    <ts>2018-03-27T11:17:19.000419</ts>
    <user>Thaddeus</user>
    <text>&lt;@Dia&gt; Yes, I had to run `raco install` inside the `web-server-test` folder to make it work :slightly_smiling_face:</text>
  </message>
  <message conversation_id="255">
    <ts>2018-03-27T13:03:10.000020</ts>
    <user>Odis</user>
    <text>&lt;@Willette&gt; &lt;@Helena&gt; Okay, comparing start up times of today vs yesterday, yesterday was demonstrably slower.</text>
  </message>
  <message conversation_id="255">
    <ts>2018-03-27T13:03:50.000118</ts>
    <user>Odis</user>
    <text>is there any way to set the easter egg DrRacket uses at startup?</text>
  </message>
  <message conversation_id="255">
    <ts>2018-03-27T13:04:09.000402</ts>
    <user>Odis</user>
    <text>(Other than just setting the local date, which would probably work.)</text>
  </message>
  <message conversation_id="255">
    <ts>2018-03-27T13:04:40.000024</ts>
    <user>Catrice</user>
    <text>it seemed to me that this particular easter egg was animated, and maybe it just played the whole animation before continuing?</text>
  </message>
  <message conversation_id="255">
    <ts>2018-03-27T13:05:45.000078</ts>
    <user>Odis</user>
    <text>&lt;@Catrice&gt; That is a possibility.</text>
  </message>
  <message conversation_id="255">
    <ts>2018-03-27T13:06:09.000720</ts>
    <user>Odis</user>
    <text>I remember &lt;@Marinda&gt;’s spinning racket logo on weekends caused a similar slowdown. :confused:</text>
  </message>
  <message conversation_id="256">
    <ts>2018-03-27T14:17:35.000193</ts>
    <user>Helena</user>
    <text>maybe you can add a command line fiag, `--no-holidays`</text>
  </message>
  <message conversation_id="255">
    <ts>2018-03-27T15:54:35.000367</ts>
    <user>Odis</user>
    <text>That would be great. But the easter eggs are…err…well hidden.</text>
  </message>
  <message conversation_id="255">
    <ts>2018-03-27T15:55:11.000558</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; or &lt;@Eileen&gt; Do either of you remember where they’re hidden?</text>
  </message>
  <message conversation_id="257">
    <ts>2018-03-28T08:50:01.000133</ts>
    <user>Rolf</user>
    <text>¡Hola amigos! There are contracts and static typing. What's better to use usually? Some racketeers claim that in case when we haven't complex logic it's better to use static typing, in case of developing of a prototype module or if we need something more than just type checking then racket/contract is our solution. I'm trying to figure out.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T11:39:48.000371</ts>
    <user>Karry</user>
    <text>Anyone dealt with `#lang scribble/acmart` and ``\bigtimes' already defined` recently? I'm getting this error even when just rendering an "empty" `scribble/acmart` file to PDF =\</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T11:40:05.000517</ts>
    <user>Karry</user>
    <text>i.e. this generates that error:</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T11:40:11.000114</ts>
    <user>Karry</user>
    <text>```
#lang scribble/acmart

@title{Surreal Numbers}
@author{Ursula N. Owens}
```</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T12:13:24.000428</ts>
    <user>Karry</user>
    <text>I ended up creating a  `custom-acmart.cls` with `\let\bigtimes\undefined` at the end. My Makefile then overwrites the scribble-generated `acmart.cls` with my custom version and this avoids the issue</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T12:13:38.000140</ts>
    <user>Karry</user>
    <text>if someone has a better fix off the top of there head let me know :wink:</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T12:49:30.000371</ts>
    <user>Odis</user>
    <text>&lt;@Karry&gt; Weird. What command are you using to run scribble?</text>
  </message>
  <message conversation_id="259">
    <ts>2018-03-28T13:02:28.000260</ts>
    <user>Odis</user>
    <text>Has anyone on here noticed that the `rsvg` package on os x causes Racket to segfault?</text>
  </message>
  <message conversation_id="259">
    <ts>2018-03-28T13:03:04.000124</ts>
    <user>Odis</user>
    <text>In the function `cairo_scaled_glyph_page_destroy`, which seems to be called from: `rsvg_handle_render_cairo`.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:08:59.000048</ts>
    <user>Karry</user>
    <text>&lt;@Odis&gt; I see it both when I click "Scribble PDF" in DrRacket and when I try to run xelatex on the result of running `scribble --latex ++style style.tex paper.scrbl`</text>
  </message>
  <message conversation_id="259">
    <ts>2018-03-28T13:09:32.000648</ts>
    <user>Odis</user>
    <text>Interesting. Can you send us your `style.tex ` file?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:10:21.000757</ts>
    <user>Karry</user>
    <text>it's just this one line:</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:10:25.000636</ts>
    <user>Karry</user>
    <text>```
\newcommand{\identity}[1]{#1}
```</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:11:07.000384</ts>
    <user>Karry</user>
    <text>Also I don't think it's used when you click "Scribble PDF" in DrRacket... so I don't think it's a factor (I could be wrong though I suppose)</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:21:56.000677</ts>
    <user>Odis</user>
    <text>No, I think you’re correct. Just wanted to double check.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:22:02.000455</ts>
    <user>Odis</user>
    <text>That is very odd. :confused:</text>
  </message>
  <message conversation_id="259">
    <ts>2018-03-28T13:22:23.000040</ts>
    <user>Odis</user>
    <text>So, can I ask what version of Racket you are on?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:22:50.000241</ts>
    <user>Karry</user>
    <text>6.12</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:29:11.000694</ts>
    <user>Odis</user>
    <text>Hmm…very odd. I don’t get that error in 6.12:</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:29:17.000392</ts>
    <user>Odis</user>
    <text>```~/racket-archive/Racket\ v6.12/bin/scribble --pdf foo.scrbl```</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:30:14.000227</ts>
    <user>Odis</user>
    <text>Do you mind sending me the style file your copy of scribble is using?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T13:37:30.000421</ts>
    <user>Odis</user>
    <text>&lt;@Karry&gt; Hmm…your acmart.cls file looks right. How about the style.tex file that is in scribble-lib/scribble/acmart/style.tex?</text>
  </message>
  <message conversation_id="260">
    <ts>2018-03-28T14:15:26.000420</ts>
    <user>Marnie</user>
    <text>It depends on the problem, on your problem solving style, on how the solution will be maintained in the future, and on who you're working with. My suggestion is to try both untill you feel relatively comfortable with both approaches before listening to the advice of others about which is better.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:38:36.000498</ts>
    <user>Odis</user>
    <text>A recent change in Racket causes the `python` package to no longer build.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:38:47.000499</ts>
    <user>Odis</user>
    <text>The file with the error is: &lt;https://github.com/pedropramos/PyonR/blob/master/libpython.rkt&gt;

And the particular error is:</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:39:00.000614</ts>
    <user>Odis</user>
    <text>```
raco setup:   void-if-not-available: undefined;
raco setup:    cannot reference an identifier before its definition
raco setup:     in module: "/Users/leif/rsrc/python/libpython.rkt"
raco setup:     internal name: void-if-not-available
raco setup:     compiling: &amp;lt;pkgs&amp;gt;/python/cpy-importing.rkt
```</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:39:34.000121</ts>
    <user>Helena</user>
    <text>&lt;@Karry&gt; I don't see errors about `bigtimes` either. Do you get the same error with scribble/manual or scribble/sigplan?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:40:02.000535</ts>
    <user>Odis</user>
    <text>And it looks like the relevant code is:
```
  (define-ffi-definer define-function (ffi-lib (and cpyimport-enabled path-to-cpython-lib))
    #:default-make-fail void-if-not-available)
  (define-ffi-definer define-others (ffi-lib (and cpyimport-enabled path-to-others-lib))
    #:default-make-fail void-if-not-available)
  (define-ffi-definer define-c-lang (ffi-lib #f)
    #:default-make-fail void-if-not-available)
  
  (define (void-if-not-available id)
    (lambda () void))
```</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:40:05.000376</ts>
    <user>Helena</user>
    <text>The problem might go away if you redefine `\packageMathabx` --- but I don't know what might be conflicting with Mathabx</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:40:52.000385</ts>
    <user>Odis</user>
    <text>It looks like there hasn’t been any recent changes to the ffi library (at least not that recent), which makes me think its probably some change with the VM. Any thoughts?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:40:55.000203</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; ^</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:48:22.000582</ts>
    <user>Lynna</user>
    <text>&lt;@Eugena&gt; Could your recent change to `ffi/unsafe/define` affect evaluation order? The code above doesn't make sense, but the reference to `void-if-not-available` probably was previously under a conditional, and maybe's not anymore.
If that's right, the new behavior is arguably better, as illustrated by the above example. I'm not immediately sure how to balance the improvement against backward compatibility here.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:52:11.000657</ts>
    <user>Odis</user>
    <text>That would seem odd to me because weren’t those changes made several months ago?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:52:31.000682</ts>
    <user>Odis</user>
    <text>And the error only showed up the last time I pulled. Which was sometime in mid march.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T14:55:25.000682</ts>
    <user>Karry</user>
    <text>I do not see it with scribble/manual or scribble/sigplan</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:00:09.000140</ts>
    <user>Odis</user>
    <text>&lt;@Karry&gt; Hmm…that one also is the same.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:00:26.000270</ts>
    <user>Odis</user>
    <text>I honestly don’t have any more ideas. I can’t seem to reproduce it on my machine. :disappointed:</text>
  </message>
  <message conversation_id="261">
    <ts>2018-03-28T15:12:39.000351</ts>
    <user>Eugena</user>
    <text>&lt;@Lynna&gt; yes. The macro defined by `define-ffi-definer` used to copy the expression given as the default-make-fail argument to every definition (unless it was overridden). I changed it to bind the expression to a variable and copy the variable reference instead. So if all of the uses of `define-function` etc were after the definition of `void-if-not-available` it would work :confused:</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:16:43.000512</ts>
    <user>Karry</user>
    <text>&lt;@Odis&gt; &lt;@Helena&gt; what version of TeX are you guys using? I'm on XeTeX 3.14159265-2.6-0.99998 (TeX Live 2017)</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:16:51.000461</ts>
    <user>Lynna</user>
    <text>Ah, I was forgetting a level of indirection, so I see how the above code can make sense (but also why its behavior changed).
Do you think it's better to wrap the no-longer-copied expression, or is it better to conclude that `make-ffi-definer` needed to change its behavior?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:17:02.000418</ts>
    <user>Karry</user>
    <text>(I'm observing this both on Ubuntu and MacOS High Sierra)</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:17:42.000358</ts>
    <user>Helena</user>
    <text>texlive 2015</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:18:32.000240</ts>
    <user>Odis</user>
    <text>&lt;@Karry&gt; On OS X Yosemite, and whatever version comes with homebrew:
```
TeX 3.14159265 (TeX Live 2015)
kpathsea version 6.2.1
Copyright 2015 D.E. Knuth.
```</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:18:52.000809</ts>
    <user>Karry</user>
    <text>hhhmmm.... perhaps it's an issue w/ newer TeX versions?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:19:25.000426</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; &lt;@Eugena&gt; Honestly I don’t think its a problem either way. The new behavior seems fine to me, but it should certainly be put in the changes list for the next release announcement.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:20:21.000156</ts>
    <user>Odis</user>
    <text>What version are you using?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:20:28.000527</ts>
    <user>Odis</user>
    <text>(Also adding &lt;@Helena&gt; to the thread)</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:22:17.000695</ts>
    <user>Karry</user>
    <text>2017</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:22:36.000417</ts>
    <user>Karry</user>
    <text>it looks like you and Ben are on 2015</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:23:42.000201</ts>
    <user>Helena</user>
    <text>I'll try to upgrade tonight &amp;amp; retry.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:24:40.000130</ts>
    <user>Eugena</user>
    <text>&lt;@Lynna&gt; &lt;@Odis&gt; I suppose we could eta-expand to preserve the old evaluation order (when it matters) but avoid the actual expression duplication. I hadn't expected anyone to be relying on the old behavior when I made the change.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:25:51.000388</ts>
    <user>Odis</user>
    <text>Okay cool. Give it a go and tell us what happened.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:25:58.000567</ts>
    <user>Odis</user>
    <text>Now, I do have an Ubuntu server I can check this out on.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:26:15.000512</ts>
    <user>Odis</user>
    <text>Although it is 16.04…so it might still be way out of date.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:26:41.000549</ts>
    <user>Odis</user>
    <text>Ah yup, sad:
```
pdfTeX 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian)
kpathsea version 6.2.1
Copyright 2015 Peter Breitenlohner (eTeX)/Han The Thanh (pdfTeX).
```</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:26:47.000772</ts>
    <user>Karry</user>
    <text>I've observed it on MacOS High Sierra and Ubuntu 17.10, both of which have TeX 2017 installed</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:27:42.000488</ts>
    <user>Odis</user>
    <text>FWIW, this is the only package I have installed that seems to be relying on it. And honestly, its such a small change (move one line 4 lines up), that I don’t think it matters either way.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:28:01.000755</ts>
    <user>Odis</user>
    <text>But eta-expanding would work for me. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:30:39.000560</ts>
    <user>Odis</user>
    <text>Hmm…okay.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:30:48.000119</ts>
    <user>Odis</user>
    <text>Well I can set up a 17.10 VM.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:31:04.000078</ts>
    <user>Odis</user>
    <text>(I don’t want to bump my server to 17.10 because its about to be end of lifed)</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:36:48.000163</ts>
    <user>Eugena</user>
    <text>I'll put that on my todo list for later this evening. &lt;@Odis&gt; do you know if that code is still maintained?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:37:38.000471</ts>
    <user>Odis</user>
    <text>Last commit was mid 2016. So….not heavily maintained.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T15:38:41.000544</ts>
    <user>Odis</user>
    <text>I personally only use it fairly sparsely, generally for the lexer/parser.</text>
  </message>
  <message conversation_id="262">
    <ts>2018-03-28T16:30:49.000455</ts>
    <user>Helena</user>
    <text>redex question: `redex-match` is returning a list of 2 ~results that look identical to me~ `equal?` results. Should `redex-match` not be returning 2 results? The docs for `redex-match` don't say it returns a list of unique matches, but thats the behavior I've been expecting.
```
#lang racket/base
(require redex/reduction-semantics)

(define-language
  L
  (e ::= (+ e e) v (flip e))
  (v ::= natural)
  (EP ::= hole (+ EP e) (+ v EP))
  (E ::= EP (+ E e) (+ v E) (flip E)))

(redex-match L (in-hole E (flip v)) (term (+ 2 (flip 2))))
;; (list (match (list (bind 'E '(+ 2 #0=hole)) (bind 'v 2)))
;;       (match (list (bind 'E '(+ 2 #0#)) (bind 'v 2))))
```</text>
  </message>
  <message conversation_id="262">
    <ts>2018-03-28T16:32:35.000339</ts>
    <user>Ezra</user>
    <text>It seems I keep having compile-zo errors for other packages after all: &lt;https://groups.google.com/forum/#!topic/racket-users/kYk-x5Zn5EE&gt; Any ideas?</text>
  </message>
  <message conversation_id="262">
    <ts>2018-03-28T16:48:13.000748</ts>
    <user>Jen</user>
    <text>&lt;@Helena&gt; I think you get 2 matches because there are 2 different ways to match that pattern from the grammar depending on whether E is first matched as an `EP` or as a `(+ E e)`</text>
  </message>
  <message conversation_id="262">
    <ts>2018-03-28T16:52:19.000576</ts>
    <user>Helena</user>
    <text>thanks, that makes sense. (I don't want that first match to be possible, so I'll think about how to rewrite)</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T17:54:58.000380</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Would it be possible to update the version of Cairo we are using in Racket?</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T17:55:19.000143</ts>
    <user>Odis</user>
    <text>The existing version has a known bug with resizing empty glyphs on os x.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T17:55:40.000131</ts>
    <user>Odis</user>
    <text>But the latest version (or the version that brew has at least), seems to have fixed this bug.</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T17:55:53.000175</ts>
    <user>Odis</user>
    <text>As an example: &lt;https://gist.github.com/davenquinn/d2ba1ada38abcc313beb676d81bd6682&gt;</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T19:09:10.000214</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; I'll look into upgrading</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T19:34:49.000236</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Cool, thanks. It does look like the actual dylibs are stored in a different git repo, but since we split up the repos I’m no longer sure which one. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="258">
    <ts>2018-03-28T19:34:52.000300</ts>
    <user>Odis</user>
    <text>Anyway, thanks.</text>
  </message>
  <message conversation_id="263">
    <ts>2018-03-29T04:46:11.000354</ts>
    <user>Andreas</user>
    <text>Due to #2019 (&lt;https://github.com/racket/racket/issues/2019&gt;) I am having issues doing some proper profiling of my program, which uses places. Is there a way to disable places so that it uses threads instead and then `raco profile` can do it's job?</text>
  </message>
  <message conversation_id="263">
    <ts>2018-03-29T05:08:51.000276</ts>
    <user>Andreas</user>
    <text>Also, while trying to build racket I always get: `mprotect failed: 7fa5ac03c000, 16384, 1, 12` Does anyone know what this relates to?</text>
  </message>
  <message conversation_id="263">
    <ts>2018-03-29T05:23:49.000191</ts>
    <user>Andreas</user>
    <text>-- ah now I get it... that's racket crashing</text>
  </message>
  <message conversation_id="264">
    <ts>2018-03-29T09:33:01.000369</ts>
    <user>Thaddeus</user>
    <text>Hello there! Quick question:
When I have a file with an s-expression list inside (no `#lang` whatsoever), and I use `read` on it to instantiate the list.
Is it safe (from an injection point of view)? Is there a better way to parse "data only" s-expressions that are not meant to be evaluated?</text>
  </message>
  <message conversation_id="264">
    <ts>2018-03-29T09:33:36.000360</ts>
    <user>Thaddeus</user>
    <text>Should I use some kind of sandbox?</text>
  </message>
  <message conversation_id="264">
    <ts>2018-03-29T09:45:40.000496</ts>
    <user>Thaddeus</user>
    <text>I'd like to make a reader that accepts deep nested lists of symbols, strings, numbers and all primitive types, but cannot use any syntax nor procedures. Some kind of json data, but in s-expr form.</text>
  </message>
  <message conversation_id="264">
    <ts>2018-03-29T09:48:13.000263</ts>
    <user>Eugena</user>
    <text>&lt;@Thaddeus&gt; I think if `read-accept-reader` is `#f` (the default, I think) then `read`ing is safe</text>
  </message>
  <message conversation_id="264">
    <ts>2018-03-29T09:48:56.000009</ts>
    <user>Eugena</user>
    <text>see also `call-with-default-reading-parameterization`</text>
  </message>
  <message conversation_id="264">
    <ts>2018-03-29T09:53:45.000083</ts>
    <user>Thaddeus</user>
    <text>&lt;@Eugena&gt; Thanks!</text>
  </message>
  <message conversation_id="264">
    <ts>2018-03-29T10:05:07.000074</ts>
    <user>Thaddeus</user>
    <text>Now I'm undecided whether  I call my files "foo.sexp" or "foo.sex"</text>
  </message>
  <message conversation_id="265">
    <ts>2018-03-29T10:16:12.000047</ts>
    <user>Ezra</user>
    <text>try "bar.sex" :slightly_smiling_face:</text>
  </message>
  <message conversation_id="266">
    <ts>2018-03-29T11:29:44.000109</ts>
    <user>Pearl</user>
    <text>For anyone interested in using Racket with atom, I'm looking for guinea pigs for atom-ide-racket. It's been tested pretty much only on ubuntu 16.04. Installation should be simple, just `apm install atom-ide-racket`. &lt;https://atom.io/packages/atom-ide-racket&gt;</text>
  </message>
  <message conversation_id="267">
    <ts>2018-03-30T06:05:06.000037</ts>
    <user>Thaddeus</user>
    <text>&lt;@Monserrate&gt; &lt;@Eileen&gt; &lt;@Carlyn&gt; I think there's an issue with the srfi/19 implementation. The locale bundles are only loaded once when the module is required. Therefore if one changes the locale during run, the dates keep being translated in the locale that was set on load.</text>
  </message>
  <message conversation_id="267">
    <ts>2018-03-30T06:05:58.000102</ts>
    <user>Thaddeus</user>
    <text>Happens here: &lt;https://github.com/racket/srfi/blob/master/srfi-lite-lib/srfi/19/time.rkt#L101&gt;</text>
  </message>
  <message conversation_id="267">
    <ts>2018-03-30T06:51:09.000197</ts>
    <user>Eileen</user>
    <text>&lt;@Helena&gt; redex-match leaves the duplicates in so you can debug to find the exponential slowdowns that they cause</text>
  </message>
  <message conversation_id="267">
    <ts>2018-03-30T06:51:36.000028</ts>
    <user>Eileen</user>
    <text>Other tools remove the duplicates (like meta functions)</text>
  </message>
  <message conversation_id="267">
    <ts>2018-03-30T06:51:57.000133</ts>
    <user>Ezra</user>
    <text>How often are snapshots being built?</text>
  </message>
  <message conversation_id="267">
    <ts>2018-03-30T06:52:09.000107</ts>
    <user>Ezra</user>
    <text>is it nightly or more often?</text>
  </message>
  <message conversation_id="267">
    <ts>2018-03-30T08:26:39.000107</ts>
    <user>Monserrate</user>
    <text>&lt;@Ezra&gt; nightly</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T08:27:07.000241</ts>
    <user>Monserrate</user>
    <text>&lt;@Thaddeus&gt; is that part of the srfi 19 specification?</text>
  </message>
  <message conversation_id="267">
    <ts>2018-03-30T09:22:36.000384</ts>
    <user>Ezra</user>
    <text>thanks &lt;@Monserrate&gt;, do you think there is a chance this commit (from 11h ago) was included in the last snapshot build: &lt;https://github.com/racket/racket/commit/d3aa7e90e7c27cfbf6adad8db2e2c3ba6abac6a7&gt;</text>
  </message>
  <message conversation_id="267">
    <ts>2018-03-30T11:07:59.000105</ts>
    <user>Monserrate</user>
    <text>Hard to be sure</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T11:27:20.000169</ts>
    <user>Thaddeus</user>
    <text>&lt;@Monserrate&gt; Well SRFI/29 describes how locales are handled, while SRFI/19 describes how to handle dates. But in SRFI/19 it is specified in every date formatting procedure that the appropriate format should be selected from the current locale</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T11:27:56.000346</ts>
    <user>Thaddeus</user>
    <text>They don't specify how to handle locales, but they specify that locales should be used when printing dates.</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T11:29:40.000070</ts>
    <user>Thaddeus</user>
    <text>Which is buggy in our racket implementation right now, because it only uses the first locale at load time, then never bother to check again if the locale changes.</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T11:33:03.000459</ts>
    <user>Thaddeus</user>
    <text>which gives strange results like that:
```
(require srfi/19 srfi/29)
(parameterize ([current-language 'es])
  (date-&amp;gt;string (make-date 0 0 0 0 30 3 2018 0) "~A, ~B ~e, ~Y"))
"Friday, March 30, 2018"
```</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T11:34:19.000063</ts>
    <user>Thaddeus</user>
    <text>while at the same time:
```
(current-locale "es")
(require srfi/19 srfi/29)
(date-&amp;gt;string (make-date 0 0 0 0 30 3 2018 0) "~A, ~B ~e, ~Y")
"viernes, Marzo 30, 2018"
```</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T11:35:07.000550</ts>
    <user>Thaddeus</user>
    <text>I can do a pull request if you want. I justed wanted to make sure it was a bug.</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T11:40:24.000329</ts>
    <user>Aimee</user>
    <text>I just did a `git pull` and rebuild, but encountered an error:
```
make[11]: *** No rule to make target `.../racket7/racket/collects/syntax/parse/experimental/dset.rkt', needed by `../GRacket3m.app/Contents/Info.plist'.  Stop.
```</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T11:40:39.000359</ts>
    <user>Aimee</user>
    <text>do I need to update anything?</text>
  </message>
  <message conversation_id="268">
    <ts>2018-03-30T11:51:23.000279</ts>
    <user>Aimee</user>
    <text>update: I used a clean checkout and it worked</text>
  </message>
  <message conversation_id="269">
    <ts>2018-03-30T12:56:24.000542</ts>
    <user>Thaddeus</user>
    <text>&lt;@Monserrate&gt; &lt;@Eileen&gt; &lt;@Carlyn&gt; 
I wrote an issue to discuss the implementation of SRFI/19 before I start working on a fix. Can you tell me what you think?
&lt;https://github.com/racket/srfi/issues/6&gt;</text>
  </message>
  <message conversation_id="269">
    <ts>2018-03-30T12:58:20.000132</ts>
    <user>Eileen</user>
    <text>I don't have any strong opinions here (or expertise).</text>
  </message>
  <message conversation_id="269">
    <ts>2018-03-30T12:58:34.000054</ts>
    <user>Eileen</user>
    <text>What you wrote in the PR makes sense to me tho</text>
  </message>
  <message conversation_id="269">
    <ts>2018-03-30T13:04:59.000336</ts>
    <user>Carlyn</user>
    <text>I know nothing about srfi/19, really… I’ve used gregor instead ever since it was released.</text>
  </message>
  <message conversation_id="270">
    <ts>2018-03-30T14:35:01.000391</ts>
    <user>Odis</user>
    <text>Has anyone else using `codeblock-pict` noticed that the lines can have varying heights when using unicode characters?</text>
  </message>
  <message conversation_id="270">
    <ts>2018-03-30T14:35:12.000100</ts>
    <user>Odis</user>
    <text>(Including lambda. I’m also using the acmart monospace font.)</text>
  </message>
  <message conversation_id="271">
    <ts>2018-03-30T18:16:24.000121</ts>
    <user>Odis</user>
    <text>Okay, I have an idea. Does anyone know if its possible to merge two fonts together in Racket?</text>
  </message>
  <message conversation_id="271">
    <ts>2018-03-30T18:16:42.000261</ts>
    <user>Odis</user>
    <text>Like, have it use font A, but for any missing glyphs in font A use font B.</text>
  </message>
  <message conversation_id="271">
    <ts>2018-03-30T18:22:33.000193</ts>
    <user>Thaddeus</user>
    <text>Ok thanks, I'll do that change then :slightly_smiling_face:</text>
  </message>
  <message conversation_id="271">
    <ts>2018-03-30T18:34:50.000175</ts>
    <user>Thaddeus</user>
    <text>Yeah sorry. I contacted the three of you 'cause you were on the contributer list on github but I guess there's better to do than remember every srfi by heart x)</text>
  </message>
  <message conversation_id="272">
    <ts>2018-03-31T09:07:41.000015</ts>
    <user>Karry</user>
    <text>Fellow Scribble/Redex-ers! When discussing the redex-models in your paper, are you using `render-term` liberally throughout your prose? Or do you define TeX macros which generate identical (or close enough) renderings?</text>
  </message>
  <message conversation_id="272">
    <ts>2018-03-31T09:08:31.000015</ts>
    <user>Karry</user>
    <text>I started using `render-term` everywhere (consistency!) but I'm quickly getting a huge number of PDF images generated to be included, and when I want to add a little math/annotation that's not explicitly in the redex model during a discussion it's a little awkward</text>
  </message>
  <message conversation_id="272">
    <ts>2018-03-31T11:46:53.000120</ts>
    <user>Karry</user>
    <text>Well, I'm not sure what others do, but it's just too darn convenient to be able to use latex to write arbitrary in-line math in the body of a paper and include things I'm modeling with redex, so I'm having redex use fonts and symbols that I can easily uniformly match with LaTeX macros. If someone has made a different choice that works well I'd love to hear!</text>
  </message>
  <message conversation_id="271">
    <ts>2018-03-31T16:54:26.000080</ts>
    <user>Carlita</user>
    <text>I wrote a blog post on using `#lang slideshow`: &lt;https://www.asumu.xyz/blog/2018/03/31/making-the-most-of-lang-slideshow/&gt;</text>
  </message>
  <message conversation_id="273">
    <ts>2018-04-01T03:57:07.000008</ts>
    <user>Terrie</user>
    <text>is Turnstile the only available Racket DSL for adding types to a language? or are there others?</text>
  </message>
  <message conversation_id="273">
    <ts>2018-04-01T10:30:23.000099</ts>
    <user>Ezra</user>
    <text>&lt;@Terrie&gt; I don't know if there are any other but you can use the same technique without Turnstile, e.g.: &lt;https://github.com/lexi-lambda/hackett&gt;</text>
  </message>
  <message conversation_id="273">
    <ts>2018-04-01T14:11:21.000121</ts>
    <user>Carlyn</user>
    <text>&lt;@Terrie&gt; &lt;@Ezra&gt; there are a few ways to add types to a Racket language, but I’m pretty certain Turnstile is the only DSL for doing so</text>
  </message>
  <message conversation_id="272">
    <ts>2018-04-01T14:13:47.000001</ts>
    <user>Carlyn</user>
    <text>I guess Redex might also qualify, depending on your needs, but that’s only relevant if your language itself is also defined with Redex</text>
  </message>
  <message conversation_id="274">
    <ts>2018-04-01T14:43:00.000045</ts>
    <user>Rolf</user>
    <text>Hello everyone! Is there a function in lang scribble like `author` or `author+email` but for instance `contributor`. I have a problem with a documentation that I have to write, if I'm just trying to enumerate authors I get an empty string with a comma between authors.
`author one`
,
`author two`</text>
  </message>
  <message conversation_id="274">
    <ts>2018-04-01T15:14:54.000050</ts>
    <user>Rolf</user>
    <text>Well, figured it out.</text>
  </message>
  <message conversation_id="274">
    <ts>2018-04-01T15:15:40.000033</ts>
    <user>Rolf</user>
    <text>@author[(author+email "author one" "email1")
                 (author+email "author two" "email2")]</text>
  </message>
  <message conversation_id="274">
    <ts>2018-04-02T02:23:12.000169</ts>
    <user>Helena</user>
    <text>&lt;@Dia&gt; &lt;http://pkgd.racket-lang.org|pkgd.racket-lang.org&gt; is down</text>
  </message>
  <message conversation_id="274">
    <ts>2018-04-02T15:48:22.000341</ts>
    <user>Tiesha</user>
    <text>I saw sfri-19 mentioned earlier, and gregor.  I only recently saw gregor.  It looks nice.  But I have all this other code that uses sfri-19.  And then there is racket/date.  I’m trying to figure out if gregor is something people really are using more and more, i.e., whether I should consider moving my code to gregor.</text>
  </message>
  <message conversation_id="274">
    <ts>2018-04-02T15:52:03.000348</ts>
    <user>Carlyn</user>
    <text>I now exclusively use gregor, so there’s one data point. :)</text>
  </message>
  <message conversation_id="275">
    <ts>2018-04-02T16:22:39.000038</ts>
    <user>Marnie</user>
    <text>I'd say Gregor is considered the preferred choice in racket - but if you _have_ to rewrite old code so you can use Gregor in new code that's not good</text>
  </message>
  <message conversation_id="275">
    <ts>2018-04-02T16:46:08.000497</ts>
    <user>Tiesha</user>
    <text>&lt;@Marnie&gt; I don’t know that I have to rewrite old code.  I recognize the conflict between racket/date and gregor date,  I have a bunch of stuff that uses srfi-19, and I want to keep adding to that code, which makes me wonder if I should tack, jibe or NOP.</text>
  </message>
  <message conversation_id="276">
    <ts>2018-04-02T22:24:26.000092</ts>
    <user>Kim</user>
    <text>Hello everyone, anyone here good with macros/ willing to offer some help and guidance?</text>
  </message>
  <message conversation_id="276">
    <ts>2018-04-02T22:24:58.000093</ts>
    <user>Kim</user>
    <text>&amp;amp; I have gone through some guides, but am stuck on a particular transformation.</text>
  </message>
  <message conversation_id="276">
    <ts>2018-04-02T22:28:08.000075</ts>
    <user>Carlyn</user>
    <text>&lt;@Kim&gt; etiquette suggests just asking your question, and if anyone can/wants to answer, they will.</text>
  </message>
  <message conversation_id="276">
    <ts>2018-04-02T22:36:54.000202</ts>
    <user>Kim</user>
    <text>Given
  ```(defbitarray special-bits ( bit-a bit-b bit-c ))```

how could we transform from
```:bits 'bit-a 'bit-b```
to
```:bits (special-bits bit-a bit-b)```
or better yet have it evaluate to
```:bits 3```
for
```(define-syntax (foo stx)
  (syntax-case stx ()
    [(_ bit0 bit ...)
     ???]))```</text>
  </message>
  <message conversation_id="275">
    <ts>2018-04-02T22:43:34.000254</ts>
    <user>Carlyn</user>
    <text>I’m not sure I understand your question. Where is `:bits 'bit-a 'bit-b` appearing? At the top level of a module? Inside something else?</text>
  </message>
  <message conversation_id="276">
    <ts>2018-04-02T22:45:44.000168</ts>
    <user>Kim</user>
    <text>&lt;@Carlyn&gt; is is a field in a larger structure that will also need some define-syntax.</text>
  </message>
  <message conversation_id="276">
    <ts>2018-04-02T22:51:40.000055</ts>
    <user>Kim</user>
    <text>&lt;@Carlyn&gt; 
When I go through the major transformation this macro will be called for the :bits field.
E.g. where make-list-of-stuff is the high level macro
```
(make-list-of-stuff big-list
  (name-of-a
      :bits 'bit-a 'bit-b
      :some-symbols 'symbol-a 'symbol-b
      :some-key-value-list-pairs
           ('key-a 'value-a 'value-b 'value-c)
           ('key-b 'value-1 'value-2 'value-3
            ...
    )
    (name-of-b
         more-data....
     )
     etc...
)```

so this is just one piece of a larger puzzle</text>
  </message>
  <message conversation_id="276">
    <ts>2018-04-02T22:59:46.000020</ts>
    <user>Carlyn</user>
    <text>&lt;@Kim&gt; It’s hard for me to understand what your constraints are without knowing the bigger picture, but maybe this will point you in the appropriate direction:
```
#lang racket

(require (for-syntax syntax/parse
                     syntax/parse/class/local-value))

(define-syntax defbitarray
  (syntax-parser
    [(_ bits-name:id (bit-name:id ...))
     #:with [bit-index ...] (build-list (length (attribute bit-name)) values)
     #'(begin (define-syntax bit-name 'bit-index) ...)]))

(begin-for-syntax
  (define-splicing-syntax-class bits-option
    #:attributes [mask]
    [pattern {~seq #:bits [{~var bit-name (local-value exact-nonnegative-integer?)} ...+]}
             #:attr mask (apply + (map (λ (x) (expt 2 x)) (attribute bit-name.local-value)))]))

(define-syntax some-macro-that-uses-bits-option
  (syntax-parser
    [(_ bits:bits-option)
     #`(quote #,(attribute bits.mask))]))

(defbitarray special-bits (bit-a bit-b bit-c))
(some-macro-that-uses-bits-option
 #:bits [bit-a bit-b])
```
The program produces `3` as output.</text>
  </message>
  <message conversation_id="276">
    <ts>2018-04-02T23:00:08.000007</ts>
    <user>Carlyn</user>
    <text>Oh, and you’ll need to install the `syntax-classes` package for `syntax/parse/class/local-value`.</text>
  </message>
  <message conversation_id="276">
    <ts>2018-04-02T23:01:39.000219</ts>
    <user>Kim</user>
    <text>&lt;@Carlyn&gt; thank you. I'll take a look :slightly_smiling_face:</text>
  </message>
  <message conversation_id="277">
    <ts>2018-04-03T04:48:31.000284</ts>
    <user>Rolf</user>
    <text>Hello everyone! I've a question about `syntax-case`</text>
  </message>
  <message conversation_id="277">
    <ts>2018-04-03T04:49:12.000170</ts>
    <user>Rolf</user>
    <text>Is it possible to use pattern `(or (_ #f) ())`? Ordinary `match` allows it.</text>
  </message>
  <message conversation_id="277">
    <ts>2018-04-03T04:53:43.000111</ts>
    <user>Thaddeus</user>
    <text>I guess you can have this with a `syntax-parse` and `~or`. But with `syntax-case` I don't know.</text>
  </message>
  <message conversation_id="277">
    <ts>2018-04-03T04:54:15.000015</ts>
    <user>Rolf</user>
    <text>&lt;@Thaddeus&gt; exactly! I'll try it now! Thank you!:+1:</text>
  </message>
  <message conversation_id="277">
    <ts>2018-04-03T04:57:13.000031</ts>
    <user>Rolf</user>
    <text>&lt;@Thaddeus&gt; it works as expected!</text>
  </message>
  <message conversation_id="277">
    <ts>2018-04-03T05:05:09.000350</ts>
    <user>Thaddeus</user>
    <text>Great :smile:</text>
  </message>
  <message conversation_id="278">
    <ts>2018-04-03T11:12:56.000570</ts>
    <user>Lashell</user>
    <text>Hi,</text>
  </message>
  <message conversation_id="278">
    <ts>2018-04-03T11:14:08.000832</ts>
    <user>Lashell</user>
    <text>I thought I'd try the new nightly builds of Racket; Welcome to DrRacket, version 6.90.0.24--2018-04-03(a4eddbd63d/a) [3m].
Language: racket, with debugging and profiling [custom]; memory limit: 128 MB.
&amp;gt;</text>
  </message>
  <message conversation_id="278">
    <ts>2018-04-03T11:15:45.000806</ts>
    <user>Lashell</user>
    <text>looks good, but I've noticed that Dr Racket 6.90.0.24 doesn't launch from the MacOS GUI(finder), only from the command line.</text>
  </message>
  <message conversation_id="278">
    <ts>2018-04-03T11:16:59.000909</ts>
    <user>Lashell</user>
    <text>Process:               DrRacket [5664]
Path:                  /private/var/folders/*/DrRacket.app/Contents/MacOS/DrRacket
Identifier:            org.racket-lang.DrRacket
Version:               6.90.0.24 (6.90.0.24)
Code Type:             X86-64 (Native)
Parent Process:        ??? [1]
Responsible:           DrRacket [5664]
User ID:               502

Date/Time:             2018-04-03 16:07:34.821 +0100
OS Version:            Mac OS X 10.13.3 (17D102)
Report Version:        12
Anonymous UUID:        818EA46D-C579-9E4C-5EAF-344B941ADCEB

Sleep/Wake UUID:       512F92B9-DBE0-4607-8A32-F19D3028C0CC

Time Awake Since Boot: 78000 seconds
Time Since Wake:       2200 seconds

System Integrity Protection: enabled

Notes:                 Translocated Process

Crashed Thread:        0

Exception Type:        EXC_CRASH (SIGABRT)
Exception Codes:       0x0000000000000000, 0x0000000000000000
Exception Note:        EXC_CORPSE_NOTIFY

Termination Reason:    DYLD, [0x1] Library missing

Application Specific Information:
dyld: launch, loading dependent libraries

Dyld Error Message:
  Library not loaded: @executable_path/../../../lib/Racket.framework/Versions/6.90.0.24_3m/Racket
  Referenced from: /private/var/folders/*/DrRacket.app/Contents/MacOS/DrRacket
  Reason: image not found

Binary Images:
       0x1017c5000 -        0x1017cdfff +org.racket-lang.DrRacket (6.90.0.24 - 6.90.0.24) &amp;lt;59C1FB4D-0DD4-30A0-A524-5716A7BC6028&amp;gt; /var/folders/*/DrRacket.app/Contents/MacOS/DrRacket
       0x104c28000 -        0x104c7298f  dyld (519.2.2) &amp;lt;6695F30B-4E88-3C0B-9867-7D738C44A3E6&amp;gt; /usr/lib/dyld

Model: MacBookPro9,2, BootROM ...</text>
  </message>
  <message conversation_id="279">
    <ts>2018-04-03T15:11:15.000351</ts>
    <user>Kim</user>
    <text>Is there a way to apply a function with n-parameters to n-lists such that each function call would map the n-th argument to the nth list?

A simple example:
```
(the-thing-im-looking-for
   (lambda (a b c) (+ a b c))
   '(1 2 3)
   '(2 3 4)
   '(1 1 2))
```
would yield
```
'(4 6 9)
```</text>
  </message>
  <message conversation_id="279">
    <ts>2018-04-03T15:19:26.000610</ts>
    <user>Jen</user>
    <text>&lt;@Kim&gt; I think map will do what you want</text>
  </message>
  <message conversation_id="279">
    <ts>2018-04-03T15:20:11.000107</ts>
    <user>Jen</user>
    <text>This gives the output you expect
```
(map
  (lambda (a b c) (+ a b c))
  '(1 2 3)
  '(2 3 4)
  '(1 1 2))
```</text>
  </message>
  <message conversation_id="279">
    <ts>2018-04-03T15:27:13.000356</ts>
    <user>Kim</user>
    <text>&lt;@Jen&gt; Yes that does it. Thank you Dan! Very cool feature.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-03T16:19:26.000648</ts>
    <user>Odis</user>
    <text>Is the current build of Racket failing for anyone else?</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-03T16:19:59.000598</ts>
    <user>Odis</user>
    <text>The current error I’m getting is &lt;https://gist.github.com/LeifAndersen/ec746ba75b1805885289d213242b1825&gt;</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-03T16:31:58.000427</ts>
    <user>Odis</user>
    <text>Odd… Well doing a `git clean -fxd` seems to have cleared it up. Oh well. :disappointed:</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-03T17:09:01.000311</ts>
    <user>Aimee</user>
    <text>&lt;@Odis&gt; I had that last time I did a git pull, and I had to `git clean` too</text>
  </message>
  <message conversation_id="281">
    <ts>2018-04-03T17:10:04.000088</ts>
    <user>Carlyn</user>
    <text>I nuked `racket/src/build`, which is a little less drastic.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-03T17:24:02.000111</ts>
    <user>Odis</user>
    <text>&lt;@Aimee&gt; Sad</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-03T17:24:11.000555</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; Mmm…okay. I’ll give that a shot next time, thanks.</text>
  </message>
  <message conversation_id="282">
    <ts>2018-04-03T22:52:12.000197</ts>
    <user>Lynna</user>
    <text>&lt;@Lashell&gt; Try dragging "DrRacket.app" out of its encloding folder (command-click if it's in "Applications") and then drag it back in place.
The problem is most likely that snapshots are not signed, so the executable is sandboxed by the OS in a way that doesn't let it find the Racket framework.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T12:17:05.000341</ts>
    <user>Odis</user>
    <text>Sad. Something about a recent commit to the expander has broken nanopass.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T13:52:05.000165</ts>
    <user>Odis</user>
    <text>Also, trivial and rosette seem to have broken as well.</text>
  </message>
  <message conversation_id="283">
    <ts>2018-04-04T14:08:47.000488</ts>
    <user>Ezra</user>
    <text>that could explain why I couldn't install css-expr (also built with nanopass) with a recent snapshot</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:36:38.000094</ts>
    <user>Carlyn</user>
    <text>&lt;@Estell&gt; &lt;@Arvilla&gt; I think I’m switching back to syntax objects for my type representation…</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:38:40.000038</ts>
    <user>Helena</user>
    <text>&lt;@Carlyn&gt; what happened?</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:39:38.000797</ts>
    <user>Carlyn</user>
    <text>oh, sorry for not pinging you as well… basically, I think I sometimes need to be able to embed expanded types in syntax, if, for example, a macro expands to a type annotation form.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:39:56.000048</ts>
    <user>Carlyn</user>
    <text>but I don’t think I’m going to do it the way turnstile does it. :)</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:40:44.000652</ts>
    <user>Carlyn</user>
    <text>this is the prototype I’ve put together if you’re interested: &lt;https://gist.github.com/lexi-lambda/8c05c255542329cc91624a846b200b48&gt;</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:41:21.000735</ts>
    <user>Carlyn</user>
    <text>it produces `#&amp;lt;syntax:expand-type.rkt:75:13 (#%type:app (#%type:app (#%type:con -&amp;gt;) (#%type:con Integer)) (#%type:con Integer))&amp;gt;` as output.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:41:55.000248</ts>
    <user>Helena</user>
    <text>ok, thanks</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:42:02.000149</ts>
    <user>Helena</user>
    <text>would prefab structs work too?</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:43:13.000581</ts>
    <user>Carlyn</user>
    <text>they might… I’m currently using prefab structs. but I’m currently just stuffing prefab structs in syntax properties. IIRC, prefab structs containing syntax objects cause problems when embedded in syntax directly.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:43:40.000607</ts>
    <user>Carlyn</user>
    <text>though I think that’s only true if you’re evaluating the generated prefab structures, actually. so they might work okay.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:44:38.000370</ts>
    <user>Carlyn</user>
    <text>hmm. now I can’t decide if I should just allow embedding the existing prefab structures wherever types are expected. :)</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:46:34.000756</ts>
    <user>Helena</user>
    <text>that sounds convenient :)</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:47:06.000376</ts>
    <user>Carlyn</user>
    <text>let me try swapping this prototype to use prefab structures instead of syntax objects…</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:51:57.000187</ts>
    <user>Carlyn</user>
    <text>&lt;@Helena&gt; the weird thing about embedding prefab structures in syntax objects is that you get… prefab structures wrapped in syntax objects.
```
&amp;gt; (syntax-e (datum-&amp;gt;syntax #f (type:app (type:con #'Maybe) (type:con #'Integer))))
'#s(type:app #&amp;lt;syntax #s(type:con Maybe)&amp;gt; #&amp;lt;syntax #s(type:con Integer)&amp;gt;)
```</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:52:46.000220</ts>
    <user>Carlyn</user>
    <text>I guess that could be fine, but it’s a bit odd.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:52:49.000064</ts>
    <user>Helena</user>
    <text>ok, so might as well just use syntax objects</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:53:19.000494</ts>
    <user>Carlyn</user>
    <text>maybe. now you’ve gone and made me indecisive. :)</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:55:09.000134</ts>
    <user>Helena</user>
    <text>well here's my deal, sometimes at Northeastern I hear the question "why doesn't turnstile use structs instead of syntax objects? like hackett</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:55:17.000498</ts>
    <user>Helena</user>
    <text>"seems we'd get better performance"</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:55:38.000216</ts>
    <user>Helena</user>
    <text>and today I see, wow Alexis is thinking about going back to syntax objects!</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:55:50.000225</ts>
    <user>Helena</user>
    <text>the embedding problem makes sense</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:55:55.000131</ts>
    <user>Carlyn</user>
    <text>see, the mistake you made is assuming I know what I’m doing</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:56:09.000231</ts>
    <user>Helena</user>
    <text>and performance, IMO, should be a second-order problem</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:56:13.000644</ts>
    <user>Carlyn</user>
    <text>but yeah, I have been wondering about the performance thing, too.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:56:32.000798</ts>
    <user>Carlyn</user>
    <text>I’m worried about both the performance of the pattern-matching and the need to constantly call into the expander to make sure the type is normalized.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:56:57.000673</ts>
    <user>Carlyn</user>
    <text>I think I want something like `syntax-local-expand-expression` but with a stop-list… maybe I can emulate something like that using syntax taints.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:57:52.000170</ts>
    <user>Carlyn</user>
    <text>though maybe not… taints probably wouldn’t do what I want. but I could probably change the expander to give me something that would give better performance if absolutely necessary.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:58:04.000123</ts>
    <user>Helena</user>
    <text>hm .. I think &lt;@Gaynell&gt; has been adding stop lists to turnstile, successfully (no taints)</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:58:38.000632</ts>
    <user>Carlyn</user>
    <text>the main issue is that I don’t want to have to constantly call `local-expand` if I’ve already called `local-expand` on a given piece of syntax.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:58:42.000707</ts>
    <user>Helena</user>
    <text>(pinging him to get a proper answer, but it won't happen immediately)</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:58:51.000705</ts>
    <user>Carlyn</user>
    <text>since it would be constantly re-traversing the same piece of syntax.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:59:01.000007</ts>
    <user>Helena</user>
    <text>right</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T14:59:23.000665</ts>
    <user>Carlyn</user>
    <text>but I can’t attach a syntax property saying “this piece of syntax has already been traversed” because a user could end up copying that property onto their own syntax (intentionally or unintentionally).</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:00:18.000188</ts>
    <user>Carlyn</user>
    <text>that said, that seems like a problem to worry about later, as you yourself said…</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:01:28.000694</ts>
    <user>Helena</user>
    <text>yeah for structs vs. syntax objects I'd just pick the one that is less work for right now</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:02:32.000429</ts>
    <user>Carlyn</user>
    <text>I’ve been grappling with this problem for the past two months or so. The problem is that types are just phase 1 (POD) values from a certain POV, but they’re syntax from another POV.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:03:42.000492</ts>
    <user>Carlyn</user>
    <text>They obey a very specific structure, and I want to enforce that structure. But I also need macros to be able to mess with them, put them back together, and put them back into syntax objects as a subform to another macro.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:06:27.000300</ts>
    <user>Carlyn</user>
    <text>One potential advantage of using prefab structures is that they could be parsed out of the syntax objects by a syntax class, so phase 1 code could still think about them as POD instead of syntax. But all the marshaling/unmarshaling surely has a cost.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:08:21.000342</ts>
    <user>Helena</user>
    <text>I wouldn't worry about the marshalling cost yet</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:09:02.000528</ts>
    <user>Helena</user>
    <text>everything else, I agree it's not clear what's the best thing to do</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:25:13.000216</ts>
    <user>Carlyn</user>
    <text>&lt;@Helena&gt; I’ve added a version of the same gist that uses prefab structs &lt;https://gist.github.com/lexi-lambda/8c05c255542329cc91624a846b200b48#file-expand-type-prefab-rkt&gt;</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:52:24.000439</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; &lt;@Eugena&gt; I’m interested in making a change to `racket/private/template`, and I’m trying to understand how it works… specifically, I’m not sure what the purpose of the `t-resyntax` guide is.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T15:54:38.000269</ts>
    <user>Carlyn</user>
    <text>At first blush, it seems similar to `t-relocate`, but it’s used in a lot more places, and it has a whole `optimize-resyntax` function that I don’t understand.</text>
  </message>
  <message conversation_id="284">
    <ts>2018-04-04T16:51:15.000068</ts>
    <user>Odis</user>
    <text>&lt;@Ezra&gt; Oh, okay. I’ll see if I can figure out what’s up now then.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T16:56:48.000433</ts>
    <user>Eugena</user>
    <text>&lt;@Carlyn&gt; If you interpret a guide as a program that builds a syntax object, `t-resyntax` marks where the actual syntax boundaries are. For example, suppose `x` and `y` are pattern variables, and the template is `(x y)`. That gets turned into the guide `(t-resyntax #f tstx (t-list (t-var x-val) (t-var y-val)))` meaning: first build a list using the `x` and `y` pattern variable bindings, then turn the list into a syntax object with the same lexical context and source as the original template syntax itself (which I'm assuming here is represented by `tstx`).</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T16:57:56.000398</ts>
    <user>Eugena</user>
    <text>If the template were `(x (y))` or `(x . (y))` then there would be two occurrences of `t-resyntax`.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:08:39.000268</ts>
    <user>Eugena</user>
    <text>It turns out, though, that compiling templates that way makes for .zo files that are larger than we'd like. It sometimes produces more compact code to produce a `quote-syntax`ed term and then replace parts of it at runtime. For example, if the template is `(0 1 x 3 y 5)`, it's more compact to have a single syntax constant as the starting point and emit code to update positions 2 and 4: `(t-subst (quote-syntax (0 1 _ 3 _ 5)) '(2 4) x-val y-val)`. That's what `optimize-resyntax` does.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:13:19.000166</ts>
    <user>Carlyn</user>
    <text>I see. I was wondering exactly what the purpose of `t-subst` was, myself… if I understand correctly, it is designed to do a bit more of the work at runtime to make .zo files smaller?</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:13:41.000329</ts>
    <user>Eugena</user>
    <text>right</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:16:00.000502</ts>
    <user>Carlyn</user>
    <text>Okay. For context, what I’m interested in doing is effectively making it possible to control where syntax properties come from on the resulting syntax object, like how `syntax/loc` allows controlling where the srcloc comes from.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:17:23.000465</ts>
    <user>Carlyn</user>
    <text>I’m not completely sure what needs to be changed, though… it seems like I could adjust `t-relocate` to accept an additional argument including a syntax object to copy properties from, but it doesn’t look like that would be enough.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:19:50.000589</ts>
    <user>Eugena</user>
    <text>For the sake of argument, let's say there's a form `(syntax/prop prop-stx template)` (and forget about source location for now)</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:20:33.000180</ts>
    <user>Eugena</user>
    <text>If `x` is a pattern variable, what does `(syntax/prop pstx x)` mean?</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:20:59.000372</ts>
    <user>Carlyn</user>
    <text>I would imagine it would have the same behavior as `(syntax/loc stx x)`; that is, it’s just `#'x`.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:21:24.000044</ts>
    <user>Eugena</user>
    <text>(btw, is the intent only to apply syntax properties to the outermost syntax object?)</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:21:59.000469</ts>
    <user>Carlyn</user>
    <text>Yes. I’ve basically just written a `syntax/loc/props` macro a bunch of times (including one that has ended up inside `racket/splicing`), and I figured it would make sense to put it somewhere.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:23:20.000217</ts>
    <user>Carlyn</user>
    <text>(The one in `racket/splicing` does it the “wrong” way, though; it just does `(datum-&amp;gt;syntax stx (syntax-e stx) pstx pstx)`.)</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:35:51.000486</ts>
    <user>Eugena</user>
    <text>The relevant guide forms are `t-resyntax`, `t-relocate`, and `t-subst`. There are two options. One is to just add an extra argument to each of them for the property source syntax. The other is (for .zo-size paranoia mode) is to create separate variants for setting both source and properties (since presumably uses of `syntax/loc/props` will be less common than `syntax/loc` for the near future). The other place you'll need to change is `relocate-guide`, but it sounds like the main cases are still same.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:36:55.000393</ts>
    <user>Carlyn</user>
    <text>The API I think I actually want is to add `#:srcloc` and `#:props` keyword arguments to `syntax` to avoid needing `syntax/loc`, `syntax/props`, and `syntax/loc/props`.</text>
  </message>
  <message conversation_id="280">
    <ts>2018-04-04T17:37:05.000119</ts>
    <user>Carlyn</user>
    <text>But that can expand into whatever under the hood.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-04T18:31:44.000207</ts>
    <user>Eugena</user>
    <text>&lt;@Lynna&gt; Is there a way to check that two identifiers are never `free-identifier=?` in *any* phase?</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T10:37:23.000185</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; &lt;@Lionel&gt; So, I think I figured out why a recent commit killed nanopass.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T10:38:05.000728</ts>
    <user>Odis</user>
    <text>Older versions of `syntax/loc` seemed to (sometimes) work when the source location given wasn’t a syntax object directly.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T10:38:28.000401</ts>
    <user>Odis</user>
    <text>(But rather a list or somethhing that `syntax-case/parse` can match on.)</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T10:39:15.000078</ts>
    <user>Odis</user>
    <text>No there seems to be a check for `syntax/loc` that errors when its not given a `syntax?` object.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T11:15:04.000472</ts>
    <user>Ezra</user>
    <text>&lt;@Odis&gt; you probably meant to mention &lt;@Eugena&gt; in your message above</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T11:39:26.000294</ts>
    <user>Eugena</user>
    <text>&lt;@Odis&gt; Indeed, that is something that changed. But IIRC if it didn't error before, it was because it was throwing away the loc argument entirely, because the template was just a single pattern variable. For example: `(syntax/loc loc-expr x)` where x is a pattern variable or `(quasisyntax/loc loc-expr #,expr)`.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T11:41:08.000484</ts>
    <user>Helena</user>
    <text>&lt;@Odis&gt; that's the same reason `trivial` wasn't building yesterday --- bad argument to `syntax/loc`. I'm happy with this error because it found a bug in my code</text>
  </message>
  <message conversation_id="286">
    <ts>2018-04-05T11:46:25.000815</ts>
    <user>Ezra</user>
    <text>mentioning &lt;@Erika&gt; as his css-expr also fails on new `syntax/loc` behaviour</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T11:50:37.000424</ts>
    <user>Odis</user>
    <text>Ya. @ryanc, given the amount of packages this broke, it should at least be announced.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T11:51:20.000348</ts>
    <user>Odis</user>
    <text>Also, it would be good to explicitly document that the srcloc argument for syntax/loc must be a syntax? and thus not every value syntax-parse can match on is valid there.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T11:55:06.000813</ts>
    <user>Eugena</user>
    <text>&lt;@Odis&gt; the docs for syntax/loc already say that. The announcement sounds like it might be a good idea, though.</text>
  </message>
  <message conversation_id="286">
    <ts>2018-04-05T12:06:32.000009</ts>
    <user>Erika</user>
    <text>&lt;@Ezra&gt; Thanks for the mention.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T12:24:00.000832</ts>
    <user>Odis</user>
    <text>&lt;@Eugena&gt;, Interesting, my build says:

“Like syntax, except that the immediate resulting syntax object takes its source-location information from the result of stx-expr (which must produce a syntax object), unless the template is just a pattern variable, or both the source and position of stx-expr are #f.”</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T12:24:29.000772</ts>
    <user>Odis</user>
    <text>Which is now broken. And so it ‘might’ make sense to change that and add a history note.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T12:24:35.000425</ts>
    <user>Odis</user>
    <text>(Which I’d be happy to do for the record.)</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T12:35:01.000367</ts>
    <user>Monserrate</user>
    <text>&lt;@Eugena&gt; breaking a bunch of packages sounds bad</text>
  </message>
  <message conversation_id="287">
    <ts>2018-04-05T12:36:22.000759</ts>
    <user>Andreas</user>
    <text>Does anybody know if there's a way to force racket to simulate places using threads, even if places are available?</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T12:38:40.000079</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; I agree. Although it is at least only a handful (somewhere between 5 and 10).</text>
  </message>
  <message conversation_id="287">
    <ts>2018-04-05T12:46:10.000374</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; Do you know what's going on here? &lt;https://github.com/racket/racket/issues/2019&gt;</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T14:40:29.000458</ts>
    <user>Odis</user>
    <text>&lt;@Eugena&gt; It also looks like the reason your push killed rosette was because Rosette already used `??` as an identifier.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T14:46:32.000058</ts>
    <user>Odis</user>
    <text>(Thanks to &lt;@Helena&gt; for finding that.)</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T14:48:00.000126</ts>
    <user>Helena</user>
    <text>(here it is &lt;https://github.com/racket/racket/issues/2031&gt;)</text>
  </message>
  <message conversation_id="288">
    <ts>2018-04-05T14:48:30.000503</ts>
    <user>Bertha</user>
    <text>To be fair, if that were the only reason:
My impression is that `provide`-ing a new definition is one of the few ways it's acceptable to break backward-compatibility?
The idea being, well users could defend themselves by using `only-in` with `require`.
I'm not arguing that's the right norm (idk) but I _think_ that's the de facto norm, until/unless someone wants to advocate otherwise?</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T14:51:07.000084</ts>
    <user>Bertha</user>
    <text>I'm not sure there's an ideal choice.
- Using `only-in` everywhere might be tedious.
- Providing whole-new-module-just-for-one-function might be icky.</text>
  </message>
  <message conversation_id="285">
    <ts>2018-04-05T14:58:30.000111</ts>
    <user>Odis</user>
    <text>&lt;@Eugena&gt; &lt;https://github.com/racket/racket/pull/2032&gt;</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:04:46.000266</ts>
    <user>Andreas</user>
    <text>Does anyone here know where the scripts to create the nightly snapshots live?</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:09:19.000631</ts>
    <user>Marnie</user>
    <text>I'd like to understand this breakage more but I'm confused on the details, what went wrong exactly?</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:11:17.000515</ts>
    <user>Carlyn</user>
    <text>as far as I can tell, it’s mostly just a standard “exporting a new identifier from `#lang racket/base` that other people already used” issue</text>
  </message>
  <message conversation_id="290">
    <ts>2018-04-05T15:11:52.000331</ts>
    <user>Thaddeus</user>
    <text>Hello everybody!
I'm pondering whether I should make a small package in which I provide my web helpers (creating html content and instantiating a racket web-server to serve them) or just use something already existing.
Is there any racket "web framework"? I saw *frog* and *plt-web*, but they generate static content.
My helpers mostly consists of basic elements (links, dates, images...) and a way to create new ones with a `define-renderer` macro.
Then I have a `define-response` macro that handles serving a specific page.
I want to make the inner workings of racket's web-server disappear. Are there already packages doing that, or should I create some? (if so, I'll need your help to come up with a catchy name)</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:13:33.000117</ts>
    <user>Marnie</user>
    <text>as I understand it:

- things imported by `#lang` can be shadowed by require imports and by definitions
- things imported by require can be shadowed by definitions

so does exporting from `#lang racket` vs a `require` form mean anything special here?</text>
  </message>
  <message conversation_id="290">
    <ts>2018-04-05T15:13:37.000263</ts>
    <user>Carlyn</user>
    <text>&lt;@Thaddeus&gt; I think a newer, nicer, more consistent layer on top of `web-server` would be appreciated.</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:14:19.000211</ts>
    <user>Carlyn</user>
    <text>The problem is that people often do `(require racket/base)` (often `for-syntax` or `for-label`, but that still suffers from the same potential pitfalls).</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:15:19.000246</ts>
    <user>Carlyn</user>
    <text>If it was only used as `#lang racket/base`, you’d be right in that it probably wouldn’t be a problem. But it isn’t only used that way.</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:15:27.000029</ts>
    <user>Odis</user>
    <text>Yup. Especially when making the sort of, front end, so to speak, for DSLs.</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:15:42.000305</ts>
    <user>Thaddeus</user>
    <text>Cool, I'll extract what I came up with from working on my websites, and put it on github, so that you can give me some feedback :slightly_smiling_face:</text>
  </message>
  <message conversation_id="290">
    <ts>2018-04-05T15:17:56.000133</ts>
    <user>Marnie</user>
    <text>&lt;@Thaddeus&gt; I like racket web stuff a lot so looking forward to it</text>
  </message>
  <message conversation_id="290">
    <ts>2018-04-05T15:19:16.000348</ts>
    <user>Marnie</user>
    <text>Wait is `??` part of `racket/base` now?</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:23:19.000277</ts>
    <user>Carlyn</user>
    <text>Yes, on HEAD (but not in any releases yet). IIUC, `syntax` is now essentially `template` from `syntax/parse/experimental/template`, but I’m not completely sure if all the features from `template` were ported to `syntax`.</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:26:37.000412</ts>
    <user>Odis</user>
    <text>I thought they were. Although you know them better than me.</text>
  </message>
  <message conversation_id="290">
    <ts>2018-04-05T15:28:49.000526</ts>
    <user>Marnie</user>
    <text>Okay I'm less confused now I think</text>
  </message>
  <message conversation_id="290">
    <ts>2018-04-05T15:30:19.000249</ts>
    <user>Marnie</user>
    <text>I'm assuming `template` recognizes `??` as a bound literal instead of a datum, is that right?</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:31:17.000045</ts>
    <user>Carlyn</user>
    <text>Yes, that’s right.</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:38:09.000518</ts>
    <user>Ezra</user>
    <text>&lt;@Thaddeus&gt; even if there would be packages like this already I still think it would be a good idea to publish yours.  Seeing how others deal with similar problems is an eye opening experience that creates synergistic effect that can ultimately lead to great results (ever-greater packages)</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:48:59.000088</ts>
    <user>Odis</user>
    <text>&lt;@Erika&gt; &lt;@Ezra&gt; I have pushed a fix to nanopass.</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:49:05.000614</ts>
    <user>Odis</user>
    <text>So it should now (hopefully) work on head.</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T15:53:05.000394</ts>
    <user>Ezra</user>
    <text>thanks &lt;@Odis&gt;!</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T16:00:52.000473</ts>
    <user>Odis</user>
    <text>I think the most annoying bit is that you can’t just say `(except-in racket/base ??)`, because then it won’t build on 6.12 because `??` isn’t provided.</text>
  </message>
  <message conversation_id="289">
    <ts>2018-04-05T16:01:22.000065</ts>
    <user>Odis</user>
    <text>Like, it would be nice if there was an `except-in/maybe-doesnt-exist` form. Or something like it.</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T16:27:37.000428</ts>
    <user>Helena</user>
    <text>dear past Ben I think you should see this: &lt;https://github.com/racket/racket/issues/2031&gt;</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T18:35:15.000400</ts>
    <user>Monserrate</user>
    <text>There's some code in &lt;@Lanette&gt;'s book that would be nice to have as a package too</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T18:47:08.000185</ts>
    <user>Carlyn</user>
    <text>&lt;@Estell&gt; &lt;@Arvilla&gt; &lt;@Helena&gt; I think I might be throwing in the towel (for now) on using prefab structures</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T18:47:33.000417</ts>
    <user>Carlyn</user>
    <text>time to convert a lot of uses of `racket/match` to uses of `syntax/parse`…</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T18:48:06.000100</ts>
    <user>Marnie</user>
    <text>&lt;@Carlyn&gt; I'm also curious about how that journey worked out</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T18:49:07.000104</ts>
    <user>Willette</user>
    <text>s</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T18:49:48.000161</ts>
    <user>Carlyn</user>
    <text>essentially, I want to be able to embed expanded types back into syntax objects, and I can do that with prefab structures, but that wraps them in syntax objects anyway, so there’s not really any advantage to doing so</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T18:50:12.000200</ts>
    <user>Carlyn</user>
    <text>trying to go half way is more trouble than it’s worth</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T18:50:52.000166</ts>
    <user>Carlyn</user>
    <text>I guess it’d be possible to use syntax-wrapped prefab structures, but I’m not sure there’s much of a point to doing so</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T18:51:21.000322</ts>
    <user>Carlyn</user>
    <text>(versus just using the usual lists and symbols)</text>
  </message>
  <message conversation_id="292">
    <ts>2018-04-05T20:00:31.000133</ts>
    <user>Kim</user>
    <text>Is there a way to force an expression to evaluate at compile time without defining a macro?</text>
  </message>
  <message conversation_id="292">
    <ts>2018-04-05T20:01:55.000201</ts>
    <user>Marnie</user>
    <text>&lt;@Kim&gt; you could use `begin-for-syntax` I think, but it depends what you want to do</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:20:06.000139</ts>
    <user>Arvilla</user>
    <text>I’ve thought that prefab structures were the better idea ever since hearing about it. </text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:21:20.000235</ts>
    <user>Arvilla</user>
    <text>And since then I’ve made an alternate version of Turnstile that allows prefab structs as types...</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:25:11.000234</ts>
    <user>Arvilla</user>
    <text>What’s the problem with prefab? Possible marshaling/unmarshalling cost? Not having syntax-parse’s error messages? Interaction between modules?</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:28:05.000061</ts>
    <user>Arvilla</user>
    <text>Macros expanding to syntax that contains types?</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:30:23.000056</ts>
    <user>Arvilla</user>
    <text>I just saw this btw</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:30:28.000242</ts>
    <user>Carlyn</user>
    <text>&lt;@Arvilla&gt; the last one is the main problem. you can devise a way to turn the prefab structures back into syntax, but I find that somewhat unsatisfying. do you disagree?</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:30:41.000081</ts>
    <user>Arvilla</user>
    <text>So I haven’t tried out the gist yet</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:33:34.000029</ts>
    <user>Arvilla</user>
    <text>Expanding to dummy syntax with the type in a property isn’t an option?</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:38:31.000281</ts>
    <user>Arvilla</user>
    <text>```
(define-syntax stop/error
  (λ (stx)
    (raise-syntax-error #f “bad” stx)))

... (local-expand ... (list #’stop/error)) ...

... (syntax-property #’(stop/error) ‘is-type ...prefab-struct...) ...
```
?</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T21:51:21.000213</ts>
    <user>Carlyn</user>
    <text>&lt;@Arvilla&gt; I think that’s feasible, but I think it’s a confusing interface for users.</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T22:25:40.000084</ts>
    <user>Arvilla</user>
    <text>What do you mean? The interface for users wouldn't be this, it would be an `Int` or `-&amp;gt;` macro that expands into `(syntax-property #'(stop/error) 'is-type ...)`, and something like an `expand-type` function that does the `(local-expand ... (list #'stop/error))` and gets out the syntax property.</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T22:26:48.000267</ts>
    <user>Arvilla</user>
    <text>But importantly, that `expand-type` function wouldn't have to traverse the same syntax twice, because of the `stop/error` identifier in the stop-list.</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T22:28:57.000137</ts>
    <user>Arvilla</user>
    <text>And if users really need it, you would provide a `type-&amp;gt;syntax` function that's just `(syntax-property #'(stop/error) 'is-type ty)`</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T22:33:50.000060</ts>
    <user>Arvilla</user>
    <text>```
expand-type : Syntax -&amp;gt; Type
type-&amp;gt;syntax : Type -&amp;gt; Syntax
```</text>
  </message>
  <message conversation_id="293">
    <ts>2018-04-05T22:35:16.000015</ts>
    <user>Kim</user>
    <text>&lt;@Marnie&gt; thank you, I'll give it a try.
what I'm doing is setting an integer through a bitwise-ior of several bits. &amp;amp; want that computed at compile time so the binary would just have the results of evaluation.</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T22:47:45.000197</ts>
    <user>Carlyn</user>
    <text>&lt;@Arvilla&gt; Perhaps you’re right. That would be a less destructive change than ripping out half my code and replacing it. Maybe I’ll give that a shot to start.</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T22:48:19.000031</ts>
    <user>Carlyn</user>
    <text>(I was originally considering something like that, but after thinking about it again, I realized I had rejected it for a reason that is no longer relevant. So I should give it another try.)</text>
  </message>
  <message conversation_id="291">
    <ts>2018-04-05T22:50:52.000163</ts>
    <user>Arvilla</user>
    <text>Okay.</text>
  </message>
  <message conversation_id="293">
    <ts>2018-04-05T23:09:44.000215</ts>
    <user>Marnie</user>
    <text>One module can `require` another at compile time with `for-syntax`, so you can define a regular variable containing the result of the thing you want to compute and use that variable in compile-time macros of another module</text>
  </message>
  <message conversation_id="294">
    <ts>2018-04-06T07:40:55.000264</ts>
    <user>Erika</user>
    <text>Thank you :grinning:</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T10:18:41.000738</ts>
    <user>Norene</user>
    <text>Hello. I have some questions about writing my own language(s).</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T10:19:05.000571</ts>
    <user>Norene</user>
    <text>I have created a "core" language that is basically just an s-exp language.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T10:19:52.000711</ts>
    <user>Norene</user>
    <text>I have created another "dsl" language which I want to expand to the core language, and have that language process further.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T10:20:07.000776</ts>
    <user>Norene</user>
    <text>So, in other words, I want to chain the languages together like passes in a compiler.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T10:20:25.000523</ts>
    <user>Norene</user>
    <text>I am not really understanding *how* to do this, though.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T10:22:23.000168</ts>
    <user>Norene</user>
    <text>When I try the above, it says all of my macros are unbound. I suspect it's because the macro expansion takes place in the context of the module some-mod which will, therefore, use "core" which is ignorant of my macros.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T10:23:07.000538</ts>
    <user>Norene</user>
    <text>So, (if that's correct), what is the proper way to indicate I want to expand all of the "dsl" macros, *then* treat the result as a module in the "core" language?</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T10:23:20.000467</ts>
    <user>Norene</user>
    <text>If that assumption is wrong, then what in the world am I doing wrong?</text>
  </message>
  <message conversation_id="296">
    <ts>2018-04-06T11:50:26.000319</ts>
    <user>Andreas</user>
    <text>&lt;@Lanette&gt; what's the best way to report typos, layout issues with Server Racket?</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:04:55.000627</ts>
    <user>Carlyn</user>
    <text>&lt;@Norene&gt; I don’t think I fully understand your question, but I think you would normally just make forms in your DSL language macros that expand into forms in your core language, then let the expander handle the desugaring.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:05:41.000383</ts>
    <user>Norene</user>
    <text>Imagine it like this: I type...</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:05:57.000478</ts>
    <user>Norene</user>
    <text>x = 3 and that parses to...</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:06:53.000032</ts>
    <user>Norene</user>
    <text>(define-new-var x 3) which I want to then use macros to expand to...</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:07:15.000523</ts>
    <user>Norene</user>
    <text>(define-var x 3) which is valid in the core language, but should expand to...</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:07:27.000720</ts>
    <user>Norene</user>
    <text>(define x 3) so that it executes in racket</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:07:49.000105</ts>
    <user>Norene</user>
    <text>I have a language extension that gets the last two steps, which is my "core" language</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:08:19.000053</ts>
    <user>Norene</user>
    <text>I have another language extension that does the first two steps, which is my "dsl" defined in main.rkt</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:09:14.000330</ts>
    <user>Norene</user>
    <text>Once I expand from (define-new-var x 3) to (define-var x 3), my main language will no longer expand and I get errors because define-var is not defined in Racket</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:09:51.000367</ts>
    <user>Norene</user>
    <text>So, the crux of the problem is **how** do I do what you said so that the core language macros will be used to further expand the language?</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:11:16.000601</ts>
    <user>Norene</user>
    <text>And for context, I want to be able to have multiple backends which can a) output and compute racket, b) generate equivalent java, c) output analysis information about the code. Also, I want to have multiple DSLs that can be used in the beginning.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:11:28.000206</ts>
    <user>Norene</user>
    <text>Which is why I am trying to do this in separate stages.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:11:57.000012</ts>
    <user>Norene</user>
    <text>I know that selecting the frontend and backend is *another* problem, but just chaining them together would be a big step forward at this point.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:12:12.000142</ts>
    <user>Norene</user>
    <text>&lt;@Carlyn&gt; I hope that makes more sense...</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:17:49.000542</ts>
    <user>Carlyn</user>
    <text>I think you would want to `require` the module that provides your core module forms where you define your dsl language forms so that they hygienically reference the core forms and the identifiers aren’t unbound.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:18:25.000128</ts>
    <user>Norene</user>
    <text>I think I tried that, but I can try again.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:19:11.000475</ts>
    <user>Norene</user>
    <text>You mean put the require into the template for the dsl macro, right? In other words, it should be in the module that I output from my dsl?</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:19:45.000552</ts>
    <user>Carlyn</user>
    <text>No, the require should be in the module that defines the DSL macro, not inside the macro’s template.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:19:57.000320</ts>
    <user>Norene</user>
    <text>ah, ok</text>
  </message>
  <message conversation_id="297">
    <ts>2018-04-06T12:20:01.000239</ts>
    <user>Carlyn</user>
    <text>Are you familiar with racket’s hygiene model?</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:20:07.000550</ts>
    <user>Norene</user>
    <text>vaguely</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:20:39.000183</ts>
    <user>Carlyn</user>
    <text>To a first approximation, the idea is that scope should “just work”, even for macros.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:21:16.000450</ts>
    <user>Carlyn</user>
    <text>So if you use an identifier in a macro template, it should be in scope where you define the macro, and whether it’s in scope where the macro is used is irrelevant.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:22:58.000276</ts>
    <user>Norene</user>
    <text>Ok, that got it. Thanks!</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:23:58.000680</ts>
    <user>Norene</user>
    <text>I guess I am just thinking of it in a different manner. Instead of just making *all* the macros available, I was looking at it as more of a pipleine. Take input, get an AST, compile to the core language, then compile to racket.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:24:45.000342</ts>
    <user>Norene</user>
    <text>I think I need to think about the next problem a bit now (swapping out backends and frontends) to make sure I can do it this way, but this will at least help me get ahead with my prototype. Thank you very much! &lt;@Carlyn&gt;</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:25:16.000033</ts>
    <user>Carlyn</user>
    <text>Swapping out backends is significantly harder, unfortunately.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:25:37.000033</ts>
    <user>Norene</user>
    <text>That's what I'm thinking...</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:26:03.000383</ts>
    <user>Carlyn</user>
    <text>It can be done, but it involves a bit more trickery.</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:26:05.000067</ts>
    <user>Norene</user>
    <text>I could have my dsls expand to a module containing my macros, but with the require parameterized, though, right?</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:26:46.000573</ts>
    <user>Norene</user>
    <text>So, my actual dsls would be templated themselves</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:27:00.000155</ts>
    <user>Norene</user>
    <text>and a macro would plug in the proper required lib</text>
  </message>
  <message conversation_id="295">
    <ts>2018-04-06T12:27:27.000227</ts>
    <user>Norene</user>
    <text>(I'll worry about that when I need to, haha)</text>
  </message>
  <message conversation_id="298">
    <ts>2018-04-06T14:42:58.000520</ts>
    <user>Carlyn</user>
    <text>&lt;@Arvilla&gt; I think I remember why I rejected the solution of just sticking a type in a syntax property… sometimes the type is not self-contained. For example, imagine I have the type `(Foo x)`, where `x` is intended to be a type variable bound by some `forall`. I want to arrange for the type to be under a `forall [x]` so that the final piece of syntax is `(forall [x] (Foo x))`. Now, when this expands, `forall` will introduce fresh bound variables to end up with something like `(let-syntax ([x (type-var-transformer (type:bound-var #'x1))]) (Foo x))`, and the whole thing eventually becomes `(type:forall #'x1 (type:app (type:con #'Foo) (type:bound-var #'x1)))`.</text>
  </message>
  <message conversation_id="298">
    <ts>2018-04-06T14:44:44.000456</ts>
    <user>Carlyn</user>
    <text>But this doesn’t work if I don’t have `(Foo x)` as syntax, but instead only as a prefab structure, since it means I actually have something like `(type:app (type:con #'Foo) (type:bound-var #'x))`. So if I stick that on a syntax property, I’ll end up with the `let-syntax` wrapped around a piece of syntax with that syntax property… and the resulting type I’ll get is `(type:forall #'x1 (type:app (type:con #'Foo) (type:bound-var #'x)))` (note the final `#'x` instead of `#'x1`).</text>
  </message>
  <message conversation_id="298">
    <ts>2018-04-06T14:47:19.000028</ts>
    <user>Carlyn</user>
    <text>I really do need that use of `#'x` to be expanded, but the prefab structures are already fully expanded by definition. The problem here is that I essentially want to embed an _unexpanded_ type, in this case the identifier `x`, inside of a type that has already been expanded, in this case `(type:app (type:con #'Foo) _)`, where `_` represents a hole to be filled in by my macro.</text>
  </message>
  <message conversation_id="298">
    <ts>2018-04-06T15:06:31.000363</ts>
    <user>Carlyn</user>
    <text>But wait, there’s more: the type my macro receives is actually `(type:app (type:con #'Foo) (type:bound-var #'a1))`, and my macro essentially wishes to transform that into `#'(#t(type:con #'Foo) x)`, where `#t` represents the embedding of a prefab type into syntax by attaching a syntax property. But it doesn’t know what shape the input type will be, only that it needs to substitute all bound `#'a1` variables with `x`. So while I could theoretically provide a way to convert prefab types into syntax objects, including a protocol that could properly encode all the various different types that can show up in the prefab structures, that would end up producing something like `(#%app (#%type:con Foo) (#%type:bound-var a1))`, and the macro author would then need to reimplement bound variable substitution on syntax objects (since the typechecker’s `inst` function only works on prefab structures).</text>
  </message>
  <message conversation_id="298">
    <ts>2018-04-06T15:09:31.000650</ts>
    <user>Carlyn</user>
    <text>So, as far as I can tell, this dualism in the type representation becomes a problem as soon as you want to embed an unparsed/unexpanded type inside of a parsed/expanded one. It would be possible to create some hacks around this issue, like allowing an escape hatch in the prefab type language that allows for “3D types” (which permit arbitrary values in the type language in the same way 3D syntax allows arbitrary values in the syntax language), then a `type-&amp;gt;syntax` function that uses syntax values inside 3D types directly… but that’s a lot of hacks to preserve the prefab structure representation.</text>
  </message>
  <message conversation_id="298">
    <ts>2018-04-06T15:11:47.000444</ts>
    <user>Carlyn</user>
    <text>Now, to be fair, I currently only have one use case for this technique of embedding an unexpanded type inside an expanded one (the use case is typeclass deriving), but I get a lot of value out of the prefab representation everywhere else. So maybe it will turn out that those tradeoffs are worth it. It’s hard to know without actually doing any real programming in Hackett.</text>
  </message>
  <message conversation_id="298">
    <ts>2018-04-06T15:12:38.000046</ts>
    <user>Carlyn</user>
    <text>(&lt;@Helena&gt;, you might be interested in the above as well.)</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T12:03:30.000108</ts>
    <user>Karry</user>
    <text>does anyone else on Mac OS get an invisible frame/window from DrRacket called "root"? i.e. if I hit command+tab, move over to DrRacket and press the down arrow to tile display all the open DrRacket windows, it displays the window you would expect (i.e. DrRacket) and a window called "root" that seems to have a 0x0 window (or some other invisible size). The only reason this matters is I believe it is breaking the "mission control" Mac OS feature (i.e. 3 finger swipe up on the track pack, or ctrl+up). I think whenever that invisible "root" window exists corresponds to the "mission control" feature displaying _no windows_... which is extremely annoying.</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T12:04:25.000083</ts>
    <user>Karry</user>
    <text>(Note: the "root" window does not exist when I start DrRacket... it's opened some time later -- I'll see if I can figure out a rhyme or reason to when it seems to appear)</text>
  </message>
  <message conversation_id="300">
    <ts>2018-04-07T12:17:00.000143</ts>
    <user>Lashell</user>
    <text>Thanks &lt;@Lynna&gt; - that sorted it out.</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T12:20:45.000049</ts>
    <user>Lashell</user>
    <text>&lt;@Karry&gt; do you have any DrRacket plugins installed?</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T12:21:27.000045</ts>
    <user>Karry</user>
    <text>Yes, one</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T12:21:48.000074</ts>
    <user>Karry</user>
    <text>&lt;https://github.com/david-christiansen/todo-list&gt;</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T12:23:03.000013</ts>
    <user>Karry</user>
    <text>I just opened a file that uses it and didn't see the "root" window pop up =\</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T12:25:34.000113</ts>
    <user>Lashell</user>
    <text>&lt;@Karry&gt; maybe its pointless, but I’ve been meaning to try out todo-list anyway.  I’ll see if I can reproduce the issue.</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T12:26:33.000042</ts>
    <user>Lashell</user>
    <text>&lt;@Karry&gt; what does the ‘root’ window look like? (how do you know it is there?)</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T12:34:03.000134</ts>
    <user>Lashell</user>
    <text>&lt;@Karry&gt; or do you have weird tiling when your press ^[down]?</text>
  </message>
  <message conversation_id="301">
    <ts>2018-04-07T13:46:42.000055</ts>
    <user>Terrie</user>
    <text>I got this window without plugins. It appears if I start DrRacket and close the window. DrRacket keeps running and if I right-click on its icon in the dock and choose Show All Windows, I can see the Root window.</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T17:11:20.000006</ts>
    <user>Karry</user>
    <text>&lt;@Lashell&gt; the root window looks like its 0 pixels high and maybe 20 pixels across (i.e. its sort of just a short horizontal line) and it says "root" above it. The only way I've been able to see it is by pressing cmd+tab, moving over to DrRacket, and pressing the down arrow.</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T17:12:06.000079</ts>
    <user>Karry</user>
    <text>I'll make sure to take a screenshot next time it happens... xD</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T21:02:02.000042</ts>
    <user>Karry</user>
    <text>I am able to reproduce the behavior! yay!</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T21:02:02.000102</ts>
    <user>Karry</user>
    <text>&lt;https://github.com/racket/drracket/issues/202&gt;</text>
  </message>
  <message conversation_id="299">
    <ts>2018-04-07T21:03:26.000081</ts>
    <user>Karry</user>
    <text>&lt;@Lashell&gt; detailed steps to reproduce exist, FYI</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T22:31:27.000079</ts>
    <user>Marnie</user>
    <text>is there a way to do the _opposite_ of `syntax-local-eval`?</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T22:32:14.000077</ts>
    <user>Marnie</user>
    <text>as in, I've got an `internal-definition-context?` value, an identifier, and an arbitrary value and I want to bind the identifier to the value with `define-syntax` within the context</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T22:33:18.000018</ts>
    <user>Marnie</user>
    <text>all I see is `syntax-local-bind-syntaxes` which binds identifiers to the result of a syntax object representing a compile-time expression</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T22:33:46.000002</ts>
    <user>Marnie</user>
    <text>I have a sneaking suspicion that trying to introduce an identifier to value binding directly like this is either impossible or not a good idea</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:08:09.000087</ts>
    <user>Carlyn</user>
    <text>&lt;@Marnie&gt; Evil answer: you could use 3D syntax.
```
#lang racket

(require syntax/parse/define)

(begin-for-syntax
  (struct non-marshallable-box (value)))

(define-simple-macro (smuggle x:id e:expr)
  #:do [(define ctx (syntax-local-make-definition-context))
        (define value-to-smuggle (non-marshallable-box 42))
        (syntax-local-bind-syntaxes (list #'x) #`(quote #,value-to-smuggle) ctx)]
  #:with result (local-expand #'e 'expression '() ctx)
  result)

(define-simple-macro (unsmuggle x:id)
  #:with val (non-marshallable-box-value (syntax-local-value #'x))
  (quote val))

(smuggle y (unsmuggle y)) ; =&amp;gt; 42
```</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:10:07.000006</ts>
    <user>Marnie</user>
    <text>what are the karmic consequences of this evil?</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:10:27.000004</ts>
    <user>Carlyn</user>
    <text>This particular instance is, as far as I can tell, “safe”, since the 3D syntax is erased by the time the program fully expands. But I don’t know for sure, so don’t quote me on that.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:10:39.000008</ts>
    <user>Marnie</user>
    <text>don't `quote` you on it eh?</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:10:43.000064</ts>
    <user>Carlyn</user>
    <text>:rimshot:</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:10:54.000040</ts>
    <user>Marnie</user>
    <text>:finger guns:</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:11:50.000076</ts>
    <user>Marnie</user>
    <text>it's hard to tell if this is a bad idea or not</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:12:05.000061</ts>
    <user>Carlyn</user>
    <text>Yeah, I have no idea if it is or isn’t.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:12:33.000070</ts>
    <user>Marnie</user>
    <text>it _feels_ like a bad idea</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:12:37.000025</ts>
    <user>Carlyn</user>
    <text>Probably &lt;@Lynna&gt; could speak to whether or not there’s some pitfall I don’t know about. I’ve never actually tried doing something like that in practice.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-07T23:12:38.000034</ts>
    <user>Marnie</user>
    <text>but really I can't tell at all</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:24:28.000028</ts>
    <user>Lynna</user>
    <text>Yes, I think that's a safe use of 3-D syntax.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:31:07.000014</ts>
    <user>Marnie</user>
    <text>&lt;@Lynna&gt; would it be unsafe if the definition created by `smuggle` was provided by a module?</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:32:05.000006</ts>
    <user>Carlyn</user>
    <text>I can say that yes, it would be, but I don’t understand how a binding in an internal definition context could be provided by a module…</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:32:56.000046</ts>
    <user>Marnie</user>
    <text>in my case I have a structure that implements `prop:rename-transformer` and contains an internal definition context as a field</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:35:59.000001</ts>
    <user>Carlyn</user>
    <text>I’ll be honest, I don’t really understand the implications of what you just said… are you `provide`ing a binding that is bound to an instance of that struct? Won’t that provide the target of the rename transformer, not the struct itself? Unless it’s marked `'not-free-identifier=?`… but that seems unlikely.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:36:14.000002</ts>
    <user>Marnie</user>
    <text>it's marked `'not-free-identifier=?`</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:36:53.000036</ts>
    <user>Carlyn</user>
    <text>Oh. Okay… so then what do you do with this definition context inside the struct, and why does it matter that it implements `prop:rename-transformer`?</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:38:06.000039</ts>
    <user>Marnie</user>
    <text>well... I'm trying something kind of weird</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:39:15.000022</ts>
    <user>Carlyn</user>
    <text>…do you have `prop:rename-transformer` bound to a procedure that… forges an identifier and calls `internal-definition-context-introduce` on it?</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:42:04.000026</ts>
    <user>Carlyn</user>
    <text>In any case, if you’re doing something like that in a straightforward way (or as straightforward as that can be), that would still be safe, since the internal definition context would be recreated on each instantiation of the module (and therefore so would the value embedded in 3D syntax). On the other hand, if you wanted to make that the same across instantiations, I don’t see how you could do it.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:44:32.000047</ts>
    <user>Marnie</user>
    <text>I'm trying to do something similar to this: &lt;https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/typecheck/renamer.rkt#L15&gt;</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:45:17.000011</ts>
    <user>Marnie</user>
    <text>basically, I'm making a rename transformer that lets me stick arbitrary static info on an identifier in an extensible way</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:46:06.000027</ts>
    <user>Marnie</user>
    <text>the transformer normally behaves as whatever the original identifier is</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:47:24.000036</ts>
    <user>Marnie</user>
    <text>when you construct it, you can give it a map of static info kinds to identifiers bound with `define-syntax` to values</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:48:09.000066</ts>
    <user>Marnie</user>
    <text>and you can instruct it via a parameter to instead use one of those transformer bindings as its rename target instead of the original identifier</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:49:16.000047</ts>
    <user>Marnie</user>
    <text>the static info kinds have contracts attached so you can let multiple different macros communicate multiple different kinds of static info via the same identifier without requiring they cooperate with each other, and you get contracts that are enforced at the time you try to attach static info to an identifier</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:49:40.000059</ts>
    <user>Marnie</user>
    <text>so the rename transformer has an internal definition context contained within it</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:55:50.000027</ts>
    <user>Carlyn</user>
    <text>I see… I think you might run into the problem that side-effects aren’t preserved?</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:56:52.000083</ts>
    <user>Carlyn</user>
    <text>If you have the ability to attach arbitrary information to an identifier, doesn’t that mean that the identifier isn’t defined in the same module as the places where its meanings might be defined? Or do they all have to be defined at once?</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:57:36.000014</ts>
    <user>Marnie</user>
    <text>They all must be defined at once, and there's no mutation involved I think</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:58:07.000037</ts>
    <user>Marnie</user>
    <text>but I'm not deeply familiar with how module instantiations and visits work so it's entirely possible this won't work at all</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T01:58:58.000013</ts>
    <user>Carlyn</user>
    <text>Well, there’s mutation in the sense that you’re calling `syntax-local-bind-syntaxes`, no?</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T02:00:43.000064</ts>
    <user>Carlyn</user>
    <text>But it seems alright, anyway, if all of that is happening in one module. Each time the module containing the definition is instantiated, it will re-create the internal definition context, so the 3D syntax never ends up in the fully-expanded program.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T02:02:10.000041</ts>
    <user>Marnie</user>
    <text>the bindings created with `syntax-local-bind-syntaxes` are themselves rename transformers to already-created bindings elsewhere, so I can link things up - the bindings for the static values themselves aren't contained in that context</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T02:05:03.000120</ts>
    <user>Carlyn</user>
    <text>Hm. Well, I probably can’t understand the precise indirections without looking at your code, but the gist of it is that you just can’t have 3D syntax embedded in a fully-expanded program (since it can’t be marshalled to bytecode), but you can have as much 3D syntax as you want as long as it only lives during expansion and is gone by the time expansion completes.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T02:06:47.000006</ts>
    <user>Carlyn</user>
    <text>So if you embed 3D syntax in some code that doesn’t get erased, like on the RHS of a module-level `define-syntax` or inside a `begin-for-syntax` block, that’s bad. But if you have an _expression that creates_ 3D syntax in those places, that’s fine, since the thing marshalled to bytecode is the expression, not the 3D syntax.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T02:09:42.000063</ts>
    <user>Carlyn</user>
    <text>Now, I’m going to do a little bit of inductive reasoning here, so take this with a grain of salt, but all internal definition contexts become `letrec-syntaxes+values` eventually. And if you look at the grammar for fully-expanded programs, `letrect-syntaxes+values` can never appear in a fully-expanded program, only `letrec-values`, so the syntax bindings must be erased by the time a program expands. Therefore, I imagine any 3D syntax embedded in the RHS of a syntax binding in an internal definition context must be safe.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T02:11:51.000067</ts>
    <user>Carlyn</user>
    <text>You’ll end up duplicating any work that you do to construct that internal definition context if you’re sticking its creation on the RHS of a module-level `define-syntax`, since it will be recreated every time that module is instantiated. But that’s probably fine, since it seems like the values you’re smuggling this way are not morally different from the RHSs of your usual instances of module-level `define-syntax`, which are also recreated on every module instantiation.</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T02:12:46.000061</ts>
    <user>Carlyn</user>
    <text>So there’s my handwaving as to why I think you’ll be okay if you do that, but I’ve been wrong before. ;)</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T02:14:03.000070</ts>
    <user>Marnie</user>
    <text>this sounds about right</text>
  </message>
  <message conversation_id="302">
    <ts>2018-04-08T02:15:04.000080</ts>
    <user>Marnie</user>
    <text>god I hope this works</text>
  </message>
  <message conversation_id="303">
    <ts>2018-04-08T20:20:20.000080</ts>
    <user>Catrice</user>
    <text>I seem to have the following macro in my Fundies utilities file; it might help?
```
(define-syntax (scheme-from-file stx)
  (syntax-case stx ()
    [(_ fname #:start start #:end end)
     (let* ([l (extract-from-file (syntax-e #'fname) 
                                  (syntax-e #'start)
                                  (if (eq? (syntax-e #'end) 'same)
                                      (syntax-e #'start)
                                      (syntax-e #'end)))])
       #`(scr:codeblock #:indent 0 #,(datum-&amp;gt;syntax stx (car l)) #,@(cdr l)))]))
```</text>
  </message>
  <message conversation_id="303">
    <ts>2018-04-08T20:21:03.000141</ts>
    <user>Catrice</user>
    <text>with, evidently, this as a helper:
```
(define-for-syntax (extract-from-file filename start end)
  (parameterize ([read-accept-reader #t])
    (call-with-input-file filename
      (λ (port)
        (let loop ([in? #f])
          (let ([l (read-line port 'any)])
            (cond
              [(eof-object? l)
               '()]
              [(and (not in?) 
                    (regexp-match start l)
                    (regexp-match end l))
               (list l "\n")]
              [(and (not in?) (regexp-match start l))
               (check-tab l filename)
               (list* l "\n" (loop #t))]
              [(and in? (regexp-match end l))
               (check-tab l filename)
               (list l "\n")]
              [in?
               (check-tab l filename)
               (list* l "\n" (loop #t))]
              [else
               (loop #f)])))))))
```</text>
  </message>
  <message conversation_id="303">
    <ts>2018-04-08T20:21:45.000157</ts>
    <user>Catrice</user>
    <text>(check-tab is boring, and just complains if there are tabs in the file.  you could simplify that extract-from-file by a lot, I'm guessing)</text>
  </message>
  <message conversation_id="303">
    <ts>2018-04-08T21:50:46.000191</ts>
    <user>Helena</user>
    <text>Thank you!
(Changing my code from `(codeblock #,@stuff)` to `(codeblock #,(datum-&amp;gt;syntax stx (car stuff)) #,@(cdr stuff))` fixed it)</text>
  </message>
  <message conversation_id="304">
    <ts>2018-04-08T23:51:20.000177</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; &lt;@Gaynell&gt; I think I may have found a case in which implementing syntax parameters using phase 1 parameters + local expansion causes my code to work on Racket 6.12 but not Racket 7.</text>
  </message>
  <message conversation_id="304">
    <ts>2018-04-09T00:13:48.000155</ts>
    <user>Carlyn</user>
    <text>&lt;https://github.com/racket/racket/issues/2035&gt;</text>
  </message>
  <message conversation_id="304">
    <ts>2018-04-09T00:21:29.000095</ts>
    <user>Carlyn</user>
    <text>Full disclosure, I only wrote the program that Racket 7 breaks tonight, so it’s not like I have existing code that was broken by the change. It seems unlikely much code that depends on the old behavior exists, but I’d still like to be able to use `syntax-parameterize` here, so if it isn’t valid as a bug report, consider it a feature request.</text>
  </message>
  <message conversation_id="303">
    <ts>2018-04-09T03:18:30.000108</ts>
    <user>Lynna</user>
    <text>I've upgraded all of the native libraries to new versions, so watch out for problems – either package/build problems or regressions due to the actual upgrades</text>
  </message>
  <message conversation_id="303">
    <ts>2018-04-09T03:39:14.000035</ts>
    <user>Lynna</user>
    <text>One problem: the package manager will install "draw-&amp;lt;platform&amp;gt;-3", which replaces the dependency on "draw-&amp;lt;platform&amp;gt;-2" for "draw-lib", but it won't automatically uninstall "draw-&amp;lt;platform&amp;gt;-2". If you're updating an existing development build, you may need `raco pkg remove --auto` to clean out "draw-&amp;lt;platform&amp;gt;-2". (The package manager doesn't currently detect that those two packages conflict by installing libraries with the same names. It's likely that "...-3" libraries will overwrite "...-2" libraries, but it's probably not guaranteed.)</text>
  </message>
  <message conversation_id="304">
    <ts>2018-04-09T10:04:59.000692</ts>
    <user>Carlyn</user>
    <text>&lt;@Arvilla&gt; I noticed you forked Hackett this morning. I’m not sure if you care, but fwiw, my (currently very broken) work in progress branch replacing the type representation is `wip/syntax-typerep`.</text>
  </message>
  <message conversation_id="304">
    <ts>2018-04-09T11:46:36.000614</ts>
    <user>Arvilla</user>
    <text>I see it</text>
  </message>
  <message conversation_id="304">
    <ts>2018-04-09T11:49:28.000304</ts>
    <user>Carlyn</user>
    <text>Good! I figured you would, but just making sure. I’m a little curious why you forked it in the first place. :)</text>
  </message>
  <message conversation_id="304">
    <ts>2018-04-09T11:53:26.000544</ts>
    <user>Arvilla</user>
    <text>If I end up using my `macrotypes-nonstx` repo to make an extension to Hackett, I want the prefab-struct type representation to be an option, since that’s what most of `macrotypes-nonstx` was designed for.</text>
  </message>
  <message conversation_id="304">
    <ts>2018-04-09T11:59:38.000690</ts>
    <user>Carlyn</user>
    <text>I think I see. I’m not sure the prefab representation is unworkable, and if you manage to come up with something, certainly let me know. I’m feeling a bit better about the way I’m planning on using syntax objects here, though, since I’m still in control of the type language (unlike the way turnstile currently does it, which doesn’t use a stop list).</text>
  </message>
  <message conversation_id="304">
    <ts>2018-04-09T12:17:53.000492</ts>
    <user>Alesha</user>
    <text>&lt;@Carlyn&gt; congratulations on your new PLT@Northwestern position!</text>
  </message>
  <message conversation_id="305">
    <ts>2018-04-09T12:31:10.000245</ts>
    <user>Ezra</user>
    <text>Not that I am selfish but this is great news for Racket (and me by extension ;)
I found it to be extreme misallocation of resources that people like Alexis couldn't work on Racket full-time.
Glad this is being fixed! Congratulations Alexis, Northwestern and Racket!</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T15:11:06.000665</ts>
    <user>Norene</user>
    <text>I am having some issues with understanding how I can introduce temporary variables into my macros. I am basically compiling my own language to Java and want the output Java to not have any compound expressions. 

For example: let's say I have (def x (= (+ 2 4) (+ 3 8))) and want to expand it to something like (list (def t1 (+ 2 4)) (def t2 (+ 3 8)) (def x (= t1 t2))).</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T15:12:58.000021</ts>
    <user>Norene</user>
    <text>The catch, though, is that I don't actually know the variable name that I will need when handling an arbitrary depth of expressions.</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T15:15:09.000468</ts>
    <user>Norene</user>
    <text>I attempted to capture the temp symbol holding the final value of the whole expression in a syntax property, but this is no longer available (as far as I can tell) once the macro has expanded. In other words, the outer macro where I need the value has already expanded its template.</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T15:15:31.000135</ts>
    <user>Norene</user>
    <text>So, is there some better way to reference this syntax property?</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T15:17:01.000265</ts>
    <user>Norene</user>
    <text>If not, then would the best alternative to be to introduce generate temp values, then inject them into an intermediate form along with the original expressions, then use this to generate the subexpressions? I.e., pass the temps forward through the templates instead of trying to retrieve them backwards through syntax properties?</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T15:17:15.000631</ts>
    <user>Norene</user>
    <text>Or, is there a better approach all together for sharing data in this manner?</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T15:22:33.000393</ts>
    <user>Norene</user>
    <text>A better example. perhaps:

(define-syntax (constraint-def stx)
  (syntax-case stx ()
    [(_ ID EXP) #'(list EXP (define-constraint ID ???))]))

Here, I put the expression before the definition so that it will be broken down into sub-expressions before the final assignment. In the ??? I need the name of the last temporary variable used.

The expression gets expanded, more or less, by this:

(define-syntax (comp-expr stx)
  (define ltemp (new-temp-symbol))
  (define rtemp (new-temp-symbol))
  (define exptemp (new-temp-symbol))
  (syntax-case stx (=)
    [(_ LEFT "=" RIGHT)
      #`(list
         (val-comp #,ltemp LEFT)
         (val-comp #,rtemp RIGHT)
         (define-value #,exptemp (= #,ltemp #,rtemp)))]))

So, if I need to either access the exptemp value in the constraint-def macro to fill in the ??? or I need to create a temp variable (or use the ID, I guess) in the constraint-def macro and make it available to use in place of the exptemp value in the comp-expr macro.</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T15:29:45.000361</ts>
    <user>Norene</user>
    <text>Should I just generate the temp symbol in constraint-def and add it to a syntax property of the EXP?</text>
  </message>
  <message conversation_id="307">
    <ts>2018-04-09T15:32:10.000582</ts>
    <user>Helena</user>
    <text>The first thing you described should work</text>
  </message>
  <message conversation_id="307">
    <ts>2018-04-09T15:32:46.000309</ts>
    <user>Helena</user>
    <text>(expand subexpression, subexpression stores its name as a syntax property, parent expression gets the syntax property)</text>
  </message>
  <message conversation_id="307">
    <ts>2018-04-09T15:33:00.000530</ts>
    <user>Helena</user>
    <text>but you'd need to call `local-expand` to expand the subexpression</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T15:35:08.000103</ts>
    <user>Norene</user>
    <text>Thanks. I'll look up local-expand and see what I can do.</text>
  </message>
  <message conversation_id="307">
    <ts>2018-04-09T16:07:14.000260</ts>
    <user>Norene</user>
    <text>&lt;@Helena&gt; That worked wonderfully. Is there some kind of cookbook style website for this kind of thing? I don't mind digging in and learning this stuff, but it seems rather difficult to even know where to look. If such a website existed, that would be great. If not, would there be much benefit in me writing such a website?</text>
  </message>
  <message conversation_id="307">
    <ts>2018-04-09T16:07:53.000518</ts>
    <user>Helena</user>
    <text>submit a pull request here? &lt;http://docs.racket-lang.org/syntax-parse-example/index.html&gt;</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T16:18:22.000448</ts>
    <user>Norene</user>
    <text>I'll take a look</text>
  </message>
  <message conversation_id="306">
    <ts>2018-04-09T16:18:23.000644</ts>
    <user>Norene</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:06:16.000172</ts>
    <user>Norene</user>
    <text>Is there a cleverer way to unit test a single macro which may expand to something which contains unbound identifiers than to do the following: create a test file, import the macro I need to test, implement a dummy macro that will match the result and quote everything?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:34:46.000079</ts>
    <user>Norene</user>
    <text>Also, what circumstances can lead to a single syntax property being returned as a pair?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:35:23.000075</ts>
    <user>Norene</user>
    <text>Racket was fun, but I'm starting to question whether or not this was a good idea...</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:35:50.000023</ts>
    <user>Norene</user>
    <text>Is my problem that I am trying to do this stuff without contracts? Would using typed racket be better?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:37:09.000164</ts>
    <user>Marnie</user>
    <text>&lt;@Norene&gt; not sure if it's right for your exact use case, but have you seen the `syntax/macro-testing` module?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:37:29.000038</ts>
    <user>Norene</user>
    <text>I have not.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:37:37.000235</ts>
    <user>Norene</user>
    <text>Let me take a look at that real quick.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:38:54.000166</ts>
    <user>Norene</user>
    <text>&lt;@Marnie&gt; I'll have to give it a shot, but it *sounds* like what I'm trying to do.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:40:02.000002</ts>
    <user>Marnie</user>
    <text>&lt;@Norene&gt; also see the `expand-once` function and similar forms, that's what I used to build the macro testing utilities of my `expect` package</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:40:39.000078</ts>
    <user>Norene</user>
    <text>That also sounds like it might be good for what I'm doing...</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:42:22.000212</ts>
    <user>Norene</user>
    <text>&lt;@Marnie&gt; Have you read "Programming Languages: Application and Interpretation"?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:42:53.000002</ts>
    <user>Marnie</user>
    <text>No, but I'm vaguely aware of it</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:43:47.000287</ts>
    <user>Norene</user>
    <text>I worked through "Beautiful Racket," and am finding that it's coverage is not even remotely sufficient for what I've gotten into (and the creation of custom macros that have to be reverse engineered when you need to remove the training wheels has caused some problems). I was just wondering if that would provide a better basis for learning these types of things.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:44:00.000056</ts>
    <user>Norene</user>
    <text>Or if there is a better resources.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:44:32.000071</ts>
    <user>Norene</user>
    <text>My searches so far seem to indicate that my options are: papers, documentation and read other people's code.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:44:39.000171</ts>
    <user>Norene</user>
    <text>Which is fine, but very time consuming.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:50:48.000224</ts>
    <user>Marnie</user>
    <text>I can't speak to PLAI but these are the resources I personally have found helpful for learning how to structure nontrivial macros:

- The examples section in the `syntax/parse` documentation
- The "Fortifying Macros" paper
- The "Keeping It Clean With Syntax Parameters" paper
- Some of Ryan Culpepper's blog posts and miscellaneous articles on macros
- The `turnstile` library and the paper on it</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:51:42.000118</ts>
    <user>Marnie</user>
    <text>And the mailing lists</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:53:33.000136</ts>
    <user>Marnie</user>
    <text>More approachable resources would be wonderful</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T20:55:08.000024</ts>
    <user>Marnie</user>
    <text>The set-of-scopes documentation was also very helpful</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:01:42.000262</ts>
    <user>Marnie</user>
    <text>also hackett</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:02:43.000203</ts>
    <user>Norene</user>
    <text>Yeah, I was digging through hackett the other day to try and figure some things out</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:02:54.000006</ts>
    <user>Carlyn</user>
    <text>&lt;@Norene&gt; re: properties becoming pairs, see the documentation at the top of this page on how properties are merged by the expander &lt;http://docs.racket-lang.org/reference/stxprops.html&gt;</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:02:59.000019</ts>
    <user>Norene</user>
    <text>Is this the set-of-scopes stuff you meant? &lt;https://www.cs.utah.edu/plt/scope-sets/&gt;</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:03:04.000005</ts>
    <user>Marnie</user>
    <text>yes</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:05:27.000157</ts>
    <user>Norene</user>
    <text>re: Hackett, is it possible to define macros, etc. using Hackett? Like, would that basically allow me to get the magic of hygienic macros, etc. that make Racket nice while allowing me to basically use Haskell?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:05:57.000127</ts>
    <user>Carlyn</user>
    <text>Not yet, but eventually. But there are lots of problems to solve first.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:07:23.000004</ts>
    <user>Norene</user>
    <text>darn.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:07:25.000067</ts>
    <user>Carlyn</user>
    <text>There is not really any theoretical reason you couldn’t `(require (for-syntax hackett))` and do business as usual, but you’d be stuck with nothing but `syntax-e`, `datum-&amp;gt;syntax`, and `quote-syntax`, which are sort of a Turing tarpit when it comes to macros.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:08:06.000155</ts>
    <user>Carlyn</user>
    <text>Figuring out how to properly typecheck all the nice things Racket has for writing macros probably isn’t trivial.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:08:23.000080</ts>
    <user>Norene</user>
    <text>I was poking around the other day to see if I could do racket style macros in Haskell and hoped maybe I was just asking the question backwards.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:09:01.000135</ts>
    <user>Carlyn</user>
    <text>I think the answer to that question is that it’s impossible. At least this way it’s possible, just not there yet. ;)</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:09:44.000189</ts>
    <user>Norene</user>
    <text>That would be nice.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:10:30.000110</ts>
    <user>Norene</user>
    <text>re: pairs, I sort of suspected something like that when I inspected the syntax objects and saw the "source(?)" property, but I wasn't able to reproduce it.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:10:53.000285</ts>
    <user>Norene</user>
    <text>I'll have to figure out where exactly the two properties  are coming from</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:11:38.000115</ts>
    <user>Norene</user>
    <text>In the meantime I'll just use car and feel guilty</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:12:58.000219</ts>
    <user>Marnie</user>
    <text>the basic idea is that syntax properties are kind of version controlled by the macro expander</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:13:54.000191</ts>
    <user>Marnie</user>
    <text>macros can't destroy information about what the syntax property was before they were invoked</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:13:57.000025</ts>
    <user>Carlyn</user>
    <text>The fact that the merging is not controllable by the programmer is absolutely unfortunate.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:14:36.000260</ts>
    <user>Carlyn</user>
    <text>It’s hard to know how to give more control with a pleasant interface that is backwards-compatible with the existing implementation, though.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:14:55.000218</ts>
    <user>Marnie</user>
    <text>¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:14:57.000167</ts>
    <user>Norene</user>
    <text>The weird part for me is that I am handling the properties in the exact same way in my macros, but I get pairs in one place and not the other. So something outside of those two macros is introducing this and I have to get my head wrapped around things a bit to figure out that.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:15:20.000048</ts>
    <user>Marnie</user>
    <text>it's the expander itself that introduces that</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:15:35.000026</ts>
    <user>Marnie</user>
    <text>as in, the racket code that recursively crawls the syntax tree and calls your macros</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:15:49.000190</ts>
    <user>Norene</user>
    <text>So it's not weird to get a pair of, for example ('temp1 . 'temp1)</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:16:14.000268</ts>
    <user>Carlyn</user>
    <text>That means the input syntax object to your macro and the output syntax from your macro both had `'temp1` for that property’s value.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:16:18.000091</ts>
    <user>Norene</user>
    <text>I.e., the exact same property from the same location</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:16:35.000054</ts>
    <user>Norene</user>
    <text>Yeah, that was my understanding, but I don't see how (yet)</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:16:58.000143</ts>
    <user>Norene</user>
    <text>Could it be because I generate a list of expressions from a single expression at some point...</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:17:36.000165</ts>
    <user>Norene</user>
    <text>I don't do that in the macro in question, but maybe something before or after that macro does</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:19:24.000132</ts>
    <user>Marnie</user>
    <text>- your macro is a function from syntax object to syntax object
- expander sees a use of a macro in the syntax object it's currently expanding
- expander notes what syntax properties exist on that syntax object
- expander calls your macro
- expander see what properties exist on the syntax object returned by your macro
- expander alters those properties so they're now a pair, where the first item of the pair is the value of the property on the returned syntax object and the second item of the pair is what the value of the property was before calling your macro
- tada! now macros that erase syntax properties (because they construct syntax objects without them) don't accidentally destroy useful information needed by later macros</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:19:53.000023</ts>
    <user>Marnie</user>
    <text>(I might have gotten some details wrong on how the pair / list is constructed during that "merge" operation but that's the spirit of it)</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:20:21.000129</ts>
    <user>Norene</user>
    <text>"expander notes what syntax properties exist on that syntax object"</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:20:47.000187</ts>
    <user>Marnie</user>
    <text>the duplication you see in a property value `'(temp1 . temp1)` happens because your macro likely directly returns a syntax object it was given as input</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:21:17.000029</ts>
    <user>Marnie</user>
    <text>by "notes" I just mean "remembers in some local variable somewhere in the expander's implementation", I don't mean that it alters the syntax object in any way there</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:21:29.000267</ts>
    <user>Norene</user>
    <text>Ah, so, for instance: (syntax-case [(_ EXP) #'EXP)])</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:21:48.000023</ts>
    <user>Norene</user>
    <text>where the EXP then gets expanded and receives a property in another macro?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:21:53.000095</ts>
    <user>Carlyn</user>
    <text>&lt;@Norene&gt; Here’s a tiny program that demonstrates the behavior:
```
#lang racket

(require syntax/parse/define)

(define-syntax-parser m1
  [(_) (syntax-property #'(m1 (+ 1 2)) 'x #t)]
  [(_ e) (syntax-property #'e 'x #t)])

(m1)
```
If you look in the macro stepper, the resulting `(+ 1 2)` expression has `'(#t . #t)` for the `'x` property.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:21:54.000212</ts>
    <user>Marnie</user>
    <text>in spirit, but I think that might not do that sometimes? I forget the details of how pattern variables affect properties</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:23:10.000052</ts>
    <user>Carlyn</user>
    <text>Alternatively, change the first `#t` to `1` and the second `#t` to `2` to get `'(2 . 1)`.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:23:36.000124</ts>
    <user>Norene</user>
    <text>Yeah, I just don't see where it's happening in my code (yet). Could it be related to the use of local-expand?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:23:50.000231</ts>
    <user>Marnie</user>
    <text>`local-expand` will do this yes</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:23:51.000041</ts>
    <user>Carlyn</user>
    <text>Depends on your code.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:23:58.000198</ts>
    <user>Marnie</user>
    <text>because it calls the expander</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:24:17.000239</ts>
    <user>Marnie</user>
    <text>but it depends on how you're using syntax properties and how exactly your macros construct syntax objects</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:25:09.000125</ts>
    <user>Marnie</user>
    <text>also, there's a special property called `'origin` that works like a normal property except the expander adds it automatically, it tracks the history of what macros expanded a piece of syntax</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:30:32.000231</ts>
    <user>Marnie</user>
    <text>&lt;@Norene&gt; the temp symbols thing you're doing makes me suspicious of whether adding static info to an identifier would be simpler than using syntax properties in your case</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:31:25.000109</ts>
    <user>Marnie</user>
    <text>or something with syntax parameters</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:32:59.000283</ts>
    <user>Norene</user>
    <text>I need to work on finishing this band-aided prototype, then in a couple of days I'll see about doing how I should have done it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:33:33.000155</ts>
    <user>Marnie</user>
    <text>entirely reasonable :)</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:33:34.000116</ts>
    <user>Norene</user>
    <text>Once I have more than a couple weeks of Racket under my belt</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:33:56.000195</ts>
    <user>Norene</user>
    <text>And read some papers, etc.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:34:47.000071</ts>
    <user>Carlyn</user>
    <text>Can you provide an MCVE? &lt;https://stackoverflow.com/help/mcve&gt;</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:39:14.000224</ts>
    <user>Marnie</user>
    <text>&lt;@Carlyn&gt; re the discussion on your syntax-parameterize issue: the fact that local-expand doesn't propagate stop lists is massively surprising to me</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:39:24.000134</ts>
    <user>Norene</user>
    <text>&lt;@Carlyn&gt; when, I get a chance I definitely will. I was unsuccessful in reducing the code while still reproducing previously and gave up.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:40:24.000021</ts>
    <user>Carlyn</user>
    <text>&lt;@Marnie&gt; Based on the current API, what would it mean to propagate stop lists? What happens when a `local-expand` inside another `local-expand` provides its own stop list?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:43:02.000097</ts>
    <user>Marnie</user>
    <text>"should the expander stop" seems pretty monoidal to me - nested uses mean the expander stops more often</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:43:10.000140</ts>
    <user>Marnie</user>
    <text>when would that _not_ be what you want?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:43:39.000196</ts>
    <user>Marnie</user>
    <text>"more often" meaning "when either use says expansion should stop"</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:44:24.000049</ts>
    <user>Marnie</user>
    <text>&amp;gt; ryanc is typing
uh oh</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:45:27.000033</ts>
    <user>Eugena</user>
    <text>&lt;@Marnie&gt; the point of calling `local-expand` is to turn a form into something from a *known* grammar; if the context can add things to the stop list, the macro doesn't know the grammar of the result, and it has no hope of interpreting the result of `local-expand` in the general case</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:47:04.000173</ts>
    <user>Marnie</user>
    <text>yes, I'd consider that a contract violation between the macro calling the outer local expand and the macro calling the inner one - the former gave the latter an expansion context where it wasn't allowed to acquire the information it needs</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:47:24.000049</ts>
    <user>Eugena</user>
    <text>For a concrete example, suppose the macro does head-expansion (stop list = `#f`) and assumes that only things starting with `define-values` or `define-syntaxes` can be a definition. If the macro's context can add `define`, or `struct`, or whatever to the stop list, it breaks that macro's assumptions.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:48:10.000136</ts>
    <user>Marnie</user>
    <text>right</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:49:49.000111</ts>
    <user>Marnie</user>
    <text>a macro calling `local-expand` with a stop list can also assume that some things _aren't_ expanded because of the stop list (e.g. macros contained within a use of `#%expression`), and that's kind of the opposite sort of problem</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:52:59.000048</ts>
    <user>Marnie</user>
    <text>I think my general train of thought is uses of `local-expand` where you only want to expand something into a _partially known_ grammar</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T21:58:41.000078</ts>
    <user>Eugena</user>
    <text>All of the uses of `local-expand` I can think of pretty much break down into three categories: full local-expand (empty stop list), head expansion (which yields a grammar with unknowns but where the outermost structure is known), and head expansion with extra subforms (eg class and init/public/private/field/etc, unit and import/export (?)). And I guess there are is a fourth class where there's a protocol between the expansion context and the macros (eg all primitive forms expand to `quote`d expressions) to trick the macro expander into doing things it wasn't really designed for originally.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T22:01:45.000241</ts>
    <user>Eugena</user>
    <text>It sounds like you have in mind a protocol or agreement between outer macros and inner macros, but I don't think that really fits the use cases the local expansion mechanism was designed for. I tend to think of the "stop list" as a bit of a red herring: it invites people to think there's more flexibility there than there is in practice.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T22:07:49.000115</ts>
    <user>Eugena</user>
    <text>On the other hand, that's my perspective from "classic" macros. You might discover that stretching the macro expander beyond its original intentions to do new and cool things with languages can make using these mechanisms (local-expand, the stop list) in unusual ways make sense.</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-09T22:24:38.000133</ts>
    <user>Marnie</user>
    <text>&lt;@Eugena&gt; yes I think that's exactly what I have in mind, this helps clarify things for me</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-10T02:51:49.000328</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; was #2033 merged?</text>
  </message>
  <message conversation_id="308">
    <ts>2018-04-10T02:54:08.000239</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; awesome, looks like it was.</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T02:57:51.000260</ts>
    <user>Gwenda</user>
    <text>I know this has probably been asked a thousand times, but how do I write a callback for EnumWindows?</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T09:41:31.000078</ts>
    <user>Alesha</user>
    <text>Does anyone know of any good reading material about when/what's appropriate to signal as a contract error as opposed to some generic application error. 

Lately, I've been tempted to use exn:fail:contract everywhere but I'm feeling I'm possibly stretching the concept of contract errors too much and rendering it meaningless. I've like to develop a reasonable heuristic of what would count as a good contract error and what would be more appropriately labelled other types of errors, possibly defined as custom application exceptions.</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T09:43:04.000759</ts>
    <user>Helena</user>
    <text>maybe: &lt;https://www2.ccs.neu.edu/racket/pubs/icfp16-dnff.pdf&gt;</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T09:43:36.000518</ts>
    <user>Alesha</user>
    <text>perfect, thanks &lt;@Helena&gt;</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T09:46:44.000795</ts>
    <user>Karry</user>
    <text>Any OOPSLA-ers out there using scribble and have noticed the caption text for figures doesn't look like the caption text in figures in vanilla acm-small papers? (i.e. in the acml-small format it appears "Fig." is used instead of "Figure", and the font is different). I'm not worried about this for an initial submission, but it would be nice to address this eventually.</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T10:06:40.000513</ts>
    <user>Helena</user>
    <text>on scribble commit 457d3f9a3f9f37348483d27ee624508e7d6d91ee</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T10:18:02.000799</ts>
    <user>Helena</user>
    <text>ohhh I thought the goal was the opposite</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T10:18:08.000316</ts>
    <user>Helena</user>
    <text>I have "FIgure"</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T10:18:56.000175</ts>
    <user>Karry</user>
    <text>I was just noticing my figure captions _did not_ look like previous OOPSLA publications... and I'm trying to not veer away from default looks unless it's for math/syntax/etc</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:14:25.000655</ts>
    <user>Carlyn</user>
    <text>Is there an easy way in Racket to, given two lists of equal length containing elements x_0, x_1, …, x_n and y_0, y_1, …, y_n, produce a list of lists of the following shape?
```
y_0, x_1, x_2, x_3, ..., x_n-2, x_n-1, x_n
x_0, y_1, x_2, x_3, ..., x_n-2, x_n-1, x_n
x_0, x_1, y_2, x_3, ..., x_n-2, x_n-1, x_n
                    ⋮
x_0, x_1, x_2, x_3, ..., x_n-2, y_n-1, x_n
x_0, x_1, x_2, x_3, ..., x_n-2, x_n-1, y_n
```</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:15:44.000372</ts>
    <user>Carlyn</user>
    <text>In other words, generate n new lists in which the elements are equivalent to the list of xs, except the nth element is replaced by the nth element from the list of ys.</text>
  </message>
  <message conversation_id="309">
    <ts>2018-04-10T12:17:27.000205</ts>
    <user>Carlyn</user>
    <text>I guess I could do `build-list` combined with `list-set` and `list-ref`, but the use of `list-ref` isn’t especially efficient. I guess a zipper-y thing is the right data structure here, but I’m wondering if it already exists somewhere. :)</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:18:39.000313</ts>
    <user>Monserrate</user>
    <text>you shouldn't need `list-ref`, just `map` + `list-set` (and something like Haskell's replicate)</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:19:43.000486</ts>
    <user>Carlyn</user>
    <text>Yeah, I was thinking `for/list` + `list-set` would be enough. Doing anything fancier would be very premature optimization, but it does seem like you could avoid the `list-set` to be a bit more efficient.</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:20:10.000411</ts>
    <user>Carlyn</user>
    <text>Though I guess the asymptotic complexity would be the same.</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:20:12.000237</ts>
    <user>Monserrate</user>
    <text>`(for/list ([(i xs) (in-indexed (replicate xs n))] [yi (in-list ys)]) (list-set xs i yi))`</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:20:42.000628</ts>
    <user>Monserrate</user>
    <text>actually, replicate isn't needed, just `repeat`</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:21:59.000088</ts>
    <user>Carlyn</user>
    <text>Why do you need anything at all? Isn’t `(for/list ([(y i) (in-indexed ys)]) (list-set xs i y))` enough?</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:22:22.000082</ts>
    <user>Monserrate</user>
    <text>oh good point</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:23:07.000117</ts>
    <user>Monserrate</user>
    <text>also that has the best possible asymptotic complexity (although not constant factors)</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:23:24.000024</ts>
    <user>Carlyn</user>
    <text>Right, if you wrote the loop by hand you could avoid retraversing `xs`.</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:23:28.000361</ts>
    <user>Monserrate</user>
    <text>since the output is size n^2</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:25:20.000658</ts>
    <user>Carlyn</user>
    <text>A maybe harder question: what is the right name for this function?</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:27:01.000017</ts>
    <user>Monserrate</user>
    <text>`diagonalize`?</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:28:16.000379</ts>
    <user>Carlyn</user>
    <text>That’s the only thing I could think of.</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:28:58.000554</ts>
    <user>Carlyn</user>
    <text>Does such a function belong in `racket/list`, or is it too arbitrary?</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:31:03.000675</ts>
    <user>Monserrate</user>
    <text>I think we should adopt the npm model and have a new pkg per function</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:33:11.000205</ts>
    <user>Carlyn</user>
    <text>on it, making `left-diagonalize` and `right-diagonalize`, which of course must be split into `left-diagonalize`, `left-diagonalize-lib`, `left-diagonalize-doc`, `left-diagonalize-test`…</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:33:54.000695</ts>
    <user>Carlyn</user>
    <text>I think this is the most unnecessarily optimized version of this function
```
(define (diagonalize xs ys)
  (let loop ([ws '()]
             [xs xs]
             [ys ys])
    (if (empty? ys)
        '()
        (cons (foldl cons (cons (first ys) (rest xs)) ws)
              (loop (cons (first xs) ws) (rest xs) (rest ys))))))
```</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:47:43.000621</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; the AppVeyor build started failing &lt;https://ci.appveyor.com/project/plt/racket/build/1.0.3132&gt; with the native libraries upgrade</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:51:43.000401</ts>
    <user>Karry</user>
    <text>&lt;@Carlyn&gt; I'm pretty sure your "most unnecessarily optimized version" is missing some mouthfuls of the letters `c`, `a`, `d`, and `r`, right? xD</text>
  </message>
  <message conversation_id="310">
    <ts>2018-04-10T12:54:10.000273</ts>
    <user>Carlyn</user>
    <text>Oh, indeed. :)</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:22:59.000558</ts>
    <user>Odis</user>
    <text>&lt;@Karry&gt;Good catch. Its actually a 1 line change to change it to use ‘Fig.’ instead of ‘Figure’ (also &lt;@Helena&gt; )</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:23:33.000127</ts>
    <user>Odis</user>
    <text>The line, if you want, is something like:
```
\renewcommand{\FigureSetRef}{\refstepcounter{fig}}
```</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:23:59.000821</ts>
    <user>Odis</user>
    <text>Which you can put in your paper’s style. And I’ll add it to the scribble/acmart style</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:26:00.000132</ts>
    <user>Karry</user>
    <text>Does that change the font back to the default/template font as well?</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:26:15.000008</ts>
    <user>Karry</user>
    <text>BTW I tried that line in my style file and got `LaTeX Error: No counter 'fig' defined.`...</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:27:08.000376</ts>
    <user>Odis</user>
    <text>I hav eno idea.</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:27:12.000599</ts>
    <user>Odis</user>
    <text>have no*</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:27:25.000152</ts>
    <user>Odis</user>
    <text>And ya, its not that exact line. I’ll paste it once I have it.</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:27:40.000477</ts>
    <user>Odis</user>
    <text>But basically the acmart.cls file sets the figure label to `Fig.`</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:27:46.000811</ts>
    <user>Odis</user>
    <text>(If its a journal)</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:28:19.000038</ts>
    <user>Odis</user>
    <text>So its almost certainly the case that scriblib/figure is using a different counter for figures.</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:29:08.000158</ts>
    <user>Karry</user>
    <text>it clobbers the font as well</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:29:43.000438</ts>
    <user>Karry</user>
    <text>just an aside, I'm not really going to spend too many cycles on this pre-initial submission :wink: I think the reviewers can forgive me.</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:30:31.000545</ts>
    <user>Odis</user>
    <text>Ya, fair.</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:36:39.000595</ts>
    <user>Odis</user>
    <text>&lt;@Karry&gt; Ha….I’m dumb. If you change line 137 of `scriblib/figure` to `"Fig."` then the problem goes away.</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:37:02.000744</ts>
    <user>Odis</user>
    <text>Sadly it does look like I will need to make it parametrizable. :disappointed:</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:40:08.000630</ts>
    <user>Odis</user>
    <text>Ass for the font…did you want it to appear as the one in the picture you posted?</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:41:26.000497</ts>
    <user>Odis</user>
    <text>Unrelated…wow that is an ugly `j`. O-O</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:47:24.000196</ts>
    <user>Odis</user>
    <text>Woah..you’re right….the acmart package doesn’t use libertine for its figure numbers…</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:47:54.000719</ts>
    <user>Odis</user>
    <text>(It appears to be inconsolata)</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:49:26.000052</ts>
    <user>Karry</user>
    <text>Yah I haven't looked into which font is which, I was just comparing against the acmart-small example PDF and previous OOPSLA papers and notice the discrepancy in both abbreviation and font between scribble output and the other sources. I just want mine to "blend in" in that regard xD</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:50:02.000448</ts>
    <user>Karry</user>
    <text>BTW the image I posted was from the example PDF they provide on their website</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:52:36.000068</ts>
    <user>Monserrate</user>
    <text>I believe in general the scribble utilities often implement things directly, rather than using higher-level latex abstractions</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:52:56.000791</ts>
    <user>Monserrate</user>
    <text>which makes it problematic to re-use latex-level customization</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:53:29.000373</ts>
    <user>Karry</user>
    <text>interestingly, even if you manually insert `\begin{figure}` there's something in the scribble setup that makes it look non-standard, from what I've observed</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T13:53:56.000160</ts>
    <user>Karry</user>
    <text>it would be nice if the manual insertion "just worked" (as in looked right)</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T14:03:56.000595</ts>
    <user>Karry</user>
    <text>&lt;@Helena&gt; I hadn't yet noticed the colon on the page number was out of place, hah</text>
  </message>
  <message conversation_id="311">
    <ts>2018-04-10T14:05:35.000433</ts>
    <user>Helena</user>
    <text>me neither, until I started writing the issue</text>
  </message>
  <message conversation_id="312">
    <ts>2018-04-10T14:35:13.000018</ts>
    <user>Temika</user>
    <text>there are two redis packages on the racket pkg server</text>
  </message>
  <message conversation_id="312">
    <ts>2018-04-10T14:35:18.000634</ts>
    <user>Temika</user>
    <text>what is the recommended one?</text>
  </message>
  <message conversation_id="312">
    <ts>2018-04-10T14:35:38.000136</ts>
    <user>Temika</user>
    <text>they have no documentation. one doesnt pass tests.</text>
  </message>
  <message conversation_id="312">
    <ts>2018-04-10T14:35:44.000697</ts>
    <user>Temika</user>
    <text>i guess the one that does</text>
  </message>
  <message conversation_id="313">
    <ts>2018-04-10T16:20:13.000267</ts>
    <user>Odis</user>
    <text>&lt;@Karry&gt; Ya, the figure name and number is inconsolata, while the figure label is libertine…Why….because ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="314">
    <ts>2018-04-10T16:58:52.000665</ts>
    <user>Marnie</user>
    <text>Apropos of nothing, today I was reflecting on on how knowing Racket feels like having superpowers and I'd just like to say thanks to all of you for that</text>
  </message>
  <message conversation_id="315">
    <ts>2018-04-10T19:10:37.000207</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; Don't you mean four pkgs per function? e.g. `left-diagonalize` `left-diagonalize-doc` `left-diagonalize-lib` `left-diagonalize-test`, and `right-diagonalize` ....  :stuck_out_tongue:</text>
  </message>
  <message conversation_id="312">
    <ts>2018-04-11T05:10:16.000009</ts>
    <user>Andreas</user>
    <text>Are there any gotchas I should be aware of when using the Racket logo on a commercial website to link to the racket webpage? Can't seem to find any 'logo' webpage with usage, etc. Something like: &lt;https://llvm.org/Logo.html&gt;</text>
  </message>
  <message conversation_id="316">
    <ts>2018-04-11T07:18:32.000400</ts>
    <user>Thaddeus</user>
    <text>please, anything *BUT* the npm model</text>
  </message>
  <message conversation_id="312">
    <ts>2018-04-11T08:20:31.000167</ts>
    <user>Andreas</user>
    <text>Does anyone have any experience with scripting `docker-machine` commands in racket?</text>
  </message>
  <message conversation_id="317">
    <ts>2018-04-11T10:12:06.000217</ts>
    <user>Catrice</user>
    <text>QQ: is there a simple `require` we can use in ISL+ to include hash-maps?</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:02:28.000394</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Can I throw some questions your way about `local-expand` and first-class definition contexts? And if so, would the mailing list be a better place for you than slack?</text>
  </message>
  <message conversation_id="316">
    <ts>2018-04-11T11:02:48.000901</ts>
    <user>Lynna</user>
    <text>Here is fine</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:04:46.000425</ts>
    <user>Carlyn</user>
    <text>Okay, great. I’ve been spending some time over the past few days abusing `local-expand`, so in the process I’ve run into some things I don’t really understand. :) I think the biggest thing I’m confused about is the relationship (if one exists) between using a list for the context argument to `local-expand` and the internal definition context argument.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:06:22.000619</ts>
    <user>Carlyn</user>
    <text>After reading the section on first-class definition contexts in the sets of scopes paper again a few times, I picked up that `internal-definition-context-introduce` essentially corresponds to an outside-edge scope. But what corresponds to the inside-edge scope?</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:10:44.000694</ts>
    <user>Lynna</user>
    <text>Offhand, I would characterize it more as an inside-edge scope. An outside-edge could simply be applied to the body up front.

There is a kind of redundancy between the context as a list and the definition-context argument. The context as a list is meant for public visibility through `syntax-local-context`, though, while the provided definition context is not exposed that way. Macros might use the result of `syntax-local-context` – for example,  to determine that a previously lifted definition definition can still be accessed, as the contract system does. But macros should not be able to get the definition-context value and directly add bindings or otherwise abuse it.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:11:37.000878</ts>
    <user>Lynna</user>
    <text>A drawback of separate arguments is that there's no enforcement of the intended correlation between the context list and definition contexts.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:14:47.000630</ts>
    <user>Carlyn</user>
    <text>Re: inside- vs outside-edge, yes, you’re right; I just checked the section of the paper again and discovered I’d misremembered which one it was. Wrt a list context as an argument to `local-expand`, what exactly does it _do_? Is it _only_ relevant to macros that look at `syntax-local-context`? I guess maybe that’s always true for the context argument, since I suppose things like `define` just signal errors when `syntax-local-context` is `'expression`, but I’m wondering what effect setting the context to, say, `(list (gensym))` actually has on forms in `racket/base`.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:17:28.000096</ts>
    <user>Lynna</user>
    <text>Yes, it only affects the result of `syntax-local-context`. Well, the distinction between top-level, expression, etc., affects some built-in forms, but the built-in forms don't care about the list content as a context; all lists are treated the same as just "a definition context".</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:21:09.000776</ts>
    <user>Carlyn</user>
    <text>I see, interesting. That helps to clarify some of my confusion. What I’m essentially doing is abusing `local-expand` to reimplement parts of the macroexpander in userspace code so that I can inject custom behavior at certain places in the expansion process (for Hackett, that means defining my own “core forms” for the type/value language, and for the mutation testing project I’ve just started working on with Christos, it means creating mutant variants of forms that are discovered as forms are expanded). Due to the way `local-expand` adds identifiers to the stop list, that means I’m trying to emulate what the expander does when it sees core forms like `#%plain-lambda` and `letrec-syntaxes+values`.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:22:31.000443</ts>
    <user>Carlyn</user>
    <text>What I’ve been doing is creating a first-class definition context to hold the bindings, then recursively calling `local-expand` on the body of each form until the program is fully-expanded. Then I replace the binding identifiers with equivalents that have the definition context’s scope added to them.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:24:05.000652</ts>
    <user>Carlyn</user>
    <text>This seems to work okay when I control the language (in the case of Hackett), but I’ve been running into some situations in which the scopes don’t seem _quite_ right when I’m expanding some `racket/base` forms (in the case of mutation testing), so I’m trying to ensure I’m jumping through all the appropriate hoops.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:26:56.000256</ts>
    <user>Carlyn</user>
    <text>I’ve also been running into confusion about where to insert `syntax-disarm`s and `syntax-rearm`s, as well as whether or not what I’m doing is actually safe with regard to the syntax taint system, but maybe I can postpone that question for another day.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:29:04.000627</ts>
    <user>Lynna</user>
    <text>Would it be easier/better/relevant to revisit the question of automatically add to the stop list? I think it's probably not always necessary with scope sets, so maybe we should add a way to disable the additions.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:31:45.000771</ts>
    <user>Carlyn</user>
    <text>After spending a lot of time over the past few days thinking about this, I’m not sure it would work, but I’m also not sure it wouldn’t—I don’t really know enough about the expander to say for sure. But from what I think I understand, the problem is that partial expansion doesn’t interact well with `let-syntax` bindings, since if the body of a `let-syntax` is partially expanded, residual uses of the syntax bindings will be out of context when the form is subsequently expanded. Is that accurate?</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:37:49.000023</ts>
    <user>Lynna</user>
    <text>Hm, yes... the primitive `letrec-syntaxes+values` form currently doesn't support expansion that keeps the `letrec-syntaxes+values`; and if it did, I guess there would have to be some way of avoiding multiple evaluation of its RHSs.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:38:53.000540</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; FWIW, DrRacket background expansion got stuck again on my machine (for the first time in a while), but I don’t think I have the relevant instrumentation inserted for that to be helpful. If it would be helpful, I can insert the instrumentation if you tell me what to do in the case that it happens again.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:42:39.000600</ts>
    <user>Carlyn</user>
    <text>I think the fundamental issue makes sense, and I think it’s actually mostly okay for what I’m doing. With Hackett, the only issue I’ve actually run into with my solution is the interaction with forms that care about recursive expansion, like the new implementation of `syntax-parameterize`. That problem is a bit trickier to solve, though, since it essentially means I want the expander to operate using a different set of core forms. From `syntax-parameterize`’s POV, it needs its bodies to be fully-expanded, so just propagating the stop list wouldn’t be enough. Rather, `syntax-parameterize` would actually have to yield to my custom expander code so that I can handle those forms properly.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:45:08.000205</ts>
    <user>Eileen</user>
    <text>```
env PLTSTDERR=info@drracket-background-compilation drracket
```</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:45:35.000730</ts>
    <user>Eileen</user>
    <text>to see if it is working, put this program in the definitions window and wait more than a second or two, but less than 100 seconds:</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:46:09.000554</ts>
    <user>Eileen</user>
    <text>```
#lang racket
(begin-for-syntax
  (let hi-spencer ()
    (void
     (let hi-shu-hung ()
       (void
        (let dan ()
          (void
           (sleep 100))))))))
```</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:46:15.000664</ts>
    <user>Carlyn</user>
    <text>There are plenty of other ways to solve the problem, though, if we permit modifying the macroexpander. I guess one might be enabling users to define new forms that are treated similarly to Racket’s existing core syntactic forms, in the sense that the macroexpander would yield control to them when seeing one but wouldn’t expand its expansion. That would allow me to use ordinary recursive expansion instead of doing hacky things with the stop list to emulate recursive expansion with a different set of core forms. I don’t really know how to enforce the appropriate protocol there, though (since it would be easy to construct misbehaving “custom core forms”).</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:46:16.000048</ts>
    <user>Eileen</user>
    <text>and then add some whitespace somewhere</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:46:33.000761</ts>
    <user>Eileen</user>
    <text>You should see someone that looks like a stacktrace</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:46:39.000234</ts>
    <user>Lynna</user>
    <text>I haven't thought enough about the problem, but assuming that we can't solve it by adjusting `local-expand`, I wonder if `syntax-parameterize` needs to support some way for macros to cooperate with it</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:47:10.000507</ts>
    <user>Eileen</user>
    <text>the output from `drracket-background-compilation: expanding-place.rkt: 00 starting monitors` to the end of the stack trace is hopefully helpful for the real bug.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:47:45.000284</ts>
    <user>Carlyn</user>
    <text>Okay, turning the logger on should be sufficient? I don’t need to patch DrRacket’s code in any way, right?</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:48:06.000183</ts>
    <user>Eileen</user>
    <text>Yes. Right.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:48:19.000261</ts>
    <user>Carlyn</user>
    <text>Okay, thanks, I’ll do that.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:52:12.000750</ts>
    <user>Carlyn</user>
    <text>I think the problem is not specific to `syntax-parameterize` but rather any form that performs recursive expansion.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:52:52.000203</ts>
    <user>Carlyn</user>
    <text>It works for Hackett because I control the whole language. I could get away with reimplementing `syntax-parameterize` to use my custom expansion code, but I’d rather not. It wouldn’t work if I didn’t control the whole language.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:53:39.000353</ts>
    <user>Carlyn</user>
    <text>It _sort of_ works with mutation testing because I’m not adding any new forms to the stop list. So if a form forces expansion using `local-expand`, the program will still work, I just might miss some opportunities to insert mutations.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:55:52.000332</ts>
    <user>Carlyn</user>
    <text>But I think &lt;@Gaynell&gt;’s point in the GH issue I opened about `syntax-parameterize` and &lt;@Marnie&gt;’s thoughts here in Slack are on the right track: if people are interested in using `local-expand` in this way, then uses of `local-expand` probably need to affect nested uses of `local-expand` in some way. But that raises questions about both safety and API design wrt backwards compatibility, I think.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T11:57:58.000223</ts>
    <user>Carlyn</user>
    <text>(The “custom core forms” idea I mentioned earlier would work for Hackett, but not mutation testing, which to be fair is meaningful. Hackett is doing what I think is a reasonable thing to be doing, but the thing I’m doing for mutation testing is kind of evil, since I’m intentionally screwing with code _other macros_ are supposed to control. So maybe it isn’t a good idea to try and come up with a single solution for both problems just because I’m currently solving them in similar, albeit hacky ways.)</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T12:05:34.000452</ts>
    <user>Lynna</user>
    <text>It makes sense that a way for macros to cooperate with `syntax-parameterize` could generalize to a way for macros to cooperate more with macros that use `local-expand`. I'm open to experiments, but I certainly don't know the answer offhand.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T12:09:46.000172</ts>
    <user>Carlyn</user>
    <text>Yes, I didn’t by any means expect you to. :) I was mostly just hoping to get an answer to my first question; the rest of this is just handwaving. I think I may be unblocked for now on the mutation testing thing I’m tinkering with, which is good enough. I’m not totally sure  what to do about Hackett right now, but I can probably do a different hack in the immediate future (by avoiding `syntax-parameterize` using either `syntax-local-get-shadower` or just breaking hygiene with `datum-&amp;gt;syntax`).</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T13:03:16.000289</ts>
    <user>Gaynell</user>
    <text>&lt;@Carlyn&gt; I think adding support for core forms to the expander is definitely a better way to go than trying to emulate the expander in userspace, given that you can’t wrest control of what a call to local-expand in a macro does. There are lots of uses for custom core forms.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T13:29:28.000422</ts>
    <user>Monserrate</user>
    <text>Certainly Typed Racket would find "custom core forms" useful as well</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T14:14:50.000092</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; &lt;@Gaynell&gt; &lt;@Monserrate&gt; From your perspectives, what would the API for a “custom core form” binding look like? Obviously it would be neither safe nor very user-friendly to provide the expander’s `add-core-form!` API as it is, but maybe it can be done in a way that feels similar to writing an ordinary transformer, with the exception that the result isn’t re-expanded by the expander to avoid infinite loops?</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T14:16:33.000723</ts>
    <user>Carlyn</user>
    <text>I think my only real question is how users would instruct which parts of a core form ought to be expanded by the expander. Would it be enough for them to just call `local-expand` on those pieces?</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:12:19.000530</ts>
    <user>Gaynell</user>
    <text>(define-syntax my-core-form (make-core-form-expander (lambda (stx) …)))</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:12:48.000339</ts>
    <user>Gaynell</user>
    <text>Then inside use `local-expand` and the first-class definition context API.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:13:35.000233</ts>
    <user>Carlyn</user>
    <text>Yes, that’s pretty much exactly what I had in mind, too. If you think that would work, it doesn’t sound too difficult to add to the expander.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:15:13.000530</ts>
    <user>Carlyn</user>
    <text>I guess you’d have to handle some error case when a core form appears in a fully-expanded program (but, of course, not under `quote-syntax`).</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:15:14.000418</ts>
    <user>Gaynell</user>
    <text>If there are custom core forms it is no longer the case that the result of expansion is necessarily a racket core form or that it can be be represented by the expander in its “parsed” AST form.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:15:54.000139</ts>
    <user>Carlyn</user>
    <text>When/where are the parsed AST forms used?</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:20:08.000176</ts>
    <user>Gaynell</user>
    <text>Having a little difficulty tracking it down exactly, but my intuition is that it expands directly to parsed AST forms rather than syntax objects when the result of the expansion is going to be directly compiled or evaluated.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:20:31.000030</ts>
    <user>Gaynell</user>
    <text>So `eval` would do that, whereas a user call to `expand` wouldn’t.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:21:59.000166</ts>
    <user>Gaynell</user>
    <text>Last I talked to matthew he seemed to feel that the standard top-level expand function should error if it expands to something other than a racket core form, and that there should be an alternate API for expansions where an extended target language is OK.</text>
  </message>
  <message conversation_id="318">
    <ts>2018-04-11T16:23:13.000228</ts>
    <user>Gaynell</user>
    <text>I don’t think that would be a problem, but it’s less clear to me whether local-expand should have a variant or the existing local-expand should be okay returning new core forms.</text>
  </message>
  <message conversation_id="319">
    <ts>2018-04-11T17:10:02.000023</ts>
    <user>Alesha</user>
    <text>I'm curious to the reason why `define-struct/contract` does not support the `#:methods` keyword?</text>
  </message>
  <message conversation_id="319">
    <ts>2018-04-11T17:13:17.000085</ts>
    <user>Alesha</user>
    <text>I'm trying to add `gen:custom-write` to a struct I have protected with contracts via `define-struct/contract` but alas not possible. I can simple revert to using `struct` but is there any other way to attach contracts to a struct? So far it appears I have only two options: `define-struct/contract` or `(provide (contract-out (struct ...)))`. I don't want the `provide` option since I'm not exporting the struct outside the module but I still want to protect it with contracts because it's handling critical data.</text>
  </message>
  <message conversation_id="319">
    <ts>2018-04-11T17:20:20.000083</ts>
    <user>Marnie</user>
    <text>&lt;@Alesha&gt; I think `define-struct` and `define-struct/contract` ought to be considered deprecated (in the context of `#lang racket` and `#lang racket/base` at least)</text>
  </message>
  <message conversation_id="319">
    <ts>2018-04-11T17:21:05.000512</ts>
    <user>Marnie</user>
    <text>You can put the struct in a submodule</text>
  </message>
  <message conversation_id="319">
    <ts>2018-04-11T17:21:49.000563</ts>
    <user>Alesha</user>
    <text>ah, that would work</text>
  </message>
  <message conversation_id="319">
    <ts>2018-04-11T17:22:57.000657</ts>
    <user>Marnie</user>
    <text>you could also use `with-contract`, but you'd have to list every identifier bound by the struct individually and I think it would shadow the static struct info binding (not sure on that one)</text>
  </message>
  <message conversation_id="319">
    <ts>2018-04-11T17:23:30.000570</ts>
    <user>Alesha</user>
    <text>ok</text>
  </message>
  <message conversation_id="320">
    <ts>2018-04-12T11:16:29.000838</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Is it still true that the result of `local-expand` can include `letrec-syntaxes+values` when `stop-ids` is an empty list? If so, when could that be possible?</text>
  </message>
  <message conversation_id="319">
    <ts>2018-04-12T11:16:59.000353</ts>
    <user>Lynna</user>
    <text>No, I don't think that's true.</text>
  </message>
  <message conversation_id="320">
    <ts>2018-04-12T11:18:57.000259</ts>
    <user>Carlyn</user>
    <text>Okay. I’m trying to improve the `local-expand` docs some more; I’ll update PR #2030 when I’m done.</text>
  </message>
  <message conversation_id="320">
    <ts>2018-04-12T12:04:32.000664</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Okay, I’ve pushed some changes. If you could take a look at &lt;https://github.com/racket/racket/pull/2030&gt; when you get a chance, I’d appreciate it.</text>
  </message>
  <message conversation_id="320">
    <ts>2018-04-12T12:13:34.000167</ts>
    <user>Carlyn</user>
    <text>It sounds like the expand-to-AST use case is okay for the moment, unless we start trying build in support for users to extend the _compiler itself_ to support their custom core forms. :)</text>
  </message>
  <message conversation_id="320">
    <ts>2018-04-12T12:18:45.000681</ts>
    <user>Carlyn</user>
    <text>As for the interface, that’s a hard question. On the one hand, I really wouldn’t mind a new `local-expand` function with an updated interface. The way `local-expand` handles the stop list is already unpleasant; perhaps we can solve two problems at once by coming up with a new function (`syntax-local-expand`?) that gives greater control over the stop list and allows configuring which core forms may appear in the output? On the other hand, if `local-expand` raises an exception when it produces syntax containing custom core forms, then all forms would need to be updated to support subexpressions with custom core forms, including `syntax-parameterize`. I guess `syntax-local-expand-expression` could probably uncontroversially support custom core forms, since it produces an opaque result anyway, but I don’t know how much would break if `local-expand` produced something someone didn’t expect.</text>
  </message>
  <message conversation_id="320">
    <ts>2018-04-12T12:20:20.000699</ts>
    <user>Carlyn</user>
    <text>In the meantime, though, I’m not actually sure what workaround I should use for Hackett. Calling `syntax-local-get-shadower` myself seems almost certainly like the wrong thing to do, given how much everyone seems to want to get rid of it, so maybe I’ll just unhygienically introduce `#%app` for now instead of using a syntax parameter to adjust it.</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T13:56:33.000607</ts>
    <user>Alesha</user>
    <text>I saw a behavior with nested modules I don't understand why it's occurring. I have a simple example:</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T13:58:05.000153</ts>
    <user>Alesha</user>
    <text>in `(module* A racket ...)` the `a` identifier is available because it's been `provide`d in the enclosing module and `require`d via `(submod "..")`</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T13:58:38.000130</ts>
    <user>Marnie</user>
    <text>oh that is neat</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T13:58:49.000535</ts>
    <user>Alesha</user>
    <text>but in the `(module C racket ...)` nested within `(module+ B ..)` the `b` identifier is available even though it's not been provided by the top-most module?</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T13:59:14.000430</ts>
    <user>Marnie</user>
    <text>Does that behavior occur with the Racket7 expander?</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T13:59:15.000470</ts>
    <user>Alesha</user>
    <text>if I take out the `(submod ".." "..")`, then I get a weird namespace mismatch error</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T13:59:26.000466</ts>
    <user>Alesha</user>
    <text>umm am running Racket 6.12</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T13:59:30.000577</ts>
    <user>Lynna</user>
    <text>&lt;@Alesha&gt; That appears to be a bug with the old expander; racket7 reports the right error</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:00:09.000437</ts>
    <user>Alesha</user>
    <text>ok so the `(module+B (module C racket...))` is actually illegal?</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:00:30.000153</ts>
    <user>Lynna</user>
    <text>The use of `b` is illegal, unless you add it to `provide`</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:00:41.000644</ts>
    <user>Alesha</user>
    <text>shoot, I was taking advantage of that behavior to make possible some nice test cases</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:01:06.000725</ts>
    <user>Alesha</user>
    <text>then once I started thinking on why it worked, I realized it made no sense, so I'll make sure not to depend on that behavior</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:14:30.000232</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt; for my clarification, the old expander being used by Racket 6.12 is still a set-of-scopes expander? The "old" is meant to imply it's a C implementation?</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:15:16.000444</ts>
    <user>Lynna</user>
    <text>Yes. (I keep forgetting that the "old" expander was the "new" expander fairly recently.)</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:16:36.000314</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Is there a way to make the expander print the information given to `log-expand` to stderr, or is the only way to obtain that information to use the mysterious expand observer API?</text>
  </message>
  <message conversation_id="322">
    <ts>2018-04-12T14:17:05.000771</ts>
    <user>Marnie</user>
    <text>what's `log-expand`?</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:17:29.000261</ts>
    <user>Lynna</user>
    <text>The internal `log-expand` form sends information only to the expand observer.</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:18:03.000270</ts>
    <user>Lynna</user>
    <text>We should rename that to something that doesn't say "log"</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:18:06.000255</ts>
    <user>Carlyn</user>
    <text>Alright, thanks. Is it documented anywhere how that works, or should I just read the `macro-debugger` source?</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:19:22.000536</ts>
    <user>Lynna</user>
    <text>It's not documented. You could set the parameter to a function that takes any number of arguments, and that would probably tell you as much as trying to read the `macro-debugger` source</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:19:50.000329</ts>
    <user>Carlyn</user>
    <text>Okay, that makes sense, thank you.</text>
  </message>
  <message conversation_id="321">
    <ts>2018-04-12T14:20:14.000296</ts>
    <user>Carlyn</user>
    <text>I have a program that is making the expander diverge, and I don’t understand why, so I’m trying to gain some insight into what’s happening.</text>
  </message>
  <message conversation_id="323">
    <ts>2018-04-12T15:01:28.000063</ts>
    <user>Andreas</user>
    <text>Is it possible in Racket to get rest keyword arguments somehow? It seems not at first try.</text>
  </message>
  <message conversation_id="323">
    <ts>2018-04-12T15:05:30.000472</ts>
    <user>Alesha</user>
    <text>not sure if I understood you correctly, don't think there's a such thing as a rest keyword.</text>
  </message>
  <message conversation_id="323">
    <ts>2018-04-12T15:05:45.000540</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; the low level interface is `make-keyword-procedure`</text>
  </message>
  <message conversation_id="323">
    <ts>2018-04-12T15:06:09.000727</ts>
    <user>Marnie</user>
    <text>I have a package called `arguments` that makes it easier: &lt;http://docs.racket-lang.org/arguments/index.html?q=arguments&gt;</text>
  </message>
  <message conversation_id="323">
    <ts>2018-04-12T15:07:30.000338</ts>
    <user>Andreas</user>
    <text>Perfect, thanks.</text>
  </message>
  <message conversation_id="323">
    <ts>2018-04-12T15:07:45.000254</ts>
    <user>Marnie</user>
    <text>example:
```
&amp;gt; (define/arguments (keywords-product args)
    (for/product ([(k v) (in-hash (arguments-keyword args))])
      v))
&amp;gt; (keywords-product #:foo 2 #:bar 3)
6
&amp;gt; (keywords-product 'ignored #:baz 6 #:blah 4)
24
```</text>
  </message>
  <message conversation_id="324">
    <ts>2018-04-12T15:51:55.000498</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I have a very strange program that diverges on the Racket 7 expander but not Racket 6.12, but I’m having a lot of trouble coming up with a minimal reproduction (the real use case is a fairly complex program). I’ll keep trying, but looking at the information from the expand observer, it gets stuck in an infinite `resolve`, `tag` loop in which it introduces `#%app` over and over again, generating expressions that look like `(#%app #%app3 #%app #%app3 #%app #%app3 #%app #%app3 ....)`. Do you have any idea why that might happen?</text>
  </message>
  <message conversation_id="324">
    <ts>2018-04-13T11:37:02.000083</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; The documentation for `syntax-local-definition-context` makes the following claim:

&amp;gt; If `intdef-ctx` is not `#f`, then the new internal-definition context extends the given one. An extending definition context adds all scopes that are added by `intdef-ctx`, and expanding in the new internal-definition context can use bindings previously introduced into `intdef-ctx`.

However, the output of the following program appears inconsistent with that claim on both Racket 6.12 and Racket 7:

```
#lang racket
(begin-for-syntax
  (define ctx1 (syntax-local-make-definition-context))
  (define ctx2 (syntax-local-make-definition-context ctx1))

  (define stx (datum-&amp;gt;syntax #f #f))

  (println (hash-ref (syntax-debug-info stx) 'context))
  (println (hash-ref (syntax-debug-info (internal-definition-context-introduce ctx1 stx)) 'context))
  (println (hash-ref (syntax-debug-info (internal-definition-context-introduce ctx2 stx)) 'context))

  (newline)

  (define stx2 #'(quote #f))
  (println (hash-ref (syntax-debug-info (local-expand stx2 'expression '())) 'context))
  (println (hash-ref (syntax-debug-info (local-expand stx2 'expression '() ctx1)) 'context))
  (println (hash-ref (syntax-debug-info (local-expand stx2 'expression '() ctx2)) 'context)))
```
```
'()
'(#(2986 intdef))
'(#(2987 intdef))

'(#(9 module) #(2320 module intdef-scopes))
'(#(9 module) #(2320 module intdef-scopes) #(2986 intdef))
'(#(9 module) #(2320 module intdef-scopes) #(2987 intdef))
```

In the case of both `internal-definition-context-introduce` and `local-expand`, the scope from the child definition context is added, but the scope from the parent context is not. Is this consistent with the documentation and I am just misunderstanding something, or is either the documentation or implementation incorrect?</text>
  </message>
  <message conversation_id="324">
    <ts>2018-04-13T11:37:46.000332</ts>
    <user>Carlyn</user>
    <text>I would test on Racket 6.2 as well, but I don’t know if there’s an equivalent to `syntax-debug-info`.</text>
  </message>
  <message conversation_id="324">
    <ts>2018-04-13T11:49:16.000741</ts>
    <user>Carlyn</user>
    <text>Is it possible this has never worked? The following program fails with an unbound identifier error about `plus` on 6.2, 6.12, and HEAD:
```
#lang racket

(require syntax/parse/define)

(define-simple-macro (with-plus form:expr)
  #:with plus (datum-&amp;gt;syntax #'form 'plus)
  #:do [(define ctx1 (syntax-local-make-definition-context))
        (syntax-local-bind-syntaxes (list #'plus) #'(make-rename-transformer #'+) ctx1)
        (internal-definition-context-seal ctx1)

        (define ctx2 (syntax-local-make-definition-context ctx1))
        (internal-definition-context-seal ctx2)]
  #:with result (local-expand #'form 'expression '() ctx2)
  result)

(with-plus (plus 1 2))
```
It does, however, successfully compile if the `ctx2` argument to `local-expand` is changed to `ctx1`.</text>
  </message>
  <message conversation_id="324">
    <ts>2018-04-13T11:54:18.000367</ts>
    <user>Carlyn</user>
    <text>As far as I can tell, there are exactly zero tests for a use of `syntax-local-make-definition-context` with a non-`#f` argument, and there is only one use of `syntax-local-make-definition-context` with a non-`#f` argument in the entire racket/racket repo. It is in a utility function in `racket/syntax` that is `#f` unless overridden by a user, so that doesn’t really count.</text>
  </message>
  <message conversation_id="324">
    <ts>2018-04-13T12:38:05.000503</ts>
    <user>Carlyn</user>
    <text>Okay, I think I finally figured out what the argument is intended to do—it affects what’s in scope on the RHS of definitions bound using `syntax-local-bind-syntaxes`, _not_ when the context is used with `local-expand`.</text>
  </message>
  <message conversation_id="325">
    <ts>2018-04-13T13:02:20.000144</ts>
    <user>Temika</user>
    <text>is there a way to send the selected sexp to the interactions window in DrRacket?</text>
  </message>
  <message conversation_id="324">
    <ts>2018-04-13T15:12:33.000288</ts>
    <user>Carlyn</user>
    <text>&lt;@Eugena&gt; Am I hallucinating, or is macro hiding in the macro stepper working again? (Or at least working better?)</text>
  </message>
  <message conversation_id="325">
    <ts>2018-04-13T15:34:44.000513</ts>
    <user>Lashell</user>
    <text>&lt;@Temika&gt; I think that would be pretty easy in Quickscript &lt;http://docs.racket-lang.org/quickscript/index.html&gt;</text>
  </message>
  <message conversation_id="325">
    <ts>2018-04-13T16:46:27.000536</ts>
    <user>Temika</user>
    <text>thanks, ill check it out!</text>
  </message>
  <message conversation_id="326">
    <ts>2018-04-13T17:29:54.000319</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Since Racket’s gui using libpaingo for font rendering, and libcairo for drawing, would it be a terrible idea to also use libatk for screen reader support?</text>
  </message>
  <message conversation_id="326">
    <ts>2018-04-13T17:30:00.000288</ts>
    <user>Odis</user>
    <text>(Since DrRacket currently has none)</text>
  </message>
  <message conversation_id="326">
    <ts>2018-04-13T17:30:37.000485</ts>
    <user>Odis</user>
    <text>Or would there be a vehement push against using another native library, and to use a use a separate solution for each os?</text>
  </message>
  <message conversation_id="326">
    <ts>2018-04-14T09:27:31.000055</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; It looks like adding libatk is straightforward. I'm unclear on how `racket/gui` libraries would need to adapt to use it, but I can add libatk to "gui-&amp;lt;platform&amp;gt;" package if that's all you need.</text>
  </message>
  <message conversation_id="326">
    <ts>2018-04-14T11:50:42.000107</ts>
    <user>Carlyn</user>
    <text>I’m beginning to think it might be possible to implement custom core forms as a derived concept (i.e. something that could go into the `syntax/` collection). As I’ve mentioned before, I don’t think propagating the stop list from `local-expand` would be enough on its own, since you really need to implement some way for subforms to yield to the “custom expander” currently being used. Still, I wonder if it would make sense to, instead of modifying the macroexpander significantly, adding a `syntax-local-stop-list` function similar to `syntax-local-context`, then adding a `syntax/custom-kernel` module that provides a wrapped version of `local-expand` that respects an internal, phase 1 `current-expand` parameter. It would require macros to opt into cooperating with parent macros that use custom core forms, but it would eliminate the need to adjust the expander.

The biggest potential pitfall I see is with the syntax taints system, which I don’t completely understand the implications of, since I don’t understand it well enough to know if there would be situations in which the current code inspector would not be strong enough to disarm macro-produced syntax in places where it would be necessary. Still, it seems worth trying. &lt;@Lynna&gt; and &lt;@Gaynell&gt;, do you have any thoughts?</text>
  </message>
  <message conversation_id="326">
    <ts>2018-04-14T17:49:42.000063</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; I may be missing something of what you have in mind, but I'd expect the opt-in mechanism to implicitly (or maybe explicitly) give you the capability to manage relevant taint armings</text>
  </message>
  <message conversation_id="327">
    <ts>2018-04-14T17:52:23.000079</ts>
    <user>Carlyn</user>
    <text>The truth is that I don’t really understand how that system works. :) I understand in theory how syntax taints work and what they do, and I understand how they work in a controlled environment, but I don’t really get how the code inspector hierarchy works. Namely, if I can just call `syntax-disarm` to disarm any piece of syntax I want, how can `syntax-protect` provide any actual security? Therefore, I imagine there are cases when I _cannot_ call `syntax-disarm` to avoid a taint, but I don’t know what they are.</text>
  </message>
  <message conversation_id="327">
    <ts>2018-04-14T20:05:09.000060</ts>
    <user>Wally</user>
    <text>Oh, cool! I'd never seen syntax taints.</text>
  </message>
  <message conversation_id="327">
    <ts>2018-04-14T20:05:21.000061</ts>
    <user>Wally</user>
    <text>Perl does taint checks on character inputs as a kind of information flow control, so your program can crash if unchecked data leaks into unchecking code. Syntax taints look similar but for program fragments instead of character buffers.</text>
  </message>
  <message conversation_id="327">
    <ts>2018-04-14T20:05:40.000090</ts>
    <user>Wally</user>
    <text>I guess it looks more complicated in Racket because you have more control, and Perl can taint a lot of stuff for you.</text>
  </message>
  <message conversation_id="327">
    <ts>2018-04-14T20:07:57.000003</ts>
    <user>Wally</user>
    <text>But when/where does syntax taint _checking_ happen?</text>
  </message>
  <message conversation_id="327">
    <ts>2018-04-14T20:11:01.000106</ts>
    <user>Carlyn</user>
    <text>It happens in the macroexpander.</text>
  </message>
  <message conversation_id="327">
    <ts>2018-04-14T20:11:51.000021</ts>
    <user>Wally</user>
    <text>So leaky scopes can be detected before the program runs?</text>
  </message>
  <message conversation_id="327">
    <ts>2018-04-14T20:12:36.000017</ts>
    <user>Carlyn</user>
    <text>Yes, the program won’t even compile if you expand to tainted syntax.</text>
  </message>
  <message conversation_id="327">
    <ts>2018-04-14T20:15:29.000022</ts>
    <user>Wally</user>
    <text>that's pretty cool</text>
  </message>
  <message conversation_id="328">
    <ts>2018-04-15T13:05:53.000073</ts>
    <user>Carlyn</user>
    <text>Is there a paper on syntax taints, by any chance?</text>
  </message>
  <message conversation_id="328">
    <ts>2018-04-15T13:11:23.000030</ts>
    <user>Lynna</user>
    <text>No</text>
  </message>
  <message conversation_id="328">
    <ts>2018-04-15T13:11:54.000108</ts>
    <user>Carlyn</user>
    <text>Okay, thank you. I figured as much, but I thought I’d ask.</text>
  </message>
  <message conversation_id="328">
    <ts>2018-04-15T13:13:16.000134</ts>
    <user>Carlyn</user>
    <text>Also: I think maybe the `base` version needs to be bumped after the fasl commit? I tried pulling HEAD and got fasl-related errors while building docs.</text>
  </message>
  <message conversation_id="328">
    <ts>2018-04-15T13:15:05.000057</ts>
    <user>Lynna</user>
    <text>Bumping the version would have been better, but did the errors cause the build to fail? The intent is that the doc build continues and ends up fixing the problem (although the temporary errors could be reported better).</text>
  </message>
  <message conversation_id="328">
    <ts>2018-04-15T13:15:55.000100</ts>
    <user>Carlyn</user>
    <text>Oh, maybe it’s fine then. I just saw errors in `raco setup` and assumed it wasn’t working, but I guess they’re just warnings.</text>
  </message>
  <message conversation_id="329">
    <ts>2018-04-15T20:17:25.000055</ts>
    <user>Marnie</user>
    <text>Where can I get more information on the different between module visits and instantiations? The racket reference section on them is very dense and I don't really understand it</text>
  </message>
  <message conversation_id="329">
    <ts>2018-04-16T11:16:25.000840</ts>
    <user>Carrol</user>
    <text>&lt;@Marnie&gt; seconded</text>
  </message>
  <message conversation_id="329">
    <ts>2018-04-16T20:51:17.000156</ts>
    <user>Helena</user>
    <text>&lt;@Marnie&gt; &lt;@Carrol&gt; try &lt;https://www.cs.utah.edu/plt/publications/macromod.pdf&gt;</text>
  </message>
  <message conversation_id="330">
    <ts>2018-04-17T04:06:28.000501</ts>
    <user>Thaddeus</user>
    <text>By reading this paper,
I now understand Racket. Thanks \o/</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T06:41:27.000127</ts>
    <user>Andreas</user>
    <text>I am trying to develop a linter of sorts for Racket. I am doing it very simply by reading the file as test. This allows to check easy style issues. However once you get to the point where you want to check variable names, or types or expressions in typed racket this approach falls apart. Surely I can read the module as syntax and handle the ast directly as a syntax object. Is this how you would start for a project of this sort? Is there anything out there from which to take some inspiration?</text>
  </message>
  <message conversation_id="330">
    <ts>2018-04-17T08:05:14.000297</ts>
    <user>Thaddeus</user>
    <text>&lt;!channel&gt; Hey everyone, if you want to try your hands at making video games in Racket, I just discovered there's a Lisp Game Jam starting in two days and going until the end of the month.
&lt;https://itch.io/jam/lisp-game-jam-2018&gt;
It's the perfect opportunity to try out some techniques (especially the really good `mode-lambda` package by &lt;@Dia&gt; or the HtdP `universe` system).
I'm curious to see what people are going to come up with :slightly_smiling_face:</text>
  </message>
  <message conversation_id="330">
    <ts>2018-04-17T08:17:00.000083</ts>
    <user>Thaddeus</user>
    <text>If you wanna see what people made the previous years, there are videos on the twitter feed : &lt;https://twitter.com/hashtag/lispgamejam&gt;</text>
  </message>
  <message conversation_id="329">
    <ts>2018-04-17T09:24:29.000435</ts>
    <user>Helena</user>
    <text>`read-lang-file` turns a file into a syntax object &lt;http://docs.racket-lang.org/read-lang-file/index.html#%28def._%28%28lib._lang-file%2Fread-lang-file..rkt%29._read-lang-file%29%29&gt;</text>
  </message>
  <message conversation_id="329">
    <ts>2018-04-17T09:25:51.000337</ts>
    <user>Helena</user>
    <text>also (probably more useful) DrRacket's check-syntax tool has an API: &lt;http://docs.racket-lang.org/drracket-tools/Accessing_Check_Syntax_Programmatically.html&gt;</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T09:26:31.000714</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Have you seen `syntax-warn` by &lt;@Marnie&gt;?  &lt;http://jackfirth.github.io/syntax-warn/&gt;</text>
  </message>
  <message conversation_id="329">
    <ts>2018-04-17T09:29:04.000760</ts>
    <user>Andreas</user>
    <text>&lt;@Helena&gt; will take a look. Thanks. Was unaware of the api for check syntax.</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T09:29:30.000694</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; didnt know about syntax warn. Thanks</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T09:51:10.000145</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; it seems &lt;@Marnie&gt; syntax warn has all the heavy lifting I need at first sight. I am surprised it exists at all since when I asked on Syntax style linters for Racket people were enthusiastic but nobody referred me to this. Many thanks.</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T09:52:54.000423</ts>
    <user>Bertha</user>
    <text>I saw &lt;@Marnie&gt; talk about it at RacketCon some years ago.</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T09:53:18.000005</ts>
    <user>Bertha</user>
    <text>I haven't used it only because I haven't been writing Racket as part of a team, or accepting huge quantities of PRs, or similar.</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T09:55:20.000468</ts>
    <user>Andreas</user>
    <text>I am working for a largish codebase, by myself at the moment, but still want something like this to ensure that over time I follow my own rules.</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T09:56:37.000671</ts>
    <user>Bertha</user>
    <text>Having the linter present a suggested rewrite, is neat.</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T09:57:13.000463</ts>
    <user>Bertha</user>
    <text>Speaking of which, moving from linting to straight refactoring, for Emacs users there is also &lt;@Eugena&gt;’s &lt;https://github.com/rmculpepper/sexp-rewrite&gt;</text>
  </message>
  <message conversation_id="331">
    <ts>2018-04-17T10:05:11.000871</ts>
    <user>Bertha</user>
    <text>As for "surprised no one referred you to it": I've been writing Racket since c. 2011. The new pkg manager started in, idk, c. 2014?  Anyway, the last 2-3 years there are "suddenly" many new pkgs. Which is great! OTOH it's probably more than any one person can keep track of, unless they're deliberately reviewing and curating and writing about Racket packages. AFAIK we don't have that person.</text>
  </message>
  <message conversation_id="332">
    <ts>2018-04-17T10:53:17.000771</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Can I ask you to take a look at another small docs PR when you have a free moment? &lt;https://github.com/racket/racket/pull/2043&gt;</text>
  </message>
  <message conversation_id="333">
    <ts>2018-04-17T11:26:28.000577</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; what's the configuration to `syntax-warn` supposed to look like? i.e. where can I pass the config of warnings to `raco warn`? It seems like the flags to pass configs want it in a submodule but I would prefer to have it away from source code and instead as a project separate file. Or is the idea to have something like:
```
#lang racket/base 

(module+ warning-config ...)
```
and then pass this filename to `--config-submod`?</text>
  </message>
  <message conversation_id="333">
    <ts>2018-04-17T11:35:46.000209</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; the submodule idea is what I'd like, and it should work like `test` submodules do where the tool picks them up automatically without you passing flags. But *there is no way to configure anything yet*, because I haven't worked on the project in a while and last time I did it was still at the incomplete prototype stage. The GitHub issue tracker has a lot written down about what still needs to be done though.</text>
  </message>
  <message conversation_id="333">
    <ts>2018-04-17T11:38:46.000612</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; thanks. Will go through the issues later on.</text>
  </message>
  <message conversation_id="333">
    <ts>2018-04-17T11:43:33.000131</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; if you do intend to use it seriously, let me know what your main use case is and I'll see if I can organize the issues and figure out what's important for your case</text>
  </message>
  <message conversation_id="333">
    <ts>2018-04-17T11:44:12.000491</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; thanks.</text>
  </message>
  <message conversation_id="334">
    <ts>2018-04-17T15:28:44.000381</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Actually, maybe I retract that PR… on closer inspection, I’m not sure I think I understand what the argument to `syntax-local-make-definition-context` does anymore.</text>
  </message>
  <message conversation_id="334">
    <ts>2018-04-17T15:35:45.000195</ts>
    <user>Carlyn</user>
    <text>I’ve been looking at both the C and Racket expanders to try and figure out what that argument does, but I don’t really get it. I think part of my confusion stems from the fact that there are scopes and there are binding environments, and these are not the same thing, but I don’t completely understand where the line between them is drawn… especially since my understanding is that bindings are internally stored on scopes themselves in some sense.</text>
  </message>
  <message conversation_id="334">
    <ts>2018-04-17T15:37:15.000616</ts>
    <user>Carlyn</user>
    <text>But specifying a parent definition context doesn’t seem to cause any additional scopes to be added, and it doesn’t even really seem to cause any additional things to be added to the expansion environment. Looking at the Racket source, it changes which “frame” the local bindings are added to, but I don’t know what a “frame” is.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T16:09:14.000133</ts>
    <user>Lynna</user>
    <text>&lt;@Marnie&gt; &lt;@Carrol&gt; I just pushed an addition to the Guide (section 16.3) on instantiations and visits. That can be a starting point for adding whatever still isn't explained enough.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T16:10:07.000343</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; I just saw your commit, thanks a bunch. :smile:</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T16:10:52.000694</ts>
    <user>Odis</user>
    <text>Now I just need to find a good workflow for screen readers and IDEs…</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T16:31:24.000168</ts>
    <user>Lynna</user>
    <text>I haven't actually pushed the libs, yet, but I will</text>
  </message>
  <message conversation_id="334">
    <ts>2018-04-17T16:41:35.000595</ts>
    <user>Willette</user>
    <text>&lt;@Carlyn&gt;: &lt;https://gist.github.com/takikawa/6253646&gt;</text>
  </message>
  <message conversation_id="334">
    <ts>2018-04-17T16:42:06.000518</ts>
    <user>Carlyn</user>
    <text>I’ve seen that before, but it’s still extremely good :)</text>
  </message>
  <message conversation_id="334">
    <ts>2018-04-17T16:42:15.000159</ts>
    <user>Willette</user>
    <text>:)</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T17:48:11.000481</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Fair enough.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T17:49:13.000003</ts>
    <user>Odis</user>
    <text>BTW, I noticed that image-&amp;gt;bitmap (in the cocoa mred library) doesn’t seem to be used anywhere. I mean, clipboard uses it in its `get-bitmap-data` method, but that doesn’t seem to be called from anywhere.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T17:50:32.000546</ts>
    <user>Odis</user>
    <text>(I was looking into it because I noticed that:

```
         [gc (tell NSGraphicsContext
                   graphicsContextWithGraphicsPort: #:type _pointer cg
                   flipped: #:type _BOOL #f)])
```
is deprecated.)</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T17:53:14.000465</ts>
    <user>Lynna</user>
    <text>Isn't `get-bitmap-data` used by the public `get-clipboard-bitmap` in "../common/clipboard.rkt"?</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T17:58:57.000360</ts>
    <user>Odis</user>
    <text>Oh…woops…I’m…errr…blind, thanks.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T18:01:47.000093</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; "frame" is within the compile-time environment. Maybe 26:40 at &lt;https://www.youtube.com/watch?v=Or_yKiI3Ha4&gt; will help explain. It's the script "E" in the model at &lt;https://www.cs.utah.edu/plt/scope-sets/model.html&gt;</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T18:03:28.000123</ts>
    <user>Lynna</user>
    <text>Your doc edits look plausible, but I'll have to check the implementation, too, to make sure</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T18:04:02.000203</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Thanks, I was actually 27 minutes into watching that talk for the third time. :) I’m about to leave, though, so I’ll pick it up again when I get home, or tomorrow if I don’t finish it tonight.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T18:54:25.000272</ts>
    <user>Marnie</user>
    <text>&lt;@Lynna&gt; My God, that guide section is _extremely_ helpful. Thank you so much. So many things make way more sense to me now.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T23:18:24.000102</ts>
    <user>Bertha</user>
    <text>Yes that's awesome -- thanks &lt;@Lynna&gt; !
&lt;https://github.com/racket/racket/commit/959a57d31f7da7f50e882c87bb5a2c825b1196c7&gt;</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T23:27:29.000132</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Another question, the objective-c ffi docs don’t seem to say how to extend an object’s constructor. (the `init` method?), is that possible?</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-17T23:41:35.000027</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I’m finally taking the time to read the model in detail. It’ll take me some time to understand all of it, but from what I’ve read so far, I still don’t understand how the concept of a “frame” in the new expander relates to concepts in either the talk or the model. Both portray the environment as a mapping from bindings to either variables or transformer procedures, which makes sense to me, and fits with my existing intuition, but in the new expander, a “frame” appears to be a property of a binding, which seems orthogonal. In `expander/syntax/full-binding`, a comment notes that `frame-id` is “used to trigger use-site scopes”, which makes me wonder if it’s related to \hat{Σ} in the model rather than ξ (assuming that’s what you meant by “script E”; I don’t see a script E anywhere, but maybe I missed what you’re referring to). IIUC, the talk doesn’t cover the details of tracking/pruning use-site scopes because it doesn’t deal with definitions, so my understanding of that process is still pretty fuzzy.

Also, I feel a little bad for dogpiling on you in this chain of mentions here, so to be clear, I don’t mind being told that now is not a good time for me to ask all these questions. :) I’m sure you’re plenty busy already without them, so I’ll focus on working through the model tomorrow, and maybe that will be enough to clear up my confusion.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-18T08:57:49.000127</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; I'm not much of an ObjC expert, but don't think it has constructors separate from methods. An object created by a class's `alloc` is a pile of zeros, and `init` is called by (strong) convention to fill that in. So, yes, override `init`.</text>
  </message>
  <message conversation_id="336">
    <ts>2018-04-18T09:03:24.000440</ts>
    <user>Carrol</user>
    <text>Init or make a separate class method to construct what you want but it all boils up through Init at some point. </text>
  </message>
  <message conversation_id="336">
    <ts>2018-04-18T09:04:17.000560</ts>
    <user>Carrol</user>
    <text>Alloc init setters is the basic pattern. It's been a while tho</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-18T09:17:27.000362</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; It's true that the model doesn't have a "frame", but `addr` in a `Defs` record plays that role. Since the model is limited to working with one definition context at a time, a definition context captures the whole current expander environment `ξ` and maps `addr` to it in the store `Σ`. Additions to the definition context add onto the `ξ` for `addr`. Then, the rule for `lexpand` can use that environment  (called `ξ_defs` at that rule) for expanding subexpressions.
If the model were written more explicitly in terms of frames, `addr` would start out mapped to an empty environment, and `lexpand` would append `ξ_defs` to the current expander environment `ξ`. 
Of course, in an implementation in a language with state (i.e., Racket), the store is `Σ` implicit, and `addr` is a frame object that is mutated. The content of the frame is effectively appended to the environment when the definition context is used. (Maybe it's an actual `append`; I forget and didn't look back at the code.)
I'll have to go refresh my memory on how `frame-id` is used to trigger use-site scopes.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-18T09:55:59.000196</ts>
    <user>Lynna</user>
    <text>Following up on `frame-id` in the implementation (which may not be the question you're asking, but just in case): that's used as an alternative to making the current expander context (i.e., `ctx`) have a "add use-site scope?" field and making sure the field is updated when entering a nested context. That is, the :add use-site scope?" field should be set to #f whenever a new set of bindings is added to the environment, but instead of trying to keep those things in sync, `frame-id` is used to determine when that hypothetical field should have been set to #f to be consistent.</text>
  </message>
  <message conversation_id="335">
    <ts>2018-04-18T11:48:09.000846</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; That makes sense, thanks.</text>
  </message>
  <message conversation_id="337">
    <ts>2018-04-18T11:48:59.000176</ts>
    <user>Odis</user>
    <text>It does look like to add proper screen reader support, I would have to add proper hooks in the canvas and editor interfaces. Which I’m happy to do, but that seems like a much bigger change.</text>
  </message>
  <message conversation_id="337">
    <ts>2018-04-18T11:49:34.000604</ts>
    <user>Odis</user>
    <text>(For example, you would want the screen reader to be aware of the lexer of the specific `#lang`, so it reads out proper tokens.</text>
  </message>
  <message conversation_id="337">
    <ts>2018-04-18T11:49:35.000558</ts>
    <user>Odis</user>
    <text>)</text>
  </message>
  <message conversation_id="337">
    <ts>2018-04-18T12:08:43.000521</ts>
    <user>Odis</user>
    <text>Although come to think of it, it could probably be as simple as adding an optional text description method to each snip, and then have the editor serialize those snips.</text>
  </message>
  <message conversation_id="337">
    <ts>2018-04-18T12:08:54.000628</ts>
    <user>Odis</user>
    <text>(Which as I understand it, it already does.)</text>
  </message>
  <message conversation_id="337">
    <ts>2018-04-18T12:10:21.000797</ts>
    <user>Odis</user>
    <text>Ehh…actually, never mind. Because in the case of text, what you want to read may cross-cut multiple snips. :disappointed:</text>
  </message>
  <message conversation_id="338">
    <ts>2018-04-18T12:27:11.000094</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I’m trying my best to understand, and I think I’m _starting_ to grok what you told me. I think I was confused by the way the typeset version of the model describes Σ as exclusively a binding store, but the actual model sticks other things in Σ as well, including definition environments. IIUC, those definition environments correspond to the `env-mixins` of the real expander’s internal definition contexts?</text>
  </message>
  <message conversation_id="338">
    <ts>2018-04-18T12:27:50.000291</ts>
    <user>Lynna</user>
    <text>Yes</text>
  </message>
  <message conversation_id="338">
    <ts>2018-04-18T12:37:06.000632</ts>
    <user>Carlyn</user>
    <text>So, given that, here’s where I’m currently confused: what you’re describing seems to reflect the way the model maps `addr` to `ξ`, and that `ξ` then becomes the mapping that the environment is extended with upon expansion. If `addr` corresponds to a frame, then I would expect the real expander to get the bindings added to that frame and add them to the environment in `local-expand`, as the model does. But in the real expander, `add-intdef-bindings` doesn’t use the frame id to look up what should be added to the environment, it just uses `internal-definition-context-env-mixins` directly. The frame id isn’t used there. So I’m confused how the two are related in the real expander.</text>
  </message>
  <message conversation_id="338">
    <ts>2018-04-18T12:48:08.000164</ts>
    <user>Lynna</user>
    <text>Ok, you're right that `env-mixins` is the part that's like `addr`. I see that `frame-id` is not always allocated alongside `env-mixins`, but can instead instead carry the enclosing context's frame id.</text>
  </message>
  <message conversation_id="338">
    <ts>2018-04-18T16:22:27.000341</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Thank you for your comment on that GH issue; that clears up everything, I think! I’ll try and update the PR to reflect my new understanding. However, I do have one followup question: does the intdef argument to `syntax-local-value` need to be relaxed to accept a list like `local-expand`? My feeling is that yes, it does, but I’m not completely sure.</text>
  </message>
  <message conversation_id="338">
    <ts>2018-04-18T16:24:53.000371</ts>
    <user>Carlyn</user>
    <text>(“Need” is probably a strong word, but I really mean “if I am using definition contexts this way and want to use `syntax-local-value` on something bound like in my example in the GH thread”.)</text>
  </message>
  <message conversation_id="339">
    <ts>2018-04-18T16:49:30.000478</ts>
    <user>Lynna</user>
    <text>That makes sense to me, too.</text>
  </message>
  <message conversation_id="338">
    <ts>2018-04-18T16:52:06.000408</ts>
    <user>Carlyn</user>
    <text>In the meantime, I realized that I think `syntax-local-bind-syntaxes` needs a list-of-intdefs argument as well, in case the RHS of a syntax binding uses `syntax-local-value`.</text>
  </message>
  <message conversation_id="340">
    <ts>2018-04-19T05:39:44.000391</ts>
    <user>Lynelle</user>
    <text>How come literal fx/flvectors are not allowed in read-syntax mode?</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T08:44:16.000100</ts>
    <user>Andreas</user>
    <text>I am trying to understand what happens when one does `racket -l errortrace -t prog.rkt`, however, I can't seem to find the source code for `errortrace` in the racket source. Where is this located?</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T08:47:08.000504</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; i was looking at `syntax-warn`. My main use case is to develop something like what I discussed in: &lt;https://groups.google.com/d/msg/racket-users/UtS3tov0u40/Xg0eOr3BAQAJ&gt;</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T08:48:03.000203</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; the idea is to have a config file set for my project such that it becomes part of CI to check if the commit follows the guidelines and if it doesn't, the commit gets reverted. Or is never committed if you use gerrit or a pre-commit hook.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T08:48:30.000108</ts>
    <user>Andreas</user>
    <text>It looks like a lot of the stuff is in place, but I cannot understand where to start to set a project-wide file with the syntax warnings I want.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:44:58.000169</ts>
    <user>Bertha</user>
    <text>&amp;gt; I can't seem to find the source code for `errortrace` in the racket source. Where is this located?

1. Do `raco pkg install raco-find-collection` to install &lt;@Carlita&gt;'s great utility.
2. Thereafter, do e.g. `raco fc errortrace` to see where it is on your system.
(In racket-mode, after doing 1, you can `M-x racket-find-collection`)

OR

In DrRacket try `Open Require Path` on the `File` menu.
In racket-mode try `M-x racket-open-require-path`.
These are incremental-search style.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:46:09.000701</ts>
    <user>Bertha</user>
    <text>Oops didn't &lt;@Andreas&gt;</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:46:49.000693</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; awesome, was unaware of this. thanks.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:47:46.000198</ts>
    <user>Andreas</user>
    <text>answer is here in a flash: `racket-6.12/share/pkgs/errortrace-lib/errortrace` thx</text>
  </message>
  <message conversation_id="342">
    <ts>2018-04-19T09:52:54.000887</ts>
    <user>Ezra</user>
    <text>I didn't know about errortrace - where does it shine in comparison to DrRacket debugging?</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:57:43.000953</ts>
    <user>Bertha</user>
    <text>Not 100% sure but will take a stab at this.
`errortrace` is a library takes a Racket program and rewrites it to be one that is "instrumented" for better stack traces, profiling, and/or coverage</text>
  </message>
  <message conversation_id="342">
    <ts>2018-04-19T09:58:26.000306</ts>
    <user>Carlyn</user>
    <text>DrRacket error reporting uses errortrace</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:58:28.000891</ts>
    <user>Bertha</user>
    <text>When using `racket` command-line, just doing `racket -l errortrace -t ‹prog›` will get you the better stack traces, as described here.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:58:40.000763</ts>
    <user>Bertha</user>
    <text>&lt;https://docs.racket-lang.org/errortrace/quick-instructions.html?q=errortrace&gt;</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:59:15.000021</ts>
    <user>Bertha</user>
    <text>As &lt;@Carlyn&gt; mentioned and I was about to say :smile:, DrRacket also uses the library to annotate programs.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:59:35.000540</ts>
    <user>Bertha</user>
    <text>To insert a "break?" function call (essentially) at every single step-able point.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T09:59:54.000727</ts>
    <user>Ezra</user>
    <text>OK, so it is both part of and complementary to DrRacket rather than alternative</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:00:00.000472</ts>
    <user>Bertha</user>
    <text>Ergo the step debugger on your program, is really rewriting your program to be a step-debuggable version of  your program.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:00:15.000495</ts>
    <user>Bertha</user>
    <text>Also ergo: Much slower. :slightly_smiling_face:  This isn't hardware breakpoints.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:00:56.000053</ts>
    <user>Ezra</user>
    <text>I will give it a try then, thank you both!</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:01:55.000742</ts>
    <user>Bertha</user>
    <text>In DrRacket, you can try it indirectly by choosing one of the profiling or debugging levels.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:03:28.000823</ts>
    <user>Bertha</user>
    <text>See `Language` | `Choose Language`, the radio buttons in upper-right corner</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:04:23.000565</ts>
    <user>Ezra</user>
    <text>ahh thanks, wouldn't find it myself!</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:05:46.000551</ts>
    <user>Ezra</user>
    <text>it's pretty weird place for debugging properties... me thinks</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:07:10.000176</ts>
    <user>Bertha</user>
    <text>Generally the whole menu location and operation of the `Choose Language` dialog is weird if you ask me ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:07:34.000264</ts>
    <user>Bertha</user>
    <text>But that is where the pot of gold is hidden. Now you know. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:08:56.000530</ts>
    <user>Ezra</user>
    <text>while we are at this - are there any resources (guides) that cover the racket debugging process? I wonder how many more gems I wasn't not aware of!</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:11:25.000006</ts>
    <user>Bertha</user>
    <text>So maybe this deserves a blog post, and it would be different among us, but.
I haven't used the DrRacket step debugger in, idk, years.
For me, it's sufficient to have better stack traces (via DrRacket or racket-mode option enabling that via errortrace).
Plus the REPL.
Plus `print`. :slightly_smiling_face:
Seriously.
When I wrote C and C++, I was zealous about "the first time you run new code, step through it in a debugger to see what it does".
But with Racket, I build things up in the REPL, and that is my "step debugging".</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:11:58.000585</ts>
    <user>Bertha</user>
    <text>Also for things like a long-running web-server, `print` ~= using Racket's logging with a reasonably well though-out approach to what logger names and levels to use.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:12:29.000011</ts>
    <user>Bertha</user>
    <text>I don't have any other "gems" to suggest, unless I'm forgetting something, but maybe other people do.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:13:54.000323</ts>
    <user>Bertha</user>
    <text>As a p.s. using the _macro step expander_ -- absolutely. If you don't have to use it, that's wonderful. But when you do need it, it's awesome.</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:15:42.000628</ts>
    <user>Ezra</user>
    <text>coming from .NET that's what I got used to (stepping through the code in VS) with Racket I mostly do `print` so wondered if I may be missing something :smiley:</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:23:35.000693</ts>
    <user>Bertha</user>
    <text>Oh, right. I swung by here actually to mention something else.
Strange Loop and RacketCon (and ICFP IIRC?) are same time this year.
Call for presentations has opened: &lt;https://thestrangeloop.com/cfp.html&gt;
Why not propose to give a talk at both? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="341">
    <ts>2018-04-19T10:24:02.000133</ts>
    <user>Bertha</user>
    <text>Also there's an opportunity grant: &lt;https://thestrangeloop.com/opportunity.html&gt;</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:10:18.000826</ts>
    <user>Lynna</user>
    <text>&lt;@Lynelle&gt; It wasn't obvious whether a shallow reading of fx/flvectors (i.e., content as numbers, as opposed to syntax objects) would be a good idea. If there's demand for a shallow reading, and unless there's some other obstacle I forget, we could change the reader to allow it.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:12:15.000556</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I’ve been spending some effort trying to clarify some of the docs around first-class definition contexts, and one of the things I’ve run into is how to talk about the binding environment. Is there any place in the reference in which the binding environment is discussed? As far as I can tell, the Syntax Model section describes two things: scope sets and the global binding table. But the global binding table is distinct from the local binding environment, which, unless I’m overlooking something, seems to be ignored.

Also, I’m also a bit curious about the phrasing around “lexical information”. The documentation describes lexical information as a distinct concept from scope sets, specifically by stating that “The lexical information of a syntax object is its scope set combined with the portion of the global table of bindings that is relevant to the syntax object’s set of scopes.” However, the following statement that “The lexical information in a syntax object is independent of the rest of the syntax object, and it can be copied to a new syntax object in combination with an arbitrary other Racket value” seems incongruous to me—the scope set can be copied from syntax object to syntax object, but surely not the global binding table? It’s *global*. I realize that, in practice, the binding table is not actually global and is instead distributed across the individual scopes, but this seems inconsistent with the abstraction provided by the documentation that treats the binding table as truly global and binding lookups defined entirely in terms of scope subset operations.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:13:38.000743</ts>
    <user>Carlyn</user>
    <text>Maybe this seems like nitpicking, and I imagine the distinction isn’t very important for the average user of the macro system, but I do want as much precision as I can manage, since it matters for my own understanding of the macro system.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:18:00.000493</ts>
    <user>Lynna</user>
    <text>Ideally, the docs would not talk about the expand-time environment, which seems like an implementation term. I would try to phrase it as the "expansion context", or something like that, but I don't know whether that would be the right choice.
"Lexical context" is a similar attempt to avoid committing to an implementation, which paid off in the renames-&amp;gt;sets transition. But I agree that it's not all that clear, and it may be better to commit to scope sets instead trying to hold "lexical context" abstract.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:28:46.000105</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; You can't set automatic project-wide defaults with a file yet, unfortunately. Tracking issue: &lt;https://github.com/jackfirth/syntax-warn/issues/46&gt;</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:29:58.000084</ts>
    <user>Marnie</user>
    <text>_However_ you could reduce the overhead by defining your common warning config in a module and requiring it</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:32:27.000046</ts>
    <user>Marnie</user>
    <text>Each of your modules would then look something like this:

```
#lang racket/base

(module warning-config racket/base
  (require my/project/warning-config)
  (define config my-warning-config)
  (provide config))

... module implementation ...
```</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:33:10.000117</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Wrt the expand-time environment, I see why it would be nice to avoid talking about it, but the fact that the docs _don’t_ talk about it has been very confusing to me in the past. It means there is no precise definition of what it means for an identifier to be used out of context, no precise explanation for why `syntax-local-value` might sometimes report an identifier as unbound when `identifier-binding` says it is bound, and no precise explanation for why providing a first-class definition context to `local-expand` is necessary in addition to adding the scopes with `internal-definition-context-introduce`. Those have all been big sources of confusion for me.

Also, I’m fine with using the “lexical information” term, since I agree that it makes sense to try and maintain some sort of abstraction from the implementation details of the expander when possible. It just seems like maybe it should be defined as precisely equivalent to the syntax object’s scope set, alongside a perhaps higher-level description of the meaning decoupled from the operational details of scope sets (which can be described as the low-level implementation of lexical information).</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:34:09.000562</ts>
    <user>Carlyn</user>
    <text>(In some sense, I think what I’m getting at is that the desire to have an abstraction makes sense, and that abstraction works well for most macro users, but once you get down into the details of first-class definition contexts and manipulating individual scopes with syntax introducers, the abstractions get pretty leaky.)</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:36:16.000131</ts>
    <user>Marnie</user>
    <text>There's various tricks you could do to make adding that to every module less annoying. For instance, you could define a macro in a helper module that expands to a definition of such a module:

```
(define-syntax-rule (warning-config)
  (module warning-config racket/base
    (require my/project/warning-config)
    (define config my-warning-config)
    (provide config)))
```

Then your modules would look like this:

```
#lang racket/base
(require ...)
(warning-config)
... implementation ...
```</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:36:59.000017</ts>
    <user>Marnie</user>
    <text>Could also make a small custom `#lang` that wraps `racket/base` like `#lang my/project/racket/base` and automatically add the module that way</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:40:12.000745</ts>
    <user>Marnie</user>
    <text>personally I'd really like if the syntax APIs just committed wholesale to the existence of scopes and scope sets with an exposed `scope?` predicate and functions like `make-scope` instead of `make-syntax-introducer`</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:40:45.000858</ts>
    <user>Marnie</user>
    <text>I find that easier to learn and I _especially_ find it easier to remember</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:42:21.000770</ts>
    <user>Marnie</user>
    <text>I haven't worked on this project since the raketcon I presented it at and I've forgotten some of these details. For instance, I said the other day that there's no way to configure things - that was totally wrong, there's submodule config but you can't configure things at the command line or through project-wide defaults.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:43:11.000234</ts>
    <user>Carlyn</user>
    <text>I agree that I would personally find such an API easier to use, but I think there are two significant downsides to such an API: it is pretty low-level, so it makes it harder to understand for casual macro users who don’t need to understand the implementation details of the Racket macro system, and it would have caused significant problems during the marks+renames-&amp;gt;scope sets change, as Matthew mentioned.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:43:54.000001</ts>
    <user>Carlyn</user>
    <text>One thing I have thought about/discussed with people in the past is the usefulness of splitting the macro system API into two levels of abstraction, which addresses the first problem but not the second.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:44:00.000492</ts>
    <user>Marnie</user>
    <text>huh, to me it feels high-level compared to the current api</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:44:43.000495</ts>
    <user>Carlyn</user>
    <text>The idea of names like `syntax-local-introduce` and `make-syntax-introducer` is that they describe what the functions are _for_, not how they are _implemented_.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:45:18.000286</ts>
    <user>Carlyn</user>
    <text>Otherwise they would be called `syntax-local-flip-use-site/macro-introduction-scopes` and `make-scope`.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:46:27.000772</ts>
    <user>Carlyn</user>
    <text>I do think that the notion of a “scope” is much easier to think about abstractly compared to marks… users can understand what a “scope” is in terms of their understanding of lexical scope in other languages without macro systems.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:48:15.000828</ts>
    <user>Carlyn</user>
    <text>So leaking the scope terminology into the docs and the API is probably not quite so bad. But my understanding of `syntax-local-introduce` is that it was originally intended to be a lighter way to break hygiene without resorting to heavier things like `datum-&amp;gt;syntax`, hence the name. That said, I get the sense it’s mostly failed at that purpose.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:49:23.000003</ts>
    <user>Marnie</user>
    <text>I understand that the idea of the current names is/was to not leak implementation details</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:50:06.000614</ts>
    <user>Andreas</user>
    <text>Thanks, makes sense. I have been wondering in the past few days that the community is large enough to have a weekly newsletter that would highlight new packages going into the repo, interesting packages being used by people, racket blog posts etc. It sounds like it could really help highlight what the racket community is doing, working on, etc. I love newsletters like the Rust weekly newsletter, so my opinion might be biased.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:50:50.000631</ts>
    <user>Andreas</user>
    <text>Thanks. I will take a look into that. It can't be that hard to add a project wide config file instead of having a per-module config.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:51:59.000173</ts>
    <user>Marnie</user>
    <text>They didn't feel high level to me though because the implementation is/was extremely difficult to intuit</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:52:30.000493</ts>
    <user>Marnie</user>
    <text>I didn't have a good way of understanding what the general model even was</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:55:18.000303</ts>
    <user>Marnie</user>
    <text>What do you think of using a module instead of a command line tool to check and fix warnings? That would make a project wide config much, much easier to implement</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:55:36.000415</ts>
    <user>Carlyn</user>
    <text>I mostly agree with you, which is why I said earlier the abstractions get pretty leaky at that point. I’m just trying to be understanding about the aspirational intent of the existing names. :)</text>
  </message>
  <message conversation_id="344">
    <ts>2018-04-19T11:56:50.000294</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; &lt;@Sunday&gt; and I have a question about the interaction of prompts and continuation marks and parameters. In particular, it seems like there's always a parameterization associated with the `parameterization-key` continuation mark, even in situations where the semantics suggest that nothing would be there. Here's a program that shows the issue -- I would expect all the calls to print `#f`, but 2 and 4 show a parameterization:
```
#lang racket
(require '#%paramz)
(define t (make-continuation-prompt-tag))
(define (test k tag)
  (call-with-continuation-prompt
   (λ ()
     (print
      (continuation-mark-set-first #f k #f tag)))
   tag
   (λ _ (error 'fail))))

(test 'p (default-continuation-prompt-tag)) (newline)
(test parameterization-key (default-continuation-prompt-tag)) (newline)

(test 'p t) (newline)
(test parameterization-key t) (newline)
```</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:57:40.000836</ts>
    <user>Marnie</user>
    <text>a scopes API feels high level to me because I can look at a function like `syntax-local-introduce` and guess that it's implemented with something like `(syntax-scopes-flip stx (syntax-local-scopes))`</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T11:58:08.000369</ts>
    <user>Marnie</user>
    <text>(assuming a documented and public `syntax-local-scopes` function)</text>
  </message>
  <message conversation_id="344">
    <ts>2018-04-19T12:00:48.000677</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt; &lt;@Sunday&gt; The correct name for `parameterization-key` would be `unsafe-parameterization-key`, but it predates the convention. The unchecked constraint that makes `parameterization-key` unsafe is that it should be used only with a particular internal prompt tag. Based on that unchecked assumption, there are some special cases in the Racket/Rumble layer to produce a `parameterization-key` value under all circumstances (because that simplifies the implementation of parameters).</text>
  </message>
  <message conversation_id="344">
    <ts>2018-04-19T12:02:50.000498</ts>
    <user>Lynna</user>
    <text>For now, looking at "src/cs/rumble/control.ss" is the best way to find out how `parameterization-key` is handled. In principle, that would be part of a Rumble spec.</text>
  </message>
  <message conversation_id="344">
    <ts>2018-04-19T12:03:54.000872</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; Right, I understand that it's internal but we're trying to get the implementation right in Pycket. It seems that there's either a "look past a prompt" behavior when looking for the continuation-mark associated with `parameterization-key` or every prompt installs a parameterization associated with that key when it's created. Is one of those the right behavior?</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T12:05:27.000663</ts>
    <user>Lynna</user>
    <text>Conceptually, every thread start's with a prompt for `the-root-continuation-prompt-tag` and (within that prompt) a mapping for `parameterization-key`. And the value for `parameterization-key` is always retreived using `the-root-continuation-prompt-tag`.</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T12:06:38.000358</ts>
    <user>Monserrate</user>
    <text>ok, that makes sense (and was not one of the possibilites I had thought of) so thanks</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T12:16:57.000691</ts>
    <user>Andreas</user>
    <text>you already have `raco warn` in place with a suitable command line `--config-submod`. Why not having a `raco warn` with `--mod` which is a module with the configuration that can default to `warnings.rkt` in the project root or something.</text>
  </message>
  <message conversation_id="344">
    <ts>2018-04-19T12:22:44.000664</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; &lt;@Marnie&gt; I'm all for improvements to the documentation, terminology, and API along those lines – and hoping that you'll get to them before I would!</text>
  </message>
  <message conversation_id="343">
    <ts>2018-04-19T12:24:17.000160</ts>
    <user>Carlyn</user>
    <text>I’m currently interested in improving the documentation! I’m working on a PR as we speak. I’m just feeling like I need to mention the expand-time environment somehow. If I added a subsection to the Syntax Model section that discussed it in an appropriately-abstract way, would that be a reasonable thing to do?</text>
  </message>
  <message conversation_id="344">
    <ts>2018-04-19T12:24:33.000367</ts>
    <user>Lynna</user>
    <text>Yes, that sounds right</text>
  </message>
  <message conversation_id="344">
    <ts>2018-04-19T12:24:46.000369</ts>
    <user>Carlyn</user>
    <text>Okay, I’ll give that a shot. Thank you.</text>
  </message>
  <message conversation_id="344">
    <ts>2018-04-19T12:41:44.000102</ts>
    <user>Marnie</user>
    <text>&lt;@Lynna&gt; eventually! :)</text>
  </message>
  <message conversation_id="345">
    <ts>2018-04-19T12:52:05.000085</ts>
    <user>Marnie</user>
    <text>Yup that works too. My thinking is that switches like that usually get used in CI scripts, they're not often typed out by a human trying to use the tool interactively. And if it's being used in a script - which is a program in of itself - why not just do it in a racket module with a language where you get editor support and more safety?</text>
  </message>
  <message conversation_id="344">
    <ts>2018-04-19T13:55:49.000110</ts>
    <user>Lynelle</user>
    <text>&lt;@Lynna&gt; thanks for replying (about literal fxvectors) but i fail to understand.  would you please give an example where a literal fxvector would be problematic</text>
  </message>
  <message conversation_id="346">
    <ts>2018-04-19T14:14:35.000532</ts>
    <user>Carrol</user>
    <text>this really should be a section in the guide… (debugging)</text>
  </message>
  <message conversation_id="346">
    <ts>2018-04-19T14:15:47.000190</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Would you prefer the terminology “binding environment”, “binding context”, or something else for the expander’s environment that maps bindings to transformers?</text>
  </message>
  <message conversation_id="346">
    <ts>2018-04-19T14:16:11.000291</ts>
    <user>Carlyn</user>
    <text>I can’t really use “expansion context” because that’s currently used to mean top-level/module-begin/module/expression/internal-definition.</text>
  </message>
  <message conversation_id="347">
    <ts>2018-04-19T15:06:07.000011</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; &lt;@Eileen&gt; &lt;@Dia&gt; This ones a doozy. Apparently: installed-packages + DrRacket + symlinks = :disappointed:. &lt;https://github.com/racket/racket/issues/2050&gt;</text>
  </message>
  <message conversation_id="347">
    <ts>2018-04-19T15:06:52.000079</ts>
    <user>Odis</user>
    <text>I’m not even sure where to begin digging for this one. :confused:</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:32:14.000298</ts>
    <user>Lynelle</user>
    <text>Is there any way to access the bytes of a string instead of doing a deep copy?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:34:07.000237</ts>
    <user>Carlyn</user>
    <text>Strings are semantically sequences of unicode code points, not bytes. Why do you want the bytes/what do you want to do with them?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:34:51.000616</ts>
    <user>Lynelle</user>
    <text>crc32 checksum</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:35:33.000668</ts>
    <user>Lynelle</user>
    <text>something like (immutable-string-&amp;gt;immutable-bytes ...) would be comfy</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:35:50.000082</ts>
    <user>Carlyn</user>
    <text>What encoding are you using?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:36:15.000707</ts>
    <user>Lynelle</user>
    <text>utf8</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:37:30.000083</ts>
    <user>Carlyn</user>
    <text>Why isn’t `string-&amp;gt;bytes/utf-8` good enough? You don’t want to copy the data?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:39:57.000436</ts>
    <user>Lynelle</user>
    <text>i would prefer not</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:40:25.000379</ts>
    <user>Carlyn</user>
    <text>Are you worried about the memory footprint of duplicating the data in memory or the cost of reencoding?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:41:43.000595</ts>
    <user>Lynelle</user>
    <text>both</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:42:00.000426</ts>
    <user>Carlyn</user>
    <text>How big is the data in question?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:42:02.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynelle&gt; Can I ask how big the strings are that you plan on dealing with?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:42:17.000014</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; lol. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:42:36.000640</ts>
    <user>Carrol</user>
    <text>I’d ask a slightly different question: have you measured this to objectively show that it is actually a problem?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:42:38.000460</ts>
    <user>Odis</user>
    <text>&lt;@Lynelle&gt; Basically, depending on what you’re doing, this can be a bad idea.</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:42:45.000651</ts>
    <user>Lynelle</user>
    <text>i don't really know, i am implementing a small wiki</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:42:48.000398</ts>
    <user>Odis</user>
    <text>&lt;@Lynelle&gt; you _can_ do it, but its very unsafe.</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:43:05.000127</ts>
    <user>Lynelle</user>
    <text>i may found a solution by using string-utf-8-length  with unsafe-string-ref</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:43:12.000467</ts>
    <user>Carlyn</user>
    <text>&lt;@Carrol&gt; I was trying to be a little more socratic, but that’s more or less what I was getting at.</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:44:56.000242</ts>
    <user>Carrol</user>
    <text>md5 function doco pointed me at `(hex-string-&amp;gt;bytes str)`</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:45:25.000186</ts>
    <user>Carrol</user>
    <text>it’d be nice if it didn’t require an input-port, but that seems easy enough.</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:46:30.000238</ts>
    <user>Lynelle</user>
    <text>what shall be the result of `(char=? (string-ref "≠" 0) #\≠)`?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:47:06.000206</ts>
    <user>Carlyn</user>
    <text>Why don’t you run it and see?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:47:12.000554</ts>
    <user>Lynelle</user>
    <text>it gave me #f</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:47:32.000392</ts>
    <user>Carlyn</user>
    <text>It gives me `#t`. How are you running it?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:47:44.000535</ts>
    <user>Lynelle</user>
    <text>racket-mode repl in emacs</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:48:11.000623</ts>
    <user>Lynelle</user>
    <text>maybe due to how emacs encode the input</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:48:16.000627</ts>
    <user>Alesha</user>
    <text>it gives me `#t` in Emacs racket-mode repl</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:48:28.000640</ts>
    <user>Alesha</user>
    <text>check your Emacs encoding</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:48:39.000303</ts>
    <user>Odis</user>
    <text>What does the `(string-ref ...)` call return for you?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:48:58.000034</ts>
    <user>Lynelle</user>
    <text>it does return #\`</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:49:23.000253</ts>
    <user>Odis</user>
    <text>Ah, okay, so  it seems like for the rest of us its #\≠</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:49:40.000561</ts>
    <user>Odis</user>
    <text>Where are you located?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:50:53.000439</ts>
    <user>Odis</user>
    <text>(Namely what language are you using, also what OS are you using?)</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:51:23.000133</ts>
    <user>Alesha</user>
    <text>&lt;@Lynelle&gt; try `C-h v` `buffer-file-coding-system` and see what its reported value is</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:52:38.000409</ts>
    <user>Lynelle</user>
    <text>i am from western europe, my os is archlinux and the language is english. &lt;@Alesha&gt; Its value is ‘utf-8’</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:54:39.000576</ts>
    <user>Alesha</user>
    <text>hmm, not sure why you're not getting `#\≠` then sorry am not of much help</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:55:54.000117</ts>
    <user>Alesha</user>
    <text>sounds like could be a OS level setting, instead of emacs, since the racket repl is communicating back to a Racket process running under archlinux</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:56:07.000712</ts>
    <user>Odis</user>
    <text>Can you try running:

```
(char-utf-8-length (string-ref "≠" 0))
```</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:56:50.000240</ts>
    <user>Odis</user>
    <text>As well as:

```
(char-utf-8-length #\≠)
```</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:58:19.000394</ts>
    <user>Lynelle</user>
    <text>&lt;@Alesha&gt; no problem, thank anyway. &lt;@Odis&gt; 1 and 3</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:59:11.000175</ts>
    <user>Odis</user>
    <text>Ya…somethings up here. Can you run:</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:59:18.000555</ts>
    <user>Odis</user>
    <text>```
(current-locale)
```</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:59:53.000641</ts>
    <user>Lynelle</user>
    <text>gives `""`</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T15:59:55.000395</ts>
    <user>Odis</user>
    <text>For me its just the empty string</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:00:28.000680</ts>
    <user>Odis</user>
    <text>Hmm….okay. So I’m inclined to think its not Racket proper, and its not an emacs thing based on &lt;@Alesha&gt;…</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:00:43.000793</ts>
    <user>Odis</user>
    <text>so, can you try the experiment again in DrRacket, just to make sure?</text>
  </message>
  <message conversation_id="349">
    <ts>2018-04-19T16:01:20.000614</ts>
    <user>Bertha</user>
    <text>&lt;@Alesha&gt; The racket-mode REPL does do an explicit `(set-process-coding-system (get-buffer-process racket--repl-buffer-name) 'utf-8 'utf-8)` which I think should cover it
The length of this chapter is one of the few things that makes me sad about Emacs: &lt;https://www.gnu.org/software/emacs/manual/html_node/emacs/International.html#International&gt;</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:02:18.000188</ts>
    <user>Lynelle</user>
    <text>the only settings about encoding in my emacs init file are
```
;; enable UTF-8
(set-language-environment "UTF-8")
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8
      x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
```</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:03:05.000261</ts>
    <user>Bertha</user>
    <text>&lt;@Lynelle&gt; if you put point on the ≠ character in the REPL, then do `C-x C-u =`, what do you get? I get:
```
             position: 199587 of 199610 (100%), column: 30
            character: ≠ (displayed as ≠) (codepoint 8800, #o21140, #x2260)
    preferred charset: unicode (Unicode (ISO10646))
code point in charset: 0x2260
               script: symbol
               syntax: . 	which means: punctuation
             category: .:Base, c:Chinese, h:Korean, j:Japanese
             to input: type "C-x 8 RET 2260" or "C-x 8 RET NOT EQUAL TO"
          buffer code: #xE2 #x89 #xA0
            file code: #xE2 #x89 #xA0 (encoded by coding system utf-8-unix)
              display: by this font (glyph code)
    mac-ct:-*-Menlo-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1 (#x7F8)

Character code properties: customize what to show
  name: NOT EQUAL TO
  general-category: Sm (Symbol, Math)
  decomposition: (61 824) ('=' '̸')

There are text properties here:
  face                 font-lock-string-face
  fontified            t
  front-sticky         t
```</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:03:23.000188</ts>
    <user>Lynelle</user>
    <text>drract gives the correct result</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:03:29.000651</ts>
    <user>Lynelle</user>
    <text>drracket*</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:06:29.000135</ts>
    <user>Odis</user>
    <text>Okay ya. In that case I won’t be of much help. But its probably either something with your emacs installation, or the pipe that emacs-mode uses….sooo… &lt;@Bertha&gt;? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:07:32.000379</ts>
    <user>Lynelle</user>
    <text>&lt;@Bertha&gt; C-x C-u opens a prompt saying "You have typed C-x C-u, invoking disabled command upcase-region. ..."</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:08:10.000147</ts>
    <user>Bertha</user>
    <text>Ugg sorry I meant `C-u C-x =`</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:09:15.000342</ts>
    <user>Lynelle</user>
    <text>```
             position: 2377 of 2435 (98%), column: 37
            character: ≠ (displayed as ≠) (codepoint 8800, #o21140, #x2260)
    preferred charset: unicode-bmp (Unicode Basic Multilingual Plane (U+0000..U+FFFF))
code point in charset: 0x2260
               script: symbol
               syntax: . 	which means: punctuation
             category: .:Base, c:Chinese, h:Korean, j:Japanese
             to input: type "C-x 8 RET 2260" or "C-x 8 RET NOT EQUAL TO"
          buffer code: #xE2 #x89 #xA0
            file code: #xE2 #x89 #xA0 (encoded by coding system utf-8)
              display: by this font (glyph code)
    xft:-PfEd-Unifont-normal-normal-normal-*-16-*-*-*-d-0-iso10646-1 (#x2263)

Character code properties: customize what to show
  name: NOT EQUAL TO
  general-category: Sm (Symbol, Math)
  decomposition: (61 824) ('=' '̸')

There are text properties here:
  fontified            t
  front-sticky         t
```</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:11:11.000528</ts>
    <user>Lynelle</user>
    <text>okay it's fixed, thank you all.</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:12:07.000204</ts>
    <user>Bertha</user>
    <text>&lt;@Lynelle&gt; Oh. Good. How?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:13:48.000290</ts>
    <user>Lynelle</user>
    <text>i am embarrassed, it's my fault. a few hours ago, i typed in the repl
```
(require (filtered-in (λ (name)
                        (regexp-replace #rx"unsafe-" name ""))
                      racket/unsafe/ops))
```</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:14:14.000518</ts>
    <user>Lynelle</user>
    <text>completly forgot</text>
  </message>
  <message conversation_id="349">
    <ts>2018-04-19T16:15:37.000025</ts>
    <user>Bertha</user>
    <text>Oh and `(char=? (unsafe-string-ref "≠" 0) #\≠)` is `#f`.</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:15:44.000575</ts>
    <user>Alesha</user>
    <text>oh so you were actually using a unsafe version of `string-ref` and corrupted something in the Racket process?</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:15:59.000567</ts>
    <user>Alesha</user>
    <text>ah I see cool</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:16:15.000576</ts>
    <user>Lynelle</user>
    <text>yes unsafe-string-ref was aliased as string-ref</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:17:10.000163</ts>
    <user>Bertha</user>
    <text>Oh and the doc says
&amp;gt; The unsafe-string-ref procedure can be used only when the result will be a Latin-1 character.
Huh.</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:19:19.000202</ts>
    <user>Bertha</user>
    <text>Well, to take a step back, I think Lexi and Leif had some good suggestions. For a small wiki, it might make sense to start off not prioritizing speed and space?
I mean it's up to you, but I might try the thing where I make it work, first, then if/as necessary make it faster, later.</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:19:58.000321</ts>
    <user>Bertha</user>
    <text>On the other hand, you're discovering nooks and crannies of Racket I never knew about, so if that's your goal, that's awesome. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:20:33.000517</ts>
    <user>Lynelle</user>
    <text>i am implementing crc32-c, i should probably use the safe operations during development and only turn on the unsafe operations after it's done. &lt;http://pasterack.org/pastes/58907&gt;</text>
  </message>
  <message conversation_id="348">
    <ts>2018-04-19T16:21:40.000680</ts>
    <user>Bertha</user>
    <text>Oh cool.
Yeah, myself, I guess the years have worn down the rough edges. Nowadays, edge cases mostly just make me... edgy. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T17:54:46.000414</ts>
    <user>Daria</user>
    <text>hello, I'm really having problems getting this to type.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T17:55:57.000242</ts>
    <user>Daria</user>
    <text>I have the impression that the (polymorphic) hash-ref function should have a few more cases than the type-checker actually considers.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T17:56:13.000049</ts>
    <user>Daria</user>
    <text>Or maybe I'm just missing something important.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T17:57:28.000119</ts>
    <user>Daria</user>
    <text>My usual approach is to spam the code with anns and asserts. To no effect on this one.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T18:04:33.000215</ts>
    <user>Carlyn</user>
    <text>&lt;@Daria&gt; Try using `(hash-ref my-hash "blub" (λ () '()))` instead of `(hash-ref my-hash "blub" '())`. TR can’t cope with an arbitrary value for the failure-thunk argument.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T18:07:26.000319</ts>
    <user>Daria</user>
    <text>interesting.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T18:08:16.000317</ts>
    <user>Daria</user>
    <text>it works.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T18:08:47.000393</ts>
    <user>Daria</user>
    <text>I was sure, the type spec said it should work also without a thunk.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T18:10:33.000019</ts>
    <user>Daria</user>
    <text>no, you're right, I'm just blind. Thanks a lot.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T18:13:05.000003</ts>
    <user>Daria</user>
    <text>I ran in a similar misunderstanding with typed Racket's log function. But I guess I'll just have to accept that Racket and typed Racket are two completely separate languages.</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T18:22:20.000215</ts>
    <user>Marnie</user>
    <text>is the wiki meant to be a web app / website of some sort? as a general rule of thumb, network-based programs will spend most of their time waiting on other servers and on bytes getting shuffled over the network / filesystem, so I think you won't see any speedup at all with unsafe string operations</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-19T18:22:52.000242</ts>
    <user>Marnie</user>
    <text>(also, cool project!)</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-20T00:34:36.000039</ts>
    <user>Shan</user>
    <text>I’m trying to implement metadata tags that will allow our HtDP students to make more formalized annotations about their design.  This will also allow us to implement some grading support technology we’re working on.  As a small example, we want students to write a simple function design as follows:

```(@Problem 4)

(@HtDF fraction)
;; Number Number -&amp;gt; Number
;; produce result of dividing smaller number by larger
(check-expect (fraction 3 4) .75)
(check-expect (fraction 4 3) .75)
(check-expect (fraction 2 2) 1)

(@template Number add-param)

(define (fraction x y)
  (if (&amp;lt; x y)
      (/ x y)
      (/ y x)))```

I’m working on providing basic syntactic checking for the @tags.  What I’m stuck at is arranging for a tag like (@HtDF fraction) to raise an error if the function fraction is in fact not defined.

I was hoping to find some kind of generic module evaluation cleanup phase that @HtDF could leave work behind for.  I sort of managed to beat this into the test engine, but it doesn’t work well.  I’m reluctantly starting to think that I’m going to have to do something like `rewrite-module` does (htdp/htdp-lig/lang/run-teaching-program.rkt) in terms of adding my own cleanup phase so I can check to be sure the functions referenced by @HtDF have been defined.  But ugh. That seems like a lot of work.

Is there some game I can play with phases to check the existence of a definition after all the definitions are processed?  Here’s what I have now, which is just playing around and doesn’t really work.  The use of check-expect-maker was just an experiment. It ends up achieving the right testing, but it makes there be a test that doesn’t really exist.  

```(define-syntax (@HtDF stx)
  (syntax-case stx ()
    [(_ id ...)
     (let ([id-stxs (syntax-e #'(id ...))])
       (when (empty? id-stxs)
         (raise-syntax-error #f "expected at least one function name after @HtDF" stx))
       (for ([i id-stxs])
            (unless (symbol? (syntax-e i))
              (raise-syntax-error #f "expected a function name" stx i)))
       #;
       #'(for ([id-stx (list 'id ...)])
              (send (send (get-test-engine) get-info) add-wish id-stx))
       #;
       (check-expect-maker stx #'check 
                         
                           #'(list (identifier-binding #'id 0 #t) ...)
                           (list #'(list #'id ...))
                           'comes-from-@HtDF)
       #'(values))]))

(define (check tst actual src engine)
  (for ([bdg (tst)]
        [stx actual])
       (unless bdg
         (raise-syntax-error #f "No function definition" tst stx))))```</text>
  </message>
  <message conversation_id="351">
    <ts>2018-04-20T03:41:19.000248</ts>
    <user>Andreas</user>
    <text>Yes, that's was the suggestion. To have it in a module, but not with code, to make it project wide. I have forked it into &lt;https://github.com/LinkiTools/syntax-warn&gt; and will give a try implementing this.</text>
  </message>
  <message conversation_id="351">
    <ts>2018-04-20T03:42:03.000208</ts>
    <user>Marnie</user>
    <text>Wow, what a coincidence - I've spent some time lately on almost this exact problem. Even called my implementation "annotations" and used `@foo` as a naming convention.</text>
  </message>
  <message conversation_id="351">
    <ts>2018-04-20T03:43:10.000314</ts>
    <user>Marnie</user>
    <text>(Java is one helluva drug)</text>
  </message>
  <message conversation_id="350">
    <ts>2018-04-20T06:30:29.000234</ts>
    <user>Eugena</user>
    <text>&lt;@Shan&gt; Modules (and internal definition contexts like lambda bodies) are expanded in 2 *passes* (we use the word *phase* to mean something else). The first pass uncovers and processes module-level definitions and requires so that at the end of the first pass, the module's top-level environment is known and fixed. During the first pass, the expander stops whenever it hits an expression. The second pass goes back over the module body and expands the expressions.
So to check that something is defined, you want to arrange for the macro that actually does the check to be expanded during pass 2. The easiest way to do that is for your main macro, `@HtDF`, to unconditionally expand into uses of a helper macro (let's call it `check-defined-here`) within an `#%expression` wrapper.
```
;; (@HtDF id ...) : module-level-form
;; Raises an error at compile time if any id is not defined somewhere
;; in the current module (as a function?).
;; (@HtDF id ...) =&amp;gt; (begin (#%expression (check-defined-here id)) ...)
```
Then your helper macro can actually do the checking using `identifier-binding` or whatever. If you want to be extra cautious, you can have the macro explicitly check its precondition (that it is used in pass 2) by making sure that `(syntax-local-context)` returns `'expression`. Likewise, if you want to only allow `@HtDF` at module-top-level or (interactive) top-level, you could have it check its `(syntax-local-context)` too.</text>
  </message>
  <message conversation_id="352">
    <ts>2018-04-20T15:18:22.000127</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Can you explain to me why this program fails with an unbound identifier error?
```
#lang racket
(define-syntax (m stx)
  (syntax-local-lift-require #'racket/base (datum-&amp;gt;syntax #f '(void))))
(m)
```
```
void: unbound identifier;
 also, no #%app syntax transformer is bound
  at: void
  in: (void)
  context...:
   #(2951 macro) #(2953 macro) [common scopes]
  other binding...:
   #(void #&amp;lt;module-path-index:'#%runtime&amp;gt; 0)
   #(9 module) #(2953 macro) [common scopes]
  other binding...:
   #(void #&amp;lt;module-path-index:'#%runtime&amp;gt; 0)
   #(9 module) [common scopes]
  common scopes...:
   #(2320 module lift-require)
```
It seems like the identifier is missing the `#(9 module)` scope, but I don’t have an intuition for what exactly that means in this case. Is there a reason `syntax-local-lift-require` doesn’t add the module’s scope?</text>
  </message>
  <message conversation_id="352">
    <ts>2018-04-20T15:23:42.000393</ts>
    <user>Carlyn</user>
    <text>It works fine if I do `(syntax-local-lift-require 'racket/base (datum-&amp;gt;syntax #f '(void)))`, instead, so I guess it’s just that the lexical context on the require spec is meaningful, which is less interesting than I thought.</text>
  </message>
  <message conversation_id="351">
    <ts>2018-04-20T15:32:35.000369</ts>
    <user>Lynna</user>
    <text>It would have taken me a while to figure that out, but I think you're right.</text>
  </message>
  <message conversation_id="351">
    <ts>2018-04-20T16:02:33.000471</ts>
    <user>Lynna</user>
    <text>&lt;@Lynelle&gt; I remember now why fxvectors and flvectors are not allowed with `read-syntax`. It's because there are currently no immutable variants of those datatypes.</text>
  </message>
  <message conversation_id="351">
    <ts>2018-04-20T16:03:36.000592</ts>
    <user>Carrol</user>
    <text>could they expand into something that always dup’s them when used as literals?</text>
  </message>
  <message conversation_id="351">
    <ts>2018-04-20T16:12:57.000562</ts>
    <user>Lynelle</user>
    <text>&lt;@Lynna&gt; i see.  Aren't fxvector and normal vector sharing the same C structure (Scheme_Vector)?</text>
  </message>
  <message conversation_id="351">
    <ts>2018-04-20T16:28:54.000011</ts>
    <user>Lynna</user>
    <text>&lt;@Carrol&gt; We don't currently have a way for read-level things to imply a particular expansion, although we have thought about ways to enable that</text>
  </message>
  <message conversation_id="351">
    <ts>2018-04-20T16:31:15.000267</ts>
    <user>Lynna</user>
    <text>&lt;@Lynelle&gt; It's not a question of how immutable would be represented, but just adding all the things (new functions and checks on mutating functions) to support immutable values. We can add all that for fxvectors and flvectors if it's useful, but it seemed too tedious to add absent any demand.</text>
  </message>
  <message conversation_id="353">
    <ts>2018-04-20T18:31:46.000218</ts>
    <user>Shan</user>
    <text>&lt;@Eugena&gt; Thanks that's working well now.</text>
  </message>
  <message conversation_id="354">
    <ts>2018-04-20T19:37:10.000161</ts>
    <user>Temika</user>
    <text>what is the point of boxes? theyre kind of explained in PLAI 8.1 Mutable Structures as a way to introduce mutation</text>
  </message>
  <message conversation_id="354">
    <ts>2018-04-20T19:37:16.000101</ts>
    <user>Temika</user>
    <text>but if racket already has mutation</text>
  </message>
  <message conversation_id="354">
    <ts>2018-04-20T19:37:32.000075</ts>
    <user>Temika</user>
    <text>is that just a way to make it obvious ?</text>
  </message>
  <message conversation_id="354">
    <ts>2018-04-20T19:40:08.000234</ts>
    <user>Temika</user>
    <text>oh, should have googled better. this thread kind of explained it to me: &lt;https://lists.racket-lang.org/users/archive/2010-October/042446.html&gt;</text>
  </message>
  <message conversation_id="355">
    <ts>2018-04-20T22:17:25.000072</ts>
    <user>Aimee</user>
    <text>cosmez: I think you can pass boxes around and let others modify the same box
there's no such thing for variables / bindings</text>
  </message>
  <message conversation_id="356">
    <ts>2018-04-21T10:54:39.000117</ts>
    <user>Bertha</user>
    <text>Ha yes boxes confused me, too.
My current understanding:
I rarely use boxes.
Often parameters -- not function args, I mean `make-parameter` parameters -- are a nice way to hold mutable state.
Now, parameter values are per-thread. Often that is nice and exactly what you want.
When all threads should share one value, sometimes a nice way to express that is to use a box and update it atomically with `box-cas!`
&lt;https://docs.racket-lang.org/reference/boxes.html#%28def._%28%28quote._~23~25kernel%29._box-cas%21%29%29&gt;</text>
  </message>
  <message conversation_id="356">
    <ts>2018-04-21T10:55:50.000120</ts>
    <user>Bertha</user>
    <text>You can also build on top of that to do things like Clojure's swap! for refs, e.g. a `box-swap!`
&lt;https://docs.racket-lang.org/rackjure/index.html#%28def._%28%28lib._rackjure%2Futils..rkt%29._box-swap%21%29%29&gt;</text>
  </message>
  <message conversation_id="354">
    <ts>2018-04-21T10:57:16.000103</ts>
    <user>Bertha</user>
    <text>&lt;@Temika&gt; ^</text>
  </message>
  <message conversation_id="356">
    <ts>2018-04-21T10:57:36.000042</ts>
    <user>Bertha</user>
    <text>So that's my current understanding, which is maybe still not quite complete or correct, but... ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="354">
    <ts>2018-04-21T14:56:08.000047</ts>
    <user>Temika</user>
    <text>parameter value per-thread. that means if i create a parameter outside the trade scope, it will create a copy for that thread ?</text>
  </message>
  <message conversation_id="356">
    <ts>2018-04-21T23:03:42.000063</ts>
    <user>Bertha</user>
    <text>Yes parameters are built on top of thread cells. A new thread initially inherits a copy of the value. Thereafter the value is independent.</text>
  </message>
  <message conversation_id="356">
    <ts>2018-04-21T23:05:44.000016</ts>
    <user>Bertha</user>
    <text>&lt;https://docs.racket-lang.org/reference/parameters.html&gt;</text>
  </message>
  <message conversation_id="356">
    <ts>2018-04-21T23:08:49.000010</ts>
    <user>Bertha</user>
    <text>&lt;https://docs.racket-lang.org/reference/eval-model.html#%28part._parameter-model%29&gt;</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-22T15:29:24.000118</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I’ve realized the first argument to `syntax-local-make-definition-context` does something different on Racket 6, which probably reflects what the documentation used to claim. Do you think it is worth changing the Racket 7 expander to emulate the old behavior?</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-22T21:25:16.000097</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; As long as the difference isn't causing a problem, I'm inclined to stick with the new &lt;http://behavior.My|behavior.My&gt; read was that the old docs didn't really explain the old behavior, and that's partly the reason that it seems ok to me to change and improve it (assuming that the new behavior can count as an improvement).</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-22T23:23:06.000104</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I did end up writing a program that compiled on Racket 7 but failed in CI on Racket 6, so the difference does seem like it could potentially cause a problem. Namely, it seems that chained definition contexts in Racket 6 would introduce their parent context’s bindings when evaluating RHSs with `syntax-local-bind-syntaxes`, but Racket 7 doesn’t.</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-22T23:30:55.000179</ts>
    <user>Carlyn</user>
    <text>The previous docs were not really incorrect on that point. They pretty much described the behavior accurately.</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-22T23:32:24.000024</ts>
    <user>Carlyn</user>
    <text>It doesn’t seem like it would be too difficult to restore the behavior in the new expander, either, which would require the restoration of some of that documentation. Fortunately, I think the other changes I made as part of that PR still make sense even if we restore that behavior in the new expander, so the work wouldn’t be wasted.</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-23T00:12:13.000138</ts>
    <user>Carlyn</user>
    <text>If we _don’t_ adjust the new expander to perform the behavior of the old expander, we should at least add a `@history` annotation.</text>
  </message>
  <message conversation_id="358">
    <ts>2018-04-23T10:12:05.000778</ts>
    <user>Bertha</user>
    <text>&lt;@Jackqueline&gt; or &lt;@Franklin&gt;: Do you understand what this person has in mind? If so, could you maybe please chime in, there or here?  (If not, no worries.) Thank you. &lt;https://github.com/greghendershott/frog/issues/215&gt;</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-23T11:14:47.000864</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Another data point: this program produces `#&amp;lt;syntax x&amp;gt;` on Racket 7 (which would turn into an unbound identifier error if left to expand further) but `#&amp;lt;syntax values&amp;gt;` on Racket 6.
```
#lang racket

(begin-for-syntax
  (define x-id #'x)
  (define y-id #'y)

  (define intdef-ctx-a (syntax-local-make-definition-context))
  (syntax-local-bind-syntaxes (list x-id) #'(make-rename-transformer #'values) intdef-ctx-a)

  (define intdef-ctx-b (syntax-local-make-definition-context intdef-ctx-a))
  (define x_a-id (internal-definition-context-introduce intdef-ctx-a x-id))
  (syntax-local-bind-syntaxes (list y-id) #`(make-rename-transformer #'#,x_a-id) intdef-ctx-b)

  (println (local-expand y-id 'expression '() intdef-ctx-b)))
```</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-23T11:43:32.000357</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; Which behavior do you think is better in the long run?</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-23T11:48:13.000138</ts>
    <user>Carlyn</user>
    <text>After some consideration, I think the Racket 6 behavior is better. It better reflects how the expander reasons about nested definition contexts, since the bindings from surrounding definition contexts should always be in the local binding context when expanding nested definitions, and that behavior should be decoupled from the implicit introduction of internal-definition contexts’ scopes. As far as I can tell, the implicit introduction of the bindings essentially has no downsides—that is, the user would never want or need to opt out of it—precisely because it does not add any scopes and thus only turns out-of-context uses into in-context uses. The only potential downside (and this is a stretch) is that parent definition contexts might not be able to be GC’d as early, but that seems irrelevant given most uses of definition contexts in this way would need to retain the parent contexts, anyway.

In any case, implementing the Racket 6 behavior is not hard. I have done it on a branch, and I’m just working on tests and documentation. I’ll open a PR soon.</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-23T11:53:17.000140</ts>
    <user>Lynna</user>
    <text>Ok, good!</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-23T12:11:33.000358</ts>
    <user>Carlyn</user>
    <text>Alright, opened a PR here: &lt;https://github.com/racket/racket/pull/2053&gt;</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-23T13:52:37.000212</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Could I ask you for your input on this? &lt;https://github.com/racket/racket/issues/2052&gt; I think being able to do something like this would be able to solve two problems I currently have (one in Hackett, one elsewhere), but I understand why `syntax-local-lift-require` as it currently works doesn’t make sense in a `'module-begin` context (since there’s nowhere to lift the `#%require` to). In theory, though, it seems like it would be possible to add the scope/bindings and then arrange for the `#%require` to be inserted after `#%plain-module-begin` is exposed, which seems like it would solve the problem. I don’t know for sure, though.</text>
  </message>
  <message conversation_id="359">
    <ts>2018-04-24T04:22:54.000313</ts>
    <user>Marnie</user>
    <text>I somehow found myself in a spot where `(syntax-local-value id)` returns a value (specifically, `'foo`) but `(syntax-local-value/immediate id)` raises `syntax-local-value/immediate: not defined as syntax`. That seems like something that should never happen, did I find a bug?</text>
  </message>
  <message conversation_id="357">
    <ts>2018-04-24T10:07:57.000045</ts>
    <user>Carlyn</user>
    <text>&lt;@Marnie&gt; That sounds like a bug to me.</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T11:36:59.000487</ts>
    <user>Andreas</user>
    <text>What's the convention that most use for unused arguments. For example, I am calling `(split-path ...)` that returns three values but I am only interested in the second so I tend to go `(define-values (_1 name _2) (split-path ...))`. Any better way to do this?</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T11:37:08.000359</ts>
    <user>Andreas</user>
    <text>s/arguments/values</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T11:37:52.000534</ts>
    <user>Carlyn</user>
    <text>You can use `match-define` from `racket/match` and use `_` to avoid certain bindings.</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T11:40:32.000463</ts>
    <user>Lynna</user>
    <text>&lt;@Marnie&gt; I agree - that sounds like a bug</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T11:52:09.000264</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; ah, so something like `(match-define-values (_ name _) (split-path ...))` Thanks!</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T11:55:30.000122</ts>
    <user>Andreas</user>
    <text>I cannot seem to find anything from `find-system-path` but I was expecting to have a way to grab the full path of the current `racket` executable. Imagine I have a stable racket in path, say 6.12, but I am running HEAD and want the path to this racket instead of the stable one... How can I get it?</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T11:56:42.000078</ts>
    <user>Carlyn</user>
    <text>I think that’s what `'exec-file` gives you from `find-system-path`.</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T11:57:48.000600</ts>
    <user>Carlyn</user>
    <text>If you combine that with `(find-system-path 'orig-dir)` in the case that the path is relative, you should be able to get the full path.</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T12:01:07.000757</ts>
    <user>Andreas</user>
    <text>ah... should've tried. I was convinced `'exec-file` would give me the path to the current script. i.e. `racket foo.rkt` when calling `(find-system-path 'exec-file)` would return `.../foo.rkt`</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T12:09:58.000761</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; I recommend `find-exe` from `compiler/find-exe`</text>
  </message>
  <message conversation_id="360">
    <ts>2018-04-24T12:11:12.000260</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; thanks, works great.</text>
  </message>
  <message conversation_id="361">
    <ts>2018-04-24T12:31:18.000394</ts>
    <user>Lynna</user>
    <text>Does the search box at "&lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt;" work for others? When I try, it seems to get stuck on a request to the server.</text>
  </message>
  <message conversation_id="361">
    <ts>2018-04-24T12:32:56.000223</ts>
    <user>Monserrate</user>
    <text>also signing in doesn't seem to work</text>
  </message>
  <message conversation_id="361">
    <ts>2018-04-24T12:33:00.000705</ts>
    <user>Monserrate</user>
    <text>which is the same server</text>
  </message>
  <message conversation_id="361">
    <ts>2018-04-24T12:33:18.000492</ts>
    <user>Carlyn</user>
    <text>This problem seems to happen a lot</text>
  </message>
  <message conversation_id="361">
    <ts>2018-04-24T12:34:10.000276</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="361">
    <ts>2018-04-24T12:34:29.000760</ts>
    <user>Monserrate</user>
    <text>&lt;@Dia&gt; Is there something we can work on to make the server more reliable?</text>
  </message>
  <message conversation_id="361">
    <ts>2018-04-24T12:36:08.000730</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; you're not the only one...</text>
  </message>
  <message conversation_id="362">
    <ts>2018-04-24T13:14:12.000180</ts>
    <user>Wally</user>
    <text>Whoa, Racket just seg-faulted on me for the first time: ```
Welcome to Racket v6.12.
&amp;gt; (syntax-&amp;gt;datum
   (parameterize ([current-namespace (make-empty-namespace)])
     (expand-syntax #'(module m racket/base (+ a 3)))))
SIGSEGV MAPERR si_code 1 fault on addr 0x18
Aborted (core dumped)```</text>
  </message>
  <message conversation_id="362">
    <ts>2018-04-24T13:14:44.000093</ts>
    <user>Wally</user>
    <text>Is it just me?</text>
  </message>
  <message conversation_id="361">
    <ts>2018-04-24T13:19:06.000154</ts>
    <user>Dia</user>
    <text>&lt;@Carlyn&gt; &lt;@Monserrate&gt; &lt;@Lynna&gt; Tony's version has a single-threaded nature and there's an unprotected read, when it fails because a client disconnects too early, it crashes that thread and it can't take anymore. I've tried many times to locate it and fix it but I've never found it. The backtrace is useless.</text>
  </message>
  <message conversation_id="362">
    <ts>2018-04-24T13:19:33.000012</ts>
    <user>Dia</user>
    <text>Every few weeks I try again</text>
  </message>
  <message conversation_id="362">
    <ts>2018-04-24T13:20:15.000410</ts>
    <user>Monserrate</user>
    <text>cc &lt;@Burton&gt;</text>
  </message>
  <message conversation_id="362">
    <ts>2018-04-24T13:20:29.000508</ts>
    <user>Andreas</user>
    <text>&lt;@Wally&gt; same here can't get anymore reproducible. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="362">
    <ts>2018-04-24T13:20:38.000140</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; ^^^^</text>
  </message>
  <message conversation_id="362">
    <ts>2018-04-24T13:20:55.000203</ts>
    <user>Lynna</user>
    <text>&lt;@Wally&gt; I see the crash, too, in v6.12. It doesn't crash in the current development version – where the macro expander has been completely replaced, so it's not surprising that this got fixed along the way.</text>
  </message>
  <message conversation_id="362">
    <ts>2018-04-24T13:28:14.000803</ts>
    <user>Wally</user>
    <text>ok thanks!</text>
  </message>
  <message conversation_id="363">
    <ts>2018-04-24T14:50:52.000561</ts>
    <user>Carlyn</user>
    <text>Okay, someone please tell me I’m not hallucinating: is `quote-syntax` _really_ not in `(kernel-form-identifier-list)` from `syntax/kerncase`? It should be, right? How has this never been noticed before??</text>
  </message>
  <message conversation_id="363">
    <ts>2018-04-24T15:13:24.000323</ts>
    <user>Lynna</user>
    <text>`quote-syntax` really does seem to be missing. Probably no one noticed because almost all uses are with `local-expand`, which would quietly add `quote-syntax` itself</text>
  </message>
  <message conversation_id="363">
    <ts>2018-04-24T15:14:34.000583</ts>
    <user>Carlyn</user>
    <text>`#%plain-module-begin` is also missing. Can I safely push a change that adds both of those? Does that change need a `@history` annotation?</text>
  </message>
  <message conversation_id="363">
    <ts>2018-04-24T15:14:57.000410</ts>
    <user>Lynna</user>
    <text>Yes, and I think a `history` annotation is worthwhile</text>
  </message>
  <message conversation_id="363">
    <ts>2018-04-24T17:18:25.000210</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Is there a reason the scope attached by `syntax-local-lift-require` should be treated as a macro-introduction scope for the purpose of `syntax-original?`-ness? It looks like Racket 6 had the same behavior, but I don’t think it really makes sense.</text>
  </message>
  <message conversation_id="363">
    <ts>2018-04-24T17:18:55.000542</ts>
    <user>Carlyn</user>
    <text>If anything, the scope seems more similar to an intdef scope than to a macro-introduction scope to me.</text>
  </message>
  <message conversation_id="363">
    <ts>2018-04-24T20:46:18.000055</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; A lifted `require` seems non-original to me, but I wouldn't object to an optional argument to control whether the created scope is a macro-introduction scope</text>
  </message>
  <message conversation_id="363">
    <ts>2018-04-24T20:49:00.000249</ts>
    <user>Carlyn</user>
    <text>The require itself is non-original, but it shouldn’t make the whole form it brings bindings into scope for non-original, no?</text>
  </message>
  <message conversation_id="363">
    <ts>2018-04-24T20:58:36.000243</ts>
    <user>Lynna</user>
    <text>Ok, I see that point. I don't know whether changing it would cause any problems, but probably not.</text>
  </message>
  <message conversation_id="364">
    <ts>2018-04-25T04:30:58.000076</ts>
    <user>Andreas</user>
    <text>Can someone confirm that after I compile code to bytecode, if I discard of the sources I can still run the bytecode with errortrace, since all the compilation does is expand the source plus some opts (inlining, etc)? I assume this is the case anyway because there's no way to say `raco make --mode=errortrace`, which is confusing because `raco setup` has that option.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T04:58:33.000294</ts>
    <user>Daria</user>
    <text>How is it possible to get a lambda into the scope of a place?</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T04:59:09.000103</ts>
    <user>Daria</user>
    <text>Apparently, I cannot just send a lambda to a place via a channel.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T04:59:39.000246</ts>
    <user>Andreas</user>
    <text>&lt;@Daria&gt; that's right. a place is a separate racket process. Can you name the lambda and require it from the new place?</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:00:26.000515</ts>
    <user>Daria</user>
    <text>I planned to initialize the place with a struct that contains sets and functions.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:00:42.000424</ts>
    <user>Daria</user>
    <text>I can convert the sets to lists and reconvert them at the receiving side.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:00:49.000080</ts>
    <user>Daria</user>
    <text>but functions ...</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:01:05.000016</ts>
    <user>Andreas</user>
    <text>The functions, can be required in the place.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:01:32.000051</ts>
    <user>Daria</user>
    <text>ok, but then the question is, are modules (module names) first-level objects in racket?</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:01:35.000524</ts>
    <user>Andreas</user>
    <text>If that's not a possibility for some reason, you can always serialize the sexps.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:01:41.000095</ts>
    <user>Daria</user>
    <text>because I need to tell my place what to require.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:02:04.000437</ts>
    <user>Andreas</user>
    <text>you can tell the place what to require through a string. then you can dynamic-require it in the plac.e</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:02:18.000492</ts>
    <user>Daria</user>
    <text>very good, will try that.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:03:20.000438</ts>
    <user>Daria</user>
    <text>ah one more thing...</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:03:39.000358</ts>
    <user>Daria</user>
    <text>is it possible to force a module to provide certain functions?</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:04:14.000282</ts>
    <user>Daria</user>
    <text>because I have to make my module work like a struct now. It has to have certain fields of certain types.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:09:38.000110</ts>
    <user>Andreas</user>
    <text>Not sure what you mean. Can't you just `provide` what you need from the module?</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:25:22.000480</ts>
    <user>Daria</user>
    <text>that's what I'm trying right now.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:25:57.000290</ts>
    <user>Daria</user>
    <text>So apparently I also have problems understanding how to use dynamic-require.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:26:21.000504</ts>
    <user>Daria</user>
    <text>So dynamic require expects two arguments.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:26:57.000349</ts>
    <user>Daria</user>
    <text>I don't really get what the second must be. So I just set it to #f to see what happens.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:27:50.000063</ts>
    <user>Daria</user>
    <text>then using the provided name, I always get an "unbound identifier" error, before the code is even executed.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:28:11.000361</ts>
    <user>Daria</user>
    <text>I want the identifier to be bound by the dynamically required module.</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:29:48.000177</ts>
    <user>Daria</user>
    <text>I think I have this ...</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:30:53.000466</ts>
    <user>Daria</user>
    <text>Oh! I can give it a symbol and then it will return me the value of what the symbol provides!</text>
  </message>
  <message conversation_id="365">
    <ts>2018-04-25T05:31:04.000250</ts>
    <user>Daria</user>
    <text>very good</text>
  </message>
  <message conversation_id="366">
    <ts>2018-04-25T06:25:06.000181</ts>
    <user>Andreas</user>
    <text>Just found this gem by &lt;@Lynna&gt;: &lt;https://www.youtube.com/watch?v=rqXk7sqZEIk&gt;</text>
  </message>
  <message conversation_id="366">
    <ts>2018-04-25T06:25:23.000190</ts>
    <user>Andreas</user>
    <text>*gets the popcorns ready*</text>
  </message>
  <message conversation_id="366">
    <ts>2018-04-25T06:26:18.000404</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; you mention &lt;@Odis&gt; is working on a new compiler, did that happen already or were you talking about racket 7?</text>
  </message>
  <message conversation_id="366">
    <ts>2018-04-25T06:45:09.000246</ts>
    <user>Andreas</user>
    <text>Interesting, first time I see the use of infix operators in racket code: ` (if ((length flags) . &amp;gt; . 5)`. Thought this was used mostly in contracts.</text>
  </message>
  <message conversation_id="366">
    <ts>2018-04-25T07:01:41.000222</ts>
    <user>Andreas</user>
    <text>Is it correct to say that `raco make` never builds zo's with instrumentation enabled, i.e. errortrace? And the way to enable `errortrace` on zo files on the command line is through `raco setup --mode errortrace` ?</text>
  </message>
  <message conversation_id="367">
    <ts>2018-04-25T10:24:33.000205</ts>
    <user>Helena</user>
    <text>leif was working on a nanopass compiler &lt;http://nanopass.org/&gt;</text>
  </message>
  <message conversation_id="367">
    <ts>2018-04-25T10:25:09.000732</ts>
    <user>Helena</user>
    <text>this is different from racket 7</text>
  </message>
  <message conversation_id="366">
    <ts>2018-04-25T10:46:05.000891</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; right, I think `raco make` doesn't have that option, although it would be a useful thing to add</text>
  </message>
  <message conversation_id="368">
    <ts>2018-04-25T10:52:10.000503</ts>
    <user>Bertha</user>
    <text>Use of the dot infix notation is an apostasy. It is _perhaps_ tolerable when doing outreach to nonbelievers. :smile:</text>
  </message>
  <message conversation_id="368">
    <ts>2018-04-25T10:55:15.000119</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; I found myself just writing it naturally the other day, which was weird</text>
  </message>
  <message conversation_id="368">
    <ts>2018-04-25T10:57:13.000864</ts>
    <user>Bertha</user>
    <text>Also, from years of writing C/C++ I developed the habit of always writing comparisons in `&amp;lt;` or `&amp;lt;=` form.
Why? To normalize comparisons and make it harder to swap them by accident.
Hey it's C. You play with fire, you collect rituals and spells of protection. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="368">
    <ts>2018-04-25T10:58:34.000301</ts>
    <user>Bertha</user>
    <text>Similarly `CONSTANT == variable` so if I do `=` by mistake I get an error not an assignment. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="368">
    <ts>2018-04-25T10:59:17.000339</ts>
    <user>Bertha</user>
    <text>OK sorry for OT. Back to work.</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:07:52.000367</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Is it okay to change the kind of the lifted required scope from `'macro` to something like `'lifted-require`? Or should I use something like `'use-site`?</text>
  </message>
  <message conversation_id="368">
    <ts>2018-04-25T11:07:58.000884</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; that infix operator is in the `raco setup` code... you might be sinning every single time you call it. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:08:04.000144</ts>
    <user>Carlyn</user>
    <text>(I don’t know how important/meaningful the names are.)</text>
  </message>
  <message conversation_id="366">
    <ts>2018-04-25T11:09:36.000711</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; thanks for confirming that. I am getting pretty confused as to how `errortrace` works internally. For example, compiling with `raco setup` without errortrace mode but then requiring `errortrace-lib` and checking `(instrumentation-enabled)` returns `#true`.</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:10:25.000617</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; I think it's ok to use `'lifted-require`. The comment for the `kind` field should be corrected to say that `'macro` as the `kind` value has meaning beyond debugging.</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:10:52.000596</ts>
    <user>Carlyn</user>
    <text>Okay, thanks. I can update the comment as part of this change, if you’d like.</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:12:21.000889</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; Loading errortrace will instrument only code loaded from source. In addition, loading errortrace causes code previously compiled with `raco setup --mode=errortrace` to be preferred to bytecode created without `--mode=errortrace`. Otherwise, code that is loaded from bytecode can still be used, but is not instrumented</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:17:31.000212</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; but if I don't compile with errortrace and load errotrace-lib to install the compiler handlers in places, why does it tell me the code is instrumented? In this particular case, I was trying to find out if the code is instrumented to report this to the user. What I am attempting following our discussion together with &lt;@Eileen&gt; on places profiling (&lt;https://github.com/racket/racket/issues/2019&gt;) was to have a command line option to enable application profiling, but the application would initially check if its bytecode was compiled with errortrace and if not, tell the user that profiling is not possible and he should get an instrumented version of the application -- only bytecode is distributed to endusers.</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:20:34.000279</ts>
    <user>Carlyn</user>
    <text>What do you mean by “why does it tell me the code is instrumented?” What are you using to determine if code is instrumented or not?</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:25:41.000248</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; `(instrumentation-enabled)`</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:26:30.000487</ts>
    <user>Carlyn</user>
    <text>`(instrumentation-enabled)` only controls whether or not errortrace will instrument future sources loaded. As the documentation states:
&amp;gt; Affects only the way that source code is compiled</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:27:41.000635</ts>
    <user>Carlyn</user>
    <text>It doesn’t reflect anything about whether or not existing bytecode was compiled with instrumentation.</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:29:50.000069</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; right... well, might be my English but to me that quote seems to mean that it affects the way the source code is compiled, as in, at the moment. It doesn't mention the future compilation of the sources.</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:30:18.000579</ts>
    <user>Andreas</user>
    <text>but i grant you that it's my misinterpretation of the documentation.</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:31:12.000418</ts>
    <user>Andreas</user>
    <text>which begs the question, is it possible to introspect whether the current bytecode has been instrumented?</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:31:33.000835</ts>
    <user>Carlyn</user>
    <text>Well, it does mean that it affects the way source code is compiled. But affecting the way source code is compiled can only mean affecting future compilation of sources. Adjusting the parameter certainly can’t be applied retroactively to previously-compiled sources, unless you have a time machine. :)</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:32:21.000217</ts>
    <user>Carlyn</user>
    <text>I don’t know of a way to detect if a particular bytecode file was compiled with errortrace instrumentation or not, but that doesn’t mean there isn’t a way to do it.</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:37:03.000195</ts>
    <user>Lynna</user>
    <text>A good approximation would be to check whether a compiled module's dependencies include `errortrace/errortrace-key`</text>
  </message>
  <message conversation_id="369">
    <ts>2018-04-25T11:38:00.000720</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; thanks, I will try that approach.</text>
  </message>
  <message conversation_id="370">
    <ts>2018-04-25T12:10:05.000200</ts>
    <user>Wally</user>
    <text>In the source for `syntax-local-bind-syntaxes`, I see an undocumented optional argument `extra-intdefs` that seems generally useful. Was this omission intentional?</text>
  </message>
  <message conversation_id="370">
    <ts>2018-04-25T12:10:33.000238</ts>
    <user>Carlyn</user>
    <text>It’s documented on HEAD.</text>
  </message>
  <message conversation_id="370">
    <ts>2018-04-25T12:10:40.000327</ts>
    <user>Carlyn</user>
    <text>It also only exists on HEAD.</text>
  </message>
  <message conversation_id="370">
    <ts>2018-04-25T12:10:54.000158</ts>
    <user>Carlyn</user>
    <text>(I added it a few days ago.)</text>
  </message>
  <message conversation_id="370">
    <ts>2018-04-25T12:11:17.000264</ts>
    <user>Wally</user>
    <text>Nice, thanks.</text>
  </message>
  <message conversation_id="370">
    <ts>2018-04-25T12:24:13.000584</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; is the compiled module dependencies, what you can obtain through `module-compiled-imports`?</text>
  </message>
  <message conversation_id="370">
    <ts>2018-04-25T12:24:53.000194</ts>
    <user>Lynna</user>
    <text>Yes</text>
  </message>
  <message conversation_id="371">
    <ts>2018-04-25T13:13:29.000105</ts>
    <user>Andreas</user>
    <text>Perfect.</text>
  </message>
  <message conversation_id="371">
    <ts>2018-04-25T13:23:27.000067</ts>
    <user>Andreas</user>
    <text>All, I have been noticing lots of old bugs, where either the discussion has died, the bug reported is in a very old version of racket or there's just not enough information to reproduce the bug. Is there any long-term plan on how to deal with these?</text>
  </message>
  <message conversation_id="371">
    <ts>2018-04-25T15:13:23.000073</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; there's not really a long term plan, although many of the old bugs are still bugs</text>
  </message>
  <message conversation_id="371">
    <ts>2018-04-25T15:15:42.000414</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; indeed, but I ran through a few that really could be close, or the OP could be contacted for more info. in any case, if there's no plan to deal with those, I will take action on I see them. thanks.</text>
  </message>
  <message conversation_id="371">
    <ts>2018-04-25T15:16:14.000033</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; certainly taking action when you see something that's fixed now, or where more info is needed, is quite helpful</text>
  </message>
  <message conversation_id="372">
    <ts>2018-04-25T15:42:51.000110</ts>
    <user>Wally</user>
    <text>What does it mean when `syntax-local-value` says an identifier is "not defined as syntax"?</text>
  </message>
  <message conversation_id="372">
    <ts>2018-04-25T15:45:35.000462</ts>
    <user>Carlyn</user>
    <text>It means the identifier is either unbound or that it’s defined as a runtime variable (e.g. with `define` / `let`), not as a transformer binding (e.g. with `define-syntax` / `let-syntax`).</text>
  </message>
  <message conversation_id="372">
    <ts>2018-04-25T15:47:06.000312</ts>
    <user>Carlyn</user>
    <text>I think the error message is slightly different on Racket 6 and Racket 7; I forget if either one distinguishes between the two cases. But either way, you can find out if it’s the former or the latter by checking if `identifier-binding` produces `#f` or not.</text>
  </message>
  <message conversation_id="372">
    <ts>2018-04-25T15:48:46.000417</ts>
    <user>Wally</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T16:30:25.000321</ts>
    <user>Wally</user>
    <text>I'm writing a macro that takes an identifier and decides how to handle its bound value in a predicate-based cond.
```
(define-syntax (frob stx)
  (syntax-parse stx
    [(_ x)
     #'(let ([v x])
         (cond [(procedure? v) (v)]
               [(evt? v) (sync v)]
               [else v]))]))
```
During expansion, sometimes `syntax-local-eval` can see `v`. When it can, I would like to use it to simplify the expanded output.
```
(define-syntax (fast-frob stx)
  (syntax-parse stx
    [(_ x)
     (let ([v (syntax-local-eval #'x)])
       (cond [(procedure? v) #`(#,v)]
             [(evt? v) #`(sync #,v)]
             [else #`#,v]))]))
```
When `syntax-local-eval` fails, I get an `exn:fail:contract:variable`. Is catching the exception and falling back to `frob` a reasonable solution?</text>
  </message>
  <message conversation_id="372">
    <ts>2018-04-25T16:36:11.000237</ts>
    <user>Carlyn</user>
    <text>I’m not sure I understand. Is this a macro being used at phase 1, so `#'x` is a phase 1 expression? I imagine yes, since you’re using `syntax-local-eval`, but on the other hand, I’m not sure why this is a macro then and not just a function defined at phase 1.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T17:06:49.000464</ts>
    <user>Wally</user>
    <text>This is based on a phase 1 function. Does that matter?</text>
  </message>
  <message conversation_id="372">
    <ts>2018-04-25T17:14:44.000412</ts>
    <user>Carlyn</user>
    <text>I just feel like I’m missing why `frob` is not written as:
```
(define (frob x)
  (cond [(procedure? x) (x)]
        [(evt? x) (sync x)]
        [else x]))
```</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T17:25:14.000157</ts>
    <user>Wally</user>
    <text>I guess I meant to indicate that I sometimes want to apply `frob` before run time.</text>
  </message>
  <message conversation_id="372">
    <ts>2018-04-25T17:27:28.000015</ts>
    <user>Carlyn</user>
    <text>I don’t really understand. If it’s intended to be used at phase 0, then `syntax-local-eval` isn’t the right thing, since it evaluates an expression in the transformer environment. But if it’s intended to be used at phase 1, then it would always be before runtime by definition. Values don’t really cross phases by design, so I’m not sure what the purpose of such a macro is. Perhaps you could give an example of its use.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T17:35:57.000115</ts>
    <user>Wally</user>
    <text>Say `frob` belongs to a lazy evaluator that wraps the non-function arguments of a procedure call in thunks.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T17:37:56.000245</ts>
    <user>Wally</user>
    <text>I want to analyze the thunkified version and eliminate spurious abstractions, when the information is available.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T17:40:36.000184</ts>
    <user>Carlyn</user>
    <text>I think you’d need to do a syntactic analysis, then, no? `syntax-local-eval` really is _evaluating_, not expanding. It allows you to evaluate a phase 1 value in a phase 1 environment. If your input is a phase 0 expression, `syntax-local-eval` won’t ever do the right thing, since (1) the necessary runtime bindings won’t actually exist and (2) once you get the value out, you won’t be able to embed it back into a syntax object because procedures and events can’t cross phases.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T17:40:47.000342</ts>
    <user>Carlyn</user>
    <text>Perhaps you want `local-expand` instead?</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T17:45:54.000063</ts>
    <user>Wally</user>
    <text>I may just be going about this all wrong.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T17:52:50.000455</ts>
    <user>Wally</user>
    <text>I've made a language for making complex synchronizable events. It's easy to implement the constructs as macros or regular functions. I would like to make a macro that transforms a Racket expression into an event that evaluates the expression and returns its result.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T18:01:09.000268</ts>
    <user>Wally</user>
    <text>For procedure applications, non-event arguments are wrapped in events that produce the supplied value.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T18:04:25.000212</ts>
    <user>Wally</user>
    <text>This can generate a lot of events, so I want to replace parts of the expanded syntax with simpler equivalents, like pre-currying non-event arguments.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T18:07:42.000324</ts>
    <user>Wally</user>
    <text>I got the idea from your Hackett post to inject un-evaluatable literals and then analyze those.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T18:09:55.000039</ts>
    <user>Wally</user>
    <text>That got me far enough to use `syntax-local-eval` on identifiers in `racket/base` like `+` and `choice-evt`, but fails on everything else. That seems like another can of worms. I'd be happy to optimize where possible for now, then extend the possibilities as I learn how.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T20:34:55.000067</ts>
    <user>Bertha</user>
    <text>&lt;@Dia&gt; / &lt;@Odis&gt; If you're still taking RacketCon web site buglet reportlets:
The title for Laurent Orseau's talk seems wrong (seems to be a copy of Jon Zeppieri's, _How to Ask for the Time in Racket_).</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T23:55:14.000082</ts>
    <user>Carlyn</user>
    <text>&lt;@Wally&gt; Sorry, I ended up going home in the middle of that conversation and ended up doing things for much longer than I had anticipated.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T23:56:57.000205</ts>
    <user>Carlyn</user>
    <text>I don’t think you want `syntax-local-eval`. I think you probably want to use `local-expand` to expand your language, then use some sort of post-processing to detect certain expression shapes using `free-identifier=?` (whether directly or indirectly through `syntax/parse` literals) and adjust them. You can write an optimizer as part of your language’s `#%module-begin` that does that. I plan on doing something like that for Hackett.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-25T23:58:16.000179</ts>
    <user>Carlyn</user>
    <text>I don’t know the details of your particular problem, but for things like applications to well-known curried functions, you can do things like statically associate information with particular identifiers, then using `syntax-local-value` to detect fully-saturated applications and skip the currying (also something I eventually intend to do for Hackett).</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-26T00:01:34.000231</ts>
    <user>Wally</user>
    <text>Thanks for the follow up. That makes a lot of sense.</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-26T00:03:58.000086</ts>
    <user>Wally</user>
    <text>I've been implementing whole interpreters from scratch in Racket, except sometimes parsers. Leveraging the expander makes everything easier.</text>
  </message>
  <message conversation_id="374">
    <ts>2018-04-26T00:09:14.000240</ts>
    <user>Dia</user>
    <text>&lt;@Bertha&gt; Thanks! Whoops!</text>
  </message>
  <message conversation_id="373">
    <ts>2018-04-26T00:09:51.000066</ts>
    <user>Wally</user>
    <text>So far, the most useful part of the Hackett post is getting to see how `local-expand` fits into a bigger picture. I wish we had more pragmatic examples of advanced topics like that.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T04:40:48.000251</ts>
    <user>Andreas</user>
    <text>While building racket I saw these lines go past:</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T04:41:00.000323</ts>
    <user>Andreas</user>
    <text>```
Downloading repository &lt;git://github.com/RenaissanceBug/racket-cookies?path=net-cookies&gt;
Downloading repository &lt;github://github.com/stamourv/optimization-coach/master&gt;
Downloading repository &lt;git://github.com/racket/option-contract?path=option-contract&gt;
```</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T04:41:41.000047</ts>
    <user>Andreas</user>
    <text>Although nothing seemed to fail, I find the use of `github://` strange. Was this a typo or is it actually allowed these days?</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T08:43:41.000042</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Not newly-allowed. More like earlier-allowed -- it's deprecated. See next to last bullet under _Package Sources_ here:
&lt;https://docs.racket-lang.org/pkg/Package_Concepts.html#%28part._concept~3asource%29&gt;</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T08:47:10.000448</ts>
    <user>Andreas</user>
    <text>Thanks &lt;@Bertha&gt;</text>
  </message>
  <message conversation_id="376">
    <ts>2018-04-26T08:50:54.000249</ts>
    <user>Andreas</user>
    <text>I am seeing a strange behaviour with `sync` and `handle-evt` for place synchronization with an alarm to deal with a timeout. The problem is that the timeout is never triggered.  I am doing a simplified 
```
(sync (handle-evt (alarm-evt (+ (current-inexact-milliseconds) (* timeout 1000)))
                  (lambda (_) (printf "timeout~n")))
      (handle-evt ...))
```
I assume, there's nothing obviously wrong with doing this right?</text>
  </message>
  <message conversation_id="376">
    <ts>2018-04-26T08:52:25.000098</ts>
    <user>Andreas</user>
    <text>Annoyingly this simple example works out of the box in drracket. *sigh*</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:03:05.000403</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Hmm.
- Does it work because it's running under DrRacket -- or because it's a simpler example?
- What happens if `(handle-evt ...)` is `never-evt`?</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:04:57.000267</ts>
    <user>Bertha</user>
    <text>(I haven't used places, for real. So I am just trying to be your "rubber duck".)</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:05:05.000765</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; well, it's because it's a simple example. With `never-evt` also works. Trying to reproduce this with a larger but manageable example. My suspicion is that it has to do with how place channels interact with `handle-evt`.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:05:09.000030</ts>
    <user>Andreas</user>
    <text>Thanks! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:06:07.000140</ts>
    <user>Andreas</user>
    <text>Also, the places I create are all computationally heavy... but I am not sure that can influence the behaviour of the original place.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:10:57.000260</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Does it work if you try something like `sync/timeout` and test for `#f`?  (To maybe rule out the `handle-evt` aspect.)</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:11:20.000632</ts>
    <user>Andreas</user>
    <text>humm, good idea. will give it a try.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:11:21.000335</ts>
    <user>Bertha</user>
    <text>Well at least rule out the `(handle-evt (alarm-evt ...))` composition.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:13:08.000056</ts>
    <user>Andreas</user>
    <text>`sync/timeout` is not what I expected because the timeout sets a timeout on the synchronization. In my application synchronization happens very rapidly due to messages being sent back and forth so timeout is never triggered. Maybe I can change the structure to test it anyway.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T09:23:03.000245</ts>
    <user>Andreas</user>
    <text>ok... just crashed drracket :disappointed:</text>
  </message>
  <message conversation_id="377">
    <ts>2018-04-26T15:26:16.000408</ts>
    <user>Aimee</user>
    <text>how can I go to the inside of a submodule in DrRacket or Racket REPL?</text>
  </message>
  <message conversation_id="377">
    <ts>2018-04-26T15:28:56.000661</ts>
    <user>Aimee</user>
    <text>oh, I shouldn't have quoted the module path</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:39:19.000648</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; finally found out the problem. :slightly_smiling_face: Not racket! Issue with how I was dealing with message passing between places. alarm was being triggered but my print was buffered and not displayed so I thought the event was just not being handled. I assumed a printf ending in `~n` would flush the buffer but that was not the case. I needed `(flush-output)`. Did manage to crash DrRacket in the process though.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:43:48.000038</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Ah! BTW you could do this globally with `(file-stream-buffer-mode (current-output-port) 'none)`</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:44:08.000148</ts>
    <user>Bertha</user>
    <text>Or `'line` maybe in your case.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:44:12.000632</ts>
    <user>Temika</user>
    <text>is there any library that implements rackjure function literals? only that part. i only use the threading macro and that</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:44:19.000565</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; Awesome, thanks for pointing that out!</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:44:22.000472</ts>
    <user>Temika</user>
    <text>and theres the threading package now</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:44:45.000570</ts>
    <user>Carlyn</user>
    <text>there are like 3</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:44:45.000749</ts>
    <user>Bertha</user>
    <text>&lt;@Temika&gt; Yes, &lt;@Arvilla&gt; has a pkg for just that, IIRC.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:45:27.000461</ts>
    <user>Bertha</user>
    <text>&lt;https://pkgs.racket-lang.org/package/afl&gt;</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:45:51.000082</ts>
    <user>Carlyn</user>
    <text>as Greg mentions, Alex has &lt;http://docs.racket-lang.org/afl/index.html&gt;, but I’ll also plug my take &lt;http://docs.racket-lang.org/curly-fn/index.html&gt;</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:46:04.000320</ts>
    <user>Bertha</user>
    <text>Oh, cool.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:46:34.000440</ts>
    <user>Bertha</user>
    <text>&lt;@Carlyn&gt; and &lt;@Arvilla&gt; create so many good packages I can't keep up :smile:</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:46:48.000669</ts>
    <user>Carlyn</user>
    <text>I _think_ I beat Alex to the punch on this one, but I’m not sure :)</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:47:01.000329</ts>
    <user>Temika</user>
    <text>thanks a bunch :slightly_smiling_face:</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:47:19.000558</ts>
    <user>Bertha</user>
    <text>He'd been helping fix a bug or two in rackjure fn lits, around the same time, I think</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:48:12.000101</ts>
    <user>Bertha</user>
    <text>In hindsight `rackjure` could/should be mostly just a meta pkg that re-provides things like afl and threading, now that those exist.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:48:34.000156</ts>
    <user>Bertha</user>
    <text>I already did that with threading, but maybe could take it further now.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:48:47.000132</ts>
    <user>Bertha</user>
    <text>Or not. I don't think many people use rackjure for realz.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:49:54.000492</ts>
    <user>Temika</user>
    <text>if youre coming from clojure, is nice to have it.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T15:50:17.000487</ts>
    <user>Carlyn</user>
    <text>I use `curly-fn` liberally.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T17:47:13.000266</ts>
    <user>Bertha</user>
    <text>Hmm, it's occurring to me, now, that I rarely seem to use anonymous functions, lately.
I wonder why.
It's mostly not intentional.
I mean, I do prefer `for/list` et al to `map`. And I do sometimes just `define` a function with a name because I like how that reads, when using it. So it's a _little_ on purpose. But mostly that's not it.
I wonder why, is there something else about the code I'm writing lately. Hmmm.</text>
  </message>
  <message conversation_id="378">
    <ts>2018-04-26T18:01:33.000337</ts>
    <user>Temika</user>
    <text>theyre good when youre prototyping. and youre not used to the for idiom</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T18:01:52.000114</ts>
    <user>Temika</user>
    <text>right now i have to see the documentation everytime i have to use one of the for alternatives</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T18:46:08.000230</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I feel less confident about asking this question than I normally do, since I really don’t known if this behavior is a bug or my own misunderstanding, but I’m trying to figure out why this program behaves the way it does. It seems to only cause a problem when split out over three separate files, but they’re short:
```
;; ns.rkt
#lang racket

(require (for-syntax racket
                     syntax/parse/define)
         syntax/parse/define)

(provide (for-syntax type-namespace-introduce)
         begin-for-type)

(begin-for-syntax
  (define-simple-macro (define-type-introducer type-introducer:id)
    #:with scopeless-id (datum-&amp;gt;syntax #f 'introducer-id)
    #:with type-id ((make-syntax-introducer #t) #'scopeless-id)
    (define type-introducer (make-syntax-delta-introducer #'type-id #'scopeless-id)))

  (define-type-introducer type-introducer)

  (define (type-namespace-introduce stx)
    (type-introducer stx 'add)))

(define-syntax-parser begin-for-type
  [(_ form ...)
   #:with [form* ...] (map type-namespace-introduce (attribute form))
   (syntax/loc this-syntax
     (begin form* ...))])
```
```
;; p.rkt
#lang racket

(require syntax/parse/define
         "ns.rkt")

(provide foo)

(begin-for-type
  (define-syntax Foo 'type))

(define-simple-macro (get-typed-value x:id)
  #:with val (syntax-local-value (type-namespace-introduce #'x))
  (quote val))

(define-simple-macro (foo)
  (get-typed-value Foo))
```
```
;; u.rkt
#lang racket

(require "p.rkt")
(foo)
```

Running `racket u.rkt` without compiling any of the modules successfully compiles and prints `'type`, but attempting to compile the modules with `raco make u.rkt` produces an unbound identifier error. I don’t understand why. Is this a bug?</text>
  </message>
  <message conversation_id="379">
    <ts>2018-04-26T18:47:45.000060</ts>
    <user>Carlyn</user>
    <text>Compiling just `ns.rkt` and then running `racket u.rkt` also doesn’t trigger the issue, but compiling `p.rkt` and then running `racket u.rkt` does.</text>
  </message>
  <message conversation_id="375">
    <ts>2018-04-26T20:24:57.000209</ts>
    <user>Marnie</user>
    <text>I use `fancy-app` so much it feels painful to write code without it. But I don't use anything else for anonymous functions (like currying) because by that point I find a named definition much clearer.</text>
  </message>
  <message conversation_id="378">
    <ts>2018-04-26T22:57:06.000048</ts>
    <user>Lynna</user>
    <text>That's pretty subtle. The short answer is that you're exposing the `gensym`-like nature of scopes. The "ns.rkt" module is carefully set up to embed the relevant scope in a syntax object, so every instantiation of "ns.rkt" will get the same scope. But "p.rkt" also attaches the scope to a syntax object (although indirectly, in the identifer-to-definition mapping). When those two modules are separately unmarshaled, you get two different scopes
It's the same as if you embed the result of one `gensym` call into two different compiled expressions and then read the expressions individually, so that the `gensym`ed symbol is created twice.
I'm not immediately sure of how to do what you want to do. It seems like the kind of thing that submodules are for, but I can imagine why a submodule might not work in this case.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:04:15.000168</ts>
    <user>Lynna</user>
    <text>Possibly, the solution is to arrange for a separate `type-introducer` in every module that uses `define-type-introducer`</text>
  </message>
  <message conversation_id="378">
    <ts>2018-04-26T23:05:34.000212</ts>
    <user>Carlyn</user>
    <text>That makes sense, though it’s rather unfortunate. I’m not sure what the right thing to do is, either. I’ve been thinking about potential workarounds, but I haven’t been able to come up with any. At first, I thought it wouldn’t be important for the namespace scopes to span multiple modules, but I’ve realized lately that it (unfortunately) actually is.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:05:36.000076</ts>
    <user>Lynna</user>
    <text>&lt;@Gaynell&gt; This reminds me of what you were doing with scope-based, textually  interleaved namespaces. Is it the same?</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:07:24.000012</ts>
    <user>Carlyn</user>
    <text>The reason it’s necessary for the scope to be consistent across modules stems from the problem I actually ran into before reducing the issue to this minimal test case. Namely, I had a macro written in one module that expands to a form like `(instance (forall [x] (Show x) =&amp;gt; (Show (Maybe x))) ....)`, and the `instance` knows that things like `forall` and `Show` should be bound in the type namespace. But until the macro is expanded, that information isn’t known.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:09:16.000074</ts>
    <user>Carlyn</user>
    <text>In the existing Hackett implementation, I use a `syntax/parse` pattern transformer named `~type` that is used to annotate pieces of syntax that should be interpreted in the right namespace, which is really the API I want. It makes sense from the mental model of a macro-writer. It just doesn’t work, due to the way the scopes can end up inconsistent, as demonstrated in this example.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:12:16.000164</ts>
    <user>Carlyn</user>
    <text>I thought the `make-syntax-delta-introducer` trick would be enough to fix the scopes across instantiations, and I guess it is, as you say. But also as you say, the way scopes are unmarshalled means the “same” scope is not necessary actually the same after being stuffed in bytecode, if that scope ends up being embedded in multiple modules. :(</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:14:26.000144</ts>
    <user>Lynna</user>
    <text>I'm not clear on why `type-namespace-introduce` can't be a macro that triggers a module-local `type-namespace-introduce` definition (once per module) and replaces itself with a call to the module-local one.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:17:13.000179</ts>
    <user>Carlyn</user>
    <text>The problem is that the use of `type-namespace-introduce` might be in a different module from the syntax it gets called upon, in which case that won’t work. I compressed the code in my reproduction into just three modules, but my actual problem involved six! Specifically, imagine if the `foo` macro and the `Foo` type were defined in a different module from the `get-typed-value` macro.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:18:45.000023</ts>
    <user>Carlyn</user>
    <text>In more practical terms, imagine the `instance` macro for defining typeclass instances is defined in one module, and it calls `type-namespace-introduce` on a piece of input syntax. But a macro that expands _into_ an `instance` form is defined in a separate module, and it references bindings in scope in that separate module (which, if I understand your suggestion properly, would use a distinct type namespace scope, and therefore the scope introduced by the `instance` macro wouldn’t be the right one).</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:20:40.000039</ts>
    <user>Lynna</user>
    <text>I imagine that anything that calls `type-namespace-introduce` would also need to be module-local, so use the same localizing strategy for `get-typed-value` – or, probably more simply, pass the right `type-namespace-introduce` to it. That way, it would never the case that `type-namespace-introduce` or (effectively) `get-typed-value` is from a different module.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:22:02.000202</ts>
    <user>Lynna</user>
    <text>I'm not sure I'm mapping things right to `instance`, but it feels like this is one of those problems that is solved by one more level of indirection</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:22:08.000060</ts>
    <user>Carlyn</user>
    <text>Unless I’m misunderstanding you, I don’t think it’s possible to implement a namespace abstraction if users are required to either only reference locally-defined macros or to thread `type-namespace-introduce` around manually when they write macros.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:22:57.000206</ts>
    <user>Carlyn</user>
    <text>That is to say that this is not code that is exclusively internal to Hackett; it also exists as part of the API to users of Hackett writing their own macros that expand into Hackett forms.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:27:50.000062</ts>
    <user>Carlyn</user>
    <text>If it helps at all, I can point to the actual code on GitHub in a branch of Hackett that ran into this problem. I just figured that probably _wouldn’t_ be very helpful to someone unfamiliar with the codebase (that is, everyone except me).</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:30:30.000188</ts>
    <user>Lynna</user>
    <text>Ok – I'll look tomorrow.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:31:10.000164</ts>
    <user>Carlyn</user>
    <text>Yes, no rush. It’s late. :) It’s also not exactly urgent.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-26T23:33:03.000218</ts>
    <user>Carlyn</user>
    <text>On the other hand, while it definitely isn’t urgent, it’s also something I do _need_ to fix to make Hackett work (or abandon separate type/value namespaces entirely), and I don’t currently have a workaround or even a path to a solution in the expander (unlike some other things I’ve bumped into that I can deal with myself).</text>
  </message>
  <message conversation_id="381">
    <ts>2018-04-27T04:18:54.000175</ts>
    <user>Lashell</user>
    <text>There are a number of podcasts that do conference announcements - is it worth sending details of the racket-con/summer-school to ‘cognicast’, ‘functional geekery’ and any others? 
&lt;https://con.racket-lang.org&gt;
&lt;https://summer-school.racket-lang.org/2018/&gt;

&lt;mailto:contact@functionalgeekery.com|contact@functionalgeekery.com&gt;

As I can’t justify the con/school (my day job is cache/MUMPS) so I rely on podcasts and the YouTube videos from racketcon, I’d be interested to know if racketeers would recommend any other podcasts (or YouTube channels) for aspiring Racketeers? 

Kind Regards,

Stephen

</text>
  </message>
  <message conversation_id="382">
    <ts>2018-04-27T09:52:10.000575</ts>
    <user>Lynna</user>
    <text>I didn't look at Hackett's implementation, but I think I understand the problem, now.
So far, the most consistent and workable idea I have is to add a notion of "interned" scope, so that different unmarshalings arrive at the same scope.
To do that, we'd add `make-interned-syntax-introducer`, which takes a symbol and returns an introducer for the same scope whenever the given symbol is the same. Then, your example could be made to work by using `(make-interned-syntax-introducer 'hackett-type #t))` in "ns.rkt".
I have also been tempted to think of the problem in terms of phases and to add a way to bind at, say, symbol-keyed phases. I'm not sure that's a good direction, though, and it involves a lot more pieces.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T10:08:13.000712</ts>
    <user>Carlyn</user>
    <text>I think what you say makes sense, and it does seem like the most direct path to making what I want to work actually work. For what it’s worth, I’ve spent a lot of time comparing namespaces to phases, and the similarities are extremely tempting, but I think I’ve come down firmly on the conclusion that namespaces are _not_ phases, and there are things about them that do not map directly. That doesn’t mean making a notion of namespaces baked in would necessarily be a bad or unhelpful idea, since it would eliminate the need for my complicated dancing wrt `require` and `provide`, but I don’t think that alone makes a very compelling argument for doing that amount of work and complicating the expander even more when a userspace implementation will do.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T10:11:16.000316</ts>
    <user>Carlyn</user>
    <text>Is this something you think I could reasonably implement on my own? I am willing to take on the effort if you think it’s something you think is a reasonable idea and something I can feasibly do, since I’d rather not burden you with any more than I have to. You’ve given me enough of your time over the past few weeks already. :)</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T10:18:49.000342</ts>
    <user>Lynna</user>
    <text>Yes. You'll probably have to work a little to figure out serialization, and adding a new expander export may not be completely obvious (hint: a `provide` from the expander's "main.rkt" isn't useful) but the change looks otherwise straightforward.
Just in case, keep in mind that that the expander must act as if it's lock-free (in case a thread is killed while it is expanding) – which matters for a scope-intern table, but a symbol-keyed `eq?`-based weak hash table should just work.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T10:19:53.000414</ts>
    <user>Carlyn</user>
    <text>Okay, great. I’ll look into it today, and I’ll send questions your way if I have them.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T10:21:02.000597</ts>
    <user>Lynna</user>
    <text>(Correction: ... an `eq?`-based hash table with values wrapped in emphemerons.)</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T10:22:47.000026</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; I am looking into what we discussed a couple days ago: determining if a compiled module was compiled with errortrace support. I get the code with `(define code (get-module-code "/home/pmatos/Projects/.../main.rkt"))` and then `(module-compiled-imports code)` but this only seems to return the direct imports of the module independently of how it was compiled or if it was compiled at all. Where was `errortrace/errortrace-key` supposed to show up?</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T10:25:33.000590</ts>
    <user>Lynna</user>
    <text>It would be in the direct imports. But maybe a better approach: A ".zo" isn't going to have code instrumented for errortrace unless its' in "compiled/errortrace" subdirectory, so maybe a better/simpler test is to check for that file being present and up-to-date.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T10:27:56.000046</ts>
    <user>Andreas</user>
    <text>Thanks, will give that approach. I might be wrong but the only way to generate compiled bytecode with errortrace is through `raco setup --mode errortrace`, right?</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T10:28:28.000440</ts>
    <user>Andreas</user>
    <text>I assume that there are already functions in the api checking if the zo is present? and if it is up to date, right?</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T11:25:36.000241</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Does it make sense for `make-interned-syntax-introducer` to still accept a `use-site?` argument like `make-syntax-introducer` does? If the answer is yes, are interned scopes with distinct kinds considered distinct scopes? That is, does each symbolic key effectively produce up to two scopes, one with a `macro` kind and another with a `use-site` kind? Or should `make-interned-syntax-introducer` dispense with kinds entirely?</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T11:29:35.000433</ts>
    <user>Lynna</user>
    <text>Either of those two options would be fine with me.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T11:37:36.000629</ts>
    <user>Lynna</user>
    <text>Probably not in the direct way that you want, unless I'm forgetting something. An implementation would be somewhere in `get-module-code`.</text>
  </message>
  <message conversation_id="383">
    <ts>2018-04-27T12:38:54.000415</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; ISTR seeing similar things in the source for `dynamic-rerequire`</text>
  </message>
  <message conversation_id="383">
    <ts>2018-04-27T12:39:28.000318</ts>
    <user>Bertha</user>
    <text>&lt;https://github.com/racket/racket/blob/62f5b2c4e4cdefa18fa36275074ff9fe376ddaf3/racket/collects/racket/rerequire.rkt&gt;</text>
  </message>
  <message conversation_id="383">
    <ts>2018-04-27T12:56:10.000642</ts>
    <user>Andreas</user>
    <text>Thanks for the pointers.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:16:32.000407</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; It looks like I have something that works, but I’m not sure how to properly write a test case that exercises marshalling/unmarshalling. Are there some existing tests I could look at? I haven’t found them.</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:17:50.000159</ts>
    <user>Lynna</user>
    <text>Look for `(write (compile ...))` patterns in "module.rktl" or "syntax.rktl"</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:21:03.000559</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; Looks like background expansion got stuck for me again… here’s what ended up in my stderr, if it helps:
```
drracket-background-compilation: expanding-place.rkt: 00 starting monitors
drracket-background-compilation: expanding-place.rkt: 01 starting thread
drracket-background-compilation: expanding-place.rkt: 02 setting basic parameters
drracket-background-compilation: expanding-place.rkt: 03 setting module language parameters
drracket-background-compilation: expanding-place.rkt: 04 setting directories
drracket-background-compilation: expanding-place.rkt: 05 installing security guard
drracket-background-compilation: expanding-place.rkt: 06 setting uncaught-exception-handler
drracket-background-compilation: expanding-place.rkt: 07 starting read-syntax
drracket-background-compilation: expanding-place.rkt: 08 read
drracket-background-compilation: expanding-place.rkt: 09 starting expansion
drracket-background-compilation: expanding-place.rkt: kill; worker-thd stack (size 5) dead? #f:
drracket-background-compilation:   (make-generic-self-module-path-index . #f)
drracket-background-compilation:   (expand-module18 . #f)
drracket-background-compilation:   (expand-capturing-lifts . #f)
drracket-background-compilation:   (expand-single . #f)
drracket-background-compilation:   (#f . #(struct:srcloc #&amp;lt;path:/Users/alexis/gits/racket/racket/racket/share/pkgs/drracket/drracket/private/expanding-place.rkt&amp;gt; 123 7 4558 8520))
```</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:22:47.000455</ts>
    <user>Eileen</user>
    <text>Cool!</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:23:00.000071</ts>
    <user>Eileen</user>
    <text>Can you send email with that to Matthew (and me)?</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:23:26.000444</ts>
    <user>Lynna</user>
    <text>The `make-generic-self-module-path-index` looks promising, since that involves an interning table</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:23:37.000073</ts>
    <user>Carlyn</user>
    <text>can do</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:24:05.000505</ts>
    <user>Lynna</user>
    <text>No need – it's clear that the table used by `make-generic-self-module-path-index` is the problem in this case</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:24:22.000630</ts>
    <user>Carlyn</user>
    <text>okay, cool</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:25:25.000377</ts>
    <user>Eileen</user>
    <text>Oh sorry</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:25:36.000380</ts>
    <user>Eileen</user>
    <text>I didn't realize we were in general. :)</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T14:48:24.000609</ts>
    <user>Eileen</user>
    <text>(serves me right for trying to answer things on my phone in another meeting :wink:)</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T15:57:33.000516</ts>
    <user>Bertha</user>
    <text>My Typed Racket is rusty so maybe this is new, but I don't understand the notation `(-&amp;gt; Any Boolean : point)` here &lt;https://github.com/racket/typed-racket/pull/699/files#diff-50cc6fcfab42d982f6c481cca2318893R108&gt;
I don't see it explained here: &lt;https://docs.racket-lang.org/ts-guide/types.html#%28part._.Function_.Types%29&gt;</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T15:58:14.000583</ts>
    <user>Bertha</user>
    <text>Oh, it's in the next section &lt;https://docs.racket-lang.org/ts-guide/occurrence-typing.html&gt;</text>
  </message>
  <message conversation_id="384">
    <ts>2018-04-27T15:58:58.000031</ts>
    <user>Bertha</user>
    <text>&amp;gt; The type `(-&amp;gt; Any Boolean : String)` has three parts. The first two are the same as any other function type and indicate that the predicate takes any value and returns a boolean. The third part, after the `:`, represents the logical propositions the typechecker learns from the result of applying the function</text>
  </message>
  <message conversation_id="384">
    <ts>2018-04-27T16:01:20.000081</ts>
    <user>Bertha</user>
    <text>Is it wrong to think of this as a shorthand for `(case-&amp;gt; (-&amp;gt; String True) (-&amp;gt; Any False))`?  (Or maybe `Any` is more like "`(Not String)`")</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T16:14:13.000525</ts>
    <user>Monserrate</user>
    <text>&lt;@Karry&gt; ^</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T16:14:28.000557</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; it's kind of right, but also kind of wrong</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T16:14:35.000593</ts>
    <user>Monserrate</user>
    <text>that isn't how TR works</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T16:14:47.000046</ts>
    <user>Monserrate</user>
    <text>but you could imagine a different system that does work that way</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T16:15:00.000564</ts>
    <user>Monserrate</user>
    <text>and &lt;@Karry&gt; and I have been working on that</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T16:16:06.000472</ts>
    <user>Bertha</user>
    <text>To be clear, I have no deep thoughts about this. Just sharing one person's naive first intuition. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T16:17:26.000006</ts>
    <user>Monserrate</user>
    <text>The intuition I'd go for is `(-&amp;gt; Any Boolean : String)` says that it's a predicate for `String`s</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T16:30:53.000254</ts>
    <user>Aimee</user>
    <text>To expand more, I think an example would be
```
; Assume f has type (-&amp;gt; Any Boolean : String)
(if (f x)
    ... ; in this branch, x has type String
    ...) ; in this branch, x would be something not a String
```</text>
  </message>
  <message conversation_id="380">
    <ts>2018-04-27T16:31:29.000605</ts>
    <user>Aimee</user>
    <text>without `: String` I guess TR won't know that calling `f` would haved revealed the type of `x`</text>
  </message>
  <message conversation_id="385">
    <ts>2018-04-28T00:43:36.000021</ts>
    <user>Marnie</user>
    <text>How does `contract-out` work exactly?</text>
  </message>
  <message conversation_id="386">
    <ts>2018-04-28T09:51:59.000086</ts>
    <user>Karry</user>
    <text>prefab-key sanity check please! Does this seem like a reasonable predicate to determine if a prefab key corresponds to prefab structs which have 1 or more mutable fields:
```
(define (prefab-key-with-mutable-fields? key)
  (match key
    [(? symbol?) #f]
    [(list-rest _ mutable-flds _)
     (not (eqv? 0 (vector-length mutable-flds)))]))
```</text>
  </message>
  <message conversation_id="386">
    <ts>2018-04-28T10:17:54.000096</ts>
    <user>Eugena</user>
    <text>&lt;@Karry&gt; I think that will miss the case when it has mutable fields but they are inherited from the parent struct type.</text>
  </message>
  <message conversation_id="386">
    <ts>2018-04-28T10:19:23.000028</ts>
    <user>Karry</user>
    <text>&lt;@Eugena&gt; ah, thanks!</text>
  </message>
  <message conversation_id="386">
    <ts>2018-04-28T10:19:47.000016</ts>
    <user>Karry</user>
    <text>Is there a lot of duplicated boilerplate code floating around the racket repositories to work with prefabs?</text>
  </message>
  <message conversation_id="386">
    <ts>2018-04-28T10:19:50.000080</ts>
    <user>Karry</user>
    <text>I just found this file: &lt;https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/types/prefab.rkt&gt;</text>
  </message>
  <message conversation_id="386">
    <ts>2018-04-28T10:20:17.000116</ts>
    <user>Karry</user>
    <text>and am trying to wrap my head around the prose in the Racket reference and all this code :persevere:</text>
  </message>
  <message conversation_id="386">
    <ts>2018-04-28T10:28:03.000052</ts>
    <user>Karry</user>
    <text>I'm tempted to start w/ a PR adding a grammar of valid prefab-keys to the reference...</text>
  </message>
  <message conversation_id="386">
    <ts>2018-04-28T10:28:48.000040</ts>
    <user>Eugena</user>
    <text>I don't know how much there is for prefabs. I haven't often had to care what the structure of a prefab key was. My personal hobgoblin is module paths and module path indexes. I keep resolving to write the one true module path conversion/canonicalization library ... "when I get time".</text>
  </message>
  <message conversation_id="386">
    <ts>2018-04-28T10:29:24.000062</ts>
    <user>Eugena</user>
    <text>For this particular question, you could also convert it to a struct-type and then use struct-type-info, I think.</text>
  </message>
  <message conversation_id="387">
    <ts>2018-04-28T12:02:46.000001</ts>
    <user>Wally</user>
    <text>Did you figure this out?</text>
  </message>
  <message conversation_id="387">
    <ts>2018-04-28T12:03:04.000157</ts>
    <user>Wally</user>
    <text>I'm trying to understand how provide/require are implemented.</text>
  </message>
  <message conversation_id="388">
    <ts>2018-04-28T16:30:48.000125</ts>
    <user>Marnie</user>
    <text>Yes _please_, if I don't get to it first</text>
  </message>
  <message conversation_id="388">
    <ts>2018-04-28T16:31:46.000084</ts>
    <user>Marnie</user>
    <text>I've gotten a few questions answered but they mostly just led me to more questions</text>
  </message>
  <message conversation_id="388">
    <ts>2018-04-28T16:33:08.000005</ts>
    <user>Marnie</user>
    <text>Trying to work out how to get `contract-out` to play nicely with my syntax annotations project</text>
  </message>
  <message conversation_id="387">
    <ts>2018-04-29T21:39:58.000049</ts>
    <user>Aimee</user>
    <text>From my limited understanding, I think contract-out would create a new identifier, bind it to the contract-attached value and provide it rename-out, something like
```
(provide (contract-out [f ctc]))
(define f ...)
;=&amp;gt;
(provide (rename-out [outside-f f]))
(define f ...)
(define outside-f (contract ctc f pos-party neg-party))
```</text>
  </message>
  <message conversation_id="387">
    <ts>2018-04-29T21:41:46.000099</ts>
    <user>Aimee</user>
    <text>but I think the actual `outside-f` is much more complicated since the negative party is only known when the current module is required by its client. I don't know the full story there.</text>
  </message>
  <message conversation_id="387">
    <ts>2018-04-29T21:42:29.000004</ts>
    <user>Aimee</user>
    <text>say, `outside-f` is probably actually a transformer that when expanded will turn into the real contracted value</text>
  </message>
  <message conversation_id="389">
    <ts>2018-04-30T11:47:37.000191</ts>
    <user>Janet</user>
    <text>Is the new doc section on "instantiations and visits" available in a readable format somewhere online?</text>
  </message>
  <message conversation_id="389">
    <ts>2018-04-30T12:06:21.000208</ts>
    <user>Carlyn</user>
    <text>&lt;@Janet&gt; &lt;https://plt.eecs.northwestern.edu/snapshots/current/doc/guide/macro-module.html&gt;</text>
  </message>
  <message conversation_id="390">
    <ts>2018-04-30T12:27:46.000771</ts>
    <user>Carlita</user>
    <text>PPA for Ubuntu updated to v6.12. Sorry for the delay: &lt;https://launchpad.net/~plt/+archive/ubuntu/racket&gt;</text>
  </message>
  <message conversation_id="389">
    <ts>2018-04-30T12:29:48.000658</ts>
    <user>Janet</user>
    <text>&lt;@Carlyn&gt; thanks!</text>
  </message>
  <message conversation_id="387">
    <ts>2018-04-30T12:30:58.000134</ts>
    <user>Carlyn</user>
    <text>as &lt;@Aimee&gt; alludes to, `contract-out` uses `syntax-local-lift-expression` to bind a fresh identifier, then provides the fresh identifier using the same name.</text>
  </message>
  <message conversation_id="387">
    <ts>2018-04-30T12:32:08.000714</ts>
    <user>Carlyn</user>
    <text>if you want, you can use `local-expand/capture-lifts` to capture those lifted expressions, if you can get into a context where you can call `local-expand` on `require` forms (such as `#%module-begin`).</text>
  </message>
  <message conversation_id="391">
    <ts>2018-04-30T13:05:14.000236</ts>
    <user>Odis</user>
    <text>Is there a DrRacket server so that whenever I double click a file it opens it up in an existing DrRacket session rather than making a new one?</text>
  </message>
  <message conversation_id="391">
    <ts>2018-04-30T13:05:50.000527</ts>
    <user>Odis</user>
    <text>(I had that behavior on OS X, but on linux it seems to make a new session for every file I open, unless I explicitly open it from within DrRacket.)</text>
  </message>
  <message conversation_id="391">
    <ts>2018-04-30T13:20:28.000461</ts>
    <user>Monserrate</user>
    <text>&lt;@Odis&gt; I think you want `-singleInstance` or something like that</text>
  </message>
  <message conversation_id="392">
    <ts>2018-04-30T13:30:55.000773</ts>
    <user>Thaddeus</user>
    <text>Hey there! I just finished the Lisp Game Jam 2018 (that I linked here 10 days ago).
I made a game using Racket as a transpiler for WebAssembly.
You can check out the result (and eventually vote if you have an &lt;http://itch.io|itch.io&gt; account) here: &lt;https://itch.io/jam/lisp-game-jam-2018/rate/249396&gt;</text>
  </message>
  <message conversation_id="392">
    <ts>2018-04-30T13:32:05.000384</ts>
    <user>Thaddeus</user>
    <text>The game is not that fun to play as the AI definitely needs improvement, but I finished it in time, which is awesome anyways :smile:</text>
  </message>
  <message conversation_id="392">
    <ts>2018-04-30T13:33:15.000088</ts>
    <user>Thaddeus</user>
    <text>I'd like to see if I can push the transpiler further and use it for bigger projects. Until some day someone tells me Racket7 finally compiles to wasm and I'll be out :stuck_out_tongue:</text>
  </message>
  <message conversation_id="391">
    <ts>2018-04-30T13:43:35.000092</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Interesting. I wonder why that flag doesn't show up when you do a `racket -h`. Anyway, thanks.</text>
  </message>
  <message conversation_id="391">
    <ts>2018-04-30T13:45:22.000316</ts>
    <user>Odis</user>
    <text>Anyway, thanks. :smile:</text>
  </message>
  <message conversation_id="392">
    <ts>2018-04-30T14:14:39.000236</ts>
    <user>Claud</user>
    <text>&lt;@Thaddeus&gt; Very cool!! The s-expressions led me to waste a bit of time thinking about WebAssembly recently, though making a syntax colorer for DrRacket was about as far as I got.</text>
  </message>
  <message conversation_id="393">
    <ts>2018-04-30T15:05:29.000070</ts>
    <user>Marnie</user>
    <text>I think I won't be able to do the thing I want with `contract-out` at all, unfortunately</text>
  </message>
  <message conversation_id="391">
    <ts>2018-04-30T16:37:48.000055</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Sadly, as far as I can tell, `drracket -singleInstance &amp;lt;file&amp;gt;` still seems to open a new instance rather than connecting with the existing one. :disappointed:</text>
  </message>
  <message conversation_id="391">
    <ts>2018-04-30T16:48:06.000303</ts>
    <user>Odis</user>
    <text>Interesting, it looks like its not just me having this issue: &lt;https://github.com/racket/drracket/issues/191&gt;</text>
  </message>
  <message conversation_id="394">
    <ts>2018-05-01T11:26:25.000276</ts>
    <user>Helena</user>
    <text>is there an API for `raco setup --clean`?</text>
  </message>
  <message conversation_id="394">
    <ts>2018-05-01T11:27:50.000251</ts>
    <user>Carlyn</user>
    <text>&lt;@Helena&gt; there’s `setup` from `setup/setup`, which has a `#:clean?` keyword argument &lt;http://docs.racket-lang.org/raco/setup-plt-plt.html#%28def._%28%28lib._setup%2Fsetup..rkt%29._setup%29%29&gt;</text>
  </message>
  <message conversation_id="395">
    <ts>2018-05-01T12:44:53.000169</ts>
    <user>Wally</user>
    <text>I have a simple reader extension that wraps a `!`-prefixed datum in an `esc` call. For example, `!5` becomes `(esc 5)` and `!(+ 1 !2)` becomes `(esc (+ 1 (esc 2)))`. Can I make the reader extension active only inside a particular macro?</text>
  </message>
  <message conversation_id="395">
    <ts>2018-05-01T12:45:48.000152</ts>
    <user>Carlyn</user>
    <text>Not directly. The reader runs prior to macroexpansion, so it knows nothing about which macros are which.</text>
  </message>
  <message conversation_id="395">
    <ts>2018-05-01T12:46:21.000195</ts>
    <user>Carlyn</user>
    <text>What you could do is make the reader produce code that only has meaning within a particular macro.</text>
  </message>
  <message conversation_id="395">
    <ts>2018-05-01T12:46:29.000325</ts>
    <user>Janet</user>
    <text>+1 for a `raco setup --clean`</text>
  </message>
  <message conversation_id="395">
    <ts>2018-05-01T12:46:53.000141</ts>
    <user>Carlyn</user>
    <text>&lt;@Janet&gt; There is a `raco setup --clean`. &lt;@Helena&gt; was just asking if there was an API to it.</text>
  </message>
  <message conversation_id="395">
    <ts>2018-05-01T12:47:03.000386</ts>
    <user>Janet</user>
    <text>right, sorry for the noise :smile:</text>
  </message>
  <message conversation_id="395">
    <ts>2018-05-01T12:47:41.000604</ts>
    <user>Wally</user>
    <text>Got it</text>
  </message>
  <message conversation_id="396">
    <ts>2018-05-01T13:43:19.000177</ts>
    <user>Odis</user>
    <text>If you need an example you can check out my #editor to #%editor reader extension.</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:03:10.000596</ts>
    <user>Wally</user>
    <text>I have a function ```
(define (bind f . Vs)
  (replace-evt (bind-args Vs) f))
```
How do I write a contract for `f`? The contracts `(-&amp;gt; any/c ... evt?)` and `(-&amp;gt;* () #:rest any/c evt?)` give me this error:
```
bind: contract violation
  expected: a procedure that accepts 0 non-keyword arguments and arbitrarily many more
  given: #&amp;lt;procedure&amp;gt;
  accepts: 2 arguments
```
on input
```
(sync
 (bind (λ (x y) (pure (+ x y)))
       (pure 1)
       (pure 2)))
```</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:04:55.000008</ts>
    <user>Monserrate</user>
    <text>those contracts both say that they accept any number of arguments</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:05:14.000453</ts>
    <user>Monserrate</user>
    <text>whereas `(lambda (x y) ...)` accepts exactly 2</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:05:27.000380</ts>
    <user>Monserrate</user>
    <text>you might want `unconstrained-domain`</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:06:20.000404</ts>
    <user>Wally</user>
    <text>`unonstrained-doman-&amp;gt;` will do. Thanks!</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:06:49.000451</ts>
    <user>Wally</user>
    <text>I'd really like to say `f` takes as many arguments as there are elements of `Vs`</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:07:52.000101</ts>
    <user>Carlyn</user>
    <text>you could probably do that with `dynamic-&amp;gt;*` and `i-&amp;gt;`, but it might be pretty slow</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:12:22.000069</ts>
    <user>Wally</user>
    <text>`dynamic-&amp;gt;*` seems capable of exactly what I'd like. How might performance be affected?</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:14:15.000183</ts>
    <user>Wally</user>
    <text>I guess I'm just wondering if it's fundamentally XX-times slower than `-&amp;gt;*`and not worth the trouble</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:14:48.000069</ts>
    <user>Carlyn</user>
    <text>I don’t know. The docs are pretty handwavy about performance, so you probably can’t really know without profiling.</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:15:24.000161</ts>
    <user>Carlyn</user>
    <text>It doesn’t seem fundamentally super slow, though, given that the docs state:
&amp;gt; For many uses, `dynamic-&amp;gt;*`’s result is slower than `-&amp;gt;*` (or `-&amp;gt;`), but for some it has comparable speed.</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:16:18.000179</ts>
    <user>Carlyn</user>
    <text>`-&amp;gt;i` contracts also tend to be expensive, though, so who knows.</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:17:17.000244</ts>
    <user>Wally</user>
    <text>Ok thanks.</text>
  </message>
  <message conversation_id="397">
    <ts>2018-05-01T15:37:21.000095</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Odd. So it looks like gracket (on ubuntu 16.04) sets the application-file-handler parameter to void.</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-01T15:37:30.000317</ts>
    <user>Odis</user>
    <text>That might be why its not working.</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-01T17:24:26.000296</ts>
    <user>Andreas</user>
    <text>&lt;@Odis&gt; just noticed you are/were involved with the port of the nanopass framework for Racket. What's the status? Is this stable? Do you know of any project that has used the racket port?</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-01T17:24:40.000140</ts>
    <user>Andreas</user>
    <text>This is a very exciting project!</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-01T17:24:56.000098</ts>
    <user>Odis</user>
    <text>&lt;@Andreas&gt; Yes it is stable.</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-01T17:25:11.000504</ts>
    <user>Odis</user>
    <text>IIRC, &lt;@Franklin&gt;’s urlang uses it.</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-01T17:25:56.000421</ts>
    <user>Odis</user>
    <text>I was working on a racket compiler for a while, but I haven't touched it for two years or so now.</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-01T17:26:16.000127</ts>
    <user>Odis</user>
    <text>There are also many scheme to c toy compilers you can look at for examples.</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-01T17:29:18.000499</ts>
    <user>Franklin</user>
    <text>Yes. Urlang uses nanopass. </text>
  </message>
  <message conversation_id="399">
    <ts>2018-05-01T17:58:47.000536</ts>
    <user>Ezra</user>
    <text>&lt;@Andreas&gt; another project using nanopass is css-expr: &lt;https://docs.racket-lang.org/css-expr/&gt;</text>
  </message>
  <message conversation_id="399">
    <ts>2018-05-01T17:58:53.000500</ts>
    <user>Ezra</user>
    <text>&lt;https://git.leafac.com/css-expr&gt;</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-02T02:21:21.000060</ts>
    <user>Andreas</user>
    <text>thanks for the refs &lt;@Odis&gt; &lt;@Franklin&gt; &lt;@Ezra&gt;</text>
  </message>
  <message conversation_id="398">
    <ts>2018-05-02T02:21:28.000077</ts>
    <user>Andreas</user>
    <text>&lt;@Odis&gt; racket compiler? +1</text>
  </message>
  <message conversation_id="400">
    <ts>2018-05-02T02:51:27.000139</ts>
    <user>Andreas</user>
    <text>With `raco pkg config --set catalogs` I can set the catalogs but how can I check which ones are set? I initially expected something like `raco pkg config --get catalogs` but `--get` does not exist.</text>
  </message>
  <message conversation_id="400">
    <ts>2018-05-02T03:32:47.000022</ts>
    <user>Jen</user>
    <text>&lt;@Andreas&gt; I think `raco pkg config` will list them</text>
  </message>
  <message conversation_id="400">
    <ts>2018-05-02T09:55:23.000198</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; you just want `raco pkg config catalogs`</text>
  </message>
  <message conversation_id="400">
    <ts>2018-05-02T10:35:44.000602</ts>
    <user>Franklin</user>
    <text>&lt;@Andreas&gt; There are some small examples of Nanopass here: &lt;https://github.com/nanopass/nanopass-framework-racket/tree/master/tests&gt;</text>
  </message>
  <message conversation_id="400">
    <ts>2018-05-02T10:41:56.000442</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; thanks</text>
  </message>
  <message conversation_id="400">
    <ts>2018-05-02T10:42:10.000049</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; great.</text>
  </message>
  <message conversation_id="401">
    <ts>2018-05-02T11:59:17.000662</ts>
    <user>Temika</user>
    <text>are streams in racket  memoized?</text>
  </message>
  <message conversation_id="401">
    <ts>2018-05-02T12:00:21.000255</ts>
    <user>Temika</user>
    <text>out of curiosity, i was re-reading streams in SICP</text>
  </message>
  <message conversation_id="401">
    <ts>2018-05-02T12:59:40.000690</ts>
    <user>Marnie</user>
    <text>&lt;@Temika&gt; yes, streams are memoized: &lt;https://stackoverflow.com/questions/26478167/do-racket-streams-memoize-their-elements/26481874&gt;</text>
  </message>
  <message conversation_id="402">
    <ts>2018-05-02T13:00:04.000139</ts>
    <user>Marnie</user>
    <text>assuming you mean streams from `racket/stream`</text>
  </message>
  <message conversation_id="401">
    <ts>2018-05-02T13:00:39.000321</ts>
    <user>Temika</user>
    <text>yes, thanks!</text>
  </message>
  <message conversation_id="403">
    <ts>2018-05-02T13:11:27.000124</ts>
    <user>Helena</user>
    <text>hey, maybe you can add an extra precondition to `bind` to say "`f` has a unconstrained domain, but whatever the domain is it should `(procedure-arity-includes? f (length Vs))`</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-02T15:48:07.000666</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Do you know/remember why the `local-expand` stop list makes an exception when it only contains the identifier `module*`? It seems like this special case was added in Racket 5.3, when submodules were added, but the submodules paper doesn’t seem to touch upon that detail.</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-02T21:26:42.000163</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; The identifier `module*` is allowed by itself because (1) that works out, since nothing in a module can rely on the content of a submodule written with `module*`, and (2) something needed this "everything but `module*`" mode — looks like it was probably Typed Racket.</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-02T21:28:27.000092</ts>
    <user>Carlyn</user>
    <text>I really only asked because I ran into a situation where I needed it today, and I was curious if the reason I needed it was the reason it was initially added or if it was coincidental.</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-02T21:28:45.000003</ts>
    <user>Carlyn</user>
    <text>I wonder if &lt;@Monserrate&gt; knows why it’s necessary in TR.</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-02T21:30:09.000180</ts>
    <user>Lynna</user>
    <text>TR needs to expand, typecheck, and transform a module body before the module is potentially imported into a `module*` submodule.</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-02T21:32:48.000102</ts>
    <user>Carlyn</user>
    <text>That makes sense. It wasn’t the reason I needed it today, though. I had an issue where re-expanding a `module*` submodule a second time would add the `module*`’s scopes to syntax that had already been expanded in that module, which ended up causing ambiguous binding errors when it was added to syntax that came from uses of `quote-syntax` in the enclosing module (and therefore had both scopes after expansion).</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-03T10:49:15.000273</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I’m getting a `instantiate-linklet: mismatch` error I don’t understand:
```
instantiate-linklet: mismatch;
 reference to a variable that is unintialized;
 possibly, bytecode file needs re-compile because dependencies changed
  name: idY51.2
  exporting instance: "/Users/alexis/gits/racket/mutation-testing/data-queue.rkt"
  importing instance: (submod "/Users/alexis/gits/racket/mutation-testing/data-queue.rkt" test)
```
I don’t really understand what this error means in general, but I’m especially confused about how a submodule could be out of sync with its parent module. Does this error message mean anything to you?</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-03T12:10:32.000022</ts>
    <user>Lynna</user>
    <text>The "possibly" is clearly a wrong guess there. I'm at a loss for a second guess. Is there something I could run?</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-03T12:13:36.000079</ts>
    <user>Carlyn</user>
    <text>Unfortunately, my naïve attempts to reproduce the error with a smaller program didn’t work, but if you don’t have any ideas from the error message alone, I can certainly work harder to come up with a minimal example.</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-03T12:20:41.000061</ts>
    <user>Lynna</user>
    <text>The name `idY51.2` suggests an interaction with the contract system, perhaps a lift that has gone wrong. Maybe the contract system is seeing a context (in the sense of `syntax-local-context`) where it thinks it has already lifted an expression, but it hasn't. Maybe it's something about a re-expansion that claims to be the same context as earlier but has actually thrown away lifts.</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-03T12:24:23.000703</ts>
    <user>Carlyn</user>
    <text>I think you’re probably right about it being an issue related to lifts. I thought that might be related, myself, but it wasn’t immediately obvious to me why that might be, and I didn’t think to just try providing the same identifiers without the contracts on them. Trying that now, it does indeed seem to fix the problem, so I’ll try and figure out where the lifts are getting lost.</text>
  </message>
  <message conversation_id="405">
    <ts>2018-05-03T14:17:26.000401</ts>
    <user>Andreas</user>
    <text>is there a memory profiler in racket or at least a way to check at a certain point in the program execution how much memory is being used and which location was the source of the allocation?</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-03T14:23:13.000707</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; there are a few things; see `dump-memory-stats` and the `--enable-backtrace` configure option</text>
  </message>
  <message conversation_id="405">
    <ts>2018-05-03T14:24:21.000186</ts>
    <user>Andreas</user>
    <text>is that `--enable-backtrace` from the racket `./configure` or something else?</text>
  </message>
  <message conversation_id="405">
    <ts>2018-05-03T14:25:33.000173</ts>
    <user>Andreas</user>
    <text>what are the `v`s in the `dump-memory-stats`. The docs look a bit vague to me.</text>
  </message>
  <message conversation_id="404">
    <ts>2018-05-03T14:40:53.000572</ts>
    <user>Monserrate</user>
    <text>Yes, and it depends on the configuration of racket, and if they're supported then calling it with no arguments will explain it</text>
  </message>
  <message conversation_id="405">
    <ts>2018-05-03T14:53:57.000452</ts>
    <user>Andreas</user>
    <text>ah... got it. thanks.</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-03T16:21:44.000076</ts>
    <user>Katelyn</user>
    <text>Hi! I'm struggling a bit on embedding racket into a c program in windows. 
If anyone is familiar with it, what I'm finding is an access violation when trying to call `scheme_main_setup` &lt;https://gyazo.com/95891f2c26a18567469b912aa80db099&gt;
The docs mention that you need "libracketx.lib" to link to the executable, but since that doesn't exist on a default install, I created it myself from the included "libracketx.def" 
I'm not exactly sure of what I'm doing wrong and I'm feeling dumb about it... Any feedback would be very appreciated. Peace :slightly_smiling_face:</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-03T17:03:40.000558</ts>
    <user>Lynna</user>
    <text>&lt;@Katelyn&gt; If you can show some C code and how you're compiling &amp;amp; linking, we can probably help more.</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-03T17:17:17.000437</ts>
    <user>Katelyn</user>
    <text>Sure thing &lt;@Lynna&gt;. Posting as gist
&lt;https://gist.github.com/sfalcon/cb2e757519dd8e7aeb3fa33156e4806e&gt;</text>
  </message>
  <message conversation_id="407">
    <ts>2018-05-03T18:08:48.000041</ts>
    <user>Odis</user>
    <text>Does anyone know if, in scribble, I can replace any `x` (where `x` is a `content?`), with `(make-element #f x)`?</text>
  </message>
  <message conversation_id="407">
    <ts>2018-05-03T18:09:12.000423</ts>
    <user>Odis</user>
    <text>(Or basically, I want to wrap an arbitrary `content?` with the `sf` style. If that’s possible.)</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-03T19:47:53.000250</ts>
    <user>Lynna</user>
    <text>You'll have to do more to cooperate with 3m GC, but I don't think you're getting far enough for the problem to be registering local variables with the GC.

The immediate problem maybe that you need to call `scheme_register_tls_space` before `scheme_main_setup`. Look for `scheme_register_tls_space` here:
&lt;http://docs.racket-lang.org/inside/embedding.html?q=inside#%28part._.C.G.C_.Embedding%29&gt;

I'm not certain that's the only issue to avoid an immediate crash, but let's try that first.</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-03T19:48:55.000031</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; Yes, that should work. Are you running into a problem?</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-04T08:08:27.000305</ts>
    <user>Marnie</user>
    <text>The docs for security guards say this:

&amp;gt; A thread’s current security guard is determined by the current-security-guard parameter. Every security guard has a parent, and a parent’s access procedures are called whenever a child’s access procedures are called. Thus, a thread cannot increase its own access arbitrarily by installing a new guard. The initial security guard enforces no access restrictions other than those enforced by the host platform.</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-04T08:09:52.000222</ts>
    <user>Marnie</user>
    <text>But the following doesn't raise any security errors:

```
#lang racket

(define original-guard (current-security-guard))

(define (read-secret)
  (file-&amp;gt;string "/Users/jackfirth/githubtoken"))

(define (security-guard-deny-files guard)
  (define (deny who path actions)
    (error who "not allowed access to files"))
  (make-security-guard guard deny void))

(read-secret)

(define (call/evil proc)
  (parameterize ([current-security-guard original-guard])
    (proc)))

(parameterize
    ([current-security-guard (security-guard-deny-files original-guard)])
  (call/evil read-secret))
```</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-04T08:11:59.000085</ts>
    <user>Marnie</user>
    <text>Am I misunderstanding the purpose of security guards? It seems like installing a security guard guarantees nothing unless a fresh namespace is used too, since any called function could have closed over the original, weaker security guard before you installed the strict one</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-04T08:15:44.000219</ts>
    <user>Marnie</user>
    <text>My imaginary use case is a contract on a function that says it can be called in a context where the current security guard disallows access to files; such a contract doesn't seem enforceable (by installing a security guard during calls to the function) if the function can just replace the strict guard with a lenient one it got from somewhere else</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-04T08:18:04.000441</ts>
    <user>Marnie</user>
    <text>do security guards assume that you're using them with `racket/sandbox` or something?</text>
  </message>
  <message conversation_id="406">
    <ts>2018-05-04T09:04:29.000491</ts>
    <user>Katelyn</user>
    <text>After a lot of poking and reading about thread local storage, I got this moving with these instructions, thank you!

As you say, cooperating with 3m GC is going to be another story, and I'm finding that this is harder than I expected due to my inexperience with Windows as well... I guess patience is the name of the game.</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T09:09:02.000383</ts>
    <user>Monserrate</user>
    <text>security guards are intended for protecting eval-like operations (such as `eval` itself or module loading)</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T11:53:15.000175</ts>
    <user>Eugena</user>
    <text>&lt;@Monserrate&gt; Are you thinking of code inspectors? Security guards are for operations like filesystem and network access.</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T11:54:31.000172</ts>
    <user>Monserrate</user>
    <text>I'm aware of that</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T11:56:19.000593</ts>
    <user>Eugena</user>
    <text>&lt;@Marnie&gt; I think the docs should say "by *creating* a new guard" instead of "by *installing* a new guard". If your code captures a lenient guard, then it can perform operations under that old guard the way your code does. After all, if it was able to capture a lenient guard, it could have created a thread (with the same lenient guard) and forwarded operations to that other thread (with the initial guard) to perform instead.</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:02:41.000563</ts>
    <user>Marnie</user>
    <text>&lt;@Eugena&gt; hmmm. that would be an improvement to the docs, though I think they ought to go further and point out the implication that any non-dynamically-created module can circumvent a guard installed after module initialization time, since it could have simply captured `(current-security-guard)` in a module definition</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:03:34.000250</ts>
    <user>Marnie</user>
    <text>that's very subtle and totally changes how I'd imagine using them</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:13:41.000663</ts>
    <user>Eugena</user>
    <text>&lt;@Marnie&gt; Yes, that's true. There should probably be a mini-guide on security and sandboxing in Racket. For example, if you're worried about security guards, you should be just as worried about code inspectors.</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:15:21.000053</ts>
    <user>Marnie</user>
    <text>like, I was assuming security guards were for enforcing stuff between two modules - not between two namespaces (I _think_ that's a correct description)</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:16:16.000506</ts>
    <user>Marnie</user>
    <text>&lt;@Eugena&gt; I've been in a vague state of fear of code inspectors for a long time but don't actually understand how much power they have, just that they can see into structs sometimes</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:20:36.000660</ts>
    <user>Eugena</user>
    <text>&lt;@Marnie&gt; the `(current-inspector)` parameter controls access to structs, but the `(current-code-inspector)` parameter controls things like whether a module is allowed to use the protected exports of the modules it requires.</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:20:53.000334</ts>
    <user>Marnie</user>
    <text>and that's related to FFI things right?</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:21:27.000726</ts>
    <user>Marnie</user>
    <text>and unsafe ops</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:22:18.000420</ts>
    <user>Eugena</user>
    <text>Yes. For example, if you set the current security guard but not the code inspector, then a module might not be able to call `open-input-file` but it could still use the FFI to call the C library's `open`. (And it could unsafely mutate the security guard into one that allows everything, anyway.)</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:23:11.000196</ts>
    <user>Eugena</user>
    <text>That's why I think there should be a guide that describes how to turn the individual mechanisms into a security strategy.</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:23:25.000300</ts>
    <user>Marnie</user>
    <text>hmmm. when would it be a good idea to use security guards + code inspectors _without_ just going all the way and using sandboxes?</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:24:15.000003</ts>
    <user>Marnie</user>
    <text>maybe if you're only using `dynamic-require` kinds of things instead of full-blown `eval`?</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:26:26.000561</ts>
    <user>Eugena</user>
    <text>I think so, yes... or if for some other reason you want to share the same module registry (and module instances) instead of creating a new one.</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:29:31.000047</ts>
    <user>Marnie</user>
    <text>I could see doing it with distributed computation between trusted machines - in that case you might assume everyone's got the same collections so you can send functions in the form of pointers to module exports that other nodes dynamically require</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:29:57.000294</ts>
    <user>Marnie</user>
    <text>like static pointers in haskell</text>
  </message>
  <message conversation_id="408">
    <ts>2018-05-04T12:31:10.000166</ts>
    <user>Marnie</user>
    <text>I have absolutely no idea if that'd actually be faster or safer than eval though</text>
  </message>
  <message conversation_id="409">
    <ts>2018-05-04T13:25:13.000244</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="410">
    <ts>2018-05-04T13:59:57.000002</ts>
    <user>Odis</user>
    <text>Am I the only one that always gets an error when opening a new file in DrRacket?</text>
  </message>
  <message conversation_id="410">
    <ts>2018-05-04T14:00:02.000351</ts>
    <user>Odis</user>
    <text>Usually something like:
```
instantiate-linklet: mismatch;
 reference to a variable that has the wrong procedure or structure-type shape;
 possibly, bytecode file needs re-compile because dependencies changed
  name: add-relative-requires!
  exporting instance: "/Users/leif/rsrc/scribble/scribble-lib/scribble/srcdoc.rkt"
  importing instance: "/Users/leif/rsrc/gui/gui-lib/framework/preferences.rkt"
Module Language: invalid language specification in: scratch
```</text>
  </message>
  <message conversation_id="410">
    <ts>2018-05-04T14:00:24.000072</ts>
    <user>Odis</user>
    <text>(And I have recompiled)</text>
  </message>
  <message conversation_id="410">
    <ts>2018-05-04T14:11:52.000478</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; would it be possible to point me in the direction towards the solution to this issue? or do you think it’s too subtle for me to get all the pieces right? &lt;https://github.com/racket/racket/issues/2062&gt;</text>
  </message>
  <message conversation_id="410">
    <ts>2018-05-04T14:15:57.000422</ts>
    <user>Carlyn</user>
    <text>I think it’s pretty clear that some expansion context(s) need `def-ctx-scopes` to be a box, but I’m not confident enough about when to call `accumulate-def-ctx-scopes`.</text>
  </message>
  <message conversation_id="410">
    <ts>2018-05-04T14:43:13.000316</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; I don't know offhand. I can take a look, but probably not today (and I'm only half-way, probably, in sorting out the other problem you ran into yesterday)</text>
  </message>
  <message conversation_id="410">
    <ts>2018-05-04T14:44:37.000338</ts>
    <user>Carlyn</user>
    <text>Okay, that’s alright. I just figured I’d ask in case it was something I could deal with to relieve you of some work. If it wouldn’t make it any easier on you, then there isn’t much point, but I’ll definitely look at your fix once you do get to it, whenever that may be.</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T15:34:54.000621</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; &lt;@Eugena&gt; When I start up the macro stepper I’m getting an internal error:

```
Internal error:
derivation-parser: error on token #3292: &amp;lt;syntax-error, #(struct:exn:fail "expand: namespace mismatch; cannot locate module instance\n  module: #&amp;lt;module-path-index:\"private/lang.rkt\" \"base.rkt\" + 'lang[2010586]&amp;gt;\n  use phase: 0\n  definition phase: 0\n  for identifier: #&amp;lt;syntax:Users/leif/vsrc/idmt/editor/private/lang.rkt:103:64 from-editor&amp;gt;" #&amp;lt;continuation-mark-set&amp;gt;)&amp;gt;
```</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T15:35:05.000254</ts>
    <user>Odis</user>
    <text>```</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T15:35:11.000266</ts>
    <user>Odis</user>
    <text>```
derivation-parser: error on token #3292: &amp;lt;syntax-error, #(struct:exn:fail "expand: namespace mismatch; cannot locate module instance\n  module: #&amp;lt;module-path-index:\"private/lang.rkt\" \"base.rkt\" + 'lang[2010586]&amp;gt;\n  use phase: 0\n  definition phase: 0\n  for identifier: #&amp;lt;syntax:Users/leif/vsrc/idmt/editor/private/lang.rkt:103:64 from-editor&amp;gt;" #&amp;lt;continuation-mark-set&amp;gt;)&amp;gt;
  context...:
   /Users/leif/rsrc/parser-tools/parser-tools-lib/parser-tools/yacc.rkt:347:16: parsing-loop
   .../more-scheme.rkt:261:28
   /Users/leif/rsrc/macro-debugger/macro-debugger/macro-debugger/view/term-record.rkt:123:4: recache-deriv! method in term-record%
   /Users/leif/rsrc/macro-debugger/macro-debugger/macro-debugger/view/term-record.rkt:63:16: get-deriv-hidden? method in term-record%
   /Users/leif/rsrc/macro-debugger/macro-debugger/macro-debugger/view/stepper.rkt:70:24
   /Users/leif/rsrc/gui/gui-lib/mred/private/wx/common/queue.rkt:428:6
   /Users/leif/rsrc/gui/gui-lib/mred/private/wx/common/queue.rkt:479:32
   /Users/leif/rsrc/gui/gui-lib/mred/private/wx/common/queue.rkt:627:3
```</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T15:35:42.000478</ts>
    <user>Odis</user>
    <text>With this attached debug snippet.</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T15:36:26.000409</ts>
    <user>Odis</user>
    <text>Would either of you have any idea what the problem here might be?</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T15:37:14.000343</ts>
    <user>Odis</user>
    <text>For what its worth, I also get an error when expanding without the macro stepper, which is:
```
expand: namespace mismatch; cannot locate module instance
  module: #&amp;lt;module-path-index:"private/lang.rkt" "base.rkt" + 'lang[6832]&amp;gt;
  use phase: 0
  definition phase: 0
  for identifier: #&amp;lt;syntax:private/lang.rkt:103:64 from-editor&amp;gt;
  compilation context...:
   /Users/leif/v/idmt/editor/lang.rkt
  context...:
   binding-&amp;gt;module-instance
   binding-lookup50
   loop
   /Users/leif/racket/racket/collects/racket/require-transform.rkt:266:2: expand-import
   /Users/leif/racket/racket/collects/racket/private/reqprov.rkt:266:21: try-next
   /Users/leif/racket/racket/collects/racket/private/reqprov.rkt:243:2: require
   apply-transformer-in-context
   dispatch-transformer41
   do-local-expand58
   /Users/leif/racket/racket/collects/syntax/wrap-modbeg.rkt:46:4: do-wrapping-module-begin
   apply-transformer-in-context
   dispatch-transformer41
   loop
   finish
   [repeats 3 more times]
   pass-1-and-2-loop
   ...
```</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T15:37:33.000013</ts>
    <user>Odis</user>
    <text>So there clearly is a bug in my macro, but it also appears that there is an internal macro stepper error as well.</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:21:10.000148</ts>
    <user>Bertha</user>
    <text>&lt;@Odis&gt; Your example is 25,000 lines? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:21:34.000612</ts>
    <user>Odis</user>
    <text>&lt;@Bertha&gt; lol, nah, that’s the macro stepper’s debug output.</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:21:55.000099</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Maybe a simpler question, what does a `+` in a module-path-index mean, as in: `#&amp;lt;module-path-index:"private/lang.rkt" "base.rkt" + 'lang[6832]&amp;gt;`.</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:23:23.000149</ts>
    <user>Bertha</user>
    <text>&lt;@Odis&gt; Didn't mean to sound critical. I figured I'd try `debug.rkt` in Racket 6.10 to see how it worked, there. And wasn't sure what to do with it. Anyway got a `read` error due to the `#&amp;lt;` in the prints of the opaque structs. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:24:53.000477</ts>
    <user>Odis</user>
    <text>lol, ya.</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:25:01.000570</ts>
    <user>Odis</user>
    <text>Nah, I didn’t feel criticized.</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:25:11.000023</ts>
    <user>Odis</user>
    <text>Like, if that were a code snippet, it would be useless.</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:25:13.000356</ts>
    <user>Bertha</user>
    <text>(Also out of habit I hit C-A-q in Emacs to indent it, and was horrified to see "indenting region x% done..." message and thought I had a racket-mode bug to fix.)</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:25:25.000556</ts>
    <user>Odis</user>
    <text>But nah, its just debug diagnostic data. Which…I have no idea how to interperate. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:25:36.000338</ts>
    <user>Odis</user>
    <text>LOLOLOL</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:26:18.000210</ts>
    <user>Bertha</user>
    <text>I am happy to try `eval`-ing anything. Why I have so many worms.</text>
  </message>
  <message conversation_id="411">
    <ts>2018-05-04T16:27:44.000262</ts>
    <user>Odis</user>
    <text>(eval ’(totally not a worm))</text>
  </message>
  <message conversation_id="412">
    <ts>2018-05-06T01:01:43.000031</ts>
    <user>Temika</user>
    <text>is there a function to read a string to a list of datums? like read, but not for a single datum?</text>
  </message>
  <message conversation_id="412">
    <ts>2018-05-06T01:02:12.000002</ts>
    <user>Temika</user>
    <text>trying to write a reader to interp line by line using `(interp ,(call-with-input-string line read))</text>
  </message>
  <message conversation_id="412">
    <ts>2018-05-06T03:37:19.000041</ts>
    <user>Temika</user>
    <text>for/list in-port did the trick</text>
  </message>
  <message conversation_id="412">
    <ts>2018-05-06T07:50:36.000018</ts>
    <user>Monserrate</user>
    <text>port-&amp;gt;list</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-06T18:28:53.000066</ts>
    <user>Weldon</user>
    <text>(Hit send too early). Hopefully, I've not overlooked something obvious. Many thanks for any leads!</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-06T18:31:09.000098</ts>
    <user>Helena</user>
    <text>try: preferences -&amp;gt; colors -&amp;gt; background -&amp;gt; parenthesis color scheme</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-06T23:29:16.000157</ts>
    <user>Weldon</user>
    <text>&lt;@Helena&gt; Thank you very much. Doesn't work quite the same way, but accomplishes the same goal very nicely.  I appreciate it.</text>
  </message>
  <message conversation_id="414">
    <ts>2018-05-07T00:56:57.000144</ts>
    <user>Wally</user>
    <text>Is there a way to put `procedure-arity-includes` into a `contract-out` clause?</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T11:05:01.000192</ts>
    <user>Helena</user>
    <text>something like `(contract-out (f (-&amp;gt; (lambda (g) (procedure-arity-includes g .....)) any/c)))` ? (contracts are just code :))</text>
  </message>
  <message conversation_id="415">
    <ts>2018-05-07T13:04:15.000292</ts>
    <user>Odis</user>
    <text>Does anyone know if there is a `~datum` like syntax class that can be used with `define-conventions`?</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:09:13.000537</ts>
    <user>Helena</user>
    <text>wow, this program used to type check. It doesn't anymore, ~yay~!
```
#lang typed/racket

(: f (-&amp;gt; Integer Integer))
(define (f x [y 0])
(+ x y))
```</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:09:55.000411</ts>
    <user>Odis</user>
    <text>&lt;@Helena&gt; Sadly that only seems to change the highlighted color. Also no rainbows. :disappointed:</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:13:01.000458</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; that doesn't seem like it was an intended change</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:14:29.000221</ts>
    <user>Karry</user>
    <text>it type checks in my 6.12 repl</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:15:16.000337</ts>
    <user>Helena</user>
    <text>the change happened over the weekend</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:15:36.000463</ts>
    <user>Helena</user>
    <text>I think &lt;https://github.com/racket/typed-racket/commit/4b1a1bfa9d59aa2ae469e1217dd16aea9c2f5aa6&gt;</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:15:42.000162</ts>
    <user>Marnie</user>
    <text>_should_ that typecheck? I really can't tell</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:16:13.000242</ts>
    <user>Helena</user>
    <text>I'm happy getting an error, because it told me I had an "arity error" in my type</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:16:25.000653</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; yeah, I'm sure that's because of the kw argument change</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:21:44.000323</ts>
    <user>Karry</user>
    <text>&lt;@Helena&gt; help me through this -- why should that function not type check?</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:21:53.000021</ts>
    <user>Karry</user>
    <text>is it not a function that, if given an integer, produces an integer?</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:22:45.000141</ts>
    <user>Helena</user>
    <text>that's true</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:23:00.000523</ts>
    <user>Karry</user>
    <text>I'm pretty sure it should check at that type</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:23:35.000382</ts>
    <user>Karry</user>
    <text>I'm going to try and double check it wasn't the other commit that happened this weekend affecting functions...</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:24:31.000506</ts>
    <user>Marnie</user>
    <text>what should happen if it's called with two integers?</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:26:10.000150</ts>
    <user>Karry</user>
    <text>at that type that cannot happen</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:26:32.000146</ts>
    <user>Karry</user>
    <text>so, an application where 2 arguments are supplied should either be statically rejected by the type checker or not allowed by a contract</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:27:49.000010</ts>
    <user>Carlyn</user>
    <text>it seems like if that program is rejected then `(ann 1 Integer)` should also be rejected, which clearly doesn’t make sense</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:28:22.000211</ts>
    <user>Karry</user>
    <text>???</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:29:23.000589</ts>
    <user>Carlyn</user>
    <text>it seems odd to me that sometimes a subtype annotation is okay but sometimes it isn’t</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:29:33.000277</ts>
    <user>Karry</user>
    <text>what do you mean</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:29:39.000425</ts>
    <user>Karry</user>
    <text>what subtype annotation is not okay</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:29:50.000302</ts>
    <user>Carlyn</user>
    <text>Ben’s program</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:29:55.000326</ts>
    <user>Carlyn</user>
    <text>I am agreeing with you</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:30:12.000541</ts>
    <user>Karry</user>
    <text>I don't understand what we are agreeing on</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:30:18.000102</ts>
    <user>Karry</user>
    <text>xD</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:30:27.000174</ts>
    <user>Carlyn</user>
    <text>that the program Ben posted should typecheck</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T13:31:00.000448</ts>
    <user>Karry</user>
    <text>okay... I guess the "if/then" is what confused me, but nevermind</text>
  </message>
  <message conversation_id="413">
    <ts>2018-05-07T14:07:46.000565</ts>
    <user>Karry</user>
    <text>&lt;@Helena&gt; &lt;@Monserrate&gt; it looks like the regression was from &lt;https://github.com/racket/typed-racket/commit/4b1a1bfa9d59aa2ae469e1217dd16aea9c2f5aa6&gt; (and not the other function-related commits from this weekend)</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T14:51:51.000266</ts>
    <user>Lynna</user>
    <text>I expected that to typecheck, too. If you make `y` a keyword argument, then it does typecheck, so the part that has gone wrong is related to by-position optional arguments.</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T15:25:51.000250</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Is there any API accessible to macro authors that allows either (a) forcing recursive expansion in a context where `#:out-of-context-as-variable?` is `#f` or (b) determining whether or not a particular binding is in context in the current expansion context?</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T15:26:43.000559</ts>
    <user>Carlyn</user>
    <text>Put another way: is there any way I can recursively expand a piece of syntax and reject syntax that includes out of context variable references?</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T15:41:44.000076</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; I can't recall one, so I expect that there isn't (since you didn't find it)</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T15:42:27.000482</ts>
    <user>Carlyn</user>
    <text>Would adding a keyword argument to `local-expand` for that behavior be reasonable, or is there a better way to do it?</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T15:44:14.000417</ts>
    <user>Lynna</user>
    <text>An extra argument sounds ok to me. Note that the expander's exported API can't have keywords, though; a keyword variant would have to be implemented at the `racket/base` level.</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T17:25:24.000140</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I’m not sure I totally understand how to arrange for that to work out for the bootstrapping process. I tried doing the naïve thing of adding positional arguments to `local-expand` and its variants, then adding a new module `racket/private/kw-syntax-local`, but bootstrapping the expander failed with the following error:
```
Traversed 278 modules
Got 267 relevant linklets
Need 211 of those linklets
Code is 3024648 bytes as source
Unfortunately, some linklets depend on pre-defined host instances
that are not part of the runtime system:
 - /Users/alexis/gits/racket/racket/racket/collects/racket/private/kw-syntax-local.rkt at 0
   needs #%core: syntax-local-expand-expression
                 local-transformer-expand/capture-lifts
                 local-transformer-expand local-expand/capture-lifts
                 local-expand
   needed by side-effect
```</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T17:27:34.000454</ts>
    <user>Carlyn</user>
    <text>I’m not sure how to interpret this error. Does it mean there’s something wrong with the expander code, or with `kw-syntax-local.rkt`? It seems like it would be normal that `kw-syntax-local.rkt` needs `#%core`, but I don’t know what “needed by side-effect” means.</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T17:29:01.000428</ts>
    <user>Lynna</user>
    <text>It looks like the flattener can't infer that the new module is free of side effects. I don't have a guess at why, but I you could send me "kw-syntax-local.rkt" and maybe I'll see the problem.</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T17:29:50.000047</ts>
    <user>Carlyn</user>
    <text>The module is pretty small:
```
(module kw-syntax-local "pre-base.rkt"
  (require (prefix-in k: "pre-base.rkt"))

  (provide local-expand
           local-expand/capture-lifts
           local-transformer-expand
           local-transformer-expand/capture-lifts
           syntax-local-expand-expression)

  (define (local-expand s context stop-ids [intdefs '()]
                        #:allow-out-of-context? [allow-out-of-context? #t])
    (k:local-expand s context stop-ids intdefs allow-out-of-context?))

  (define (local-expand/capture-lifts s context stop-ids [intdefs '()] [lift-key (gensym 'lift)]
                                      #:allow-out-of-context? [allow-out-of-context? #t])
    (k:local-expand/capture-lifts s context stop-ids intdefs lift-key allow-out-of-context?))

  (define (local-transformer-expand s context stop-ids [intdefs '()]
                                    #:allow-out-of-context? [allow-out-of-context? #t])
    (k:local-transformer-expand s context stop-ids intdefs allow-out-of-context?))

  (define (local-transformer-expand/capture-lifts s context stop-ids [intdefs '()]
                                                  [lift-key (gensym 'lift)]
                                                  #:allow-out-of-context? [allow-out-of-context? #t])
    (k:local-transformer-expand/capture-lifts s context stop-ids intdefs lift-key
                                              allow-out-of-context?))

  (define (syntax-local-expand-expression s [opaque-only? #f]
                                          #:allow-out-of-context? [allow-out-of-context? #t])
    (k:syntax-local-expand-expression s opaque-only? allow-out-of-context?)))
```</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T17:37:37.000337</ts>
    <user>Lynna</user>
    <text>Ok – the expansion involves `make-optional-keyword-procedure`, and a later pass of the flattener can figure out that calling `make-optional-keyword-procedure` has no side effect, but the check for a reference to expander functions happens before that (and didn't seem easy to reorder, for reasons that I forget). So, adding keywords for functions below the expander level can work this way, but not functions from the expander layer. The right workaround isn't immediately obvious.</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T19:24:18.000148</ts>
    <user>Carlyn</user>
    <text>Sorry, I only just saw this—that makes some sense to me. I think that’s okay, since this thing I wanted to add was mostly just to be able to do “the right thing”, but what I have right now seems to work fine.</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T19:24:50.000129</ts>
    <user>Carlyn</user>
    <text>It does seem like it would be useful in general to be able to export functions with keywords from the expander layer, though.</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T22:59:44.000238</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; I think the solution is probably to improve the flattener so "kw-syntax-local.rkt" is ok. But not this week.</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-07T23:21:12.000106</ts>
    <user>Carlyn</user>
    <text>Understandable. I should probably be focusing on other things, anyway. :)</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-08T08:24:13.000093</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; the drawback of exporting keyword functions from the expander is that then the expander code needs to have the full kw infrastructure compiled in</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-08T08:25:34.000454</ts>
    <user>Monserrate</user>
    <text>I can't remember if the current status eliminates it all, but it should be possible currently</text>
  </message>
  <message conversation_id="417">
    <ts>2018-05-08T09:49:12.000376</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; I think the struct-predicate optimization generates `(-&amp;gt; any/c any/c)` contracts when it should generate `(-&amp;gt; any/c any)` contracts</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-08T09:50:26.000101</ts>
    <user>Monserrate</user>
    <text>yes, this program shows the problem:
```
#lang typed/racket

(: f : Any -&amp;gt; Boolean)
(define (f x) (string? x))

(provide f)
```</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-08T11:12:16.000428</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; re: expander keyword functions, I agree that the performance of the expander is critical, so I’d be okay with having to do the racket/base wrapping if it’s really necessary. I just think it would be an awkward limitation if all of the functions in the syntax local zoo were restricted from every using keyword arguments.</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-08T11:29:48.000326</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; I agree that kw arguments are useful, which is why the wrapping is sensible -- it's already done for lots of functions like `call-with-input-file`</text>
  </message>
  <message conversation_id="416">
    <ts>2018-05-08T11:30:31.000574</ts>
    <user>Carlyn</user>
    <text>yes, that’s all I really meant by “it would be useful in general to be able to export functions with keywords from the expander layer”, but in retrospect, I don’t think that was the best phrasing</text>
  </message>
  <message conversation_id="418">
    <ts>2018-05-08T13:54:33.000143</ts>
    <user>Odis</user>
    <text>&lt;@Eugena&gt; Poke?</text>
  </message>
  <message conversation_id="419">
    <ts>2018-05-08T15:40:50.000411</ts>
    <user>Helena</user>
    <text>is it possible to set environment variables for the package server builds? I want to see some log events, so I want to set `PLTSTDERR`</text>
  </message>
  <message conversation_id="419">
    <ts>2018-05-08T18:23:57.000300</ts>
    <user>Trey</user>
    <text>Is there any way to handle VM out of memory conditions in Racket?</text>
  </message>
  <message conversation_id="419">
    <ts>2018-05-08T18:24:25.000241</ts>
    <user>Trey</user>
    <text>I sometimes hit these for big computations, and I'd like to "catch" the error and terminate that computation, instead of terminating the whole program.</text>
  </message>
  <message conversation_id="419">
    <ts>2018-05-08T18:24:42.000280</ts>
    <user>Trey</user>
    <text>Or should I do everything inside custodians with memory limits?</text>
  </message>
  <message conversation_id="419">
    <ts>2018-05-08T20:13:21.000042</ts>
    <user>Bertha</user>
    <text>&lt;@Trey&gt; Maybe someone will have better advice for you later, but: I think yes I'd try using `custodian-limit-memory`.
Do note the caveats in the docs. The limit is checked only when a GC is done. You may exceed the limit; the limit might need to be much less than actual available memory. &lt;https://docs.racket-lang.org/reference/custodians.html#%28def._%28%28quote._~23~25kernel%29._custodian-limit-memory%29%29&gt;</text>
  </message>
  <message conversation_id="420">
    <ts>2018-05-08T20:14:33.000187</ts>
    <user>Bertha</user>
    <text>Also FYI `racket/sandbox` provides `call-with-limits` and `with-limits`. The memory limit aspect of these is implemented using `custodian-limit-memory`. But, they might be simpler one-liner wrappers you could try first.</text>
  </message>
  <message conversation_id="419">
    <ts>2018-05-08T20:17:17.000041</ts>
    <user>Bertha</user>
    <text>(As a mitigation for the memory limit being checked only during GC, I suppose you could try calling `collect-garbage` manually at "suitable intervals", but that's a bit hacky and idk if it would actually help much.)</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T08:40:28.000419</ts>
    <user>Nelson</user>
    <text>hi there. Is this a proper place for raising potential bugs?</text>
  </message>
  <message conversation_id="419">
    <ts>2018-05-09T09:10:59.000310</ts>
    <user>Alesha</user>
    <text>I believe it's fine to discuss here any issues you have.</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:11:07.000580</ts>
    <user>Alesha</user>
    <text>&lt;@Nelson&gt;</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:13:56.000267</ts>
    <user>Nelson</user>
    <text>the following fails in the second test only. I wouldnt believe that copying should be dependant on the struct-options (#:transparent) ?!
#lang racket/base
(require rackunit)
(struct Mystruct1 (x y) #:transparent)
(struct Mystruct2 (x y))
(define (mycopy1 x) (struct-copy Mystruct1 x))
(define (mycopy2 x) (struct-copy Mystruct2 x))
(define X1 (Mystruct1 1 2))
(define X2 (Mystruct2 1 2))
(module+ test
  (check-equal? X1 (mycopy1 X1))
  (check-equal? X2 (mycopy2 X2)))  ;;&amp;lt;- fail here.

. FAILURE
name:       check-equal?
location:   struct-bug.rkt:16:2
actual:     #&amp;lt;Mystruct2&amp;gt;
expected:   #&amp;lt;Mystruct2&amp;gt;</text>
  </message>
  <message conversation_id="419">
    <ts>2018-05-09T09:19:15.000252</ts>
    <user>Alesha</user>
    <text>Yes, the `#:transparent` option does make a difference.</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:20:52.000579</ts>
    <user>Nelson</user>
    <text>is it a bug or a feature?</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:21:01.000347</ts>
    <user>Alesha</user>
    <text>The last paragraph on this page &lt;https://docs.racket-lang.org/reference/structures.html?q=struct&gt; clarifies that structs are only equal if their types are the same, fields are not opaque, and result of `struct-&amp;gt;vector` are the same. In your case, Mystruct2 instances fields are opaque</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:21:21.000622</ts>
    <user>Alesha</user>
    <text>well it's by design, though I don't know why it's designed that way.</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:30:56.000609</ts>
    <user>Nelson</user>
    <text>yes, quite strange. I have a Very-Large-Struct so I decided to have it not #:transparent so I wouldnt print it by accident..</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:31:26.000706</ts>
    <user>Karry</user>
    <text>you can customize printing regardless of whether or not a struct is opaque</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:31:57.000519</ts>
    <user>Karry</user>
    <text>see &lt;https://docs.racket-lang.org/reference/structutils.html#%28mod-path._racket%2Fstruct%29&gt;</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:32:05.000356</ts>
    <user>Alesha</user>
    <text>well as far as I can gather, the idea is to control how structs can be "inspectable" `equal?` works by default if struct is `#:transparent` otherwise you can provide your own equality by using the `gen:equal+hash` generic interface</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:32:34.000512</ts>
    <user>Alesha</user>
    <text>for opaque structs or to override the default `#:transparent` equality</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:32:46.000377</ts>
    <user>Karry</user>
    <text>my simple understanding: an opaque struct can act as an arbitrary abstraction / a transparent struct exposes much more of its internal structure to anyone who can get their hands on it</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:33:28.000161</ts>
    <user>Karry</user>
    <text>I believe there have been comments that `#:transparent` may have been a better default (instead of opaque) when declaring a struct (could be wrong or there may have been more to it)</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:33:59.000239</ts>
    <user>Karry</user>
    <text>but that comment was a "hind-sight" comment if I recall</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:34:32.000610</ts>
    <user>Alesha</user>
    <text>yes I have come across archived discussions about how in retrospect `#:transparent` was the right default behavior, oh well. We have to live with past design choices.</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T09:36:17.000495</ts>
    <user>Alesha</user>
    <text>`struct` is used heavily in the Racket ecosystem, in the infrastructure implementations so it has accumulated a lot of add-ons and behaviors that seem inexplicable to typical application programmers. I only have used the basic struct features, haven't had the need to use the more obscure features.</text>
  </message>
  <message conversation_id="421">
    <ts>2018-05-09T10:05:04.000284</ts>
    <user>Nelson</user>
    <text>thanks &lt;@Alesha&gt; &lt;@Karry&gt; I will try and see if I can work around this using gen:equal+hash The point here was not so much the printing of the struct it self, it was more not being able to compare ‘like’ to ‘like’ when the struct is not #:transparent.</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T14:13:11.000329</ts>
    <user>Helena</user>
    <text>is `or/c` associative for "good" contracts? i.e. is `(or/c A B C)` the same as `(or/c A (or/c B C))` and `(or/c A (or/c B (or/c C)))` ....</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T14:13:31.000568</ts>
    <user>Helena</user>
    <text>(by "good" I'm thinking "no state")</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T14:14:22.000519</ts>
    <user>Monserrate</user>
    <text>&lt;@Eileen&gt; would know for sure, but i would worry about flat vs ho contracts</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T19:06:26.000332</ts>
    <user>Eileen</user>
    <text>&lt;@Helena&gt; I think it is associative regardless of the good or badness of A, B, and C. (Assuming they evaluate to contracts, and you are not doing any especially weird things in combinatory you write outside the contract system).</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:00:44.000346</ts>
    <user>Helena</user>
    <text>hm, I found an example where adding an inner `or/c` can lead to an exception --- because it delays a flat contract that would pass:
```
&amp;gt; (define ctc0 (or/c (-&amp;gt; boolean?) procedure? (-&amp;gt; string?)))
&amp;gt; (define ctc1 (or/c (-&amp;gt; boolean?) (or/c procedure? (-&amp;gt; string?))))
&amp;gt; (contract ctc0 void 'pos 'neg)
#&amp;lt;procedure:void&amp;gt;
&amp;gt; (contract ctc1 void 'pos 'neg)
; readline-input:4:0: broke its own contract
;   two of the clauses in the or/c might both match: (-&amp;gt; boolean?) and (or/c
;     procedure? (-&amp;gt; string?))
```</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:01:33.000282</ts>
    <user>Helena</user>
    <text>(but so far, no reason typed racket shouldn't flatten nested `or/c`s in the contracts it makes)</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:20:18.000108</ts>
    <user>Jen</user>
    <text>&lt;@Helena&gt; &lt;@Eileen&gt; I don't understand why it's ok to apply `ctc0` to `void` there, don't the first order checks of the 2 -&amp;gt; contracts overlap?</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:21:48.000028</ts>
    <user>Eileen</user>
    <text>Yes I agree with Dan </text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:21:51.000056</ts>
    <user>Eileen</user>
    <text>Looks buggy</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:22:07.000094</ts>
    <user>Eileen</user>
    <text>Oh I know why</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:22:34.000004</ts>
    <user>Eileen</user>
    <text>I have the wrong answer upthread. </text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:23:03.000206</ts>
    <user>Eileen</user>
    <text>It isn't associative unless all of the flat contracts come first (or they are all flat or none are)</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:27:03.000035</ts>
    <user>Jen</user>
    <text>&lt;@Eileen&gt; shouldn't the first example above error also though? I thought or/c applied the first order checks to disambiguate the higher order contracts? or is it that it short circuits if a flat contract would succeed first?</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:27:19.000271</ts>
    <user>Helena</user>
    <text>I can still get an error if all the flat contracts come first
```
&amp;gt; (define ctc0 (or/c procedure? (-&amp;gt; boolean?) (-&amp;gt; string?)))
&amp;gt; (define ctc1 (or/c (or/c procedure? (-&amp;gt; boolean?)) (-&amp;gt; string?)))
&amp;gt; (contract ctc0 void 'pos 'neg)
#&amp;lt;procedure:void&amp;gt;
&amp;gt; (contract ctc1 void 'pos 'neg)
; readline-input:4:0: broke its own contract
;   two of the clauses in the or/c might both match: (or/c procedure? (-&amp;gt;
;     boolean?)) and (-&amp;gt; string?)
```</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:27:45.000094</ts>
    <user>Helena</user>
    <text>&lt;@Jen&gt; I'm using `or/c` to "change the answer" of `contract-first-order`</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:27:51.000293</ts>
    <user>Eileen</user>
    <text>Or/c first collects all flat ones and then checks them. Only if they fail to pass does it look at the ho ones. </text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:28:12.000075</ts>
    <user>Eileen</user>
    <text>I see what you mean, Ben, so my wording was bad.</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:28:46.000079</ts>
    <user>Jen</user>
    <text>&lt;@Eileen&gt; ok, that makes sense and now I understand why `ctc0` is successfully applied in both of &lt;@Helena&gt;'s examples</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:28:47.000086</ts>
    <user>Helena</user>
    <text>I guess, it's associative if it doesn't group a flat contract with a chaperone?</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:28:59.000175</ts>
    <user>Eileen</user>
    <text>Something like that</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:29:24.000008</ts>
    <user>Eileen</user>
    <text>Maybe or/c is the wrong combinator for TR</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:29:37.000150</ts>
    <user>Eileen</user>
    <text>Maybe it should use something less "clever"</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:30:09.000164</ts>
    <user>Helena</user>
    <text>maybe, but I think I can turn this into a useful simplification rule for now</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:30:30.000128</ts>
    <user>Helena</user>
    <text>if there's a nested `or/c` and all its members are flat, then it can definitely be un-nested</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:31:43.000243</ts>
    <user>Eileen</user>
    <text>Yes</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:32:01.000270</ts>
    <user>Eileen</user>
    <text>There may be more general rules too</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:32:19.000221</ts>
    <user>Eileen</user>
    <text>In the case above it seems surprising that TR would generate such a contract</text>
  </message>
  <message conversation_id="422">
    <ts>2018-05-09T20:32:32.000062</ts>
    <user>Helena</user>
    <text>yeah, definitely</text>
  </message>
  <message conversation_id="423">
    <ts>2018-05-10T06:07:11.000352</ts>
    <user>Genie</user>
    <text>Hi guys</text>
  </message>
  <message conversation_id="423">
    <ts>2018-05-10T06:10:27.000317</ts>
    <user>Genie</user>
    <text>Can you help me, please. I use http-sendrecv function to send get request. On Linux everything is fine, but on win I get “connection ended early” error. How can I fix it?</text>
  </message>
  <message conversation_id="423">
    <ts>2018-05-11T09:21:41.000166</ts>
    <user>Alesha</user>
    <text>&lt;@Genie&gt; hi, are you still experiencing the same issue? I probably won't be of much help since I haven't used `net/http-client` library. You may want to post your issue on the Racker user mailing list &lt;https://groups.google.com/forum/#!forum/racket-users/&gt; That list has frequent visitors who may be able to help you with your problem.</text>
  </message>
  <message conversation_id="424">
    <ts>2018-05-11T17:38:28.000094</ts>
    <user>Karry</user>
    <text>is there a `raco pkg install --everything-on-the-pkg-server` option/script lying around somewhere?</text>
  </message>
  <message conversation_id="424">
    <ts>2018-05-11T19:40:49.000010</ts>
    <user>Karry</user>
    <text>(Ah, or does anyone have a quick description for how to use the ‘pkg-build’ package...)</text>
  </message>
  <message conversation_id="424">
    <ts>2018-05-11T20:57:39.000158</ts>
    <user>Lynna</user>
    <text>&lt;@Karry&gt; You can use `raco pkg catalog-archive` to get all the packages in ".zip" form, and then you can do something like `raco pkg install *.zip` – although, if I remember correctly, literal `raco pkg install *.zip` doesn't quite work; maybe the ".zip" files don't have the right name</text>
  </message>
  <message conversation_id="424">
    <ts>2018-05-11T20:58:54.000128</ts>
    <user>Lynna</user>
    <text>But it does seem more likely that you want to use `pkg-build`. The "documentation" for the package is in comments in "main.rkt".</text>
  </message>
  <message conversation_id="424">
    <ts>2018-05-11T21:19:38.000140</ts>
    <user>Karry</user>
    <text>&lt;@Lynna&gt; thanks for the tips!</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:12:22.000047</ts>
    <user>Sandi</user>
    <text>question about logging, if I define a logger with `(define-logger foo)` in `main.rkt` how do I make loggers like `(log-foo-info ...)` available to other procs in modules called by `main.rkt`?</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:22:24.000067</ts>
    <user>Bertha</user>
    <text>&lt;@Sandi&gt; I typically put that in a `logger.rkt` that `main.rkt` and other modules would `require`.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:22:58.000079</ts>
    <user>Sandi</user>
    <text>and they’re just made available or do I need to `provide` them?</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:24:16.000046</ts>
    <user>Bertha</user>
    <text>You'd need to `provide` them. They're just functions.
There's no handy provide-all-of-them-in-one-expression.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:24:27.000045</ts>
    <user>Bertha</user>
    <text>Either provide them one by one or maybe use `all-defined-out`</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:24:35.000070</ts>
    <user>Sandi</user>
    <text>ah ok ok - lemme try that out</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:25:31.000029</ts>
    <user>Bertha</user>
    <text>(A `logger.rkt` is where I'd put other fun such as setting `current-trace-notify` and friends to procs that shuttle traces to `log-xxx-debug`. Or shipping logs to AWS CloudWatch Logs or similar service.)</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:26:48.000056</ts>
    <user>Bertha</user>
    <text>But yeah, maybe someone should make a tiny package -- or submit a PR to racket itself -- that augments `define-logger` with a `define/provide-logger`.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:35:54.000041</ts>
    <user>Sandi</user>
    <text>ah that worked great</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:36:17.000114</ts>
    <user>Sandi</user>
    <text>i always get tripped up with logging - not a lot of examples out there</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T10:47:00.000091</ts>
    <user>Sandi</user>
    <text>btw nice protip from your article on using JSON formatted logging with AWS</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-13T23:52:05.000018</ts>
    <user>Helena</user>
    <text>this reminds me --- I have a function that accepts a logger and returns a function that collects the messages to that logger. Now its a package: &lt;https://github.com/bennn/make-log-interceptor&gt;</text>
  </message>
  <message conversation_id="426">
    <ts>2018-05-15T00:48:59.000022</ts>
    <user>Helena</user>
    <text>is there a built-in function to check if a list of things all cause a function to give the same result?</text>
  </message>
  <message conversation_id="426">
    <ts>2018-05-15T00:49:46.000079</ts>
    <user>Helena</user>
    <text>if `f` returns booleans, the function I'm thinking of should give the same result as: `(lambda (f x*) (or (andmap f x*) (not (ormap f x*))))`</text>
  </message>
  <message conversation_id="426">
    <ts>2018-05-15T00:58:23.000119</ts>
    <user>Helena</user>
    <text>or, for any `f`, the result should be the same as `(lambda (f x*) (= 1 (set-count (list-&amp;gt;set (map f x*)))))`</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T03:09:23.000232</ts>
    <user>Andreas</user>
    <text>Is there anyway to generate something similar to C NDEBUG, where a macro will do something if a variable is defined but nothing otherwise. However, when nothing is done, no code is generated?</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T03:10:55.000170</ts>
    <user>Andreas</user>
    <text>So the idea here is to track application event statistics. i.e. how long it's taking to calculate this or to calculate that. So, each function records a start/end event within an interesting 'area' of execution. However, I don't want these to do absolutely anything (no code generation) if I turn them off at compile time.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T03:12:53.000073</ts>
    <user>Andreas</user>
    <text>and as far as I understand it, if I do 
```
(define-syntax-rule (record-event name body ...)
   (when (statistics-enabled?)
         (add! (current-statistics) (make-start-event name (current-milliseconds)))
         body ...
```</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T03:13:19.000381</ts>
    <user>Andreas</user>
    <text>so, I do a couple of things there that should only happen when (statistics-enabled?) is true. However, this still issues code.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T03:13:45.000240</ts>
    <user>Andreas</user>
    <text>I would like a general method to set a variable at compile time that disables the code generation. Any suggestions?</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T08:28:21.000494</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; this is relatively easy to do with a macro -- for a sophisticated version see &lt;https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/utils/utils.rkt#L119&gt;</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T08:44:47.000616</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; thanks for the ref. I completely forgot that contracts would need to do this.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T08:45:12.000235</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; they don't need to do that -- those are about internal implementation contracts inside typed racket</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T08:45:57.000549</ts>
    <user>Monserrate</user>
    <text>here's another example: &lt;https://github.com/racket/racket/blob/master/racket/src/expander/common/performance.rkt&gt;</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T08:49:37.000478</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; maybe you pointed me to a different thing since it's in the typed-racket repo but isn't there a way to disable contracts in a program written with contracts? I was pretty sure there was something like this, maybe for contract profiling, but I might be confused. Guess I will search before opening my mouth again. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T08:49:57.000565</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; no, there isn't a general way to do that</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T08:50:24.000213</ts>
    <user>Andreas</user>
    <text>whoops. ok. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T09:25:21.000011</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; in the last example you reference it seems that the `no-code-measure` is always re-exported. is this the case, where you have to change the code in order to change the behaviour?</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T09:25:53.000036</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:04:03.000885</ts>
    <user>Andreas</user>
    <text>Does anyone have any feelings they would like to share about designing programs around racket class system versus struct inheritance + generics? Curious about experiences with these from the point of view of abstraction and performance.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:13:13.000229</ts>
    <user>Thaddeus</user>
    <text>&lt;@Andreas&gt; I design mostly with structs + generics, but change some entities to classes when their behavior changes depending on some internal state.</text>
  </message>
  <message conversation_id="427">
    <ts>2018-05-15T11:13:58.000441</ts>
    <user>Thaddeus</user>
    <text>Except when that given state can be a parameter</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:15:40.000722</ts>
    <user>Thaddeus</user>
    <text>so it goes like this:
&amp;lt;-- stateless -------------------------- statefull --&amp;gt;
 `struct` -- `generics` -- `parameters` -- `classes`</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:30:22.000307</ts>
    <user>Andreas</user>
    <text>&lt;@Thaddeus&gt; interesting, by statefull you mean private state, right? you can encode state in structs but that state is public.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:30:31.000135</ts>
    <user>Thaddeus</user>
    <text>yes exactly</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:30:55.000778</ts>
    <user>Thaddeus</user>
    <text>you can copy struct and be completely stateless</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:31:21.000110</ts>
    <user>Thaddeus</user>
    <text>by statefull I mean "behavior depends on an internal state"</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:32:32.000479</ts>
    <user>Andreas</user>
    <text>yes, that makes sense. thanks.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:39:02.000214</ts>
    <user>Thaddeus</user>
    <text>For example, when I'm inclined to use the "let-over-lambda" trick, so that a method sends a different result depending on some outside variable, I think twice because I might be needing a class after all.
```
(let ([n 0])
  (lambda ()
    (set! n (+ n 1))
    n))
```
could be changed into a counter class.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T11:41:32.000044</ts>
    <user>Thaddeus</user>
    <text>In general, most uses of `set!` are clues that something state-ish is going on, so I try to listen to my code... light up some candles... then things get spiritual.</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T22:22:08.000044</ts>
    <user>Shan</user>
    <text>I've defined metadata tags like (@template String) that are working nicely.  But they seem to break the BSL stepper.  Right now the tags ultimately expand into (values). The stepper errs with:   reconstruct: context expected one value, given empty</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T22:22:40.000176</ts>
    <user>Shan</user>
    <text>What should I be expanding into?</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T22:24:17.000166</ts>
    <user>Lynna</user>
    <text>&lt;@Shan&gt; `(void)` is less likely to trip up the stepper</text>
  </message>
  <message conversation_id="425">
    <ts>2018-05-15T23:23:11.000204</ts>
    <user>Shan</user>
    <text>(void) doesn't make the stepper barf, but leaves a lot of voids in the stepped output (require spd/tags)
(require 2htdp/universe)
(require 2htdp/image)
(void)
(void)
(void)</text>
  </message>
  <message conversation_id="428">
    <ts>2018-05-16T07:55:53.000271</ts>
    <user>Lynna</user>
    <text>&lt;@Freida&gt; What's the right alternative to `(void)`? (I think there may be a syntax property works, or maybe the alternative to `(void)` returned by `set!` is the right choice.)</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:19:17.000678</ts>
    <user>Wally</user>
    <text>Can anybody give me some pointers on debugging scribble example code? `raco setup` is timing out while compiling examples and the output always says `[running body]` where the line number should be.</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:20:06.000047</ts>
    <user>Helena</user>
    <text>what happens when you run `racket FILE.scrbl` ?</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:20:54.000076</ts>
    <user>Wally</user>
    <text>racket thinks for a second and then exits</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:20:56.000147</ts>
    <user>Wally</user>
    <text>no output</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:21:32.000489</ts>
    <user>Helena</user>
    <text>that's good</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:21:43.000597</ts>
    <user>Helena</user>
    <text>what about `raco scribble FILE.scrbl` ?</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:21:56.000232</ts>
    <user>Helena</user>
    <text>that will render the document, if everything works</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:23:03.000144</ts>
    <user>Wally</user>
    <text>`[Output to cmx.html]` followed by lots of lines beginning with `(dep` or `(tech`</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:23:13.000114</ts>
    <user>Wally</user>
    <text>seems to be working on my local machine</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:23:42.000006</ts>
    <user>Wally</user>
    <text>here's the actual error: &lt;http://pkg-build.racket-lang.org/server/built/fail/cmx.txt&gt;</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:24:08.000459</ts>
    <user>Wally</user>
    <text>travis does not complain either</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:24:42.000700</ts>
    <user>Helena</user>
    <text>oh, does `raco setup` time out on your machine?</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:24:48.000483</ts>
    <user>Wally</user>
    <text>no, never</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:25:48.000626</ts>
    <user>Helena</user>
    <text>ok then, I guess the package server has stricter time / memory limits</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:26:12.000481</ts>
    <user>Helena</user>
    <text>`raco test` has a `--drdr` option ... I was hoping `raco setup` had something similar but I don't see anything just now</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:28:11.000690</ts>
    <user>Wally</user>
    <text>what is drdr?</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:30:46.000652</ts>
    <user>Lynna</user>
    <text>&lt;@Wally&gt; From the pkg-build error, it looks like you may be creating a sandbox within the document (for examples, I assume) and that sandbox has a time limit. That is, it's not a limit imposed by the package-build system, but probably just the package-build machine being slower. You could use `call-with-trusted-sandbox-configuration` to remove the limit (and all other limits) while creating the sandbox evaluator, or you could set other parameters like `sandbox-eval-limits`.</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:37:52.000361</ts>
    <user>Helena</user>
    <text>&lt;http://drdr.racket-lang.org/&gt;</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:38:17.000109</ts>
    <user>Helena</user>
    <text>build/test server</text>
  </message>
  <message conversation_id="430">
    <ts>2018-05-16T15:45:50.000470</ts>
    <user>Wally</user>
    <text>&lt;@Lynna&gt; that's right, this is in a sandbox. Removing the limits would be easiest.</text>
  </message>
  <message conversation_id="429">
    <ts>2018-05-16T15:46:50.000187</ts>
    <user>Wally</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="431">
    <ts>2018-05-16T16:23:12.000007</ts>
    <user>Carlita</user>
    <text>BTW, I started experimenting with a preview tool for slideshow in DrRacket. It's still very experimental but I don't have much time to hack on it so I'll share the link in case anyone wants to contribute some hacking: &lt;https://github.com/takikawa/slideshow-preview-tool&gt;</text>
  </message>
  <message conversation_id="431">
    <ts>2018-05-16T16:31:27.000347</ts>
    <user>Wally</user>
    <text>Does DrDr build packages for the official catalog? Are those constraints published somewhere?</text>
  </message>
  <message conversation_id="432">
    <ts>2018-05-16T17:18:00.000195</ts>
    <user>Helena</user>
    <text>I think drdr and the package build are on different servers</text>
  </message>
  <message conversation_id="431">
    <ts>2018-05-16T17:54:07.000373</ts>
    <user>Ezra</user>
    <text>&lt;@Carlita&gt; I recall seeing a code doing something similar before: &lt;https://github.com/swo/laterna/blob/master/slide-watcher.rkt&gt;</text>
  </message>
  <message conversation_id="431">
    <ts>2018-05-16T17:55:32.000070</ts>
    <user>Carlita</user>
    <text>Oh nice, maybe that makes my plugin unnecessary. That would be good.</text>
  </message>
  <message conversation_id="431">
    <ts>2018-05-16T17:57:06.000119</ts>
    <user>Ezra</user>
    <text>Your plugin would be useful anyway - the code I linked is quite hard to find</text>
  </message>
  <message conversation_id="432">
    <ts>2018-05-16T20:35:11.000063</ts>
    <user>Wally</user>
    <text>Fellow slackers,

I'd like to pre-announce the initial release of my event programming library, `event-lang`.

&lt;https://pkgd.racket-lang.org/pkgn/package/event-lang&gt;

_This will be my first Racket package release and I'm asking for your help to get it right._

Event-lang is a Racket library that simplifies the creation of complex synchronizable events. It provides a primitive expression lifting form,

```
&amp;gt; (pure 123)
#&amp;lt;evt&amp;gt;
```

some event combinators,

```
&amp;gt; (sync (fmap + (pure 1) (pure 2)))
3
&amp;gt; (sync (app (pure +) (pure 1) (pure 2)))
3
&amp;gt; (sync (bind (pure 1) (pure 2) (λ xs (pure (apply + xs)))))
3
```

and a collection of event-friendly alternatives to base Racket forms and functions.

```
&amp;gt; (sync
   (event-let
    ([x (pure 1)]
     [y (pure 2)])
    (pure (list x y))))
'(1 2)
```

Composite events make progress by synchronizing constituent events, either concurrently or in a predictable sequence.

```
&amp;gt; (sync (async-set (pure 1) (pure 2) (pure 3)))
2
1
3
```

For an example of `event-lang` in the wild, look inside the `cmx` package, an (unreleased) communications library I'm also working on.

The event-lang project has three core objectives:

1. _Provide a sophisticated lifting form_ to simplify usage of the provided constructs. The `event/event` module contains a first approximation, but its construction was tedious and error prone, so I commented out the docs.

2. _Provide a full-blown `#lang event/racket/base`_ for producing whole modules of events and event constructors from ordinary Racket code in a principled manner.

3. _Provide support for static analysis of synchronization behaviors._ Event programming in Racket is a curious form of meta-programming, and a few simple compile-time checks could reduce cognitive overhead.

If `event-lang` might be useful to you, or you've thought about making something similar, please take a look and let me know what you think.</text>
  </message>
  <message conversation_id="433">
    <ts>2018-05-17T12:37:46.000564</ts>
    <user>Andreas</user>
    <text>is there anything else on `syntax-parse` besides: &lt;http://docs.racket-lang.org/syntax/index.html&gt;?</text>
  </message>
  <message conversation_id="433">
    <ts>2018-05-17T12:38:16.000064</ts>
    <user>Andreas</user>
    <text>I would like to see something more hands on like, how to implement `struct` using `syntax-parse`.</text>
  </message>
  <message conversation_id="433">
    <ts>2018-05-17T12:41:58.000375</ts>
    <user>Carlyn</user>
    <text>there’s &lt;http://docs.racket-lang.org/syntax-parse-example/index.html&gt;</text>
  </message>
  <message conversation_id="433">
    <ts>2018-05-17T12:43:13.000480</ts>
    <user>Helena</user>
    <text>here's a macro that implements structs as lists &lt;https://groups.google.com/d/msg/racket-users/ss20lwfUhjs/F_-RU_qQAQAJ&gt;</text>
  </message>
  <message conversation_id="433">
    <ts>2018-05-17T12:47:34.000764</ts>
    <user>Andreas</user>
    <text>Thanks, that's very helpful. I actually looked at the code for `struct` in the racket repo but it hasn't been ported to `syntax-parse` yet.</text>
  </message>
  <message conversation_id="433">
    <ts>2018-05-17T12:48:22.000299</ts>
    <user>Carlyn</user>
    <text>`struct` can’t use syntax/parse because syntax/parse’s implementation uses `struct`</text>
  </message>
  <message conversation_id="434">
    <ts>2018-05-17T14:27:30.000727</ts>
    <user>Monserrate</user>
    <text>removed an integration from this channel: &lt;https://racket.slack.com/services/B07TJ9DEW|twitter&gt;</text>
  </message>
  <message conversation_id="435">
    <ts>2018-05-17T18:35:47.000183</ts>
    <user>Tereasa</user>
    <text>any idea what `module-path-index-resolve: "self" index has no resolution` is about?  i see various references to it online but no conclusive answers.</text>
  </message>
  <message conversation_id="434">
    <ts>2018-05-17T20:17:29.000265</ts>
    <user>Lynna</user>
    <text>It means that you have a module path index where `module-path-index-split` returns two `#f`s. It doesn't stand for any particular module, but it used to mean "this module" within a module.</text>
  </message>
  <message conversation_id="435">
    <ts>2018-05-17T20:19:21.000133</ts>
    <user>Lynna</user>
    <text>&lt;@Tereasa&gt; ^</text>
  </message>
  <message conversation_id="435">
    <ts>2018-05-17T20:21:00.000136</ts>
    <user>Tereasa</user>
    <text>is it a symptom of an error in my code?  i don’t think i’m doing anything fancy with modules…</text>
  </message>
  <message conversation_id="435">
    <ts>2018-05-17T20:30:35.000264</ts>
    <user>Tereasa</user>
    <text>i changed a `#lang errortrace racket` to `#lang racket` and no longer get that error. but that can’t be the root cause.</text>
  </message>
  <message conversation_id="434">
    <ts>2018-05-17T20:42:32.000057</ts>
    <user>Lynna</user>
    <text>It might be a problem with `#lang errortrace`. Do you have a small-ish program you can send me?</text>
  </message>
  <message conversation_id="435">
    <ts>2018-05-17T21:44:35.000229</ts>
    <user>Tereasa</user>
    <text>&lt;@Lynna&gt; i don’t, sorry.</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T04:59:39.000534</ts>
    <user>Andreas</user>
    <text>Sometimes macro errors drive me bonkers... Can someone with better eyes than me understand why:
```
#lang racket

(require (for-syntax racket/syntax))

(define-syntax (define-feature-statistics stx)
  (syntax-case stx ()
    [(_ feature (event-types ...))
     (with-syntax ([stats-name (format-id stx "~a-statistics" #'feature)])
       #`(begin
           #,@(for/list ([x (in-list (syntax-&amp;gt;list #'(event-types ...)))])
                (syntax-case x (:timed)
                  [event0
                   (with-syntax ([register-name (format-id "register-event/~a" #'event0)])
                     #`(define-syntax (register-name stx)
                         (syntax-case stx
                           [(_)
                            (record-event (make-event event0 (current-inexact-milliseconds) (void))
                                          feature-statistics)])))]))))]))

(define-feature-statistics simulator
  (sim-symbolic))
```
complains about an error in :
```
regexp-match?: contract violation
  expected: (or/c string? bytes? path? input-port?)
  given: #&amp;lt;syntax:22:3 sim-symbolic&amp;gt;
  argument position: 2nd
  other arguments...:
```</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:00:41.000511</ts>
    <user>Andreas</user>
    <text>I know I should be using syntax-parse by now but I haven't gotten around to look into it...</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:00:59.000200</ts>
    <user>Andreas</user>
    <text>also, not sure `syntax-parse` would help in this situation.</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:02:29.000230</ts>
    <user>Andreas</user>
    <text>I am sure the error is obvious to those living in macro-land, but for those knocking on the gate trying to come in this is a very rude way to welcome you. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="437">
    <ts>2018-05-18T05:15:56.000261</ts>
    <user>Wally</user>
    <text>looks like you're missing an argument at `(with-syntax ([register-name (format-id`</text>
  </message>
  <message conversation_id="437">
    <ts>2018-05-18T05:16:24.000426</ts>
    <user>Wally</user>
    <text>`(format-id stx`...?</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:20:51.000193</ts>
    <user>Andreas</user>
    <text>&lt;@Wally&gt; ah, great. Thanks. I am indeed. But why is `regexp-match?` being pointed to as the culprit instead of `format-id`?</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:20:59.000008</ts>
    <user>Andreas</user>
    <text>maybe &lt;@Lynna&gt;?</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:22:58.000466</ts>
    <user>Wally</user>
    <text>take a look here &lt;https://github.com/racket/racket/blob/7d556d4006d13e45b3a8339eef85f847d3fb98ec/racket/collects/racket/syntax.rkt#L115&gt;</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:24:24.000302</ts>
    <user>Wally</user>
    <text>the definition of `restricted-format-string` below uses a regexp to validate the format string.</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:25:41.000391</ts>
    <user>Andreas</user>
    <text>&lt;@Wally&gt; understood but the error message still leaks internal details I shouldn't need to worry about.</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:39:26.000135</ts>
    <user>Wally</user>
    <text>Well, that's a run-time error. I don't see any contracts in the module.</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:44:55.000374</ts>
    <user>Wally</user>
    <text>I should separate those two comments. I meant to say, Racket is just crashing and reporting the point of error. A contract on `format-id` could catch bad calls and report the call site instead.</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T05:48:08.000360</ts>
    <user>Wally</user>
    <text>I wonder if it's absent for a reason. The signature looks pretty straight forward in the docs.</text>
  </message>
  <message conversation_id="438">
    <ts>2018-05-18T07:45:45.000216</ts>
    <user>Bertha</user>
    <text>Quick glance, maybe suffice to change `restricted-format-string?` from `(regexp-match? #rx"^(?:[^~]|~[aAn~%])*$" fmt)` to `(and (string? fmt) (regexp-match? #rx"^(?:[^~]|~[aAn~%])*$" fmt))`.
`format-id` is already using `raise-arguments-error` instead of contract. (Might be unable to require `racket/contract` because reasons like circular dependency.)</text>
  </message>
  <message conversation_id="436">
    <ts>2018-05-18T09:03:52.000554</ts>
    <user>Andreas</user>
    <text>So, I fixed my macro above, thanks &lt;@Wally&gt;. The thing create something like a struct with a few extra functions. I now need to provide to the user something like a `struct-out`. I looked at the `struct-out` implementation and OMG: &lt;https://github.com/racket/racket/blob/54989bddec0f854a290b427d7cc49b0105dc56a2/racket/collects/racket/private/reqprov.rkt#L978&gt;</text>
  </message>
  <message conversation_id="439">
    <ts>2018-05-18T09:04:03.000507</ts>
    <user>Andreas</user>
    <text>Is there an easier way to achieve something like it?</text>
  </message>
  <message conversation_id="439">
    <ts>2018-05-18T09:05:22.000430</ts>
    <user>Andreas</user>
    <text>I don't want to re-export the `struct-out` under a different name, but instead export a set of functions that are generated by the main macro.</text>
  </message>
  <message conversation_id="439">
    <ts>2018-05-18T12:17:52.000022</ts>
    <user>Andreas</user>
    <text>Using `-&amp;gt;i` i am trying to define a contract that ensures that two lists received as arguments have the same length. This seems to be the wrong way to do it since I cannot have an argument as its own dependent.</text>
  </message>
  <message conversation_id="439">
    <ts>2018-05-18T12:19:11.000021</ts>
    <user>Andreas</user>
    <text>So when I do `(-&amp;gt;i ([lst1 list?] [lst2 (lst1 lst2) (and/c list? (= (length lst1) (length lst2)))] ...` it fails with `-&amp;gt;i: lst2's contract depends on lst2's value`</text>
  </message>
  <message conversation_id="439">
    <ts>2018-05-18T12:20:25.000719</ts>
    <user>Carlyn</user>
    <text>Try this:
```
(-&amp;gt;i ([a list?]
      [b (a) (and/c list? (λ (b) (= (length a) (length b))))])
     any)
```</text>
  </message>
  <message conversation_id="440">
    <ts>2018-05-18T12:22:10.000560</ts>
    <user>Carlyn</user>
    <text>Remember that the arguments to `and/c` must be _contracts_. `(and/c list? #t)` is a contract that expects its argument to be a `list?` and be `eq?` to `#t`, which will never be satisfied.</text>
  </message>
  <message conversation_id="439">
    <ts>2018-05-18T12:22:11.000583</ts>
    <user>Andreas</user>
    <text>it seems I need to name the range. but `[out any/c]` will do even if it's redundant.</text>
  </message>
  <message conversation_id="439">
    <ts>2018-05-18T12:22:12.000667</ts>
    <user>Andreas</user>
    <text>thanks.</text>
  </message>
  <message conversation_id="439">
    <ts>2018-05-18T12:22:36.000304</ts>
    <user>Andreas</user>
    <text>yes, that seems to work. Now it makes sense!</text>
  </message>
  <message conversation_id="440">
    <ts>2018-05-18T14:02:16.000390</ts>
    <user>Wally</user>
    <text>It looks like the `struct-out` source is mostly argument processing. I wonder if it could be rewritten in a more transparent style.</text>
  </message>
  <message conversation_id="440">
    <ts>2018-05-18T15:32:07.000119</ts>
    <user>Monserrate</user>
    <text>&lt;@Wally&gt; you could write it using syntax-parse more clearly, but as mentioned earlier, syntax-parse uses structs</text>
  </message>
  <message conversation_id="439">
    <ts>2018-05-18T17:50:48.000087</ts>
    <user>Betsy</user>
    <text>I didn’t realize Rust’s type system designers were using PLT Redex.</text>
  </message>
  <message conversation_id="440">
    <ts>2018-05-19T00:11:58.000077</ts>
    <user>Wally</user>
    <text>As an exercise, I rewrote `struct-out` in a more self-descriptive style. Here's the diff: &lt;https://github.com/dedbox/racket/commit/1eb85d2fc44b7b0a442410c109d7e2d3519c3429&gt;</text>
  </message>
  <message conversation_id="440">
    <ts>2018-05-19T00:12:13.000005</ts>
    <user>Wally</user>
    <text>I required "define.rkt" for syntax and then used it to move and rename chunks of code. Not sure how safe that is, but the unit tests in racket-test-core are all passing.</text>
  </message>
  <message conversation_id="440">
    <ts>2018-05-19T00:15:30.000029</ts>
    <user>Wally</user>
    <text>Creating this was very informative. It helped me understand Racket a little better and gave me a reason to learn how to work with the Racket source.</text>
  </message>
  <message conversation_id="440">
    <ts>2018-05-19T00:23:19.000020</ts>
    <user>Wally</user>
    <text>&lt;@Monserrate&gt; this is what I meant earlier</text>
  </message>
  <message conversation_id="440">
    <ts>2018-05-19T03:50:08.000053</ts>
    <user>Andreas</user>
    <text>&lt;@Wally&gt; Thanks for the rewrite. Definitely more readable.</text>
  </message>
  <message conversation_id="441">
    <ts>2018-05-21T03:41:24.000073</ts>
    <user>Andreas</user>
    <text>&lt;@Betsy&gt; Do you have a reference to their plt redex sources? I would really like to see what they're up to.</text>
  </message>
  <message conversation_id="442">
    <ts>2018-05-21T10:35:06.000527</ts>
    <user>Bertha</user>
    <text>:rolling_on_the_floor_laughing: &lt;@Eileen&gt; on :fire: &lt;https://groups.google.com/forum/#!topic/racket-users/SmLH25Z1sPI&gt;</text>
  </message>
  <message conversation_id="442">
    <ts>2018-05-21T10:35:35.000489</ts>
    <user>Eileen</user>
    <text>yeah, probably not my wisest hour</text>
  </message>
  <message conversation_id="442">
    <ts>2018-05-21T10:36:08.000730</ts>
    <user>Bertha</user>
    <text>&lt;@Eileen&gt; Oh, you attend Northwestern? You must be very smart!</text>
  </message>
  <message conversation_id="442">
    <ts>2018-05-21T10:36:16.000478</ts>
    <user>Bertha</user>
    <text>:smile:</text>
  </message>
  <message conversation_id="442">
    <ts>2018-05-21T10:36:28.000248</ts>
    <user>Karry</user>
    <text>I enjoyed seeing it xD</text>
  </message>
  <message conversation_id="442">
    <ts>2018-05-21T10:37:08.000611</ts>
    <user>Eileen</user>
    <text>glad it provided comic relief for some :slightly_smiling_face:</text>
  </message>
  <message conversation_id="443">
    <ts>2018-05-21T16:44:28.000543</ts>
    <user>Claud</user>
    <text>Wondering if anyone could tell me why this program blames the server submodule (and ideally how to get it to blame the client instead): 
```#lang racket

(module server racket
  (provide (contract-out
            [struct base ([num number?])
              #:omit-constructor]))
  (struct base (num)
    #:transparent))

(require 'server)

(struct derived base (sym)
  #:transparent)

(derived "not a number" 'bad) ;; blames server
```</text>
  </message>
  <message conversation_id="443">
    <ts>2018-05-21T16:46:09.000083</ts>
    <user>Claud</user>
    <text>(The `#:omit-constructor` option doesn't appear to be relevant to the blame.)</text>
  </message>
  <message conversation_id="443">
    <ts>2018-05-21T16:47:45.000482</ts>
    <user>Carlyn</user>
    <text>&lt;@Claud&gt; Wow, that’s subtle. I think you should probably open a bug.</text>
  </message>
  <message conversation_id="443">
    <ts>2018-05-21T17:06:01.000381</ts>
    <user>Claud</user>
    <text>I guess I will do that. Usually when I see blame that isn't what I expected the answer ends up being that I didn't grok some nuance of the obligations the contract I wrote actually created, but I'm especially suspicious in this case because I don't see any other way for the server module to enforce this kind of requirement (which I imagine is fairly common).</text>
  </message>
  <message conversation_id="444">
    <ts>2018-05-21T17:17:31.000275</ts>
    <user>Andreas</user>
    <text>When are we expecting to get a racket 7 release?</text>
  </message>
  <message conversation_id="443">
    <ts>2018-05-21T17:26:01.000235</ts>
    <user>Claud</user>
    <text>I've opened an issue for the above: &lt;https://github.com/racket/racket/issues/2093&gt;</text>
  </message>
  <message conversation_id="444">
    <ts>2018-05-21T18:50:15.000189</ts>
    <user>Carrol</user>
    <text>I can’t figure out where to turn off coverage coloring. I’m walking through some of HTDP and don’t want code turning black after hitting run. I can’t find it to save my life.</text>
  </message>
  <message conversation_id="444">
    <ts>2018-05-21T18:52:44.000359</ts>
    <user>Carrol</user>
    <text>oh! is this part of BSL directly??</text>
  </message>
  <message conversation_id="443">
    <ts>2018-05-21T19:18:06.000198</ts>
    <user>Claud</user>
    <text>I don't know if this is the best way, but if you choose "Determine language from source" instead of  "Beginning Student" in the language menu and then start your program with `#lang htdp/BSL`, you won't get coverage coloring. However, you will also loose the stepper button, for example. (I don't know if that's intentional or if there is any way to use the stepper with `#lang htdp/BSL`.)</text>
  </message>
  <message conversation_id="443">
    <ts>2018-05-21T19:19:51.000263</ts>
    <user>Claud</user>
    <text>Actually, the best way is to write test cases that cover all of your code paths :stuck_out_tongue: (Sometimes I miss having the black color to goad me into writing more tests.)</text>
  </message>
  <message conversation_id="445">
    <ts>2018-05-21T23:39:07.000067</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; the plan (see &lt;@Lynna&gt;'s email on Feb 20) is to have the upcoming summer release be Racket 7</text>
  </message>
  <message conversation_id="445">
    <ts>2018-05-22T09:01:03.000043</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; &lt;@Eileen&gt; any idea what might be causing the blank file here &lt;https://plt.eecs.northwestern.edu/pkg-build/server/built/fail/subtemplate.txt&gt; ?</text>
  </message>
  <message conversation_id="445">
    <ts>2018-05-22T09:27:49.000117</ts>
    <user>Eileen</user>
    <text>no, sorry</text>
  </message>
  <message conversation_id="445">
    <ts>2018-05-23T06:35:26.000128</ts>
    <user>Andreas</user>
    <text>Does anybody know of any alternative to quickcheck for racket? This seems to be slightly abandoned and the documentation is lacking. For example, creating an `arbitrary-nonempty-list` function seems to be quite tricky and left as an exercise to the reader. If you look at the source code of `arbitrary-list`, it uses a `variant` function that's not provided by the library. :disappointed:</text>
  </message>
  <message conversation_id="445">
    <ts>2018-05-23T11:46:06.000047</ts>
    <user>Karry</user>
    <text>&lt;@Andreas&gt; in case you weren't aware: although not exactly the same, you can get some similar capabilities from Racket's contract library (see &lt;https://docs.racket-lang.org/reference/Random_generation.html?q=exercise-contract#%28def._%28%28lib._racket%2Fcontract..rkt%29._contract-exercise%29%29&gt;)</text>
  </message>
  <message conversation_id="445">
    <ts>2018-05-23T12:07:12.000197</ts>
    <user>Andreas</user>
    <text>&lt;@Karry&gt; interesting, was not aware of it. Thanks for the ref.</text>
  </message>
  <message conversation_id="446">
    <ts>2018-05-23T19:47:13.000310</ts>
    <user>Sandi</user>
    <text>howdy - currently trying to run a `big-bang` project on a Raspberry Pi and getting an error when I try to run it:

```
$ racket third.rkt
Unable to init server: Could not connect: Connection refused
Gtk initialization failed for display ":0"
```</text>
  </message>
  <message conversation_id="446">
    <ts>2018-05-23T19:47:20.000044</ts>
    <user>Sandi</user>
    <text>guess this is X11 related somehow?</text>
  </message>
  <message conversation_id="446">
    <ts>2018-05-23T19:47:34.000008</ts>
    <user>Sandi</user>
    <text>or Gtk?</text>
  </message>
  <message conversation_id="446">
    <ts>2018-05-23T19:52:34.000047</ts>
    <user>Sandi</user>
    <text>ah never mind</text>
  </message>
  <message conversation_id="446">
    <ts>2018-05-23T19:52:40.000276</ts>
    <user>Sandi</user>
    <text>can’t do it over ssh</text>
  </message>
  <message conversation_id="446">
    <ts>2018-05-23T19:53:47.000054</ts>
    <user>Sandi</user>
    <text>derp</text>
  </message>
  <message conversation_id="447">
    <ts>2018-05-23T19:59:28.000116</ts>
    <user>Tereasa</user>
    <text>does `ssh -Y ...` help?</text>
  </message>
  <message conversation_id="446">
    <ts>2018-05-23T20:08:46.000019</ts>
    <user>Sandi</user>
    <text>i just VNCd into the pi and started it from the terminal there</text>
  </message>
  <message conversation_id="448">
    <ts>2018-05-24T11:17:17.000700</ts>
    <user>Bertha</user>
    <text>&lt;https://racket.slack.com/archives/C06V96CKX/p1527090366000047&gt;
I didn't know about that either.

The docs say:
&amp;gt; (contract-exercise val ...+) → void?
&amp;gt;   val : any/c
And I thought it's weird you can't specify "fuel" i.e. attempts.

I go to the source and it is:
```
(define (contract-exercise #:fuel [fuel 10] v1 . vs)
 ...
```
So I guess the docs just need to be updated --  unless this is _intended_ to be undocumented?</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T14:57:38.000514</ts>
    <user>Alesha</user>
    <text>is it possible to `dynamic-require` a submodule? I tried to use `submod` in a `dynamic-require` expression and am getting a misuse of submod due to not being within a `require` or `provide` error. The documentation led me to believe it would be possible since a `submod` expression is a valid module-path entity according to `require`'s grammar and `dynamic-require`'s documented interface.</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T14:58:33.000070</ts>
    <user>Monserrate</user>
    <text>&lt;@Alesha&gt; sounds like you're missing a `quote`</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T14:59:07.000572</ts>
    <user>Alesha</user>
    <text>ok, let me see where I need to put in `quote`</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T14:59:32.000712</ts>
    <user>Carlyn</user>
    <text>To clarify Sam’s point, you want something like `(dynamic-require '(submod a b) 'x)`.</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T15:00:02.000024</ts>
    <user>Alesha</user>
    <text>ok that worked, thanks!</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T15:00:07.000161</ts>
    <user>Carlyn</user>
    <text>`dynamic-require` is a function, not a macro, so writing `(submod a b)` as a bare argument will try to apply `submod` as a function.</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T15:00:17.000493</ts>
    <user>Alesha</user>
    <text>ahh I see, that is clear now</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T15:00:34.000227</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; btw thanks for helping track down release regressions</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T15:00:52.000190</ts>
    <user>Monserrate</user>
    <text>feel free to just edit the main issue descriptions</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T15:02:13.000328</ts>
    <user>Carlyn</user>
    <text>Okay, I will. I was mostly just curious about the rackjure test failure, which seemed like low-hanging fruit to diagnose.</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T15:08:17.000675</ts>
    <user>Monserrate</user>
    <text>not saying you have to do more (though it's certainly helpful), just that if you do you can just edit directly</text>
  </message>
  <message conversation_id="449">
    <ts>2018-05-24T15:10:18.000370</ts>
    <user>Carlyn</user>
    <text>Understood! I was about to do so and just noticed you already had.</text>
  </message>
  <message conversation_id="450">
    <ts>2018-05-24T15:42:59.000125</ts>
    <user>Alesha</user>
    <text>do you feel the `dynamic-require` documentation would benefit from adding clarifying notes about its behavior as a function as opposed to syntax? My intuition about its behavior was informed by `require` and `provide` being syntax so I tripped right over `dynamic-require`'s subtle difference. Also &lt;@Carlyn&gt;'s clarification was what allowed me to finally understand the reason for double `quote` used for module's identifier in the documentation's examples, e.g.

`&amp;gt; (module a racket/base (displayln "hello"))`
`&amp;gt; (dynamic-require ''a #f)`

The reason (please correct me if I'm wrong!) is because `dynamic-require` being a function evaluates its arguments, so `'a` is not enough since it results in `a` which isn't a valid module path. So instead passing `''a` results in `'a` which is a valid `(quote id)` module path.

I think the reasoning is obscure enough it would be helpful to add something to the effect to the docs.</text>
  </message>
  <message conversation_id="450">
    <ts>2018-05-24T15:52:09.000490</ts>
    <user>Alesha</user>
    <text>I'd be happy to submit a P.R. if you're fine with adding notes</text>
  </message>
  <message conversation_id="450">
    <ts>2018-05-24T15:53:27.000703</ts>
    <user>Monserrate</user>
    <text>Yes, some additional clarification (and maybe a submod example) would be good</text>
  </message>
  <message conversation_id="451">
    <ts>2018-05-28T15:11:06.000134</ts>
    <user>Weldon</user>
    <text>I am working through creation of a GUI app and am stuck on a something hopefully simple. My goal is to display text (around 15 lines) that the user can *copy*, but *not edit*. A `message%` is non-editable, but also appears to be non-copyable.  A `text%`, such as below, is copyable, but user-editable. Is their either (a) a third option or (b) a way to make a `text%` non-editable, while keeping its copyability? Thank you very much.

```
#lang racket/gui

(define f (new frame% [label "Simple Edit"]
                      [width 200]
                      [height 200]))
(define c (new editor-canvas% [parent f]))
(define t (new text%))
(send c set-editor t)
(send t insert "Money, get away\n")
(send t insert "Get a good job with more pay and you're okay\n")
(send f show #t)
```</text>
  </message>
  <message conversation_id="452">
    <ts>2018-05-28T15:35:55.000136</ts>
    <user>Marnie</user>
    <text>&lt;@Lashell&gt; to avoid test and doc build dependencies. I'd recommend against doing it though</text>
  </message>
  <message conversation_id="451">
    <ts>2018-05-28T15:57:46.000070</ts>
    <user>Aimee</user>
    <text>&lt;@Weldon&gt; `(send t lock #t)` can lock edit operations. However, I can't find how to make `text%` copy-able</text>
  </message>
  <message conversation_id="452">
    <ts>2018-05-28T15:58:40.000207</ts>
    <user>Aimee</user>
    <text>`frame:text%` seems to have implemented everything, but it is a frame..
```
#lang racket/gui

(require framework)

(define f (new frame:text%
               [width 200]
               [height 200]))
(define c (send f get-editor))
(send c insert "Money, get away\n")
(send c insert "Get a good job with more pay and you're okay\n")
(send c lock #t)
(send f show #t)
```</text>
  </message>
  <message conversation_id="451">
    <ts>2018-05-28T17:20:59.000029</ts>
    <user>Weldon</user>
    <text>&lt;@Aimee&gt; Thank you very much. I had not found `lock`. A bit of experimenting showed me how to combine it with the ability to copy. Adding a menu with editor operations menu items (see below), provides the ability to copy a locked `editor%` with either the menu or Cmd-C  (or Ctrl-C, depending on your platform.

In investigating `lock`, I came up with a related question. Section 5.9, Internal Editor Locks, of *The Racket Graphical Interface Toolkit* discusses three levels of internal locking,  `locked-for-write?`,  `locked-for-flow?` and  `locked-for-read?`. I see how I can check is an editor is locked-for-write, etc. But, I'm not clear: are these states are something that I can set? If not, what determines the internal locking state of an editor?

```
#lang racket/gui


(define f (new frame% [label "Simple Edit"]
                      [width 200]
                      [height 200]))
(define c (new editor-canvas% [parent f]))
(define t (new text%))
(send c set-editor t)
(send t insert "Money, it's a gas\n")
(send t insert "Grab that cash with both hands and make a stash")
(send t lock #t)
(send f show #t)


(define mb (new menu-bar% [parent f]))
(define m-edit (new menu% [label "Edit"] [parent mb]))
(append-editor-operation-menu-items m-edit #f)
```</text>
  </message>
  <message conversation_id="451">
    <ts>2018-05-28T17:31:35.000109</ts>
    <user>Aimee</user>
    <text>&lt;@Weldon&gt; I'm new to Racket GUI too. The doc of `lock` says
&amp;gt; This method does not affect internal locks, as discussed in Internal Editor Locks.
so I guess they are not related (maybe)?</text>
  </message>
  <message conversation_id="453">
    <ts>2018-05-28T18:53:53.000023</ts>
    <user>Claud</user>
    <text>I am very much not a GUI expert, but I develop an internal tool used by some of collaborators for which I wanted this feature. I also used `lock` in my initial implementation, but there were problems with that. (Unfortunately I don't remember what they were.) The approach I found is to define a subclass of `text%` that augments the `can-delete?` and `can-insert?` methods. The overview in the docs (&lt;http://docs.racket-lang.org/gui/editor-overview.html|docs.racket-lang.org/gui/editor-overview.html&gt;) talks a bit about this in the context of implementing an append-only editor.</text>
  </message>
  <message conversation_id="451">
    <ts>2018-05-28T18:59:00.000146</ts>
    <user>Claud</user>
    <text>&lt;@Weldon&gt; Here a class that I use for this. It takes a string or list of strings for its `content` arg, inserts that during initialization, then forbids any insertion/deletion. I'm not sure everything I've done here is ideal, but it works. ```#lang racket/gui

(define t%
  (class text%
    (init [content '()]
          [auto-wrap #t])
    (super-new [auto-wrap auto-wrap])
    (inherit insert
             begin-edit-sequence
             end-edit-sequence)
    (define initializing? #t)
    (begin-edit-sequence)
    (if (string? content)
        (insert content)
        (for ([str (in-list content)])
          (insert str)))
    (end-edit-sequence)
    (scroll-editor-to-top this)
    (set! initializing? #f)
    (define/augment (can-delete? start len)
      #f)
    (define/augment (can-insert? start len)
      initializing?)
    #|END t%|#))

(define (scroll-editor-to-top ed)
  (let loop ([wait 1])
    (cond
      [(send ed locked-for-flow?)
       (unless (&amp;gt; wait 5)
         (sleep wait)
         (loop (add1 wait)))]
      [else
       (send ed scroll-to-position 0)])))```</text>
  </message>
  <message conversation_id="451">
    <ts>2018-05-29T02:31:06.000111</ts>
    <user>Weldon</user>
    <text>&lt;@Claud&gt; Thank you.  That code actually helps me with several issues I was facing. Much appreciated.</text>
  </message>
  <message conversation_id="451">
    <ts>2018-05-29T14:31:34.000775</ts>
    <user>Weldon</user>
    <text>A clarification for anyone finding this in the future, the solution offered by &lt;@Claud&gt; (&lt;https://racket.slack.com/archives/C06V96CKX/p1527548340000146&gt;) does a great job of the "not editable" part. If my testing is right, however, it needs to be supplemented with the menu-bar code from &lt;https://racket.slack.com/archives/C06V96CKX/p1527542459000029&gt; in order to provide the "copyable" part. I missed that in my initial reading of &lt;@Claud&gt;'s answer.</text>
  </message>
  <message conversation_id="454">
    <ts>2018-05-30T05:13:55.000421</ts>
    <user>Tami</user>
    <text>&lt;@Weldon&gt; Hi, as I read the docs you cannot affect the state of the internal lock directly (which is what these test). As the document says 'The internal lock for an editor is not affected by calls to lock.'</text>
  </message>
  <message conversation_id="454">
    <ts>2018-05-30T05:14:55.000216</ts>
    <user>Tami</user>
    <text>I would imagine that the internal state is changed when you try to write text in or read text out.</text>
  </message>
  <message conversation_id="455">
    <ts>2018-05-30T16:08:41.000054</ts>
    <user>Bertha</user>
    <text>&lt;@Dia&gt; &lt;http://pkgd.racket-lang.org|pkgd.racket-lang.org&gt; (search) seems to be down</text>
  </message>
  <message conversation_id="455">
    <ts>2018-06-01T12:48:52.000138</ts>
    <user>Dia</user>
    <text>Anyone at NEU know how Jack Firth is doing? I haven't been able to get an email response from him</text>
  </message>
  <message conversation_id="455">
    <ts>2018-06-01T12:49:06.000623</ts>
    <user>Dia</user>
    <text>Feel free to DM me</text>
  </message>
  <message conversation_id="455">
    <ts>2018-06-01T12:53:04.000228</ts>
    <user>Omar</user>
    <text>Just curious: when will Racket 6.13 be released? It seems that right now we are not following &lt;https://github.com/racket/racket/wiki/Release-Calendar&gt;</text>
  </message>
  <message conversation_id="455">
    <ts>2018-06-01T13:05:04.000124</ts>
    <user>Alesha</user>
    <text>&lt;@Omar&gt; see &lt;https://groups.google.com/forum/#!topic/racket-users/i3MR4R1VFB0&gt; for information about Racket 7.0, a release cycle has been skipped in preparation for the v7.0 release</text>
  </message>
  <message conversation_id="455">
    <ts>2018-06-01T13:05:22.000344</ts>
    <user>Omar</user>
    <text>I see. Thanks!</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-02T12:46:25.000102</ts>
    <user>Helena</user>
    <text>nope</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:40:51.000536</ts>
    <user>Andreas</user>
    <text>Why is it that if I do a `raco setup --clean --pkgs s10`, it will issue a clean on all packages instead of just `s10`? I started noticing this after making the racket directory read-only.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:53:02.000784</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; I'm not sure. By "all packages" do you mean the entire Racket installation?
I tend to be set-and-forget with `raco` commands because I usually have a `Makefile` for each project.
The `clean` target is something like:
```
# Note: Each collection's info.rkt can say what to clean, for example
# (define clean '("compiled" "doc" "doc/&amp;lt;collect&amp;gt;")) to clean
# generated docs, too.
clean:
	raco setup --fast-clean --pkgs $(PACKAGE-NAME)
```</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:54:27.000294</ts>
    <user>Bertha</user>
    <text>(And in Emacs I have a keybinding for `projectile-compile-project`. So I type that, and type e.g. `make setup` or `make clean` (it remembers the last-entered).)</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:54:48.000206</ts>
    <user>Andreas</user>
    <text>I do very similar... my output looks like:
```
raco setup --fast-clean --pkgs s10
raco setup: version: 6.12
raco setup: platform: x86_64-linux [3m]
raco setup: installation name: 6.12
raco setup: variants: 3m
raco setup: main collects: /home/pmatos/installs/racket-6.12/collects
raco setup: collects paths: 
raco setup:   /home/pmatos/.racket/6.12/collects
raco setup:   /home/pmatos/installs/racket-6.12/collects
raco setup: main pkgs: /home/pmatos/installs/racket-6.12/share/pkgs
raco setup: pkgs paths: 
raco setup:   /home/pmatos/installs/racket-6.12/share/pkgs
raco setup:   /home/pmatos//.racket/6.12/pkgs
raco setup: links files: 
raco setup:   /home/pmatos/installs/racket-6.12/share/links.rktd
raco setup:   /home/pmatos//.racket/6.12/links.rktd
raco setup: main docs: /home/pmatos/installs/racket-6.12/doc
raco setup: --- cleaning collections ---
raco setup: deleting: in &amp;lt;pkgs&amp;gt;/eli-tester/tests
delete-file: cannot delete file
  path: /home/pmatos/installs/racket-6.12/share/pkgs/eli-tester/tests/compiled/eli-tester_rkt.dep
  system error: Permission denied; errno=13
...
```</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:54:56.000178</ts>
    <user>Andreas</user>
    <text>followed by long backtraces.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:55:40.000250</ts>
    <user>Andreas</user>
    <text>I am curious, is your racket folder writable? I have purposefully done a `chmod -w -R /home/pmatos/installs/racket-6.12`. All started falling apart, which as quite surprising.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:56:34.000889</ts>
    <user>Bertha</user>
    <text>I assume it's writable -- whatever default would be on macOS.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:58:00.000551</ts>
    <user>Bertha</user>
    <text>I'm surprised only because I do "clean" fairly frequently, and the subsequent "setup" is not taking the many many many minutes it would if it were rebuilding all of Racket.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:59:13.000586</ts>
    <user>Bertha</user>
    <text>(And/or, the execution of my program isn't taking the many many minutes it would, if there were no zos and it were expanding the universe from scratch :smile:)</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T09:59:43.000365</ts>
    <user>Bertha</user>
    <text>So honestly I never looked to carefully into what `--fast-clean` cleans exactly; it's just seemed to do what I expected.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:05:30.000831</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Is `s10` actually installed as a package -- i.e. do you see it in `raco pkg show`?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:08:19.000801</ts>
    <user>Andreas</user>
    <text>yes, it shows up. it's a dev install - link.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:08:45.000176</ts>
    <user>Andreas</user>
    <text>also, if I do `raco setup --pkgs s10`, it succeeds but I get:</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:09:20.000338</ts>
    <user>Andreas</user>
    <text>```
raco setup: WARNING: with-output-to-file: error deleting file
  path: /home/pmatos/installs/racket-6.12/share/info-cache.rktd
  system error: Permission denied; errno=13
```</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:09:57.000758</ts>
    <user>Andreas</user>
    <text>I always install my rackets in my home dir, but I wonder how it works if it's installed system-wide. This kind of thing would never work, that's why I am surprised this is happening.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:10:17.000011</ts>
    <user>Andreas</user>
    <text>Unless racket just does this when it detects it's installation to be in a user home.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:11:43.000772</ts>
    <user>Bertha</user>
    <text>Is the double slash in `/home/pmatos//.racket/6.12/pkgs` correct and if so what does that mean?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:12:34.000528</ts>
    <user>Bertha</user>
    <text>(Also `/home/pmatos//.racket/6.12/links.rktd`)</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:20:09.000603</ts>
    <user>Andreas</user>
    <text>I am not sure why the double slash shows but that's correct. it's basically the racket home dir in `$HOME/.racket`</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:33:21.000239</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Sorry, I don't know. Just FYI, `make clean` on frog for me does:
```
make clean
raco setup --fast-clean --pkgs frog
raco setup: version: 6.10
raco setup: platform: x86_64-macosx [3m]
raco setup: installation name: 6.10
raco setup: variants: 3m
raco setup: main collects: /Applications/Racket_v6.10/collects
raco setup: collects paths: 
raco setup:   /Users/greg/Library/Racket/6.10/collects
raco setup:   /Applications/Racket_v6.10/collects
raco setup: main pkgs: /Applications/Racket_v6.10/share/pkgs
raco setup: pkgs paths: 
raco setup:   /Applications/Racket_v6.10/share/pkgs
raco setup:   /Users/greg/Library/Racket/6.10/pkgs
raco setup: links files: 
raco setup:   /Applications/Racket_v6.10/share/links.rktd
raco setup:   /Users/greg/Library/Racket/6.10/links.rktd
raco setup: main docs: /Applications/Racket_v6.10/doc
raco setup: --- cleaning collections ---
raco setup: deleting: in &amp;lt;pkgs&amp;gt;/frog/frog
raco setup: deleting: in &amp;lt;pkgs&amp;gt;/frog/frog/config
raco setup: deleting: in &amp;lt;pkgs&amp;gt;/frog/frog/config/lang
raco setup: deleting: in &amp;lt;pkgs&amp;gt;/frog/frog/config/private
raco setup: deleting: in &amp;lt;pkgs&amp;gt;/frog/frog/private
raco setup: deleting: in &amp;lt;pkgs&amp;gt;/frog/frog/private/enhance-body/add-doc-links
raco setup: deleting: in &amp;lt;pkgs&amp;gt;/frog/frog/private/enhance-body/syntax-highlight
raco setup: deleting: in &amp;lt;pkgs&amp;gt;/frog/frog/private/upgrade
```
After which my other pkgs, both personal and Racket-supplied, still have zos/deps -- they were not deleted.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:35:25.000328</ts>
    <user>Bertha</user>
    <text>By any chance does your `info.rkt` for `s10` have a `(define clean ___)` that includes `eli-tester` ??</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:37:38.000600</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Oh. Hmm. Does `s10` happen to have a `tests` subdirectory?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:38:02.000302</ts>
    <user>Bertha</user>
    <text>Because `eli-tester` does: &lt;https://github.com/racket/eli-tester/tree/master/tests&gt;</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:39:19.000718</ts>
    <user>Bertha</user>
    <text>I guess what I'm getting at is the docs say, bold mine: 
&amp;gt; --pkgs ‹pkg› ... — constrain setup actions to collections that are within *(or partially within)* the named ‹pkg›s.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:39:33.000530</ts>
    <user>Andreas</user>
    <text>hummm, i have a tests subfolder but nowhere I have a `(define clean __)`.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:40:00.000231</ts>
    <user>Bertha</user>
    <text>I wonder if `s10` and `eli-tester` _packages_ could somehow both be contributing to a `tests` _collection_</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:40:18.000103</ts>
    <user>Andreas</user>
    <text>but interestingly I don't even know what `eli-tester` is, I imagine it's a dep of rackunit but I don't use `eli-tester` directly at all.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:40:18.000769</ts>
    <user>Bertha</user>
    <text>And that "intersection" causes `--fast-clean` to try to clean both contributing packages.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:40:30.000529</ts>
    <user>Andreas</user>
    <text>hummm, interesting.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:40:42.000559</ts>
    <user>Bertha</user>
    <text>I don't know if that even makes sense ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:40:55.000220</ts>
    <user>Andreas</user>
    <text>I do have a tests directory that doesn't define a collection name.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:41:14.000452</ts>
    <user>Andreas</user>
    <text>if it defaults to 'tests' then maybe it becomes part of `eli-tester`?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:41:23.000381</ts>
    <user>Andreas</user>
    <text>what are you doing in frog? will check...</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:41:46.000816</ts>
    <user>Andreas</user>
    <text>oh, you have no tests dir...</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:42:45.000099</ts>
    <user>Andreas</user>
    <text>rosette has a `test` dir instead of `tests`. I will probably clash with rosette if I rename my folder to `test`.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:43:17.000828</ts>
    <user>Andreas</user>
    <text>was not aware that collections could clash like this. I expected all to be somehow encapsulated by the project name, although I know little about package/collection internals.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:43:31.000695</ts>
    <user>Andreas</user>
    <text>maybe I should name by tests as `s10-tests` and retry.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:44:37.000056</ts>
    <user>Monserrate</user>
    <text>you can have multiple packages that all have `tests` directories</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:46:14.000941</ts>
    <user>Bertha</user>
    <text>But if they're packages whose `info.rkt` has `(define collection 'multi)`, don't each of the top-level directories end up being collections of those names?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:47:20.000951</ts>
    <user>Monserrate</user>
    <text>yes, but collections can have files from multiple packages</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:47:46.000108</ts>
    <user>Andreas</user>
    <text>*officially confused*</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:48:07.000664</ts>
    <user>Bertha</user>
    <text>This is a feature I've never wanted to use for the pkgs I've happened to write, so, I've always found it a bit confusing.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:48:17.000466</ts>
    <user>Bertha</user>
    <text>But IIUC one use case is a `data` collection</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:48:29.000525</ts>
    <user>Bertha</user>
    <text>And you want different pkgs to be able to contribute different data structures.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:48:30.000491</ts>
    <user>Andreas</user>
    <text>so a collection name can clash with any package known by racket?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:48:47.000526</ts>
    <user>Monserrate</user>
    <text>I'm not sure what you mean by clash</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:49:02.000263</ts>
    <user>Andreas</user>
    <text>if i create a package with a collection called `frog`, add it to pkgs, will I cause problems when frog tries to build?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:49:16.000987</ts>
    <user>Monserrate</user>
    <text>no</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:49:56.000841</ts>
    <user>Andreas</user>
    <text>how come my `tests` folder, seems to require `eli-tester` to be recompiled?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:50:55.000703</ts>
    <user>Monserrate</user>
    <text>do your tests depend on `eli-tester`?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:51:38.000158</ts>
    <user>Andreas</user>
    <text>no.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:51:50.000037</ts>
    <user>Monserrate</user>
    <text>then that seems weird</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:52:08.000273</ts>
    <user>Andreas</user>
    <text>they might depend on something, that depends on eli-tester though. Is there a way to print the dep tree?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:52:29.000900</ts>
    <user>Monserrate</user>
    <text>there's a gui visualizer by mflatt that's a package</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:52:35.000178</ts>
    <user>Andreas</user>
    <text>This is what I have on my root `info.pkg`:
```
(define deps '("benchmark"
               "profile-flame-graph"
               "profile-lib"
               "errortrace-lib"
               "aws"
               "rosette"
               "htdp-lib"
               "parser-tools-lib"
               "anaphoric"
               "rackunit-lib"
               "base"))

(define build-deps '("scribble-lib"
                     "quickcheck"
                     "rackunit"
                     "racket-doc"))
```</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:54:34.000149</ts>
    <user>Andreas</user>
    <text>you mean this: &lt;https://pkgs.racket-lang.org/package/gui&gt; ?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:57:02.001003</ts>
    <user>Monserrate</user>
    <text>no</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T10:57:32.000110</ts>
    <user>Monserrate</user>
    <text>&lt;https://github.com/mflatt/pkg-dep-draw&gt;</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:10:22.000854</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; It looks to me that the `eli-tester` _package_ contributes an `eli-tester.rkt` module to the `tests` _collection_.
So e.g. to use it I must `(require tests/eli-tester)`
If &lt;@Andreas&gt; has a `(define collection 'multi)` in the `info.rkt` for his `s10` _package_, and he has a `tests` top-level subdir, then that means he is _also_ contributing stuff within to the `tests` _collection_.
Therefore, that is why `raco setup --fast-clean --pkgs s10` is trying to delete zos/deps from `eli-tester`. The docs say (*bold* mine):
&amp;gt; --pkgs ‹pkg› ... — constrain setup actions to collections that are within *(or partially within)* the named ‹pkg›s.
And in his case, that's failing because read-only Racket install dir.
^^^ This is my "theory of the bug a.k.a. surprising behavior" :smile:  Yay? Nay?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:10:50.000732</ts>
    <user>Monserrate</user>
    <text>yes, that sounds plausible</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:11:20.000752</ts>
    <user>Monserrate</user>
    <text>that `--pkgs p` means do things to _all_ of _any_ collection that `p` has some files in</text>
  </message>
  <message conversation_id="457">
    <ts>2018-06-05T11:19:56.000453</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; So depending on what `s10` is, one simple thing might be to move almost everything except README and info.rkt down into an `s10` subdirectory of your existing `s10` "project" directory.
That way, your `tests` folder is a `s10/tests` collection instead of a `tests` collection.
In fact that `foo/foo/*` layout is probably a good pattern for any `(define collection 'multi)` that's really just supplying a single collection.
OR, use the single-collection incantation I can't remember because it didn't exist when I first learned about packages. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:21:26.000446</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; is there actually a problem that needs to be solved here?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:22:18.000186</ts>
    <user>Bertha</user>
    <text>&lt;https://racket.slack.com/archives/C06V96CKX/p1528206888000206&gt;</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:22:52.000102</ts>
    <user>Bertha</user>
    <text>TL;DR `raco setup --clean` or `--fast-clean` fails because his Racket dir is read-only and eli-tester is in there</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:23:15.000832</ts>
    <user>Bertha</user>
    <text>We were both confused how/why that could be.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:23:37.000543</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; &lt;@Monserrate&gt; sorry, was interrupted by my kids. still need to investigate what's going on on this side.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:24:04.000584</ts>
    <user>Monserrate</user>
    <text>what if you pass `--avoid-main`?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:26:26.000227</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; i think you are on the money with your explanation regarding the problem.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:26:50.000863</ts>
    <user>Andreas</user>
    <text>Might need a `s10/s10` directory structure then.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:27:30.000878</ts>
    <user>Monserrate</user>
    <text>I really think you don't need to change anything</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:27:54.000519</ts>
    <user>Andreas</user>
    <text>`--avoid-main` seems to do the trick.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:29:00.000087</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; it seems a should do something, I don't think it's the correct behaviour to have racket confuse my tests with `eli-tester` tests collection.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:29:25.000050</ts>
    <user>Andreas</user>
    <text>using `--avoid-main` looks to me as being just a workaround.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:29:53.000266</ts>
    <user>Monserrate</user>
    <text>it's not confusing things, it's just that `--pkgs s10` doesn't have as narrow a scope as you might want</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:31:52.000450</ts>
    <user>Andreas</user>
    <text>But at the same time, racket thinks that there's a connection between my tests and `eli-tester` tests so it sounds like I should clarify that. Not just for now, but in the future, I certainly wouldn't want another sudden surprise because my tests and `eli-tester` tests files are in the same collection.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:33:14.000735</ts>
    <user>Monserrate</user>
    <text>no, Racket doesn't think there's a connection</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:34:00.000965</ts>
    <user>Monserrate</user>
    <text>what's happening is that `raco setup --pkgs s10` looks at the s10 package, and sees what collections are in it, such as `s10` and `tests`, and then does the equivalent of `raco setup s10 tests`</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:36:07.000024</ts>
    <user>Bertha</user>
    <text>ICYI &lt;https://github.com/LeifAndersen/racket-_/tree/master&gt; seems to be an example of a single-collection package &amp;lt;=&amp;gt; &lt;https://pkgs.racket-lang.org/package/_&gt;</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:36:18.000671</ts>
    <user>Andreas</user>
    <text>i understand that. but when it does `raco setup ... tests` it seems confusing to me, that racket goes pick up `eli-tester` tests collection to clean/setup.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:37:47.000781</ts>
    <user>Alesha</user>
    <text>Is it because a collection can have multiple root directories contributed from different packages, so when one root directory is cleaned or setup, all other root directories receive the same treatment in case there are cross-references in documentation files?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:38:37.000223</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; `raco setup tests` means "run setup in all the places that have a `tests` collection", which happens to include `eli-tester` (but there's nothing special about eli-tester in this)</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:39:59.000195</ts>
    <user>Andreas</user>
    <text>Understood but the downside is of course, that if I have other packages installed which happen to have a `tests` collection, then I am suddenly cleaning/rebuilding those collection when it was not my initial intention to do so.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:40:39.000730</ts>
    <user>Monserrate</user>
    <text>right, the implementation isn't as precise as it could be, and so it sometimes does extra work (and this is more annoying for `--clean`)</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:41:08.000803</ts>
    <user>Monserrate</user>
    <text>I think it works this way because `raco setup` is collection-oriented</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:41:13.000647</ts>
    <user>Monserrate</user>
    <text>but I'm not certain</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:41:26.000791</ts>
    <user>Andreas</user>
    <text>ok.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T11:42:22.000233</ts>
    <user>Andreas</user>
    <text>i certainly need to understand this better but I think this discussion was already a great help.</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T13:47:07.000088</ts>
    <user>Helena</user>
    <text>&lt;@Monserrate&gt; quick update on immutable vectors: I have a small program that takes a long time to typecheck, and the time seems to be spent in `infer.rkt` when the args to `infer` are:
```
X = (g49724 g49725)
Y = ()
S = ((U (Immutable-Vectorof Exact-Rational) (Mutable-Vectorof Exact-Rational)))
T = ((U (Immutable-Vectorof (U g49724 g49725)) (Mutable-Vectorof (U g49724 g49725))))
R = g49724
```
(edit: simplified S,T --- its still slow with this smaller list of arguments)</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T13:47:35.000459</ts>
    <user>Helena</user>
    <text>its much faster if the program uses only `Mutable-Vectorof`, and also if I solve for each var in `X` one-by-one</text>
  </message>
  <message conversation_id="458">
    <ts>2018-06-05T13:48:24.000018</ts>
    <user>Helena</user>
    <text>do you know if (1) this is just a bad question to ask `infer` in the first place or (2) there might be a way to get the answer faster ?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T13:51:36.000114</ts>
    <user>Monserrate</user>
    <text>that should definitely be fast</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T13:52:05.000034</ts>
    <user>Monserrate</user>
    <text>if you change `Exact-Rational` to `String` is it much faster?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T13:52:26.000773</ts>
    <user>Monserrate</user>
    <text>can you write a program that just makes that call to `infer`?</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T13:56:46.000124</ts>
    <user>Helena</user>
    <text>I'll try those things --- how would I make a program that just calls infer? (serialize the arguments?)</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T13:57:17.000827</ts>
    <user>Monserrate</user>
    <text>you just require various parts of typed racket</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T13:57:27.000343</ts>
    <user>Monserrate</user>
    <text>there are unit tests for infer that should be helpful as a guide</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T15:18:01.000003</ts>
    <user>Helena</user>
    <text>ok, finally, this test case is slow (15 seconds):
```
   (infer-t (Un (-ivec -Rat)
                (-mvec -Rat))
            (Un (-ivec (Un (-v a) (-v b)))
                (-mvec (Un (-v a) (-v b))))
            #:vars '(a b))
```
and changing `-Rat` to `-String` makes it fast</text>
  </message>
  <message conversation_id="459">
    <ts>2018-06-05T15:18:34.000204</ts>
    <user>Helena</user>
    <text>maybe I did something bad in my changes to `infer.rkt` here?: &lt;https://github.com/racket/typed-racket/pull/575/files#diff-ca205189ac10d7d91266b647820cbe6a&gt;</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T15:22:01.000615</ts>
    <user>Monserrate</user>
    <text>hmm, those changes seem fine</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T15:22:36.000293</ts>
    <user>Monserrate</user>
    <text>what if you change `(-ivec E)` to `(-pair E (-val null))`?</text>
  </message>
  <message conversation_id="459">
    <ts>2018-06-05T15:35:13.000395</ts>
    <user>Helena</user>
    <text>still slow</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T15:39:34.000004</ts>
    <user>Helena</user>
    <text>and this test takes 15 seconds for me on TR master:
```
   (infer-t (Un (-pair -Rat (-val null))
                (-vec -Rat))
            (Un (-pair (Un (-v a) (-v b)) (-val null))
                (-vec (Un (-v a) (-v b))))
            #:vars '(a b))
```</text>
  </message>
  <message conversation_id="456">
    <ts>2018-06-05T15:47:54.000196</ts>
    <user>Monserrate</user>
    <text>ok then it seems not to be your fault</text>
  </message>
  <message conversation_id="459">
    <ts>2018-06-05T15:49:37.000596</ts>
    <user>Helena</user>
    <text>I'm trying now to open a separate issue .. maybe we can get this fixed in a few days</text>
  </message>
  <message conversation_id="459">
    <ts>2018-06-05T15:50:02.000629</ts>
    <user>Helena</user>
    <text>because I would like to merge the vector PR before the 7th, but not if its going to slow down the math library like it does</text>
  </message>
  <message conversation_id="460">
    <ts>2018-06-05T15:59:14.000459</ts>
    <user>Monserrate</user>
    <text>you might look at the call trace of `infer`</text>
  </message>
  <message conversation_id="461">
    <ts>2018-06-06T10:16:24.000003</ts>
    <user>Thaddeus</user>
    <text>Is this a bug in `struct-out` or am I doing something wrong?</text>
  </message>
  <message conversation_id="461">
    <ts>2018-06-06T10:17:38.000417</ts>
    <user>Thaddeus</user>
    <text>it was working fine until I made `elements` mutable</text>
  </message>
  <message conversation_id="462">
    <ts>2018-06-06T17:09:02.000027</ts>
    <user>Bertha</user>
    <text>&lt;@Kelly&gt; Well first I get an error on the `(require 'private)` because the `foo` module is a sibling that can't see the `private` module. I'm guessing these modules were originally files like `"private.rkt"`, `"foo.rkt"` and so on?
But assuming they are split into files like that:
I can't explain the behavior you're seeing.
I can say what I would do instead is:
```
;; private.rkt
#lang racket/base

(provide (struct-out element)
         (struct-out container))
(struct element (name value) #:transparent)
(struct container element ([elements #:mutable]) #:transparent)
```
```
;; foo.rkt -- and likewise for bar.rkt and baz.rkt
#lang racket/base
(require "private.rkt")
(provide (except-out (struct-out foo) foo)
         (rename-out [-foo foo]))
(struct foo container ())
(define (-foo)
  (foo "Foo" 0 '()))
```
```
;; public.rkt
#lang racket/base
(require "foo.rkt" "bar.rkt" "baz.rkt")
(provide (all-from-out "foo.rkt")
         (all-from-out "bar.rkt")
         (all-from-out "baz.rkt"))
```
```
;; user.rkt
#lang racket/base
(require "public.rkt")
(define my-foo (foo))
(set-container-elements! my-foo (list (bar) (baz)))
(displayln my-foo)
```</text>
  </message>
  <message conversation_id="462">
    <ts>2018-06-06T17:10:11.000244</ts>
    <user>Bertha</user>
    <text>TL;DR Instead of using `#:name`, just define the "special constructor" as a plain function and rename it on provide. Omit the "normal" ctor from the `struct-out`.</text>
  </message>
  <message conversation_id="462">
    <ts>2018-06-06T17:11:02.000073</ts>
    <user>Bertha</user>
    <text>Also I kind of prefer `public.rkt` this way, because it simply re-provides `foo.rkt` et al as-is. (In fact it'd be trivial using `#lang reprovide`.)</text>
  </message>
  <message conversation_id="462">
    <ts>2018-06-06T17:12:05.000215</ts>
    <user>Bertha</user>
    <text>But yes. I agree it's weird if your original way stopped working just because you added `#:mutable`. If that's really your question, I have no answer. Someone else hopefully does.</text>
  </message>
  <message conversation_id="461">
    <ts>2018-06-06T17:14:36.000200</ts>
    <user>Bertha</user>
    <text>Arg. Maybe I should `@` the correct person. &lt;@Thaddeus&gt; ^</text>
  </message>
  <message conversation_id="462">
    <ts>2018-06-07T03:24:34.000059</ts>
    <user>Thaddeus</user>
    <text>&lt;@Bertha&gt; Thank you :heart:</text>
  </message>
  <message conversation_id="461">
    <ts>2018-06-07T03:26:25.000169</ts>
    <user>Thaddeus</user>
    <text>also, I didn't thought about `all-from-out`, it's definitely better than doing `struct-out` mutiple times (which I think is part of the issue here).</text>
  </message>
  <message conversation_id="461">
    <ts>2018-06-07T03:28:15.000129</ts>
    <user>Thaddeus</user>
    <text>and I didn't knew about `#lang reprovide`, nice to see someone had the idea to simplify this process :slightly_smiling_face:</text>
  </message>
  <message conversation_id="463">
    <ts>2018-06-07T06:47:20.000368</ts>
    <user>Andreas</user>
    <text>I have just reported &lt;https://github.com/racket/racket/issues/2122&gt; however I am now unsure if this is a bug at all or just a hole on my knowledge of errortrace.</text>
  </message>
  <message conversation_id="463">
    <ts>2018-06-07T06:48:25.000263</ts>
    <user>Andreas</user>
    <text>If you look at the bug, the whole issue boils down to the fact that `racket -i -l errortrace` is not the same as setting `current-compile` to `errortrace-compile-handler` and dynamically requiring the target file. Does anybody know what's going on here?</text>
  </message>
  <message conversation_id="463">
    <ts>2018-06-07T06:57:00.000150</ts>
    <user>Andreas</user>
    <text>Opps, I also need to set the `error-display-handler`. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="464">
    <ts>2018-06-07T12:42:36.000512</ts>
    <user>Odis</user>
    <text>&lt;@Dia&gt; How hard would it be to add a flag to raco pkg install to only install the dependencies for a package, and not the package itself.</text>
  </message>
  <message conversation_id="464">
    <ts>2018-06-07T12:43:13.000076</ts>
    <user>Odis</user>
    <text>I imagine this being useful if I have an application/paper I want to use the `info.rkt` file to manage dependencies for me, but I don’t want to actually install it as a collection.</text>
  </message>
  <message conversation_id="465">
    <ts>2018-06-07T14:35:34.000446</ts>
    <user>Helena</user>
    <text>&lt;@Karry&gt; &lt;@Monserrate&gt; do you know of examples using TR intersection types?</text>
  </message>
  <message conversation_id="464">
    <ts>2018-06-07T14:35:58.000434</ts>
    <user>Helena</user>
    <text>Fabian M. just asked me --- I can forward the email or/and cc you on the reply</text>
  </message>
  <message conversation_id="465">
    <ts>2018-06-07T15:34:47.000175</ts>
    <user>Karry</user>
    <text>&lt;@Helena&gt; `case-&amp;gt;` is an intersection type that we reason incompletely about and is used all over the place. The more general intersections (i.e. `∩`) were originally added to simplify Typed Racket's implementation... off the top of my head I'm not aware of any "real world" programs using them (TBH I haven't looked), but some searching on Github may turn some up.</text>
  </message>
  <message conversation_id="465">
    <ts>2018-06-07T15:37:22.000655</ts>
    <user>Helena</user>
    <text>ok, yeah I just meant `∩`</text>
  </message>
  <message conversation_id="464">
    <ts>2018-06-08T03:01:32.000262</ts>
    <user>Thaddeus</user>
    <text>+1 for that feature.
Right now I usually make a `install.rkt` file that calls `raco pkg install (list of dependencies)` but it would be great to have something like the `pip install -r requirements.txt` of Python or the Ruby gemfiles.</text>
  </message>
  <message conversation_id="466">
    <ts>2018-06-08T07:25:59.000308</ts>
    <user>Andreas</user>
    <text>I am starting to play with `syntax-parse` and `define-syntax-class`. Is there a way to have keywords in the middle of a pattern as a literal-datum?</text>
  </message>
  <message conversation_id="466">
    <ts>2018-06-08T07:26:12.000020</ts>
    <user>Andreas</user>
    <text>I have: 
```
(begin-for-syntax
  (define-syntax-class field-spec
    #:attributes (idx name-list cst)
    #:datum-literals (#:names #:static)
    (pattern
     (idx:nat #:names name-list:expr #:static cst:nat))
    (pattern
     (idx:nat #:names name-list:expr)
     #:with cst #'#false))
```</text>
  </message>
  <message conversation_id="466">
    <ts>2018-06-08T07:26:15.000109</ts>
    <user>Andreas</user>
    <text>but it results in:</text>
  </message>
  <message conversation_id="466">
    <ts>2018-06-08T07:26:26.000049</ts>
    <user>Andreas</user>
    <text>```
; registerbank-impl.rkt:17:22: define-syntax-class: expected datum-literal entry
;   at: #:names
```</text>
  </message>
  <message conversation_id="466">
    <ts>2018-06-08T07:32:59.000406</ts>
    <user>Andreas</user>
    <text>i am using keywords for no obvious reason, I simply like how they look.</text>
  </message>
  <message conversation_id="466">
    <ts>2018-06-08T07:41:08.000383</ts>
    <user>Eugena</user>
    <text>&lt;@Andreas&gt; keywords (and numbers, booleans, strings, etc) already act as literals in a pattern; the `#:literals` and `#:datum-literals` lists are only necessary for identifiers</text>
  </message>
  <message conversation_id="466">
    <ts>2018-06-08T07:41:43.000325</ts>
    <user>Andreas</user>
    <text>ah ok, so I don't need to specify them as literals in the `pattern` form?</text>
  </message>
  <message conversation_id="466">
    <ts>2018-06-08T07:43:05.000359</ts>
    <user>Eugena</user>
    <text>right</text>
  </message>
  <message conversation_id="466">
    <ts>2018-06-08T07:50:19.000383</ts>
    <user>Andreas</user>
    <text>it works!!! :slightly_smiling_face: thx</text>
  </message>
  <message conversation_id="467">
    <ts>2018-06-08T12:04:58.000273</ts>
    <user>Franklin</user>
    <text>FWIW A guide to use Racket with Sublime Text 3: &lt;https://gist.github.com/sarahlim/3f1527f8e910c36b3303346422b03409&gt;</text>
  </message>
  <message conversation_id="468">
    <ts>2018-06-08T13:56:38.000065</ts>
    <user>Cherrie</user>
    <text>Is there a good resource for learning about FFI in Racket OTHER than the Racket-Docs? Maybe some blogs or something with more examples.</text>
  </message>
  <message conversation_id="468">
    <ts>2018-06-08T14:04:58.000516</ts>
    <user>Monserrate</user>
    <text>&lt;@Cherrie&gt; There are some examples here: &lt;https://github.com/racket/racket/tree/master/pkgs/racket-doc/ffi/examples&gt;</text>
  </message>
  <message conversation_id="468">
    <ts>2018-06-08T14:07:38.000674</ts>
    <user>Monserrate</user>
    <text>and there are blog posts here: &lt;http://prl.ccs.neu.edu/blog/2016/07/11/tutorial-racket-ffi-part-3/&gt;</text>
  </message>
  <message conversation_id="468">
    <ts>2018-06-08T14:16:42.000149</ts>
    <user>Cherrie</user>
    <text>&lt;@Monserrate&gt; Awesome. Thank you so much.</text>
  </message>
  <message conversation_id="468">
    <ts>2018-06-08T15:48:00.000192</ts>
    <user>Franklin</user>
    <text>&lt;@Cherrie&gt; The paper on the FFI is nice too.</text>
  </message>
  <message conversation_id="468">
    <ts>2018-06-08T15:51:37.000421</ts>
    <user>Alesha</user>
    <text>&lt;@Cherrie&gt; I second the FFI paper, it was helpful for me too</text>
  </message>
  <message conversation_id="468">
    <ts>2018-06-08T16:59:05.000178</ts>
    <user>Cherrie</user>
    <text>Is there a link to the FFI paper? I'm not even sure what I might try searching for.</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:00:41.000046</ts>
    <user>Monserrate</user>
    <text>&lt;http://docs.racket-lang.org/foreign/doc-bibliography.html?q=ffi&gt;</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:24:59.000102</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; do you know what the “preserve stacktrace” option means in the drracket language menu?</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:25:39.000005</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; &lt;http://docs.racket-lang.org/reference/eval.html?q=compile-en#%28def._%28%28quote._~23~25kernel%29._compile-context-preservation-enabled%29%29&gt;</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:25:59.000183</ts>
    <user>Carlyn</user>
    <text>aha, thank you!</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:27:12.000424</ts>
    <user>Carlyn</user>
    <text>now, for a followup question: is there a way to have DrRacket use .zo files produced by `raco setup` rather than always making new .zos? I thought turning errortrace off would do it, but I was wondering if I needed to also turn off preserve stacktrace… but I haven’t actually tried that yet.</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:27:34.000335</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; I thought it already did that ...</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:28:18.000247</ts>
    <user>Carlyn</user>
    <text>all I know is that, even with debugging turned off, drracket takes a really long time to run a file written in `#lang hackett` after I’ve changed the implementation of Hackett and rebuilt with `raco setup`, but subsequent runs are fast</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:31:52.000094</ts>
    <user>Eileen</user>
    <text>&lt;@Carlyn&gt; “populate compiled directories” ?</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:32:15.000422</ts>
    <user>Carlyn</user>
    <text>if I turn that off, will DrRacket use existing zos? I think I was afraid that meant “load everything from source”, but maybe that doesn’t make sense…</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:32:26.000084</ts>
    <user>Eileen</user>
    <text>If you turn that off, it will do what racket does.</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:32:29.000259</ts>
    <user>Eileen</user>
    <text>sometimes use them and sometimes now</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:32:31.000196</ts>
    <user>Eileen</user>
    <text>not</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:32:37.000394</ts>
    <user>Carlyn</user>
    <text>that makes more sense in retrospect</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:32:58.000346</ts>
    <user>Eileen</user>
    <text>if you turn it on, it will try to make its own compiled/drracket/* and do “good things” with them that you might not want your deployment environment to do</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-08T17:34:35.000076</ts>
    <user>Carlyn</user>
    <text>yes, that’s reasonable. I do wonder one other thing: how does DrRacket decide which files to compile? does it whitelist &amp;lt;collects&amp;gt; so that it doesn’t try and create drracket/ subdirectories anywhere in there, or is there something more complicated?</text>
  </message>
  <message conversation_id="470">
    <ts>2018-06-09T12:58:14.000028</ts>
    <user>Dia</user>
    <text>&lt;@Odis&gt; I think it would be no easier inside of `raco pkg` than as its own command that looked at the package's info, grabbed the deps, and then installed them. If you implemented, I can imagine putting it in `raco pkg`</text>
  </message>
  <message conversation_id="471">
    <ts>2018-06-09T15:15:13.000088</ts>
    <user>Ola</user>
    <text>I can't seem to make `feature-profile` work for me. when I pass the program name using `raco feature-profile` it complains about passing an argument: 
```
zextests: expects no arguments on the command line, given 1 argument: zextests.rkt
```</text>
  </message>
  <message conversation_id="469">
    <ts>2018-06-09T19:37:41.000035</ts>
    <user>Louanne</user>
    <text>Whenever I use racket units with a `define/contract` form I get a nonobvious error that says `define-unit: cannot export syntax from a unit`.</text>
  </message>
  <message conversation_id="472">
    <ts>2018-06-09T19:37:47.000056</ts>
    <user>Louanne</user>
    <text>am I being naive with this?</text>
  </message>
  <message conversation_id="472">
    <ts>2018-06-09T19:41:57.000037</ts>
    <user>Louanne</user>
    <text>(When I remove the `define/contract`s it works)</text>
  </message>
  <message conversation_id="472">
    <ts>2018-06-09T20:06:31.000068</ts>
    <user>Bertha</user>
    <text>&lt;@Louanne&gt; I've barely used units, much less using them with contracts.
I wonder if `define/contract` maybe just doesn't compose well with units, and instead you want something from &lt;http://docs.racket-lang.org/guide/Contracts_for_Units.html&gt; ?</text>
  </message>
  <message conversation_id="472">
    <ts>2018-06-09T20:22:54.000009</ts>
    <user>Louanne</user>
    <text>Yeah, I think that’s right.</text>
  </message>
  <message conversation_id="472">
    <ts>2018-06-09T20:51:56.000038</ts>
    <user>Monserrate</user>
    <text>&lt;@Louanne&gt; `define/contract` (and other contract-defining forms such as `contract-out`) define things as macros, which units don't support as exports</text>
  </message>
  <message conversation_id="472">
    <ts>2018-06-09T20:52:54.000010</ts>
    <user>Louanne</user>
    <text>Yeah, that makes upon thinking about it, I just didn’t really grok the error message</text>
  </message>
  <message conversation_id="473">
    <ts>2018-06-11T09:55:52.000197</ts>
    <user>Andreas</user>
    <text>Isn't it odd, that if I write a small macro using syntax-parse but forget to require `syntax/parse`, I don't get an undefined identifier for `syntax-parse`? Instead I get an error about `_`?</text>
  </message>
  <message conversation_id="473">
    <ts>2018-06-11T09:55:55.000224</ts>
    <user>Andreas</user>
    <text>Try this</text>
  </message>
  <message conversation_id="473">
    <ts>2018-06-11T09:56:05.000426</ts>
    <user>Andreas</user>
    <text>```
#lang racket

(define-syntax (make-banana stx)
  (syntax-parse stx
    [(_ name:id)
     #:with out
     (format-id #'name "banana-~a" #'name)
     
     #'(define (a-banana) name)]))
```</text>
  </message>
  <message conversation_id="473">
    <ts>2018-06-11T09:56:39.000477</ts>
    <user>Monserrate</user>
    <text>That's an unfortunate consequence of expansion order</text>
  </message>
  <message conversation_id="473">
    <ts>2018-06-11T09:57:05.000002</ts>
    <user>Monserrate</user>
    <text>if you didn't have an `_`, you'd get an error about `syntax-parse`</text>
  </message>
  <message conversation_id="473">
    <ts>2018-06-11T09:57:30.000329</ts>
    <user>Andreas</user>
    <text>ah... :slightly_smiling_face: ok...</text>
  </message>
  <message conversation_id="473">
    <ts>2018-06-11T09:57:39.000224</ts>
    <user>Andreas</user>
    <text>well fair enough. at least it's a known issue.</text>
  </message>
  <message conversation_id="474">
    <ts>2018-06-11T10:20:53.000569</ts>
    <user>Bertha</user>
    <text>Using `#lang racket/base` instead, you _do_ get "syntax-parse: unbound identifier in the transformer environment"
Of course what I used to do next was:
1. `(require syntax-parse)`
2. `(require syntax/parse)`
3. `(require (for-syntax syntax/parse))`
4. `syntax` is undefined....???
5. Eventually: `(require (for-syntax racket/base syntax/parse))`
This was probably when I started slapping together Fear of Macros ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="474">
    <ts>2018-06-11T10:28:08.000628</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; treading the same path.</text>
  </message>
  <message conversation_id="474">
    <ts>2018-06-11T10:30:13.000559</ts>
    <user>Bertha</user>
    <text>lol I made the same `syntax-parse` typo in 5 above; just fixed it</text>
  </message>
  <message conversation_id="474">
    <ts>2018-06-11T10:30:55.000274</ts>
    <user>Bertha</user>
    <text>Oh and 3. Fixed also.</text>
  </message>
  <message conversation_id="474">
    <ts>2018-06-11T10:31:18.000158</ts>
    <user>Bertha</user>
    <text>Really, I know how to racket.</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:47:58.000121</ts>
    <user>Andreas</user>
    <text>So, the latest one driving me crazy is this error that marks no line for problems. I managed to reduce it to a simple example (longer example is in the mailing list):
```
#lang racket

(require racket/generic
         (for-syntax syntax/parse
                     racket/syntax))

(define-generics fruit
  (fruit-name-len fruit))

(define-syntax (make-fruit stx)
  (syntax-parse stx
    [(_ name:id)
     #:with name-len
     (string-length (format "fruit-~a" #'name))
     
     #'(struct name
         (type)
         #:methods gen:fruit
         ((define (fruit-name-len f) name-len)))]))

(make-fruit banana)
```
Used `banana` and `fruit` to avoid the usual `foo` and `bar` but don't expect the example to make sense.</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:48:02.000692</ts>
    <user>Andreas</user>
    <text>Error is this beautiful:</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:48:12.000399</ts>
    <user>Andreas</user>
    <text>```
?: literal data is not allowed;
 no #%datum syntax transformer is bound in: 28
```</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:48:17.000763</ts>
    <user>Andreas</user>
    <text>Expansion looks ok.</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:48:51.000586</ts>
    <user>Andreas</user>
    <text>If I copy paste expansion to repl is also fine but just running the whole thing returns this interesting `?`.</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:49:14.000227</ts>
    <user>Andreas</user>
    <text>At this point, I wish I could reply back to the repl with `?` to force him to give me more information. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:50:22.000145</ts>
    <user>Carlyn</user>
    <text>&lt;@Andreas&gt; The `?` means there is no source location information on the `28`, which makes sense, since you’re implicitly converting it to syntax using `#:with`. I’ll give a longer explanation on the mailing list (and how to fix it).</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:53:36.000266</ts>
    <user>Bertha</user>
    <text>Speaking of FoM, I will update the sloppy `format-id` examples: &lt;https://stackoverflow.com/a/50559918/343414&gt;
But also, now I'm wondering why `format-id`'s `lctx` arg is `(or/c syntax? #f)`.
Instead would it be more helpful if it took `(or/c identifier? #f)` or even just `identifier?`
(Not necessarily proposing changing `format-id`. Maybe just defining a "safer" alternative wrapper.)</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:54:47.000816</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; ok, thanks. will eagerly await the explanation.</text>
  </message>
  <message conversation_id="474">
    <ts>2018-06-11T10:55:19.000400</ts>
    <user>Carlyn</user>
    <text>&lt;@Bertha&gt; I think sometimes it’s the right thing to do to take lexical context from something that isn’t an identifier</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T10:58:11.000721</ts>
    <user>Bertha</user>
    <text>When making another identifier? OK.
I still might define a little wrapper that helps remind me "don't just pass `stx`".</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T11:04:51.000749</ts>
    <user>Thaddeus</user>
    <text>I usually pass `stx` so I'm curious: what's the matter?</text>
  </message>
  <message conversation_id="474">
    <ts>2018-06-11T11:07:03.000382</ts>
    <user>Bertha</user>
    <text>&lt;@Thaddeus&gt;  See that SO link for example.</text>
  </message>
  <message conversation_id="474">
    <ts>2018-06-11T11:24:47.000533</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; thanks for your reply. Will reply to the mailing list for the benefit of all.</text>
  </message>
  <message conversation_id="475">
    <ts>2018-06-11T11:25:58.000063</ts>
    <user>Thaddeus</user>
    <text>&lt;@Bertha&gt; Oh... I see.. Time to fix my code then! :stuck_out_tongue:</text>
  </message>
  <message conversation_id="476">
    <ts>2018-06-11T16:58:33.000113</ts>
    <user>Weldon</user>
    <text>Sooo, I started DrRacket this morning and the splash screen was something new....as far as I can tell, an animated sea-turtle on a plaid background.  Nothing wrong with that, although it was a bit startling. However, DrRacket is also exhibiting some issues like blank space where menu entries should be.   I've used package manager to remove all packages except those installed automatically and deleted/reinstalled Racket.  The problem persists. Running Racket 6.12 on MacOS 10.13.5.  Anyone else having similar issues?  Can anyone suggest a solution (to the missing menu items---the sea-turtle is kinda cute and is welcome to stay).  Thank you very much.</text>
  </message>
  <message conversation_id="477">
    <ts>2018-06-11T18:47:26.000090</ts>
    <user>Vivian</user>
    <text>Something like that happened to me a while back (today I also had the sea turtle btw).  Had a black star as a splash.  Thought it was caused by a package I had recently installed, and was unnerved by it.  Removed it, reinstalled Racket, still had the weird splash.  Set it aside, thinking there was some kind of profile or temp file problem I would just deal with the next day.  Next day, splash back to normal.  I think on some dates drracket has different splash screens (just for fun?).  Though I have not seen any documentation to support that.</text>
  </message>
  <message conversation_id="477">
    <ts>2018-06-11T18:53:55.000197</ts>
    <user>Lynna</user>
    <text>&lt;@Weldon&gt; The turtle is intentional for King Kamehameha Day. The missing menu entries are not! Maybe the missing menu entries depend on the Mac OS version, since I don't that yet, but can you tell me more specifically where to look?</text>
  </message>
  <message conversation_id="476">
    <ts>2018-06-11T20:21:40.000083</ts>
    <user>Weldon</user>
    <text>&lt;@Lynna&gt; The turtle is awesome!  The missing menu items are all in the View menu. The first two items are missing, as is the item below "Hide Line Numbers".</text>
  </message>
  <message conversation_id="477">
    <ts>2018-06-11T20:23:42.000065</ts>
    <user>Weldon</user>
    <text>&lt;@Vivian&gt; Thanks for sharing your experience.  Per &lt;@Lynna&gt;, it is deliberate (and quite cool!).</text>
  </message>
  <message conversation_id="476">
    <ts>2018-06-11T20:44:21.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Weldon&gt; Thanks - I do see the missing menu items on Mac OS 10.13. It doesn't seem to be related to the turtle, though, since I get the same result when running with `PLTDREASTERSECONDS` set to claim a different day for startup-window purposes. I'll investigate more.</text>
  </message>
  <message conversation_id="476">
    <ts>2018-06-11T20:45:53.000256</ts>
    <user>Lynna</user>
    <text>The missing menu items all have a number in the intended content, so that's probably relevant</text>
  </message>
  <message conversation_id="476">
    <ts>2018-06-11T20:45:54.000058</ts>
    <user>Vivian</user>
    <text>&lt;@Weldon&gt; It is cool.  Too bad I’m paranoid (professionally) and was incapable of enjoying the surprise the first time around.  I think it was a five pointed black star with a lambda.  Luckily I was on a vm.  I might have had a stroke if it happened on a production workstation.</text>
  </message>
  <message conversation_id="478">
    <ts>2018-06-11T20:59:52.000174</ts>
    <user>Monserrate</user>
    <text>&lt;@Vivian&gt; that's for Texas independence day</text>
  </message>
  <message conversation_id="478">
    <ts>2018-06-11T21:00:27.000076</ts>
    <user>Monserrate</user>
    <text>Incidentally, we do test all those start-up variants in CI (thanks to a bad incident in the past)</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T05:31:31.000062</ts>
    <user>Andreas</user>
    <text>Is there a way to do interface inheritance? For example, I want to provide the customer with an interface to implement but I want to force him to implement not only the functions of the interface itself but also `gen:equal+hash`. So, I want my interface to include functions from other interfaces as well.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T08:36:20.000441</ts>
    <user>Alesha</user>
    <text>&lt;@Andreas&gt; yes `interface` supports multiple inheritance, you can include as many _super-interface-expr_ as you want in the `interface` expression. &lt;https://docs.racket-lang.org/reference/createinterface.html&gt;</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T08:39:55.000360</ts>
    <user>Andreas</user>
    <text>&lt;@Alesha&gt; Those are interfaces for classes, I was talking about `generic` interfaces for structs. `define-generics` seems to be the closest we have to `interface` but for structs.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T08:41:43.000313</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; do you know how to disable auto pair mode with either paredit or smartparens. I can't understand how anyone likes that. I much prefer the drracket way where once on a top of a paren (which I insert) I get the paren region highlighted. Do you know how to achieve this? i.e. not just highlight the open paren but the whole region?</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:04:29.000355</ts>
    <user>Alesha</user>
    <text>&lt;@Andreas&gt; ahh yeah I don't know much about `struct` inheritance mechanisms</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:28:03.000073</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; By "auto pair mode" do you mean the behavior of paredit, smartparens, or electric-pair-mode where typing e.g. a `(` where none exists adds the `)`?  Or something else?</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:28:22.000288</ts>
    <user>Andreas</user>
    <text>that's it.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:28:37.000703</ts>
    <user>Andreas</user>
    <text>I can't disable it in any of the modes and I have tried both paredit and smartparens.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:29:15.000685</ts>
    <user>Bertha</user>
    <text>idk about smartparens but in paredit it's effectively a requirement -- paredit pretty much depends on the buffer being a valid sexpr at all times</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:30:11.000106</ts>
    <user>Andreas</user>
    <text>oh... shame. Oh well. I will disable them. I really don't like the behaviour. :slightly_smiling_face: Thanks.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:30:47.000116</ts>
    <user>Bertha</user>
    <text>FWIW I tried paredit -- and gave up on it -- probably four or five times over the course of a couple years.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:31:00.000389</ts>
    <user>Bertha</user>
    <text>Then I tried it again, and it stuck hard ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:31:05.000120</ts>
    <user>Andreas</user>
    <text>so you use smartparens with this electric behaviour?</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:31:15.000294</ts>
    <user>Bertha</user>
    <text>I use paredit</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:31:29.000574</ts>
    <user>Andreas</user>
    <text>oh... stuck hard...</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:31:33.000686</ts>
    <user>Andreas</user>
    <text>i read suck hard. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:32:01.000260</ts>
    <user>Bertha</user>
    <text>Oops. :slightly_smiling_face: Yeah my point it is I thought it sucked hard until eventually I thought it was brilliant.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:32:16.000695</ts>
    <user>Andreas</user>
    <text>I can't deal with it at the moment, drives me crazy to see all those parens growing after my cursor.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:34:04.000358</ts>
    <user>Bertha</user>
    <text>You also mentioned highlighting. highlight-parentheses-mode only highlights the parens. It probably wouldn't be hard to hack it to highlight the whole region.
But. When I use paredit mode, I trust the sexpr navigation so much I barely "see" the parens. So, I don't use any highlighting.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:35:56.000403</ts>
    <user>Bertha</user>
    <text>Also: If you're using racket-mode, and disable paredit mode, you could try this DrRacket ripoff: &lt;https://github.com/greghendershott/racket-mode/blob/master/Reference.md#racket-smart-open-bracket&gt;</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:36:00.000506</ts>
    <user>Andreas</user>
    <text>Yeah, I have the highlight-parentheses-mode but it's not enough. I really would like to get the whole region highlighted.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:37:41.000072</ts>
    <user>Bertha</user>
    <text>Or maybe that's more auto-magic-pixie-dust you'd rather avoid :slightly_smiling_face:</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:39:00.000313</ts>
    <user>Bertha</user>
    <text>highlight-parens-mode does have `hl-paren-background-colors` (defaults to `nil`) but alas that only sets the background color of the parens themselves, not the region between</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:40:33.000644</ts>
    <user>Andreas</user>
    <text>I have a feeling that's already enabled in racket-mode for me because I have that feature and no smartparens or paredit.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:41:36.000817</ts>
    <user>Andreas</user>
    <text>Yeah, need to find a way to highlight the region between as well. I wonder if I can sort something out using `hightlight.el` &lt;https://www.emacswiki.org/emacs/HighlightLibrary&gt;</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:45:32.000261</ts>
    <user>Bertha</user>
    <text>One could use `highlight-parentheses.el` as a starting point.
It uses two Emacs "overlays" to highlight the open and close. Moves them.
Instead could use one overlay, that you move and resize over the region.
Something like that.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:51:19.000100</ts>
    <user>Andreas</user>
    <text>Yes, my elisp-fu is pretty rusty but it's not much code so I will give it a try. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T09:59:48.000773</ts>
    <user>Bertha</user>
    <text>A lot of the code by volume seems to support the configuration options.
(Isn't that always the case. Stupid user preferences complicating our elegant code. :smile:)
So if this will be just hardcoded to &lt;@Andreas&gt; then it might get even simpler.</text>
  </message>
  <message conversation_id="479">
    <ts>2018-06-12T10:02:49.000520</ts>
    <user>Andreas</user>
    <text>... reading about overlays. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="480">
    <ts>2018-06-12T11:09:01.000023</ts>
    <user>Thaddeus</user>
    <text>Ok so I made a silly procedure and I'm wondering if it already exists somewhere or if we should add it to `racket/function`:
```
(define (thunkpose . thunks)
  (if (pair? thunks)
      (thunk ((car thunks))
             ((apply thunkpose (cdr thunks))))
      void))
```
Behold the marvelous `thunkpose`! A mix of `thunk` + `compose`!</text>
  </message>
  <message conversation_id="480">
    <ts>2018-06-12T11:12:03.000365</ts>
    <user>Thaddeus</user>
    <text>It's obviously more imperative than functional, because composing thunks is mostly about creating `(begin ...)` clauses and wrap'em in lambdas, but I needed a way to build processes that will execute later in a specific order.</text>
  </message>
  <message conversation_id="480">
    <ts>2018-06-12T11:13:33.000095</ts>
    <user>Carlyn</user>
    <text>I think you could write that more easily just by writing:
```
(define ((thunkpose . thunks))
  (for ([thunk (in-list thunks)])
    (thunk)))
```</text>
  </message>
  <message conversation_id="480">
    <ts>2018-06-12T11:14:21.000764</ts>
    <user>Thaddeus</user>
    <text>Definitely better :smile:</text>
  </message>
  <message conversation_id="481">
    <ts>2018-06-12T12:13:21.000674</ts>
    <user>Marnie</user>
    <text>I love the name `thunkpose`</text>
  </message>
  <message conversation_id="481">
    <ts>2018-06-12T12:37:36.000700</ts>
    <user>Willette</user>
    <text>&lt;@Ola&gt;: Re feature-profile: from the error, it looks like the program you're trying to profile has its own expectations wrt command-line arguments (i.e., none) that conflict with raco feature-profile. You may want to try calling feature-profile from inside your program instead.</text>
  </message>
  <message conversation_id="482">
    <ts>2018-06-12T13:51:06.000300</ts>
    <user>Andreas</user>
    <text>Does anybody have any example of the use of `id/c` created by a `define-generics`? I can't understand how to use this. The documentation exists but it's not entirely clear to me. Github search isn't of much help.</text>
  </message>
  <message conversation_id="482">
    <ts>2018-06-12T14:34:54.000335</ts>
    <user>Carlita</user>
    <text>&lt;@Andreas&gt; the tests have some examples &lt;https://github.com/racket/racket/blob/master/pkgs/racket-test/tests/generic/contract.rkt&gt;</text>
  </message>
  <message conversation_id="482">
    <ts>2018-06-12T14:39:03.000022</ts>
    <user>Andreas</user>
    <text>&lt;@Carlita&gt; true, the code helps. thanks.</text>
  </message>
  <message conversation_id="482">
    <ts>2018-06-12T14:40:22.000186</ts>
    <user>Carlita</user>
    <text>Yeah the docs should probably be more clear on its use. I'm also not sure it turned out to be a very useful feature...</text>
  </message>
  <message conversation_id="483">
    <ts>2018-06-12T15:20:05.000324</ts>
    <user>Weldon</user>
    <text>&lt;@Lynna&gt; Following up on yesterday. Launching Dr. Racket today gave the usual splash screen. However, the problem with missing menu items remains.  The keyboard equivalents (CMD - and CMD = ) work as intended. Any hints?  Please let me know if there is any information you need or debugging steps you would like me to take. Thank you.</text>
  </message>
  <message conversation_id="483">
    <ts>2018-06-12T15:23:27.000183</ts>
    <user>Lynna</user>
    <text>I meant to follow up: this problem should be fixed for the next release. Please try a snapshot from &lt;http://pre.racket-lang.org|pre.racket-lang.org&gt; to see if it works on your machine. (Note: since the snapshot archives are still not signed, you'll need to drag the DrRacket app out of its folder and back in – which tells the OS that you trust the application enough that right-clicking and "Open" should work. Really.)</text>
  </message>
  <message conversation_id="483">
    <ts>2018-06-12T15:24:23.000696</ts>
    <user>Lynna</user>
    <text>The problem was related to the `on-demand` callback for menu items, where the technique to detect a mouse click on the menu bar doesn't work with Mac OS 10.13.</text>
  </message>
  <message conversation_id="483">
    <ts>2018-06-12T16:15:32.000200</ts>
    <user>Weldon</user>
    <text>&lt;@Lynna&gt; Thank you for the quick follow-up.  Unfortunately, I'm getting the same problem.</text>
  </message>
  <message conversation_id="483">
    <ts>2018-06-12T16:19:50.000421</ts>
    <user>Lynna</user>
    <text>Just to make sure, the version that DrRacket shows is "7.0.0.1"?</text>
  </message>
  <message conversation_id="483">
    <ts>2018-06-12T16:30:55.000317</ts>
    <user>Weldon</user>
    <text>&lt;@Lynna&gt; yes</text>
  </message>
  <message conversation_id="484">
    <ts>2018-06-12T16:31:48.000411</ts>
    <user>Ola</user>
    <text>&lt;@Willette&gt; thanks, I think this is the issue</text>
  </message>
  <message conversation_id="483">
    <ts>2018-06-12T16:34:36.000058</ts>
    <user>Lynna</user>
    <text>&lt;@Weldon&gt; Another long shot, but what does this program print when you run it (in any version of Racket)?
```
#lang racket/base
(require ffi/unsafe
         ffi/unsafe/define)

(define appkit-lib (ffi-lib (format "/System/Library/Frameworks/AppKit.framework/AppKit")))
(define-ffi-definer define-appkit appkit-lib)
(define-appkit NSAppKitVersionNumber _double)

NSAppKitVersionNumber
```</text>
  </message>
  <message conversation_id="483">
    <ts>2018-06-12T17:03:19.000168</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt;, &lt;@Eileen&gt;, or &lt;@Dia&gt; (not sure which), are you aware that you can’t compile Racket 6.12 from the repo?</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:05:33.000135</ts>
    <user>Eileen</user>
    <text>I am aware</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:05:36.000605</ts>
    <user>Eileen</user>
    <text>you want &lt;@Willette&gt;</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:06:05.000369</ts>
    <user>Eileen</user>
    <text>&lt;@Jen&gt; may be able to help with the right incantations if this is a question about how to get it working and not a bug report</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:08:00.000074</ts>
    <user>Odis</user>
    <text>Ah, okay.</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:08:32.000196</ts>
    <user>Monserrate</user>
    <text>&lt;@Odis&gt; I think there's a bug report on the racket repo somewhere that has the instructions</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:08:37.000142</ts>
    <user>Monserrate</user>
    <text>or a mailing list post</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:08:58.000546</ts>
    <user>Odis</user>
    <text>In this case, &lt;@Willette&gt;&amp;gt; Ya. When I do:

```
git clone git@github.com:racket/racket.git
cd racket
git checkout v6.12
make
```

I get:
```
Using cached15288364681528836468332 for &lt;git://github.com/racket/plot/?path=plot-compat&gt;
raco pkg install: version mismatch for dependency
  for package: 2d-lib
  mismatch packages:
   base (have 6.12, need 6.90.0.19)
make[1]: *** [plain-in-place] Error 1
make: *** [in-place] Error 2
```</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:09:23.000516</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Instructions on how to get around this?</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:09:28.000210</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:09:46.000556</ts>
    <user>Monserrate</user>
    <text>we know that what you just posted is what happens</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:10:11.000469</ts>
    <user>Monserrate</user>
    <text>if you want racket 6.12 from source, then I recommend downloading it from &lt;http://download.racket-lang.org|download.racket-lang.org&gt;</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:11:18.000105</ts>
    <user>Monserrate</user>
    <text>see &lt;https://github.com/racket/racket/issues/2022&gt; and linked issues for more discussion of this</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:16:12.000331</ts>
    <user>Weldon</user>
    <text>&lt;@Lynna&gt; Running the provided code in either version of Dr. Racket (7.0.0.1 or 6.12) gives the same answer: 1561.4.  Please let me know what else I can do to help debug, if anything. Thank you.</text>
  </message>
  <message conversation_id="485">
    <ts>2018-06-12T17:37:05.000262</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Hmm..okay, thanks.</text>
  </message>
  <message conversation_id="486">
    <ts>2018-06-12T17:38:09.000492</ts>
    <user>Willette</user>
    <text>&lt;@Odis&gt;: FWIW, this will be fixed in 7.0 and subsequent releases.</text>
  </message>
  <message conversation_id="487">
    <ts>2018-06-12T18:39:12.000275</ts>
    <user>Lynna</user>
    <text>Still looking for differences between your setup and mine... Does your machine have multiple screens? Or a Retina display?</text>
  </message>
  <message conversation_id="487">
    <ts>2018-06-12T20:36:51.000097</ts>
    <user>Weldon</user>
    <text>&lt;@Lynna&gt; Okay, now we're just in the world of weird.  I have a MacBook Pro with a retina display. My issues to date have been while running DrR with the notebook closed and two 23-inch (1920 x 1080) displays attached.  I unplugged one display, launched DrR (6.12) and all was well.  Shut DrR down, reconnect the other monitor, launch DrR again and...everything seems to work as normal, even though I once again have two monitors attached.  I've tried this dance several times and the problem seems to be staying fixed!? Actually, there was one time that the menu spots were initially blank, but filled the second time I opened the View menu. That's different from before.  I've not been able to recreate it.  It is stuck on being fixed which is (a) great for me and (b) lousy for debugging.  Do you want to declare victory or is there anything I can do to help continue debugging?</text>
  </message>
  <message conversation_id="487">
    <ts>2018-06-12T20:50:17.000283</ts>
    <user>Lynna</user>
    <text>Ah, that seems like useful information. The implementation of `on-demand` involves checking whether a click hits the menu bar, but I have to implement the check at a lower level in the graphics pipeline than I usually get to use. I'm not clear on all the relevant coordinate transforms that I need to apply. I may be able to provoke problem and sort out coordinate issues by working with multiple displays and changing the relative positions of the displays.
Thanks!</text>
  </message>
  <message conversation_id="487">
    <ts>2018-06-12T20:53:14.000148</ts>
    <user>Lynna</user>
    <text>One more test would be helpful, if you have time, because I don't have a Retina display for my High Sierra machine: When you're using just the laptop screen, does the menu look right when you click at the highest possible point in the menu name? At the lowest possible point? Unfortunately, you'll need to restart DrRacket between those tests to get an accurate result. The intent of this test is to help check whether I need to worry about scaling, as opposed to just offsets.</text>
  </message>
  <message conversation_id="487">
    <ts>2018-06-12T21:18:43.000068</ts>
    <user>Weldon</user>
    <text>On just my laptop screen, I am now seeing no problem whether I click at the menu on its highest or lowest point.  I restarted DrR between tests as you indicated.  Just ask if I can try anything else.</text>
  </message>
  <message conversation_id="487">
    <ts>2018-06-12T22:33:04.000034</ts>
    <user>Lynna</user>
    <text>I've pushed changes to accommodate multiple screens, and a snapshot will be ready tomorrow morning U.S. time.
I'm assuming that you have the default Mac OS display settings where there's a separate menu bar at the top of each screen. In that case, as of yesterday's snapshot, only one of the menu bars would have worked right, and now both should work right. (So it wasn't a coordinate-system problem, but that I forgot how menu bars work with multiple displays in modern Mac OS.)</text>
  </message>
  <message conversation_id="487">
    <ts>2018-06-12T22:59:46.000191</ts>
    <user>Weldon</user>
    <text>&lt;@Lynna&gt; Wonderful.  Thank you.  Should I grab it from &lt;http://pre.racket-lang.org|pre.racket-lang.org&gt; to give it a test?</text>
  </message>
  <message conversation_id="487">
    <ts>2018-06-12T23:15:48.000156</ts>
    <user>Lynna</user>
    <text>Yes, when the snapshot changes to one that starts "20180613".</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:21:24.000006</ts>
    <user>Andreas</user>
    <text>Interestingly all implementation of a generic interface `gen:X` will provide `X?` to determine if a value implements the generic methods. All but not `gen:equal+hash`. Why is this? How can I determine if a value implements the `equal-proc`, `hash-proc` and `hash2-proc` without the `equal+hash?` predicate?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:21:45.000416</ts>
    <user>Andreas</user>
    <text>Any suggestions from generics users? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:40:06.000271</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; every value implements that interface</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:45:28.000676</ts>
    <user>Monserrate</user>
    <text>similarly, every value can be written</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:46:33.000013</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; what about my own values?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:46:38.000595</ts>
    <user>Andreas</user>
    <text>i.e. structs</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:46:53.000267</ts>
    <user>Monserrate</user>
    <text>every value can be hashed and compared for equality and written</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:46:57.000251</ts>
    <user>Andreas</user>
    <text>don't I need to implement those methods on my structs?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:47:07.000281</ts>
    <user>Monserrate</user>
    <text>you can _customize_ that behavior</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:47:35.000325</ts>
    <user>Monserrate</user>
    <text>but `(equal? a b)` always works</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:47:51.000749</ts>
    <user>Monserrate</user>
    <text>as does `(equal-hash-code a)`, `(write a)`, etc</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:47:59.000248</ts>
    <user>Andreas</user>
    <text>....as in always works properly recursing the equality procedure?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:48:07.000615</ts>
    <user>Karry</user>
    <text>yes</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:48:17.000057</ts>
    <user>Monserrate</user>
    <text>that depends on the inspector for your structs</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:48:36.000136</ts>
    <user>Karry</user>
    <text>(I'd recommend glancing at `#:transparent` in the struct docs)</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:49:00.000772</ts>
    <user>Andreas</user>
    <text>ah, so it won't work for non-transparent structs?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:49:13.000305</ts>
    <user>Monserrate</user>
    <text>I think "work" is not a good word to use here</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:49:39.000435</ts>
    <user>Andreas</user>
    <text>ok, it won't give an error... but what I expect from equal is to know if they are equal, not 'the same'.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:49:43.000628</ts>
    <user>Karry</user>
    <text>it won't "[recurse with] the equality procedure" if `#:transparent` is not specified</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:49:46.000349</ts>
    <user>Bertha</user>
    <text>```
(struct opaque (a b c))
(define x (opaque 1 2 3))
(define y (opaque 1 2 3))
(equal? x y) ;; =&amp;gt; #f
```</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:49:48.000257</ts>
    <user>Karry</user>
    <text>you'll get pointer equality</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:50:06.000131</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; that's what I expected.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:50:07.000869</ts>
    <user>Karry</user>
    <text>a la Java if you don't implement a classes comparison functions</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:50:32.000312</ts>
    <user>Andreas</user>
    <text>and that's why it would be good to know if opaque implements 'proper' equality through `gen:equal+hash`</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:50:51.000465</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; the point I'm making is that there is no such thing as "proper" equality</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:51:00.000874</ts>
    <user>Andreas</user>
    <text>This is because I want to force the clients of my library to implement it but I can't do so if I have no predicate</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:51:30.000776</ts>
    <user>Monserrate</user>
    <text>what the `X?` predicate indicates is "will calling this generic method succeed"</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:51:55.000636</ts>
    <user>Monserrate</user>
    <text>and that's true for every value for `equal?`, `equal-hash-code`, `write`, etc</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:52:34.000067</ts>
    <user>Monserrate</user>
    <text>for other generic methods, sometimes you'd get a runtime error because the value didn't implement that generic</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:52:48.000206</ts>
    <user>Monserrate</user>
    <text>that never happens with `gen:equal+hash`</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:54:19.000692</ts>
    <user>Andreas</user>
    <text>ok, my interpretation of `X?` is incorrect... but I still think that fundamentally it would be great to know if customers of my library when passing a value into my functions have customized their equality procedures. it would give me more assurances, than not knowing anything.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:55:34.000307</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; what library is this for? how will that assurance help you?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:56:28.000439</ts>
    <user>Andreas</user>
    <text>so, I am reimplementing some parts of my superoptimizer using generics. I define an interface using generics that customers of the library need to implement.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:56:45.000241</ts>
    <user>Andreas</user>
    <text>I am specifically looking at generics for a machine instruction.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:57:14.000424</ts>
    <user>Andreas</user>
    <text>a machine instruction can have instruction packets, each packet will have operands, args, conditional flags etc depending on the architecture.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:58:04.000214</ts>
    <user>Andreas</user>
    <text>However, my library doesn't care about most of this, however it needs to be able to do `equal?` between two instructions and get the right value.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:58:51.000310</ts>
    <user>Monserrate</user>
    <text>my suggestion would be just to call `equal?`</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:59:13.000084</ts>
    <user>Andreas</user>
    <text>I can write something like this for an instruction contract that the client has to implement: `(define mach-insn? (and/c (sequenceof insn-packet?) serializable? custom-write?))`.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T09:59:57.000580</ts>
    <user>Monserrate</user>
    <text>I think checking for `custom-write?` is a mistake</text>
  </message>
  <message conversation_id="489">
    <ts>2018-06-13T10:00:17.000051</ts>
    <user>Andreas</user>
    <text>However, if I can't force the customer to define an equality and hash procedure on their implementation of machine instruction then I cannot tell them, hey I can't accept this because without this implemented, most likely your insn won't be correct for `equal?`</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:00:44.000423</ts>
    <user>Monserrate</user>
    <text>in particular, a struct that is `#:transparent` won't implement those properties but will work just fine in your code</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:01:09.000250</ts>
    <user>Andreas</user>
    <text>you're talking specifically about which properties? custom-write?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:01:49.000981</ts>
    <user>Andreas</user>
    <text>oh... maybe even `serializable?` i guess.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:03:30.000177</ts>
    <user>Monserrate</user>
    <text>`#:transparent` structs are not `serializable?`, but `#:prefab` structs are</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:03:58.000665</ts>
    <user>Bertha</user>
    <text>Would it suffice to check for non-`#:transparent` `struct`s?
Because you can use `struct-info` for that. Something like:
```
(struct opaque (a b))
(struct transparent (a b) #:transparent)

(struct-info (opaque 1 2)) ;=&amp;gt; (values #f #t)
(struct-info (transparent 1 2)) ;=&amp;gt; (values #&amp;lt;struct-type:transaparent #f)

;; So...

(define (instance-of-transparent-struct? v)
  (and (struct? v)
       (let-values ([(st _) (struct-info v)])
         (and st #t))))

(instance-of-transparent-struct? (opaque 1 2)) ;=&amp;gt; #f
(instance-of-transparent-struct? (transparent 1 2)) ;=&amp;gt; #t
```</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:04:02.000459</ts>
    <user>Monserrate</user>
    <text>`#:transparent` structs, however, `write` the way you (maybe) expect</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:04:09.000023</ts>
    <user>Andreas</user>
    <text>I think the point I am trying to make with this design is to ensure I force the user to implement all the required machinery that I need instead of accepting any types of values and hoping nothing is forgotten. I can write in the docs, implement `gen:equal+hash` but it would be better to ensure this is the case at runtime.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:07:31.000693</ts>
    <user>Bertha</user>
    <text>("suffice" is maybe the wrong word. I mean, is that a way to prevent at least one common source of error)</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:07:43.000452</ts>
    <user>Andreas</user>
    <text>or something that just occurred to me is, instead of relying on existing generic interfaces to force the user to write certain methods, I create a `gen:mach-insn`, which the user has to provide with all the methods I required methods like `serialize`, `deserialize`, `equal?`, etc.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:08:27.000464</ts>
    <user>Bertha</user>
    <text>That's a good point. To work well, you require the values to have a certain interface. So you express that.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:09:37.000779</ts>
    <user>Monserrate</user>
    <text>one other option would be to just require all these structures to be prefabs</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:09:57.000521</ts>
    <user>Andreas</user>
    <text>another thing is that this forces the user to use `structs` to define their `mach-insn`. Maybe I should instead ask the user to fill a struct `mach-insn-info` with slots for these procedures and use those. This would allow the user to define `mach-insn` as a class and fill in the slots to redirect the calls into their class.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:12:08.000422</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; yes, that would be another option but again, I would force the user to use a `struct` to implement a value I don't care about. I just care about the interface. Maybe the user has this whole hierarchy of machine instructions and wants to use classes.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:12:35.000215</ts>
    <user>Monserrate</user>
    <text>my recommendation then would be to trust the user of your library</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:12:49.000407</ts>
    <user>Monserrate</user>
    <text>and just call `equal?` etc</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:14:27.000707</ts>
    <user>Andreas</user>
    <text>ok.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:15:44.000405</ts>
    <user>Andreas</user>
    <text>I will have a think, this discussion certainly helped. Thanks all for your time.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:23:04.000391</ts>
    <user>Andreas</user>
    <text>I was really keen on `mach-insn-info` but suddenly I feel like I am reinventing the wheel with generics. argh!</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:23:50.000651</ts>
    <user>Bertha</user>
    <text>In &lt;#C09L257PY|beginners&gt; someone asked about visiting definitions. This reminded me to try something. `displayln` is implemented in Racket:
```
$ /Applications/Racket_v6.90.0.30/bin/racket
Welcome to Racket v6.90.0.30.
&amp;gt; (identifier-binding #'displayln)
(identifier-binding #'displayln)
'(#&amp;lt;module-path-index:"misc.rkt" "pre-base.rkt" "private/base.rkt" racket/base&amp;gt;
  displayln
  #&amp;lt;module-path-index:(lib "racket/init")&amp;gt;
  displayln
  0
  0
  0)
```
Whereas in Racket &amp;lt;6.9 `display` is implemented in C in `#%kernel`. Let's see about 6.90:
```
&amp;gt; (identifier-binding #'display)
(identifier-binding #'display)
'(#&amp;lt;module-path-index:'#%runtime&amp;gt;
  display
  #&amp;lt;module-path-index:(lib "racket/init")&amp;gt;
  display
  0
  0
  0)
```
This is now `#%runtime` (instead of `#%kernel`), but it remains as "opaque".
From my (sketchy) understanding, I thought this might lead to some `.rkt` source?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:25:16.000336</ts>
    <user>Bertha</user>
    <text>Did I just pick a bad example, i.e. is `display` one of the (fewer) things still implemented in C?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:25:43.000806</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; yes, `display` is implemented in C</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:26:03.000163</ts>
    <user>Monserrate</user>
    <text>note that the expander functions implemented in racket now will still have that same behavior</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:26:06.000459</ts>
    <user>Monserrate</user>
    <text>ie</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:26:23.000569</ts>
    <user>Monserrate</user>
    <text>```
&amp;gt; (identifier-binding #'expand)
'(#&amp;lt;module-path-index:'#%main&amp;gt;
  expand
  #&amp;lt;module-path-index:(lib "racket/init")&amp;gt;
  expand
  0
  0
  0)
```</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:26:57.000237</ts>
    <user>Monserrate</user>
    <text>when running on Chez, `display` is implemented in Racket, though</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:35:55.000628</ts>
    <user>Bertha</user>
    <text>Is it that "opaque" `#&amp;lt;module-path-index:'#%main&amp;gt;` instead of a module path to a `.rkt` source, intentionally?
As in, we don't want to expose that to a visit-definition feature in DrRacket or racket-mode, for reasons?
Or, not intentional?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:36:32.000958</ts>
    <user>Monserrate</user>
    <text>it's not intentional, but it would be not-easy to support</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:36:47.000599</ts>
    <user>Bertha</user>
    <text>linklets etc?</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:37:04.000536</ts>
    <user>Monserrate</user>
    <text>in particular, all the source information/distinctions between modules/concept of modules gets erased before it gets built-in to the binary</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:37:26.000797</ts>
    <user>Bertha</user>
    <text>I can see how that would make it harder. :slightly_smiling_face:  OK.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:37:52.000463</ts>
    <user>Monserrate</user>
    <text>you could potentially try some tricks to make it work</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:38:18.000086</ts>
    <user>Monserrate</user>
    <text>for example, `require` the `expander/main.rkt` file, and then look where that name is bound</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:39:36.000721</ts>
    <user>Monserrate</user>
    <text>```
[samth@huor:~/sw/plt (kw-le) plt] r
Welcome to Racket v7.0.0.1.
&amp;gt; (identifier-binding #'expand)
'(#&amp;lt;module-path-index:'#%main&amp;gt;
  expand
  #&amp;lt;module-path-index:(lib "racket/init")&amp;gt;
  expand
  0
  0
  0)
&amp;gt; (require (prefix-in e: "racket/src/expander/main.rkt"))
&amp;gt; (identifier-binding #'e:expand)
'(#&amp;lt;module-path-index:"eval/main.rkt" "racket/src/expander/main.rkt"&amp;gt;
  expand
  #&amp;lt;module-path-index:"racket/src/expander/main.rkt"&amp;gt;
  expand
  0
  0
  0)
```</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:40:34.000889</ts>
    <user>Monserrate</user>
    <text>it would be really cool to have that work in racket-mode</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:42:24.000015</ts>
    <user>Bertha</user>
    <text>I have some code that is some combination of useful and horrifying: 
&lt;https://github.com/greghendershott/racket-mode/blob/master/defn.rkt&gt;
It's not a package because I want to deliver Elisp + Racket in one install from MELPA
But maybe I should make it into a Racket package (I could still "inline"/"vendor" a copy I suppose for MELPA).
And it could get more eyeballs and PRs and be an actually good example.</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:44:22.000269</ts>
    <user>Monserrate</user>
    <text>that seems right to me</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:44:46.000487</ts>
    <user>Monserrate</user>
    <text>also, presumably you can look at the debugging symbols and find the c code that implements something :slightly_smiling_face:</text>
  </message>
  <message conversation_id="488">
    <ts>2018-06-13T10:50:19.000036</ts>
    <user>Monserrate</user>
    <text>```
(gdb) info functions ^scheme_display$
All functions matching regular expression "^scheme_display$":

File ../../../racket/gc2/../src/print.c:
void scheme_display(Scheme_Object *, Scheme_Object *);
```</text>
  </message>
  <message conversation_id="490">
    <ts>2018-06-13T11:17:36.000034</ts>
    <user>Thaddeus</user>
    <text>&lt;@Carlyn&gt; Hey I have exactly the same issue but can't seem to find the mail in the mailing-list. Care to share it here?</text>
  </message>
  <message conversation_id="490">
    <ts>2018-06-13T11:18:16.000233</ts>
    <user>Carlyn</user>
    <text>&lt;https://groups.google.com/d/msg/racket-users/HaSmcTN0SA4/Tp71myvRAgAJ&gt;</text>
  </message>
  <message conversation_id="490">
    <ts>2018-06-13T11:18:35.000703</ts>
    <user>Bertha</user>
    <text>In the Q&amp;amp;A for my racketCon talk, someone asked if I could add that.
I said I'd do it if it would help e.g. Matthew, but maybe the C would be rewritten in Racket soon.
Matthias yelled "YES!"
So. :simple_smile:</text>
  </message>
  <message conversation_id="490">
    <ts>2018-06-13T11:20:11.000535</ts>
    <user>Thaddeus</user>
    <text>Thanks :smile:</text>
  </message>
  <message conversation_id="490">
    <ts>2018-06-13T11:22:31.000041</ts>
    <user>Bertha</user>
    <text>Of course that's the same Matthias who walked out during it. :smile:
I really need to make a GIF out of these few seconds:
&lt;https://www.youtube.com/watch?v=QWiteH8PARQ&amp;amp;feature=youtu.be&amp;amp;t=2m23s&gt;</text>
  </message>
  <message conversation_id="490">
    <ts>2018-06-13T11:23:21.000134</ts>
    <user>Monserrate</user>
    <text>there will still be some C code for a while, it seems</text>
  </message>
  <message conversation_id="491">
    <ts>2018-06-13T11:37:36.000869</ts>
    <user>Louanne</user>
    <text>This is kind of a naive question, but is there something that allows you to macro-rewrite variable references? E.g., `#%variable-reference` is obviously not that, but the name might allude to the idea that variable refs would macro-expand to applications of that (of course, they don’t). My reason is that I’m implementing a `#lang` that needs to treat variable refs in a slightly special way.</text>
  </message>
  <message conversation_id="491">
    <ts>2018-06-13T11:42:27.000139</ts>
    <user>Monserrate</user>
    <text>&lt;@Louanne&gt; no, there's not something like that</text>
  </message>
  <message conversation_id="491">
    <ts>2018-06-13T11:42:53.000685</ts>
    <user>Louanne</user>
    <text>ah ok, thanks for letting me know. In our little language we can probably just have a special deref form, I suppose.</text>
  </message>
  <message conversation_id="491">
    <ts>2018-06-13T11:43:18.000134</ts>
    <user>Louanne</user>
    <text>I think that’s probably the cleanest way of handling this</text>
  </message>
  <message conversation_id="490">
    <ts>2018-06-13T11:47:58.000457</ts>
    <user>Monserrate</user>
    <text>lol</text>
  </message>
  <message conversation_id="492">
    <ts>2018-06-13T14:28:32.000786</ts>
    <user>Weldon</user>
    <text>&lt;@Lynna&gt; Happy to report that all seems to be fixed with the new snapshot.  Thank you so much for the quick fix.  Of course, now I miss the turtle...:grinning:</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T15:06:03.000380</ts>
    <user>Odis</user>
    <text>&lt;@Bertha&gt; That’s awesome.</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T15:07:29.000585</ts>
    <user>Odis</user>
    <text>&lt;@Dia&gt; Is there any way to specify an `or` in a package’s build deps?</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T15:07:59.000603</ts>
    <user>Odis</user>
    <text>Like, it needs to have either package `a` installed, or package `b` installed, but both are not required.</text>
  </message>
  <message conversation_id="492">
    <ts>2018-06-13T17:07:06.000552</ts>
    <user>Lynna</user>
    <text>Looking for some Windows expertise:
It has been clear for a while that files on Windows get opened in the background by things like the search indexer and virus checkers.
It has also been clear that a file cannot be fully deleted while it's open; you can `delete-file` the file, but the file name remains occupied. You can rename a file that is open, though. So, it's apparently well known that that delete a directory tree, you need to move each file to the temp directory and delete it there, so the temp name can stick around for a while while you carry on deleting the original enclosing directory. I didn't really understand that until now, but now I know. (What happens if the tree you want to delete isn't on the same drive as a known temp directory? Good luck finding a writable place on the right drive.)
With further investigation, it seems that a directory cannot be *renamed* if a file within the directory is opened. And since files randomly get opened in the background, that means that any attempt to rename a non-empty directory can simply fail. In other words, any Racket program that uses `rename-file-or-directory` on a non-empty directory can randomly fail on Windows.
Is that really true? And the only way to make renaming work reliably would be to move each item within the directory to the temp directory, then rename, then move each item back?</text>
  </message>
  <message conversation_id="492">
    <ts>2018-06-13T17:32:13.000268</ts>
    <user>Catrice</user>
    <text>&lt;@Lynna&gt; that unfortunately sounds plausible.  I haven't looked through the windows apis in a while, but it is possible to enumerate the handles for a given file, though, and figure out which processes own them, and wait for those processes to stop being so selfish...</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T17:53:18.000055</ts>
    <user>Dia</user>
    <text>&lt;@Odis&gt; nope</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T17:53:29.000119</ts>
    <user>Odis</user>
    <text>:disappointed:</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T17:53:33.000038</ts>
    <user>Odis</user>
    <text>Oh well, thanks anyway</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T17:54:18.000562</ts>
    <user>Dia</user>
    <text>If it is really necessary, then I think the thing to do is have two different sources out there in the world that provide the same package name</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T17:54:26.000318</ts>
    <user>Dia</user>
    <text>A little bit unsatisfying, I know</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T18:34:30.000263</ts>
    <user>Odis</user>
    <text>Hehe…ya  it is.</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T18:34:34.000310</ts>
    <user>Odis</user>
    <text>Oh well, thanks though.</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T18:35:07.000026</ts>
    <user>Odis</user>
    <text>I just feel bad for all of the native packages I have on the package server…but I really don’t see a better way to do it.</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-13T18:35:58.000397</ts>
    <user>Odis</user>
    <text>&lt;@Freida&gt; How hard would it be for you to update the portaudio binary (for os x), that your Racket package uses?</text>
  </message>
  <message conversation_id="494">
    <ts>2018-06-14T01:31:27.000042</ts>
    <user>Vivian</user>
    <text>&lt;@Lynna&gt; &lt;@Catrice&gt; You can monitor and process USN records (&lt;https://msdn.microsoft.com/en-us/library/aa363798(v=vs.85).aspx&gt;) related to the folder you are interested in to see if files are in use, and respond when they are closed (USN_REASON_CLOSE).  It isn’t pretty, but in the long run it will be less frustrating, more stable, and kinder on system resources than monitoring file handles.

Though consider that the possibility an operation on a non-empty folder in Windows could fail at any time is normal, and it is up to the developer to account for it.  How far the developer goes should be determined by how critical the operation is, and whether it is appropriate to continue trying if something goes wrong.  Handling it automatically would make a nice option, but I would not want it as default behavior.

If you assume an aggressive posture on file/folder delete/rename operations to maximize success, it will lead to confusion on a good day, and destruction on a bad day.  If, for example, the wrong service/driver locks a file because it cant gracefully handle its non-existence, and you delete or rename that file during a millisecond window the file is closed and reopened, even when the developer was only making a casual or accidental attempt, it could cause a bluescreen.  If the service/driver then cannot be started on next boot because that file is missing, it could cause a startup repair.  If the startup repair fails to return the system to a bootable state, as can happen when some FDE products are in use, the machine often will end up in a startup repair loop.  I had this scenario occur on thousands of devices in my environment a couple of years ago.  It was expensive.

</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T05:16:38.000612</ts>
    <user>Andreas</user>
    <text>Another surprise with regards to `define-generics`... it seems I can't provide partial fallback methods. If I provide one, I need to provide them all. Although it makes sense to be able to provide some partial implementations. For example, imagine I have:
```
(define-generics symbolics 
  (find-symbols symbolics) ;; returns list of all symbols
  (any-symbols? symbolics) ;; return true if there are any symbols
)
```</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T05:18:17.000044</ts>
    <user>Andreas</user>
    <text>It makes sense to provide a default definition of `any-symbols?` which defaults to `(define (any-symbols? s) (not (null? (find-symbols s))))` and yet leave to the user the task of specifying `find-symbols`, however racket either allows all fallbacks defined or no fallbacks defined. Is anyone aware why this design decision was taken?</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T05:18:40.000419</ts>
    <user>Andreas</user>
    <text>I can always define `find-symbols` fallback to raise an exception but I was keen on having a cleaner way to do it.</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T08:04:20.000066</ts>
    <user>Andreas</user>
    <text>Can someone please have a look at &lt;https://docs.racket-lang.org/reference/printing.html&gt; and confirm that the first paragraph on `print` doesn't make sense?</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T08:04:22.000114</ts>
    <user>Andreas</user>
    <text>Here:</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T08:06:05.000402</ts>
    <user>Andreas</user>
    <text>it seems to say that `print` always behaves like `write`.</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T08:06:39.000476</ts>
    <user>Andreas</user>
    <text>I think it meant to say that when `print-as-expression` is set to `#f`, then `print` mode is like `display` mode.</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T08:06:42.000218</ts>
    <user>Andreas</user>
    <text>Is this correct/</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T08:06:43.000039</ts>
    <user>Andreas</user>
    <text>?</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T09:07:28.000652</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; I think the text is accurate</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:08:24.000607</ts>
    <user>Monserrate</user>
    <text>what's it's saying is that it prints something like `(list 1 2 3)` as `'(1 2 3)`, which when you evaluate it, produces the value you started with</text>
  </message>
  <message conversation_id="493">
    <ts>2018-06-14T09:08:45.000495</ts>
    <user>Andreas</user>
    <text>oK, let me see if *I* understand it then. n</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:08:54.000209</ts>
    <user>Monserrate</user>
    <text>whereas `write` would produce `(1 2 3)`, which when you evaluate it is an error, but if you `read` it produces the value you started with</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:09:49.000160</ts>
    <user>Monserrate</user>
    <text>```
[samth@huor:~/tmp plt] r
Welcome to Racket v7.0.0.1.
&amp;gt; (print (list 1 2 3))
'(1 2 3)
&amp;gt; (write (list 1 2 3))
(1 2 3)
&amp;gt; (print-as-expression #f)
&amp;gt; (print (list 1 2 3))
(1 2 3)
```</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:10:16.000669</ts>
    <user>Andreas</user>
    <text>But it says: when `print-as-expression` is `#t` it prints most datatypes in such a way that evaluating the output as expression produces a value that is `equal?` to the printed value.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:10:43.000593</ts>
    <user>Andreas</user>
    <text>But that is also what the `write` docs say: write mode prints core datatypes in such a way that using read on the output produces a value that is equal? to the printed value;</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:11:16.000580</ts>
    <user>Andreas</user>
    <text>And then it says when `print-as-expression` is `#f` it behaves like `write`. it seems that the docs imply that it always behaves like `write`.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:11:38.000590</ts>
    <user>Andreas</user>
    <text>I understand your example and think the code examples are as expected. My issue is with the documentation.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:14:28.000581</ts>
    <user>Monserrate</user>
    <text>it says that `print-as-expression` being #t is the default mode</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:16:15.000563</ts>
    <user>Andreas</user>
    <text>ok, but that doesn't invalidate what I just wrote about the docs.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:16:34.000407</ts>
    <user>Monserrate</user>
    <text>I'm still confused as to what you think is wrong in the docs</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:17:02.000211</ts>
    <user>Monserrate</user>
    <text>the statements about `print` and `write` are not the same</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:17:34.000595</ts>
    <user>Monserrate</user>
    <text>the difference is: "evaluating the output as expression" vs "using read on the output"</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:18:18.000055</ts>
    <user>Andreas</user>
    <text>ah...</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:18:22.000346</ts>
    <user>Andreas</user>
    <text>I missed that difference.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:18:41.000485</ts>
    <user>Andreas</user>
    <text>my apologies, it's all cleared up.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T09:18:45.000022</ts>
    <user>Andreas</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T10:21:36.000298</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; regarding `racket-mode`, if I write `dict?` it becomes bold. If I write `sequenceof` it doesn't. Where does `racket-mode` find these names? It doesn't seem to be from requires, because `sequenceof` from `data/collections` is never emboldened and `dict?` is emboldened even when I am in `racket/base` without a `racket/dict` require.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T10:26:56.000268</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; The names comes from here &lt;https://github.com/greghendershott/racket-mode/blob/master/keywords.rkt&gt;. See the comment for rationale.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T10:27:28.001021</ts>
    <user>Andreas</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T10:28:42.000282</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt;, makes sense, thanks.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T10:28:44.000575</ts>
    <user>Bertha</user>
    <text>That provides some font-lock (as Emacs calls syntax highlighting) that works for `racket-mode` on plain files even when no `*Racket REPL*` buffer exists or matches the file being edited.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T10:30:01.000009</ts>
    <user>Bertha</user>
    <text>Could there be some other layer that tries to change/augment this for buffers that have/had a live REPL, or something? Sure. But. It's a level of complexity that hasn't seemed justified, no one has seemed to care enough to-date.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T10:30:03.000148</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; the comments mention doing something live. Would this not be feasible at all? I assume that emacs does some font-lock regeneration every time the buffer changes, what if there's some live thing going on that updates it even if with a slightly delay...</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T10:30:17.000533</ts>
    <user>Andreas</user>
    <text>Understood.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T12:29:27.000022</ts>
    <user>Claud</user>
    <text>&lt;@Andreas&gt; `define-generics` does support this feature. You're probably running into a subtly with the way generic methods work with lexical scope. In a given block of method implementations, the names for the methods of that interface are either bound to the specific implementation defined in that block or raise a "method not implemented" syntax error. In other words, inside a block of method definitions, a method name *never* refers to the generic method. To refer to the generic method in that context, you need the `define/generic` form.</text>
  </message>
  <message conversation_id="495">
    <ts>2018-06-14T12:30:35.000331</ts>
    <user>Claud</user>
    <text>Here's a working version of your example:
```
#lang racket

(require racket/generic
         rackunit)

(define-generics symbolics
 (find-symbols symbolics) ;; returns list of all symbols
 (any-symbols? symbolics) ;; return true if there are any symbols
  #:fallbacks
  [(define/generic find-symbols* find-symbols)
   (define (any-symbols? s)
     (not (null? (find-symbols* s))))])

(struct example (lst)
  #:transparent
  #:methods gen:symbolics
  [(define (find-symbols s)
     (example-lst s))])

(check-false (any-symbols? (example '())))

(check-true (any-symbols? (example '(apple))))
```</text>
  </message>
  <message conversation_id="496">
    <ts>2018-06-14T12:58:06.000743</ts>
    <user>Lynna</user>
    <text>&lt;@Catrice&gt; Thanks for the reassurance and suggestion.
&lt;@Vivian&gt; Thanks! That interface appears to require administrator access, so it wouldn't be a good solution for Racket in general. Anyway, I agree with you that it would be easy for automatic handling here to be too much. For now, I've opted to highlight potential problems in the Racket documentation and changed only `delete-directory/files` and a package-manager-specific functions to try to avoid problems.</text>
  </message>
  <message conversation_id="496">
    <ts>2018-06-14T13:02:51.000121</ts>
    <user>Vivian</user>
    <text>&lt;@Lynna&gt; Whoops.  So used to all of my code being launched by elevated processes or running as system.  Slipped my mind elevation was required for this.</text>
  </message>
  <message conversation_id="496">
    <ts>2018-06-14T13:03:44.000035</ts>
    <user>Catrice</user>
    <text>ISTM that, for sporadic and short-lived contention such as antivirus, a relatively simple retry-these-files worklist and some backoff time/max-#-of-retries trick might suffice.  anything else is probably Too Gnarly to try to automate properly</text>
  </message>
  <message conversation_id="496">
    <ts>2018-06-14T13:06:47.000286</ts>
    <user>Catrice</user>
    <text>You can also potentially schedule those files to be deleted on next book (see `MoveFileEx` with the `MOVEFILE_DELAY_UNTIL_REBOOT` flag -- &lt;https://msdn.microsoft.com/en-us/library/windows/desktop/aa365240(v=vs.85).aspx&gt;)</text>
  </message>
  <message conversation_id="496">
    <ts>2018-06-14T13:13:05.000367</ts>
    <user>Monserrate</user>
    <text>The following (implements recursive directory deletion in .NET) might be interesting, but I don't think it has any extra tricks: &lt;https://github.com/dotnet/corefx/blob/master/src/System.IO.FileSystem/src/System/IO/FileSystem.Windows.cs#L434&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2018-06-14T14:00:58.000480</ts>
    <user>Bertha</user>
    <text>Administrator rights not always necessary. :stuck_out_tongue:
(The trick using AntiVirus quarantine is both :fire: and :scream:)
&lt;https://sec-consult.com/en/blog/2018/06/pentesters-windows-ntfs-tricks-collection/&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2018-06-14T14:07:45.000443</ts>
    <user>Dia</user>
    <text>RacketCon 2018 - Please fill out this survey to let us know which teams &amp;amp; workshops we should organizer for Racket Office Hours: &lt;https://goo.gl/forms/flJSWxdM3gmmN7fw1&gt;</text>
  </message>
  <message conversation_id="497">
    <ts>2018-06-14T14:09:41.000479</ts>
    <user>Tiesha</user>
    <text>I would like to register for (eigth racketcon).  Registration link says TBA...</text>
  </message>
  <message conversation_id="497">
    <ts>2018-06-14T14:13:45.000897</ts>
    <user>Tiesha</user>
    <text>small typo: DLS/DLSs vs DSL/DSLs</text>
  </message>
  <message conversation_id="498">
    <ts>2018-06-14T14:23:30.000042</ts>
    <user>Rhea</user>
    <text>hello</text>
  </message>
  <message conversation_id="498">
    <ts>2018-06-14T14:29:54.000295</ts>
    <user>Monserrate</user>
    <text>hi</text>
  </message>
  <message conversation_id="497">
    <ts>2018-06-14T15:03:51.000196</ts>
    <user>Lynna</user>
    <text>&lt;@Tiesha&gt; Fixed. (I meant to update this morning, but forgot to sync to the live site.)</text>
  </message>
  <message conversation_id="497">
    <ts>2018-06-14T15:06:29.000506</ts>
    <user>Tiesha</user>
    <text>&lt;@Lynna&gt; Awesome, thanks, it worked!</text>
  </message>
  <message conversation_id="499">
    <ts>2018-06-14T15:19:05.000204</ts>
    <user>Bertha</user>
    <text>Seriously: Strange Loop retweeted this to 10K followers so hopefully some people will register before they commit to hotel or flight itins &lt;https://twitter.com/greghendershott/status/1007339018361679872&gt;</text>
  </message>
  <message conversation_id="499">
    <ts>2018-06-14T15:20:51.000544</ts>
    <user>Bertha</user>
    <text>(Every year (except last) I chat with people at STL who say, "oh dang, I'm flying out or I would have done RacketCon, too". Some % are just being polite, I'm sure. :slightly_smiling_face:  But some probably would join if they remember.)</text>
  </message>
  <message conversation_id="500">
    <ts>2018-06-14T16:03:29.000724</ts>
    <user>Louanne</user>
    <text>Are there any hackathons for people who want to contribute to racket per se? I think these are the kinds of things that probably happen at racketcon too</text>
  </message>
  <message conversation_id="501">
    <ts>2018-06-15T07:23:29.000011</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; I tweeted about your Windows file system commit, which did prompt a suggestion from someone who works on the C# team: &lt;https://twitter.com/andygocke/status/1007500914339401729?s=19&gt;</text>
  </message>
  <message conversation_id="502">
    <ts>2018-06-15T08:12:25.000379</ts>
    <user>Thaddeus</user>
    <text>Is it me or doesn't Scheme respect the arithmetic-shift rules?
An *arithmetic shift* (&lt;https://en.wikipedia.org/wiki/Arithmetic_shift&gt;) right is supposed to copy the most significant bit back to its place (e.g. #b10000010 -&amp;gt; #b11000001) but neither `arithmetic-shift` nor `bitwise-arithmetic-shift` give that result. They both replace the MSB with a 0, which is the behavior of a *logical shift* (&lt;https://en.wikipedia.org/wiki/Logical_shift&gt;).
Why so?</text>
  </message>
  <message conversation_id="503">
    <ts>2018-06-15T08:44:01.000380</ts>
    <user>Andreas</user>
    <text>&lt;@Claud&gt; Thanks for your clarification with regards to `generics`. It also clarified why `define/generic` exists.</text>
  </message>
  <message conversation_id="502">
    <ts>2018-06-15T09:07:16.000284</ts>
    <user>Lynna</user>
    <text>&lt;@Thaddeus&gt; There's no MSB with arbitrary-precision integers</text>
  </message>
  <message conversation_id="502">
    <ts>2018-06-15T09:07:26.000644</ts>
    <user>Monserrate</user>
    <text>&lt;@Thaddeus&gt; I think the issue is that Wikipedia is referring to 32 or 64 bit integers</text>
  </message>
  <message conversation_id="502">
    <ts>2018-06-15T09:07:45.000301</ts>
    <user>Monserrate</user>
    <text>whereas Racket integers have a conceptually infinite number of bits</text>
  </message>
  <message conversation_id="502">
    <ts>2018-06-15T09:10:25.000405</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt; Thanks, but I can't make sense of that suggestion in my various situations, mostly because they involve starting with a path that some other process may have open, not starting with an open file in my process. I can try taking it to email with you and Andy.</text>
  </message>
  <message conversation_id="502">
    <ts>2018-06-15T09:11:06.000213</ts>
    <user>Thaddeus</user>
    <text>&lt;@Lynna&gt; &lt;@Monserrate&gt; 
Yeah, that's what I was thinking too. Makes sense.</text>
  </message>
  <message conversation_id="502">
    <ts>2018-06-15T09:11:10.000120</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; I don't actually know Andy, but I can reply on twitter or you can follow up on email, whichever is more helpful</text>
  </message>
  <message conversation_id="502">
    <ts>2018-06-15T10:00:08.001135</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; looking at the docs more, though, could you open the file and then mark it for deletion and then close it?</text>
  </message>
  <message conversation_id="502">
    <ts>2018-06-15T10:06:28.000483</ts>
    <user>Lynna</user>
    <text>I haven't tried it, but I'd expect that to be the same as `DeleteFile`.
I don't think the delayed-delete-until-handles-are-closed behavior is a property of `DeleteFile` specifically; I think it's part of the filesystem design (inherited from VMS) that every file that exists must have a path, but my impression is based on second-hand sources.</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:31:38.000815</ts>
    <user>Carlyn</user>
    <text>Is there any contract combinator that lets me express the equivalent of `(-&amp;gt; foo? (or/c integer? (values integer? integer?)))`? That is, I’d like a contract for a function that can return 1 _or_ 2 values. &lt;@Eileen&gt;?</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:32:25.000099</ts>
    <user>Eileen</user>
    <text>I don't think so</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:33:00.000448</ts>
    <user>Eileen</user>
    <text>Maybe you should make two functions?</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:33:32.000695</ts>
    <user>Carlyn</user>
    <text>Yes, I can do that as a workaround.</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:33:40.000608</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; in general I think functions with interfaces like that are bad</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:34:12.000228</ts>
    <user>Monserrate</user>
    <text>(there are some in the standard library, which is how I know that they're bad :)</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:36:28.000640</ts>
    <user>Carlyn</user>
    <text>If it makes it any better, I want to put that contract on a function in negative position, so the caller of a function can optionally omit one of the results from the function they provide to use a default value, instead. (The whole contract would be something like `(-&amp;gt; (-&amp;gt; x? (or/c y? (values y? y?))) z?)`, which I think is a _little_ less bad than providing a function to a user which returns different numbers of values.</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:38:15.000345</ts>
    <user>Monserrate</user>
    <text>personally, i recommend lists or vectors for this use case</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:38:48.000008</ts>
    <user>Carlyn</user>
    <text>Yes, I have considered using `(or/c y? (list/c y? y?))` here, instead.</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:39:37.000455</ts>
    <user>Monserrate</user>
    <text>or even `(or/c (list/c y) (list/c y y))`</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:40:37.000085</ts>
    <user>Carlyn</user>
    <text>Returning multiple values is always a little awkward, I think, whether I use `values` or `list`.</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:43:17.000776</ts>
    <user>Carlyn</user>
    <text>I could also do something like
```
(-&amp;gt;i ([p (two?) (-&amp;gt; x? (if (or (not two?) (unsupplied-arg? two?))
                           y?
                           (values y? y?)))])
     (#:two? [two? any/c])
     [_ z?])
```
which is probably even worse of an interface. :)</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:44:52.000600</ts>
    <user>Carlyn</user>
    <text>Maybe I’ll just make two functions and use `values`. The hardest part will just be coming up with decent, distinct names for each of them…</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:50:18.000668</ts>
    <user>Eileen</user>
    <text>FWIW my suggestions was not meant to be something that says that the contract system should dictate how you set up your functions. </text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:50:38.000710</ts>
    <user>Eileen</user>
    <text>Merely that it may be hard to use a function that has that api</text>
  </message>
  <message conversation_id="504">
    <ts>2018-06-15T11:53:05.000134</ts>
    <user>Carlyn</user>
    <text>Yes, usually I would avoid such a function (and more generally, usually I would avoid `values`), but in this case, I think the convenience might be okay (since the function is provided, not called, by the client).</text>
  </message>
  <message conversation_id="505">
    <ts>2018-06-15T15:53:54.000329</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; Is i t possible to run a submodule in a submodule in DrRackets ‘submodules to run’ language option?</text>
  </message>
  <message conversation_id="505">
    <ts>2018-06-15T17:36:59.000233</ts>
    <user>Tiesha</user>
    <text>I did it the other way around.  I booked my RacketCon hotel in April [I’m never bored by any RacketCon talk], then decided yesterday to attend StrangeLoop too, based on those talks being more interesting this year than I expected.  I only wish I had time for ICFP as well.  STL will certainly be the place to be this September!  Still have to book two earlier hotel nights, and the flights.</text>
  </message>
  <message conversation_id="505">
    <ts>2018-06-15T17:38:27.000116</ts>
    <user>Bertha</user>
    <text>Awhile ago I changed the `racket-run` command in Emacs racket-mode to run whatever (sub)module that point (the cursor) is within.
I've found that pretty handy?
Maybe it would be too disruptive to have Run / F5 in DrRacket start doing that. But maybe it could be a new command?</text>
  </message>
  <message conversation_id="505">
    <ts>2018-06-15T17:40:19.000409</ts>
    <user>Bertha</user>
    <text>[The implementation isn't too complicated.
The Emacs Lisp code just walks up sexprs in the source, accumulating module names (that aren't quoted or within comments, obvs), making a `(submod "file.rkt" mod ...+)` form to give to `dynamic-require` and `module-&amp;gt;namespace`.
One wrinkle is DrR can run things that have no .rkt file yet. I'm not sure how that works with `submod` and `d-r` and `m-&amp;gt;n`.]</text>
  </message>
  <message conversation_id="505">
    <ts>2018-06-15T20:35:56.000083</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; the answer is it mostly doesn't work</text>
  </message>
  <message conversation_id="506">
    <ts>2018-06-17T21:06:11.000138</ts>
    <user>Marnie</user>
    <text>What's a good way to debug scribble rendering slowly?</text>
  </message>
  <message conversation_id="507">
    <ts>2018-06-18T02:11:07.000141</ts>
    <user>Samara</user>
    <text>Hi there, may I ask code questions here ?</text>
  </message>
  <message conversation_id="507">
    <ts>2018-06-18T03:47:44.000014</ts>
    <user>Andreas</user>
    <text>&lt;@Samara&gt; go ahead. Everyone else is on the other side of planet earth, therefore sleeping. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:07:10.000095</ts>
    <user>Andreas</user>
    <text>How can I specify `#:methods` on structure types created with `make-struct-type`? Surely this is possible but the docs on `make-struct-type` doesn't even refer to `#:methods`.</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:07:38.000351</ts>
    <user>Andreas</user>
    <text>Is there maybe a correspondence between methods and properties that I can advantage of and maybe specify methods as properties?</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:30:23.000100</ts>
    <user>Monserrate</user>
    <text>I don't think there's currently a supported way to do that</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:36:42.000443</ts>
    <user>Andreas</user>
    <text>really? that's really strange.</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:38:27.000016</ts>
    <user>Andreas</user>
    <text>I was just reading racket code to understand how deep the rabbit hole goes.</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:38:32.000080</ts>
    <user>Andreas</user>
    <text>This line here</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:38:32.000375</ts>
    <user>Andreas</user>
    <text>&lt;https://github.com/racket/racket/blob/9cd3798ca964ad7a1badd75c44b93686fc6511ba/racket/collects/racket/private/define-struct.rkt#L287&gt;</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:38:44.000357</ts>
    <user>Andreas</user>
    <text>seems to be where `#:methods` are handled.</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:38:55.000330</ts>
    <user>Andreas</user>
    <text>somehow this seems to convert methods into properties.</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:39:34.000469</ts>
    <user>Andreas</user>
    <text>Unfortunately though, the operations used to do this are not exported, like `generic-property`.</text>
  </message>
  <message conversation_id="508">
    <ts>2018-06-18T08:41:23.000273</ts>
    <user>Andreas</user>
    <text>What this seems to mean is that there's no way to implement struct-types at runtime which implement a set of generic methods, which would be quite a serious shortcoming for someone who really needs these things. *me*</text>
  </message>
  <message conversation_id="509">
    <ts>2018-06-18T12:38:36.000169</ts>
    <user>Aimee</user>
    <text>I think `struct` definitions work at runtime too</text>
  </message>
  <message conversation_id="509">
    <ts>2018-06-18T12:41:57.000136</ts>
    <user>Aimee</user>
    <text>`#:methods` is internally implemented using struct properties and the APIs here &lt;https://github.com/racket/racket/blob/master/racket/collects/racket/private/generic-methods.rkt&gt;</text>
  </message>
  <message conversation_id="509">
    <ts>2018-06-18T12:42:09.000626</ts>
    <user>Aimee</user>
    <text>but I think struct properties is all what `make-struct-type` knows</text>
  </message>
  <message conversation_id="509">
    <ts>2018-06-18T15:23:17.000356</ts>
    <user>Andreas</user>
    <text>&lt;@Aimee&gt; ok, I am actually quite surprised that you are right. i was quite sure this was not going to work: `(define (make-s) (struct foo (a b) #:mutable #:extra-constructor-name make-foo) make-foo)` but it did.</text>
  </message>
  <message conversation_id="509">
    <ts>2018-06-18T15:33:35.000595</ts>
    <user>Aimee</user>
    <text>yeah `struct` expands to call to `make-struct-type` at runtime</text>
  </message>
  <message conversation_id="510">
    <ts>2018-06-18T16:39:23.000194</ts>
    <user>Ezra</user>
    <text>is there any way to make this: `(assq 'select '((SELECT . "dummy") (DROP . "hat")))` return the first pair - to make the comparison case insensitive?</text>
  </message>
  <message conversation_id="510">
    <ts>2018-06-18T16:40:08.000459</ts>
    <user>Monserrate</user>
    <text>&lt;@Ezra&gt; maybe use `assf` and a comparison function?</text>
  </message>
  <message conversation_id="510">
    <ts>2018-06-18T16:43:53.000082</ts>
    <user>Ezra</user>
    <text>I tried this: `(assf (lambda (arg) (eq? 'select #ci arg))  '((SELECT . "dummy") (DROP . "hat")))` but no success</text>
  </message>
  <message conversation_id="510">
    <ts>2018-06-18T16:46:41.000484</ts>
    <user>Ezra</user>
    <text>I could do `symbol-&amp;gt;string` and then use `string-ci=?` but was wondering if there was more elegant solution</text>
  </message>
  <message conversation_id="510">
    <ts>2018-06-18T16:50:31.000203</ts>
    <user>Monserrate</user>
    <text>&lt;@Ezra&gt; that's what I would do</text>
  </message>
  <message conversation_id="510">
    <ts>2018-06-18T16:50:40.000502</ts>
    <user>Ezra</user>
    <text>ok, thanks</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:08:43.000368</ts>
    <user>Samara</user>
    <text>thanks, I found this common lisp doc &lt;http://www.lispworks.com/documentation/HyperSpec/Body/m_do_do.htm&gt; with more examples which is helpful, but Im not sure that it works in racket, is there any doc about comparing racket and common lisp ?</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:09:57.000397</ts>
    <user>Samara</user>
    <text>another question is I’m still not clear about continuation and lambda, could you guys pls recommend some  good article/book about them ?</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:10:18.000295</ts>
    <user>Monserrate</user>
    <text>Common Lisp and Racket have a common ancestor about 40 years ago, so taking code from one to the other isn't going to be very helpful</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:11:48.000289</ts>
    <user>Samara</user>
    <text>I found racket do doc first, but it doesn’t explain var in do loop &lt;https://docs.racket-lang.org/reference/for.html&gt;</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:11:53.000065</ts>
    <user>Monserrate</user>
    <text>those are both big topics -- I would recommend books like "The Little Schemer", "How to Design Programs", or others</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:12:23.000500</ts>
    <user>Samara</user>
    <text>i see, thanks :+1:</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:12:48.000412</ts>
    <user>Monserrate</user>
    <text>Racket programmers don't usually use `do` at all</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:14:24.000198</ts>
    <user>Samara</user>
    <text>you mean we should use recursion instead of `do` ?</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:15:24.000066</ts>
    <user>Samara</user>
    <text>just start learning racket</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:17:02.000459</ts>
    <user>Monserrate</user>
    <text>I would use `for` and other related loop constructs</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:17:23.000388</ts>
    <user>Monserrate</user>
    <text>if you're new to racket, I recommend the "Realm of Racket" book as well</text>
  </message>
  <message conversation_id="511">
    <ts>2018-06-18T17:19:56.000324</ts>
    <user>Samara</user>
    <text>will go check it. thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="512">
    <ts>2018-06-18T21:57:26.000119</ts>
    <user>Bertha</user>
    <text>I like that xrepl is enabled by default these days, but. How can I temporarily disable it?
(I want to experiment with `racket -it program-using-datalog.rkt`, and rule out xrepl contributing to the problem.)</text>
  </message>
  <message conversation_id="512">
    <ts>2018-06-18T21:59:16.000100</ts>
    <user>Bertha</user>
    <text>Oh `-q` seems to do the trick.</text>
  </message>
  <message conversation_id="512">
    <ts>2018-06-18T22:00:03.000004</ts>
    <user>Carlyn</user>
    <text>&lt;@Bertha&gt; for more info, see the docs for `racket/interactive` &lt;http://docs.racket-lang.org/reference/running-sa.html#%28mod-path._racket%2Finteractive%29&gt;</text>
  </message>
  <message conversation_id="512">
    <ts>2018-06-18T22:02:27.000090</ts>
    <user>Bertha</user>
    <text>Thanks, that is indeed where I found `-q` just now. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:35:20.000117</ts>
    <user>Samara</user>
    <text>Hello, I know the meaning of each expression, but don’t understand why we need `values` in the `for` loop ? ```(for/fold ([sqrs 0]
                 [count 0])
                ([i '(1 2 3 4 5 6 7 8 9 10)])
        (values (+ (sqr i) sqrs)
                (if (&amp;gt; (sqr i) 50)
                    (add1 count)
                    count)))```</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:40:13.000250</ts>
    <user>Andreas</user>
    <text>&lt;@Samara&gt; You need values in the for loop because you are folding over 2 values.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:40:27.000335</ts>
    <user>Andreas</user>
    <text>No values are needed if folding over a single value.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:40:42.000398</ts>
    <user>Andreas</user>
    <text>You are folding over `sqrs` and `count`.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:41:31.000185</ts>
    <user>Andreas</user>
    <text>To add all the elements of a list with `for/fold`: `(for ([accum 0]) ([i (in-range 10)]) (+ accum i))`</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:41:52.000303</ts>
    <user>Andreas</user>
    <text>No `values` needed as you are accumulating a single value.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:44:46.000184</ts>
    <user>Samara</user>
    <text>Thanks Paulo. I got it, but why ? why we need `values` when `for/fold` more than one value ?</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:48:55.000349</ts>
    <user>Cherrie</user>
    <text>My Racket app spawns another process. What's the best way to ensure no matter what happens, that process gets cleaned up? I looked around at custodians, but it doesn't seem quite right. Neither do some searches for finalizers.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:48:59.000147</ts>
    <user>Cherrie</user>
    <text>Any suggestions?</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:58:20.000207</ts>
    <user>Andreas</user>
    <text>&lt;@Samara&gt; what would the alternative be? You need to state the values to use in the next loop iteration.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T02:59:07.000251</ts>
    <user>Andreas</user>
    <text>&lt;@Cherrie&gt; are these threads or places or subprocesses?</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T03:01:50.000359</ts>
    <user>Cherrie</user>
    <text>Subprocesses. In normal execution, I use the control proc to kill it, but if execution fails or stops in some way, I have cruft leftovers.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T03:02:35.000182</ts>
    <user>Cherrie</user>
    <text>will-execute seems like the right direction, but... frankly it's really hard to understand.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T03:03:27.000042</ts>
    <user>Cherrie</user>
    <text>I want to say: "no matter what happens, ensure this proc gets run and murders this subprocess"</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T03:24:02.000425</ts>
    <user>Samara</user>
    <text>it explains in the `fold` doc ``` Iterates like for. Before iteration starts, the init-exprs are evaluated to produce initial accumulator values. At the start of each iteration, a location is generated for each accum-id, and the corresponding current accumulator value is placed into the location. The last expression in body must produce as many values as accum-ids, and those values become the current accumulator values. When iteration terminates, the results of the fold/for expression are the accumulator values. ``` , I tried to find the source doe of `for/fold` on github, but didn’t find it..</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T03:25:41.000130</ts>
    <user>Andreas</user>
    <text>&lt;@Cherrie&gt; not so familiar with subprocesses but what's the issue with subprocess kill?</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T03:38:38.000430</ts>
    <user>Cherrie</user>
    <text>&lt;@Andreas&gt; Works just fine, but it's got to have a tie in to the interpreter in a way that means I'll have a chance to kill the process if things go pear-shaped.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T09:21:00.000484</ts>
    <user>Alesha</user>
    <text>&lt;@Cherrie&gt; I'm not 100% sure but I believe wills are only useful for items that can be directly analyzed and reasoned about by the garbage collector, in other words, objects existing within Racket's virtual machine. Subprocesses won't be able to benefit directly.

Subprocesses can communicate via ports so depending on what you're running, you could wrap it in a script that performs an event loop where it listens for well-defined conditions in the foreign code you're executing and sends messages to Racket-land via the subprocess's stdout port. In Racket-land you'd set up something to listen for messages in-coming and take actions, make it synchronizable so Racket can do other useful work while your subprocess is doing its work.

You probably want to launch the subprocess in a separate Racket thread and also set up a timeout event to account the possibility the subprocess hangs.

Alternatively, you could program your subprocess to handle all possible exceptions and clean-up, leaving Racket out of it.</text>
  </message>
  <message conversation_id="513">
    <ts>2018-06-19T09:27:06.000404</ts>
    <user>Lynna</user>
    <text>&lt;@Cherrie&gt; Custodians are usually the right start; see `current-subprocess-custodian-mode`. If your Racket process is forcibly terminated externally (e.g., by `kill -9`), then there's no solution. But as long as you get to run clean up, then `custodian-shutdown-all` is works as well as anything can – and since custodians are the internal mechanism for forced termination, they chain well.</text>
  </message>
  <message conversation_id="514">
    <ts>2018-06-19T12:26:32.000515</ts>
    <user>Aimee</user>
    <text>&lt;@Samara&gt;: I would guess it is a design decision that makes the body clause easy to understand, is consistent with other `for` forms (like `for/hash`) and ease the implementation complexity</text>
  </message>
  <message conversation_id="514">
    <ts>2018-06-19T12:26:46.000346</ts>
    <user>Aimee</user>
    <text>The implementation is here, but it's rather low level
&lt;https://github.com/racket/racket/blob/master/racket/collects/racket/private/for.rkt&gt;</text>
  </message>
  <message conversation_id="514">
    <ts>2018-06-19T12:30:41.000598</ts>
    <user>Aimee</user>
    <text>For `for/fold`, because each accumulator would obtain a new value in each iteration, having the for body evaluates to multiple values seems reasonable</text>
  </message>
  <message conversation_id="515">
    <ts>2018-06-19T13:27:00.000532</ts>
    <user>Samara</user>
    <text>:+1: make sense</text>
  </message>
  <message conversation_id="516">
    <ts>2018-06-19T19:40:46.000298</ts>
    <user>Bertha</user>
    <text>Do package suggestions work for anyone?
e.g. I don't have &lt;@Monserrate&gt;'s `abnf` package installed: &lt;https://pkgs.racket-lang.org/package/abnf&gt;
In DrRacket 6.7 or 6.10 I do
```
#lang racket
(require scribble/abnf)
```
It errors (as expected), but the message says "no packages suggestions are available" (not expected). Below it is an "update packages" link. I click it. Some window pops up and disappears too fast for me to see what it is. I try again, same result.

Or, equivalently (I think):
```
#lang racket
(require pkg/lib)
(pkg-catalog-suggestions-for-module 'scribble/abnf)
```
returns `'()`.

Does any of this work for anyone else?</text>
  </message>
  <message conversation_id="516">
    <ts>2018-06-19T19:53:34.000363</ts>
    <user>Bertha</user>
    <text>[ Why I ask: I could have sworn this used to work. In fact, I made racket-mode install an error handler that tries to make suggestions, very similar to what DrRacket does. I was about to point this out to someone on `#racket` IRC, and realized I hadn't tried it in a very long while, so I tried before I spoke. Which turned out to be wise. :slightly_smiling_face: ]</text>
  </message>
  <message conversation_id="516">
    <ts>2018-06-19T20:00:09.000045</ts>
    <user>Lynna</user>
    <text>The "Update Catalog" button seems to fail if you don't have a local catalog already. If you select "Package Manager..." and then then "Available from Catalog" tab, the "Update" button in the dialog that appears will successfully create the catalog.
I'll look more into why the "Update Catalog" button doesn't work.</text>
  </message>
  <message conversation_id="516">
    <ts>2018-06-19T20:15:33.000064</ts>
    <user>Lynna</user>
    <text>The "Update Catalog" button doesn't work because the local database's set of source catalogs is not set to be the currently configured catalogs. If there's not a local database already, that counts as configured to 0 catalogs, and "Update Catalog" quickly updates 0 catalogs.</text>
  </message>
  <message conversation_id="516">
    <ts>2018-06-19T20:17:27.000283</ts>
    <user>Lynna</user>
    <text>The "Available from Catalog" panel notices the mismatch (database vs. current catalogs configuration) and asks you whether to reset the database. Maybe the "Update" button should just set the database to the current catalogs configuration.</text>
  </message>
  <message conversation_id="517">
    <ts>2018-06-20T02:25:31.000167</ts>
    <user>Cherrie</user>
    <text>Working with macros and I'm running into this: &lt;http://pasterack.org/pastes/4964&gt; with a simple macro</text>
  </message>
  <message conversation_id="517">
    <ts>2018-06-20T02:25:52.000344</ts>
    <user>Cherrie</user>
    <text>It seems to work fine, but I'm getting an error that I can't quite understand.</text>
  </message>
  <message conversation_id="517">
    <ts>2018-06-20T02:26:32.000230</ts>
    <user>Cherrie</user>
    <text>The macro expansion ends up with `((displayln (current-session))` and I think that's the location of the error</text>
  </message>
  <message conversation_id="516">
    <ts>2018-06-20T06:50:07.000293</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; I know this is an old one and I just found it by chance. Is it correct to mark here &lt;https://github.com/racket/racket/commit/006ffc8ae385407be7fd91b0429becaed43ba677&gt; `scribble/srcdoc` as deprecated?</text>
  </message>
  <message conversation_id="516">
    <ts>2018-06-20T06:51:24.000049</ts>
    <user>Andreas</user>
    <text>I am curious, are there any example usages of `scribble/srcdoc` in the wild? Racket seems to encourage the separation of source and documention but I still find it easier to document APIs as I code on the same file.</text>
  </message>
  <message conversation_id="516">
    <ts>2018-06-20T06:53:11.000343</ts>
    <user>Andreas</user>
    <text>&lt;@Marinda&gt; Was the printed version of TfL also created in Pollen? Or since it was not web-based, you had to rely on other tools? &lt;https://legalsolutions.thomsonreuters.com/law-products/Practice-Materials/Typography-for-Lawyers-2018-ed/p/105523076&gt;</text>
  </message>
  <message conversation_id="516">
    <ts>2018-06-20T09:43:20.000488</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; I've used `scribble/srcdoc` in some Frog docs: &lt;https://github.com/greghendershott/frog/search?q=srcdoc&amp;amp;unscoped_q=srcdoc&gt;
(FWIW I found it more convenient to use a `define-doc` wrapper around `proc-doc/names` than to use it directly.
The macro defines the function, the docs, and some examples/tests.)</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T09:48:39.000848</ts>
    <user>Bertha</user>
    <text>Not sure I'd say Racket _encourages_ separation of source and documentation.
It's more the case that it lacked a good way to combine them, until relatively recently.
Much like it lacked a good way to combine source and tests, until submodules and `(module+ test ___)` was added.
Then people started to use combined source/tests.
`scribble/srcdoc` is more recent, and the ergonomics aren't _quite_ as spiffy, and people write fewer docs than tests &amp;lt;-- is why I think there are so few examples in the wild.</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:10:46.000356</ts>
    <user>Ezra</user>
    <text>I was wondering - were there any attempts in Racket to combine scribble + tests -&amp;gt; the tests would then be used as examples in documentation</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:13:04.000330</ts>
    <user>Ezra</user>
    <text>I would envisage this could encourage people to write docs alongside the code and I always found docs with examples to be more meaningful</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:14:29.000283</ts>
    <user>Bertha</user>
    <text>&lt;@Lynna&gt; Oh! I didn't realize that manual action was needed to make it work the first time. Maybe I did this and forgot it, in an older Racket. And IIUC doing this in DrR would cause the `pkg/lib` `package-suggestions-for-module` to then work outside DrR (and in racket-mode).</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:15:55.000146</ts>
    <user>Bertha</user>
    <text>I'll try to do the equivalent of this in racket-mode. Probably do what you said: if mismatch then just set db to current catalogs config.</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:15:57.000881</ts>
    <user>Bertha</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:16:24.000447</ts>
    <user>Lynna</user>
    <text>Sounds right. I just pushed a change to "gui-pkg-manager" to make DrRacket's "Update" button work.</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:17:08.000607</ts>
    <user>Bertha</user>
    <text>&lt;@Ezra&gt; Yes. Please see my message just before yours. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:17:39.000948</ts>
    <user>Bertha</user>
    <text>Also here's a direct link to the `define-doc` macro I wrote: &lt;https://github.com/greghendershott/frog/blob/b6acb6cb79555eb92d457cd2f99da1ee9036a5fb/frog/private/define-doc.rkt&gt;</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:19:12.000010</ts>
    <user>Bertha</user>
    <text>(Caveat: I wrote that for my immediate need in Frog. It's under `private/`. I'm not offering it as a role model. or correct in all scenarios.)</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:22:05.000231</ts>
    <user>Ezra</user>
    <text>great - the name could be more meaningful though :stuck_out_tongue: Do you have any examples of its use - I couldn't find single use on frog repository</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:23:25.000802</ts>
    <user>Ezra</user>
    <text>oh, sorry, just found it</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:23:32.000841</ts>
    <user>Bertha</user>
    <text>Again, may I suggest a message above. :smile:
&lt;https://github.com/greghendershott/frog/search?q=srcdoc&amp;amp;unscoped_q=srcdoc&gt;</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:23:37.000413</ts>
    <user>Bertha</user>
    <text>Yes. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:23:48.000143</ts>
    <user>Bertha</user>
    <text>No worries</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:30:41.000201</ts>
    <user>Bertha</user>
    <text>I mean, I don't _love_ the result. A `define-doc` usage has a _lot_ going on.
There are pros and cons to shoving everything into one form, vs. simple proximity in the file.
It's kind of like using a separate `(: ___)` annotation form in TR, vs. putting the types in the `define` signature.
Or like `define/contract` vs. `(provide (contract-out ___))`.
It's somewhat a matter of taste.</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:31:00.000063</ts>
    <user>Bertha</user>
    <text>The one added wrinkle with this, though, is duplicating the argument names in two places.</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:31:33.000569</ts>
    <user>Bertha</user>
    <text>That makes the "proximity" option a lot less appealing, for me.</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:32:41.000832</ts>
    <user>Bertha</user>
    <text>So IDK all the possibilities for the ergonomics of this. If I thought my private `define-doc` macro were awesome sauce, I'd make a package. But I don't and I didn't. I'm just answering the "are there examples in the wild?" question. Yes, I have one. It is... an example. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:33:45.000301</ts>
    <user>Ezra</user>
    <text>sure, thanks for the answer</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:38:44.000590</ts>
    <user>Ezra</user>
    <text>what I am thinking about is more about moving definition of contracts + test to scribble file directly so, e.g. contract definition could be used to also generate scribble defproc + tests would then generate scribble examples. I am not sure it would even work - just an idea</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:40:51.000840</ts>
    <user>Ezra</user>
    <text>`defproc/contract` and `test-case/example`</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:46:30.000067</ts>
    <user>Ezra</user>
    <text>this would make writing contracts equivalent to writing documentation and writing tests equivalent to writing examples in this documentation so the gravity centre would move in the direction of scribble files.</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T10:54:37.000293</ts>
    <user>Ezra</user>
    <text>&lt;@Bertha&gt; my suggestion wouldn't shove everything into one form, instead contracts and tests would sit nicely under specific procedure section in the documentation... if it is at all feasible :grin:</text>
  </message>
  <message conversation_id="519">
    <ts>2018-06-20T11:03:26.000682</ts>
    <user>Bertha</user>
    <text>I'm a bit distracted because I need to work on something else now, but.
I think that seems like another good way people might want to do it.
Feasible? I'm not sure how contracts defined in `some.scrbl` are effected for definitions in `some.rkt`.
It seems like `some.rkt` must be the thing that `provide`s the definitions with contract wrappers (e.g. via `define/contract`, `contract-out`, or friends).
Maybe `some.scrbl` must `provide` contracts and `some.rkt` must `require` and use those...?
I don't immediately see how the pieces fit together the resulting ergonomics. But I'm not saying it would be impossible or bad. idk.</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T11:05:26.000170</ts>
    <user>Ezra</user>
    <text>the crossreference is the main reason why I am not sure about feasibility</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T11:05:56.000560</ts>
    <user>Bertha</user>
    <text>Yep. Oh also to run the tests in `some.scrbl` you need the definitions from `some.rkt` so um... ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T11:06:38.000972</ts>
    <user>Bertha</user>
    <text>You could just define the function `some.scrbl` and have no `some.rkt` at all.
Instead of `srcdoc` you have `docsrc`. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T11:07:42.000296</ts>
    <user>Ezra</user>
    <text>that would be full blown literate programming - I was thinking more about literate testing/contracting</text>
  </message>
  <message conversation_id="518">
    <ts>2018-06-20T11:07:57.000074</ts>
    <user>Ezra</user>
    <text>scribble doc -&amp;gt; API to the src</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T12:48:26.000565</ts>
    <user>Bertha</user>
    <text>Off the top of their head does anyone know of two packages supplying a module of the same name?
e.g. `pkg-a` and `pkg-b` both supply a module `foo`?
[Why: I want to exercise a package-suggestions feature for the case `(require foo)`.
I know I can write some Racket code to trawl all the supplied modules in catalogs to try to find an example, and this would be a fun exercise if I had more time, but first I'm trying "Dear Lazy Slack".]</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T12:53:14.000377</ts>
    <user>Lynna</user>
    <text>The pkg-build conflicts list has all of those: &lt;http://pkg-build.racket-lang.org/conflicts.txt&gt;</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T13:33:16.000438</ts>
    <user>Bertha</user>
    <text>Thanks! `(require no-debug/syntax)` is a good test case; package suggestions are `mischief` and `mischief-dev`.</text>
  </message>
  <message conversation_id="521">
    <ts>2018-06-20T14:41:45.000253</ts>
    <user>Helena</user>
    <text>add prints to find out where its slow, and maybe cache slow things :/</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T16:30:06.000728</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; (Or whoever maintains the `racket/serialize` collection these days), is there a way I can intercept the deserializers dynamic-require and replace it with another module.</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T16:30:39.000478</ts>
    <user>Odis</user>
    <text>Or rather, is there any way I can give it a fallback if it fails to require the module.</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T16:31:10.000193</ts>
    <user>Odis</user>
    <text>`deserialize-module-guard` looks like it almost does what I want, but only gets run for its effects. (Which seem to be throwing errors.)</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T16:41:25.000411</ts>
    <user>Odis</user>
    <text>And if it doesn’t exist, would it be a bad idea to add a ‘fallback’ hook to the library?</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T17:07:29.000106</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Something like this: &lt;https://github.com/racket/racket/pull/2147/commits&gt;</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T17:21:59.000330</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; That idea looks ok to me.</text>
  </message>
  <message conversation_id="520">
    <ts>2018-06-20T17:38:27.000370</ts>
    <user>Odis</user>
    <text>Okay cool. I’ll add docs and tests. Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="522">
    <ts>2018-06-20T22:48:23.000041</ts>
    <user>Marnie</user>
    <text>sad :(</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T00:26:41.000064</ts>
    <user>Bertha</user>
    <text>At some point I learned that, when requiring modules within a collection, it's best to use relative paths.
I recall someone (Eli?) explaining why at the time. But... I no longer remember the why.
I just keep doing it -- even though sometimes it's a bit ugly.
e.g. in `collection/private/sub/foo.rkt`, something like `(require "../../bar.rkt")` instead of `(require collection/bar.rkt)`.
But recently I'm noticing code that doesn't use relative paths.
Maybe it used to matter, but doesn't anymore?
Or if it does still matter, why?</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T00:28:34.000157</ts>
    <user>Bertha</user>
    <text>Is it better only because relative paths will still work even if you haven't `raco link`ed the collection, or `raco pkg install`ed the collection as a package?</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T00:46:03.000212</ts>
    <user>Marnie</user>
    <text>&lt;@Bertha&gt;  I think the rule is that across your codebase you  shouldn't require the same module twice as both a file path and as a collection, but I'm not sure about that</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T00:50:12.000049</ts>
    <user>Marnie</user>
    <text>Lately I've switched to exclusively using collection paths and it's been a pleasant experience</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T04:50:22.000143</ts>
    <user>Thaddeus</user>
    <text>&lt;@Bertha&gt; &lt;@Marnie&gt; 
So, quick question about that. When you write a new racket collection, do you link it immediately, or do you use relative paths first, then switch for production? I'm usually stuck with relative paths for a long time before I consider making my module work as a (pushable) racket package.</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T04:51:41.000146</ts>
    <user>Thaddeus</user>
    <text>(maybe because `raco link` is nowhere advertised, I just learned about it from your conversation)</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:02:17.000621</ts>
    <user>Marnie</user>
    <text>&lt;@Thaddeus&gt; I link immediately. As a rule, I put all racket code I write in packages + collections (usually single-collection packages) and link all packages whose code I intend to edit. So the only time I require things with relative paths is when I'm making small examples that need to span files, like for bug reports and that kind of thing. Those are too tiny to justify the effort of packaging them.</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:04:37.000176</ts>
    <user>Marnie</user>
    <text>I also keep as much code as possible in some subcollection with `private` in its name like `foo/private`, then I use`#lang reprovide` to define the publicly exposed entrypoint modules of the collection(s)</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:08:18.000496</ts>
    <user>Thaddeus</user>
    <text>so when you work on some subcollection that requires another one next to it,
let's say, package `fruits` with sub-collections `banana` and `apple`

`banana` requires `fruits/apple/private`

Would that work?</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:09:02.000327</ts>
    <user>Marnie</user>
    <text>actually what I would do is just put everything in `fruits/private` so they're all adjacent files</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:09:16.000615</ts>
    <user>Marnie</user>
    <text>`fruits/private/apple`, `fruits/private/banana`, etc.</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:09:33.000424</ts>
    <user>Thaddeus</user>
    <text>yeah ok, keeping the public file to a minimum</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:10:39.000089</ts>
    <user>Marnie</user>
    <text>it's less that, it's more that now I can rearrange the public module hierarchy by just moving a bunch of tiny `reprovide` files around - the actual implementation files are all in a flat directory in `fruits/private` so changing the exposed hierarchy doesn't require moving implementation files and folders</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:11:42.000067</ts>
    <user>Marnie</user>
    <text>effectively, I've set up redirects / symlinks at the module level</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:13:24.000011</ts>
    <user>Marnie</user>
    <text>for instance, in addition to `fruits/private/apple` and `fruits/private/banana` I would have these files:

```
;; fruits/main.rkt
#lang reprovide
fruits/apple
fruits/banana

;; fruits/apple.rkt
#lang reprovide
fruits/private/apple

;; fruits/banana.rkt
#lang reprovide
fruits/private/banana
```</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:15:47.000209</ts>
    <user>Thaddeus</user>
    <text>I see. The only issue I have with `reprovide` is that there's no whitelisting mechanism. You can `except-out`, but you cannot `only-out`</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:16:47.000003</ts>
    <user>Marnie</user>
    <text>I think you can use `only-in` for that</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:17:14.000444</ts>
    <user>Marnie</user>
    <text>also, I tend to move that kind of stuff into the implementation modules by giving them submodules that provide the whitelisted exports</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:18:16.000278</ts>
    <user>Marnie</user>
    <text>like, `fruits/private/apple.rkt` might have this:

```
(provide apple? make-apple apple-chew)

(module+ for-trusted-clients
  (provide unsafe-apple-chew))

... implementation ...
```</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:19:01.000316</ts>
    <user>Thaddeus</user>
    <text>better be careful with apple chewing</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:19:11.000234</ts>
    <user>Marnie</user>
    <text>it's a dangerous habit</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:19:56.000254</ts>
    <user>Marnie</user>
    <text>anyway, then I could have `fruits/apple` reprovide only the root module and add `fruits/apple/unsafe` which reprovides the `for-trusted-clients` submodule</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:20:22.000589</ts>
    <user>Thaddeus</user>
    <text>ooh, I see</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:20:41.000236</ts>
    <user>Marnie</user>
    <text>or I could move them around some other way by putting the reprovide files somewhere else - that's really the main advantage here, to let me change my mind about what modules go where in the exposed hierarchy without a bunch of headaches</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:21:58.000409</ts>
    <user>Ezra</user>
    <text>&lt;@Marnie&gt; how would the fruits/apple/unsafe.rkt look like - how do you reprovide submodule?</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:22:13.000236</ts>
    <user>Marnie</user>
    <text>I can also have two exposed entrypoints that reprovide the same module, which is really useful when you want to change the name of a module without breaking things - you can document that the old name is deprecated but keep it around</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:22:40.000051</ts>
    <user>Marnie</user>
    <text>&lt;@Ezra&gt; like this, I think:

```
#lang reprovide
(submod fruits/private/apple for-trusted-clients)
```</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:22:53.000381</ts>
    <user>Marnie</user>
    <text>(beware: I have only written the above, not compiled it)</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:24:12.000261</ts>
    <user>Ezra</user>
    <text>thanks - gives an idea though</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:26:55.000103</ts>
    <user>Ezra</user>
    <text>&lt;@Marnie&gt; what real package would you recommend as a reference for this kind of linking?</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:29:45.000199</ts>
    <user>Marnie</user>
    <text>&lt;@Ezra&gt; alas I have no references, the only project I've actually done this on is my private general utils repository</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:30:52.000306</ts>
    <user>Marnie</user>
    <text>doing things this radically is a recent experiment of mine so it hasn't made its way into any of my open source projects yet</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:30:54.000213</ts>
    <user>Thaddeus</user>
    <text>I guess racket/web-server is a good example &lt;https://github.com/racket/web-server&gt;</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:32:04.000132</ts>
    <user>Marnie</user>
    <text>&lt;@Thaddeus&gt; that's actually a separate thing where the code is split among multiple packages for dependency reasons</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:32:43.000544</ts>
    <user>Marnie</user>
    <text>within the `web-server-lib/web-server` folder it looks more like a regular collection with code mixed around in various places, some of which are in a `private/` subcollection but not all</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:33:36.000315</ts>
    <user>Thaddeus</user>
    <text>Yeah, I was saying that because it sometimes uses private collections and no relative paths</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:34:41.000079</ts>
    <user>Marnie</user>
    <text>oh! yeah, now I see what you mean</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:35:54.000578</ts>
    <user>Marnie</user>
    <text>poking around some of the private/ files it looks like it follows the pattern where any modules that are not intended to ever be required by modules outside of the private directory are required via relative paths, but everything else is through collection paths</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:36:06.000527</ts>
    <user>Thaddeus</user>
    <text>yes</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:36:34.000151</ts>
    <user>Marnie</user>
    <text>I think that's about what I used to do, but with more reprovides</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:38:16.000282</ts>
    <user>Thaddeus</user>
    <text>Last question: I get the usefulness of doing that public/private separation for libraries. But does it make sense to use the same pattern for programs/executables? Are they even racket packages?</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:40:09.000180</ts>
    <user>Marnie</user>
    <text>I think so, but I'm not really sure since I don't make programs / apps / binaries / etc. nearly as often and have less of a feel for it</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:41:06.000339</ts>
    <user>Marnie</user>
    <text>I'd probably approach that by making my app be a library that exports a main function / macro / lang / whatever that launches the app given some config values</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:41:13.000008</ts>
    <user>Thaddeus</user>
    <text>Right now I'm making a program that runs in the CLI, and I'm considering making it a racket package, so that people can install it and use it directly from the racket package repository. But does that even work?</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:42:02.000006</ts>
    <user>Marnie</user>
    <text>it does, there's a way to make racket packages expose arbitrary command line tools where using the tool runs some main module specified in package metadata</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:42:04.000480</ts>
    <user>Marnie</user>
    <text>there's also raco commands</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:42:33.000376</ts>
    <user>Thaddeus</user>
    <text>yeah, I knew about the raco command, but I was wondering if you could expose something that installs itself in the PATH</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:42:46.000521</ts>
    <user>Marnie</user>
    <text>yup - I think `racket-launcher-names` is the relevant `info.rkt` key</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:43:31.000060</ts>
    <user>Marnie</user>
    <text>voila! &lt;http://docs.racket-lang.org/raco/setup-info.html?q=racket-launcher-names#%28idx._%28gentag._13._%28lib._scribblings%2Fraco%2Fraco..scrbl%29%29%29&gt;</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:43:48.000117</ts>
    <user>Thaddeus</user>
    <text>nice !</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:44:16.000145</ts>
    <user>Marnie</user>
    <text>it puts things into the same directory where the `raco`, `racket`, `drracket`, etc. programs are (I think) so if that's in your path you don't need to add any other dirs to your path</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:44:37.000303</ts>
    <user>Thaddeus</user>
    <text>I guess it works like that for `scribble`</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:44:55.000183</ts>
    <user>Marnie</user>
    <text>yup!</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:46:34.000385</ts>
    <user>Ezra</user>
    <text>&lt;@Marnie&gt; piggybacking on your conversation above I need a clarification - if fruits/private/banana.rkt uses apple than with collection link, in fruits/private/apple.rkt it is enough to use (require fruits/private/banana)?</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:48:47.000073</ts>
    <user>Marnie</user>
    <text>&lt;@Ezra&gt; that would work, but I try to avoid requiring `/private` things as much as possible so even within `fruits/private/apple.rkt` I would rather use `(require fruits/banana)` than `(require fruits/private/banana)` - the exception being when I really do need to require something that's not exposed via a public api, like an internal helper module or a common implementation utility or something</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:49:20.000124</ts>
    <user>Ezra</user>
    <text>ok, gotcha!</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:51:11.000121</ts>
    <user>Marnie</user>
    <text>let me know how it works for ya if you try this, I'm curious</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:56:41.000349</ts>
    <user>Ezra</user>
    <text>this conversation comes right in time as I am currently struggling working on a package that has so many relative paths I am lost - before that I only did smaller projects in racket</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:59:26.000273</ts>
    <user>Thaddeus</user>
    <text>same for me x)</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:59:35.000089</ts>
    <user>Marnie</user>
    <text>I'm glad I could help out :)</text>
  </message>
  <message conversation_id="523">
    <ts>2018-06-21T05:59:54.000084</ts>
    <user>Thaddeus</user>
    <text>yeah, thanks &lt;@Marnie&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T08:47:58.000627</ts>
    <user>Thaddeus</user>
    <text>Ok there's something I don't get with collections/packages. We're supposed to put an `info.rkt` file in each `collection`, right? But the `deps` and `implies` options require a `package` name. How are we supposed to tell a collection that it depends on other collections inside the same package? Maybe `update-implies`?</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T08:54:20.000124</ts>
    <user>Thaddeus</user>
    <text>Maybe I'm just overthinking the stuff and I just don't need to specify any deps</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T09:38:34.000405</ts>
    <user>Monserrate</user>
    <text>&lt;@Thaddeus&gt; you don't need to say that you depend on yourself</text>
  </message>
  <message conversation_id="525">
    <ts>2018-06-21T09:39:02.000296</ts>
    <user>Monserrate</user>
    <text>also, `raco setup --fix-pkg-deps` will fix up your deps</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T09:45:06.000811</ts>
    <user>Thaddeus</user>
    <text>I just spent multiple hours creating sub folders, "info.rkt" and "main.rkt" files everywhere. I'm gonna try running `raco pkg install` and CROSS FINGERS</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:03:16.000733</ts>
    <user>Bertha</user>
    <text>&lt;https://racket.slack.com/archives/C06V96CKX/p1529571022000143&gt;
It sounds like &lt;@Marnie&gt; is more deliberate about this, than I am. Often I go through stages:
1. Just exploring with one or more .rkt files in dir.
2. Hmm let's `git init` and save some history before trying something.
3. OK this code might be handy to someone, I'll push it to GitHub as a public repo.
4. OK I'm willing to commit to supporting it. I'll make a package and add to package catalog.
---
Often I don't ever make it to 4.
I suppose I could make the Racket package earlier -- and just not add to package catalog.</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:38:36.000328</ts>
    <user>Thaddeus</user>
    <text>Well... Crossing fingers was not enough. Everything falls appart pretty badly... :disappointed:</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:39:16.000493</ts>
    <user>Thaddeus</user>
    <text>my interdependent collections fail to build because they cannot find the others, which are not yet installed because.. well, they're being built.</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:39:33.000370</ts>
    <user>Monserrate</user>
    <text>everything gets installed first, and then built</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:39:44.000084</ts>
    <user>Monserrate</user>
    <text>unless you have two packages and you've only installed one?</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:40:28.000666</ts>
    <user>Thaddeus</user>
    <text>I trying to install a multi-collection package, and I get a lot of "standard-module-name-resolver: collection not found"</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:41:08.000514</ts>
    <user>Monserrate</user>
    <text>what does the top-level `info.rkt` say? what's the directory structure?</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:44:32.000671</ts>
    <user>Thaddeus</user>
    <text>```
;; info.rkt
(define collection 'multi)
```</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:46:38.000663</ts>
    <user>Thaddeus</user>
    <text>the tree looks something like this:</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:46:47.000225</ts>
    <user>Thaddeus</user>
    <text>```
virtual-mpu
├── asm-lang
│   ├── assemble.rkt
│   ├── info.rkt
│   ├── main.rkt
│   ├── private
│   │   ├── ...
│   ├── s-record.rkt
│   └── tests
├── cli
│   └── main.rkt
├── emulator
│   ├── main.rkt
│   ├── private
│   │   ├── gui
│   │   │   ├── ...
│   │   └── main.rkt
│   └── terminal.rkt
├── info.rkt
├── LICENSE
├── mpu-lang
│   ├── docs
│   ├── info.rkt
│   ├── main.rkt
│   ├── op-table.rkt
│   ├── private
│   │   ├── ...
│   ├── test.rkt
│   └── tests
├── README.md
└── utils.rkt
```</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:47:19.000238</ts>
    <user>Monserrate</user>
    <text>and what error messages are you getting?</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:48:15.000363</ts>
    <user>Thaddeus</user>
    <text>mostly
```
raco setup: error: during making for &amp;lt;pkgs&amp;gt;/virtual-mpu/asm-lang/private
raco setup:   asm-lang/private/s-record.rkt:8:2: collection not found
raco setup:     for module path: virtual-mpu/utils
raco setup:     collection: "virtual-mpu"
```</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:49:08.000685</ts>
    <user>Thaddeus</user>
    <text>a lot of'em</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:50:31.000095</ts>
    <user>Thaddeus</user>
    <text>which means one of my `(require virtual-mpu/utils)` is failing</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:51:36.000116</ts>
    <user>Monserrate</user>
    <text>right, there's no `virtual-mpu` collection</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:51:56.000813</ts>
    <user>Monserrate</user>
    <text>`virtual-mpu` is just a package name, not a collection name -- the collections are the subdirectories</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:52:02.000018</ts>
    <user>Thaddeus</user>
    <text>oh, so you mean the main package cannot be its own collection?</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:52:20.000229</ts>
    <user>Monserrate</user>
    <text>you can either have a package represent a single collection</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:52:32.000249</ts>
    <user>Monserrate</user>
    <text>or you can have a package where the subdirectories are each collections</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:52:53.000821</ts>
    <user>Monserrate</user>
    <text>it can't be both, because then `virtual-mpu/cli/main` and `cli/main` would be the same thing</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:53:41.000236</ts>
    <user>Thaddeus</user>
    <text>so collections are not namespaced?</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:55:58.000053</ts>
    <user>Monserrate</user>
    <text>I'm not sure what you mean</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:57:32.000487</ts>
    <user>Thaddeus</user>
    <text>well if I want my collections to be distinguishable from other packages, I'll need to put them inside another dummy collection, otherwise they'll be accessible as `cli`, `mpu`, `utils` instead of `virtual-mpu/cli`...etc</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T10:58:33.000512</ts>
    <user>Thaddeus</user>
    <text>I find this a bit overwhelming to make so much subfolders</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:02:33.000823</ts>
    <user>Thaddeus</user>
    <text>But I guess it's the way it is. 
I just need to remember that a package cannot be a collection and have sub-collections at the same time</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:04:41.000162</ts>
    <user>Monserrate</user>
    <text>it sounds like you don't want a multi-collection package</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:05:09.000626</ts>
    <user>Thaddeus</user>
    <text>yeah, that's what I just realized writing that...</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:05:12.000736</ts>
    <user>Monserrate</user>
    <text>you can just change to `(define collection "virtual-mpu")`</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:05:18.000018</ts>
    <user>Monserrate</user>
    <text>and keep that directory structure</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:13:15.000357</ts>
    <user>Thaddeus</user>
    <text>alright, I still get some errors, especially concerning places where I require `emulator/private` (meaning "emulator/private/main.rkt") that is understood as "emulator/private.rkt"</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:13:32.000617</ts>
    <user>Thaddeus</user>
    <text>is this normal behavior?</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:14:17.000867</ts>
    <user>Thaddeus</user>
    <text>(`private` is a folder but racket tries to use it as a file)</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:16:14.000029</ts>
    <user>Thaddeus</user>
    <text>and I get errors everywhere I require `mpu` instead of `mpu-lang` (because I declared `(define collections "mpu")` I supposed it would understand the renaming)</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:21:38.000682</ts>
    <user>Thaddeus</user>
    <text>```
First, if the unquoted path contains no /, then require automatically adds a "/main" to the reference. For example, (require slideshow) is equivalent to (require slideshow/main).
```</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:21:43.000855</ts>
    <user>Thaddeus</user>
    <text>ooooookkk</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:22:03.000765</ts>
    <user>Thaddeus</user>
    <text>`main.rkt` does not work for sub-collections :disappointed:</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:51:56.000870</ts>
    <user>Thaddeus</user>
    <text>I got it compiling :smile:</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:52:40.000042</ts>
    <user>Thaddeus</user>
    <text>now I just need to understand how to reprovide an expander with a default `s-exp` reader</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:54:38.000624</ts>
    <user>Thaddeus</user>
    <text>In other words, how to provide a custom lang so that modules can use it as `#lang my-collection/my-language`</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:55:15.000577</ts>
    <user>Thaddeus</user>
    <text>for a custom reader it's easy, but how do I provide an expander if I want the reader to be s-exp?</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T11:56:07.000812</ts>
    <user>Thaddeus</user>
    <text>I tried stuff like
```
;; my-collection/my-language.rkt
#lang s-exp syntax/module-reader
"mpu-lang/lang.rkt"
```</text>
  </message>
  <message conversation_id="524">
    <ts>2018-06-21T12:54:56.000599</ts>
    <user>Monserrate</user>
    <text>&lt;@Thaddeus&gt; to make something work as `#lang mylang`, you need to either have `(submod mylang reader)` or `mylang/language/reader`</text>
  </message>
  <message conversation_id="526">
    <ts>2018-06-21T16:45:43.000484</ts>
    <user>Aimee</user>
    <text>I have a class inheriting `string-snip%`. Is it possible to change the overall style (like adding borders and changing text colors)? Or do I have to reimplement `draw` or use `image-snip%`, `pict-snip%` etc?</text>
  </message>
  <message conversation_id="526">
    <ts>2018-06-21T16:50:58.000001</ts>
    <user>Aimee</user>
    <text>I tried to use `set-style` directly but nothing changed</text>
  </message>
  <message conversation_id="526">
    <ts>2018-06-21T16:55:47.000030</ts>
    <user>Lynna</user>
    <text>&lt;@Aimee&gt; If you want to ignore or modify the style that the editor gives the snip, then you'd need to override `on-draw`. You can chain to the `string-snip%` implementation after adjusting drawing state, because `string-snip%` assumes that the editor-imposed style has been installed (if I remember correctly), but be sure to restore any drawing state that you change.</text>
  </message>
  <message conversation_id="526">
    <ts>2018-06-21T16:57:47.000062</ts>
    <user>Aimee</user>
    <text>&lt;@Lynna&gt; so that is, I can override `on-draw`, change relevant settings installed on `dc` and call string-snip%'s `on-draw`?</text>
  </message>
  <message conversation_id="526">
    <ts>2018-06-21T16:58:00.000485</ts>
    <user>Lynna</user>
    <text>Yes</text>
  </message>
  <message conversation_id="526">
    <ts>2018-06-21T16:58:18.000312</ts>
    <user>Aimee</user>
    <text>okay thanks :smile:</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T05:03:01.000533</ts>
    <user>Thaddeus</user>
    <text>&lt;@Monserrate&gt; I don't understand. How do I provide a submodule?</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T05:13:51.000006</ts>
    <user>Thaddeus</user>
    <text>And how do I define the submodule to be `s-exp`?</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T05:20:04.000470</ts>
    <user>Thaddeus</user>
    <text>I think it has something to do with `make-meta-reader`</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T05:20:17.000208</ts>
    <user>Thaddeus</user>
    <text>but the documentation gives me headaches</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T05:24:26.000045</ts>
    <user>Thaddeus</user>
    <text>or maybe `syntax/module-reader`</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T05:47:35.000048</ts>
    <user>Thaddeus</user>
    <text>I tried this:
```
;; virtual-mpu/mpu.rkt
#lang racket/base

(provide (all-from-out "mpu-lang/lang.rkt")) ;; the expander
(require "mpu-lang/lang.rkt")

(module reader racket/base ;; the reader
  (provide read-syntax))
```

```
;; some file using my language
#lang virtual-mpu/mpu
(blabla ...)
```

But I get:
`default-load-handler: expected a 'module' declaration     found: something else`</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T06:04:55.000335</ts>
    <user>Thaddeus</user>
    <text>Oh my god I got it working!!</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T06:05:04.000464</ts>
    <user>Thaddeus</user>
    <text>```
;; virtual-mpu/mpu.rkt
#lang racket/base
(module reader syntax/module-reader virtual-mpu/mpu-lang/lang)
```</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T06:07:26.000279</ts>
    <user>Thaddeus</user>
    <text>I took inspiration from the code of s-exp:
```
(module reader syntax/module-reader #:language (lambda (p) (read-syntax (object-name p) p)))
```</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T06:42:46.000273</ts>
    <user>Thaddeus</user>
    <text>if you already have a reader the syntax becomes:
```
#lang racket/base
(module reader reprovide "asm-lang/reader.rkt")
```</text>
  </message>
  <message conversation_id="527">
    <ts>2018-06-22T07:51:41.000149</ts>
    <user>Thaddeus</user>
    <text>Sorry for spamming the channel, but I think I had to express my issue textually to understand it :slightly_smiling_face:
As always, thanks to the Racket community for all your kind answers and pointers. :racket-flat: :heart:</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:35:09.000691</ts>
    <user>Thaddeus</user>
    <text>I made a gist to remember how modules and #lang are handled in Racket: &lt;https://gist.github.com/euhmeuh/2f771a5702464741e21388bfcff8b68c&gt;</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:35:43.000113</ts>
    <user>Thaddeus</user>
    <text>I still don't understand why readers need to be in submodules. What is the purpose of the main module then?</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:36:26.000509</ts>
    <user>Monserrate</user>
    <text>&lt;@Thaddeus&gt; the main module defines what the bindings in the language are</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:37:25.000042</ts>
    <user>Thaddeus</user>
    <text>yes, but the reader generates a brand new module (from read-syntax) that requires its own expander</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:38:10.000281</ts>
    <user>Thaddeus</user>
    <text>so in the end, the bindings are defined by the reference in read-syntax</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:39:25.000160</ts>
    <user>Monserrate</user>
    <text>The bindings are defined by the module that appears in the language position in the `(module ...)` form</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:40:31.000507</ts>
    <user>Thaddeus</user>
    <text>oh right I get it. This is just an issue with my special case of trying to separate a lang into public/private modules that makes the whole thing redundant</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:41:39.000391</ts>
    <user>Thaddeus</user>
    <text>if I add stuff to the public lang module, they'll be defined as bindings on top of what read-syntax defines by default</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:42:08.000045</ts>
    <user>Thaddeus</user>
    <text>but usually I don't want any so my modules will be just empty with only a reader submod</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:42:18.000650</ts>
    <user>Monserrate</user>
    <text>&lt;@Thaddeus&gt; really, `read-syntax` doesn't define the bindings</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:42:32.000100</ts>
    <user>Thaddeus</user>
    <text>not directly</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:42:43.000776</ts>
    <user>Thaddeus</user>
    <text>but it decides what the module lang will be</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:42:47.000343</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:42:53.000670</ts>
    <user>Thaddeus</user>
    <text>that's what I meant</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:44:13.000675</ts>
    <user>Thaddeus</user>
    <text>I think I get it now. The whole design makes sense. It's just difficult to grasp without tutoring, I guess.</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:46:00.000821</ts>
    <user>Thaddeus</user>
    <text>There's not a lot of documentation about how to design public/private separation in Racket. You need to understand the ins and outs of how modules work before being able to design an architecture for your project.</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:47:03.000419</ts>
    <user>Thaddeus</user>
    <text>Now that I get it, I'll try to find some time to write such tutorial, that could be helpful.</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:47:53.000870</ts>
    <user>Thaddeus</user>
    <text>Beautiful Racket helped me a lot, but when you get out of the road into your own project, it becomes wild.</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:48:25.000229</ts>
    <user>Monserrate</user>
    <text>I'm not sure what you mean by "public/private separation", but the usual ways are either "don't provide the private things from the module" or "put the private modules in a subdirectory named `private/`"</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:49:19.000468</ts>
    <user>Thaddeus</user>
    <text>yes, but when you start putting modules supposed to be used as `#lang` into `private/` folders, it becomes hard to provide them correctly.</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:50:05.000794</ts>
    <user>Monserrate</user>
    <text>do you want general clients of your library to use those `#lang`s?</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:50:14.000038</ts>
    <user>Monserrate</user>
    <text>or are they just for internal use</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:50:55.000669</ts>
    <user>Thaddeus</user>
    <text>usually they start as internal langs, then become public by the time the project grows</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:51:55.000561</ts>
    <user>Monserrate</user>
    <text>I guess I'm still confused about what's hard</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:51:57.000592</ts>
    <user>Thaddeus</user>
    <text>my case is special because the langs couldn't directly be extracted as a single package out of the project. They had internal dependencies but I still wanted to provide a public interface for them</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:52:40.000808</ts>
    <user>Monserrate</user>
    <text>if you have some language `foo/private/my-special-lang` and you want to make it public as `foo/special-lang` then you can just create `foo/special-lang.rkt` with the following content:</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:53:39.000474</ts>
    <user>Monserrate</user>
    <text>```
#lang racket/base
(require foo/private/my-special-lang)
(provide (all-from-out foo/private/my-special-lang))
(module reader syntax/module-reader foo/special-lang)
```</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:53:52.000415</ts>
    <user>Thaddeus</user>
    <text>Yes, took me two days to discover exactly that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:54:18.000393</ts>
    <user>Monserrate</user>
    <text>or even:
```
#lang racket/base
(module reader syntax/module-reader foo/private/my-special-lang)
```</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:54:39.000111</ts>
    <user>Thaddeus</user>
    <text>that's what I did</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:55:13.000325</ts>
    <user>Thaddeus</user>
    <text>I was jumping from joy when it finally worked</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:55:41.000324</ts>
    <user>Ezra</user>
    <text>hmm... is there any reason why `define-custom-hash-types` is a `dict?` and not `hash?`</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:56:46.000129</ts>
    <user>Thaddeus</user>
    <text>&lt;@Monserrate&gt; reading the `syntax/module-reader` documentation without knowing if it would be useful or not, and without knowing how to use it, was not a brease</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:57:02.000419</ts>
    <user>Monserrate</user>
    <text>yeah, probably that needs another example of the simplest case</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:57:50.000545</ts>
    <user>Thaddeus</user>
    <text>I was still not sure until now that you confirm it, that it was the way to go</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:58:16.000811</ts>
    <user>Thaddeus</user>
    <text>I just tried it out of despair</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T10:58:54.000701</ts>
    <user>Thaddeus</user>
    <text>like "s-exp seems to work that way, let's try something stupid and just copy/paste that"</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T11:01:25.000539</ts>
    <user>Ezra</user>
    <text>is there a way to make custom hash that would be a `hash?` like `make-hashtable` in r6rs: &lt;https://docs.racket-lang.org/r6rs/r6rs-lib-std/r6rs-lib-Z-H-14.html?q=make-hashtable#node_idx_1182&gt;</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T11:02:07.000328</ts>
    <user>Monserrate</user>
    <text>&lt;@Thaddeus&gt; any suggestions for how to improve &lt;http://docs.racket-lang.org/guide/hash-languages.html&gt; would be welcome</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T11:03:30.000199</ts>
    <user>Thaddeus</user>
    <text>Yes, I'll do some PR on those pages :smile:</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T11:11:51.000740</ts>
    <user>Ezra</user>
    <text>I just realised `dict` is more generic so it should be no issue - changing all hash-xxx to dict-xxx in my code then</text>
  </message>
  <message conversation_id="529">
    <ts>2018-06-22T16:01:52.000439</ts>
    <user>Odis</user>
    <text>So…I just have to say…lol: &lt;https://gist.github.com/LeifAndersen/692f3d27095bd9b78052cf76fc4537f7&gt;</text>
  </message>
  <message conversation_id="529">
    <ts>2018-06-22T16:02:08.000157</ts>
    <user>Odis</user>
    <text>(Because yes, I just realized that I did this…)</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T16:45:37.000185</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; I regularly end up in a situation where I hit &amp;lt;Tab&amp;gt; in Racket mode and I get a spinning beachball in emacs</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T16:45:57.000195</ts>
    <user>Monserrate</user>
    <text>I assume that this is something going wrong, and I should be able to fix it</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:10:56.000439</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; C-h k and hit &amp;lt;TAB&amp;gt; -- does it say &amp;lt;TAB&amp;gt; is bound to `indent-for-tab-command`?
If so, C-h v and enter `tab-always-indent` -- what's the value?  `complete`, `t`, or something else?</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:12:52.000237</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; it says `racket-indent-or-complete`</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:15:34.000297</ts>
    <user>Bertha</user>
    <text>That's not defined in racket mode. Hmm.</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:16:03.000018</ts>
    <user>Monserrate</user>
    <text>```
;;; racket-common.el

;; Copyright (c) 2013-2015 by Greg Hendershott.
;; Portions Copyright (C) 1985-1986, 1999-2013 Free Software Foundation, Inc.

;; Author: Greg Hendershott
;; URL: &lt;https://github.com/greghendershott/racket-mode&gt;
```</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:16:06.000353</ts>
    <user>Monserrate</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:16:20.000493</ts>
    <user>Monserrate</user>
    <text>maybe i just have a really old racket mode?</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:16:45.000343</ts>
    <user>Bertha</user>
    <text>I'm on phone with flakey connection now, and no internet for laptop.</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:17:18.000176</ts>
    <user>Bertha</user>
    <text>I think yes maybe try latest racket mode.</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:17:39.000481</ts>
    <user>Monserrate</user>
    <text>How do I upgrade?</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:19:22.000347</ts>
    <user>Bertha</user>
    <text>If you installed from melpa use the list-packages UI.</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:19:44.000348</ts>
    <user>Monserrate</user>
    <text>i think i figured it out</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:20:26.000146</ts>
    <user>Monserrate</user>
    <text>now bound to `indent-for-tab-command`</text>
  </message>
  <message conversation_id="528">
    <ts>2018-06-22T17:20:59.000150</ts>
    <user>Bertha</user>
    <text>Newer racket mode gives you better beach balls</text>
  </message>
  <message conversation_id="530">
    <ts>2018-06-23T03:12:40.000020</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; I think racket package installation with the `debian:stable` base docker images may be broken because of missing SSL libraries, are you experiencing the same issue? If so I'll switch to `buildpack-deps:stable` as a base image since it's what other language runtime images use</text>
  </message>
  <message conversation_id="530">
    <ts>2018-06-25T02:22:29.000120</ts>
    <user>Louanne</user>
    <text>This is a bit of a naive question, but has there been any work on detecting whether code is pure or not? For example, I suspect typed racket may have looked into this (based on these plans: &lt;https://github.com/racket/racket/wiki/Typed-Racket-plans&gt;)</text>
  </message>
  <message conversation_id="530">
    <ts>2018-06-25T02:23:15.000173</ts>
    <user>Louanne</user>
    <text>My question stems from the fact that we have a library that is safe for sure if you’re using it with pure functions but potentially unsafe if you’re using it with impure code. I think the answer is that this probably hasn’t been looked at, which is fine, just figured it was worth asking :slightly_smiling_face:</text>
  </message>
  <message conversation_id="530">
    <ts>2018-06-25T03:09:38.000395</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; can't seem to reproduce the issue. Maybe it depends on the libraries you use?</text>
  </message>
  <message conversation_id="530">
    <ts>2018-06-25T03:09:52.000023</ts>
    <user>Andreas</user>
    <text>Nonetheless, feel free to use another image if it solves your problem.</text>
  </message>
  <message conversation_id="531">
    <ts>2018-06-25T09:14:58.000700</ts>
    <user>Monserrate</user>
    <text>&lt;@Louanne&gt; I don't think there's been much work on that</text>
  </message>
  <message conversation_id="531">
    <ts>2018-06-25T09:15:35.000165</ts>
    <user>Monserrate</user>
    <text>There's some code to check that in the optimizer, of course, as well as in the linklet extractor in the expander</text>
  </message>
  <message conversation_id="532">
    <ts>2018-06-25T09:35:25.000642</ts>
    <user>Glynda</user>
    <text>Who do I report to about the lack of accessibility with screen readers and dr. Racket?</text>
  </message>
  <message conversation_id="531">
    <ts>2018-06-25T09:41:10.000314</ts>
    <user>Monserrate</user>
    <text>&lt;@Glynda&gt; you can report issues on &lt;http://github.com/racket/racket|github.com/racket/racket&gt;, &lt;@Odis&gt; is likely to know more about screen reader use</text>
  </message>
  <message conversation_id="532">
    <ts>2018-06-25T10:24:44.000746</ts>
    <user>Thaddeus</user>
    <text>&lt;@Glynda&gt; Some weeks ago I think &lt;@Odis&gt; was trying to improve accessibility for screen readers, as far as I know.</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:36:40.000040</ts>
    <user>Alesha</user>
    <text>A question about flat contracts, in my particular scenario I need to make sure flat contracts can be directly used as functions since they may be plain Racket values pulling double-duty so I check to see if they satisfy `procedure?` or not and report an error accordingly. I wasn't happy with that so I was poking around the documentation and found `flat-contract-predicate` which would allow me to handle all flat contracts the same way. The accompanying note warning it exists for backward compatibility gave me pause. Is there a better way to cope with flat contracts that may be predicate procedures or not? Basically I'd like to take arbitrary flat contracts and apply them as predicates without worrying about what kind they are.</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:38:53.000447</ts>
    <user>Carlyn</user>
    <text>&lt;@Alesha&gt; All flat contracts are predicates now, so you can just apply them as functions.</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:39:07.000130</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; as &lt;@Alesha&gt; notes, that's not true</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:39:18.000322</ts>
    <user>Helena</user>
    <text>use `flat-contract?`  and `contract-first-order-passes?`</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:39:20.000394</ts>
    <user>Carlyn</user>
    <text>Oh, you’re right, I misinterpreted.</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:39:29.000544</ts>
    <user>Monserrate</user>
    <text>`(flat-contract? 7)` is `#t`</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:39:43.000028</ts>
    <user>Carlyn</user>
    <text>There’s a way to coerce something to a contract, right? Does that do the right thing here?</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:39:46.000127</ts>
    <user>Monserrate</user>
    <text>I think those docs should just be changed</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:40:03.000133</ts>
    <user>Helena</user>
    <text>`coerce-flat-contract`</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:40:18.000307</ts>
    <user>Carlyn</user>
    <text>Does `coerce-flat-contract` produce a procedure when given a literal?</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:40:31.000618</ts>
    <user>Alesha</user>
    <text>agreed, one section encourages you to use `flat-contract-predicate` while another section seems to say beware, so that function would be so useful so would be nice if it was more blessed</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:41:29.000188</ts>
    <user>Carlyn</user>
    <text>It looks like `coerce-flat-contract` doesn’t do what you want; it passes non-procedures through unchanged.</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:41:56.000643</ts>
    <user>Monserrate</user>
    <text>no, that's just the printer lying to you</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:42:28.000752</ts>
    <user>Alesha</user>
    <text>I was confused by that too</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:43:07.000336</ts>
    <user>Alesha</user>
    <text>ok it seems it is perfectly ok to use `flat-contract-predicate`? And just remove the note about backward compatibility as unhelpful?</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:47:36.000711</ts>
    <user>Monserrate</user>
    <text>that's my feeling</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:47:42.000419</ts>
    <user>Alesha</user>
    <text>`contract-first-order-passes?` looks interesting, it would simplify some of the code involved in verifying whether a contract accepts the value or not</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:48:41.000291</ts>
    <user>Alesha</user>
    <text>the first order thing gives me heebies jeevies though, is there such a thing as second order?</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:51:16.000526</ts>
    <user>Helena</user>
    <text>nope just higher order</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:52:18.000223</ts>
    <user>Helena</user>
    <text>the idea is, if `ctc` is a first-order contract then `(ctc v)` either returns `v` or raises an exception ... it doesn't return some chaperoned or modified version of `v`</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:55:08.000085</ts>
    <user>Alesha</user>
    <text>ah ok, and flat contracts are always first-order?</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:55:43.000756</ts>
    <user>Helena</user>
    <text>yes</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:56:00.000100</ts>
    <user>Helena</user>
    <text>I'd say, flat contracts are only first order. Chaperone contracts are first order + some other things</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:56:13.000651</ts>
    <user>Alesha</user>
    <text>ok that was helpful, thank you</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:56:17.000326</ts>
    <user>Helena</user>
    <text>cool</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:56:40.000381</ts>
    <user>Helena</user>
    <text>(contracts like `or/c` use this first-order-passes check to decide what contract to apply to an incoming value) EDIT: maybe  it's only `or/c`? I can't think of another</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T13:57:45.000660</ts>
    <user>Alesha</user>
    <text>still interesting to know, I like the contract system a lot</text>
  </message>
  <message conversation_id="533">
    <ts>2018-06-25T14:06:15.000536</ts>
    <user>Alesha</user>
    <text>using a conjunction of `flat-contract?` and `contract-first-order-passes?` has solved my problem and simplified some things as well so I'm happy with it.</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:19:39.000364</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; huh</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:20:29.000393</ts>
    <user>Carlyn</user>
    <text>```
&amp;gt; (coerce-flat-contract 'here 42)
42
&amp;gt; ((coerce-flat-contract 'here 42) 1)
#f
&amp;gt; (number? (coerce-flat-contract 'here 42))
#f
```</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:22:08.000514</ts>
    <user>Carlyn</user>
    <text>I would expect `contract-name` to produce `42`, but I did not expect it to _print_ as `42`…</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:28:40.000108</ts>
    <user>Alesha</user>
    <text>It trips me up sometimes, guess it's a way of being helpful in telling you what values satisfy the contract</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:30:22.000679</ts>
    <user>Alesha</user>
    <text>afterall plain values are already `contract?` true so it makes sense that any contract wrapper would print its underlying plain values</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:31:08.000565</ts>
    <user>Carlyn</user>
    <text>I’m not sure I agree… I’d much prefer a printing style like `#&amp;lt;flat-contract: 42&amp;gt;`. but oh well.</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:32:31.000055</ts>
    <user>Alesha</user>
    <text>it's interesting how structs assume many disguises in the Racket ecosystem</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:33:12.000452</ts>
    <user>Carlyn</user>
    <text>I think the model is that every value is supposed to be a “structure” with possibly opaque fields</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:34:04.000641</ts>
    <user>Carlyn</user>
    <text>so it’s not so much that structures are a lot of things but that everything is a structure. (of course this isn’t actually true, but all the structure functions work on arbitrary values and treat non-structure things the same as opaque structures for this reason.)</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:35:00.000401</ts>
    <user>Carlyn</user>
    <text>e.g.
```
&amp;gt; (struct-info 42)
#f
#t
```</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:35:48.000207</ts>
    <user>Alesha</user>
    <text>makes sense, I can see how that model would be convenient for attaching all kinds of metadata or functionality to any values to help support Racket's programmable programming language features. Or at least allow values to be treated in a uniform manner.</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:39:04.000455</ts>
    <user>Carlyn</user>
    <text>it looks like contracts in general print as `contract-name`, which usually makes sense… it just does a sort of weird thing in the case of the class of flat contracts that are represented by plain values.</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:40:22.000328</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Did the way `subprocess` subprocesses handle io ports change in Racket 6.10?</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:40:25.000254</ts>
    <user>Carlyn</user>
    <text>though that’s not entirely true… the printers installed by `make-contract` and friends use the `#&amp;lt;contract: ...&amp;gt;` convention. but it looks like the combinators from `racket/contract` have their own convention.</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:41:28.000020</ts>
    <user>Odis</user>
    <text>I ask because we have a program that effectively prints out a line of text and finishes, which works correctly when called from Racket 6.9 or below, but fails on 6.10 up. (Or rather, it deadlocks and the string never gets printed to the port.)</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:42:34.000195</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; v6.10 was the switch to rktio, so something may have gone wrong there</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:42:48.000783</ts>
    <user>Lynna</user>
    <text>Do you have something that I can run?</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:44:32.000171</ts>
    <user>Odis</user>
    <text>Uhh….kind of, but it has a lot of odd deps.</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:45:04.000008</ts>
    <user>Odis</user>
    <text>(Trying to shrink it down now, but its written using: &lt;https://github.com/vasilisp/inez&gt;)</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:45:28.000093</ts>
    <user>Odis</user>
    <text>With this file:

```
open Script ;;

let x = fresh_int_var() ;;
constrain (~logic (x &amp;gt;= 0)) ;;


constrain (~logic (not ((0 &amp;lt;= (x - 1)) &amp;amp;&amp;amp; ((0 = 0) &amp;amp;&amp;amp; (0 = 0))))) ;;

solve_print_result();;
```</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:45:39.000710</ts>
    <user>Odis</user>
    <text>But its kind of complicated to set all of it up. :disappointed:</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:46:07.000204</ts>
    <user>Odis</user>
    <text>Justin Sleapak has it running on his computer.</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T14:46:15.000292</ts>
    <user>Odis</user>
    <text>Slepak*</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T15:52:45.000209</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Okay, I have failed to make a program with the same problem. So Jusin is just going to package his up into a VM and send it to you. Would that work?</text>
  </message>
  <message conversation_id="534">
    <ts>2018-06-25T15:52:56.000255</ts>
    <user>Lynna</user>
    <text>ok</text>
  </message>
  <message conversation_id="535">
    <ts>2018-06-25T16:45:47.000390</ts>
    <user>Aimee</user>
    <text>&lt;@Alesha&gt; &lt;@Carlyn&gt; &lt;@Monserrate&gt; how about `contract-first-order`?</text>
  </message>
  <message conversation_id="535">
    <ts>2018-06-25T16:46:39.000365</ts>
    <user>Aimee</user>
    <text>oh I saw contract-first-order-passes?</text>
  </message>
  <message conversation_id="535">
    <ts>2018-06-25T20:03:27.000226</ts>
    <user>Alesha</user>
    <text>&lt;@Aimee&gt; yes it did the trick for me</text>
  </message>
  <message conversation_id="536">
    <ts>2018-06-25T20:55:26.000182</ts>
    <user>Louanne</user>
    <text>I just had a situation in which I got a strange error from Racket relating to units that went away after wiping out `compiled/`. Am I correct in saying that this is probably a bug? Might be tough for me to replicate and minimize but will keep in mind. It was a `vector-ref` contract violation, which I think means that racket units are packing things into vectors, the spec changed, but Racket was using stale code and then that was causing a contract violation.</text>
  </message>
  <message conversation_id="536">
    <ts>2018-06-25T20:55:48.000196</ts>
    <user>Louanne</user>
    <text>Didn’t really occur to wipe out `compiled` until I realized this might what was happening..</text>
  </message>
  <message conversation_id="536">
    <ts>2018-06-25T21:45:19.000122</ts>
    <user>Monserrate</user>
    <text>&lt;@Louanne&gt; it's maybe a bug but also maybe not</text>
  </message>
  <message conversation_id="536">
    <ts>2018-06-25T22:09:03.000240</ts>
    <user>Louanne</user>
    <text>Yeah, I don’t know enough about units or the implementation to say tbh. Probably I just should have anticipated that..</text>
  </message>
  <message conversation_id="537">
    <ts>2018-06-25T22:11:45.000217</ts>
    <user>Monserrate</user>
    <text>it's almost certainly because of stale compiled files, which can cause errors</text>
  </message>
  <message conversation_id="537">
    <ts>2018-06-25T22:11:55.000199</ts>
    <user>Monserrate</user>
    <text>whether that error is the sign of a bug is hard to say</text>
  </message>
  <message conversation_id="538">
    <ts>2018-06-26T11:34:35.000837</ts>
    <user>Glynda</user>
    <text>Okay, thanks.</text>
  </message>
  <message conversation_id="539">
    <ts>2018-06-26T15:01:07.000502</ts>
    <user>Renee</user>
    <text>To my joy I just (re)discovered the ARMV6 snapshot build on &lt;https://www.cs.utah.edu/plt/snapshots/&gt;, which is great as I'd been having problems compiling from source+built-packages in recent 6.x builds on Raspbian (Package manager SSL probs). I'm wondering if there's a chance that with the official 7 release there could be packages for Raspbian explicitly made available, as the current RaspPi package actually in Raspbian is 6.7?</text>
  </message>
  <message conversation_id="539">
    <ts>2018-06-26T15:10:47.000508</ts>
    <user>Marnie</user>
    <text>I seemed to finally get things working yesterday, let me know if you see any issues</text>
  </message>
  <message conversation_id="540">
    <ts>2018-06-26T15:34:33.000335</ts>
    <user>Alesha</user>
    <text>I don't think `flat-contract-with-explanation`'s printed representation is working as expected based on current contract documenation and experience with other contracts. `(flat-contract-with-explanation (λ (v) v))` will print `#&amp;lt;flat-contract: temp1&amp;gt;` I'd have expected it to print `???`

`(flat-contract-with-explanation string?)` will print `#&amp;lt;flat-contract: string?&amp;gt;` instead of `string?`

`(flat-contract-with-explanation #:name 'a-name string?)` prints as `#&amp;lt;flat-contract: a-name&amp;gt;` instead of `a-name`

Is this a genuine issue? At the very least I think it's inconsistent with the other contracts' printed representations.</text>
  </message>
  <message conversation_id="540">
    <ts>2018-06-26T17:23:53.000617</ts>
    <user>Aimee</user>
    <text>&lt;@Alesha&gt; I think the explanation shows up when the contract is violated
```
&amp;gt; (contract (flat-contract-with-explanation #:name 'a-name string?) 5 'server 'client)
. . /head/racket/collects/racket/contract/private/blame.rkt:347:0: ...om an unsaved editor:28:2: broke its own contract
  promised: string?
  produced: 5
  in: a-name
  contract from: server
  blaming: server
   (assuming the contract is correct)
```</text>
  </message>
  <message conversation_id="540">
    <ts>2018-06-26T17:24:33.000633</ts>
    <user>Aimee</user>
    <text>or:</text>
  </message>
  <message conversation_id="540">
    <ts>2018-06-26T17:25:39.000181</ts>
    <user>Aimee</user>
    <text>```
(module m racket
  (provide
   (contract-out [f (flat-contract-with-explanation #:name 'a-name string?)]))
  (define f 0))

(require 'm)
```</text>
  </message>
  <message conversation_id="540">
    <ts>2018-06-26T17:26:13.000256</ts>
    <user>Aimee</user>
    <text>`temp1` seems weird to me too, but the problem is probably somewhere else</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-26T20:51:15.000140</ts>
    <user>Elanor</user>
    <text>&lt;@Carlyn&gt; just commented on the GitHub issue, and it appears that repeated use of an identifier that's in some ellipsified pattern has undefined behaviour.</text>
  </message>
  <message conversation_id="542">
    <ts>2018-06-27T04:45:45.001005</ts>
    <user>Andreas</user>
    <text>Does anybody know if there's a racket implementation of the influxdb http api? I need this so if there's nothing I will have a go at it. </text>
  </message>
  <message conversation_id="542">
    <ts>2018-06-27T07:16:08.000179</ts>
    <user>Andreas</user>
    <text>&lt;@Freida&gt; I noticed this message from you from 2015 in the mailing list: &lt;https://groups.google.com/forum/#!msg/racket-users/lsZhFjUaQwE/R7GQqs9NFQAJ&gt; Did you by any chance developed an influxdb lib for racket?</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T12:41:20.000246</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I left this comment on a commit of yours a couple weeks ago, but I’m not sure it was the best place to ask. I’m still curious, though. Is this documented anywhere, and if it isn’t, should it be? &lt;https://github.com/racket/racket/commit/c7318cab33de113ec475d7e9fd6b0ceab8fcb61d#commitcomment-29343141&gt;</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:20:10.000403</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; You left `'only` in the docs:</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:20:21.000196</ts>
    <user>Odis</user>
    <text>&lt;https://github.com/racket/racket/commit/41fd4f3a5e0c6d4ca0ef822b168bf33a5c9068a6#diff-df0fa5922df0339cce52bd01ff475005R235&gt;</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:20:25.000317</ts>
    <user>Odis</user>
    <text>Was that intentional?</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:20:45.000297</ts>
    <user>Carlyn</user>
    <text>no, it wasn’t intentional; good catch.</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:20:46.000284</ts>
    <user>Odis</user>
    <text>(I ask because the rest of your commit doesn’t seem to acknowledge it anywhere.)</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:20:49.000243</ts>
    <user>Odis</user>
    <text>Okay cool.</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:20:54.000123</ts>
    <user>Odis</user>
    <text>Do you want to patch it or should I?</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:21:12.000368</ts>
    <user>Carlyn</user>
    <text>if you’re willing to push a fix, that’d be great.</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:31:15.000131</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; As you suspect, I missed that comment/question. Now answered.</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:39:21.000249</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; thank you!</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:43:19.000513</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; Okay cool, i’ve submitted a a PR: &lt;https://github.com/racket/racket/pull/2153&gt;</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T16:43:29.000396</ts>
    <user>Odis</user>
    <text>I’ll go ahead and merge it if you give it the okay.</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T17:59:31.000338</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Is `set!` the only way to update an `undefined` (as provided by `racket/undefined`)</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T17:59:51.000322</ts>
    <user>Odis</user>
    <text>(Basically looking for ways to tie the knot with classes.)</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T18:00:26.000310</ts>
    <user>Odis</user>
    <text>(or Scala’s lazy val)</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T18:05:51.000236</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; Maybe I don't understand the question, but `set!` isn't necessary the only way to replace an `undefined`. If the `undefined` is in a vector, then `vector-set!` can replace it; if it's in a field of a struct, then a field mutator can replace it; and so on.</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T18:42:30.000244</ts>
    <user>Odis</user>
    <text>Okay. So basically it can only be updated like any other value.</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T18:42:46.000118</ts>
    <user>Odis</user>
    <text>(Basically, I sort of wanted a…err…write once box, so to speak.)</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T18:43:12.000196</ts>
    <user>Odis</user>
    <text>(For use with serialize)</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T18:53:03.000015</ts>
    <user>Monserrate</user>
    <text>&lt;@Odis&gt; perhaps a better way to phase it is that `undefined` is a value like any other</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-27T19:22:47.000223</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; fair</text>
  </message>
  <message conversation_id="543">
    <ts>2018-06-27T21:40:44.000162</ts>
    <user>Marnie</user>
    <text>If Shakespeare was a racketeer he'd wonder if `undefined` by any other name compare as `eq?`</text>
  </message>
  <message conversation_id="544">
    <ts>2018-06-28T08:18:33.000190</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; how does your github api compare to this one: &lt;http://docs.racket-lang.org/github-api/index.html&gt; ?</text>
  </message>
  <message conversation_id="541">
    <ts>2018-06-28T08:19:13.000143</ts>
    <user>Monserrate</user>
    <text>That one is newer, I think</text>
  </message>
  <message conversation_id="545">
    <ts>2018-06-28T16:42:34.000261</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; or &lt;@Eugena&gt; Any idea what would cause the following error in the macro stepper?: 

```
with-syntax1: failed pattern match against (?firstL . ?rest)
  in: ()
  context...:
   raise-syntax-error
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:62:7
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:396:0: run-one
   [repeats 3 more times]
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:325:25
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:396:0: run-one
   [repeats 1 more time]
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:68:6: continue
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:396:0: run-one
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:325:25
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:68:6: k
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:396:0: run-one
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:68:6: continue
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:396:0: run-one
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:325:25
   /Users/leif/rsrc/macro-debugger/macro-debugger-text-lib/macro-debugger/model/reductions-engine.rkt:396:0: run-one
   ...
```</text>
  </message>
  <message conversation_id="545">
    <ts>2018-06-28T16:43:44.000136</ts>
    <user>Carlita</user>
    <text>Watch this space for racket beta PPA (currently building): &lt;https://launchpad.net/~plt/+archive/ubuntu/racket-beta&gt;</text>
  </message>
  <message conversation_id="543">
    <ts>2018-06-29T09:32:14.000209</ts>
    <user>Alesha</user>
    <text>I would like your thoughts on some ideas I have about extending flat contracts with additional functionality to fit my needs. Based on my reading, it seems the best way to do that is to define my own struct and set `prop:flat-contract` property to have it behave as a flat contract.

In my work I use `flat-named-contract` and `flat-contract-with-explanation` heavily and would like to reuse as much of their behavior as possible so I was wondering if it's possible to extract the `prop:flat-contract` value from contracts returned from the above procedures so in order to copy the value to my custom struct's `prop:flat-contract` property? Basically I'd like to delegate the work of constructing contracts. If not, does it make sense to talk about copying an existing contract's behavior to a new struct, thus converting it into a new flat contract with the same behavior?

In my situation, I would like to define a predicate to recognize instances of a flat named contract I have already defined because I have a function that only accepts those instances in order to create a new contract using them. I can approximate a predicate by using a conjunction of `contract?`, `contract-name` and `eq?` to recognize the flat contract's known symbolic name. But it's not foolproof, it's easy to spoof by passing an unrelated contract that happens to have an identical name. To solve that, it seems I have to set up my own struct and its associated predicate then use that as my contract's definitive predicate.

Am I even going around this the right way?</text>
  </message>
  <message conversation_id="543">
    <ts>2018-06-29T11:15:53.000419</ts>
    <user>Carlyn</user>
    <text>&lt;@Alesha&gt; You could construct a contract the way you want using `flat-named-contract`, then wrap it with your custom struct and make the various contract functions defer to the wrapped contract.</text>
  </message>
  <message conversation_id="543">
    <ts>2018-06-29T11:28:47.000065</ts>
    <user>Alesha</user>
    <text>&lt;@Carlyn&gt; to make sure I understood you correctly, the various contract functions are such as listed under the specifications for `prop:flat-contract`? I was looking at the implementation for `rename-contract` which appears to do what I want in terms of extracting the relevant fields from the property using publically available API using `get/build-late-neg-projection` `get/build-val-first-projection` and so on</text>
  </message>
  <message conversation_id="543">
    <ts>2018-06-29T11:30:12.000390</ts>
    <user>Alesha</user>
    <text>I haven't gone through all the arguments needed by `build-flat-contract-property` so don't know yet if I'll be able to satisfy all of its requirements but should find out if my experiment is successful</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-01T15:26:08.000023</ts>
    <user>Elanor</user>
    <text>In the Racket 6.12 Typed Racket Guide section 4.8.2 Polymorphic Functions, the example is of type `(All (A) (-&amp;gt; (Listof A) Integer)))`. In this case, and essentially any case with a single occurrence of the type variable, I can't see any benefit over `Any`. Am I missing something (I realize the docs don't claim it's actually worthwhile in this case).</text>
  </message>
  <message conversation_id="546">
    <ts>2018-07-01T16:03:29.000046</ts>
    <user>Aimee</user>
    <text>That's interesting, I would like to know the answer too</text>
  </message>
  <message conversation_id="546">
    <ts>2018-07-01T16:08:16.000009</ts>
    <user>Aimee</user>
    <text>If we were considering a different type system, the type `(All (A) (-&amp;gt; (Listof A) Integer)))` would tell us that this function can never inspect the elements in the list it received but only look at the  length. But Typed Racket is different..</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-01T20:08:40.000051</ts>
    <user>Bertha</user>
    <text>I'm only a dabbler in Typed Racket (and "strong" static typing generally), but:
The previous two examples are lists where the elements are all the same type -- `(Listof Number)` and `(Listof String)`.
So I might expect that `(All (A) (-&amp;gt; (Listof A) Integer)))` means it takes a list where every element is the _same_ type (as opposed to a heterogeneous list).
Such as `(list 1 2 3)` -- but _not_ `(list 1 'two "three")`.
And yet, when I try the example `list-length` function with say `(list-length (list 1 'two "three"))`, it happily type-checks and says `3`.</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-01T20:11:49.000033</ts>
    <user>Carlyn</user>
    <text>The thing is, Typed Racket has subtyping, and all types have a common supertype, `Any`, so the caller can always pick `Any` for `A`.</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-01T20:12:20.000090</ts>
    <user>Carlyn</user>
    <text>I think what &lt;@Elanor&gt; says is correct, but I can’t be sure. &lt;@Monserrate&gt; or &lt;@Karry&gt; would probably know for certain.</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-01T20:20:07.000081</ts>
    <user>Monserrate</user>
    <text>What &lt;@Elanor&gt; says is right</text>
  </message>
  <message conversation_id="547">
    <ts>2018-07-02T00:22:04.000102</ts>
    <user>Effie</user>
    <text>++++++</text>
  </message>
  <message conversation_id="548">
    <ts>2018-07-02T05:36:48.000340</ts>
    <user>Eugena</user>
    <text>&lt;@Odis&gt; something about lifts confused the macro stepper</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-02T10:02:29.000308</ts>
    <user>Elanor</user>
    <text>Is there somewhere that describes how contracts for typed-untyped boundaries are generated. In particular, I'd like to know what `Any` means below, how the two different contracts are generated, and understand the four `check-false` results.
```#lang racket

(module typed typed/racket (provide split split′)
  
  (: split : ∀ (α) (Listof α) (α → Any) → (Listof (Listof α)))
  (define (split a-list property) '(()))
  
  (: split′ : (Listof Any) (Any → Any) → (Listof (Listof Any)))
  (define split′ split))

(require 'typed rackunit)

(define-values (split-contract split′-contract) 
  (values (value-contract split) (value-contract split′)))

(check-equal? (contract-name  split-contract) '(-&amp;gt; (listof any/c) (-&amp;gt; any/c any/c)
                                                   any))

(check-equal? (contract-name split′-contract) '(-&amp;gt; (listof any/c) (or/c struct-predicate-procedure?/c
                                                                        (-&amp;gt; Any any/c))
                                                   (listof (listof Any))))

(check-true (contract-stronger? (-&amp;gt; (listof any/c) (-&amp;gt; any/c any/c)
                                    any)
                                (-&amp;gt; (listof any/c) (-&amp;gt; any/c any/c)
                                    any)))
(check-true (contract-stronger? split-contract
                                split-contract))
(check-true (contract-stronger? split′-contract
                                split′-contract))

(check-false (contract-stronger? (value-contract split)
                                 (-&amp;gt; (listof any/c) (-&amp;gt; any/c any/c)
                                     any)))
(check-false (contract-stronger? (-&amp;gt; (listof any/c) (-&amp;gt; any/c any/c)
                                     any)
                                 (value-contract split)))

(check-false (contract-stronger? split-contract split′-contract))
(check-false (contract-stronger? split′-contract split-contract))
```</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-02T10:06:12.000282</ts>
    <user>Monserrate</user>
    <text>`Any` corresponds to the `any-wrap/c` contract</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-02T10:06:34.000009</ts>
    <user>Monserrate</user>
    <text>The latter two `check-false` results are probably because those are significantly different</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-02T10:06:40.000536</ts>
    <user>Monserrate</user>
    <text>the former two I don't understand</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-02T10:30:27.000180</ts>
    <user>Elanor</user>
    <text>Thanks, `any-wrap/c` is undocumented, but I found it in the source.
Is looking at `typed-racket/private/type-contract.rkt` the best reference at the moment for how the contracts are generated?</text>
  </message>
  <message conversation_id="543">
    <ts>2018-07-02T11:10:55.000009</ts>
    <user>Monserrate</user>
    <text>&lt;@Elanor&gt; for the details of how everything works, yes</text>
  </message>
  <message conversation_id="549">
    <ts>2018-07-02T13:39:25.000194</ts>
    <user>Odis</user>
    <text>&lt;@Eugena&gt; I see.</text>
  </message>
  <message conversation_id="549">
    <ts>2018-07-02T13:40:01.000016</ts>
    <user>Odis</user>
    <text>I can understand how it wouldn’t be able to step through that (possibly), but is that error expected?</text>
  </message>
  <message conversation_id="550">
    <ts>2018-07-05T13:08:52.000112</ts>
    <user>Alesha</user>
    <text>from various sources, it appears that Racket's current package serving infrastructure doesn't yet support generation of binary-lib versions to support the `raco pkg install --binary-lib` operation. Is that true?</text>
  </message>
  <message conversation_id="550">
    <ts>2018-07-05T13:20:25.000079</ts>
    <user>Lynna</user>
    <text>&lt;@Alesha&gt; Built packages are available from the pkg-build service. See &lt;http://pkg-build.racket-lang.org/about.html&gt;</text>
  </message>
  <message conversation_id="550">
    <ts>2018-07-05T13:23:55.000274</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt; ok for example when I try to run `raco pkg install --binary-lib gregor-lib` I get an error `raco pkg install: cannot strip directory in place`. When I browsed the user mailing list to find out more information about that error I find a post which suggests the reason is there is no binary-lib version of gregor-lib available on the catalog.</text>
  </message>
  <message conversation_id="550">
    <ts>2018-07-05T13:24:59.000331</ts>
    <user>Alesha</user>
    <text>I can work around that by using `raco pkg create --from-install --binary-lib` using my local installed copy of gregor-lib so that is solved, was wondering about the general state of affairs.</text>
  </message>
  <message conversation_id="550">
    <ts>2018-07-05T13:25:39.000099</ts>
    <user>Monserrate</user>
    <text>&lt;@Alesha&gt; This works for me on 6.12: `raco pkg install --binary-lib --catalog   &lt;https://pkg-build.racket-lang.org/server/built/catalog/&gt; gregor-lib`</text>
  </message>
  <message conversation_id="550">
    <ts>2018-07-05T13:25:59.000376</ts>
    <user>Alesha</user>
    <text>oh so I need to specify the correct catalog</text>
  </message>
  <message conversation_id="550">
    <ts>2018-07-05T13:26:05.000276</ts>
    <user>Alesha</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="550">
    <ts>2018-07-05T13:26:10.000106</ts>
    <user>Monserrate</user>
    <text>right, see the instructions on the page &lt;@Lynna&gt; linked</text>
  </message>
  <message conversation_id="550">
    <ts>2018-07-06T15:13:59.000024</ts>
    <user>Marnie</user>
    <text>I'd like if built packages were installed by default</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T17:58:53.000157</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Is there any way to get the serialize library to use module path indexes rather than full module paths?</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:01:00.000192</ts>
    <user>Odis</user>
    <text>Like, if I have
```
(serializable-struct foo ())
(serialize (foo))
```
But then I move the file with the serialized foo, I won’t be able to deserialize it, even if I moved the file containing the serialized `foo` instance, relative to the file containing the `foo` definition.)</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:15:42.000003</ts>
    <user>Odis</user>
    <text>Or I guess a cleaner way to ask the question:</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:16:53.000239</ts>
    <user>Odis</user>
    <text>Why does the third element returned from `identifier-binding` give a relative path if its an identifier required from a separate module, but gives an absolute path if the identifier is defined in ‘this’ module?</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:17:10.000142</ts>
    <user>Odis</user>
    <text>(Provided that ‘this’ module is actually saved, otherwise it’s obviously going to be a symbol. :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:22:15.000219</ts>
    <user>Lynna</user>
    <text>Well, `identifier-binding` doesn't give a relative path for a `require`d binding; it gives a module-path index that has a relative path combined with another one that refers to the enclosing module, perhaps as an absolute path, and that reflecting the `require` form relative to the enclosing module.</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:22:23.000002</ts>
    <user>Lynna</user>
    <text>I think you're asking slightly the wrong question.</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:23:00.000054</ts>
    <user>Lynna</user>
    <text>I think the question is: "is there a way to make serialized data relative?"</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:25:03.000034</ts>
    <user>Lynna</user>
    <text>There's a mismatch between your view of serialized data, which lives in a file that might be relative to some other files, and the current `deserialize` view of serialized data, where the serialized data isn't particularly stored in a file. [strike this: But we could imagine that `deserialize` pays attention to `current-load-relative-directory` to interpret serialized data as relative to other file.]</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:27:39.000170</ts>
    <user>Lynna</user>
    <text>You can take serialized data, which has embedded paths, and set `current-write-relative-directory` while writing the data with `fasl-write`. Then, set `current-load-relative-directory` while reading the data with `fasl-read`.</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:29:02.000190</ts>
    <user>Lynna</user>
    <text>Ah, no... it's not a path in the serialized data, but a `file` module path.</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:31:01.000017</ts>
    <user>Lynna</user>
    <text>Ok, so go back to: Add an option to `serialize` to make paths relative to `current-write-relative-directory`, and then make `deserialize` use `current-load-relative-directory` for relative paths. I think that would be the right change.</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:34:40.000054</ts>
    <user>Odis</user>
    <text>Mmm…that makes sense.</text>
  </message>
  <message conversation_id="551">
    <ts>2018-07-06T18:34:55.000095</ts>
    <user>Odis</user>
    <text>Thanks. I’ll see what I can do and submit another PR. Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-07T12:10:53.000063</ts>
    <user>Bertha</user>
    <text>Speaking of `identifier-binding`, I've encountered a limitation: It can't report the original definition id in the case of a renaming contract-out.</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-07T12:11:12.000001</ts>
    <user>Bertha</user>
    <text>For `(provide (contract-out [rename orig new contract]))`, asking about `new` reports:</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-07T12:11:21.000101</ts>
    <user>Bertha</user>
    <text>`nominal-source-id`: `new`  (which is fine)</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-07T12:11:51.000022</ts>
    <user>Bertha</user>
    <text>`source-id`: Some like contract wrapper like `provide/contract-id-new.0`.  (Instead it would be helpful it it were `orig`)</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-07T12:14:25.000013</ts>
    <user>Bertha</user>
    <text>It's possible to discover that the id is `orig`, but involves some gymnastics walking unexpanded source looking for renaming contract-out provides.</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-07T12:15:50.000030</ts>
    <user>Bertha</user>
    <text>gory details: &lt;https://github.com/greghendershott/racket-mode/blob/master/defn.rkt&gt;</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-07T12:21:03.000032</ts>
    <user>Bertha</user>
    <text>Hmm. Dawns on me that `(object-name new)` is `'orig`. I wonder if that's a shortcut.</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-07T13:46:58.000013</ts>
    <user>Carlyn</user>
    <text>&lt;@Bertha&gt; The identifier provided by `contract-out` _is_ fundamentally a different binding. If it were the same binding, it would have to refer to the same value, which wouldn’t have the contract added to it. `contract-out` works by generating a new binding to hold the contracted version of a value.</text>
  </message>
  <message conversation_id="553">
    <ts>2018-07-07T13:49:06.000085</ts>
    <user>Carlyn</user>
    <text>It does seem like it could be useful for tooling to have some other, separate way to communicate the original definition site, though. Usually, when I ask DrRacket to show me where an identifier is bound, I don’t want it to show me the location of `contract-out`, I want it to show me the location of the uncontracted definition. But this is generally a minor complaint (since it’s possible to jump to definition a second time to get the original definition).</text>
  </message>
  <message conversation_id="554">
    <ts>2018-07-07T14:13:28.000059</ts>
    <user>Victoria</user>
    <text>So i've heard a bit about this whole Racket on Chez thing but I haven't really seen much buzz about it in the Racket community. Is this something Racket users are interested in?</text>
  </message>
  <message conversation_id="554">
    <ts>2018-07-07T14:14:15.000035</ts>
    <user>Victoria</user>
    <text>Also, how do you find the current performance of Racket? Is it okay for your use cases?</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-08T11:24:36.000033</ts>
    <user>Bertha</user>
    <text>&lt;@Carlyn&gt; Thanks you, that explains why the limitation is justified. It surprised me because identifier-binding seems to handle just renaming OK, and just contract-out OK. But not the composition. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-08T11:26:06.000018</ts>
    <user>Bertha</user>
    <text>Anyway I spent more time reviewing that `defn.rkt` code and found some ways to simplify it, and to make it faster (or at least, fail faster).</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-08T13:14:14.000004</ts>
    <user>Bertha</user>
    <text>grr. The elided `syntax` printing makes paredit-mode crazy. e.g. `#&amp;lt;syntax:/path/to/file.rkt:140:10 (module m racket/ba...&amp;gt;` is an unbalanced sexpr.</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-08T13:19:45.000036</ts>
    <user>Carlyn</user>
    <text>…paredit can’t ignore printed output?</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-08T17:31:28.000048</ts>
    <user>Bertha</user>
    <text>paredit ignores commented regions, but not-ignores everything else
I've logged quite a few hours with it enabled in Racket REPL, with many varieties of Racket values
`#&amp;lt;syntax&amp;gt;` are the only the only things ever seem to `print` unbalanced like this
It's not terrible it's just an annoyance</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-08T17:36:55.000023</ts>
    <user>Bertha</user>
    <text>Before:
```
#&amp;lt;syntax::5253 (module file racket (module a...&amp;gt;
file.rkt&amp;gt; 
```
Type `(` and instead of
```
#&amp;lt;syntax::5253 (module file racket (module a...&amp;gt;
file.rkt&amp;gt; ()
```
It is:
```
#&amp;lt;syntax::5253 (module file racket (module a...&amp;gt;
                                       file.rkt&amp;gt; ()
```
:face_with_rolling_eyes:</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-08T17:37:31.000021</ts>
    <user>Bertha</user>
    <text>Because "obviously" we should be indenting the "language" element of a `module` form. :cry:</text>
  </message>
  <message conversation_id="552">
    <ts>2018-07-08T17:41:55.000035</ts>
    <user>Bertha</user>
    <text>Yes I realize this will turn out to be actionable, not in Racket or paredit, but instead in racket-mode i.e. me :slightly_smiling_face:</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T17:49:18.000081</ts>
    <user>Carlyn</user>
    <text>Is there really no way to tell paredit “hey, this region is output, please do not touch”? It seems weird for `(displayln "(")` to break the whole buffer.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T20:54:05.000021</ts>
    <user>Carrol</user>
    <text>&lt;@Carlyn&gt; you mean the open paren in the string is being treated as if not in a string?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T20:54:53.000005</ts>
    <user>Carlyn</user>
    <text>I don’t use emacs, so I wouldn’t know, but I wasn’t talking about the literal expression `(displayln "(")`, I was talking about its output</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T20:55:08.000099</ts>
    <user>Carrol</user>
    <text>oooh. paredit in the repl… yeah. that’s problematic</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T20:55:57.000041</ts>
    <user>Carrol</user>
    <text>I don’t have a solution for that and was why I was looking at other alternatives to paredit at one point, but it was still the most solid choice for my work.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:01:44.000053</ts>
    <user>Bertha</user>
    <text>paredit admits "Paredit behaves badly if parentheses are unbalanced, so exercise caution when forcing Paredit Mode to be enabled, and consider fixing unbalanced parentheses instead."
So using it in a REPL is, in principle, no guarantees.
And if I had a Racket program doing "exotic" `display`s, I would expect things to break. And I could temporarily disable paredit.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:01:53.000108</ts>
    <user>Bertha</user>
    <text>But I'm talking about the `print`ed form of Racket values -- what you'd encounter as the result of expressions.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:02:21.000005</ts>
    <user>Bertha</user>
    <text>And it just seems weird to me that the only one that regularly emits an unbalanced sexpr, is `syntax`.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:02:53.000050</ts>
    <user>Bertha</user>
    <text>I go literally months with no issues with paredit in the REPL, until I start doing stuff with `syntax` that gets elided.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:04:53.000104</ts>
    <user>Bertha</user>
    <text>Hmm. racket-mode has a `racket-pretty-print` setting that, when `t`, uses `pretty-print` instead of the usual `print` in the REPL.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:05:25.000010</ts>
    <user>Bertha</user>
    <text>Maybe I should just tweak that to be a `pretty-print` with an exception for `syntax`.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:06:23.000011</ts>
    <user>Bertha</user>
    <text>With the multi-line indentation of `pretty-print`, but preserving syntax info unlike `syntax-&amp;gt;datum`.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:10:46.000113</ts>
    <user>Bertha</user>
    <text>And/or, to answer your question/suggestion &lt;@Carlyn&gt;, there is probably _some_ way for racket-mode to put program output into the REPL in a distinguished way that paredit will ignore.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:10:51.000013</ts>
    <user>Carlyn</user>
    <text>I think your assertion that only syntax will print that way is wrong. The default value for `error-value-&amp;gt;string-handler` also truncates using `...` and makes no attempt to maintain matched parentheses. Therefore, you get results like this:
```
&amp;gt; (raise-argument-error 'foo "bar?" (make-list 100 #f))
foo: contract violation
  expected: bar?
  given: '(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f...
```</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:12:10.000142</ts>
    <user>Carlyn</user>
    <text>That can happen regularly in syntax errors, since they can print s-expression versions of syntax objects.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:12:35.000104</ts>
    <user>Bertha</user>
    <text>Oh, actually racket-mode follows xrepl's example in this regard and displays errors and other "notifications" as comments.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:12:44.000018</ts>
    <user>Bertha</user>
    <text>```
&amp;gt; (raise-argument-error 'foo "bar?" (make-list 100 #f))
; foo: contract violation
;   expected: bar?
;   given: '(#f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f #f...
```</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:12:52.000038</ts>
    <user>Carlyn</user>
    <text>Ah, that does sidestep the problem.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:13:09.000082</ts>
    <user>Bertha</user>
    <text>But `display` output from your program, won't be commented like that.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:13:35.000063</ts>
    <user>Bertha</user>
    <text>I could try to wrangle it into the Emac buffer distinguished some other way, that paredit would ignore.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:14:01.000053</ts>
    <user>Bertha</user>
    <text>I'm sure it's possible somehow. After all, this is emacs. The only question is how many kludges and sacrificial victims are required.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:15:13.000023</ts>
    <user>Bertha</user>
    <text>I just feel like `print`ed values by `read-eval-print-loop` should be balanced sexprs because reasons. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:15:52.000148</ts>
    <user>Carlyn</user>
    <text>For what it’s worth, `~.a` and friends will also truncate with `...`, but I don’t know that those are actually used very much.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:16:14.000088</ts>
    <user>Carlyn</user>
    <text>(And `~e` uses `error-value-&amp;gt;string-handler` directly.)</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:20:41.000047</ts>
    <user>Bertha</user>
    <text>I think the `print`ed result of `~.a` and friends are strings?  i.e. `"1234..."` is a balanced sexpr.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:21:39.000052</ts>
    <user>Carlyn</user>
    <text>Right, but if you wrote `(printf "~.a" x)`, then you’d get it without the quotes.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:22:44.000058</ts>
    <user>Bertha</user>
    <text>I'm distinguishing values `print`ed in a REPL (the result of that would be `void` which prints nothing) from arbitrary output a program can make.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:23:06.000118</ts>
    <user>Bertha</user>
    <text>But anyway, I'm sure you're right there are other exceptions besides `syntax`.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-08T21:23:54.000019</ts>
    <user>Bertha</user>
    <text>`syntax` is the one that happens to me enough to be annoying, so I'm going on way too much about it here, sorry.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T00:59:28.000038</ts>
    <user>Bertha</user>
    <text>`print-syntax-width` can at least control -- with `+inf.0` even eliminate -- the elision: &lt;https://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._print-syntax-width))&gt;</text>
  </message>
  <message conversation_id="556">
    <ts>2018-07-09T08:05:25.000159</ts>
    <user>Lynna</user>
    <text>Hi Mason - I'm never sure which threads will provoke a response in different channels, but it's possible that you'l get more of an answer on the mailing list.

For what it's worth, I haven't heard performance complaints for plain Racket in the last 5 or so years in the way that I used to, and I think it's because plain Racket's performance mostly caught up.

I keep writing "plain Racket", because performance remains challenge (and I still sometimes hear complaints) for our more ambitious Racket variants, like Typed Racket and its sound interaction with untyped code.

As for the Racket-on-Chez buzz, maybe my message has gotten through: the Racket-on-Chez project will succeed or fail in the near term based on internal merits, like the structure and maintainability of the system. Those are good things, but they're less exciting than an automatic performance boost.</text>
  </message>
  <message conversation_id="557">
    <ts>2018-07-09T09:06:50.000192</ts>
    <user>Eugena</user>
    <text>&lt;@Odis&gt; to clarify, it's definitely a bug, I was just commenting on what kind of bug it was</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:05:22.000046</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; I'm confused about what sense `identifier-binding` handles plain `contract-out` ok</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:09:18.000575</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; In the sense that, in that case, the `nominal-source-id` returned by `identifier-binding` is the original non-contract-wrapped id symbol.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:09:38.000027</ts>
    <user>Monserrate</user>
    <text>ah it's just the right symbol</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:09:47.000300</ts>
    <user>Monserrate</user>
    <text>not the binding</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:10:24.000155</ts>
    <user>Bertha</user>
    <text>Yes, the discussion above was all in the context of "making a go-to-definition tool".</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:10:59.000205</ts>
    <user>Bertha</user>
    <text>For which, if you know the correct file, and know the correct id symbol used in that file, you can find it.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:11:59.000088</ts>
    <user>Monserrate</user>
    <text>that seems not true in general to me</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:12:10.000468</ts>
    <user>Monserrate</user>
    <text>but probably it works for your purposes</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:13:28.000401</ts>
    <user>Bertha</user>
    <text>Well yes with this kind of tooling it seems often a thing isn't true in general, but is true often enough to be useful. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:15:00.000557</ts>
    <user>Monserrate</user>
    <text>I think the issue is that while `rename-out` works by design, what you're doing for `contract-out` only really works by accident, and so minor variations don't work</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:18:31.000015</ts>
    <user>Bertha</user>
    <text>Empirically the following is useful (but maybe just accidentally):
```
  (define (real-name id)  ;symbol? -&amp;gt; symbol?
    (or (object-name (with-handlers ([exn:fail? (λ _ #f)])
                       (eval (namespace-symbol-&amp;gt;identifier id))))
        id))
```
It seems to reliably answer the question, what was the original id symbol `&amp;lt;foo&amp;gt;` behind `provide/contract-id-&amp;lt;foo&amp;gt;.0`.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:19:23.000440</ts>
    <user>Bertha</user>
    <text>Reliable enough for me to use that, instead of walking unexpanded file syntax looking for `(contract-out [rename _ _ _])` forms -- which is what I'd been doing and is obviously a bit slower.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:22:31.000077</ts>
    <user>Bertha</user>
    <text>Anyway, my main sad at the moment is that I have to walk fully-expanded syntax on the target file to discover definition sites, and that full expansion isn't cached anywhere AFAIK. &lt;https://github.com/greghendershott/racket-mode/issues/288#issuecomment-403327777&gt;</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:27:49.000303</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; couldn't you cache it yourself?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:28:17.000547</ts>
    <user>Monserrate</user>
    <text>either from the previous time you did this, or by changing the `eval-handler` to do that</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:31:05.000149</ts>
    <user>Bertha</user>
    <text>Maybe. What I wrote at that link:
&amp;gt; - If `expand` is (for some files) so slow, can we avoid it?  I don't see how. It's quite common for definitions to be created by "definer" macros, and these definitions can only be discovered in fully-expanded code.
&amp;gt;
&amp;gt; - If we can't avoid it, could we at least shift the cost earlier than &amp;lt;kbd&amp;gt;M-.&amp;lt;/kbd&amp;gt;? Could racket-mode generate expansions ahead of time -- storing them under `compiled/` in (say) `.expanded` files, or in a new `expanded/` subdir?  In theory, sure. But:
&amp;gt;
&amp;gt;     - This seems like something that should be done by a `raco` tool that people explicitly opt in to, much like `raco make`. (Note there exists a `raco expand` tool -- however its output isn't `syntax` with the source location information that we need, it's plain text `syntax-&amp;gt;datum` of the expansion.)
&amp;gt;
&amp;gt;     - The file that must be expanded is the "target" of the find-definition -- the file `identifier-binding` says the definition is in. Even if `racket-run` were to cache the full expansion of the file being run, that's often not where the definition is. Even if you were to `raco some-new-tool` all the files in _your_ project, that won't speed up finding definitions in _other_ projects.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:35:34.000403</ts>
    <user>Monserrate</user>
    <text>right</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:36:26.000156</ts>
    <user>Monserrate</user>
    <text>but racket-mode could still maintain some caches</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:37:23.000047</ts>
    <user>Bertha</user>
    <text>Maybe my comment above is "well it wouldn't be perfect", which contradicts what I was just saying about "well it's tooling and the perfect shouldn't be the enemy of the good".</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:37:48.000026</ts>
    <user>Monserrate</user>
    <text>for example, by changing `current-eval` to call `expand`, cache that result, and then call the underlying `eval`</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:40:02.000285</ts>
    <user>Bertha</user>
    <text>Yes I could do it for the file currently being run. People are paying for that to be expanded anyway, may as well save that result in case they try to visit something used/defined in that same file.  That's a common case.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:41:16.000128</ts>
    <user>Monserrate</user>
    <text>also i think there's more you can do to get information from `zo` files</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:42:54.000241</ts>
    <user>Bertha</user>
    <text>Oh! I just assumed "bytecode, there's won't be any srcloc info". There might be?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:43:05.000522</ts>
    <user>Monserrate</user>
    <text>there's lots of interesting stuff in bytecode</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:43:51.000324</ts>
    <user>Bertha</user>
    <text>That's a corner of Racket I've barely looked at.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:44:47.000179</ts>
    <user>Monserrate</user>
    <text>for example, try `raco decompile` on some file with some definitions, and you'll see source locations for most functions</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:45:00.000479</ts>
    <user>Bertha</user>
    <text>Huh. Wow. OK.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:45:25.000498</ts>
    <user>Monserrate</user>
    <text>it's not obvious to me what part of the structure has those, but it might be the `name` field of lambdas</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:45:59.000526</ts>
    <user>Bertha</user>
    <text>Thanks I'll dig in and take a look!</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:46:47.000421</ts>
    <user>Bertha</user>
    <text>Until now, my only thoughts about `zo`s have been, if they get stale, can I use them as croutons.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:55:50.000444</ts>
    <user>Eugena</user>
    <text>&lt;@Bertha&gt; re contracts, I think the exported names are bound to applicable substructs of `provide/contract-info` from `racket/contract/private/provide`, and that struct stores the original name (identifier). Maybe ask &lt;@Eileen&gt; if it's safe to rely on that?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:57:03.000060</ts>
    <user>Eileen</user>
    <text>Sorry: what’s the behavior you’d like to rely on, &lt;@Bertha&gt; ?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T10:58:12.000286</ts>
    <user>Eileen</user>
    <text>I’m probably okay to guarantee things about names working right, but I should probably add some tests and docs to make sure that that it stays that wya.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:06:37.000385</ts>
    <user>Eugena</user>
    <text>&lt;@Eileen&gt; the discussion earlier was about how to get from a use of a provide/contract'd name to the *original* function in racket-mode's version of Jump to Definition. I was suggesting to &lt;@Bertha&gt; that the `provide/contract-info` struct might be useful. (But now thinking about it again, I'm not sure if it's useful when looking at expanded code.)</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:08:31.000159</ts>
    <user>Eileen</user>
    <text>I don’t think that check syntax relies on that?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:09:00.000150</ts>
    <user>Eileen</user>
    <text>oh, but maybe that’s because it doesn’t work?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:13:16.000461</ts>
    <user>Eugena</user>
    <text>I once wrote some code that used it in a module-begin macro to do contract-aware analysis, so I think it works in that context. Just maybe not for a Check Syntax-like tool.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:15:39.000157</ts>
    <user>Bertha</user>
    <text>&lt;@Eileen&gt; When the definition is from another file, in DrRacket I usually get the choice, "Open Defining File". However in racket-mode it tries to find and go to the actual location within the file.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:16:44.000641</ts>
    <user>Bertha</user>
    <text>This means (say) trying to find the source-id or nominal-source-id reported by `identifier-binding`, in a `define-values` in fully expanded stx for the file.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:17:56.000391</ts>
    <user>Bertha</user>
    <text>The issue is with `(contract-out [rename orig new] ..)`, identifier-binding doesn't report `orig`. It reports `new` and something like `provide/contract-id-orig.0`. Neither of which is in the file.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:19:23.000617</ts>
    <user>Bertha</user>
    <text>How to get from `provide/contract-id-orig.0` to `orig` is the question.
I used to walk _non_-expanded file syntax looking for the contract-out / rename form.
More recently I noticed that `object-name` seems to work.
Ryan wondered if the struct subtype accessor might provide this.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:23:28.000439</ts>
    <user>Eileen</user>
    <text>(one note: it says “open defining file” when it has not yet expanded the tab that contains the definition (or the file isn’t open), so that’s kind of a red herring here)</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:26:34.000011</ts>
    <user>Eileen</user>
    <text>Check Syntax looks at the fully expanded program and tries to find the identifier, but I see that it also doesn’t work.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:27:00.000338</ts>
    <user>Eileen</user>
    <text>Specifically, for this program:</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:27:04.000131</ts>
    <user>Eileen</user>
    <text>```
#lang racket/base
(require "tmp2.rkt")
abc
pqr
```</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:27:09.000326</ts>
    <user>Eileen</user>
    <text>with tmp2.rkt:</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:27:21.000100</ts>
    <user>Eileen</user>
    <text>```
#lang racket

(define abc 1)
(provide
 abc
 (contract-out (rename abc pqr integer?)))
```</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:27:32.000322</ts>
    <user>Eileen</user>
    <text>It goes to the right place for `abc` but not `pqr`</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T11:29:59.000109</ts>
    <user>Eileen</user>
    <text>I’m not sure this is check-syntax/emacs-mode’s fault. It may be that `contract-out`’s expansion needs to change.</text>
  </message>
  <message conversation_id="558">
    <ts>2018-07-09T12:05:02.000263</ts>
    <user>Victoria</user>
    <text>Thanks for the reply and clarification! I'd like to give racket a go someday, I find the philosophy of focusing on DSLs very interesting but as a physicist who needs high performance I've never really found a use case for me to delve into racket.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T14:15:23.000309</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; I may be missing something, but isn’t that true even if `contract-out` doesn’t use `rename`? I guess maybe the “Jump to Definition (in Other File)” option might work without the rename, but that seems largely accidental, since IIUC Jump to Definition looks at the result of `read`, _not_ the fully-expanded program? I am obviously less familiar with this than you are, though, so I could be wrong.</text>
  </message>
  <message conversation_id="559">
    <ts>2018-07-09T14:17:32.000032</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Is s-exp-&amp;gt;fasl supposed to fail when when `current-write-relative-directory` is a cons pair? Such as in:</text>
  </message>
  <message conversation_id="559">
    <ts>2018-07-09T14:17:36.000188</ts>
    <user>Odis</user>
    <text>```
(current-write-relative-directory (cons (build-path "/" "Users" "leif")
                                        (build-path "/" "Users")))

(fasl-&amp;gt;s-exp (s-exp-&amp;gt;fasl (build-path "/" "Users" "leif" "foo.rkt")))
```</text>
  </message>
  <message conversation_id="559">
    <ts>2018-07-09T14:18:04.000219</ts>
    <user>Odis</user>
    <text>Or is that a bug?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T14:38:26.000423</ts>
    <user>Eileen</user>
    <text>&lt;@Carlyn&gt; it looks at the fully expanddd program</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T14:38:36.000215</ts>
    <user>Eileen</user>
    <text>The define pop down doesn't</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T14:39:08.000425</ts>
    <user>Carlyn</user>
    <text>ah! I didn’t realize they were different, but in retrospect, I don’t know why they’d have to be the same.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T14:48:50.000059</ts>
    <user>Eileen</user>
    <text>It would be better if they were the same, I think.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T14:49:07.000311</ts>
    <user>Eileen</user>
    <text>and yeah, it seems like the `rename-out` is not necc. to demonstrate the error.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T14:53:36.000334</ts>
    <user>Eileen</user>
    <text>just to be clear, I think that what’s happening is that check syntax figures out what file the definition is in, but can’t find the definition, so it just goes to the file (and leaves the insertion point alone).</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T14:54:11.000238</ts>
    <user>Eileen</user>
    <text>but something is fishy, as I think I used this feature (and it worked) the other day.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T14:54:17.000118</ts>
    <user>Eileen</user>
    <text>maybe there is more to the bug</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:17:44.000062</ts>
    <user>Franklin</user>
    <text>The documentation of match says that this pattern should work: (struct struct-id (pat ...))</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:18:27.000139</ts>
    <user>Franklin</user>
    <text>However I can't get this to work:  &lt;http://pasterack.org/pastes/21677&gt;</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:19:15.000067</ts>
    <user>Carlyn</user>
    <text>&lt;@Franklin&gt; You just want `bird`, not `struct:bird`.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:19:30.000298</ts>
    <user>Carlyn</user>
    <text>But that won’t work here because you’ve shadowed `bird`.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:19:45.000200</ts>
    <user>Franklin</user>
    <text>Well, normally. I'd like to know what I can use in the match pattern, when I have shadowed the name.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:20:15.000259</ts>
    <user>Carlyn</user>
    <text>I don’t think there’s a way to do it if you’ve shadowed the name; `match` needs the static information bound to that identifier.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:20:16.000372</ts>
    <user>Franklin</user>
    <text>Do I really need to use #:extra-name ?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:21:45.000143</ts>
    <user>Carlyn</user>
    <text>Can’t you just rename the local variable so it doesn’t shadow the outer name? I’m unsure what you’re asking for.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:23:49.000348</ts>
    <user>Franklin</user>
    <text>That's the sensible thing to do.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:24:22.000114</ts>
    <user>Franklin</user>
    <text>I was just surprised that I couldn't use struct:bird which is bound to the struct type descriptor.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:24:54.000238</ts>
    <user>Carlyn</user>
    <text>`struct:bird` is bound to the _runtime_ structure type descriptor (that is, a value that satisfies `struct-info?`).</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:25:08.000023</ts>
    <user>Carlyn</user>
    <text>`bird` is bound to the structure type transformer binding, which is what `match` uses.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:25:13.000274</ts>
    <user>Carlyn</user>
    <text>The difference between them is confusing.</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T15:26:30.000090</ts>
    <user>Franklin</user>
    <text>#:extra-name worked</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:01:42.000120</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; So reading the `zo` is easier than I expected, after grokking `parse/zo-structs.rkt`.
I can walk all the `mod`s (including submodules) and find `lam`s and get srcloc. It works, except the srcloc for definitions created by macros is wrong. It's the location of the macro definition, not the location of the usage of the macro.

Then I noticed `mod-binding-names`, which is a hashtable of phases to hashtables of symbols to syntaxes.
And the srcloc there is correct, even for definer macro usages!  And it's just a simple hashtable lookup! Woot.

BUT. That's only for the value of `mod-binding-names` in the file module. For submodules, the value of `mod-binding-names` is something like `#96#`.
Um.... I'm not even sure what that means -- is it something to do with cycle detection???
I don't see the symbol `'sub` in any hash table in the parsed zo when the rkt file has `(module m racket (define (sub x) x) (provide sub))`. So it doesn't seem like `#96#` references something elsewhere?</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T16:05:12.000317</ts>
    <user>Bertha</user>
    <text>Oh the `#96#` is a graph structure reference: &lt;https://docs.racket-lang.org/reference/reader.html#(part._parse-graph)&gt;</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:05:58.000326</ts>
    <user>Bertha</user>
    <text>But in the `zo-parse` output, I have `#96=#hash()`.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:06:45.000348</ts>
    <user>Bertha</user>
    <text>It's empty. Which fits with me not seeing `'sub` anywhere in the zo.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:15:12.000349</ts>
    <user>Bertha</user>
    <text>&lt;http://pasterack.org/pastes/91585&gt;</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:25:03.000131</ts>
    <user>Monserrate</user>
    <text>I think only &lt;@Lynna&gt; can answer this question</text>
  </message>
  <message conversation_id="555">
    <ts>2018-07-09T16:26:31.000385</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; It does look like `s-exp-&amp;gt;fasl` is broken for that case</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:33:09.000185</ts>
    <user>Lynna</user>
    <text>&lt;@Bertha&gt; Warning before other answers: `parse/zo-structs` is unusual in that it promises to change with the version. It's very different for v7, because it's at the linklet level instead of the module level.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:37:37.000097</ts>
    <user>Lynna</user>
    <text>I may be starting to forget, but I think the `mod-binding-names` field won't have all defined names. It has a mapping only for names that have to be made up to hide them, such as when the definition is macro-introduced. If `(define (sub x) x)` appears in the program, then I think there's no empty for `'sub`, but if `(define (sub x) x)` is macro-introduced so that an unreadable name `sub.1` is made up, then `'sub.1` will make to `'sub` in the table. Is that consistent with what you're seeing?</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:39:50.000210</ts>
    <user>Bertha</user>
    <text>Well I'm on 6.10 at the moment (matches something I have deployed, waiting to upgrade).
With the zo for this file: &lt;https://github.com/greghendershott/racket-mode/blob/various-changes/test/defn-examples.rkt&gt;</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:40:34.000282</ts>
    <user>Bertha</user>
    <text>I'm seeing `mod-binding-names` entries for all the file module bindings, including things like `plain`.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:41:39.000046</ts>
    <user>Bertha</user>
    <text>I'm seeing `#96#` =&amp;gt; `#96=#hash()` as the mod-binding-names for all the submodules in the file, like `sub` or `red-herring`.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:43:06.000125</ts>
    <user>Bertha</user>
    <text>I don't have an example of a macro-introduced definition in a submodule. I'll try adding one to see if that "forces" a non-empty hashtable for the submodule.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:46:25.000136</ts>
    <user>Bertha</user>
    <text>It doesn't.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:47:31.000449</ts>
    <user>Bertha</user>
    <text>Welp, maybe this behavior means I should shelve this idea.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:47:55.000212</ts>
    <user>Bertha</user>
    <text>I did notice the warning about version changes, but was willing to maybe try to track along with those if the result was worthwhile.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:48:39.000091</ts>
    <user>Bertha</user>
    <text>I can at least do some more work on caching fully-expanded code.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:49:03.000244</ts>
    <user>Bertha</user>
    <text>Maybe for RacketCon day 2 we could have a little session about tooling stuff.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:49:20.000039</ts>
    <user>Lynna</user>
    <text>Apparently I misremember, so I'll look a little more</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:50:55.000394</ts>
    <user>Bertha</user>
    <text>Thanks but don't spend _too_ much time.
The immediate motivation is to make go-to-definition on some sources files be "instant" instead of take a few seconds because fully-expanding them is slow.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:51:34.000373</ts>
    <user>Bertha</user>
    <text>I love "instant" as much as the next person but there's a cost:benefit to everything.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T16:55:11.000322</ts>
    <user>Lynna</user>
    <text>Adding a macro-introduced definitition does seem to trigger the table When I change the `sub` submodule to
```
(module sub racket/base
  (define (sub x) x)
  (define-syntax-rule (q) (define other 8))
  (q)
  (provide sub
           (rename-out [sub sub/renamed])))
```
then the table for `sub` has `sub` and `q`.
So, I think it's that when there's any identifier like a macro-introduced one, then the table is generated. Otherwise, it can be synthesized from the module content easily enough.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T17:01:04.000470</ts>
    <user>Bertha</user>
    <text>&lt;@Lynna&gt; Is that on 6.12, or 6.90-ish, or other?</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T17:01:14.000048</ts>
    <user>Lynna</user>
    <text>6.12</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T17:01:37.000331</ts>
    <user>Bertha</user>
    <text>OK I'll try with that, too.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T17:59:18.000314</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; I have a repair to push for `s-exp-&amp;gt;fasl`</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T17:59:55.000121</ts>
    <user>Lynna</user>
    <text>(after running more tests)</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T18:36:54.000017</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Cool, thanks.</text>
  </message>
  <message conversation_id="561">
    <ts>2018-07-09T18:37:28.000079</ts>
    <user>Odis</user>
    <text>BTW, is there any way to get the location of your current file (if its on your filesystem) at syntax time?</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T18:37:44.000017</ts>
    <user>Odis</user>
    <text>Like:
```
(begin-for-syntax
  (writeln (quote-module-path)))
```

Will just return ’&amp;lt;modname&amp;gt;</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T18:38:20.000208</ts>
    <user>Odis</user>
    <text>Anyway, without that it seems like its not possible to do something like, say, dynamic-require at phase &amp;gt; 0</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T18:40:58.000087</ts>
    <user>Lynna</user>
    <text>I think you want `(variable-reference-&amp;gt;module-path-index (#%variable-reference))`, but I don't know if there's a prettier wrapper along the lines of `quote-module-path`.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T18:42:23.000018</ts>
    <user>Odis</user>
    <text>I actually tried that first.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T18:42:51.000304</ts>
    <user>Odis</user>
    <text>But if, say the file is in: `/Users/leif/bizzle.rkt`, then:

```
(begin-for-syntax
  (writeln (variable-reference-&amp;gt;module-path-index (#%variable-reference))))
```</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-09T18:43:00.000011</ts>
    <user>Odis</user>
    <text>gives
```
#&amp;lt;module-path-index='bizzle[7427]&amp;gt;
```</text>
  </message>
  <message conversation_id="562">
    <ts>2018-07-09T19:43:02.000036</ts>
    <user>Elanor</user>
    <text>Maybe I'm missing something, but how about just:
```(begin-for-syntax
  (writeln (syntax-source #'here)))```</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-10T08:30:08.000011</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; I guess I'm not clear on what you're trying to do. Using a module path index with `dynamic-require` should generally do the right thing, including when you build up relative module path indices using `module-path-index-join`</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-10T09:59:33.000613</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; It looks like some commit in this range &lt;https://github.com/racket/racket/compare/5bb837661c12a9752c6a99f952c0e1b267645b33...5b8aa67e&gt; broke the AppVeyor windows tests: &lt;https://ci.appveyor.com/project/plt/racket/build/1.0.3410&gt;</text>
  </message>
  <message conversation_id="563">
    <ts>2018-07-10T11:11:17.000622</ts>
    <user>Bertha</user>
    <text>Does the equivalent of `zo-for?` already exist somewhere (before I try to write it some bad ad hoc way)?
```
(define (zo-for? zo-path path) ;(-&amp;gt; path-string? path-string? boolean?)
  ???)
(check-true (zo-for? "/path/to/compiled/file_rkt.zo" "/path/to/file.rkt"))
```</text>
  </message>
  <message conversation_id="563">
    <ts>2018-07-10T11:28:02.000668</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; you'll want to look at &lt;http://docs.racket-lang.org/reference/eval.html?q=compiled-path#%28def._%28%28quote._~23~25kernel%29._use-compiled-file-paths%29%29&gt;</text>
  </message>
  <message conversation_id="563">
    <ts>2018-07-10T11:28:45.000420</ts>
    <user>Monserrate</user>
    <text>and also &lt;http://docs.racket-lang.org/reference/eval.html?q=compiled-path#%28def._%28%28quote._~23~25kernel%29._current-load%2Fuse-compiled%29%29&gt;</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-10T12:15:06.000266</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Ah, okay.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-10T12:15:37.000586</ts>
    <user>Odis</user>
    <text>So you can leave it as a relative module path index and dynamic-require somehow manages to resolve it with respect to the given module.</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-10T12:16:06.000258</ts>
    <user>Odis</user>
    <text>Like, If I have `lib.rkt`:

```
#lang racket

(define x 42)
(provide x)
```</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-10T12:16:29.000157</ts>
    <user>Odis</user>
    <text>And then I use it in `use.rkt`, in the same directory:
```
#lang scratch

(begin-for-syntax
  (displayln (dynamic-require
              (module-path-index-join "lib.rkt" #f) 'x)))
```</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-10T12:16:29.000579</ts>
    <user>Odis</user>
    <text>?</text>
  </message>
  <message conversation_id="560">
    <ts>2018-07-10T12:21:21.000412</ts>
    <user>Odis</user>
    <text>Ah, okay, ya it does do the right thing:

```
(begin-for-syntax
  (writeln (resolve-module-path-index (module-path-index-join "me.rkt" #f))))
```
Thanks.</text>
  </message>
  <message conversation_id="564">
    <ts>2018-07-10T14:26:06.000484</ts>
    <user>Franklin</user>
    <text>The functions first, rest etc raise an error when not used on lists. Do we have a cons that raise an error when the second argument isn't a list?</text>
  </message>
  <message conversation_id="564">
    <ts>2018-07-10T14:26:54.000463</ts>
    <user>Monserrate</user>
    <text>&lt;@Franklin&gt; if you get `cons` from one of the student languages it does that</text>
  </message>
  <message conversation_id="564">
    <ts>2018-07-10T14:27:08.000391</ts>
    <user>Franklin</user>
    <text>ok</text>
  </message>
  <message conversation_id="565">
    <ts>2018-07-10T16:54:37.000171</ts>
    <user>Kim</user>
    <text>I'm playing with syntax object. In DrRacket I can see information on the syntax object like Source, Line, Column, Span, and more. How do I access this information given a syntax object? Say for example, I want to print the position, line, and column number of the calling site of a define-syntax expression.</text>
  </message>
  <message conversation_id="565">
    <ts>2018-07-10T16:55:00.000315</ts>
    <user>Monserrate</user>
    <text>&lt;@Kim&gt; see functions like `syntax-source`</text>
  </message>
  <message conversation_id="565">
    <ts>2018-07-10T16:55:36.000204</ts>
    <user>Kim</user>
    <text>&lt;@Monserrate&gt; Yes!!! that is exactly what I needed! Thank you!</text>
  </message>
  <message conversation_id="565">
    <ts>2018-07-10T17:13:12.000067</ts>
    <user>Kim</user>
    <text>So lets say i have (define-syntax (foo a b) ...) I want foo to retrieve the syntax information for the callsite, not for just a or b. Is there a way, within the define-syntax for foo, to get that information?</text>
  </message>
  <message conversation_id="565">
    <ts>2018-07-10T17:13:49.000137</ts>
    <user>Kim</user>
    <text>Put another way, inside foo I want #'(foo a b).</text>
  </message>
  <message conversation_id="565">
    <ts>2018-07-10T17:21:09.000291</ts>
    <user>Franklin</user>
    <text>If you have (define-syntax (foo stx) ...) then stx contains a syntax object representing the call (foo a b).</text>
  </message>
  <message conversation_id="565">
    <ts>2018-07-10T17:41:37.000097</ts>
    <user>Kim</user>
    <text>&lt;@Franklin&gt; Ok that's great. Thank you so much</text>
  </message>
  <message conversation_id="565">
    <ts>2018-07-11T00:01:58.000160</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; Although plan B (getting srclocs from zos) didn't really pan out as hoped, plan A is working out well so far -- a `current-eval` handler that `expand`s and caches.
Plus, if the file being run is using a `zo` -- so the `eval-handler` won't be expanding -- then `delay/thread` an expansion into the cache (the cache retrieve does a `force`).  That way it is likely to be ready by the time a user does the first find-definition, and if it is ready, it will feel "instant".</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:02:40.000013</ts>
    <user>Monserrate</user>
    <text>why didn't the zo idea work?</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:04:58.000076</ts>
    <user>Bertha</user>
    <text>WIP &lt;https://github.com/greghendershott/racket-mode/blob/various-changes/syntax.rkt&gt;</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:06:44.000016</ts>
    <user>Bertha</user>
    <text>&amp;gt; why didn't the zo idea work?
The srclocs in `lam`s aren't great -- e.g. for "definer macros".
The srclocs in the bindings-hashtable are awesome ... but the table exists only for the file module not submodules.</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:08:22.000121</ts>
    <user>Monserrate</user>
    <text>those macros should be fixed, I'd say</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:08:40.000178</ts>
    <user>Monserrate</user>
    <text>and aren't the main modules what we mostly care about?</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:11:23.000129</ts>
    <user>Bertha</user>
    <text>How would you fix this example that failed
```
(define-syntax-rule (plain-definer name)
  (begin
    (define (name x) x)
    (provide name)))
(plain-definer plain-by-macro)
```
?</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:12:36.000084</ts>
    <user>Bertha</user>
    <text>Anyway racket-mode has to have a non-`zo` way to do this when `zo`s don't exist.</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:16:25.000236</ts>
    <user>Bertha</user>
    <text>You gave me both plan A and plan B. I may have been unclear above, but I meant to say "thanks for two great plans, and one of them is working!" :slightly_smiling_face:</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:16:59.000139</ts>
    <user>Monserrate</user>
    <text>I think the fix for that macro is to use `syntax/loc`</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:19:37.000150</ts>
    <user>Bertha</user>
    <text>Well I often use find-definition to explore "legacy" code and/or Racket distribution code. :slightly_smiling_face:
I would like it to work even if it still uses `syntax-rules`.</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:21:49.000057</ts>
    <user>Bertha</user>
    <text>Also racket-mode still supports Racket version back to 6.0
There are a few features where it `dynamic-requires` some new lib, and has a fallback.
But most of it still works.
I'd like it to still work across bytecode structure changes, and even if `syntax-rules` is still used somewhere.
Unlike DrRacket I can't assume the current version of Racket.</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:22:44.000059</ts>
    <user>Bertha</user>
    <text>`define-values` and `define-syntaxes` has been pretty stable.</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:23:29.000107</ts>
    <user>Monserrate</user>
    <text>although, thinking about it more, I probably want the answer that the zo source location gives for your macro (or maybe I want both locations)?</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:25:16.000134</ts>
    <user>Bertha</user>
    <text>I think the best answer to "where is `plain-by-macro` defined?" to go to that line where _it_ is actually defined (last line in my example).
After all, I can always move to the left over `plain-definer`, and hit visit-def to go there, next.</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:26:47.000032</ts>
    <user>Bertha</user>
    <text>Also maybe I'm crazy but IME `define-syntax-rule` usually behaves right in this regard -- automatically does the right thing.
It's `syntax-{case parse}` where you need to use `syntax/loc`.
Right? Maybe I'm remembering wrong.</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T00:28:42.000028</ts>
    <user>Bertha</user>
    <text>Oh carp, just noticed the time. Sorry I have to Zzz soon. Cheers!</text>
  </message>
  <message conversation_id="567">
    <ts>2018-07-11T02:58:30.000012</ts>
    <user>Andreas</user>
    <text>Hi is there a way to find valid completions to an identifier in a file? I assume that it would somehow be possible to call on some function to give all available functions and identifiers for the current file (taking into consideration require's) and then filter them given a prefix?</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T02:58:47.000091</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt;  have you thought about this at all? ^^^ writing a company-mode backend?</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T07:53:19.000225</ts>
    <user>Ezra</user>
    <text>how can I embedd svg snippet in the scribble/manual?</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T07:54:17.000114</ts>
    <user>Ezra</user>
    <text>eg.
```#lang scribble/manual
@(require racket/format)
@(define sample-svg @~a{
 &amp;lt;?xml version="1.0"?&amp;gt;
&amp;lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
  "&lt;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&gt;"&amp;gt;

&amp;lt;svg xmlns="&lt;http://www.w3.org/2000/svg&gt;"
 width="467" height="462"&amp;gt;
  &amp;lt;rect x="80" y="60" width="250" height="250" rx="20"
      style="fill:#ff0000; stroke:#000000;stroke-width:2px;" /&amp;gt;
  
  &amp;lt;rect x="140" y="120" width="250" height="250" rx="40"
      style="fill:#0000ff; stroke:#000000; stroke-width:2px;
      fill-opacity:0.7;" /&amp;gt;
&amp;lt;/svg&amp;gt;})```</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T07:55:00.000069</ts>
    <user>Ezra</user>
    <text>I want sample-svg to be rendered as graphics as part of the manual</text>
  </message>
  <message conversation_id="566">
    <ts>2018-07-11T07:57:09.000331</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; If you have a namespace for the file (or for a submodule in the file) you can use `namespace-mapped-symbols` to get the candidates.
Yes I've thought about it: &lt;https://github.com/greghendershott/racket-mode/blob/master/racket-complete.el#L85-L86&gt; :slightly_smiling_face:  In recent years the preferred way to interface with company-mode is to append these to the list returned by the bog standard `completion-at-point-function`.</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T07:58:18.000247</ts>
    <user>Bertha</user>
    <text>&lt;@Ezra&gt; As it happens I just read yesterday on racket-users mailing list about using `@literal` to include things in HTML.</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:00:34.000294</ts>
    <user>Bertha</user>
    <text>&lt;@Ezra&gt; &lt;https://groups.google.com/d/msg/racket-users/pSapuNkEotg/iBIFsBqAAwAJ&gt;</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:02:36.000163</ts>
    <user>Bertha</user>
    <text>FWIW I like to define SVGs using Racket x-exprs then xexpr-&amp;gt;string them. But if you're copying chunks from existing SVG it's easier to stick with the text XML.</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:02:41.000260</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; interesting, so I could use `racket-complete-at-point` and use that as a backend to `company-mode`?</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:04:26.000283</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; It is (supposed to) "just work" if you enabled company-mode in a racket-mode buffer.</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:05:18.000119</ts>
    <user>Ezra</user>
    <text>&lt;@Bertha&gt; thank, I can't make it work though, and in my case the svg will be auto generated -&amp;gt; is literal expected to print the xml or render the graphics (which is what I want?)</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:05:30.000067</ts>
    <user>Bertha</user>
    <text>(company-mode says, lemme get the completion-at-point-function for this buffer. Oh, it gave me those `:company-xxx` values. I'll use them.  i.e. I don't have any config in my init.el.)</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:06:17.000311</ts>
    <user>Andreas</user>
    <text>Oh. OK. Should have tried that. </text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:06:20.000031</ts>
    <user>Bertha</user>
    <text>&lt;@Ezra&gt; Derp. I need more coffee. I thought you were trying to emit HTML.</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:07:13.000163</ts>
    <user>Ezra</user>
    <text>It was my fault - I wasn't clear in the example above - need to edit it</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:07:56.000192</ts>
    <user>Catrice</user>
    <text>Probably a lot easier to generate an .svg file, then use `@image` to load it into your page</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:11:45.000336</ts>
    <user>Bertha</user>
    <text>I guess it depends on your desired render targets. If just HTML, then I _think_ somehow `literal` should get the `&amp;lt;svg&amp;gt;` element in the scribble-rendered HTML, and from there displaying it is up to the web browser?
But if you care also/instead about PDF/LaTeX output, idk off-hand.</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:12:14.000005</ts>
    <user>Bertha</user>
    <text>Or if just HTML, what &lt;@Catrice&gt; said. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:12:36.000350</ts>
    <user>Bertha</user>
    <text>Oh wait, I see. What &lt;@Catrice&gt; said for all the cases.</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:13:14.000195</ts>
    <user>Ezra</user>
    <text>I was trying to avoid generating files but at least it is some solution</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:14:09.000249</ts>
    <user>Bertha</user>
    <text>maybe relevant idk &lt;https://docs.racket-lang.org/rsvg/index.html#(part._top)&gt;</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:14:39.000090</ts>
    <user>Bertha</user>
    <text>(maybe some clue in its source)</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:17:54.000304</ts>
    <user>Ezra</user>
    <text>thank you both - I need to go now but have also one idea I will test later with @image being backup plan</text>
  </message>
  <message conversation_id="568">
    <ts>2018-07-11T08:29:40.000269</ts>
    <user>Lynna</user>
    <text>&lt;@Ezra&gt; If you want to avoid of a file, you can have a value that implements `prop:convertible` and supports conversion to `'svg-bytes`</text>
  </message>
  <message conversation_id="569">
    <ts>2018-07-11T11:20:06.000480</ts>
    <user>Dia</user>
    <text>&lt;@Lynna&gt; `syntax/module-reader` says it takes a `module-path` as defined by `require`. `require` says that `module-path` includes the `submod` form. But when I use that I get the error ```main.rkt:299:2: submod: misuse of module-path constructor (not within, e.g., `require' or `provide')
  in: (submod example lang)```</text>
  </message>
  <message conversation_id="569">
    <ts>2018-07-11T11:20:42.000064</ts>
    <user>Dia</user>
    <text>It's possible that this has been updated recently, because I'm not on latest</text>
  </message>
  <message conversation_id="569">
    <ts>2018-07-11T11:22:41.000415</ts>
    <user>Dia</user>
    <text>I just saw a message about this on the list from 2017/05/18 where you noted this and suggest using #:language</text>
  </message>
  <message conversation_id="570">
    <ts>2018-07-11T14:40:15.000348</ts>
    <user>Carlita</user>
    <text>Since &lt;@Bertha&gt; mentioned the rsvg library, it has a function `svg-port-&amp;gt;pict` which you can pass any input port that contains an svg document and get a value that should render in scribble docs. So you should be able to just pass it a string (like your `sample-svg`) by using `open-input-string` to create an input port out of the string.</text>
  </message>
  <message conversation_id="570">
    <ts>2018-07-11T15:37:21.000295</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; wrt to &lt;https://github.com/racket/racket/pull/2166&gt;, were you saying that having the user pass in a `#:relative-directory` path for `serialize` is a bad idea, and its better to just have `serialize` use `current-write-relative-directory` automatically?</text>
  </message>
  <message conversation_id="570">
    <ts>2018-07-11T15:43:52.000222</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; For backward compatibility, I don't think `serialize` should use `current-write-relative-directory` automatically. It makes sense to have an optional argument that is the relative-to spec; I just meant that the optional argument(s) should support a two-directory mode as well as a one-directory mode — in the same way that `current-write-relative-directory` has both modes.</text>
  </message>
  <message conversation_id="570">
    <ts>2018-07-11T15:44:22.000112</ts>
    <user>Odis</user>
    <text>Ah, okay, ya, that makes sense.</text>
  </message>
  <message conversation_id="570">
    <ts>2018-07-11T15:44:24.000281</ts>
    <user>Odis</user>
    <text>And it does that now.</text>
  </message>
  <message conversation_id="570">
    <ts>2018-07-11T15:45:15.000295</ts>
    <user>Odis</user>
    <text>Also one more question, I just realized that if `relative-to` was provided, I was converting both paths to the `deserialize-id`, as well as paths in the literal serialized data. I presume that’s wrong and it should _only_ be the paths to `deserialize-id`, is that correct?</text>
  </message>
  <message conversation_id="570">
    <ts>2018-07-11T16:17:15.000158</ts>
    <user>Lynna</user>
    <text>Both seem useful. Now that you point it out, I can imagine that some uses might want just or one the other.</text>
  </message>
  <message conversation_id="570">
    <ts>2018-07-11T17:49:56.000059</ts>
    <user>Ezra</user>
    <text>&lt;@Bertha&gt; &lt;@Catrice&gt; &lt;@Carlita&gt; &lt;@Lynna&gt; all your suggestions were working but I wanted to test an idea and I made it work (still few things to iron out) here is what I did: `xml-&amp;gt;sxml-&amp;gt;make-element (for entire xml tree)`</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T02:55:27.000111</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; you are right, completion works. Which package allows you to have a dropdown box of possibilities instead of a new buffer popup?</text>
  </message>
  <message conversation_id="570">
    <ts>2018-07-12T05:23:05.000202</ts>
    <user>Andreas</user>
    <text>Also, I find it rather inconvenient that you have to run the buffer to get it to work. I assume I could run it each time I save.</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T05:23:31.000307</ts>
    <user>Andreas</user>
    <text>What is your usual workflow?</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T09:41:08.000168</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; 1. IIRC the simple default completion in emacs is you hit `C-M-i` to run `completion-at-point`, which uses each major mode's `completion-at-point` function to do the work.
I basically like this -- I don't like completions popping up while I'm typing; just when I ask.
The only change I make is, in my `init.el` to do `(setq tab-always-indent 'complete)`. This lets me hit `TAB` instead of `C-M-i`.  `TAB` will either indent or complete.
That's me.  Other people like things like `company-mode` layered on top. I use it only to test `racket-mode` working with it.</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T09:46:06.000371</ts>
    <user>Bertha</user>
    <text>2. As for needing to run a racket buffer, before completion is enabled: That's basically just because it needs to know what symbols are available from the `#lang` and your `require`s.
Plus the `require`s have options like `rename-in` and `prefix-in`.
Some of the required modules could have side-effects (writing/deleting a file, making a TCP connection, etc.), so I don't think it's really safe for racket-mode to go ahead and try to evaluate the requires to get a namespace. It should be your choice.</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T09:48:06.000203</ts>
    <user>Bertha</user>
    <text>You were asking about completion. Similar rationale for `M-.` `racket-visit-definition`. "I understand that you'd like to visit the definition of `select`. Great! But, um, _which_ `select`, because..." &lt;https://docs.racket-lang.org/search/index.html?q=select&gt;</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T09:48:43.000493</ts>
    <user>Bertha</user>
    <text>So it has to run the file -- evaluate it to a namespace in which identifiers have known specific meanings.</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T10:04:30.000438</ts>
    <user>Andreas</user>
    <text>thanks &lt;@Bertha&gt; for the clarification. I need to sit down and write a post on my racket workflow. Would be interesting to hear what others do as well then.</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T10:08:14.000225</ts>
    <user>Bertha</user>
    <text>I'm open to suggestions or insights how to improve racket-mode. I've had a little more time to work on it, recently, than I have over the past couple years. I have been doing a lot of work on visit-definition the last week, for example, to make it better and faster, re your issue &lt;https://github.com/greghendershott/racket-mode/issues/288&gt;.</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T10:09:33.000507</ts>
    <user>Bertha</user>
    <text>By the way, FWIW: &lt;https://github.com/greghendershott/.emacs.d&gt;</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T10:13:55.000094</ts>
    <user>Bertha</user>
    <text>Do any experienced racketeers know how to fix &lt;https://github.com/racket/macro-debugger/issues/3&gt; -- that is, update `check-requires` for `module+`/`module*` submodules?
I took a look 3 years ago and the code was waaaay over my head.</text>
  </message>
  <message conversation_id="572">
    <ts>2018-07-12T10:16:44.000012</ts>
    <user>Monserrate</user>
    <text>I think pinging &lt;@Eugena&gt; is the way to get that fixed</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T12:25:48.000578</ts>
    <user>Eugena</user>
    <text>&lt;@Bertha&gt; I'll try to take a look soon. It depends on what the binding information on references within the submodules looks like.</text>
  </message>
  <message conversation_id="573">
    <ts>2018-07-12T16:05:17.000291</ts>
    <user>Claud</user>
    <text>&lt;@Victoria&gt; "High performance" seems to mean different things to different people. Racket is faster than Python. According to a 2014 paper (&lt;https://doi.org/10.1109/MCSE.2014.90&gt;) floating-point math in Racket is "within a factor of 3 of C’s speed when carefully tuned, which Typed Racket accelerates to within a factor of 1.5." I think there is a use case for Racket in physics (or so I keep telling my physicist friend).</text>
  </message>
  <message conversation_id="573">
    <ts>2018-07-12T16:10:34.000011</ts>
    <user>Victoria</user>
    <text>That's great to know! I'm primarily a julia user because the language is actually takes the lessons from lisp seriously (it even has macros on well structured expression datatypes!) and the community is very focussed on numerical computing so theres much more library level and compiler level support for the sorts of things I'm doing than on Racket but I definitely will have to start playing around with Racket soon, even if its just for hobby projects.</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T17:48:30.000206</ts>
    <user>Bertha</user>
    <text>&lt;@Eugena&gt; Thanks. As a fallback, if it turns out that it can't work for submodules -- maybe `show-requires` could at least detect that situation and raise an exception?  (If that would break backward-compat then maybe a new `show-requires*` that does so.)</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T17:51:00.000193</ts>
    <user>Bertha</user>
    <text>[ Maybe I should do that anyway in `racket-mode` -- check for such submodules and show an explanation message instead of calling `show-requires` -- for the sake of people using versions of Racket older than one in which this might improve. ]</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T17:54:56.000151</ts>
    <user>Kim</user>
    <text>Is there a way to iterate through the fields of a struct?
Here is what I'm trying to do: Given an instance of any type of struct, I want to do some operation on all fields with type foo, or just return a list of all fields with type foo. It should work for trees and not care about depth. Is something like this possible? (P.S. is this the right place to ask these kinds of questions?)</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T17:56:57.000337</ts>
    <user>Jarrod</user>
    <text>struct-&amp;gt;list  
should produce a list you can iterate over</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T17:59:41.000230</ts>
    <user>Kim</user>
    <text>&lt;@Jarrod&gt; thank you! Yes, I think something like that is what I needed. I'm still quite new to racket and the docs. Thanks again!</text>
  </message>
  <message conversation_id="571">
    <ts>2018-07-12T19:29:46.000221</ts>
    <user>Alesha</user>
    <text>&lt;@Kim&gt; welcome to the racket community! Yes you may ask those kind of questions here</text>
  </message>
  <message conversation_id="574">
    <ts>2018-07-13T09:17:43.000392</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; I thought of something I haven't used much at all, but you could try?
You could also try using `M-x dabbrev-expand` bound by default to `M-/`. It will do things like search buffers in the same mode (e.g. other racket-mode buffers). This doesn't need racket-run, first.
If you like the results, and you're using company-mode, it can use multiple "backends" (sources). You could try setting company-mode to use _both_ backends: `completion-at-point-function` (which will use racket-mode) _and_ `dabbrev`?  Maybe the order matters?
If you do try that and it works well (or not) for you, let me know?
I could also try experimenting but have to go AFK in a few minutes.</text>
  </message>
  <message conversation_id="574">
    <ts>2018-07-13T09:20:03.000273</ts>
    <user>Bertha</user>
    <text>[ dabbrev is "dumb" text search so you've likely to get false positives ... but idk, maybe they're few and obvious to ignore ]</text>
  </message>
  <message conversation_id="574">
    <ts>2018-07-13T11:01:26.000057</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; I will give that a try.</text>
  </message>
  <message conversation_id="575">
    <ts>2018-07-13T11:22:09.000351</ts>
    <user>Tiesha</user>
    <text>&lt;@Lynna&gt; re: form language &lt;#C9SBH2SDA|racket-school&gt; This would be really useful for CAP ORM (Civil Air Patrol, Operational Risk Management).  I can show you the [many] questions pilots have to answer prior to flight release by a flight release officer.</text>
  </message>
  <message conversation_id="575">
    <ts>2018-07-15T10:21:05.000018</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; For `serialize`, could we change the new `#:relative-directory` argument to be `#:deserializer-relative-directory` to clarify that it adjust only the paths to deserializers? I think it would also make sense to add `#:relative-directory` that affects all serialize paths and to make the default for `#:deserializer-relative-directory` be the `#:relative-directory` argument. I'm happy to make that change if it seems ok to you.
(Sorry that I didn't get to comment more on the PR last week.)</text>
  </message>
  <message conversation_id="575">
    <ts>2018-07-15T11:42:03.000083</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Yup, that works for me. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="576">
    <ts>2018-07-15T12:54:37.000063</ts>
    <user>Franklin</user>
    <text>&lt;@Thaddeus&gt; congrats!</text>
  </message>
  <message conversation_id="577">
    <ts>2018-07-16T01:31:16.000093</ts>
    <user>Creola</user>
    <text>I am a bit lost about the concept of Domain Specific Languages. Conceptually, how is a DSL different than me just using really verbose function names in, say, JS?</text>
  </message>
  <message conversation_id="577">
    <ts>2018-07-16T03:40:17.000244</ts>
    <user>Marnie</user>
    <text>&lt;@Creola&gt; The term "DSL" is not commonly used with a precise technical definition, and lots of other language communities tend to use "DSL" to mean "a library with an API designed so that you can write code using it without really thinking of it as normal &amp;lt;&amp;lt;whatever langauge the library is for&amp;gt;&amp;gt; code". In that sense, a DSL isn't really any different than just using funny-looking names for things.

But in Racket, "DSL" usually means "a `#lang`, a complex macro, or a group of related macros", and macros let you change the rules of the language you're using them in. That's very different from just providing funnily-named functions. Pattern matching systems, class and object systems, and even entire static type systems can be built with Racket DSLs.</text>
  </message>
  <message conversation_id="577">
    <ts>2018-07-16T04:38:17.000027</ts>
    <user>Creola</user>
    <text>&lt;@Marnie&gt; thanks a lot! I still haven’t touched Racket, or any of the Lisps. So I guess I’ll really understand it once I use it</text>
  </message>
  <message conversation_id="578">
    <ts>2018-07-16T09:16:44.000235</ts>
    <user>Monserrate</user>
    <text>&lt;@Monserrate&gt; set the channel topic: Racket — &lt;http://racket-lang.org&gt; — &lt;http://pasterack.org&gt; - Slack invite link: &lt;http://racket-slack.herokuapp.com&gt; - Archives: &lt;http://racket.slackarchive.io/&gt;</text>
  </message>
  <message conversation_id="578">
    <ts>2018-07-16T09:59:28.000097</ts>
    <user>Ezra</user>
    <text>&lt;@Monserrate&gt; &lt;http://racket.slackarchive.io|racket.slackarchive.io&gt; redirects to &lt;http://github.com|github.com&gt;</text>
  </message>
  <message conversation_id="578">
    <ts>2018-07-16T10:00:48.000192</ts>
    <user>Monserrate</user>
    <text>&lt;@Ezra&gt; sigh</text>
  </message>
  <message conversation_id="578">
    <ts>2018-07-16T10:00:57.000449</ts>
    <user>Monserrate</user>
    <text>&lt;@Monserrate&gt; set the channel topic: Racket — &lt;http://racket-lang.org&gt; — &lt;http://pasterack.org&gt; - Slack invite link: &lt;http://racket-slack.herokuapp.com&gt;</text>
  </message>
  <message conversation_id="579">
    <ts>2018-07-16T14:05:10.000295</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Herp derp…looks like we forgot to actually make sure the relative serialized paths were actually readable…oops.</text>
  </message>
  <message conversation_id="579">
    <ts>2018-07-16T14:05:15.000470</ts>
    <user>Odis</user>
    <text>Anyway, this PR fixes that: &lt;https://github.com/racket/racket/pull/2172&gt;</text>
  </message>
  <message conversation_id="579">
    <ts>2018-07-16T14:05:22.000030</ts>
    <user>Odis</user>
    <text>I’ll merge it if that’s okay.</text>
  </message>
  <message conversation_id="580">
    <ts>2018-07-16T14:39:49.000253</ts>
    <user>Gabriele</user>
    <text>I’m trying to understand the racket code here: &lt;https://rosettacode.org/wiki/Chat_server#Racket&gt;

Specifically I’m trying to understand the double parenthesis in `(define ((client i o)) ...)` on line 7.  I assumed that the double parenthesis mean than (client i o) returns a function and when we execute that function it returns an identifier that we want to define. However, Dr Racket doesn’t point to a definition for client somewhere else. 

My best guess now is that the double parenthesis may have something to do with threads since single parenthesis result in a chat server that can only be connected to by a single client. If anyone can explain or point me toward the correct documentation, I’d appreciate it. (I evidently don’t know the right terminology to use a search engine to look for an answer.)</text>
  </message>
  <message conversation_id="580">
    <ts>2018-07-16T14:41:31.000273</ts>
    <user>Franklin</user>
    <text>(define ((foo)) 42) is the same as (define (foo) (lambda () 42))</text>
  </message>
  <message conversation_id="580">
    <ts>2018-07-16T14:42:20.000524</ts>
    <user>Franklin</user>
    <text>(define (foo x y) body) one can think of (foo x y) as an example of an use of foo.</text>
  </message>
  <message conversation_id="580">
    <ts>2018-07-16T14:42:54.000021</ts>
    <user>Franklin</user>
    <text>Similar in `(define ((client i o)) ...)`  the  ((client i o)) shows how to call it.</text>
  </message>
  <message conversation_id="580">
    <ts>2018-07-16T14:43:16.000210</ts>
    <user>Franklin</user>
    <text>Personally I prefer an explicit (lambda () ...)</text>
  </message>
  <message conversation_id="580">
    <ts>2018-07-16T15:12:23.000394</ts>
    <user>Bertha</user>
    <text>&lt;@Franklin&gt; I think I've also seen you do this style, which I like:
```
(define (make-handler suffix)
  (define (handler str)
    (string-append str suffix))
  handler)
```</text>
  </message>
  <message conversation_id="580">
    <ts>2018-07-16T15:14:38.000304</ts>
    <user>Franklin</user>
    <text>I like explicit.</text>
  </message>
  <message conversation_id="581">
    <ts>2018-07-16T15:17:49.000244</ts>
    <user>Bertha</user>
    <text>```
;; What I think some people call the "curried" style.
(define ((make-handler suffix) str)
  (string-append str suffix))

;; I think I see this the most frequently.
;; It slightly bothers me that it mixes styles.
(define (make-handler suffix)
  (λ (str)
    (string-append str suffix)))

;; What I call Indiana University extreme style. :)
;; Very verbose, but demystisfied, no shorthand.
(define make-handler
  (λ (suffix)
    (λ (str)
      (string-append str suffix))))

;; What I think of as Soegaard style only because I first saw it in
;; his code. This has the virtue of being consistent. All intermediate
;; values have names.
(define (make-handler suffix)
  (define (handler str)
    (string-append str suffix))
  handler)

;; Example usage: Any of the above should print "lifted".
(define past-tense (make-handler "ed"))
(past-tense "lift")
```</text>
  </message>
  <message conversation_id="580">
    <ts>2018-07-16T15:21:11.000449</ts>
    <user>Bertha</user>
    <text>Yes, in this silly example you could also do: `(define past-tense (curryr string-append "ed"))`. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="582">
    <ts>2018-07-16T15:31:51.000318</ts>
    <user>Alesha</user>
    <text>Am I the only one who finds it a little annoying to see `define`s inside another `define`?</text>
  </message>
  <message conversation_id="582">
    <ts>2018-07-16T15:33:27.000369</ts>
    <user>Alesha</user>
    <text>I do use internal `define`s if I need to be consistent with the codebase I'm working in but I find myself attracted towards both the Indiana and the common case styles</text>
  </message>
  <message conversation_id="582">
    <ts>2018-07-16T15:34:36.000392</ts>
    <user>Gabriele</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="583">
    <ts>2018-07-16T16:14:34.000112</ts>
    <user>Marnie</user>
    <text>I am a big fan of using defines instead of lets</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:17:39.000112</ts>
    <user>Ezra</user>
    <text>has anyone tried to adjust ASCII rectangle on Windows in DrRacket? In docs it says `C-x r a` but I can't make it work</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:19:26.000351</ts>
    <user>Carrol</user>
    <text>I don’t even have such a thing afaict</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:19:42.000085</ts>
    <user>Ezra</user>
    <text>:grin:</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:19:56.000039</ts>
    <user>Ezra</user>
    <text>lucky you</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:20:48.000205</ts>
    <user>Franklin</user>
    <text>How do we make an ascii rectangle in the first place?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:21:00.000346</ts>
    <user>Ezra</user>
    <text>&lt;https://docs.racket-lang.org/drracket/Keyboard_Shortcuts.html&gt;</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:21:24.000408</ts>
    <user>Ezra</user>
    <text>search for ASCII</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:21:58.000381</ts>
    <user>Franklin</user>
    <text>yup worked here</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:22:07.000191</ts>
    <user>Ezra</user>
    <text>linux?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:22:10.000349</ts>
    <user>Franklin</user>
    <text>mac</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:22:13.000337</ts>
    <user>Ezra</user>
    <text>ok</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:23:05.000016</ts>
    <user>Franklin</user>
    <text>do you on the other hand have move-current-tab-left bound to anything?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:24:45.000326</ts>
    <user>Ezra</user>
    <text>c:s:pageup</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:25:32.000040</ts>
    <user>Ezra</user>
    <text>the problem is that C-x only wants to cut text  and C-s opens save dialog</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:26:26.000086</ts>
    <user>Franklin</user>
    <text>my problem is that the laptop doesn't have a pageup</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:26:39.000029</ts>
    <user>Franklin</user>
    <text>does it move the tab left ?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:26:51.000407</ts>
    <user>Franklin</user>
    <text>or does it just switch tab?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:27:49.000026</ts>
    <user>Ezra</user>
    <text>no win doesn't like sequences and simply opens save dialog when c-s is pressed</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:28:01.000414</ts>
    <user>Ezra</user>
    <text>it doesn't wait for key release</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:30:28.000353</ts>
    <user>Ezra</user>
    <text>I wonder if it shouldn't be considered as a DrRacket bug on Win</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:33:17.000231</ts>
    <user>Ezra</user>
    <text>I was trying to work with 2d syntax but without table support editing these tables is pretty nightmarish</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:34:40.000355</ts>
    <user>Franklin</user>
    <text>time to make custom keybindings</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:36:15.000412</ts>
    <user>Ezra</user>
    <text>it seems like the only option for now</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:37:06.000231</ts>
    <user>Ezra</user>
    <text>but still - would you classify it as a bug?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:38:06.000136</ts>
    <user>Ezra</user>
    <text>after all DrRacket on win seems to be missing some functionality</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:39:36.000090</ts>
    <user>Franklin</user>
    <text>I think it would be a good thing to report it.</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:40:56.000127</ts>
    <user>Ezra</user>
    <text>btw - it is probably related - some time ago I tried &lt;https://docs.racket-lang.org/drracket/Keyboard_Shortcuts.html?q=Sending%20Program%20Fragments%20to%20the%20REPL#%28part._.Sending_.Program_.Fragments_to_the_.R.E.P.L%29&gt;</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:42:00.000006</ts>
    <user>Ezra</user>
    <text>and noticed that this custom keybinding simply blocked C-c as copy (you couldn't copy any text from DrRacket)</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:42:38.000048</ts>
    <user>Ezra</user>
    <text>I wonder if it is only Win problem or this code has similar effect on other OSes?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:44:26.000117</ts>
    <user>Carrol</user>
    <text>&lt;@Franklin&gt; pageup should be fn-up-arrow</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-16T17:45:54.000290</ts>
    <user>Franklin</user>
    <text>&lt;@Carrol&gt; Yes, fn-up will do an pageup, but it doesn't count in c:s:pagegup</text>
  </message>
  <message conversation_id="585">
    <ts>2018-07-16T18:41:25.000023</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Okay to merge? &lt;https://github.com/racket/racket/pull/2172&gt;</text>
  </message>
  <message conversation_id="585">
    <ts>2018-07-17T08:09:16.000230</ts>
    <user>Andreas</user>
    <text>I would like to parse racket code in order to find code matching some templates. What's the best way to go about this? The point here is to check that my code is consistent and remind me of things that I might have forgotten. For example, for `for/vector` I would like to add a note that I should be using the `#:length` keyword, if possible. This in turn means that I cannot have a purely regexp parser. I need to ensure that the `for/vector` I am looking at comes from `racket/base` lang. Any suggestions on how to deal with this?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:11:03.000093</ts>
    <user>Franklin</user>
    <text>Use read-syntax in a loop? And use syntax-parse to analyze each expression?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:12:11.000075</ts>
    <user>Franklin</user>
    <text>Or ... just thinking aloud ... redefine for/vector to log any notes.</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:12:40.000384</ts>
    <user>Franklin</user>
    <text>But how does one redefine it - without actually changing the defintion ... hmm.</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:13:21.000155</ts>
    <user>Franklin</user>
    <text>Maybe one can use the module name resolver ?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:15:50.000115</ts>
    <user>Andreas</user>
    <text>using `read-syntax` makes sense. From the syntax output I should be able to inspect where it comes from. Will give it a go and see.</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:17:09.000069</ts>
    <user>Franklin</user>
    <text>&lt;@Andreas&gt; You'll need to expand the expression first, to get the binding information.</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:20:07.000236</ts>
    <user>Franklin</user>
    <text>Wait - this would be similar to the optimization coach. Maybe you there is something you can reuse?</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:23:03.000342</ts>
    <user>Andreas</user>
    <text>hummm, good idea.</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:23:22.000104</ts>
    <user>Andreas</user>
    <text>You're right: &lt;https://github.com/stamourv/optimization-coach/blob/1b4da0b88ed31ee2e254201eab7c2ccb4b339864/optimization-coach/instrumentation.rkt&gt; has the combination `ready-syntax` and `expand`.</text>
  </message>
  <message conversation_id="584">
    <ts>2018-07-17T08:23:44.000312</ts>
    <user>Andreas</user>
    <text>master link: &lt;https://github.com/stamourv/optimization-coach/blob/master/optimization-coach/instrumentation.rkt&gt;</text>
  </message>
  <message conversation_id="586">
    <ts>2018-07-17T09:13:53.000002</ts>
    <user>Bertha</user>
    <text>Also at RacketCon N years ago &lt;@Marnie&gt; demoed something like this.</text>
  </message>
  <message conversation_id="586">
    <ts>2018-07-17T09:15:24.000254</ts>
    <user>Bertha</user>
    <text>Ah here it is: &lt;https://github.com/jackfirth/syntax-warn&gt;</text>
  </message>
  <message conversation_id="586">
    <ts>2018-07-17T09:16:45.000461</ts>
    <user>Franklin</user>
    <text>&lt;http://docs.racket-lang.org/syntax-warn/index.html?q=syntax-warn&gt;</text>
  </message>
  <message conversation_id="586">
    <ts>2018-07-17T09:20:43.000276</ts>
    <user>Franklin</user>
    <text>&lt;@Marnie&gt; Can this be used in the for/vector example pocmatos mentioned?</text>
  </message>
  <message conversation_id="586">
    <ts>2018-07-17T12:18:52.000158</ts>
    <user>Bertha</user>
    <text>Neat.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T12:46:59.000126</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Is there any way to resolve the ‘self’ module path index?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T12:47:18.000225</ts>
    <user>Odis</user>
    <text>Obviously `(resolve-module-path-index (module-path-index-join #f #f))` results in an error…</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T12:47:53.000078</ts>
    <user>Monserrate</user>
    <text>&lt;@Odis&gt; I think that's a question where you need to back up at least one step</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T12:58:03.000424</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Okay, how about this: “I want to serialize a reference to ‘this’ module, and later (as in within a different VM), expand to the referenced identifier.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T12:58:19.000230</ts>
    <user>Odis</user>
    <text>(Obviously relative to the current module at the time of expansion.)</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T12:58:50.000545</ts>
    <user>Odis</user>
    <text>So by being a ‘this’ reference, it will expand to the identifier in the expanding module.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:00:08.000098</ts>
    <user>Odis</user>
    <text>"</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:32:36.000427</ts>
    <user>Monserrate</user>
    <text>&lt;@Odis&gt; depending on what you mean, there are parts of TR that do things like that</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:32:54.000399</ts>
    <user>Monserrate</user>
    <text>see, for example, the `#%contract-defs-reference` module that TR generates</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:35:15.000013</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Sure, that seems to use `define-runtime-module-path-index`, which, iirc, can only be used at the top/module level, yes?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:36:08.000562</ts>
    <user>Monserrate</user>
    <text>yes, although I don't really see how it would work otherwise -- you can't expand to a lexical identifier from another module</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:37:31.000041</ts>
    <user>Odis</user>
    <text>Fair point.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:38:05.000163</ts>
    <user>Odis</user>
    <text>I’m okay with limiting the definitions to top/module level (in fact, they already are), but the uses need to be lexical.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:40:54.000022</ts>
    <user>Monserrate</user>
    <text>the uses of that are lexical</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:48:19.000444</ts>
    <user>Odis</user>
    <text>OH! It looks like module path indexes actually change when provided and then required into a different module…odd..</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:49:03.000234</ts>
    <user>Odis</user>
    <text>(or at least how they are printed….odd…)</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:53:47.000615</ts>
    <user>Odis</user>
    <text>&lt;@Gaynell&gt; Seems to think this is because of `syntax-module-path-index-shift`, but we can’t seem to find much else about it.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:54:16.000153</ts>
    <user>Monserrate</user>
    <text>I don't think the indexes change</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T13:54:37.000514</ts>
    <user>Monserrate</user>
    <text>the evaluation of `#%variable-reference` produces different things, I think</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T14:01:05.000380</ts>
    <user>Odis</user>
    <text>That would make sense.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:18:49.000481</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Hmm….this still doesn’t seem to properly serialize. For example:</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:19:11.000029</ts>
    <user>Odis</user>
    <text>```
#lang racket

(require racket/runtime-path
         racket/serialize)

(define-runtime-module-path-index x ".")
(serialize x)
```</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:19:36.000404</ts>
    <user>Odis</user>
    <text>’((3) 0 () 0 () () (mpi “.” mpi (p+ #“/Users/leif/test/foo.rkt” . unix) . #f)</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:20:00.000566</ts>
    <user>Odis</user>
    <text>And when I deserialize it, (and resolve it), I still get the absolute path.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:20:33.000318</ts>
    <user>Odis</user>
    <text>Meaning that it would be hard to store it in a file. :disappointed:</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:20:37.000037</ts>
    <user>Monserrate</user>
    <text>that sounds like a different issue than where we started</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:21:50.000328</ts>
    <user>Monserrate</user>
    <text>but I don't understand why that's hard to store in a file</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:22:08.000397</ts>
    <user>Odis</user>
    <text>Its hard because the file could have moved.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:22:41.000221</ts>
    <user>Odis</user>
    <text>So, the original (stepped back) question was: “I want to serialize a reference to ‘this’ module, and later (as in within a different VM), expand to the referenced identifier.“, as such, what I’m imagining is something like:</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:22:57.000200</ts>
    <user>Lynna</user>
    <text>Did you mean to pass `#:relative-directory` to `serialize`?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:23:01.000372</ts>
    <user>Monserrate</user>
    <text>that doesn't seem fixable -- you can't expand to a reference to a file that isn't there any more</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:24:48.000216</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; AH!!! That’s why you wanted to split out `#:relative-directory` and `#:deserialize-relative-directory`! That makes so much more sense now.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:25:50.000083</ts>
    <user>Odis</user>
    <text>(And yes, that does seem to work. Thanks. :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:26:29.000257</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Nah, I don’t want a reference to the same instance of that file, I want a reference to the relative location of that file.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:26:56.000052</ts>
    <user>Odis</user>
    <text>But what &lt;@Lynna&gt; pointed out works. So thanks to both of you. :smile:</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:27:16.000057</ts>
    <user>Monserrate</user>
    <text>right, but "relative location" isn't necessarily going to work in the future either</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:28:53.000357</ts>
    <user>Odis</user>
    <text>Yup, you are correct.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:29:12.000012</ts>
    <user>Odis</user>
    <text>But it does mirror Racket’s existing binding system, which is what I was going for. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="588">
    <ts>2018-07-17T15:35:24.000457</ts>
    <user>Lela</user>
    <text>Hello! I'm experimenting with message passing between processes written in /= languages. Like a "ping-pong" app written in 2 different languages. Is there anything that compares to zeromq for such a task? Thx.</text>
  </message>
  <message conversation_id="589">
    <ts>2018-07-17T15:35:48.000350</ts>
    <user>Louanne</user>
    <text>Hi all, anyone have a handy guide on the preferred way to use bibtex with scribble?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:36:09.000259</ts>
    <user>Louanne</user>
    <text>&lt;https://docs.racket-lang.org/scriblib/bibtex.html&gt; perhaps?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:36:55.000226</ts>
    <user>Franklin</user>
    <text>&lt;@Lela&gt; &lt;http://docs.racket-lang.org/zeromq@zeromq/index.html&gt;</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:38:25.000210</ts>
    <user>Franklin</user>
    <text>&lt;@Louanne&gt; Also if you have an existing bibtex file: &lt;http://matt.might.net/articles/parsing-bibtex/&gt;</text>
  </message>
  <message conversation_id="588">
    <ts>2018-07-17T15:39:01.000255</ts>
    <user>Lela</user>
    <text>&lt;@Franklin&gt; Thx ! But is there something else that compares to that in the Racket world? w/o ZeroMQ, how would a racket program send and receive messages with other processes? In other words, is ZeroMQ a necessary dependency or not?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:39:43.000124</ts>
    <user>Monserrate</user>
    <text>&lt;@Lela&gt; if you want something super simple, I'd just use a pipe and `read`/`write`</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:40:04.000075</ts>
    <user>Monserrate</user>
    <text>obviously 0MQ is both more heavyweight and more featureful than that</text>
  </message>
  <message conversation_id="589">
    <ts>2018-07-17T15:41:04.000337</ts>
    <user>Louanne</user>
    <text>hmm… this lets me know how to parse, but doesn’t really let me just use bibtex as a database without a racket-based representation of it, I think?</text>
  </message>
  <message conversation_id="589">
    <ts>2018-07-17T15:41:29.000441</ts>
    <user>Andreas</user>
    <text>How can I get `read-syntax` to read a normal racket file without chocking on `#lang racket` ?</text>
  </message>
  <message conversation_id="589">
    <ts>2018-07-17T15:41:55.000109</ts>
    <user>Andreas</user>
    <text>Is there an automated way to transform it into a module, without the `#lang` line?</text>
  </message>
  <message conversation_id="588">
    <ts>2018-07-17T15:42:22.000286</ts>
    <user>Lela</user>
    <text>&lt;@Monserrate&gt; OK, thx!</text>
  </message>
  <message conversation_id="589">
    <ts>2018-07-17T15:42:24.000130</ts>
    <user>Franklin</user>
    <text>&lt;@Andreas&gt; read-language can handle the first line</text>
  </message>
  <message conversation_id="589">
    <ts>2018-07-17T15:45:33.000172</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; interesting, it does. The description for it looks menacing. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:45:59.000463</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; you should just call `read-syntax`</text>
  </message>
  <message conversation_id="589">
    <ts>2018-07-17T15:46:11.000296</ts>
    <user>Monserrate</user>
    <text>that's how you transform it into a module</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:46:28.000109</ts>
    <user>Andreas</user>
    <text>read syntax is chocking on it. `read: #lang not enabled in the current context`</text>
  </message>
  <message conversation_id="589">
    <ts>2018-07-17T15:47:05.000268</ts>
    <user>Monserrate</user>
    <text>right, you should enable that -- see &lt;http://docs.racket-lang.org/reference/Reading.html?q=enable-lang#%28def._%28%28quote._~23~25kernel%29._read-accept-lang%29%29&gt;</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:47:31.000394</ts>
    <user>Monserrate</user>
    <text>you have to enable it because it potentially executes arbitrary code</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:49:28.000153</ts>
    <user>Andreas</user>
    <text>ah, yes, I needed `read-accept-lang` and `read-accept-reader`. Thanks</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T15:57:39.000316</ts>
    <user>Andreas</user>
    <text>I am reading source with `read-syntax` and then using `expand-syntax` on the result parameterzied wtih `make-base-namespace`. However, I get `module: unbound identifier;
 also, no #%app syntax transformer is bound in: module`</text>
  </message>
  <message conversation_id="589">
    <ts>2018-07-17T15:58:02.000492</ts>
    <user>Andreas</user>
    <text>Basically I have
```
(define source-syntax
  (with-input-from-file file
    (lambda () (read-syntax file))
    #:mode 'text))

(define expanded-syntax
  (parameterize ([current-namespace (make-base-namespace)])
    (expand-syntax source-syntax)))
```</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:00:55.000129</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; You could use a namespace that has `module` bound, but I recommend adjusting the result of `read-syntax` with `check-module-form`, instead.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:06:14.000237</ts>
    <user>Andreas</user>
    <text>Thanks. `(expand (check-module-form ...` works.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:26:12.000153</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Oh wait, never mind, that won’t properly solve it. While it will handle relative module movements, it won’t handle ‘self’ if ‘self’ is a renamed file. For example:</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:26:40.000268</ts>
    <user>Odis</user>
    <text>```
#lang racket ;; /Users/leif/test/renamed.rkt

(require racket/serialize
         racket/runtime-path)

(define-runtime-module-path-index here ".")
(serialize here
           #:relative-directory (current-directory))
```</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:26:53.000493</ts>
    <user>Odis</user>
    <text>Will evaluate to: `'((4) 0 () 0 () () (mpi "." mpi (p* #"renamed.rkt") . #f))`</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:27:34.000610</ts>
    <user>Odis</user>
    <text>But if I store that into the current file, rename the file, and then try to deserialize it, I’ll still get the old module-path-index.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:28:08.000457</ts>
    <user>Odis</user>
    <text>(Which would be what you expect for a different relative file, but not for a ‘self’ reference.)</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:29:05.000083</ts>
    <user>Odis</user>
    <text>I guess it boils down to, ’is there any way to distinguish a relative module path from a ‘self’ module path.)</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:31:00.000057</ts>
    <user>Odis</user>
    <text>Oh wait, I guess `#:relative-directory` doesn’t actually need to be a directory at all, just any path:

```
(define-runtime-module-path-index here ".")
(serialize here
           #:relative-directory (build-path (current-directory) "renamed.rkt"))
```</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:31:27.000434</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; This seems like a pretty good indicator we should actually make the keywords be `#:relative-path` and `#:deserialize-relative-path`, thoughts?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:33:56.000237</ts>
    <user>Lynna</user>
    <text>I don't think that will work in general. "&amp;lt;dir&amp;gt;/x.rkt" is not "../x.rkt" relative to "&amp;lt;dir&amp;gt;/y.rkt".</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:34:29.000027</ts>
    <user>Odis</user>
    <text>Mmm…good point. :disappointed:</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:35:14.000369</ts>
    <user>Lynna</user>
    <text>It seems possible that you want a hook to replace module reference in `serialize` to complement the hook to replace module references in `deserialize`.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:37:11.000253</ts>
    <user>Odis</user>
    <text>Possibly Are you referring to the `dir` argument in `make-serialize-info`?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:37:22.000020</ts>
    <user>Odis</user>
    <text>(Or possible the `deserialize-id` argument?)</text>
  </message>
  <message conversation_id="590">
    <ts>2018-07-17T16:43:21.000262</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; &lt;@Franklin&gt; to get syntax warnings about `for/vector` you could write your own `for/vector` macro that just adds warnings if needed while expanding to the regular `for/vector`. You'd have to make sure you use your wrapper macro everywhere instead of the regular one though.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:44:21.000067</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; I want an external tool that can be extended and used across software that you might not have control of.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:52:17.000112</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Thinking about it a bit more, should `#:relative-directory` also refer to directories that are `..` from the one you gave?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:52:25.000231</ts>
    <user>Odis</user>
    <text>(And not only subdirectories.)</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:55:41.000190</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; No when a single dir is given. The pair form of relative directories lets you pick an enclosing directory whose contents will be recorded as relative.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T16:56:07.000169</ts>
    <user>Lynna</user>
    <text>For deserialize, I mean `deserialize-module-guard`.</text>
  </message>
  <message conversation_id="590">
    <ts>2018-07-17T17:05:04.000475</ts>
    <user>Franklin</user>
    <text>&lt;@Marnie&gt; thanks for the explanation</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T17:13:15.000079</ts>
    <user>Odis</user>
    <text>Oh, you just mean a parameter like `serialize-module-guard`, which gets applied to any `dynamic-require` type of path that gets written into the serialize data? If so that would probably work.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T17:15:06.000031</ts>
    <user>Odis</user>
    <text>So, then something like this should maybe work in general?:

```
(define-runtime-module-path-index here ".")

(serialize here
           #:relative-directory (cons (variable-reference-&amp;gt;module-source (#%variable-reference))
                                      (build-path "/")))
```</text>
  </message>
  <message conversation_id="590">
    <ts>2018-07-17T17:18:07.000320</ts>
    <user>Marnie</user>
    <text>(cc &lt;@Franklin&gt;) in my experience (mostly via Google's tooling around large-scale refactorings and code cleanups across their monorepo) tools that find problems in code are far less useful when they're external to the code</text>
  </message>
  <message conversation_id="590">
    <ts>2018-07-17T17:30:25.000445</ts>
    <user>Franklin</user>
    <text>Good point.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T18:39:48.000138</ts>
    <user>Lynna</user>
    <text>Well, you really can't use a file path (like the result of `variable-reference-&amp;gt;module-source`) where a directory path is expected for determining relative paths. Few of our existing tools support file-relative instead of directory-relative references, although I guess you could extend `serialize` and `deserialize` further.

Also, beware that "/" isn't an absolute path on Windows. The idea of making all paths relative can't work on Windows, since there can be any number of roots.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T19:20:13.000166</ts>
    <user>Odis</user>
    <text>Acknowledged.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T19:20:45.000197</ts>
    <user>Odis</user>
    <text>Also, when you say `/` can’t be an absolute path on windows, do you mean it can’t be a complete path, or it can’t be a complete path as well as an absolute path?</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T19:21:11.000103</ts>
    <user>Odis</user>
    <text>(I thought that Racket’s definition of an absolute path did not contain the drive name for windows, and the complete path was for that. But maybe I’m mistaken?)</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-17T19:26:57.000109</ts>
    <user>Marnie</user>
    <text>&lt;@Lynna&gt; &lt;@Odis&gt; so I've been following the serialization module paths discussion and wondering something: would it make sense for module paths to be URIs? that's a hypothetical I've been curious about (I don't mean to distract from the actual problems you're both trying to solve right now, and "that's nonsense" is an acceptable response)</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-18T09:50:29.000076</ts>
    <user>Lynna</user>
    <text>&lt;@Marnie&gt; That sounds plausible, but not sure what facet of URIs you have in mind. (My initial reaction is actually: limiting to just module paths plus filesystem paths is bad enough already. :slightly_smiling_face: ) Requiring everything to be expressed as universal references, instead of relative as Leif is trying, certainly would be simpler – but also less convenient and flexible.</text>
  </message>
  <message conversation_id="587">
    <ts>2018-07-18T09:54:59.000611</ts>
    <user>Catrice</user>
    <text>Fwiw, Pyret has taken the uri approach. Local filesystem files have a file: protocol, built-in modules get a builtin: protocol, and files from Google drive get a shared-gdrive: or my-gdrive: protocol as needed. The local files are canonicalized into absolute paths in their uris. For us at least, having multiple protocols gave us a fairly uniform interface for locating code given some module name or reference.</text>
  </message>
  <message conversation_id="591">
    <ts>2018-07-18T17:51:50.000013</ts>
    <user>Carrol</user>
    <text>I have just written some code to generate a large sexp representing some static code analysis. I’d like to visualize it. Is there a quick &amp;amp; dirty way to go from sexp thingies to DOT output?</text>
  </message>
  <message conversation_id="591">
    <ts>2018-07-18T17:52:18.000052</ts>
    <user>Carrol</user>
    <text>(or something else—I’m not stuck on graphviz)</text>
  </message>
  <message conversation_id="591">
    <ts>2018-07-18T17:56:24.000306</ts>
    <user>Carrol</user>
    <text>I have a list of structs w/ lots of cross references wired up (verified with `print-graph` and `pretty-print`)… I found the `graphviz` call in the graph module, but it looks like I need to implement ~20 methods per struct or something?</text>
  </message>
  <message conversation_id="591">
    <ts>2018-07-19T11:40:54.000143</ts>
    <user>Carlyn</user>
    <text>&lt;@Carrol&gt; Rather than trying to implement `gen:graph` on your own data, could you not just convert your data to one of the `graph` library’s built-in graphs for the purpose of calling `graphviz`?</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T11:44:56.000278</ts>
    <user>Franklin</user>
    <text>Is struct-&amp;gt;vector helpful here?</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:14:39.000150</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; to avoid the letter-boxing, I think you need some combination of `-a`, `-n`, `-z`, and `-r`</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:19:28.000174</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; thanks, `slideshow -anzrx` seems to have done the trick</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:19:50.000331</ts>
    <user>Monserrate</user>
    <text>maybe there should be an option for that</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:20:08.000365</ts>
    <user>Monserrate</user>
    <text>also it should be the default because i never want the other way</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:28:53.000554</ts>
    <user>Franklin</user>
    <text>This program works:  #lang racket/base (for/vector ([x (in-list '(a b c))]) x)</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:29:09.000102</ts>
    <user>Franklin</user>
    <text>But 
(define base-ns (module-&amp;gt;namespace 'racket/base))
  (eval '(for/vector ([x (in-list '(a b c))]) x) base-ns)</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:29:34.000427</ts>
    <user>Franklin</user>
    <text>../../Applications/Racket v6.12/collects/racket/private/kw.rkt:979:25: for/vector: undefined;
 cannot reference an identifier before its definition</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:39:43.000132</ts>
    <user>Carlyn</user>
    <text>&lt;@Franklin&gt; I can’t reproduce that behavior. Your second program works for me on both Racket 6.12 and Racket 7.</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:44:55.000188</ts>
    <user>Franklin</user>
    <text>Also in the repl? (6.12)</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:48:25.000371</ts>
    <user>Hester</user>
    <text>&lt;@Franklin&gt; in the repl:

```
~ &amp;gt; racket
Welcome to Racket v6.12.
&amp;gt; (define base-ns (module-&amp;gt;namespace 'racket/base))
&amp;gt; (eval '(for/vector ([x (in-list '(a b c))]) x) base-ns)
'#(a b c)
&amp;gt;
```</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:51:59.000348</ts>
    <user>Franklin</user>
    <text>&lt;@Carlyn&gt; &lt;@Hester&gt; thanks - I am playing around with 
    (namespace-set-variable-value! 'for/vector hint-for/vector #f base-ns)
i.e. replacing the value for for/vector.   So I must have succeeded ... I guess I'll have to restart DrRacket to find out.</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T14:55:39.000210</ts>
    <user>Franklin</user>
    <text>Yep. Works fine after a restart. Can't remember the last time where doing something in one tab in DrRacket affected something in another tab.</text>
  </message>
  <message conversation_id="593">
    <ts>2018-07-19T15:03:08.000469</ts>
    <user>Lynna</user>
    <text>DrRacket really shouldn't let you do that, but we never took the plunge on having DrRacket set the code inspector (which would have prevented it).</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T15:03:29.000487</ts>
    <user>Ezra</user>
    <text>&lt;@Franklin&gt; did you by any chance install files-viewer in DrRacket</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T15:04:03.000355</ts>
    <user>Ezra</user>
    <text>I am asking because it happened to me once after running this plugin - still trying to replicate though</text>
  </message>
  <message conversation_id="593">
    <ts>2018-07-19T15:04:10.000497</ts>
    <user>Ezra</user>
    <text>might have been just a fluke</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T15:04:18.000118</ts>
    <user>Franklin</user>
    <text>&lt;@Ezra&gt;  not yet</text>
  </message>
  <message conversation_id="593">
    <ts>2018-07-19T15:04:52.000120</ts>
    <user>Ezra</user>
    <text>ok, never mind then</text>
  </message>
  <message conversation_id="592">
    <ts>2018-07-19T15:05:06.000337</ts>
    <user>Franklin</user>
    <text>on my todo</text>
  </message>
  <message conversation_id="593">
    <ts>2018-07-19T15:12:20.000366</ts>
    <user>Bertha</user>
    <text>I have a commit (not yet merged) for racket-mode: &lt;https://github.com/greghendershott/racket-mode/commit/8a74c8e06d6da8ca37626361ab7061c2af7f4c25&gt;
Does anyone have any opinions/ideas/suggestions?
(I mean about the commit message, the packaging pros and cons. Although if you have Elisp comments that's fine, too :smile:.)</text>
  </message>
  <message conversation_id="594">
    <ts>2018-07-19T17:01:31.000128</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I’ve been discussing with &lt;@Setsuko&gt; about trying to get a better understanding for why/when `syntax-shift-phase-level` is relevant. One area I’ve realized I don’t really understand is how scopes and phases interact across modules, especially since the sets-of-scopes paper does not deal with modules.

I _think_ understand that, within a module, there is both a phase-spanning module scope and a “multi-scope” that represents an infinite set of scopes, with one for each phase. I also believe I understand how this interacts with binding lookup and `syntax-shift-phase-level`. What I definitely do _not_ understand is what happens to the binding table when a module is imported at multiple phases.

If I write `(module a racket/base (define x #f))`, then `(require 'a (for-syntax 'a))`, then is the binding for `x` added to the binding table twice, once for each instantiation? If so, how are these distinguished? Alternatively, is there only one binding, with the same phase-spanning scope and the same multi-scope, simply distinguished by some notion of a “current phase level” used at binding lookup time?</text>
  </message>
  <message conversation_id="594">
    <ts>2018-07-19T17:05:25.000493</ts>
    <user>Lynna</user>
    <text>In that case, bindings are added twice: once using the phase-0 scope in the enclosing module's multi-scope, and once using the phase-1 scope in the enclosing module's multi-scope</text>
  </message>
  <message conversation_id="594">
    <ts>2018-07-19T17:07:51.000228</ts>
    <user>Lynna</user>
    <text>Using `syntax-shift-phase-level` is rare, but it happens internally when a `module` form appears under a `begin-for-syntax`, since the module body is always handled at phase level 0</text>
  </message>
  <message conversation_id="594">
    <ts>2018-07-19T17:20:08.000306</ts>
    <user>Carlyn</user>
    <text>So, in general, when a binding is added to the binding table, are multi-scopes “simplified” to the normal scopes associated with the “current phase”, for some meaning of current phase?</text>
  </message>
  <message conversation_id="594">
    <ts>2018-07-19T18:06:22.000200</ts>
    <user>Lynna</user>
    <text>Yes: a set of multi-scopes plus a set of scopes is turned into just a set of scopes by extracting the phase-specific scope from each multi-scope; `scope-set-at-fallback` does that</text>
  </message>
  <message conversation_id="595">
    <ts>2018-07-19T18:08:55.000090</ts>
    <user>Priscilla</user>
    <text>This seems fine. The risk of version skew is high, so the default should be to keep things in sync. It’s not clear to me that _not_ doing that is worth it at all, even as a user option.</text>
  </message>
  <message conversation_id="594">
    <ts>2018-07-19T19:03:44.000003</ts>
    <user>Carlyn</user>
    <text>Okay, thanks! I think that clears up my confusion, then.</text>
  </message>
  <message conversation_id="596">
    <ts>2018-07-19T19:26:01.000165</ts>
    <user>Robert</user>
    <text>Where is the source for core Racket documentation? Specifically I am looking for the Scribble files for "Syntax: Meta-Programming Helpers".</text>
  </message>
  <message conversation_id="596">
    <ts>2018-07-19T19:30:15.000189</ts>
    <user>Lynna</user>
    <text>You can click the title to get an idea: `'(lib "syntax/scribblings/syntax.scrbl")`. That leaves you with more search steps, though, to find &lt;https://github.com/racket/racket/blob/master/pkgs/racket-doc/syntax/scribblings/syntax.scrbl&gt;</text>
  </message>
  <message conversation_id="596">
    <ts>2018-07-19T19:45:44.000207</ts>
    <user>Robert</user>
    <text>&lt;@Lynna&gt; Thanks!</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-19T21:23:56.000078</ts>
    <user>Sunday</user>
    <text>I'm trying to `write` and `read` back a path value, but getting a bad syntax because of `#&amp;lt;`, is there a certain reader parameter that I need to set to read back that path value?</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-19T21:24:24.000110</ts>
    <user>Sunday</user>
    <text>Like for instance : `(let ((d (open-output-bytes))) (begin (write (build-path "/home/racket") d) (read (open-input-bytes (get-output-bytes d)))))`</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-19T21:30:52.000036</ts>
    <user>Carlyn</user>
    <text>&lt;@Sunday&gt; Paths are not readable. More generally, `write` and `read` are not a good choice for general-purpose serialization. They can, however, be used in combination with `racket/serialize` to serialize other kinds of values, including paths.</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-19T22:18:23.000037</ts>
    <user>Monserrate</user>
    <text>&lt;@Sunday&gt; in this case, you're serializing something that's not an arbitrary racket value, so you'll have to come up with your own serialization</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-19T22:23:45.000191</ts>
    <user>Sunday</user>
    <text>Thanks &lt;@Carlyn&gt;! I asked about the read/write because I'm making Pycket to create and use its own `.zo` files and I'm basically using Racket's `compile-file` to do that (Pycket bootstraps Racket through the expander linklet, so it's really Racket's compile-file). The problem is when I run that on `qq-and-or.rkt` for instance, it generates a bunch of `srcloc`s which has paths in it and Pycket is having hard time reading them back to path objects using (again Racket's) `read`.</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-19T22:24:15.000079</ts>
    <user>Sunday</user>
    <text>&lt;@Monserrate&gt; That's what I figured, doing exactly that now :slightly_smiling_face:</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-19T22:29:06.000023</ts>
    <user>Monserrate</user>
    <text>&lt;@Sunday&gt; are those struct values with a custom-write?</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-19T22:43:03.000012</ts>
    <user>Sunday</user>
    <text>&lt;@Monserrate&gt; that's a good point, though I'm not sure yet if they are</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-20T09:51:50.000107</ts>
    <user>Lynna</user>
    <text>&lt;@Sunday&gt; I'm not clear on what you're doing or whether you still need advice. But `compile-file` is going to `write` the result of `compile-linklet`, so the result of `compile-linklet` [from the linklet layer] is the value whose output you want to configure. As long as you configure it to print with a `#~` prefix, the `read-compiled-linklet` function [from the linklet layer] will be called (after the `#~` is consumed) to read it back in. See "cs/linklet/write.ss" for an example, where `write-linklet-bundle` and `write-linklet-directory` are installed as the writer functions for the respective structures.</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-20T09:55:11.000284</ts>
    <user>Lynna</user>
    <text>The Racket-on-Chez implementation of bundle and directory writing uses Chez Scheme's fasl printer and reader. The traditional Racket implementation uses a fasl printer and reader that are built into the C layer. Maybe you already have a suitable fasl printer and reader, or maybe `racket/fasl` will be useful.</text>
  </message>
  <message conversation_id="597">
    <ts>2018-07-20T12:05:12.000431</ts>
    <user>Sunday</user>
    <text>Thanks &lt;@Lynna&gt;! I think I got it for now. The issue was, Pycket didn't have a `write` before, so I implemented `write` and `read-compiled-linklet` simultaneously (still going), to generate and use `.zo` files (mainly for the Racket libs) in Pycket. The goal is to load Racket libs faster. It's at the point where we can compile Racket libs and load the `.zo` files. I started with `stx.rkt` and it works fine, but `qq-and-or.rkt` threw me off with the path objects (in srcloc structs), since `(write (build-path "h"))` for example is supposed to write `#&amp;lt;path:h&amp;gt;` (Racket writes it like that) but the `read` I'm using in `read-compiled-linklet` couldn't read it.</text>
  </message>
  <message conversation_id="598">
    <ts>2018-07-20T13:15:14.000404</ts>
    <user>Alesha</user>
    <text>Is there a way to get a list of exported identifiers for a given module? In my use case, I'm building a simple configuration system where I configure parameters using values given in a config file. I'd like to keep all of my parameters in one module and `require` that module in another module that handles the job of reading the config file and binding each parameter. I want to keep this as fuss-free as possible so I'd like the configuring module to automatically discover all parameters in an imported module.</text>
  </message>
  <message conversation_id="598">
    <ts>2018-07-20T13:16:00.000317</ts>
    <user>Alesha</user>
    <text>My idea is to simply find all imported identifiers, iterate over them to identify which ones are parameters and proceed to configuring them</text>
  </message>
  <message conversation_id="598">
    <ts>2018-07-20T13:18:56.000165</ts>
    <user>Alesha</user>
    <text>So far the nearest thing I can find which may do what I need is `namespace-mapped-symbols` but not sure if that's the best way to accomplish my goal</text>
  </message>
  <message conversation_id="598">
    <ts>2018-07-20T13:25:17.000038</ts>
    <user>Carlyn</user>
    <text>&lt;@Alesha&gt; I think `module-&amp;gt;exports` is what you probably want?</text>
  </message>
  <message conversation_id="598">
    <ts>2018-07-20T13:27:14.000038</ts>
    <user>Alesha</user>
    <text>yes it seems to do the job, thank you &lt;@Carlyn&gt;</text>
  </message>
  <message conversation_id="599">
    <ts>2018-07-20T17:00:09.000316</ts>
    <user>Odis</user>
    <text>&lt;@Willette&gt; Just in case you missed it: &lt;https://github.com/racket/racket/pull/2178&gt;</text>
  </message>
  <message conversation_id="599">
    <ts>2018-07-20T17:01:22.000201</ts>
    <user>Odis</user>
    <text>(Mostly because I miss a lot of github PRs. :confused: )</text>
  </message>
  <message conversation_id="599">
    <ts>2018-07-20T17:09:04.000131</ts>
    <user>Lynna</user>
    <text>I'll make a variant that applies to the release branch (which doesn't have "private/relative-path.rkt"). I think it will be the length check plus the test cases.</text>
  </message>
  <message conversation_id="599">
    <ts>2018-07-20T17:12:20.000380</ts>
    <user>Odis</user>
    <text>Good point &lt;@Lynna&gt;</text>
  </message>
  <message conversation_id="599">
    <ts>2018-07-20T17:17:38.000114</ts>
    <user>Lynna</user>
    <text>Current candidate: &lt;https://github.com/mflatt/racket/tree/faslpath&gt;</text>
  </message>
  <message conversation_id="600">
    <ts>2018-07-20T17:53:14.000036</ts>
    <user>Claud</user>
    <text>Is there a way to apply the transformation that `open-input-file` with a `#:mode` of `'text` does for file-stream ports to pipes (in the sense of `make-pipe`)? It looks like `reencode-input-port` does almost the same thing, but not quite.</text>
  </message>
  <message conversation_id="599">
    <ts>2018-07-20T18:03:05.000325</ts>
    <user>Willette</user>
    <text>&lt;@Odis&gt;: Yes, I'm aware. I'll cherry-pick it.</text>
  </message>
  <message conversation_id="600">
    <ts>2018-07-22T01:15:23.000010</ts>
    <user>Marnie</user>
    <text>I seem to remember reading somewhere in racket docs that singular names are preferred over plural names for modules and packages, but I'm not sure where that's documented or if it's even a real recommendation at all.</text>
  </message>
  <message conversation_id="600">
    <ts>2018-07-22T01:15:59.000002</ts>
    <user>Marnie</user>
    <text>(context: `racket/math/constants` name and &lt;https://github.com/racket/racket/pull/2180&gt; )</text>
  </message>
  <message conversation_id="600">
    <ts>2018-07-22T04:49:35.000004</ts>
    <user>Claud</user>
    <text>&lt;@Marnie&gt; You're thinking of &lt;http://docs.racket-lang.org/style/Choosing_the_Right_Construct.html#%28part._.Plural%29&gt;, which says "Avoid plural when naming collections and libraries. Use `racket/contract` and `data/heap`, not `racket/contracts` or `data/heaps`." Though I think `racket/math/constants` is a natural choice: it provides several distinct mathematical constants, whereas `data/heap` provides a general heap data structure.</text>
  </message>
  <message conversation_id="600">
    <ts>2018-07-22T12:33:22.000001</ts>
    <user>Helena</user>
    <text>ah! that's a good point. I don't like `constants` anymore</text>
  </message>
  <message conversation_id="601">
    <ts>2018-07-22T13:33:57.000056</ts>
    <user>Bertha</user>
    <text>I have this dilemma when it comes to SQL table names -- singular or plural?
`select blah from users` reads naturally.  [As does `(select blah #:from users)` -- thanks &lt;@Eugena&gt; !]
On the other hand, a table is obviously plural, so do I type "s" or weird English pluralizations _everywhere_ for no dang reason?
On the third hand, `USER` is a reserved word so for singular now I need quotes.
So I just go have a good cry about how naming things is hard.</text>
  </message>
  <message conversation_id="602">
    <ts>2018-07-22T13:55:41.000022</ts>
    <user>Carlyn</user>
    <text>Then there’s Rails, which will attempt to automatically pluralize your Ruby class names to generate database table names. :)</text>
  </message>
  <message conversation_id="601">
    <ts>2018-07-22T14:14:40.000016</ts>
    <user>Bertha</user>
    <text>Ruby on Rail datumbase :slightly_smiling_face:</text>
  </message>
  <message conversation_id="600">
    <ts>2018-07-22T14:26:52.000015</ts>
    <user>Alesha</user>
    <text>Flip a coin :slightly_smiling_face: that’ll help</text>
  </message>
  <message conversation_id="601">
    <ts>2018-07-22T14:31:03.000070</ts>
    <user>Alesha</user>
    <text>For what it’s worth, I go with singular since I see it as a natural carry over from set theory where sets are traditionally written as singular. So yeah basically I’m delegating my reason to historical underpinnings of set theory.</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T19:19:10.000015</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Is there any way to add a module’s scope to a syntax object without actually requiring the module? Something like a `syntax-local-lift-require/declare`.</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T19:19:54.000047</ts>
    <user>Odis</user>
    <text>Basically, I want to be able to do something like this:

```
#lang scratch ; blah.rkt

(define f 5)

(define-syntax-parser g
  [(_)
   (syntax-local-lift-require
    "bla.rkt"
    (datum-&amp;gt;syntax #f 'f))])

(g)
```</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T19:20:43.000014</ts>
    <user>Odis</user>
    <text>(Obviously this will give a circular require error, but all I realy care about is the `bla.rkt` scope.)</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T19:22:22.000115</ts>
    <user>Odis</user>
    <text>(Also I know in this particular case it will have the module scope already.)</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T20:05:20.000023</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Although I guess a little mor precisely I’m looking to make a macro like this:

```
(define-syntax-parser g
  [(_ mod name)
   (syntax-local-lift-require
    (syntax-&amp;gt;datum #'mod)
    (datum-&amp;gt;syntax #f (syntax-&amp;gt;datum #'name)))])
```</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T21:05:25.000097</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; Terminology clarification: `require` doesn't get a module's scope; it adds bindings to some scope – either the scope of a module body that uses `require` or a fresh scope in the case of `syntax-local-lift-require` — based on a module's exports. 
I'm not sure what you have in mind by "without actually requiring" the module. Are you trying to avoid instantiation, in which case a `for-label` import might be the way to go? Or are you just trying to inspect the exports, in which case `module-&amp;gt;exports` could be the right tool?</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T21:08:28.000061</ts>
    <user>Odis</user>
    <text>Basically, I’ve serialized a pair of a module path index (which I can resolve to a module path), and a symbol. I want to create and call an identifier from this pair.</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T21:08:50.000001</ts>
    <user>Odis</user>
    <text>I would have serialized the identifier directly, but obviously that won’t work. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T21:09:57.000088</ts>
    <user>Odis</user>
    <text>I could normally just use `syntax-local-lift-require` to turn the module path and symbol into an identifier. But that is a problem when the module path it points to is itself.</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T21:10:04.000035</ts>
    <user>Odis</user>
    <text>Does that make a little more sense?</text>
  </message>
  <message conversation_id="604">
    <ts>2018-07-22T21:33:39.000002</ts>
    <user>Lynna</user>
    <text>I may guess wrong at what "call an identifier" means, but why is `syntax-local-lift-require` not what you want?</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T21:36:29.000042</ts>
    <user>Odis</user>
    <text>Oh…err…I mean, expand to an identifier.</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T21:36:45.000104</ts>
    <user>Odis</user>
    <text>And `syntax-local-lift-require` errors when I have something like this:</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T21:39:12.000124</ts>
    <user>Odis</user>
    <text>```
#lang racket ;; loop.rkt

(require syntax/parse/define)
(provide x)
(define x 5)

(define-syntax-parser exp
  [(_ mod sym)
   (syntax-local-lift-require
    (syntax-&amp;gt;datum #'mod)
    (datum-&amp;gt;syntax #f (syntax-&amp;gt;datum #'sym)))])

(exp "loop.rkt" x)
```</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-22T21:39:43.000124</ts>
    <user>Odis</user>
    <text>Understandably gives this error:
```
. . ../racket/racket/collects/syntax/wrap-modbeg.rkt:46:4: standard-module-name-resolver: cycle in loading
  at path: /Users/leif/test/loop.rkt
  paths:
   /Users/leif/test/loop.rkt
```</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-23T09:10:21.000087</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; It seems like you either need to refer to something in the current module (in which case you can just give the module's context to the identifier) or from a module that the current one can and should import via `syntax-local-lift-require` to make the identifier available. Maybe it all goes back to the problem of identifying the current module somehow at compile time; or maybe the problem is that you need to replicate the same strategy that the macro system implements with MPIs, where everything is relative to a "self" MPI (so the "self" case can be detected).
It's possible to synthesize any kind of binding that you want by working in a different namespace: adjust the module name resolver while evaluating a "dummy" module, `require` the module into an otherwise empty namespace to set up a binding, then add that namespace's scope to an identifier with `namespace-syntax-introduce`. That's an extreme solution, though.</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-23T10:53:04.000159</ts>
    <user>Odis</user>
    <text>I mean, just checking for self (even if I could) is not quite enough, because the pseudo-identifier could also (in principle) could point to a module that requires ‘self’. I think you’re right that replicating the MPI system is probably the way to go here. Although I certainly agree that that is a bit of an extreme solution. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-23T11:19:53.000570</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; ^</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-23T13:26:54.000305</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; That ‘seems’ to work: &lt;https://gist.github.com/LeifAndersen/d35d386ddb1a1b25d7b22d97ab6287e8&gt;</text>
  </message>
  <message conversation_id="603">
    <ts>2018-07-23T13:27:08.000107</ts>
    <user>Odis</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:39:06.000138</ts>
    <user>Ruthe</user>
    <text>Hello, everyone! New to Racket (about 2 weeks), long-time programmer (mostly python)</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:39:31.000036</ts>
    <user>Franklin</user>
    <text>Hi!</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:40:35.000275</ts>
    <user>Ruthe</user>
    <text>Hey :slightly_smiling_face:</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:41:52.000265</ts>
    <user>Ruthe</user>
    <text>Apart from being a LISP dialect I became interested because Racket has some great plotting and image libraries as well as a nice PDE (DrRacket). I was wondering if I could get some help figuring out what would be the best way to go about the following</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:42:42.000223</ts>
    <user>Ruthe</user>
    <text>I am working on a dynamic land use model, I initially built it on NetLogo and wanted to make some sort of port of it for Racket</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:43:43.000061</ts>
    <user>Ruthe</user>
    <text>My first goal is plotting the land use, each cell/patch has a number value and I want it to be displayed with a certain color</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:43:58.000283</ts>
    <user>Ruthe</user>
    <text>would be nice to have something reasonably fast to render</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:45:03.000331</ts>
    <user>Ruthe</user>
    <text>From what I've seen the plot library might not be the best option (I started implementing something like this in python with matplotlib), guessing the image libraries would be the best approach</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:45:20.000057</ts>
    <user>Ruthe</user>
    <text>is there a simple function that just converts a matrix of these land use values</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:45:29.000224</ts>
    <user>Ruthe</user>
    <text>into an image, mapping the numbers to colors?</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:45:42.000155</ts>
    <user>Franklin</user>
    <text>How large is the matrix?</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:45:59.000167</ts>
    <user>Ruthe</user>
    <text>upper limit about 1000 x 1000</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:46:11.000239</ts>
    <user>Ruthe</user>
    <text>but closer to 800 x 800</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:47:24.000008</ts>
    <user>Franklin</user>
    <text>One option is to use the draw library and simply draw squares on a canvas.</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:47:41.000289</ts>
    <user>Franklin</user>
    <text>But maybe you can use ... what they called ...</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:50:12.000076</ts>
    <user>Ruthe</user>
    <text>yes :slightly_smiling_face:?</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:50:57.000263</ts>
    <user>Ruthe</user>
    <text>I thought about drawing squares after I saw the checkerboard example of the quick introduction with images, was just wondering if it made sense and if it was fast enough with that amount of data</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:51:29.000178</ts>
    <user>Franklin</user>
    <text>flomaps!  &lt;http://docs.racket-lang.org/images/flomap_title.html&gt;</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:53:19.000284</ts>
    <user>Andreas</user>
    <text>I have a computation that's consuming too much memory and blowing up the limits. Is there a way inside DrRacket to break the computation and get a backtrace of where the computation broke - which might give me an idea of where the memory consumption is coming from?</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:54:10.000035</ts>
    <user>Ruthe</user>
    <text>&lt;@Franklin&gt; thanks I'll look into flomaps :slightly_smiling_face:!</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:54:27.000300</ts>
    <user>Franklin</user>
    <text>&lt;@Ruthe&gt; I am not sure they are the best fit.</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:54:47.000102</ts>
    <user>Franklin</user>
    <text>Low level drawing to a canvas can be done using a dc (drawing context): &lt;http://docs.racket-lang.org/draw/dc___.html&gt;</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:54:57.000206</ts>
    <user>Andreas</user>
    <text>hummm, I think I found the culprit actually, although I haven't found how to get the backtrace in DrRacket.</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:55:52.000191</ts>
    <user>Franklin</user>
    <text>&lt;@Ruthe&gt; It is worth playing around with some options first. Also make sure to check out the pict library: &lt;http://docs.racket-lang.org/pict/index.html?q=pict&gt;</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:56:51.000255</ts>
    <user>Franklin</user>
    <text>&lt;@Andreas&gt; In DrRacket click the image with the three red signs.</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:57:05.000274</ts>
    <user>Franklin</user>
    <text>read with white cross</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:57:10.000116</ts>
    <user>Franklin</user>
    <text>read -&amp;gt; red</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:57:40.000328</ts>
    <user>Franklin</user>
    <text>Also: in the language menu: choose "Debugging" (I think it is on as default)</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:58:42.000242</ts>
    <user>Ruthe</user>
    <text>&lt;@Franklin&gt; thanks will have a look</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:58:54.000181</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; ah, yes, I had debugging off. Thanks for the reminder.</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:59:06.000164</ts>
    <user>Franklin</user>
    <text>&lt;@Ruthe&gt; A quick example of how to use the low level drawing library: &lt;http://soegaard.github.io/blog/2013/06/27/drawing-bezier-curves/&gt;</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:59:06.000278</ts>
    <user>Andreas</user>
    <text>it's on by default but at some point I must have disabled it.</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T07:59:34.000137</ts>
    <user>Franklin</user>
    <text>Maybe you were benchmarking something?</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T08:00:42.000295</ts>
    <user>Andreas</user>
    <text>Likely. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T08:07:06.000050</ts>
    <user>Ruthe</user>
    <text>By the way is there a simple way of combining the canvas created by 2htdp/universe with a regular gui, with sliders and buttons?</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T08:09:44.000113</ts>
    <user>Franklin</user>
    <text>not sure</text>
  </message>
  <message conversation_id="606">
    <ts>2018-07-24T08:11:20.000145</ts>
    <user>Ruthe</user>
    <text>oh well</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T08:12:01.000147</ts>
    <user>Ruthe</user>
    <text>Will keep going :wink:, hopefully I can get something reasonable working</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T08:12:09.000227</ts>
    <user>Ruthe</user>
    <text>I love the language and the environment</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T08:12:27.000356</ts>
    <user>Ruthe</user>
    <text>I haven't felt this good since I first learned Python</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:14:33.000241</ts>
    <user>Ruthe</user>
    <text>by the way when I generate a large array using math/array</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:14:42.000080</ts>
    <user>Ruthe</user>
    <text>It prints out in a long sequence</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:15:03.000669</ts>
    <user>Ruthe</user>
    <text>is there a way of changing how it prints (maybe omitting middle values?)</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:16:30.000453</ts>
    <user>Ruthe</user>
    <text>a bit like in numpy of Python?</text>
  </message>
  <message conversation_id="607">
    <ts>2018-07-24T10:26:05.000036</ts>
    <user>Franklin</user>
    <text>Do you need matrix operations - or just something to store 2d data?</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:38:57.000132</ts>
    <user>Ruthe</user>
    <text>hum mostly pointwise operations, although I would need something like a kernel/window operation</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:39:22.000531</ts>
    <user>Franklin</user>
    <text>Consider using a vector instead then.</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:39:54.000006</ts>
    <user>Ruthe</user>
    <text>actually there is one calculation that I need some broadcasting for example</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:40:15.000287</ts>
    <user>Ruthe</user>
    <text>basically multiplying a 3d array</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:40:17.000431</ts>
    <user>Ruthe</user>
    <text>by a 1d</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:40:35.000603</ts>
    <user>Ruthe</user>
    <text>and then doing and argmax or argmin</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:40:41.000538</ts>
    <user>Ruthe</user>
    <text>on one of the axes</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:44:31.000308</ts>
    <user>Ruthe</user>
    <text>basically I have a main land use matrix</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:44:40.000644</ts>
    <user>Ruthe</user>
    <text>and then a bunch of layers to determine the next land use</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T10:45:39.000643</ts>
    <user>Ruthe</user>
    <text>would be nice to be able to calculate a softmax too</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T11:46:04.000076</ts>
    <user>Ruthe</user>
    <text>I couldn't find a random array generator (maybe my google-fu wasn't good enough). If it really is the case that there isn't one, would such a function be useful in the base math/array library? It's quite a common thing in Python, Julia and I think R and Matlab..!</text>
  </message>
  <message conversation_id="608">
    <ts>2018-07-24T12:00:56.000399</ts>
    <user>Thaddeus</user>
    <text>That could be useful. I worked a bit with the matrix features of Racket (for deep learning) and found a lack of some useful functions like that. Didn't quite got the time do do PRs, as I was learning the language in the same time, so I wasn't ready to make changes to racket's core. But "making Racket a cool language for AI by improving racket/math" is on my list of things to contribute :wink:</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:15:09.000153</ts>
    <user>Ruthe</user>
    <text>yeah would be great</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:15:13.000251</ts>
    <user>Ruthe</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:15:49.000392</ts>
    <user>Ruthe</user>
    <text>I'll collect some of the functions I write, maybe in future I can contribute</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:17:26.000372</ts>
    <user>Ruthe</user>
    <text>Still learning too</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:27:32.000232</ts>
    <user>Ruthe</user>
    <text>By the way is there a quick way of finding the code for a particular function of racket?</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:31:04.000263</ts>
    <user>Carlyn</user>
    <text>&lt;@Ruthe&gt; in DrRacket, you can right click on identifiers and select “open defining file”, and in racket-mode, you can use `racket-visit-definition`</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:32:07.000270</ts>
    <user>Ruthe</user>
    <text>Thanks :slightly_smiling_face:!</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:35:17.000168</ts>
    <user>Ruthe</user>
    <text>that's really helpful :slightly_smiling_face:</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:35:30.000208</ts>
    <user>Ruthe</user>
    <text>DrRacket really is great</text>
  </message>
  <message conversation_id="605">
    <ts>2018-07-24T12:39:45.000370</ts>
    <user>Carlyn</user>
    <text>DrRacket won’t be able to find the source for some of the core functions because they’re defined in C at the level of the runtime, but it will find the source for anything defined in Racket.</text>
  </message>
  <message conversation_id="609">
    <ts>2018-07-24T14:43:40.000425</ts>
    <user>Helena</user>
    <text>wait --- `raco te` is a synonym for `raco test` ???</text>
  </message>
  <message conversation_id="609">
    <ts>2018-07-24T14:45:56.000221</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; any unambigouous prefix can be used with `raco`</text>
  </message>
  <message conversation_id="609">
    <ts>2018-07-24T14:46:29.000459</ts>
    <user>Helena</user>
    <text>wow</text>
  </message>
  <message conversation_id="610">
    <ts>2018-07-24T16:39:26.000164</ts>
    <user>Meaghan</user>
    <text>Hello hello,  any recommendation for terminal UI libs?  I’m looking for something like this in racket:  &lt;https://github.com/rivo/tview&gt;</text>
  </message>
  <message conversation_id="610">
    <ts>2018-07-24T16:56:10.000166</ts>
    <user>Monserrate</user>
    <text>&lt;@Meaghan&gt; there's nothing as feature-full as that, but you might be interested in the "charterm" pkg</text>
  </message>
  <message conversation_id="610">
    <ts>2018-07-24T17:18:32.000194</ts>
    <user>Meaghan</user>
    <text>&lt;@Monserrate&gt; Thanks. It doesn’t seem to support creating boxes… That’s what I really want.</text>
  </message>
  <message conversation_id="611">
    <ts>2018-07-24T17:42:26.000341</ts>
    <user>Carlyn</user>
    <text>&lt;@Odis&gt; This commit of yours appears to have broken the build on Windows. &lt;https://github.com/racket/racket/commit/eaaede9c2c40f40e9f322998a5a876a3b5170ccb&gt;</text>
  </message>
  <message conversation_id="611">
    <ts>2018-07-24T17:43:21.000475</ts>
    <user>Carlyn</user>
    <text>I haven’t looked into it enough to know if it’s an issue with the test suite or an actual problem, but it would be nice if you could resolve it, especially if that commit is going into the Racket 7 release.</text>
  </message>
  <message conversation_id="612">
    <ts>2018-07-24T20:20:19.000051</ts>
    <user>Carrol</user>
    <text>how come they don’t have :liver: emoji ?</text>
  </message>
  <message conversation_id="611">
    <ts>2018-07-24T20:46:55.000087</ts>
    <user>Carlyn</user>
    <text>I haven’t the foggiest idea what it means, either, so you can probably rest easy.</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T00:38:13.000104</ts>
    <user>Helena</user>
    <text>The kidney above is basically the same as the foggy/panda/cocktails on this message, except Leif and I have used the kidney as a "+1" before. I'm hoping Leif goes "oh Ben sent a kidney hahahahahaha okay I better go fix the build (and then maybe replies with a matching kidney)"</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T04:24:49.000171</ts>
    <user>Thaddeus</user>
    <text>&lt;@Meaghan&gt; I recently wrote a lib that behaves a bit like GTK (with horizontal and vertical boxes as layout) based on `charterm`, but it's not in its own library yet (&lt;https://github.com/euhmeuh/virtual-mpu/tree/master/private/emulator/gui&gt;). I think &lt;@Dia&gt; has something too (&lt;https://github.com/jeapostrophe/raart&gt;).</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T04:29:55.000232</ts>
    <user>Thaddeus</user>
    <text>I'm planning to get my lib out of its parent project and give it a name. Sample usage: &lt;https://github.com/euhmeuh/virtual-mpu/blob/master/private/emulator/terminal.rkt#L107&gt;</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T04:31:08.000144</ts>
    <user>Thaddeus</user>
    <text>(on the top of the file you can see mockups of what it looks like when rendered in a terminal)</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T04:32:04.000257</ts>
    <user>Thaddeus</user>
    <text>(except charterm does not support UTF-8 yet so I fall back to `+=|-` characters for now)</text>
  </message>
  <message conversation_id="614">
    <ts>2018-07-25T10:11:21.000140</ts>
    <user>Bertha</user>
    <text>&lt;@Eileen&gt; Do you have any insights into this: &lt;https://github.com/racket/datalog/issues/9#issuecomment-398369738&gt;
I have racket-mode finding/using `'drracket:submit-predicate` as well as making sure to load `configure-runtime`s so that e.g. `current-read-interaction` is set for a lang. However my first test case is datalog/lang, and "it works" but not really. I don't understand what's going on with EOF.
I suppose the TL;DR is if you jump to the last comment: &lt;https://github.com/racket/datalog/issues/9#issuecomment-407765972&gt;</text>
  </message>
  <message conversation_id="614">
    <ts>2018-07-25T10:14:17.000032</ts>
    <user>Eileen</user>
    <text>I saw the GitHub mention but haven't had time to investigate yet, sorry. :(</text>
  </message>
  <message conversation_id="614">
    <ts>2018-07-25T10:17:03.000128</ts>
    <user>Bertha</user>
    <text>OK no worries. I've been working on this a couple days and have all the pieces in my head now -- so wanted to ping in case you had time to look now. But totally understand if you can't. It's not urgent. If I know you can't look at it soon, I can at least find another lang example to work with for awhile.</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T11:30:22.000375</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; I have some questions about contracts defined using late-neg-projection when you get a moment (I know you just got back, so no rush). (1) Are projections defined with late-neg-projection guaranteed to be supplied a blame object with a missing party, or are they expected to always check `blame-missing-party?` to conditionally apply `blame-add-missing-party`? (2) Likewise, for projections that defer to other contracts’ projections, what should be passed to the sub-contracts’ projections if the sub-contracts aren’t known until the value (and thus the missing party) has already been supplied? Put another way, if I have a contract combinator with dependent-like behavior, where the sub-contracts aren’t known until the value is known, then it seems silly to pass a blame object with a missing party to the sub-contract given that I already have the missing party.</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T11:31:23.000465</ts>
    <user>Eileen</user>
    <text>The are not guaranteed not expected to check. You pass the party you got to others (it may be #f)</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T11:33:32.000555</ts>
    <user>Carlyn</user>
    <text>Ah, so does `(blame-add-missing-party b #f)` not signal an error if `b` is not missing a party?</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T11:34:48.000600</ts>
    <user>Eileen</user>
    <text>Don't call that</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T11:34:56.000500</ts>
    <user>Eileen</user>
    <text>Just always pass on the missing part</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T11:34:58.000237</ts>
    <user>Eileen</user>
    <text>Y</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T11:35:45.000248</ts>
    <user>Carlyn</user>
    <text>Oh, I see… `raise-blame-error` takes a missing party argument. I thought I needed to add the missing party before calling `raise-blame-error`, but I guess not.</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T11:37:31.000082</ts>
    <user>Eileen</user>
    <text>Right you don't!</text>
  </message>
  <message conversation_id="613">
    <ts>2018-07-25T11:39:20.000046</ts>
    <user>Carlyn</user>
    <text>Okay, thank you!</text>
  </message>
  <message conversation_id="615">
    <ts>2018-07-25T12:06:33.000645</ts>
    <user>Tiesha</user>
    <text>I thought the kidney meant pain as in a kidney stone.</text>
  </message>
  <message conversation_id="615">
    <ts>2018-07-25T12:06:42.000206</ts>
    <user>Tiesha</user>
    <text>But that was just a guess.</text>
  </message>
  <message conversation_id="615">
    <ts>2018-07-25T12:14:48.000355</ts>
    <user>Helena</user>
    <text>oh I like that too</text>
  </message>
  <message conversation_id="616">
    <ts>2018-07-25T15:21:22.000251</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; Ah, good catch. It looks like its a problem with the test. I’ll push a fix.</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T15:59:42.000209</ts>
    <user>Helena</user>
    <text>why doesn't TR match work with occurrence typing? I expected this to type check:
```
#lang typed/racket

(struct foo ())

(: f (-&amp;gt; (U foo String) Void))
(define (f x)
  (match x
    [(foo)
     (void)]
    [str
     (void (string-append str str))]))
```</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:01:49.000114</ts>
    <user>Helena</user>
    <text>but it says `str` has type `(U foo String)` in the second branch</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:03:45.000278</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; because `match` doesn't compile to the code that you're imagining</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:09:06.000391</ts>
    <user>Helena</user>
    <text>I think I should open an issue for this. Max tried to write a program a few minutes ago, thought he had a problem with equi-recursive types, but really it was just a problem with match &amp;amp; occurrence typing &lt;https://twitter.com/maxsnew/status/1022210296138661888&gt;</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:11:11.000363</ts>
    <user>Helena</user>
    <text>(but idk how I'd try to fix this)</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:11:16.000040</ts>
    <user>Monserrate</user>
    <text>I don't think opening an issue would be helpful -- that's how `match` works because of how the compilation scheme for patterns works, and fixing it would involve rewriting `match`</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:12:59.000462</ts>
    <user>Monserrate</user>
    <text>maybe this is an indication that how `match` works is a bad design (although I think other options also have significant drawbacks) but I don't think a issue is useful</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:14:12.000386</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; You know your compilation of Matthew top-level-is-hopeless links? I think the time is coming when someone needs to do that for you explaining `match` and Typed Racket. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:14:42.000339</ts>
    <user>Monserrate</user>
    <text>it isn't as fundamental as the problems with the top-level</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:14:49.000170</ts>
    <user>Helena</user>
    <text>links would be helpful</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:15:06.000128</ts>
    <user>Helena</user>
    <text>before I came here, Max &amp;amp; I quickly tried looking for documentation about match + OT</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:15:10.000165</ts>
    <user>Monserrate</user>
    <text>but you'd probably have to give up `=&amp;gt;`</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:15:13.000135</ts>
    <user>Bertha</user>
    <text>I know and I'm not saying match or TR are hopeless. I've just seen you answer this a lot, including at least once or twice from me. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:15:32.000418</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; a documentation entry in the limitations section for TR would be useful</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:16:22.000491</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; no, I mean that the hopelessness of the toplevel is a fact about the top level as an idea, whereas this is just a fact about particular decisions in match and TR</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-25T16:16:50.000399</ts>
    <user>Monserrate</user>
    <text>I know you didn't mean to suggest anything about TR</text>
  </message>
  <message conversation_id="618">
    <ts>2018-07-25T21:50:51.000162</ts>
    <user>Ola</user>
    <text>where’s this top-level-is-hopeless compilation?</text>
  </message>
  <message conversation_id="619">
    <ts>2018-07-25T22:10:04.000119</ts>
    <user>Helena</user>
    <text>&lt;https://gist.github.com/samth/3083053&gt;</text>
  </message>
  <message conversation_id="619">
    <ts>2018-07-25T22:43:02.000086</ts>
    <user>Marnie</user>
    <text>heh. "compilation"</text>
  </message>
  <message conversation_id="620">
    <ts>2018-07-26T02:26:11.000078</ts>
    <user>Stormy</user>
    <text>anyone here going to ICFP?</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-26T05:36:38.000263</ts>
    <user>Louanne</user>
    <text>we submitted to scheme workshop and if our paper gets in I’ll probably go :smiley:</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-26T05:36:52.000252</ts>
    <user>Louanne</user>
    <text>my student will be going too, and I think he’ll probably want someone to split a room with</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-26T05:42:08.000262</ts>
    <user>Louanne</user>
    <text>the conference is not very harmoniously planned with my teaching schedule, though :confused:. Don’t really want to miss four courses. Will probably compromise by doing two remote if I go</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-26T05:45:15.000382</ts>
    <user>Andreas</user>
    <text>To the math inclined people, what's the best way to draw an element from a uniform distribution table: `#hasheq((a . 0.5) (b . 0.16) (c . 0.2))`? Note the table is not normalize. I can easily do that with a loop to get `#hasheq((a . 0.58) (b . 0.19) (c . 0.23))`, but then I would probably compute the choice borders for 1 as a list, and get `'((a . 0.58) (b . 0.77) (c . 1))`. After this I do a `(random)` and loop the list until I find a `cdr` larger than my random value, returning then the `car`.  This looks quite complex for what looks to be a simple thing to do. Also, there might be a library out there doing things the right way. Any suggestions?</text>
  </message>
  <message conversation_id="621">
    <ts>2018-07-26T06:07:19.000152</ts>
    <user>Andreas</user>
    <text>So, I have taken the above approach to write this horrific piece of code:
```
(define distribution
  #hasheq((a . 0.5) (b . 0.16) (c . 0.2)))

(define sum (for/fold ([total 0])
                      ([(_ v) (in-hash distribution)])
              (+ total v)))

(define normalized
  (for/hasheq ([(k v) (in-hash distribution)])
    (values k (/ v sum))))

(define choice-edges
  (for/fold ([total 0]
             [l   '()]
             #:result (reverse l))                  
            ([p (in-list (sort (hash-&amp;gt;list normalized) &amp;lt; #:key cdr))])
    (define k (car p))
    (define v (cdr p))
    (define accum (+ total v))
    
    (values accum (cons (cons k accum) l)))) 
    
(define (random-in-distribution)
  (define v (random))
  (let loop ([edges choice-edges])
    (define edge (car edges))
    (if (&amp;lt; v (cdr edge))
        (car edge)
        (loop (cdr edges)))))
```</text>
  </message>
  <message conversation_id="621">
    <ts>2018-07-26T06:08:58.000152</ts>
    <user>Andreas</user>
    <text>Suggestions on how to improve this are welcome. There are so many loops that it feels really inefficient, however most of those could be done once since the distribution in my case is static. The bigger problem is that the function generating the values, requires looping through the choice-edges list.</text>
  </message>
  <message conversation_id="621">
    <ts>2018-07-26T06:30:48.000324</ts>
    <user>Andreas</user>
    <text>So, I revised this to generate a table so that I only need a `vector-ref` for the random choice:
```
(define normalize-100
  (for/hasheq ([(k v) (in-hash distribution)])
    (values k (inexact-&amp;gt;exact (round (/ (* v 100) sum))))))

(require mischief/for)

(define choice-table
  (list-&amp;gt;vector
   (for/append (((k v) (in-hash normalize-100)))
     (make-list v k))))
(define sz (vector-length choice-table)) ;; not necessarily 100

(define (random-in-choice-table)
  (define v (random sz))
  (vector-ref choice-table v))
```</text>
  </message>
  <message conversation_id="621">
    <ts>2018-07-26T06:31:04.000122</ts>
    <user>Andreas</user>
    <text>Better but not great. I welcome any comments on this.</text>
  </message>
  <message conversation_id="617">
    <ts>2018-07-26T06:35:33.000004</ts>
    <user>Franklin</user>
    <text>You can use `discrete-dist` to make a finite distribution with your weights. Then use `sample` to generate random samples.</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:21:59.000202</ts>
    <user>Ruthe</user>
    <text>Hello, can someone help me out getting unit testing working</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:22:48.000090</ts>
    <user>Ruthe</user>
    <text>This is my main script/module</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:22:57.000189</ts>
    <user>Ruthe</user>
    <text>called ABC.rkt</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:23:15.000269</ts>
    <user>Ruthe</user>
    <text>then I have ABC_test.rkt in the same folder</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:23:30.000023</ts>
    <user>Ruthe</user>
    <text>None</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:23:41.000160</ts>
    <user>Ruthe</user>
    <text>but I get the following error... ```ABC.rkt:3:9: ABC.rkt:3:9: cannot open module file
  module path: math/distribution
  path: /usr/share/racket/pkgs/math-lib/math/distribution.rkt
  system error: No such file or directory; errno=2 in: math/distribution
  no package suggestions are available .```</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:24:27.000197</ts>
    <user>Franklin</user>
    <text>math/distribution   -&amp;gt; math/distributions</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:25:10.000188</ts>
    <user>Ruthe</user>
    <text>ah I hadn't save the file :stuck_out_tongue:</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:25:20.000294</ts>
    <user>Ruthe</user>
    <text>the ABC.rkt</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:25:23.000054</ts>
    <user>Franklin</user>
    <text>that helps too :slightly_smiling_face:</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:25:55.000022</ts>
    <user>Ruthe</user>
    <text>I made the change but forgot to save :man-facepalming:</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:26:01.000140</ts>
    <user>Ruthe</user>
    <text>but thanks anyways</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:26:08.000178</ts>
    <user>Ruthe</user>
    <text>should pay more attention to the trace</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:31:17.000131</ts>
    <user>Ruthe</user>
    <text>racket has a quickcheck that's really cool :slightly_smiling_face:</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:31:23.000129</ts>
    <user>Ruthe</user>
    <text>do a lot of people use it?</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:37:09.000244</ts>
    <user>Ruthe</user>
    <text>strange binomial-dist returns a float</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T07:37:18.000039</ts>
    <user>Ruthe</user>
    <text>would be nicer that it be a integer</text>
  </message>
  <message conversation_id="623">
    <ts>2018-07-26T08:13:21.000262</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; thanks. I will take a look at the lib.</text>
  </message>
  <message conversation_id="623">
    <ts>2018-07-26T13:16:15.000504</ts>
    <user>Franklin</user>
    <text>#lang racket
(struct foo (name))
(struct colored-foo (color))
(struct sized-foo   (size))

(match (sized-foo 'xl)
  [(colored-foo n) 'colored]  ; &amp;lt;= expected error here!
  [(sized-foo n)   'sized]
  [(foo n)         n])</text>
  </message>
  <message conversation_id="622">
    <ts>2018-07-26T13:16:29.000382</ts>
    <user>Franklin</user>
    <text>&lt;@Monserrate&gt;  Is this a bug in match?</text>
  </message>
  <message conversation_id="623">
    <ts>2018-07-26T13:16:52.000264</ts>
    <user>Franklin</user>
    <text>The result is 'sized.</text>
  </message>
  <message conversation_id="623">
    <ts>2018-07-26T13:17:31.000063</ts>
    <user>Franklin</user>
    <text>nevermind - forgot foo</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T13:46:57.000360</ts>
    <user>Ruthe</user>
    <text>```(vector-map sample (normal-dist))

Type Checker: missing type for top-level identifier;
 either undefined or missing a type annotation
  identifier: sample in: sample```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T13:47:47.000348</ts>
    <user>Ruthe</user>
    <text>Is this supposed to happen..?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T13:48:11.000266</ts>
    <user>Ruthe</user>
    <text>ah wait</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T13:48:57.000384</ts>
    <user>Ruthe</user>
    <text>I meant ```(vector-map sample '#((normal-dist)))```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T13:49:01.000400</ts>
    <user>Ruthe</user>
    <text>still get the same error</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T13:55:31.000262</ts>
    <user>Ruthe</user>
    <text>```(vector-map distribution? (vector (normal-dist)))```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T13:55:34.000110</ts>
    <user>Ruthe</user>
    <text>this works</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T13:55:47.000038</ts>
    <user>Ruthe</user>
    <text>```(vector-map sample (vector (normal-dist)))``` this doesn't</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T13:56:24.000040</ts>
    <user>Ruthe</user>
    <text>any idea why..?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:03:02.000387</ts>
    <user>Helena</user>
    <text>I'm not seeing the same error message, but if I run this:
```
#lang typed/racket
(require math/distributions)
(vector-map sample (vector (normal-dist)))
```
then TR says `Type Checker: Polymorphic function `vector-map' could not be applied to arguments ...`</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:03:29.000363</ts>
    <user>Ruthe</user>
    <text>yeah I am getting that now</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:03:38.000082</ts>
    <user>Helena</user>
    <text>and that usually means the program needs to use `inst` to replace some type variables</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:05:20.000270</ts>
    <user>Ruthe</user>
    <text>hum still learning Racket and typed racket</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:05:57.000212</ts>
    <user>Ruthe</user>
    <text>not sure how to use inst</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:06:17.000403</ts>
    <user>Helena</user>
    <text>`(vector-map (inst sample Real Real) (vector (normal-dist)))` seems to work</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:06:26.000288</ts>
    <user>Helena</user>
    <text>using `inst` is hard</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:06:59.000438</ts>
    <user>Helena</user>
    <text>you need to figure out / guess which expressions have polymorphic type, then the number of variables, and finally what to fill them with</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:08:10.000096</ts>
    <user>Monserrate</user>
    <text>note that the error message tells you the first two things:</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:08:20.000104</ts>
    <user>Monserrate</user>
    <text>```
Type Checker: Polymorphic function `vector-map' could not be applied to arguments:
Domain: (-&amp;gt; a b ... b c) (Vectorof a) (Vectorof b) ... b
Arguments: (All (In Out) (case-&amp;gt; (-&amp;gt; (distribution In Out) Out) (-&amp;gt; (distribution In Out) Integer (Listof Out)))) (Vector Normal-Dist)
Result type: (Vectorof c)
Expected result: AnyValues
```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:08:53.000197</ts>
    <user>Monserrate</user>
    <text>you need to instantiate the first argument (it's the one with the `All` type) and you need to supply two type arguments (for `In` and `Out`)</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:22:11.000192</ts>
    <user>Ruthe</user>
    <text>ok thanks :slightly_smiling_face:, let's see if I can learn</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:22:29.000618</ts>
    <user>Ruthe</user>
    <text>is there any particular doc link that explains how to go about this?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:23:50.000515</ts>
    <user>Ruthe</user>
    <text>I don't quite understand why it's Real</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:23:53.000405</ts>
    <user>Ruthe</user>
    <text>in this case</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:24:31.000014</ts>
    <user>Ruthe</user>
    <text>the double Real I mean</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:24:43.000460</ts>
    <user>Helena</user>
    <text>other numbers might work too</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:24:54.000167</ts>
    <user>Ruthe</user>
    <text>I understand that the result values within the vector will be Real</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:26:58.000399</ts>
    <user>Ruthe</user>
    <text>hum (inst sample Real) works</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:27:07.000586</ts>
    <user>Ruthe</user>
    <text>so I don't need the extra Real?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:28:58.000230</ts>
    <user>Helena</user>
    <text>I guess TR is able to figure out the result, when inferring a type for this application of `vector-map`</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:32:44.000181</ts>
    <user>Ruthe</user>
    <text>This is confusing ```(vector-map (inst sample Real Real) (vector (bernoulli-dist 1.0)))```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:32:49.000506</ts>
    <user>Ruthe</user>
    <text>This works fine</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:33:14.000037</ts>
    <user>Ruthe</user>
    <text>But then this doesn't ```(vector-map (inst sample Real Real) (vector (bernoulli-dist 1.0) (normal-dist)))```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:33:19.000145</ts>
    <user>Ruthe</user>
    <text>...??</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:34:35.000156</ts>
    <user>Helena</user>
    <text>what does the error message say?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:35:24.000216</ts>
    <user>Monserrate</user>
    <text>&lt;@Ruthe&gt; it supplies a default type if you don't provide all of them</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:36:05.000292</ts>
    <user>Ruthe</user>
    <text>```Type Checker: Polymorphic function `vector-map' could not be applied to arguments:
Domain: (-&amp;gt; a b ... b c) (Vectorof a) (Vectorof b) ... b
Arguments: (case-&amp;gt; (-&amp;gt; (distribution Real Real) Real) (-&amp;gt; (distribution Real Real) Integer (Listof Real))) (Vector Bernoulli-Dist Normal-Dist)
 in: (vector-map (inst sample Real Real) (vector (bernoulli-dist 1.0) (normal-dist)))```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:36:57.000267</ts>
    <user>Ruthe</user>
    <text>you mean I have to supply for distributionin the vector..? Or..?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:39:42.000355</ts>
    <user>Ruthe</user>
    <text>I get the general idea ut don't understand the specifics and the trace message is confusing me</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:40:32.000560</ts>
    <user>Ruthe</user>
    <text>Is this explained in detail in the Typed Racket Guide or Reference? I just looked at the basics to be honest</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:41:05.000388</ts>
    <user>Helena</user>
    <text>hm, I think this is because the default type for the vector is too specific for map</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:41:12.000318</ts>
    <user>Helena</user>
    <text>because this works:
```
#lang typed/racket
(require math/distributions)
(define v : (Vectorof (U Normal-Dist Bernoulli-Dist)) (vector (bernoulli-dist 1.0) (normal-dist)))
(vector-map (inst sample Real Real) v)
```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:42:02.000329</ts>
    <user>Ruthe</user>
    <text>but what if I want to use any distribution...</text>
  </message>
  <message conversation_id="625">
    <ts>2018-07-26T14:42:15.000373</ts>
    <user>Helena</user>
    <text>is there a supertype of all distributions?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:42:25.000404</ts>
    <user>Ruthe</user>
    <text>think its just called distribution</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:43:18.000099</ts>
    <user>Ruthe</user>
    <text>&lt;https://docs.racket-lang.org/math/Distribution_Types_and_Operations.html#%28def._%28%28lib._math%2Fdistributions..rkt%29._distribution%29%29&gt;</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:44:35.000211</ts>
    <user>Helena</user>
    <text>hm, it also works to avoid using `vector`:
```
#lang typed/racket
(require math/distributions)
(define v (list-&amp;gt;vector (list (bernoulli-dist 1.0) (normal-dist))))
(vector-map (inst sample Real Real) v)
```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:44:56.000214</ts>
    <user>Ruthe</user>
    <text>&amp;gt; (distribution? (normal-dist))
- : Boolean [more precisely: True]
#t</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:45:21.000108</ts>
    <user>Helena</user>
    <text>(`vector` is trying to infer a `Vector` type when possible, instead of a `Vectorof` type)</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:45:40.000259</ts>
    <user>Ruthe</user>
    <text>what..</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:45:56.000320</ts>
    <user>Ruthe</user>
    <text>is there a constructor for Vectorof</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:46:23.000115</ts>
    <user>Carlyn</user>
    <text>`Vectorof` is a type, not a value</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:47:33.000275</ts>
    <user>Carlyn</user>
    <text>there are two types for vectors, `Vector` and `Vectorof`. the former is a type like a tuple: `(Vector Integer String Boolean)` describes a vector with exactly 3 elements, the first of which is an integer, the second of which is a string, and the third of which is a boolean. `Vectorof` only takes one type argument, and it describes a vector of arbitrary length that only contains one type of element.</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:47:52.000344</ts>
    <user>Carlyn</user>
    <text>this is kind of confusing, but it’s done because untyped racket uses lists and vectors in both ways.</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:48:47.000301</ts>
    <user>Carlyn</user>
    <text>Also, the type names correspond to the related contract names in untyped racket, which are named `vector/c` and `vectorof`, respectively.</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:49:35.000300</ts>
    <user>Ruthe</user>
    <text>Well I am basically looking at a vector of a single type (sort like an array in other languages) not really interested in a tuple</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:49:44.000507</ts>
    <user>Ruthe</user>
    <text>```(map (inst sample Real Real) (list (bernoulli-dist) (normal-dist)))```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:50:01.000367</ts>
    <user>Ruthe</user>
    <text>this seems to work ok</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:50:27.000244</ts>
    <user>Helena</user>
    <text>and that's because lists are immutable</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:50:35.000476</ts>
    <user>Ruthe</user>
    <text>Works with different sizes ```(map (inst sample Real Real) (list (bernoulli-dist) (normal-dist) (poisson-dist)))```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:50:45.000031</ts>
    <user>Ruthe</user>
    <text>vector are mutable?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:50:51.000126</ts>
    <user>Ruthe</user>
    <text>ah didn't realise that</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:51:08.000021</ts>
    <user>Helena</user>
    <text>well there's 2 kinds of vectors but usually they're mutable</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:51:17.000493</ts>
    <user>Ruthe</user>
    <text>I don't need to mutable data structure</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:51:19.000442</ts>
    <user>Helena</user>
    <text>(vector ...) is mutable, `'#( ... )` is immutable</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:51:29.000241</ts>
    <user>Ruthe</user>
    <text>hum ok</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:51:42.000296</ts>
    <user>Ruthe</user>
    <text>didn't understand it was different</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:51:51.000440</ts>
    <user>Helena</user>
    <text>I should have said `(vector-immutable ...)` above</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:53:26.000502</ts>
    <user>Ruthe</user>
    <text>Ok so my basic reasoning is I just want to process a fixed length data structure the fastest</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:53:41.000370</ts>
    <user>Ruthe</user>
    <text>from what I read I thought I would be better of with immutable vector</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:53:53.000494</ts>
    <user>Ruthe</user>
    <text>should I just stick to lists instead?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:54:19.000445</ts>
    <user>Ruthe</user>
    <text>I just need to take a bunch of distributions and sample from them</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:54:33.000007</ts>
    <user>Ruthe</user>
    <text>for Approximate Bayesian Computation (ABC)</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:55:23.000220</ts>
    <user>Ruthe</user>
    <text>say 1000 or 10 000 samples (possible in each nth iteration)</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:56:20.000184</ts>
    <user>Ruthe</user>
    <text>I have some functions in regular racket</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:56:21.000347</ts>
    <user>Ruthe</user>
    <text>working</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:56:32.000035</ts>
    <user>Ruthe</user>
    <text>just wanted to change it to typed racket for th performance gains</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:57:21.000413</ts>
    <user>Helena</user>
    <text>if you want fast random access to a structure, vectors are better</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:57:52.000038</ts>
    <user>Helena</user>
    <text>people should be around here &amp;amp; on the mailing list to help with the type errors</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:59:17.000280</ts>
    <user>Ruthe</user>
    <text>well you guys &lt;@Helena&gt; &lt;@Monserrate&gt; and &lt;@Carlyn&gt; have already help quite a bit :slightly_smiling_face: thanks</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T14:59:46.000122</ts>
    <user>Ruthe</user>
    <text>is &lt;#C06V96CKX|general&gt; the best channel for these questions?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:04:49.000133</ts>
    <user>Ruthe</user>
    <text>Ok so I changed to functions to work with lists (at least for now). But I get another error</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:05:05.000315</ts>
    <user>Ruthe</user>
    <text>```. Type Checker: No function domains matched in function application:
Types: Real Real Real -&amp;gt; (Sequenceof Real)
       Real Real -&amp;gt; (Sequenceof Real)
       Real -&amp;gt; (Sequenceof Nonnegative-Integer)
Arguments: Zero (U Exact-Complex Exact-Imaginary Float-Imaginary Inexact-Complex Single-Flonum-Imaginary) One
Expected result: AnyValues
 in: (for/list ((i (range n))) (prior-sample priors))```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:06:06.000429</ts>
    <user>Ruthe</user>
    <text>hum think I figured it out</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:06:20.000207</ts>
    <user>Ruthe</user>
    <text>```(: prior-samples (-&amp;gt; Real (Listof distribution) (Listof (Listof Real))))```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:13:46.000393</ts>
    <user>Ruthe</user>
    <text>```Type Checker: type mismatch
  expected: (Listof distribution)
  given: (List Bernoulli-Dist) in: (list (bernoulli-dist 0.0))```</text>
  </message>
  <message conversation_id="626">
    <ts>2018-07-26T15:14:15.000255</ts>
    <user>Ruthe</user>
    <text>hum so the same issue between List and Listof ?</text>
  </message>
  <message conversation_id="626">
    <ts>2018-07-26T15:16:02.000048</ts>
    <user>Karry</user>
    <text>I was tinkering a little, it didn't seem to me that `Bernoulli-Dist` was a subtype of `distribution`</text>
  </message>
  <message conversation_id="626">
    <ts>2018-07-26T15:17:09.000162</ts>
    <user>Karry</user>
    <text>```
#lang typed/racket

(require math/distributions)

(ann (bernoulli-dist 0.0) distribution)

;;Type Checker: type mismatch
;;  expected: distribution
;;  given: Bernoulli-Dist in: (bernoulli-dist 0.0)
```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:17:46.000200</ts>
    <user>Ruthe</user>
    <text>strange, but with this test, it returns #t ```&amp;gt; (distribution? (bernoulli-dist))
- : Boolean [more precisely: True]
#t```</text>
  </message>
  <message conversation_id="626">
    <ts>2018-07-26T15:18:08.000344</ts>
    <user>Ruthe</user>
    <text>shouldn't it match?</text>
  </message>
  <message conversation_id="626">
    <ts>2018-07-26T15:18:16.000182</ts>
    <user>Karry</user>
    <text>I don't know -- I agree that is odd</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:18:19.000440</ts>
    <user>Ruthe</user>
    <text>by the way how do I generate a type Listof</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:18:27.000041</ts>
    <user>Ruthe</user>
    <text>..?</text>
  </message>
  <message conversation_id="626">
    <ts>2018-07-26T15:18:38.000108</ts>
    <user>Karry</user>
    <text>`List` vs `Listof` wasn't the problem in the last error message</text>
  </message>
  <message conversation_id="626">
    <ts>2018-07-26T15:19:01.000443</ts>
    <user>Karry</user>
    <text>`(List A ...)` is a subtype of `(Listof B)` so long as `A` is a subtype of `B`</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:19:25.000358</ts>
    <user>Ruthe</user>
    <text>hum ok!</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:20:16.000429</ts>
    <user>Ruthe</user>
    <text>so ann is used to check if it is a certain subtype</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:20:25.000102</ts>
    <user>Ruthe</user>
    <text>type or subtype</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:21:02.000413</ts>
    <user>Ruthe</user>
    <text>is there someway of getting the "inheritance" or something like that of the type</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:21:18.000184</ts>
    <user>Ruthe</user>
    <text>so you know to which subtypes it belongs?</text>
  </message>
  <message conversation_id="626">
    <ts>2018-07-26T15:23:05.000132</ts>
    <user>Karry</user>
    <text>`ann` is just a type annotation. It tells the type checker "I expect it to be this type", which sometimes helps terms type check that otherwise would not, and other times it can serve to confirm to the programmer a term is of the type they thought it was</text>
  </message>
  <message conversation_id="626">
    <ts>2018-07-26T15:23:29.000392</ts>
    <user>Karry</user>
    <text>I don't think there's a nice way to explore the "inheritance tree" of types directly...</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:23:44.000145</ts>
    <user>Ruthe</user>
    <text>ok sort of like type or isinstance in Python?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:23:55.000060</ts>
    <user>Ruthe</user>
    <text>hum ok</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:24:06.000026</ts>
    <user>Ruthe</user>
    <text>maybe I should ready the guide more carefully</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:24:12.000233</ts>
    <user>Ruthe</user>
    <text>the TR guide</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:24:16.000426</ts>
    <user>Karry</user>
    <text>but `ann` doesn't do anything at runtime</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:24:21.000437</ts>
    <user>Karry</user>
    <text>it's just for the type checker (and programmer xD)</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:27:52.000254</ts>
    <user>Karry</user>
    <text>&lt;@Ruthe&gt; I'm not at all familiar with the "distribution" portion of the math library, but in peeking at the code, it seems indeed `Bernoulli-Dist` should be a subtype of `distribution`. I'll submit an issue on the github repo.</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:29:19.000318</ts>
    <user>Ruthe</user>
    <text>seems to be even more general problem</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:29:45.000137</ts>
    <user>Ruthe</user>
    <text>```(ann (normal-dist) distribution)
. Type Checker: type mismatch
  expected: distribution
  given: Normal-Dist in: (normal-dist)```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:30:03.000245</ts>
    <user>Ruthe</user>
    <text>```&amp;gt; (ann (binomial-dist) distribution)
. Type Checker: type mismatch
  expected: distribution
  given: Binomial-Dist in: (binomial-dist)```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:30:28.000328</ts>
    <user>Ruthe</user>
    <text>```&amp;gt; (ann (poisson-dist) distribution)
. Type Checker: type mismatch
  expected: distribution
  given: Poisson-Dist in: (poisson-dist)```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:31:51.000005</ts>
    <user>Karry</user>
    <text>hmm... perhaps there's some more obvious reason it doesn't work then? (or maybe it's just a big glaring omission no one has stumbled upon until now? like I said, I'm not at all familiar with this code)</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:32:04.000460</ts>
    <user>Ruthe</user>
    <text>yeah I find it odd</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:33:12.000458</ts>
    <user>Ruthe</user>
    <text>&lt;https://docs.racket-lang.org/math/Distribution_Types_and_Operations.html?q=math%2Fdistributions#%28def._%28%28lib._math%2Fdistributions..rkt%29._distribution%29%29&gt;</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:34:19.000332</ts>
    <user>Karry</user>
    <text>aha!</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:34:24.000220</ts>
    <user>Karry</user>
    <text>```
#lang typed/racket

(require math/distributions)

(ann (bernoulli-dist 0.0) (distribution Real Real))

```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:34:41.000281</ts>
    <user>Ruthe</user>
    <text>hehe ok?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:35:19.000133</ts>
    <user>Ruthe</user>
    <text>```&amp;gt; (ann (poisson-dist) (distribution Real Real))
- : (distribution Real Real)
(poisson-dist 0.5)```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:35:23.000495</ts>
    <user>Ruthe</user>
    <text>seems to work</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:35:33.000384</ts>
    <user>Ruthe</user>
    <text>so in the function what type annotation should I put</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:35:43.000316</ts>
    <user>Ruthe</user>
    <text>```(: prior-sample (-&amp;gt; (Listof distribution) (Listof Real)))
```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:36:06.000118</ts>
    <user>Ruthe</user>
    <text>(Listof distribution Real Real) ..?</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:36:38.000017</ts>
    <user>Karry</user>
    <text>methinks `(-&amp;gt; (Listof (distribution Real Real)) (Listof Real)))`</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:37:09.000338</ts>
    <user>Ruthe</user>
    <text>cool thanks that works</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:37:17.000297</ts>
    <user>Ruthe</user>
    <text>so let me get this right</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:37:27.000503</ts>
    <user>Ruthe</user>
    <text>I don't know CS deeply</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:37:41.000069</ts>
    <user>Ruthe</user>
    <text>but distribution type is polymorphic..? or something</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:38:51.000059</ts>
    <user>Karry</user>
    <text>yes</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:39:06.000416</ts>
    <user>Karry</user>
    <text>```
(struct: (In Out) distribution ([pdf : (PDF In)]
                                [sample : (Sample Out)])
  #:transparent)
```</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:39:32.000235</ts>
    <user>Karry</user>
    <text>distributions are parameterized by an `In` and `Out` type</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:39:47.000519</ts>
    <user>Ruthe</user>
    <text>hum ok</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:39:57.000206</ts>
    <user>Ruthe</user>
    <text>guess I have to study some more hehe :wink:</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:40:04.000105</ts>
    <user>Ruthe</user>
    <text>but seems to working now</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:41:27.000273</ts>
    <user>Karry</user>
    <text>I think the docs here should probably be more clear about the `distribution` (and other such) type: &lt;https://docs.racket-lang.org/math/Distribution_Types_and_Operations.html?q=bernoulli-dist&gt;</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:43:10.000021</ts>
    <user>Ruthe</user>
    <text>to be honest I didn't read the whole docs I just went in intuition</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:43:22.000212</ts>
    <user>Ruthe</user>
    <text>but I did lookup distribution</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:43:41.000304</ts>
    <user>Ruthe</user>
    <text>but I didn't understand at the time what In and Out was</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:44:22.000267</ts>
    <user>Ruthe</user>
    <text>thanks for the help &lt;@Karry&gt; this is great</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:45:06.000459</ts>
    <user>Ruthe</user>
    <text>was afraid I wouldn't be able to use Typed Racket (which without the speed gains would maybe make my application to slow to work with in regular Racket)</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:45:33.000165</ts>
    <user>Ruthe</user>
    <text>Small but helpful community you've got :slightly_smiling_face:</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:45:44.000025</ts>
    <user>Karry</user>
    <text>I submitted an issue, FYI: &lt;https://github.com/racket/math/issues/18&gt;</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:47:27.000035</ts>
    <user>Ruthe</user>
    <text>I got to say even in it's problems Racket is interesting</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:47:28.000061</ts>
    <user>Ruthe</user>
    <text>hehe</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:47:37.000390</ts>
    <user>Karry</user>
    <text>xD</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:48:13.000286</ts>
    <user>Ruthe</user>
    <text>I spent sometime learning Julia, the problems were not at all easy to grasp or to appreciate</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:49:19.000072</ts>
    <user>Ruthe</user>
    <text>anyway will try and go over the Typed Racket Guide with more care</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:49:35.000149</ts>
    <user>Ruthe</user>
    <text>but it's great to have someone to talk to when you hit a wall</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:50:07.000322</ts>
    <user>Ruthe</user>
    <text>It's something I never really experienced as a Python programmer, you mostly just find stuff in stackoverflow</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T15:50:39.000464</ts>
    <user>Ruthe</user>
    <text>First time I started going into chat rooms was when I started learning languages besides Python</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T16:04:29.000413</ts>
    <user>Stormy</user>
    <text>I liked the little bit of Julia I learned. Don't have time to learn it right now, but very interesting language :slightly_smiling_face:</text>
  </message>
  <message conversation_id="624">
    <ts>2018-07-26T16:05:10.000396</ts>
    <user>Stormy</user>
    <text>They're also always looking for ppl to work on their compiler, if people are interested in that stuff (like an internship over summer, etc)</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:34:41.000304</ts>
    <user>Bertha</user>
    <text>Stackoverflow can be _OK_ for Racket questions, except certain times of year it gets depressing because so many people are looking for someone to do their Scheme or Racket homework. Then it's a lot of 
```
(cond( (car l) (cdr l)
               )
               (else( null?( cadr l
      )
    )
        )
)
```
:cry:</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:38:10.000372</ts>
    <user>Odis</user>
    <text>There is that…. :disappointed: I mean, I can handle (begrudgingly)

```
(define (foo x)
  (if blah
     (this that)
     (the other thing)
  )
)
```</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:38:37.000094</ts>
    <user>Odis</user>
    <text>But they can’t even manage something like that. :cry:</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:39:30.000462</ts>
    <user>Franklin</user>
    <text>Probably means they haven't found DrRacket/racket-mode yet.</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:40:02.000136</ts>
    <user>Franklin</user>
    <text>Try writing Racket/Scheme in a standard editor without paren-highlighting and automatic indentation.</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:40:26.000019</ts>
    <user>Odis</user>
    <text>I have…..when I answer their SO questions.</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:40:32.000486</ts>
    <user>Odis</user>
    <text>But ya, they probably haven’t found it yet.</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:40:53.000173</ts>
    <user>Odis</user>
    <text>(But I frequently just write the samples in the SO editor, because I’m lazy like that.)</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:41:24.000195</ts>
    <user>Odis</user>
    <text>BTW, &lt;@Eileen&gt;, is the background expander found in `drracket/private/expanding-place`?</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:41:32.000433</ts>
    <user>Odis</user>
    <text>(Or is there somewhere else I should look for it.)</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:46:40.000329</ts>
    <user>Eileen</user>
    <text>that’s part of it, yes.</text>
  </message>
  <message conversation_id="627">
    <ts>2018-07-26T16:48:28.000021</ts>
    <user>Odis</user>
    <text>Okay. I’m looking to emulate it to do other things in DrRacket, where would you recommend I start looking?</text>
  </message>
  <message conversation_id="628">
    <ts>2018-07-26T19:53:23.000075</ts>
    <user>Kim</user>
    <text>Is there a way to extract all the lexical information from a syntax object and pass that around? I may be wrong but I think the lexical information would contain things like file, line, column, etc.   I want to pass this information along. So, is there a way to bind that information in, a let block or something similar?</text>
  </message>
  <message conversation_id="628">
    <ts>2018-07-26T20:22:08.000027</ts>
    <user>Bertha</user>
    <text>&lt;@Kim&gt; You can get the source/location using these functions: &lt;https://docs.racket-lang.org/reference/stxops.html#(def._((quote._~23~25kernel)._syntax-source))&gt;</text>
  </message>
  <message conversation_id="629">
    <ts>2018-07-26T20:31:13.000011</ts>
    <user>Bertha</user>
    <text>More about how Racket represents syntax (including what I think of as "lexical" info or scopes): &lt;https://www.cs.utah.edu/plt/scope-sets/index.html&gt;</text>
  </message>
  <message conversation_id="628">
    <ts>2018-07-26T21:25:10.000188</ts>
    <user>Kim</user>
    <text>&lt;@Bertha&gt; thanks I'll check that out</text>
  </message>
  <message conversation_id="628">
    <ts>2018-07-26T21:48:55.000128</ts>
    <user>Kim</user>
    <text>btw just realized that you're the one that wrote "Fear of Macros" Thank you for writing that!</text>
  </message>
  <message conversation_id="629">
    <ts>2018-07-26T21:55:11.000153</ts>
    <user>Bertha</user>
    <text>You're welcome!</text>
  </message>
  <message conversation_id="630">
    <ts>2018-07-26T22:09:39.000105</ts>
    <user>Ola</user>
    <text>thanks</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:06:02.000051</ts>
    <user>Ruthe</user>
    <text>Good Morning Racketnam!</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:07:29.000125</ts>
    <user>Ruthe</user>
    <text>Let's Racket</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:37:04.000251</ts>
    <user>Ruthe</user>
    <text>So in TR to ensure that a function takes to arrays with the same size/shape do I use a contract or is there a way to do it without</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:37:41.000180</ts>
    <user>Franklin</user>
    <text>array as in math/array ?</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:37:45.000241</ts>
    <user>Ruthe</user>
    <text>yes :thumbsup:</text>
  </message>
  <message conversation_id="632">
    <ts>2018-07-27T06:40:21.000059</ts>
    <user>Franklin</user>
    <text>Just checked the matrix implementation. Didn't learn anything :slightly_smiling_face:</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:40:25.000094</ts>
    <user>Franklin</user>
    <text>`(define-type (Matrix A) (Array A))`</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:42:35.000143</ts>
    <user>Ruthe</user>
    <text>from what I understood a matrix is just a 2d array right? and since I do have to deal with some arrays bigger then 2d I thought I better stick to math/array</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:43:10.000007</ts>
    <user>Ruthe</user>
    <text>although in this particular case it would be a 2d array / matrix</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:43:35.000124</ts>
    <user>Ruthe</user>
    <text>but I need them to be the same size</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:43:39.000250</ts>
    <user>Franklin</user>
    <text>Yes. I just wanted to check whether the Matrix type contained information on the shape. It didn't.</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:43:57.000089</ts>
    <user>Franklin</user>
    <text>So a contract sounds a nice approach.</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:44:23.000101</ts>
    <user>Ruthe</user>
    <text>ok :slightly_smiling_face: I'll give that a try</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:44:29.000070</ts>
    <user>Ruthe</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:45:31.000256</ts>
    <user>Ruthe</user>
    <text>by the way if I want an argument to be a 1/0 Array is ```(Array (U Zero One))``` the best approach? Or is there a number type that's more adequate?</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:46:03.000027</ts>
    <user>Franklin</user>
    <text>Don't know.</text>
  </message>
  <message conversation_id="631">
    <ts>2018-07-27T06:47:15.000235</ts>
    <user>Ruthe</user>
    <text>by the way in terms of testing TR is it good practice to have test cases for the output types or is that too redundant?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:41:10.000162</ts>
    <user>Ruthe</user>
    <text>hey once again</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:41:28.000006</ts>
    <user>Ruthe</user>
    <text>can someone help me figure out how to use unfold from srfi/1</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:42:05.000149</ts>
    <user>Ruthe</user>
    <text>I want to unfold a function x times (not sure if I am describing this right)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:43:09.000066</ts>
    <user>Franklin</user>
    <text>So you want to generate the list `(list (f 0) (f 1) ... (f (- x 1)))` ?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:46:29.000059</ts>
    <user>Franklin</user>
    <text>```   #lang racket
    (require (only-in srfi/1 unfold))
    (define (f x) (* x x))
    (unfold (λ (x) (= x 10))  ; last seed value? 
            f                 ; seed to value
            add1              ; next seed value
            0)                ; first seed value```</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:47:19.000082</ts>
    <user>Ruthe</user>
    <text>hum not quite I think</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:48:04.000245</ts>
    <user>Ruthe</user>
    <text>more like ```(list (f 0) (f (f 0)) (f (f (f 0))))``` etc</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:49:19.000244</ts>
    <user>Ruthe</user>
    <text>till f has been nested f times</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:50:07.000127</ts>
    <user>Ruthe</user>
    <text>ah yes that looks right</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:50:12.000224</ts>
    <user>Ruthe</user>
    <text>now that I ran it</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:50:38.000003</ts>
    <user>Ruthe</user>
    <text>thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:50:51.000097</ts>
    <user>Ruthe</user>
    <text>or hang on</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:51:05.000233</ts>
    <user>Ruthe</user>
    <text>no still think not quite what I wanted</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:52:12.000166</ts>
    <user>Ruthe</user>
    <text>some pointed to unfold in another chat</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:52:16.000316</ts>
    <user>Ruthe</user>
    <text>for what I described</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:52:22.000277</ts>
    <user>Ruthe</user>
    <text>but never used it</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:52:58.000332</ts>
    <user>Ruthe</user>
    <text>ok a concrete example</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:53:22.000201</ts>
    <user>Franklin</user>
    <text>If 0 is the seed, and f is the next seed function then unfold computes that list.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:53:51.000172</ts>
    <user>Franklin</user>
    <text>The only tricky thing is for unfold to know when to stop.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:54:50.000219</ts>
    <user>Ruthe</user>
    <text>I want someting like ```(f 3 sqr 2)``` which gives would give ```(list (sqr 2) (sqr (sqr 2)) (sqr (sqr (sqr 2))))``` where 3 is the depth (?) sqr the function to apply and 2 the initial value</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:55:54.000129</ts>
    <user>Ruthe</user>
    <text>if you get my thought process</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:56:01.000161</ts>
    <user>Ruthe</user>
    <text>it's basically to run a simulation</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:56:04.000046</ts>
    <user>Franklin</user>
    <text>So you have to keep track of two values: the number of times f has been applied to it self and the list of previous values.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:57:02.000110</ts>
    <user>Ruthe</user>
    <text>hum ok, it should be possible to do that with fold right?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:57:09.000188</ts>
    <user>Ruthe</user>
    <text>unfold</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:57:10.000139</ts>
    <user>Franklin</user>
    <text>```(require (only-in srfi/1 unfold))
(define (f x) (list 'f x))
(struct seed (i x))
(unfold (match-lambda [(seed i x) (= i 10)])             ; stop?
        seed-x                                           ; seed to value
        (match-lambda [(seed i x) (seed (+ i 1) (f x))]) ; next
        (seed 0 0))                                      ; initial seed```</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T07:59:52.000153</ts>
    <user>Ruthe</user>
    <text>hum ok!</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:00:58.000044</ts>
    <user>Franklin</user>
    <text>Your example becomes:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:01:02.000084</ts>
    <user>Franklin</user>
    <text>```#lang racket
(require (only-in srfi/1 unfold))
(define (f x) (sqr x))
(struct seed (i x))
(unfold (match-lambda [(seed i x) (= i 5)])              ; stop?
        seed-x                                           ; seed to value
        (match-lambda [(seed i x) (seed (+ i 1) (f x))]) ; next
        (seed 0 2))                                      ; initial seed
```</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:01:35.000023</ts>
    <user>Ruthe</user>
    <text>guess the last part can be wrapped into a function right?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:01:38.000237</ts>
    <user>Ruthe</user>
    <text>right?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:01:43.000182</ts>
    <user>Franklin</user>
    <text>sure</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:02:09.000236</ts>
    <user>Ruthe</user>
    <text>This looks great thanks :slightly_smiling_face:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:03:59.000062</ts>
    <user>Ruthe</user>
    <text>the seed struct is just syntatic sugar?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:04:00.000159</ts>
    <user>Franklin</user>
    <text>Compare a loop:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:04:05.000161</ts>
    <user>Franklin</user>
    <text>```(let loop ([i 0] [x 2] [xs '()])
  (if (= i 5)
      (reverse xs)
      (loop (+ i 1) (f x) (cons x xs))))```</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:04:30.000097</ts>
    <user>Ruthe</user>
    <text>ah ok</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:04:34.000308</ts>
    <user>Ruthe</user>
    <text>looks a bit simpler hehe</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:04:43.000297</ts>
    <user>Ruthe</user>
    <text>and it's still in functional style no?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:04:45.000271</ts>
    <user>Thaddeus</user>
    <text>I was about to post that :stuck_out_tongue:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:04:57.000226</ts>
    <user>Franklin</user>
    <text>yes, still functional</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:06:24.000314</ts>
    <user>Ruthe</user>
    <text>any suggestions for a name hehe, simulate sounds to specific</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:06:33.000190</ts>
    <user>Ruthe</user>
    <text>to wrap it up in a function</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:06:51.000101</ts>
    <user>Ruthe</user>
    <text>loop-n-times ?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:07:06.000020</ts>
    <user>Ruthe</user>
    <text>or not quite</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:07:52.000372</ts>
    <user>Franklin</user>
    <text>nest-list ?  &lt;http://reference.wolfram.com/language/ref/NestList.html&gt;</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:10:55.000208</ts>
    <user>Ruthe</user>
    <text>cool</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:11:06.000075</ts>
    <user>Ruthe</user>
    <text>would that be useful to add in one of the racket libraries?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:11:28.000226</ts>
    <user>Franklin</user>
    <text>I wouldn't be surprised if it's already there :slightly_smiling_face:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:11:41.000148</ts>
    <user>Ruthe</user>
    <text>yeah I was wondering that</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:12:31.000196</ts>
    <user>Ruthe</user>
    <text>I looked up nest-list, that syntax doesn't show up, but maybe by another name ?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:12:40.000315</ts>
    <user>Ruthe</user>
    <text>I did feel it most be a standard kind function</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:12:50.000172</ts>
    <user>Franklin</user>
    <text>But it's useful alright.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:13:26.000269</ts>
    <user>Ruthe</user>
    <text>I mean it feels a bit like a map, filter, reduce kind of function no?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:14:13.000318</ts>
    <user>Franklin</user>
    <text>Yes. Always fun to find new list functions.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:14:16.000296</ts>
    <user>Franklin</user>
    <text>&lt;http://reference.wolfram.com/language/guide/ListManipulation.html&gt;</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:15:55.000293</ts>
    <user>Ruthe</user>
    <text>hehe whenever I hear of Wolfram Language the languages as weapons cartoon always comes to mind</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:16:38.000301</ts>
    <user>Ruthe</user>
    <text>&lt;https://9gag.com/gag/anXEbe0/if-programming-languages-were-weapons&gt;</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:17:39.000082</ts>
    <user>Ruthe</user>
    <text>hum wonder if this is the original link &lt;https://www.technotification.com/2017/10/if-programming-languages-were-weapons.html&gt;</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:18:37.000161</ts>
    <user>Ruthe</user>
    <text>13. Mathematica is a low earth orbit projectile cannon, it could probably do amazing things if only anyone could actually afford one.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:25:18.000238</ts>
    <user>Ruthe</user>
    <text>Looks alright yes?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:25:52.000283</ts>
    <user>Ruthe</user>
    <text>should be easy to add types no..?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:25:59.000141</ts>
    <user>Ruthe</user>
    <text>for TR</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:26:38.000056</ts>
    <user>Franklin</user>
    <text>Yes. Only one nit: rename `expr` to something like `seed`. Mathematica is not call by value, so it makes sense for them to use `expr`.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:26:55.000198</ts>
    <user>Ruthe</user>
    <text>hum ok!</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:27:14.000124</ts>
    <user>Ruthe</user>
    <text>but keeping a similar order of args makes sense no?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:27:29.000204</ts>
    <user>Franklin</user>
    <text>yes</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:28:17.000301</ts>
    <user>Ruthe</user>
    <text>onething about TR</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:28:55.000240</ts>
    <user>Ruthe</user>
    <text>is the standard to have the separate ```(: etc)``` or to have the types in the function itself?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:29:28.000286</ts>
    <user>Ruthe</user>
    <text>```(define (f [i : Integer] (body))```</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:29:42.000354</ts>
    <user>Franklin</user>
    <text>I don't know what's standard. I like to use `(: ... )` before the function.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:31:18.000244</ts>
    <user>Ruthe</user>
    <text>I mean since I tried a little Julia and Haskell my first instinct was to place it in the function itself, but I did notice sometimes it's waymore compact to place it in `(: ...)`</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:38:45.000236</ts>
    <user>Ruthe</user>
    <text>anyways for the help &lt;@Franklin&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T08:38:50.000117</ts>
    <user>Ruthe</user>
    <text>off to lunch</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:42:15.000407</ts>
    <user>Ruthe</user>
    <text>Ok so I think I've got the general jist of the typing for the nest-list function, but I have this problem `. Type Checker: cannot apply a function with unknown arity;
 function `f' has type Procedure which cannot be applied in: (f x)` which I kind of understand, but not sure what to do about it</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:42:32.000436</ts>
    <user>Ruthe</user>
    <text>plus I think the `Any` is probably not great idea</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:42:47.000093</ts>
    <user>Ruthe</user>
    <text>do I have to do some kind of polymorphic function..?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:42:52.000390</ts>
    <user>Ruthe</user>
    <text>instead</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:43:18.000529</ts>
    <user>Ruthe</user>
    <text>or not really</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:44:04.000543</ts>
    <user>Franklin</user>
    <text>Replace `Procedure` with the type of an Any to Any function.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:44:23.000053</ts>
    <user>Ruthe</user>
    <text>so (-&amp;gt; Any Any) ..?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:44:24.000442</ts>
    <user>Ruthe</user>
    <text>or..?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:44:38.000274</ts>
    <user>Ruthe</user>
    <text>I'll admit I am a bit out of my depth :stuck_out_tongue:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:44:49.000504</ts>
    <user>Ruthe</user>
    <text>(but giving it a try anyways)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:46:21.000249</ts>
    <user>Ruthe</user>
    <text>guess not hehe</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:46:38.000091</ts>
    <user>Ruthe</user>
    <text>```&amp;gt; (nest-list sqr 2 3)
. Type Checker: type mismatch
  expected: (-&amp;gt; Any Any)
  given: (case-&amp;gt;
          (-&amp;gt; Zero Zero)
          (-&amp;gt; One One)
          (-&amp;gt; Positive-Byte Positive-Index)
          (-&amp;gt; Byte Index)
          (-&amp;gt; Positive-Integer Positive-Integer)
          (-&amp;gt; Integer Nonnegative-Integer)
          (-&amp;gt; Positive-Exact-Rational Positive-Exact-Rational)
          (-&amp;gt; Exact-Rational Nonnegative-Exact-Rational)
          (-&amp;gt; Flonum Nonnegative-Flonum)
          (-&amp;gt; Single-Flonum Nonnegative-Single-Flonum)
          (-&amp;gt; Inexact-Real Nonnegative-Inexact-Real)
          (-&amp;gt; Real Nonnegative-Real)
          (-&amp;gt; Float-Complex Float-Complex)
          (-&amp;gt; Single-Flonum-Complex Single-Flonum-Complex)
          (-&amp;gt; Inexact-Complex Inexact-Complex)
          (-&amp;gt; Exact-Number Exact-Number)
          (-&amp;gt; Number Number)) in: sqr```</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:47:02.000208</ts>
    <user>Ruthe</user>
    <text>None</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:49:38.000071</ts>
    <user>Ruthe</user>
    <text>ah ok it's because sqr is polymorphic?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:50:12.000505</ts>
    <user>Ruthe</user>
    <text>hum how do I specify the type for accepting a polymorphic function ..?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:51:04.000510</ts>
    <user>Franklin</user>
    <text>Well, we know that the input and output of f needs to be the same type as seed.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:51:36.000343</ts>
    <user>Ruthe</user>
    <text>oh hum but actually what I am thinking of might not have the same type</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:51:47.000041</ts>
    <user>Ruthe</user>
    <text>in fact I was wondering why 2 was in the list</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:52:22.000188</ts>
    <user>Ruthe</user>
    <text>ah no yeah your right</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:52:45.000476</ts>
    <user>Ruthe</user>
    <text>but I'm wondering if that does what I was wanting</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:53:00.000388</ts>
    <user>Ruthe</user>
    <text>probably</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:54:23.000402</ts>
    <user>Ruthe</user>
    <text>Think I got it</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:54:31.000088</ts>
    <user>Ruthe</user>
    <text>does that make sense?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:55:41.000140</ts>
    <user>Franklin</user>
    <text>It does. I am wondering how we can get the output type to be `(Listof A)`?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:56:16.000247</ts>
    <user>Franklin</user>
    <text>Note:   You don't need to give types to i and x. They can be inferred.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:56:29.000487</ts>
    <user>Ruthe</user>
    <text>ok yeah I felt it was overkill</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:56:52.000485</ts>
    <user>Franklin</user>
    <text>`[xs : (Listof A) '()]`  works</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:57:26.000168</ts>
    <user>Ruthe</user>
    <text>Like this yeah? (was giving it a try)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:57:36.000252</ts>
    <user>Franklin</user>
    <text>yes</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:57:57.000114</ts>
    <user>Ruthe</user>
    <text>```&amp;gt; (nest-list sqr 2 5)
- : (Listof Positive-Integer)
'(2 4 16 256 65536)```</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:57:59.000093</ts>
    <user>Ruthe</user>
    <text>cool</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:58:13.000573</ts>
    <user>Franklin</user>
    <text>Also you can remove  `: (Listof A)` from `(let loop : (Listof A)`</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:58:39.000058</ts>
    <user>Ruthe</user>
    <text>nice :slightly_smiling_face:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:58:54.000228</ts>
    <user>Ruthe</user>
    <text>by the way I came across let: is that of any use in this case?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:59:13.000040</ts>
    <user>Ruthe</user>
    <text>didn't quite understand it fully, but I had the impression I could use it</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T09:59:41.000487</ts>
    <user>Ruthe</user>
    <text>but it's probably not need here yeah?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T10:00:34.000049</ts>
    <user>Franklin</user>
    <text>I think `let:` is from the first version of typed racket.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T10:00:43.000448</ts>
    <user>Franklin</user>
    <text>No reason not to use let.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T10:01:09.000184</ts>
    <user>Ruthe</user>
    <text>hum ok!</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T10:01:15.000280</ts>
    <user>Ruthe</user>
    <text>Thanks for the help again :slightly_smiling_face:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T10:10:49.000392</ts>
    <user>Ruthe</user>
    <text>Seems to work alright</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T10:23:14.000019</ts>
    <user>Ruthe</user>
    <text>I still haven't quite understood how to use rackunit with typed racket</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T10:23:35.000150</ts>
    <user>Ruthe</user>
    <text>I mean I understand I have to annotate rackunit from the messages</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T10:23:54.000302</ts>
    <user>Ruthe</user>
    <text>with require/typed</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T10:24:31.000155</ts>
    <user>Ruthe</user>
    <text>ah... I just need to change rackunit to typed/rackunit ?? Hehe ok?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:17:13.000176</ts>
    <user>Ruthe</user>
    <text>Based on what I learnt today changed some of the stuff I was working on yesterday, does this make sense..? It seems to work fine.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:25:39.000391</ts>
    <user>Ruthe</user>
    <text>Maybe this is better?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:29:35.000130</ts>
    <user>Monserrate</user>
    <text>&lt;@Ruthe&gt; in general I recommend `in-range` instead of `range` (probably the docs should suggest this)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:29:53.000150</ts>
    <user>Ruthe</user>
    <text>hum ok! sorry python habit</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:31:38.000011</ts>
    <user>Ruthe</user>
    <text>is that because range outputs and actual list while in-range outputs comething that can be iterated over?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:32:57.000398</ts>
    <user>Monserrate</user>
    <text>yes -- you can iterate over a list too, but there's no reason to create the intermediate list</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:33:03.000084</ts>
    <user>Monserrate</user>
    <text>you can even just write `n`</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:33:54.000317</ts>
    <user>Ruthe</user>
    <text>n?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:34:06.000217</ts>
    <user>Ruthe</user>
    <text>ah!</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:34:20.000174</ts>
    <user>Ruthe</user>
    <text>`(for/list [i n] ...)` yes?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:38:51.000519</ts>
    <user>Ruthe</user>
    <text>hum can't seem to do it without a `(in-range n)`</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:40:01.000434</ts>
    <user>Monserrate</user>
    <text>it works for me ... `(define (prior-samples n priors) (for/list ([i n]) (prior-sample priors)))`</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:41:05.000117</ts>
    <user>Ruthe</user>
    <text>ah!</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:41:09.000393</ts>
    <user>Ruthe</user>
    <text>I was missing the []</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:43:37.000442</ts>
    <user>Ruthe</user>
    <text>thanks samth :slightly_smiling_face:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T12:50:59.000475</ts>
    <user>Glynda</user>
    <text>Going to start reading the reference manual tonight. That should get me into racket, as it looks interesting enough.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:10:35.000306</ts>
    <user>Ruthe</user>
    <text>by the way is there a way to get DrRacket to eat less memory</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:11:44.000299</ts>
    <user>Ruthe</user>
    <text>sometimes it comes all the way up to 1.5 GB without doing run. I understood it continuoslty check your code and reports errors, is that the reason for the memory use?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:12:46.000272</ts>
    <user>Ruthe</user>
    <text>it's nice to have the error feedback, but I would be okay just rerunning and  get some more memory in exchange</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:13:19.000236</ts>
    <user>Ruthe</user>
    <text>I already have one memory junky called firefox hehe</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:23:10.000007</ts>
    <user>Ruthe</user>
    <text>Cool I didn't know FrTime was part of the Racket ecosystem</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:23:43.000384</ts>
    <user>Ruthe</user>
    <text>I had read about it in the programming paradigms for dummies chapter of Van Roy</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:24:23.000004</ts>
    <user>Ruthe</user>
    <text>is it possibility to combine something written in FrTime to some TR and regular Racket?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:24:50.000102</ts>
    <user>Ruthe</user>
    <text>(I saw it was there in the tools options)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:24:57.000178</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Given that the cache files produced by `expander/run` appear to be the results of calling `compile`, what distinguishes them from “real” bytecode files?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:25:39.000051</ts>
    <user>Franklin</user>
    <text>&lt;@Ruthe&gt; You need to check the docs of FrTime.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:26:34.000225</ts>
    <user>Ruthe</user>
    <text>hehe ok, yeah sorry I should do that :stuck_out_tongue:!</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:28:35.000348</ts>
    <user>Ruthe</user>
    <text>the only thing is they are just a list of functions</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:29:02.000265</ts>
    <user>Franklin</user>
    <text>there is also a paper somewhere</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:29:20.000504</ts>
    <user>Franklin</user>
    <text>and some demo programs</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:29:42.000470</ts>
    <user>Ruthe</user>
    <text>yes think I'll try the demos! I saw there is a thesis?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:29:48.000280</ts>
    <user>Ruthe</user>
    <text>&lt;https://pdfs.semanticscholar.org/87be/e4d4becd0803e97c6acfd20fa09b9207c871.pdf&gt;</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:30:00.000094</ts>
    <user>Ruthe</user>
    <text>this one right?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:32:28.000460</ts>
    <user>Ruthe</user>
    <text>looks interesting</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:32:42.000024</ts>
    <user>Ruthe</user>
    <text>and he gets into some code straight away (wasn't expecting that)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:32:53.000026</ts>
    <user>Ruthe</user>
    <text>not sure I got the time to read it for now :stuck_out_tongue:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:32:58.000405</ts>
    <user>Ruthe</user>
    <text>but really cool</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:33:47.000455</ts>
    <user>Ruthe</user>
    <text>ah is this the paper? &lt;https://cs.brown.edu/~sk/Publications/Papers/Published/ck-frtime/paper.pdf&gt;</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:34:50.000143</ts>
    <user>Franklin</user>
    <text>Here is the paper  &lt;ftp://ftp.cs.brown.edu/pub/techreports/03/cs03-20.ps.Z&gt;</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:35:16.000038</ts>
    <user>Franklin</user>
    <text>(it's in postscript, so hope you aren't on Windows)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:47:01.000512</ts>
    <user>Ruthe</user>
    <text>Nono, I am in good all Linux (Manjaro Linux)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:47:19.000152</ts>
    <user>Ruthe</user>
    <text>sorry Firefox, DrRacket and Zotero decided I was having too much fun</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:47:26.000353</ts>
    <user>Ruthe</user>
    <text>and ground my computer to a halt hehe</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:47:57.000043</ts>
    <user>Ruthe</user>
    <text>I still don't get how much RAM these things consume</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:48:38.000005</ts>
    <user>Ruthe</user>
    <text>I mean I think 128 mb was a party back when I was a kid (1990s) and I remember having browser word and some other things open</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:49:10.000033</ts>
    <user>Ruthe</user>
    <text>on Mac OS 7 or what was it</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:49:55.000133</ts>
    <user>Ruthe</user>
    <text>I got 4gb RAM what the hell :stuck_out_tongue:?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T13:50:04.000435</ts>
    <user>Ruthe</user>
    <text>sure it's not humongous but still</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:02:22.000409</ts>
    <user>Ruthe</user>
    <text>there is actually the pdf version too</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:02:23.000237</ts>
    <user>Ruthe</user>
    <text>&lt;http://cs.brown.edu/research/pubs/techreports/reports/CS-03-20.html&gt;</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:09:42.000347</ts>
    <user>Ruthe</user>
    <text>&lt;@Franklin&gt; thanks for the report :slightly_smiling_face: that's really helpful</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:21:40.000073</ts>
    <user>Ruthe</user>
    <text>maybe a link to this particular report could be added in the docs of FrTime?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:21:52.000192</ts>
    <user>Ruthe</user>
    <text>and to the thesis also</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:49:45.000444</ts>
    <user>Ruthe</user>
    <text>any idea what I am getting wrong (just manually copied it over from the report)? `. match: syntax error in pattern in: ($ date sec min hr day mon yr _ _ _ _)`</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:50:03.000314</ts>
    <user>Ruthe</user>
    <text>from the frtime report above</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:50:23.000029</ts>
    <user>Franklin</user>
    <text>Try (date sec ...) instead.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:50:49.000508</ts>
    <user>Ruthe</user>
    <text>without the $ ? still gives me the same error..!</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:50:50.000152</ts>
    <user>Franklin</user>
    <text>I think frtime is to old, that the report uses the old match implementation, which had a slightly different syntax.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:51:06.000103</ts>
    <user>Ruthe</user>
    <text>hum ok! I'll look it up</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T14:51:21.000111</ts>
    <user>Franklin</user>
    <text>Alternatively add (require mzlib/match)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:02:44.000116</ts>
    <user>Ruthe</user>
    <text>hum just copied the list embedded in  the (seconds-&amp;gt;date seconds)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:03:05.000013</ts>
    <user>Ruthe</user>
    <text>but still get a syntax error in pattern</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:03:40.000093</ts>
    <user>Ruthe</user>
    <text>the length matches so not sure what's going own</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:04:11.000133</ts>
    <user>Ruthe</user>
    <text>think I'll just look at the demos :stuck_out_tongue:</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:04:18.000003</ts>
    <user>Ruthe</user>
    <text>they should be working no?</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:09:16.000425</ts>
    <user>Ruthe</user>
    <text>hum ok just needed to replace the $ with list</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:09:25.000088</ts>
    <user>Ruthe</user>
    <text>and I forgot the extra info</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:09:38.000025</ts>
    <user>Franklin</user>
    <text>(seconds-&amp;gt;date seconds)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:09:38.000081</ts>
    <user>Ruthe</user>
    <text>None</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:09:50.000014</ts>
    <user>Ruthe</user>
    <text>going to try with the original example</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:09:53.000404</ts>
    <user>Franklin</user>
    <text>returns a (signal (date* ...) ...)</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:10:40.000376</ts>
    <user>Ruthe</user>
    <text>so probably have to convert it into something else</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:10:43.000145</ts>
    <user>Franklin</user>
    <text>So something is not quite right.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:11:08.000091</ts>
    <user>Ruthe</user>
    <text>I mean there is this in the middle `(date* 19 9 20 27 7 2018 5 207 #t 3600 0 "WEST")`</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:11:31.000214</ts>
    <user>Ruthe</user>
    <text>which is what is supposed to ge t matched in the original script</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:12:08.000125</ts>
    <user>Franklin</user>
    <text>(value-now (seconds-&amp;gt;date seconds))</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:12:12.000323</ts>
    <user>Franklin</user>
    <text>gives the date</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:12:52.000249</ts>
    <user>Ruthe</user>
    <text>cool</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:12:59.000081</ts>
    <user>Franklin</user>
    <text>but that doesn't work</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:13:24.000242</ts>
    <user>Franklin</user>
    <text>the idea is that clock is the current date</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:13:46.000093</ts>
    <user>Franklin</user>
    <text>if we use value-now, the value of clock doesn't update automatically</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:14:04.000080</ts>
    <user>Franklin</user>
    <text>I think you need to try frtime in an older version of racket.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:14:16.000491</ts>
    <user>Ruthe</user>
    <text>hum ok!</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:14:33.000393</ts>
    <user>Franklin</user>
    <text>I am almost sure something has changed.</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:14:34.000418</ts>
    <user>Ruthe</user>
    <text>I saw something about streams in the docs somewhere</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:14:41.000085</ts>
    <user>Ruthe</user>
    <text>oh well!</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:14:46.000316</ts>
    <user>Ruthe</user>
    <text>interesting idea</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:14:54.000257</ts>
    <user>Ruthe</user>
    <text>maybe can look at it some other time</text>
  </message>
  <message conversation_id="633">
    <ts>2018-07-27T15:15:39.000046</ts>
    <user>Ruthe</user>
    <text>but looks like it's not what I am thinking</text>
  </message>
  <message conversation_id="634">
    <ts>2018-07-27T16:14:13.000235</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; is the fact that `make-base-namespace` doesn't work if you use it from a module that doesn't load `racket/base` a bug, or just something that can't work?</text>
  </message>
  <message conversation_id="634">
    <ts>2018-07-27T16:15:12.000051</ts>
    <user>Lynna</user>
    <text>It can't work</text>
  </message>
  <message conversation_id="634">
    <ts>2018-07-27T16:22:37.000234</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; can I ask you to take a look at this PR at some point? &lt;https://github.com/racket/draw/pull/12&gt;</text>
  </message>
  <message conversation_id="635">
    <ts>2018-07-27T18:35:38.000145</ts>
    <user>Carlita</user>
    <text>PPA for 7.0 is building... &lt;https://launchpad.net/~plt/+archive/ubuntu/racket/+build/15188809&gt;</text>
  </message>
  <message conversation_id="636">
    <ts>2018-07-27T20:40:51.000048</ts>
    <user>Glynda</user>
    <text>Does Racket have something similar to Clojure's (source) capability?</text>
  </message>
  <message conversation_id="634">
    <ts>2018-07-27T21:05:47.000089</ts>
    <user>Monserrate</user>
    <text>&lt;@Glynda&gt; what does that do?</text>
  </message>
  <message conversation_id="636">
    <ts>2018-07-27T21:06:34.000047</ts>
    <user>Glynda</user>
    <text>Shows you the code for a particular function and/or macro; for example, (source dotimes) would show you the code for dotimes.</text>
  </message>
  <message conversation_id="636">
    <ts>2018-07-27T21:09:10.000088</ts>
    <user>Monserrate</user>
    <text>No, racket doesn't keep the source code for things around</text>
  </message>
  <message conversation_id="636">
    <ts>2018-07-28T00:08:49.000005</ts>
    <user>Carlyn</user>
    <text>&lt;@Glynda&gt; fwiw, while &lt;@Monserrate&gt;’s answer is correct, both DrRacket and racket-mode have functionality to jump to the definition of a particular function</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T00:09:17.000071</ts>
    <user>Carlyn</user>
    <text>which is probably enough if you just want to find out how something is implemented</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T00:11:17.000058</ts>
    <user>Carlyn</user>
    <text>also, `,describe some-id` in XREPL (which I believe is loaded by default in modern versions of Racket) will tell you the module `some-id` is defined in</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:00:53.000029</ts>
    <user>Ruthe</user>
    <text>Good Morning Racket!</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:01:05.000045</ts>
    <user>Ruthe</user>
    <text>or more like good lunch around here</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:06:18.000069</ts>
    <user>Ruthe</user>
    <text>So was trying to find any existing functions like residual sum of squares and the likes (along the lines of metrics in scikit-learn &lt;http://scikit-learn.org/stable/modules/classes.html#sklearn-metrics-metrics&gt; ). Does anyone know of any package that is ok maintained with this type of stuff? The closest I found was &lt;https://github.com/n3mo/data-science&gt;</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:07:12.000014</ts>
    <user>Ruthe</user>
    <text>It's easy enough to program some but they already exist why reinvent the wheel</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:09:30.000012</ts>
    <user>Franklin</user>
    <text>&lt;@Ruthe&gt; &lt;http://docs.racket-lang.org/math/stats.html?q=stat&gt;</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:10:42.000043</ts>
    <user>Franklin</user>
    <text>&lt;http://planet.racket-lang.org/package-source/williams/science.plt/4/8/planet-docs/science/index.html&gt;</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:11:03.000049</ts>
    <user>Franklin</user>
    <text>Is there a modern package for the Science Collection ?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:28:08.000050</ts>
    <user>Ruthe</user>
    <text>yeah I checked out the general stats one</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:28:27.000005</ts>
    <user>Ruthe</user>
    <text>let me see the other link</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:30:57.000018</ts>
    <user>Ruthe</user>
    <text>hum seems like standard math has a lot of equivalent parts of the Science Collection</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:32:49.000019</ts>
    <user>Ruthe</user>
    <text>think I'll just put together a small metrics library</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:32:51.000111</ts>
    <user>Ruthe</user>
    <text>by the way</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:34:34.000058</ts>
    <user>Ruthe</user>
    <text>is (Sequenceof A) the more general approach to deal with list like things?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:36:56.000049</ts>
    <user>Ruthe</user>
    <text>another thing there isn't anything like a dataframe in Racket is there? I mean I am mostly okay with just arrays and lists of lists</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:40:11.000040</ts>
    <user>Ezra</user>
    <text>There is one by RayRacine: &lt;https://gitlab.com/RayRacine/munger/&gt;</text>
  </message>
  <message conversation_id="638">
    <ts>2018-07-28T07:40:53.000047</ts>
    <user>Ezra</user>
    <text>and Alex Harsanyi is working on his own version here: &lt;https://github.com/alex-hhh/ActivityLog2/tree/master/rkt/data-frame&gt;</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:41:06.000060</ts>
    <user>Ezra</user>
    <text>currently part of ActivityLog2</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T07:41:10.000052</ts>
    <user>Ruthe</user>
    <text>cool</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T08:09:29.000005</ts>
    <user>Ruthe</user>
    <text>Any idea how I can get the test to work? ```&amp;gt;  (array #[#[2 2] #[2 2]])
- : (Array Positive-Byte)
(array #[#[2 2] #[2 2]])
&amp;gt; (random-array #(2 2) 2 3)
- : (Array Integer)
(array #[#[2 2] #[2 2]])```</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T08:10:03.000007</ts>
    <user>Ruthe</user>
    <text>```--------------------
random-array tests
. ERROR

check-equal?: contract violation
  any-wrap/c: Unable to protect opaque value passed as `Any`
  value: (array #[#[2 2] #[2 2]])
  in: the 1st argument of
      (-&amp;gt;* (Any Any) (any/c) any/c)
  contract from: (interface for check-equal?)
  blaming: &amp;lt;pkgs&amp;gt;/rackunit-typed/rackunit/main.rkt
   (assuming the contract is correct)
  at: &amp;lt;pkgs&amp;gt;/rackunit-typed/rackunit/main.rkt:22.2
--------------------```</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T08:10:53.000031</ts>
    <user>Ruthe</user>
    <text>even more wierd is that ```&amp;gt; (equal? (random-array #(2 2) 2 3) (array #[#[2 2] #[2 2]]))
- : Boolean
#t```</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T08:13:11.000038</ts>
    <user>Ruthe</user>
    <text>don't quite understand why equal? works fine and check-equal? doesn't..!</text>
  </message>
  <message conversation_id="639">
    <ts>2018-07-28T12:06:00.000050</ts>
    <user>Ruthe</user>
    <text>So optimization coach says the following about `norm-l2`: `This expression has a Complex type, despite all its arguments being reals. If you do not want or expect complex numbers as results, you may want to restrict the type of the arguments or use float-specific operations (e.g. flsqrt), which may have a beneficial impact on performance.`. I get a green highlighting once I modify it to norm-l2-opt, is this the best way to perform this optimization (with the cast)?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:08:03.000098</ts>
    <user>Ruthe</user>
    <text>thanks for any feedback :slightly_smiling_face:</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:13:56.000056</ts>
    <user>Ruthe</user>
    <text>hum guess `real-&amp;gt;double-flonum` is better then `cast`, yes?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:30:54.000011</ts>
    <user>Ruthe</user>
    <text>yeah sorry for all the questions, it's just coming from a purely dynamically typed language like Python, guess I didn't expect this to be so hard sometimes</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:31:10.000055</ts>
    <user>Ruthe</user>
    <text>I understand the benefits, but doesn't make it easier</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:31:35.000035</ts>
    <user>Helena</user>
    <text>do you need to use `flsqrt` here?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:31:54.000037</ts>
    <user>Helena</user>
    <text>or, can you change `Real` to `Flonum` in the function type?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:32:19.000019</ts>
    <user>Ruthe</user>
    <text>hum I'll give it a try</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:32:35.000009</ts>
    <user>Ruthe</user>
    <text>Flonum instead of Float yeah?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:32:43.000050</ts>
    <user>Helena</user>
    <text>I don't remember the difference</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:33:44.000068</ts>
    <user>Helena</user>
    <text>oh, it looks like they're the same but `flonum` is from Scheme</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:35:51.000031</ts>
    <user>Ruthe</user>
    <text>hum from what I understood</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:36:10.000043</ts>
    <user>Ruthe</user>
    <text>to get the benefit of the optimization I have to use the fl... functions</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:36:16.000001</ts>
    <user>Ruthe</user>
    <text>can't seem to find a sum one though</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:38:07.000042</ts>
    <user>Ruthe</user>
    <text>meh this seems a bit to much for me now will just stick to non-optimized version which seems to at least work</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:38:37.000032</ts>
    <user>Ruthe</user>
    <text>strange that they don't have sum in flonum though</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:46:07.000047</ts>
    <user>Helena</user>
    <text>`fl+`</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:49:29.000061</ts>
    <user>Ruthe</user>
    <text>Don't think it does the same</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:50:06.000060</ts>
    <user>Ruthe</user>
    <text>I tried using a fold but the polymorphism is just a headache to understand</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:50:33.000005</ts>
    <user>Ruthe</user>
    <text>```#lang typed/racket

(require math/base
         typed/racket/flonum)```</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:51:48.000005</ts>
    <user>Ruthe</user>
    <text>None</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:51:54.000069</ts>
    <user>Helena</user>
    <text>oh, I see
```
#lang typed/racket
(require racket/flonum)
(: flsum (-&amp;gt; (Listof Flonum) Flonum))
(define (flsum f*)
  (for/fold ([acc : Flonum 1.0])
            ([f (in-list f*)])
    (fl+ acc f)))
```</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:52:52.000031</ts>
    <user>Ruthe</user>
    <text>hum ok! looks nice</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:53:04.000014</ts>
    <user>Ruthe</user>
    <text>but</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:53:07.000084</ts>
    <user>Ruthe</user>
    <text>1.0 ?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:53:12.000012</ts>
    <user>Helena</user>
    <text>here's one way to do the fold
```
#lang typed/racket
(require racket/flonum)
(foldl fl+ 1.0 (map exact-&amp;gt;inexact '(1 2 3)))
```</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:55:00.000043</ts>
    <user>Ruthe</user>
    <text>guess I can just use 0.0</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:55:03.000036</ts>
    <user>Helena</user>
    <text>1.0, to put me on the "right" side of the numeric tower &lt;http://docs.racket-lang.org/ts-reference/type-ref.html?q=Numeric%20Types#%28part._.Numeric_.Types%29&gt;</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:55:08.000086</ts>
    <user>Helena</user>
    <text>ahhh!</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:55:47.000009</ts>
    <user>Ruthe</user>
    <text>hum but do you always have to provide a initial value</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:56:48.000063</ts>
    <user>Ruthe</user>
    <text>I remember using reduce (which is a fold no?) in python don't remember having to give a first value</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:56:58.000035</ts>
    <user>Ruthe</user>
    <text>it would just use the first and go from there</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:57:19.000061</ts>
    <user>Ruthe</user>
    <text>but it's not unbearable :stuck_out_tongue:, just a bit more verbose I guess</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:58:18.000004</ts>
    <user>Ruthe</user>
    <text>so is `f*` a notation to describe a flonum list ?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:58:49.000063</ts>
    <user>Ruthe</user>
    <text>I mean convention?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:59:16.000065</ts>
    <user>Helena</user>
    <text>what did reduce do for an empty list?</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T12:59:25.000057</ts>
    <user>Helena</user>
    <text>I just like `*` for lists</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:00:06.000093</ts>
    <user>Ruthe</user>
    <text>good question! let me check</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:00:26.000060</ts>
    <user>Ruthe</user>
    <text>think it returned a null</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:00:35.000070</ts>
    <user>Ruthe</user>
    <text>or `None` to be more precise</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:00:38.000046</ts>
    <user>Ruthe</user>
    <text>but let me check</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:03:50.000079</ts>
    <user>Ruthe</user>
    <text>It actually gives an error :laughing:</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:04:21.000070</ts>
    <user>Ruthe</user>
    <text>```&amp;gt;&amp;gt;&amp;gt; reduce(lambda x, y: x + y, [1])
1
&amp;gt;&amp;gt;&amp;gt; reduce(lambda x, y: x + y, [1, 2])
3
&amp;gt;&amp;gt;&amp;gt; reduce(lambda x, y: x + y, [1, 1])
2
&amp;gt;&amp;gt;&amp;gt; reduce(lambda x, y: x + y, [])
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: reduce() of empty sequence with no initial value```</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:04:54.000013</ts>
    <user>Ruthe</user>
    <text>plus I had to write a lambda (I can import the + operator from somewhere, but to be honest it was quicker to just do the lambda)</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:05:12.000013</ts>
    <user>Ruthe</user>
    <text>let me try with the operator</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:06:38.000062</ts>
    <user>Ruthe</user>
    <text>same thing ```&amp;gt;&amp;gt;&amp;gt; reduce(operator.add, [])
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: reduce() of empty sequence with no initial value
&amp;gt;&amp;gt;&amp;gt; reduce(operator.add, [1])
1
```</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:07:30.000039</ts>
    <user>Ruthe</user>
    <text>what was even funnier is I was a bit confused I was getting an error to begin with, but then I realised I was already in Racket mode, wrote `(reduce ...)`</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:08:16.000099</ts>
    <user>Ruthe</user>
    <text>funny I have only been programming seriously for a few days and I already start feeling comfortable with that syntax</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:18:13.000076</ts>
    <user>Ruthe</user>
    <text>Seriously, shouldn't these function just be in the base flonum library :stuck_out_tongue:?</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:22:28.000036</ts>
    <user>Helena</user>
    <text>`flsum` is in `math/flonum`. Pull requests for new things would be welcome</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:25:08.000033</ts>
    <user>Ruthe</user>
    <text>ah what a relief hehe</text>
  </message>
  <message conversation_id="637">
    <ts>2018-07-28T13:25:59.000085</ts>
    <user>Ruthe</user>
    <text>but there isn't a flsqr so maybe I can work in that? Should be straightforward no..?</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:26:44.000006</ts>
    <user>Ruthe</user>
    <text>fl2sqr</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:27:43.000057</ts>
    <user>Ruthe</user>
    <text>..?</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:27:53.000063</ts>
    <user>Ruthe</user>
    <text>why no flsqr</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:27:57.000026</ts>
    <user>Ruthe</user>
    <text>flsqr/error</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:30:24.000050</ts>
    <user>Ruthe</user>
    <text>"Compute the same values as (fl+ x y), (fl- x y), (fl* x y), (fl/ x y), (fl* x x), (flsqrt x), (flexp x) and (flexpm1 x), but return the normally rounded-off low-order bits as the second value. The result is an unboxed double-double." &lt;https://docs.racket-lang.org/math/flonum.html?q=flsqr#%28def._%28%28lib._math%2Fflonum..rkt%29._flsqrt%2Ferror%29%29&gt;</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:31:18.000023</ts>
    <user>Ruthe</user>
    <text>Why flsqr/error exists and not flsqr..? Is it a problem? I mean if flexpt exists why not flsqr..?</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:32:52.000038</ts>
    <user>Helena</user>
    <text>I dunno. I guess the original author figured `(fl* x x)` was fine</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:33:00.000027</ts>
    <user>Helena</user>
    <text>I don't think there's a deep reason</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:36:34.000043</ts>
    <user>Ruthe</user>
    <text>hum.. little bit strange considering there is a regular sqr..! To submit a issue on racket/flonum is that in the main repository?</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:44:25.000007</ts>
    <user>Helena</user>
    <text>yes, but I think a better place is the `racket/math` repo</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:45:40.000048</ts>
    <user>Ruthe</user>
    <text>ok :wink:</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:48:22.000010</ts>
    <user>Helena</user>
    <text>oh, for your question about `check-equal?`, here's a small program with the same issue:</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:48:25.000018</ts>
    <user>Helena</user>
    <text>```
#lang typed/racket/base
(require/typed racket/base
  (void (-&amp;gt; Any Void)))
(struct foo ())
(void (foo))
```</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:49:17.000067</ts>
    <user>Helena</user>
    <text>Typed Racket works hard to protect types, so you can trust they predict how the program's actually going to run</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:49:27.000021</ts>
    <user>Helena</user>
    <text>and part of that is protecting typed values that flow into untyped code</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:49:53.000073</ts>
    <user>Helena</user>
    <text>usually the type is guide for how to protect things, but when the type is `Any` Typed Racket just tries its best to add protection</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:50:23.000002</ts>
    <user>Helena</user>
    <text>but it can't add protection if the value is an opaque struct (and TR doesn't have an inspector to learn about the struct's fields and their types)</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:51:00.000005</ts>
    <user>Helena</user>
    <text>so basically, `check-equal?` errors because its a Racket library using `Any` types ... this really should be fixed somehow</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:55:25.000008</ts>
    <user>Ruthe</user>
    <text>so let me see if I understood it's the array struct that is opaque..?</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:57:22.000044</ts>
    <user>Helena</user>
    <text>yes</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T13:59:47.000025</ts>
    <user>Helena</user>
    <text>and this program doesn't error: 
```
#lang typed/racket/base
(require/typed racket/base
  (void (-&amp;gt; Any Void)))
(struct foo () #:transparent)
(void (foo))
```</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:00:32.000031</ts>
    <user>Ruthe</user>
    <text>ah yes, I remember reading about the `#:transparent` keyword in one of the guides</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:01:35.000015</ts>
    <user>Ruthe</user>
    <text>hum ok, so the only way for me to get the test working is to cast it into the type I actually expect from the function I am writing (in this case `(Array Integer)`) right? I mean it's not perfect but..!</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:01:48.000043</ts>
    <user>Ruthe</user>
    <text>or annotate it..?</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:01:59.000083</ts>
    <user>Ruthe</user>
    <text>no annotate won't work will it</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:04:34.000001</ts>
    <user>Helena</user>
    <text>`(check equal? (array1) (array2))` might wor</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:05:03.000070</ts>
    <user>Ruthe</user>
    <text>ah ok! way simpler hehe</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:06:50.000007</ts>
    <user>Ruthe</user>
    <text>by the way think I actually manage to optimize the norm-... functions with the newfound knowledge, hehe. Optimization Coach gives me green lights on all functions</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:07:51.000004</ts>
    <user>Ruthe</user>
    <text>there is probably a nicer way of doing the last one</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:10:05.000070</ts>
    <user>Helena</user>
    <text>cool
(if it was me, I'd replace all the `sum (map ....)` with folds, but yeah this looks good)</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:13:29.000039</ts>
    <user>Ruthe</user>
    <text>hum yeah I was thinking about that, but still didn't get my head around folds totally</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:14:30.000017</ts>
    <user>Helena</user>
    <text>oh and by "fold" I really mean `for/fold`.</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:15:39.000026</ts>
    <user>Ruthe</user>
    <text>let me see if I can do it :slightly_smiling_face:</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:19:40.000106</ts>
    <user>Ruthe</user>
    <text>ah maybe tomorrow hehe... my brain went for a walk I think</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:36:27.000057</ts>
    <user>Ruthe</user>
    <text>I don't quite understand why my tests are giving a problem in some other file..! They are obviously problems inmy file... I've wrapped  my test-suite with a (define tests ...) and I am using (run-tests tests). Any ideas..?</text>
  </message>
  <message conversation_id="640">
    <ts>2018-07-28T14:46:49.000057</ts>
    <user>Ruthe</user>
    <text>I've named the individual tests but still wondering  why it does that..?</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T14:59:04.000112</ts>
    <user>Helena</user>
    <text>I'd need to see the files to help, but my favorite way to do unit tests is with a test submodule:
```
#lang racket/base
;; ... code here
(module+ test
  (require rackunit)
  (check-equal? 2 2)
)
```</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T14:59:22.000007</ts>
    <user>Helena</user>
    <text>and running `raco test file.rkt` does the tests, and otherwise they're out of the way</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:00:36.000103</ts>
    <user>Ruthe</user>
    <text>hum ok!</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:02:58.000068</ts>
    <user>Ruthe</user>
    <text>anyways thanks for all the help &lt;@Helena&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:03:30.000074</ts>
    <user>Ruthe</user>
    <text>I'll try and write down the name of everyone that helped for my acknowledgements :slightly_smiling_face:</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:04:07.000015</ts>
    <user>Ruthe</user>
    <text>here at the racket.slack</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:05:06.000075</ts>
    <user>Helena</user>
    <text>lol it's all good we're all trying to help racket succeed</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:05:15.000072</ts>
    <user>Ruthe</user>
    <text>I really like the language</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:05:25.000038</ts>
    <user>Ruthe</user>
    <text>after looking at the dozen so languages</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:05:39.000077</ts>
    <user>Ruthe</user>
    <text>it was the first I felt confident it would work for what I wanted</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:07:03.000056</ts>
    <user>Helena</user>
    <text>awesome thats great to hear</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:07:04.000039</ts>
    <user>Ruthe</user>
    <text>Haskell, Scala, D, Elixir, Oz (:laughing: ), Julia, Hy (Python) and a bunch of others</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:07:15.000028</ts>
    <user>Helena</user>
    <text>I hope we can fix the awkward/difficult parts</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:07:18.000013</ts>
    <user>Ruthe</user>
    <text>ah Clojure too!</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:08:13.000006</ts>
    <user>Ruthe</user>
    <text>That Racket had good base support for plotting, GUI and math (especially arrays/matrix) as well as just plain graphics was really enticing</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:09:04.000054</ts>
    <user>Ruthe</user>
    <text>couldn't find a combination of those that worked nicely in most languages beyond Python</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:09:31.000023</ts>
    <user>Ruthe</user>
    <text>clojure seems like it was okay a bunch of years back but the basic libraries are way to old</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:09:42.000014</ts>
    <user>Ruthe</user>
    <text>plus JVM ugh.</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:10:41.000064</ts>
    <user>Ruthe</user>
    <text>only Julia came close, but it's way to Beta for me</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:11:33.000006</ts>
    <user>Ruthe</user>
    <text>I mean they've been saying they're going to release a stable version soon for years now</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:11:51.000015</ts>
    <user>Ruthe</user>
    <text>plus most libraries are in constant flux</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T15:17:31.000034</ts>
    <user>Helena</user>
    <text>what made the clojure libraries feel old? (so racket can avoid getting old, too)</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:02:44.000009</ts>
    <user>Ruthe</user>
    <text>&lt;https://youtu.be/C1pYnpCgQL8&gt;</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:02:50.000022</ts>
    <user>Ruthe</user>
    <text>Well I heard a whole talk about how it got old, seems like they'll come around eventually but for now didn't seem like a great ecosystem to switch too </text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:03:39.000034</ts>
    <user>Ruthe</user>
    <text>Incanter was the main library a couple of years ago, but it has been worked on for a while now</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:05:01.000044</ts>
    <user>Ruthe</user>
    <text>My second choices to racket were julia and scala</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:05:13.000043</ts>
    <user>Ruthe</user>
    <text>Scala seems great for big data science</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:05:40.000018</ts>
    <user>Ruthe</user>
    <text>But for the kind of thing I'm used to in python didn't seem to helpful</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:05:55.000007</ts>
    <user>Ruthe</user>
    <text>Seemed like a steep learning curve</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:07:44.000016</ts>
    <user>Ruthe</user>
    <text>Plus I don't really love that everything is based on OO in Scala, even if it has good FP support. I mean it sounds in someways more true to the OO then Python and more scalable because of that</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:08:31.000100</ts>
    <user>Ruthe</user>
    <text>But I don't know, the whole Java ecosystem is a bit to strange for me (I would need to interface with a bunch of java libraries to get things done)</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:09:21.000034</ts>
    <user>Ruthe</user>
    <text>When your used to much of the simplicity of python as an ecosystem, it feels too much</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:10:33.000020</ts>
    <user>Ruthe</user>
    <text>DrRacket is great in that sense, I just started doing stuff without worrying about setting uo IDEs and for some languages having to get basic syntax highlighting working</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:11:19.000007</ts>
    <user>Ruthe</user>
    <text>Emacs and vim is just not something I have time to learn now</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:12:29.000019</ts>
    <user>Ruthe</user>
    <text>I've written most of my stuff in python with just gedit and geany+repl when things get a bit more messy (also gave Spyder a try)</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:13:07.000042</ts>
    <user>Ruthe</user>
    <text>Basically coming from Python, Racket was the first thing that just worked</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:13:19.000014</ts>
    <user>Ruthe</user>
    <text>Without having to worry too much</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:13:43.000054</ts>
    <user>Ruthe</user>
    <text>Although I haven't used the package manager it seems straightforward</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:14:25.000012</ts>
    <user>Ruthe</user>
    <text>And apart from the ecosystem I liked the language</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:16:38.000060</ts>
    <user>Ruthe</user>
    <text>I've been wanting to learn a lisp language for years now</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:16:52.000050</ts>
    <user>Ruthe</user>
    <text>Or at least a functional programming language</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:18:18.000029</ts>
    <user>Ruthe</user>
    <text>Ah you can add OCaml to the list, although I only looked at it very briefly since I couldn't get the libraries I wanted working</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:18:44.000004</ts>
    <user>Franklin</user>
    <text>&lt;@Ruthe&gt; Have a hunch, you'll enjoy this:  &lt;https://www.cs.umd.edu/~ntoronto/papers/toronto-2014cise-floating-point.pdf&gt;</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:19:21.000036</ts>
    <user>Ruthe</user>
    <text>Hehe I like the title</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:20:12.000022</ts>
    <user>Ruthe</user>
    <text>And nice graphs!</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:20:58.000071</ts>
    <user>Ruthe</user>
    <text>Thanks &lt;@Franklin&gt;  when I'm at the computer I'll look at it</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:21:10.000030</ts>
    <user>Franklin</user>
    <text>Oh btw. The function flsum  adds the numbers in an order that improves accuracy.</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:21:22.000039</ts>
    <user>Ruthe</user>
    <text>Ah nice!</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:21:55.000008</ts>
    <user>Ruthe</user>
    <text>It's working well for me in those little functions I wrote</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:26:50.000024</ts>
    <user>Franklin</user>
    <text>&lt;@Ruthe&gt; btw - Neil wrote plot, so don't be surprised the article has nice graphs :slightly_smiling_face:</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:27:53.000002</ts>
    <user>Ruthe</user>
    <text>"Test for nearness instead of equality". By the way for testing floating-point finction with `check-=` what is a reasonable epsilon</text>
  </message>
  <message conversation_id="642">
    <ts>2018-07-28T16:29:19.000037</ts>
    <user>Franklin</user>
    <text>depends</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:30:38.000017</ts>
    <user>Franklin</user>
    <text>Often you can try something small. Other times you needs to be more cautious.</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:33:53.000038</ts>
    <user>Ruthe</user>
    <text>Something like the error in the range of what you get when you do`(* 3 1.0/3.0)` (if I remember right that gives a really small error right?)</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:34:08.000041</ts>
    <user>Ruthe</user>
    <text>Or is that to rigid?</text>
  </message>
  <message conversation_id="642">
    <ts>2018-07-28T16:34:53.000039</ts>
    <user>Franklin</user>
    <text>Depends! But read the article. Neil shows how to debug floating point calculations.</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:35:05.000007</ts>
    <user>Ruthe</user>
    <text>Hum ok!</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:35:09.000062</ts>
    <user>Ruthe</user>
    <text>Will do</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:35:16.000039</ts>
    <user>Ruthe</user>
    <text>:slightly_smiling_face: </text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:38:29.000059</ts>
    <user>Ruthe</user>
    <text>By the way a channel just for typed racket could be useful no? Especially for questions on getting correct typing definitions and such</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:38:47.000091</ts>
    <user>Ruthe</user>
    <text>Who's interested?</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:41:25.000012</ts>
    <user>Ruthe</user>
    <text>You should see the julia slack there is so many channels hehe</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:42:36.000038</ts>
    <user>Ruthe</user>
    <text>Practically one for each core/popular library</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:43:27.000052</ts>
    <user>Monserrate</user>
    <text>there are many fewer of us, so mostly people just use this channel</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:44:00.000035</ts>
    <user>Ruthe</user>
    <text>Yeah understandable</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:44:51.000055</ts>
    <user>Ruthe</user>
    <text>But at the same time might help keep annoying people like me contained :joy: </text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:46:40.000071</ts>
    <user>Franklin</user>
    <text>I like a little life here. It only makes sense to make new channels when there are too much activity (and it becomes confusing to follow a discussion).</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:46:51.000059</ts>
    <user>Ruthe</user>
    <text>Plus at julia usually the core developers/maintainers/fans of a library kept a close eye in the related channel</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:47:04.000064</ts>
    <user>Ruthe</user>
    <text>Hehe sure</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:47:11.000037</ts>
    <user>Ruthe</user>
    <text>I know what you mean</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:48:08.000044</ts>
    <user>Ruthe</user>
    <text>Your probably right, but still hehe</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:50:31.000039</ts>
    <user>Ruthe</user>
    <text>Julia has about 1300 people in their &lt;#C06V96CKX|general&gt;  to give you an idea</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:52:19.000036</ts>
    <user>Ruthe</user>
    <text>And about 100-200 in the most popular library channels</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:56:31.000005</ts>
    <user>Ruthe</user>
    <text>On a completely different note</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:57:27.000012</ts>
    <user>Ruthe</user>
    <text>Does anyone know users / developers from Brazil</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:57:36.000029</ts>
    <user>Ruthe</user>
    <text>Or Portugal for the matter</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:57:54.000030</ts>
    <user>Ruthe</user>
    <text>I used to run a small computer school</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:58:16.000105</ts>
    <user>Ruthe</user>
    <text>Back there and think the kids would have really liked racket / 2htdp</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:58:46.000018</ts>
    <user>Ruthe</user>
    <text>When I go back might give it a try</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T16:58:57.000078</ts>
    <user>Ruthe</user>
    <text>As a social project</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:00:15.000063</ts>
    <user>Ruthe</user>
    <text>Think the ability to make little games or videos would be popular</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:00:52.000081</ts>
    <user>Helena</user>
    <text>(I think there are some people from Brazil on the mailing list)</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:01:04.000079</ts>
    <user>Ruthe</user>
    <text>Cool!</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:01:29.000020</ts>
    <user>Franklin</user>
    <text>Wasn't there a spanish mailing list at some point?</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:01:33.000043</ts>
    <user>Ruthe</user>
    <text>Probably not where I lived though hehe</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:01:50.000074</ts>
    <user>Ruthe</user>
    <text>State of Piauí</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:02:12.000070</ts>
    <user>Ruthe</user>
    <text>Almost in the middle of nowhere</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:02:50.000012</ts>
    <user>Ruthe</user>
    <text>Computer literacy is really low there</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:02:55.000074</ts>
    <user>Ruthe</user>
    <text>Where I lived</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:03:32.000026</ts>
    <user>Ruthe</user>
    <text>More likely for kids to have access to smartphones and tablets then computers</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:04:46.000009</ts>
    <user>Ruthe</user>
    <text>By the way is there any project on getting a racket working on android and a REPL to play around with</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:07:52.000023</ts>
    <user>Ruthe</user>
    <text>I heard in the racket manifesto talk of matthias that there was work on the ARM processor</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:08:27.000049</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/jeapostrophe/racket-android&gt; ?</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:09:03.000091</ts>
    <user>Franklin</user>
    <text>&lt;http://www.neilvandyke.org/racket-postmarketos/&gt;</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:09:24.000032</ts>
    <user>Ruthe</user>
    <text>Hehe just found the same github</text>
  </message>
  <message conversation_id="641">
    <ts>2018-07-28T17:11:49.000040</ts>
    <user>Ruthe</user>
    <text>But that's for deploying apps right?</text>
  </message>
  <message conversation_id="643">
    <ts>2018-07-28T19:22:08.000037</ts>
    <user>Carrol</user>
    <text>I’m guessing this is a bug in 7.0?

```
raco setup: error: during making for &amp;lt;pkgs&amp;gt;/oedipuslex
raco setup:   Users/ryan/Work/git/zenspider/schemers/oedipuslex/test.rkt:23:14: read-syntax: end-of-file following `|` in symbol
raco setup:     compiling: &amp;lt;pkgs&amp;gt;/oedipuslex/test.rkt
```

namely, that the path reported is missing the leading `/` (cc &lt;@Lynna&gt;) 

Possibly also that this used to work in 6.x… but I don’t know if things have been made stricter and now it is a legit failure or if it should have worked in 7. That’s separate at this point.</text>
  </message>
  <message conversation_id="643">
    <ts>2018-07-28T19:23:59.000011</ts>
    <user>Carrol</user>
    <text>(these were produced via migrating packages inside of drracket, if that matters)</text>
  </message>
  <message conversation_id="643">
    <ts>2018-07-28T19:31:55.000092</ts>
    <user>Carrol</user>
    <text>Looks like the package manager is already reporting an error on `metapict`… how was it compiling before?</text>
  </message>
  <message conversation_id="644">
    <ts>2018-07-28T19:34:03.000032</ts>
    <user>Marnie</user>
    <text>"oedipuslex" :+1:</text>
  </message>
  <message conversation_id="644">
    <ts>2018-07-28T19:34:29.000030</ts>
    <user>Marnie</user>
    <text>some top-tier naming right there</text>
  </message>
  <message conversation_id="644">
    <ts>2018-07-28T19:35:09.000022</ts>
    <user>Carrol</user>
    <text>:stuck_out_tongue:</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T05:31:22.000020</ts>
    <user>Ruthe</user>
    <text>Hey &lt;@Franklin&gt;, what's the danish Racket community like? I actually have a danish friend I was trying to convince to learn Racket, we did a few tutorials together when he came over and visited me a few weeks ago! Maybe I could point him to you guys if he decides to learn more!</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T07:02:24.000051</ts>
    <user>Ruthe</user>
    <text>hey are there any benchmarks for TR vs Racket and possibly other languages (say Python, C and SBCL?)</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T07:03:25.000004</ts>
    <user>Ruthe</user>
    <text>All the &lt;https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/racket.html&gt; seem to be for regular Racket, and since I read that the math library could be as much as 50x faster</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T07:03:31.000047</ts>
    <user>Ruthe</user>
    <text>I was wondering how TR compared</text>
  </message>
  <message conversation_id="646">
    <ts>2018-07-29T09:24:09.000029</ts>
    <user>Lynna</user>
    <text>Could it be that the current directory is "/" when the error is reported, so as a path is shown relative to the current directory, the "/" is just dropped?</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T12:29:11.000065</ts>
    <user>Ruthe</user>
    <text>Damn, I didn't say Good Morning Racketnam that's why no one answered :stuck_out_tongue:</text>
  </message>
  <message conversation_id="647">
    <ts>2018-07-29T12:49:09.000061</ts>
    <user>Carrol</user>
    <text>It's possible that on OSX the window manager launches the app in /... But the open dialog starts in home. Not sure. </text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:37:23.000063</ts>
    <user>Franklin</user>
    <text>&lt;@Ruthe&gt; Point him here and to the mailing list. I know that Scheme and Racket is used on some of the universities. I don't know of any user groups though.</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:38:09.000104</ts>
    <user>Ruthe</user>
    <text>hum ok :wink:!</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:38:13.000029</ts>
    <user>Ruthe</user>
    <text>Will do</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:42:47.000063</ts>
    <user>Carlyn</user>
    <text>&lt;@Ruthe&gt; FWIW, it sounds to me like you might be misinterpreting the effect of TR on performance. The math library is _not_ 50x faster than an equivalent library would be if written in regular (dynamically typed) Racket; rather, using the typed math library from untyped code can result in _up to a 50x *slowdown*_. This is not because typed code is especially fast or because untyped code is especially slow, but rather because, in the worst case, the _interaction between_ typed and untyped code can lead to significant overhead.</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:43:39.000008</ts>
    <user>Ruthe</user>
    <text>ah ok! Still it is faster to some degree no?</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:44:03.000048</ts>
    <user>Ruthe</user>
    <text>yeah come to think of the benchmarks 50x doesn't make sense..!</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:44:30.000034</ts>
    <user>Ruthe</user>
    <text>I mean it helps the compiler yes?</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:44:38.000059</ts>
    <user>Franklin</user>
    <text>&lt;@Carlyn&gt; Btw - do you have a copy of Lisp In Small Pieces? Queinnec has a nice explanation of dynamic scope.</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:44:53.000053</ts>
    <user>Ruthe</user>
    <text>actually I got a pdf but haven't read it</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:45:08.000041</ts>
    <user>Ruthe</user>
    <text>I actually came across it while looking at Lisps before settling on Racket</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:45:12.000083</ts>
    <user>Carlyn</user>
    <text>&lt;@Ruthe&gt; You should take a look at the paper _Is Sound Gradual Typing Dead?_ which includes benchmarks that explore the overhead of typed/untyped interaction. &lt;https://www2.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf&gt;</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:45:28.000025</ts>
    <user>Ruthe</user>
    <text>ok great :slightly_smiling_face:</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:45:30.000093</ts>
    <user>Ruthe</user>
    <text>thanks</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:46:53.000054</ts>
    <user>Ruthe</user>
    <text>Does Betteridge's law of headlines apply?</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:47:09.000016</ts>
    <user>Carlyn</user>
    <text>&lt;@Franklin&gt; I don’t, but I believe I understand dynamic scope pretty well… but I could be wrong. Everything I’ve read about dynamic scope has been consistent with my understanding (if we ignore concurrency) about how Racket parameters work. My message on the mailing list was mostly intended to get Matthias to explain why he thinks they’re so different. Perhaps you also understand what he’s getting at, though?</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:47:23.000055</ts>
    <user>Carlyn</user>
    <text>&lt;@Ruthe&gt; I think the authors would like to think so. :)</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:47:49.000070</ts>
    <user>Ruthe</user>
    <text>Hehe :slightly_smiling_face:</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:48:19.000029</ts>
    <user>Ruthe</user>
    <text>thanks for the links and info</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:49:50.000034</ts>
    <user>Ruthe</user>
    <text>By the way joking aside, this slack seems to have more talk at GMT+00 afternoon and evening, is it because most of you guys are in North America?</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:50:50.000063</ts>
    <user>Ruthe</user>
    <text>(GMT+01 to be more precise actually)</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:50:54.000071</ts>
    <user>Franklin</user>
    <text>I think you got it. But Queinnec has a really good explanation: he compares them, puts them in a historical context, has references etc. In other words LiSP is just the sort of book, you'll enjoy.</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:51:25.000002</ts>
    <user>Carlyn</user>
    <text>Sure, I believe you! Maybe I’ll see if anyone around here has a copy.</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:52:33.000045</ts>
    <user>Ola</user>
    <text>it’s a good book</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:54:09.000012</ts>
    <user>Ola</user>
    <text>I remember liking the Lisp-1, Lisp-2, …, Lisp-ω discussion</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T13:55:59.000066</ts>
    <user>Ruthe</user>
    <text>I can send you the pdf copy I got if you'd like</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T14:08:53.000016</ts>
    <user>Ruthe</user>
    <text>Hey &lt;@Carlyn&gt; I saw your talk on languages (think before yesterday) and that you mention ideas for graphical DSLs</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T14:09:34.000077</ts>
    <user>Ruthe</user>
    <text>At my lab they use Stella a lot for building system dynamic models</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T14:09:47.000007</ts>
    <user>Ruthe</user>
    <text>and I've been thinking for ages on building an alternative</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T14:09:56.000051</ts>
    <user>Ruthe</user>
    <text>fits nicely into the ideas you mention</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T14:10:04.000080</ts>
    <user>Ruthe</user>
    <text>Racket lookings promising for that</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T14:11:19.000031</ts>
    <user>Ruthe</user>
    <text>I tried to do something like that in PYthon as a library and although I got a GUI with a sort of similar looks to Stella, but didn't get the "guts" working</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T14:13:34.000081</ts>
    <user>Ruthe</user>
    <text>reckon it is way easier in Racket, especially considering there is a specification language for these sorts of models (XMILE &lt;https://docs.oasis-open.org/xmile/xmile/v1.0/csprd01/xmile-v1.0-csprd01.html&gt;)</text>
  </message>
  <message conversation_id="645">
    <ts>2018-07-29T14:40:39.000018</ts>
    <user>Helena</user>
    <text>&lt;@Ruthe&gt; I think the most helpful part of this paper for your question is the typed/untyped ratios in figures 4 and 5</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:18:29.000064</ts>
    <user>Carlyn</user>
    <text>Not a fan, &lt;@Helena&gt;? I’m only ribbing, I swear!</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:23:10.000076</ts>
    <user>Helena</user>
    <text>:) I just wanted to say "I'm a coauthor and I do not support this message"</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:24:31.000032</ts>
    <user>Carlyn</user>
    <text>I am genuinely curious, actually: how _do_ you feel about the current state of sound gradual typing? It’s been a couple years now since that paper, but it doesn’t seem very optimistic.</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:31:54.000068</ts>
    <user>Helena</user>
    <text>yes, and I'm always embarrassed about how little it seems like I've done to help</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:32:56.000006</ts>
    <user>Helena</user>
    <text>(1) I think we need to give up on the gradual typing dream --- that any combo of typed/untyped is going to run quickly</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:33:35.000044</ts>
    <user>Helena</user>
    <text>(2) I'm surprised how much better TR is. The benchmarks from that paper are still really slow, but the improvement is way bigger than I would have guessed</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:34:50.000023</ts>
    <user>Helena</user>
    <text>I'm hoping to get rid of the disclaimer on the math library before I graduate. But I'm not sure exactly how that's going to happen</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:48:37.000018</ts>
    <user>Carlyn</user>
    <text>That all makes sense and seems reasonable, and I appreciate your perspective! I’m really just an outsider into all this, so I don’t feel like I really even have an intuition for how big the improvement you mention actually is.</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:52:57.000086</ts>
    <user>Helena</user>
    <text>that's my problem too. I set up a page that describes the benchmarks, but there's nothing online where people can see the results for Racket v6.2 vs v7
(&lt;http://docs.racket-lang.org/gtp-benchmarks/index.html&gt;)</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T15:59:34.000027</ts>
    <user>Carlyn</user>
    <text>That’s a pretty cool scribble document!</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T16:09:57.000034</ts>
    <user>Helena</user>
    <text>None</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T16:10:04.000102</ts>
    <user>Helena</user>
    <text>Thanks. Here's a picture with 6.2 (blue) vs. 6.12 (orange) on a few benchmarks. There's a nice orange sunrise in 3, and the worst-cases (outside the 22x range) are even better --- though that's not likely to make anyone with a 20x slowdown happy.</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T16:12:14.000004</ts>
    <user>Carlyn</user>
    <text>It seems like a pretty fundamentally hard problem in certain edge cases, but it does seem like there are more non-fundamentally slow cases than one would hope for.</text>
  </message>
  <message conversation_id="648">
    <ts>2018-07-29T17:26:07.000050</ts>
    <user>Bertha</user>
    <text>Coming to Racket from C/C++, I thought in terms of "calling a function with arguments" or "passing arguments to a function".  Arguments or args for short.
Racketeers would often talk about "parameters" instead of arguments. (Also "apply" vs. "call", but I digress.)
I thought, OK, fine, different jargon.
Then I learned about the _other_ parameters (as in `parameterize`).
I thought gee that could be confusing.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T17:27:26.000027</ts>
    <user>Bertha</user>
    <text>In some sense you can treat them as "implicit" "extra" parameters to a function. Things that would be too tedious to supply explicitly all the time.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T17:29:50.000001</ts>
    <user>Bertha</user>
    <text>I don't have a formal CS education, so maybe I am wandering around here saying something that amounts to a simple, "Yes there's a _some Greek letter_ reduction for that, obvs". :smile:</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T17:32:50.000062</ts>
    <user>Franklin</user>
    <text>Had to google, but I think "parameter" is used by C programmers too.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T17:33:42.000025</ts>
    <user>Franklin</user>
    <text>I agree that reusing the word "parameter" for something else is confusing for new comers.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T17:35:41.000023</ts>
    <user>Franklin</user>
    <text>What do other languages call parameters (in the Racket sense)?</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T17:42:32.000029</ts>
    <user>Bertha</user>
    <text>Aside from Common Lisp and Emacs Lisp, I only know about "dynamic bindings" in Clojure: &lt;https://clojuredocs.org/clojure.core/binding&gt;</text>
  </message>
  <message conversation_id="650">
    <ts>2018-07-29T17:47:28.000061</ts>
    <user>Franklin</user>
    <text>"As of Clojure 1.3, vars need to be explicitly marked as ^:dynamic in order for
them to be dynamically rebindable"</text>
  </message>
  <message conversation_id="650">
    <ts>2018-07-29T17:47:48.000066</ts>
    <user>Franklin</user>
    <text>I bet the first version of clojure was an interpreter.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:05:40.000009</ts>
    <user>Franklin</user>
    <text>&lt;@Bertha&gt; I am porting the indentation functions in racket-mode. I am bit confused by this function:  &lt;https://github.com/greghendershott/racket-mode/blob/master/racket-indent.el#L358&gt;</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:06:22.000083</ts>
    <user>Franklin</user>
    <text>(let ((sym (intern-soft head)))
    (or (get sym 'racket-indent-function)
          ...)</text>
  </message>
  <message conversation_id="650">
    <ts>2018-07-29T19:07:51.000006</ts>
    <user>Franklin</user>
    <text>Does this mean a user can change the indentation function for a particular form, by setting the racket-indent-function property of the symbol?</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:10:40.000039</ts>
    <user>Bertha</user>
    <text>Emacs Lisp isn't just a Lisp 2, it's a Lisp 3!</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:10:54.000055</ts>
    <user>Bertha</user>
    <text>Seriously: &lt;https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Components.html#Symbol-Components&gt;</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:11:11.000007</ts>
    <user>Bertha</user>
    <text>And &lt;https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Properties.html#Symbol-Properties&gt;</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:13:20.000024</ts>
    <user>Bertha</user>
    <text>One use of this is to put a property on a symbol, like say `with-input-from-port`, whose "key" is _mode-name_-indent, and whose value is info about how to indent.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:13:58.000066</ts>
    <user>Bertha</user>
    <text>And then the function that does indentation for a mode, can use that as a kind of hash table to lookup a number or a function to do indent.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:14:29.000029</ts>
    <user>Bertha</user>
    <text>And so the user can put a value on a symbol for say their own custom macro, to set the indent.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:15:15.000052</ts>
    <user>Bertha</user>
    <text>That function is complicated b/c it's trying to ignore certain defaults that `scheme-mode` may have set up, but _not_ ignore values a user may have added.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:15:49.000031</ts>
    <user>Bertha</user>
    <text>"That function" = the one you linked</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:16:40.000031</ts>
    <user>Franklin</user>
    <text>Thanks for the explanation. I'll use a hash table instead - and store it in a buffer local variable.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:17:17.000024</ts>
    <user>Franklin</user>
    <text>I vaguely recall seeing something similar in Chez.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:17:37.000025</ts>
    <user>Bertha</user>
    <text>It was for (at least) this issue: &lt;https://github.com/greghendershott/racket-mode/issues/219&gt;</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:21:04.000085</ts>
    <user>Bertha</user>
    <text>I think conceptually symbol properties are more like a _global_ var that's `(hash/c symbol? (hash/c symbol? any/c))` -- globally, each symbol has a hashtable from symbol to any/c. But, that's Emacs. Not sure you need to do it like that.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:22:21.000123</ts>
    <user>Franklin</user>
    <text>You have a point. A global will do fine.</text>
  </message>
  <message conversation_id="649">
    <ts>2018-07-29T19:22:26.000057</ts>
    <user>Bertha</user>
    <text>Speaking of parameters, buffer-local vars are similar in some respects -- if you replace "buffer" with "thread".</text>
  </message>
  <message conversation_id="651">
    <ts>2018-07-29T22:32:54.000145</ts>
    <user>Helena</user>
    <text>&lt;@Carlyn&gt; I replied to the pango issue, happy to talk more about it here</text>
  </message>
  <message conversation_id="651">
    <ts>2018-07-29T22:33:25.000156</ts>
    <user>Helena</user>
    <text>I just want `(integer-in 100 1000)` to not be so mysterious in the docs, and I think that should be easy to fix in the next few days</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:35:17.000146</ts>
    <user>Ruthe</user>
    <text>Can someone  suggest a more in depth document/article/etc for the gui framework ?</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:35:40.000118</ts>
    <user>Ruthe</user>
    <text>I'm having trouble going through it but it looks really useful</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:42:32.000021</ts>
    <user>Franklin</user>
    <text>In depth tutorials on the GUI is something we lack.</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:42:42.000183</ts>
    <user>Franklin</user>
    <text>There is a small example in the docs: &lt;http://docs.racket-lang.org/gui/windowing-overview.html#%28part._.Creating_.Windows%29&gt;</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:43:23.000002</ts>
    <user>Franklin</user>
    <text>The gui library uses classes and objects, so maybe this can be of help too:</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:43:24.000103</ts>
    <user>Franklin</user>
    <text>&lt;http://www.ccs.neu.edu/home/matthias/Thoughts/Programming_with_Class_in_Racket.html&gt;</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:44:07.000292</ts>
    <user>Ruthe</user>
    <text>yes I followed that one I actually mean the &lt;https://docs.racket-lang.org/framework/index.html?q=frame%3A&gt;</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:44:53.000274</ts>
    <user>Ruthe</user>
    <text>It seems to have some useful things like &lt;https://docs.racket-lang.org/framework/Frame.html?q=standard-menus%25#%28def._%28%28lib._framework%2Fmain..rkt%29._frame~3astandard-menus~25%29%29&gt; but it has no doc at all</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:45:03.000316</ts>
    <user>Ruthe</user>
    <text>I'm trying some guesswork here</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:45:40.000062</ts>
    <user>Ruthe</user>
    <text>I skim through the class guide docs and until now it's been pretty easy to follow</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:46:10.000260</ts>
    <user>Ruthe</user>
    <text>and it feels a lot cleaner then Python classes :slightly_smiling_face:</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:47:01.000174</ts>
    <user>Franklin</user>
    <text>If you have a frame as in `(define frame (new frame% ...)` then you can make menus like this:</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:47:20.000095</ts>
    <user>Franklin</user>
    <text>`(define mb (new menu-bar% (parent frame)))`</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:47:45.000287</ts>
    <user>Franklin</user>
    <text>`(define m (new menu% (label "File") (parent mb)))`</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:48:23.000093</ts>
    <user>Ruthe</user>
    <text>sure</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:48:28.000012</ts>
    <user>Ruthe</user>
    <text>I've a few hehe</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:49:04.000099</ts>
    <user>Ruthe</user>
    <text>a snippet</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:49:07.000110</ts>
    <user>Franklin</user>
    <text>In lieu of tutorials, try finding an existing gui program and see what it does.</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:49:41.000231</ts>
    <user>Ruthe</user>
    <text>I was actually trying to find the framework repository itself</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:49:49.000276</ts>
    <user>Ruthe</user>
    <text>to see if I could better understand it</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:50:23.000223</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/racket/gui/tree/master/gui-lib/framework&gt;</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:50:25.000207</ts>
    <user>Ruthe</user>
    <text>know of any that uses framework?</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:50:37.000015</ts>
    <user>Ruthe</user>
    <text>ah it's inside the gui!</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:50:41.000020</ts>
    <user>Ruthe</user>
    <text>go figure hehe</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:50:56.000046</ts>
    <user>Claud</user>
    <text>&lt;https://github.com/racket/drracket/&gt; is the most prominent one</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:52:41.000208</ts>
    <user>Ruthe</user>
    <text>yeah I guess hehe</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:52:48.000255</ts>
    <user>Ruthe</user>
    <text>anything simpler :stuck_out_tongue:</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:52:53.000303</ts>
    <user>Claud</user>
    <text>&lt;https://github.com/alex-hhh/ActivityLog2/&gt; is another big GUI app, and I think it uses at least some things from `framework`</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:53:26.000345</ts>
    <user>Franklin</user>
    <text>Just found:  &lt;http://www.cs.yale.edu/homes/lucas.paul/posts/2017-07-31-making-an-editor.html&gt;</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:53:34.000080</ts>
    <user>Ruthe</user>
    <text>by the way can you point me to the/a doc explaining how racket repositories are organized</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:54:16.000190</ts>
    <user>Claud</user>
    <text>I agree more tutorials would be helpful: I sort of stumbled into developing an internal GUI program, and I constantly wonder if I'm doing the right thing or reinventing the wheel.</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:54:28.000216</ts>
    <user>Ruthe</user>
    <text>yup found that one too yesterday, was quite helpful, thanks anyways</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:57:44.000175</ts>
    <user>Ruthe</user>
    <text>Yeah I am having the same feeling</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T07:59:24.000193</ts>
    <user>Ruthe</user>
    <text>cool this works nicely</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T08:46:48.000087</ts>
    <user>Ruthe</user>
    <text>Cool &lt;https://github.com/Metaxal/MrEd-Designer&gt;</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T08:46:58.000034</ts>
    <user>Ruthe</user>
    <text>A bit like glade or wxglade it seems</text>
  </message>
  <message conversation_id="653">
    <ts>2018-07-30T09:51:38.000547</ts>
    <user>Monserrate</user>
    <text>As a non-author on that paper, here's what I think:
1. Betteridge's law definitely applies.
2. It's relatively easy to make transient gradual typing cost ~0 with a decent JIT compiler
3. Typed Racket in particular is the worst-case scenario for GT performance, because it implements gradual typing using contracts, which are a more general and harder to optimize mechanism, and implements contracts using chaperones (same), and the contract system and compiler don't work together very well, and our compiler is not very good on chaperones.
4. Pycket demonstrates that even in that setting, we can do pretty well, and hopefully even more can be done there.
5. People who have built compilers specifically for gradual typing have already gotten better performance on challenging programs.</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T10:06:29.000300</ts>
    <user>Ruthe</user>
    <text>actually sort of nicer then wxglade (at least it looks a bit more modern)</text>
  </message>
  <message conversation_id="652">
    <ts>2018-07-30T10:42:46.000088</ts>
    <user>Ruthe</user>
    <text>Isn't this supposed to scale up the bitmap?</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:44:34.000453</ts>
    <user>Franklin</user>
    <text>No.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:44:57.000113</ts>
    <user>Franklin</user>
    <text>Scale affects the transformation from drawing coordinates to canvas coordinates.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:45:17.000341</ts>
    <user>Franklin</user>
    <text>So if you now draw, say, a square of size 2 it will be larger than before.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:47:11.000349</ts>
    <user>Franklin</user>
    <text>That is, scale affects the following drawing operations.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:48:21.000502</ts>
    <user>Claud</user>
    <text>For most purposes, I prefer using `pict` than the low-level `racket/draw`.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:51:46.000276</ts>
    <user>Carlyn</user>
    <text>I second `pict` here. Using `pict`, the `scale` function will do what you want in a more intuitive (and significantly less imperative) way.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:53:26.000556</ts>
    <user>Ruthe</user>
    <text>problem is I think it's too heavy for what I need, I tried it with pict</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:54:05.000292</ts>
    <user>Ruthe</user>
    <text>I just need to color each "pixel" in a certain color, but I wanted the pixel to scale</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:54:38.000369</ts>
    <user>Ruthe</user>
    <text>so I can generate something like a heatmap</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:55:03.000139</ts>
    <user>Ruthe</user>
    <text>to turn a matrix or 2d array into a simple raster view</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:55:42.000489</ts>
    <user>Ruthe</user>
    <text>and these are large arrays</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:55:49.000019</ts>
    <user>Ruthe</user>
    <text>at least 1000 x 1000</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:56:19.000479</ts>
    <user>Ruthe</user>
    <text>I'd like to eventually embedded into a gui canvas</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:56:26.000348</ts>
    <user>Carlyn</user>
    <text>If you want, you can use `pict` together with `racket/draw`. If you use the `dc` function from `pict`, you can use a `racket/draw` drawing context to produce a pict that can be subsequently used with `scale`. &lt;http://docs.racket-lang.org/pict/Basic_Pict_Constructors.html#%28def._%28%28lib._pict%2Fmain..rkt%29._dc%29%29&gt;</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:58:35.000471</ts>
    <user>Carlyn</user>
    <text>Now, if you don’t want to deal with `pict` at all, you can certainly just use `racket/draw` directly, but as &lt;@Franklin&gt; mentions, `scale` only affects subsequent drawing operations, so you’d have to call it _before_ you do your drawing.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T10:58:52.000478</ts>
    <user>Carlyn</user>
    <text>(The `racket/draw` API is ruthlessly imperative.)</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:00:05.000514</ts>
    <user>Ruthe</user>
    <text>hang on will show you my attempts at both</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:01:09.000236</ts>
    <user>Ruthe</user>
    <text>I didn't enjoy using racket/draw due to the  imperative style</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:01:15.000619</ts>
    <user>Ruthe</user>
    <text>but I found it way faster</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:01:32.000103</ts>
    <user>Ruthe</user>
    <text>but maybe I am doing something silly with pict</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:01:56.000523</ts>
    <user>Ruthe</user>
    <text>mind you I am using rectangle with pict while with racket/draw I am using draw-point</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:34:27.000149</ts>
    <user>Ruthe</user>
    <text>Ok hope this comparison is minimally fair</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:34:41.000443</ts>
    <user>Ruthe</user>
    <text>```Welcome to DrRacket, version 6.12 [3m].
Language: racket, with debugging; memory limit: 256 MB.
10 world-draw: cpu time: 5 real time: 5 gc time: 0
10 world-pict: cpu time: 1 real time: 1 gc time: 0
100 world-draw: cpu time: 188 real time: 188 gc time: 0
100 world-pict: cpu time: 509 real time: 509 gc time: 126
200 world-draw: cpu time: 765 real time: 764 gc time: 0
200 world-pict: cpu time: 3336 real time: 3331 gc time: 428
400 world-draw: cpu time: 3028 real time: 3026 gc time: 7
400 world-pict: cpu time: 25337 real time: 25308 gc time: 3750```</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:35:19.000305</ts>
    <user>Ruthe</user>
    <text>I can't find a equivalent in pict to racket/draw draw-point</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:35:36.000262</ts>
    <user>Ruthe</user>
    <text>let me know if I missed a obvious alternative</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:36:27.000646</ts>
    <user>Ruthe</user>
    <text>I am open to suggestions on improving the pict function :slightly_smiling_face:</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:36:46.000215</ts>
    <user>Monserrate</user>
    <text>`pin-over` may be what you want</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:38:23.000159</ts>
    <user>Ruthe</user>
    <text>hum in what way? I am already using the table to join everything together</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:40:39.000413</ts>
    <user>Monserrate</user>
    <text>`(for*/fold ([p (rectange n n)]) ([i n] [j n]) (pin-over p i j (filled-rectangle ...)))`</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:40:55.000284</ts>
    <user>Monserrate</user>
    <text>also if you just create the `filled-rectangle` once it'll be faster</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:41:11.000631</ts>
    <user>Ruthe</user>
    <text>ah yes true, I think I actually did that but forgot</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:41:26.000310</ts>
    <user>Ruthe</user>
    <text>but removed when rewriting</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:41:30.000107</ts>
    <user>Ruthe</user>
    <text>let me give that a try</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:42:44.000506</ts>
    <user>Ruthe</user>
    <text>yeah way better</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:42:51.000385</ts>
    <user>Ruthe</user>
    <text>at least they are in the same magnitude of time now</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:43:36.000355</ts>
    <user>Ruthe</user>
    <text>be creating the rectangle before hand</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:46:52.000584</ts>
    <user>Claud</user>
    <text>In all of your for loops, you will get better performance with `in-range` than just using the number.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:54:05.000315</ts>
    <user>Carlyn</user>
    <text>&lt;@Ruthe&gt; For what it’s worth, I think `(hline 0 0)` will produce a pict that does the same thing as `draw-point`.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:58:22.000369</ts>
    <user>Ruthe</user>
    <text>Thanks all, sorry for the delayed answer but running this is sucking up all my ram :laughing: (using slack mobile right now)</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T11:59:18.000253</ts>
    <user>Ruthe</user>
    <text>&lt;@Claud&gt; I thought in for loops [i n] was the same as (in-range n)</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:00:59.000051</ts>
    <user>Claud</user>
    <text>It is the same in meaning, but `in-range`, `in-list`, and many other sequence constructors cooperate with the `for` family of macros to give better performance by generating specialized code when they are statically visible in a loop clause.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:01:31.000168</ts>
    <user>Karry</user>
    <text>where "meaning" means "it will produce the same values"</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:02:09.000247</ts>
    <user>Ruthe</user>
    <text>Hum ok! I actually find that ok it's a bit like what you do in python</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:02:23.000561</ts>
    <user>Ruthe</user>
    <text>range(10)</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:02:47.000259</ts>
    <user>Ruthe</user>
    <text>for i in range(10):</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:03:06.000316</ts>
    <user>Ruthe</user>
    <text>And range in python is a generator</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:03:28.000299</ts>
    <user>Carlyn</user>
    <text>fwiw I think TR can automatically specialize `(for ([i n]) ...)` to `(for ([i (in-range n)]) ...)` when `n` is a number, but I’m not completely sure</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:03:51.000502</ts>
    <user>Ruthe</user>
    <text>&lt;@Carlyn&gt; Yeah I guess a line with no length is a point hehe</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:04:10.000110</ts>
    <user>Ruthe</user>
    <text>Ah ok maybe that's where I got that</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:04:25.000010</ts>
    <user>Ruthe</user>
    <text>I started using it on suggestion of someone here</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:04:40.000021</ts>
    <user>Ruthe</user>
    <text>Can't remember who</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:05:04.000566</ts>
    <user>Claud</user>
    <text>&lt;@Carlyn&gt; It would be neat if `for` could do that in general when the sequence is a literal datum, though I don't know how much of a pain that would be to implement.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:05:11.000396</ts>
    <user>Ruthe</user>
    <text>Was using (range n) before but then someone explained it actually generated a list</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:05:58.000102</ts>
    <user>Ruthe</user>
    <text>And to use in-range or even [i n] but maybe that was for typed racket</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:06:54.000172</ts>
    <user>Karry</user>
    <text>Typed Racket has no for-specific optimizations</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:07:11.000248</ts>
    <user>Carlyn</user>
    <text>oh well</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:07:49.000261</ts>
    <user>Carlyn</user>
    <text>I thought that might be the case given that it would require replacing the expansion of `for` with a different one, but it seemed not-impossible</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:08:18.000281</ts>
    <user>Karry</user>
    <text>it's not impossible AFAIK, it just isn't done</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:08:25.000584</ts>
    <user>Carlyn</user>
    <text>and I had thought I vaguely remembered the optimization coach telling me TR managed to specialize for loops at some point</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:08:26.000525</ts>
    <user>Karry</user>
    <text>the optimizer does indeed rewrite code</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:08:29.000187</ts>
    <user>Karry</user>
    <text>just not that code</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:09:04.000270</ts>
    <user>Carlyn</user>
    <text>yes, it just seems like a slightly more complicated optimization than one might expect (since TR has to deal with the fully-expanded code)</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:10:04.000381</ts>
    <user>Ruthe</user>
    <text>3876mb</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:10:13.000522</ts>
    <user>Ruthe</user>
    <text>What the hell :p...</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:10:31.000269</ts>
    <user>Ruthe</user>
    <text>Why doesn't DrRacket release the memory</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:10:50.000471</ts>
    <user>Ruthe</user>
    <text>It's done running and I've been waiting for a minute now just to move my mouse</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:11:19.000053</ts>
    <user>Ruthe</user>
    <text>DrRacket</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:11:55.000199</ts>
    <user>Ruthe</user>
    <text>The memory usage is my only big complaint of DrRacket</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:12:01.000450</ts>
    <user>Karry</user>
    <text>yikes, I'm digging more, perhaps TR does optimize that loop :laughing: (it's more complicated than the optimized `in-range` expansions I'm used to seeing so I assumed it was not, but digging more it seems it is generating some custom iteration functions)</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:12:34.000325</ts>
    <user>Karry</user>
    <text>either way... personally I would just use `in-range` so it's fast no matter the `#lang` line :smiley:</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:13:00.000141</ts>
    <user>Ruthe</user>
    <text>Finally back to 300mb~</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:13:08.000264</ts>
    <user>Franklin</user>
    <text>It's a shame `range` returns a list. It should have been a value representing the range instead.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:13:30.000008</ts>
    <user>Ruthe</user>
    <text>Yeah I think most other languages do that</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:13:56.000387</ts>
    <user>Ruthe</user>
    <text>Imean in python you only get a list if you do list(range n))</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:14:24.000297</ts>
    <user>Ruthe</user>
    <text>And I vaguely remember Haskell and Scala being similar</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:15:37.000326</ts>
    <user>Ruthe</user>
    <text>But I might be wrong</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:16:10.000466</ts>
    <user>Carlyn</user>
    <text>The relationship between Racket’s `range` and `in-range` are similar (but not identical to) the relationship between Python 2.x’s `range` and `xrange`, but I think &lt;@Franklin&gt; is asking for something different, namely having `range` construct a value that keeps track of only the beginning and ending values (plus the value of each step) of the range rather than producing a sequence at all.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:16:42.000102</ts>
    <user>Ruthe</user>
    <text>Well I think that's what python does</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:17:15.000300</ts>
    <user>Ruthe</user>
    <text>```Python 3.6.6 (default, Jun 27 2018, 13:11:40) 
[GCC 8.1.1 20180531] on linux
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt; range(10)
range(0, 10)```</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:17:48.000186</ts>
    <user>Carlyn</user>
    <text>Even in Python 3, `range` just produces a sequence. I don’t believe there’s a way to get the start and end values of a sequence produced by `range` without iterating through it.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:18:48.000318</ts>
    <user>Ruthe</user>
    <text>```&amp;gt;&amp;gt;&amp;gt; range(0, 10).start
0
&amp;gt;&amp;gt;&amp;gt; range(0, 10).stop
10
&amp;gt;&amp;gt;&amp;gt; ```</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:18:58.000548</ts>
    <user>Carlyn</user>
    <text>Ah! I am incorrect, then.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:19:16.000409</ts>
    <user>Ruthe</user>
    <text>hehe well I know my Python tricks :laughing:</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:19:34.000147</ts>
    <user>Carlyn</user>
    <text>It probably wouldn’t actually be that hard to change Racket’s `in-range` to do the same thing in a backwards-compatible way.</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:19:41.000152</ts>
    <user>Ruthe</user>
    <text>I only "gave up" on Python after extensive digging around</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:19:57.000033</ts>
    <user>Ruthe</user>
    <text>and feeling unfullfilled</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:19:59.000081</ts>
    <user>Ruthe</user>
    <text>hehe</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:20:46.000572</ts>
    <user>Ruthe</user>
    <text>```Python 2.7.15 (default, Jun 27 2018, 13:05:28) 
[GCC 8.1.1 20180531] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt; range(0, 10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&amp;gt;&amp;gt;&amp;gt; range(0, 10).start
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
AttributeError: 'list' object has no attribute 'start'
&amp;gt;&amp;gt;&amp;gt; range(0, 10).stop
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
AttributeError: 'list' object has no attribute 'stop'
&amp;gt;&amp;gt;&amp;gt;```</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:21:10.000469</ts>
    <user>Ruthe</user>
    <text>but it's a Python 3 thing</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:21:36.000292</ts>
    <user>Ruthe</user>
    <text>Python 3 has a lot of nice tricks you don't get in Python 2</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:21:45.000384</ts>
    <user>Ruthe</user>
    <text>was one of the reasons why I did eventually go for it</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:23:07.000575</ts>
    <user>Ruthe</user>
    <text>Oddly enough ```&amp;gt;&amp;gt;&amp;gt; xrange(1, 10, 2).start
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
AttributeError: 'xrange' object has no attribute 'start'
&amp;gt;&amp;gt;&amp;gt; 
```</text>
  </message>
  <message conversation_id="654">
    <ts>2018-07-30T12:23:18.000306</ts>
    <user>Ruthe</user>
    <text>Go figure.</text>
  </message>
  <message conversation_id="655">
    <ts>2018-07-30T15:36:33.000459</ts>
    <user>Odis</user>
    <text>&lt;@Bertha&gt; Wait, isn’t the :kidney: emoji the one I added as a joke? :smile:</text>
  </message>
  <message conversation_id="655">
    <ts>2018-07-30T15:37:35.000115</ts>
    <user>Odis</user>
    <text>Anyway….</text>
  </message>
  <message conversation_id="655">
    <ts>2018-07-30T15:38:35.000408</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; Is there any way to a `drracket:module-language-tools:add-online-expansion-monitor`, that module languages have to subscribe to (rather than having it applied globally).</text>
  </message>
  <message conversation_id="655">
    <ts>2018-07-30T15:39:05.000093</ts>
    <user>Odis</user>
    <text>Similarly to how `drracket:module-language-tools:add-opt-in-toolbar-button` seems allow module languages to subscribe to them?</text>
  </message>
  <message conversation_id="655">
    <ts>2018-07-30T15:41:07.000009</ts>
    <user>Eileen</user>
    <text>not currently</text>
  </message>
  <message conversation_id="655">
    <ts>2018-07-30T15:42:12.000409</ts>
    <user>Odis</user>
    <text>Okay. Any sense of how hard it would be to add it? (To be clear, I’m not asking you to do it, I’m just looking at how hard it would be to make a new background expander for a particular module language.)</text>
  </message>
  <message conversation_id="655">
    <ts>2018-07-30T15:43:59.000167</ts>
    <user>Odis</user>
    <text>And so far the two ways that seem to exist are either:

1. Use the `online-expansion-monitor`, and try to determine the current language from the #lang line.

2. Use the `'definitions-text-surrogate` protocol, and extend the `on-change` method to try to do it in another place.</text>
  </message>
  <message conversation_id="655">
    <ts>2018-07-30T15:44:06.000472</ts>
    <user>Odis</user>
    <text>Although maybe there’s a third option that I’ve missed?</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:15:29.000489</ts>
    <user>Carrol</user>
    <text>Following up… according to `(current-directory)` in drracket, It’s my home directory. 

I think for package upgrades/work tho, paths should probably be absolute so you can copy/paste into any terminal if something goes wrong.</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:26:27.000144</ts>
    <user>Carrol</user>
    <text>New 7.0 drracket is eating up 60% of a CPU just sitting there idle. It also won’t hide in osx (cmd-h). It disappears and then immediately pops back up.</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:29:18.000034</ts>
    <user>Franklin</user>
    <text>'(a b c)
'(1 2 3)</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:29:43.000243</ts>
    <user>Franklin</user>
    <text>Just noticed that 1 2 3 are colored green in DrRacket, but a b c aren't.</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:30:21.000095</ts>
    <user>Franklin</user>
    <text>Since both expressions are datums, I would prefer both to be green.</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:34:38.000181</ts>
    <user>Carrol</user>
    <text>is today some special nerd day?</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:35:17.000356</ts>
    <user>Carrol</user>
    <text>(startup screen)</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:35:38.000084</ts>
    <user>Franklin</user>
    <text>Eli's birthday</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:36:05.000117</ts>
    <user>Carrol</user>
    <text>&lt;@Franklin&gt; same is true for non-list datums. by themselves, `1` and `'1` are both green and `'a` is blue</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:40:01.000394</ts>
    <user>Carrol</user>
    <text>```
Call graph:
    2400 Thread_5132106: Main Thread   DispatchQueue_&amp;lt;multiple&amp;gt;
    + 2380 scheme_thread_w_details  (in Racket) + 321  [0x1002dc5a1]
    + ! 2380 make_subprocess  (in Racket) + 759  [0x1002dcdb7]
    + !   2380 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x1005b213b]
    + !     2380 start_child  (in Racket) + 1153  [0x1002dc291]
    + !       2380 scheme_top_level_do_worker  (in Racket) + 1599  [0x10007259f]
    + !         2380 apply_k  (in Racket) + 210  [0x100072ff2]
    + !           2380 scheme_do_eval  (in Racket) + 5779  [0x100049e53]
    + !             2380 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x1005a93db]
    + !               2380 _scheme_apply_multi_from_native  (in Racket) + 437  [0x10004c5e5]
    + !                 2380 scheme_do_eval  (in Racket) + 5779  [0x100049e53]
    + !                   1304 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x1005b6f85]
```

(first real drop-off)

This appears reproducible… Fire it up. I don’t know if it needs anything in the editor, but I’ve had little things (eg the drawing code from &lt;#C09L257PY|beginners&gt;) in it. Let it sit in the background. After a little bit, it starts to burn half a core consistently.</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:40:50.000080</ts>
    <user>Carrol</user>
    <text>more than half a core really…. or it is evenly distributed across cores:</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:41:03.000338</ts>
    <user>Carrol</user>
    <text>None</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:41:09.000020</ts>
    <user>Carrol</user>
    <text>None</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:52:57.000216</ts>
    <user>Ezra</user>
    <text>&lt;@Carrol&gt; I wonder if the start up screen could have anything to do with higher consumption by DrRacket ?</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T16:57:44.000104</ts>
    <user>Odis</user>
    <text>&lt;@Ezra&gt; &lt;@Carrol&gt; I doubt it.</text>
  </message>
  <message conversation_id="657">
    <ts>2018-07-30T16:57:57.000031</ts>
    <user>Odis</user>
    <text>From my experience, the start up screen just slows down start up….</text>
  </message>
  <message conversation_id="657">
    <ts>2018-07-30T16:58:16.000104</ts>
    <user>Odis</user>
    <text>(Like, a noticeably slower startup.)</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-30T17:00:00.000386</ts>
    <user>Odis</user>
    <text>And while Racket 7 seems to be significantly slower to me than Racket 6.12 (or even previous build of 6.99.x), its not thad bad on my machine. I wonder if this is the background expander in some kind of loop.</text>
  </message>
  <message conversation_id="657">
    <ts>2018-07-30T17:08:41.000219</ts>
    <user>Odis</user>
    <text>&lt;@Aimee&gt; and &lt;@Irish&gt; nice ^.^</text>
  </message>
  <message conversation_id="657">
    <ts>2018-07-30T17:08:59.000016</ts>
    <user>Odis</user>
    <text>&lt;@Bertha&gt; Looking at the files on my machine, it was indeed the kidneys I added. ^.^</text>
  </message>
  <message conversation_id="657">
    <ts>2018-07-30T17:11:12.000041</ts>
    <user>Aimee</user>
    <text>As errortrace (transitively) depends on racket/contract, is it impossible to have errortrace annotate racket/contract?</text>
  </message>
  <message conversation_id="657">
    <ts>2018-07-30T17:23:32.000241</ts>
    <user>Aimee</user>
    <text>ahh solved it using `(make-errortrace-compile-handler)`</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-31T09:01:55.000330</ts>
    <user>Glynda</user>
    <text>How can I compile the Racket manuals to a different format? I see them in the source tree, but I wonder if they can be made in to a DAISY format as my BrailleSense won't load the HTML versions.</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-31T09:03:35.000086</ts>
    <user>Franklin</user>
    <text>&lt;@Glynda&gt;  Besides html I know scribble can generate pdf and markdown.</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-31T09:03:52.000461</ts>
    <user>Franklin</user>
    <text>The pdfs are on the web page. Somewhere.</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-31T09:03:54.000124</ts>
    <user>Monserrate</user>
    <text>&lt;@Glynda&gt; you can use the `raco scribble` command to generate various backend formats</text>
  </message>
  <message conversation_id="656">
    <ts>2018-07-31T09:04:12.000290</ts>
    <user>Monserrate</user>
    <text>PDFs are linked here: &lt;http://download.racket-lang.org/all-versions.html&gt;</text>
  </message>
  <message conversation_id="658">
    <ts>2018-07-31T10:21:04.000470</ts>
    <user>Catherine</user>
    <text>a colleague is experimenting with Racket and has two #lang questions I feel like I should have been able to answer but I'm a bit too rusty. 1) Can you have a submodule with a different #lang/reader in one file? and 2) why do some languages (e.g. rash) complain about a missing module-begin when used as the language of a submodule (i.e. `(module something rash ...)`?</text>
  </message>
  <message conversation_id="659">
    <ts>2018-07-31T10:55:13.000388</ts>
    <user>Andreas</user>
    <text>If I want to plot histograms with error bars, is there a straightforward way to do this or do I always have to couple a `discrete-histogram` and an independent `error-bars` 2drenderer? Doing the coupling is ok, even if annoying as it forces you to properly compute the error bars x position. However, the biggest issue is that then it overlays two x-ticks: one from the histogram and one from the error-bars. The latter should be ignored.</text>
  </message>
  <message conversation_id="659">
    <ts>2018-07-31T11:08:35.000255</ts>
    <user>Andreas</user>
    <text>I took a few benchmarks using speedometer2.0 and obtained the following:
```
(define speedometer2.0
  '((brave . (55.80 . 0.55))
    (vivaldi . (87.3 . 1.4))
    (firefox . (32 . 0.88))
    (chrome . (87.5 . 1.1))))
```</text>
  </message>
  <message conversation_id="659">
    <ts>2018-07-31T11:08:36.000521</ts>
    <user>Andreas</user>
    <text>To plot:</text>
  </message>
  <message conversation_id="659">
    <ts>2018-07-31T11:09:29.000412</ts>
    <user>Andreas</user>
    <text>```
(define (plot-speedometer)
  (plot (list (discrete-histogram (for/list ([browser-result (in-list speedometer2.0)]
                                             [idx (in-naturals)])
                                    (define browser (car browser-result))
                                    (define value (car (cdr browser-result)))
                                    
                                    (list browser value))
                                  #:skip 2.5)
              (error-bars (for/list ([browser-result (in-list speedometer2.0)]
                                     [idx (in-naturals)])
                            (define browser (car browser-result))
                            (define value (car (cdr browser-result)))
                            (define error (cdr (cdr browser-result)))
                              
                              (list (+ 0.5 (* idx 2.5)) value error))))
        #:x-label "Browser"
        #:y-label "Runs / second"
        #:title "Speedometer 2.0 (higher is better)"))
```</text>
  </message>
  <message conversation_id="659">
    <ts>2018-07-31T11:10:18.000587</ts>
    <user>Andreas</user>
    <text>The problem with this is that unfortunately the x-ticks mention the browser names and the ticks from the error bars. How can I remove the ticks from the error bars?</text>
  </message>
  <message conversation_id="659">
    <ts>2018-07-31T11:10:46.000183</ts>
    <user>Andreas</user>
    <text>None</text>
  </message>
  <message conversation_id="659">
    <ts>2018-07-31T12:02:55.000322</ts>
    <user>Helena</user>
    <text>&lt;@Andreas&gt; `(parameterize ((plot-x-ticks no-ticks)) (plot ....))`</text>
  </message>
  <message conversation_id="660">
    <ts>2018-07-31T12:03:18.000352</ts>
    <user>Helena</user>
    <text>those extra ticks are just the default for the whole plot area</text>
  </message>
  <message conversation_id="659">
    <ts>2018-07-31T12:07:42.000611</ts>
    <user>Andreas</user>
    <text>&lt;@Helena&gt; thanks. interesting. I expected that to remove the `brave`, `vivaldi`, etc ticks. Why didn't it?</text>
  </message>
  <message conversation_id="660">
    <ts>2018-07-31T12:08:30.000478</ts>
    <user>Helena</user>
    <text>those are the `#:add-ticks?` from `discrete-histogram`</text>
  </message>
  <message conversation_id="661">
    <ts>2018-07-31T14:53:20.000018</ts>
    <user>Bertha</user>
    <text>&lt;https://racket.slack.com/archives/C06V96CKX/p1533046864000470&gt;
&lt;@Catherine&gt; 
1. I think No -- but would be interested to learn otherwise.
2. I don't know. &lt;@Jettie&gt; might know, for rash?</text>
  </message>
  <message conversation_id="661">
    <ts>2018-07-31T15:09:54.000094</ts>
    <user>Franklin</user>
    <text>&lt;@Catherine&gt; ad 1.) This is in the ball park. Maybe &lt;@Arvilla&gt; know more?  &lt;http://docs.racket-lang.org/multi-file-lang/index.html&gt;</text>
  </message>
  <message conversation_id="661">
    <ts>2018-07-31T16:44:10.000140</ts>
    <user>Monserrate</user>
    <text>&lt;@Catherine&gt; 2 is probably because `#lang rash` reads to `(module m rash/something-else ...)`</text>
  </message>
  <message conversation_id="661">
    <ts>2018-07-31T16:50:40.000392</ts>
    <user>Catherine</user>
    <text>ah, that makes sense. thanks, both</text>
  </message>
  <message conversation_id="661">
    <ts>2018-07-31T16:51:27.000233</ts>
    <user>Catherine</user>
    <text>I vaguely recall someone was working on a library that let you do different kinds of quoting/reading using different delimeters but couldn't find it on the pkg server</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T17:50:10.000404</ts>
    <user>Shan</user>
    <text>I don’t know these days whether to report problems here or through DrRacket, but the following program gives me a `read’ access denied for .LOCKpkgs.rktd.    #lang racket/base


(require racket/sandbox)
;(require racket/gui)
;(require “handin-server/sandbox.rkt”)  ;!!! need this.

(define bar 1)


(define foo
  (make-evaluator ‘(special intermediate)
                  ’()
                  ;(open-input-graphical-file “test/tester/hw.rkt”)
                  ))</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T17:52:34.000365</ts>
    <user>Franklin</user>
    <text>&lt;@Shan&gt; What happens when you delete the lock?</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T17:52:48.000333</ts>
    <user>Franklin</user>
    <text>Same thing?</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T17:54:18.000057</ts>
    <user>Shan</user>
    <text>It comes right back when I re-run and I get the error.</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T17:55:11.000106</ts>
    <user>Franklin</user>
    <text>&lt;@Carrol&gt; Had a similar problem. Did you solve it?  &lt;https://github.com/racket/drracket/issues/123&gt;</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T18:01:23.000411</ts>
    <user>Carrol</user>
    <text>&lt;@Franklin&gt; no, I never solved it. I think I punted outright after filing that issue</text>
  </message>
  <message conversation_id="663">
    <ts>2018-07-31T18:18:16.000022</ts>
    <user>Laverne</user>
    <text>Hello, everyone. A quick question about composable continuations: The expression `(+ 1 (call-with-composable-continuation (lambda (k) (+ 10 (k 10)))))` in REPL gives me back 22, which is expected. However, if I run the file shown below:
```
#lang racket
(+ 1 (call-with-composable-continuation (lambda (k) (+ 10 (k 10)))))
```

I will get an error:
```
; +: contract violation
;  expected: number?
;  given: #&amp;lt;void&amp;gt;
;  argument position: 2nd
;  other arguments...:
; Context:
;  ~/tmp/test.rkt:2:40
;  ~/tmp/test.rkt:1:1
```
why does the application of the captured continuation return #&amp;lt;void&amp;gt; here?</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T18:29:11.000139</ts>
    <user>Franklin</user>
    <text>&lt;@Laverne&gt; All repl interactions are wrapped in a prompt.</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T18:29:14.000119</ts>
    <user>Franklin</user>
    <text>Try</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T18:29:15.000272</ts>
    <user>Franklin</user>
    <text>(require racket/control)
(prompt (+ 1 (call-with-composable-continuation (lambda (k) (+ 10 (k 10))))))</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T18:31:21.000045</ts>
    <user>Franklin</user>
    <text>Also in a module expressions at are wrapped in a print - so the `void` you see is the result of printing 11.</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T18:32:13.000106</ts>
    <user>Franklin</user>
    <text>That is, without the prompt too much of the continuation is caught.</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T18:34:15.000150</ts>
    <user>Laverne</user>
    <text>&lt;@Franklin&gt; That makes sense. Thank you very much.</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T18:35:14.000075</ts>
    <user>Franklin</user>
    <text>It's a bit confusing in this case that expressions are implicitly wrapped in a print, but it is very convenient, when not dealing with continuations.</text>
  </message>
  <message conversation_id="662">
    <ts>2018-07-31T18:39:42.000076</ts>
    <user>Glynda</user>
    <text>Okay, will give that a try.</text>
  </message>
  <message conversation_id="664">
    <ts>2018-07-31T18:52:13.000031</ts>
    <user>Shan</user>
    <text>For us the inability to import racket/sandbox is a pretty big problem right now.  The term starts in a month and we are trying to set up our world.</text>
  </message>
  <message conversation_id="664">
    <ts>2018-07-31T19:38:25.000268</ts>
    <user>Monserrate</user>
    <text>&lt;@Shan&gt; the usual approach is to allow the sandbox read access to the whole file system</text>
  </message>
  <message conversation_id="664">
    <ts>2018-07-31T20:39:07.000117</ts>
    <user>Shan</user>
    <text>I’m not sure I understand the suggestion you are making.  How do I effect what you are suggesting? The sandbox module has no specific configurations about file system access that I can see.</text>
  </message>
  <message conversation_id="664">
    <ts>2018-07-31T21:33:59.000071</ts>
    <user>Monserrate</user>
    <text>&lt;@Shan&gt; see the `sandbox-path-permissions` parameter &lt;http://docs.racket-lang.org/reference/Sandboxed_Evaluation.html?q=sandbox#%28def._%28%28lib._racket%2Fsandbox..rkt%29._sandbox-path-permissions%29%29&gt;</text>
  </message>
  <message conversation_id="664">
    <ts>2018-07-31T21:34:27.000129</ts>
    <user>Monserrate</user>
    <text>just setting `(sandbox-path-permissions (list (list 'read "\")))` should make things work</text>
  </message>
  <message conversation_id="665">
    <ts>2018-08-01T02:08:24.000172</ts>
    <user>Claud</user>
    <text>&lt;@Carrol&gt; The failure to hide on Mac is a known issue since Racket 6.11: &lt;https://github.com/racket/drracket/issues/161&gt;</text>
  </message>
  <message conversation_id="664">
    <ts>2018-08-01T07:38:03.000120</ts>
    <user>Lynna</user>
    <text>&lt;@Shan&gt; The sandbox problem seems to be a bad interaction with sandboxes and DrRacket's `Popluate "compiled" directories (for faster loading)` option in the "Choose Language..." dialog's "Show Details" panel. I don't immediately know what the repair should be, but an alternative workaround is to turn that off.</text>
  </message>
  <message conversation_id="664">
    <ts>2018-08-01T10:17:28.000392</ts>
    <user>Lynna</user>
    <text>Request for feedback from anyone interested in widescreen support in Slideshow: &lt;https://github.com/racket/slideshow/pull/16&gt;</text>
  </message>
  <message conversation_id="664">
    <ts>2018-08-01T11:09:37.000410</ts>
    <user>Thaddeus</user>
    <text>&lt;@Lynna&gt; Is there any plan on making this completely adaptable by using relative units (like `rem` in css) instead of absolute values? (e.g. font size)
It might be easier to design "responsive" slideshows.</text>
  </message>
  <message conversation_id="664">
    <ts>2018-08-01T11:10:36.000080</ts>
    <user>Thaddeus</user>
    <text>I didn't use slideshow that much yet, so I may be wrong.</text>
  </message>
  <message conversation_id="664">
    <ts>2018-08-01T11:51:52.000222</ts>
    <user>Lynna</user>
    <text>&lt;@Thaddeus&gt; That's how it works already. Text at a size of 32 drawing units is meaningful only given that the full display area was always 768 drawing units high. To support adaptable slides, we don't want to interpret all values as relative to both display dimensions, since that would just squash a slide to show it widescreen, so the PR's compromise is to interpret everything as (very nearly) relative to the display height.</text>
  </message>
  <message conversation_id="664">
    <ts>2018-08-01T11:56:20.000286</ts>
    <user>Thaddeus</user>
    <text>oooh, I see</text>
  </message>
  <message conversation_id="664">
    <ts>2018-08-01T11:56:25.000215</ts>
    <user>Shan</user>
    <text>&lt;@Lynna&gt; indeed, changing path permissions doesn’t solve the problem.  But in case it helps debugging, adding all of the following (which comes from handin-server/sanbox) does make that problem go away `;; no input/output
(sandbox-input        #f)
(sandbox-output       #f)
(sandbox-error-output #f)




;; no limits -- the handin server uses per-session limits
(sandbox-memory-limit #f)
(sandbox-eval-limits #f)


;; share these with evaluators

(sandbox-namespace-specs
 (let ([specs (sandbox-namespace-specs)])
   `(,(car specs)
     ,@(cdr specs)
     lang/posn
     ,@(if gui? ‘(mrlib/cache-image-snip) ’()))))




 local overrides

(require racket/runtime-path)
(define-runtime-path overrides “overridden-collects”)
(sandbox-override-collection-paths
 (cons overrides (sandbox-override-collection-paths)))
`</text>
  </message>
  <message conversation_id="666">
    <ts>2018-08-01T13:52:07.000557</ts>
    <user>Meaghan</user>
    <text>Hi,  
How can I use `tcp-connect` with a socks proxy?</text>
  </message>
  <message conversation_id="666">
    <ts>2018-08-01T13:54:48.000243</ts>
    <user>Bertha</user>
    <text>FWIW, for me: DrR 7.0 on macOS 10.11.6 is fine. ActivityMonitor says it's sitting there at 0.2%.</text>
  </message>
  <message conversation_id="666">
    <ts>2018-08-01T13:55:49.000083</ts>
    <user>Bertha</user>
    <text>(I do see the Hide issue when I try. But I never hide on macOS so never noticed until 30 seconds ago.)</text>
  </message>
  <message conversation_id="667">
    <ts>2018-08-01T16:29:46.000126</ts>
    <user>Carrol</user>
    <text>&lt;@Shan&gt; you can use ``` for multi-line</text>
  </message>
  <message conversation_id="667">
    <ts>2018-08-01T16:45:44.000067</ts>
    <user>Carrol</user>
    <text>it’s a bit odd for sure. It’s ONLY when you try to use that menu item. I run an app that hides idle apps and it has no problems. But if you Cmd-H it does what that issue describes…

I tried to dig into the menuing / event code and eventually gave up. too opaque for me.</text>
  </message>
  <message conversation_id="668">
    <ts>2018-08-01T18:00:53.000391</ts>
    <user>Odis</user>
    <text>&lt;@Freida&gt; Is there anything special I need to do to get rsound running on windows?</text>
  </message>
  <message conversation_id="668">
    <ts>2018-08-01T18:01:19.000154</ts>
    <user>Odis</user>
    <text>I did `raco pkg install rsound`, but when I go to require it, I’m getting an error telling me I can’t install portaudio.</text>
  </message>
  <message conversation_id="668">
    <ts>2018-08-01T18:01:37.000259</ts>
    <user>Odis</user>
    <text>I should mention that I’m trying this on Racket 7, if that makes a difference? (&lt;@Lynna&gt;)</text>
  </message>
  <message conversation_id="669">
    <ts>2018-08-02T09:11:28.000496</ts>
    <user>Glynda</user>
    <text>Hmm. Do I need to do raco scribble guide.scrbl --dest ~/racketguide? Or *.scrbl?</text>
  </message>
  <message conversation_id="670">
    <ts>2018-08-02T09:39:33.000017</ts>
    <user>Franklin</user>
    <text>Consider  this s-expression
```(a (b
    c) d
          e```
When indenting the last line - where should the e end up?</text>
  </message>
  <message conversation_id="670">
    <ts>2018-08-02T09:40:11.000132</ts>
    <user>Franklin</user>
    <text>Curiously DrRacket, lisp-mode and racket-mode in Emacs has 3 different answers.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:19:55.000393</ts>
    <user>Bertha</user>
    <text>OK I will point out that `lisp-mode` on Emacs 26.1 font-locks the `d` for me due to this font-lock rule:
```
lisp--match-hidden-arg
  (0
   '(face font-lock-warning-face help-echo "Hidden behind deeper element; move to another line?"))
```
So the `d` is red (in my current theme) and you see that text if you hover.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:20:32.000424</ts>
    <user>Bertha</user>
    <text>So whatever happens to the following `e`, seems like it's going to be weird?</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:21:22.000161</ts>
    <user>Franklin</user>
    <text>My fault. Forgot how to quote code.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:21:29.000275</ts>
    <user>Franklin</user>
    <text>In slack.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:22:02.000013</ts>
    <user>Bertha</user>
    <text>Yeah at first I wondered if you meant indenting quoted or quasiquoted expressions, specifically. But I figured out what you meant.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:22:33.000036</ts>
    <user>Franklin</user>
    <text>How did you get the hidden args warning?</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:22:59.000311</ts>
    <user>Bertha</user>
    <text>By the way, if you do any Emacs mode work, or are just curious, the `font-lock-studio` package is awesome. It's like the macro stepper but for font-lock. You can see the font-lock rules for a mode, and watch them work one by one on the buffer.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:23:06.000312</ts>
    <user>Franklin</user>
    <text>(24.5 here)</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:23:27.000246</ts>
    <user>Franklin</user>
    <text>I'll try that.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:23:36.000497</ts>
    <user>Bertha</user>
    <text>It might be 26.1 only. I just put that text in a buffer, and `M-x lisp-mode`.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:23:49.000144</ts>
    <user>Bertha</user>
    <text>Just started using 26.1 within the last week.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:24:13.000596</ts>
    <user>Bertha</user>
    <text>Wouldn't have bothered except for smoke-testing for racket-mode.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:25:21.000147</ts>
    <user>Franklin</user>
    <text>No noteworthy news in 26.1?</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:27:29.000627</ts>
    <user>Bertha</user>
    <text>So (taking the bait), `lisp-mode`'s handling of this is "wrong", but they kind of warn you.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:27:57.000072</ts>
    <user>Bertha</user>
    <text>I think DrR is not helpful to do this:
```
(a (b
    c) d
       e)
```</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:28:22.000252</ts>
    <user>Bertha</user>
    <text>For instance, what if it were an application of `hash` not `a`.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:28:52.000280</ts>
    <user>Bertha</user>
    <text>This seems not helpful, what DrR does:
```
(hash (a
       b) c
          (c
           d) e)
```</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:29:17.000257</ts>
    <user>Bertha</user>
    <text>I prefer what racket-mode does:
```
(hash (a
       b) c
      (c
       d) e)
```</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:31:52.000627</ts>
    <user>Franklin</user>
    <text>Agree.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:32:53.000404</ts>
    <user>Bertha</user>
    <text>Not to sound like an authority on this. Indentation can be a big hairball, and I've gotten it wrong many times.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:33:22.000222</ts>
    <user>Bertha</user>
    <text>It helped to stop following the example of scheme-mode, which tries to reuse lisp-mode as much as possible, and instead make a clean start.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:33:55.000501</ts>
    <user>Bertha</user>
    <text>The lisp-mode indentation code has a lot of history and is just mind-numbing, to me anyway.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:34:53.000129</ts>
    <user>Bertha</user>
    <text>&lt;@Franklin&gt; Nothing earth-shattering so far in 26.1, for me. I think 25.x added some things I liked but can't remember b/c now take for granted.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:35:21.000107</ts>
    <user>Bertha</user>
    <text>26.1 does now have threads, but I hope package authors don't start using them directly and badly.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:36:00.000394</ts>
    <user>Bertha</user>
    <text>They really need a higher-level thing, like ML/Racket concurrency.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:38:02.000102</ts>
    <user>Bertha</user>
    <text>&lt;https://nullprogram.com/blog/2018/05/31/&gt;</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:38:44.000341</ts>
    <user>Franklin</user>
    <text>Haven't looked at threads in Emacs yet. Since buffers are mutable, it is not a good idea for multiple threads to work on the same buffer though.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:43:25.000157</ts>
    <user>Bertha</user>
    <text>In Emacs buffers are the uber data structure.
A lot of things you'd do with strings in other langs, you often should just `with-temp-buffer` and use the whole Emacs function library. :slightly_smiling_face:
Also for external processes, there can be an associated buffer, and it's your sync object. They're sort of a random-access async channel. Process output calls your function with more text, you can add to the buffer or not, etc.
The proc output func being called, is your concurrency "hook".
It's only called when Emacs is waiting for input, idle.
So to-date it's been safe.
Adding raw pthreads is... not so much.</text>
  </message>
  <message conversation_id="671">
    <ts>2018-08-02T10:49:08.000501</ts>
    <user>Franklin</user>
    <text>+1</text>
  </message>
  <message conversation_id="672">
    <ts>2018-08-02T11:26:04.000359</ts>
    <user>Franklin</user>
    <text>Hmm. If the (c d) is a very large s-expression then using backward-sexp to go back could potentially become expensive. Especially if indenting a large region.</text>
  </message>
  <message conversation_id="673">
    <ts>2018-08-02T12:20:03.000053</ts>
    <user>Meaghan</user>
    <text>Hi,  Why don’t we get rid of the “irc” channel, and connect this “general” channel with irc?</text>
  </message>
  <message conversation_id="674">
    <ts>2018-08-02T16:31:06.000246</ts>
    <user>Carrol</user>
    <text>&lt;@Bertha&gt; oh shit. I didn’t know about `font-lock-studio`! Thank you!!!</text>
  </message>
  <message conversation_id="674">
    <ts>2018-08-02T16:33:39.000175</ts>
    <user>Bertha</user>
    <text>&lt;@Carrol&gt; The author has a whole set of font-lock related packages: &lt;https://github.com/Lindydancer/font-lock-studio#other-font-lock-tools&gt;
I also use `faceup` to do regression tests on font-lock for racket-mode.
I haven't tried the others (yet).</text>
  </message>
  <message conversation_id="674">
    <ts>2018-08-02T16:35:43.000212</ts>
    <user>Carrol</user>
    <text>I prefer `racket-mode` here too… but I like that elisp has been coloring `c` and `e` red for hanging them off of another sexp.</text>
  </message>
  <message conversation_id="674">
    <ts>2018-08-02T16:36:06.000302</ts>
    <user>Carrol</user>
    <text>fantastic. I need both of these</text>
  </message>
  <message conversation_id="674">
    <ts>2018-08-02T16:37:18.000292</ts>
    <user>Carrol</user>
    <text>&amp;gt; The underlying idea is to convert text with highlights (“faces”) into a plain text representation using the Faceup markup language. This language is semi-human readable, for example:
&amp;gt; 
&amp;gt; «k:this» is a keyword

I actually already have something _just_ like this in my test suite, but not at the font-lock level… at the parse level. This will help a lot. Thank you!</text>
  </message>
  <message conversation_id="674">
    <ts>2018-08-02T16:40:26.000237</ts>
    <user>Bertha</user>
    <text>They're the moral equivalent of scribble files `«k:this»` :left_right_arrow: `@k{this}`. :wink:</text>
  </message>
  <message conversation_id="674">
    <ts>2018-08-02T16:41:42.000417</ts>
    <user>Bertha</user>
    <text>Well. A tiny subset of at-expressions.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T21:41:02.000022</ts>
    <user>Meaghan</user>
    <text>Hi! Could anyone share me  some examples of how to do logging in multiple modules?</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T22:46:36.000153</ts>
    <user>Marnie</user>
    <text>&lt;@Meaghan&gt; I usually use `define-logger` and include the module name in the logger name</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T22:53:31.000135</ts>
    <user>Meaghan</user>
    <text>&lt;@Marnie&gt; Do you define a logger in every module, instead of sharing one for the whole project?</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T22:54:35.000165</ts>
    <user>Marnie</user>
    <text>&lt;@Meaghan&gt; Yes. Occasionally I define multiple loggers in the same module</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T22:55:16.000037</ts>
    <user>Meaghan</user>
    <text>That’s interesting. So if you want to log to a file,  you will have to setup the logger to the file in every module?</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T22:57:01.000096</ts>
    <user>Marnie</user>
    <text>No, I would set that up with a single log receiver that listens to the current logger. If I wanted to only listen for certain kinds of messages I filter by logger topics, but still attach the receiver to the current logger. I never directly attach receivers to loggers created with `define-logger`</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T22:57:31.000077</ts>
    <user>Marnie</user>
    <text>I'd set up the receiver in whatever the main entry point of the program is</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T22:58:31.000044</ts>
    <user>Meaghan</user>
    <text>Do you have some example code to show me?</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T22:58:58.000075</ts>
    <user>Meaghan</user>
    <text>I want to see how you do this in real world code. :smile:</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T23:01:00.000143</ts>
    <user>Marnie</user>
    <text>I can whip up a little example later tonight but I gotta go now</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T23:01:21.000050</ts>
    <user>Meaghan</user>
    <text>Ah no problem. Even tomorrow is fine.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T23:02:35.000174</ts>
    <user>Meaghan</user>
    <text>but… why whip up a little example?  Do you use logging in any real project that is open source?</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-02T23:06:02.000047</ts>
    <user>Marnie</user>
    <text>My open source projects are small libraries. Most of my recent racket work hasn't been open source</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T00:18:14.000017</ts>
    <user>Bertha</user>
    <text>&lt;@Meaghan&gt; Here's an example of defining a logger and providing the resulting functions, from one file, for others to use:
&lt;https://github.com/greghendershott/aws/blob/8803567f2e5fc8bc497d510d510f7943d1b8fbd8/aws/util.rkt#L184-L189&gt;
And here are examples of one of them being used:
&lt;https://github.com/greghendershott/aws/search?q=log-aws-debug&amp;amp;type=Code&gt;</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T00:20:35.000118</ts>
    <user>Bertha</user>
    <text>This example doesn't do anything special in terms of a log _receiver_. It assumes you'll use one of the normal ways to set log levels for various loggers. DrRacket has a UI for this. racket-mode has a racket-logger-mode. There are command line flags and env vars for command-line racket.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T00:21:38.000088</ts>
    <user>Bertha</user>
    <text>I did one special log receiver that forwards the logging events on to Amazon CloudWatch Logs, but that's in a close-source project.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T10:52:28.000529</ts>
    <user>Meaghan</user>
    <text>&lt;@Bertha&gt; Thanks for the example, but I’m still very confused…</text>
  </message>
  <message conversation_id="676">
    <ts>2018-08-03T10:53:26.000499</ts>
    <user>Meaghan</user>
    <text>First of all, what does the default logger, the `(current-logger)` logger, do? Where does it output the logs?</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T10:56:33.000181</ts>
    <user>Meaghan</user>
    <text>Second, What does a log receiver do? What problem does it solve? When should I use it?</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T10:58:04.000296</ts>
    <user>Franklin</user>
    <text>&lt;@Meaghan&gt; If you are using DrRacket, you can find the logger in the "View" menu.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:07:54.000141</ts>
    <user>Bertha</user>
    <text>&lt;@Meaghan&gt; You can simply use `printf`. Seriously. I often do. It's a time-honored tradition.
There are two problems (you might or might not have) which loggers solve:
1- At runtime you want toggle which sets of messages are displayed. So, which logger "facility", i.e. a `define-logger` name.
2- At runtime you want to set what _level_ of messages are displayed (debug ... fatal).
And, if the string to display requires some expensive work to prepare, you'd like that work not to happen at all if the message won't be displayed due to 1 or 2.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:09:13.000536</ts>
    <user>Meaghan</user>
    <text>&lt;@Franklin&gt; Hmm, no I don’t use DrRacket. I just want to log to a file.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:09:57.000081</ts>
    <user>Meaghan</user>
    <text>&lt;@Bertha&gt;   But what problems do logger `receivers` solve?</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:11:30.000163</ts>
    <user>Meaghan</user>
    <text>&lt;@Bertha&gt;  And yeah I do want to use a logger, over `printf`. But I want to output logs to a file, or later maybe to cloudwatch or anything.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:12:30.000438</ts>
    <user>Meaghan</user>
    <text>In the docs there’s this example: 
```&amp;gt; (let ([my-log (open-output-string)])
    (with-logging-to-port my-log
      (lambda ()
        (log-warning "Warning World!")
        (+ 2 2))
      'warning)
    (get-output-string my-log))
"Warning World!\n"```</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:13:17.000554</ts>
    <user>Bertha</user>
    <text>There can be zero or more log receivers. Each can do something different.  One displays. One writes to file. One writes to CloudWatch.
Plus, each receiver can have its own level to show (just fatal, or, everything even debug).</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:13:18.000076</ts>
    <user>Meaghan</user>
    <text>But I don’t want to call this big chunk everytime I want to log, and I don’t want to open and close the file everytime I log something, I guess.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:14:47.000479</ts>
    <user>Meaghan</user>
    <text>Ideally, I was looking for something like, I globally setup the logger to output to a file, and then later when I call `log-info` or whatever, that log will just go to the log file.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:15:07.000335</ts>
    <user>Bertha</user>
    <text>That's described in the docs somewhere.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:17:13.000443</ts>
    <user>Bertha</user>
    <text>OK the syslog is described, but not your own file.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:18:59.000468</ts>
    <user>Meaghan</user>
    <text>BTW is there a easy way to edit the docs?  I often feel confused after reading the docs without examples.  Unless it’s just me, or we should maybe put the stuff into the docs.</text>
  </message>
  <message conversation_id="675">
    <ts>2018-08-03T11:28:18.000347</ts>
    <user>Meaghan</user>
    <text>OK I found this. A good example about log receivers.   &lt;https://gist.github.com/Metaxal/6511048&gt;</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T16:54:45.000124</ts>
    <user>Claud</user>
    <text>Is there a reliable way to rebuild outdated bytecode files? I have tried `raco setup --fast-clean &amp;amp;&amp;amp; raco setup`, which took forever but didn't solve the problem.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T16:56:13.000232</ts>
    <user>Franklin</user>
    <text>-j &amp;lt;n&amp;gt;, --jobs &amp;lt;n&amp;gt;, --workers &amp;lt;n&amp;gt; : Use &amp;lt;n&amp;gt; parallel jobs</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T16:57:09.000213</ts>
    <user>Franklin</user>
    <text>Can't remember if raco setup uses 1 or more cores as default.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T16:57:24.000139</ts>
    <user>Franklin</user>
    <text>Try -j 4 and see if it helps.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T16:58:02.000114</ts>
    <user>Claud</user>
    <text>I think it uses all cores (I see e.g. "raco setup: 7 making:"), but the speed isn't the problem.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T16:58:48.000315</ts>
    <user>Franklin</user>
    <text>Is it the drracket zo-files, that aren't updated?</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:00:02.000011</ts>
    <user>Claud</user>
    <text>It is all at the command line. After running the above I am still getting: ```
Sapientia:config philip$ ./no-voyant-test.rkt
instantiate-linklet: mismatch;
 reference to a variable that is unintialized;
 possibly, bytecode file needs re-compile because dependencies changed
  name: idY89.1
  exporting instance: "/Applications/Racket v7.0/share/pkgs/srfi-lite-lib/srfi/14/char-set.rkt"
  importing instance: "/Applications/Racket v7.0/share/pkgs/srfi-lite-lib/srfi/13/string.rkt"
```</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:00:45.000024</ts>
    <user>Franklin</user>
    <text>Over my pay grade :slightly_smiling_face:</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:01:22.000377</ts>
    <user>Franklin</user>
    <text>Bot it says "possibly", so maybe the problem is elsewhere?</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:03:26.000203</ts>
    <user>Claud</user>
    <text>It could be, but I've chased the error to `srfi-lite-lib` from `net/cookies` and `web-server` by deleting `compiled/` directories.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:03:58.000309</ts>
    <user>Franklin</user>
    <text>Does a test program that does nothing but requiring srfi/13 work?</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:06:23.000264</ts>
    <user>Claud</user>
    <text>Yes, I can run ```
#lang racket

(require srfi/13 srfi/14)
```</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:06:38.000356</ts>
    <user>Franklin</user>
    <text>That's odd.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:07:28.000308</ts>
    <user>Franklin</user>
    <text>Maybe it is a specific function / macro / variable from srfi-14 that causes the problem.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:08:30.000096</ts>
    <user>Franklin</user>
    <text>The "name: idY89.1" might mean that it is produced by a macro.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:12:06.000081</ts>
    <user>Franklin</user>
    <text>Work around: use srfi/14 instead of srfi-lite/14</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:12:06.000260</ts>
    <user>Franklin</user>
    <text>?</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:13:19.000321</ts>
    <user>Claud</user>
    <text>The thing is, my code doesn't import any of those modules.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:13:30.000111</ts>
    <user>Franklin</user>
    <text>Oh.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:14:21.000214</ts>
    <user>Claud</user>
    <text>By running `raco setup srfi net/cookies web-server ricoeur`, I now get:
```
instantiate-linklet: mismatch;
 reference to a variable that is unintialized;
 possibly, bytecode file needs re-compile because dependencies changed
  name: s:string-&amp;gt;list
  exporting instance: "/Applications/Racket v7.0/share/pkgs/srfi-lite-lib/srfi/13/string.rkt"
  importing instance: "/Applications/Racket v7.0/share/pkgs/net-cookies-lib/net/cookies/common.rkt"
```</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:14:45.000011</ts>
    <user>Claud</user>
    <text>(where `ricoeur` is my collection)</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:15:43.000209</ts>
    <user>Franklin</user>
    <text>srfi/13/string.rkt  is mentioned again</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:19:43.000066</ts>
    <user>Claud</user>
    <text>Yes, but then running `raco setup --fast-clean srfi net/cookies web-server &amp;amp;&amp;amp; raco setup srfi net/cookies web-server ricoeur` has now changed the error to:
```
instantiate-linklet: mismatch;
 reference to a variable that is unintialized;
 possibly, bytecode file needs re-compile because dependencies changed
  name: idX25.1
  exporting instance: "/Applications/Racket v7.0/share/pkgs/web-server-lib/web-server/http/cookie.rkt"
  importing instance: "/Applications/Racket v7.0/share/pkgs/web-server-lib/web-server/http/xexpr.rkt"
```</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:20:21.000339</ts>
    <user>Claud</user>
    <text>I've been chasing it from library to library, but I can't get rid of it.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:21:27.000047</ts>
    <user>Franklin</user>
    <text>what's the difference between clean and fast-clean</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:22:45.000058</ts>
    <user>Carlyn</user>
    <text>&lt;@Claud&gt; have you just tried running `raco setup` without any arguments?</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:23:13.000076</ts>
    <user>Claud</user>
    <text>I've done `raco setup --fast-clean &amp;amp;&amp;amp; raco setup`</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:24:00.000116</ts>
    <user>Claud</user>
    <text>&lt;@Franklin&gt; "--fast-clean : Like --clean, but non-bootstrapping (can fail)"</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:27:06.000247</ts>
    <user>Claud</user>
    <text>&lt;@Carlyn&gt; I just ran `raco setup` with no arguments, and the error from my program changed to:
```
instantiate-linklet: mismatch;
 reference to a variable that is unintialized;
 possibly, bytecode file needs re-compile because dependencies changed
  name: idY9.1
  exporting instance: "/Applications/Racket v7.0/share/pkgs/web-server-lib/web-server/lang/web-cells.rkt"
  importing instance: "/Applications/Racket v7.0/share/pkgs/web-server-lib/web-server/lang/abort-resume.rkt"
```</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:27:57.000006</ts>
    <user>Carlyn</user>
    <text>It does seem that the “possibly” part of the error message is not the right explanation, then. :)</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:28:13.000289</ts>
    <user>Claud</user>
    <text>IIRC that's where the error was after `raco setup --fast-clean &amp;amp;&amp;amp; raco setup`, too, but doing it with `--fast-clean` took, like, maybe most of an hour, so I'm not eager to repeat that.</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:30:22.000017</ts>
    <user>Claud</user>
    <text>Interestingly, I just discovered that I get a different error from `racket no-voyant-test.rkt` than `./no-voyant-test.rkt`. This version is:
```
Sapientia:config philip$ racket no-voyant-test.rkt
instantiate-linklet: mismatch;
 reference to a variable that is unintialized;
 possibly, bytecode file needs re-compile because dependencies changed
  name: idX89.1
  exporting instance: "/Applications/Racket v7.0/share/pkgs/net-cookies-lib/net/cookies/server.rkt"
  importing instance: "/Applications/Racket v7.0/share/pkgs/web-server-lib/web-server/http/cookie.rkt"
```</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:31:16.000196</ts>
    <user>Carlyn</user>
    <text>This reminds me of an issue I was having a couple months back, but I can’t remember the details precisely…</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:32:44.000195</ts>
    <user>Franklin</user>
    <text>"unintialized" an i is missing in the error message</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:33:03.000129</ts>
    <user>Franklin</user>
    <text>google pointed it out</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:35:18.000276</ts>
    <user>Carlyn</user>
    <text>hah, so it is</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T17:46:52.000160</ts>
    <user>Claud</user>
    <text>That, at least, I know how to fix: &lt;https://github.com/racket/racket/pull/2209&gt;</text>
  </message>
  <message conversation_id="678">
    <ts>2018-08-03T18:00:25.000188</ts>
    <user>Claud</user>
    <text>It looks like which specific modules will be named in the error I'm getting is not deterministic. With no `raco setup` etc. in between, I can get, for example:
```
Sapientia:config philip$ ./no-voyant-test.rkt
instantiate-linklet: mismatch;
 reference to a variable that is unintialized;
 possibly, bytecode file needs re-compile because dependencies changed
  name: idY35.1
  exporting instance: "/Applications/Racket v7.0/share/pkgs/srfi-lite-lib/srfi/29/localization.rkt"
  importing instance: "/Applications/Racket v7.0/share/pkgs/srfi-lite-lib/srfi/19/time.rkt"
Sapientia:config philip$ ./no-voyant-test.rkt
instantiate-linklet: mismatch;
 reference to a variable that is unintialized;
 possibly, bytecode file needs re-compile because dependencies changed
  name: s:string-&amp;gt;list
  exporting instance: "/Applications/Racket v7.0/share/pkgs/srfi-lite-lib/srfi/13/string.rkt"
  importing instance: "/Applications/Racket v7.0/share/pkgs/net-cookies-lib/net/cookies/common.rkt"
```</text>
  </message>
  <message conversation_id="677">
    <ts>2018-08-03T21:13:50.000040</ts>
    <user>Claud</user>
    <text>I just tried deleting and replacing my Racket installation, and I still get the error.</text>
  </message>
  <message conversation_id="678">
    <ts>2018-08-05T10:04:58.000023</ts>
    <user>Franklin</user>
    <text>If anyone needs a project: Write a langserver for Racket:  &lt;https://langserver.org/&gt;</text>
  </message>
  <message conversation_id="678">
    <ts>2018-08-05T10:28:12.000029</ts>
    <user>Bertha</user>
    <text>&lt;@Franklin&gt; It looks like there are already at least two: &lt;https://pkgd.racket-lang.org/pkgn/search?tags=lsp&gt;</text>
  </message>
  <message conversation_id="678">
    <ts>2018-08-05T10:28:28.000069</ts>
    <user>Franklin</user>
    <text>Ooh! Great.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T10:46:42.000021</ts>
    <user>Bertha</user>
    <text>Going to make remacs an LSP client?</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T10:48:16.000010</ts>
    <user>Bertha</user>
    <text>That first pkg, an LSP server for the Racket lang, has some generic LSP implementation stuff that either a client or server could use.
Maybe they'd be willing to split it out into a sep pkg.</text>
  </message>
  <message conversation_id="678">
    <ts>2018-08-05T10:50:08.000058</ts>
    <user>Franklin</user>
    <text>Nice tip. Yes, long term I think implementing LSP would be a good thing. Lots of work in getting a racket-mode working. So not having to repeat the process for C, JavaScript, etc would be great.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T10:55:25.000109</ts>
    <user>Bertha</user>
    <text>Speaking of LSP-like stuff, the past few weeks I overhauled how racket-mode's Emacs Lisp front end talks to the Racket back end over a TCP connection.
The protocol is simply writing and reading s-expressions. :slightly_smiling_face:
It used to be one write/read (request/response) at a time.
I recently changed it to use a nonce/id and the responses can come at any time.
So now multiple commands can be "in flight", and a long one won't block a shorter one.
On the Emacs front-end there's simply a hash-table of nonce -&amp;gt; callback function.
So the basic command request/response approach now is "async".</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T10:56:36.000055</ts>
    <user>Bertha</user>
    <text>When it's Emacs and Racket, simply writing/reading s-expressions is of course nice and something like JSON-RPC for LSP seems "heavy".
But in the general case of editors and langs, LSP seems fine and not _that_ "heavy" compared to some specs I've seen.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T10:59:38.000038</ts>
    <user>Franklin</user>
    <text>Did you make the communication async to make the repl more robust? Or just to prevent blocking?</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:02:30.000035</ts>
    <user>Bertha</user>
    <text>Two steps.
1. Few weeks ago, made the commands async to prevent blocking the Emacs UI. Worked well.
2. Then realized, something like racket-expand-file on a 1000 line file, the macro-debugger/stepper-text can take many seconds before you can even do the first step. Although it's not blocking the Emacs UI generally, if you try another _racket-mode command_, of course _that_ will be blocked. So then decoupled the requests and responses.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:03:55.000044</ts>
    <user>Bertha</user>
    <text>I'd thought of doing this for literally years, but the idea of command responses showing up async made me queasy.
So I just needed time to think it through. Plus for long stretches wasn't able to focus on anything complicated with racket-mode, due to other work.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:05:13.000051</ts>
    <user>Franklin</user>
    <text>I like your approach. Writing a repl is definitely more complicated than I expected.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:06:10.000006</ts>
    <user>Bertha</user>
    <text>It's been an interesting journey, to do step by step.
The first version of racket-mode just did a little syntax-highlighting fixes to scheme-mode, and dumped xrepl ,commands into a shell buffer, basically. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:09:40.000022</ts>
    <user>Franklin</user>
    <text>Remacs (still need a better name) is progressing. I have basic highlighting, ] inserts matching parenthesis, indentation almost works (I think it works, but I need to fix a bug in the partial-parser). Now I am improving the actual repl.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:10:44.000022</ts>
    <user>Franklin</user>
    <text>It's very helpful to look at racket-mode for Emacs.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:13:43.000031</ts>
    <user>Bertha</user>
    <text>Cool. Now that my "Summer of Emacs" commit-storm is winding down, I want to take a look at Remacs.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:14:59.000032</ts>
    <user>Franklin</user>
    <text>It's still alpha-quality. The pieces are beginning to fell into plave though.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:15:14.000035</ts>
    <user>Bertha</user>
    <text>Are you able to use Remacs to edit Remacs yet? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:15:33.000043</ts>
    <user>Franklin</user>
    <text>Nope!</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:16:08.000039</ts>
    <user>Bertha</user>
    <text>That will be a nice :tada: milestone</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:19:53.000042</ts>
    <user>Franklin</user>
    <text>I am impressed by the quality of the Emacs documentation.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:20:55.000071</ts>
    <user>Franklin</user>
    <text>I decided to keep the names used in the Emacs reference and mimic their operation closely.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:30:04.000121</ts>
    <user>Bertha</user>
    <text>Hmm, actually I'm a little confused how LSP is supposed to work with langs where you'd have both an edit buffer and a REPL.
The LSP model seems to be, "Tell me, the LSP server, when you open a file and as you make changes to it in an edit buffer. I will keep a copy synchronized, so I know what to do when you give me commands."
In that model, what is a REPL?  Is it like a second edit buffer? How are changes in it (like new definitions) supposed to be made known to the server if at all?</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:32:33.000015</ts>
    <user>Bertha</user>
    <text>Anyway just an idle question. Some googling would probably answer.</text>
  </message>
  <message conversation_id="679">
    <ts>2018-08-05T11:33:56.000029</ts>
    <user>Franklin</user>
    <text>Can't find anything. It would be a natural thing to include repls in the tables on &lt;http://langserver.org|langserver.org&gt;.</text>
  </message>
  <message conversation_id="680">
    <ts>2018-08-05T12:12:54.000041</ts>
    <user>Meaghan</user>
    <text>Have you checked out the two listed above?</text>
  </message>
  <message conversation_id="680">
    <ts>2018-08-05T12:13:26.000058</ts>
    <user>Meaghan</user>
    <text>One seems to be just having indentation and color. The other one, I couldn’t get it running on my machine.</text>
  </message>
  <message conversation_id="680">
    <ts>2018-08-05T12:13:48.000004</ts>
    <user>Meaghan</user>
    <text>I have been longing a lsp server for racket for a long time.</text>
  </message>
  <message conversation_id="680">
    <ts>2018-08-05T12:23:14.000060</ts>
    <user>Meaghan</user>
    <text>Would be nice too get them work on my machine.</text>
  </message>
  <message conversation_id="680">
    <ts>2018-08-05T13:40:59.000049</ts>
    <user>Meaghan</user>
    <text>Is there any good tutorial about functional programming patterns, especially for Racket?</text>
  </message>
  <message conversation_id="681">
    <ts>2018-08-05T13:51:34.000049</ts>
    <user>Monserrate</user>
    <text>&lt;@Claud&gt; rather than rerunning `raco setup`, you can just run `raco make blah.rkt`</text>
  </message>
  <message conversation_id="680">
    <ts>2018-08-05T13:51:44.000054</ts>
    <user>Monserrate</user>
    <text>that will compile that file and all its dependencies</text>
  </message>
  <message conversation_id="681">
    <ts>2018-08-05T13:52:21.000027</ts>
    <user>Monserrate</user>
    <text>if the particular file you're running has an out-of-date zo file, then `raco setup` will only fix that if your file is part of a collection somewhere</text>
  </message>
  <message conversation_id="680">
    <ts>2018-08-05T13:52:27.000053</ts>
    <user>Monserrate</user>
    <text>if not, `raco setup` won't help</text>
  </message>
  <message conversation_id="680">
    <ts>2018-08-05T14:10:00.000009</ts>
    <user>Meaghan</user>
    <text>&lt;@Bertha&gt; That’s actually a very good question.  It’s like we are keeping two set of states.  I think it could at least work if we just keep the lsp server and repl separate.  It’s actually interesting to think the repl as a edit buffer, but maybe it’s a buffer that you can only add stuff, and not update or delete anything, I think.  In that case it might not be very useful for the lsp server.</text>
  </message>
  <message conversation_id="681">
    <ts>2018-08-05T14:11:26.000069</ts>
    <user>Meaghan</user>
    <text>There are already lsp server for CL and clojure though.  I’m interested in how they tackle this.</text>
  </message>
  <message conversation_id="682">
    <ts>2018-08-06T15:59:02.000237</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; &lt;@Willette&gt; &lt;@Eugena&gt; And/or whoever maintains racket these days: it looks like Racket 7's gui isn’t working on OSX 10.7: &lt;https://stackoverflow.com/questions/51698819/cant-run-drracket-or-gracket-7-0&gt;</text>
  </message>
  <message conversation_id="682">
    <ts>2018-08-06T15:59:29.000312</ts>
    <user>Odis</user>
    <text>maintains the racket distribution process*</text>
  </message>
  <message conversation_id="682">
    <ts>2018-08-06T16:00:28.000386</ts>
    <user>Odis</user>
    <text>If we do have a minimum os x version requirement, we should probably document it somewhere (unless we already have and I just missed it.)</text>
  </message>
  <message conversation_id="682">
    <ts>2018-08-06T16:00:30.000540</ts>
    <user>Lynna</user>
    <text>&lt;https://github.com/racket/racket/issues/2215&gt;</text>
  </message>
  <message conversation_id="682">
    <ts>2018-08-06T16:02:47.000301</ts>
    <user>Odis</user>
    <text>Okay cool, thanks.</text>
  </message>
  <message conversation_id="682">
    <ts>2018-08-06T16:03:23.000217</ts>
    <user>Lynna</user>
    <text>I think the intended system requirements used to be listed on the download page, but we lost that somewhere along the way.</text>
  </message>
  <message conversation_id="682">
    <ts>2018-08-06T16:05:54.000057</ts>
    <user>Odis</user>
    <text>ya, I don’t see them anywhere. Would it make sense for one of us to add them back?</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:29:14.000242</ts>
    <user>Carter</user>
    <text>I have a (hopefully quick) question.. if that is an appropriate place to ask...</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:29:42.000041</ts>
    <user>Carter</user>
    <text>I am trying my hand at macros and ran into the following: &lt;http://pasterack.org/pastes/82625&gt;</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:36:16.000279</ts>
    <user>Carlyn</user>
    <text>&lt;@Carter&gt; Try this out (requires Racket 7):
```
(define-syntax (def-par stx)
  (syntax-parse stx
    [(_ name:id {~seq par:id val} ...)
     #:with [par-str ...] (map (compose symbol-&amp;gt;string syntax-e) (syntax-&amp;gt;list #'[par ...]))
     #'(define name (hash {~@ 'par-str val} ...))]))
```</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:39:01.000021</ts>
    <user>Franklin</user>
    <text>That's a nice solution!  The construct ~@ is a nice trick.</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:39:10.000327</ts>
    <user>Carlyn</user>
    <text>That’s the part that needs Racket 7. :)</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:39:22.000108</ts>
    <user>Carter</user>
    <text>wow... thanks!</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:39:32.000408</ts>
    <user>Carter</user>
    <text>i will work through to understand</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:39:50.000458</ts>
    <user>Franklin</user>
    <text>(map symbol-&amp;gt;string (syntax-&amp;gt;datum #'(par ...)))   hides the syntax-e</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:40:20.000497</ts>
    <user>Carter</user>
    <text>one question more :slightly_smiling_face:. the {} are used to match a certain pattern but without actually matching parentheses?</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:42:12.000351</ts>
    <user>Carlyn</user>
    <text>Oh, the curly braces are interchangeable with parens, just as square brackets are. Perhaps I shouldn’t have let my (nonstandard) stylistic choice leak into my example!</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:43:10.000031</ts>
    <user>Carlyn</user>
    <text>You could replace them with parens and it would work just fine. I just use the braces to highlight that I’m not actually matching or constructing a list.</text>
  </message>
  <message conversation_id="683">
    <ts>2018-08-06T16:50:26.000238</ts>
    <user>Carter</user>
    <text>Thanks again!</text>
  </message>
  <message conversation_id="684">
    <ts>2018-08-07T13:15:24.000348</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Can I ask you to take a look at this PR at some point? Or, alternatively, let me know if you think someone else would be better suited to reviewing it? &lt;https://github.com/racket/racket/pull/2188&gt;</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:12:35.000288</ts>
    <user>Franklin</user>
    <text>I am confused by the result of running:
```
#lang racket
(define sexp "(define foo 42) (define (bar x) (+ x 1))")
(define in   (open-input-string sexp))
(file-position in 16)
(require syntax-color/racket-lexer)
(racket-lexer in)
(racket-lexer in)
(racket-lexer in)
(racket-lexer in)
(racket-lexer in)
(racket-lexer in)
```</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:13:24.000106</ts>
    <user>Franklin</user>
    <text>The example uses the standard racket-lexer to lex from the beginning of `(define (bar x) ...)` which is position 16.</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:13:44.000229</ts>
    <user>Franklin</user>
    <text>The lexer produces the correct tokens.</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:14:08.000383</ts>
    <user>Franklin</user>
    <text>However the start-end positions of the tokens doesn't start at 16 - they start at 0 ?</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:14:21.000388</ts>
    <user>Franklin</user>
    <text>Make that 1 instead of 0.</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:14:28.000207</ts>
    <user>Franklin</user>
    <text>What am I missing?</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:20:21.000134</ts>
    <user>Carlyn</user>
    <text>&lt;@Franklin&gt; I believe the internal position counter is distinct from the seek position within the file (which is confusing, and I think I have been confused by it before). Try using `set-port-next-location!` as well?</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:21:02.000064</ts>
    <user>Carlyn</user>
    <text>You might also want `port-count-lines!` depending on what you’re doing.</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:26:01.000137</ts>
    <user>Franklin</user>
    <text>&lt;@Carlyn&gt; Could be it, but I can't get the expected result. The lexer still counts from 1.
```
#lang racket
(define sexp "(define foo 42) (define (bar x) (+ x 1))")
(define in   (open-input-string sexp))
(port-count-lines-enabled #t)
(file-position in 16)
(set-port-next-location! in 1 0 16)
(require syntax-color/racket-lexer)
(racket-lexer in)
(racket-lexer in)
(racket-lexer in)
(racket-lexer in)
(racket-lexer in)
(racket-lexer in)
```</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:27:36.000059</ts>
    <user>Franklin</user>
    <text>Ah! (port-count-lines! in)</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:27:44.000460</ts>
    <user>Carlyn</user>
    <text>&lt;@Franklin&gt; You need to use either `(port-count-lines! in)` or set `port-count-lines-enabled` to `#t` _before_ creating the input port (or, more specifically, during the dynamic extent of the port’s creation).</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:28:14.000338</ts>
    <user>Franklin</user>
    <text>It's still a bit odd - I don't need line numbers.</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:28:29.000059</ts>
    <user>Carlyn</user>
    <text>Yeah, I’m not sure why it wouldn’t respect the position!</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:28:41.000452</ts>
    <user>Franklin</user>
    <text>Thanks for the help.</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:29:10.000451</ts>
    <user>Carlyn</user>
    <text>Oh, hm: “If line counting has not been enabled for `port` or if `port` is a custom port that defines its own counting function, then `set-port-next-location!` has no effect.”</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:29:39.000111</ts>
    <user>Franklin</user>
    <text>Yes, but `file-postion` should have an effect.</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:30:31.000318</ts>
    <user>Carlyn</user>
    <text>Well, also see this sentence at the top of that documentation section: “By default, Racket keeps track of the position in a port as the number of bytes that have been read from or written to any port (independent of the read/write position, which is accessed or changed with `file-position`).”</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:30:47.000183</ts>
    <user>Carlyn</user>
    <text>I’ll be honest, I have no idea why the API works the way it does, and I find it confusing, too, but there’s probably a reason. :)</text>
  </message>
  <message conversation_id="685">
    <ts>2018-08-07T15:33:25.000057</ts>
    <user>Franklin</user>
    <text>Oh - the number of bytes *read* !. Yeah, then changing the position has no effect.</text>
  </message>
  <message conversation_id="686">
    <ts>2018-08-07T16:28:09.000323</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; It looks like pango supports creating fonts from ttf (true type font) files (without them being installed in the user’s fontbook), but it doesn’t look like Racket’s font facilities do that. Is there any particular reason you can’t do it in Racket, or did it just not come up?</text>
  </message>
  <message conversation_id="686">
    <ts>2018-08-07T16:29:27.000005</ts>
    <user>Odis</user>
    <text>(I ask because I’m tired have having to make sure my users install a font, and would like to embed a ttf font in the slideshow/paper/pict, etc.</text>
  </message>
  <message conversation_id="686">
    <ts>2018-08-07T16:47:08.000079</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; The last time I looked into that, there were various obstacles to making it work on all platforms. Things may have changed.</text>
  </message>
  <message conversation_id="686">
    <ts>2018-08-07T16:57:20.000071</ts>
    <user>Odis</user>
    <text>Mmm…okay.</text>
  </message>
  <message conversation_id="686">
    <ts>2018-08-07T16:57:43.000265</ts>
    <user>Odis</user>
    <text>I’ll take another look at it in a bit then, thanks.</text>
  </message>
  <message conversation_id="686">
    <ts>2018-08-07T16:58:28.000507</ts>
    <user>Odis</user>
    <text>(Basically, as it currently stands, I can’t really give coauthors a pict program and assume that they will be able to run it without much effort. :disappointed: So I want to fix that. :slightly_smiling_face: Anyway, thanks.)</text>
  </message>
  <message conversation_id="687">
    <ts>2018-08-08T11:33:14.000039</ts>
    <user>Franklin</user>
    <text>I have noticed that elisp has an not-equal operator:  /=</text>
  </message>
  <message conversation_id="687">
    <ts>2018-08-08T11:33:33.000403</ts>
    <user>Franklin</user>
    <text>Scheme and Racket doesn't.</text>
  </message>
  <message conversation_id="687">
    <ts>2018-08-08T11:35:23.000314</ts>
    <user>Franklin</user>
    <text>Common Lisp seems not to have /= but does have char/= and string/=.</text>
  </message>
  <message conversation_id="687">
    <ts>2018-08-08T13:05:31.000066</ts>
    <user>Odis</user>
    <text>&lt;@Franklin&gt; Lol, reminds me of: &lt;https://stackoverflow.com/questions/39114564/why-are-not-equal-and-similar-negated-comparisons-not-built-into-racket&gt;</text>
  </message>
  <message conversation_id="687">
    <ts>2018-08-08T13:07:03.000493</ts>
    <user>Franklin</user>
    <text>&lt;@Odis&gt; I had forgotten about that :slightly_smiling_face:</text>
  </message>
  <message conversation_id="688">
    <ts>2018-08-08T13:13:31.000537</ts>
    <user>Odis</user>
    <text>I still like the questions: `(not (that-big-of-deal?))` line, but I also sometimes find myself wishing there was some sort of != operator. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="688">
    <ts>2018-08-08T13:15:55.000134</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; So it looks like using ttf is possible when combining pango with fontconfig: &lt;https://stackoverflow.com/questions/43735411/how-to-create-pangofont-object-from-ttf-font-file&gt;</text>
  </message>
  <message conversation_id="688">
    <ts>2018-08-08T13:16:09.000669</ts>
    <user>Odis</user>
    <text>Since Racket already includes a (modified) copy of fontconfig, this might be doable. ^.^</text>
  </message>
  <message conversation_id="688">
    <ts>2018-08-08T18:29:24.000114</ts>
    <user>Odis</user>
    <text>Oh, also &lt;@Lynna&gt;, is the draw-ttf-x86_64-linux-natipkg still used for anything?</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T08:05:51.000034</ts>
    <user>Marnie</user>
    <text>how come impersonator contracts are "wrong" on immutable struct fields but perfectly acceptable on list elements? what makes an immutable list different from an immutable struct?</text>
  </message>
  <message conversation_id="688">
    <ts>2018-08-09T08:58:01.000226</ts>
    <user>Lynna</user>
    <text>&lt;@Odis&gt; I don't remember for sure, but I think it's needed to have fonts when the host doesn't otherwise have any fonts installed.</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T10:22:02.000171</ts>
    <user>Monserrate</user>
    <text>&lt;@Marnie&gt; everyone has access to the `cons` constructor</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T10:25:27.000040</ts>
    <user>Marnie</user>
    <text>&lt;@Monserrate&gt; I don't follow at all</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T10:28:42.000630</ts>
    <user>Marnie</user>
    <text>thinking through this more - is the important part that a `struct/c` contract on an _instance_ of the structure type break invariants imposed by the guard procedure of the type?</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T10:35:36.000125</ts>
    <user>Marnie</user>
    <text>I'm seeing that there exists `impersonate-struct`, `chaperone-struct`, and `chaperone-struct-type` but no `impersonate-struct-type` which seems related</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T10:47:03.000507</ts>
    <user>Monserrate</user>
    <text>Yes that's right (or just by hiding the constructor)</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T10:58:46.000215</ts>
    <user>Monserrate</user>
    <text>if you're given an immutable structure value with 1 and 2 in the fields, you can't in general produce a similar struct with 3 and 4 as the field values</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T10:58:59.000538</ts>
    <user>Monserrate</user>
    <text>while obviously if you have a pair with 1 and 2, it's easy to write `(cons 3 4)`</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:29:42.000277</ts>
    <user>Marnie</user>
    <text>So if I had a geometry library with a `(point x y)` struct and provided a `(point/c x-contract y-contract)` combinator that allowed impersonator contracts, somebody could just make an impersonator contract that turns `(point 1 2)` into `(point 'general 'nonsense)` and explode my library code that internally uses unsafe math ops on point fields because it assumes they're always numbers.</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:30:39.000594</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="690">
    <ts>2018-08-09T11:31:42.000397</ts>
    <user>Marnie</user>
    <text>if I _never_ allow chaperones / impersonators on specific instances of a struct, is it safe to allow impersonation in the struct type constructor? (ignoring subtyping)</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:32:57.000290</ts>
    <user>Marnie</user>
    <text>concretely this came up a long time ago for me because I wanted an `optional` / `maybe` type with an `optional/c` contract combinator that allowed parametric contracts</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:33:19.000060</ts>
    <user>Marnie</user>
    <text>and I couldn't figure out how to do that beyond just shrugging and making the field of the internal optional struct mutable</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:33:37.000220</ts>
    <user>Monserrate</user>
    <text>yes, i think so</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:44:52.000600</ts>
    <user>Marnie</user>
    <text>&lt;@Monserrate&gt; Related line of inquisition: I noticed that the `data/order` and `data/enumeration` libraries actually carry the component contracts around explicitly with the order / enum and give you functions to access them. I've taken to doing that for most of my uses of contracts lately, but in a way where the constructors don't accept contracts and the combinators make contracts that implicitly add the component contracts to the value after chaperoning / impersonating. So I'll end up with an API that looks something like this:

```
make-frobnicator : {{some function or whatever}} -&amp;gt; frobnicator?
frobnicator/c : (-&amp;gt; contract? contract?)
frobnicator-domain : (-&amp;gt; frobnicator? contract?)
frobnicate! : (-&amp;gt;i ([frob frobnicator?] [v (frob) (frobnicator-domain)]) [_ void?])
```

I was able to do this a few ways: one, I made my own impersonator properties containing the contracts and stuck them in various places; two, I made separate struct types like `chaperone-frobnicator` and `impersonator-frobnicator` that have the extra contracts and work correctly with `chaperone-of?` and `impersonator-of?`; and three, I used one `frobnicator` struct with fields for the contracts that default to no contract and overrode `gen:equals+hash` to just ignore those contract fields so `chaperone-of?` and `impersonator-of?` work automatically. Do any of those approaches sound broken? Does one seem obviously better than the others to you?</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:46:06.000479</ts>
    <user>Monserrate</user>
    <text>I don't see anything particular better or worse, but the authors of those libraries (such as &lt;@Eileen&gt; or &lt;@Violeta&gt;) might have more ideas</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:49:37.000168</ts>
    <user>Eileen</user>
    <text>The enumerators use the contracts because the contracts are a handy way to express what the enumerators actually enumerate.</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:53:44.000121</ts>
    <user>Marnie</user>
    <text>The paper on the enumerators library was very helpful</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:58:39.000285</ts>
    <user>Marnie</user>
    <text>Maybe I should write this up in a racket users post with more examples</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T11:59:52.000335</ts>
    <user>Marnie</user>
    <text>eventually</text>
  </message>
  <message conversation_id="689">
    <ts>2018-08-09T15:06:31.000197</ts>
    <user>Marnie</user>
    <text>&lt;@Monserrate&gt; just realized something about the `point/c` example: what if I placed contracts... on the field contracts? Like, allowed impersonation but enforce that the impersonator contracts always return numbers</text>
  </message>
  <message conversation_id="691">
    <ts>2018-08-09T15:06:58.000459</ts>
    <user>Monserrate</user>
    <text>I don't know if that's possible for contracts</text>
  </message>
  <message conversation_id="691">
    <ts>2018-08-09T15:08:41.000107</ts>
    <user>Marnie</user>
    <text>I _think_ it is - probably by making something like `(contract/c in out)` that wraps a contract with one that checks what it's used on and what it returns</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:50:07.000038</ts>
    <user>Daria</user>
    <text>Hi all,</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:50:41.000175</ts>
    <user>Daria</user>
    <text>I'm trying to create a predicate in typed racket to assert types.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:51:13.000025</ts>
    <user>Daria</user>
    <text>Above is the best solution I can come up with but sadly it doesn't work that way.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:51:38.000162</ts>
    <user>Carlyn</user>
    <text>Are you familiar with `define-predicate`?</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:51:49.000266</ts>
    <user>Daria</user>
    <text>not yet. Let me google it.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:52:18.000023</ts>
    <user>Carlyn</user>
    <text>Don’t use google, use the Racket docs search: &lt;http://docs.racket-lang.org/search/index.html?q=define-predicate&gt;</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:52:26.000356</ts>
    <user>Daria</user>
    <text>thanks</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:55:06.000434</ts>
    <user>Daria</user>
    <text>None</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:55:34.000443</ts>
    <user>Daria</user>
    <text>As I understand the docs I should be able to do something like this but ... no way.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:56:07.000422</ts>
    <user>Carlyn</user>
    <text>You need `(define-predicate list-of-string? (Listof String))`; the grammar in the docs is `(define-predicate name t)`.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:56:22.000351</ts>
    <user>Daria</user>
    <text>forgot the name! works!</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:56:37.000394</ts>
    <user>Daria</user>
    <text>sry was confused by `make-predicate`</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:56:55.000170</ts>
    <user>Daria</user>
    <text>awesome, that was zero work</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T15:57:21.000209</ts>
    <user>Daria</user>
    <text>let's see if it works for my super-duper data-structures...</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:00:59.000262</ts>
    <user>Daria</user>
    <text>`Type Checker: Type Selectivity-Data could not be converted to a predicate: required a flat contract but generated a chaperone contract in: Selectivity-Data`</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:01:23.000131</ts>
    <user>Carlyn</user>
    <text>what is `Selectivity-Data`?</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:01:59.000470</ts>
    <user>Daria</user>
    <text>None</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:02:17.000171</ts>
    <user>Daria</user>
    <text>sry for spamming you with code and error messages</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:02:55.000014</ts>
    <user>Carlyn</user>
    <text>hashes and vectors can be mutable, so, for example, even if a hash contains only string keys and list values when you test a predicate, it might be modified by another thread</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:03:14.000106</ts>
    <user>Daria</user>
    <text>so I need an immutable hash instead?</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:03:17.000132</ts>
    <user>Carlyn</user>
    <text>and that other thread might insert a non-string key or a non-list value. so TR refuses to accept the predicate.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:03:36.000373</ts>
    <user>Carlyn</user>
    <text>I think there are immutable hash types in TR now, but I don’t think there are immutable vector types. I could be wrong, though.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:04:09.000020</ts>
    <user>Daria</user>
    <text>Maybe I can work around it by making the vector something else.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:04:29.000528</ts>
    <user>Daria</user>
    <text>So the hash needs to be immutable and the vector needs to go away, maybe I can do that.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:04:50.000410</ts>
    <user>Carlyn</user>
    <text>if you are just using the vector to store pairs, lists or cons pairs should be fine, which are immutable.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:04:55.000478</ts>
    <user>Daria</user>
    <text>there are immutable hashtables btw</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:05:22.000022</ts>
    <user>Carlyn</user>
    <text>it should work if you change the type to `(Immutable-HashTable String (Listof (List Real Real)))`.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:05:25.000295</ts>
    <user>Daria</user>
    <text>it depends on what `plot` wants. but I think I remember, it expects only a sequence there</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:05:46.000224</ts>
    <user>Daria</user>
    <text>that's what I'll try, thanks for the hint in any case.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:06:28.000126</ts>
    <user>Daria</user>
    <text>the `(Listof (Vector Real Real))` goes into `points` eventually.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:06:49.000436</ts>
    <user>Carlyn</user>
    <text>a workaround for this in general is to use a struct instead of a type alias. so if you do
```
(struct selectivity-data ([value : (HashTable String (Listof (Vector Real Real)))]))
```
then use `selectivity-data?`, then TR will treat that as sufficient evidence that `selectivity-data-value` will produce the type you want.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:08:01.000391</ts>
    <user>Daria</user>
    <text>really? how does it make a difference to wrap it in a struct?</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:08:34.000405</ts>
    <user>Carlyn</user>
    <text>this is because _constructing_ a `selectivity-data` structure imposes a requirement on the caller that the value has a sufficiently restrictive type, so the predicate `selectivity-data?` only needs to check the tag (the wrapper struct) to know the guarantee was met, rather than inspect the data inside.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:09:17.000214</ts>
    <user>Daria</user>
    <text>interesting</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:09:21.000379</ts>
    <user>Carlyn</user>
    <text>when you use the value in typed code, the type system will ensure you can’t break the guarantee, and if the data crosses a typed/untyped boundary, TR will wrap it in a contract that ensures the guarantee will hold.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:10:12.000075</ts>
    <user>Daria</user>
    <text>that is useful to know, some day I might not be able to work around mutable hash-tables and vectors.</text>
  </message>
  <message conversation_id="692">
    <ts>2018-08-09T16:10:52.000394</ts>
    <user>Daria</user>
    <text>as always, you are a big help! thank you so much.</text>
  </message>
  <message conversation_id="693">
    <ts>2018-08-10T12:02:07.000487</ts>
    <user>Andreas</user>
    <text>Hi guys, I am thinking of writing a macro that wraps around `contract-out` to selectively disable contracts at compile-time (I know this might be seen as bad, but it doubles the speed of my program). Is there already anything out there that does this?</text>
  </message>
  <message conversation_id="693">
    <ts>2018-08-10T12:05:43.000157</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; see the code here: &lt;https://github.com/racket/typed-racket/blob/master/typed-racket-lib/typed-racket/utils/utils.rkt#L111&gt;</text>
  </message>
  <message conversation_id="693">
    <ts>2018-08-10T12:09:45.000357</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; exactly what I needed, thanks.</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T14:50:25.000469</ts>
    <user>Carter</user>
    <text>Hello. I am trying to return several ```(define ...)``` expressions(?) with a macro. I managed to produce: ```'((define par-h (Parameter "h" "handling time" 123 kg)) (define par-a (Parameter "a" "attack rate" 321 kg)))```</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T14:51:09.000227</ts>
    <user>Monserrate</user>
    <text>&lt;@Carter&gt; you probably want `(begin (define ...) (define ...))`</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T14:51:11.000306</ts>
    <user>Carter</user>
    <text>My problem is the error ```define: not allowed in an expression context``` ... I have to get rid of the outermost pair of parentheses, i think</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T14:52:33.000439</ts>
    <user>Franklin</user>
    <text>Try `(let () (define ...) ...)`</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T14:55:12.000021</ts>
    <user>Aimee</user>
    <text>I think `begin` may be closer, since `begin` would let the `define`s be available outside but let` won't</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:01:04.000346</ts>
    <user>Carter</user>
    <text>I tried begin: (1) ```?: literal data is not allowed;
 no #%datum syntax transformer is bound in: "h"``` (2) However, if i copy the resulting expression to the REPL, it works (w/o the quote): ```'(begin (define par-h (Parameter "h" "handling time" 123 kilogram)) (define par-a (Parameter "a" "attack rate" 321 kilogram)))```</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:03:13.000266</ts>
    <user>Aimee</user>
    <text>The problem is probably somewhere else. What is the code for this macro? Is it returning a quoted s-expression?</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:03:48.000424</ts>
    <user>Carter</user>
    <text>it is returning the code from (2) (above)</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:03:57.000324</ts>
    <user>Carter</user>
    <text>evaluating it in the repl works</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:04:20.000130</ts>
    <user>Carter</user>
    <text>```(struct Parameter ([p-id : String]
                   [p-desc : String]
                   ;[p-val : Measure]
                   [p-num : Number]
                   [p-unit : Unit])```</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:04:42.000316</ts>
    <user>Aimee</user>
    <text>And how is it defined? Using `syntax-rules` or some other forms?</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:04:53.000441</ts>
    <user>Carter</user>
    <text>syntax-parse</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:05:10.000282</ts>
    <user>Carter</user>
    <text>```(define-syntax (def-par stx)
  (syntax-parse stx
    [(_ [~seq name:id descr:string val:number punit:expr] ...)
     #:fail-when (check-duplicate-identifier (syntax-&amp;gt;list #'(name ...))) "duplicate identifier"
     #:with [name-str ...] (map (compose symbol-&amp;gt;string syntax-e) (syntax-&amp;gt;list #'[name ...]))
     #:with [ids ...] (map
                       (λ (s) (string-&amp;gt;symbol (string-append "par-" ((compose symbol-&amp;gt;string syntax-e) s))))
                       (syntax-&amp;gt;list #'[name ...]))
     #''(begin (define ids (Parameter name-str descr val punit)) ...)]))```</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:06:45.000180</ts>
    <user>Carter</user>
    <text>This is how it would be used ```(def-par
  h "handling time" 123 kilogram
  a "attack rate" 321 kilogram)```</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:07:25.000223</ts>
    <user>Aimee</user>
    <text>Try this: `#'(begin (define ids (Parameter name-str descr val punit)) ...)`</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:08:06.000023</ts>
    <user>Carter</user>
    <text>i did. that leads to (1) (see above).</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:08:10.000251</ts>
    <user>Carter</user>
    <text>or am i missing something?</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:09:05.000176</ts>
    <user>Carter</user>
    <text>(1) -&amp;gt; "iteral data not allowed" error</text>
  </message>
  <message conversation_id="695">
    <ts>2018-08-10T15:13:56.000417</ts>
    <user>Franklin</user>
    <text>```
?: literal data is not allowed;
 no #%datum syntax
```
Just checking: Do you have an `(require (for-syntax racket/base))` ?</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:14:31.000355</ts>
    <user>Aimee</user>
    <text>&lt;@Carter&gt; here: `#'(begin (define ids (Parameter 'name-str descr val punit)) ...)`</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:14:54.000228</ts>
    <user>Aimee</user>
    <text>I think the way `name-str` is introduced give it no lexical information</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:15:23.000220</ts>
    <user>Aimee</user>
    <text>therefore the expander failed to find the `#%datum` for `name-str`</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:17:12.000038</ts>
    <user>Aimee</user>
    <text>another point: the new `ids` needs to be given the right scope in order to be visible outside:
```
     #:with [ids ...] (map
                       (λ (s)
                         (syntax-local-introduce  ;; &amp;lt;- here
                          (datum-&amp;gt;syntax #f (string-&amp;gt;symbol (string-append "par-" ((compose symbol-&amp;gt;string syntax-e) s))))))
                       (syntax-&amp;gt;list #'[name ...]))
```</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:17:35.000402</ts>
    <user>Aimee</user>
    <text>otherwise those `ids` will only be visible to this macro</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:23:00.000207</ts>
    <user>Carter</user>
    <text>&lt;@Aimee&gt; wow... with your last two tips it now works!</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:24:45.000227</ts>
    <user>Aimee</user>
    <text>a few helpers: `format-id` from `racket/syntax` combines what you need for `ids`, including introducing the right lexical context and format identifiers
&lt;https://gist.github.com/shhyou/4e0090b8f9c33f2c02cf3b1a2290cd93&gt;</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:25:45.000270</ts>
    <user>Aimee</user>
    <text>and to include the current lexical context in `name-str`s, quasi-syntax + escape could help</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:26:47.000277</ts>
    <user>Aimee</user>
    <text>or similarly `(datum-&amp;gt;syntax #'here (symbol-&amp;gt;string ...))`</text>
  </message>
  <message conversation_id="694">
    <ts>2018-08-10T15:27:46.000038</ts>
    <user>Carter</user>
    <text>Thank you a lot!</text>
  </message>
  <message conversation_id="696">
    <ts>2018-08-10T18:30:43.000065</ts>
    <user>Marnie</user>
    <text>in addition to the TR code sam linked, you might be interested in Option Contracts (&lt;https://docs.racket-lang.org/option-contract/index.html&gt;). They're more oriented towards runtime decision making about whether to use contracts or not as opposed to compile-time, and I find the API confusing, but they're designed for exactly the use case you describe</text>
  </message>
  <message conversation_id="697">
    <ts>2018-08-13T11:45:28.000084</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; is `procedure-reduce-keyword-arity-mask` supposed to be documented? Currently it's causing this test to fail: &lt;http://drdr.racket-lang.org/48495/racket/share/pkgs/typed-racket-test/test-docs-complete.rkt&gt;</text>
  </message>
  <message conversation_id="697">
    <ts>2018-08-13T12:44:39.000187</ts>
    <user>Lynna</user>
    <text>Yes, I forgot to add that one to the docs. Will do.</text>
  </message>
  <message conversation_id="697">
    <ts>2018-08-13T12:52:11.000280</ts>
    <user>Monserrate</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="696">
    <ts>2018-08-14T08:02:27.000100</ts>
    <user>Andreas</user>
    <text>What's the best way to send a function through a place? Maybe I don't need to send the function because the code for the function exists everywhere. I need to tell another place to run a function, so instead of sending the function (which might be hard) I can say, execute function X from module Y. What's the best way to serialize this?</text>
  </message>
  <message conversation_id="696">
    <ts>2018-08-14T09:07:41.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; the usual approach is a vector with a module path and a symbol, and then use dynamic require on the other end</text>
  </message>
  <message conversation_id="696">
    <ts>2018-08-14T09:08:32.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; Makes sense, thanks. I will try that.</text>
  </message>
  <message conversation_id="696">
    <ts>2018-08-14T09:29:24.000100</ts>
    <user>Andreas</user>
    <text>I have not played much with the graphing capabilities of Racket except to do math plots. Does anyone know how suitable it is to create timelines? (an example of things I am interested: &lt;https://github.com/jiahuang/d3-timeline&gt;)</text>
  </message>
  <message conversation_id="696">
    <ts>2018-08-14T09:29:38.000100</ts>
    <user>Andreas</user>
    <text>&lt;https://raw.githubusercontent.com/jiahuang/d3-timeline/master/examples/timeline4.png&gt;</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T10:10:27.000100</ts>
    <user>Carter</user>
    <text>Racket complains about: ```ffi-obj: couldn't get "hello" from #&amp;lt;path:/Users/totz/Desktop/eco-playground/libfuncs.dylib&amp;gt; (dlsym(0x60400033eb40, hello): symbol not found)```. But compiling/running a main.c that uses the "hello" function works. I am trying out the simplest imaginable wrapper: calling a C-function that prints "hello" in Racket.</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T10:16:16.000100</ts>
    <user>Carter</user>
    <text>Is there a way to just look into the #&amp;lt;ffi-lib&amp;gt; object to see what it is made of?</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T10:37:40.000100</ts>
    <user>Carter</user>
    <text>I am trying to follow this tutorial: &lt;https://docs.racket-lang.org/foreign/intro.html#%28part._.Libraries__.C_.Types__and_.Objects%29&gt; .  It doesnt complain about missing symbols. But it crashes DrRacket as soon as i call `(define win (initscr))`</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T11:59:52.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Carter&gt; is main.c being compiled as a library?</text>
  </message>
  <message conversation_id="699">
    <ts>2018-08-14T12:01:07.000100</ts>
    <user>Alesha</user>
    <text>oh I see it's a dylib, did you ensure that hello is being exported by that library?</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:01:49.000100</ts>
    <user>Carter</user>
    <text>Hm no i think not. However, I found and example in &lt;http://github.com/AutoFFI/racket-autoffi|github.com/AutoFFI/racket-autoffi&gt;</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:02:20.000100</ts>
    <user>Carter</user>
    <text>When using clang according to their example, it works now. (Before I used GCc)</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:03:18.000100</ts>
    <user>Carter</user>
    <text>So I guess I did it wrong somehow (zero experience). I did not use the Auto ffi tool itself though. Just their library compiling instruction </text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:04:14.000100</ts>
    <user>Alesha</user>
    <text>ok, great! It's been a while since I used Racket's ffi, in my experience those type of errors arise due to misconfiguration or missing exports</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:05:23.000100</ts>
    <user>Alesha</user>
    <text>Not sure why DrRacket crashed when you were following the tutorial, the libcurses might have not been found on your system but didn't think that would cause DrRacket to crash unless the code in the tutorial was incompatible with the version of libcurses found on your system</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:05:39.000100</ts>
    <user>Alesha</user>
    <text>that's the hazard of ffi, you have little protection if something goes awry in that layer</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:06:27.000100</ts>
    <user>Carter</user>
    <text>Hm couldn’t there be some kind of „box“ in which foreign code runs and at least some message In case of failure?</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:07:35.000100</ts>
    <user>Alesha</user>
    <text>not necessarily, there's not much you can do if the DrRacket process gets corrupted. FFI really is low-level, if there's memory corruption, all bets are off</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:14:33.000100</ts>
    <user>Carter</user>
    <text>Ah, i understnad</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:15:52.000100</ts>
    <user>Carter</user>
    <text>I have ```void hello() {
  printf("hello\n");
}``` in my `funcs.c` file. There seems to be no problem with the FFI except, that calling it in DrRacket REPL doesnt print "hello\n"...</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:16:58.000100</ts>
    <user>Carter</user>
    <text>However, ```int add(int a, int b) {
  return a + b;
}``` works when typing `(add 1 2)` it prints `3` just fine.</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:19:02.000100</ts>
    <user>Carter</user>
    <text>It would be great If someone just had a "Sundials" wrapper lying around :slightly_smiling_face: ... I'd need years to get there xD</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:23:01.000100</ts>
    <user>Alesha</user>
    <text>`printf` is a purely side-effect operation, any strings will be written to the C's standard output as opposed to being returned to the caller. C's output doesn't have to correspond to DrRacket's output, my guess is additional arrangements have to be made to connect the two</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:23:38.000100</ts>
    <user>Alesha</user>
    <text>try changing `printf("hello\n")` to `return "hello\n"` instead</text>
  </message>
  <message conversation_id="698">
    <ts>2018-08-14T12:34:16.000100</ts>
    <user>Carter</user>
    <text>Yes that works. Although it really prints (including `"` and `\n`)   `"hello\n"`</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T15:30:00.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; These two identifiers have the same binding, but the expander complains that one of them is unbound: &lt;https://gist.github.com/LeifAndersen/8c0a8c1722faabad5ee0c04221fc7e98&gt;</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T15:30:01.000100</ts>
    <user>Odis</user>
    <text>None</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T15:30:25.000100</ts>
    <user>Odis</user>
    <text>They do seem to have different scope sets, but they ‘seem’ to be resolving to the same identifier.</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T17:34:58.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Hmm…looks like its a Racket 7 bug.</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T17:35:09.000100</ts>
    <user>Odis</user>
    <text>(because it works in 6.12)</text>
  </message>
  <message conversation_id="701">
    <ts>2018-08-14T20:14:51.000100</ts>
    <user>Lynna</user>
    <text>The example works in v6.12, but only because that expander implements a mapping with a questionable choice of keys.

A variant of the example breaks in v6.12. To get the variant, change the end to
```
(define-syntax (f stx)
  ....
  #`(list (quote-syntax #,the-x)
          (quote-syntax x)))

(map eval (f))
```
which illustrates how the MPI on `the-x` isn't really the right one to refer to the enclosing module.

The v6.12 expander allows the original example because it uses a resolved module path in a mapping where it should arguably use the MPI as a key. The variant exposes an inconsistency by delaying the use of the resolved module path to a later point, where the "self" MPI must be really a specific MPI for things to work out.</text>
  </message>
  <message conversation_id="701">
    <ts>2018-08-14T20:16:19.000100</ts>
    <user>Lynna</user>
    <text>It's possible that the right solution is a new syntax function that lets you directly construct a binding for a given MPI and symbol (with a given code inspector).</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T20:37:41.000100</ts>
    <user>Odis</user>
    <text>Ya, that sounds right to me.</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T20:37:52.000100</ts>
    <user>Odis</user>
    <text>(That’s also what &lt;@Gaynell&gt; was pushing for earlier today.)</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T20:38:17.000100</ts>
    <user>Odis</user>
    <text>So, &lt;@Lynna&gt;, would that be the sort of thing you could easily write, or should I work it out?</text>
  </message>
  <message conversation_id="701">
    <ts>2018-08-14T21:06:00.000100</ts>
    <user>Lynna</user>
    <text>I can take a look tomorrow</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T21:27:17.000100</ts>
    <user>Odis</user>
    <text>Thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="700">
    <ts>2018-08-14T22:20:30.000100</ts>
    <user>Monserrate</user>
    <text>That would also let TR stop using code that basically looks like that eval</text>
  </message>
  <message conversation_id="702">
    <ts>2018-08-15T09:34:32.000100</ts>
    <user>Nelson</user>
    <text>(eq? (expt 2 3) (expt 2 3)) =&amp;gt; #t
(eq? (expt 2 100) (expt 2 100)) =&amp;gt; #f
why?</text>
  </message>
  <message conversation_id="701">
    <ts>2018-08-15T10:01:00.000100</ts>
    <user>Aimee</user>
    <text>`eq?` tests physical equality</text>
  </message>
  <message conversation_id="701">
    <ts>2018-08-15T10:01:30.000100</ts>
    <user>Aimee</user>
    <text>use `=` to test numerical equality</text>
  </message>
  <message conversation_id="703">
    <ts>2018-08-15T11:46:17.000100</ts>
    <user>Carlyn</user>
    <text>Is there an `equal-hash-code/recur` similar to `equal?/recur`?</text>
  </message>
  <message conversation_id="702">
    <ts>2018-08-15T12:04:24.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Nelson&gt; short answer: `(expt 2 3)` is a fixnum, no objects are allocated. `(expt 2 100)` is not a fixnum.</text>
  </message>
  <message conversation_id="702">
    <ts>2018-08-15T12:04:43.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Nelson&gt; Test with `fixnum?`</text>
  </message>
  <message conversation_id="704">
    <ts>2018-08-15T12:38:34.000100</ts>
    <user>Lynna</user>
    <text>Added. 

Instead of adding 4 functions, I could have added just 1 that's something like `syntax-binding-set-extend` to make a single binding and then have `datum-&amp;gt;syntax` accept a list of bindings as its first argument. I decided to go through an intermediate `syntax-binding-set` data structure, instead, because it seems more adpatible to different internal representations, and I decided to keep it separate from `datum-&amp;gt;syntax`.</text>
  </message>
  <message conversation_id="704">
    <ts>2018-08-15T13:20:05.000100</ts>
    <user>Helena</user>
    <text>I would try to make a timeline renderer using the `rectangles` renderer</text>
  </message>
  <message conversation_id="702">
    <ts>2018-08-15T13:59:11.000100</ts>
    <user>Nelson</user>
    <text>Thanks for the explanation about object allocation and fixnums</text>
  </message>
  <message conversation_id="705">
    <ts>2018-08-15T14:35:46.000100</ts>
    <user>Aimee</user>
    <text>Is it possible to turn off string normalization in `xrepl`?</text>
  </message>
  <message conversation_id="705">
    <ts>2018-08-15T14:37:21.000100</ts>
    <user>Aimee</user>
    <text>Everytime I wanted to paste a lambda function it became hex digits (like `(λ (x) x)` became `(\U+FFCE\U+FFBB (x) x)`)</text>
  </message>
  <message conversation_id="706">
    <ts>2018-08-15T14:46:34.000100</ts>
    <user>Claud</user>
    <text>&lt;@Andreas&gt; You may want to look at `web-server/lang/serial-lambda`, which gives you `serial-lambda`, a version of `lambda` that works with `serialize` and `deserailize`.</text>
  </message>
  <message conversation_id="705">
    <ts>2018-08-15T14:49:25.000100</ts>
    <user>Odis</user>
    <text>Wootz, thanks. :smile:</text>
  </message>
  <message conversation_id="702">
    <ts>2018-08-15T14:54:44.000100</ts>
    <user>Franklin</user>
    <text>&lt;@Nelson&gt; Check eq? eqv? and equal? in the docs.</text>
  </message>
  <message conversation_id="707">
    <ts>2018-08-15T15:30:06.000100</ts>
    <user>Helena</user>
    <text>Leif and I just tried to use `include/reader` in a scribble file using Scribble's `read-syntax-inside` reader:  &lt;https://gist.github.com/bennn/9901db528a7ac3fd8247c1fad55ab2d6&gt;</text>
  </message>
  <message conversation_id="707">
    <ts>2018-08-15T15:30:19.000100</ts>
    <user>Helena</user>
    <text>the include seems to run forever, but along the way it throws a contract error from `cadar`</text>
  </message>
  <message conversation_id="707">
    <ts>2018-08-15T15:30:31.000100</ts>
    <user>Helena</user>
    <text>is this a bug?</text>
  </message>
  <message conversation_id="707">
    <ts>2018-08-15T15:37:01.000100</ts>
    <user>Odis</user>
    <text>To be clear, `cadar` isn’t the bug, but whoever passed the argument to `cadar`:

```
racket verbim.rkt
verbim.rkt:9:11: include/reader: read error (cdadr: contract violation
  expected: (cons/c any/c (cons/c pair? any/c))
  given: '((0 . 0) #f))
  in: (include/reader "text.rkt" scb:read-syntax-inside)
  location...:
   verbim.rkt:9:11
```</text>
  </message>
  <message conversation_id="708">
    <ts>2018-08-15T16:15:17.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Aimee&gt; You are probably using a build of libedit that doesn't support Unicode. Try installing the readline library and the `readline-gpl` package.</text>
  </message>
  <message conversation_id="708">
    <ts>2018-08-15T16:21:20.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; and &lt;@Freida&gt; About a week ago I sent you both a message wondering why Racket’s rsound and portaudio packages weren’t working in a VM.</text>
  </message>
  <message conversation_id="708">
    <ts>2018-08-15T16:21:34.000100</ts>
    <user>Odis</user>
    <text>Namely, I was getting an ffi error, stating it couldn’t find the portaudio dll.</text>
  </message>
  <message conversation_id="708">
    <ts>2018-08-15T16:21:43.000100</ts>
    <user>Odis</user>
    <text>(I didn’t have this problem on physical machines oddly enough.)</text>
  </message>
  <message conversation_id="708">
    <ts>2018-08-15T16:21:47.000100</ts>
    <user>Aimee</user>
    <text>&lt;@Lynna&gt; thank!! let me try that</text>
  </message>
  <message conversation_id="708">
    <ts>2018-08-15T16:22:16.000100</ts>
    <user>Odis</user>
    <text>Anyway, while I still am not sure what the problem was, I put together a machine set up with the problem:</text>
  </message>
  <message conversation_id="708">
    <ts>2018-08-15T16:22:18.000100</ts>
    <user>Odis</user>
    <text>&lt;http://westmount.ccs.neu.edu:8080/WindowsPortAudio.ova.tar.gz&gt;</text>
  </message>
  <message conversation_id="708">
    <ts>2018-08-15T16:24:18.000100</ts>
    <user>Odis</user>
    <text>I would be interested in finding out why I would get that problem anyway. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T16:51:42.000100</ts>
    <user>Gaynell</user>
    <text>Could anyone explain the motivation for `local-expand` and related APIs accepting a list of definition contexts, rather than just one? I can see why one would want to create a definition context extending an existing one with syntax-local-make-definition-context, but given that I don’t see the need to pass a list of them to `local-expand`. Do these two somehow differ in behavior?</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T16:53:57.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Gaynell&gt; They do. Providing a definition context to `local-expand` adds brings all the bindings of the immediate contexts and their transitive parents into scope, but it only adds the scopes of the immediate contexts.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T16:55:44.000100</ts>
    <user>Gaynell</user>
    <text>Hmm. When might I want to have a context as a parent, but not add its scope?</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T16:57:54.000100</ts>
    <user>Carlyn</user>
    <text>I believe that’s generally the behavior you want… I think it’s rare that you actually want to add the scope of parent binding forms. Imagine you have nested definitions contexts that ostensibly represent a binding structure like `(let (....) (let (....) e))`. When the outer `let` expands, it should add its scope to its body, but when the inner `let` expands, the scope of the outer `let` should already be on the body, so it shouldn’t add any additional scopes.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T16:58:39.000100</ts>
    <user>Carlyn</user>
    <text>I don’t think it’s likely to matter very much in practice, but it could matter if you use first-class definitions contexts in strange ways.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T16:59:28.000100</ts>
    <user>Carlyn</user>
    <text>(I found this behavior confusing, and I didn’t understand it until recently, so I made an effort to improve the documentation for v7. It could definitely be improved further, though.)</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T16:59:44.000100</ts>
    <user>Gaynell</user>
    <text>I thought I was meant to think about definition context scopes as “inside-edge” scopes that should end up on all syntax that ends up within a scope (such as within the nested let), not just on syntax that originated in the scope.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:00:41.000100</ts>
    <user>Gaynell</user>
    <text>Whereas I’d use outside-edge” scopes from make-syntax-introducer to create the scopes for the two `let` forms that might distinguish identifiers that originated within them vs were introduced into them by a macro.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:02:05.000100</ts>
    <user>Carlyn</user>
    <text>Yes, I think your understanding is correct, but the inside edge scope is still only added by the outer `let`. After the body is expanded, the scope is added, but the inner `let` has no reason to do anything with the outer `let`’s inside-edge scope.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:05:17.000100</ts>
    <user>Gaynell</user>
    <text>Have you used multiple immediate contexts for something before?</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:05:27.000200</ts>
    <user>Gaynell</user>
    <text>That one hasn’t come up for me yet.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:05:31.000100</ts>
    <user>Carlyn</user>
    <text>I believe I have, but I don’t remember what it was…</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:06:17.000100</ts>
    <user>Carlyn</user>
    <text>In any case, I’m not sure how clear the “right” behavior is, since the difference only really comes up in complex uses of `local-expand` and first-class definition contexts, which are (1) rare and (2) probably already built with the current model in mind.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:06:52.000100</ts>
    <user>Carlyn</user>
    <text>So I’m lost as to what this would mean in the usual, intuitive interpretation of hygiene.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:06:58.000100</ts>
    <user>Gaynell</user>
    <text>Yeah… right now I’m trying to figure out how to get use-site scopes to work properly when making a custom expander with only local-apply-transformer.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:08:01.000100</ts>
    <user>Carlyn</user>
    <text>This is only tangentially relevant, but the docs for `local-apply-transformer` have been wrong since I wrote them, and I am not sure how to rephrase them. :disappointed:</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:08:11.000100</ts>
    <user>Gaynell</user>
    <text>Oh? What’s been wrong?</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:09:15.000100</ts>
    <user>Carlyn</user>
    <text>The documentation claims that “The result is similar to expanding `(m stx)` with `local-expand`, where `m` is bound to `transformer`,” except that isn’t right, since `transformer` is applied to `stx` directly, not wrapped in any additional syntax.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:10:31.000100</ts>
    <user>Gaynell</user>
    <text>Oh! Right.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:10:49.000100</ts>
    <user>Carlyn</user>
    <text>I can’t figure out how to draw a clear analogy to `local-expand` without bringing in the awkward dance involving `quote`, which is too close to the implementation, so maybe the line should just be cut.</text>
  </message>
  <message conversation_id="709">
    <ts>2018-08-15T17:13:38.000100</ts>
    <user>Carlyn</user>
    <text>I sort of like the analogy, though, since I think thinking about `local-apply-transformer` as “`local-expand-once` but the transformer is explicitly supplied” is probably more useful to most people than “`(transformer stx)` but with proper handling of macro-introduction scopes”. In any case, having both explanations is convenient.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:31:59.000100</ts>
    <user>Melodee</user>
    <text>Hello, I'm trying to make a new racket package, but I can't figure out how to make it do non-racket things when it installs. Specifically, I want to compile a C library from a github repo which creates a shared object and then install the shared object. The racket file is just the ffi bindings.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:32:11.000100</ts>
    <user>Melodee</user>
    <text>Any guidance is appreciated :smiley:</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:32:42.000100</ts>
    <user>Franklin</user>
    <text>The simplest would be to include the binary.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:34:00.000100</ts>
    <user>Carlyn</user>
    <text>+1 to shipping the binary. If you must build from source, however, you can take a look at what the `bcrypt` package does, which builds `bcrypt` from source on installation. &lt;https://github.com/samth/bcrypt.rkt&gt;</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:34:31.000100</ts>
    <user>Melodee</user>
    <text>Ok, thanks for the info!</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:35:09.000100</ts>
    <user>Franklin</user>
    <text>It's possible to ship binaries for more than one platform.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:36:19.000100</ts>
    <user>Melodee</user>
    <text>I saw there was the `copy-foreign-libs` option for the `info.rkt` file, is there another option in there for shipping different binaries for different platforms?</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:37:19.000100</ts>
    <user>Carlyn</user>
    <text>you can use `install-platform` to control which platform that collection should be used for</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:37:44.000100</ts>
    <user>Melodee</user>
    <text>Awesome, thanks for the help!</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:38:37.000100</ts>
    <user>Carlyn</user>
    <text>For example, if you have a package `foo`, you could have two subdirectories `foo/native/x86_64-macosx/` and `foo/native/x86_64-linux-natipkg/`, each with their own `info.rkt` file that includes both `copy-foreign-libs` and `install-platform`.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:39:23.000100</ts>
    <user>Carlyn</user>
    <text>(The directory names aren’t meaningful; they can be anything. What matters is what’s in `install-platform`.)</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:39:50.000100</ts>
    <user>Melodee</user>
    <text>Cool ty!</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:40:39.000100</ts>
    <user>Franklin</user>
    <text>&lt;@Carlyn&gt; Do you know of an example. I am looking at portaudio, but I don't think copy-foreign-libs is used. &lt;https://github.com/jbclements/portaudio&gt;</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-15T17:41:14.000100</ts>
    <user>Carlyn</user>
    <text>I have an example in one of my own projects, but it’s a private repo, and I don’t want to make it public right now… and unfortunately I don’t know of any other examples.</text>
  </message>
  <message conversation_id="711">
    <ts>2018-08-16T11:04:14.000100</ts>
    <user>Andreas</user>
    <text>I am seeing an interesting behaviour in one of my `raco test` machines. This is specific to Windows. When I run `raco test -x -p s10` I get a failure on windows: `bv.rkt: raco test: non-zero exit: -1073741819` The interesting thing is that this does not happen on Linux, and it doesn't happen on Windows either if I run `raco test s10\bv.rkt`. Any ideas of what the problem could be? (this is racket 6.12)</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T14:38:17.000100</ts>
    <user>Marinda</user>
    <text>Seen in the docs for `match`, but no example given:

"An optional `(=&amp;gt; id)` between a pat and the bodys is bound to a failure procedure of zero arguments. If this procedure is invoked, it escapes back to the pattern matching expression, and resumes the matching process as if the pattern had failed to match."

What would be an example? I don't understand from the description.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T14:39:26.000100</ts>
    <user>Franklin</user>
    <text>It sounds like a "guard" as in syntax-case.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T14:41:37.000100</ts>
    <user>Carlyn</user>
    <text>It isn’t a guard, it’s more like an escape continuation.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T14:41:55.000100</ts>
    <user>Carlyn</user>
    <text>Guards are written as `#:when condition` in `match`.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T14:43:14.000100</ts>
    <user>Carlyn</user>
    <text>It’s useful when a later pattern might match, so an earlier, more specific pattern can bail out back to the pattern matcher and request it to continue as if the earlier pattern hadn’t actually matched. (I’ll write an example.)</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T14:45:01.000100</ts>
    <user>Carlyn</user>
    <text>```
&amp;gt; (match '(1 2 3)
    [(list a b c)
     (=&amp;gt; continue)
     (when (= b 2)
       (continue))
     'one]
    [(list a b c)
     'two])
'two
```</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T14:45:51.000100</ts>
    <user>Carlyn</user>
    <text>It’s usually not necessary, since you can normally get away with just using `#:when`, I think. But it might be useful if you need to bail out deep inside some nested computation on the RHS.</text>
  </message>
  <message conversation_id="712">
    <ts>2018-08-16T15:43:04.000100</ts>
    <user>Marinda</user>
    <text>OK. Can I put your example in the docs?</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T15:44:56.000100</ts>
    <user>Carlyn</user>
    <text>Sure! Though there might be a better example than that.</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T16:11:19.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Marinda&gt; &lt;@Carlyn&gt; it might be helpful to give an example that can't be expressed as `#:when`</text>
  </message>
  <message conversation_id="712">
    <ts>2018-08-16T16:11:35.000100</ts>
    <user>Monserrate</user>
    <text>the `=&amp;gt;` form uses continuations so it can bail out of anything</text>
  </message>
  <message conversation_id="710">
    <ts>2018-08-16T16:26:44.000100</ts>
    <user>Carlyn</user>
    <text>Right. I saw some uses in TR that use it to write `match`-in-`match`, where failing from the inner `match` bails back to the outer `match`.</text>
  </message>
  <message conversation_id="713">
    <ts>2018-08-17T01:01:26.000100</ts>
    <user>Melodee</user>
    <text>Hello, I'm working on getting a package listed in the official racket package index. I believe I have everything set up correctly, but I can't get the documentation link to show up on the website. The package is uploaded at &lt;https://pkgd.racket-lang.org/pkgn/package/softposit-rkt&gt;</text>
  </message>
  <message conversation_id="713">
    <ts>2018-08-17T01:01:59.000100</ts>
    <user>Melodee</user>
    <text>Any guidance on where I should look to update this?</text>
  </message>
  <message conversation_id="713">
    <ts>2018-08-17T01:05:32.000100</ts>
    <user>Marnie</user>
    <text>&lt;@Melodee&gt; the docs are rendered by the package server when there's a full build of all packages, which happens every night I think. Tomorrow you should see the docs online assuming everything about your package is setup correctly</text>
  </message>
  <message conversation_id="713">
    <ts>2018-08-17T01:07:22.000100</ts>
    <user>Melodee</user>
    <text>Cool, thanks for the info!</text>
  </message>
  <message conversation_id="713">
    <ts>2018-08-17T01:08:28.000100</ts>
    <user>Marnie</user>
    <text>happy to help! You'll also have all your package's tests run automatically too, btw</text>
  </message>
  <message conversation_id="713">
    <ts>2018-08-17T01:29:59.000100</ts>
    <user>Melodee</user>
    <text>Another question, my package relies on git submodules which don't seem to work when building through the package manager. Is there a way to force the package manager to also download the submodules?</text>
  </message>
  <message conversation_id="713">
    <ts>2018-08-17T01:57:11.000100</ts>
    <user>Melodee</user>
    <text>Amendment to my previous question, git in general doesn't seem to work with `raco pkg install`. In particular, there is no `.git` folder downloaded when you try to install a package.</text>
  </message>
  <message conversation_id="713">
    <ts>2018-08-17T02:34:25.000100</ts>
    <user>Melodee</user>
    <text>Found a workaround with `git subtree`, but using submodules would still be ideal</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T10:20:21.000100</ts>
    <user>Haydee</user>
    <text>Hello! Does racket's pattern matching have anything like Haskell's as-patterns? In Haskell I might write something like `fn [x, ys@[y1, y2]] = y1:ys`, which matches a two element list, where the second element is also a two element list. I capture the second element of the outer list as ys, and its inner elements as `y1` and `y2`</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T10:22:05.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Haydee&gt; your name is somewhat hard to type :slightly_smiling_face: You can just use `(and ys (list y1 y2))` for that</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T10:23:07.000100</ts>
    <user>Haydee</user>
    <text>Sorry, didn't think of that! Changed it to ascii now</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T10:23:36.000100</ts>
    <user>Haydee</user>
    <text>Great, thank you! That's what I get for skipping parts of the docs that didn't seem relevant</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T10:23:47.000100</ts>
    <user>Haydee</user>
    <text>That's perfect, thank you</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T10:32:05.000100</ts>
    <user>Haydee</user>
    <text>Also, am I correct in thinking that one would match a hash table constructed with `(hash ...)` with `(hash-table ...)`? Is there any function which both constructs and matches a hash table?</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T10:32:47.000100</ts>
    <user>Monserrate</user>
    <text>yes, that's correct, and wasn't a good naming choice (although I think it was before my time)</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T10:35:17.000100</ts>
    <user>Haydee</user>
    <text>OK, gotcha</text>
  </message>
  <message conversation_id="715">
    <ts>2018-08-17T13:09:40.000100</ts>
    <user>Haydee</user>
    <text>Is there something like `mlist-set`? I know `mlist`s are discouraged, but I'm compiling to Racket and I want to keep the semantics of the mutable array in the source language</text>
  </message>
  <message conversation_id="715">
    <ts>2018-08-17T13:11:05.000100</ts>
    <user>Franklin</user>
    <text>Use mlist-tail, then set-mcar!</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T13:23:21.000100</ts>
    <user>Haydee</user>
    <text>OK cool. I'll write a little helper for that. Thanks!</text>
  </message>
  <message conversation_id="714">
    <ts>2018-08-17T13:29:49.000100</ts>
    <user>Haydee</user>
    <text>That's me for question time today! Thanks for all the help. Hope I wasn't too spammy (just let me know if I was)</text>
  </message>
  <message conversation_id="716">
    <ts>2018-08-19T11:42:38.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; What is the difference between `stx.rktl` and `syntax.rktl` in `racket-test-core`?</text>
  </message>
  <message conversation_id="716">
    <ts>2018-08-19T12:25:20.000100</ts>
    <user>Lynna</user>
    <text>`stx.rktl` is supposed to be about syntax objects, and `syntax.rktl` is supposed to be about core forms (originally “syntax”, but that word became overloaded)</text>
  </message>
  <message conversation_id="716">
    <ts>2018-08-19T13:24:59.000100</ts>
    <user>Carlyn</user>
    <text>Aha, that makes sense. Thanks.</text>
  </message>
  <message conversation_id="717">
    <ts>2018-08-19T16:08:04.000100</ts>
    <user>Lynna</user>
    <text>I’m going to extend the arity on two groups of functions to bring them in line with Chez Scheme, since that direction seems better than working to hide the extra arities in Racket-on-Chez.
One group is the comparison operators, like `&amp;lt;` or `string=?`, which currently accept 2 or more arguments. They’ll change to accept 1 or more arguments. (Racket’s 2-or-more choice originated with RnRS. I don’t know why RnRS made that choice, and I don’t know why Chez Scheme constrains them to 1-or-more instead of 0-or-more.)
The other group is the fixnum and flonum arithmetic operations, like `fx+` or `flmin`, which Racket has provided only in 2-argument form. They’ll generalize to be like the generic operations, such as `+` and `min`, either 0-or-more or 1-or-more.</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:09:26.000100</ts>
    <user>Claud</user>
    <text>I have an `editor%` subclass that calls various methods during initialization, but occasionally some of my method calls trigger an error if the editor is locked internally (as in `locked-for-flow?`). Is there a way to queue these methods to be called once the editor is unlocked, or to get a synchronizable event, or something like that? Adding a retry/backoff loop to all of the right spots seems painful, even aside from the fact that when I've tried so far I've missed some spots.</text>
  </message>
  <message conversation_id="716">
    <ts>2018-08-19T17:18:12.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Claud&gt; Are you using accessing editor in multiple threads?</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:19:31.000100</ts>
    <user>Claud</user>
    <text>No</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:25:14.000100</ts>
    <user>Lynna</user>
    <text>I’m not clear on how you’d run into that error otherwise. Can you explain more?</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:26:51.000100</ts>
    <user>Elanor</user>
    <text>With Racket 7.0 on Mac, raco setup often generates many "error for long-term poll set: unsupported; rktio_err=1" messages: is that worth isolating and filing an issue for?</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:28:21.000100</ts>
    <user>Elanor</user>
    <text>And occasionally there's "racket[77374:4038733] WARNING: nextEventMatchingMask should only be called from the Main Thread! This will throw an exception in the future."</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:30:40.000100</ts>
    <user>Lynna</user>
    <text>The long-term poll set issue does sound like a problem.</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:31:17.000100</ts>
    <user>Lynna</user>
    <text>The main-thread issue sounds like a misbehaved library or test that is using `racket/gui` in a non-main place.</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:35:48.000100</ts>
    <user>Claud</user>
    <text>&lt;@Lynna&gt; I'm not totally clear either, and it doesn't happen consistently, which has been making it harder to get a minimal example, especially as the method named in the error message (`set-max-width`) isn't one I think I'm calling directly.
The place where the error seems to be occurring: sends `reflow-container` to the enclosing `frame%`; uses `get-extent` on the `text%` instance; adjusts the `min-height` of the `editor-canvas%` instance based on the result; and sends `reflow-container` to the enclosing `frame%` again.</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:36:53.000100</ts>
    <user>Lynna</user>
    <text>And, just to make sure, this isn’t a setup in a new eventspace (which would imply a new thread), right?</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:46:35.000100</ts>
    <user>Claud</user>
    <text>I recently started giving each instance of this `frame%` its own dedicated eventspace. However, I believe (I am trying to confirm this in the git history now) that I was getting versions of this error before I started doing anything regarding eventspaces.</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:52:13.000100</ts>
    <user>Lynna</user>
    <text>The error that you’re reporting now is usually fixed by moving GUI-creation work into the thread of the GUI’s eventspace by using `queue-callback`.

If you try to set up a GUI in any other thread, including the one that created the eventspace, then you’ll definitely run into that kind of error.</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T17:56:52.000100</ts>
    <user>Claud</user>
    <text>Ok, that makes sense and at least I can rule that out. That means I should have something like this, yes?
```
(parameterize ([current-eventspace (make-eventspace)])
  (queue-callback
    (lambda () (new frame% ...))))
```</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T18:00:18.000100</ts>
    <user>Lynna</user>
    <text>Yes</text>
  </message>
  <message conversation_id="719">
    <ts>2018-08-19T18:17:50.000100</ts>
    <user>Elanor</user>
    <text>ok, I'll put it on my todos</text>
  </message>
  <message conversation_id="718">
    <ts>2018-08-19T18:34:51.000100</ts>
    <user>Claud</user>
    <text>Thanks, that seems to have cleared up a lot of the cases when I was getting those errors! It looks like the remaining cases are related to a `delay/sync` promise I was using to avoid allocating unnecessary frames—when I replace `delay/sync` with `values`, the errors don't happen. I was using `queue-callback` inside the `delay/sync`, so I'm not immediately sure what's wrong, but I will investigate further.</text>
  </message>
  <message conversation_id="720">
    <ts>2018-08-19T21:32:29.000100</ts>
    <user>Robert</user>
    <text>I can understand what `string=?` should produce with zero arguments, but what should `&amp;lt;` produce?</text>
  </message>
  <message conversation_id="720">
    <ts>2018-08-19T21:57:22.000100</ts>
    <user>Lynna</user>
    <text>To me, it makes sense for all comparison operators to return #t on 0 arguments, the same way that `(and)` produces #t. I guess it’s because I would want to use `(apply &amp;lt; nums)` to check whether `nums` is sorted strictly increasing, and in that application, I’d almost certainly want to count an empty list as sorted.</text>
  </message>
  <message conversation_id="721">
    <ts>2018-08-19T22:38:34.000100</ts>
    <user>Bertha</user>
    <text>&lt;https://docs.racket-lang.org/reference/reader.html#(idx._(gentag._4._(lib._scribblings%2Freference%2Freference..scrbl)))&gt; says that `#%` reads a symbol and gives an example:

&amp;gt;  `#%Apple` reads equal to `(string-&amp;gt;symbol "#%Apple")`

But that doesn't seem true?

{I thought `#%` is a valid start to an identifier, and things like `#%kernel` or `#%app` are normal identifiers and it's "just" a naming convention for some Racket "core" things.]</text>
  </message>
  <message conversation_id="721">
    <ts>2018-08-19T22:48:16.000100</ts>
    <user>Elanor</user>
    <text>It's a symbol as far as `read` is concerned, you might be thinking of `read-syntax`. Each of those treat `#%Apple` and `Apple` “similarly”.</text>
  </message>
  <message conversation_id="721">
    <ts>2018-08-19T22:51:20.000100</ts>
    <user>Bertha</user>
    <text>Oh right. Oops.
I didn't notice the context of the docs, and missed the typesetting of `read`. I should have pasted here:
&amp;gt;  `#%Apple` `read`s equal to `(string-&amp;gt;symbol "#%Apple")`</text>
  </message>
  <message conversation_id="721">
    <ts>2018-08-19T22:51:41.000100</ts>
    <user>Bertha</user>
    <text>And indeed `(equal? (read (open-input-string "#%Apple")) (string-&amp;gt;symbol "#%Apple"))` is `#t`.</text>
  </message>
  <message conversation_id="721">
    <ts>2018-08-19T22:52:43.000100</ts>
    <user>Bertha</user>
    <text>Emily Litella that one. &lt;https://www.youtube.com/watch?v=OjYoNL4g5Vg&gt;</text>
  </message>
  <message conversation_id="722">
    <ts>2018-08-20T09:30:58.000200</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; I _think_ that the recent rackunit changes (&lt;https://github.com/racket/rackunit/commit/eceb061e974773a44bb0412df1eee06852e7d683&gt;) broke something: &lt;http://drdr.racket-lang.org/48609/racket/share/pkgs/rackunit-test/tests/rackunit/check-test.rkt&gt;</text>
  </message>
  <message conversation_id="721">
    <ts>2018-08-20T09:31:14.000100</ts>
    <user>Monserrate</user>
    <text>but the drdr results suggest that it might be something else I don't understand</text>
  </message>
  <message conversation_id="722">
    <ts>2018-08-20T11:15:50.000100</ts>
    <user>Helena</user>
    <text>thanks for the notice --- that test expects `(= 1)` to raise an arity error, but it doesn't anymore (&lt;https://github.com/racket/racket/commit/412818949915f6ecbf9a9c31915dcafdf7016762&gt;); I'll update the test</text>
  </message>
  <message conversation_id="722">
    <ts>2018-08-20T13:45:33.000100</ts>
    <user>Helena</user>
    <text>&lt;@Jen&gt; do you want to turn &lt;https://github.com/racket/slideshow/pull/4&gt; into a package?</text>
  </message>
  <message conversation_id="722">
    <ts>2018-08-20T13:46:33.000100</ts>
    <user>Helena</user>
    <text>(I'm thinking I want to use it, and so I was thinking about making a package for it myself)</text>
  </message>
  <message conversation_id="722">
    <ts>2018-08-20T13:59:23.000100</ts>
    <user>Jen</user>
    <text>&lt;@Helena&gt; I don't know if it really belongs in its own package rather than part of pict of slideshow, at one point it looks like it was (is?) part of `unstable/gui/pict/plt-logo` (&lt;http://docs.racket-lang.org/unstable-gui/pict.html?q=color#%28def._%28%28lib._unstable%2Fgui%2Fpict%2Fplt-logo..rkt%29._make-plt-title-background%29%29&gt;) and there's also a pict exported from Jay's puresuri package (&lt;http://docs.racket-lang.org/puresuri/index.html?q=plt-slide#%28def._%28%28lib._puresuri%2Flib%2Ftitle..rkt%29._plt-title-background%29%29&gt;) those are a little less customizable than the version in my pull request though</text>
  </message>
  <message conversation_id="722">
    <ts>2018-08-20T14:02:00.000100</ts>
    <user>Helena</user>
    <text>Ok, the unstable logo probably works for me. (I like the idea of a separate package)</text>
  </message>
  <message conversation_id="723">
    <ts>2018-08-20T20:35:52.000100</ts>
    <user>Catrice</user>
    <text>Hopefully quick question about at-exp syntax, functions, and quoting/unquoting: In the following code, the first two lines work, but the third does not:
```
#lang at-exp racket
@(define (foo x) (* 2 (string-length x)))
`(1 "a" #t ,@(foo "2"))
`(1 "a" #t ,@foo{2})
```</text>
  </message>
  <message conversation_id="723">
    <ts>2018-08-20T20:36:55.000100</ts>
    <user>Catrice</user>
    <text>If I understand the docs right, `@foo{2}` is the same thing as `(foo "2")`, so I would expect the two lines to evaluate identically, to `'(1 "a" #t . 2)`</text>
  </message>
  <message conversation_id="723">
    <ts>2018-08-20T20:37:29.000100</ts>
    <user>Catrice</user>
    <text>Instead, I get "unquote-splicing: contract violation / expected: list? / given: #&amp;lt;procedure:foo&amp;gt;"</text>
  </message>
  <message conversation_id="723">
    <ts>2018-08-20T20:38:13.000100</ts>
    <user>Catrice</user>
    <text>(This is excerpted and reduced from a more real-world scenario; obviously this particular code is meaningless...)</text>
  </message>
  <message conversation_id="723">
    <ts>2018-08-20T20:38:45.000100</ts>
    <user>Catrice</user>
    <text>Why doesn't the second line work?</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:14:58.000100</ts>
    <user>Aimee</user>
    <text>```
`(1 "a" #t ,@foo{2})   ;; doesn't work
`(1 "a" #t , @foo{2})  ;; ok
```</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:15:24.000100</ts>
    <user>Aimee</user>
    <text>I don't know how lexing and parsing work though..</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:18:31.000100</ts>
    <user>Catrice</user>
    <text>O_o a _space_ matters here?</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:19:17.000100</ts>
    <user>Aimee</user>
    <text>well, I have no clue how lexing and read-table interact with each other</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:20:01.000100</ts>
    <user>Aimee</user>
    <text>from the macro stepper, the former is the same as
```
`(1 "a" #t ,@foo {2})
```
while the second is
```
`(1 "a" #t ,(foo "2"))
```</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:20:10.000100</ts>
    <user>Aimee</user>
    <text>`{2}` is just `(2)`</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:20:40.000100</ts>
    <user>Catrice</user>
    <text>oooh, well, they actually give *slightly different* answers -- the first `,@(foo "2")` version yields `'(1 "a" #t . 2)`, while the spaced version gave me `'(1 "a" #t 2)` -- note the lack of non-list dot</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:24:07.000100</ts>
    <user>Aimee</user>
    <text>ohhh I realized that `,@` is unquote splicing</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:25:55.000100</ts>
    <user>Aimee</user>
    <text>(that is, `,@` is a thing)</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:26:28.000100</ts>
    <user>Catrice</user>
    <text>oh.</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:26:33.000100</ts>
    <user>Catrice</user>
    <text>right.</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:30:33.000100</ts>
    <user>Catrice</user>
    <text>thanks for the reminder :slightly_smiling_face:</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:53:04.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Catrice&gt; A not-obvious twist in`@` notation: if you put `,` after the `@`, then it’s effectively moved before the `@`. So, you could use `@,foo{2}`.</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:54:10.000100</ts>
    <user>Catrice</user>
    <text>Thanks.  Is that documented somewhere that I didn't notice, or is that just some expertise I haven't acquired yet?</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:55:19.000200</ts>
    <user>Lynna</user>
    <text>&lt;http://docs.racket-lang.org/scribble/reader.html?q=the%20command%20part#%28part._.The_.Command_.Part%29&gt;</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:57:32.000100</ts>
    <user>Catrice</user>
    <text>I saw that part.  I didn't understand any of it, tbh</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T21:58:28.000100</ts>
    <user>Catrice</user>
    <text>I think I didn't understand the phrase "punctuation prefix"; I still had each of backtick, comma, apostrophe in my head as one-key shortcuts for longer primitive names, rather than as a "prefix" of anything.</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-20T22:00:00.000100</ts>
    <user>Catrice</user>
    <text>so many subtleties!  thanks for the reference</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-21T11:24:12.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; &lt;http://drdr.racket-lang.org/48637/racket/share/pkgs/plot-test/plot/tests/PRs/45.rkt&gt;</text>
  </message>
  <message conversation_id="725">
    <ts>2018-08-21T16:30:02.000100</ts>
    <user>Helena</user>
    <text>does anyone know how to write a script that (1) creates a frame, (2) shows the frame (3) waits a few seconds and exits ? I didn't see a way to wait for `(send my-frame show #t)` to finish, and calling `sleep` stopped everything including the drawing (even if the frame was created in a different thread)</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-21T16:48:00.000100</ts>
    <user>Helena</user>
    <text>it works to make the frame in a new eventspace</text>
  </message>
  <message conversation_id="724">
    <ts>2018-08-21T17:12:16.000100</ts>
    <user>Helena</user>
    <text>&lt;https://github.com/racket/plot/commit/ceb2fa9fca4cca6ab11884c81273cf2e8edc0632&gt; lets hope making a new eventspace doesn't cause issues with drdr</text>
  </message>
  <message conversation_id="726">
    <ts>2018-08-21T17:27:24.000100</ts>
    <user>Aimee</user>
    <text>re sleep: try `sleep/yield`</text>
  </message>
  <message conversation_id="726">
    <ts>2018-08-21T17:27:33.000100</ts>
    <user>Aimee</user>
    <text>but this does not sync with anything</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T10:02:35.000100</ts>
    <user>Bertha</user>
    <text>1. Open Dr Racket 6.10 or 7.0. Definitions is simply `#lang typed/racket\n`&amp;lt;eof&amp;gt;
2. Press the `Debug` button.
Errors in each:
- 6.10: `../../Applications/Racket_v6.10/collects/racket/private/pre-base.rkt:207:39: module: cannot use identifier tainted by macro transformation in: module`
- 7.0: `../../Applications/Racket_v7.0/collects/racket/private/pre-base.rkt:182:64: ?: cannot bind from tainted syntax in: (quote #%kernel)`

Is this an issue for Typed Racket or for Dr Racket (to which repo should I report)?</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T10:06:48.000100</ts>
    <user>Bertha</user>
    <text>Oh this hasn't worked "forever". 6.10 style error also in 6.5 and 6.7.</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T10:06:48.000200</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; this is probably an issue in the debugger, rather than in typed racket, but the actual buggy code could be in lots of places</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T10:07:49.000100</ts>
    <user>Monserrate</user>
    <text>in general the debugger ought to be able to debug any program</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T10:08:47.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; Thanks I'll report on &lt;https://github.com/racket/drracket&gt;</text>
  </message>
  <message conversation_id="728">
    <ts>2018-08-22T20:12:58.000100</ts>
    <user>Kim</user>
    <text>I'm looking at this syntax parse example
```
(syntax-parse #'(a b 3)
    [(x:id ...) 'ok])
```
What is the "id" in "x:id"?</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T21:03:27.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Kim&gt; it's the name of a syntax class</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T21:03:44.000100</ts>
    <user>Monserrate</user>
    <text>&lt;http://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html?q=id#%28form._%28%28lib._syntax%2Fparse..rkt%29._id%29%29&gt;</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T21:14:39.000100</ts>
    <user>Kim</user>
    <text>&lt;@Monserrate&gt; the docs don't say much besides "id" being an alias for "identifier" then that "identifier" is a syntax class.
Where can I find a definition of "identifier"?</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T21:15:34.000100</ts>
    <user>Monserrate</user>
    <text>What the docs are saying for `identifier` is that it's a syntax class that matches things that are `identifier?`</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T21:15:54.000200</ts>
    <user>Monserrate</user>
    <text>&lt;http://docs.racket-lang.org/reference/stxops.html?q=identifier%3F#%28def._%28%28lib._racket%2Fprivate%2Fstx..rkt%29._identifier~3f%29%29&gt;</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-22T21:44:50.000100</ts>
    <user>Kim</user>
    <text>&lt;@Monserrate&gt; awesome. thanks for the help!</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-23T11:04:37.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Eugena&gt; I'm trying to understand how to use `pslide` with `#:alt` and it's not making sense</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-23T11:05:05.000100</ts>
    <user>Monserrate</user>
    <text>In particular I want to first show pict `a` and then show pict `b` at the same location</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-23T11:05:19.000200</ts>
    <user>Monserrate</user>
    <text>this is pretty easy with `'alts` in regular slides</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-23T11:05:45.000100</ts>
    <user>Monserrate</user>
    <text>but the obvious ways to do with `#:alts` produce too many extra slides</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-23T11:44:03.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Monserrate&gt; here's one example:
```
#lang racket
(require slideshow ppict/2)
(pslide
 #:go (coord 1/2 1/3 'ct)
 (t "Let's talk about ")
 #:go (coord 1/2 1/2 'ct)
 #:alt ((bt "types")
        #:next (para "Types are cool."))
 (bt "macros")
 #:next
 (para "Macros are nice."))
```</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-23T11:45:22.000100</ts>
    <user>Monserrate</user>
    <text>ah, the trick is to put the last alternate outside of `#:alt`</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-23T11:45:36.000100</ts>
    <user>Monserrate</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="729">
    <ts>2018-08-23T12:33:52.000100</ts>
    <user>Carlyn</user>
    <text>Is there a way to get the next-largest or next-smallest flonum in Racket, a la the `nextafter` function in C’s math.h?</text>
  </message>
  <message conversation_id="727">
    <ts>2018-08-23T12:49:32.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; i thought there was something like that in one of @ntoronto's libraries</text>
  </message>
  <message conversation_id="729">
    <ts>2018-08-23T12:51:28.000100</ts>
    <user>Carlyn</user>
    <text>Ah, it looks like `flstep` from `math/flonum` will do it. Thanks!</text>
  </message>
  <message conversation_id="730">
    <ts>2018-08-23T16:12:07.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; is there a way to run a module written in `#lang slideshow` as if it was run under `slideshow --widescreen` (ie in DrRacket)?</text>
  </message>
  <message conversation_id="730">
    <ts>2018-08-23T16:13:35.000100</ts>
    <user>Lynna</user>
    <text>You can run `slideshow --widescreen --save-aspect` once to configure the default.</text>
  </message>
  <message conversation_id="730">
    <ts>2018-08-23T16:15:45.000100</ts>
    <user>Monserrate</user>
    <text>ok, that helps, thanks</text>
  </message>
  <message conversation_id="730">
    <ts>2018-08-23T16:17:07.000100</ts>
    <user>Lynna</user>
    <text>You could also set the command line in DrRacket to `--widescreen`, but that’s probably less convenient</text>
  </message>
  <message conversation_id="730">
    <ts>2018-08-23T16:43:42.000100</ts>
    <user>Catrice</user>
    <text>&lt;@Lynna&gt; found a problem with the search-context.html page (&lt;https://github.com/racket/racket/blob/master/pkgs/racket-index/scribblings/main/private/search-context.html#L18-L21&gt;), on current Edge in Win10.  I don't have a Windows laptop with me at the moment (am relaying what others have told me), but it seems that this particular use of `URL`, `searchParams` and/or `keys` isn't working quite right in Edge.  If you have a windows box to take a look, please do; otherwise I'll try to diagnose it further myself tonight</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:12:22.000100</ts>
    <user>Kim</user>
    <text>When reading the racket documentation and I find a procedure I want to use, how do i know what module I need to require?</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:17:42.000200</ts>
    <user>Aimee</user>
    <text>usually the beginning of the section containing that function will document which modules to require</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:17:48.000100</ts>
    <user>Aimee</user>
    <text>*subsection</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:19:04.000100</ts>
    <user>Aimee</user>
    <text>e.g. `split-at` is in doc 4.9.7, and the beginning of 4.9.7 says:
```
(require racket/list)	 package: base
The bindings documented in this section are provided by the racket/list and racket libraries, but not racket/base.
```</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:22:26.000100</ts>
    <user>Aimee</user>
    <text>In REPL, `,doc IDENTIFIER` sometimes helps</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:24:42.000100</ts>
    <user>Kim</user>
    <text>&lt;@Aimee&gt; What does it mean if no "require" is listed?</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:26:50.000100</ts>
    <user>Aimee</user>
    <text>I don't know where that could be documented then :disappointed:
how about trying `,doc` and `,desc`?
```
$ racket
Welcome to Racket v7.0.0.12.
&amp;gt; ,doc parse-markdown
Loading help index...
No current binding, but provided by:
  markdown/parse
&amp;gt; ,doc split-at
Sending to web browser...
  file: &amp;lt;RACKET&amp;gt;/doc/reference/pairs.html
  anchor: (def._((lib._racket/list..rkt)._split-at))
&amp;gt; ,desc split-at
; `split-at' is a bound identifier,
;   defined in &amp;lt;collects&amp;gt;/racket/list.rkt
;   required through "&amp;lt;collects&amp;gt;/racket/init.rkt"
```</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:27:03.000100</ts>
    <user>Aimee</user>
    <text>what function are you looking for?</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:27:52.000100</ts>
    <user>Kim</user>
    <text>4.3.2 String Comparisons, string=?</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:28:17.000100</ts>
    <user>Aimee</user>
    <text>it's provide by `racket/base`</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:28:20.000100</ts>
    <user>Kim</user>
    <text>,desc looks useful. I'll give that a go.</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:28:20.000200</ts>
    <user>Aimee</user>
    <text>and `racket`</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:29:55.000100</ts>
    <user>Aimee</user>
    <text>well, `string=?` is provide by `racket/base` and `racket`; since these 2 packages are sort of standard, it's only mentioned at the front page of Racket Reference</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T18:30:18.000100</ts>
    <user>Kim</user>
    <text>&lt;@Aimee&gt; I see thank you for helping me understand how to better navigate the documentation. Much appreciated.</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T20:28:48.000100</ts>
    <user>Kim</user>
    <text>Is there a way forward a syntax object in a macro?
A simplified example of what I want to do:
```
(define-syntax (foo stx)
  (match-define (list _ expr-stx) (syntax-&amp;gt;list stx))
  (syntax-parse expr-stx
    [(_ bar)
     ;; I want to provide the syntax expr-stx as an argument
     (some-proc bar expr-stx)]))
```
What happens when I do the above is the error `unbound identifier in module in: expr-stx`</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T20:30:18.000100</ts>
    <user>Monserrate</user>
    <text>you want `(some-proc bar (quote-syntax #,expr-stx))`</text>
  </message>
  <message conversation_id="732">
    <ts>2018-08-23T20:30:46.000100</ts>
    <user>Monserrate</user>
    <text>the `#,` is because `expr-stx` is a regular variable, not a pattern variable</text>
  </message>
  <message conversation_id="732">
    <ts>2018-08-23T20:31:02.000100</ts>
    <user>Monserrate</user>
    <text>and the `quote-syntax` is to quote it so that it's data</text>
  </message>
  <message conversation_id="731">
    <ts>2018-08-23T20:43:58.000100</ts>
    <user>Kim</user>
    <text>&lt;@Monserrate&gt;
Thanks for the help.
The code I'm working with is slightly different then what I pasted. It has a syntax/loc
It looks like this.
```
(define-syntax (foo stx)
  (match-define (list _ expr-stx) (syntax-&amp;gt;list stx))
  (syntax-parse expr-stx
    [(_ bar)
     (syntax/loc expr-stx (some-proc bar expr-stx))]))
```
Adjusted for quote-syntax as follows I still get the same error
```
(define-syntax (foo stx)
  (match-define (list _ expr-stx) (syntax-&amp;gt;list stx))
  (syntax-parse expr-stx
    [(_ bar)
     #`(syntax-loc expr-stx (some-proc bar #,expr-stx))]))
```
Do you know how I could forward it with the added syntax-loc?</text>
  </message>
  <message conversation_id="732">
    <ts>2018-08-23T20:58:11.000100</ts>
    <user>Monserrate</user>
    <text>you want the last line to be: `(quasisyntax/loc expr-stx (some-proc bar (quote-syntax #,expr-stx)))`</text>
  </message>
  <message conversation_id="732">
    <ts>2018-08-23T21:01:29.000100</ts>
    <user>Kim</user>
    <text>&lt;@Monserrate&gt; awesome and thank you. I'll give that a whirl :slightly_smiling_face:</text>
  </message>
  <message conversation_id="733">
    <ts>2018-08-24T02:51:12.000100</ts>
    <user>Franklin</user>
    <text>&lt;https://news.ycombinator.com/item?id=17826959&gt;</text>
  </message>
  <message conversation_id="733">
    <ts>2018-08-24T13:54:36.000100</ts>
    <user>Helena</user>
    <text>sometimes I'll re-type the function name in the search box, because the search results give the providing module</text>
  </message>
  <message conversation_id="733">
    <ts>2018-08-24T14:01:27.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; (or maybe &lt;@Carlyn&gt;) is there a way to print slideshow to produce widescreen slides?</text>
  </message>
  <message conversation_id="732">
    <ts>2018-08-24T14:05:18.000100</ts>
    <user>Monserrate</user>
    <text>everything I try produces 4:3 slides with my widescreen slides in the middle</text>
  </message>
  <message conversation_id="733">
    <ts>2018-08-24T14:06:36.000100</ts>
    <user>Carlyn</user>
    <text>(I have no idea, sorry; I haven’t tried the widescreen feature at all yet)</text>
  </message>
  <message conversation_id="734">
    <ts>2018-08-24T15:16:54.000100</ts>
    <user>Kim</user>
    <text>Is there a way to execute code inside a syntax-parses cases
Here is how I got to the point of wanting to do this.
```
;; first iteration
(syntax-parse stx
	[(op e0 e1)
	 (build-some-struct op e0 e1)]
;; second iteration - props to samth for helping me on this one
	[(op e0 e1)
         (quasi-syntax/loc stx
	 	(build-some-struct op e0 e1 (quote-syntax #,stx))]
;; third iteration
	[(op e0 e1)
	 ;; build the struct like in the first iteration
	 ;; add the stx that was a parameter in the second iteration to the struct
	 ;; print the struct so I can make sure it is working &amp;amp; debugging
        ]
```
How would I do the third iteration? Is it possible to do that inside a syntax-parse?</text>
  </message>
  <message conversation_id="735">
    <ts>2018-08-24T15:31:20.000100</ts>
    <user>Aimee</user>
    <text>You can do arbitrary computation in a macro. Is that what 'execute' mean? Also, it depends on what `build-some-struct` is (say a macro? a phase 1 function? a phase 0 function? etc)</text>
  </message>
  <message conversation_id="735">
    <ts>2018-08-24T15:32:18.000100</ts>
    <user>Aimee</user>
    <text>From the second case it looks like `build-some-struct` is a phase 0 function. In that case, it'll only be executed at runtime</text>
  </message>
  <message conversation_id="735">
    <ts>2018-08-24T15:34:35.000100</ts>
    <user>Kim</user>
    <text>&lt;@Aimee&gt; yes, build-some-struct is a defined function.
Because it'll only be executed at runtime does that mean I cannot print the struct returned from that function, or add stx to the object returned from that function within this case?</text>
  </message>
  <message conversation_id="735">
    <ts>2018-08-24T15:36:38.000100</ts>
    <user>Aimee</user>
    <text>```
(define-for-syntax (f) ...)
(begin-for-syntax
  (define (f) ...)
  )
```
or
```
(define (f) ...) ;; at top-level, phase 0
```</text>
  </message>
  <message conversation_id="735">
    <ts>2018-08-24T15:37:31.000100</ts>
    <user>Aimee</user>
    <text>for the latter case, what `#'(build-some-struct op e0 e1)` does is to create a syntax object representing function application; that syntax object will later be compiled and executed at runtime (not macro expansion time)</text>
  </message>
  <message conversation_id="735">
    <ts>2018-08-24T15:38:34.000100</ts>
    <user>Aimee</user>
    <text>so in the latter case you can only print the struct returned at runtime -- it's not executed at expansion time</text>
  </message>
  <message conversation_id="735">
    <ts>2018-08-24T15:39:05.000100</ts>
    <user>Aimee</user>
    <text>if it's the former case (`define-for-syntax` or `begin-for-syntax define`, then it's a function defined for phase 1 and you can just print the result</text>
  </message>
  <message conversation_id="735">
    <ts>2018-08-24T15:43:31.000100</ts>
    <user>Kim</user>
    <text>&lt;@Aimee&gt; ok, thank you for taking the time to explain. This helps a lot. I'll look into using define-for-syntax.</text>
  </message>
  <message conversation_id="736">
    <ts>2018-08-24T16:44:32.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Monserrate&gt; Slideshow’s print/PS/PDF output was set up for paper output. I’ve added a `--not-paper`/`-e` flag to make the output bounds match the slide bounds.</text>
  </message>
  <message conversation_id="736">
    <ts>2018-08-24T16:48:44.000100</ts>
    <user>Monserrate</user>
    <text>Awesome, thanks</text>
  </message>
  <message conversation_id="737">
    <ts>2018-08-24T18:22:32.000100</ts>
    <user>Kim</user>
    <text>When building syntax is there a way to add a line of code to all patterns that are matched instead of having to add it separately to each pattern?
Eg:
```
[(_ foo) (begin (one-arg-func) (proc-for-all))]
[(_ foo bar) (begin (one-arg-func) (proc-for-all))]
[(_ foo bar baz) (begin (one-arg-func) (proc-for-all))]
...
;;  vs something like
[(_ foo)         (one-arg-func)]
[(_ foo bar)     (two-arg-func)]
[(_ foo bar baz) (thr-arg-func)]
;; then somehow, in one place, apply proc-for all on them all
```
I must admit i did oversimplify.
`proc-for-all` combines stx info with the results of `one-arg-func` `two-arg-func` and `thr-arg-func`.

So it'd really be something like this for _every_ case
```
[(_ foo)
 (quasisyntax/loc stx
    (let ([bar (on-arg-func)]) (proc-for-all (quote-syntax #,stx) bar)))]
;; I'm a syntax noob so there may be mistakes above but hopefully you understand what I'm trying to do and the problem
```
which gets a bit unweildy when you have over 40 patterns being matched
Is there a way to avoid having to add it to all the cases?</text>
  </message>
  <message conversation_id="737">
    <ts>2018-08-24T19:35:27.000100</ts>
    <user>Marnie</user>
    <text>&lt;@Kim&gt; I don't have a direct answer to your question, but I think having lots of pattern cases should generally be avoided. I minimize them by factoring things out into syntax classes.</text>
  </message>
  <message conversation_id="737">
    <ts>2018-08-24T19:51:10.000100</ts>
    <user>Aimee</user>
    <text>maybe something like
```
(syntax-parse stx
  [(_ arg:expr ...)
   (define len (length (syntax-&amp;gt;list #'(arg ...))))
   (quasisyntax/loc stx (let ([bar (n-arg-func #,len)]) (proc-for-all bar)))])
```</text>
  </message>
  <message conversation_id="737">
    <ts>2018-08-24T19:53:02.000100</ts>
    <user>Aimee</user>
    <text>btw if you want to use the information from `stx`, don't use `(quote-syntax #,stx)`; rather, extracts the info first and pass the info in e.g. `'#,(syntax-column stx)`</text>
  </message>
  <message conversation_id="737">
    <ts>2018-08-25T02:28:48.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Kim&gt; it's also perfectly fine to wrap the whole `syntax-parse` expression with a function call, definition, etc:
```
(define-syntax (macro1 stx)
  (do-more-transformation
   (syntax-parse stx
     ....)
   stx))
(define-syntax (macro2 stx)
  (define first-part
    (syntax-parse stx
      ....))
  .... first-part ....)
```</text>
  </message>
  <message conversation_id="738">
    <ts>2018-08-27T18:56:38.000100</ts>
    <user>Elanor</user>
    <text>Reading image snips takes on the order of seconds for non-trivial images, which is very noticeable for more than a few snips. The bottleneck appears to be in `editor-stream-in%`'s `get-unterminated-bytes`. Before I poke around in there, does anyone have some experience to inform attempts to speed that up: approaches that wouldn't be accepted into the distro (e.g. sacrificing human-readable line lengths in the wxme format?) are okay.</text>
  </message>
  <message conversation_id="738">
    <ts>2018-08-27T19:04:24.000100</ts>
    <user>Kim</user>
    <text>What is the `#%` for in the following code snippet `#:datum-literals (#%negate abs)`
It's from a `define-syntax-class`</text>
  </message>
  <message conversation_id="738">
    <ts>2018-08-27T19:19:02.000100</ts>
    <user>Elanor</user>
    <text>&lt;@Kim&gt; short answer: it's just part of the name `#%negate`, just as `-`, `?`, `%`, `/` are parts of names like `is-a?,` `object%`, and `for/fold`. Longer answer is about when people tend to name things with `#%` at the front, and the short answer to that is for “core” or “meta” forms.</text>
  </message>
  <message conversation_id="738">
    <ts>2018-08-27T20:52:28.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Elanor&gt; so pasting an image in DrRacket and saving it, and then reopening it is very slow?</text>
  </message>
  <message conversation_id="738">
    <ts>2018-08-27T20:52:39.000100</ts>
    <user>Elanor</user>
    <text>yes</text>
  </message>
  <message conversation_id="739">
    <ts>2018-08-27T23:01:02.000100</ts>
    <user>Elanor</user>
    <text>With a fresh install after moving aside the preference file, it doesn't seem as bad, although I don't see why doing that would matter. Turning off background expansion might be helping while editing files with images. Where there's a serious enough delay is when using `2htdp/image` produces `mrlib/image-core` snips, which appear to be an order of magnitude larger than the original (non-racket) image file. When profiling DrRacket those snips didn't seem to be the main problem, because more time was spent reading, but it turns out that for those snips there's more to read.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T07:34:41.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; has the snapshot build failed?</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T07:35:10.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; I am getting from travis racket: `Did the build fail? Check the logs at &lt;https://plt.eecs.northwestern.edu/snapshots/current/log/&gt;`</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T07:35:16.000100</ts>
    <user>Andreas</user>
    <text>Except that url doesn't exist.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T08:25:25.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; Huh. Well, `&lt;https://plt.eecs.northwestern.edu/snapshots/current/log/&gt;` is the URL provided in tiny print as "Build Logs" near the bottom of &lt;https://plt.eecs.northwestern.edu/snapshots/&gt; -- I'm guessing the build failed harder, or, the build went fine but there's some HTTP and/or network issue</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T08:26:11.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; understood. just wanted to let you know of the issue really. I understand that most likely something failed on the racket side.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T08:26:26.000100</ts>
    <user>Bertha</user>
    <text>No worries it's good to double-check.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T08:30:44.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Setsuko&gt; Not a big deal at all, just curious: Is that check-the-logs message still good or does it need updating?
(Asking you b/c you know more about this than me, b/c you added this a year ago :smile: &lt;https://github.com/greghendershott/travis-racket/commit/1df1d73d9432e2e93bf89e7cfc936521deb74427&gt;)</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:05:16.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; I see you tried cross compiling chez in &lt;https://github.com/cisco/ChezScheme/pull/267#issuecomment-371478100&gt;</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:06:01.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; was this successful ?</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:11:14.000100</ts>
    <user>Andreas</user>
    <text>the reason I ask this is because for me it fails due to the simple fact that `Mf-cross` includes `Mf-${xm}`, which does not exist in `$M/s`. So, in principle it should fail.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:11:55.000100</ts>
    <user>Andreas</user>
    <text>oh wait... I just noticed that in your specific case, it won't fail because you're not crossing. Your `$m == $xm`...</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:22:06.000100</ts>
    <user>Setsuko</user>
    <text>I think it's still fine! Unless that link changed which seems unlikely to me</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:38:29.000100</ts>
    <user>Andreas</user>
    <text>Something unexpected happened. I am trying to create a binary package, so I write `raco pkg create --binary --dest tmp .`, it turns out however that a zip file is created and it contains all of the source files, not just the binary ones.</text>
  </message>
  <message conversation_id="741">
    <ts>2018-08-28T09:40:41.000100</ts>
    <user>Bertha</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:40:42.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; everything seems to be there at the relevant site</text>
  </message>
  <message conversation_id="741">
    <ts>2018-08-28T09:40:53.000200</ts>
    <user>Monserrate</user>
    <text>/cc &lt;@Bertha&gt;</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:41:14.000100</ts>
    <user>Monserrate</user>
    <text>I believe that the site may not atomically update, which might explain that</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:41:21.000100</ts>
    <user>Bertha</user>
    <text>The Build Logs link is no longer 404 for me.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:41:27.000100</ts>
    <user>Andreas</user>
    <text>same here</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:41:56.000100</ts>
    <user>Andreas</user>
    <text>i guess me and &lt;@Bertha&gt; found a time window where things were broken but now all seems ok.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:42:15.000100</ts>
    <user>Bertha</user>
    <text>Oh, instead of updating atomically does it use green energy? That's cool.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:43:51.000100</ts>
    <user>Bertha</user>
    <text>OK I feel dirty but I spent hours trying to get this to work some "right" way: &lt;https://github.com/greghendershott/racket-mode/commit/2308f71d2be67042f98188590627e42452292ea8&gt;</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:44:48.000100</ts>
    <user>Bertha</user>
    <text>(The `get/set!` in question is the sort of thing that `gui-debugger/annotate` `annotate-for-single-stepping` returns.)</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:45:22.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; can you provide a little more background?</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:45:32.000100</ts>
    <user>Bertha</user>
    <text>Maybe there isn't any "right" answer to how do you annotate 3D syntax? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:45:50.000100</ts>
    <user>Bertha</user>
    <text>Oh, I'm working again on step-debugging in racket-mode.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:46:35.000100</ts>
    <user>Bertha</user>
    <text>And one thing I wanted to do, is while you're at a break, the REPL turns into a special debug REPL.
Where you can refer to local variables in scope, and even `set!` them.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:47:37.000100</ts>
    <user>Bertha</user>
    <text>So it's getting syntax from current-read-interaction, and wrapping it in a let-syntax with make-set!-transformer for each local.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:48:18.000100</ts>
    <user>Bertha</user>
    <text>And that works fine for non-TR, and even for the get case of TR, because the stx is just literal value</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:49:21.000100</ts>
    <user>Bertha</user>
    <text>But I couldn't figure out how to make a set! transformer. TR would understandably complain that the type of `get/set!` was `Any`, and I couldn't `ann` or `cast` or anything to make it happy.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:50:28.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; That's the basic situation.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:51:26.000100</ts>
    <user>Monserrate</user>
    <text>can you just give `get/set!` a type?</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:51:57.000100</ts>
    <user>Monserrate</user>
    <text>for example, with `unsafe-require`</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:52:40.000100</ts>
    <user>Bertha</user>
    <text>Oh I didn't really know about `unsafe-require`. I'll take a look.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:53:23.000100</ts>
    <user>Bertha</user>
    <text>Will that work at the top-level inside a TR `#%top-interaction` wrapper?  Defining a module and unsafe-requiring it?</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:53:36.000100</ts>
    <user>Bertha</user>
    <text>I'll try and see.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:57:21.000100</ts>
    <user>Monserrate</user>
    <text>Why does the module need to be inside the TR `#%top-interaction` wrapper?</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T09:58:19.000100</ts>
    <user>Bertha</user>
    <text>Because this is all happening inside a `current-prompt-read` handler inside `read-eval-print-loop`.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:00:13.000100</ts>
    <user>Bertha</user>
    <text>Maybe I'm making a dumb mistake but this toy example at a normal Typed Racket REPL prompt doesn't seem to work:
```
typed.rkt&amp;gt; (begin
             (module m racket/base (provide (all-defined-out)) (define (set n) (void)))
             (unsafe-require 'm [set (-&amp;gt; Any Void)])
             (set 12))
; stdin::825: type-check: type name used out of context
;   type: -&amp;gt;
;  in: (-&amp;gt; Any Void)
;   at: -&amp;gt;
;   in: (-&amp;gt; Any Void)
```</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:03:55.000100</ts>
    <user>Bertha</user>
    <text>Maybe the hack I did is fine. If a debugger allows you to bypass type-checking, is that a bug or feature?  (I'm partly rationalizing, but partly serious.)</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:12:04.000100</ts>
    <user>Monserrate</user>
    <text>sorry, it should be `unsafe-require/typed`</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:17:17.000100</ts>
    <user>Bertha</user>
    <text>Ah OK. That error fooled me. Same error with `unsafe-require/typed`, but neglecting to `(require typed/racket/unsafe)`.</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:18:43.000100</ts>
    <user>Monserrate</user>
    <text>yes, that's the same issue that was discussed recently wrt `syntax-parse` and `_`</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:21:23.000100</ts>
    <user>Bertha</user>
    <text>Oops got side-tracked by Travis CI error. Not what &lt;@Andreas&gt; reported. Now it's SSL cert failures. I can repro locally on macOS:
```
$ curl -L &lt;https://mirror.racket-lang.org/installers/7.0/racket-7.0-x86_64-linux.sh&gt;
curl: (60) SSL certificate problem: Invalid certificate chain
More details here: &lt;http://curl.haxx.se/docs/sslcerts.html&gt;

curl performs SSL certificate verification by default, using a "bundle"
 of Certificate Authority (CA) public keys (CA certs). If the default
 bundle file isn't adequate, you can specify an alternate file
 using the --cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
 the bundle, the certificate verification probably failed due to a
 problem with the certificate (it might be expired, or the name might
 not match the domain name in the URL).
If you'd like to turn off curl's verification of the certificate, use
 the -k (or --insecure) option.
```</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:24:51.000100</ts>
    <user>Monserrate</user>
    <text>urg</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:25:07.000100</ts>
    <user>Monserrate</user>
    <text>yeah, appears to be expired</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:25:14.000100</ts>
    <user>Bertha</user>
    <text>```
&lt;http://mirror.racket-lang.org|mirror.racket-lang.org&gt; uses an invalid security certificate. The certificate expired on August 28, 2018, 9:09:43 AM GMT-4. The current time is August 28, 2018, 10:24 AM. Error code: SEC_ERROR_EXPIRED_CERTIFICATE
```</text>
  </message>
  <message conversation_id="740">
    <ts>2018-08-28T10:25:18.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Dia&gt; ping</text>
  </message>
  <message conversation_id="742">
    <ts>2018-08-28T11:11:00.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; That comment is about using the cross-compilation setup for bootstrapping, which is not “cross” in the sense of multiple platforms. I’ve only cross-compiled (in that sense) boot files, which goes something like this: &lt;https://programmingpraxis.com/2017/09/15/compile-chez-scheme-on-android-arm/&gt;
Overall, Chez Scheme’s build process… well, let’s just say that Racket-on-Chez will need to offer simpler entry points, such as `make cs` in the Racket repo’s top level.</text>
  </message>
  <message conversation_id="742">
    <ts>2018-08-28T12:02:43.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; Thanks, I will take a look. I was pretty confident there was a bug somewhere in the Makefiles but it seems to go smoothly in the reference you linked to, so I need to dig deeper.</text>
  </message>
  <message conversation_id="742">
    <ts>2018-08-28T12:27:23.000100</ts>
    <user>Andreas</user>
    <text>`raco exe`  docs say `The raco exe command embeds a module, from source or byte code`, but how is this choice made? If bytecode is available, bytecode is chosen, otherwise source?</text>
  </message>
  <message conversation_id="742">
    <ts>2018-08-28T13:39:59.000100</ts>
    <user>Lynna</user>
    <text>Yes. If only source is available, it is compiled to bytecode for embedding.</text>
  </message>
  <message conversation_id="742">
    <ts>2018-08-28T15:02:14.000100</ts>
    <user>Andreas</user>
    <text>ah, but it's nonetheless compiled. It's not like the source file is inserted verbatim and compiled later somehow at execution time. Thanks.</text>
  </message>
  <message conversation_id="743">
    <ts>2018-08-28T15:06:56.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; btw, the certificate issue is fixed</text>
  </message>
  <message conversation_id="744">
    <ts>2018-08-28T17:12:22.000100</ts>
    <user>Kim</user>
    <text>Is there a way to get a backtrace in racket? I have a contract violation and need to find the source of the error.</text>
  </message>
  <message conversation_id="745">
    <ts>2018-08-28T18:14:33.000100</ts>
    <user>Aimee</user>
    <text>usually the backtrace will be printed by default
if you're using DrRacket, click the triple cross icon in the REPL
if you're using `racket` REPL, either use `(require errortrace)` or `,errortrace` to turn on errortrace (for more detailed backtrace)</text>
  </message>
  <message conversation_id="745">
    <ts>2018-08-28T18:16:46.000100</ts>
    <user>Aimee</user>
    <text>(in `racket` REPL, `,bt` also shows more context information)</text>
  </message>
  <message conversation_id="743">
    <ts>2018-08-28T19:03:17.000100</ts>
    <user>Bertha</user>
    <text>In `racket-mode` in Emacs you can set `racket-error-context` to `'high`, although errortrace makes your program run slower.
Or, you can leave it at `'low` or `'medium` normally and use `C-u` prefix to temporarily set it to `'high` for one run.
So, normally `C-c C-c` to run, and if you get an unsatisfying error you can `C-u C-c C-c` to run again and get a hopefully better one.
&lt;https://github.com/greghendershott/racket-mode/blob/master/Reference.md#run&gt;</text>
  </message>
  <message conversation_id="745">
    <ts>2018-08-28T23:57:36.000100</ts>
    <user>Aimee</user>
    <text>What's the complexity of `hash-ref` for (equal?) hash maps? If I have a hash map whose keys are lists of length `k`, would `hash-ref` become `O(k)`?</text>
  </message>
  <message conversation_id="745">
    <ts>2018-08-29T00:00:52.000100</ts>
    <user>Aimee</user>
    <text>oh, the hashing function is already linear for lists anyway...</text>
  </message>
  <message conversation_id="745">
    <ts>2018-08-29T00:02:06.000100</ts>
    <user>Carlyn</user>
    <text>Right. `hash-ref` is `O(1)` for mutable hashes and _effectively_ `O(1)` for immutable ones, though that doesn’t include the cost of the hashing itself. For `equal?` hashes, each use of `hash-ref` incurs one use of `equal-hash-code` and possibly many `equal?` comparisons in the case of collisions.</text>
  </message>
  <message conversation_id="745">
    <ts>2018-08-29T00:02:32.000100</ts>
    <user>Aimee</user>
    <text>sounds about right :disappointed:</text>
  </message>
  <message conversation_id="745">
    <ts>2018-08-29T00:02:53.000100</ts>
    <user>Carlyn</user>
    <text>(For immutable hashes, `hash-ref` is actually `O(log n)`, but it works out so that `log n` is never larger than the constant 62, so it’s essentially constant time.)</text>
  </message>
  <message conversation_id="746">
    <ts>2018-08-29T19:10:20.000100</ts>
    <user>Kim</user>
    <text>In my code I seem to have mangled my syntax. I'm having trouble finding where I did it. Do you know of ways I would be able to mangle syntax?
When I print the stx object I get something along the lines of `&amp;lt;syntax myfilename10754&amp;gt;` So the datum is `myfilename10754, and all of the fields for syntax are #f.
Any idea of how i could have caused this to happen?</text>
  </message>
  <message conversation_id="746">
    <ts>2018-08-29T19:26:11.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Kim&gt; `(datum-&amp;gt;syntax #f 'myfilename10754)` would give you  `#&amp;lt;syntax myfilename10754&amp;gt;`</text>
  </message>
  <message conversation_id="746">
    <ts>2018-08-29T19:27:19.000100</ts>
    <user>Bertha</user>
    <text>`myfilename10754` smells like it came from `gensym` or `make-temporary-filename` or similar?</text>
  </message>
  <message conversation_id="746">
    <ts>2018-08-29T20:12:03.000100</ts>
    <user>Kim</user>
    <text>&lt;@Bertha&gt; that sounds like a good place to start. I'll search for those methods and see what's going on. Much thanks for the help. I'd be lost without you all. :pray:</text>
  </message>
  <message conversation_id="747">
    <ts>2018-08-29T21:43:54.000100</ts>
    <user>Marnie</user>
    <text>&lt;@Meaghan&gt; re: MUD design</text>
  </message>
  <message conversation_id="747">
    <ts>2018-08-29T21:44:15.000100</ts>
    <user>Marnie</user>
    <text>you can start a thread in slack to have convos out of the way of the main channel</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:26:58.000100</ts>
    <user>Jacklyn</user>
    <text>How can I do this in racket:
```
(map
 (lambda (f a)
   (apply f a '(solid blue)))
 '((triangle 20) (circle 20)))
```</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:38:07.000100</ts>
    <user>Monserrate</user>
    <text>try `((,triangle 20) (,circle 20))</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:44:42.000100</ts>
    <user>Jacklyn</user>
    <text>Yes, I see what you mean</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:45:02.000100</ts>
    <user>Jacklyn</user>
    <text>Does not work though</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:45:32.000100</ts>
    <user>Jacklyn</user>
    <text>I guess what I want to do is just have a list of function-identifiers and apply them to something in a map</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:46:02.000100</ts>
    <user>Jacklyn</user>
    <text>I end up with ’circle (for instance), but cannot use this a function</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:46:15.000100</ts>
    <user>Monserrate</user>
    <text>right, symbols are not functions</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:46:29.000100</ts>
    <user>Jacklyn</user>
    <text>so how can I convert a symbol into a function-name</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:46:33.000100</ts>
    <user>Monserrate</user>
    <text>mostly my suggestion would be to not try to do that</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:46:50.000100</ts>
    <user>Monserrate</user>
    <text>is there a reason you can't just have a list of functions?</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:47:02.000100</ts>
    <user>Jacklyn</user>
    <text>I thought that was what I wanted</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:47:26.000100</ts>
    <user>Jacklyn</user>
    <text>ah, you mean without the first arg</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:47:51.000100</ts>
    <user>Monserrate</user>
    <text>this program works:
```
#lang racket
(require 2htdp/image)
(map
 (lambda (l)
   (apply (first l) (second l) '(solid blue)))
 `((,triangle 20) (,circle 20)))
```</text>
  </message>
  <message conversation_id="748">
    <ts>2018-08-30T09:48:11.000100</ts>
    <user>Jacklyn</user>
    <text>thanks</text>
  </message>
  <message conversation_id="749">
    <ts>2018-08-30T10:24:26.000100</ts>
    <user>Elanor</user>
    <text>You might enjoy this use of `apply`, that generalizes to more initial arguments:
```#lang racket
(require 2htdp/image)
(map
 (lambda (f-args)
   (apply apply (append f-args '((solid blue)))))
 `((,triangle 20) (,circle 20)))```</text>
  </message>
  <message conversation_id="750">
    <ts>2018-08-30T10:27:08.000100</ts>
    <user>Ivy</user>
    <text>Hello Everyone, it is good to be on the Racket Slack channel.  I have a quick question.  I have the following error message, if you know how I can resolve it, I would appreciate the  teaching moment! Error in phase 2 for tool #&amp;lt;path:C:\Users\jlshown\AppData\Roaming\Racket\planet\300\7.0\cache\dyoo\simply-scheme.plt\2\2\tool.rkt&amp;gt;; #f

drracket:language-configuration:add-language: found two languages with the same result from get-language-numbers: (-500 0), ("Teaching Languages" "Simply Scheme") and ("Teaching Languages" "Simply Scheme")</text>
  </message>
  <message conversation_id="750">
    <ts>2018-08-30T10:27:11.000100</ts>
    <user>Ivy</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="750">
    <ts>2018-08-30T10:28:37.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Ivy&gt; it looks like you installed "Simply Scheme" twice</text>
  </message>
  <message conversation_id="750">
    <ts>2018-08-30T10:28:45.000100</ts>
    <user>Monserrate</user>
    <text>can you say more about how you installed it?</text>
  </message>
  <message conversation_id="751">
    <ts>2018-08-30T12:13:12.000100</ts>
    <user>Ivy</user>
    <text>Hello Samth, yes that's exactly what happened.  I used the package manager, I didn't realize that occurred.</text>
  </message>
  <message conversation_id="750">
    <ts>2018-08-30T14:29:05.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Ivy&gt; I think the best thing to try is to remove the version that you install with planet</text>
  </message>
  <message conversation_id="752">
    <ts>2018-08-30T17:56:13.000100</ts>
    <user>Kim</user>
    <text>Hello Team Racket, another question for you.

In the example `func-param' came from a define-syntax-class.
I want to get the datum from the syntax class but also forward the syntax for the class.
Is there a way to create a list of the syntax for the `func-param` passed in in the following example?
`
(syntax-parse stx
[(_ fid:maybe-fid (~describe "description" *(p:func-param ...)*) rt:maybe-return-type e:expr ...)
     (quasisyntax/loc stx
       (let* ([params (list p.norm ...)]
              [param-stx-list (*?????????*)]
`</text>
  </message>
  <message conversation_id="752">
    <ts>2018-08-30T18:38:35.000100</ts>
    <user>Elanor</user>
    <text>&lt;@Kim&gt; Does replacing `(???????????)` with `(quote-syntax (p ...))` do what you want? Note that parsing and reconstructing with `...` will lose the syntax information of the surrounding parentheses. If you want to keep that as well, replace `(p:func-param ...)` with `(~and ps (p:func-param ...))` and then you can use `ps` instead of `(p ...)`.</text>
  </message>
  <message conversation_id="752">
    <ts>2018-08-30T19:55:39.000100</ts>
    <user>Kim</user>
    <text>&lt;@Elanor&gt; `(quote-syntax (p ...))` was a step in the right direction. Thank you! the final solutino was `(syntax-&amp;gt;list (quote-syntax (p ...)))`</text>
  </message>
  <message conversation_id="753">
    <ts>2018-08-30T20:01:16.000100</ts>
    <user>Odis</user>
    <text>&lt;@Freida&gt; How do you cause portaudio and rsound streams to stop when you close the tab in DrRacket?</text>
  </message>
  <message conversation_id="754">
    <ts>2018-08-30T21:13:36.000100</ts>
    <user>Bertha</user>
    <text>&lt;https://twitter.com/greghendershott/status/1035333893170384896&gt;</text>
  </message>
  <message conversation_id="755">
    <ts>2018-08-31T05:02:33.000100</ts>
    <user>Thelma</user>
    <text>greetings</text>
  </message>
  <message conversation_id="755">
    <ts>2018-08-31T05:03:23.000100</ts>
    <user>Franklin</user>
    <text>hi - quiet here at this time</text>
  </message>
  <message conversation_id="755">
    <ts>2018-08-31T05:04:22.000100</ts>
    <user>Thelma</user>
    <text>thought so. probably most people located in the states or europe.</text>
  </message>
  <message conversation_id="755">
    <ts>2018-08-31T05:08:19.000100</ts>
    <user>Tami</user>
    <text>Yeah, I'm in the UK and it doesn't really get busy until my afternoon.</text>
  </message>
  <message conversation_id="755">
    <ts>2018-08-31T07:32:54.000200</ts>
    <user>Thelma</user>
    <text>maybe should ask the question also here</text>
  </message>
  <message conversation_id="755">
    <ts>2018-08-31T07:33:31.000100</ts>
    <user>Thelma</user>
    <text>i got some troubles with FFI and can't figure out why there's a pointer value returned instead of an enum. the following pastebin provides the code and the error: &lt;https://pastebin.com/bk5RSrvu&gt;</text>
  </message>
  <message conversation_id="756">
    <ts>2018-08-31T11:52:50.000100</ts>
    <user>Meaghan</user>
    <text>Nice!  Thanks.</text>
  </message>
  <message conversation_id="756">
    <ts>2018-08-31T11:53:24.000100</ts>
    <user>Meaghan</user>
    <text>&lt;@Marnie&gt; back to the previous discussion,
&amp;gt; Not quite sure what I’d do for responding to user input and sending messages to the server.</text>
  </message>
  <message conversation_id="756">
    <ts>2018-08-31T11:54:22.000100</ts>
    <user>Meaghan</user>
    <text>maybe I’ll just do them in the impure way then.</text>
  </message>
  <message conversation_id="756">
    <ts>2018-08-31T11:57:05.000100</ts>
    <user>Meaghan</user>
    <text>OK now there’s one more step. Let’s say, we want the ability to allow the user to write the triggers, and we load all scripts in a certain path in run time.  How do we do this?</text>
  </message>
  <message conversation_id="756">
    <ts>2018-08-31T11:58:49.000100</ts>
    <user>Meaghan</user>
    <text>It’s like a scripting system. Usually, a mud client would be written in C, and then it embeds a Lua vm for scripting, and allows users to write scripts in lua.  In my case, I want to write the client in Racket, but also use Racket for scripting.</text>
  </message>
  <message conversation_id="757">
    <ts>2018-08-31T14:40:06.000100</ts>
    <user>Odis</user>
    <text>&lt;@Thelma&gt; That probably means that the enum value `203448384` is not in your `_TCOD_keycode_t` enum definition.</text>
  </message>
  <message conversation_id="756">
    <ts>2018-08-31T14:40:51.000100</ts>
    <user>Odis</user>
    <text>You can test this by using the `#:unknown` flag for your enum.</text>
  </message>
  <message conversation_id="757">
    <ts>2018-08-31T14:41:37.000100</ts>
    <user>Odis</user>
    <text>Giving you something like:
```
(define _TCOD_keycode_t (_enum '(...) #:unknown (lambda (x) x))
```</text>
  </message>
  <message conversation_id="758">
    <ts>2018-08-31T18:08:16.000100</ts>
    <user>Kim</user>
    <text>What is a good environment for working with .rkt?
Currently I'm using a mix of visual studio and dr racket and I'm getting the feeling that for serious racket programming using emacs is a must.</text>
  </message>
  <message conversation_id="758">
    <ts>2018-08-31T18:14:02.000100</ts>
    <user>Meaghan</user>
    <text>Is there a way to write a GUI app in a declarative way?</text>
  </message>
  <message conversation_id="758">
    <ts>2018-08-31T18:59:53.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Kim&gt; Many people do serious Racket programming using DrRacket. It has excellent support for custom `#lang`s, the best macro stepper, and more.
Some probably use it exclusively or nearly exclusively.
Some people use it alongside some other editor/env, such as Emacs. (I'm in this category.)</text>
  </message>
  <message conversation_id="758">
    <ts>2018-08-31T19:01:15.000100</ts>
    <user>Bertha</user>
    <text>I'm mostly in Emacs, but from time to time fire up DrRacket for specific things.</text>
  </message>
  <message conversation_id="758">
    <ts>2018-08-31T19:03:00.000100</ts>
    <user>Bertha</user>
    <text>For Racket in Emacs your two main choices these days are Geiser and racket-mode.
Since I wrote the latter, I won't recommend one. :slightly_smiling_face:
I think it's safe to say that you might prefer Geiser if you work with other Schemes as well as Racket, whereas racket-mode focuses only on Racket and so sometimes has deeper support. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="759">
    <ts>2018-08-31T19:37:08.000100</ts>
    <user>Marnie</user>
    <text>For scripting, I'd try to avoid runtime code loading and instead make a `#lang my-mud` that expands to a program that launches the MUD client. Users would write a file in this lang, where a file that contains nothing but the `#lang my-mud` line runs the client with default settings. Then they can add scripts and custom code and whatnot by adding code  to their file. This eliminates the need for any sort of runtime code loading, plugin architecture, or script execution mechanism.

I personally haven't _tried_ that approach with any programs yet, but it's worth noting that's basically how the Racket package server works. The package server's "config file" is basically just a program that calls a `main` function provided by the server with a bunch of keyword arguments. It's much more manageable than dynamic code loading, enables optimizations and reduced loading times via ahead-of-time compilation, and is much easier to implement and extend.</text>
  </message>
  <message conversation_id="759">
    <ts>2018-08-31T19:39:02.000100</ts>
    <user>Marnie</user>
    <text>Oh and I just remembered that the `frog` static blog generator does this too and there's some public discussion about how it made the switch from a dynamically loaded config file to a `#lang frog` program file.</text>
  </message>
  <message conversation_id="759">
    <ts>2018-08-31T19:48:39.000100</ts>
    <user>Marnie</user>
    <text>Found the `frog` pull request: &lt;https://github.com/greghendershott/frog/pull/194&gt;</text>
  </message>
  <message conversation_id="758">
    <ts>2018-08-31T20:16:11.000100</ts>
    <user>Ola</user>
    <text>I mostly use emacs + racket-mode but also DrRacket sometimes</text>
  </message>
  <message conversation_id="760">
    <ts>2018-08-31T23:30:33.000100</ts>
    <user>Meaghan</user>
    <text>Is there a way to query a child of top-level gui window?</text>
  </message>
  <message conversation_id="760">
    <ts>2018-08-31T23:31:14.000100</ts>
    <user>Meaghan</user>
    <text>like, if I have a `frame`, and I want to find a `canvas` with a certain label under the frame.</text>
  </message>
  <message conversation_id="760">
    <ts>2018-09-01T02:18:55.000100</ts>
    <user>Shalon</user>
    <text>&lt;@Meaghan&gt; A `frame%` has a `get-children` method, which returns all the direct child windows of the frame, you can test which child window is an `area-container&amp;lt;%&amp;gt;` and call `get-children` on it recursively.  However, it might be better to keep a reference to the canvas outside the window hierarchy.</text>
  </message>
  <message conversation_id="758">
    <ts>2018-09-01T09:25:26.000100</ts>
    <user>Franklin</user>
    <text>&lt;@Bertha&gt; Btw - you should make a racket-mode packages, such that searching for racket-mode at &lt;http://docs.racket-lang.org|docs.racket-lang.org&gt; can show the documentation of racket-mode.</text>
  </message>
  <message conversation_id="758">
    <ts>2018-09-01T09:33:25.000100</ts>
    <user>Bertha</user>
    <text>Is that cool to do?  "I am a package that has no code you can download and use. I am not even one of those doc-only packages for another pkg you can actually use. Instead, I exist solely to get free hosting for some text and appear in pkg search."</text>
  </message>
  <message conversation_id="758">
    <ts>2018-09-01T09:34:54.000100</ts>
    <user>Franklin</user>
    <text>I think so, I think of &lt;http://docs.racket-lang.org|docs.racket-lang.org&gt; as the hub of all racket documentation. Having documentation for racket-mode would be natural.</text>
  </message>
  <message conversation_id="758">
    <ts>2018-09-01T09:38:31.000100</ts>
    <user>Bertha</user>
    <text>OK. Thanks for the suggestion.</text>
  </message>
  <message conversation_id="761">
    <ts>2018-09-02T00:55:14.000100</ts>
    <user>Meaghan</user>
    <text>Hey, is there a tool to draw strings with ansi color code on `racket/gui`?</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-02T09:29:10.000100</ts>
    <user>Cicely</user>
    <text>i'm trying to build racket minimal on android in termux. i'm getting `use of undeclared indentifier 'scheme_start_atomic_no_break'`</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-02T09:30:40.000100</ts>
    <user>Cicely</user>
    <text>it looks like the symbol `__ANDROID__` is defined, and that is causing the racket build to make a wrong assumption about the environment. what i need here is a vanilla unix build, with a fairly standard gnu+clang toolset.</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-02T09:30:54.000100</ts>
    <user>Cicely</user>
    <text>any ideas?</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-02T09:47:18.000100</ts>
    <user>Cicely</user>
    <text>hmm it looks like there is some fancy cross-compiling support for building android apps in racket. that's very nice, but it's not what i'm looking for here. i just want to build plain old command line racket, with regular old unix tools, on a device that happens to be running android.</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T11:38:34.000100</ts>
    <user>Sandi</user>
    <text>Question about contracts: trying to randomly generate some hash inputs like so:

```
(contract-random-generate (hash/c integer? boolean?))
```

But cannot:

```
&amp;gt; (contract-random-generate (hash/c integer? boolean?))
; contract-random-generate: unable to construct any generator for contract:
;   (hash/c integer? boolean?) [,bt for context]
```</text>
  </message>
  <message conversation_id="763">
    <ts>2018-09-03T11:38:42.000100</ts>
    <user>Sandi</user>
    <text>How would I do this?</text>
  </message>
  <message conversation_id="763">
    <ts>2018-09-03T12:04:29.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Sandi&gt; that sounds like hashes are unsupported</text>
  </message>
  <message conversation_id="763">
    <ts>2018-09-03T12:06:53.000100</ts>
    <user>Monserrate</user>
    <text>probably relatively easy to add in `racket/contract/private/hash.rkt`</text>
  </message>
  <message conversation_id="764">
    <ts>2018-09-03T13:23:43.000100</ts>
    <user>Aimee</user>
    <text>An indirect workaround: `(make-immutable-hash (contract-random-generate (listof (cons/c integer? boolean?))))`</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T16:22:10.000200</ts>
    <user>Sandi</user>
    <text>with `raco setup` is there a way to just recompile the `&amp;lt;collects&amp;gt;/racket/private/contract` ?</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T16:22:44.000100</ts>
    <user>Sandi</user>
    <text>something like `raco setup -l collects/racket/private/contract` ?</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T16:23:40.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Sandi&gt; `raco setup racket/private/contract`</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T17:10:25.000100</ts>
    <user>Sandi</user>
    <text>hmmm</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T17:10:28.000100</ts>
    <user>Sandi</user>
    <text>```
$ ./racket/bin/raco setup racket/private/contract
collection-path: collection not found
  collection: "racket/private/contract"
  in collection directories:
   /Users/shibuya/Library/Racket/development/collects
   /Users/shibuya/github/racket/racket/collects
   ... [184 additional linked and package directories]
```</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T17:11:06.000100</ts>
    <user>Monserrate</user>
    <text>ah, you transposed `private` and `contract` from my original message to your question</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T17:12:09.000100</ts>
    <user>Sandi</user>
    <text>derp</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T17:13:50.000100</ts>
    <user>Sandi</user>
    <text>yah that got it - thanks</text>
  </message>
  <message conversation_id="762">
    <ts>2018-09-03T18:49:46.000100</ts>
    <user>Claud</user>
    <text>&lt;@Sandi&gt; Another workaround would be to use `flat-named-contract` to attach a generator function. If you need an even more general workaround, you could acomplish the same thing with `make-contract`, `prop:contract`, etc. (But it would be great to add generation support to `hash/c`!)</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T20:31:53.000100</ts>
    <user>Sandi</user>
    <text>well I seem to be stumbling onto something</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T20:31:56.000100</ts>
    <user>Sandi</user>
    <text>```
$ ./racket/bin/racket -i
Welcome to Racket v7.0.0.17.
&amp;gt; (require racket/contract)
&amp;gt; (contract-random-generate (hash/c number? (listof number?)))
'#hash((0 . (0 1.308710636691283e-07)))
```</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T20:33:15.000100</ts>
    <user>Sandi</user>
    <text>```
&amp;gt; (contract-random-generate (hash/c number? (hash/c number? string?)))
'#hash((-150.0-2147483647.0i
        .
        #hash((-2147483647.0-185.0i
               .
               "\uA7CBጚ䛡\U000351CD𫑫\U000B46B6\U000FAAC2\U0008DD1F\U000AA812⛕\U0010D6B6\U000D8D2B\U00048EBE㷎\U00035091𩣲Ų볈⢍읿ଓ愒妙\U0009F757㏥\U00072BE1彞辯逰能\U0005F69E뮝\U0004ACA7\U00071BC1\U00099D0F𧎝ᐾ\U00093943㜷\U0001F964髣\U00062741꧖粫\U00065E50\U00087B85\U000D696F\U000C8D02\U00046E0D\U000BE119魥\U00013BFF\U000A502D\U0009C413㍡刬ᑨ\U000CD8EC鵸\U000342E6ⷲꪌ㔱\U0003579F\U000E3620똠\U000459D9죄膅骖䎷駥\U000D72A8\U000A201E\U000BFD8E\U000FC781\U00052888᧳玠u逫煃ᨠ鷊\U0008B647遤縙髆ᇪ🞛\U00056173\U0009FDD4\U000B2F5A熑藬\U000F4E9B\U00067EF7\U0002DAA6"))))
```</text>
  </message>
  <message conversation_id="766">
    <ts>2018-09-03T20:43:32.000100</ts>
    <user>Aimee</user>
    <text>that looks correct</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T20:48:37.000100</ts>
    <user>Sandi</user>
    <text>need to write tests, run tests, etc - then will try and get a PR ready</text>
  </message>
  <message conversation_id="766">
    <ts>2018-09-03T21:00:02.000100</ts>
    <user>Sandi</user>
    <text>Where would I find tests for the contracts?</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T21:02:00.000100</ts>
    <user>Sandi</user>
    <text>&lt;https://github.com/racket/racket/blob/master/racket/collects/racket/private/unit-contract.rkt&gt; ?</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T21:06:03.000100</ts>
    <user>Jen</user>
    <text>&lt;@Sandi&gt; Mostly here: &lt;https://github.com/racket/racket/tree/master/pkgs/racket-test/tests/racket/contract&gt;</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T21:06:25.000100</ts>
    <user>Sandi</user>
    <text>ah cool! figured it was in a pkg but couldn't find it, thanks</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T21:29:01.000100</ts>
    <user>Sandi</user>
    <text>and ` ./racket/bin/raco test -l tests/racket/test` would run those right?</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T21:44:50.000100</ts>
    <user>Sandi</user>
    <text>ah looks like `$ ./racket/bin/raco test -m ~/github/racket/pkgs/racket-test/tests/racket/contract` will just run the contracts</text>
  </message>
  <message conversation_id="767">
    <ts>2018-09-03T21:58:00.000100</ts>
    <user>Jen</user>
    <text>I usually just run the `all.rkt` file in that directory as `racket all.rkt` which should run them all, you should be able to run individual test files the same way</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-03T22:17:46.000100</ts>
    <user>Sandi</user>
    <text>ah cool thanks</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T09:19:29.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Sandi&gt; also the .travis.yml file at the root of the repo has some good info on tests</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T09:37:30.000100</ts>
    <user>Sandi</user>
    <text>ah great point, need to remember that’s there</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T09:38:03.000100</ts>
    <user>Sandi</user>
    <text>`racket -l tests/racket/contract/all`</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T09:38:14.000100</ts>
    <user>Sandi</user>
    <text>:face_palm:</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T11:30:41.000100</ts>
    <user>Catrice</user>
    <text>General question to anyone familiar with the v6.12-&amp;gt;v7 transition details: we seem to be hitting an odd problem using syntax-parameters such that they worked as intended (for us) in v6.12, and no longer work in v7.  &lt;https://github.com/bootstrapworld/curr/issues/423#issuecomment-418379697&gt; has all the info I'm aware of (I'm not directly involved in this issue, just cross-posting it here in case someone might know the answer)</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T11:39:32.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Catrice&gt; is there a smaller example? I'm pretty sure some aspects of syntax parameters did change behavior in 7.0, though.</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T11:42:33.000100</ts>
    <user>Catrice</user>
    <text>I really don't know, sorry.  Should I put Dorai in touch with you?</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T11:42:46.000100</ts>
    <user>Monserrate</user>
    <text>see, for example, &lt;https://github.com/racket/racket/issues/2035&gt;</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T11:42:54.000100</ts>
    <user>Monserrate</user>
    <text>I think &lt;@Lynna&gt; is likely the person to ask</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T11:43:07.000100</ts>
    <user>Monserrate</user>
    <text>although &lt;@Carlyn&gt; and &lt;@Gaynell&gt; may have thoughts</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T12:23:22.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Catrice&gt; Offhand, it looks like a problem with syntax transformers and `set!` – probably a bug in the expander, although it’s possibly in syntax parameters. The expanded code has `(#%app the-unit-description the-unit-description ....)`, and I think it was supposed to be `(set! the-unit-description ....)`.</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T13:09:05.000100</ts>
    <user>Catrice</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="765">
    <ts>2018-09-04T13:44:06.000100</ts>
    <user>Lynna</user>
    <text>Looks like the problem is a missing `(require (for-template '#%kernel))` in “stxparamkey.rkt”. I’ll test and push a repair later today.</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-04T20:41:09.000100</ts>
    <user>Melodee</user>
    <text>Hi all, I'm trying to parse expressions with `read-syntax` and specifically am trying to parse arbitrary-precision decimal numbers as literals. (i.e. I want to parse 1234567890.0987654321 and keep it in that format without converting it to a fraction or losing precision to floating point rounding.) Is there an easy way to do this, or a good way in general?</text>
  </message>
  <message conversation_id="769">
    <ts>2018-09-04T21:19:13.000100</ts>
    <user>Bertha</user>
    <text>maybe
```
(parameterize ([read-cdot #t])
  (read-syntax 'source (open-input-string "1234567890.0987654321")))
```</text>
  </message>
  <message conversation_id="769">
    <ts>2018-09-04T21:19:46.000100</ts>
    <user>Bertha</user>
    <text>That will be `#&amp;lt;syntax::0 (#%dot 1234567890 987654321)&amp;gt;` and you can do whatever you want to do with the pre and post dot parts?</text>
  </message>
  <message conversation_id="769">
    <ts>2018-09-04T21:20:14.000100</ts>
    <user>Bertha</user>
    <text>&lt;https://docs.racket-lang.org/reference/reader.html#(part._parse-cdot)&gt;</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-04T21:20:15.000100</ts>
    <user>Claud</user>
    <text>&lt;@Melodee&gt; Not sure what you mean by "without converting it to a fraction". If can read as an exact rational number (not floating-point) if you `parameterize` `read-decimal-as-inexact` to `#false`: &lt;http://docs.racket-lang.org/reference/Reading.html?q=#%28def._%28%28quote._~23~25kernel%29._read-decimal-as-inexact%29%29&gt;</text>
  </message>
  <message conversation_id="769">
    <ts>2018-09-04T21:21:10.000100</ts>
    <user>Claud</user>
    <text>You might also be interested in the `exact-decimal` meta-language: &lt;http://docs.racket-lang.org/exact-decimal-lang/index.html&gt;</text>
  </message>
  <message conversation_id="769">
    <ts>2018-09-04T21:39:47.000100</ts>
    <user>Bertha</user>
    <text>Whups, scratch the `read-cdot` idea; not the intended use. Notice how it `read`s each part, so loses the leading zero after the dot in the example. Never mind.</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-04T21:59:33.000100</ts>
    <user>Melodee</user>
    <text>&lt;@Claud&gt; I was running into issues with `read-decimal-as-inexact` because I want to differentiate between an input that is `12.50` and `25/2`. I think that's really the crux of the issue</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-04T22:03:22.000100</ts>
    <user>Melodee</user>
    <text>I looked at `exact-decimal` as well, but it looks like that reads everything as exact rationals</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-04T22:06:16.000100</ts>
    <user>Carlyn</user>
    <text>If you want to differentiate `12.50` and `25/2`, you’ll have to do it yourself with a readtable extension that reimplements number parsing.</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-04T23:08:51.000100</ts>
    <user>Claud</user>
    <text>And the built-in number datatype doesn't have that distinction:
```
&amp;gt; (and (= #e12.50 25/2) (eqv? #e12.50 25/2))
#t
```
In fact, with interned literals from the default reader:
```
&amp;gt; (eq? #e12.50 25/2)
#t
```
So it sounds like you really want to implement your own number datatype with your own notions of equivalence.</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-04T23:14:08.000100</ts>
    <user>Melodee</user>
    <text>Thanks for the help! If I want to do that in a parser, is there some sort of extension I can add to the existing read-syntax, or is this going to be it's own reader?</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-05T15:17:34.000100</ts>
    <user>Claud</user>
    <text>&lt;@Melodee&gt; As &lt;@Carlyn&gt; mentioned, there's a readtable extension mechanism that can do this. Here's the introduction from the guide: &lt;http://docs.racket-lang.org/guide/hash-reader.html#(part._readtable)&gt;</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-05T15:19:54.000100</ts>
    <user>Franklin</user>
    <text>&lt;@Melodee&gt; If &amp;lt;decimal&amp;gt;*[.&amp;lt;decimal&amp;gt;*] is the only number format you want, I think the easiest is to write your own read-decimal-number that first reads in a string, then calls string-&amp;gt;number.</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-05T15:20:12.000100</ts>
    <user>Franklin</user>
    <text>The standard reader will accept numbers like   1##4 etc.</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-05T15:20:32.000100</ts>
    <user>Franklin</user>
    <text>(evaluates to 1004 fwiw)</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-05T15:35:48.000100</ts>
    <user>Claud</user>
    <text>Once you've implemented `my-read-number`, extending `read-syntax` is as easy as:
```
(define my-readtable
  (apply make-readtable
         (current-readtable)
         (for/fold ([lst null])
                   ([d (in-string "0123456789")])
           (list* d 'non-terminating-macro my-read-number lst))))

(parameterize ([current-readtable my-readtable])
  (read-syntax ...))
```</text>
  </message>
  <message conversation_id="768">
    <ts>2018-09-05T15:49:11.000100</ts>
    <user>Melodee</user>
    <text>Thanks all for the help!</text>
  </message>
  <message conversation_id="770">
    <ts>2018-09-05T16:04:08.000100</ts>
    <user>Catrice</user>
    <text>Quick pict question: I've constructed an image using a bitmap and a pin-over, roughly as follows: `(pin-over (bitmap "foobar.png") x y (a-translucent-filled-flash-pict))`.  My resulting image has 2x the dimensions of the original PNG image, as if it's being rendered in hi-dpi or something.  I'm curious, how can I avoid this expansion factor?</text>
  </message>
  <message conversation_id="770">
    <ts>2018-09-05T16:05:21.000100</ts>
    <user>Catrice</user>
    <text>I looked at the `current-expected-text-scale`, but it returns `(1 1)`, so I don't think that's the multiplier I'm seeing</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T17:07:00.000200</ts>
    <user>Monserrate</user>
    <text>what are the dimensions of the flash?</text>
  </message>
  <message conversation_id="770">
    <ts>2018-09-05T17:43:11.000100</ts>
    <user>Catrice</user>
    <text>Smaller than the png, by a lot. (The png is 1368x764, or whatever that typical screen size is, and the flash is 90x50)</text>
  </message>
  <message conversation_id="770">
    <ts>2018-09-05T17:44:55.000100</ts>
    <user>Catrice</user>
    <text>I don't absolutely *need* to use pict here; I could use 2hdtp/image instead. But it was easier to find the shapes I wanted in pict...</text>
  </message>
  <message conversation_id="770">
    <ts>2018-09-05T18:33:06.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Catrice&gt; this program produces the same answer for both for me:
```
#lang racket
(require pict pict/flash)
(define x 100)
(define y 100)
(define c (bitmap "cilk.png"))
(define v (pin-over c  x y (filled-flash 50 50)))
(pict-width c)
(pict-width v)
```</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T18:33:31.000100</ts>
    <user>Monserrate</user>
    <text>do you have a hi-DPI screen?</text>
  </message>
  <message conversation_id="770">
    <ts>2018-09-05T21:27:49.000100</ts>
    <user>Catrice</user>
    <text>&lt;@Monserrate&gt; yes, I do. I was surprised by this behavior because when I use 2htdp/image (in other scribble documents), I don't ever see hidpi scaling.</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:28:22.000100</ts>
    <user>Monserrate</user>
    <text>what's the pict-width of the various components?</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:28:44.000100</ts>
    <user>Monserrate</user>
    <text>also this is almost certainly a bug in `racket/draw`</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:29:10.000100</ts>
    <user>Monserrate</user>
    <text>unless the issues are not apparently until you display the image in which case the bug is in `racket/gui`</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:29:35.000100</ts>
    <user>Catrice</user>
    <text>I'll check in a moment (an not on that computer yet). And it seems odd to me, in the sense of nondeterministic builds, that such an environmental feature could be incorporated from the same command line invocation</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:29:48.000100</ts>
    <user>Catrice</user>
    <text>No, I'm generating HTML and loading it in a browser</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:30:05.000200</ts>
    <user>Catrice</user>
    <text>Not using drr for this at all</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:30:09.000100</ts>
    <user>Monserrate</user>
    <text>ah</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:30:41.000100</ts>
    <user>Monserrate</user>
    <text>then that makes it seem like the bug is in `racket/draw`</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:35:55.000100</ts>
    <user>Catrice</user>
    <text>The dimensions of the png according to pict-width and pict-height are 1366x728.  The dimensions of the flash are 75.0x30.83017...  The dimensions of the final pin-over are 1366x728.</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:37:04.000100</ts>
    <user>Catrice</user>
    <text>The dimensions of the final pict#.png are 2744x1468</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:37:58.000100</ts>
    <user>Catrice</user>
    <text>which are just slightly bigger than 2x the original png</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:38:06.000100</ts>
    <user>Monserrate</user>
    <text>can you convert the pict to png manually (not using scribble, instead using `convert`) and see if it's the same result?</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:38:18.000100</ts>
    <user>Catrice</user>
    <text>?  using the command line utility?</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:38:30.000100</ts>
    <user>Catrice</user>
    <text>or is `convert` a Racket function too?</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:38:40.000100</ts>
    <user>Monserrate</user>
    <text>no, using the `convert` function from `file/convertible`</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:38:46.000100</ts>
    <user>Catrice</user>
    <text>ok, lemme try that</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:39:06.000100</ts>
    <user>Monserrate</user>
    <text>my guess is that something is calling `convert` with `png@2x-bytes`</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:42:37.000100</ts>
    <user>Catrice</user>
    <text>once I call convert with 'png-bytes, how do I dump that into a file from within my scribble doc?  (I don't want to figure out how to extract this to a standalone file yet, not least because I don't want to vary the scribble environment to a racket one and change two variables at once)</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:43:08.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Catrice&gt; I explicitly want to try the minimal reproduction, ie a racket environment</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:43:29.000100</ts>
    <user>Catrice</user>
    <text>ah, ok.  that'll take me a bit.  hold, please...</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:43:36.000100</ts>
    <user>Monserrate</user>
    <text>my guess is that you get exactly the results you're seeing if you use `convert` with `png@2x-bytes`</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:48:05.000100</ts>
    <user>Catrice</user>
    <text>Is there an easy way, once I've got the png-bytes and png@2x-bytes, to examine their width and height from DrR, or do I need to save them to files and look at them in a browser?</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:48:49.000100</ts>
    <user>Monserrate</user>
    <text>you can just do `bytes-length`</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:48:57.000100</ts>
    <user>Monserrate</user>
    <text>but not really</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:49:18.000100</ts>
    <user>Monserrate</user>
    <text>you could convert them to a bitmap somehow</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:49:29.000100</ts>
    <user>Monserrate</user>
    <text>i recommend saving them to a file</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:50:28.000100</ts>
    <user>Catrice</user>
    <text>Is there a bytes-&amp;gt;file counterpart to file-&amp;gt;bytes?</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:50:36.000100</ts>
    <user>Monserrate</user>
    <text>`write-to-file`</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:55:41.000100</ts>
    <user>Catrice</user>
    <text>close; that seems to write it out as a string.  but I tried with-output-to-file/write-bytes, and that combo seems to suffice...  anyway: the result of `(convert the-pict 'png-bytes)` has dimensions 1366x728.  The result with `'png@2x-bytes` has dimensions 2732x1456 -- exactly double, and *not* identical to the results from scribble</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T21:56:13.000100</ts>
    <user>Catrice</user>
    <text>(It appears scribble stuck a few pixels of transparent border around the image, I don't know why)</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T22:04:27.000100</ts>
    <user>Catrice</user>
    <text>(then scribble explicitly sets a margin of -3px all around the image, and explicitly sets its width and height to 1372x734, so the browser scales the image back down to the size it "should" be)</text>
  </message>
  <message conversation_id="771">
    <ts>2018-09-05T22:45:41.000100</ts>
    <user>Catrice</user>
    <text>ISTM that the `png@2x-bytes` is coming from `current-render-convertible-requests`, and maybe picts know how to respond to the 2x request, but 2htdp/images don't, and that's why the latter happen to work out "as expected", but picts show up doubled?  (I don't grep `png@2x-bytes` anywhere near files that seem related to 2htdp/image, but I do see `png-bytes` in gui-lib/mrlib/image-core.)</text>
  </message>
  <message conversation_id="772">
    <ts>2018-09-06T00:57:17.000100</ts>
    <user>Shan</user>
    <text>We are using the handin server together with some of our own design recipe checking material.  We are running into a very strange problem with the sandbox evaluator.   In the sandbox evaluator the following expressions don't all produce true.</text>
  </message>
  <message conversation_id="772">
    <ts>2018-09-06T00:57:57.000100</ts>
    <user>Shan</user>
    <text>` (equal?  (* 3 3.3) 9.9)  ; produces false`</text>
  </message>
  <message conversation_id="772">
    <ts>2018-09-06T00:58:11.000100</ts>
    <user>Shan</user>
    <text>` (=       (* 3 3.3) 9.9)  ; produces false`</text>
  </message>
  <message conversation_id="772">
    <ts>2018-09-06T00:58:30.000100</ts>
    <user>Shan</user>
    <text>`(=~ (* 3 3.3) 9.9 .001)  ;produces true`</text>
  </message>
  <message conversation_id="772">
    <ts>2018-09-06T00:59:43.000100</ts>
    <user>Shan</user>
    <text>The handin server creates the evaluator with a byte-stream, and the documentation talks about it expecting to get any additional code to evaluate in that same form.  Which made me think perhaps there was a printing/reading thing going on here.  But I can't see in the code where that would be happening.</text>
  </message>
  <message conversation_id="772">
    <ts>2018-09-06T00:59:45.000100</ts>
    <user>Shan</user>
    <text>Any ideas?</text>
  </message>
  <message conversation_id="772">
    <ts>2018-09-06T02:37:49.000100</ts>
    <user>Tami</user>
    <text>&lt;@Shan&gt; If you just do the calculation `(* 3 3.3)` you can see you get `9.899999999999999` which is not equal to `9.9` which I think is why the first fails. The same goes for the second, and the third is true because it checks that the numbers are within a range of each other `0.001` of each other in this case (which the numbers are)</text>
  </message>
  <message conversation_id="773">
    <ts>2018-09-06T05:15:02.000100</ts>
    <user>Tami</user>
    <text>Floating point numbers are notoriously 'inaccurate' as they are an approximation and so using equality with them is very hit and miss. See &lt;https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&gt; for a full explanation.</text>
  </message>
  <message conversation_id="772">
    <ts>2018-09-06T05:55:48.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Shan&gt; for the teaching languages, DrRacket sets the `read-decimal-as-inexact` parameter to false (I don't know the details how the teaching languages are mapped to reader settings, though, sorry). If you're are feeding the sandbox evaluator *text*, then I would expect a sandbox set up for the teaching languages to have the right reader settings already. But if you're feeding the evaluator S-expressions (or syntax objects), it's probably already too late; the numbers have already been read using the enclosing environment's rules, which default to inexact numbers.</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:01:41.000100</ts>
    <user>Violeta</user>
    <text>&lt;@Monserrate&gt; re: &lt;https://github.com/racket/typed-racket/issues/768&gt;</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:02:40.000100</ts>
    <user>Violeta</user>
    <text>What exactly is going on here? Is it that the value of json-null in the type of JsonExpr is determined when you require it? Or when you define the module?</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:03:44.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Violeta&gt; the code for `typed/json` pretends that `json-null` doesn't exist, and that thus `null` in json is always translated to `'null` in Racket</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:04:24.000100</ts>
    <user>Monserrate</user>
    <text>of course, that's not right, and so you can make `string-&amp;gt;json` produce values that don't fit the `JSExpr` type it's supposed to have</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:04:50.000100</ts>
    <user>Monserrate</user>
    <text>which triggers a contract error, similar to if the type for `JSExpr` was `String` or something else totally wrong</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:04:57.000100</ts>
    <user>Violeta</user>
    <text>these types are trusted?</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:05:00.000300</ts>
    <user>Monserrate</user>
    <text>no</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:05:18.000100</ts>
    <user>Violeta</user>
    <text>sorry I meant is this ordinary typed racket code? Why does it type check?</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:05:30.000100</ts>
    <user>Violeta</user>
    <text>Is it because you just "ann" some untyped code?</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:06:00.000100</ts>
    <user>Monserrate</user>
    <text>fundamentally the issue is the same as if you write `(require/typed racket/base [string-&amp;gt;number (-&amp;gt; String String)])`</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:06:18.000100</ts>
    <user>Violeta</user>
    <text>right so it's not really typed code</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:06:30.000100</ts>
    <user>Monserrate</user>
    <text>`typed/json` is typed code</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:06:56.000100</ts>
    <user>Violeta</user>
    <text>But it's just a require and provide  essentially?</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:07:07.000100</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:07:27.000100</ts>
    <user>Violeta</user>
    <text>ok so I don't really see what Matthias is so up in arms about</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:07:50.000100</ts>
    <user>Violeta</user>
    <text>could you make a version of this that worked correctly with the parameterization using typed units?</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:08:38.000100</ts>
    <user>Monserrate</user>
    <text>that would be a different approach to the parameterization, and I don't think typed units support type parameterization that way</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:08:54.000100</ts>
    <user>Violeta</user>
    <text>right not the same library</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:08:57.000100</ts>
    <user>Monserrate</user>
    <text>but &lt;@Jen&gt; would know better</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:10:06.000100</ts>
    <user>Monserrate</user>
    <text>Matthias is making two points -- 1 that I don't understand about getting around the boundary, and 2 that it's not the untyped code's "fault" that it failed to live up to the contract</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:11:04.000100</ts>
    <user>Monserrate</user>
    <text>I think the second point is about error messages and debugging approaches, rather than a formal claim</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:12:55.000200</ts>
    <user>Violeta</user>
    <text>agreed</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:13:32.000100</ts>
    <user>Violeta</user>
    <text>Also would there be some type in TR that says "precondition: #:null is 'null?"</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:14:38.000200</ts>
    <user>Violeta</user>
    <text>though what liberalartist just proposed is more reasonable/faithful</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:15:13.000100</ts>
    <user>Violeta</user>
    <text>(to what TR is doing)</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:15:20.000100</ts>
    <user>Violeta</user>
    <text>(typed/json rather)</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:16:24.000200</ts>
    <user>Monserrate</user>
    <text>it's easy to make the type require the `#:null` keyword argument and require that it be the symbol `'null`</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:16:33.000100</ts>
    <user>Monserrate</user>
    <text>but that sounds annoying to use</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:23:34.000100</ts>
    <user>Violeta</user>
    <text>does that mean you would always have to supply the #:null keyword?</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:23:56.000100</ts>
    <user>Violeta</user>
    <text>or would it "just work" if the json-null parameter is 'null?</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:27:11.000100</ts>
    <user>Monserrate</user>
    <text>you'd always have to supply it</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:27:23.000100</ts>
    <user>Monserrate</user>
    <text>TR can't reason about the current values of parameters</text>
  </message>
  <message conversation_id="774">
    <ts>2018-09-06T10:27:41.000100</ts>
    <user>Violeta</user>
    <text>oh ofc duh</text>
  </message>
  <message conversation_id="775">
    <ts>2018-09-06T11:53:57.000100</ts>
    <user>Shan</user>
    <text>&lt;@Eugena&gt; and others.  thanks, very helpful</text>
  </message>
  <message conversation_id="775">
    <ts>2018-09-06T11:55:59.000100</ts>
    <user>Shan</user>
    <text>I guess I had gotten used to the exact numbers of the teaching languages and somehow thought they were default in Racket.</text>
  </message>
  <message conversation_id="776">
    <ts>2018-09-06T15:35:39.000100</ts>
    <user>Alesha</user>
    <text>question about `raco pkg install --scope-dir` option if I use that option, then dependency checking ignores any packages already installed under -i or -u scopes and will attempt to install the entire dependency tree of a package, including `base` and `racket-lib` even though they already are present in the installation scope. Is that intended?</text>
  </message>
  <message conversation_id="776">
    <ts>2018-09-06T16:40:17.000100</ts>
    <user>Lynna</user>
    <text>The original intent was for a scope directory to be even more “installation” than installation – so, something like “/usr/share/.…” while installation is “/usr/local/share/….“. But the package-search configuration lets you order the directories either way. I think probably `--scope-dir` should pay attention the search order and look in directories later than the specified one in the search list. That would be a change to `get-scope-list` in “pkg-db.rkt” to use the same `member`-based approach as used for `'user` or `'installation`.</text>
  </message>
  <message conversation_id="777">
    <ts>2018-09-06T19:02:54.000100</ts>
    <user>Alesha</user>
    <text>I think that would be a welcome change, I can take a look and see if I can make the change myself. My motivating reason was to create binary libs for a set of pkgs and their dependencies so I was hoping to be able to install the source versions and their uninstalled deps into a `—scope-dir` directory, and run `raco pkg create —binary-lib` over the installed pkgs. That approach didn’t work due to the above complication. Do you have a better suggestion? </text>
  </message>
  <message conversation_id="777">
    <ts>2018-09-06T19:04:32.000100</ts>
    <user>Alesha</user>
    <text>Ideally I’d like to be able to take advantage of automated dependency management and avoid needing to locate each missing package to create the binary lib version from. I’m assembling a minimal Racket distribution for a particular application.</text>
  </message>
  <message conversation_id="777">
    <ts>2018-09-06T19:07:02.000100</ts>
    <user>Catrice</user>
    <text>I've made no further progress on this. &lt;@Monserrate&gt;, any other info would be appreciated, though it's not urgent</text>
  </message>
  <message conversation_id="777">
    <ts>2018-09-06T21:22:32.000100</ts>
    <user>Monserrate</user>
    <text>I don't really have any further suggestions right now, I would open a bug report</text>
  </message>
  <message conversation_id="777">
    <ts>2018-09-07T09:27:35.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Violeta&gt; re: your tweet: which one of those is explicit in Typed Racket?</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T10:54:16.000100</ts>
    <user>Violeta</user>
    <text>casts are explicit in TR because they are specified at module boundaries</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T10:54:55.000100</ts>
    <user>Violeta</user>
    <text>but my understanding is that TR has unusual parametricity enforcement</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T10:55:07.000100</ts>
    <user>Violeta</user>
    <text>so it might not apply directly</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T10:57:05.000100</ts>
    <user>Violeta</user>
    <text>I'm currently working on something where sealing is explicit and therefore accessible to the programmer even in dynamically typed code</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T10:57:42.000100</ts>
    <user>Violeta</user>
    <text>but I don't think my solution works without making polymorphism explicit as well :confused:</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T10:59:46.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Violeta&gt; casts don't need to be explicit if you can synthesize them during type checking</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T10:59:59.000100</ts>
    <user>Monserrate</user>
    <text>for example, they aren't explicit for typed-&amp;gt;untyped casts</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T11:00:11.000100</ts>
    <user>Monserrate</user>
    <text>our DLS paper has no explicit casts</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T11:00:20.000100</ts>
    <user>Monserrate</user>
    <text>you just need a simple type system</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T11:01:52.000200</ts>
    <user>Violeta</user>
    <text>a module boundary is an explicit cast</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T11:10:07.000100</ts>
    <user>Monserrate</user>
    <text>I don't understand -- there's a simple type-directed translation from the GTLC to the system in my DLS paper</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T11:15:25.000100</ts>
    <user>Violeta</user>
    <text>so? there's a simple type-directed translation from GTLC into explicit cast calculi also</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T11:17:51.000100</ts>
    <user>Violeta</user>
    <text>also isn't polymorphism explicit in TR (as in you have to annotate to get a polymorphic type, not that you explicitly instantiate)</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T11:19:49.000100</ts>
    <user>Karry</user>
    <text>w.r.t. polymorphism in TR, a polymorphic type is only used when explicitly annotated as such. More generally, unannotated arguments are given type `Any` generally speaking.</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T11:22:08.000100</ts>
    <user>Violeta</user>
    <text>right versus trying to generalize like in &lt;https://link.springer.com/chapter/10.1007/978-3-319-89884-1_1&gt;</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T11:30:53.000100</ts>
    <user>Karry</user>
    <text>... I don't immediately understand the comparison (and have not read that paper, to be clear). They say "the first goal of this paper is to propose a generalization of consistent subtyping that is adequate for polymorphic subtyping"... Typed Racket does not use consistent subtyping at all, or consistency while performing inference, because both of these things are done in an entirely statically typed context, which makes me think this isn't the right comparison and/or isn't addressing the overarching question/comment you have about TR</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T12:08:54.000100</ts>
    <user>Violeta</user>
    <text>sorry you're missing some context from a tweet that Sam TH was referencing don't worry about it</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T13:41:24.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Violeta&gt; right, generalization is explicit in TR (but that's not necessary for the gradual typing part) but instantiation (what you said in the tweet) is implicit</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T13:42:41.000100</ts>
    <user>Violeta</user>
    <text>yes though instantiation in typed code doesn't seal anything so it's not really what I was talking about</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T13:43:13.000100</ts>
    <user>Monserrate</user>
    <text>right but the important case, which is instantiation of functions casted to a polymorphic type, is also implicit</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T13:47:59.000100</ts>
    <user>Violeta</user>
    <text>ok well I'm sure my tweet was wrong/too pithy</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T13:51:09.000100</ts>
    <user>Ivy</user>
    <text>Hello Everyone!  Hope all are well!  I have a quick questions for Racket 6.6 with the language Scheme, what packages do I need to have with it?</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T13:56:33.000100</ts>
    <user>Ivy</user>
    <text>I have the simply scheme by danny yoo which is used with the simply scheme curriculum, but things like (first 'truffle) is throwing an error: first: contract violation
  expected: (and/c list? (not/c empty?))</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T13:59:06.000100</ts>
    <user>Karry</user>
    <text>&lt;@Ivy&gt; what did you expect the expression `(first 'truffle)` to do? (i.e. I don't understand the problem, because that error seems appropriate and accurate to me)</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T14:02:16.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Violeta&gt; the reason that I bring it up is that I think all of those features are _required_ for a sensible account of gradual polymorphism</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T14:02:44.000100</ts>
    <user>Monserrate</user>
    <text>in the sense that you don't write any of them explicitly in an untyped language, so requiring them breaks some fundamental part of the approach</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:04:29.000100</ts>
    <user>Karry</user>
    <text>&lt;@Ivy&gt; (ah sorry, I glanced over at the simply scheme text and see it's supposed to return 't)</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T14:04:52.000100</ts>
    <user>Violeta</user>
    <text>but you *do* make sealing explicit in a dynamic language, the difference between a value and a value wrapped in an opaque struct is not implicit at all</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:07:07.000100</ts>
    <user>Helena</user>
    <text>&lt;@Ivy&gt; try installing &lt;https://pkgs.racket-lang.org/package/simply-scheme&gt;</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:07:09.000100</ts>
    <user>Monserrate</user>
    <text>I disagree; `map` doesn't do any sealing in Racket</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:07:38.000100</ts>
    <user>Monserrate</user>
    <text>people use sealing in dynamic languages to represent existentials, usually</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:08:04.000100</ts>
    <user>Karry</user>
    <text>&lt;@Ivy&gt; In DrRacket (v6.6) I clicked File &amp;gt; Package Manager, then entered `simply-scheme` in the text box and clicked install, and the following program now works:
```
#lang simply-scheme

(first 'truffle)
```

i.e. producing `'t`</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:14:19.000100</ts>
    <user>Violeta</user>
    <text>I agree map doesn't seal</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:14:46.000100</ts>
    <user>Violeta</user>
    <text>it is also not parametric</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T14:15:19.000100</ts>
    <user>Monserrate</user>
    <text>what do you mean? the standard definition is certainly parameteric</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:28:17.000100</ts>
    <user>Violeta</user>
    <text>sorry didn't think that through</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:28:35.000100</ts>
    <user>Violeta</user>
    <text>map is parametric, there's no difference whether it is sealed or not</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:29:41.000100</ts>
    <user>Violeta</user>
    <text>I'm not saying that sealing is implicitly used in dynamic languages to enforce parametricity</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:30:03.000100</ts>
    <user>Violeta</user>
    <text>I'm saying that the language feature that corresponds to sealing (generative structs, units) is not implicit in the dynamically typed language</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:31:00.000100</ts>
    <user>Violeta</user>
    <text>the language design I have works for existential types, making it work for forall types is a bit strange I admit</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T14:34:39.000100</ts>
    <user>Monserrate</user>
    <text>i agree with that about existentials</text>
  </message>
  <message conversation_id="778">
    <ts>2018-09-07T14:34:59.000100</ts>
    <user>Monserrate</user>
    <text>but I think universals have to be implicit</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:37:54.000100</ts>
    <user>Violeta</user>
    <text>I sort of agree but only inasmuch as I think sealing for universals is not really what anybody wants</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:40:53.000100</ts>
    <user>Monserrate</user>
    <text>well dynamic enforcement of gradual types isn't something anyone "wants" in a certain sense</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:42:52.000100</ts>
    <user>Violeta</user>
    <text>I think people do like opaque structs?</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:42:58.000100</ts>
    <user>Violeta</user>
    <text>I certainly do</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:43:49.000100</ts>
    <user>Violeta</user>
    <text>and so conclude that people do want dynamic enforcement of existentials</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:44:28.000100</ts>
    <user>Monserrate</user>
    <text>I feel like the question of "want" is problematic</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-07T14:48:21.000100</ts>
    <user>Violeta</user>
    <text>ok</text>
  </message>
  <message conversation_id="780">
    <ts>2018-09-07T15:03:31.000100</ts>
    <user>Ivy</user>
    <text>&lt;@Karry&gt; Thank you so much, what I will do is uninstall the package or racket if I have to then, reinstall racket + simply-scheme and try it again. I will let you know.</text>
  </message>
  <message conversation_id="780">
    <ts>2018-09-07T15:04:19.000100</ts>
    <user>Ivy</user>
    <text>&lt;@Karry&gt; yes (first 'truffle ) would be 't</text>
  </message>
  <message conversation_id="779">
    <ts>2018-09-09T17:51:04.000100</ts>
    <user>Adrianne</user>
    <text>I’m awesome-go (&lt;http://github.com/avelino/awesome-go|github.com/avelino/awesome-go&gt;) mantener, start now &lt;https://github.com/avelino/awesome-racket&gt;
Anyone interested in helping keep the awesome-racket calls me in pvt</text>
  </message>
  <message conversation_id="781">
    <ts>2018-09-09T23:06:01.000100</ts>
    <user>Lynna</user>
    <text>This turned out to require slightly more refactoring than I thought, but the idea seems to work out. I expect to push tomorrow after a little more testing.</text>
  </message>
  <message conversation_id="782">
    <ts>2018-09-10T04:07:53.000100</ts>
    <user>Thaddeus</user>
    <text>&lt;@Adrianne&gt; Hey, thanks for this project! I made a pull request with some projects I follow or maintain: &lt;https://github.com/avelino/awesome-racket/pull/2&gt;</text>
  </message>
  <message conversation_id="781">
    <ts>2018-09-10T08:20:18.000100</ts>
    <user>Lynna</user>
    <text>Pushed</text>
  </message>
  <message conversation_id="783">
    <ts>2018-09-10T11:46:01.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; Is there any way to “split off” a DrRacket tab into a separate window, or is the only way to close the tab and open the same file again in a new window?</text>
  </message>
  <message conversation_id="781">
    <ts>2018-09-10T11:51:13.000100</ts>
    <user>Eileen</user>
    <text>That's the only way I know. Improving seems merely like a small matter of programming. ;)</text>
  </message>
  <message conversation_id="781">
    <ts>2018-09-10T11:51:15.000100</ts>
    <user>Alesha</user>
    <text>Thank you &lt;@Lynna&gt; ! I’ll build from the HEAD and give it a try</text>
  </message>
  <message conversation_id="781">
    <ts>2018-09-10T11:51:57.000100</ts>
    <user>Carlyn</user>
    <text>Okay, I figured as much, but I thought I’d ask. Maybe I will try adding it at some point, but probably not today. :)</text>
  </message>
  <message conversation_id="783">
    <ts>2018-09-10T11:55:04.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; In the program
```
#lang racket
(let ()
  (define-syntax foo (make-rename-transformer #'values))
  (foo 1))
```
I realize that getting Check Syntax to understand the structure of the RHS of the `define-syntax` is largely a lost cause with the current communication channels in place, but I wonder if it couldn’t at least recognize the use of `define-syntax` itself. Does it make sense for the internal-definition context → `letrec-syntaxes+values` transformation to add/propagate `'origin` properties somewhere so that uses of `define-syntaxes` are tracked?</text>
  </message>
  <message conversation_id="781">
    <ts>2018-09-10T12:01:19.000100</ts>
    <user>Carlyn</user>
    <text>It looks like `letrec-syntaxes+values` is already smart enough to propagate `'origin` properties on syntax binding pairs, so the transformation would just need to attach the `'origin` property to the right spot.</text>
  </message>
  <message conversation_id="784">
    <ts>2018-09-10T13:08:23.000100</ts>
    <user>Claud</user>
    <text>I'm learning `#lang slideshow` for my RacketCon talk. Does anyone have or know of presentations with source code that I could look at as examples?</text>
  </message>
  <message conversation_id="784">
    <ts>2018-09-10T13:09:08.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Claud&gt; do you want really impressive ones or simple ones?</text>
  </message>
  <message conversation_id="784">
    <ts>2018-09-10T13:09:24.000100</ts>
    <user>Claud</user>
    <text>Either/both?</text>
  </message>
  <message conversation_id="784">
    <ts>2018-09-10T13:09:40.000100</ts>
    <user>Monserrate</user>
    <text>here are some from &lt;@Lynna&gt; &lt;https://github.com/mflatt/talks/&gt;</text>
  </message>
  <message conversation_id="784">
    <ts>2018-09-10T13:10:20.000100</ts>
    <user>Monserrate</user>
    <text>here's a very impressive one from &lt;@Eileen&gt; &lt;https://github.com/rfindler/icfp-2014-contracts-talk/&gt;</text>
  </message>
  <message conversation_id="784">
    <ts>2018-09-10T13:12:21.000100</ts>
    <user>Claud</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="784">
    <ts>2018-09-10T13:14:27.000100</ts>
    <user>Monserrate</user>
    <text>here's a pretty simple and short one of mine: &lt;https://github.com/samth/iu-intro-2014&gt;</text>
  </message>
  <message conversation_id="784">
    <ts>2018-09-10T13:15:11.000100</ts>
    <user>Monserrate</user>
    <text>here's a library containing a simple slide (and some complex stuff for the picture in it): &lt;https://github.com/samth/lang-slide&gt;</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:43:52.000100</ts>
    <user>Louanne</user>
    <text>Does anyone have a link to a sample repo that illustrates the “languages as libraries” approach that’s not typed racket?</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:44:07.000100</ts>
    <user>Louanne</user>
    <text>I want to give something to some students about this, but typed racket is too ambitious for them to understand, I think.</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:53:28.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Louanne&gt; do you just want a repo that implements a language?</text>
  </message>
  <message conversation_id="784">
    <ts>2018-09-10T18:53:58.000100</ts>
    <user>Monserrate</user>
    <text>or do you want something that works somewhat like that paper?</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:54:05.000100</ts>
    <user>Monserrate</user>
    <text>or something else?</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:54:40.000100</ts>
    <user>Louanne</user>
    <text>Ideally, something that follows the paper’s technique of doing a local expand on the module and then walking over forms to transform them</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:55:02.000100</ts>
    <user>Louanne</user>
    <text>Merely adding macros via an module lang sexpr won’t be enough, for example.</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:55:21.000100</ts>
    <user>Louanne</user>
    <text>So “implements a language” is maybe, but I think “works somewhat like that paper” is closer to what I want.</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:56:00.000100</ts>
    <user>Louanne</user>
    <text>To give some context, we want to work on our own language following this technique, and could roll it from scratch using this paper, but I wanted to see if there was anything to give students that might illustrate the idea a bit more concretely</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:56:22.000100</ts>
    <user>Louanne</user>
    <text>right now you can use it as a `#lang reader ..`</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T18:56:36.000100</ts>
    <user>Louanne</user>
    <text>But for the kinds of expansions we want, we need to be able to walk over and transform things like identifiers</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T19:18:49.000100</ts>
    <user>Jen</user>
    <text> &lt;@Louanne&gt; languages the racket way(lwc 2016), and herbarium racketensis(icfp 2017) both sort of fit what you’re looking for, both work through some of the steps of building a language and related tooling. I’m away from a computer right now but I can send you links to the papers and repos later if you can’t find them</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T19:38:22.000100</ts>
    <user>Louanne</user>
    <text>thanks for the pointers</text>
  </message>
  <message conversation_id="785">
    <ts>2018-09-10T20:44:31.000100</ts>
    <user>Louanne</user>
    <text>&lt;@Odis&gt; is video-lang a good example? I was just looking at this now..</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:46:15.000100</ts>
    <user>Odis</user>
    <text>Sure. IIRC, the crux of what you want is in `main.rkt` and the `video-begin` function in `base.rkt`: &lt;https://github.com/videolang/video/blob/master/video/main.rkt&gt;</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:46:23.000100</ts>
    <user>Odis</user>
    <text>(For the front end language.)</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:46:33.000200</ts>
    <user>Odis</user>
    <text>(I also used plenty of DSLs all throughout the implementation.)</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:46:35.000100</ts>
    <user>Louanne</user>
    <text>Yeah, I was just looking at that and that seems like what I want</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:48:10.000100</ts>
    <user>Odis</user>
    <text>Okay cool. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:48:17.000100</ts>
    <user>Louanne</user>
    <text>I’m sure there are other examples</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:48:20.000100</ts>
    <user>Louanne</user>
    <text>and I should also look into those</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:48:24.000100</ts>
    <user>Odis</user>
    <text>If you have any questions, and/or improvement thoughts please let me know .:)</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:48:25.000100</ts>
    <user>Louanne</user>
    <text>video-lang seems like a medium-sized one</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:48:42.000100</ts>
    <user>Louanne</user>
    <text>My frank guess is that I’ll have to take a week or two to digest it</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:49:14.000200</ts>
    <user>Louanne</user>
    <text>we’ve realized that we need to walk over variable bindings for our language to work, so just using plain macros won’t be enough, I’m sure we’ll just have to pull info from a few sources</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:49:23.000100</ts>
    <user>Louanne</user>
    <text>but my students probably aren’t strong enough to just read the typed racket code just yet</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:49:41.000100</ts>
    <user>Odis</user>
    <text>Oh, honestly, I think the smallest (and cutest) one that I have is #lang sml.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:49:46.000100</ts>
    <user>Louanne</user>
    <text>ah ok</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:49:51.000100</ts>
    <user>Odis</user>
    <text>(Which is not standard ml, but the s-markup language).</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:50:14.000200</ts>
    <user>Odis</user>
    <text>I wrote it in about an hour after getting annoyed at things like YAML.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:50:17.000200</ts>
    <user>Louanne</user>
    <text>&lt;https://github.com/LeifAndersen/racket-sml&gt;</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:50:22.000100</ts>
    <user>Louanne</user>
    <text>oh I’ve seen this actually.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:50:34.000100</ts>
    <user>Odis</user>
    <text>&lt;https://github.com/LeifAndersen/racket-sml&gt;</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:50:47.000100</ts>
    <user>Louanne</user>
    <text>just forgot about this</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:50:52.000100</ts>
    <user>Odis</user>
    <text>Ya, I...err...didn't write any comments in it, because it was just a quick hack.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:51:14.000100</ts>
    <user>Odis</user>
    <text>But it's super convenient. Like, my calendar, and even resume use it.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:51:30.000100</ts>
    <user>Louanne</user>
    <text>right, I think the biggest hurdle for my students (and me) to tackle is the various interrelated ways of hacking these things up. I’m not really a macro or racket expert, so this is mostly me kicking things along</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:51:32.000100</ts>
    <user>Odis</user>
    <text>&lt;https://github.com/LeifAndersen/website/blob/master/cv.sml&gt;</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:51:55.000100</ts>
    <user>Louanne</user>
    <text>nice!</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:52:05.000100</ts>
    <user>Odis</user>
    <text>Fair.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:52:41.000100</ts>
    <user>Odis</user>
    <text>There are about 3-5 tricks that go into that, namely</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:53:38.000100</ts>
    <user>Odis</user>
    <text>Namely, 1. Lifting out expressions so the code can be a data definition.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:54:01.000100</ts>
    <user>Odis</user>
    <text>2. Using 'paren-shape' to distinguish between `(`, `{`, and `[`.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:54:40.000100</ts>
    <user>Odis</user>
    <text>3. Any free identifiers ending with `:` are treated as a symbol.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:55:04.000100</ts>
    <user>Odis</user>
    <text>And 4. Using `{{` for string literals. (Sadly that one was the hackiest. and is responsible for about half of the code.)</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:57:27.000100</ts>
    <user>Odis</user>
    <text>I should write a blog post on it.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:57:35.000100</ts>
    <user>Odis</user>
    <text>Anyway, if you have any questiosn, feel free to ask. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:58:02.000100</ts>
    <user>Louanne</user>
    <text>I don’t quite get what you mean by (1): what is a data definition in this context?</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:58:42.000100</ts>
    <user>Louanne</user>
    <text>Maybe I should try to grok your code more, it probably will make sense once I get it. Something like you need to isolate out the code from the non-code, since your language is meant to work with non-code stuff, and you need to pull that up into a big block before the main evaluation actually runs to create (e.g.,) your cv</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T20:58:47.000100</ts>
    <user>Louanne</user>
    <text>Is that approximately the right idea?</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:44:53.000100</ts>
    <user>Odis</user>
    <text>Oh, sorry, I just meant, I want the default context to be just data.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:45:14.000100</ts>
    <user>Odis</user>
    <text>Like, in a latex file, by default you're typing prose, and you have to use some language form to go to another context.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:45:22.000100</ts>
    <user>Odis</user>
    <text>Or like html, or scribble.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:45:27.000100</ts>
    <user>Odis</user>
    <text>Does that make more sense?</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:50:48.000100</ts>
    <user>Louanne</user>
    <text>yeah that makes sense</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:50:55.000100</ts>
    <user>Louanne</user>
    <text>this looks great</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:51:01.000100</ts>
    <user>Louanne</user>
    <text>I think it’ll be some good fodder</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:51:11.000100</ts>
    <user>Louanne</user>
    <text>this + video-lang will give some good stuff to have students dig into</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:53:16.000100</ts>
    <user>Odis</user>
    <text>Okay cool. I look forward to seeing how it goes. :smile:</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T21:58:18.000100</ts>
    <user>Omega</user>
    <text>&lt;@Louanne&gt;, have you come across Beautiful Racket (&lt;https://beautifulracket.com&gt;)? Its tutorials involve implementing several languages, including a Basic interpreter with variables, gotos, subroutines (gosub), and even functions. I only recently worked through it and haven’t read the languages as libraries paper yet so I’m not sure it’s what you’re looking for. I found it very helpful for getting over my fear of planning new language projects using Racket.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T22:02:52.000100</ts>
    <user>Omega</user>
    <text>By the way, &lt;@Odis&gt;, I recently watched your video-lang talk and really enjoyed it. I’m eager to poke around in the code to learn how the custom GUI controls are implemented. Providing visual programming DSLs, if that’s the right way to put it, seems super useful!</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T22:09:12.000100</ts>
    <user>Odis</user>
    <text>&lt;@Louanne&gt; &amp;amp; &lt;@Omega&gt; I concur, beautiful racket is great. It doesn’t go into many of the super duper advanced bleeding edge things, but it does show you how to do some cool things with languages as libraries.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T22:10:19.000100</ts>
    <user>Odis</user>
    <text>Also, &lt;@Omega&gt; thanks. ^.^ The existing GUI code is somewhat boring, you can find it in `player.rkt`: &lt;https://github.com/videolang/video/blob/master/video/player.rkt&gt;</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T22:10:52.000200</ts>
    <user>Odis</user>
    <text>And `private/editor.rkt`: &lt;https://github.com/videolang/video/blob/master/video/private/editor.rkt&gt;</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T22:11:36.000100</ts>
    <user>Odis</user>
    <text>(The first being the video-canvas that allows you to embed videos into any racket program (including slideshows), the second being the prototype gui editors.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T22:12:24.000100</ts>
    <user>Odis</user>
    <text>This repo: &lt;https://github.com/videolang/idmt&gt; contains the current state of my non-textual (visual) macro’s experiment. But its still very early days for that.</text>
  </message>
  <message conversation_id="786">
    <ts>2018-09-10T22:12:37.000100</ts>
    <user>Odis</user>
    <text>Thanks to &lt;@Carlyn&gt; and her RacketCOn talk a few years back. ^.^</text>
  </message>
  <message conversation_id="787">
    <ts>2018-09-10T23:00:26.000100</ts>
    <user>Louanne</user>
    <text>Yes, I’ve read through beautiful racket, but I don’t think it covers much of the languages-as-libraries approach, unfortunately</text>
  </message>
  <message conversation_id="787">
    <ts>2018-09-10T23:00:34.000100</ts>
    <user>Louanne</user>
    <text>That book is very helpful for most of the cases you’d want</text>
  </message>
  <message conversation_id="787">
    <ts>2018-09-10T23:00:58.000100</ts>
    <user>Louanne</user>
    <text>But we need to rewrite core parts of the AST, unfortunately, including things like variables, etc..</text>
  </message>
  <message conversation_id="787">
    <ts>2018-09-10T23:01:30.000100</ts>
    <user>Louanne</user>
    <text>(Specifically, our language has nuanced interactions with state, so we need to do things like rewrite variable occurrences to forms that call out to maintain the secrecy of various variables)</text>
  </message>
  <message conversation_id="787">
    <ts>2018-09-10T23:02:30.000100</ts>
    <user>Louanne</user>
    <text>I think the languages as libraries paper is a good reference, the idea of doing a local-expand at the toplevel module definition, then doing your own work, that really is what we’re going to need, I think.</text>
  </message>
  <message conversation_id="787">
    <ts>2018-09-10T23:02:37.000100</ts>
    <user>Louanne</user>
    <text>I’ll let you all know as we keep hacking on it</text>
  </message>
  <message conversation_id="787">
    <ts>2018-09-10T23:02:49.000100</ts>
    <user>Louanne</user>
    <text>I’m sure there are a variety of ways to do it once you really know the internals of the macro system</text>
  </message>
  <message conversation_id="788">
    <ts>2018-09-11T02:06:13.000100</ts>
    <user>Thelma</user>
    <text>greetings</text>
  </message>
  <message conversation_id="788">
    <ts>2018-09-11T02:06:46.000100</ts>
    <user>Thelma</user>
    <text>did someone else also experience that same error when using typed racket? &lt;http://pasterack.org/pastes/8526&gt;</text>
  </message>
  <message conversation_id="788">
    <ts>2018-09-11T02:10:30.000100</ts>
    <user>Thelma</user>
    <text>when moving that stuff into a different module and providing it from there to the other one it type checks without problems. But that is just weird and something i don't want.</text>
  </message>
  <message conversation_id="788">
    <ts>2018-09-11T02:46:51.000100</ts>
    <user>Thelma</user>
    <text>wooo. found a good workaround \o/.</text>
  </message>
  <message conversation_id="789">
    <ts>2018-09-11T10:09:24.000200</ts>
    <user>Andreas</user>
    <text>All, I have been trying to use `create-embedding-executable` instead of `raco exe` on the command line and first attempt was a complete failure because my code would not run, the resulting exe looked like a bloated `racket`, etc. So I looked at the `raco exe` code.</text>
  </message>
  <message conversation_id="789">
    <ts>2018-09-11T10:09:42.000100</ts>
    <user>Andreas</user>
    <text>I know what most of it is about but I am confused about this line: ` #:modules (cons (quasiquote (#%mzc: (file ,source-file) (main configure-runtime)))`</text>
  </message>
  <message conversation_id="789">
    <ts>2018-09-11T10:11:11.000100</ts>
    <user>Andreas</user>
    <text>What I don't get is why `(#%mzc: ...)` and `(main configure-runtime)`. Why is this needed at all?</text>
  </message>
  <message conversation_id="789">
    <ts>2018-09-11T10:11:54.000100</ts>
    <user>Andreas</user>
    <text>Still, even with it I am having issues which I don't get with `raco exe`. Currently when I execute my binary I get: `no module instance found: #&amp;lt;resolved-module-path:'#%embedded:g849:misc&amp;gt; 0` Have no idea where this comes from.</text>
  </message>
  <message conversation_id="789">
    <ts>2018-09-11T18:29:08.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; The `#%mzc:` is needed so that the embedded main module has a predictable name; that name is used by the `#:early-literal-expression` and `#:literal-expression` arguments. The `(main configure-runtime)` part specifies that those submodules should be included, if they exist.
I don’t have a good guess at where the “no module instance found” error comes from, though. Do you have a small-ish example?</text>
  </message>
  <message conversation_id="789">
    <ts>2018-09-12T03:34:15.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; thanks for the explanation. Trying to extract a smaller example.</text>
  </message>
  <message conversation_id="789">
    <ts>2018-09-12T03:34:40.000100</ts>
    <user>Andreas</user>
    <text>I think this is related to me not knowing about `define-runtime-paths` and my extensive use of `dynamic-require`.</text>
  </message>
  <message conversation_id="789">
    <ts>2018-09-12T04:47:00.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; I have sent an email to the ml since the small-ish example looked too large to post here.</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T13:50:36.000100</ts>
    <user>Karry</user>
    <text>Am I missing something simple for why this doesn't just work:
```
#lang racket/base

(define nspace (namespace-require
                'racket/math
                (make-base-namespace)))

(eval '(sqr 6) nspace)
;; require: unknown module
;; module name: #&amp;lt;resolved-module-path:"...../collects/racket/math.rkt"&amp;gt;
```</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:03:15.000100</ts>
    <user>Karry</user>
    <text>frustratingly... the `resolved-module-path` file it points to indeed exists and is what I want to require &amp;gt;_&amp;lt;</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:10:10.000100</ts>
    <user>Karry</user>
    <text>nevermind I figured out something that works (also `namespace-require` returns void, oops, so that's obviously not what I had thought)</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:16:02.000100</ts>
    <user>Melodee</user>
    <text>I'm having some crazy problems with `hash-ref` (possibly memory related)</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:16:43.000100</ts>
    <user>Melodee</user>
    <text>I have a set of ffi bindings which import a bunch of data structures that have a size of 16-bits</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:17:18.000100</ts>
    <user>Melodee</user>
    <text>I then add 256 of these data structures into a hash-map as keys</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:17:38.000100</ts>
    <user>Melodee</user>
    <text>Later on, when I try to access these keys, they don't show up in the hash table</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:18:21.000100</ts>
    <user>Melodee</user>
    <text>I've made sure that the hash-table is comparing using `equal?` by checking with `hash-equal?`which returns `#t`</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:18:39.000100</ts>
    <user>Melodee</user>
    <text>And I've tried a simplified version in the REPL which works fine, so it's not some weird issue comparing keys</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:19:17.000100</ts>
    <user>Melodee</user>
    <text>The weird part is that if I call `hash-keys` or `hash-&amp;gt;list`, the keys show up in the produced lists</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:19:36.000100</ts>
    <user>Melodee</user>
    <text>So I think the keys are in the hash table, they just aren't being looked up properly</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:20:05.000100</ts>
    <user>Melodee</user>
    <text>I've tried to minimize this example to get a more manageable way to figure out this bug, but I'm also having problems with that</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:20:57.000100</ts>
    <user>Melodee</user>
    <text>I've tried just removing definitions that aren't needed for the example from my file, and I've gotten to the point where if I remove a definition that is unused anywhere else in *any* files, the `hash-ref` starts working</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:21:20.000100</ts>
    <user>Melodee</user>
    <text>`hash-ref` also starts working if I move all the definitions that are important to a new file and just call it from there</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:21:46.000100</ts>
    <user>Melodee</user>
    <text>Like I said, I'm trying minimize my example, but I'm completely at a loss for how to approach this now</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:21:50.000100</ts>
    <user>Melodee</user>
    <text>Any ideas?</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:22:54.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Melodee&gt; can you post the code? that's almost certainly a bug</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:23:41.000100</ts>
    <user>Melodee</user>
    <text>I can, but it's part of a several-thousand line project that I haven't been able to make any smaller</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:26:54.000100</ts>
    <user>Monserrate</user>
    <text>I would report a bug on the `racket/racket` repository with reproduction instructions using your project</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T14:27:23.000100</ts>
    <user>Melodee</user>
    <text>Ok, thanks. I'll do that now</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T15:09:42.000200</ts>
    <user>Melodee</user>
    <text>Ok, just posted the bug on `racket/racket`, let me know if there's anything else I can do to help track down this bug</text>
  </message>
  <message conversation_id="790">
    <ts>2018-09-12T15:15:43.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Melodee&gt; thanks, that was easy to reproduce at least</text>
  </message>
  <message conversation_id="791">
    <ts>2018-09-12T16:37:45.000100</ts>
    <user>Alesha</user>
    <text>what's the correct incantation to trigger verbose reporting of `raco pkg install`'s activity? I tried obvious possibilities such as `-v` `-vv` `--verbose`. Reading pkg source code I see there are `log-pk-*` functions so I tried setting `PLTSTDOUT=debug@pkg` to no avail.</text>
  </message>
  <message conversation_id="791">
    <ts>2018-09-12T19:59:23.000100</ts>
    <user>Lynna</user>
    <text>`PLTSTDOUT=debug@pkg` should have worked, although I recommend `PLTSTDOUT="debug@pkg error"` so you don’t lose error output. What `raco pkg` command were you trying? Maybe there’s just not much logging currently in place.</text>
  </message>
  <message conversation_id="792">
    <ts>2018-09-12T20:21:22.000100</ts>
    <user>Alesha</user>
    <text>I was trying `raco pkg install` I wanted to see if I could get more information on how that command made its decisions about content types of packages. I created a local directory catalog of a set of ‘binary-lib packages created using `raco pkg create` but trying to install using that catalog with `—binary-lib` option fails with a package content type not compatible with requested conversion error (or something along those lines, paraphrasing from memory) so was hoping logging could tell me more information. When I checked the relevant package’s info.rkt I see it has a field, I think `pkg-content-type` set to ‘binary-lib. 

I stopped work for the day but plan to investigate more deeply tomorrow using the available documented API in the `pkg` collection.</text>
  </message>
  <message conversation_id="791">
    <ts>2018-09-13T09:21:07.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; I wonder if there's a bug in the embedding process somewhere. I integrated your suggestions and compile time selection of backend into my system and `create-embedding-executable` successfully finished but when I try to execute it: `read: bad syntax #&amp;lt;`</text>
  </message>
  <message conversation_id="791">
    <ts>2018-09-13T09:21:36.000100</ts>
    <user>Andreas</user>
    <text>If nothing comes to mind in the meantime, I will try to reproduce the process in the example I sent to the mailing list.</text>
  </message>
  <message conversation_id="791">
    <ts>2018-09-13T09:27:45.000100</ts>
    <user>Andreas</user>
    <text>... and `raco exe ... ` fails as well. This might be related to the use of `define-runtime-module-path-index`.</text>
  </message>
  <message conversation_id="791">
    <ts>2018-09-13T14:01:28.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I would really like to add tests for this PR: &lt;https://github.com/racket/racket/pull/2234&gt; But I’d really like to use `syntax/strip-context` in that test code, which isn’t available in `syntax.rktl`. Is it worth moving the test somewhere in `racket-test` instead of `racket-test-core`, or should I just reimplement `strip-context` inside `syntax.rktl`?</text>
  </message>
  <message conversation_id="791">
    <ts>2018-09-13T14:06:50.000100</ts>
    <user>Lynna</user>
    <text>Adding `(require syntax/strip-context)` to “syntax.rktl” should be fine.</text>
  </message>
  <message conversation_id="793">
    <ts>2018-09-13T14:07:10.000100</ts>
    <user>Carlyn</user>
    <text>Should I just put it at the top of that file?</text>
  </message>
  <message conversation_id="793">
    <ts>2018-09-13T14:07:18.000100</ts>
    <user>Lynna</user>
    <text>Yes, that;’s what I would do</text>
  </message>
  <message conversation_id="793">
    <ts>2018-09-13T14:07:47.000100</ts>
    <user>Carlyn</user>
    <text>Okay, thanks. I’ll update the PR shortly.</text>
  </message>
  <message conversation_id="793">
    <ts>2018-09-13T14:09:17.000100</ts>
    <user>Lynna</user>
    <text>My guess is that come path is going where a string is intended, so that the `#&amp;lt;` is starting `#&amp;lt;path:`. But I’m not sure where the path would have come from.</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-13T15:42:48.000100</ts>
    <user>Alesha</user>
    <text>I traced my issue to a problem in the way the local catalog directory `file://` url is handled in `pkg/private/stage.rkt`. When a package is resolved against the catalog, the initial catalog `file://` url is extended with the package's relative path and then converted to an absolute `file://` url which is passed directly to `check-strip-compatible` function which isn't equipped to cope with file urls. It expects to be given filesystem paths so when given the package `file://` url it misinterprets it as a filesystem path which doesn't exist leading to the default fallback code path being executed which results in erroring out with the package content state incompatible error.

The fix is to make sure `file://` urls are actually converted to paths first. In fact in the relevant `stage.rkt` code section I see that conversion is already being done in `(define pkg-path ...`) but it's not passed along to the `check-strip-compatible` function. When that's corrected, `raco pkg install` works as expected.

I can open a P.R. with the fix and also include a regression test case if that's fine with you.</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-13T15:43:06.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt;</text>
  </message>
  <message conversation_id="793">
    <ts>2018-09-13T16:13:39.000100</ts>
    <user>Lynna</user>
    <text>That sounds great. Thanks for tracking down the problem!</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-13T16:23:46.000100</ts>
    <user>Alesha</user>
    <text>I'm looking through `racket-test/tests/pkg` test files, what would be the best location to put the test in? I'm not seeing tests dealing with usage of local catalog directory and various combinations of package strip modes. Maybe worth adding a new test file dealing with those cases?</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-13T16:24:35.000100</ts>
    <user>Alesha</user>
    <text>Though I haven't yet looked through every file so I may haven't found the right place</text>
  </message>
  <message conversation_id="793">
    <ts>2018-09-13T19:24:07.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt;: &lt;@Gaynell&gt; and I noticed that cross phase modules don’t seem to work across module registries like the documentation says. Here is an example, and we were wondering if we were missing something obvious:
&lt;https://gist.github.com/LeifAndersen/ecd749b25bdba5c59441c4dd4fa2091b&gt;</text>
  </message>
  <message conversation_id="793">
    <ts>2018-09-13T19:24:08.000100</ts>
    <user>Odis</user>
    <text>None</text>
  </message>
  <message conversation_id="793">
    <ts>2018-09-13T23:28:21.000100</ts>
    <user>Lynna</user>
    <text>The docs are wrong/unclear. When you attach a module declaration from one namespace to another (that has a different registry), then the instance is shared, too. But there’s no global registry of cross-phase persistent modules.</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T03:06:56.000100</ts>
    <user>Andreas</user>
    <text>I can reproduce it with a small-ish example. This looks like a bug - will open an issue on github.</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T03:26:18.000100</ts>
    <user>Andreas</user>
    <text>I have opened #2269 : &lt;https://github.com/racket/racket/issues/2269&gt;</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T03:38:57.000100</ts>
    <user>Andreas</user>
    <text>Does anybody know if Carl Eastlund from mischief hangs around here? It seems that mischief stopped working on racket HEAD since it started providing `stream-take` which clashes with mischief `stream-take`.</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T08:58:45.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; he's not on slack, I would either email or report a github issue</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T08:59:24.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; thanks, I did report an issue but I got no response. I will wait longer. Maybe he's on hols.</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T08:59:57.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; he no longer works on racket (he's at Jane Street) so an email might be necessary</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T09:00:30.000100</ts>
    <user>Andreas</user>
    <text>Will send him an email then. Thanks.</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T09:52:13.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; not sure I understood your comment, do you want me to create a PR based for qemu testing on azure or travis? currently I have some work for this on travis but feels a waste of my time to continue if are moving the CI to azure.</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T09:52:50.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; as I think I've said, we're not "moving" the CI</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T09:53:13.000100</ts>
    <user>Monserrate</user>
    <text>I created that PR to explore adding an additional CI, which I'm particularly interested in for Windows</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T09:53:46.000100</ts>
    <user>Monserrate</user>
    <text>because AppVeyor is slow enough that we can't run lots of the tests</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T09:53:53.000100</ts>
    <user>Andreas</user>
    <text>ah... got it. So you would keep the current tests on travis and use azure for windows?</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T09:53:55.000200</ts>
    <user>Andreas</user>
    <text>makes sense.</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T09:54:10.000200</ts>
    <user>Monserrate</user>
    <text>but if there's something that would benefit from Azure on linux then obviously that would be worthwhile too</text>
  </message>
  <message conversation_id="794">
    <ts>2018-09-14T09:54:25.000100</ts>
    <user>Andreas</user>
    <text>ok, let me look into migrating my work from travis to azure then.  I will then open a pr.</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:07:00.000100</ts>
    <user>Odis</user>
    <text>Ah, okay, that makes sense. Thanks.</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:14:01.000200</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Do you think it would make sense to make `racket/private/serialize-structs` be a cross phase module?</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:14:31.000100</ts>
    <user>Odis</user>
    <text>(That way the serializable struct property lasts across phases.</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:16:31.000100</ts>
    <user>Monserrate</user>
    <text>you'd have to manually write all that code in '#%kernel</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:17:00.000100</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Ya, &lt;@Gaynell&gt; and I did that. =</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:22:30.000100</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; The code for it is actually not that complex, and mostly just requires you do most of the `define-struct` stuff yourself: &lt;https://gist.github.com/LeifAndersen/51aab9801caa5cf76542e32b7b958566&gt;</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:22:31.000100</ts>
    <user>Odis</user>
    <text>None</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:22:59.000100</ts>
    <user>Monserrate</user>
    <text>note that that misses the static struct info (I don't know if that's used though)</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:23:07.000100</ts>
    <user>Odis</user>
    <text>You are correct.</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:23:21.000100</ts>
    <user>Odis</user>
    <text>However, it is not used in the racket/serialize library.</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:23:32.000100</ts>
    <user>Odis</user>
    <text>And `raco setup` works fine without it.</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:23:44.000100</ts>
    <user>Odis</user>
    <text>(As well as other programs I have that make heavy use of serialize.)</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:24:06.000100</ts>
    <user>Odis</user>
    <text>It does mean though that the racket library couldn’t, say, make a `serialize` struct match expander.</text>
  </message>
  <message conversation_id="795">
    <ts>2018-09-14T14:31:02.000100</ts>
    <user>Lynna</user>
    <text>Sounds ok</text>
  </message>
  <message conversation_id="796">
    <ts>2018-09-14T19:04:01.000100</ts>
    <user>Rosette</user>
    <text>I was hoping to get some help figuring out why I haven't been able to trigger an `on-event` callback for my `image-snip%`. I'm probably missing something simple, but when I drag the snip, "on-event" isn't printed and the snip still drags behind others. Does anyone know the right pattern for snip events?</text>
  </message>
  <message conversation_id="796">
    <ts>2018-09-14T19:16:05.000100</ts>
    <user>Shalon</user>
    <text>&lt;@Rosette&gt;, the way you call set-flags removes all existing flags from the snip.  You need to do something like:</text>
  </message>
  <message conversation_id="796">
    <ts>2018-09-14T19:16:24.000100</ts>
    <user>Shalon</user>
    <text>None</text>
  </message>
  <message conversation_id="796">
    <ts>2018-09-14T19:22:13.000200</ts>
    <user>Rosette</user>
    <text>&lt;@Shalon&gt; thanks. it's printing the message now. getting those flags right is tricky. i'll keep working on it</text>
  </message>
  <message conversation_id="796">
    <ts>2018-09-14T19:24:06.000100</ts>
    <user>Shalon</user>
    <text>You will find that with all these flags, your snip will handle more events that you need, and the editor will miss out on some events.  You can fix that by passing back to the editor all events that you don't handle.</text>
  </message>
  <message conversation_id="797">
    <ts>2018-09-16T11:27:11.000100</ts>
    <user>Ola</user>
    <text>&lt;@Franklin&gt; is racket-cas in the package directory? I can’t find it</text>
  </message>
  <message conversation_id="797">
    <ts>2018-09-16T14:13:57.000100</ts>
    <user>Franklin</user>
    <text>&lt;@Ola&gt;  no, it’s only on Github </text>
  </message>
  <message conversation_id="797">
    <ts>2018-09-16T20:42:32.000100</ts>
    <user>Ola</user>
    <text>thanks</text>
  </message>
  <message conversation_id="797">
    <ts>2018-09-16T20:42:39.000100</ts>
    <user>Ola</user>
    <text>what is missing for it to become a package?</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T09:45:28.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; is there a reason you don't merge commits in a way that shows up as a merge on github?</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T11:20:27.000100</ts>
    <user>Helena</user>
    <text>&lt;@Monserrate&gt; I'm not sure what you mean. (1) I want to avoid merge commits (2) I prefer pulling the commit onto my master and testing a little instead of clicking the "squash and merge" button"</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T11:23:59.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Helena&gt; If you rebase your local branch, then force push to update the remote branch before pushing the commit to master, then GH will mark the PR as merged automatically.</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T11:24:58.000100</ts>
    <user>Helena</user>
    <text>should I always do that? its hard to do if the remote branch isn't mine</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T11:26:01.000100</ts>
    <user>Carlyn</user>
    <text>You can often push to the remote branch even if it isn’t yours, because by default GH grants push access to a branch used to submit a PR.</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T11:26:36.000100</ts>
    <user>Carlyn</user>
    <text>(This is a little-known feature, and my guess is that many contributors don’t actually know they’ve done this, but it’s what the “Allow edits from maintainers” checkbox means in the PR sidebar.)</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T11:34:05.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Helena&gt; I think "do testing locally and then click the button" seems like a reasonable approach</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T11:34:21.000200</ts>
    <user>Helena</user>
    <text>ok</text>
  </message>
  <message conversation_id="799">
    <ts>2018-09-17T11:53:19.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; In case you aren’t aware of it: &lt;https://github.com/racket/pict/issues/42&gt;</text>
  </message>
  <message conversation_id="799">
    <ts>2018-09-17T11:53:59.000100</ts>
    <user>Odis</user>
    <text>It looks like its related to us updating cairo/pango, but when using pdf-dc% directly the issue goes away.</text>
  </message>
  <message conversation_id="800">
    <ts>2018-09-17T13:25:22.000100</ts>
    <user>Franklin</user>
    <text>Nothing much. Documentation mostly.</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T13:45:41.000100</ts>
    <user>Lynna</user>
    <text>Thanks - I’ve seen. I’m just several tasks away from being able to do anything about it right now.</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T13:46:24.000100</ts>
    <user>Ola</user>
    <text>right</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T13:46:33.000100</ts>
    <user>Ola</user>
    <text>I’ll see if I can contribute</text>
  </message>
  <message conversation_id="798">
    <ts>2018-09-17T13:46:43.000100</ts>
    <user>Franklin</user>
    <text>that would be great</text>
  </message>
  <message conversation_id="801">
    <ts>2018-09-17T18:01:18.000100</ts>
    <user>Claud</user>
    <text>I've renamed a Scribble file documenting a package, and now I'm getting warnings from `raco setup` of the form: "WARNING: duplicate tag: [some tag] in: &amp;lt;unknown&amp;gt; in: [the document I just renamed]". Is there a cache somewhere that I need to delete? I'm already using the `--doc-index` flag for `raco setup`.</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T19:54:49.000100</ts>
    <user>Ayanna</user>
    <text>I'm using `raco setup` on a local collection and it's ignoring a `.scrbl` file I have in the collection. How can I get it to pick it up and generate the docs?</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T19:55:49.000100</ts>
    <user>Ayanna</user>
    <text>i'm guessing i just need some reality check</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T19:55:52.000100</ts>
    <user>Claud</user>
    <text>&lt;@Ayanna&gt; Have you listed the file under the `scribblings` key in an `info.rkt` file?</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T19:55:57.000200</ts>
    <user>Ayanna</user>
    <text>yes</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T19:57:04.000100</ts>
    <user>Claud</user>
    <text>Also, is this a multi-collection package? (That's a problem someone else had.)</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T19:57:28.000100</ts>
    <user>Ayanna</user>
    <text>no... it's pretty simple</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T19:57:50.000100</ts>
    <user>Ayanna</user>
    <text>my info.rkt:  &lt;https://github.com/WSStudios/fracas/blob/master/lib/fracas/info.rkt&gt;</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T20:00:28.000100</ts>
    <user>Claud</user>
    <text>That looks right. Something else you might check is if the package is installed in user-specific or installation-wide scope: if it is user-specific, it won't show up on the installation-wide listing. (That has thrown me off sometimes.) You could also try adding the `--doc-index` flag to `raco setup`.</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T20:00:55.000100</ts>
    <user>Ayanna</user>
    <text>hmm it's not installed at all, that's probably it</text>
  </message>
  <message conversation_id="802">
    <ts>2018-09-17T20:04:08.000100</ts>
    <user>Ayanna</user>
    <text>yeah that was it</text>
  </message>
  <message conversation_id="803">
    <ts>2018-09-18T02:52:57.000100</ts>
    <user>Andreas</user>
    <text>Is anybody aware of an exporter of rackunit test results as a JUnit compatible XML file?</text>
  </message>
  <message conversation_id="803">
    <ts>2018-09-18T06:33:04.000100</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; no, and unfortunately I remember looking into this and failing to find docs on what the junit xml format actually is</text>
  </message>
  <message conversation_id="803">
    <ts>2018-09-18T11:21:26.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; argh, true, it doesn't seem to be an 'obvious' standard. Will take a look.</text>
  </message>
  <message conversation_id="804">
    <ts>2018-09-18T22:08:16.000100</ts>
    <user>Rosette</user>
    <text>i'm having trouble figuring out the best way to organize dragging several image snips over a background image. i have a pasteboard and my image snips, but what should my background image be? as an image-snip the background is also dragable, which i don't want. is there a way to set a background image somewhere in the frame% &amp;gt; editor-canvas% &amp;gt; pasteboard% &amp;gt; image-snip% stack? should the background image be something like a bitmap-dc%? how would that compose with an editor-canvas%?</text>
  </message>
  <message conversation_id="805">
    <ts>2018-09-19T05:08:51.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; hi, i just noticed your vector-struct package. Was there a specific reason for deprecating it? Are there alternatives out there for lighter structs?</text>
  </message>
  <message conversation_id="804">
    <ts>2018-09-19T08:29:12.000100</ts>
    <user>Shalon</user>
    <text>hi &lt;@Rosette&gt;, you can override the `on-paint` method of the `pasteboard%` class and draw the background image when the `before?` flag is `#t`.  You can actually do quite complex things with pasteboard% objects: For example, I implemented a prototype where the background of the `pasteboard%` is a map which can be panned around with the mouse and there are snips which can be dragged over the map when the control key is pressed.</text>
  </message>
  <message conversation_id="805">
    <ts>2018-09-19T09:51:13.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; I am having issues with using the result of `define-runtime-module-path-index` with `dynamic-place`. I have `(define-runtime-module-path-index mod-bootup 's10/place-bootup)` which I then use with `(dynamic-place mod-bootup 'place-bootup)` however, I get from racket:
```
dynamic-place: contract violation
  expected: (or/c module-path? path?)
  given: #&amp;lt;module-path-index:'#%embedded:g29862:place-bootup&amp;gt;
```
is this a bug in `dynamic-place` or am i missing something?</text>
  </message>
  <message conversation_id="805">
    <ts>2018-09-19T10:48:16.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Andreas&gt; Structs got faster. On modern Rackets, I didn’t detect any meaningful performance difference between vectors and structs.</text>
  </message>
  <message conversation_id="805">
    <ts>2018-09-19T10:50:02.000100</ts>
    <user>Andreas</user>
    <text>Oh OK. Thanks. </text>
  </message>
  <message conversation_id="806">
    <ts>2018-09-19T11:29:15.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Carlyn&gt; That's interesting, do you know roughly what Racket versions?</text>
  </message>
  <message conversation_id="806">
    <ts>2018-09-19T11:31:34.000100</ts>
    <user>Carlyn</user>
    <text>I don’t remember exactly, I’m afraid.</text>
  </message>
  <message conversation_id="806">
    <ts>2018-09-19T11:31:51.000100</ts>
    <user>Carlyn</user>
    <text>It was a while ago, though, somewhere in the single-digit 6.x line IIRC.</text>
  </message>
  <message conversation_id="806">
    <ts>2018-09-19T11:38:57.000100</ts>
    <user>Bertha</user>
    <text>That's helpful, thanks.</text>
  </message>
  <message conversation_id="806">
    <ts>2018-09-19T11:45:59.000100</ts>
    <user>Lynna</user>
    <text>`dynamic-place` currently really does require a `module-path?` or a `path?`; no doubt it can be updated to take a module path index, but maybe using `collapse-module-path-index` is the right thing for now</text>
  </message>
  <message conversation_id="807">
    <ts>2018-09-19T15:51:38.000100</ts>
    <user>Andreas</user>
    <text>thanks, I clearly did not know about `collapse-module-path-index`. Still, it doesn't sound like a bad idea for `dynamic-place` to do this - it would be interesting to get `dynamic-place` and `dynamic-require` to accept the same type of arguments.</text>
  </message>
  <message conversation_id="806">
    <ts>2018-09-19T17:12:21.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; What could possibly cause DrRacket to produce “instantiate-linklet: mismatch; reference to a variable that has the wrong procedure or structure-type shape; possibly, bytecode file needs re-compile because dependencies changed” when “Populated ‘compiled’ directories” is *unchecked* and running the test from the command-line doesn’t produce the same error? Simply closing and reopening the file in DrRacket seems to make the error go away.</text>
  </message>
  <message conversation_id="807">
    <ts>2018-09-19T17:15:12.000100</ts>
    <user>Eileen</user>
    <text>Dunno</text>
  </message>
  <message conversation_id="807">
    <ts>2018-09-19T17:15:17.000100</ts>
    <user>Eileen</user>
    <text>A bug?</text>
  </message>
  <message conversation_id="807">
    <ts>2018-09-19T17:16:18.000100</ts>
    <user>Carlyn</user>
    <text>Okay. :)</text>
  </message>
  <message conversation_id="808">
    <ts>2018-09-19T18:17:01.000100</ts>
    <user>Claud</user>
    <text>I have somehow gotten DrRacket into a state where every time I do c. 20 seconds worth of editing, it pops up an internal error dialog about attempting to re-declare `racket/private/stx` (full message below). I certainly have no idea if I can reproduce this—I'm about to try restarting DrRacket and hope it goes away—but I thought I'd post just in case this is enough to make the problem obvious to someone.
```
module: cannot redeclare cross-phase persistent module
  module name: #&amp;lt;resolved-module-path:"/Applications/Racket v7.0/collects/racket/private/stx.rkt"&amp;gt;
  context...:
   declare-module!58
   declare-this-module
   standard-module-name-resolver
   namespace-module-instantiate!96
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   ...
```</text>
  </message>
  <message conversation_id="809">
    <ts>2018-09-20T07:28:44.000100</ts>
    <user>Andreas</user>
    <text>As a followup to this I opened issue 2278 because of a difference between `dynamic-place` behaviour when ran through racket and when embedded.
&lt;https://github.com/racket/racket/issues/2278&gt;</text>
  </message>
  <message conversation_id="809">
    <ts>2018-09-20T07:29:13.000100</ts>
    <user>Andreas</user>
    <text>Do you know of a workaround for this? I am walking towards a deadline for a delivery and would be great if I can jump this hurdle.</text>
  </message>
  <message conversation_id="808">
    <ts>2018-09-20T08:59:09.000100</ts>
    <user>Lynna</user>
    <text>I don’t support you’re building your own Racket build? In that case, you could hack around this limitation by making `is_predefined_module_path` in “place.c” always return 1.</text>
  </message>
  <message conversation_id="808">
    <ts>2018-09-20T09:00:24.000100</ts>
    <user>Lynna</user>
    <text>Otherwise, the only idea I have is to shift everything to collection-based paths. That is, instead of using a `file` relative path in `define-module-path-index`, use a path that refers to the module through a collection name.</text>
  </message>
  <message conversation_id="808">
    <ts>2018-09-20T09:00:42.000100</ts>
    <user>Lynna</user>
    <text>I might be able to look into the problems and potential improvements in another day or two.</text>
  </message>
  <message conversation_id="810">
    <ts>2018-09-20T12:21:07.000100</ts>
    <user>Claud</user>
    <text>Does anyone have experience with a (free-as-in-beer) CI for Racket packages that includes Windows builds? (e.g. AppVeyor, Azure Pipelines, maybe Bitbucket pipelines) I've used Travis a bit via &lt;@Bertha&gt;'s great template, but, especially since I am really not a Windows person, I would love to set up similar testing to check for Windows-specific issues.</text>
  </message>
  <message conversation_id="810">
    <ts>2018-09-20T12:26:52.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Claud&gt; I wrote the AppVeyor code, so I can maybe answer questions about that</text>
  </message>
  <message conversation_id="810">
    <ts>2018-09-20T12:31:48.000100</ts>
    <user>Claud</user>
    <text>&lt;@Monserrate&gt; Do you mean the one for Racket itself? I've seen that, and the fact that it is basically understandable gives me hope that this is in reach. The part I'm least sure of it that I believe &lt;https://github.com/racket/racket/blob/master/appveyor.yml&gt; compiles Racket from scratch, whereas I assume it would be better for a package to do something more like &lt;https://github.com/greghendershott/travis-racket/blob/master/install-racket.sh&gt; and install a pre-built Racket—but I'm not really clear how you would do that on Windows.</text>
  </message>
  <message conversation_id="810">
    <ts>2018-09-20T12:32:46.000100</ts>
    <user>Monserrate</user>
    <text>yes, that's right, and I agree that you need to run the installer from the command line, and unfortunately I don't have any more knowledge offhand of how to do that</text>
  </message>
  <message conversation_id="810">
    <ts>2018-09-20T14:25:16.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Monserrate&gt; &lt;@Claud&gt; there are builds of "Minimal Racket" on Windows packaged as tarballs instead of installers; just unpack and run. They're available for the release versions (click the "More Variants and Checksums" link) and from the Utah nightly builds.</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:08:12.000100</ts>
    <user>Trey</user>
    <text>What are good ways to diagnose slow startup time for Racket projects? Herbie takes ~12s to start up on my machine, which seems far too slow.</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:08:42.000100</ts>
    <user>Trey</user>
    <text>(Plus, in the REPL with xrepl, it sometimes seems to loop forever instead of loading a module at all, which ideally I'd also like to fix.)</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:23:33.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Trey&gt; Is that with everything pre-compiled to zo files?</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:23:41.000100</ts>
    <user>Trey</user>
    <text>No, without pre-compilatino</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:23:53.000100</ts>
    <user>Trey</user>
    <text>It is faster, of course, with pre-compilation, but still slow</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:24:01.000100</ts>
    <user>Monserrate</user>
    <text>Then I would just say "run raco make first"</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:24:20.000100</ts>
    <user>Trey</user>
    <text>On a personal level, pre-compilation is a pain because it makes developing on multiple machines difficult (different Racket versions)</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:24:34.000200</ts>
    <user>Trey</user>
    <text>So far I have preferred waiting out the startup time than pre-compiling</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:24:50.000100</ts>
    <user>Monserrate</user>
    <text>as in you have a shared home directory and multiple racket installs?</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:24:55.000100</ts>
    <user>Trey</user>
    <text>Yes</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:25:05.000200</ts>
    <user>Trey</user>
    <text>It also makes Geiser in Emacs unhappy for reasons I do not understand...</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:25:16.000100</ts>
    <user>Monserrate</user>
    <text>this may not seem like the most helpful answer, but I would just not do that</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:25:57.000100</ts>
    <user>Monserrate</user>
    <text>but in terms of profiling, here are two ideas:</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:26:22.000100</ts>
    <user>Monserrate</user>
    <text>1. to profile macro expansion, do `(profile (dynamic-require "herbie.rkt" #f))`</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:26:32.000100</ts>
    <user>Trey</user>
    <text>Good idea!</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:27:30.000100</ts>
    <user>Monserrate</user>
    <text>2. to measure startup time after compilation you can do the same thing</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:27:49.000100</ts>
    <user>Monserrate</user>
    <text>but that won't help that much if most of the time is spent actually loading code</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:28:07.000100</ts>
    <user>Monserrate</user>
    <text>in that case, I'd roughly add logging in each file so you see when it's run</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:28:12.000200</ts>
    <user>Monserrate</user>
    <text>and at what timestamp</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:28:19.000100</ts>
    <user>Trey</user>
    <text>(For reference, startup with compiled everything is ~10× faster)</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:32:25.000100</ts>
    <user>Trey</user>
    <text>For #1, I do get a profile, is there anything in particular in it I should be looking for?</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:32:48.000100</ts>
    <user>Trey</user>
    <text>I don't see anything that I recognize as my code with more than 1% of runtime spent there...</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:34:04.000100</ts>
    <user>Carlyn</user>
    <text>Re: a shared home directory with multiple Racket installs, if you set `PLTCOMPILEDROOTS` to `compiled/@(version):`, then Racket will store bytecode for different versions of Racket in separate directories, which allows them to coexist.</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:34:23.000100</ts>
    <user>Trey</user>
    <text>Huh</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:34:24.000100</ts>
    <user>Carlyn</user>
    <text>I’m not entirely clear why this isn’t the default.</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:34:52.000100</ts>
    <user>Trey</user>
    <text>I suppose a slight tweak can also make those directories hidden</text>
  </message>
  <message conversation_id="812">
    <ts>2018-09-20T15:54:28.000100</ts>
    <user>Bertha</user>
    <text>Oh wow I never knew that.
Now I'm curious, may the value of `PLTCOMPILEDROOTS`  be any valid at-expression, or just this special syntax?
Are there other env vars like this?</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T15:58:10.000100</ts>
    <user>Carlyn</user>
    <text>It’s special syntax. It’s documented here: &lt;http://docs.racket-lang.org/reference/eval.html#%28idx._%28gentag._246._%28lib._scribblings%2Freference%2Freference..scrbl%29%29%29&gt;</text>
  </message>
  <message conversation_id="812">
    <ts>2018-09-20T16:00:11.000100</ts>
    <user>Bertha</user>
    <text>Thanks! I did actually rtfm after I typed that. :slightly_smiling_face: I guess I was also jumping ahead to wondering if a little wrapper around `getenv` that handled at-expressions would be a clever or terrible idea for some things I'm doing.</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:06:44.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Trey&gt; can you paste the profile output?</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:07:12.000100</ts>
    <user>Trey</user>
    <text>None</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:14:39.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Trey&gt; is that with or without precompilaiton?</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:14:49.000100</ts>
    <user>Trey</user>
    <text>Without</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:23:07.000200</ts>
    <user>Monserrate</user>
    <text>that mostly just looks like general macro expansion</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:23:33.000200</ts>
    <user>Monserrate</user>
    <text>does herbie have any macros that take a long time or do a lot of work?</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:24:09.000100</ts>
    <user>Trey</user>
    <text>We barely use macros, and I think all of ours are define-syntax-rule, so don't do significant computation</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:25:44.000100</ts>
    <user>Monserrate</user>
    <text>ok so then it's pretty surprising that it takes so long to compile</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:26:08.000100</ts>
    <user>Trey</user>
    <text>&lt;@Monserrate&gt; Inspired by your second suggestion, I've also made a little file that dynamic-requires every Herbie file, in dependency order, and records how long that takes. It seems to be pretty flat, though the `racket` and `math/flonum` libraries also take a significant time.</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:26:56.000200</ts>
    <user>Trey</user>
    <text>If I pre-compile, then it's only a few libraries that take time, the two above being the major ones</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:28:09.000100</ts>
    <user>Monserrate</user>
    <text>loading `racket` should be very fast</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:28:13.000100</ts>
    <user>Monserrate</user>
    <text>so that surprises me</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:30:30.000100</ts>
    <user>Trey</user>
    <text>~400ms</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:32:03.000100</ts>
    <user>Trey</user>
    <text>More precisely, executing the following:</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:32:06.000100</ts>
    <user>Trey</user>
    <text>```#lang racket/base

(define t (current-inexact-milliseconds))
(dynamic-require 'racket #f)
(display (number-&amp;gt;string (- (current-inexact-milliseconds) t)))
(newline)
```</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:32:37.000100</ts>
    <user>Trey</user>
    <text>Outputs a 200–400ms</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:33:21.000100</ts>
    <user>Monserrate</user>
    <text>so for me `time r -l math/flonum -l racket -e 1` is consistently about 1.2 sec</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:34:24.000100</ts>
    <user>Trey</user>
    <text>Yeah, that's about right for me as well</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:34:37.000100</ts>
    <user>Trey</user>
    <text>That explains the ~1.5s startup time with Herbie precompiled, then</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:43:04.000100</ts>
    <user>Monserrate</user>
    <text>do you need full `racket`, as compared to `racket/base` + some specific libraries?</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:43:40.000100</ts>
    <user>Trey</user>
    <text>A few years back I did try to convert to racket/base, but I found that we use a pretty significant chunk of it</text>
  </message>
  <message conversation_id="811">
    <ts>2018-09-20T16:51:57.000100</ts>
    <user>Trey</user>
    <text>I should also note that some of the more expensive libraries we use (like plot and web stuff) is hidden behind a lazy-require, so isn't part of these numbers, but substantially slows down startup if invoked</text>
  </message>
  <message conversation_id="813">
    <ts>2018-09-20T16:52:37.000100</ts>
    <user>Aimee</user>
    <text>In `scribble/base`, is it safe to `(require (only-in scribble/manual codeblock)`?</text>
  </message>
  <message conversation_id="814">
    <ts>2018-09-20T16:56:04.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Lynna&gt; hi again, while I was developing the test cases for the above issue, I noticed other problems I thought I should bring to your attention, though I think best to email you instead. Ok to use your &lt;http://utah.edu|utah.edu&gt; address or is there another email address you prefer me to use instead?</text>
  </message>
  <message conversation_id="814">
    <ts>2018-09-20T16:57:05.000100</ts>
    <user>Lynna</user>
    <text>That’s the best address</text>
  </message>
  <message conversation_id="814">
    <ts>2018-09-20T16:58:32.000100</ts>
    <user>Alesha</user>
    <text>ok</text>
  </message>
  <message conversation_id="815">
    <ts>2018-09-20T19:49:53.000100</ts>
    <user>Omega</user>
    <text>Racket could use more mentors and maintainers at &lt;http://exercism.io|exercism.io&gt;. For anyone who isn’t familiar, Exercism has small programming exercises with a focus on incremental improvement through community feedback.

Since the newest version of the site recently launched there’s a core sequence of several exercises which, at least starting out, require feedback from a language-specific mentor to progress. I and perhaps many others are currently blocked on the core track. Efforts like this could help people ramp up with Racket more productively and reinforce idioms. If there are alternative ways for hobbyists to get this sort of feedback outside the classroom setting I’d love to hear about it. After using Racket more and hopefully getting feedback on my code I will consider becoming a mentor on Exercism.

Relevant links:
- &lt;https://exercism.io/about&gt;
- &lt;https://exercism.io/tracks/racket&gt;
- &lt;http://mentoring.exercism.io&gt;
- &lt;https://exercism.io/become-a-maintainer&gt;</text>
  </message>
  <message conversation_id="815">
    <ts>2018-09-20T21:11:36.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Omega&gt; Is the relaunch related to Exercism becoming part of the "portfolio" of Thalumus? &lt;https://thalamus.ai/portfolio&gt;
The other companies seem to be teaming up with "experts" to do "AI".  Exercism seems different... or is it?</text>
  </message>
  <message conversation_id="815">
    <ts>2018-09-20T21:23:15.000100</ts>
    <user>Omega</user>
    <text>Good question, &lt;@Bertha&gt;. This is the first I’ve heard of Thalamus.

Concrete motivations and design decisions for the new version of the site are described at &lt;https://exercism.io/about-v1-to-v2&gt;. It provides more context on the mentor situation as well. In v1 everyone could mentor on any exercises for which they already submitted a solution, but now they’re ensuring core track feedback comes from those who explicitly want to mentor.</text>
  </message>
  <message conversation_id="815">
    <ts>2018-09-20T21:37:31.000100</ts>
    <user>Omega</user>
    <text>The Racket exercise repo is at &lt;https://github.com/exercism/racket&gt;</text>
  </message>
  <message conversation_id="814">
    <ts>2018-09-20T23:02:01.000100</ts>
    <user>Marnie</user>
    <text>&lt;@Trey&gt; For speeding up compile times across multiple machines, you can configure `raco pkg` to download precompiled bytecode from the package build server so you don't have to recompile packages you depend on, and you can skip installing build dependency packages entirely. See the `--binary` and `--binary-lib` flags to `raco pkg install`, as well as the Built-Package Catalog section of &lt;https://pkg-build.racket-lang.org/about.html&gt;</text>
  </message>
  <message conversation_id="814">
    <ts>2018-09-20T23:10:02.000100</ts>
    <user>Trey</user>
    <text>Thanks, &lt;@Marnie&gt;. By the way, will you be at RacketCon?</text>
  </message>
  <message conversation_id="814">
    <ts>2018-09-20T23:10:19.000100</ts>
    <user>Marnie</user>
    <text>yup!</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T09:50:30.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; if you're around and have 5 minutes to look at the coverity dashboard, can you please let me know?</text>
  </message>
  <message conversation_id="815">
    <ts>2018-09-21T09:53:12.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Omega&gt; &lt;@Bertha&gt; Interesting, I was not aware of exercism. I have registered as a mentor, but it's not clear what the next steps are.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:09:01.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; sure</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:09:28.000100</ts>
    <user>Andreas</user>
    <text>do you have 5 mins now?</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:11:33.000200</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:12:25.000200</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; great, the issue with the coverity scan needs to be sorted by someone with write permissions to the racket repo.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:12:33.000100</ts>
    <user>Monserrate</user>
    <text>oh ok</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:12:55.000100</ts>
    <user>Andreas</user>
    <text>So, if you could, register with coverity start a project and then you can add me as a member and I will take it from there.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:13:20.000100</ts>
    <user>Andreas</user>
    <text>&lt;https://scan.coverity.com/users/sign_up&gt;</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:13:44.000100</ts>
    <user>Andreas</user>
    <text>Then you can signup and after that in the dashboard, you can create a project _from GitHub_.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:13:53.000100</ts>
    <user>Monserrate</user>
    <text>I'm confused</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:14:02.000100</ts>
    <user>Monserrate</user>
    <text>do you have some existing Racket project that's not working?</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:14:05.000100</ts>
    <user>Monserrate</user>
    <text>can we fix that?</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:14:22.000100</ts>
    <user>Monserrate</user>
    <text>also, have you actually gotten useful scan results yet?</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:14:26.000100</ts>
    <user>Andreas</user>
    <text>So, I have created a project for my fork which is working - because I own it.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:14:40.000100</ts>
    <user>Andreas</user>
    <text>But you are not allowed to change the url of the project after project creation.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:15:38.000100</ts>
    <user>Andreas</user>
    <text>Then I created another one manually (not directly through the github integration page) for racket/racket because I didn't have write permissions.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:15:50.000100</ts>
    <user>Andreas</user>
    <text>Was just told I cannot integrate that one with Github because was created manually.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:16:15.000200</ts>
    <user>Andreas</user>
    <text>I have scan results for my fork. Shall I share that with you?</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:16:42.000100</ts>
    <user>Monserrate</user>
    <text>yes, i'd be interested</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:16:47.000100</ts>
    <user>Andreas</user>
    <text>That's, as I pointed out in the bug, one way to do it. I get my fork to track upstream, check the problems on my fork and create new issues upstream.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:17:21.000200</ts>
    <user>Andreas</user>
    <text>then we won't have all of this annoyance of regular merges upstream, etc. I can do it on my fork.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:17:31.000100</ts>
    <user>Monserrate</user>
    <text>I think if the scan results are already useful, then we should figure out how to do it automatically</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:17:44.000100</ts>
    <user>Monserrate</user>
    <text>If the scan results will take more work to become useful, we should fix that first</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:19:06.000100</ts>
    <user>Andreas</user>
    <text>I have added you as a member of `LinkiTools/racket`. You should be able to see the last results I ran.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:19:32.000100</ts>
    <user>Andreas</user>
    <text>This is the direct link: &lt;https://scan.coverity.com/projects/linkitools-racket/view_defects&gt;</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:20:28.000100</ts>
    <user>Andreas</user>
    <text>Here's an example:</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:20:47.000100</ts>
    <user>Andreas</user>
    <text>None</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:22:19.000200</ts>
    <user>Andreas</user>
    <text>That one looks interesting, maybe &lt;@Lynna&gt; can chime in as well on this.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:25:09.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; let me know what you prefer todo: keeping track of this through the fork, or trying to get this working upstream.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:30:54.000100</ts>
    <user>Lynna</user>
    <text>I believe that guard should indeed be `&amp;gt;= 31` instead of `&amp;gt; 31`.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T10:32:21.000100</ts>
    <user>Andreas</user>
    <text>That's a 1-0 score for coverity then. &amp;lt; &lt;@Monserrate&gt;</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T11:01:41.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; &lt;@Monserrate&gt; submitted #2281 &lt;https://github.com/racket/racket/pull/2281&gt;</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T11:32:47.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; my guess is that the best thing to do is go through the current failures -- that will provide more bang for the buck than the CI issues</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T11:35:44.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; Sure, I was skimming through it and there are quite a few issues that deserve a close inspection. I will transform them into github issues, prs or into the false positive mask files.</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T11:35:57.000100</ts>
    <user>Monserrate</user>
    <text>awesome! thanks a bunch for doing this</text>
  </message>
  <message conversation_id="816">
    <ts>2018-09-21T12:56:21.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; happy for you to close the pr if you want to leave it for the foreseeable future. </text>
  </message>
  <message conversation_id="817">
    <ts>2018-09-21T13:37:45.000100</ts>
    <user>Omega</user>
    <text>Awesome, thanks. Not having gone through the process I’m not completely sure. I get the impression there’s an approval process for mentors and once finalized you should expect to be listed on the Racket track page I linked earlier and perhaps receive more details from Exercism about next steps.</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-21T21:41:18.000100</ts>
    <user>Marnie</user>
    <text>Scribble docs searching question: how can I restrict the search to only module names? `H:`and `R:` work for `#lang` and `#reader` implementations, but `M:` shows both module names and bindings from that module. I don't want to see bindings, I just want module names.</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-22T00:02:56.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Marnie&gt; I think the statement “‘`M:`’ by itself will restrict results to module names only” is a documentation bug, it should say “‘`L:`’ by itself”.</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-22T00:03:33.000100</ts>
    <user>Marnie</user>
    <text>_gasp_bamboozled again!</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-22T00:03:43.000100</ts>
    <user>Marnie</user>
    <text>that worked</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-22T00:05:17.000100</ts>
    <user>Marnie</user>
    <text>so it seems I can get what I want by combining `L:` and `M:str`</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-22T00:06:07.000100</ts>
    <user>Marnie</user>
    <text>e.g. `L: M:typed` for tons of TR modules and some other stuff</text>
  </message>
  <message conversation_id="819">
    <ts>2018-09-22T15:19:18.000100</ts>
    <user>Rosette</user>
    <text>Is it possible to make refinement types in typed racket? Say I have a 500x500 pixel square, I want to define snap-to points every 5 pixels. I would like to be able to create a type that is a subtype of Integer instead of having my points be from the set of all integers (or even positive integers). Is it possible to define that a type is a subtype of positive integers and passes a certain predicate test like being divisible by 5 and less than 500?</text>
  </message>
  <message conversation_id="819">
    <ts>2018-09-22T16:58:12.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Rosette&gt; yes, see &lt;http://docs.racket-lang.org/ts-reference/Experimental_Features.html?q=Refine#%28part._.Logical_.Refinements_and_.Linear_.Integer_.Reasoning%29&gt;</text>
  </message>
  <message conversation_id="819">
    <ts>2018-09-22T16:59:21.000100</ts>
    <user>Rosette</user>
    <text>&lt;@Monserrate&gt; that's terrific. thank you so much for the link</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-23T08:41:00.000100</ts>
    <user>Franklin</user>
    <text>&lt;https://news.ycombinator.com/item?id=18047967&gt;</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-23T14:15:24.000100</ts>
    <user>Elanor</user>
    <text>&lt;@Franklin&gt; The depth and breadth of what the small group of core racketeers has produced is remarkable, and allows me to teach in ways that simply wouldn't be feasible otherwise. So I understand when my priorities aren't/can't be theirs, but my answer to your question of what to implement next has been filed as &lt;https://github.com/racket/gui/issues/113&gt; . The 2htdp/image saving and loading for transformed bitmaps is currently so slow, and the saved files so large, that essentially any image that a student has or finds is impossible to use. I've diagnosed three of the main reasons, with corresponding fixes, but without knowing what approaches are acceptable can't go any further in contributing to a fix.</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-23T14:20:40.000100</ts>
    <user>Elanor</user>
    <text>I should add: while some of this is specific to the described scenario, it's also about the general impact on performance of the wxme format.</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-23T14:29:45.000100</ts>
    <user>Franklin</user>
    <text>Thanks for adding the bug report.</text>
  </message>
  <message conversation_id="820">
    <ts>2018-09-23T16:29:18.000200</ts>
    <user>Sandi</user>
    <text>Question about `plot` - trying to map a 3d color space with `points3d` is there anyway to provide a proc to `#:color` so that each point in the plot can be the color i'm mapping in 3d space?</text>
  </message>
  <message conversation_id="820">
    <ts>2018-09-23T16:31:07.000100</ts>
    <user>Sandi</user>
    <text>This is my plot of rgb values in a 3d space &lt;https://dl.dropbox.com/s/o1tkdyohs1ju7rn/Screenshot%202018-09-23%2016.30.07.png&gt; - want to get something where each dot is the rgb color being mapped</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-23T18:48:35.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Elanor&gt; I think a patch or pull request would be helpful to move that bug report along</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-23T18:49:06.000100</ts>
    <user>Monserrate</user>
    <text>It looks like it got sidetracked into discussion of sharing which wasn't the real issue</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-23T19:02:32.000100</ts>
    <user>Elanor</user>
    <text>&lt;@Monserrate&gt; Ok, but I'm a bit tight for time for a while, and not an expert on wxme, so it would help to know the space of what could be accepted, and how to best accomplish it. This is a case where the code changes are unlikely to reveal any non-obvious effects, it's more about knowing the reasons for the current behaviour and whether/when they still apply. The simplest change and discussion will be removing the 72 column limit, which I'll submit when I have a chance.</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-23T19:27:08.000100</ts>
    <user>Monserrate</user>
    <text>I think lots of things could be accepted provided that they keep existing code working</text>
  </message>
  <message conversation_id="820">
    <ts>2018-09-24T04:21:04.000100</ts>
    <user>Thaddeus</user>
    <text>Well it looks like we have a pretty detailed roadmap for racket-gui now x)</text>
  </message>
  <message conversation_id="818">
    <ts>2018-09-24T19:30:15.000100</ts>
    <user>Claud</user>
    <text>&lt;@Elanor&gt; I don't know much about the wxme format, but the reference to loading time brought to mind that the `racket/fasl` binary format changed in Racket 7.0 to be future-compatible, which makes it an option in scenarios where the old, Racket-version-specific formats would have been unacceptable.</text>
  </message>
  <message conversation_id="820">
    <ts>2018-09-25T05:41:39.000200</ts>
    <user>Andreas</user>
    <text>Is there a way to get raco to install and setup the dependencies of a package but not the package itself? For development purposes I don't want to setup my package, I want to just link it. However, if I do `raco pkg install --auto --link --no-setup --name s10`, then I get the dependencies but they have not been setup which means for example that `rosette` does not install `z3`. On the other hand, I can install and setup everything including my pkg and then remove the zos for my package but that's a sad workaround and I would prefer to have a better solution.</text>
  </message>
  <message conversation_id="820">
    <ts>2018-09-25T06:33:16.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Jettie&gt; a question on rash, I have skimmed the documentation but haven't found a reference to this, can I write a rash file with bash like command lines and require this into a racket file to execute it when I want? Maybe the rash lang automatically provides a function that executes the commands in the file?</text>
  </message>
  <message conversation_id="820">
    <ts>2018-09-25T10:37:13.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; I don't know an elegant way, but just spitballing:
How about making a dummy project that's just an `info.rkt` with the `deps` and `build-deps` values from the real project?
(Might even work to symlink the real `info.rkt`, so no copypasta.)</text>
  </message>
  <message conversation_id="820">
    <ts>2018-09-25T11:59:18.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; can you just run `raco setup rosette` after that command?</text>
  </message>
  <message conversation_id="821">
    <ts>2018-09-25T13:02:48.000100</ts>
    <user>Marnie</user>
    <text>&lt;@Monserrate&gt; I have this same problem, and I suspect it's for the same use case: docker layer caching. If you setup dependency code and your packages code in the same command, you have to rebuild your dependencies whenever your package's source changes</text>
  </message>
  <message conversation_id="821">
    <ts>2018-09-25T13:03:53.000200</ts>
    <user>Monserrate</user>
    <text>I think a new flag to `install` would be reasonable to add</text>
  </message>
  <message conversation_id="821">
    <ts>2018-09-25T13:04:31.000100</ts>
    <user>Monserrate</user>
    <text>I've also wondered about a `raco build` command that worked on the local directory without it being installed (and installed needed deps)</text>
  </message>
  <message conversation_id="821">
    <ts>2018-09-25T13:06:12.000100</ts>
    <user>Marnie</user>
    <text>like, where it figured out what packages to install based on what modules are used in the local directory?</text>
  </message>
  <message conversation_id="821">
    <ts>2018-09-25T13:07:36.000100</ts>
    <user>Monserrate</user>
    <text>no, based on an info.rkt file</text>
  </message>
  <message conversation_id="821">
    <ts>2018-09-25T13:07:47.000100</ts>
    <user>Monserrate</user>
    <text>but didn't require installing the directory as a package</text>
  </message>
  <message conversation_id="821">
    <ts>2018-09-25T13:08:04.000100</ts>
    <user>Monserrate</user>
    <text>which seems to be something people avoid for reasons I don't always understand</text>
  </message>
  <message conversation_id="821">
    <ts>2018-09-25T13:12:34.000100</ts>
    <user>Marnie</user>
    <text>ah yes, that would be helpful</text>
  </message>
  <message conversation_id="821">
    <ts>2018-09-25T14:02:31.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Marnie&gt; I only have one Racket `Dockerfile` worth of experience, and haven't tweaked this in many months. But:
I have something like this `Dockerfile` snippet:
```
WORKDIR /app/

# First just copy over Makefile and info.rkt, and run make install.
# This way we get a docker layer with our Racket dependencies cached,
# that remains valid until/unless Makefile or info.rkt is changed.
COPY Makefile info.rkt /app/
RUN make install

# Finally this layer adds our actual application files. So long as
# info.rkt hasn't changed, this can reuse the previous layer.
COPY . /app/
RUN make setup
```
and this `Makefile` snippet:
```
DEPS-FLAGS=--check-pkg-deps --unused-pkg-deps

# Installs dependencies as well as linking this as a package.
install:
	raco pkg install --deps search-auto

# Primarily for day-to-day dev.
# Note: Also checks deps.
# Note: Does NOT build docs.
setup:
	raco setup --no-docs --tidy $(DEPS-FLAGS) --pkgs $(PACKAGE-NAME)

```
And the deps layer doesn't get rebuilt unless I change `Makefile` or `info.rkt`.</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T14:03:46.000100</ts>
    <user>Bertha</user>
    <text>(This is for &lt;https://deals.extramaze.com&gt; and the repo is private, is why I'm just sharing snippets)</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T14:05:59.000100</ts>
    <user>Bertha</user>
    <text>(I guess you could also just inline those `Makefile` commands into the `Dockerfile`, but I have a `Makefile` usually for a variety of things anyway.)</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T14:06:53.000100</ts>
    <user>Bertha</user>
    <text>Take this with a big grain of salt. When it comes to Docker I'm just at a "it works" stage.</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T14:09:18.000100</ts>
    <user>Marnie</user>
    <text>&lt;@Bertha&gt; that's about what I end up doing too, and it seems to work okay so far</text>
  </message>
  <message conversation_id="823">
    <ts>2018-09-25T16:49:51.000200</ts>
    <user>Andreas</user>
    <text>Thanks for the replies.</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T16:51:04.000100</ts>
    <user>Andreas</user>
    <text>I have about 9 packages my application/package depends on therefore doing something like &lt;@Monserrate&gt; suggested doesn't work very well. I would need to end up reading the `info.rkt` file and issuing `raco pkg install` for each of them.</text>
  </message>
  <message conversation_id="823">
    <ts>2018-09-25T16:53:14.000100</ts>
    <user>Andreas</user>
    <text>I need this because my package has a few compile time configuration options passed through environment variables. I cannot `raco install --auto --link ...` my package without passing the compile time options, however it's too soon to do it when I am doing CI. I would like to delay the setup of my application and just install the dependencies.</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T16:53:30.000100</ts>
    <user>Andreas</user>
    <text>Maybe we need an alternative to `--link` like `--deps-only`.</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T16:54:59.000100</ts>
    <user>Andreas</user>
    <text>With this I could install the deps. Then I could do `raco pkg install --no-setup --link ...` on my package and later I could issue the compilation script with the options. This would also allow me to cache my project dependencies during CI between pipeline runs.</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T16:55:34.000100</ts>
    <user>Andreas</user>
    <text>ok... let me take a look at the `raco pkg install` code, maybe it's not even that hard to implement. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T17:03:42.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Andreas&gt; What about setting PLTADDONDIR to a directory which becomes the new location for user scope packages. `raco pkg install` will install your packages and all of its dependencies into the addon directory. Then you can delete your package from that directory. You can either then leave it as-is or unset PLTADDONDIR and rerun `raco pkg install` again over each package directory already in the formerly addon directory to ensure they are installed into the standard user scope location.</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-25T20:07:19.000200</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; the `pkg/lib` module provides a racket API to all of `raco pkg` - you might have better luck writing a racket script to install things just right</text>
  </message>
  <message conversation_id="824">
    <ts>2018-09-25T21:04:33.000100</ts>
    <user>Rosette</user>
    <text>When creating a `Maybe` type, how do I pull the value out of the `Some` struct?
```
(struct None ())
(struct (a) Some ([v : a]))
(define-type (Maybe a) (U None (Some a)))
```
With a function like the following:
```
(: div (-&amp;gt; Integer Integer (Maybe Exact-Rational)))
(define (div x y)
  (if (equal? 0 y)
      (None)
      (Some (/ x y))))
```
I get the following result, but I cant crack it open. If it were `(Some 12345)`, I could do `(Some-v (Some 12345))` to get `12345`. What can I do to get to the value? I also tried `(Some-v (cast (div 3 4) (Some Exact-Rational))` but no luck:
```
(div 3 4)
- : (U (Some Exact-Rational) None)
#&amp;lt;Some&amp;gt;
```</text>
  </message>
  <message conversation_id="824">
    <ts>2018-09-25T22:15:21.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Rosette&gt; try using Some? or pattern matching</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-28T20:20:30.000100</ts>
    <user>Marnie</user>
    <text>today I learned that the `...` identifier is provided from `racket/base` _twice_, once at phase 0 as a transformer binding and once at phase 1 as a value binding</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-28T20:20:34.000100</ts>
    <user>Marnie</user>
    <text>…..why?</text>
  </message>
  <message conversation_id="824">
    <ts>2018-09-29T01:01:44.000100</ts>
    <user>Thelma</user>
    <text>greetings. got a problem with the type checker and can't figure out where the problem is :confused:. here a paste of the code and the error: &lt;http://pasterack.org/pastes/1070&gt;</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T10:10:08.000100</ts>
    <user>Ezra</user>
    <text>Thanks for trying with the livestream unfortunately the audio is very poor and the screen looks like a bright spot... Now it's disappeared completely (black screen)</text>
  </message>
  <message conversation_id="825">
    <ts>2018-09-29T10:13:41.000100</ts>
    <user>Lynna</user>
    <text>For those who need the link, live stream is &lt;https://www.youtube.com/watch?v=RvlQ5TOzKdg&gt;</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T10:15:02.000100</ts>
    <user>Ezra</user>
    <text>the stream ended</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T10:18:23.000100</ts>
    <user>Lynna</user>
    <text>I see — we’re trying to fix it.</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T10:26:24.000100</ts>
    <user>Lynna</user>
    <text>Now at &lt;https://www.youtube.com/watch?v=CLjXhr_TgP8&gt;</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T10:27:17.000100</ts>
    <user>Ezra</user>
    <text>Thanks - would it be possible to move the camera to the front?</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T10:28:25.000100</ts>
    <user>Lynna</user>
    <text>We’ll try to adjust for the next talks</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T10:28:33.000100</ts>
    <user>Ezra</user>
    <text>ok</text>
  </message>
  <message conversation_id="826">
    <ts>2018-09-29T11:43:30.000100</ts>
    <user>Ezra</user>
    <text>Excellent - I can hear the speaker and see the screen! Thanks for the adjustment!</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:29:51.000100</ts>
    <user>Ezra</user>
    <text>The screen is not in focus now - can't see much - it was fine for the previous 2 speakers</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:30:11.000100</ts>
    <user>Ezra</user>
    <text>it is also much brighter now</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:45:34.000100</ts>
    <user>Ezra</user>
    <text>Out of focus again</text>
  </message>
  <message conversation_id="827">
    <ts>2018-09-29T12:47:29.000100</ts>
    <user>Izola</user>
    <text>I think the screen is out of focus now because of the light behind the speakers :/</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:47:55.000100</ts>
    <user>Izola</user>
    <text>I really do apologize - there aren't many settings on this webcam </text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:48:32.000100</ts>
    <user>Ezra</user>
    <text>Jesse is now in focus - are there any slides on the screen now?</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:51:08.000100</ts>
    <user>Izola</user>
    <text>Yes but again I think there is too much light for the camera to focus. I'll try to adjust the light for the next session </text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:51:28.000100</ts>
    <user>Ezra</user>
    <text>what if you would just zoom on the screen?</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:53:00.000100</ts>
    <user>Izola</user>
    <text>AFAIK this camera doesn't have that option </text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:54:37.000100</ts>
    <user>Ezra</user>
    <text>OK, anyway during first 2 presentations after break it was fine (and much darker) so we will wait for the break - good luck!</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T12:54:52.000100</ts>
    <user>Izola</user>
    <text>Thanks, sorry again </text>
  </message>
  <message conversation_id="828">
    <ts>2018-09-29T15:15:40.000100</ts>
    <user>Lynna</user>
    <text>Like stream is now &lt;https://www.youtube.com/watch?v=pv0lLciMI24&gt;</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T19:19:35.000100</ts>
    <user>Ezra</user>
    <text>will the "State of Racket" tomorrow be streamed?</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T19:24:15.000100</ts>
    <user>Marnie</user>
    <text>Jay’s answer: we will attempt!</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T19:24:28.000100</ts>
    <user>Ezra</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T19:25:14.000100</ts>
    <user>Marnie</user>
    <text>maybe! I’m not sure I heard correctly</text>
  </message>
  <message conversation_id="822">
    <ts>2018-09-29T19:27:30.000100</ts>
    <user>Lynna</user>
    <text>If you’re going to Morgan Street, bring a jacket. It will be outside.</text>
  </message>
  <message conversation_id="829">
    <ts>2018-09-30T11:19:15.000100</ts>
    <user>Virgina</user>
    <text>if anyone wants to play `warp`, i'll be running a server for a little bit! connect to `10.61.2.69` ^_^</text>
  </message>
  <message conversation_id="829">
    <ts>2018-09-30T11:41:20.000100</ts>
    <user>Virgina</user>
    <text>whoops, ip address isn't stable -- now running on `10.129.216.227`</text>
  </message>
  <message conversation_id="830">
    <ts>2018-09-30T11:59:46.000200</ts>
    <user>Gary</user>
    <text>hey guys can you help me set up mit-scheme in drracket?</text>
  </message>
  <message conversation_id="830">
    <ts>2018-09-30T11:59:50.000100</ts>
    <user>Gary</user>
    <text>i used the sicp plugin</text>
  </message>
  <message conversation_id="830">
    <ts>2018-09-30T12:00:07.000100</ts>
    <user>Gary</user>
    <text>but i can't import modules using `load` command now</text>
  </message>
  <message conversation_id="830">
    <ts>2018-09-30T12:00:31.000100</ts>
    <user>Gary</user>
    <text>is there a work around for that?</text>
  </message>
  <message conversation_id="831">
    <ts>2018-09-30T17:39:55.000100</ts>
    <user>Franklin</user>
    <text>&lt;@Andreas&gt; &lt;@Salome&gt;   As a replacement for Whalesong try Vishesh's racketscript (which is very Racket-like) or try Urlang (which is JavaScript with s-expression syntax and macros (written in Racket)).</text>
  </message>
  <message conversation_id="832">
    <ts>2018-09-30T20:17:57.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Wally&gt; What I mentioned before lunch: &lt;https://github.com/greghendershott/racket-mode/blob/master/Reference.md#racket-mode-start-faster&gt;</text>
  </message>
  <message conversation_id="831">
    <ts>2018-10-01T03:07:43.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; Thanks. I really don't have at the moment a use for this particular kind of application but was interested in helping the development of a something like a Racket -&amp;gt; JS (or WebAssembly) compiler. I found whalesong and sounded like just what I wanted. Will take a look at Racketscript. Urlang is an interesting approach but I really want to write Racket, not yet another language. So I am, in the long term, more interested in getting Whalesong to work that to learn something else. :slightly_smiling_face: Thanks for the pointers on issue 48. I will take a look at the source code and see what I can grasp.</text>
  </message>
  <message conversation_id="831">
    <ts>2018-10-01T03:09:37.000100</ts>
    <user>Franklin</user>
    <text>If you have any question on the Whalesong just ask. I can't guarantee that I know the answer though. Unfortunately Danny is no longer involved.</text>
  </message>
  <message conversation_id="831">
    <ts>2018-10-01T04:21:34.000100</ts>
    <user>Ezra</user>
    <text>&lt;@Andreas&gt; on the Racket -&amp;gt; WebAssembly front, with RacketOnChez the following might become feasible in the future: &lt;https://github.com/google/schism&gt;</text>
  </message>
  <message conversation_id="833">
    <ts>2018-10-01T04:24:22.000100</ts>
    <user>Thaddeus</user>
    <text>I can't wait for the Racket-&amp;gt;WASM project to start :slightly_smiling_face: Count me in!</text>
  </message>
  <message conversation_id="831">
    <ts>2018-10-01T04:43:58.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Ezra&gt; didn't know about that project (from google!?!?!?) Thanks for the referenc.e</text>
  </message>
  <message conversation_id="831">
    <ts>2018-10-01T04:45:08.000100</ts>
    <user>Ezra</user>
    <text>Looks more like a side project of Eric Holk though, but still it is in google repo</text>
  </message>
  <message conversation_id="834">
    <ts>2018-10-01T12:35:09.000100</ts>
    <user>Ezra</user>
    <text>&lt;@Lynna&gt; is there a chance for a post (blog or mailing list) summarizing the "state of racket" talk for those of us who didn't attend racketcon?</text>
  </message>
  <message conversation_id="834">
    <ts>2018-10-01T12:38:04.000100</ts>
    <user>Lynna</user>
    <text>Yes (or planned, at least), in two parts.
The first part will be a blog post that mostly reflects the Racket-on-Chez results that I reported at the Scheme workshop. That talk was recorded, so I expect it will be available as video at some point.
The second will be a how-to post on modifying Racket-on-Chez.</text>
  </message>
  <message conversation_id="831">
    <ts>2018-10-01T12:38:39.000100</ts>
    <user>Ezra</user>
    <text>Excellent, thank you!</text>
  </message>
  <message conversation_id="831">
    <ts>2018-10-01T16:27:56.000100</ts>
    <user>Marnie</user>
    <text>FYI, the Google repo thing is probably just an artifact of Google's open source copyright policies. If you use your corporate laptop to create a project, you can only open source it on GitHub through the &lt;http://github.com/google|github.com/google&gt; org. You can't put it under your own account.</text>
  </message>
  <message conversation_id="831">
    <ts>2018-10-01T16:28:28.000100</ts>
    <user>Marnie</user>
    <text>It doesn't matter if the project is or isn't related to anything that Google is officially doing</text>
  </message>
  <message conversation_id="834">
    <ts>2018-10-01T17:06:26.000100</ts>
    <user>Ezra</user>
    <text>Thanks for the info</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-01T18:28:43.000100</ts>
    <user>Ruthe</user>
    <text>Hello, is there a resource you can recommend on how to use reactor with racket/gui ?</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-01T18:28:49.000100</ts>
    <user>Ruthe</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-01T18:30:06.000100</ts>
    <user>Ruthe</user>
    <text>other resources on reactive programming racket are also welcome (note that I know about FrTime!)</text>
  </message>
  <message conversation_id="836">
    <ts>2018-10-01T18:51:46.000100</ts>
    <user>Setsuko</user>
    <text>Hi there!

Ive been doing this by having a single reactor for the GUI, and having each even handler call react!. But I'm still settling on the API for reactor (hense it being unstable) so maybe there will be better integration in the future!</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-01T19:37:26.000100</ts>
    <user>Ruthe</user>
    <text>hum sounds good! do you have a project I can check out online? thanks!</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-01T19:38:31.000100</ts>
    <user>Ruthe</user>
    <text>oh your the lead of reactor! didn't realize that :stuck_out_tongue:</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-01T19:44:23.000100</ts>
    <user>Ruthe</user>
    <text>I am actually trying to convert a ReactiveML n-body / planets example to reactor, not sure if I'll succeded since I am completely new to the reactor pattern and ReactiveML (but think it will help in understanding it). Any resources you'd recommend to learn about the pattern (preferably not Java :P)? thanks!</text>
  </message>
  <message conversation_id="837">
    <ts>2018-10-02T03:54:03.000200</ts>
    <user>Andreas</user>
    <text>I am quite confused about this snippet... how come this contract is wrong?
```
#lang racket

(provide
 (contract-out
  [struct job
    ((id exact-positive-integer?))
    ((type (symbols 'foo 'bar)))]))

(struct job
  (id type)) 
```</text>
  </message>
  <message conversation_id="837">
    <ts>2018-10-02T03:54:08.000100</ts>
    <user>Andreas</user>
    <text>It's telling me : `contract-out: malformed struct option in: ((type (symbols (quote foo) (quote bar))))`</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-02T04:30:37.000100</ts>
    <user>Ruthe</user>
    <text>Can anyone recommend a resource / tutorial on how to do an MVC GUI or something similar in Racket? thanks!</text>
  </message>
  <message conversation_id="837">
    <ts>2018-10-02T05:18:52.000100</ts>
    <user>Claud</user>
    <text>&lt;@Andreas&gt; too many parentheses. Should be ```
(provide
 (contract-out
  [struct job
    ([id exact-positive-integer?]
     [type (symbols 'foo 'bar)])]))
```</text>
  </message>
  <message conversation_id="837">
    <ts>2018-10-02T05:19:44.000100</ts>
    <user>Claud</user>
    <text>Also, `symbols` is for backwards-compatibility: you can just write `(or/c 'foo 'bar)`.</text>
  </message>
  <message conversation_id="837">
    <ts>2018-10-02T05:21:40.000100</ts>
    <user>Thaddeus</user>
    <text>Didn't knew that! Looks like I was copying old style in my new code... Thanks.</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-02T06:06:31.000100</ts>
    <user>Ruthe</user>
    <text>first-class classes sound awesome!</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-02T06:07:33.000100</ts>
    <user>Ruthe</user>
    <text>following &lt;http://www.ccs.neu.edu/home/matthias/Thoughts/Programming_with_Class_in_Racket.html&gt; and Racket has a really refreshing approach to OO</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-02T06:08:08.000100</ts>
    <user>Ruthe</user>
    <text>I've never been a great fan of OO, but in Racket it feels better</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-02T06:10:23.000100</ts>
    <user>Ruthe</user>
    <text>so is the foo% notation convention not exclusive to classes? I see the get-drr-frame% method in that tutorial uses it, is it because it returns a class?</text>
  </message>
  <message conversation_id="838">
    <ts>2018-10-02T06:41:12.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Claud&gt; Argh, doh! I didn't notice that. Need more sleep. Thanks. </text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-02T08:28:59.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Ruthe&gt; yes, that function produces a `frame%`</text>
  </message>
  <message conversation_id="839">
    <ts>2018-10-02T08:38:46.000100</ts>
    <user>Rosette</user>
    <text>Does anyone know why `compose` only accepts two procedures when in the context of `typed/racket`?</text>
  </message>
  <message conversation_id="835">
    <ts>2018-10-02T08:40:26.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Rosette&gt; because we can't express the more general version in types</text>
  </message>
  <message conversation_id="840">
    <ts>2018-10-02T09:18:56.000200</ts>
    <user>Donny</user>
    <text>hi everyone</text>
  </message>
  <message conversation_id="840">
    <ts>2018-10-02T09:19:35.000100</ts>
    <user>Donny</user>
    <text>how to make multi version of proc with different arg(as overloading)</text>
  </message>
  <message conversation_id="840">
    <ts>2018-10-02T09:21:38.000100</ts>
    <user>Donny</user>
    <text>None</text>
  </message>
  <message conversation_id="840">
    <ts>2018-10-02T09:24:23.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Donny&gt; you can use optional arguments or `case-lambda`</text>
  </message>
  <message conversation_id="840">
    <ts>2018-10-02T09:27:35.000100</ts>
    <user>Donny</user>
    <text>tks you</text>
  </message>
  <message conversation_id="841">
    <ts>2018-10-02T10:21:33.000100</ts>
    <user>Setsuko</user>
    <text>Unfortunately I don’t have a public repo with the code at the moment (It’s in a project thats active research :disappointed: ) Also I think the stuff on the ReactiveML website is the best introduction ive seen, which is rather unfortunate (A lot of the work on this is in french so its hard to even give good papers to point to).

Hopefully I’ll write a guide one of these days, but ive yet to decide if ReactiveML or Esterel is a better language to go with….</text>
  </message>
  <message conversation_id="840">
    <ts>2018-10-02T13:55:21.000100</ts>
    <user>Odis</user>
    <text>Welp, the audio tracks for RacketCon have a loud buzz…so now I get to try to reduce that…</text>
  </message>
  <message conversation_id="842">
    <ts>2018-10-02T17:14:03.000100</ts>
    <user>Florentina</user>
    <text>&lt;@Odis&gt; No fun, but at least buzz is easier than hiss. High-pass filter might work.</text>
  </message>
  <message conversation_id="842">
    <ts>2018-10-03T03:48:38.000100</ts>
    <user>Ruthe</user>
    <text>Okay thanks for the info :slightly_smiling_face:, guess I'll have to refrain from using reactor for now although it sounds really interesting! Maybe in the future!</text>
  </message>
  <message conversation_id="840">
    <ts>2018-10-03T05:22:49.000100</ts>
    <user>Erika</user>
    <text>&lt;@Odis&gt; I find that the denoiser in ScreenFlow does magic, sometimes. If you want me to try it out, just give me an audio sample.</text>
  </message>
  <message conversation_id="843">
    <ts>2018-10-03T11:42:20.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; pinging you about this &lt;https://github.com/racket/racket/pull/2268&gt;</text>
  </message>
  <message conversation_id="843">
    <ts>2018-10-03T11:57:42.000100</ts>
    <user>Lynna</user>
    <text>Commented.</text>
  </message>
  <message conversation_id="844">
    <ts>2018-10-04T11:05:04.000100</ts>
    <user>Andreas</user>
    <text>Can anyone say if it is normal that the majority of syscalls in a racket process are `mprotect`? I just happened to notice the 50% of the time of the process syscalls are dedicated to `mprotect`.</text>
  </message>
  <message conversation_id="844">
    <ts>2018-10-04T11:05:50.000100</ts>
    <user>Andreas</user>
    <text>This is typical of one of my racket places:
```
$ sudo strace -c -p 2123
strace: Process 2123 attached
strace: [ Process PID=2123 runs in x32 mode. ]
strace: [ Process PID=2123 runs in 64 bit mode. ]
^Cstrace: Process 2123 detached
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 51.50    0.316650           1    244298           mprotect
 30.99    0.190553           2    105547           mmap
 14.68    0.090264           1    105502           munmap
  2.30    0.014165           0    184388      1441 rt_sigreturn
  0.33    0.002006           0     21246           futex
  0.14    0.000852           0     11485           epoll_wait
  0.06    0.000366           0      2883           getrusage
------ ----------- ----------- --------- --------- ----------------
100.00    0.614856                675349      1441 total
```</text>
  </message>
  <message conversation_id="844">
    <ts>2018-10-04T11:14:05.000100</ts>
    <user>Andreas</user>
    <text>This looks actually like I am allocating way too much memory...</text>
  </message>
  <message conversation_id="844">
    <ts>2018-10-04T11:49:13.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; that's how the GC implements the write barrier</text>
  </message>
  <message conversation_id="845">
    <ts>2018-10-04T14:07:21.000100</ts>
    <user>Carlita</user>
    <text>Wishlist: nicer CSS for `@tabular`</text>
  </message>
  <message conversation_id="845">
    <ts>2018-10-04T14:08:36.000100</ts>
    <user>Carlita</user>
    <text>BTW, the `mprotect` implementing GC stuff has bit me before. Some other software I have installed sets the sysctl parameter `vm.max_map_count` to a lowish value and causes the Racket VM to eventually die.</text>
  </message>
  <message conversation_id="844">
    <ts>2018-10-04T14:54:41.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; where's the best place to learn more about the racket gc?</text>
  </message>
  <message conversation_id="844">
    <ts>2018-10-04T14:55:48.000100</ts>
    <user>Monserrate</user>
    <text>&lt;http://www.cs.utah.edu/plt/publications/ismm09-rwrf.pdf&gt; and &lt;http://www.cs.utah.edu/plt/publications/ismm04-wf.pdf&gt;</text>
  </message>
  <message conversation_id="844">
    <ts>2018-10-04T14:57:32.000100</ts>
    <user>Andreas</user>
    <text>Awesome, that's what I was going to ask for, if you had pointed me to &lt;https://docs.racket-lang.org/reference/garbagecollection.html&gt; :slightly_smiling_face:</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-04T15:25:45.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Any reason why `(ffi-lib "portaudio")` would fail on windows when portaudio is placed in the Racket/lib directory?</text>
  </message>
  <message conversation_id="844">
    <ts>2018-10-04T15:25:47.000100</ts>
    <user>Andreas</user>
    <text>I am seeing some kind of race condition with the use of places and it's hard to pinpoint what it could be. When a race condition happens I see a `D` status in `htop` and the following top syscalls in `strace`:
```
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 69.59    0.203671          17     12339           mprotect
 23.13    0.067702           0    306439     92277 futex
```

I think the `mprotect` call might be a red herring. The `futex` is the think I need to look into. Are GCs in anyway interacting between different places? I assumed each one had their own GC but might be wrong.</text>
  </message>
  <message conversation_id="844">
    <ts>2018-10-04T15:27:57.000100</ts>
    <user>Monserrate</user>
    <text>yes, they have separate gcs</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-04T15:34:27.000100</ts>
    <user>Lynna</user>
    <text>My first guess is that “portaudio.dll” imports other DLLs that have not been loaded first. I’d use Dependency Walker to look at the dependencies.</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-04T15:41:56.000100</ts>
    <user>Odis</user>
    <text>Oh, that’s an interesting idea.</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-04T15:42:08.000100</ts>
    <user>Odis</user>
    <text>And that *might* be why it works on *most* windows machines.</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-04T15:42:46.000100</ts>
    <user>Odis</user>
    <text>So this might be because of &lt;@Freida&gt;’s library. (And windows being…windows…)</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-04T15:44:42.000100</ts>
    <user>Odis</user>
    <text>Odd, it can’t find a bunch of API-MS-WIN-CORE-* libraries.</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-04T15:53:16.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Can you remind me which window of dependency walker is the one I should be looking at?</text>
  </message>
  <message conversation_id="847">
    <ts>2018-10-04T16:01:00.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; thanks. this will be an interesting debugging session then... *sigh*</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-04T16:02:51.000100</ts>
    <user>Odis</user>
    <text>Okay, it looks like MSVC100 is missing…maybe.</text>
  </message>
  <message conversation_id="848">
    <ts>2018-10-04T16:38:48.000100</ts>
    <user>Lynna</user>
    <text>That would make sense. I think “msvc100.dll” is a redistributable DLL from Microsoft that is meant to be provided with executables and libraries created by Visual Studio. Installing various software packages will cause it to be installed already.</text>
  </message>
  <message conversation_id="847">
    <ts>2018-10-04T19:31:18.000100</ts>
    <user>Claud</user>
    <text>&lt;@Andreas&gt; &lt;@Monserrate&gt; is right, but there is also a GC for the shared memory space, where place channels, `make-shared-bytes`, etc. are allocated. Idk if that is relevant to your case at all (this is very low-level for me).</text>
  </message>
  <message conversation_id="847">
    <ts>2018-10-05T02:20:47.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Claud&gt; that's good to know. today I will put my gdb-fu to work and debug racket to see where all of there `futex` calls are coming from.</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-05T03:50:57.000100</ts>
    <user>Darryl</user>
    <text>I'm studying Shriram Krishnamurthis's automaton example:
```

(define-syntax process-state
  (syntax-rules (-&amp;gt;)
    [(_ (label -&amp;gt; target) ...)
     (lambda (stream)
       (cond
         [(empty? stream) true]
         [else
          (case (first stream)
            [(label) (target (rest stream))]
            ...
            (else false))]))]))

(define-syntax fsm
  (syntax-rules (:)
    [(_ init-state
        (state : response ...)
        ...)
     (letrec ([state
               (process-state response ...)]
              ...)
       init-state)]))
```

when use the macro stepper to expand:

```

(fsm init
     [init : (c -&amp;gt; more)]
     [more : (a -&amp;gt; more)
           (d -&amp;gt; more)
           (r -&amp;gt; end)]
     [end : ])
```

it "stops" at :
```
  (define-syntax fsm
     (syntax-rules (:)
       [(_ init-state (state : response ...) ...)
        (letrec ([state (process-state response ...)] ...)
          init-state)]))
   (letrec ([init (process-state (c -&amp;gt; more))]
            [more (process-state (a -&amp;gt; more) (d -&amp;gt; more) (r -&amp;gt; end))]
            [end (process-state)])
     init)
```

and doesn't go "deeper" to expand `process-state`  (No more steps to take)

Is that the expected behaviour, or (much more likely) have I misunderstood how to use the tool??

with thanks</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-05T08:41:06.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Darryl&gt; because of limitations of how macro hiding in the macro stepper works, often it doesn't show `syntax-rules` macros. If you rewrite those to use `syntax-case` then it shows basically exactly what you expect.</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-05T08:41:20.000100</ts>
    <user>Monserrate</user>
    <text>```
(define-syntax (process-state stx)
  (syntax-case stx (-&amp;gt;)
    [(_ (label -&amp;gt; target) ...)
     #'(lambda (stream)
         (cond
           [(empty? stream) true]
           [else
            (case (first stream)
              [(label) (target (rest stream))]
              ...
              (else false))]))]))

(define-syntax (fsm stx)
  (syntax-case stx (:)
    [(_ init-state
        (state : response ...)
        ...)
     #'(letrec ([state
                 (process-state response ...)]
                ...)
         init-state)]))
```</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-05T20:26:38.000100</ts>
    <user>Darryl</user>
    <text>Thanks so much &lt;@Monserrate&gt; . I appreciate the help!</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-06T06:34:30.000100</ts>
    <user>Darryl</user>
    <text>My application is a state machine with some local variables in each node, and time-outs for arcs as well, Having really enjoyed Shriram's automaton compile-to-closures, I've started to get pretty complicated macros. I wonder if I would be better off compiling the automaton definition
```
(fsm init
    [init : (c -&amp;gt; more)]
    [more : (a -&amp;gt; more)
          (d -&amp;gt; more)
          (r -&amp;gt; end)]
    [end : ])
```
for example, to a class - which I could then add methods to so I could query the variables in a node, check time-remaining-in-node etc... I know all of this can be done with closures (and a dispatch  method), but it seems a bit more straightforward to do it with explicit objects/methods.

Second questions - given that (above) type of definition, are macros emitting class defns the way to go, or  parser-tools (lex/yacc) a better bet?

Again, thanks for the help...</text>
  </message>
  <message conversation_id="846">
    <ts>2018-10-07T15:30:48.000100</ts>
    <user>Claud</user>
    <text>&lt;@Darryl&gt; You might be interested in the `automata` package: &lt;http://docs.racket-lang.org/automata/index.html&gt;</text>
  </message>
  <message conversation_id="849">
    <ts>2018-10-08T12:20:16.000100</ts>
    <user>Alesha</user>
    <text>Can I add another `raise-argument-error` function that takes an extra `bad-arg-name` argument so the programmer can specify which argument is being referred to when an argument error exception is raised? I'd like to be able to clearly refer to the name of an argument in a uniform format consistent with the format of the error messages raised by the other two `raise-argument-error` functions.

`raise-arguments-error` offers something similar in that you can specify which argument fields are involved but the error message format is not the same as `raise-argument-error` which is undesirable from my point of view.</text>
  </message>
  <message conversation_id="850">
    <ts>2018-10-08T13:18:58.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Why is the backing type of `_enum` `_ufixint`? When the c spec states that it’s `_int`?</text>
  </message>
  <message conversation_id="850">
    <ts>2018-10-08T13:19:17.000100</ts>
    <user>Odis</user>
    <text>(Section 6.4.4.3: “An identifier declared as an enumeration constant has type int”)</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:27:04.000100</ts>
    <user>Louanne</user>
    <text>this is perhaps a super naive question, but if i want to build a parallel app, what’s the state of this in racket? I believe the GC is not thread friendly, and I don’t think the move to chez will make that any easier</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:27:56.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Louanne&gt; if what you want is to execute two separate computations that don't share much, then places work pretty well</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:28:12.000100</ts>
    <user>Monserrate</user>
    <text>this is how parallel builds and background expansion work</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:28:19.000100</ts>
    <user>Louanne</user>
    <text>cool, thanks</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:28:33.000100</ts>
    <user>Monserrate</user>
    <text>if what you want is shared memory parallelism then the support is not very good</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:28:59.000100</ts>
    <user>Louanne</user>
    <text>Yeah, I’m thinking of moving one of our symbolic executors to racket. Threads don’t really need to communicate much at all, since they are forking off and doing various amounts of work in a pool, but coordinating them will require some thought no matter what</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:29:30.000100</ts>
    <user>Monserrate</user>
    <text>that sounds like something that would work fine</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:29:44.000100</ts>
    <user>Louanne</user>
    <text>places is, I assume, a library</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:29:58.000100</ts>
    <user>Louanne</user>
    <text>yup, ok, great, will look into this</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:30:50.000100</ts>
    <user>Louanne</user>
    <text>yes, this looks exactly like what I wanted. Basically a scheduler needs to be able to talk to some number of worker threads.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:31:45.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Louanne&gt; but if you want heave parallelism, you might want to look elsewhere. `places` break when you issue over 16 or so in the same machine. By *break* here I mean that they start spending too much time dealing with memory locking in the kernel.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:32:13.000200</ts>
    <user>Andreas</user>
    <text>I am just working on a library to solve this...</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:32:24.000100</ts>
    <user>Louanne</user>
    <text>sorry, my apologies, but what is heave parallelism?</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:32:40.000200</ts>
    <user>Louanne</user>
    <text>and yes, I can imagine that things scale sub-linearly because of these coordination vagaries..</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:32:49.000100</ts>
    <user>Louanne</user>
    <text>really for what we’re doing, even something like 5-10 tasks would be fine</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:33:11.000100</ts>
    <user>Louanne</user>
    <text>but we’d like something robust for the future. My guess is that the right architecture would be agnostic to the particulars of implementation.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:33:29.000100</ts>
    <user>Andreas</user>
    <text>Background is here: &lt;https://groups.google.com/d/msg/racket-users/oE72JfIKDO4/zbFI6knhAQAJ&gt;</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:33:30.000100</ts>
    <user>Carlyn</user>
    <text>the intent of places is that you only create at most one per core and schedule tasks over the pool, not that you spawn one per task</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:33:56.000100</ts>
    <user>Louanne</user>
    <text>&lt;@Carlyn&gt; that’s even better!</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:34:12.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; true, but if your machine has 96 cores, places are not so good.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:34:18.000200</ts>
    <user>Monserrate</user>
    <text>places scale ok for a big-desktop size machine, but poorly for really big machines</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:34:20.000200</ts>
    <user>Andreas</user>
    <text>assuming you're trying to use them all.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:34:25.000100</ts>
    <user>Carlyn</user>
    <text>yes, I would believe that</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:34:26.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; +1</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:34:40.000100</ts>
    <user>Louanne</user>
    <text>right, we just have a 20-core machine and want our symbolic executor to be not-so-obviously-naive</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:35:12.000200</ts>
    <user>Louanne</user>
    <text>it’s a super parallelizable problem: fork at various points, explore source, listen to a scheduler to decide what to explore next.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:36:53.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Louanne&gt; right, a lot like a build system, which works decently well</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:37:12.000100</ts>
    <user>Monserrate</user>
    <text>I think there's a job queue pkg already somewhere</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:37:27.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Louanne&gt; I would start architecting it with `places` and see how far you can go.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:37:48.000100</ts>
    <user>Louanne</user>
    <text>yeah, I think you are both right</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:38:35.000100</ts>
    <user>Louanne</user>
    <text>okay, basically I was trying to figure out: if I rewrite this in racket, is it going to be basically impossible to scale at all. The state of our ocaml implementation is also not so promising, since ocaml does not have a good concurrency story (not terrible either, but not super friendly)</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:38:36.000100</ts>
    <user>Andreas</user>
    <text>Didn't know about the pkg &lt;@Monserrate&gt; mentioned. Take a look at it first then. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:39:03.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Louanne&gt; it will scale... I wouldn't worry so much about that.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:39:17.000100</ts>
    <user>Monserrate</user>
    <text>I was thinking of `job-queue`, but that's just plain threads</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:39:27.000200</ts>
    <user>Monserrate</user>
    <text>might make the job a bit easier, though</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:39:50.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Louanne&gt; just running a racket application on a 96 core, 386gb ram machine. Works great!</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:39:51.000100</ts>
    <user>Louanne</user>
    <text>My guess is that the main issue will just be figuring out the right job queue abstraction at a high level, and after that using places should not be so bad</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:39:59.000100</ts>
    <user>Louanne</user>
    <text>that’s awesome!!!</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:40:19.000200</ts>
    <user>Monserrate</user>
    <text>you might be interested in the code here: &lt;https://github.com/racket/typed-racket/blob/master/typed-racket-test/main.rkt&gt;</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:40:30.000100</ts>
    <user>Monserrate</user>
    <text>which has a job queue that uses places</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:41:22.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; how does your new library compare to using distributed places?</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:42:07.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; by distributed you mean over several machines?</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:42:27.000100</ts>
    <user>Andreas</user>
    <text>that's not implemented yet but it's doable and I will surely want to do it.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:42:28.000100</ts>
    <user>Monserrate</user>
    <text>i mean using the `distributed-places` library (perhaps connecting to the local machine)</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:42:53.000100</ts>
    <user>Andreas</user>
    <text>ah, you mean using distributed places but on the localhost?</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:42:56.000100</ts>
    <user>Monserrate</user>
    <text>yeah</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:43:18.000100</ts>
    <user>Louanne</user>
    <text>yeah, this looks helpful, sam</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:43:47.000100</ts>
    <user>Andreas</user>
    <text>Haven't compared yet, but it's definitely more straightforward to use since you don't need to worry about nodes. It's mostly the places API but using processes underneath.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:44:10.000100</ts>
    <user>Louanne</user>
    <text>&lt;https://github.com/racket/typed-racket/blob/master/typed-racket-test/places.rkt&gt;</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:44:17.000100</ts>
    <user>Louanne</user>
    <text>This looks highly relevant</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:46:13.000100</ts>
    <user>Lynna</user>
    <text>I’m not sure what it would mean to specify the “name” of an argument, since arguments  don’t really have names at run time. But it would certainly make sense to have some descriptive text about the argument’s role.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:47:26.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; interestingly I found &lt;@Lynna&gt; tried something along these lines before in &lt;https://github.com/racket/racket/blob/master/pkgs/racket-benchmarks/tests/racket/benchmarks/places/place-processes.rkt&gt;</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:47:46.000100</ts>
    <user>Monserrate</user>
    <text>also I think there's now a build system option for process-based places</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:48:24.000200</ts>
    <user>Andreas</user>
    <text>I have taken that and structured it into a package but I had about half a day to work on it, so not really stable or anything but it's here:</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:48:25.000100</ts>
    <user>Andreas</user>
    <text>&lt;https://github.com/LinkiTools/racket-loci&gt;</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:48:33.000100</ts>
    <user>Monserrate</user>
    <text>see also &lt;http://docs.racket-lang.org/pmap/index.html&gt;</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:48:43.000200</ts>
    <user>Andreas</user>
    <text>&lt;https://pkgs.racket-lang.org/package/loci-dev&gt;</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:49:09.000100</ts>
    <user>Monserrate</user>
    <text>yeah i saw that when i searched for the pkg that didn't exist that I thought I remembered :slightly_smiling_face:</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:50:22.000100</ts>
    <user>Louanne</user>
    <text>this distributed places stuff looks really nice</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:50:35.000100</ts>
    <user>Louanne</user>
    <text>seems not so dissimilar to a better MPI</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:52:38.000100</ts>
    <user>Lynna</user>
    <text>I don’t know why Eli originally make it `_ufixint`. Probably he wqas mostly looking at uses that count from 0.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:53:18.000100</ts>
    <user>Alesha</user>
    <text>What I mean by name of an argument; suppose we have `(define (foo argA argB argC) ...)` that does checking on `argA` `argB` and `argC` and uses `raise-argument-error` to inform users of any bad arguments. If `argA` is bad, I want to be able to have the name `argA` be mentioned in the error message. Right now the only options is to either mention the expected contract and the given value, or also specify which argument by position numbering.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:54:03.000100</ts>
    <user>Alesha</user>
    <text>Often in function's documentation, names are given to arguments so I was thinking it would be nice to be able to relate error messages to the documented argument names</text>
  </message>
  <message conversation_id="852">
    <ts>2018-10-08T14:54:15.000100</ts>
    <user>Alesha</user>
    <text>or formal arguments?</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T14:59:05.000100</ts>
    <user>Alesha</user>
    <text>Borrowing the example from &lt;https://docs.racket-lang.org/reference/exns.html?q=directory#%28def._%28%28quote._~23~25kernel%29._raise-argument-error%29%29&gt;

`(define (feed-machine bits)
   (if (not (integer? bits))
     (raise-argument-error 'feed-machine "integer?" bits)
     "fed the machine"))`

if bad argument is given for bits will produce

feed-machine: contract violation
   expected: integer?
   given: 'turkey`

I'd like the error message to instead say

feed-machine: contract violation
   expected: integer?
   given: 'turkey
   argument: bits</text>
  </message>
  <message conversation_id="852">
    <ts>2018-10-08T14:59:38.000100</ts>
    <user>Alesha</user>
    <text>I realize it may seem pedantic but when dealing with functions with multiple arguments, it's helpful to know which argument is bad :slightly_smiling_face:</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:00:20.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; Here's a comparison between places and my library on a 64core machine... for places, we already know (as posted on the mailing list) but again:</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:00:48.000100</ts>
    <user>Andreas</user>
    <text>None</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:01:00.000100</ts>
    <user>Andreas</user>
    <text>with loci-dev:</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:01:15.000100</ts>
    <user>Andreas</user>
    <text>None</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:01:24.000100</ts>
    <user>Andreas</user>
    <text>So, hey I am happy. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:01:48.000100</ts>
    <user>Louanne</user>
    <text>wow..</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:03:46.000100</ts>
    <user>Andreas</user>
    <text>Also, starting the places takes quite awhile. Each new place past the first 20 takes just slightly longer than the previous one while the processes are launched instantaneously because `subprocess` is asynchronous and all of them come up pretty much instantaneously.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:04:12.000100</ts>
    <user>Andreas</user>
    <text>I will write to the mailing list on this to give a closure to the issue but it's looking good.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:06:17.000100</ts>
    <user>Andreas</user>
    <text>I keep being amazed at how far Racket can take you with just a few hours work. Thursday during the mailing list discussion, I told my wife : hey this library will probably take me a week to write. After I found &lt;@Lynna&gt; start on places as processes I revised that to 2 days. When I told her today at lunch time that it was working, she couldn't believe it. I told her... hey, that's racket for you. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:07:20.000100</ts>
    <user>Andreas</user>
    <text>Tomorrow I will move my system to using loci-dev so I can dogfood myself.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:07:47.000100</ts>
    <user>Andreas</user>
    <text>For now it's (late) dinner time on this side of the world. See you tomorrow.</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:08:08.000100</ts>
    <user>Alesha</user>
    <text>thanks &lt;@Andreas&gt; for the report, it's really cool!</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:19:19.000100</ts>
    <user>Louanne</user>
    <text>I just get my friend to loan me their machine</text>
  </message>
  <message conversation_id="851">
    <ts>2018-10-08T15:21:52.000100</ts>
    <user>Louanne</user>
    <text>yeah, I feel pretty promising about this. I have a kind of mess of ocaml code implementing this I’d like rebuild in ocaml</text>
  </message>
  <message conversation_id="853">
    <ts>2018-10-08T15:47:59.000100</ts>
    <user>Lynna</user>
    <text>I’m guessing that you’ve noticed that `raise-argument-error` supports reporting which argument is bad in terms of an argument position, as long as you also supply the other arguments (to include those other argument in the error message, too). But it’s not very convenient.
I view the names of formal arguments to be the implementation’s business and not exposed to callers, much like the body of the function.
I also think of argument names in documentation as being specific to the documentation, and not something with a run-time instantiation. That is, if I rename the argument in the documentation, I would not expect that to imply an implementation change. And not all arguments have sensible names outside of documentation, such as the arguments to `+`.
So that’s why I’m pushing back on the notion of an argument “name”. But I think an optional “role description” for an argument is sensible and general.</text>
  </message>
  <message conversation_id="853">
    <ts>2018-10-08T16:09:38.000100</ts>
    <user>Alesha</user>
    <text>That makes sense and convinces me it's a bad idea to reply on argument names which is too implementation dependent. An optional "role description" would be nice to have, the current `raise-argument-error` can be extended to have the extra optional argument instead of creating an entire new variant.</text>
  </message>
  <message conversation_id="854">
    <ts>2018-10-09T21:00:21.000100</ts>
    <user>Helena</user>
    <text>&lt;@Burton&gt; &lt;@Dia&gt; I think the package server needs a restart; it's hanging when I try to make a version exception</text>
  </message>
  <message conversation_id="854">
    <ts>2018-10-09T21:02:21.000100</ts>
    <user>Helena</user>
    <text>502 proxy error reading from remote server</text>
  </message>
  <message conversation_id="855">
    <ts>2018-10-10T04:29:18.000100</ts>
    <user>Dia</user>
    <text>I believe it is up?</text>
  </message>
  <message conversation_id="854">
    <ts>2018-10-10T09:52:24.000100</ts>
    <user>Helena</user>
    <text>hm, clicking "save changes" saves the version exception but the website eventually 502's</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:05:30.000100</ts>
    <user>Carter</user>
    <text>Hi. Would it be possible to match against a hash (hash "a" 1 "b" 2 . . .) with syntax-parse?</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:25:31.000100</ts>
    <user>Carter</user>
    <text>My aim is to create a macro that rewrites    (hash "a" 1 "b" 2 "c" 3 . . .)    to   [a 1] [b 2] [c 3] ...</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:31:44.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Carter&gt; yes, you'd want a pattern like `(hash (~seq key val) ...)`</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:32:08.000100</ts>
    <user>Carter</user>
    <text>hmm i feel like i already tried that.</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:33:40.000100</ts>
    <user>Carter</user>
    <text>This just gives a very unspecific syntax error: unpack-hash: bad syntax in: (unpack-hash pars) #(476 18)</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:34:20.000100</ts>
    <user>Monserrate</user>
    <text>that's because `pars` isn't that</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:34:28.000100</ts>
    <user>Carter</user>
    <text>And for testing i am just doing #''key ...</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:34:29.000100</ts>
    <user>Monserrate</user>
    <text>`pars` is an identifier</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:34:40.000100</ts>
    <user>Carter</user>
    <text>i defined (define pars (hash ...))</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:34:48.000100</ts>
    <user>Monserrate</user>
    <text>what does `(unpack-hash (hash ...))` do?</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:35:07.000100</ts>
    <user>Monserrate</user>
    <text>macros don't look at what you defined it to be</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:35:19.000100</ts>
    <user>Monserrate</user>
    <text>they match the syntax of the arguments</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:35:35.000100</ts>
    <user>Monserrate</user>
    <text>which here is just an identifier</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:35:42.000100</ts>
    <user>Carter</user>
    <text>it does what i expect ...</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:36:56.000100</ts>
    <user>Carter</user>
    <text>That works :_( so i was confused.</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:37:23.000100</ts>
    <user>Carter</user>
    <text>so a macro can not access anything i defined as described?</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:37:30.000100</ts>
    <user>Monserrate</user>
    <text>right</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:37:46.000100</ts>
    <user>Carter</user>
    <text>because the pars only exist at runtimeß</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:37:47.000100</ts>
    <user>Carter</user>
    <text>?</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:39:08.000100</ts>
    <user>Carter</user>
    <text>Thanks for clearing my understanding and the issue up :grinning:</text>
  </message>
  <message conversation_id="856">
    <ts>2018-10-10T14:40:20.000100</ts>
    <user>Monserrate</user>
    <text>yes, that's correct</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:06:01.000100</ts>
    <user>Andreas</user>
    <text>How can I wait on an input port until there are bytes to consume? I see the `eof-evt` but that's the opposite of what I need... I want to basically do a blocking read on an input port.</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:06:55.000100</ts>
    <user>Franklin</user>
    <text>Blocking read? But read, read-bytes etc block as standard.</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:07:33.000100</ts>
    <user>Monserrate</user>
    <text>you might also be interested in `read-bytes-evt`</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:29:52.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; doesn't look like it, read is returning `eof` when there's nothing in the fileport.</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:30:13.000100</ts>
    <user>Franklin</user>
    <text>that surprises me</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:30:43.000100</ts>
    <user>Eugena</user>
    <text>"A port can be used as a synchronizable event. An input port is ready for synchronization when read-byte would not block..." (from &lt;http://docs.racket-lang.org/reference/ports.html&gt;)</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:30:46.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; but you need to set a certain number of bytes to read. i use `fasl-&amp;gt;s-exp` to read from the port.</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:32:15.000100</ts>
    <user>Franklin</user>
    <text>is it a standard file or a file-stream-port ?</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:32:56.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; thanks, interestingly that seems to imply read blocks but not the way I am seeing it...</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:33:06.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; that's a file-stream-port from a subprocess.</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:33:14.000100</ts>
    <user>Franklin</user>
    <text>hmm</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:34:04.000100</ts>
    <user>Carlyn</user>
    <text>it won’t (or at least shouldn’t) return `eof` unless the other end of the port is genuinely closed.</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:34:14.000100</ts>
    <user>Andreas</user>
    <text>ok, let me do some further experimentation to see what's happening...</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:34:56.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; oh... good one, it might be closed in my specific example since the process died.</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:35:33.000100</ts>
    <user>Carlyn</user>
    <text>yes, if the process is dead, and you’ve read everything that was in the port, then it would return `#&amp;lt;eof&amp;gt;`.</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:47:04.000100</ts>
    <user>Alesha</user>
    <text>I'm seeing a behavior with local Racket installations I don't understand why is happening.

To give a brief overview, I'm seeing this on a Windows machine, I have an existing test suite for an application. When I use a local Racket installation extracted from a current minimal release tar file downloaded from &lt;http://racket-lang.org|racket-lang.org&gt; to run the suite, the test suite runs much slower compared to when the system Racket installed via standard Window installer is used to run the test suite; consistently an average of 5 mins versus 46 seconds test suite runtime when using local versus system Racket. I figure it's probably an issue with zo files not being used even though the the tar file is bundled with zo files. When I run `raco setup` over the local racket installation, the test suite runs much faster, achieving parity with the system Racket times.

This has been the case for a while, across several Racket versions now. It was a nonissue, I had other things to worry about. Recently I copied the local Racket installation and the test suite to another location, when I reran the test suite, it ran much slower which surprised me. All of the source and zo files in the copied local Racket installation are identical to the original one yet the copied test suite is taking multiple minutes to complete instead of less than one minute as I had been expecting.

If I run `raco setup` again over the copy, the test suite runs quickly again. I find this puzzling, are zo files sensitive to their filesystem locations? Is there a reason why copying a Racket tree to another location would result in a behavior that suggests zo files are no longer being loaded?</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:48:24.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Alesha&gt; my initial guess is that the timestamps are off somewhere</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:48:34.000100</ts>
    <user>Monserrate</user>
    <text>Racket won't use .zo files that are out of date</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:48:51.000100</ts>
    <user>Monserrate</user>
    <text>so if the .rkt file is newer than the .zo file, then it won't use the .zo file</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:49:57.000100</ts>
    <user>Alesha</user>
    <text>ok so maybe the copying process is copying zo files  before rkt files which could account for that. It's odd though, why would Windows copy zo files first before rkt files?</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:50:34.000100</ts>
    <user>Monserrate</user>
    <text>I don't know</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:50:47.000100</ts>
    <user>Monserrate</user>
    <text>but that's what I would look for if this happens again</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:51:24.000100</ts>
    <user>Alesha</user>
    <text>I guess it shows that I cannot depend on the static relationship of files and their timestamps to be preserved across copies</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:53:23.000100</ts>
    <user>Monserrate</user>
    <text>again, I don't actually know if this is what happened to you</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:53:27.000100</ts>
    <user>Monserrate</user>
    <text>but it's a theory</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T16:53:45.000100</ts>
    <user>Alesha</user>
    <text>I'm going to see if I can prove or disprove the theory</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T17:03:26.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Monserrate&gt; ok if I make arrangements for the original timestamps to be preserved when copying the original local Racket installation and the test suite files, the runtime does not suffer, so this would be evidence in support of your theory. My additional supplemental guess is that unless sufficient care is taken, the order of which zo and rkt files are copied may be nondeterministic.</text>
  </message>
  <message conversation_id="857">
    <ts>2018-10-10T17:04:13.000100</ts>
    <user>Alesha</user>
    <text>so it's something for me to be aware of for the future</text>
  </message>
  <message conversation_id="858">
    <ts>2018-10-10T17:33:22.000100</ts>
    <user>Bertha</user>
    <text>Or unless it is the `current-read-interaction` of certain `#langs`, which delimit expressions with `eof` :grin:</text>
  </message>
  <message conversation_id="858">
    <ts>2018-10-10T17:36:11.000100</ts>
    <user>Bertha</user>
    <text>But that's not a port, so yeah.</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:15:32.000100</ts>
    <user>Andreas</user>
    <text>Is there any way to open further communication channels with a subprocess besides what we are given by the `subprocess` function?</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:18:10.000100</ts>
    <user>Tami</user>
    <text>I believe stdin stdout and stderr would be the only standard channels, what others were you hoping for?</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:21:45.000100</ts>
    <user>Tami</user>
    <text>If the subprocess is long lived and opens it's own sockets for communication, then I guess you could connect to those.</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:21:47.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Tami&gt; be able to create an extra channel between the process and subprocess.</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:22:43.000100</ts>
    <user>Andreas</user>
    <text>I was thinking more about named pipes.</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:23:40.000100</ts>
    <user>Tami</user>
    <text>Hmmm.. It would depend on what the subprocess supported.</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:24:50.000100</ts>
    <user>Tami</user>
    <text>In most languages I've used then OS subprocesses are only ever guaranteed to have the 3 standard streams. Maybe an expert knows better.</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:24:55.000100</ts>
    <user>Andreas</user>
    <text>Oh, just noticed &lt;@Eugena&gt; implemented unix sockets for racket. that would do.</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:26:16.000100</ts>
    <user>Tami</user>
    <text>Ah, sorry, I thought you meant extra streams, not a different form of communication other than streams. My bad.</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:32:29.000100</ts>
    <user>Andreas</user>
    <text>It seems &lt;@Marnie&gt; also implemented something along the lines of unix sockets in `net2`, or at least started... Can't find docs. &lt;@Marnie&gt; how's it going?</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:42:06.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Andreas&gt; there's also zeromq if you need something more than simple streams</text>
  </message>
  <message conversation_id="859">
    <ts>2018-10-11T08:50:12.000100</ts>
    <user>Andreas</user>
    <text>thanks, I will take a look.</text>
  </message>
  <message conversation_id="860">
    <ts>2018-10-11T10:21:40.000100</ts>
    <user>Bertha</user>
    <text>If you also need to support Win and can't use unix sockets, of course there's also the option of a TCP connection. (Needn't be HTTP.)</text>
  </message>
  <message conversation_id="860">
    <ts>2018-10-11T10:21:53.000100</ts>
    <user>Bertha</user>
    <text>Drawback: Even if you listen only for localhost connections, JS in a browser can make local connections, so you want some mitigation of that vuln.</text>
  </message>
  <message conversation_id="860">
    <ts>2018-10-11T10:22:20.000100</ts>
    <user>Bertha</user>
    <text>e.g. Supply a random token to the launched process that will accept connections, and require connection attempts to supply that same token.</text>
  </message>
  <message conversation_id="860">
    <ts>2018-10-11T10:22:55.000100</ts>
    <user>Bertha</user>
    <text>Idea:  "It me. I am the thing that launched you. (And if browser JS can launch local programs, you have bigger problems.)"</text>
  </message>
  <message conversation_id="860">
    <ts>2018-10-11T10:56:08.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; thanks, I don't think I have to support Windows. Most large systems to run my software are running some sort of Linux server edition.</text>
  </message>
  <message conversation_id="861">
    <ts>2018-10-11T10:59:07.000100</ts>
    <user>Andreas</user>
    <text>I am trying to pump all the data from a process'  `input-port` to `(current-output-port)`, is there a library out there to ease this? Or I need to manually create a thread that listens on one port and writes to the other? It's not that hard but I would prefer to have something like `port-pump in out` or something...</text>
  </message>
  <message conversation_id="861">
    <ts>2018-10-11T11:03:42.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Andreas&gt; `copy-port` from racket/port</text>
  </message>
  <message conversation_id="861">
    <ts>2018-10-11T11:04:52.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; awesome, that's exactly it. Thanks.</text>
  </message>
  <message conversation_id="862">
    <ts>2018-10-11T19:20:34.000100</ts>
    <user>Catrice</user>
    <text>Is it feasibly possible to write a Racket script that can effectively "export DrRacket's binding arrows" for a file?  I'm imagining a file output that basically says `&amp;lt;name&amp;gt; used@ &amp;lt;file, line, col&amp;gt; defined@ &amp;lt;file, line, col&amp;gt;`, for each identifier in the file</text>
  </message>
  <message conversation_id="862">
    <ts>2018-10-11T19:20:46.000100</ts>
    <user>Catrice</user>
    <text>(this is more detailed information than e.g. `ctags` could provide)</text>
  </message>
  <message conversation_id="862">
    <ts>2018-10-11T20:41:19.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Catrice&gt; it's certainly possible, I think you want &lt;http://docs.racket-lang.org/drracket-tools/Accessing_Check_Syntax_Programmatically.html&gt;</text>
  </message>
  <message conversation_id="862">
    <ts>2018-10-11T20:42:49.000100</ts>
    <user>Catrice</user>
    <text>thanks</text>
  </message>
  <message conversation_id="862">
    <ts>2018-10-11T22:05:28.000100</ts>
    <user>Catrice</user>
    <text>&lt;@Monserrate&gt; that got me where I wanted.  I'm confused, though -- using the sample code for `arrows` on that page, and an arbitrary racket file as input, there seem to be a lot of duplicate arrows that show up in the output (as in, identical pairs of from/to source locations).  why might that be?  I'm guessing it has to do with the nine other parameters that are being ignored in that documentation snippet, but I'm not certain</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T03:55:23.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; I regularly have this problem when working with `racket/base` lang. I am writing using `racket-mode` and do for example `(define  tmp (make-temporary-file))`. Then I run and baamm, racket complains that `make-temporary-file` is an unbound identifier. Is there a way in racket-mode, with a keypress to adjust my requires so that I have no extra requires or missing requires? There are a few require utilities in `racket-mode` but none that does this. Am I wrong?</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T03:56:50.000100</ts>
    <user>Andreas</user>
    <text>ok. I understand that it's not easy to achieve this because many libraries can export the same identifier, but maybe this would be easy to do if the identifier is provided by a racket sublibrary?</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:06:19.000100</ts>
    <user>Andreas</user>
    <text>In my implementation of `loci`, I need to mimic the fact that a place is ready for synchronization when a message is available on the channel. However, the interesting thing here is that the result of synchronization is _not_ the channel, but instead is the message. How is this implemented? Native places seem to be implemented in C so no help there and the version based on threads doesn't seem to be doing the right thing - but most likely the problem is mine in not understanding `#:property prop:evt` when a lambda is given. The documentation refers to `guard-evt` whose documentation I can't understand. Can someone explain how this works to me? I promise to create a PR to improve the docs once I understand it.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:08:38.000100</ts>
    <user>Monserrate</user>
    <text>you might take a look at the Chez implementation of places</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:10:03.000100</ts>
    <user>Andreas</user>
    <text>You mean the racket-on-chez implementation of places? is that in racket?</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:11:58.000200</ts>
    <user>Monserrate</user>
    <text>partly here: &lt;https://github.com/racket/racket/blob/master/racket/src/thread/place.rkt&gt;</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:12:10.000200</ts>
    <user>Monserrate</user>
    <text>partly here: &lt;https://github.com/racket/racket/blob/master/racket/src/cs/rumble/place.ss&gt;</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:13:50.000100</ts>
    <user>Andreas</user>
    <text>thanks for the references</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:17:21.000100</ts>
    <user>Monserrate</user>
    <text>a `guard-evt` is basically a function that produces an event, and it's ready when the event produced is ready</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:18:47.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Andreas&gt; you may find the following paper useful for discussing similar issues and how to handle them robustly: &lt;https://www.cs.utah.edu/plt/publications/pldi04-ff.pdf&gt;</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:20:00.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Andreas&gt; I empathize. Don't have much bandwidth right now to think/implement, but, two quick thoughts:
1. You could start a new file with `#lang racket`, and switch to `#lang racket/base` using `M-x racket-base-requires` only after the "edit/churn velocity" of the file settles down.  But, not ideal. e.g. Easy to forget to switch it, and, "heavy" during dev when you least want it.
2. I can imagine something that prompts the user to pick the module to `require`, when ambig, or just adds it when clear. Much like how help search works on &lt;http://docs.r-l.org|docs.r-l.org&gt;. But again, don't have time this week to work on that. (Would welcome a PR, though also not so much time to review a PR right now.)</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:20:50.000100</ts>
    <user>Bertha</user>
    <text>TL;DR Understand the need, good feature idea.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:23:02.000200</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; ok, maybe I am missing something then. Need to study the code better. From looking at the code in `thread/place.rkt` it seems the trick lives in `place-channel`, `prop:evt` property.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:23:08.000100</ts>
    <user>Andreas</user>
    <text>```
  #:property prop:evt (poller (lambda (self poll-ctx)
                                (define in-mq (ephemeron-value (pchannel-in-mq-e self)))
                                (if in-mq
                                    (dequeue! in-mq
                                              (lambda (v)
                                                (values #f
                                                        (wrap-evt
                                                         always-evt
                                                         (lambda (a)
                                                           ;; Convert when out of atomic region
                                                           (un-message-ize v)))))
                                              (lambda (sema)
                                                (values #f (replace-evt sema (lambda (s) self)))))
(values #f never-evt))))
```</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:23:21.000100</ts>
    <user>Andreas</user>
    <text>what's that `poller`? it's not documented.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:23:34.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; thanks, will read.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:24:19.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt; thanks, lets see if I can get a PR out.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:24:49.000100</ts>
    <user>Monserrate</user>
    <text>that code is written against lower layers which aren't exposed, so not everything is documented</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:25:04.000100</ts>
    <user>Monserrate</user>
    <text>I can't remember if `poller` is written in that layer or in the `cs` code</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:25:12.000100</ts>
    <user>Eugena</user>
    <text>looks like the same as `unsafe-poller`</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:26:11.000100</ts>
    <user>Andreas</user>
    <text>ah, that one I can find... quite low level stuff already.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:26:47.000100</ts>
    <user>Andreas</user>
    <text>maybe what I need is related to that `replace-evt`...</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:30:39.000100</ts>
    <user>Andreas</user>
    <text>hummm... `wrap-evt` is also a good candidate! :slightly_smiling_face:</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:41:02.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Lynna&gt; in the code above, it seems like messages would get lost when synchronizing on two place channels, since the success case of `dequeue!` pops a message and puts it in an evt without forcing the scheduler to commit to that evt. (The docs for `sync` say that if multiple evts are ready (like wrapped `always-evt`s), one is chosen pseudo-randomly.)</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:46:19.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Eugena&gt; The `poller` context is unusual in that returning `always-evt` means that the event will be selected.</text>
  </message>
  <message conversation_id="864">
    <ts>2018-10-12T10:46:46.000100</ts>
    <user>Lynna</user>
    <text>See the `poller` declaration in “evt.rkt”</text>
  </message>
  <message conversation_id="864">
    <ts>2018-10-12T10:48:17.000100</ts>
    <user>Eugena</user>
    <text>ah, thanks</text>
  </message>
  <message conversation_id="864">
    <ts>2018-10-12T10:50:15.000100</ts>
    <user>Eugena</user>
    <text>So the first result value is a fast path rather than being the only way of forcing the scheduler to select the current event.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:50:18.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; I’m not certain in this case, but I would expect you to be able to do what you want without dropping down to the level of `unsafe-poller`. Often it’s a matter of using the existing event constructs in the right (but not obvious way). The primitive implementation of place messages has to be that primitive because it’s essentially the primitive implementation of an OS-thread–Racket-thread bridge.</text>
  </message>
  <message conversation_id="864">
    <ts>2018-10-12T10:50:50.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Eugena&gt; Yes. And that fast path doesn’t support running in non-atomic mode.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T10:51:17.000100</ts>
    <user>Andreas</user>
    <text>Yes, after reading the docs... very slowly... I think I got it! :slightly_smiling_face: Running some tests... thanks.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T12:59:14.000100</ts>
    <user>Marnie</user>
    <text>`net2` is meant to provide a wrapper to let you send HTTP requests over Unix sockets, tcp sockets, and in-process pipes to other places / threads with the same interface - started work on it and got somewhat far but stalled on it for various non-technical reasons. I hope to get back to it eventually.</text>
  </message>
  <message conversation_id="863">
    <ts>2018-10-12T13:00:14.000100</ts>
    <user>Marnie</user>
    <text>It's definitely not in a usable state yet, at least for your purposes</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T14:42:11.000100</ts>
    <user>Marinda</user>
    <text>Is there a sequence generator like `in-combinations` that will pick one element from multiple lists? So for `'((1) (2 3) (4 5 6))` it would emit `'((1 2 4) (1 2 5) (1 2 6) (1 3 4) (1 3 5) (1 3 6))`</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T14:43:17.000200</ts>
    <user>Marinda</user>
    <text>(I know this can be done with nested iterators, but in this case I need to do it at run time)</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T14:44:10.000100</ts>
    <user>Franklin</user>
    <text>A cross product?</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T14:54:20.000100</ts>
    <user>Marinda</user>
    <text>If that’s the right term. I would’ve called it a Cartesian product</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T14:54:52.000100</ts>
    <user>Franklin</user>
    <text>That's what I meant.</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T14:57:31.000100</ts>
    <user>Franklin</user>
    <text>I find one. A reasonable easy way to make one, is to modify one of (say Chris's) solution from StackOverflow to use sequences rather than lists. &lt;https://stackoverflow.com/questions/27770566/racket-map-cartesian-product-thing&gt;</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T14:57:50.000100</ts>
    <user>Franklin</user>
    <text>"I find one" -&amp;gt; "I can't find one"</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T15:11:31.000200</ts>
    <user>Marinda</user>
    <text>True, though I have to avoid generating all the intermediate lists. I suppose this works:</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T15:11:33.000100</ts>
    <user>Marinda</user>
    <text>```#lang racket
(require racket/generator)
(define (in-cartesian xss)
  (in-generator (let loop ([xss xss][args empty])
                  (if (null? xss)
                      (yield (reverse args))
                      (for ([x (in-list (car xss))])
                        (loop (cdr xss) (cons x args)))))))

(for/list ([x (in-cartesian '((1) (2 3) (4 5 6)))])
  x)
```</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T15:17:48.000100</ts>
    <user>Franklin</user>
    <text>Nice, compact solution.</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T15:19:32.000100</ts>
    <user>Carlyn</user>
    <text>Racket has a `cartesian-product` function, but maybe there should be a streaming variant, too. &lt;http://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Flist..rkt%29._cartesian-product%29%29&gt;</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T15:23:12.000100</ts>
    <user>Marinda</user>
    <text>I see what you did there &lt;http://docs.racket-lang.org/collections/collections-api.html?q=cartesian#%28def._%28%28lib._data%2Fcollection..rkt%29._cartesian-product%29%29&gt;</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T15:25:12.000100</ts>
    <user>Franklin</user>
    <text>same name?</text>
  </message>
  <message conversation_id="865">
    <ts>2018-10-13T15:50:01.000100</ts>
    <user>Carlyn</user>
    <text>Oh, I forgot about that. I don’t know that I actually recommend that library…</text>
  </message>
  <message conversation_id="866">
    <ts>2018-10-13T18:11:51.000100</ts>
    <user>Catrice</user>
    <text>Ok, related question: suppose I have a file `provider.rkt` that provides `foo` and `bar`, and a file `requirer.rkt` that requires it.  How could I implement "Jump to definition (in other file)"?  Assuming that I could read both files, how can I convince Racket to give me the transitive binding site, rather than just the location of the `require`?</text>
  </message>
  <message conversation_id="866">
    <ts>2018-10-13T18:14:27.000100</ts>
    <user>Catrice</user>
    <text>I'm guessing it's syncheck:add-jump-to-definition, or syncheck:add-definition-target, but I don't quite understand those yet</text>
  </message>
  <message conversation_id="866">
    <ts>2018-10-13T22:54:09.000100</ts>
    <user>Catrice</user>
    <text>...I might've gotten it working, or at least plausibly so.</text>
  </message>
  <message conversation_id="867">
    <ts>2018-10-13T23:53:38.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; Do you think it might be reasonable to use `(pango_cairo_font_map_new_for_font_type CAIRO_FONT_TYPE_FT)` in the `dc`s `get-fontmap` function, rather than `(pango_cairo_font_map_new)`, which is what we currently use?</text>
  </message>
  <message conversation_id="867">
    <ts>2018-10-13T23:54:30.000100</ts>
    <user>Odis</user>
    <text>Because if we use the pangoft bindings, it looks like we can use fontconfig to allow pango to draw custom fonts.</text>
  </message>
  <message conversation_id="867">
    <ts>2018-10-13T23:54:43.000100</ts>
    <user>Odis</user>
    <text>(Instead of requiring them to be install system wide like we do now.)</text>
  </message>
  <message conversation_id="866">
    <ts>2018-10-14T16:11:40.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Catrice&gt; racket-mode implements something like that as well</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-15T07:08:19.000100</ts>
    <user>Andreas</user>
    <text>Is there a way to ensure `copy-port` is unbuffered? I am seeing processes dying due to error without any output through `copy-port`, output comes all in one chunk when the process finishes successfully.</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-15T07:21:20.000200</ts>
    <user>Andreas</user>
    <text>I am actually looking at the code of copy-port and it doesn't seem like its buffering anything which is all the more strange. :confused:</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-15T09:11:49.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Andreas&gt; Many ports are buffered by default, and it looks like `copy-port` never calls `flush-output`. One option is to set the buffer mode of the output ports to unbuffered and use the existing `copy-port`; another is to make your own `copy-port` that calls `flush-output`. (Seems like it would be useful to add a `#:flush?` option to `copy-port` too.)</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-15T09:14:03.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; I have defined my own `copy-port` for now with flushing enabled. I will send a PR.</text>
  </message>
  <message conversation_id="869">
    <ts>2018-10-16T01:36:36.000100</ts>
    <user>Gerardo</user>
    <text>Hi there!  I am using the code below to append strings to a file:
```
(define (save-string str)
   (write (string-append str "\n") (open-output-file data-file #:exists 'append #:mode 'text))
)
```
But here is what I get:
```
one
two
three
"foo bar\n"
```
where `"foo bar\n"` was added by `save-string`.  What I want is a file that looks like

```
one
two
three
foo bar
```</text>
  </message>
  <message conversation_id="869">
    <ts>2018-10-16T01:36:51.000100</ts>
    <user>Gerardo</user>
    <text>(with a new-line at the end)</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-16T02:16:01.000200</ts>
    <user>Andreas</user>
    <text>&lt;@Gerardo&gt; You are getting that because you are using `write`.</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-16T02:16:01.000300</ts>
    <user>Andreas</user>
    <text>&lt;https://docs.racket-lang.org/reference/Writing.html?q=write#%28def._%28%28quote._~23~25kernel%29._write%29%29&gt;</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-16T02:16:25.000100</ts>
    <user>Andreas</user>
    <text>Write behaves like that because cores instances need to able to be read back in.</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-16T02:17:15.000100</ts>
    <user>Andreas</user>
    <text>Try for your case `fprintf` on the output-port and then don't forget to close it.</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-16T02:17:52.000200</ts>
    <user>Andreas</user>
    <text>or even better use `with-output-to-file` which automatically closes the port:</text>
  </message>
  <message conversation_id="868">
    <ts>2018-10-16T02:17:53.000100</ts>
    <user>Andreas</user>
    <text>&lt;https://docs.racket-lang.org/reference/file-ports.html?q=with-output-to-file#%28def._%28%28lib._racket%2Fprivate%2Fbase..rkt%29._with-output-to-file%29%29&gt;</text>
  </message>
  <message conversation_id="870">
    <ts>2018-10-16T09:54:32.000100</ts>
    <user>Aimee</user>
    <text>FWIW there's a `write-string` function &lt;https://docs.racket-lang.org/reference/Byte_and_String_Output.html#(def._((quote._~23~25kernel)._write-string))&gt;</text>
  </message>
  <message conversation_id="871">
    <ts>2018-10-16T10:55:16.000100</ts>
    <user>Karry</user>
    <text>anyone right-clicked on an imported variable in DrRacket to rename it and seen anything like this? (i.e. the renaming prompt seems to think the import text in the module _is_ the identifier)</text>
  </message>
  <message conversation_id="871">
    <ts>2018-10-16T11:56:26.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Karry&gt; I've never seen that particular issue but after seeing your snip I noticed `path-up` which I had no idea existed and would be very useful for my current project, so thanks for the serendipitous moment</text>
  </message>
  <message conversation_id="872">
    <ts>2018-10-16T14:06:37.000100</ts>
    <user>Freida</user>
    <text>Ooh... do we believe that DrRacket is currently working on Mojave? Methinks I may have upgraded this machine too soon....</text>
  </message>
  <message conversation_id="872">
    <ts>2018-10-16T14:08:18.000100</ts>
    <user>Freida</user>
    <text>Interesting... reproducible crash when clicking "show details..." in the language menu in Mojave. No point in filing a bug report if DrRacket isn't yet known to be supported on Mojave, though.</text>
  </message>
  <message conversation_id="872">
    <ts>2018-10-16T14:18:24.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Freida&gt; It seems worth filing a bug report even if Racket is known to not be supported on Mojave, just to track the issue, but I don’t know if an issue already exists</text>
  </message>
  <message conversation_id="872">
    <ts>2018-10-16T14:27:00.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Freida&gt; &lt;@Lynna&gt; has made some Mojave-related commits recently</text>
  </message>
  <message conversation_id="872">
    <ts>2018-10-16T15:49:20.000100</ts>
    <user>Tiesha</user>
    <text>&lt;@Freida&gt; I’ve been running racket / DrRacket on Mojave for a few weeks without problems. I just tried “Language / Show Details” and my DrRacket behaved normally. I’m using version 7.0.0.6--2018-07-08(4d158a8cb8/a) [3m] which I think I got from a nightly, just before Racket School.</text>
  </message>
  <message conversation_id="873">
    <ts>2018-10-16T16:00:16.000100</ts>
    <user>Tiesha</user>
    <text>Mojave didn’t break my DrRacket, but it did break my Emacs (macports emacs-app).  I think the MacPorts people have fixed that though. &lt;https://trac.macports.org/ticket/57217&gt;</text>
  </message>
  <message conversation_id="872">
    <ts>2018-10-16T16:05:09.000100</ts>
    <user>Freida</user>
    <text>Okay, that's really good to hear. I mean, it's not good to hear that others can't reproduce my issue, but it *is* good to hear that others are running on Mojave without problems.</text>
  </message>
  <message conversation_id="872">
    <ts>2018-10-16T20:03:10.000100</ts>
    <user>Lynna</user>
    <text>Releases and nightly builds should run fine on Mojave. When you build your own from the Git repo, though, you probably don’t force 10.6 compatibility by pointing `configure` at a 10.6 SDK. Building that way (or any SDK before 10.14) makes Racket work ok – although I don’t know how the dynamically loaded OS framework knows that its running in an application built for earlier than 10.14.</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-16T22:12:49.000100</ts>
    <user>Gerardo</user>
    <text>&lt;@Andreas&gt;, Thanks very much -- that worked!</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-16T22:42:28.000100</ts>
    <user>Gerardo</user>
    <text>I'd like to open a file in an editor (emacs) in a racket script that I am developing.  Is there a way to do that?</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-16T22:43:33.000100</ts>
    <user>Gerardo</user>
    <text>I'm having trouble getting `shell-execute` to work for me</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T02:19:54.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Gerardo&gt; Are you using `racket-mode`?</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T04:18:53.000100</ts>
    <user>Andreas</user>
    <text>What's the best way to run a single racket test library directly through racket? I tried for example: `racket -l ./pkgs/racket-test-core/tests/racket/read.rktl` but this is not it.</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T07:45:37.000100</ts>
    <user>Gerardo</user>
    <text>&lt;@Andreas&gt;, No, not using `racket-mode` in emacs.  I use vscode as an editor for writing racket code.  My little project is note-taking app: `note -a blah blah` adds a line to a file `data.txt`, `note foo` displays all lines containing `foo`, and `note foo bar` displays all lines containing both `foo` and `bar`.  Etc.  I would like to be able to say `note -e` to bring up `data.txt` in an editor, e.g., emacs, if I want to correct entries.</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T07:55:46.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Andreas&gt; `racket -l` takes a module path so in your case you’d do `racket -l tests/racket/read`</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T08:05:11.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Alesha&gt; you can’t do that because read.rktl isn’t a module</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T08:05:31.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; you want -f</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T08:12:01.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; thanks! that's what I needed. Does that simply evaluate the file without assuming a module?</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T08:12:46.000100</ts>
    <user>Monserrate</user>
    <text>I recommend looking at the racket command line help for the precise answer, but it uses load</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T08:19:05.000200</ts>
    <user>Alesha</user>
    <text>Ahh didn’t realize `read.rkt` isn’t a module, never mind then.</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T08:36:23.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Gerardo&gt; ah, now I understand you. Have you tried `subprocess`?</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T08:37:14.000100</ts>
    <user>Andreas</user>
    <text>Or in your case `system` might be easier to work with as it waits for the subproc to complete.</text>
  </message>
  <message conversation_id="874">
    <ts>2018-10-17T08:37:24.000100</ts>
    <user>Andreas</user>
    <text>&lt;https://docs.racket-lang.org/reference/subprocess.html?q=system#%28def._%28%28lib._racket%2Fsystem..rkt%29._system%29%29&gt;</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:06:47.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Alesha&gt; it’s actually read.rktl, which indicates that with the extension</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:09:08.000100</ts>
    <user>Del</user>
    <text>Greetings! I just joined the Racket development crowd and I have some questions. I'm working on the documentation.

1. In Racket documentation, should @tech{foo} be used on every occurrence
of "foo" once it is defined, or just on "important" occurrences?

I am working on the "Evaluation Model" documentation.

2. Section 1 includes the sentence

  "The dynamic extent of an expression is the sequence of evaluation
   steps during which the expression contains the redex."

Could someone explain this? Which redex? Do the two instances of "expression"
refer to the same expression?

3. Section 5 lists the direct values of Racket. That list disagrees with the
technical documentation, in which only fixnums are direct. I would like to define
the term "immediate object," but I need to know which types are immediate.</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:11:18.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; those two uses of expression are the same</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:12:54.000100</ts>
    <user>Monserrate</user>
    <text>The redex referred to is whatever the redex in the reduction step is</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:14:19.000100</ts>
    <user>Monserrate</user>
    <text>Which two pieces of documentation disagree?</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:27:20.000100</ts>
    <user>Del</user>
    <text>Sorry, I still don't understand. First, are we defining the dynamic extent of an expression or the dynamic extent of the value of a particular redex? After all, a particular redex only exists for one evaluation step. Then it's the redex's value that persists for awhile. All the definitions of dynamic extent I've encountered talk about the extent of a value.

The two files are reference/eval-model.scrbl and inside/values.scrbl. The latter specifies that there is a 1-bit tag that distinguishes immediate fixnums from referenced objects.</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:28:35.000100</ts>
    <user>Monserrate</user>
    <text>dynamic extent is about an expression</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:29:26.000100</ts>
    <user>Monserrate</user>
    <text>the statement means that the dynamic extent of an expression `e` is the sequence of evaluate steps `E[r] -&amp;gt; E[r']` where `r` (the redex) is contained in `e`</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:31:55.000100</ts>
    <user>Monserrate</user>
    <text>the section in the Reference says that some things can be used "directly" as values</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:32:08.000100</ts>
    <user>Monserrate</user>
    <text>the section in the Inside doc mentions "immediate" integers</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:32:13.000100</ts>
    <user>Monserrate</user>
    <text>these are different concepts</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:32:59.000100</ts>
    <user>Monserrate</user>
    <text>although the immediate integers are a subset of the things that can be used directly as values</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:40:46.000100</ts>
    <user>Gerardo</user>
    <text>&lt;@Andreas&gt; -- thankyou! `system` was the way to go.</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:46:43.000100</ts>
    <user>Del</user>
    <text>I'll ask one more question and then drop it if this is bothersome. Can you give me an actual example of an evaluation with at least two steps and show me the redex? The description of redex is very careful to explain that a redex exists for one step and is then replaced by its value. In particular, I don't understand what "the redex" means, when a sequence of evaluation steps involves multiple redexes.

The text says "A few kinds of objects can serve directly as values, including booleans, (void), and small exact integers. More generally, however, a value is a reference to an object." I can't tell from this what the difference between a direct value and an immediate value is. I think we agree that "immediate object/value" is something like a fixnum, stored directly in the reference word. What is a direct object/value?</text>
  </message>
  <message conversation_id="876">
    <ts>2018-10-17T09:47:29.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Gerardo&gt; awesome!</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:49:46.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; Consider the expression `(+ 1 (+ 2 3))`. It takes two reduction steps: `(+ 1 (+ 2 3)) -&amp;gt; (+ 1 5) -&amp;gt; 6`. In the first step, the redex is `(+ 2 3)`. In the second step, the redex is `(+ 1 5)`.</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:50:29.000100</ts>
    <user>Monserrate</user>
    <text>In that example, the dynamic extent of the original expression is those two reduction steps.</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:55:10.000100</ts>
    <user>Del</user>
    <text>Oh, that's not what I thought was going on at all. Everything you wrote here makes sense. But then what does "the redex" have to do with it, given that there are two redexes? Does "the redex" refer to the original expression (when it is selected as a redex for the reduction of the enclosing expression)?</text>
  </message>
  <message conversation_id="876">
    <ts>2018-10-17T09:55:51.000100</ts>
    <user>Ola</user>
    <text>in the first expression `(+ 1 (+ 2 3))` there is only one redex</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T09:56:51.000100</ts>
    <user>Ola</user>
    <text>I think “the redex” in the documentation probably means the next redex that will be evaluated</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T10:01:13.000100</ts>
    <user>Del</user>
    <text>Yes, there is an original redex. But the dynamic extent covers multiple reductions with multiples redexes. So perhaps "the redex" refers to the first redex, the one you highlighted.</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T10:01:50.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; what &lt;@Ola&gt; says is right</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T10:02:30.000100</ts>
    <user>Monserrate</user>
    <text>"contains the redex" could be expanded to "contains the redex of the evaluation step"</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T11:31:27.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; have you seen &lt;https://www.cs.kent.ac.uk/people/staff/sao/documents/icfp06.pdf&gt;</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T11:33:59.000100</ts>
    <user>Monserrate</user>
    <text>also scott's dissertation</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T11:34:17.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; I don’t think so, but I’m not sure if it’s relevant… it doesn’t seem to touch this particular problem (and it avoids discussing signatures altogether).</text>
  </message>
  <message conversation_id="875">
    <ts>2018-10-17T11:37:56.000100</ts>
    <user>Carlyn</user>
    <text>“Syntactic Abstraction in Component Interfaces” looks interesting and relevant to some other interest of mine, though, and probably also the relevant section of Scott’s dissertation.</text>
  </message>
  <message conversation_id="877">
    <ts>2018-10-17T15:02:05.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Odis&gt; i heard you a few days ago saying the racketcon videos will be online soon. How's it going?</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-17T20:56:56.000100</ts>
    <user>Del</user>
    <text>Thanks, folks, I think I'm clear on the dynamic extent of an expression. Could someone help me with direct values versus immediate values?

The text says "A few kinds of objects can serve directly as values, including booleans, (void), and small exact integers. More generally, however, a value is a reference to an object." I can't tell from this what the difference between a direct value and an immediate value is. I think we agree that "immediate object/value" is something like a fixnum, stored directly in the value word. What is a direct object/value?</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-17T20:59:28.000100</ts>
    <user>Carlyn</user>
    <text>I don’t think “immediate value” means anything in the context of Racket specifically, but I could be wrong.</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-17T21:03:59.000100</ts>
    <user>Ola</user>
    <text>&lt;@Del&gt; is the document in question “Inside: Racket C API” ?</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-17T21:06:56.000100</ts>
    <user>Ola</user>
    <text>I don’t know if I understand the issue but maybe you’re confusing two concepts, one is a high-level semantic one of which values can be “directly” represented in racket without evaluation, and the other is a lower-level implementation detail about which objects are directly represented in a memory word (unboxed), without references</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-17T21:12:41.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; what it means to use an object directly as a value (the document does not use the term "direct value") is that the object is not located in the heap and referred to by a pointer, but located directly inside whatever data structure is containing it</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-17T21:14:04.000100</ts>
    <user>Monserrate</user>
    <text>An immediate integer (again, the term "immediate value" is not there) is one that is represented inside the value instead of pointed to by a pointer</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-17T21:14:36.000100</ts>
    <user>Monserrate</user>
    <text>Immediate integers are one of the kinds of objects that can be used directly as values</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-17T21:37:25.000100</ts>
    <user>Marnie</user>
    <text>&lt;@Monserrate&gt; _Must_ immediate integers be used directly as values? More generally, do there exist objects such that the same object is used "directly as a value" in some places and not others?</text>
  </message>
  <message conversation_id="879">
    <ts>2018-10-17T21:37:57.000100</ts>
    <user>Marnie</user>
    <text>I'm not really sure what that would mean</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-17T21:43:40.000100</ts>
    <user>Monserrate</user>
    <text>You can't represent a pointer to a fixnum in racket's VM, I think</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-18T07:59:49.000100</ts>
    <user>Del</user>
    <text>&lt;@Monserrate&gt; I understand immediate integers. I still do not understand how "use an object directly as a value" is distinguished from an immediate object yet is not a reference to the heap. Let's take #t. According to the technical documentation I read, it is not represented as an immediate object. Isn't it then a reference to a singleton boolean true object in the heap? If not, how is it represented?</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-18T08:02:29.000100</ts>
    <user>Monserrate</user>
    <text>Again, the term immediate object is not used in the documentation</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-18T08:05:23.000100</ts>
    <user>Monserrate</user>
    <text>For how it's represented, there's a particular value which is represented with a C Scheme_Object* that's called scheme_true</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-18T08:05:49.000100</ts>
    <user>Monserrate</user>
    <text>You can look for the definition of that in the source code, I don't remember the file</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T08:10:15.000100</ts>
    <user>Gerardo</user>
    <text>Hi, I am using `string-contains?` but would like to use `string-contains-ci?` for a case insensitive search.  For the former, I use `(require racket/string)`. Then I need to say `(require lang/htdp-advanced)`.  But this generates an error complaining about line 34 of my code:
```
(define (save-string str)
   (with-output-to-file data-file
     (lambda () (printf (string-append str record-terminator)))
     #:exists 'append #:mode 'text). ;; line 34
)
```
I'll put the error message in a comment.</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T08:11:00.000100</ts>
    <user>Gerardo</user>
    <text>```
note.rkt:34:5: #%datum: keyword misused as an expression
  at: #:exists
  location...:
   note.rkt:34:5
  context...:
   raise-syntax-error
   for-loop
   [repeats 1 more time]
   finish-bodys
   lambda-clause-expander
   loop
   [repeats 14 more times]
   module-begin-k
   expand-module16
   expand-capturing-lifts
   expand-single
   temp74_0
   compile16
   temp68_2
   standard-module-name-resolver
   module-path-index-resolve
   ...
```</text>
  </message>
  <message conversation_id="878">
    <ts>2018-10-18T08:15:48.000200</ts>
    <user>Franklin</user>
    <text>&lt;@Gerardo&gt;  I have a hunch that lang/htdp-advanced redefined #%datum</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T08:16:09.000100</ts>
    <user>Franklin</user>
    <text>Therefore use (only-in ...) with you require string-contains-ci?</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T08:26:09.000100</ts>
    <user>Tami</user>
    <text>&lt;@Gerardo&gt; I know you probably thought of this, and it is less efficient but `(string-contains? (string-downcase "Fred") (string-downcase "re"))` should work.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T08:56:36.000100</ts>
    <user>Monserrate</user>
    <text>yeah, in general the `lang/htdp-*` modules are not meant as libraries for general use</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T09:38:36.000200</ts>
    <user>Gerardo</user>
    <text>&lt;@Tami&gt; -- thanks!  I will try that for now and worry about performance if it indeed becomes an issue.  There is one problem, though ... this solution lowercases the source text, so `Dr. Strangelove`, if found in a search, is returned as `dr. strangelove`</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T09:38:52.000100</ts>
    <user>Gerardo</user>
    <text>&lt;@Monserrate&gt; thanks for the heads up</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T09:56:32.000100</ts>
    <user>Jim</user>
    <text>You may use srfi/13 string-contains-ci
&lt;https://docs.racket-lang.org/srfi/srfi-std/srfi-13.html#string-contains-ci&gt;</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T09:57:36.000100</ts>
    <user>Del</user>
    <text>&lt;@Monserrate&gt; I found the definition. scheme_true is an array of 1 Scheme_Object. The object's type slot is initialized to scheme_true_type. To set something to false, it is assigned scheme_true, which is the address of the Scheme_Object.

I don't see how this differs from any other reference to a heap object, and so I don't see why #t is "used directly as a value" any more than, say, a cons. Is it possible that "used directly as a value" means allocated statically?</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:01:06.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; the difference is that to have a pair, your program has to (at some point) allocate space for a pair in the Racket heap, and put the pair there. To have `#t` in your data structure, you just put `scheme_true` there.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:01:35.000100</ts>
    <user>Monserrate</user>
    <text>That `scheme_true` is implemented by a pointer to some memory allocated in C is an implementation detail</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:01:52.000100</ts>
    <user>Monserrate</user>
    <text>But maybe if you explain what you're trying to figure out this conversation can be more productive</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T10:03:00.000100</ts>
    <user>Tami</user>
    <text>&lt;@Gerardo&gt; might need to define your own function</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T10:03:06.000100</ts>
    <user>Tami</user>
    <text>```(define (string-contains-ci? whole part)
  (string-contains? (string-downcase whole) (string-downcase part)))
```</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T10:03:43.000100</ts>
    <user>Tami</user>
    <text>That should avoid messing with the string</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T10:05:46.000100</ts>
    <user>Jim</user>
    <text>&lt;@Tami&gt; Better simply use srfi/13</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:05:55.000100</ts>
    <user>Monserrate</user>
    <text>also, if you look at the implementation of `string-contains-ci?` it does the same inefficient thing: &lt;https://github.com/racket/htdp/blob/be525ec6c6ad37904f6895b2b427fb73c04e6c46/htdp-lib/lang/private/teachprims.rkt#L672-L676&gt;</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T10:09:52.000200</ts>
    <user>Tami</user>
    <text>&lt;@Jim&gt; Sorry I don't know what srfi/13 is. &lt;@Monserrate&gt; I did say it was inefficient.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:10:20.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Tami&gt; I'm just saying that your implementation isn't any more inefficient than the alternative</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T10:10:56.000100</ts>
    <user>Jim</user>
    <text>(require srfi/13)
&lt;https://docs.racket-lang.org/srfi/srfi-std/srfi-13.html#string-contains-ci&gt;</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:11:06.000100</ts>
    <user>Tami</user>
    <text>&lt;@Monserrate&gt; but is it not better than using the htdp-* functions?</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:11:22.000100</ts>
    <user>Monserrate</user>
    <text>it is better, because the htdp-* functions are weird in other ways</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:11:37.000100</ts>
    <user>Monserrate</user>
    <text>I'm saying that your code has _no_ drawbacks over the alternative</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T10:12:09.000100</ts>
    <user>Tami</user>
    <text>&lt;@Monserrate&gt; Ok cheers. &lt;@Jim&gt; Thanks for the pointer</text>
  </message>
  <message conversation_id="880">
    <ts>2018-10-18T10:26:32.000100</ts>
    <user>Gerardo</user>
    <text>&lt;@Tami&gt;, &lt;@Monserrate&gt;, thanks so much!  t</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:31:29.000100</ts>
    <user>Gerardo</user>
    <text>&lt;@Tami&gt; -- Yay and thanks!  That does the trick, and I can rest easy that this is just as good as the library function (thanks &lt;@Monserrate&gt; for that clarification)</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:31:53.000100</ts>
    <user>Gerardo</user>
    <text>BTW, I've been using Racket for only a few days and just love it.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:32:14.000100</ts>
    <user>Tami</user>
    <text>&lt;@Gerardo&gt; No problem, I've only been using it a few months myself.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:34:12.000100</ts>
    <user>Gerardo</user>
    <text>I'm thinking of showing Racket to my son.  He is 17 -- hasn't done much programming yet, but wants to learn.  Is Racket a good choice for this?</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:37:24.000100</ts>
    <user>Monserrate</user>
    <text>yes, Racket has a lot of support for teaching programming</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:38:37.000100</ts>
    <user>Tami</user>
    <text>I would highly recommend it. I've used quite a few languages and it is definitely easier than many to get into.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:39:40.000100</ts>
    <user>Thaddeus</user>
    <text>I can't find back the article, but someone was writing about what language to show to your kids, and that he chose to leave Python behind and switch to Javascript, because it provides a curious and creative child the perfect environment for graphics, forms, overall interaction and asynchronous event-based programming bundled in an easy to share HTML file.
I guess Racket, as Python is a really good choice when it comes to interactive programming and understanding "How it works behind", but if you aim for instant satisfaction, I'd say Javascript is the best bet.
It depends on what you want to do.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:43:53.000100</ts>
    <user>Del</user>
    <text>&lt;@Monserrate&gt; Okay, that is what I determined from looking at the code. Note that I am working on eval-model.scrbl, so I'm belaboring this for purposes of understanding it so I can update the text. So now the question is: Why is this idea of "used directly as a value" of interest to the user? It seems to me that it's all an implementation detail.

The reason I keep mentioning "immediate objects" is because they are of interest to the user when discussing eq?. The user needs to know that two fixnums are eq? if they have the same value. Of course, we really don't need to define "immediate object," we can just list the types of values that are guaranteed eq? when they have the same value.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:47:04.000100</ts>
    <user>Monserrate</user>
    <text>the documentation on `eq?` describes this -- is there something missing there?</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:48:26.000100</ts>
    <user>Monserrate</user>
    <text>the point is the distinction between values and objects, which that section is about</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:50:04.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; furthermore, whether something is an immediate object isn't the only thing to know about guaranteed-`eq?` values</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:50:32.000100</ts>
    <user>Monserrate</user>
    <text>for example, keywords are not usable as values in this sense, but two keywords are `eq?` if they have the same value</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:51:43.000100</ts>
    <user>Thaddeus</user>
    <text>Plus, going from javascript to Racket is easy,
you can show how specific concepts in js translate into more general constructs in Racket.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:52:24.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; what are you hoping to change about that documentation?</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T10:54:27.000100</ts>
    <user>Thaddeus</user>
    <text>Then finally you show how to generate js from Racket, and tadaa, it comes full circle (I was about to use a French expression "la boucle est bouclée" but couldn't find the English equivalent to say "it's a wrap, everything is coming together as if it was meant to be", something like that.)</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T11:52:52.000100</ts>
    <user>Del</user>
    <text>&lt;@Monserrate&gt; When I talked to Matthew Flatt about helping with Racket, I suggested that attempting to improve some basic documentation was a good place to start and he agreed. I'm trying to make eval-model as clear as possible. I have worked on sections 1--7 so far.

I thought that defining "immediate object" would help with eq?, but I see that it really doesn't. So now we have this in section 5:

"A few kinds of objects can serve directly as values, including booleans, (void), and small exact integers. More generally, however, a value is a reference to an object stored somewhere else."

and this in section 6:

"The eq? operator compares two values, returning #t when the values refer to the same object. "

and this in section 7:

"As a special case, a fixnum is always considered reachable by the garbage collector. Many other values are always reachable due to the way they are implemented and used: A character in the Latin-1 range is always reachable, because equal? Latin-1 characters are always eq?, and all of the Latin-1 characters are referenced by an internal module. Similarly, null, #t, #f, eof, and #&amp;lt;void&amp;gt; and are always reachable."

Taken together, I think those statements are confusing. I'm left without a good mental model of what is going on with those particular types of values. So I'm just trying to clarify the text.</text>
  </message>
  <message conversation_id="882">
    <ts>2018-10-18T14:59:13.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; first, thanks for helping with the docs. Did Matthew suggest working on that portion of the reference?</text>
  </message>
  <message conversation_id="882">
    <ts>2018-10-18T15:00:14.000100</ts>
    <user>Monserrate</user>
    <text>if we changed the sentence about `eq?` to say "refer to (or are) the same object.", would that help?</text>
  </message>
  <message conversation_id="882">
    <ts>2018-10-18T15:23:15.000100</ts>
    <user>Del</user>
    <text>&lt;@Monserrate&gt; You're quite welcome. I suggested that file since it is fundamental to understanding the model and I needed a place to start learning.

Your eq? suggestion help, for sure. However, the sentences in section 5 still don't make it clear what "serve directly as values" means, and they lump fixnums and booleans in that same category, even though one is immediate and one is not. If there is no reason to bring up "serve directly as values," I think it makes sense to define "immediate objects" instead and then your eq? change can be worded in terms of that definition.

Also, I'm not sure what is the point of listing things that are always reachable. And the list is incomplete, since, for example, all the built-in procedures are also always reachable. Though I suspect the paragraph is harmless.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T15:34:03.000100</ts>
    <user>Claud</user>
    <text>I think Racket is a great choice for beginning programmers. You may want to look at How to Design Programs (extremely thorough and assumes no previous programming, but it is a textbook and introduces a pedagogical dialect of Racket) or Realm of Racket (a "fun" book that uses full Racket, probably a little faster-paced than HtDP).</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T15:36:17.000100</ts>
    <user>Claud</user>
    <text>In either case, the `2htdp/universe` library (&lt;http://docs.racket-lang.org/teachpack/2htdpuniverse.html|docs.racket-lang.org/teachpack/2htdpuniverse.html&gt;) provides a beginner-oriented way to get started with interactive graphical programs—even distributed games.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-18T15:37:50.000100</ts>
    <user>Claud</user>
    <text>I've written a fair amount of JavaScript, but I think the strange semantics and tight coupling with HTML and CSS (or node.js or something) would make me hesitant to recommend it to a beginner.</text>
  </message>
  <message conversation_id="883">
    <ts>2018-10-18T15:44:34.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; It looks like commit 9f839c11612d80592a0f94f4e19230605a4aa8c5 has a problem, namely that it breaks source locations on `define-values` forms.</text>
  </message>
  <message conversation_id="883">
    <ts>2018-10-18T15:45:15.000100</ts>
    <user>Carlyn</user>
    <text>The issue appears to be that if the syntax object passed to `keep-as-needed` is of the form `(id . _)`, then the result is `id`, but with the source locations of the whole form.</text>
  </message>
  <message conversation_id="883">
    <ts>2018-10-18T15:46:30.000100</ts>
    <user>Carlyn</user>
    <text>Maybe `keep-as-needed` should keep the properties from the whole form but the source location from `id` when it handles syntax objects of that form, or maybe it should use the `for-track?` argument for something. I don’t know enough to say.</text>
  </message>
  <message conversation_id="881">
    <ts>2018-10-19T17:03:52.000100</ts>
    <user>Claud</user>
    <text>Has anyone tried extracting Python documentation from docstrings and embedding it in Scribble documents?</text>
  </message>
  <message conversation_id="884">
    <ts>2018-10-20T04:57:50.000100</ts>
    <user>Thomas</user>
    <text>So, DrRacket isn't working under Mojave. 7.0 just silently doesn't launch, nightly crashes with `Library not loaded: @executable_path/../../../lib/Racket.framework/Versions/7.1.0.1_3m/Racket`</text>
  </message>
  <message conversation_id="884">
    <ts>2018-10-20T04:59:35.000100</ts>
    <user>Thomas</user>
    <text>It does launch from commandline `drracket`</text>
  </message>
  <message conversation_id="885">
    <ts>2018-10-20T08:27:06.000100</ts>
    <user>Nakesha</user>
    <text>hi friends, as a little project to fiddle more with Racket I decided to port my personal site to it but I am kinda torn between using frog or pollen. Both appear to be good solutions even though on one side Frog might be more appropriated since my site has a blog, and on the other hand, I love how you can build your own commands/tags with Pollen and can see myself using that a lot. Maybe the same thing is possible using scribble sources with frog. Sorry, I am new at this and wonder if some one here could share a quick comment on choosing one or the other. I know this is subjective and I am not looking to spur some form of competition, just looking for advise from more seasoned developers. Thanks.</text>
  </message>
  <message conversation_id="885">
    <ts>2018-10-20T08:48:57.000100</ts>
    <user>Andreas</user>
    <text>&lt;@Nakesha&gt; Someone might say otherwise here but go Frog. It was built specifically for what you need. Pollen is great, but as a book writing/publishing platform. True, people have used it for webpages/blogging but that's due to the dedication of the Pollen followers. It doesn't mean you should start there.</text>
  </message>
  <message conversation_id="885">
    <ts>2018-10-20T08:56:19.000100</ts>
    <user>Nakesha</user>
    <text>&lt;@Andreas&gt; thanks a lot for the advise. At the moment, I am indeed playing with Frog, trying to get a feel for it. Found some little bugs on how it assembles paths for the RSS/Atom for example, will send a PR. I think Frog might be able to get me up to speed faster specially because as far as I can see, to have collections such as a blog post collection, I'd need to roll my own collection code with Pollen, and I am keen to get all this running today (famous last words).</text>
  </message>
  <message conversation_id="884">
    <ts>2018-10-20T10:10:14.000100</ts>
    <user>Vinnie</user>
    <text>I'm thinking of implementing a Racket library to interface to Interactive Brokers API (trading interface). It's been done in many languages except scheme or lisp (that I can find publicly).  The very basic first step is to open up a client TCP connection and parse the incoming byte stream into integers, reals and strings where the delimiters between them is the NUL character. Is there a common best practice in Racket to tie an incoming socket port to a callback function, put it on its own thread,  read data when available, otherwise block on the read?  OR do I need to setup polling if I cannot block on no data available?  (Racket newbie here, but long-time programmer, enjoying this new adventure...thanks!)</text>
  </message>
  <message conversation_id="885">
    <ts>2018-10-20T10:52:04.000100</ts>
    <user>Ola</user>
    <text>&lt;@Nakesha&gt; I don’t think it’s too hard to create a blog/site using Pollen, but it’s true it’s faster with Frog</text>
  </message>
  <message conversation_id="884">
    <ts>2018-10-20T11:15:09.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Vinnie&gt; Have you seen "More: Systems Programming with Racket" &lt;https://docs.racket-lang.org/more/index.html&gt; ?
The example is (a) HTTP (b) server, whereas you're doing (a) non-HTTP (b) client.
Even so, there are concepts and example code about using TCP and threads you might find useful.

Short answer to your question: Yes it's fine/normal to "loop"/block reading from a TCP port.
That could be your program's default/main thread.
Or you could do it from another thread, which could communicate to the main thread using something like channels. Or whatever. Depends on context of what your program does.</text>
  </message>
  <message conversation_id="884">
    <ts>2018-10-20T11:20:15.000100</ts>
    <user>Bertha</user>
    <text>Hmm OK scanning that tutorial again, it's more N/A to what you're doing, than I remembered.
I guess the main point is, you can connect as a TCP client, and you get a Racket port which you can read from like any other port.
It may block, but that's OK.
_Usually_ it's not worth doinking around with "non-blocking I/O" in Racket. Instead, just make a thread, let it block.
Racket threads are lightweight ("green") and Racket has great concurrency primitives like channels and events you can `sync` on.</text>
  </message>
  <message conversation_id="885">
    <ts>2018-10-20T11:22:20.000100</ts>
    <user>Nakesha</user>
    <text>thanks &lt;@Ola&gt;, going with Frog :slightly_smiling_face:</text>
  </message>
  <message conversation_id="885">
    <ts>2018-10-20T11:24:47.000100</ts>
    <user>Ola</user>
    <text>&lt;@Nakesha&gt; simple site (kinda blog-like) done with pollen: &lt;http://andreiformiga.com/retrof/&gt;</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:05:42.000100</ts>
    <user>Del</user>
    <text>What is the convention concerning symbols that start with #% ? It appears that they name low-level procedures.</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:25:37.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; few or none of them are procedures, but they're used for a couple things</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:26:12.000100</ts>
    <user>Monserrate</user>
    <text>1. the names of modules that are part of the implementation but are not intended for external use (such as `'#%kernel`)</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:26:39.000100</ts>
    <user>Monserrate</user>
    <text>2. the names of forms implicitly added to the program, such as `#%app`</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:27:24.000100</ts>
    <user>Monserrate</user>
    <text>sometimes other low-level things that don't fit those conventions also use the prefix, but those are the main uses</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:27:42.000100</ts>
    <user>Del</user>
    <text>I would like to propose a new string escape sequence:

`\;` _comment_ &amp;lt;newline&amp;gt; _whitespace_

This escape sequence ignores the rest of the line, the &amp;lt;newline&amp;gt;, and all leading whitespace on the next line. This is useful for commenting long strings (e.g., complex regular expressions) and also for aligning a string continuation line with the beginning of the string on the previous line (which `\&amp;lt;newline&amp;gt;` does not do).

Here is an example in an assembler I wrote in Hearsay, where `\/` is equivalent to the proposed `\;`. It also uses `\#`, which I will propose next.

```constant line_format = "\#
  ~*S __                                        \/ Location.
  ~*S __                                        \/ Object code.
  ~*S ~S __                                     \/ Value, relocatable indicator.
  ~*S                                           \/ Beware indicator.
  ~\=line_number_digits;-rS                     \/ Line number.
  ~S                                            \/ Source indicator.
  ~S _                                          \/ Expanded &amp;gt;.
  ~*S                                           \/ Source line.
  \n";
```</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:35:32.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; that looks like something that could be done with the `@` reader pretty easily, right?</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:35:52.000100</ts>
    <user>Del</user>
    <text>I would like to propose a second new string escape sequence:

`\#`

This escape sequence causes the string reader to ignore whitespace in the string. This is useful when the string is complex and inserting whitespace between various parts of it can aid readability (see example above). To obtain a space in the string, use an underscore. This requires the addition of the `\_` escape sequence to obtain an underscore when in ignore-whitespace mode. This is particularly nice for making complex regular expressions readable.</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:38:06.000100</ts>
    <user>Franklin</user>
    <text>Take a look at @. It would be easy to write a `ignore` and then you can write @ignore{the text with whitespace ignored}</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:39:15.000100</ts>
    <user>Del</user>
    <text>&lt;@Monserrate&gt; I am reading section 1.3, "The Reader." I have not come across the @ reader yet, though I've certainly seen examples. Do I find it in the Scribble documentation?</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:40:04.000200</ts>
    <user>Monserrate</user>
    <text>&lt;http://docs.racket-lang.org/scribble/reader.html&gt;</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:47:28.000100</ts>
    <user>Franklin</user>
    <text>See also: &lt;https://www.greghendershott.com/2015/08/at-expressions.html&gt;</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:55:54.000100</ts>
    <user>Del</user>
    <text>&lt;@Franklin&gt; Thanks for those links. I'll add @ expressions to my ever-growing list of things to read. Seems to me that escape sequences are a fundamental part of reading strings and belong at that level of the language. But I've been using them for so long that I may be too rigid.</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:57:06.000100</ts>
    <user>Franklin</user>
    <text>I have begun using at-expressions to write html (before I used s-expressions).</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T13:58:56.000100</ts>
    <user>Franklin</user>
    <text>I guess I am trying to say, that at-expressions grow on you - but they take some time to get used to.</text>
  </message>
  <message conversation_id="886">
    <ts>2018-10-20T14:11:53.000100</ts>
    <user>Del</user>
    <text>Oh, I'm enjoying at-expressions in Scribble while working on the documentation. They are great. But I think to obtain the features of those proposed escape sequences would require some clunky expressions that would decrease readability rather than increase it.

Full disclosure requires that I admit I've always been a fan of escape sequences. Then again, I've also used ifs and loops in `format()` control strings, for which I have been severely chastised by my C buddies.</text>
  </message>
  <message conversation_id="887">
    <ts>2018-10-20T14:15:23.000100</ts>
    <user>Monserrate</user>
    <text>You could write basically
```
(define x @f{
  ~*S __                                        \/ Location.
 ~*S __                                        \/ Object code.
 ~*S ~S __                                     \/ Value, relocatable indicator.
 ~*S                                           \/ Beware indicator.
 ~\=line_number_digits;-rS                     \/ Line number.
 ~S                                            \/ Source indicator.
 ~S _                                          \/ Expanded &amp;gt;.
 ~*S                                           \/ Source line.
 \n";
})
```</text>
  </message>
  <message conversation_id="887">
    <ts>2018-10-20T14:15:32.000100</ts>
    <user>Monserrate</user>
    <text>with an appropriate definition of `f`</text>
  </message>
  <message conversation_id="887">
    <ts>2018-10-20T14:30:55.000100</ts>
    <user>Del</user>
    <text>That's not bad at all. It's rather Scribble-like. Obviously, I have a lot to learn.</text>
  </message>
  <message conversation_id="887">
    <ts>2018-10-20T19:39:39.000100</ts>
    <user>Del</user>
    <text>&lt;@Monserrate&gt; said

&amp;gt;2. the names of forms implicitly added to the program, such as `#%app`

How do I tell from the documentation on `#%app` that it is not a procedure? It's clear if it's a "special form," such as `if`.</text>
  </message>
  <message conversation_id="887">
    <ts>2018-10-20T19:53:54.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Del&gt; &lt;https://docs.racket-lang.org/reference/application.html&gt; In Racket docs, look at the right side of the "blue box". Typically it says either "procedure' or "syntax". In this case, it says "syntax". Also, section 3.7 is part of section 3 which is called "Syntactic Forms".</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:20:03.000100</ts>
    <user>Odis</user>
    <text>Does anyone know if there is a way in the racket ffi to specify a ctype of _string, but also that it should be given to the gc to handle?</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:20:09.000100</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; ^ ?</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:29:47.000100</ts>
    <user>Lynna</user>
    <text>Sorry, I don’t understand the question. Is `_string` an argument, return, or something else? What do you mean by “given to the gc to handle”?</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:42:11.000100</ts>
    <user>Odis</user>
    <text>Basically, I have a C function that calls a Racket callback giving it a `char*`. (I could also have it pass a `char**` if that would be better)</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:42:54.000100</ts>
    <user>Odis</user>
    <text>Once it gives it to the Racket callback, the C function no longer owns the string, meaning that the Racket vm needs to free it, either manually or via the gc (or something else).</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:42:57.000100</ts>
    <user>Odis</user>
    <text>Is that a bit clearer?</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:46:09.000100</ts>
    <user>Lynna</user>
    <text>It sounds like `_string` as the callback argument is what you want. The C data must be copied, because `char*` isn’t a Racket string; it will be UTF-8-decoded to a GC-managed Racket string.</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:53:39.000100</ts>
    <user>Odis</user>
    <text>Okay, and in that case the C function will need to dealloc the string?</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:53:44.000100</ts>
    <user>Odis</user>
    <text>err.. `char*`.</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:53:48.000100</ts>
    <user>Odis</user>
    <text>(Because now there’s two copies)</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:54:26.000100</ts>
    <user>Lynna</user>
    <text>The snapshot builds are still not signed, so the OS doesn’t trust them, and that’s the root of the problem.

You can make it work by dragging the DrRacket executable out of place (Command-drag if it’s in the “Applications” folder) and then drag it back. Really. Moving the application that way counts as a signal to the OS that you trust the application.</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:56:15.000100</ts>
    <user>Lynna</user>
    <text>Oh, I missed that you need to delete the argument. I think you need to make the callback accept a ` _bytes`, use `bytes-&amp;gt;string/utf-8` to copy/convert, and then free the `_bytes` argument. There’s not a predefined ctype (as far as I remember) that implements that combination, but you could make one.</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:57:05.000100</ts>
    <user>Odis</user>
    <text>Eh, I can rewrite the C function to delete it if `_string` makes a copy of the `char*`.</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:57:30.000100</ts>
    <user>Odis</user>
    <text>(Although in that case it seems like its just a matter of just doing the same thing on the C or Racket side.)</text>
  </message>
  <message conversation_id="888">
    <ts>2018-10-20T21:57:32.000100</ts>
    <user>Odis</user>
    <text>Anyway, thanks.</text>
  </message>
  <message conversation_id="889">
    <ts>2018-10-20T22:37:20.000100</ts>
    <user>Del</user>
    <text>&lt;@Bertha&gt; Ha! I thought that just meant it was the syntax for something. Also, I'm not sure why apply can't be a procedure, but that's a lesson for another day.</text>
  </message>
  <message conversation_id="889">
    <ts>2018-10-20T22:39:02.000100</ts>
    <user>Carlyn</user>
    <text>`apply` _is_ a procedure; the blue box says “procedure” in the corner.</text>
  </message>
  <message conversation_id="890">
    <ts>2018-10-20T23:46:41.000100</ts>
    <user>Bertha</user>
    <text>By the way, I don't think Racket really uses the phrase "special form"?
For instance it hardly appears at all in the main repo including .scrbls: &lt;https://github.com/racket/racket/search?p=2&amp;amp;q=%22special+form%22&amp;amp;unscoped_q=%22special+form%22&gt;</text>
  </message>
  <message conversation_id="889">
    <ts>2018-10-20T23:49:47.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Del&gt; I think in Racket we'd talk about "syntax" -- maybe "primitive syntax" if it mattered that it were built into Racket.
But I'm not sure and probably someone will correct me.
I don't mean to be nit-picky but it sounded like you were working on docs and wanted very specific definitions for things. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="890">
    <ts>2018-10-20T23:51:39.000100</ts>
    <user>Bertha</user>
    <text>Oh. And here "syntax" ~= "macros".</text>
  </message>
  <message conversation_id="890">
    <ts>2018-10-20T23:51:53.000100</ts>
    <user>Bertha</user>
    <text>Words are hard.</text>
  </message>
  <message conversation_id="890">
    <ts>2018-10-21T07:12:55.000100</ts>
    <user>Del</user>
    <text>&lt;@Bertha&gt; No, it doesn't use "special form," which is why I scare-quoted it. :sunglasses: Now I know to distinguish a syntax from a procedure.

I am looking for crisp definitions. Still struggling with "serve directly as values" and "immediate values" and such. I left those paragraphs alone in eval-model.scrbl.</text>
  </message>
  <message conversation_id="889">
    <ts>2018-10-21T07:16:31.000100</ts>
    <user>Del</user>
    <text>&lt;@Carlyn&gt; Right, sorry, I should have said "all flavors of apply." Why is `#%app` a syntax rather than a procedure? In fact, why does it exist at all? There is obviously some interesting internal stuff going on here that I don't understand yet.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:18:03.000100</ts>
    <user>Franklin</user>
    <text>In most Scheme systems an application (foo 1 2 3) is kept as (foo 1 2 3) during expansion.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:18:22.000100</ts>
    <user>Franklin</user>
    <text>In Racket an application (foo 1 2 3) is expanded into (#%app foo 1 2 3).</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:18:42.000100</ts>
    <user>Franklin</user>
    <text>This allows a user to write his own #%app and thus change the meaning of application.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:19:14.000100</ts>
    <user>Franklin</user>
    <text>For example one can make an #%app that turns unbound identifers in the arguments into a symbol.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:19:27.000100</ts>
    <user>Franklin</user>
    <text>Think: symbolic algebra system.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:19:37.000100</ts>
    <user>Franklin</user>
    <text>Or one can change the evaluation order.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:20:31.000100</ts>
    <user>Franklin</user>
    <text>One of the simplest uses it to extend the set of values that can be applied.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:20:55.000100</ts>
    <user>Franklin</user>
    <text>E.g.   ((list 1 2 3) 0) could give 1</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:21:21.000100</ts>
    <user>Franklin</user>
    <text>#%app evaluates the first argument, if it is a list it inserts an list-ref</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:21:34.000100</ts>
    <user>Franklin</user>
    <text>turnning ((list 1 2 3) 0) into (list-ref (list 1 2 3) 0).</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:22:08.000100</ts>
    <user>Franklin</user>
    <text>Since #%app is used everywhere it is important that #%app is fast.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T07:23:08.000100</ts>
    <user>Franklin</user>
    <text>In a larger persepective #%app is one of the pieces that makes it easier to implement new languages on top of Racket.</text>
  </message>
  <message conversation_id="892">
    <ts>2018-10-21T07:51:35.000100</ts>
    <user>Marnie</user>
    <text>my favorite use of `#%app` so far is the `fancy-app` package: &lt;http://docs.racket-lang.org/fancy-app/index.html?q=fancy-app&gt;</text>
  </message>
  <message conversation_id="892">
    <ts>2018-10-21T08:05:34.000100</ts>
    <user>Del</user>
    <text>Now that is pretty cool. Is the reason to insert `#%app` instead of `apply` so that `apply` retains the usual semantics?</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T08:07:16.000100</ts>
    <user>Franklin</user>
    <text>The function apply takes a function and a list as input. Then applies the function using the elements of the list as arguments for the function.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T08:07:37.000100</ts>
    <user>Franklin</user>
    <text>So you can't write (apply foo 1 2 3) but (apply foo (list 1 2 3)) works.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T08:08:49.000100</ts>
    <user>Del</user>
    <text>Aha. But my question was stupid. The point of `#%app` is that it's not a procedure call but some faster internal thing.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T08:08:58.000100</ts>
    <user>Franklin</user>
    <text>Yes.</text>
  </message>
  <message conversation_id="893">
    <ts>2018-10-21T08:18:24.000200</ts>
    <user>Marnie</user>
    <text>it’s also how keyword arguments work</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T08:19:35.000100</ts>
    <user>Marnie</user>
    <text>`racket/base` provides an `#%app` macro that’s built on top of a lower-level `#%plain-app` form - the former supports keyword arguments while the latter doesn’t</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T08:23:39.000100</ts>
    <user>Del</user>
    <text>Why don't keywords evaluate to themselves in Racket?</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T08:27:56.000100</ts>
    <user>Franklin</user>
    <text>Not 100% sure, but I think this makes it easier to catch error situations where keywords are used incorrectly. Say (foo #:bar) where foo is not a function accepting keywords.</text>
  </message>
  <message conversation_id="891">
    <ts>2018-10-21T08:28:38.000100</ts>
    <user>Franklin</user>
    <text>A compile error here is better than getting a runtime error, when foo discovers that it received a keyword.</text>
  </message>
  <message conversation_id="894">
    <ts>2018-10-21T10:00:32.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Del&gt; you may be interested in reading &lt;https://www2.ccs.neu.edu/racket/pubs/scheme2009-fb.pdf&gt; it explains the design of the keywords and the rationale for treating keywords as syntactic markers instead of expressions</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:47:00.000100</ts>
    <user>Donny</user>
    <text>how can i display image(2htdp/image) from repl</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:47:37.000100</ts>
    <user>Franklin</user>
    <text>which repl? (DrRacket, Emacs, terminal, etc)</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:47:54.000100</ts>
    <user>Donny</user>
    <text>racket terminal</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:48:09.000100</ts>
    <user>Franklin</user>
    <text>don't know</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:48:18.000100</ts>
    <user>Donny</user>
    <text>haha</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:48:26.000100</ts>
    <user>Donny</user>
    <text>i have try frame, canvas</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:48:31.000100</ts>
    <user>Donny</user>
    <text>but not work :disappointed:</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:49:12.000100</ts>
    <user>Franklin</user>
    <text>Creating a frame with a canvas and drawing the image on the canvas would work.</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:58:32.000100</ts>
    <user>Franklin</user>
    <text>&lt;@Donny&gt;
#lang racket
(require racket/gui)
(define f  (new frame% [label "Image Preview"]))
(define bm (make-object bitmap% "/Users/soegaard/Downloads/stepper.png"))
(define c  (new canvas% [parent f] [min-width 100] [min-height 100]
                [paint-callback (λ (c dc)
                                  (send dc draw-bitmap bm 0 0))]))
(send f show #t)</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T11:59:50.000100</ts>
    <user>Franklin</user>
    <text>Note that the window manager (macOS or Windows) might delete the contents of a window, and if this happens, then the paint-callback is called.</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:00:37.000100</ts>
    <user>Franklin</user>
    <text>Drawing the bitmap on the canvas outside the paint-callback only until the system deletes the content again.</text>
  </message>
  <message conversation_id="896">
    <ts>2018-10-21T12:11:48.000200</ts>
    <user>Donny</user>
    <text>how to draw image-snip% in canvas</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:12:24.000100</ts>
    <user>Franklin</user>
    <text>I think snips (and image-snips) needs to be in an editor.</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:13:13.000100</ts>
    <user>Donny</user>
    <text>thanks you</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:13:47.000200</ts>
    <user>Donny</user>
    <text>my question is from picture language in SICP :smile:</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:14:02.000100</ts>
    <user>Franklin</user>
    <text>Which one? The new or the old?</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:14:21.000100</ts>
    <user>Donny</user>
    <text>this one
&lt;https://docs.racket-lang.org/sicp-manual/index.html#%28part._.Introduction_to_the_.S.I.C.P_.Picture_.Language%29&gt;</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:14:37.000100</ts>
    <user>Franklin</user>
    <text>The new implementation of the SICP picture language is here:</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:14:41.000100</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/sicp-lang/sicp/blob/master/sicp-pict2/sicp.rkt&gt;</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:15:04.000100</ts>
    <user>Franklin</user>
    <text>It works much better than the old one.</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:15:28.000100</ts>
    <user>Franklin</user>
    <text>It now supports colors, different sizes etc.</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:17:13.000100</ts>
    <user>Franklin</user>
    <text>And why is this not in the documentation? Well - someone needs to write documentation for it.</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:17:36.000100</ts>
    <user>Franklin</user>
    <text>&lt;@Del&gt;  Would you be interested in that?</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:17:41.000100</ts>
    <user>Donny</user>
    <text>but I see in racket docs it can use with REPL</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:18:37.000100</ts>
    <user>Franklin</user>
    <text>Yes - if you use it the DrRacket repl or in an Emacs repl (using racket-mode).</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:20:05.000100</ts>
    <user>Franklin</user>
    <text>If you open sicp-pict2/sicp.rkt  in DrRacket and hit run, then, results will be drawn in the repl.</text>
  </message>
  <message conversation_id="896">
    <ts>2018-10-21T12:23:37.000100</ts>
    <user>Donny</user>
    <text>ok</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:29:32.000100</ts>
    <user>Franklin</user>
    <text>Look at the end of the file for some examples.</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:29:41.000100</ts>
    <user>Franklin</user>
    <text>(escher) is nice</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:37:54.000100</ts>
    <user>Donny</user>
    <text>I see a bug</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:38:45.000100</ts>
    <user>Franklin</user>
    <text>thanks - I'll take a look.</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:41:05.000100</ts>
    <user>Franklin</user>
    <text>&lt;@Donny&gt; Hmm. Try downloading einstein2.jpg and saving it in the same folder as you saved sicp.rkt.</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:41:06.000100</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/sicp-lang/sicp/tree/master/sicp-pict2&gt;</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:43:21.000100</ts>
    <user>Donny</user>
    <text>oh, my fault</text>
  </message>
  <message conversation_id="895">
    <ts>2018-10-21T12:43:52.000100</ts>
    <user>Franklin</user>
    <text>Nope - I ought to make a better error message.</text>
  </message>
  <message conversation_id="897">
    <ts>2018-10-21T17:50:00.000100</ts>
    <user>Shawanna</user>
    <text>Hi all - n00b here. I made a Docker image for easy testing of Racket packages in Azure Pipelines, and I thought I would share. &lt;https://hub.docker.com/r/hravnx/racket-azpipe/&gt;</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-21T20:40:25.000100</ts>
    <user>Del</user>
    <text>&lt;@Alesha&gt; Thanks for that reference.</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-21T20:42:25.000100</ts>
    <user>Del</user>
    <text>&lt;@Franklin&gt; I will look into documenting SICP, though not immediately.</text>
  </message>
  <message conversation_id="899">
    <ts>2018-10-21T21:29:48.000100</ts>
    <user>Omar</user>
    <text>Hello. I have a quick question about syntax values. Consider:

```
#lang racket

(define-syntax (my-if stx)
  (syntax-case stx ()
    [(_ c t e)
     (quasisyntax/loc stx (s-if c (thunk t) (thunk e)))]))

(define (s-if c t e)
  (if c (t) (e)))

(my-if 1
       (begin
         (define p 1)
         (define q 2)
         (print p))
       (print 3))
```

After fully expanding the above program, we will have something like:

```
(#%app call-with-values (lambda () (#%app s-if (quote 1) (lambda () (let-values (((p) (quote 1))) (let-values (((q) (quote 2))) (#%app print p)))) (lambda () (#%app print (quote 3))))) print-values)
```

which totally makes sense.

However, somehow the syntax value `(let-values (((p) (quote 1))) (let-values (((q) (quote 2))) (#%app print p)))` has source location from the macro `my-if` (line 6) rather than the source location from `(define p 1)`. And this doesn’t make sense to me since `my-if` should simply move `(define p 1)` around, but never destruct and reconstruct its syntax (which could change srcloc).

So, why does this happen, and what’s the way I can retain the srcloc from `(define p 1)`?</text>
  </message>
  <message conversation_id="899">
    <ts>2018-10-21T21:35:22.000100</ts>
    <user>Omar</user>
    <text>Actually I guess it doesn’t make sense to have srcloc from `(define p 1)` either because `(let-values (((q) (quote 2))) (#%app print p))` is not a part of the original syntax, but still, why does the srcloc from `my-if` leak in?</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-22T14:59:17.000100</ts>
    <user>Del</user>
    <text>Okay, I have to ask what I think must be a silly question, but I cannot figure this out. Here is the documentation for `read-string`:

&lt;https://docs.racket-lang.org/reference/Byte_and_String_Input.html?q=read-string#%28def._%28%28quote._~23~25kernel%29._read-string%21%29%29&gt;

I think that is the procedure that is defined in read/string.rkt, but the signatures do not match:

```(provide read-string
         read-here-string)

(define (read-string in config #:mode [mode 'string])
```

What am I missing?</text>
  </message>
  <message conversation_id="900">
    <ts>2018-10-22T15:02:07.000100</ts>
    <user>Lynna</user>
    <text>That’s not the right `read-string`. The one you get from `racket` right now is in “racket/src/racket/src/portfun.c”. The one you’ll get in the future from Racket-on-Chez is in “racket/src/io/port/string-input.rkt”.</text>
  </message>
  <message conversation_id="900">
    <ts>2018-10-22T15:03:33.000100</ts>
    <user>Lynna</user>
    <text>I suppose the one in “expander/read/string.rkt” could have a different name to clarify that it’s the string case of the `read` function.</text>
  </message>
  <message conversation_id="900">
    <ts>2018-10-22T15:27:51.000200</ts>
    <user>Del</user>
    <text>Oh, I see my confusion. I _was_ looking for the string case of the `read` function. I rashly assumed that the documentation for `read-string` should correspond to it.</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-22T18:53:19.000100</ts>
    <user>Del</user>
    <text>In order to work on a Racket code file, is it necessary to build all of Racket?</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-22T19:36:48.000100</ts>
    <user>Bertha</user>
    <text>notice the word "immediate" here &lt;https://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket%2Fprivate%2Fstxcase-scheme..rkt)._syntax%2Floc))&gt;</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-22T19:39:23.000100</ts>
    <user>Bertha</user>
    <text>maybe try something like
```
#`((s-if c (thunk #,(syntax/loc t t) (thunk #,(syntax/loc e e))))
```
that is, put the stx loc on the specific pieces of syntax _inside_ the `s-if` form, instead?</text>
  </message>
  <message conversation_id="901">
    <ts>2018-10-22T20:54:49.000100</ts>
    <user>Omar</user>
    <text>That unfortunately doesn’t help. Still get the same result :disappointed:</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-22T22:04:42.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; it depends what file, really</text>
  </message>
  <message conversation_id="902">
    <ts>2018-10-22T22:04:50.000100</ts>
    <user>Marinda</user>
    <text>Even I used Frog for the Racket Blog. &lt;http://blog.racket-lang.org/2016/12/the-redesigned-racket-blog.html&gt;</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-22T22:05:11.000100</ts>
    <user>Monserrate</user>
    <text>Theres a good blog post on the Racket blog about this</text>
  </message>
  <message conversation_id="903">
    <ts>2018-10-22T23:39:17.000100</ts>
    <user>Bertha</user>
    <text>The original syntax from your use of `my-if` -- for instance the identifier `p` -- _does_ have the original source location. I see that in DrRacket macro stepper. And if there is an error, like `(define p UNDEFINED)`, the error location is correct (e.g. line 14 not line 6). So: Is there a specific scenario where the srcloc of the macro-introduced `let-values` actually matters?</text>
  </message>
  <message conversation_id="901">
    <ts>2018-10-23T00:51:51.000100</ts>
    <user>Omar</user>
    <text>Hmm. I’m writing a program to find a repair for a program and suggest it to users. It doesn’t make sense to analyze unexpanded code (which has all srclocs intact) since I have no idea what the semantics of a piece of syntax actually is. Hence I need to expand the code first. I hoped that all srclocs are intact after the expansion. Now I see that they aren’t…</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-23T10:53:16.000100</ts>
    <user>Del</user>
    <text>Yes, I read that post. I says that I have to build the entire system, or at least the minimal system. I was wondering if there is a shortcut.</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-23T10:54:51.000100</ts>
    <user>Monserrate</user>
    <text>I recommend following what's in that post</text>
  </message>
  <message conversation_id="898">
    <ts>2018-10-23T12:06:27.000100</ts>
    <user>Del</user>
    <text>Okay.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T17:39:34.000100</ts>
    <user>Franklin</user>
    <text>Hi All. I have a run into a problem with a macro. I have a hunch that I am missing something simple. In short I want references to undefined variables to evaluate to false. This macro is defined in the file "top.rkt". The macro seems to work, but when I use it in the context I need, it doesn't.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T17:39:39.000100</ts>
    <user>Franklin</user>
    <text>The example is here:</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T17:39:41.000100</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/soegaard/record&gt;</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T17:48:08.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Franklin&gt; To be clear, you’re trying to evaluate the descriptor as an expression _at phase 1_, and you want an unbound reference to produce `#f`?</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T17:49:41.000100</ts>
    <user>Carlyn</user>
    <text>Normally the way to do something like that is to, instead of storing the static information in a phase 1 definition, store it in a phase 0 `define-syntax` definition, then look it up later with `syntax-local-value`. Is there a reason you can’t do that here?</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T17:51:42.000100</ts>
    <user>Franklin</user>
    <text>What's the difference between a phase 1 definition and a phase 0 define-syntax ?</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T17:54:16.000100</ts>
    <user>Carlyn</user>
    <text>Every definition has two parts: the bound identifier and the expression on the RHS. An ordinary `define` binds its identifier in the current phase to an expression evaluated in that same phase. This is true whatever phase the `define` lives in: both the binding and the expression are just shifted to some other phase. But `define-syntax` is special: it binds an identifier in the current phase to an expression evaluated in _the current phase + 1_.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T17:54:56.000100</ts>
    <user>Carlyn</user>
    <text>Put another way, `define-syntax` implements “glue” between Racket’s different phases: it’s what connects the binding environment of phase 0 to the value environment at phase 1.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T17:57:16.000100</ts>
    <user>Carlyn</user>
    <text>It’s generally advantageous to put your bindings in phase 0 because they will behave in ways that users generally expect: if they declare a new record in a local scope, things will just work so long as all the bindings are defined at phase 0 (even if an outer binding is shadowed). The same is not true if you try to create a binding at phase 1, since this program is illegal:
```
(let ()
  (begin-for-syntax ; not allowed here!
    (define x 1))
  (void))
```</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:00:02.000100</ts>
    <user>Franklin</user>
    <text>I think you might be right, that define-syntax and syntax-local-value is the way to go. But nevertheless, here is the thought process I followed:</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:01:00.000100</ts>
    <user>Franklin</user>
    <text>Let's say we have defined a sprite record:  (define-record sprite (x y))</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:01:32.000100</ts>
    <user>Franklin</user>
    <text>Then we create an instance:   (define ball (sprite 11 12))</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:02:28.000100</ts>
    <user>Franklin</user>
    <text>ball now lives at phase 0, but when ball.x is to be transformed into (sprite-x ball) that will happen at phase 1</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:02:48.000100</ts>
    <user>Franklin</user>
    <text>thus the type of ball should be stored at phase 1</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:03:04.000100</ts>
    <user>Franklin</user>
    <text>Hence an  ball:type  defined at phase 1 makes sense.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:09:29.000100</ts>
    <user>Carlyn</user>
    <text>That does make sense, intuitively. :)</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:10:31.000100</ts>
    <user>Carlyn</user>
    <text>But I think one way to think about this is that Racket has a very rich language for manipulating bindings: you can rename them, add scopes to them, remove scopes from them, forge them out of thin air, and all sorts of other silly things.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:11:31.000100</ts>
    <user>Carlyn</user>
    <text>So if you want to ensure that your phase 1 information is correlated with the phase 0 binding that the user thinks about, you need to attach the information to _that binding_, not to some other binding that you can correlate by hoping they’re both in scope at the same time with different names (and in this case, at different phases).</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:12:58.000100</ts>
    <user>Carlyn</user>
    <text>You can do this in different ways—you can use `define-syntax` and `syntax-local-value`, as I mentioned, but you could also use a free-id-table to stash the value—but the key is that the extra information is stored with the binding.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:14:20.000100</ts>
    <user>Carlyn</user>
    <text>As for why your particular example doesn’t work, for what it’s worth, the problem is likely because `(let-syntax ([#%top top]) ....)` binds `#%top` inside the macro, but not in the scope of `var:type`.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:21:23.000100</ts>
    <user>Franklin</user>
    <text>One thing I dislike about the syntax-local-value approach is that I can't write (begin-for-syntax (displayln ball:type))  when debugging.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:21:59.000100</ts>
    <user>Carlyn</user>
    <text>You could do `(begin-for-syntax (displayln (syntax-local-value #'ball)))` instead.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:23:31.000100</ts>
    <user>Franklin</user>
    <text>That doesn't work since syntax-local-value only works during expansion - so I need to write (let-syntax ([foo (λ (stx) (displayln (syntax-local-value #'ball:type)))]) foo)</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:24:07.000100</ts>
    <user>Franklin</user>
    <text>Hmm. I suppose I could wrap that into a macro.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:24:12.000100</ts>
    <user>Carlyn</user>
    <text>It works inside `begin-for-syntax` as well as while a macro is being expanded.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:24:58.000100</ts>
    <user>Franklin</user>
    <text>Oh - it does! I could have sworn I already tried that.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:25:07.000100</ts>
    <user>Carlyn</user>
    <text>The documentation says this:
&amp;gt; This procedure must be called during the dynamic extent of a syntax transformer application by the expander or while a module is visited (see syntax-transforming?), otherwise the exn:fail:contract exception is raised.
“while a module is visited” is when `begin-for-syntax` blocks are evaluated and when the RHSs of top-level `define-syntaxes` are evaluated.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:26:55.000100</ts>
    <user>Franklin</user>
    <text>The error reported from syntax-local-value is worded as "syntax-local-value: not currently expanding".</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:28:15.000100</ts>
    <user>Carlyn</user>
    <text>Technically, the error is not wrong, as modules are visited during expansion.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:28:26.000100</ts>
    <user>Carlyn</user>
    <text>(Though it is maybe less clear than it could be.)</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-23T18:34:13.000100</ts>
    <user>Franklin</user>
    <text>I made the switch to syntax-local-value and it does simplify the code. Thanks.</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-24T13:11:24.000100</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; btw, that bug does impact one package whose tests now fail in the pre release</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-24T13:12:26.000100</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; I have a fix. I’m just adding some more test cases, and then I’ll push it (and ask it to be included in 7.1). Thank you for catching it!</text>
  </message>
  <message conversation_id="905">
    <ts>2018-10-24T13:12:52.000100</ts>
    <user>Monserrate</user>
    <text>Awesome</text>
  </message>
  <message conversation_id="905">
    <ts>2018-10-24T13:13:23.000100</ts>
    <user>Monserrate</user>
    <text>Thanks for the mflatt-esque quick turnaround</text>
  </message>
  <message conversation_id="904">
    <ts>2018-10-24T13:13:50.000100</ts>
    <user>Carlyn</user>
    <text>It was, fortunately, just a small typo. :)</text>
  </message>
  <message conversation_id="905">
    <ts>2018-10-24T18:44:51.000100</ts>
    <user>Del</user>
    <text>I need help with phases. I'm working on the "Phases" subsection in eval-model.scrbl. It contains a lot of information but does not include a succinct explanation of the purpose of phases. I've looked through the documentation and found copious details about phases, but still no succinct justification for them. Can anyone point me at a high-level explanation of the need for phases?</text>
  </message>
  <message conversation_id="905">
    <ts>2018-10-24T19:05:02.000100</ts>
    <user>Lynna</user>
    <text>&lt;@Del&gt; &lt;http://www.cs.utah.edu/plt/publications/macromod.pdf&gt;</text>
  </message>
  <message conversation_id="906">
    <ts>2018-10-25T08:02:30.000100</ts>
    <user>Andreas</user>
    <text>Are there still any releases online for PLT Scheme v2xx?</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:09:46.000100</ts>
    <user>Gudrun</user>
    <text>hello all, I am using emacs racket mode in windows.  Is there anything special I need to do in order for images to show in the REPL?  It only seems to print out the generated image file name.</text>
  </message>
  <message conversation_id="906">
    <ts>2018-10-25T08:27:08.000100</ts>
    <user>Eugena</user>
    <text>&lt;@Andreas&gt; &lt;http://download.plt-scheme.org/all-versions.html&gt;</text>
  </message>
  <message conversation_id="906">
    <ts>2018-10-25T08:30:07.000100</ts>
    <user>Andreas</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:36:14.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Gudrun&gt;
1. If you `M-x` `eval` and enter `racket-images-inline`, what is the value? If it's `nil`, the feature is disabled. In that case do `M-x` `eval` `(setq racket-images-inline t)` to enable. If that works?  Put that `(setq racket-images-inline t)` in your Emacs init file, or use M-x customize to change it.
2. If that didn't work, try `M-x` `eval`, `(display-images-p)`. If that returns `nil`, your build of Emacs doesn't support images and you would need to use another, if you want images inline.
3. If still not working please `M-x` `racket-bug-report`.</text>
  </message>
  <message conversation_id="906">
    <ts>2018-10-25T08:37:23.000100</ts>
    <user>Bertha</user>
    <text>Or I guess try step 2 before 1 if that's easier for you. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="908">
    <ts>2018-10-25T08:40:54.000100</ts>
    <user>Del</user>
    <text>&lt;@Lynna&gt; Thanks!</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:49:35.000100</ts>
    <user>Gudrun</user>
    <text>&lt;@Bertha&gt; thanks for the tips.  It seems the feature is switched on and my emacs does support images, but it is not working for some reason.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:52:27.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Gudrun&gt; Alas I haven't had time to use racket-mode on Windows, hardly at all, in recent years.
I know at least a couple who do; but not sure if they exercise this particular feature.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:53:51.000100</ts>
    <user>Gudrun</user>
    <text>&lt;@Bertha&gt; I can at least use `(plot-new-window? #f)` if all else fails.  I am trying to have my assembler output fancy looking memory maps and diagnostics</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:55:05.000100</ts>
    <user>Gudrun</user>
    <text>Unfortunately I don't know enough about emacs to go about trying to debug it - the emacs rabbit hole is something I stay away from unless strictly planned!</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:56:37.000100</ts>
    <user>Bertha</user>
    <text>Hmm what if you set `racket-inline-images` to `nil` (disable it), and, make sure `racket-images-system-viewer` is a pathname that can display images on your Windows box (it defaults to `"display"`).  Then, the buffer will say `[image] ; use M-x racket-view-last-image to view`. i.e. you need to do it manually and external to Emacs.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:56:48.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Gudrun&gt; Oops `racket-images-system-viewer`. I'll edit the previous.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:57:38.000100</ts>
    <user>Gudrun</user>
    <text>I see - well since I control the output file I can also have my program launch it externally if I were to go that route</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:57:57.000100</ts>
    <user>Bertha</user>
    <text>Ah of course.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:58:09.000100</ts>
    <user>Gudrun</user>
    <text>it works in DrRacket which is annoying :wink:</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T08:59:08.000100</ts>
    <user>Bertha</user>
    <text>Yep. If you want to open an issue, I definitely want to figure it out. I just can't commit to "by when".</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T09:00:04.000100</ts>
    <user>Bertha</user>
    <text>Or if you don't have a GitHub account, I can just copy/paste this Slack thread into an issue, for now.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T09:00:52.000100</ts>
    <user>Gudrun</user>
    <text>sure, I will add an issue later.  thanks for the help and the emacs major mode!   also examining rackjure helped me understand how to properly #lang my own work :+1:</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T09:06:51.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Gudrun&gt; You're welcome; happy to hear that!</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:31:12.000100</ts>
    <user>Tiesha</user>
    <text>Yeah, &lt;@Bertha&gt;, I’ve thanked you before but I thank you again. These days I’m able to do far more Racket things in Emacs than before, and switching between files it seems to do the intelligent thing, as in, I don’t have to change REPL buffers, I just have to press F5 in the new .rkt file, whereas in the past I had to kill my Emacs REPL and start from scratch a lot. Lately I’ve been coding in DrRacket on half my screen and writing and doing Racket tests in Emacs on the other half, which speeds up development.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:39:10.000100</ts>
    <user>Bertha</user>
    <text>You're welcome. In turn I need to thank &lt;@Eileen&gt; for showing the way on most of the hard stuff. And thank everyone who worked on all the other Racket things that racket-mode uses directly or indirectly. :racket-flat: :heart: :100:</text>
  </message>
  <message conversation_id="909">
    <ts>2018-10-25T10:39:33.000100</ts>
    <user>Eileen</user>
    <text>I love racket-mode!</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:39:51.000100</ts>
    <user>Bertha</user>
    <text>And the Academy. I thank the Academy.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:40:55.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Bertha&gt; I'm one of those who uses racket-mode heavily. I still use DrRacket occasionally, mostly if I need additional information from the binding arrows to help figure out the Racket codebase.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:41:35.000100</ts>
    <user>Alesha</user>
    <text>I also am a Windows Emacs user and I went ahead and did test with a simple bitmap% object, it shows up in my Emacs REPL as inlined images</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:41:59.000100</ts>
    <user>Alesha</user>
    <text>so that support does seem to still work sometimes for Windows Emacs</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:42:31.000100</ts>
    <user>Alesha</user>
    <text>another heartfelt thank from for making racket-mode possible!</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:43:48.000100</ts>
    <user>Bertha</user>
    <text>Oh and thanks to Neil van Dyke for quack which helped me learn a lot early on, and thanks to the person who contributed inline images to Geiser which I adapted for racket-mode.</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:44:47.000100</ts>
    <user>Bertha</user>
    <text>I sincerely appreciate all the thank-yous. But also, I'm starting to feel like you all are about to give me a gold watch and a set of golf clubs so please stop now. :smile:</text>
  </message>
  <message conversation_id="907">
    <ts>2018-10-25T10:45:56.000100</ts>
    <user>Ezra</user>
    <text>&lt;@Bertha&gt; enjoy your little Academy Awards moment :slightly_smiling_face:</text>
  </message>
  <message conversation_id="910">
    <ts>2018-10-25T12:20:33.000100</ts>
    <user>Tiesha</user>
    <text>I just discovered racket/trace and trace-define.  Now I can enjoy my lunch.</text>
  </message>
  <message conversation_id="911">
    <ts>2018-10-25T13:50:38.000100</ts>
    <user>Gudrun</user>
    <text>&lt;@Alesha&gt; that's interesting, can you show the exact code so I can try it like-for-like ?</text>
  </message>
  <message conversation_id="911">
    <ts>2018-10-25T14:23:43.000100</ts>
    <user>Alesha</user>
    <text>basically I followed the first example &lt;https://docs.racket-lang.org/draw/overview.html#%28part._.Lines_and_.Simple_.Shapes%29&gt; as my test case.

Here's the program you can try in your Emacs. `C-c C-c` to evaluate your buffer should produce an image in the Racket inferior process REPL buffer.</text>
  </message>
  <message conversation_id="911">
    <ts>2018-10-25T14:23:52.000100</ts>
    <user>Alesha</user>
    <text>None</text>
  </message>
  <message conversation_id="911">
    <ts>2018-10-25T14:23:59.000100</ts>
    <user>Alesha</user>
    <text>&lt;@Gudrun&gt;</text>
  </message>
  <message conversation_id="911">
    <ts>2018-10-25T14:37:06.000100</ts>
    <user>Gudrun</user>
    <text>&lt;@Alesha&gt; thanks, can confirm it is still the same problem.  it prints "#&amp;lt;Image:  C:\\ path\pic.png&amp;gt; "</text>
  </message>
  <message conversation_id="912">
    <ts>2018-10-25T14:37:27.000100</ts>
    <user>Bertha</user>
    <text>&lt;@Tiesha&gt; Fun trick with trace and racket-logger-mode &lt;https://twitter.com/greghendershott/status/902945140205072386&gt;</text>
  </message>
  <message conversation_id="913">
    <ts>2018-10-26T08:18:55.000500</ts>
    <user>Coral</user>
    <text>Oh wow</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:32:50.003300</ts>
    <user>Ilda</user>
    <text>I'm trying to use `define-runtime-path-list` to create a path relative to my source file, but I think I might be doing something wrong. When I use a relative path and load the file inside racket-mode's REPL, everything works. When I try to run the same file using the racket interpreter from the file's parent directory, then things blow up with "fold-files: path disappeared: #&amp;lt;path:../migrations&amp;gt;". Am I using `define-runtime-path-list` wrong?</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:33:04.003600</ts>
    <user>Ilda</user>
    <text>```
(define-runtime-path-list
  migration-paths
  (sort
   (find-files
    (lambda (p)
      (string-suffix? (path-&amp;gt;string p) ".sql"))
    (build-path 'up "migrations"))
   string-ci&amp;lt;?))
```

this is how I'm using it</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:34:21.004300</ts>
    <user>Ilda</user>
    <text>and my project structure looks like this:

```
├── migrations
│   └── 0001.sql
└── proj
    ├── migrations.rkt
```</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:37:08.005800</ts>
    <user>Bertha</user>
    <text>If you always expect the files to be `../migrations/*.sql` relative to `migrations.rkt`?  Instead I'd do something like `(define-runtime-path here ".")`, then `(build-path here 'up "migrations)`.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:38:29.006600</ts>
    <user>Bertha</user>
    <text>You really need just the one "anchor", the location of `migrations.rkt`, and you can do a normal `build-path` relative to that.
IIUC</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:39:00.007500</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; at some point, racket-mode stopped loading by default for .rkt files -- what do I have to change to get that back?</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:39:05.007700</ts>
    <user>Ilda</user>
    <text>That makes sense, thanks!</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:39:11.007900</ts>
    <user>Monserrate</user>
    <text>(sorry for using you as my emacs help)</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:40:35.008800</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; No that's fine. Did it stop because you neglected to pay me the bitcoin license fee renewal?
Otherwise it probably disappeared from Emacs' `auto-mode-alist` somehow.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:41:29.009400</ts>
    <user>Bertha</user>
    <text>This is what racket-mode does in `racket-mode.el` to add itself to a few useful lists:
```
;;;###autoload
(progn
  (add-to-list 'auto-mode-alist '("\\.rkt[dl]?\\'" . racket-mode))
  (modify-coding-system-alist 'file "\\.rkt[dl]?\\'"  'utf-8)
  (add-to-list 'interpreter-mode-alist '("racket" . racket-mode)))
```</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:42:11.010200</ts>
    <user>Monserrate</user>
    <text>my `.emacs` does not change `'auto-mod-alist`</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:42:48.011000</ts>
    <user>Bertha</user>
    <text>You could try to figure out what other package is overwriting this; Geiser?
Or just add the `add-to-list` in your init file
Or package-remove then re package-install racket-mode, to make sure its seen and the `autoload`s are happening.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:43:05.011400</ts>
    <user>Bertha</user>
    <text>The last sounds like the best thing to try first, I think.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:43:35.011700</ts>
    <user>Monserrate</user>
    <text>what's the command to do that? package-remove doesn't exist</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:44:00.012200</ts>
    <user>Bertha</user>
    <text>oh `package-delete`</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:44:09.012400</ts>
    <user>Bertha</user>
    <text>so many synonyms, so little time</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:45:25.012600</ts>
    <user>Monserrate</user>
    <text>also doesn't exist</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:45:47.013000</ts>
    <user>Monserrate</user>
    <text>as in `M-x package-delete` doesn't do anything</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:47:32.013400</ts>
    <user>Bertha</user>
    <text>It doesn't prompt you "Delete package: "?</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:48:00.013900</ts>
    <user>Bertha</user>
    <text>Had you originally installed racket-mode from MELPA, or, using git clone?</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:48:25.014400</ts>
    <user>Bertha</user>
    <text>Ugh I have to hop on a call any second now....</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:48:46.014900</ts>
    <user>Bertha</user>
    <text>Sorry. Will try to check back in an hour or so if you're still stuck.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:49:06.015100</ts>
    <user>Monserrate</user>
    <text>Melpa</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:50:30.015500</ts>
    <user>Bertha</user>
    <text>You could also try M-x list-packages, then use that UI to remove racket-mode, and install it again.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:51:28.015800</ts>
    <user>Monserrate</user>
    <text>lovely, i found that, but there's no uninstall button</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:52:07.016100</ts>
    <user>Monserrate</user>
    <text>ah but more clicking maybe worked</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:52:28.016300</ts>
    <user>Monserrate</user>
    <text>ah but that didn't change the behavior</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:52:42.016700</ts>
    <user>Monserrate</user>
    <text>i successfully reinstalled the latest racket mode, still loads in Scheme mode</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:53:54.017000</ts>
    <user>Bertha</user>
    <text>Do you have geiser package installed, too?</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:54:01.017200</ts>
    <user>Monserrate</user>
    <text>yes, and i can't delete it</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:54:07.017500</ts>
    <user>Monserrate</user>
    <text>says it's a system package</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:54:19.017700</ts>
    <user>Bertha</user>
    <text>Hmmph.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:54:39.018200</ts>
    <user>Monserrate</user>
    <text>ah, removing with apt</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:54:53.018600</ts>
    <user>Monserrate</user>
    <text>and success</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:54:56.018700</ts>
    <user>Bertha</user>
    <text>Well I think in your init file you'll just have to do that `(add-to-list 'auto-mode-alist '("\\.rkt[dl]?\\'" . racket-mode))` after geiser mode does, somehow.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:54:58.018900</ts>
    <user>Monserrate</user>
    <text>yay</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:55:24.019500</ts>
    <user>Bertha</user>
    <text>Ah, good. I didn't realize Geiser is installed as an OS package in some dists.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:55:39.019700</ts>
    <user>Monserrate</user>
    <text>thanks for the help</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T11:55:48.019900</ts>
    <user>Bertha</user>
    <text>You're welcome.</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-26T15:12:04.021800</ts>
    <user>Claud</user>
    <text>Does anyone have a function like `codeblock-pict` (&lt;http://docs.racket-lang.org/pict/More_Pict_Constructors.html#(def._((lib._pict%2Fcode..rkt)._codeblock-pict))&gt;) but for XML? I'm probably going to implement something like that for an upcoming talk, but it would be even better to _not_ implement it.</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-26T15:18:20.023000</ts>
    <user>Marnie</user>
    <text>&lt;@Claud&gt; would it work if you made a `#lang xml`?</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-26T15:19:03.023100</ts>
    <user>Claud</user>
    <text>&lt;@Bertha&gt; I know doing a normal `build-path` on one "anchor" from `define-runtime-path` works under "normal" conditions, and I use it a lot, but I'm not clear on whether it would register everything properly with the executable creator. (I've never tried to use the executable creator at all.)</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-26T15:29:19.026300</ts>
    <user>Claud</user>
    <text>&lt;@Marnie&gt; That's one option I've considered. The implementation of `codeblock-pict` uses the lexer protocol from `syntax-color`, so I might try to use that directly without going through a `#lang`. I've also thought about using x-expressions, writing an XML pretty-printer for my notion of pretty (which has been on my to-do list for a while), and giving the pretty-printer a hook to emit picts instead of strings.</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-26T18:24:07.026400</ts>
    <user>Bertha</user>
    <text>Good point. I don't know, either. My odometer is zero for the executable creator.</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-26T19:22:52.026600</ts>
    <user>Claud</user>
    <text>It turns out that it works for children of the "anchor" directory, but not necessarily in the way you'd want: &lt;https://github.com/racket/racket/issues/2336&gt;</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-27T10:06:54.027900</ts>
    <user>Del</user>
    <text>The eval-model documentation includes the following sentences about The Separate Compilation Guarantee:

"The practical consequence of this guarantee is that because effects are never visible, no module can detect whether a module it requires is already compiled. Thus, it can never change the compilation of one module to have already compiled a different module."

Can anyone explain the second sentence?</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-27T10:15:47.028500</ts>
    <user>Ola</user>
    <text>I think it means that if module B depends on A, whether A is already compiled or not won’t change compilation of B</text>
  </message>
  <message conversation_id="914">
    <ts>2018-10-27T10:33:47.029500</ts>
    <user>Carlyn</user>
    <text>&lt;@Del&gt; I think the second sentence could be more clearly worded as “Thus, the compilation of one module cannot be affected by having already compiled a different module.”</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-27T10:45:26.031700</ts>
    <user>Andreas</user>
    <text>I am having an interesting situation where a process that should not be increasingly using more and more memory, actually is. I have looked into `vector-set-performance-stats!` and `current-memory-use` and I can confirm that the memory is increasing. My question now is... is there a way to find out who is allocating this memory?</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-27T11:55:55.032100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; I recommend first `(dump-memory-stats)`</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-27T11:56:23.032600</ts>
    <user>Monserrate</user>
    <text>if that isn't enough info, then you can build with more memory debugging info</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-27T11:58:38.032900</ts>
    <user>Monserrate</user>
    <text>```
  --enable-sgcdebug       use Senora GC for debugging (expensive debug mode)
  --enable-backtrace      3m: support GC backtrace dumps (expensive debug mode
```</text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-27T12:22:05.033300</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; Thanks. I will give those a try. </text>
  </message>
  <message conversation_id="915">
    <ts>2018-10-27T14:22:39.033700</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; I assume I need to compile racket with both those flags?</text>
  </message>
  <message conversation_id="916">
    <ts>2018-10-27T14:22:59.034100</ts>
    <user>Andreas</user>
    <text>as far as I understood, senora gc is the 3m gc right?</text>
  </message>
  <message conversation_id="916">
    <ts>2018-10-27T14:25:47.034600</ts>
    <user>Andreas</user>
    <text>The reason I ask is because the build fails when I try to build racket with both flags.</text>
  </message>
  <message conversation_id="916">
    <ts>2018-10-27T14:30:30.034800</ts>
    <user>Andreas</user>
    <text>Now: &lt;https://github.com/racket/racket/issues/2340&gt;</text>
  </message>
  <message conversation_id="916">
    <ts>2018-10-27T15:35:19.036000</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; I think only `--enable-backtrace` is going to be useful, but it’s also a little flaky. FWIW, the `dump-memory-stats` function on RacketCS is reliable and always fully available.</text>
  </message>
  <message conversation_id="916">
    <ts>2018-10-27T15:57:05.037000</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; thanks. I will give `--enable-backtrace` a try. Haven't managed to try RacketCS yet, but I will try to find the time asap.</text>
  </message>
  <message conversation_id="916">
    <ts>2018-10-27T16:12:57.037800</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt;, right, it's flaky as well as you said. `--enable-backtrace` on HEAD gives me :
```
mprotect failed: 7f2e4dd68000, 65536, 1, 12
make[3]: *** [Makefile:85: in-place-setup] Aborted (core dumped)
```</text>
  </message>
  <message conversation_id="916">
    <ts>2018-10-27T16:25:23.040600</ts>
    <user>Andreas</user>
    <text>By the way, what's the status of racketcs? It seems that by saying that the memory dump function is reliable in cs, it implies that I should give it a try. What's missing in cs? </text>
  </message>
  <message conversation_id="917">
    <ts>2018-10-27T16:46:04.040800</ts>
    <user>Alesha</user>
    <text>&lt;https://m.youtube.com/watch?v=t09AJUK6IiM&gt;</text>
  </message>
  <message conversation_id="917">
    <ts>2018-10-27T16:47:13.042200</ts>
    <user>Alesha</user>
    <text>I don’t know all the details about what functionality is missing in cs, the YouTube video has a useful status report </text>
  </message>
  <message conversation_id="916">
    <ts>2018-10-27T17:09:36.044500</ts>
    <user>Lynna</user>
    <text>RacketCS works well enough that it’s worth a try</text>
  </message>
  <message conversation_id="918">
    <ts>2018-10-28T05:08:08.045400</ts>
    <user>Lela</user>
    <text>Hello! Is there a way to parameterize a module instance?
The intent is to have procedures in "utils.rkt" to take into account a context
represented here by "config.rkt" something like:

```
utils.rkt
---------
  #lang racket
  
  (require "config.rkt")
  (require "module.rkt")
  
  
  (define parameterized_module (module config))
  
  (provide parameterized_module)


some_other_module.rkt
---------------------
  #lang racket

  (require "utils.rkt")

  …
```</text>
  </message>
  <message conversation_id="916">
    <ts>2018-10-28T08:27:44.046300</ts>
    <user>Monserrate</user>
    <text>&lt;@Lela&gt; you can use units if you really want parametrized modules, but mostly I'd just recommend using a function</text>
  </message>
  <message conversation_id="918">
    <ts>2018-10-28T08:49:43.046800</ts>
    <user>Lela</user>
    <text>&lt;@Monserrate&gt; Ok, thanks!</text>
  </message>
  <message conversation_id="919">
    <ts>2018-10-28T09:53:09.047400</ts>
    <user>Del</user>
    <text>I thought I might take this issue, since it appears to be fixed:

&lt;https://github.com/racket/racket/issues/1434&gt;

How do I assign it to myself? Perhaps there is an explanation that I didn't find.</text>
  </message>
  <message conversation_id="919">
    <ts>2018-10-28T12:20:34.050500</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; unfortunately you can't be assigned issues unless you're a committer to the repository</text>
  </message>
  <message conversation_id="919">
    <ts>2018-10-28T20:06:14.051900</ts>
    <user>Del</user>
    <text>&lt;@Monserrate&gt; Aha. Matthew thought it would make sense to try to close a few of the older issues. How should I proceed?</text>
  </message>
  <message conversation_id="919">
    <ts>2018-10-28T21:16:17.053400</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; if you comment on them that they are no longer relevant or are fixed then I can click the close button</text>
  </message>
  <message conversation_id="919">
    <ts>2018-10-29T08:15:22.053800</ts>
    <user>Del</user>
    <text>Okay, great. I'll investigate more carefully and then comment.</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T09:18:52.054600</ts>
    <user>Andreas</user>
    <text>On a bare bones system where I am building racket I am seeing:
```
raco setup: --- building documentation ---
raco setup: docs failure: setup: install SQLite to build documentation
```</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T09:18:58.054900</ts>
    <user>Andreas</user>
    <text>Why is sqlite necessary to build the docs?</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T09:22:48.055300</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; the documentation system uses sqlite for cross references</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T09:23:30.055700</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; ah! ok. understood. thanks.</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T09:33:44.056500</ts>
    <user>Del</user>
    <text>I've found information on creating distributions, but is there a page that lists the tools that are used during a build?</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T09:34:22.056900</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; what kind of tools (and which build) do you mean?</text>
  </message>
  <message conversation_id="921">
    <ts>2018-10-29T09:53:54.058600</ts>
    <user>Del</user>
    <text>Building Racket in my cloned repository. There must be a list of tools required, such as a C compiler.

Ah, perhaps if I just want to modify and test one Racket code module, I don't need to do a complete build. Is there a discussion of how to work on a module?</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T09:55:24.059300</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; it depends on the platform, but I don't think there's a list of tools written down. It's a fairly standard set of compilation dependencies.</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T09:56:51.060800</ts>
    <user>Monserrate</user>
    <text>As for a single module, it really depends what package the module is part of. &lt;https://blog.racket-lang.org/2017/09/tutorial-contributing-to-racket.html&gt; parts (2) and (3) cover the differences between whether it's part of a package that's in the `racket` repository, or in some other repository.</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T10:22:30.062600</ts>
    <user>Del</user>
    <text>Yes, that is where I got the idea that I have to build Racket in order to work on the language. But one person's "fairly standard set" is another person's installation list. :sunglasses: I'll set aside a day to build the system. Meanwhile, I can comment on issues after investigating them. Thanks!</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T11:31:56.064500</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; I don't understand why this program doesn't have a continuation barrier error:
```
(let ([t #t])
  (let ([v (list (call/cc (lambda (k) k)))])
    (if t
         (begin (set! t #f)
                (call-with-continuation-barrier
                 (lambda ()
                   (list
                    ((car v) 'bye)))))
          v)))
```
It seems like when we install `k`, it's removing a barrier and replacing it with a continuation that is not a tail of the current continuation (in particular, the replacing continuation has a let binding and a `list` creation that aren't in the current continuation at that point).</text>
  </message>
  <message conversation_id="922">
    <ts>2018-10-29T11:34:17.065700</ts>
    <user>Carlyn</user>
    <text>Don’t continuation barriers only protect “downward jumps” (that is, continuation invocations that would install new barriers), and that example doesn’t ever capture a continuation with the barrier in place? But maybe I’m misunderstanding the example.</text>
  </message>
  <message conversation_id="920">
    <ts>2018-10-29T11:34:54.066200</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; the docs say "It may remove continuation barriers only through jumps to continuations that are a tail of the current continuation." which seems to disallow what's going on there</text>
  </message>
  <message conversation_id="922">
    <ts>2018-10-29T11:35:17.066500</ts>
    <user>Lynna</user>
    <text>Yes, I think the documentation is wrong when it says “may remove continuation barriers only through jumps to continuations that are a tail of the current continuation.”</text>
  </message>
  <message conversation_id="922">
    <ts>2018-10-29T11:36:08.067600</ts>
    <user>Lynna</user>
    <text>(That might have been true once. More likely, it was intended to be true once, not really true, and not a good idea.)</text>
  </message>
  <message conversation_id="922">
    <ts>2018-10-29T11:36:56.068600</ts>
    <user>Carlyn</user>
    <text>Interesting, I never actually noticed that sentence at all (and am not entirely sure what it would mean, but I don’t feel like I have a very good intuitive handle on delimited continuations in general, so that doesn’t mean very much).</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:18:03.069700</ts>
    <user>Andreas</user>
    <text>&lt;@Del&gt; If you're on Linux I can give you a pretty good list of deps. From someone who always builds it based on docker image for debian:stable-slim I know what's needed.</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:18:51.070600</ts>
    <user>Andreas</user>
    <text>&lt;@Alesha&gt; Thanks for the presentation with &lt;@Lynna&gt; on racketcs. That's a really good one. Was that a recent conference? Doesn't look like racketcon though.</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:19:35.071200</ts>
    <user>Alesha</user>
    <text>&lt;@Andreas&gt; I believe it was at the Scheme Workshop which was concurrent with racketcon at the same location</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:20:39.071400</ts>
    <user>Andreas</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:21:03.072000</ts>
    <user>Andreas</user>
    <text>Ah, if I go to youtube, it does say it in the video description. Shame these presentations don't get more exposure: &lt;https://www.youtube.com/channel/UCoKRhx2TCYTX4dils7-eAJw&gt;</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:37:06.072400</ts>
    <user>Alesha</user>
    <text>agreed, there's quite a few fascinating presentation topics at that workshop</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:39:23.073300</ts>
    <user>Del</user>
    <text>&lt;@Andreas&gt; Thanks, but I'm on Windows. I figure I'll just fire up a build and watch the craziness break loose.</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:40:07.073800</ts>
    <user>Andreas</user>
    <text>Sorry &lt;@Del&gt;  can't help on Windows. </text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:46:48.074600</ts>
    <user>Alesha</user>
    <text>&lt;@Del&gt; I build Racket often on Windows. It's easy to do if you have Visual Studio installed</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:47:48.075500</ts>
    <user>Alesha</user>
    <text>I think the current Racket codebase requires Visual Studio 12 or 13. The most recent Visual Studio is not yet supported</text>
  </message>
  <message conversation_id="923">
    <ts>2018-10-29T12:48:32.076400</ts>
    <user>Alesha</user>
    <text>alternatively you could try building using MinGW tool suite which supports Unix style building for Windows, the instructions are in INSTALL.txt</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:08:30.077900</ts>
    <user>Carlyn</user>
    <text>Is &lt;http://bugs.racket-lang.org|bugs.racket-lang.org&gt; inaccessible now? I would like to look at an old PR but just get a login screen. (I also don’t know who actually manages that site, or who ever did… maybe &lt;@Lynna&gt; or &lt;@Monserrate&gt; know?)</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:21:37.078400</ts>
    <user>Monserrate</user>
    <text>&lt;@Carlyn&gt; I'm in charge of that site, but it shouldn't be inacessible</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:22:04.078700</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; If I go to &lt;http://bugs.racket-lang.org/query/&gt;, I just get a login screen.</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:22:12.078900</ts>
    <user>Monserrate</user>
    <text>Yes I see that too</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:22:28.079300</ts>
    <user>Monserrate</user>
    <text>it's working with my login, but that shouldn't be needed</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:26:52.079800</ts>
    <user>Lynna</user>
    <text>VS 2017 is now supported</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:32:44.080200</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; Is there some way I can see the details of PR 13085?</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:33:46.080500</ts>
    <user>Monserrate</user>
    <text>the relevant bit is:
```
 	The documentation for continuation barriers seems to suggest that
the removal of a barrier via a control operator is always okay, but
that the addition of a barrier is not allowed. However, the
following snippet seems to be a counterexample:

#lang racket

(define f
  (call-with-continuation-prompt
   (lambda ()
     (call/cc (lambda (k) k)))))

(call-with-continuation-prompt
(lambda ()
   (call-with-continuation-barrier
    (lambda ()
      (f 5)))))

`f` is an abortive continuation from `call/cc`, which will just
remove the single barrier inside the second prompt. It produces this
error though:

  continuation application: attempt to cross a continuation barrier

Is there another barrier being inserted somehow by this example
that causes it to fail?

The relevant documentation snippet says:

  Specifically, a continuation can be replaced by another only
  when the replacement does not introduce any continuation
  barriers (but it may remove them).
```</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:35:33.081500</ts>
    <user>Carlyn</user>
    <text>Ah, so there wasn’t any further discussion about what the correct behavior is, the documentation was just updated (possibly incorrectly) in an attempt to describe the behavior at the time?</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:38:50.082200</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; then said:
```

 I think the solution here is to fix the documentation. In the
 implementation, a barrier can be removed only though a jump to a
 continuation that is a tail of the current continuation.
```
And then &lt;@Carlita&gt; closed it with this change: &lt;https://github.com/racket/racket/commit/27aa999446&gt;</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:40:54.083100</ts>
    <user>Carlyn</user>
    <text>Aha, thanks! It does look like your program does, indeed, produce an error on old versions of Racket, so this commit mflatt mentioned probably did change the behavior: &lt;https://github.com/racket/racket/commit/544b7a3d53966f58a4d4970ac882a748a357363e&gt;</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:41:15.083600</ts>
    <user>Carlyn</user>
    <text>I was mostly just curious. :)</text>
  </message>
  <message conversation_id="924">
    <ts>2018-10-29T13:41:23.083800</ts>
    <user>Monserrate</user>
    <text>no problem</text>
  </message>
  <message conversation_id="925">
    <ts>2018-10-29T13:49:27.083900</ts>
    <user>Alesha</user>
    <text>Awesome, that's good to know</text>
  </message>
  <message conversation_id="926">
    <ts>2018-10-29T14:29:42.084800</ts>
    <user>Del</user>
    <text>&lt;@Alesha&gt; I'll go the MinGW route. Thanks for pointing out INSTALL.TXT.</text>
  </message>
  <message conversation_id="926">
    <ts>2018-10-29T14:30:34.085500</ts>
    <user>Del</user>
    <text>Question for anyone: When I respond to an issue at GitHub, does the appropriate person get notified?</text>
  </message>
  <message conversation_id="926">
    <ts>2018-10-29T14:30:58.085800</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; in general, yes</text>
  </message>
  <message conversation_id="926">
    <ts>2018-10-29T19:06:32.086900</ts>
    <user>Del</user>
    <text>There are `boolean?`, `null?`, `void?`, etc., but `eof-object?`. Is there a reason for the `-object`? I notice that Heresy provides `eof?`.</text>
  </message>
  <message conversation_id="925">
    <ts>2018-10-29T19:32:35.088000</ts>
    <user>Monserrate</user>
    <text>I think it's to avoid confusion with ports that are at the end of file, but mostly it's historical</text>
  </message>
  <message conversation_id="927">
    <ts>2018-10-29T21:20:09.089100</ts>
    <user>Gerardo</user>
    <text>I am following the "Fear of Macros" article and am looking at
```

&amp;gt; (define-syntax (our-if-v2 stx)
    (define xs (syntax-&amp;gt;list stx))
    (datum-&amp;gt;syntax stx `(cond [,(cadr xs) ,(caddr xs)]
                              [else ,(cadddr xs)])))
```
What is the role of the commas?  Doesn't work without them.</text>
  </message>
  <message conversation_id="927">
    <ts>2018-10-29T21:25:10.092100</ts>
    <user>Gerardo</user>
    <text>?? unquote ??</text>
  </message>
  <message conversation_id="927">
    <ts>2018-10-29T21:25:13.092300</ts>
    <user>Alesha</user>
    <text>&lt;@Gerardo&gt; a comma is an abbreviation for `unquote` which only works with `quasiquote` which is also abbreviated with a backtick. It’s an effective way to assemble arbitrary s-exps out of values. You sometimes see it used to create syntax pieces.

See &lt;https://docs.racket-lang.org/guide/qq.html&gt;</text>
  </message>
  <message conversation_id="927">
    <ts>2018-10-29T21:27:16.092900</ts>
    <user>Gerardo</user>
    <text>Ah -- ok!  I understand now.  Thanks!!</text>
  </message>
  <message conversation_id="928">
    <ts>2018-10-30T05:48:39.093700</ts>
    <user>Franklin</user>
    <text>Does racket/parser-tools have a maintainer? It seems there are 3 pull requests pending.</text>
  </message>
  <message conversation_id="929">
    <ts>2018-10-30T08:02:16.093800</ts>
    <user>Lynna</user>
    <text>I dislike `eof-object?`, but it comes from RNRS.</text>
  </message>
  <message conversation_id="930">
    <ts>2018-10-30T11:06:49.094700</ts>
    <user>Del</user>
    <text>&lt;@Monserrate&gt; Should we add `eof?` as a synonym for `eof-object?`, for consistency? The port function is `port-eof?`.</text>
  </message>
  <message conversation_id="930">
    <ts>2018-10-30T11:09:20.095800</ts>
    <user>Del</user>
    <text>General question: If no one is assigned to an issue on GitHub, will anyone receive a notification if someone comments on the issue?</text>
  </message>
  <message conversation_id="927">
    <ts>2018-10-30T11:10:57.096900</ts>
    <user>Gerardo</user>
    <text>Hello, I am trying to insert a record in a postgres database using the code below:
```
(define (insert-note note)
  (query-exec notes-connection "insert into notes values ($1, $2, $3, $4)" -1
              (timestamp) (timestamp) note))
```
This works but the first field is an auto-incrementing integer ID: `id serial PRIMARY KEY`.</text>
  </message>
  <message conversation_id="930">
    <ts>2018-10-30T11:11:20.097400</ts>
    <user>Gerardo</user>
    <text>So I need to instruct postgres to do its default thing rather than sending it an id</text>
  </message>
  <message conversation_id="930">
    <ts>2018-10-30T11:16:58.098000</ts>
    <user>Monserrate</user>
    <text>&lt;@Del&gt; I don't think we need to add `eof?`, but I'm happy to hear opinions otherwise</text>
  </message>
  <message conversation_id="930">
    <ts>2018-10-30T11:17:33.098700</ts>
    <user>Monserrate</user>
    <text>also, the original reporter recieves a notification, as well as people who have set up the notifications for that</text>
  </message>
  <message conversation_id="930">
    <ts>2018-10-30T11:17:42.099000</ts>
    <user>Monserrate</user>
    <text>plus I see all issue comments</text>
  </message>
  <message conversation_id="930">
    <ts>2018-10-30T11:28:38.099300</ts>
    <user>Del</user>
    <text>Okay, thanks. Let's see if there are any other opinions.</text>
  </message>
  <message conversation_id="931">
    <ts>2018-10-30T14:49:08.101700</ts>
    <user>Odis</user>
    <text>Is there any reason you can’t send an (immutable) box through a place channel?</text>
  </message>
  <message conversation_id="931">
    <ts>2018-10-30T14:50:04.102100</ts>
    <user>Odis</user>
    <text>(It seems odd to me that it can handle, say, vectors, but not boxes.)</text>
  </message>
  <message conversation_id="931">
    <ts>2018-10-30T14:50:26.102600</ts>
    <user>Odis</user>
    <text>Anyway, this show an incompatibility between places and the serialize library.</text>
  </message>
  <message conversation_id="932">
    <ts>2018-10-30T15:32:07.106600</ts>
    <user>Eugena</user>
    <text>&lt;@Gerardo&gt; IIRC you can either 1) list the field names and omit the auto-incrementing one, like `insert into notes (b, c, d) values ($1, $2, $3)` if `a` is the auto-incrementing column and `b, c, d` are the others; or 2) use the `DEFAULT` keyword, like `insert into notes values (DEFAULT, $1, $2, $3)`. Note that you have to write `DEFAULT` literally in the query string; it is a keyword, not a value, so it can't be replaced with any placeholder and argument pair.</text>
  </message>
  <message conversation_id="931">
    <ts>2018-10-30T15:34:07.107500</ts>
    <user>Odis</user>
    <text>Hmm…it looks like the relevant place code is `'#%place-struct` module, which makes me inclined to think that &lt;@Lynna&gt; might know something?</text>
  </message>
  <message conversation_id="931">
    <ts>2018-10-30T15:34:21.107900</ts>
    <user>Odis</user>
    <text>(About why place channels can send vectors, but not boxes.)</text>
  </message>
  <message conversation_id="933">
    <ts>2018-10-30T15:47:21.109800</ts>
    <user>Andreas</user>
    <text>I would like to generate a benchmark report automatically from some data. This benchmark report should be available in html and pdf.  The obvious thing is probably to generate scribble and then go to html and pdf using scribble capabilities. Has anyone done something like this before? Is there any automatically generated scribble out there I could look at?</text>
  </message>
  <message conversation_id="934">
    <ts>2018-10-30T16:47:41.110400</ts>
    <user>Del</user>
    <text>Can I simply install Racket 7.1 on top of 7.0, no muss, no fuss?</text>
  </message>
  <message conversation_id="931">
    <ts>2018-10-30T17:30:47.111200</ts>
    <user>Odis</user>
    <text>&lt;@Del&gt; Eh, there’s a slight chance things won’t work, but honestly, 99/100 times it works for me.</text>
  </message>
  <message conversation_id="931">
    <ts>2018-10-30T17:31:32.112100</ts>
    <user>Odis</user>
    <text>So if its your personal machine, you’re ‘probably fine’ (afaik), but I would be hesitant to do it in a multi-user setting.</text>
  </message>
  <message conversation_id="931">
    <ts>2018-10-30T17:31:58.112700</ts>
    <user>Odis</user>
    <text>(Of course, what OS and install type you have would also probably cause your milage to vary.)</text>
  </message>
  <message conversation_id="934">
    <ts>2018-10-30T21:21:12.113600</ts>
    <user>Bertha</user>
    <text>&lt;@Del&gt; On macOS I currently have 10 versions of Racket installed side by side. I'm guessing similar possible on Windows but don't know first-hand.</text>
  </message>
  <message conversation_id="934">
    <ts>2018-10-31T09:35:47.115300</ts>
    <user>Del</user>
    <text>&lt;@Bertha&gt; If I simply run the 7.1 installer, will it install on top of 7.0 or off to the side?</text>
  </message>
  <message conversation_id="934">
    <ts>2018-10-31T09:59:22.117100</ts>
    <user>Bertha</user>
    <text>On macOS they install side by side. Well, it's not so much an "installer" as a .dmg unpacker that makes a new Applications directory with a name like "Racket &amp;lt;version&amp;gt;". I forget how it works on Windows, it's been some years. Hopefully someone else using Windows now can chime in and say.</text>
  </message>
  <message conversation_id="934">
    <ts>2018-10-31T10:04:52.118800</ts>
    <user>Lynna</user>
    <text>If you’re on Windows, then the default path suggested by the installer doesn’t have a version. You can add a version (or change the path in whatever way you like) to have multiple versions installed. If you don’t change the path, the installer isn’t be willing to overwrite a previous version, because that doesn’t work; instead, first run “uninstall.exe” in the existing installation.</text>
  </message>
  <message conversation_id="934">
    <ts>2018-10-31T10:07:37.118900</ts>
    <user>Lynna</user>
    <text>It would make sense to add boxes to the set of allowed place messages. I didn’t add it before because immutable boxes seem useless; then again, I imagine that the serializer uses a box as just a way to tag a value (to distinguish it in some way), since I’ve used that trick a few times. I can make the change to places sometime soon.</text>
  </message>
  <message conversation_id="935">
    <ts>2018-10-31T11:58:58.119400</ts>
    <user>Aimee</user>
    <text>what's DrRacket's logo today? it's cool</text>
  </message>
  <message conversation_id="935">
    <ts>2018-10-31T11:59:40.119900</ts>
    <user>Monserrate</user>
    <text>&lt;@Aimee&gt; it's a pumpkin carved with a lambda</text>
  </message>
  <message conversation_id="935">
    <ts>2018-10-31T12:00:56.120800</ts>
    <user>Aimee</user>
    <text>ohhh!! delicious!
(I though it was melted iron steel, oops)</text>
  </message>
  <message conversation_id="935">
    <ts>2018-10-31T12:01:15.121200</ts>
    <user>Tami</user>
    <text>Happy Halloweeeeen!</text>
  </message>
  <message conversation_id="936">
    <ts>2018-10-31T12:59:14.121500</ts>
    <user>Thaddeus</user>
    <text>Happy Halloween :jack_o_lantern:</text>
  </message>
  <message conversation_id="937">
    <ts>2018-10-31T16:38:07.124400</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Is the documentation for `bound-identifier=?` correct? As written, I think it’s wrong, or else I don’t understand it. It says:
&amp;gt; Returns `#t` if the identifier _`a-id`_ would bind _`b-id`_ (or vice versa) if the identifiers were substituted in a suitable expression context at the phase level indicated by _`phase-level`_, `#f` otherwise.
However, it’s easy to construct situations in which one identifier would bind another but the identifiers are _not_ `bound-identifier=?`. Should the documentation say “*and* vice versa”, instead? That seems like the correct description of `bound-identifier=?`’s behavior to me.</text>
  </message>
  <message conversation_id="937">
    <ts>2018-10-31T17:30:11.124600</ts>
    <user>Lynna</user>
    <text>Yes, the documentation needs to be fixed.</text>
  </message>
  <message conversation_id="937">
    <ts>2018-10-31T17:37:17.124800</ts>
    <user>Carlyn</user>
    <text>Was this documentation right in the past, on a previous iteration of the macro system, or has it always been wrong?</text>
  </message>
  <message conversation_id="937">
    <ts>2018-10-31T17:56:51.125000</ts>
    <user>Lynna</user>
    <text>It must have always been wrong.</text>
  </message>
  <message conversation_id="938">
    <ts>2018-10-31T18:05:02.125300</ts>
    <user>Eugena</user>
    <text>I thought before sets of scopes, the rule was two identifiers were  `bound-identifier=?` if they were `free-identifier=?` and if their sets of marks were the same. (So, symmetric.)</text>
  </message>
  <message conversation_id="938">
    <ts>2018-10-31T18:06:27.125500</ts>
    <user>Eugena</user>
    <text>It might be good to add an asymmetric `would-capture?` predicate that predicts binding structure in the new system.</text>
  </message>
  <message conversation_id="939">
    <ts>2018-10-31T18:55:13.126000</ts>
    <user>Carlita</user>
    <text>PPA for Racket is building: &lt;https://launchpad.net/~plt/+archive/ubuntu/racket/+builds?build_state=building&gt;</text>
  </message>
  <message conversation_id="940">
    <ts>2018-10-31T20:21:50.130400</ts>
    <user>Del</user>
    <text>When I visit a documentation page that contains a table of contents (e.g., &lt;https://docs.racket-lang.org/drracket/index.html&gt;), is there any way to have the whole shebang displayed on one page, so that I can print it without having to visit every subpage?</text>
  </message>
  <message conversation_id="940">
    <ts>2018-10-31T20:33:37.131000</ts>
    <user>Carlyn</user>
    <text>&lt;@Del&gt; There are PDF versions of the documentation for all the packages in the main distribution available here: &lt;http://download.racket-lang.org/releases/7.1/pdf-doc/&gt;</text>
  </message>
  <message conversation_id="940">
    <ts>2018-10-31T20:56:19.131300</ts>
    <user>Del</user>
    <text>Ooh, nice. Thanks for linking me to it. Some systems have no pdf versions of their online documentation. Very good!</text>
  </message>
  <message conversation_id="941">
    <ts>2018-11-01T00:17:18.132500</ts>
    <user>Marnie</user>
    <text>what’s `prop:blame` _for_ exactly? like, what effect does it have on contract error messages?</text>
  </message>
  <message conversation_id="941">
    <ts>2018-11-01T00:18:20.133600</ts>
    <user>Marnie</user>
    <text>the docs describe how `value-blame` can extract the blame object from something with the property attached but they don’t say anything about _why_ you’d use `value-blame`, or whether or not the contract system calls `value-blame` implicitly anywhere</text>
  </message>
  <message conversation_id="942">
    <ts>2018-11-01T05:58:45.134700</ts>
    <user>Lela</user>
    <text>Thank you for the cool 7.1 release! Specially:
```
&amp;gt; (define (add #:x x #:y y) (+ x y))
&amp;gt; (define add1 (curry add #:x 1))
&amp;gt; (add1 #:y 2)
3
```
Really neat! Thx!</text>
  </message>
  <message conversation_id="942">
    <ts>2018-11-01T06:21:08.136100</ts>
    <user>Lela</user>
    <text>Is there a way to declare package dependencies so that something like `raco install` would install all the necessary dependencies? Like Anaconda environments.</text>
  </message>
  <message conversation_id="942">
    <ts>2018-11-01T08:20:37.136800</ts>
    <user>Monserrate</user>
    <text>&lt;@Lela&gt; yes, you declare dependencies in the info.rkt file</text>
  </message>
  <message conversation_id="942">
    <ts>2018-11-01T08:20:57.137000</ts>
    <user>Lela</user>
    <text>Great thx!</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T08:23:13.137100</ts>
    <user>Monserrate</user>
    <text>I think you'd have to ask &lt;@Eileen&gt; or maybe &lt;@Jen&gt; </text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T08:52:59.137300</ts>
    <user>Eileen</user>
    <text>It affects `contract-blame`</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T08:53:27.137500</ts>
    <user>Eileen</user>
    <text>If you are making a combinator, you can use it to stick blame onto something so that `contract-blame` will return it. It is on you (as the combinator author) to get that right.</text>
  </message>
  <message conversation_id="942">
    <ts>2018-11-01T09:23:16.139100</ts>
    <user>Alesha</user>
    <text>&lt;@Lela&gt; if you want to avoid manually specifying dependencies, `raco setup` has an option to automatically detect missing dependencies and write them to the correct package's info.rkt file.

There's a concise tutorial that has useful details &lt;http://blog.racket-lang.org/2017/10/tutorial-creating-a-package.html&gt;</text>
  </message>
  <message conversation_id="942">
    <ts>2018-11-01T09:24:56.139500</ts>
    <user>Lela</user>
    <text>Great! Will take a look. Thx!</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T11:43:15.139600</ts>
    <user>Marnie</user>
    <text>I don't see a `contract-blame` function in the docs</text>
  </message>
  <message conversation_id="944">
    <ts>2018-11-01T13:20:56.140300</ts>
    <user>Susana</user>
    <text>Hello, is the Racket VM's bytecode instruction set documented anywhere?</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T13:38:28.140700</ts>
    <user>Eileen</user>
    <text>Oops, object-blame</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T13:38:40.141100</ts>
    <user>Eileen</user>
    <text>Uhhh value-blame?</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T13:39:29.142100</ts>
    <user>Eileen</user>
    <text>It answers only the question "who might get blamed if I use this value". There are no other guarantees</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T13:39:30.142300</ts>
    <user>Jen</user>
    <text>I think `value-blame` queries it. I had thought `value-blame` might be used in the contract-profiler, but I'm not sure about that.

I don't think it changes the error messages anywhere, and it's just a convenient place to store the blame information on a contracted value in case some tool needs to use that information</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T13:45:41.142500</ts>
    <user>Marnie</user>
    <text>Are there tools that use it? Why would a tool want to use it?</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:05:10.145100</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; In the test suite for the contract system, is there a contract I can use if I want to test that something works with a `(conjoin contract? (negate chaperone-contract?))`? Testing against any of the built-in contracts that happen to currently produce non-chaperone contracts (such as, for example, class contracts) seems like a bad idea, since they could always be improved to produce chaperone contracts in the future.</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:05:52.145500</ts>
    <user>Eileen</user>
    <text>An impersonator contract?</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:06:39.146200</ts>
    <user>Carlyn</user>
    <text>Right. I’m wondering if there’s a canonical impersonator contract that is guaranteed to not become a chaperone contract at some point in the future.</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:09:03.147000</ts>
    <user>Jen</user>
    <text>&lt;@Carlyn&gt; you can just write your own with make-contract unless I’m misunderstanding?</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:09:29.147800</ts>
    <user>Monserrate</user>
    <text>`parametric/c` generates impersonator contracts that have to be that way</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:09:43.148100</ts>
    <user>Carlyn</user>
    <text>&lt;@Jen&gt; Yes, I can do that if that’s the right answer, I was just wondering if there was something else the test suite did something else by convention.</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:09:58.148400</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; That’s a good point!</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:14:06.150400</ts>
    <user>Carlyn</user>
    <text>I don’t think I can really use parametric contracts here, though, since I’m putting a contract on an immutable data structure, which doesn’t really have a meaningful way to use parametric contracts… though I guess I could write a function on the immutable data structure, instead.</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:19:45.151700</ts>
    <user>Carlyn</user>
    <text>(Also, I only just noticed `impersonator-contract?` exists; I find it a little weird that `flat-contract?` appears to imply `chaperone-contract?` but `impersonator-contract?` is its own thing.)</text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:50:55.157900</ts>
    <user>Jen</user>
    <text>&lt;@Carlyn&gt; I’ve had issues with these distinctions before too because I think there are at least two reasonable views:
1. There’s a hierarchy and all flat contracts are also chaperones, and all chaperone contracts are impersonators, but some impersonators are neither flat nor chaperone
2. The categories are disjoint, so flat is distinct from chaperone which must wrap and preserve behavior bs impersonators with no guarantees.

I think the predicates that recognize these things have ended up somewhere in the middle of these two so it’s sort of confusing, although I think `impersonator-contract?` is roughly equivalent to not flat and not chaperone </text>
  </message>
  <message conversation_id="943">
    <ts>2018-11-01T16:52:08.159100</ts>
    <user>Carlyn</user>
    <text>There’s also the additional point of confusion that `chaperone-contract?` recognizes contracts whose projections must produce values that satisfy `chaperone-of?`, but `impersonator-contract?` projections do not have to preserve `impersonator-of?`.</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T18:18:58.159800</ts>
    <user>Del</user>
    <text>I have discovered something that must point to a misunderstanding on my part. The first function behaves as I'd expect. What's going on with the second function?

```&amp;gt; (define (check x y)
    (if (or (not x) (equal? y 'surprise))
        'invalid
        y))
&amp;gt; (check #t 'surprise)
'invalid
```

```&amp;gt; (define/contract (check x y)
    (parametric-&amp;gt;/c [X] (boolean? X . -&amp;gt; . X))
    (if (or (not x) (equal? y 'surprise))
        'invalid
        y))
&amp;gt; (check #t 'surprise)
'surprise
```</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T18:35:15.160700</ts>
    <user>Tracee</user>
    <text>&lt;@Del&gt; The second function wraps y into a #&amp;lt;X&amp;gt; value so you can't really do anything with it, see &lt;https://docs.racket-lang.org/reference/parametric-contracts.html?q=parametric-%3E%2Fc#%28form._%28%28lib._racket%2Fcontract%2Fparametric..rkt%29._parametric-~3e%2Fc%29%29&gt;</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:01:44.165900</ts>
    <user>Del</user>
    <text>&lt;@Tracee&gt; Yes, I read the description. I don't have a good grip on wrappers yet. But is the mere presence of a contract supposed to change the evaluation of the `if` form? Why does `(check #t 'surprise)` evaluate differently with the contract?</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:02:19.166100</ts>
    <user>Bertha</user>
    <text>&lt;@Del&gt; Speaking of `'surprise`s and `equal?`: The doc for `equal?` mentions it works for "inspectable structures". Well, Racket `struct`s are by default opaque -- not inspectable. Only `#:transparent` (or `#:prefab`) `struct`s can be `equal?`. This sometimes catches people by surprise (where "people" includes me in the past, and other people I've talked to.)</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:04:23.166900</ts>
    <user>Tracee</user>
    <text>&lt;@Del&gt; because  `(equal? 'surprise #&amp;lt;X&amp;gt;)` =&amp;gt; #f, so it returns y</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:08:31.169900</ts>
    <user>Marnie</user>
    <text>&lt;@Del&gt; The mere presence of a chaperone or flat contract is not supposed to change semantics in ways like that. However, impersonator contracts can pretty much do whatever they want. Most contracts are flat or chaperone. As far as I know, parametric contracts are the only use case for impersonator contracts.</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:09:17.170600</ts>
    <user>Marnie</user>
    <text>So a good rule of thumb is that as long as you’re not using parametric contracts, you won’t run into impersonators and contracts won’t change how `equal?` works</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:22:44.172300</ts>
    <user>Del</user>
    <text>Wow! I must do more reading on contracts. So does this mean that the following documentation ought to be reworked not to use `equal?`? Or should a sentence or two be added to explain what is going on? It sure fooled me.

&lt;https://docs.racket-lang.org/reference/parametric-contracts.html?q=parametric-%3Ec#%28form._%28%28lib._racket%2Fcontract%2Fparametric..rkt%29._parametric-~3e%2Fc%29%29&gt;</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:33:04.174800</ts>
    <user>Marnie</user>
    <text>I think what the docs were trying to explain with that example is that `parametric-&amp;gt;` is _supposed_ to change how `equal?` works, because a parametric function isn’t supposed to do anything with the inputs its parametric in. This includes inspecting them with `equal?`.</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:34:09.175900</ts>
    <user>Marnie</user>
    <text>It’s a bit weird that the docs for `parametric-&amp;gt;/c` have an example of how _not_ to use it without first presenting an example of how you’re supposed to use it correctly.</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:35:40.178400</ts>
    <user>Tracee</user>
    <text>it should probably be `(X . -&amp;gt; . (listof X))` to indicate that the focus is on the types, not the code within... that parametric types aren't supposed to be "used" by the function since it lacks type information.</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:35:55.178800</ts>
    <user>Tracee</user>
    <text>ofc change the fn appropriately to fit that contract</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:36:18.179200</ts>
    <user>Marnie</user>
    <text>If you’re looking to improve those docs, I’d fix that. After the current two paragraphs of prose add an example of a good use of parametricity like this:

```
 (define/contract (choose-one bool a b)
    (parametric-&amp;gt;/c [X] (boolean? X X . -&amp;gt; . X))
    (if bool a b))
```</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:37:16.180400</ts>
    <user>Marnie</user>
    <text>I don’t think talking about it in terms of types will be helpful; parametric contracts have some _very_ big differences from a parametrically polymorphic type variable</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:39:23.184300</ts>
    <user>Tracee</user>
    <text>&lt;@Marnie&gt; I like that example, I'd also like to show readers how to use them in type constructors
```
(define/contract (cons-same x lst)
    (parametric-&amp;gt;/c [X] (X (listof X) . -&amp;gt; . (listof X))
    (cons x lst))
```</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:39:30.184500</ts>
    <user>Marnie</user>
    <text>The way parametric contracts work is if a function promises that it doesn’t care what input it’s given, the parametric contract says “okay prove it” by wrapping every input as it goes into the function so all the function sees is this black box value that it can’t do anything with. It’s deliberately not `equal?` to any other value.</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:40:19.185700</ts>
    <user>Tracee</user>
    <text>I say type ctors but it's probably called something different in racket. This is maybe useful for more haskell-oriented people I guess</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:40:48.186700</ts>
    <user>Marnie</user>
    <text>If a function says it doesn’t care about its input, but then actually tries to peek at the input by testing it with `equal?` or do something else with it (like log it), the opaque wrapper causes that to fail</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:42:35.187900</ts>
    <user>Del</user>
    <text>Then I have to say that the example in the documentation now, without any explanation, feels like a deliberate trap. Where can I read about these wrappers that explains what y'all have just explained to me?

I'm not sure I'm ready to update the documentation. Should I add an issue and then hopefully come back to it in the future and deal with it myself?</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:42:58.188200</ts>
    <user>Marnie</user>
    <text>I think an issue would be great</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:43:39.188600</ts>
    <user>Marnie</user>
    <text>Hmm. There’s a section in the racket guide on parametric contracts: &lt;https://docs.racket-lang.org/guide/contracts-exists.html&gt;</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:43:47.188900</ts>
    <user>Marnie</user>
    <text>but it’s not linked from the reference section</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:43:53.189100</ts>
    <user>Marnie</user>
    <text>and it doesn’t cover `parametric-&amp;gt;/c`</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:45:51.189700</ts>
    <user>Marnie</user>
    <text>I think the only place this is thoroughly discussed is the paper on parametric contracts</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:46:28.190100</ts>
    <user>Tracee</user>
    <text>For debugging purposes, can we extract information out of the opaque object?</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:51:00.190700</ts>
    <user>Marnie</user>
    <text>ah hah! found the paper</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:51:49.191000</ts>
    <user>Marnie</user>
    <text>&lt;http://www.ccs.neu.edu/home/amal/papers/blameall.pdf&gt;</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:52:18.191200</ts>
    <user>Marnie</user>
    <text>wait nope</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:54:31.191400</ts>
    <user>Marnie</user>
    <text>Maybe this one? &lt;http://www.ccs.neu.edu/home/amal/papers/parpolyseal.pdf&gt;</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T21:59:36.192000</ts>
    <user>Marnie</user>
    <text>Okay I found the paper I was thinking of. It’s “Relationally-Parametric Polymorphic Contracts”: &lt;https://www.eecs.northwestern.edu/~robby/pubs/papers/dls2007-gmfk.pdf&gt;</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T22:17:15.193600</ts>
    <user>Marnie</user>
    <text>&amp;gt; “Informally, if a function `f` accepts an argument of type `α`, parametricity ensures that the argument is abstract to `f` — the argument may not be examined or deconstructed by `f` in any way. Moreover, `f` may not determine the concrete type of `α`. This seemingly harsh restriction in fact allows rich abstractions. Since values of type `α` are abstract to `f`, a programmer may change the concrete type of `α` and be assured that the behavior of `f` will not change. Therefore, we want contracts of the form `(forall (α ...) C)` to preserve the static notion of parametric polymorphism at runtime. Such contracts will implement—that is to say, detect violations of—relational parametricity.”

&lt;@Del&gt; Does this prose help?</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-01T22:18:01.194400</ts>
    <user>Marnie</user>
    <text>&lt;@Tracee&gt; I don’t think so. If you try to log it it just prints as something like `#&amp;lt;opaque&amp;gt;`</text>
  </message>
  <message conversation_id="946">
    <ts>2018-11-02T04:21:15.194900</ts>
    <user>Tracee</user>
    <text>Anyone know how I make with -ggdb?</text>
  </message>
  <message conversation_id="947">
    <ts>2018-11-02T08:04:48.195000</ts>
    <user>Monserrate</user>
    <text>Probably you just need to run the binary under gdb, but it may help to use the racket3m binary in the src/build directory</text>
  </message>
  <message conversation_id="948">
    <ts>2018-11-02T08:45:37.195500</ts>
    <user>Del</user>
    <text>I will open an issue with all this information and revisit it in the future.</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-02T09:09:02.196500</ts>
    <user>Tracee</user>
    <text>Getting SIGSEGV maperr in `scheme_gmp_tls_unload`, s is not null, line 5822, running &lt;https://github.com/racket/gui/issues/118&gt;</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-02T09:09:31.197300</ts>
    <user>Tracee</user>
    <text>It doesn't make any sense to me, why would we sigsegv with a valid ptr here, and why only on the assignment, not the read?</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-02T10:46:54.198200</ts>
    <user>Lynna</user>
    <text>&lt;@Tracee&gt; That’s not an actual crash. It’s an intentional fault set up by the GC to implement write barriers. In gdb, use `handle SIGSEGV nostop noprint` and then continue.</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-02T10:54:05.198600</ts>
    <user>Monserrate</user>
    <text>&lt;@Tracee&gt; I have this alias: `alias gdbracket='gdb  -eval-command "handle SIGSEGV nostop noprint" --args $PLTHOME/racket/src/build/racket/racket3m'`</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-02T10:57:52.198900</ts>
    <user>Tracee</user>
    <text>I see. Maybe it's just a GTK and GLFW conflict then</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-02T10:59:26.199200</ts>
    <user>Tracee</user>
    <text>Here's the backtrace if anyone's interested &lt;https://pastebin.com/gMDGU9fU&gt;</text>
  </message>
  <message conversation_id="949">
    <ts>2018-11-02T11:18:48.199500</ts>
    <user>Lashell</user>
    <text>I answered a question about Racket on reddit - please let me know if I got anything wrong.

&lt;https://www.reddit.com/r/Racket/comments/9td40m/why_not_use_racket/?st=JO05VWS8&amp;amp;sh=6958b525&gt;</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T11:38:04.199900</ts>
    <user>Franklin</user>
    <text>Sounds right: &lt;https://github.com/racket/racket/issues/1570&gt;</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T11:40:20.200300</ts>
    <user>Franklin</user>
    <text>Oh - missed you had multiple comments :slightly_smiling_face:</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-02T11:41:54.200800</ts>
    <user>Tracee</user>
    <text>&lt;@Lashell&gt; `I would suggest the community is now big enough that it would be easy to find a Racket consultant in your region.`
That's quite optimistic but how are you getting this information?</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T11:42:11.201000</ts>
    <user>Franklin</user>
    <text>I like the linkt to: &lt;https://www.techrepublic.com/google-amp/article/famous-developers-reveal-the-programming-languages-theyre-glad-they-learned/&gt;</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T11:55:36.207200</ts>
    <user>Lashell</user>
    <text>I don’t think it is optimistic at all. Racket is loved by many developers who would jump at paying gigs. There is quite an active [Racket-Money] list and a significant portion of the community that doesn’t participate often on the list/Twitter/reddit/etc. 

I’m not a recruiter but I have no doubt even I could find good people to do consulting work.

S.
</text>
  </message>
  <message conversation_id="945">
    <ts>2018-11-02T11:57:08.207800</ts>
    <user>Lashell</user>
    <text>I love the quote:

Carmack: Racket is 'among the most productive languages in use today'.</text>
  </message>
  <message conversation_id="951">
    <ts>2018-11-02T12:19:32.209100</ts>
    <user>Carlyn</user>
    <text>Something about this change broke the package dependency checker for me: &lt;https://github.com/racket/racket/commit/8bed64f44f26d63bfdde816fb4b3d55a60b6d67f&gt; I now consistently get this output when I run `raco setup`:
```
raco setup: --- checking package dependencies ---
cdddr: contract violation
  expected: (cons/c any/c (cons/c any/c pair?))
  given: '("6.90.0.28" ("6637c2dff775d4d7f586b77d93572c9d070cd00b" . "f9065fa7389750e16fe00d7ba36748f61d3e0df6"))
  context...:
   /Users/alexis/gits/racket/racket/racket/collects/setup/private/pkg-deps.rkt:478:8: for-loop
   /Users/alexis/gits/racket/racket/racket/collects/setup/private/pkg-deps.rkt:474:4: for-loop
   /Users/alexis/gits/racket/racket/racket/collects/setup/private/pkg-deps.rkt:465:2: for-loop
   /Users/alexis/gits/racket/racket/racket/collects/setup/private/pkg-deps.rkt:26:0: check-package-dependencies
   /Users/alexis/gits/racket/racket/racket/collects/setup/setup-core.rkt:71:0: setup-core
   "/Users/alexis/gits/racket/racket/racket/collects/setup/main.rkt": [running body]
   temp37_0
   for-loop
   run-module-instance!125
   "/Users/alexis/gits/racket/racket/racket/collects/raco/main.rkt": [running body]
   temp37_0
   for-loop
   run-module-instance!125
   perform-require!78
```
Do other people on HEAD get this, too? Or is it just me?</text>
  </message>
  <message conversation_id="951">
    <ts>2018-11-02T12:39:41.210300</ts>
    <user>Aimee</user>
    <text>How about remove all `compiled` directories in the packages you installed and re-run `raco setup`?</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:41:45.211200</ts>
    <user>Carlyn</user>
    <text>Unfortunately, deleting `compiled/` and recompiling does not seem to have fixed the problem.</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:43:14.211300</ts>
    <user>Marinda</user>
    <text>I’ve also been getting weird failures related to dependencies and module loading but have not pinpointed the cause yet.</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:43:46.212000</ts>
    <user>Marinda</user>
    <text>Vintage Racket question: anyone recall why this code works on Racket 6.0–6.2:
```</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:43:51.212200</ts>
    <user>Marinda</user>
    <text>```
#lang racket
(begin
  (module foo racket
    (define result 42)
    (provide result))
  (require 'foo)
  result)
```</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:44:09.212600</ts>
    <user>Marinda</user>
    <text>But this variant (inside `eval`) does not?
```
#lang racket
(define-namespace-anchor nsa)
(eval #'(begin
          (module foo racket
            (define result 42)
            (provide result))
          (require 'foo)
          result) (namespace-anchor-&amp;gt;namespace nsa))
```</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:44:32.213000</ts>
    <user>Marinda</user>
    <text>Error is `result: undefined; cannot reference an identifier before its definition`</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:45:01.213300</ts>
    <user>Monserrate</user>
    <text>those are very different programs</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:45:23.213600</ts>
    <user>Monserrate</user>
    <text>the first one has a submodule, the second one has a top-level module</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:46:25.214200</ts>
    <user>Marinda</user>
    <text>I only care about the `eval` version, which works from 6.3 onwards.</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:47:03.215000</ts>
    <user>Monserrate</user>
    <text>so the "answer" is that the set of scopes expander changed something about how modules at the top-level inside `begin` work</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:47:17.215200</ts>
    <user>Monserrate</user>
    <text>which is not super-helpful</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:47:30.215600</ts>
    <user>Monserrate</user>
    <text>&lt;@Lynna&gt; will probably have some more detailed thoughts on exactly what changed</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T14:53:43.215800</ts>
    <user>Lynna</user>
    <text>I changed the format of the “.dep” file rceently, and a file that claims “6.90.0.28" is clearly from before that change. So, `raco setup` should not try to inspect old “.dep” files.
I suspect that &lt;@Marinda&gt; saw something similarly related to the “.dep” change, and probably it was difficult to replicate because the problem “.dep” file  got replaced/updated.</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T15:00:15.216000</ts>
    <user>Carlyn</user>
    <text>Oh, this might be because I have `PLTCOMPILEDROOTS` set to `compiled/@(version):`, and IIRC the dependency checker is not very intelligent when that environment variable is set.</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T15:09:16.218400</ts>
    <user>Marinda</user>
    <text>The namespace anchor is unnecessary, so this is the simplest failing example:
```
#lang racket
(eval #'(begin
          (module foo racket
            (define result 42)
            (provide result))
          (require 'foo)
          result))
```</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T15:21:01.218900</ts>
    <user>Marinda</user>
    <text>Ah, `local-require` will fix it (or “fix” it)
```
#lang racket
(eval #'(begin
          (module foo racket
            (define result 42)
            (provide result))
          (local-require 'foo)
          result))
```</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-02T16:03:50.219400</ts>
    <user>Monserrate</user>
    <text>&lt;@Marinda&gt; can you just remove the begin?</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-03T17:56:28.219800</ts>
    <user>Tracee</user>
    <text>&lt;https://news.ycombinator.com/item?id=18369822&gt;</text>
  </message>
  <message conversation_id="952">
    <ts>2018-11-03T17:56:38.220200</ts>
    <user>Tracee</user>
    <text>Thread about Racket jobs on HN</text>
  </message>
  <message conversation_id="953">
    <ts>2018-11-04T00:10:07.220800</ts>
    <user>Carlyn</user>
    <text>&lt;@Dia&gt; It looks like pkgd fell over again.</text>
  </message>
  <message conversation_id="953">
    <ts>2018-11-04T00:19:24.222700</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I’ve been getting a lot of warnings from `raco setup` lately that look like this:
```
raco setup: --- building documentation ---
raco setup: WARNING: duplicate tag: (def ((lib "setup/plt-installer.rkt") on-installer-run))
raco setup:  in: /Users/alexis/gits/racket/racket/racket/share/pkgs/drracket/setup/plt-installer.scrbl
raco setup:  in: /Users/alexis/gits/racket/racket/racket/share/pkgs/drracket/setup/plt-installer.scrbl
raco setup: WARNING: duplicate tag: (def ((lib "setup/plt-installer.rkt") run-installer))
raco setup:  in: /Users/alexis/gits/racket/racket/racket/share/pkgs/drracket/setup/plt-installer.scrbl
raco setup:  in: /Users/alexis/gits/racket/racket/racket/share/pkgs/drracket/setup/plt-installer.scrbl
raco setup: WARNING: duplicate tag: (def ((lib "setup/plt-installer.rkt") run-single-installer))
raco setup:  in: /Users/alexis/gits/racket/racket/racket/share/pkgs/drracket/setup/plt-installer.scrbl
raco setup:  in: /Users/alexis/gits/racket/racket/racket/share/pkgs/drracket/setup/plt-installer.scrbl
```
This only seems to happen for that one scrbl file, and it persisted even after I tried uninstalling and reinstalling the drracket package. I haven’t tried completely blowing away my installation and starting over, but I feel like I’ve tried everything else I know of short of that. Do you know what might be the problem, or how I could figure out what’s going wrong?</text>
  </message>
  <message conversation_id="952">
    <ts>2018-11-04T08:55:51.223200</ts>
    <user>Franklin</user>
    <text>What happened to &lt;http://readscheme.org|readscheme.org&gt; ?</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-04T09:19:05.223400</ts>
    <user>Ola</user>
    <text>I heard the domain expired</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-04T09:20:26.223900</ts>
    <user>Franklin</user>
    <text>I hope Jim plans to bring it up again. It's a great resource.</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-04T09:29:25.224200</ts>
    <user>Franklin</user>
    <text>&lt;http://benderweb.net|benderweb.net&gt; is offline too</text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-04T09:34:06.224600</ts>
    <user>Franklin</user>
    <text>Does anyone have Jim Bender's email?</text>
  </message>
  <message conversation_id="954">
    <ts>2018-11-04T11:48:50.224700</ts>
    <user>Bertha</user>
    <text>I've seen that recently, too. Even running Racket 6.10. I assumed it was package-specific and didn't have time to detour to investigate. But...?</text>
  </message>
  <message conversation_id="955">
    <ts>2018-11-05T09:31:14.226800</ts>
    <user>Andreas</user>
    <text>We can create picts for slideshow with racket code using `code`. What about other languages? Is there maybe a way to use pygments to do the highlighting before turning it into a pict?</text>
  </message>
  <message conversation_id="955">
    <ts>2018-11-05T11:16:23.227600</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; you could write a color lexer for your other language ...</text>
  </message>
  <message conversation_id="955">
    <ts>2018-11-05T11:21:43.228800</ts>
    <user>Andreas</user>
    <text>Sounds too much work to display 3 lines of C in a slide. I was keen to have something ready! :slightly_smiling_face: </text>
  </message>
  <message conversation_id="950">
    <ts>2018-11-05T12:13:13.230300</ts>
    <user>Helena</user>
    <text>If there's a #lang C somewhere, you can use that. Here's an example using PyonR's `#lang python` &lt;https://github.com/nuprl/retic_performance/blob/master/gm-pepm-2018/nepls-2017/nepls.rkt#L84&gt;</text>
  </message>
  <message conversation_id="956">
    <ts>2018-11-05T13:41:18.230500</ts>
    <user>Tracee</user>
    <text>Don't think so, ... could make one where it pipes the code to gcc and creates ffi wrappers to the generated objects</text>
  </message>
  <message conversation_id="955">
    <ts>2018-11-05T14:11:06.233700</ts>
    <user>Franklin</user>
    <text>I think Joe Marshall wrote a parser for C at some point - at the time Common Larceny was written.</text>
  </message>
  <message conversation_id="955">
    <ts>2018-11-05T14:26:55.233800</ts>
    <user>Jettie</user>
    <text>&lt;@Andreas&gt; sorry I rarely check slack.  But anyway, a rash script is likely to be a bunch of top-level expressions.  But you can also define a function, say

```
(define (f)
  {
     ls
     do stuff
     ...
  })
```

and then provide it.  You can also make submodules and do normal racket stuff.</text>
  </message>
  <message conversation_id="955">
    <ts>2018-11-05T14:28:22.234000</ts>
    <user>Jettie</user>
    <text>But if you require a rash module that just has top-level code it will just run once when you require it.</text>
  </message>
  <message conversation_id="957">
    <ts>2018-11-05T16:30:42.237400</ts>
    <user>Lela</user>
    <text>Hello! Is there a way to "pipeline" functions? An operator `▶` such that: `(f (g (h x))) ≡ h ▶ g ▶ f x` ?</text>
  </message>
  <message conversation_id="957">
    <ts>2018-11-05T16:32:29.237800</ts>
    <user>Carlyn</user>
    <text>See the `threading` package: &lt;http://docs.racket-lang.org/threading/index.html&gt;</text>
  </message>
  <message conversation_id="957">
    <ts>2018-11-05T16:33:27.238600</ts>
    <user>Carlyn</user>
    <text>Using `threading`, `(~&amp;gt; x h g f)` and `((lambda~&amp;gt; h g f) x)` are both equivalent to `(f (g (h x)))`.</text>
  </message>
  <message conversation_id="957">
    <ts>2018-11-05T16:36:15.238800</ts>
    <user>Lela</user>
    <text>Great! Thank you!</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T18:10:17.239400</ts>
    <user>Carlita</user>
    <text>Looks like you can still read it all on &lt;http://archive.org|archive.org&gt; at least: &lt;https://web.archive.org/web/20180320175551/http://library.readscheme.org/&gt;</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T18:50:07.240200</ts>
    <user>Carlita</user>
    <text>This slack really needs a rudybot (or does it have one already?)</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T18:53:38.240800</ts>
    <user>Carlita</user>
    <text>Anyway I was amused that this typechecks: &lt;http://pasterack.org/pastes/48774&gt; (not in pasterack since it's not on 7.1 yet)</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T18:54:58.242100</ts>
    <user>Carlita</user>
    <text>It makes sense since it's avoiding backwards compat issues with `vector-set!` I think. Although if you use `unsafe-vector-set!` it will actually mutate it, but then you're using unsafe ops anyway...</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T19:03:39.243200</ts>
    <user>Tracee</user>
    <text>&lt;@Carlita&gt; Doesn't `vector-set!` also mutate it? Considering it's `!`, or does it merely set the variable to the newly constructed vector?</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T19:04:24.243700</ts>
    <user>Carlita</user>
    <text>&lt;@Tracee&gt; it just errors in this case because the vector is actually immutable</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T19:05:32.244100</ts>
    <user>Tracee</user>
    <text>Indeed, the contents are, but `(set! x #(4))` is still possible :stuck_out_tongue:</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T19:06:02.244500</ts>
    <user>Tracee</user>
    <text>I thought there'd be a `vector-set` for functional construction</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T19:08:08.245800</ts>
    <user>Tracee</user>
    <text>Where can I find this list? I'm very interested.</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T19:10:28.246300</ts>
    <user>Carlita</user>
    <text>The trouble is that a `vector-set` with the current vector representation would be really slow I think. Probably better to use something like pvectors or similar: &lt;https://docs.racket-lang.org/pvector/index.html&gt;</text>
  </message>
  <message conversation_id="958">
    <ts>2018-11-05T19:12:00.247000</ts>
    <user>Tracee</user>
    <text>Oh this is neat. Wish persistent data structures were the normal state in Racket</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T21:41:35.247400</ts>
    <user>Tracee</user>
    <text>What's a good way of requiring mock files when doing `raco test`?</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T22:32:24.248100</ts>
    <user>Marnie</user>
    <text>&lt;@Tracee&gt; mock files? like, files of data read by test cases? or files of code?</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:13:42.248400</ts>
    <user>Tracee</user>
    <text>&lt;@Marnie&gt; code for mocking certain functions in tests</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:16:39.249000</ts>
    <user>Marnie</user>
    <text>&lt;@Tracee&gt; I wrote this thing for mocking functions: &lt;http://docs.racket-lang.org/mock/index.html|docs.racket-lang.org/mock/index.html&gt;</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:17:24.250100</ts>
    <user>Marnie</user>
    <text>fair warning: mock-heavy tests are only _slightly_ better than no tests at all</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:19:44.251200</ts>
    <user>Tracee</user>
    <text>I quite strongly disagree. At work we mock our entire HTTP client for instance, and we can locally test that are sending the correct requests to cloud. Extremely useful to prevent regressions. Among other things</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:21:46.253100</ts>
    <user>Marnie</user>
    <text>I agree mock-heavy tests can catch things. But I really believe they’re best used as a kind of stop-gap measure for when fakes are hard to build or there aren’t any off-the-shelf ones you could reuse</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:23:10.253700</ts>
    <user>Tracee</user>
    <text>True, I just reacted to the quite general statement of only being _slightly_ better than no tests at all, context matters.</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:23:36.254300</ts>
    <user>Tracee</user>
    <text>Especially for massive (mln LOC) subsystems that get tested, it's not realistic to do anything but mock some parts and see what happens</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:25:19.255700</ts>
    <user>Marnie</user>
    <text>at work my codebase is heavily tested with almost no mocks, and it’s a pretty large system (I think between 100k and 1m loc?) - but it took some up-front design work to ensure that could happen</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:26:10.256500</ts>
    <user>Anton</user>
    <text>i think mocks have their place</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:26:18.257100</ts>
    <user>Tracee</user>
    <text>I think it depends a lot on the type of software I guess. We do lots of cloud and p2p stuff and don't wanna spin up servers for local testing</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:26:37.257600</ts>
    <user>Anton</user>
    <text>(and handling external connections is one sensible place</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:27:38.258900</ts>
    <user>Marnie</user>
    <text>external cloud services make this really hard and maintaining a locally-deployable fake implementation of a cloud service is an absurd amount of maintenance work</text>
  </message>
  <message conversation_id="959">
    <ts>2018-11-05T23:28:25.259300</ts>
    <user>Anton</user>
    <text>(FWIW i vastly prefer fakes and dependency injection over mocks/stubs)</text>
  </message>
  <message conversation_id="960">
    <ts>2018-11-06T00:29:08.260400</ts>
    <user>Marnie</user>
    <text>&lt;@Carlyn&gt; I’m attempting to reproduce the example you gave in the mailing list post about struct generativity, and I’m not getting the same results</text>
  </message>
  <message conversation_id="960">
    <ts>2018-11-06T00:29:53.261200</ts>
    <user>Marnie</user>
    <text>In racket 7.1 when run from DrRacket, this program raises an error:

```
#lang racket/base

(define the-unsupplied-arg
  (parameterize ([current-inspector (make-inspector)])
    (dynamic-require 'racket/contract 'the-unsupplied-arg)))

(define-values [info skipped?] (struct-info the-unsupplied-arg))

(define another-unsupplied-arg ((struct-type-make-constructor info)))

(equal? the-unsupplied-arg another-unsupplied-arg) ; =&amp;gt; #t
(eq? the-unsupplied-arg another-unsupplied-arg)    ; =&amp;gt; #f
```

Specifically, it raises:

```
struct-type-make-constructor: contract violation
  expected: struct-type?
  given: #f
```</text>
  </message>
  <message conversation_id="960">
    <ts>2018-11-06T00:30:33.262000</ts>
    <user>Marnie</user>
    <text>I suspect you ran your example from the command line and the example has different behavior if it’s run in a namespace where `racket/contract` is already instantiated</text>
  </message>
  <message conversation_id="960">
    <ts>2018-11-06T00:42:26.263400</ts>
    <user>Carlyn</user>
    <text>Yes, you can’t run it inside DrRacket because you don’t have control over the instantiation of racket/contract.</text>
  </message>
  <message conversation_id="960">
    <ts>2018-11-06T00:44:19.265900</ts>
    <user>Carlyn</user>
    <text>I didn’t mention DrRacket explicitly in the email, but I did sort of allude to the example being fragile in that way. It isn’t really practical, as written, but the question is more about the ideas than the pragmatics.</text>
  </message>
  <message conversation_id="960">
    <ts>2018-11-06T00:51:20.267300</ts>
    <user>Marnie</user>
    <text>I think it hints at an idea: while you might be able to get ahold of things you shouldn’t like that through reflective operations, you can’t really get a reflective handle on a module’s secrets in the _same_ context as one where you import the module normally. So the secrets you acquire are practically speaking always unusable.</text>
  </message>
  <message conversation_id="960">
    <ts>2018-11-06T03:13:53.267500</ts>
    <user>Andreas</user>
    <text>Thanks for still commenting on this. :slightly_smiling_face: I had put the code to the side waiting for a reply from you and had forgotten about it.</text>
  </message>
  <message conversation_id="961">
    <ts>2018-11-06T03:31:21.267700</ts>
    <user>Andreas</user>
    <text>Thanks &lt;@Helena&gt; I was trying to build this talk but I get a missing `gm-plateau-2017`. Is this still around?</text>
  </message>
  <message conversation_id="961">
    <ts>2018-11-06T04:33:39.269000</ts>
    <user>Andreas</user>
    <text>I am strugglilng to get some layout done in slideshow. Is there a way to show some code on the right side of a slide, while having a growing list of items (done 'next) on the left hand side?</text>
  </message>
  <message conversation_id="961">
    <ts>2018-11-06T07:00:47.269100</ts>
    <user>Helena</user>
    <text>No, that's a typo. Every `plateau-2017` should be `pepm-2018`</text>
  </message>
  <message conversation_id="961">
    <ts>2018-11-06T07:05:00.269300</ts>
    <user>Andreas</user>
    <text>ah, thanks.</text>
  </message>
  <message conversation_id="961">
    <ts>2018-11-06T08:02:39.270600</ts>
    <user>Eugena</user>
    <text>&lt;@Andreas&gt; you can do that with the `ppict` library and `pslide`. You probably need to parameterize `current-para-width` to account for the narrower space for the items.</text>
  </message>
  <message conversation_id="961">
    <ts>2018-11-06T08:05:53.270900</ts>
    <user>Andreas</user>
    <text>&lt;@Eugena&gt; ah, thanks I will take a look</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T13:52:30.273000</ts>
    <user>Lynna</user>
    <text>&lt;@Carlyn&gt; Just to make sure it’s not an installation issue, what does `raco pkg show --rx drracket` report?</text>
  </message>
  <message conversation_id="963">
    <ts>2018-11-07T13:52:50.273500</ts>
    <user>Lela</user>
    <text>Hello Racketers ! If `(define (my-func a b) (+ a b))` then is it possible to get `'(lambda (a b) (+ a b))` out of `my-func` somehow? i.e. does a function `f` exist such that `(f my-func)` returns `'(lambda (a b) (+ a b))` ?</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T13:54:15.273700</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt;
```
$ raco pkg show -l --rx drracket
Installation-wide:
 Package[*=auto]         Checksum                                    Source
 drracket*               eafd3e7f353692693402bae51ed0e2f1d7a9c4cc    (catalog "drracket" "&lt;git://github.com/racket/drracket/?path=drracket&gt;")
 drracket-plugin-lib*    eafd3e7f353692693402bae51ed0e2f1d7a9c4cc    (catalog "drracket-plugin-lib" "&lt;git://github.com/racket/drracket/?path=drracket-plugin-lib&gt;")
 drracket-tool-doc*      eafd3e7f353692693402bae51ed0e2f1d7a9c4cc    (catalog "drracket-tool-doc" "&lt;git://github.com/racket/drracket/?path=drracket-tool-doc&gt;")
 drracket-tool-lib*      eafd3e7f353692693402bae51ed0e2f1d7a9c4cc    (catalog "drracket-tool-lib" "&lt;git://github.com/racket/drracket/?path=drracket-tool-lib&gt;")
User-specific for installation "development":
 [none]
```</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T13:55:14.274000</ts>
    <user>Lynna</user>
    <text>Does the problem persist if you delete “doc/docindex.sqlite” and run `raco setup` again?</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T13:55:46.274700</ts>
    <user>Carlyn</user>
    <text>&lt;@Lela&gt; If you mean that literal list, then no. The source code for functions is not kept around at runtime.</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T13:56:31.275200</ts>
    <user>Lela</user>
    <text>&lt;@Carlyn&gt; Yes, it is what I meant. Thank you!</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T14:01:47.275400</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; Yes, it persists.</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T14:08:01.275600</ts>
    <user>Lynna</user>
    <text>Can you show the first few lines of `raco setup` output — the part before the “--- updating info-domain tables ---” section?</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T14:09:23.275800</ts>
    <user>Lynna</user>
    <text>I was wondering whether it should show unexpected collection or link paths, but maybe the issue is multiple links installed, in which case `raco link -l | grep drracket` might be more inetersting.</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T14:17:04.276000</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt;
```
$ raco setup
raco setup: version: 7.1.0.2
raco setup: platform: x86_64-macosx [3m]
raco setup: installation name: development
raco setup: variants: 3m
raco setup: main collects: /Users/alexis/gits/racket/racket/racket/collects
raco setup: collects paths:
raco setup:   /Users/alexis/Library/Racket/development/collects
raco setup:   /Users/alexis/gits/racket/racket/racket/collects
raco setup: main pkgs: /Users/alexis/gits/racket/racket/racket/share/pkgs
raco setup: pkgs paths:
raco setup:   /Users/alexis/gits/racket/racket/racket/share/pkgs
raco setup:   /Users/alexis/Library/Racket/development/pkgs
raco setup: links files:
raco setup:   /Users/alexis/gits/racket/racket/racket/share/links.rktd
raco setup:   /Users/alexis/Library/Racket/development/links.rktd
raco setup: main docs: /Users/alexis/gits/racket/racket/racket/doc
raco setup: --- updating info-domain tables ---
```</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T14:17:55.276300</ts>
    <user>Carlyn</user>
    <text>Also:
```
$ raco link -l | grep drracket
 root  path: "/Users/alexis/gits/racket/racket/racket/share/pkgs/drracket"
 root  path: "/Users/alexis/gits/racket/racket/racket/share/pkgs/drracket-plugin-lib"
 root  path: "/Users/alexis/gits/racket/racket/racket/share/pkgs/drracket-tool-lib"
 root  path: "/Users/alexis/gits/racket/racket/racket/share/pkgs/drracket-tool-doc"
```</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T14:44:24.281000</ts>
    <user>Lynna</user>
    <text>Well, I’m stumped.</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T14:46:50.283200</ts>
    <user>Carlyn</user>
    <text>I could try blowing everything I have away and starting from scratch, but I actually already did something extremely close to doing that: doing `git clean -fxd` from inside the main racket repo (which did not fix the problem). I could also try destroying ~/Library/Racket/development/, but I don’t know what else could possibly be influencing things.</text>
  </message>
  <message conversation_id="962">
    <ts>2018-11-07T14:48:44.284800</ts>
    <user>Carlyn</user>
    <text>The only piece of potential weirdness in the environment is that I have `PLTCOMPILEDROOTS=compiled/@(version):`, but I don’t feel like that should be causing trouble here, especially not since I deleted all my compiled files when I did `git clean -fxd` and started over.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T14:55:57.288800</ts>
    <user>Thaddeus</user>
    <text>&lt;@Franklin&gt; Hey, can we talk about `urlang`? I'm considering making some improvements to it and I have some questions while reading your code.
1. What do `import` and `export` do exactly?
2. I'd like to make it so that urlang doesn't generate files by default, but returns javascript as a plain string (so that you can open an `(urlang)` macro anywhere and get a compiled javascript string back). Do you mind making this behavior default?
3. I'd like to generate javascript "function-style" modules, so that each generated file creates only one binding in the global scope.
Example:
```
const myModule = (function(/* import as ... */){
  /* everything here is private */
  return { /* exports go here */ };
})(/* imports */);
```
I thought making an import/export system would be perfect for that. But urlang seems to already feature some kind of import/export stuff, alas different (hence my first question).
Do you have any advice on how to make that possible?
4. Last question. Are you currently available to work on urlang, is it fresh in your mind, and if not, do you mind passing over some knowledge (what is WIP, what is OK, what is left to do) so that I can improve it?
Thanks! (maybe I should have made an email or a new channel...)</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T14:56:18.289100</ts>
    <user>Franklin</user>
    <text>&lt;@Thaddeus&gt; hi</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T14:57:02.289600</ts>
    <user>Franklin</user>
    <text>Import and export is a first step for modules in JavaScript.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T14:57:55.290000</ts>
    <user>Franklin</user>
    <text>They are NodeJS style modules.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T14:58:13.290200</ts>
    <user>Thaddeus</user>
    <text>oh, ok</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T14:58:38.290700</ts>
    <user>Franklin</user>
    <text>So importing modules defined in NodeJS ought to work.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T14:58:58.291200</ts>
    <user>Franklin</user>
    <text>There are tools that convert NodeJS modules to something that works in the browser.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T14:59:14.291600</ts>
    <user>Franklin</user>
    <text>Say: &lt;http://browserify.org/&gt;</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T14:59:28.292000</ts>
    <user>Thaddeus</user>
    <text>Yeah, I was considering using urlang as a generator for the browser directly</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:00:18.292800</ts>
    <user>Franklin</user>
    <text>Having a compile time configuration option to switch between NodeJS and Browser modules would be a good thing.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:00:30.293000</ts>
    <user>Thaddeus</user>
    <text>that's what I had in mind :slightly_smiling_face:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:01:06.293700</ts>
    <user>Franklin</user>
    <text>I can remember I have thought about it - but I can't remember whether I actually implemented anything. We can check the code though.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:01:24.294100</ts>
    <user>Thaddeus</user>
    <text>well, the code looks a bit tied to the nodejs way right now</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:01:47.295000</ts>
    <user>Franklin</user>
    <text>I am available in the sense, that I'd be happy to answer questions on Urlang.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:02:00.295500</ts>
    <user>Thaddeus</user>
    <text>that's perfect :slightly_smiling_face:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:02:20.295900</ts>
    <user>Franklin</user>
    <text>Devoting large amounts of hacking time will probably need to wait for holidays.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:02:34.296200</ts>
    <user>Thaddeus</user>
    <text>obviously</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:02:57.296800</ts>
    <user>Thaddeus</user>
    <text>I was wondering if the code was made a long time ago, or if you worked recently on this</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:03:16.297100</ts>
    <user>Thaddeus</user>
    <text>so that I don't bother you with some old stuff :stuck_out_tongue:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:03:45.297700</ts>
    <user>Franklin</user>
    <text>Most of the code is 1-2 years old. But it isn't abandoned :slightly_smiling_face:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:03:50.298000</ts>
    <user>Thaddeus</user>
    <text>cool !</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:04:20.298600</ts>
    <user>Franklin</user>
    <text>Next school year I am taking a sabatical and intend to use Urlang to build an interactive math web-site.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:06:43.300900</ts>
    <user>Thaddeus</user>
    <text>on my side I'd like to build websites using racket for the web, for building the server and the front applications, so everything that can improve the coding experience is welcome in my toolbox</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:07:29.301400</ts>
    <user>Franklin</user>
    <text>If you want to see how modules are implemented currently, see</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:07:31.301600</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/soegaard/urlang/blob/master/urlang/main.rkt&gt;</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:07:56.302100</ts>
    <user>Thaddeus</user>
    <text>yes, that's where it got a bit hairy :stuck_out_tongue:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:09:04.303100</ts>
    <user>Franklin</user>
    <text>Let's back up a bit. You asked about what import and export does.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:10:03.304200</ts>
    <user>Franklin</user>
    <text>When Urlang compiles from Urlang to JavaScript, it will throw an "undefined identifier" error, if it meets an undefined identifier.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:10:41.305000</ts>
    <user>Franklin</user>
    <text>Therefore if you need to use an identifier provided by the browser, you need to "import" it in order for Urlang not to complain.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:10:53.305300</ts>
    <user>Thaddeus</user>
    <text>I see</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:11:44.305900</ts>
    <user>Franklin</user>
    <text>So for example, if you are using jquery which uses the identifier $ a lot,</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:12:08.306500</ts>
    <user>Franklin</user>
    <text>you will need to add an  (import $) to tell Urlang that the identifier is defined.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:12:58.307400</ts>
    <user>Franklin</user>
    <text>Likewise use (import Math) if you need to use, say, Math.sin()</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:13:36.308000</ts>
    <user>Thaddeus</user>
    <text>ok, then my issue is more about the fact that files are generated at compile time, it prevents me from using urlang as a runtime generator</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:14:46.308900</ts>
    <user>Thaddeus</user>
    <text>my first goal would be to separate the file generation logic from the rest of urlang</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:15:31.309400</ts>
    <user>Franklin</user>
    <text>When you say runtime here - do you refer to when the JavaScript runs in the browser?</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:15:51.309800</ts>
    <user>Thaddeus</user>
    <text>nope, I'm talking about the racket server runtime</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:16:19.310400</ts>
    <user>Thaddeus</user>
    <text>let's say my server answers to a request on a url, and provides back HTML content</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:16:43.310900</ts>
    <user>Thaddeus</user>
    <text>I want javascript to be generated and inserted into the HTML content as well</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:17:30.311400</ts>
    <user>Franklin</user>
    <text>Okay - that can definitely be solved. Let me think a bit.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:19:21.312200</ts>
    <user>Franklin</user>
    <text>I think Urlang already is doing what you want?</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:19:57.313100</ts>
    <user>Thaddeus</user>
    <text>well, right now I encapsulated urlang in a `javascript` macro like so:
```
(define-simple-macro
  (javascript jsexpr ...)
  (let ([js (open-output-string)])
    (parameterize ([current-urlang-run? #f]
                   [current-urlang-echo? #t]
                   [current-output-port js])
      (urlang
        (urmodule jsmodule jsexpr ...)))
    (get-output-string js)))
```</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:20:33.313600</ts>
    <user>Thaddeus</user>
    <text>but I still get exports.js files created in the root of my server...</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:20:52.313900</ts>
    <user>Franklin</user>
    <text>Okay. Better control over generated files.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:21:17.314400</ts>
    <user>Franklin</user>
    <text>I think there is a parameter somewhere...</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:21:57.315200</ts>
    <user>Thaddeus</user>
    <text>last time I checked the source, urlang was generating the exports with no conditions</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:22:04.315400</ts>
    <user>Franklin</user>
    <text>current-urlang-output-file, current-urlang-output-file and current-urlang-exports-file</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:23:14.316300</ts>
    <user>Franklin</user>
    <text>The docs aren't exactly complete.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:23:17.316500</ts>
    <user>Thaddeus</user>
    <text>&lt;https://github.com/soegaard/urlang/blob/master/urlang/main.rkt#L2314&gt;</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:24:03.317100</ts>
    <user>Thaddeus</user>
    <text>if `current-urlang-exports-file` is set to `#f`, it'll generate the file nonetheless</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:24:42.317400</ts>
    <user>Thaddeus</user>
    <text>I guess it's easy to fix</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:24:53.317800</ts>
    <user>Thaddeus</user>
    <text>but I wanted your advice before doing so :slightly_smiling_face:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:25:07.318100</ts>
    <user>Franklin</user>
    <text>I think  that's on purpose, since line 2287 reads:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:25:10.318300</ts>
    <user>Franklin</user>
    <text>(define exports-path (or (current-urlang-exports-file) ; parameter can override
                                    (urmodule-name-&amp;gt;exports-file-name name)))</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:25:27.318900</ts>
    <user>Thaddeus</user>
    <text>yes</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:25:41.319200</ts>
    <user>Franklin</user>
    <text>But the idea to have an 'dont-generate-exports is a good idea.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:25:58.319700</ts>
    <user>Thaddeus</user>
    <text>good, I'll make a PR then?</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:26:24.320200</ts>
    <user>Franklin</user>
    <text>perhaps a new parameter:   current-generate-exports?</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:26:34.320500</ts>
    <user>Franklin</user>
    <text>yes, make an PR</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:27:47.321600</ts>
    <user>Franklin</user>
    <text>So far the primary goal of Urlang was to generate code that can run in NodeJS. Therefore the "direct to browser" story can definitely be improved.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:28:10.322500</ts>
    <user>Thaddeus</user>
    <text>I'd be glad to help doing so :slightly_smiling_face:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:28:14.322600</ts>
    <user>Franklin</user>
    <text>The idea behind generating NodeJS code is, that it makes testing easier during development.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:29:06.323500</ts>
    <user>Franklin</user>
    <text>Running the generated JavaScript and seeing result in DrRacket is a great time saver.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:32:10.325000</ts>
    <user>Franklin</user>
    <text>Btw when you modify  main.rkt  it's important to  regenerate bytecode files. Otherwise you will get a performance hit when you use it afterwards.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:35:03.325500</ts>
    <user>Thaddeus</user>
    <text>mmmh, you mean using `raco`?</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:35:11.325700</ts>
    <user>Franklin</user>
    <text>yes</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:38:15.327000</ts>
    <user>Thaddeus</user>
    <text>I didn't know there were performance issues, I thought racket generated .zo files</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:39:21.328000</ts>
    <user>Franklin</user>
    <text>If everything runs fine, then don't worry.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:39:47.328600</ts>
    <user>Franklin</user>
    <text>If you suddenly find yourself waiting an unreasonably time, try runnin raco setup manually.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:40:06.329200</ts>
    <user>Thaddeus</user>
    <text>ok!</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:40:10.329300</ts>
    <user>Franklin</user>
    <text>The urlang compiler itself is fast enough - but the generating the compiler using nanopass can be slow.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:40:37.330100</ts>
    <user>Thaddeus</user>
    <text>btw I think you forgot to uncomment the lang line in ffi.rkt</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:42:02.330500</ts>
    <user>Thaddeus</user>
    <text>got an error with that, but I guess it's ok without that file</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:42:14.330800</ts>
    <user>Franklin</user>
    <text>huh - you are right</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:42:47.331100</ts>
    <user>Franklin</user>
    <text>I thought I fixed that recently.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:43:43.331300</ts>
    <user>Thaddeus</user>
    <text>yeah, I saw your last commit :stuck_out_tongue:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:44:12.331700</ts>
    <user>Thaddeus</user>
    <text>you fixed it in colors.rkt but not in ffi.rkt</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:45:05.332000</ts>
    <user>Franklin</user>
    <text>ah</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:46:21.332200</ts>
    <user>Franklin</user>
    <text>fixed</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:52:34.332400</ts>
    <user>Thaddeus</user>
    <text>oh, last thing</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:53:10.333100</ts>
    <user>Thaddeus</user>
    <text>there's only a `(var [a 42])` syntax, but in ES6 there's const and let</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:54:18.334100</ts>
    <user>Franklin</user>
    <text>Yes. Right now the target is  ES5. However  let  is available in extras.rkt (I think)</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:54:58.334300</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/soegaard/urlang/blob/master/urlang/extra.rkt&gt;</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:56:49.334700</ts>
    <user>Franklin</user>
    <text>const is not available</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:57:45.335300</ts>
    <user>Thaddeus</user>
    <text>I don't see `new` though</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:58:01.335700</ts>
    <user>Franklin</user>
    <text>Hmm. I misremembered. The  let  expression is builtin:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:58:02.335900</ts>
    <user>Franklin</user>
    <text>(let ((x &amp;lt;expr&amp;gt;) ...) &amp;lt;statement&amp;gt; ... &amp;lt;expr&amp;gt;)</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:58:08.336100</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/soegaard/urlang/blob/master/urlang/main.rkt#L298&gt;</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:58:28.336500</ts>
    <user>Franklin</user>
    <text>Remind me, what does  new  do?</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:58:41.336800</ts>
    <user>Thaddeus</user>
    <text>it creates a new instance from a function</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:58:52.337100</ts>
    <user>Thaddeus</user>
    <text>&lt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new&gt;</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T15:59:05.337400</ts>
    <user>Thaddeus</user>
    <text>It's there since JS1</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:01:02.337800</ts>
    <user>Franklin</user>
    <text>That needs to be added. Will you make a PR?</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:01:06.338000</ts>
    <user>Thaddeus</user>
    <text>sure!</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:01:58.338500</ts>
    <user>Thaddeus</user>
    <text>I'll try to do all that tomorrow or this weekend, it's getting late around here :slightly_smiling_face:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:02:19.339000</ts>
    <user>Franklin</user>
    <text>Same here.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:02:35.339400</ts>
    <user>Thaddeus</user>
    <text>I guess we're on the same time zone</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:02:44.339600</ts>
    <user>Franklin</user>
    <text>I think so.</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:03:00.339900</ts>
    <user>Thaddeus</user>
    <text>glad to see some europeans around here :stuck_out_tongue:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:04:17.340400</ts>
    <user>Thaddeus</user>
    <text>thanks for the time you accorded me!</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:04:39.340700</ts>
    <user>Franklin</user>
    <text>always happy to chat about Urlang</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:04:57.340900</ts>
    <user>Thaddeus</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:05:10.341100</ts>
    <user>Thaddeus</user>
    <text>see you around!</text>
  </message>
  <message conversation_id="964">
    <ts>2018-11-07T16:54:58.341200</ts>
    <user>Marinda</user>
    <text>&lt;http://docs.racket-lang.org/pollen/Pygments.html&gt;</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:27:09.342700</ts>
    <user>Franklin</user>
    <text>The package server complains about undeclared dependencies on the Urlang package. I must be missing something in my "info.rkt" file - but what?</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:27:33.343100</ts>
    <user>Franklin</user>
    <text>The last lines of the build log contains a list of packages missing:</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:27:35.343300</ts>
    <user>Franklin</user>
    <text>&lt;https://pkg-build.racket-lang.org/server/built/deps/urlang.txt&gt;</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:27:52.343700</ts>
    <user>Franklin</user>
    <text>However some of them are already listed in the info file.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:27:58.343900</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/soegaard/urlang/blob/master/urlang/info.rkt&gt;</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:28:27.344300</ts>
    <user>Franklin</user>
    <text>An example is "html-writing".</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:29:00.345000</ts>
    <user>Carlyn</user>
    <text>`build-deps` are not deps that can be zos, they’re deps that are only needed to compile urlang to zos but aren’t needed at runtime.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:29:14.345500</ts>
    <user>Carlyn</user>
    <text>If you need the dep at runtime, it still needs to go in `deps`.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:29:53.346200</ts>
    <user>Carlyn</user>
    <text>The package system dependency checker will tell you where it thinks you need to put the deps—if it says “mode: run”, it should go in `deps`, and if it says “mode: build” or “for build”, it should go in `build-deps`.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:30:52.346900</ts>
    <user>Franklin</user>
    <text>Thanks! I wonder where I got the misconception of  build-deps = zo-files.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:43:32.348100</ts>
    <user>Jennefer</user>
    <text>Is there a way to make a local macro for `syntax-parse`? That is, a macro that you could call within a template inside a `syntax-parse`. I thought I read somewhere how to do it, but right now I'm not finding a web page about it.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:45:17.349100</ts>
    <user>Jennefer</user>
    <text>I tried enclosing the `define-syntax` within `begin-for-syntax`, with no luck. Also tried it inside as well as outside the `define-syntax` that encloses the `syntax-parse`.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:46:14.350000</ts>
    <user>Carlyn</user>
    <text>I’m not entirely sure what you’re asking—do you mean a macro that you use in your expansion, or a macro that you use at phase 1 (that is, at compile-time) to produce the macro’s output?</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:47:59.350500</ts>
    <user>Jennefer</user>
    <text>A macro that I call in the expansion. Essentially, a "subroutine" macro.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:48:26.350900</ts>
    <user>Carlyn</user>
    <text>If you just define the macro as usual, outside the `define-syntax`, it should just work.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:48:50.351600</ts>
    <user>Jennefer</user>
    <text>I thought I tried that, but I'll double-check right now...</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:48:52.351700</ts>
    <user>Franklin</user>
    <text>Or if you really want a local macro, then perhaps use  let-syntax.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:49:07.352100</ts>
    <user>Franklin</user>
    <text>Btw - I figured out where the misconception stemmed.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:49:19.352500</ts>
    <user>Franklin</user>
    <text>The manual has the following sentence on build-deps:</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:49:25.352800</ts>
    <user>Franklin</user>
    <text>"build-deps — like deps, but for dependencies that can be dropped in a binary package, which does not include sources;"</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:49:44.353500</ts>
    <user>Franklin</user>
    <text>I misinterpreted "dropped in a binary package".</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:50:03.354300</ts>
    <user>Jennefer</user>
    <text>&lt;@Carlyn&gt; Ecch! That worked. Thanks! I must not have actually run that attempt. :wink:</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:50:14.354700</ts>
    <user>Franklin</user>
    <text>I see now that it means  "can be omitted from a binary package".</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:50:27.355000</ts>
    <user>Carlyn</user>
    <text>Yes, I think updating the wording to that would be a good change!</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:55:38.355400</ts>
    <user>Franklin</user>
    <text>I can't find the scribble file corresponding to &lt;http://docs.racket-lang.org/pkg/index.html&gt;</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:57:06.355600</ts>
    <user>Carlyn</user>
    <text>&lt;@Franklin&gt; &lt;https://github.com/racket/racket/blob/master/pkgs/racket-doc/pkg/scribblings/pkg.scrbl&gt;</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T14:59:26.356000</ts>
    <user>Franklin</user>
    <text>Thanks. Change committed.</text>
  </message>
  <message conversation_id="965">
    <ts>2018-11-08T15:01:02.356300</ts>
    <user>Carlyn</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:20:37.356400</ts>
    <user>Jennefer</user>
    <text>How can you get the effect of `#:auto-nested-attributes` and still use `#:attributes`? Sample code here:</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:29:53.357500</ts>
    <user>Carlyn</user>
    <text>You cannot use them together; the point of `#:attributes` is to specify the attributes explicitly. You can, however, specify nested attributes explicitly in `#:attributes` by writing something like `#:attributes [foo.bar]`.</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:30:46.358300</ts>
    <user>Jennefer</user>
    <text>OK, thanks. I didn't see how `#:attributes` could address nesting.</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:31:31.358900</ts>
    <user>Jennefer</user>
    <text>Do you know the reason why nested attributes aren't simply propagated as normal behavior?</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:32:35.359600</ts>
    <user>Carlyn</user>
    <text>I’m not totally sure (&lt;@Eugena&gt; would know), but I think it’s hard to compute them properly when syntax classes use other syntax classes defined later in the same module.</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:32:51.360100</ts>
    <user>Carlyn</user>
    <text>(Or if syntax classes are mutually recursive, for example.)</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:33:35.360700</ts>
    <user>Jennefer</user>
    <text>OK. Sometimes it clarifies a lot to know why some element of a language is defined the way it is. And sometimes not. :wink:</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:40:21.363000</ts>
    <user>Marnie</user>
    <text>neat `syntax-parse` trivia that I didn’t realize until years of using it: if you match something using `:class` instead of `foo:class`, then all of the attributes of `class` will be bound directly - e.g. instead of `foo.some-attr` you can just use `some-attr`</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:41:15.364100</ts>
    <user>Marnie</user>
    <text>I find this useful sometimes when making one base syntax class and multiple extra syntax classes that each have the same attributes as the base but also some extra stuff</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:42:13.365000</ts>
    <user>Jennefer</user>
    <text>&lt;@Marnie&gt; Whoa! That might enable me to simplify this now-large macro quite a bit.</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:42:35.365600</ts>
    <user>Marnie</user>
    <text>(because binding them directly means you don’t have to turn `id.attr` into `attr` with a bunch of `#:with` clauses to get the `#:attributes` parts to line up right)</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:42:40.365800</ts>
    <user>Monserrate</user>
    <text>&lt;@Marnie&gt; I think you should almost never use that feature</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:42:44.366000</ts>
    <user>Monserrate</user>
    <text>but sometimes it is handy</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:43:16.366700</ts>
    <user>Marnie</user>
    <text>the syntax class definitions and `#:attributes` thing is the only use case I’ve come up with so far</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:51:48.366900</ts>
    <user>Carlyn</user>
    <text>I use it semi-regularly. :)</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:52:39.367100</ts>
    <user>Marnie</user>
    <text>gasp!</text>
  </message>
  <message conversation_id="966">
    <ts>2018-11-08T15:57:29.367700</ts>
    <user>Carlyn</user>
    <text>`grep` tells me 12 uses of that feature inside the Hackett codebase!</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T16:43:27.370400</ts>
    <user>Carlyn</user>
    <text>&lt;@Eileen&gt; Is there a reason Check Syntax doesn’t use sub-range-binders information when drawing the ? arrows to identifiers inside syntax templates?</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T16:58:47.371300</ts>
    <user>Ayanna</user>
    <text>is it possible to indent a racket file from a racket command-line?</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T17:00:10.371700</ts>
    <user>Carlyn</user>
    <text>It’s possible… but I don’t know of an easy way to do it. :)</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T17:03:29.374200</ts>
    <user>Ayanna</user>
    <text>I have a scenario where people who use Visual Studio Code are editing racket — the language plugin does syntax highlighting but basically nothing else. It’d be great to run Racket as a language server and get DrRacket features</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T17:05:14.375500</ts>
    <user>Bertha</user>
    <text>Oh. I was going to suggest something like `(system "emacs -eval '(progn _elisp_that_opens_the_.rkt_files_and_does_the_indent_command_)'"`  :stuck_out_tongue_winking_eye:
Seriously, I think Jay has a Racket LSP project on GitHub.</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T17:06:10.375800</ts>
    <user>Ayanna</user>
    <text>yeah that would be a great stopgap….</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T17:06:53.376100</ts>
    <user>Bertha</user>
    <text>Hmm there's this &lt;https://github.com/jeapostrophe/racket-langserver&gt;</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T17:07:20.376600</ts>
    <user>Bertha</user>
    <text>But also this: &lt;https://github.com/theia-ide/racket-language-server&gt; which specifically mentions indent</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T17:07:24.376900</ts>
    <user>Ayanna</user>
    <text>ah, perfect…</text>
  </message>
  <message conversation_id="967">
    <ts>2018-11-08T17:07:40.377300</ts>
    <user>Bertha</user>
    <text>And I see at least 3 other Racket LSP projects, so idk?</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T18:43:03.377900</ts>
    <user>Ayanna</user>
    <text>for structs, is there an equivalent property to `prop:procedure` but that allows you to use it as syntax?</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T18:44:13.379100</ts>
    <user>Carlyn</user>
    <text>If I understand your question correctly, it’s also `prop:procedure`. If you have a struct defined at phase 1 with a value for `prop:procedure`, and a `define-syntax` binding that is bound to an instance of that struct, then it will call it as a procedure when used as a syntax transformer.</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T18:46:06.380800</ts>
    <user>Carlyn</user>
    <text>If you mean you want to be able to do `(struct foo ())`, then `(define x (foo))` and have `(x)` behave like a macro invocation, the macro system just can’t do that—since macros are expanded at compile-time, it needs to know statically which identifiers are bound as macros.</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T19:04:47.380900</ts>
    <user>Lynna</user>
    <text>You may know this already, but just building in a fresh directory with `PLTCOMPILEDROOTS=compiled/@(version):` didn’t trigger the problem for me.</text>
  </message>
  <message conversation_id="969">
    <ts>2018-11-08T19:09:05.381100</ts>
    <user>Eileen</user>
    <text>Maybe a bug?</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T19:54:35.382100</ts>
    <user>Ayanna</user>
    <text>right, yeah I’d like to be able to do the 2nd one… `(struct foo () #:property prop:syntax (lambda (stx) (syntax-case stx ...)))`</text>
  </message>
  <message conversation_id="970">
    <ts>2018-11-08T19:57:41.383000</ts>
    <user>Tracee</user>
    <text>&lt;https://docs.racket-lang.org/hackett@hackett-doc/&gt; has an exception</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T19:58:45.383400</ts>
    <user>Carlyn</user>
    <text>&lt;@Ayanna&gt; No, you can’t do that. Macros are not (and cannot be) first-class values, but structure instances are.</text>
  </message>
  <message conversation_id="970">
    <ts>2018-11-08T20:02:17.383800</ts>
    <user>Carlyn</user>
    <text>&lt;@Tracee&gt; It should be fixed when pkg-build runs again tomorrow.</text>
  </message>
  <message conversation_id="970">
    <ts>2018-11-08T20:06:48.384200</ts>
    <user>Tracee</user>
    <text>Alright &lt;@Carlyn&gt;, have you ceased working on hackett? Last commit 3 oct</text>
  </message>
  <message conversation_id="970">
    <ts>2018-11-08T20:08:35.384400</ts>
    <user>Carlyn</user>
    <text>I have not had the time.</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T20:54:56.385300</ts>
    <user>Monserrate</user>
    <text>&lt;@Ayanna&gt; maybe `(begin (struct foo () #:omit-define-syntaxes) (define-syntax foo (lambda (stx) (syntax-case stx ...))))`</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T20:55:17.385800</ts>
    <user>Monserrate</user>
    <text>note that won't let you use `foo` in `match` or other places that expect a struct name</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T20:56:46.386200</ts>
    <user>Monserrate</user>
    <text>but you can fix that by using `prop:struct-info`</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T21:01:59.387000</ts>
    <user>Carlyn</user>
    <text>&lt;@Monserrate&gt; I understood &lt;@Ayanna&gt;’s request as asking for instances of the struct to serve as transformers, not the struct type name.</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T21:02:32.387500</ts>
    <user>Ayanna</user>
    <text>actually the type name could be enough… although I do currently use the structs in match cases as well :confused:</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T21:02:48.387800</ts>
    <user>Ayanna</user>
    <text>I have a workaround, tho</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T21:05:24.388500</ts>
    <user>Carlyn</user>
    <text>If just the name is okay, what &lt;@Monserrate&gt; suggested is possible—you can use `prop:struct-info` to recover support with `match`.</text>
  </message>
  <message conversation_id="968">
    <ts>2018-11-08T21:16:59.388800</ts>
    <user>Ayanna</user>
    <text>ah I see… that’s pretty cool</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T11:53:33.390200</ts>
    <user>Ilda</user>
    <text>AFAICT by reading its source, the web-server lib seems to support streaming, but I can't get it to work. My request handler looks like this:

```

(define ((get-current-visitors cv) req)
  (response/output
   (lambda (out)
     (current-visitors-subscribe cv (current-thread))
     (let loop ()
       (write-bytes (string-&amp;gt;bytes/utf-8 (number-&amp;gt;string (thread-receive))) out)
       (flush-output out)
       (unless (port-closed? out)
         (loop))))))
```

Am I doing something obviously wrong here?</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T11:54:07.390800</ts>
    <user>Ilda</user>
    <text>Requests stall until they time out and that's when they finally print all the output at once.</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T11:54:29.391300</ts>
    <user>Ilda</user>
    <text>I thought it might be a buffering issue which is why I threw that `flush-output` in there but I don't think it should be necessary.</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T11:55:33.392300</ts>
    <user>Ilda</user>
    <text>Output from curl:

```
$ curl -v &lt;http://localhost:8000/v0/visitors&gt;
*   Trying ::1...
* TCP_NODELAY set
* Connection failed
* connect to ::1 port 8000 failed: Connection refused
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8000 (#0)
&amp;gt; GET /v0/visitors HTTP/1.1
&amp;gt; Host: localhost:8000
&amp;gt; User-Agent: curl/7.54.0
&amp;gt; Accept: */*
&amp;gt;
* 60 seconds pass here *
&amp;lt; HTTP/1.1 200 Okay
&amp;lt; Date: Fri, 09 Nov 2018 16:51:59 GMT
&amp;lt; Last-Modified: Fri, 09 Nov 2018 16:51:59 GMT
&amp;lt; Server: Racket
&amp;lt; Content-Type: text/html; charset=utf-8
&amp;lt; Transfer-Encoding: chunked
&amp;lt; 
* transfer closed with outstanding read data remaining
* stopped the pause stream!
* Closing connection 0
curl: (18) transfer closed with outstanding read data remaining
00000000000000000000000000000000000000000000000000000000000
```</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T11:56:14.393200</ts>
    <user>Stuart</user>
    <text>You’re assuming the port will be closed at some iteration of the loop, but it’s not clear why.</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T11:56:39.393400</ts>
    <user>Ilda</user>
    <text>The browser closes the connection (i.e. the user closes a tab or something)</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T12:04:27.393700</ts>
    <user>Ilda</user>
    <text>It's not clear from the curl output, but the response really only starts after about 60s, which is when curl seems to time out the request.</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T12:10:02.394200</ts>
    <user>Carlyn</user>
    <text>Is it possible `curl` itself is buffering the output?</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T12:11:54.395000</ts>
    <user>Ilda</user>
    <text>I don't think so. The response headers aren't returned until curl closes the connection either, from what I can tell.</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T12:14:25.395900</ts>
    <user>Ilda</user>
    <text>Yeah, it looks like the server doesn't even return the response headers immediately even though it should:

```
$ telnet 127.1 8000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
GET /v0/visitors HTTP/1.1
Host: localhost


*nothing gets returned here*
```</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T12:20:59.396800</ts>
    <user>Ilda</user>
    <text>Okay, I think there is some buffering going on inside the web server after all. If I append 4096 "a"'s to my output then the response gets streamed out.</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T12:27:38.397400</ts>
    <user>Ilda</user>
    <text>&lt;https://github.com/racket/web-server/blob/master/web-server-lib/web-server/http/response.rkt#L111&gt; looks like my handler is writing to a pipe, which, according to the docs, should not be buffered.</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T12:29:17.398300</ts>
    <user>Ilda</user>
    <text>So I guess the data is being buffered on the OS socket, since the chunking loop (&lt;https://github.com/racket/web-server/blob/master/web-server-lib/web-server/http/response.rkt#L119&gt;) doesn't explicitly flush after every chunk.</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T12:37:55.398800</ts>
    <user>Ilda</user>
    <text>Yeah, patching that loop to `(flush-output to-child)` after every iteration fixes the problem.</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-09T13:11:36.398900</ts>
    <user>Ilda</user>
    <text>Solved: &lt;https://github.com/racket/web-server/pull/44&gt;</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-10T07:23:38.403000</ts>
    <user>Ilda</user>
    <text>What is the usual process for working on a package that's installed in my global (is that the right terminology?) collects?

Say I want to work on `web-server-lib` and I have previously installed it using `raco pkg install web-server`, but the version I want to work on lives in `~/sandbox/web-server/web-server-lib` and I have another project that lives at `~/sandbox/foo` that depends on web-server. I would like to temporarily point to the version of web-server used by foo to the code in ~/sandbox. What's the best way to do that?

In Python I might do this by messing with the PYTHONPATH env variable or installing the package in editable mode. Are there similar things in Racket that I can use?</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-10T07:25:40.403400</ts>
    <user>Ezra</user>
    <text>&lt;@Ilda&gt; not exactly what you are asking but this might be helpful: &lt;https://alex-hhh.github.io/2018/01/changing-built-in-racket-packages.html&gt;</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-10T07:28:15.404100</ts>
    <user>Ilda</user>
    <text>&lt;@Ezra&gt; thanks! That seems like it'd do it.</text>
  </message>
  <message conversation_id="972">
    <ts>2018-11-10T09:41:33.404600</ts>
    <user>Franklin</user>
    <text>&lt;@Thaddeus&gt; Hi. I went ahead and added new-expressions to Urlang.</text>
  </message>
  <message conversation_id="972">
    <ts>2018-11-10T09:42:10.405000</ts>
    <user>Franklin</user>
    <text>The syntax in Urlang is:  (new constructor argument ...)</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-10T12:37:24.405700</ts>
    <user>Claud</user>
    <text>&lt;@Ezra&gt; &lt;@Ilda&gt; Alex's post sets up the package as a directory link, which severs the connection to the upstream. It is better to tell the package system that the package is a git clone, as described in detail at &lt;http://docs.racket-lang.org/pkg/git-workflow.html#%28part._clone-link%29&gt; For `web-server-lib`, this is described in &lt;https://blog.racket-lang.org/2017/09/tutorial-contributing-to-racket.html#how-to-contribute-to-a-main-distribution-package&gt;</text>
  </message>
  <message conversation_id="972">
    <ts>2018-11-10T12:37:26.406100</ts>
    <user>Thaddeus</user>
    <text>&lt;@Franklin&gt; Yeah, you rock! Thank you :smile:</text>
  </message>
  <message conversation_id="972">
    <ts>2018-11-10T12:38:19.406600</ts>
    <user>Thaddeus</user>
    <text>I'll check the commits so that I can understand how to do it myself next time!</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-10T12:48:26.406700</ts>
    <user>Claud</user>
    <text>One detail: the tutorial's method sets up the git repository with the upstream repository as its `origin` remote. I prefer to have my fork as the `origin` and upstream as `upstream`. I suggest:
1. `git clone &amp;lt;fork&amp;gt;`
2. `cd &amp;lt;dir&amp;gt; ; git remote add upstream &amp;lt;upstream&amp;gt; ; cd ..`
3. `raco pkg update --lookup --catalog &lt;https://pkgs.racket-lang.org&gt; --clone &amp;lt;dir&amp;gt; &amp;lt;pkg-name&amp;gt;`</text>
  </message>
  <message conversation_id="971">
    <ts>2018-11-10T12:49:27.406900</ts>
    <user>Claud</user>
    <text>With those steps, `raco pkg update` will still use the upstream source for updates.</text>
  </message>
  <message conversation_id="973">
    <ts>2018-11-10T14:09:22.407300</ts>
    <user>Ilda</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="974">
    <ts>2018-11-10T15:43:07.408700</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I noticed today that if you bind the same identifier (in the sense of `bound-identifier=?`) into a first-class definition context multiple times, no error is raised. I was originally going to file a bug, but I noticed this behavior is consistent with older versions of Racket. Is the behavior intentional? If so, what is the intended semantics?</text>
  </message>
  <message conversation_id="974">
    <ts>2018-11-10T18:39:58.408800</ts>
    <user>Lynna</user>
    <text>I don’t remember specifically deciding that rebinding should be allowed. It’s possible that I originally decided to allow rebinding absent any reason to disallow it. Or it may be that it never occurred to me to check.</text>
  </message>
  <message conversation_id="975">
    <ts>2018-11-10T21:34:29.409700</ts>
    <user>Tracee</user>
    <text>I've been hacking around `cmdline.rkt` and it seems very archaic and bloated. Many procedural macros. Would it be desirable to make it a `syntax-parser` instead?</text>
  </message>
  <message conversation_id="975">
    <ts>2018-11-10T21:35:21.410400</ts>
    <user>Tracee</user>
    <text>iirc a comment in the file states we want as few dependencies as possible but as of now it's hard to maintain</text>
  </message>
  <message conversation_id="976">
    <ts>2018-11-11T09:17:47.415100</ts>
    <user>Ilda</user>
    <text>I just published my first package (&lt;https://pkgd.racket-lang.org/pkgn/package/component&gt;) and I have a couple of questions:

• How are "rings" assigned to packages?
• Is the package (and its docs) not being built by the package server because it's in ring 2?

BTW, I'd appreciate any reviews from more experienced Racket programmers. I built this to help me manage state in a medium-sized application I've been working on.</text>
  </message>
  <message conversation_id="976">
    <ts>2018-11-11T10:12:50.415800</ts>
    <user>Franklin</user>
    <text>&lt;@Ilda&gt; Expect to wait up to 24 hours before the build server builds your project.</text>
  </message>
  <message conversation_id="976">
    <ts>2018-11-11T10:13:38.416100</ts>
    <user>Ilda</user>
    <text>Ah, okay! Thanks :smile:</text>
  </message>
  <message conversation_id="976">
    <ts>2018-11-11T10:15:55.418000</ts>
    <user>Franklin</user>
    <text>I see that you have documentation in the Github repo, but that the web site list it as a project without docs. I don't know if the documentation first appears after the first build - or if you need to add something to your info file.</text>
  </message>
  <message conversation_id="976">
    <ts>2018-11-11T10:19:17.419000</ts>
    <user>Ilda</user>
    <text>I took a look at a few other pkgs with docs and they didn't seem to have anything special in their info files (apart from `scribblings`) so I assume the documentation will appear once the packages are built.</text>
  </message>
  <message conversation_id="977">
    <ts>2018-11-11T14:29:17.420200</ts>
    <user>Monserrate</user>
    <text>&lt;@Tracee&gt; improving that code would be great, but adding lots of new dependencies, such as syntax-parse, is probably not a good idea</text>
  </message>
  <message conversation_id="977">
    <ts>2018-11-11T14:35:15.420600</ts>
    <user>Tracee</user>
    <text>&lt;@Monserrate&gt; I agree to some extent but we're just emulating syntax-parse's checks anyway</text>
  </message>
  <message conversation_id="977">
    <ts>2018-11-11T19:35:36.421400</ts>
    <user>Monserrate</user>
    <text>&lt;@Tracee&gt; yes, you are doing some of those manually, but it still makes a big difference</text>
  </message>
  <message conversation_id="977">
    <ts>2018-11-11T19:36:03.422200</ts>
    <user>Monserrate</user>
    <text>Try `time racket -l racket/cmdline`</text>
  </message>
  <message conversation_id="977">
    <ts>2018-11-11T19:36:32.423000</ts>
    <user>Monserrate</user>
    <text>And then add a `(require syntax/parse)` and try again</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T03:41:30.425800</ts>
    <user>Andreas</user>
    <text>All, I am having a go at porting some of my code to Typed Racket to understand impact in performance. Interestingly, when I call `place/context`, the type checker tells me instead the problem is with `place/proc`:
```
driver.rkt:135:4: Type Checker: missing type for identifier;
 consider using `require/typed' to import it
  identifier: place/proc
  from module: racket/place
  in: (for/list ((i (in-range cores))) (place/context ch (define s (solve/single authdata diff i)) (place-channel-put ch s)))
```</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T03:42:16.426500</ts>
    <user>Andreas</user>
    <text>So, now shall I `require/typed` `place/context` or `place/proc`?</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T03:42:56.427000</ts>
    <user>Andreas</user>
    <text>Also, strange that typed racket knows of type `Place` but not of `place/context`...</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T03:56:07.427900</ts>
    <user>Andreas</user>
    <text>Interesting, actually `place/proc` is not provided so I can't type it but I don't think I can type place/context either since it's a macro.</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T04:06:32.432000</ts>
    <user>Ilda</user>
    <text>I've noticed the documentation about several concepts doesn't go into details about how those concepts work/are implemented at lower levels. For `places`, I had to read `place.c` and `mzrt.h` to figure out that places use posix threads/win32 threads based on the operating system (my first guess would've been processes communicating via IPC). I was similarly confused about threads initially, wondering whether they were green threads or system threads with a GIL, though some part of the documentation did answer that question for me (I don't think it was the threads reference, however).

Is this a conscious choice to hide those details from the reader/user so that the runtime is free to change them as it sees fit?</text>
  </message>
  <message conversation_id="979">
    <ts>2018-11-12T04:13:52.436800</ts>
    <user>Franklin</user>
    <text>This could give us a Racket prompt on ios: &lt;https://ish.app/&gt;</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T04:14:35.438200</ts>
    <user>Andreas</user>
    <text>&lt;@Ilda&gt; I don't think it's a problem to hide the implementation details. after all the user shouldn't care about it and the documentation is clear that places use OS threads.</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T04:15:04.438900</ts>
    <user>Andreas</user>
    <text>My question was due to the fact that the typed racket error mentions a function that is not provided and the user *should not* need to care about.</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T04:15:25.439500</ts>
    <user>Andreas</user>
    <text>At the same time, it feels like it might be tricky to type this one. Surely &lt;@Monserrate&gt; can enlighten us.</text>
  </message>
  <message conversation_id="979">
    <ts>2018-11-12T04:17:34.439900</ts>
    <user>Omar</user>
    <text>Is it a known issue that `syntax/module-reader` is brittle with respect to the directory that the file is in?

For example, let’s say we have:

```
;; /path/to/raquet.rkt
#lang s-exp syntax/module-reader
"raquet-mlang.rkt"

;; /path/to/raquet-mlang.rkt
#lang racket
(provide (except-out (all-from-out racket) lambda)
         (rename-out [lambda function]))

;; /path/to/a.rkt
#lang reader "raquet.rkt"
(define identity (function (x) x))
(print (identity 5))
```

This is an example from &lt;https://docs.racket-lang.org/guide/syntax_module-reader.html&gt; whick works without any problem.

Now, create a new file:

```
;; /path/to/test/b.rkt
#lang reader "../raquet.rkt"
(define identity (function (x) x))
(print (identity 5))
```

Running it, we get this error:

```
/path/to/test $ racket b.rkt
open-input-file: cannot open module file
  module path: /path/to/test/raquet-mlang.rkt
  path: /path/to/test/raquet-mlang.rkt
  system error: no such file or directory; rktio_err=3
```</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T04:18:37.440100</ts>
    <user>Ilda</user>
    <text>I didn't mean to imply that it was! But the documentation wasn't clear to me that places use OS threads. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T04:19:36.440300</ts>
    <user>Ilda</user>
    <text>All it really says is that places let you take advantage of multiple CPUs, cores or hw (hyper) threads.</text>
  </message>
  <message conversation_id="978">
    <ts>2018-11-12T04:20:44.440500</ts>
    <user>Ilda</user>
    <text>And so when I read that I saw two options: either they were implemented using OS threads or using processes; but the docs didn't tell me which and the performance characteristics for either are different.</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:04:43.442400</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; indeed the user shouldn't need to care about it, but this is a limitation of how TR works that you do, in fact, have to care about it</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:05:40.443300</ts>
    <user>Monserrate</user>
    <text>adding types to the `place` form will require somewhat more work than just using `require/typed`</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:06:43.444400</ts>
    <user>Andreas</user>
    <text>Well, you certainly need to care about if need to extend typed racket  to support the `place` form.</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:07:35.445500</ts>
    <user>Andreas</user>
    <text>I am surprised, why support the `Place` but not the `place` form? Is it expected from users to move `place` calls to the untyped world?</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:09:14.445700</ts>
    <user>Monserrate</user>
    <text>note that `dynamic-place` works already</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:09:43.446000</ts>
    <user>Monserrate</user>
    <text>as you note, `place` is trickier</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:10:00.446200</ts>
    <user>Monserrate</user>
    <text>but we should try to support it</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:11:50.446800</ts>
    <user>Monserrate</user>
    <text>the `place` form expands to a submodule, which it's not immediately obvious how to handle</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:14:28.447500</ts>
    <user>Andreas</user>
    <text>Ah, understood. I will switch this part to using dynamic place and see what happens.</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:14:42.447900</ts>
    <user>Andreas</user>
    <text>Right - makes sense. Dynamic place is a function, not syntax.</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:23:14.449400</ts>
    <user>Ilda</user>
    <text>It's been over 24h since I've published my first package (&lt;https://pkgd.racket-lang.org/pkgn/package/component-lib&gt;) and it still doesn't have any builds. I'm wondering if I did something wrong or if I skipped some vital step. Reading the source of `pkg-index` it looks like packages with changes should be built every hour, but I can't figure out why this one isn't. Any ideas?</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:24:27.449900</ts>
    <user>Monserrate</user>
    <text>&lt;@Ilda&gt; every hour, the index of packages is updated (which indeed has happened for your package)</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:24:49.450400</ts>
    <user>Monserrate</user>
    <text>every 24 hours &lt;http://pkg-build.racket-lang.org|pkg-build.racket-lang.org&gt; runs, but it might not be done with this morning's run yet</text>
  </message>
  <message conversation_id="980">
    <ts>2018-11-12T09:25:40.450800</ts>
    <user>Ilda</user>
    <text>Ahh, okay. Thank you for clarifying!</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T14:42:07.452000</ts>
    <user>Odis</user>
    <text>I’ll just leave this gem of a program here for you to enjoy: &lt;https://gist.github.com/LeifAndersen/94488e6937fa09fb96cde8234bd539ba&gt;</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T14:42:08.452100</ts>
    <user>Odis</user>
    <text>None</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T14:42:24.452600</ts>
    <user>Odis</user>
    <text>(Also, it runs way faster in racket 6.2 than 7.1 :disappointed: )</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T14:57:53.453700</ts>
    <user>Andreas</user>
    <text>&lt;@Odis&gt; I was curious, so I tried it. I have to say, I didn't ge tit. What's special about it? Also, it goes pretty fast... when you say it runs faster in 6.2, are we talking ms here?</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:00:24.454200</ts>
    <user>Odis</user>
    <text>&lt;@Andreas&gt; Yes, we are talking ms here. As for what to get…</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:01:13.455200</ts>
    <user>Odis</user>
    <text>Well, the oddity thing here is how `(foo)` expands differently in a module context and an expression context (and also an internal definition context, but that’s another story…)</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:01:55.456100</ts>
    <user>Odis</user>
    <text>In a module context, the expander sees `(foo)`, sees that its not bound yet, assumes that its a definition that will get bound later, and expands to `(#%app foo)`.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:02:38.457000</ts>
    <user>Odis</user>
    <text>However, `foo` turns out to be a macro, so in the second pass, it gets further expanded to: `(#%app (lambda () (writeln 42)))`, which writes 42 out to the console.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:03:28.458000</ts>
    <user>Odis</user>
    <text>Note that this is different from what would happen if the definition of `foo` happened before its use, in that case the macro would expand to `(lambda () (writeln 42))`, which wouldn’t write 42 out to the console until its applied.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:03:42.458400</ts>
    <user>Odis</user>
    <text>This is what happens to `(writeln (foo))`.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:03:59.458800</ts>
    <user>Odis</user>
    <text>And why it doesn’t write `42` out to the console.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:04:03.459000</ts>
    <user>Odis</user>
    <text>Does that make sense?</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:06:59.459200</ts>
    <user>Andreas</user>
    <text>Ah, yes, that makes sense.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:07:34.459900</ts>
    <user>Andreas</user>
    <text>Odd indeed. It does write 42 to the console at least.:
```
42
#&amp;lt;procedure:...tos/tmp/leif.rkt:6:7&amp;gt;
```</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:08:22.460500</ts>
    <user>Andreas</user>
    <text>What's odd is that I don't see
```
42
42
```</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:08:27.460800</ts>
    <user>Andreas</user>
    <text>which is what I would expect.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:09:09.461500</ts>
    <user>Verla</user>
    <text>If you change the writeln line to (writeln ((foo))) that's what you would get</text>
  </message>
  <message conversation_id="982">
    <ts>2018-11-13T15:23:13.465900</ts>
    <user>Carlyn</user>
    <text>I would argue that this behavior is questionably correct. While some of the behavior is unavoidable—the expander can’t know how `foo` will (or will not) be defined later—it essentially assumes that `foo` is a variable binding and treats it as a function application. The expander sometimes does similar things in other contexts, such as at the top level, or at phase &amp;gt; 0, but when it does so, it introduces an extra check: it records the assumption that `foo` will be a variable, not syntax, and it raises an error if `foo` is eventually bound as syntax. You can see this behavior in this program:
```
#lang racket
(begin-for-syntax
  (define (f) not-bound-yet))
(begin-for-syntax
  (define-syntax-rule (not-bound-yet)
    #f))
```
```
not-bound-yet.rkt:3:14: not-bound-yet: identifier treated as a variable, but later defined as syntax
  at phase: 1; the transformer environment
  in: not-bound-yet
  location...:
   not-bound-yet.rkt:3:14
```
I think there’s an argument to be made that the expander ought to do something similar when it assumes an unbound identifier will be an application and introduces `#%app` anyway.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:30:42.467000</ts>
    <user>Odis</user>
    <text>&lt;@Carlyn&gt; Of course its consistent with the existing rules of the racket macro expander. That still doesn’t change the fact that its not really unexpected behavior.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:31:06.467800</ts>
    <user>Carlyn</user>
    <text>I think you misread me: my argument was that it was not consistent with the existing rules of the macroexpander.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:31:42.468000</ts>
    <user>Odis</user>
    <text>Ah, okay.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:31:56.468500</ts>
    <user>Carlyn</user>
    <text>I think the macroexpander should reject that program!</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:32:05.468800</ts>
    <user>Odis</user>
    <text>Yes, okay, good.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:32:08.469000</ts>
    <user>Odis</user>
    <text>I do too.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:33:02.469900</ts>
    <user>Carlyn</user>
    <text>The error message I mentioned demonstrates that the expander already has mechanisms in place to record the assumptions that it makes about unbound identifiers and signal an error if those assumptions turn out to be false.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:36:16.473200</ts>
    <user>Carlyn</user>
    <text>Though, admittedly, I’m not sure in practice if the change I’m suggesting is really a good one, for two reasons. First, if `foo` turns out to be bound as syntax to a result of `make-variable-like-transformer` or similar, then the current approach the macroexpander takes will go right. The change I’ve proposed would reject the program, anyway, which would negatively impact Turnstile-like techniques. Second, your program would have been rejected _anyway_ if `foo` was defined as something other than an identifier macro, and identifier macros are relatively rare in practice in Racket (except via helpers that automatically create them, like `make-rename-transformer` and `make-variable-like-transformer`). On the other hand, the error message would still be confusing.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:36:56.473700</ts>
    <user>Carlyn</user>
    <text>In some sense, this might be a sign that a one-size-fits-all expander is hopeless, as I’m increasingly suspecting. :)</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:42:36.474200</ts>
    <user>Odis</user>
    <text>On, trust me, you’re not alone…sadly. :disappointed:</text>
  </message>
  <message conversation_id="983">
    <ts>2018-11-13T15:54:20.475100</ts>
    <user>Andreas</user>
    <text>Trying to make sense why Typed Racket complains:
```
#lang typed/racket

(define sha1sum
  (find-executable-path "sha1sum"))

(unless sha1sum
  (error "no exe"))

(define-values (proc out in err)
  (subprocess #f #f #f sha1sum))
```
I am pretty sure this is a common thing and I just don't know the way out of it...</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:54:53.476000</ts>
    <user>Andreas</user>
    <text>but the checker still thinks that `sha1sum` might be `#false` by the time it gets to the `subprocess` call.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T15:59:06.476500</ts>
    <user>Carlyn</user>
    <text>I have no idea why the typechecker rejects that. &lt;@Monserrate&gt; probably knows.</text>
  </message>
  <message conversation_id="983">
    <ts>2018-11-13T16:00:32.477100</ts>
    <user>Karry</user>
    <text>`sha1sum` is a top level varialbe, top level variables are inherently mutable, mutable variables' types are not updated by type tests</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:00:55.477600</ts>
    <user>Carlyn</user>
    <text>This still fails, though:
```
#lang typed/racket

(let ()
  (define sha1sum
    (find-executable-path "sha1sum"))

  (unless sha1sum
    (error "no exe"))

  (define-values (proc out in err)
    (subprocess #f #f #f sha1sum))

  (void))
```</text>
  </message>
  <message conversation_id="983">
    <ts>2018-11-13T16:01:02.477900</ts>
    <user>Andreas</user>
    <text>&lt;@Karry&gt; same thing inside function</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:01:26.478500</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; you were fast!</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:02:08.479100</ts>
    <user>Jen</user>
    <text>&lt;@Andreas&gt; can you change your program to something like this?
```
#lang typed/racket

(define sha1sum
  (or (find-executable-path "sha1sum")
      (error "no exe")))

(define-values (proc out in err)
  (subprocess #f #f #f sha1sum))
```</text>
  </message>
  <message conversation_id="983">
    <ts>2018-11-13T16:02:20.479500</ts>
    <user>Karry</user>
    <text>```
#lang typed/racket

(let ()
  (define sha1sum
    (find-executable-path "sha1sum"))

  (cond
    [(not sha1sum) (error "no exe")]
    [else
     (define-values (proc out in err)
       (subprocess #f #f #f sha1sum))

     (void)]))
```</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:02:24.479800</ts>
    <user>Andreas</user>
    <text>happy with this:
```
#lang typed/racket

(define sha1sum
  (find-executable-path "sha1sum"))

(define-values (proc out in err)
  (if sha1sum
      (subprocess #f #f #f sha1sum)
      (error "no exe")))
```</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:02:28.480100</ts>
    <user>Andreas</user>
    <text>makes no sense to me.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:02:36.480300</ts>
    <user>Karry</user>
    <text>that works, so it must be that the unless is expanding into something Typed Racket can't figure out</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:02:51.480800</ts>
    <user>Karry</user>
    <text>macros expand, often when they fail to type check it initially makes no sense</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:03:09.481300</ts>
    <user>Andreas</user>
    <text>Thanks all for the work arounds... it would be great if Typed Racket could do the original though.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:05:56.481700</ts>
    <user>Carlyn</user>
    <text>It looks like TR is confused by the internal definition. This works:
```
(define (f [x : (U #f String)])
  (unless x
    (error "bad"))
  (ann x String))
```
This does not:
```
(define (f [x : (U #f String)])
  (unless x
    (error "bad"))
  (define y (ann x String))
  y)
```</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:07:46.482600</ts>
    <user>Carlyn</user>
    <text>It does not appear to be a Racket 7 regression, since the behavior is consistent on older versions of Racket, too.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:10:13.482900</ts>
    <user>Andreas</user>
    <text>shame! &lt;@Monserrate&gt; do we need a bug report?</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:16:55.484300</ts>
    <user>Monserrate</user>
    <text>TR reasons about sequencing in `begin` but not in `letrec-values` and the second expression is `(letrec-values ([() (unless x (error "bad"))] [(y) (ann x String)]) y)`</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:18:06.484900</ts>
    <user>Monserrate</user>
    <text>plumbing those effects through in the `letrec` code shouldn't be too hard, I'd be happy to help if someone wants to take that on</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:29:57.485700</ts>
    <user>Andreas</user>
    <text>I would be interested in giving it a go if nobody picks it up but not before end of next week. I will get back to you on this in case it's not sorted by then.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:30:26.486200</ts>
    <user>Andreas</user>
    <text>How can I type `define-values`?</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:30:42.486700</ts>
    <user>Andreas</user>
    <text>I need so say:
```
(define-values (authdata diff i) 
    (place-channel-get ch))
```</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:30:56.487400</ts>
    <user>Andreas</user>
    <text>I know the type of message sent.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:31:08.487700</ts>
    <user>Monserrate</user>
    <text>```
(: authdata ...)
(: diff ...)
(: i ...)
(define-values ...)
```</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:33:05.488200</ts>
    <user>Andreas</user>
    <text>Thanks</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:33:16.488700</ts>
    <user>Monserrate</user>
    <text>however, `place-channel-get` produces only one value, so I'm confused</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:33:19.488800</ts>
    <user>Andreas</user>
    <text>Interesting:
```
Type Checker: type mismatch;
 mismatch in number of values
  expected: 3 values
  given: 1 value
  in: (place-channel-get ch)
```</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:33:27.489000</ts>
    <user>Andreas</user>
    <text>ah...</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:34:08.489600</ts>
    <user>Andreas</user>
    <text>my mistake. :slightly_smiling_face: the message is supposed to be a list of 3 values instead!</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:38:42.490400</ts>
    <user>Andreas</user>
    <text>Even though I say that the type of the message is `(: msg (List String Exact-Positive-Integer Nonnegative-Integer))` it's telling me it should be any? Do I need some sort of Type assertion here to constrain the type?</text>
  </message>
  <message conversation_id="984">
    <ts>2018-11-13T16:44:44.490800</ts>
    <user>Monserrate</user>
    <text>place channels aren't typed; they always return `Any`</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:45:30.491500</ts>
    <user>Andreas</user>
    <text>But how can I work with the result if I can't tell typed racket what it is?</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:45:56.492000</ts>
    <user>Andreas</user>
    <text>I need to split the list into its components but with type `Any` I can't really do much.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:46:22.492400</ts>
    <user>Andreas</user>
    <text>I thought `ann` could help but doesn't:
```
(define msg
    (ann (place-channel-get ch)
         (List String Exact-Positive-Integer Nonnegative-Integer)))
```</text>
  </message>
  <message conversation_id="984">
    <ts>2018-11-13T16:47:41.492800</ts>
    <user>Monserrate</user>
    <text>`ann` just tells the type checker what you expect</text>
  </message>
  <message conversation_id="984">
    <ts>2018-11-13T16:48:04.493300</ts>
    <user>Monserrate</user>
    <text>you can use `cast` or you can write code with `pair?` etc</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:48:59.494000</ts>
    <user>Andreas</user>
    <text>ah, `cast` seems to be what I need. Not sure I understand the comment with regards to `pair?`...</text>
  </message>
  <message conversation_id="984">
    <ts>2018-11-13T16:50:08.494300</ts>
    <user>Monserrate</user>
    <text>you can write (if (pair? msg) ...)</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:51:47.494700</ts>
    <user>Andreas</user>
    <text>ah... ok, understood.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:51:49.494900</ts>
    <user>Andreas</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:52:18.495500</ts>
    <user>Andreas</user>
    <text>That's where we need occurence typing, right?</text>
  </message>
  <message conversation_id="984">
    <ts>2018-11-13T16:53:22.495700</ts>
    <user>Monserrate</user>
    <text>yes</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T16:59:46.496200</ts>
    <user>Andreas</user>
    <text>Gosh, expecting massive speed up with so much typing. :wink:</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T17:01:17.497800</ts>
    <user>Andreas</user>
    <text>oh dear, maybe again I don't understand polymorphic types but I have:
```
  (define job-evts (cast (apply choice-evt jobs) (Evtof Place)))
  (define solution
    (sync (handle-evt job-evts identity)))
```
type checker says:
```
Type Checker: Polymorphic function `handle-evt' could not be applied to arguments:
Argument 1:
  Expected: (Evtof a)
  Given:    (Evtof Place)
Argument 2:
  Expected: (-&amp;gt; a b)
  Given:    (All (a) (-&amp;gt; a a))

  in: (handle-evt job-evts identity)
```
but shouldn't `a` be `Place` and `b` as well, due to the constrained imposed by `identity`? Not understanding it.</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T17:29:25.498100</ts>
    <user>Andreas</user>
    <text>ah, maybe I need `inst`</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T17:31:48.498300</ts>
    <user>Monserrate</user>
    <text>yes, that is likely the case</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T17:32:21.499000</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; also, just so you know, unless your program spends almost all its time in numeric computation, it won't see a big speedup from TR</text>
  </message>
  <message conversation_id="981">
    <ts>2018-11-13T17:33:14.499400</ts>
    <user>Andreas</user>
    <text>oh dear, I should be finished soon. but this one is mostly numerical computation. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="985">
    <ts>2018-11-15T05:21:32.503700</ts>
    <user>Omar</user>
    <text>Is there an easy way to extend an arbitrary language? For example, I want to extend `#lang pollen` with my own `#%top`. What’s the best way to accomplish that?

I’m following &lt;http://blog.racket-lang.org/2017/03/languages-as-dotfiles.html&gt;, but the problem is that the blog post assumes that something like `scribble/reader` exists. I don’t think that kind of thing exists for `pollen`.</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T09:27:09.505500</ts>
    <user>Franklin</user>
    <text>This is a bit off-topic, but since this group probably will appreciate an example of how things can blow up, when scope rules are unclear, I'll post it anyways. Note that the blue graph of a(x) has a local minimum at x=2.8, but the red graph of a'(x) doesn't cross the x-axis at x=2.8.</text>
  </message>
  <message conversation_id="987">
    <ts>2018-11-15T09:39:31.506800</ts>
    <user>Thaddeus</user>
    <text>I guess it's because the right answer may be 1.1835, which seems more likely to be crossed on the graph (but it looks more like 1.8 or something.. weird)</text>
  </message>
  <message conversation_id="987">
    <ts>2018-11-15T09:40:48.507700</ts>
    <user>Thaddeus</user>
    <text>I remember in math class being told that you can toss out irrelevant results somehow when you get multiple answers like that.</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T09:46:30.508800</ts>
    <user>Monserrate</user>
    <text>&lt;@Omar&gt; you can make a module which does `(require (all-from-except pollen #%top)) (provide (all-from-out pollen))`</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:20:25.515500</ts>
    <user>Omar</user>
    <text>&lt;@Monserrate&gt; You mean `except-in`? . As I understand `all-from-except` is for `#%provide`.

Would you mind telling me exactly what I should put in `my-pollen/main.rkt`? Let’s not even care about overriding `#%top`. Here are my attempts that failed:

```
#lang racket/base

(require pollen)
(provide (all-from-out pollen))
```

fails on the program

```
#lang my-pollen 
abc
```

because of the error `collection not found for module path: my-pollen/lang/reader`.

So I do need to create a reader.

```
#lang racket/base

(require pollen)
(provide (all-from-out pollen))

(module* reader syntax/module-reader
  my-pollen
  #:read p:read
  #:read-syntax p:read-syntax
  (require (prefix-in p: pollen)))
```

fails because `p:read-syntax` is unbound.</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:21:03.516100</ts>
    <user>Monserrate</user>
    <text>you probably need to require whatever provides pollen's read-syntax etc</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:21:11.516600</ts>
    <user>Monserrate</user>
    <text>which i guess isn't `pollen`</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:22:17.518100</ts>
    <user>Monserrate</user>
    <text>you could probably do the same thing that `pollen` does, which is:
```
(module reader "private/reader-base.rkt"
  default-mode-auto)
```</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:22:30.518600</ts>
    <user>Monserrate</user>
    <text>of course you'd need to change that language to `pollen/private/reader-base`</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:23:00.519300</ts>
    <user>Franklin</user>
    <text>&lt;@Thaddeus&gt; The problem is that the x in the definition of y has global scope, but in am(x) the differentiation happens with respect to a "local x". If one enter am(z) then the result returned is 1/(x-2)+3  (nope that's not a typo).  am(z) = d/dz( am(z) ) = d/dz ( z*y) = y = 1/(x-2)+3. Sigh.</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:24:07.519700</ts>
    <user>Thaddeus</user>
    <text>oh</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:24:26.519800</ts>
    <user>Omar</user>
    <text>Thanks! This works :slightly_smiling_face:</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:24:57.520300</ts>
    <user>Thaddeus</user>
    <text>so that's definitely a programming issue :stuck_out_tongue:</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:25:17.520600</ts>
    <user>Thaddeus</user>
    <text>maths are always right, it's what they say</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:34:34.521100</ts>
    <user>Franklin</user>
    <text>It's not exactly easy to explain in a high school math class ...</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:34:48.521400</ts>
    <user>Franklin</user>
    <text>That x is not always x.</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:39:20.523800</ts>
    <user>Mikel</user>
    <text>First teach them about Gödel, and then it'll all be clear :troll:</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:39:23.523900</ts>
    <user>Thaddeus</user>
    <text>I think it's the study they did at MIT: They asked their students at the beginning of classes something like:
```
a = 10;
b = 20;
a = b;
What is the value of a and b?
```
About 40% got it right, the others did not understand.
Then at the end of the semester, they ask the same question again, and get... exactly the same results.</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:40:16.524400</ts>
    <user>Thaddeus</user>
    <text>I don't remember if it was MIT or Harvard, or some other big uni</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:41:57.525800</ts>
    <user>Thaddeus</user>
    <text>They realized two things: a lot of people are not good at "doing the computer in their heads", and that maybe the way they teach IT was not that good to begin with</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:45:41.527900</ts>
    <user>Thaddeus</user>
    <text>I think the fact that we tend to program with this idea of a state machine in our head is also part of the problem. We were told the correct result was that "a becomes the value of b". But in declarative or functional languages, the answer "error: illegal equality" might be perfectly acceptable.</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:49:15.528800</ts>
    <user>Thaddeus</user>
    <text>so in the end, the people who answer "I don't know" or "It's impossible" are as legitimate as the 40% who answer "a = b = 20"</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:52:29.530400</ts>
    <user>Thaddeus</user>
    <text>The state machine is only a limit from the Turing/Von Neumann architecture we use as computers. Mathematics don't care about that and can have x be whatever the reader has in her mind.</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T10:54:03.531300</ts>
    <user>Thaddeus</user>
    <text>But i think I'm slowly losing track there.. I'll see myself out and leave you dealing with the philosophical repercussions :stuck_out_tongue:</text>
  </message>
  <message conversation_id="988">
    <ts>2018-11-15T11:12:18.531400</ts>
    <user>Ilda</user>
    <text>You may be thinking of &lt;http://www.eis.mdx.ac.uk/research/PhDArea/saeed/paper1.pdf&gt;</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T11:33:07.531600</ts>
    <user>Thaddeus</user>
    <text>Yes, thanks for bringing the reference!</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T11:51:23.532100</ts>
    <user>Omar</user>
    <text>&lt;@Thaddeus&gt; have you seen &lt;https://cs.brown.edu/~sk/Publications/Papers/Published/kf-prog-paradigms-and-beyond/paper.pdf&gt; ?</text>
  </message>
  <message conversation_id="986">
    <ts>2018-11-15T11:54:51.532600</ts>
    <user>Thaddeus</user>
    <text>&lt;@Omar&gt; No, but I'm definitely reading this right now!</text>
  </message>
  <message conversation_id="989">
    <ts>2018-11-15T14:40:09.535000</ts>
    <user>Carlyn</user>
    <text>Is there a way to change what `object-name` produces on classes, similar to how `procedure-rename` works on procedures?</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T14:58:08.535800</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; The documentation for `front-end/finished-complete-program` says:  “It must return without raising an error, or else the DrRacket window will be wedged.”</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T14:58:21.536200</ts>
    <user>Odis</user>
    <text>What does it mean fo a window to be `wedged`?</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T14:58:32.536400</ts>
    <user>Eileen</user>
    <text>Generic badness</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T14:59:04.536700</ts>
    <user>Eileen</user>
    <text>Undefined behavior</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T14:59:34.537500</ts>
    <user>Eileen</user>
    <text>(But highly likely to be unresponsive and highly unlikely to produce nasal demons)</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T14:59:50.537700</ts>
    <user>Odis</user>
    <text>Ah, okay, thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:00:08.538100</ts>
    <user>Odis</user>
    <text>Out of pure curiosity, did you choose that word, or is it a term from somewhere else?</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:00:25.538600</ts>
    <user>Odis</user>
    <text>(I couldn’t find it after a quick search, but I could be searching for the wrong thing. :wink: )</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:01:04.538800</ts>
    <user>Eileen</user>
    <text>Dunno</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:01:17.539100</ts>
    <user>Eileen</user>
    <text>That's what it means to me</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:03:04.539600</ts>
    <user>Odis</user>
    <text>lol…thanks. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:03:36.540200</ts>
    <user>Helena</user>
    <text>hmm ... american heritage dictionary says: (1) having the shape of a wedge; thick at one end tapered at another (2) stuck; jammed</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:06:59.541000</ts>
    <user>Helena</user>
    <text>&lt;@Odis&gt; maybe the docs should say "If this method raises an exception, the behavior of the DrRacket window is undefined."</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:08:15.541600</ts>
    <user>Odis</user>
    <text>Mmm….maybe? Although honestly, now that robby explained it to me, wedged seems pretty accurate here.</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:08:41.542300</ts>
    <user>Odis</user>
    <text>Although I would probably say, the behavior is undefined, but likely the window will be frozen.</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:08:44.542600</ts>
    <user>Odis</user>
    <text>Or something like that?</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:08:48.542800</ts>
    <user>Eileen</user>
    <text>I think it would be good to keep the more specific meaning</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:09:00.543600</ts>
    <user>Eileen</user>
    <text>Probalby my use of undefined is because I’m watching jesse type C++ code :slightly_smiling_face:</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:09:03.543800</ts>
    <user>Odis</user>
    <text>Agreed.</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:09:05.543900</ts>
    <user>Eileen</user>
    <text>happy to use a different word</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:09:07.544000</ts>
    <user>Monserrate</user>
    <text>"wedged" is pretty common for this situation in my experience</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:09:16.544200</ts>
    <user>Eileen</user>
    <text>it’s a fun word :slightly_smiling_face:</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:09:49.545000</ts>
    <user>Odis</user>
    <text>&lt;@Monserrate&gt; Interesting, may I ask where?</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:09:57.545400</ts>
    <user>Odis</user>
    <text>(Also I 100% agree, the word is pretty awesome.)</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:10:01.545600</ts>
    <user>Helena</user>
    <text>ok (I was confused by wedged)</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:10:17.546000</ts>
    <user>Odis</user>
    <text>I’ve heard unresponsive, frozen, stuck, but this is the first time I’ve heard of wedged. :smile:</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:10:27.546400</ts>
    <user>Monserrate</user>
    <text>for example, it's used here: &lt;https://en.wikipedia.org/wiki/Hang_(computing)&gt;</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:11:03.546800</ts>
    <user>Odis</user>
    <text>Ah, okay.</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:11:25.547100</ts>
    <user>Odis</user>
    <text>So its a cooperative multitasking specific term.</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:11:33.547400</ts>
    <user>Odis</user>
    <text>That makes a lot of sense. Thanks &lt;@Monserrate&gt;</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:14:43.549100</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; &amp;amp; &lt;@Monserrate&gt; (&lt;@Helena&gt; just suggested that we add a margin note linking or explaining the definition of wedged, since its apparently fallen out of modern parlance. Would you be opposed to that?)</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:15:14.549900</ts>
    <user>Odis</user>
    <text>Personally I am 100% on side wedged here. But I also think linking to a definition isn’t a bad idea. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:15:17.550000</ts>
    <user>Eileen</user>
    <text>I don’t think this word is that unknown</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:15:25.550300</ts>
    <user>Eileen</user>
    <text>and if it were, we should change it</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:15:43.551000</ts>
    <user>Eileen</user>
    <text>I don’t think it is in common usage for people in general, but I think it is for people who work with computers that get wedged a lot</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:15:43.551200</ts>
    <user>Eileen</user>
    <text>:slightly_smiling_face:</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:16:01.551700</ts>
    <user>Odis</user>
    <text>FWIW, I asked about 10 people in physical space (in and around the PL labs), and none of us had heard the term before. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:16:39.552000</ts>
    <user>Odis</user>
    <text>But, I could have easily just asked the wrong 10 people. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:27:32.554400</ts>
    <user>Catrice</user>
    <text>I mean, I've certainly used it in this context, often</text>
  </message>
  <message conversation_id="990">
    <ts>2018-11-15T15:27:33.554500</ts>
    <user>Carlyn</user>
    <text>FWIW, I didn’t have trouble inferring the meaning of the word “wedged” in a computing context since I was familiar with it in a non-computing context, such as “the door is wedged”. But maybe that isn’t a common use.</text>
  </message>
  <message conversation_id="991">
    <ts>2018-11-15T16:45:29.556700</ts>
    <user>Alesha</user>
    <text>While I also inferred the general meaning of the word, I had never heard of it used in computer science context. I found it enlightening that the more nuanced meaning is related to cooperative multitasking which makes sense since it is dependent on tasks behaving cooperatively  and keeping things moving smoothly without capturing and holding on the control of the machine.</text>
  </message>
  <message conversation_id="992">
    <ts>2018-11-15T19:56:14.562100</ts>
    <user>Doyle</user>
    <text>Hello! :wave: There doesn’t seem to be a Pollen-specific channel, so I’ll ask here: I’ve been building a multilingual website using Pollen, and haven’t figured out a good method to “isolate” or “separate” pagetrees by language. For example, I’d like to be able to say:

```
#lang pollen

about.html
◊foo.html{
    bar.html
    baz.html
    etc.html
}

--- separator ---

accueil.html
◊foo.html{
    bar.html
    baz.html
    etc.html
}
```

For now my solution has been to organize each language as it’s own pollen document. This works, but it’s really repetitive and seems like overkill. If anyone has ideas or knows of simpler ways to do this, I’d be very thankful to hear them. I am new to Racket and really having fun, thanks to everyone involved developing and supporting it!</text>
  </message>
  <message conversation_id="992">
    <ts>2018-11-15T20:10:52.563000</ts>
    <user>Doyle</user>
    <text>lmk for example what ’yall think of</text>
  </message>
  <message conversation_id="993">
    <ts>2018-11-15T23:34:58.568000</ts>
    <user>Omar</user>
    <text>I’m building a multilingual website using Pollen too! (English and Thai)

Here’s my idea: use only one file per one document, but for each document, do something like this:

```
@english{&amp;lt;my english content here&amp;gt;}
@thai{&amp;lt;my thai content here&amp;gt;}
```

`@english` and `@thai` should create a `div` with an identifiable class/id.

Then in the template, include a JavaScript that hides one language (sth like `document.getElementById('thai-lang').style.display = "none";`). And then there might be a button that lets you switch a language, etc. It’s totally up to you how you want to design this.</text>
  </message>
  <message conversation_id="992">
    <ts>2018-11-16T03:07:05.571500</ts>
    <user>Doyle</user>
    <text>For me &lt;@Omar&gt;, I decided to use two templates and then `◊(define-meta template "français.html")`. The reason I didn’t take your approach is because I want my pages to use the `&amp;lt;html lang="fr"&amp;gt;` declaration so that browsers know which language it is. For your case you could say `&amp;lt;html lang="mul"&amp;gt;` but I am not sure how that works for end-users. I also don’t know what you would do for `&amp;lt;meta description=[...]` etc – it might make your search engine results a little strange. And then there are the cases where people don’t have JavaScript etc. Interesting idea though, glad to hear someone else is hacking on the same problem :slightly_smiling_face:</text>
  </message>
  <message conversation_id="993">
    <ts>2018-11-16T11:32:42.575200</ts>
    <user>Helena</user>
    <text>I have a package that uses slideshow &amp;amp; pict. Sometimes `raco setup` segfaults when building the documentation (I'm on OSX). Does the error message here look familiar to anyone? &lt;https://github.com/bennn/pict-abbrevs/issues/2&gt;</text>
  </message>
  <message conversation_id="993">
    <ts>2018-11-16T11:33:02.575900</ts>
    <user>Helena</user>
    <text>(this package isn't on `&lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt;`)</text>
  </message>
  <message conversation_id="994">
    <ts>2018-11-16T16:41:49.576000</ts>
    <user>Lynna</user>
    <text>Are you running on Mojave?</text>
  </message>
  <message conversation_id="995">
    <ts>2018-11-16T19:15:12.576900</ts>
    <user>Marinda</user>
    <text>On the `snapshot` server one can download a build ordinarily (in the left column), or “as current” (in the right column). What’s the difference?</text>
  </message>
  <message conversation_id="995">
    <ts>2018-11-16T19:18:12.577000</ts>
    <user>Marinda</user>
    <text>FWIW there is a Pollen mailing list with other multilingual users. &lt;https://groups.google.com/forum/#!forum/pollenpub&gt;</text>
  </message>
  <message conversation_id="995">
    <ts>2018-11-16T19:20:26.577200</ts>
    <user>Doyle</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="995">
    <ts>2018-11-16T19:24:20.578000</ts>
    <user>Carlyn</user>
    <text>The difference is the URL; the “as current” URL doesn’t ever change between versions, so you can use that URL if you just want to download the latest snapshot in a script.</text>
  </message>
  <message conversation_id="996">
    <ts>2018-11-17T10:31:29.578800</ts>
    <user>Del</user>
    <text>Could someone post the best URL for downloading MinGW in order to build Racket?</text>
  </message>
  <message conversation_id="997">
    <ts>2018-11-17T11:00:04.581300</ts>
    <user>Alesha</user>
    <text>You probably will have better luck installing MSYS2 which is based on MinGW64

&lt;https://www.msys2.org/&gt;

Once you’ve installed it, you can then install the necessary MinGW64 toolchains for compiling 32 or 64 bit Window applications</text>
  </message>
  <message conversation_id="995">
    <ts>2018-11-17T11:00:59.582900</ts>
    <user>Alesha</user>
    <text>Caveat, I haven’t verified that Racket builds successfully using MSYS2 platform but theoretically it should since it’s just basically a rewrapped MinGW64</text>
  </message>
  <message conversation_id="998">
    <ts>2018-11-17T15:40:32.586500</ts>
    <user>Claud</user>
    <text>&lt;@Lynna&gt; I tried adding the Racket-on-Chez snapshot to one of my Travis builds, and the test suite ran into an `exn:fail:contract` with the message `"invalid memory reference.  Some debugging context lost"` (&lt;https://travis-ci.com/DigitalRicoeur/ricoeur-tei-utils/jobs/159264819#L846&gt;). I haven't yet done anything at all to try to pinpoint the issue, but I thought I'd mention it in case it immediately brings anything to mind. This is the test that had the problem: &lt;https://github.com/DigitalRicoeur/ricoeur-tei-utils/blob/c750b79/tei/kernel/pre-kernel-lib/output-to-file.rkt#L82&gt;</text>
  </message>
  <message conversation_id="998">
    <ts>2018-11-17T18:00:38.586800</ts>
    <user>Lynna</user>
    <text>Thanks for the report! I’ve pushed a repair.</text>
  </message>
  <message conversation_id="999">
    <ts>2018-11-17T22:38:43.587000</ts>
    <user>Omar</user>
    <text>FWIW: You can dynamically set `lang` in JavaScript. E.g., `document.documentElement.lang = "th"`.</text>
  </message>
  <message conversation_id="999">
    <ts>2018-11-17T22:40:21.587300</ts>
    <user>Omar</user>
    <text>Not sure if including both languages in `meta description` is a good idea</text>
  </message>
  <message conversation_id="998">
    <ts>2018-11-18T12:11:17.587500</ts>
    <user>Claud</user>
    <text>Thanks for the very quick fix! I ran into two other things while trying this that might be useful for you to know:
1. On Travis, `raco pkg install` with its default number of jobs was killed by Travis, [apparently](&lt;https://docs.travis-ci.com/user/common-build-problems/#my-build-script-is-killed-without-any-error&gt;) for using too much memory. Passing `-j 2` worked: I plan to try `-j 4` and see if that works, too.
2. I also tried an [AppVeyor](&lt;https://ci.appveyor.com/project/philipmcgrath/tei-utils&gt;) build, which AppVeyor killed when it had run for 60 minutes, vs. about 10 minutes for the `7.1` and `HEAD` builds to complete successfully. (That build uses Minimal Racket because I don't know how to run a Windows installer programmatically, but I could unpack the tarball.)</text>
  </message>
  <message conversation_id="999">
    <ts>2018-11-18T12:14:17.587700</ts>
    <user>Claud</user>
    <text>Also, I'm guessing `"invalid memory reference.  Some debugging context lost"` is never supposed to happen, but I was sort of surprised that it was an `exn:fail:contract` specifically.</text>
  </message>
  <message conversation_id="1000">
    <ts>2018-11-18T16:39:45.587900</ts>
    <user>Lynna</user>
    <text>I expect that RacketCS took too long because it had to compile package dependencies from scratch, and compilation is slow. There may be Windows-specific slowness, too, since the snapshot build for Windows currently likes 6 hours(!). I’m working on that.

Errors at the Chez Scheme level are currently converted to `exn:fail:contract` by default. There’s more work to do in bridging the two error systems.</text>
  </message>
  <message conversation_id="999">
    <ts>2018-11-19T00:13:43.588300</ts>
    <user>Claud</user>
    <text>I can confirm that the Travis build is succeeding now. For comparison, RacketCS took about 25 minutes, vs. 11 minutes for both 7.1 and HEAD—a much more reasonable slowdown—so it definitely does seem like there's something Windows-specific going on.</text>
  </message>
  <message conversation_id="999">
    <ts>2018-11-19T12:32:43.590800</ts>
    <user>Leena</user>
    <text>This might seem obvious, but we have a project called COSA (Clinic for Open Source Arts) and on one of the pages we list open source resources. I wanted to drop Racket on there (plus packages we’ve created for artists), but didn’t want to do so without at least getting the thumbs up that this was ok (=. I assume this kind of Racket promotion is ok?</text>
  </message>
  <message conversation_id="999">
    <ts>2018-11-19T12:35:35.591100</ts>
    <user>Monserrate</user>
    <text>&lt;@Leena&gt; yes, that sounds great!</text>
  </message>
  <message conversation_id="999">
    <ts>2018-11-19T12:35:54.591300</ts>
    <user>Leena</user>
    <text>Thanks!</text>
  </message>
  <message conversation_id="1000">
    <ts>2018-11-19T13:21:34.591900</ts>
    <user>Robert</user>
    <text>You might want to read this first: &lt;https://retractionwatch.com/2014/07/18/the-camel-doesnt-have-two-humps-programming-aptitude-test-canned-for-overzealous-conclusion/&gt;</text>
  </message>
  <message conversation_id="1001">
    <ts>2018-11-19T17:19:41.592400</ts>
    <user>Claud</user>
    <text>I figured out how to install full Racket on AppVeyor, and the build is much more reasonable: 14 min vs. 7 min.</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T18:34:06.593300</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; How does DrRacket display (syntax) error messages in the bottom pane?</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T18:34:40.594100</ts>
    <user>Odis</user>
    <text>Or rather, is it possible to make new messages with a DrRacket plugin?</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T18:36:28.595700</ts>
    <user>Odis</user>
    <text>I tried using `drracket:eval:expand-program` (because the larger picture is to try to get DrRacket to use a custom expander rather than just the vanilla one), but there expansion errors became internal drracket errors.</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T18:37:26.596600</ts>
    <user>Odis</user>
    <text>I also tried the `online-check-syntax`, but I still wasn’t able to get a syntax error message to pop up.</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T18:42:29.597700</ts>
    <user>Odis</user>
    <text>Finally, I also tried adding a custom online expansion monitor with `drracket:module-language-tools:add-online-expansion-monitor`, and while I was able to add a custom expansion monitor, I couldn’t find a way to create a custom (check syntax) error message.</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T18:43:07.598300</ts>
    <user>Odis</user>
    <text>&lt;@Eileen&gt; also, fwiw, my current code is: &lt;https://gist.github.com/LeifAndersen/0d6a3a00ef4f90dc6a3f043adebac0ea&gt;</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T18:43:08.598400</ts>
    <user>Odis</user>
    <text>None</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T19:26:06.598900</ts>
    <user>Eileen</user>
    <text>Check syntax is a tool</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T19:26:14.599200</ts>
    <user>Eileen</user>
    <text>It makes its own place to display stuff</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T19:26:47.599800</ts>
    <user>Eileen</user>
    <text>Check syntax isn't designed to have plugins of its own. </text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T19:27:05.600500</ts>
    <user>Eileen</user>
    <text>Maybe you should write an email message that explains what you actually want to do</text>
  </message>
  <message conversation_id="1002">
    <ts>2018-11-19T19:28:02.602000</ts>
    <user>Eileen</user>
    <text>These messages seem to make assumptions about how things work that aren't true so maybe it is better to back up and have a conversation that's a bit less ephemeral. </text>
  </message>
  <message conversation_id="1003">
    <ts>2018-11-19T21:53:06.602500</ts>
    <user>Odis</user>
    <text>Mmmm….good idea. I agree. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1004">
    <ts>2018-11-20T20:49:31.603400</ts>
    <user>Helena</user>
    <text>no, El Capitan</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:29:25.608700</ts>
    <user>Vonda</user>
    <text>Hello everyone! I have been using Racket in toy projects for a couple of years. In the last months, I became interested in comparing Racket with Common Lisp. Just for fun, I compared the `web-server` performance with `woo`, a server written in CL (with `libuv` underneath). And I added my numbers to the benchmarks shown in the `woo` repository: &lt;https://github.com/fukamachi/woo/pull/73&gt;</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:31:45.610500</ts>
    <user>Vonda</user>
    <text>The numbers are not so important, but I wanted to ask for someone with more experience to review my implementation there. I just wrote a naive, straightforward port of what the CL code seemed to be doing.</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:33:04.611200</ts>
    <user>Vonda</user>
    <text>(if someone cares, of course :slightly_smiling_face: )</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:33:16.611500</ts>
    <user>Franklin</user>
    <text>Do you time startup time too?</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:34:11.612100</ts>
    <user>Franklin</user>
    <text>Did you compile to bytecode before running the benchmark?</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:36:55.612600</ts>
    <user>Thaddeus</user>
    <text>I think you may also want to disable continuations</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:36:59.612700</ts>
    <user>Vonda</user>
    <text>I used the benchmark script in the repository: &lt;https://github.com/fukamachi/woo/blob/master/benchmark/run-benchmark&gt;</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:37:57.613500</ts>
    <user>Vonda</user>
    <text>and no, I do not think that I did any bytecode compilation before running on my machine</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:38:26.614000</ts>
    <user>Vonda</user>
    <text>(sorry if I am not super precise, I did this several months ago … )</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:38:33.614300</ts>
    <user>Monserrate</user>
    <text>I doubt bytecode compilation will matter there</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:38:43.614600</ts>
    <user>Monserrate</user>
    <text>and that benchmark doesn't capture any continuations</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:39:44.615600</ts>
    <user>Thaddeus</user>
    <text>right</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:40:09.616200</ts>
    <user>Franklin</user>
    <text>So the the web-server is started, and then then the timings are made?</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:40:29.616600</ts>
    <user>Franklin</user>
    <text>(just checking whether I understand the script)</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:41:54.617000</ts>
    <user>Monserrate</user>
    <text>i do get significantly better numbers with compiling the file first</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:43:19.618100</ts>
    <user>Vonda</user>
    <text>&lt;@Franklin&gt; I understand the same from the benchmark script (I just provided an “init command” that is passed to that script)</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:43:21.618300</ts>
    <user>Monserrate</user>
    <text>still noticeably behind tornado</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:44:42.619600</ts>
    <user>Vonda</user>
    <text>also, an important note: I provided numbers in that PR only for the Racket server, and asked the author to run it again in a comparable setup to all other servers … but just got the PR merged with no comment</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:45:10.619900</ts>
    <user>Franklin</user>
    <text>So the numbers are from two different servers?</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:45:32.620200</ts>
    <user>Thaddeus</user>
    <text>that would explain a lot of things x)</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:46:07.621000</ts>
    <user>Thaddeus</user>
    <text>as always with benchmarks, they're not often meaningful :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:47:33.622600</ts>
    <user>Vonda</user>
    <text>no, what I mean is that, if you open the benchmark page, there are numbers for Tornado, Woo, etc … those numbers have been obtained by the author previously in a setup unknown to me … in my PR, I just provided numbers for the Racket server, without overwriting the previous results with those that I could measure on my own setup</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:47:44.622800</ts>
    <user>Vonda</user>
    <text>&lt;https://github.com/fukamachi/woo/blob/master/benchmark.md&gt;</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:48:13.623900</ts>
    <user>Thaddeus</user>
    <text>yeah, so they're currently meaningless until they restart a full benchmark</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:48:20.624100</ts>
    <user>Vonda</user>
    <text>&lt;@Thaddeus&gt; completely agree, this is just an exercise for fun … benchmarks can be very misleading :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:48:50.624600</ts>
    <user>Thaddeus</user>
    <text>I'm curious to see the results though</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:49:08.625000</ts>
    <user>Vonda</user>
    <text>one can run all the benchmarks locally and compare, of course</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:49:12.625200</ts>
    <user>Thaddeus</user>
    <text>yep</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:52:04.626700</ts>
    <user>Monserrate</user>
    <text>i ran it locally for some of them and the results are in line with that page</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:53:37.627600</ts>
    <user>Thaddeus</user>
    <text>maybe racket-on-chez will make a difference :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:55:32.629900</ts>
    <user>Vonda</user>
    <text>ah yes, I did this in June and it was Racket 6.12 at the time</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:56:30.631000</ts>
    <user>Thaddeus</user>
    <text>Anyways I think we have better to do right now than working on those kind of optimization, but it's still a good indicator that there's some more work to do until the web-server becomes a real game changer in terms of performance. Considering it's one of our objectives, obviously, but I'm not even sure it is for now.</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:57:46.631600</ts>
    <user>Thaddeus</user>
    <text>But thanks for adding racket to the benchmark :wink:</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T11:58:41.631900</ts>
    <user>Monserrate</user>
    <text>racketcs is about the same, maybe a bit slower</text>
  </message>
  <message conversation_id="1005">
    <ts>2018-11-21T12:01:40.633400</ts>
    <user>Vonda</user>
    <text>yep, performance is not the be-all and end-all — I just thought I could bring my effort to the attention of the community just in case someone knows better than me :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1006">
    <ts>2018-11-21T12:49:36.634800</ts>
    <user>Carlyn</user>
    <text>Can anyone in this channel comment on the design of the class system? Maybe &lt;@Lynna&gt; or &lt;@Eileen&gt;? I’m trying to understand the behavior I’ve just reported in &lt;https://github.com/racket/racket/issues/2395&gt;. (I’m willing to fix it myself, but I don’t know what the fix is—it could be a documentation change or an implementation change.)</text>
  </message>
  <message conversation_id="1006">
    <ts>2018-11-21T12:50:38.636000</ts>
    <user>Lynna</user>
    <text>I expect that it will have to be a documentation improvement, but I haven’t looked closely – and won’t be able to look closely until later today</text>
  </message>
  <message conversation_id="1006">
    <ts>2018-11-21T12:50:50.636200</ts>
    <user>Carlyn</user>
    <text>Okay, no worries.</text>
  </message>
  <message conversation_id="1006">
    <ts>2018-11-21T12:51:27.636700</ts>
    <user>Carlyn</user>
    <text>I’ll operate under the assumption I’ll have to work around the behavior, then. :)</text>
  </message>
  <message conversation_id="1007">
    <ts>2018-11-21T13:54:35.637000</ts>
    <user>Tracee</user>
    <text>Is there any way to `time` a require?</text>
  </message>
  <message conversation_id="1007">
    <ts>2018-11-21T13:55:50.637200</ts>
    <user>Monserrate</user>
    <text>&lt;@Tracee&gt; use `dynamic-require`</text>
  </message>
  <message conversation_id="1008">
    <ts>2018-11-22T09:10:52.640400</ts>
    <user>Andreas</user>
    <text>I can implement an FFI interface to a C function and I am doing so for a small hot function (called millions of times) and calling the function from Racket into C is not much faster than calling the Racket implementation. Are there are contracts added in a call created with `ffi-obj` (or using an ffi definer)? What's my best bet in understanding exactly how this call happens?</text>
  </message>
  <message conversation_id="1007">
    <ts>2018-11-22T09:54:14.640900</ts>
    <user>Monserrate</user>
    <text>There are no contracts but there is marshalling code</text>
  </message>
  <message conversation_id="1007">
    <ts>2018-11-22T09:54:58.642200</ts>
    <user>Monserrate</user>
    <text>Your best bet might be to read the libffi documentation or the paper about the ffi implementation by Barzilay, mentioned in the docs</text>
  </message>
  <message conversation_id="1007">
    <ts>2018-11-22T10:15:29.645400</ts>
    <user>Eugena</user>
    <text>&lt;@Lynna&gt; What is the (new?) right way to add a primitive to Racket? It seems that cstartup.inc is no longer checked in, so the schminc.h comments are a little out of date. I've updated `EXPECTED_PRIM_COUNT` and set `USE_COMPILED_STARTUP` to 0. I also increased the version number in schvers.h. Then `make` succeeds but `make cs` fails with the following error:
[....]/racket/bin/racketcs -G [....]/racketcs/racket/src/build -N raco -l- raco setup -D
attempt to reference undefined variable hash-&amp;gt;linklet-bundle</text>
  </message>
  <message conversation_id="1007">
    <ts>2018-11-22T10:25:21.645600</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; thanks.</text>
  </message>
  <message conversation_id="1008">
    <ts>2018-11-22T10:26:00.646500</ts>
    <user>Andreas</user>
    <text>The function takes an int and return an int. in racket land they are fixnums. What kind of marshling is done?</text>
  </message>
  <message conversation_id="1007">
    <ts>2018-11-22T10:34:23.646800</ts>
    <user>Monserrate</user>
    <text>Just masking I think</text>
  </message>
  <message conversation_id="1008">
    <ts>2018-11-22T14:17:15.647500</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; Interesting, I will have to dig deeper... because it feels like something else is going on.</text>
  </message>
  <message conversation_id="1008">
    <ts>2018-11-22T14:18:09.649200</ts>
    <user>Monserrate</user>
    <text>Most likely it's the code generated to make the C to Racket call</text>
  </message>
  <message conversation_id="1008">
    <ts>2018-11-22T14:18:43.649600</ts>
    <user>Andreas</user>
    <text>Is that described in the paper you mentioned above? By Eli?</text>
  </message>
  <message conversation_id="1008">
    <ts>2018-11-22T14:20:50.649900</ts>
    <user>Monserrate</user>
    <text>Not really</text>
  </message>
  <message conversation_id="1007">
    <ts>2018-11-22T16:46:03.650300</ts>
    <user>Andreas</user>
    <text>Need to read the source implementation then... :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1009">
    <ts>2018-11-22T17:24:28.650400</ts>
    <user>Lynna</user>
    <text>To add a primitive to RacketCS, to you need to add to a suitable file in “src/cs/primitive”.
But `hash-&amp;gt;linklet-bundle` isn’t the primitive you’re trying to add… Something else has gone wrong, probably related to the fact that I just moved that function to the expander.</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:39:50.652000</ts>
    <user>Leonard</user>
    <text>Hi! do you guys know why the `next` here can be accumulated?  I thought every time the `count` is being called, the let struct will rebind `next` to `0`, but it don’t seems like this.</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:40:45.652800</ts>
    <user>Tracee</user>
    <text>&lt;@Leonard&gt; This is a "let over lambda", observe that it's not `(define (count) ...` but rather `(define count ...)`</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:47:43.654200</ts>
    <user>Leonard</user>
    <text>Yes I see that. What I don’t understand is that why this form will keep the value of `next` using `let`. It’s a bit hard to describe…</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:50:28.655700</ts>
    <user>Tracee</user>
    <text>&lt;@Leonard&gt; the value is associated with the lambda and it gets to mutate it each time... maybe it's easier to explain in another language</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:52:25.656300</ts>
    <user>Tracee</user>
    <text>Do you happen to know C++?</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:53:45.656900</ts>
    <user>Leonard</user>
    <text>Sorry, no. =(</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:54:01.657100</ts>
    <user>Tracee</user>
    <text>What lang are you familiar with?</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:55:50.658900</ts>
    <user>Leonard</user>
    <text>Java; I just checked googled ‘let over lambda’, is that because racket will keep the ‘closures’, so that when evaluating a lambda expression it will reference the previous environment?</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:56:24.659400</ts>
    <user>Tracee</user>
    <text>Right. I'm not sure if the new Java has lexical closures so I can't give an example.</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:56:51.660300</ts>
    <user>Tracee</user>
    <text>But yes, whatever is used inside the `lambda`, if it's not a parameter, it will be "copied" into the lambda's variable space, so to speak.</text>
  </message>
  <message conversation_id="1010">
    <ts>2018-11-22T17:57:36.661000</ts>
    <user>Leonard</user>
    <text>Thanks! You are really giving me generous support! :smiley:</text>
  </message>
  <message conversation_id="1011">
    <ts>2018-11-22T18:45:28.661200</ts>
    <user>Marnie</user>
    <text>java does have lexical closures, yes</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-22T19:54:27.661900</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; really I recommend reading the libffi docs and the paper together</text>
  </message>
  <message conversation_id="1011">
    <ts>2018-11-22T23:31:08.662000</ts>
    <user>Louanne</user>
    <text>but Java’s lexical closures are degenerate in the sense that they’re essentially flat closures, and variables captured inside have to be `final` so that they can be compiled into classes. (As many of you all know)</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T03:01:53.664000</ts>
    <user>Andreas</user>
    <text>Does anybody here have any thoughts on creating a racket lang that compiles straight into a gcc plugin/assembler/llvm ir for performance? This would be a subset of racket optimized for performance. How far could one go until hitting hard translation problems?</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T03:04:20.665500</ts>
    <user>Tracee</user>
    <text>&lt;@Andreas&gt; I've considered it. The GC is definitely getting in my way atm :neutral_face:, even in incremental mode.
Maybe compile to C++ as a backend or something for a first iteration.
Unfortunately build times can be pretty high since racket has a long startup time.</text>
  </message>
  <message conversation_id="1013">
    <ts>2018-11-23T03:26:06.666400</ts>
    <user>Tracee</user>
    <text>If we can get incremental builds going using ninja or something it could be nice, especially if we allow all forms of metaprogramming (hello enums with automatic conversion to strings)</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T04:25:58.666900</ts>
    <user>Andreas</user>
    <text>&lt;@Tracee&gt; don't care so much about build times. runtime is king in my world.</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T04:27:28.668400</ts>
    <user>Andreas</user>
    <text>I had a popcount implemented in Racket which statistical profiling showed to be taking 12% of my runtime. x86_64 and other archs can do it in a single instruction. A ffi call away and I lowered that to less that 0.2%. Quite surprised that there's not yet a function doing this in Racket.</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T05:21:30.669400</ts>
    <user>Franklin</user>
    <text>&lt;@Andreas&gt; Apropos popcount:  &lt;https://docs.racket-lang.org/gmp/index.html#%28def._%28%28lib._gmp%2Fmain..rkt%29._mpz_popcount%29%29&gt;</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T05:44:38.670900</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; true, I noticed that but I have fixnums?, that expects mpz? and I don't want to constantly allocate an mpz for the calculation. I was expecting something like fxpopcount for example. I will create a simple package for this highly optimized functions.</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T05:45:12.671700</ts>
    <user>Andreas</user>
    <text>I never distributed a package online with C code. When I do so, is there a way to get the C code compiled on the target machine so I can use `-march=native`?</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T05:45:37.672200</ts>
    <user>Andreas</user>
    <text>i.e. compile the C code when the user does `raco pkg install ...`?</text>
  </message>
  <message conversation_id="1014">
    <ts>2018-11-23T09:34:26.672300</ts>
    <user>Ilda</user>
    <text>I'm pretty late to the game here, but it seems all the other benchmarks run multiple parallel processes per server in order to handle the requests, whereas your example only uses one process (thereby one os thread) to handle the load.</text>
  </message>
  <message conversation_id="1014">
    <ts>2018-11-23T09:36:32.672500</ts>
    <user>Ilda</user>
    <text>Oh wait, nvm, I see there are two sets of benchmarks: one multiprocess and the other single process, but the Racket benchmark seems to be grouped with the multiprocess ones.</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T09:43:51.673600</ts>
    <user>Franklin</user>
    <text>&lt;@Andreas&gt;  How does it compare to &lt;https://github.com/racket/racket/blob/master/racket/collects/data/private/count-bits-in-fixnum.rkt&gt;</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T09:49:09.674600</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; woot? How did you find that gem and how come it's not provided by racket? Curious to do some benchmarking... will come back to you on this.</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T09:52:09.677400</ts>
    <user>Franklin</user>
    <text>It’s used in data/bit-vector which I wrote. I can’t remember whether I am responsible for the pop count code though. There were a discussion on the mailing list at some point. </text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T09:59:26.677900</ts>
    <user>Franklin</user>
    <text>I think it was Ian Johnson: &lt;https://gist.github.com/deeglaze/4154642&gt;
</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T10:03:46.683300</ts>
    <user>Franklin</user>
    <text>Note that the original implementation of bit-vectors used fxvector and the current one uses bytes. I remember there were to change at some point to use 32 bit fixnums also at 64 bit machines. So if the current fxpopcount only handles 32 bit fixnums, look at an older version. </text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T10:17:07.683600</ts>
    <user>Andreas</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T10:17:56.684700</ts>
    <user>Andreas</user>
    <text>So the C version is about 2% faster, which is quite surprising given that in C it's a single cpu instruction. But, of course, the call to C might also introduce some cruft.</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T11:58:16.685800</ts>
    <user>Franklin</user>
    <text>! That’s better than I thought. </text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T23:08:21.686300</ts>
    <user>Louanne</user>
    <text>&lt;@Andreas&gt; I’d be surprised if nobody looked at an LLVM backend for racket tbh</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-23T23:08:25.686500</ts>
    <user>Louanne</user>
    <text>but you all would know better than I</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-24T07:15:02.687100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; you might be interested in &lt;https://github.com/rjnw/sham&gt;</text>
  </message>
  <message conversation_id="1015">
    <ts>2018-11-24T09:37:27.688100</ts>
    <user>Ola</user>
    <text>LLVM is usually considered a bad fit if your language is not close to C/C++</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-24T12:49:11.689200</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; &lt;@Lynna&gt; Is there a way to get C objects in a shared library to use the Racket GC?</text>
  </message>
  <message conversation_id="1016">
    <ts>2018-11-24T12:52:58.689300</ts>
    <user>Lynna</user>
    <text>Use the Racket CS in what way? Register roots that the GC will traverse and update?</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-24T13:14:46.689500</ts>
    <user>Andreas</user>
    <text>So, I was thinking about getting a project going whereby a `#lang` implementing a small subset of racket compiles down to C, and exports all the defined function using the ffi so that they are provided to those requiring modules written in such lang. I would of course need a GC in such a C translation so I was wondering if I can hijack the Racket GC to use in the translated code. In the end this compiled C code will always run under a Racket process, therefore there's already a GC running.</text>
  </message>
  <message conversation_id="1012">
    <ts>2018-11-24T13:26:53.689800</ts>
    <user>Lynna</user>
    <text>For the traditional Racket implementation, yes: The GC API is generally exported by Racket. For example, there’s `racket_malloc`, and there are macros like `MZ_GC_DECL_REG` to temporarily register roots (such as references in stack-allocated memory). For Racket-on-Chez, not so much.</text>
  </message>
  <message conversation_id="1017">
    <ts>2018-11-24T14:28:00.692300</ts>
    <user>Lela</user>
    <text>Is there a nice way to modify a module, reload it in the repl and test some functions in the repl? I have this weird and inconvenient thing to execute so far:
```
(dynamic-rerequire "utils.rkt")
(require "utils.rkt")
(dynamic-rerequire "tokenizer.rkt")
(require "tokenizer.rkt")
(dynamic-rerequire "parser.rkt")
(require "parser.rkt")
(dynamic-rerequire "interpreter.rkt")
(require "interpreter.rkt")
```

each time I modify a module somewhere. It would be nice if the modules where reloaded automatically so that we only have the latest version of the code loaded in the repl</text>
  </message>
  <message conversation_id="1017">
    <ts>2018-11-24T14:28:09.692600</ts>
    <user>Lela</user>
    <text>Is it possible to do it somehow?</text>
  </message>
  <message conversation_id="1017">
    <ts>2018-11-24T14:39:44.693500</ts>
    <user>Lela</user>
    <text>Well, apparently,
```
(require racket/rerequire)
(require racket/enter)
(enter! "some_module.rkt")
```
does the job!</text>
  </message>
  <message conversation_id="1017">
    <ts>2018-11-24T14:51:39.693800</ts>
    <user>Tracee</user>
    <text>&lt;@Lela&gt; I wonder if the module `reloadable` works in the REPL</text>
  </message>
  <message conversation_id="1017">
    <ts>2018-11-24T14:53:40.694900</ts>
    <user>Lela</user>
    <text>&lt;@Tracee&gt; Well, so far, by typing `(enter! "module.rkt")` it reloads the code that's enough for me!</text>
  </message>
  <message conversation_id="1017">
    <ts>2018-11-24T14:54:18.695300</ts>
    <user>Tracee</user>
    <text>&lt;@Lela&gt; Ok, reloadable reloads it automatically when the file is saved.</text>
  </message>
  <message conversation_id="1018">
    <ts>2018-11-24T15:17:29.695500</ts>
    <user>Andreas</user>
    <text>That's a shame since if the future is Racket-on-Chez, I would like to plan for that.</text>
  </message>
  <message conversation_id="1018">
    <ts>2018-11-24T15:18:17.695700</ts>
    <user>Andreas</user>
    <text>Is the Chez GC a precise GC as well? I assume it's a completely different implementation of standard Racket.</text>
  </message>
  <message conversation_id="1018">
    <ts>2018-11-24T20:12:03.695900</ts>
    <user>Lynna</user>
    <text>Yes, Chez Scheme’s GC is precise. It’s more tightly bound to Scheme object representations than Racket’s GC. You can call Chez Scheme functions from C &lt;https://cisco.github.io/ChezScheme/csug9.5/foreign.html#./foreign:h8&gt; and depending on what you want to do, that may work fine. Roughly, a GC will not happen while you’re in C code. Racket’s GC can fire on any allocation, while Chez Scheme’s GC fires through an asynchronous callback only while running Scheme code.</text>
  </message>
  <message conversation_id="1019">
    <ts>2018-11-25T20:17:48.697400</ts>
    <user>Marinda</user>
    <text>&lt;@Carlyn&gt; IIRC you once posted an under-publicized PLT* environment variable (I think it was) that allows `racket` to hold multiple versions of `zo` files simultaneously. If yes, what was it? If no, I misremembered.</text>
  </message>
  <message conversation_id="1019">
    <ts>2018-11-25T20:26:59.698500</ts>
    <user>Carlyn</user>
    <text>&lt;@Marinda&gt; Yes, it’s `PLTCOMPILEDROOTS`. Specifically, I have `PLTCOMPILEDROOTS=compiled/@(version):`.</text>
  </message>
  <message conversation_id="1019">
    <ts>2018-11-26T15:20:42.698900</ts>
    <user>Marinda</user>
    <text>Thank you. Is the intended effect of this setting to put `zo` files into subdirectories labeled by version number? (If so, that’s not what’s happening on my machine, so I’ve misconfigured something)</text>
  </message>
  <message conversation_id="1019">
    <ts>2018-11-26T15:22:47.699100</ts>
    <user>Carlyn</user>
    <text>Yes, if you have this set, it should put new `zo` files in `compiled/&amp;lt;version&amp;gt;/compiled/` directories. It won’t affect existing `zo`s, though.</text>
  </message>
  <message conversation_id="1020">
    <ts>2018-11-27T16:47:28.703600</ts>
    <user>Claud</user>
    <text>I would guess this doesn't affect DrRacket on Mac when launched through the GUI for the same reasons as the `PATH` issues. Is that right?</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T07:23:58.704000</ts>
    <user>Tasia</user>
    <text>Is there an alternative to Dr.Racket?</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T07:40:25.704100</ts>
    <user>Doyle</user>
    <text>I’ve successfully worked on Racket in VSCode, Vim, and Emacs – but Dr. Racket is a really great out-of-the-box experience and I come back to it often. I don’t think there’s another integrated development environment that would be nearly as useful.</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T07:54:41.704900</ts>
    <user>Tami</user>
    <text>Always, in what manner do you mean? An alternative to the IDE?</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T08:47:55.705200</ts>
    <user>Tasia</user>
    <text>&lt;@Tami&gt; yes</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T08:48:26.705300</ts>
    <user>Tasia</user>
    <text>Is there something that allows me to use racket without Drracket? Like I want to be able to write tests and get results and debug through</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T08:48:33.705500</ts>
    <user>Tasia</user>
    <text>Mostly because I'm a beginner</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T08:48:41.705700</ts>
    <user>Tasia</user>
    <text>Dr Racket seems to be very slow for me.</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T08:53:10.705900</ts>
    <user>Doyle</user>
    <text>There’s a section in the Racket documentation that should help:

&lt;https://docs.racket-lang.org/guide/other-editors.html&gt;

Since you’re a beginner you might want to be sure you’ve read the Racket guide as well:

&lt;https://docs.racket-lang.org/guide/intro.html&gt;</text>
  </message>
  <message conversation_id="1022">
    <ts>2018-11-28T09:30:41.707300</ts>
    <user>Tami</user>
    <text>I guess you can write racket code in any editor you like and use the command line tools. I think some people use emacs (or a version of it).</text>
  </message>
  <message conversation_id="1022">
    <ts>2018-11-28T09:32:01.708100</ts>
    <user>Tami</user>
    <text>&lt;https://github.com/greghendershott/racket-mode&gt; is a possibility.</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T12:08:21.708300</ts>
    <user>Carlyn</user>
    <text>&lt;@Tasia&gt; Greg Hendershott’s racket-mode for emacs is excellent, and it includes a lot of the Racket-specific functionality in DrRacket.</text>
  </message>
  <message conversation_id="1021">
    <ts>2018-11-28T12:09:16.708500</ts>
    <user>Carlyn</user>
    <text>Yes, most likely. It works if you launch it from the command-line using the `drracket` executable, which is what I do.</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:21:10.710100</ts>
    <user>Toney</user>
    <text>Hi! I’ve got a hello.rkt file containing a simple `#lang web-server/insta` servlet. How do I get it to run using `plt-web-server`? Just running it within the same directory gives me a (Powered by Racket) 404 on &lt;http://localhost:8080/servlets/hello.rkt&gt;</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:22:07.711500</ts>
    <user>Toney</user>
    <text>I’ve tried putting the file in `./servlets/hello.rkt` and in `./htdocs/hello.rkt` as well. Couldn’t find the right place in the docs. The default configuration table contains `(servlet-root ".")` which suggests that the working dir should be fine.</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:22:44.712200</ts>
    <user>Franklin</user>
    <text>Does it work if you open it in DrRacket and click run? (The server is started and the page is opened in the browser automatically)</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:23:00.712600</ts>
    <user>Franklin</user>
    <text>If it works there, we can get to work in the terminal too.</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:23:10.712800</ts>
    <user>Toney</user>
    <text>yeah works</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:23:47.713400</ts>
    <user>Franklin</user>
    <text>Okay. Can you put hello.rkt on &lt;http://pasterack.org|pasterack.org&gt; ?</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:25:19.713600</ts>
    <user>Toney</user>
    <text>&lt;http://pasterack.org/pastes/80786&gt;</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:26:21.714000</ts>
    <user>Franklin</user>
    <text>Note the url when you run it in DrRacket:</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:26:23.714200</ts>
    <user>Franklin</user>
    <text>&lt;http://localhost:59456/servlets/standalone.rkt&gt;</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:27:41.714600</ts>
    <user>Franklin</user>
    <text>If you do the following in the terminal:</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:28:27.715500</ts>
    <user>Franklin</user>
    <text>Short:  `racket hello.rkt` then the browser shows "Hello World"</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:37:05.715900</ts>
    <user>Toney</user>
    <text>Yeah it opens &lt;http://localhost:61585/servlets/standalone.rkt&gt; and that works as well</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:38:24.716600</ts>
    <user>Toney</user>
    <text>but I’d like to use `plt-web-server` instead since it offers the `GET /conf/refresh-servlets` call for a shorter edit-save-refresh feedback loop</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:45:45.717400</ts>
    <user>Toney</user>
    <text>Or would you recommend other ways to get such a quick feedback loop for developing servlets?</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:52:24.718700</ts>
    <user>Franklin</user>
    <text>&lt;@Toney&gt;  Then you need to pick another solution than `web-server/insta`. See section 1.2 Simple Single Servlet Servers</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T13:59:45.720900</ts>
    <user>Toney</user>
    <text>Ok thanks &lt;@Franklin&gt;. Trying the first example under 1.2.1 now, and I can again run it through DrRacket or `racket` but not through `plt-web-server`. But the advantage now is that it doesn’t pick random ports, so I can do a full restart of the `racket` process each time I made a change. Still has some delay but it probably works better for me than the `GET /conf/refresh-servlets` I initially sought for.</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T14:04:21.722700</ts>
    <user>Franklin</user>
    <text>Great to hear it works. I don't know what's the optimal setup is. Anyone wants to share how they have things setup?</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T14:19:51.724000</ts>
    <user>Toney</user>
    <text>Seems like the full restart thing rather might be a conscious design choice, reading &lt;https://docs.racket-lang.org/drracket/Keyboard_Shortcuts.html#%28part._.Sending_.Program_.Fragments_to_the_.R.E.P.L%29&gt;</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T14:22:11.724800</ts>
    <user>Franklin</user>
    <text>Yes. That's to avoid dependencies on spurious state.</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T14:22:23.725200</ts>
    <user>Franklin</user>
    <text>However when using a web-server, there are options.</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T14:22:32.725400</ts>
    <user>Franklin</user>
    <text>&lt;https://github.com/tonyg/racket-reloadable/tree/master&gt;</text>
  </message>
  <message conversation_id="1023">
    <ts>2018-11-28T14:24:16.726200</ts>
    <user>Toney</user>
    <text>Thanks will try that</text>
  </message>
  <message conversation_id="1024">
    <ts>2018-11-29T04:23:06.726800</ts>
    <user>Tasia</user>
    <text>Okay thanks!</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T15:28:15.727200</ts>
    <user>Andreas</user>
    <text>Is racket cs not being compiled anymore in the snapshots?</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T15:28:41.727900</ts>
    <user>Andreas</user>
    <text>&lt;@Bertha&gt;’s `travis-racket` points to utah mirror for the cs snapshots but there are none there.</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T15:31:15.728200</ts>
    <user>Andreas</user>
    <text>Just found the logs... it seems the build failed &lt;https://www.cs.utah.edu/plt/snapshots/current/log/%7B4%7D%20Minimal%20Racket%20CS%20%7C%20%7B3%7D%20Linux%20%7C%2064-bit%20x86_64;%20built%20on%20Ubuntu%2016.04%20(Xenial)%20%7C%20%7B1%7D%20Installer&gt;</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T15:31:51.728600</ts>
    <user>Andreas</user>
    <text>actually build was ok, installing `racket-lib` was not. Maybe some oversight/</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T15:31:52.728800</ts>
    <user>Andreas</user>
    <text>?</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T15:34:11.729300</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; I think &lt;@Lynna&gt; has been changing the snapshot code a bunch so probably that's why</text>
  </message>
  <message conversation_id="1026">
    <ts>2018-11-29T16:42:18.729500</ts>
    <user>Claud</user>
    <text>&lt;@Toney&gt; FYI, my understanding is that `plt-web-server` is not recommended for new projects (see e.g. &lt;https://groups.google.com/d/msg/racket-users/acJkAa0wvM8/ji2MxMvvTiMJ&gt;). Probably the documentation should make that more clear.</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T16:59:31.731200</ts>
    <user>Lynna</user>
    <text>&lt;@Andreas&gt; &lt;@Monserrate&gt; Yes, there have been various problems with the build and making the CS build both reliable and fast enough. It’s slow work. The latest problem meant that a build could work one day, but leave things in a bad state for the next day. Hopefully, that’s now fixed.</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T17:27:53.731500</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; thanks</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T17:31:13.733300</ts>
    <user>Andreas</user>
    <text>I thought I saw sometime ago a pr to add Cs to nightly build, but can't find it in Travis Ci file. Is there a reason why that hasn't been done? </text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-29T19:12:10.734300</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; I think Gustavo created that PR, but I would have to check if he thinks it's ready</text>
  </message>
  <message conversation_id="1026">
    <ts>2018-11-30T01:04:50.000100</ts>
    <user>Toney</user>
    <text>Thanks for the link, useful thread in general.</text>
  </message>
  <message conversation_id="1025">
    <ts>2018-11-30T02:29:02.000500</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; that would be great to have i think.</text>
  </message>
  <message conversation_id="1027">
    <ts>2018-11-30T17:34:30.003400</ts>
    <user>Doyle</user>
    <text>Is there some shorthand or concise notation for requiring multiple sibling submodules? For example, I can require `(require json net/url)` pretty neatly, but I end up doing a lot of repetition with submodules like

```
(require web-server/templates
         (submod ".." replies)
         (submod ".." layouts)
         (submod ".." pages)
         (submod ".." logging))
```
It’s possible that I misunderstand how to do this idiomatically, however. Any suggestions or clarification appreciated.</text>
  </message>
  <message conversation_id="1027">
    <ts>2018-11-30T18:16:38.005000</ts>
    <user>Alesha</user>
    <text>&lt;@Doyle&gt; does `(submod “..” replies layouts pages logging)` work?</text>
  </message>
  <message conversation_id="1027">
    <ts>2018-11-30T18:26:33.005900</ts>
    <user>Doyle</user>
    <text>&lt;@Alesha&gt; no, because that means that I am trying to drill down, as if `logging` was a child of `pages`:
`  module name: #&amp;lt;resolved-module-path:(submod 'main[2565] replies layouts pages logging)&amp;gt;`</text>
  </message>
  <message conversation_id="1027">
    <ts>2018-11-30T18:28:10.006900</ts>
    <user>Alesha</user>
    <text>Oh I see it’s really individual submod path elements rather than submod names</text>
  </message>
  <message conversation_id="1027">
    <ts>2018-11-30T18:31:26.007800</ts>
    <user>Doyle</user>
    <text>yeah so `".." replies` means “go up a level and then down into replies”, or at least that’s how I think about it
what I’d like to say is “go up a level and get then go down into foo, bar, and buzz”</text>
  </message>
  <message conversation_id="1027">
    <ts>2018-11-30T20:53:40.009300</ts>
    <user>Bertha</user>
    <text>&lt;@Doyle&gt; Does `multi-in` work with submodules? If not that seems like a good feature request.</text>
  </message>
  <message conversation_id="1027">
    <ts>2018-12-01T05:11:24.010900</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; &lt;@Lynna&gt; i know it might sound like too much work but I would like to start porting parts of my work to racket-cs so it's future proof. I wonder if we could have a dev-cs where breaking changes to cs are done and each time dev-cs builds, then it's merged into master. Just a thought.</text>
  </message>
  <message conversation_id="1027">
    <ts>2018-12-01T06:38:01.012800</ts>
    <user>Doyle</user>
    <text>&lt;@Bertha&gt; After looking over the documentation and trying a few different things, it seems to me that `multi-in` prefers to work with files. I’ll make a feature request and maybe if I’ve missed something someone can point that out there.</text>
  </message>
  <message conversation_id="1028">
    <ts>2018-12-01T06:56:40.014600</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; I'm unsure what you're suggesting. Is the issue that racketcs has too many breaking changes? Or that the build breaks?</text>
  </message>
  <message conversation_id="1028">
    <ts>2018-12-01T07:06:32.016700</ts>
    <user>Andreas</user>
    <text>That the build  breaks. It would be great to have a version of racketcs that builds and we can test the latest version. I can of course have a script to track that on my side if necessary, but if comes from upstream all the better. </text>
  </message>
  <message conversation_id="1028">
    <ts>2018-12-01T09:45:34.019800</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; the build from source works consistently for me. If the issue is that the snapshot build breaks, then I don't think that's something that can easily be avoided except by Matthew continuing to work on it, which he's doing. In particular, the thing that breaks is making the snapshot itself, so there's not a way to only build a working version</text>
  </message>
  <message conversation_id="1028">
    <ts>2018-12-01T10:43:38.020700</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; oh... I had understood that it was the build that was breaking, not the snapshot creation process. OK, that's easy to solve then. I can build it myself on a regular basis. Thanks.</text>
  </message>
  <message conversation_id="1027">
    <ts>2018-12-01T12:54:25.027700</ts>
    <user>Claud</user>
    <text>When we build custom contract combinators, we use `blame-add-context` to report potential violations in terms of a specific part of the contract. That "context" tracking doesn't seem to be precisely the same thing as tracking the positive and negative parties. For example, `(list/c string? number?)` doesn't deal with parties, but does use context. The papers I've read about contracts and blame (far from comprehensively) seem to mostly talk about getting the positive and negative parties right. Are there papers that talk about the sort of "context" I have in mind? Am I right to think of this as part of blame?
(I ask because I think this ability to drill down into deeply nested structures is the part of the contract system we've found most useful for Digital Ricoeur.)</text>
  </message>
  <message conversation_id="1028">
    <ts>2018-12-01T18:20:39.029900</ts>
    <user>Monserrate</user>
    <text>I think this isn't discussed in any paper I know of</text>
  </message>
  <message conversation_id="1028">
    <ts>2018-12-03T14:46:59.031800</ts>
    <user>Andreas</user>
    <text>is there a way to build normal racket and racketcs in the same installation - i.e. in one go? So that I end up with racket/bin/racket and racket/bin/racketcs? Like maybe by doing `make cs &amp;amp;&amp;amp; make`...</text>
  </message>
  <message conversation_id="1028">
    <ts>2018-12-03T14:49:14.032100</ts>
    <user>Monserrate</user>
    <text>&lt;@Andreas&gt; I just do `make` and then `make cs`</text>
  </message>
  <message conversation_id="1028">
    <ts>2018-12-03T14:49:58.032900</ts>
    <user>Andreas</user>
    <text>perfect, because I want to run a new round of coverity analysis but covering the cs part as well. Will give that a try.</text>
  </message>
  <message conversation_id="1029">
    <ts>2018-12-04T11:10:28.034800</ts>
    <user>Monserrate</user>
    <text>&lt;@Eileen&gt; (or other people more expert in redex than I) what's the best way to generate a fresh variable in a judgment-form while preserving the ability to use the judgement in `#:satisfies`? Using `variable-not-in` requires an unquote which `#:satisfies` complains about.</text>
  </message>
  <message conversation_id="1029">
    <ts>2018-12-04T11:11:24.035200</ts>
    <user>Eileen</user>
    <text>There isn't a good way</text>
  </message>
  <message conversation_id="1029">
    <ts>2018-12-04T11:11:50.036100</ts>
    <user>Eileen</user>
    <text>Mostly because that kind of property will probably make it hard for the generator to be effective</text>
  </message>
  <message conversation_id="1029">
    <ts>2018-12-04T11:17:04.037200</ts>
    <user>Monserrate</user>
    <text>Do you have a suggestion for a redex-friendlier way of doing things? We basically have a `unpack` form for existential types. Is there a way to check that a variable _is_ fresh, if we specify the variable?</text>
  </message>
  <message conversation_id="1030">
    <ts>2018-12-04T11:42:13.039800</ts>
    <user>Erika</user>
    <text>I have some test cases defined on a `test` submodule:

```
#lang racket
;; ...
(module+ test
  (provide (all-defined-out))
  (define test-case-1 ___))
```

How can I interact with these test cases in the Interactions window in DrRacket? I think I should `require` the `test` submodule, but I couldn’t find the appropriate `require` form…</text>
  </message>
  <message conversation_id="1030">
    <ts>2018-12-04T11:44:31.040300</ts>
    <user>Monserrate</user>
    <text>`(require (submod "nameofmodule.rkt" test))`</text>
  </message>
  <message conversation_id="1030">
    <ts>2018-12-04T11:46:16.040700</ts>
    <user>Erika</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T02:47:52.044000</ts>
    <user>Andreas</user>
    <text>All, I was surprised but not necessarily shocked to test a suspicion I had and verify it was true. This is the fact that immutable structs and not necessarily immutable in the sense of being constants. For example:
```
#lang racket

(struct vs (h)
  #:transparent)

(define v (vs (make-hash)))
(printf "~a~n" v)

(hash-set! (vs-h v) 1 1)
(printf "~a~n" v)
```
So `vs` is immutable but that's because you cannot change what's in the fields but that doesn't mean you cannot change the structure as a value. I also haven't seen this detail being mentioned anywhere - I would have expected something like this to be mentioned in the guide. Maybe I am the only one who finds this counterintuitive for lack of a better word. What do others think?</text>
  </message>
  <message conversation_id="1032">
    <ts>2018-12-05T02:59:55.044900</ts>
    <user>Georgiann</user>
    <text>I would find the opposite suprising -- if using an explicitly mutable hash as a field in a struct suddenly made the hash immutable</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T03:04:39.046800</ts>
    <user>Tami</user>
    <text>&lt;@Andreas&gt; I would agree with &lt;@Georgiann&gt; why would the hash table that was constructed as mutable become immutable because it was put in a struct? If you want the hash table immutable then create it that way.</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T03:11:18.048200</ts>
    <user>Andreas</user>
    <text>Nice to see others have different opinions on this. My intuition goes exactly the opposite way. If I mark my struct as immutable, I expected that to be propagated to its values. But I guess if the current case is obvious to everybody else, fine with me. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T03:15:05.048900</ts>
    <user>Tami</user>
    <text>I just see it as flexible, create your data the way you want it. :grin:</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T05:07:06.050300</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; was your intuition influenced by how `const` works in c/c++?</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T05:10:08.052200</ts>
    <user>Andreas</user>
    <text>&lt;@Marnie&gt; not sure... I was not totally surprised about it but was not what my intuition was telling me it should be. My brain was telling me that if I have two immutable transparent structures writing the same, they will always write the same - but turns out not to be true.</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T05:16:00.055500</ts>
    <user>Marnie</user>
    <text>&lt;@Andreas&gt; I suspect that's related to the way `read` and `write` are presented in lisps as the de facto serialization and deserialization mechanism</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T05:18:04.058200</ts>
    <user>Marnie</user>
    <text>I don't think it's a good idea to mix together serialization and the text representation of things used by the repl / logs / debugging tools</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T05:21:39.059500</ts>
    <user>Thaddeus</user>
    <text>For me, I see a struct as having immutable references to mutable objects. So in this case, you cannot make the struct point to another hash, but you can access the hash and modify it.</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T06:16:47.060500</ts>
    <user>Tami</user>
    <text>&lt;@Andreas&gt; I may be misunderstanding but you can just make the hash in the struct immutable and that solves the problem doesn't it?</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T08:13:20.061300</ts>
    <user>Andreas</user>
    <text>&lt;@Tami&gt; that's correct. I don't find this behaviour a problem by the way. But I found it counter-intuitive. However, as I just learned, I seem to be alone on this one. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T08:13:52.061700</ts>
    <user>Andreas</user>
    <text>&lt;@Thaddeus&gt; Might be the best mental model for this situation.</text>
  </message>
  <message conversation_id="1031">
    <ts>2018-12-05T08:15:08.062900</ts>
    <user>Tami</user>
    <text>I guess coming from an object oriented Java background where nothing is immutable by default has set my way of thinking.</text>
  </message>
  <message conversation_id="1033">
    <ts>2018-12-05T12:15:47.063500</ts>
    <user>Hilda</user>
    <text>Why is the convention to use hyphens rather than underscores?</text>
  </message>
  <message conversation_id="1033">
    <ts>2018-12-05T12:17:43.064700</ts>
    <user>Monserrate</user>
    <text>&lt;@Hilda&gt; it's a very long-standing Lisp tradition, mostly because hyphens are the usual thing you write in English, and they work in Racket (and other Lisps) whereas they don't work in C or JavaScript or ...</text>
  </message>
  <message conversation_id="1033">
    <ts>2018-12-05T12:19:02.065400</ts>
    <user>Hilda</user>
    <text>you can’t do multi-word adjectives, though (see what I did there :wink:)</text>
  </message>
  <message conversation_id="1033">
    <ts>2018-12-05T12:23:20.066200</ts>
    <user>Monserrate</user>
    <text>I'm not going to speculate about what you can do in english, since it's often more than you'd expect :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1033">
    <ts>2018-12-05T12:28:37.066400</ts>
    <user>Hilda</user>
    <text>lol</text>
  </message>
  <message conversation_id="1033">
    <ts>2018-12-05T12:28:56.067000</ts>
    <user>Hilda</user>
    <text>yeah I’m an essayist and editor so it kind of bugs me :eyes:</text>
  </message>
  <message conversation_id="1033">
    <ts>2018-12-05T12:29:13.067400</ts>
    <user>Franklin</user>
    <text>Also you can write - without pressing &amp;lt;shift&amp;gt;</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T13:35:56.068300</ts>
    <user>Catrice</user>
    <text>Question about Scribble + picts: is there a pict constructor/combinator/utility function/whatever that would allow me to specify the alt-text of the image that gets rendered , when the surrounding scribble document gets rendered to HTML?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T13:44:56.069400</ts>
    <user>Monserrate</user>
    <text>&lt;@Catrice&gt; I don't think there's a pict function for that, and I do see the issue since you'd really want it in something produced by say `examples` where you can't adjust the HTML directly</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T13:46:33.070300</ts>
    <user>Omar</user>
    <text>If the target is HTML, can’t you just use `elem` that pretends to be `&amp;lt;img&amp;gt;`?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T13:50:44.072400</ts>
    <user>Catrice</user>
    <text>The scenario I have is writing documentation for a website, and I want to say "Click the `[blue "Help" button]` to ...", where `[blue "Help" button]` is a pict function I wrote that generates a blue rounded rectangle with the text "Help" in it.  But ironically, while this image is useful for sighted users, it's counterproductively inaccessible to vision-handicapped users.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T13:51:32.073300</ts>
    <user>Catrice</user>
    <text>So I have the flexibility to revise that function and wrap it somehow with scribble-related magic to produce the alt-text "blue Help button"</text>
  </message>
  <message conversation_id="1035">
    <ts>2018-12-05T14:17:31.073700</ts>
    <user>Monserrate</user>
    <text>ok, then I think you can do it with scribble properties</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:21:43.075200</ts>
    <user>Catrice</user>
    <text>Could you give me a code-hint for that?  Assume that I'm starting with a `(define (button text color) (filled-rounded-rectangle ... color ... text ...))`, and that I'm happy to pass around extra arguments as needed.  What scribble thing do I wrap that in?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:25:52.075500</ts>
    <user>Monserrate</user>
    <text>&lt;@Catrice&gt; I'd start here: &lt;http://docs.racket-lang.org/scribble/core.html?q=scribble#%28mod-path._scribble%2Fhtml-properties%29&gt;</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:27:47.076500</ts>
    <user>Catrice</user>
    <text>Those apply to individual elements, as &lt;@Omar&gt; mentioned, right?  I can't apply that directly to the result of a pict?  (I guess I'm asking, how does a pict get turned into pre-content in scribble, so I know what I need to wrap?)</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:32:08.076700</ts>
    <user>Monserrate</user>
    <text>see the one about convertible</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:36:01.077900</ts>
    <user>Catrice</user>
    <text>Ok.  Am tracing through html-render.rkt now, I've found the render-convertible-as struct, and now I see the `(define/private (render-as-convertible ...)` method, which hard-codes a result of `(img ([src ...] [alt "image"] [width ...] [height ...])`</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:36:32.078500</ts>
    <user>Catrice</user>
    <text>the hardcoded alt-tag there indicates to me that I'm kinda stuck...</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:39:13.079000</ts>
    <user>Monserrate</user>
    <text>does it not use the `render-convertible-as` property?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:42:29.080600</ts>
    <user>Catrice</user>
    <text>That's what render-as-convertible does: it recognizes png-bytes and png@2x-bytes, `convert`s the pict to a png as a bytestring, calls `install-file` on it, and then hardcodes the `"image"` alt-text</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:42:51.081200</ts>
    <user>Catrice</user>
    <text>Since `render-as-convertible` is `define/private`, though, I can't override it to change the filename or the alt-text string</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:43:34.082000</ts>
    <user>Monserrate</user>
    <text>I think we're miscommunicating. There's a style property struct called `render-convertible-as` which suggests that it allows you to control exactly what you want</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:44:00.082600</ts>
    <user>Monserrate</user>
    <text>Presumably the implementation looks for that somewhere, and calls the relevant functions.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:46:34.083400</ts>
    <user>Catrice</user>
    <text>yes, exactly.  The options are `'png-bytes` or `'svg-bytes`.  Those are handled by &lt;https://github.com/racket/scribble/blob/master/scribble-lib/scribble/html-render.rkt#L1444-L1482&gt;</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T14:47:36.084400</ts>
    <user>Catrice</user>
    <text>the last four lines of that are the hardcoded `img` tag that results from `convert`ing the pict to a `png`</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T17:18:45.086000</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; I think racket-mode should ignore output on stderror</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T17:28:27.088200</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; IIRC Emacs shell processes get stdout and stderr mixed together, so can't "unsplit" and filter there.
But the racket-mode back-end could parameterize `current-error-port` to `open-output-nowhere` in the first place, I guess.
But.
Do you mean ignore as in don't show it to the user? And if so, why?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T17:29:18.089100</ts>
    <user>Monserrate</user>
    <text>I mean, it shouldn't get confused by spurious output when that output is on stderr</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T17:31:27.090000</ts>
    <user>Bertha</user>
    <text>I agree that racket-mode shouldn't get confused :smile: but I'm not sure what problem you mean?
Is there some specific example?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T17:38:55.090900</ts>
    <user>Monserrate</user>
    <text>Put a eprintf inside some racket/base code. Then use C-c x f</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T17:39:03.091200</ts>
    <user>Monserrate</user>
    <text>It will complain</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T17:39:16.091700</ts>
    <user>Monserrate</user>
    <text>Because it'll see the extra output</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T17:45:13.092500</ts>
    <user>Bertha</user>
    <text>```
#lang racket/base
(eprintf "Hi\n")
```
I do `C-c x f` and get the "Open require path: " prompt. I type things. It works.
I don't follow.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T19:36:35.093300</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; sorry I missed this. I mean add that to racket/base.rkt</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T19:36:52.093900</ts>
    <user>Monserrate</user>
    <text>So that it prints during the code that racket-mode runs</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:24:10.098200</ts>
    <user>Bertha</user>
    <text>Ah. Interesting. So I _can_ reproduce _that_.
Note it's limited to how that `C-c C-x C-f` aka `racket-open-require-path` command works.
It actually runs this racket file -- &lt;https://github.com/greghendershott/racket-mode/blob/master/racket/find-module-path-completions.rkt&gt; -- and pipes text back and forth.
To that file I tried parameterizing `error-output-port` to `open-output-nowhere` -- but `racket/base.rkt` is loaded and does the `eprintf` before that parameterization has taken effect.
So I'll have to do this -- filter stderr -- on the Emacs side.
That didn't use to be possible or at least easy AFAIK but I"ll check again.
&lt;@Monserrate&gt; ^</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:25:12.098600</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; where did you put the parameterization?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:25:47.099000</ts>
    <user>Bertha</user>
    <text>Inside the `main` submodule around its entire contents.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:26:15.099800</ts>
    <user>Monserrate</user>
    <text>ok and you just run that with `racket find-module-path-completions.rkt`?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:26:23.100000</ts>
    <user>Bertha</user>
    <text>Yes.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:26:57.101000</ts>
    <user>Monserrate</user>
    <text>So here's an answer which you might or might not like</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:27:20.101800</ts>
    <user>Bertha</user>
    <text>This predates the newer "command server" where things go via TCP, is one reason it does this.
Also I want the typing speed to be fast, and I'm not sure even the new way would be as fast as direct text pipe.
But I could try.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:27:28.102100</ts>
    <user>Monserrate</user>
    <text>write that file in '#%kernel around a submodule that does the work that's written in `racket/base`</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:27:42.102700</ts>
    <user>Bertha</user>
    <text>Oh.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:28:27.103600</ts>
    <user>Bertha</user>
    <text>That seems straightforward.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:28:35.103800</ts>
    <user>Monserrate</user>
    <text>so `(module completions '#%kernel (module go racket/base ...) (module* main '#%kernel (dynamic-require '(submod "completions.rkt" go) #f)`</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:28:46.104100</ts>
    <user>Monserrate</user>
    <text>and then put the parameterize around the `dynamic-require`</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:28:58.104400</ts>
    <user>Monserrate</user>
    <text>except that you can't use parameterize in '#%kernel</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:29:21.104900</ts>
    <user>Monserrate</user>
    <text>so you could either mutate the parameter and feel dirty, or use the expansion of `parameterize` and feel dirty</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:29:58.105600</ts>
    <user>Monserrate</user>
    <text>also `open-output-nowhere` isn't actually in '#%kernel</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:30:14.106100</ts>
    <user>Monserrate</user>
    <text>also that doesn't help when I add eprintf to the runtime system</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:30:49.106800</ts>
    <user>Bertha</user>
    <text>I was going to ask, what if you or Matthew does an `eprintf` in `#%kernel`, but at least it would help with racket/base.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:31:11.107400</ts>
    <user>Bertha</user>
    <text>Well, maybe I should look again how to tackle it on the Emacs side.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:31:30.108000</ts>
    <user>Monserrate</user>
    <text>certainly it would help my current issue which is just the use of `racket/match`</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:31:44.108500</ts>
    <user>Monserrate</user>
    <text>because the printouts are in the contract system</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:31:48.108700</ts>
    <user>Bertha</user>
    <text>Plain vanilla process buffers mix them, but there's probably a lower-level way I didn't know about when I last looked at this N years ago.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:33:07.108900</ts>
    <user>Monserrate</user>
    <text>&lt;http://www.gnu.org/software/emacs/manual/html_node/elisp/Output-from-Processes.html&gt; suggests that there's a way</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:48:58.110800</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; &lt;https://github.com/greghendershott/racket-mode/issues/345&gt;
I pushed &lt;https://github.com/greghendershott/racket-mode/commit/05a439bf716e001422739deda4a2f62b7658d0c7&gt; which fixes it for me.
Waiting for all-green from Travis CI, then will merge to master, then MELPA will update in low-number-of-hours.
If you like you could hack your `.el` file locally in the meantime (it's a simple diff).</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:49:53.111200</ts>
    <user>Monserrate</user>
    <text>glad that was easy</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:51:34.111700</ts>
    <user>Bertha</user>
    <text>Me, too.
Now I'd better go delete `(eprintf "hi it me")` from my `racket/base.rkt` before I forget. :smile:</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:55:04.112900</ts>
    <user>Bertha</user>
    <text>Oh carp. `make-process` was added in Emacs 25.1 but I'm still supporting back to 24.3.
Welp.
&lt;@Monserrate&gt; I might not be able to resolve this tonight but hopefully that patch could tide you over locally for now?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:55:23.113100</ts>
    <user>Monserrate</user>
    <text>sure, certainly</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:55:27.113400</ts>
    <user>Monserrate</user>
    <text>thanks for looking into it</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-05T21:56:24.114500</ts>
    <user>Bertha</user>
    <text>You're welcome, but I feel like it's a small thing in return for making it easier for you to keep making Racket even more awesome..</text>
  </message>
  <message conversation_id="1036">
    <ts>2018-12-06T09:11:05.120200</ts>
    <user>Vinnie</user>
    <text>I installed the latest Elementary OS, a Linux distro, installed the latest version 6 then 7 of Racket and they both have this problem: when you exit DrRacket, the warning box to save your work only shows the X and you can't save or even exit the DrRacket. </text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:16:29.120900</ts>
    <user>Monserrate</user>
    <text>&lt;@Vinnie&gt; can you report at bug at &lt;http://github.com/racket/racket/issues|github.com/racket/racket/issues&gt; ?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:20:07.124200</ts>
    <user>Vinnie</user>
    <text>I don't have a github account and don't want to open one just for this. It works on Lubuntu so I'll stick with that.</text>
  </message>
  <message conversation_id="1036">
    <ts>2018-12-06T09:40:13.130300</ts>
    <user>Doyle</user>
    <text>I’m familiar with HtDP and SICP. I’m trying to teach basic programming in a week to beginners. My plan is to combine the theories of education promoted by developmental psychologists like Jean Piaget with my personal experience in hackerspaces. Essentially, I want to take a day or two to walk through the basics and then help the students solve their own problems. I would like to ask if anyone else here has done anything similar and for advice on a good, short jumpstart into programming (ideally with Racket :slightly_smiling_face: ). This isn’t one of those commercial “bootcamps”, just a community project aimed at helping creative people gain technical skills they otherwise think is beyond their capacity. Advice appreciated, I’m just some guy not a professor or anything.

Even advice on key selections from HtDP or something like that would be great, I just won’t have the time to methodically work through an entire textbook. I’m tempted to just take from the introduction but I don’t have the personal history of teaching the material to know whether or not that is wise, and thought maybe someone here would have already done the work of finding a good “condensed” place to begin.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:45:50.132400</ts>
    <user>Bertha</user>
    <text>&lt;@Monserrate&gt; To follow up from last night &lt;https://github.com/greghendershott/racket-mode/commit/8180205ef83893e2a99e40168194b6d01b8e3281&gt; should be on MELPA soon-ish.
Also if you're patching locally note this is a different commit than what I shared last night.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:46:19.132700</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; what do I run to upgrade from melpa?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:48:43.133600</ts>
    <user>Bertha</user>
    <text>It's probably simplest and most reliable to do `M-x package-delete` and enter `racket-mode`, then `M-x package-install`, `racket-mode`.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:49:18.134200</ts>
    <user>Monserrate</user>
    <text>is there an upgrade command if i'm feeling lucky?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:49:38.134500</ts>
    <user>Bertha</user>
    <text>Maybe as step 0 do `M-x package-initialize` if that's not already in your Emacs init file.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:50:27.135600</ts>
    <user>Bertha</user>
    <text>The lucky/official way is `M-x list-packages`, then use its UI buffer to mark packages to upgrade, then say upgrade them.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:51:21.135900</ts>
    <user>Bertha</user>
    <text>I'm not sure that's really easier ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:51:56.136300</ts>
    <user>Bertha</user>
    <text>At least for a package like racket-mode, on which no other packages depend</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:57:22.136400</ts>
    <user>Millard</user>
    <text>&lt;@Doyle&gt; Not Racket-oriented, but there are many good resources at &lt;http://code.org|code.org&gt;, both for kids and adults.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T09:58:51.136700</ts>
    <user>Millard</user>
    <text>If the audience is adults with no technical expertise, maybe some of the high-school-level resources would be applicable: &lt;https://code.org/educate/curriculum/high-school&gt;</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T10:00:20.136900</ts>
    <user>Millard</user>
    <text>And honestly, even for adults, some of those "create your own game in 1 hour" tutorials can be quite fun :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T10:03:26.137100</ts>
    <user>Doyle</user>
    <text>thanks for the advice!</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T10:15:26.137300</ts>
    <user>Millard</user>
    <text>Hope it helps! I'm only learning Racket myself, but have been programming for many many years. Lately I'm also interested in teaching programming, but for my two kids. I've used Scratch so far (&lt;http://scratch.mit.edu|scratch.mit.edu&gt; - also interesting but more kid-oriented), I've been thinking of maybe using Realm of Racket.</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T10:15:57.137500</ts>
    <user>Millard</user>
    <text>Question: what is "SICP" (from your question)?</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T10:19:06.137800</ts>
    <user>Doyle</user>
    <text>The *S* tructure and *I* nterpretation of *C* omputer *P* rograms
&lt;https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs&gt;</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T10:20:18.138300</ts>
    <user>Millard</user>
    <text>Ah! Of course :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1034">
    <ts>2018-12-06T10:29:43.138600</ts>
    <user>Millard</user>
    <text>Thanks.</text>
  </message>
  <message conversation_id="1037">
    <ts>2018-12-06T11:00:07.139700</ts>
    <user>Erika</user>
    <text>I just published a short article about the type of `call/cc` that may interest Racketeers: &lt;https://www.leafac.com/prose/understanding-the-type-of-call-cc/&gt;</text>
  </message>
  <message conversation_id="1037">
    <ts>2018-12-06T11:00:49.140100</ts>
    <user>Erika</user>
    <text>I’d love to hear what you have to say about it.</text>
  </message>
  <message conversation_id="1037">
    <ts>2018-12-06T11:12:04.140400</ts>
    <user>Omar</user>
    <text>This is very illustrative. I really like it</text>
  </message>
  <message conversation_id="1037">
    <ts>2018-12-06T11:17:21.140600</ts>
    <user>Erika</user>
    <text>Thank you.</text>
  </message>
  <message conversation_id="1038">
    <ts>2018-12-06T12:52:50.140800</ts>
    <user>Georgiann</user>
    <text>I like it too; didn't expect it to approach the topic from a type-system perspective but the types did help in the end</text>
  </message>
  <message conversation_id="1038">
    <ts>2018-12-06T13:10:37.141200</ts>
    <user>Georgiann</user>
    <text>Hi

I'm obviously missing something while trying to write a minimal, gracefully restarting web server.

Given this code: &lt;http://pasterack.org/pastes/85563&gt;

What I expect:

* `curl localhost:8000` prints "begin", waits for ten seconds and then prints "end"
* Pressing `Ctrl-C` in the window running the server waits until the request has been processed completely and then shuts down the server

What actually happens:

* `curl localhost:8000` waits for ten seconds and then prints "begin" and "end"
* Pressing `Ctrl-C` in the window running the server immediately terminates the process

Does anybody here have an idea what I might be doing wrong?</text>
  </message>
  <message conversation_id="1037">
    <ts>2018-12-06T13:11:11.141300</ts>
    <user>Erika</user>
    <text>Thanks for reading.</text>
  </message>
  <message conversation_id="1038">
    <ts>2018-12-06T13:13:14.142000</ts>
    <user>Monserrate</user>
    <text>&lt;@Georgiann&gt; my guess is that the exn:break is delivered to another thread than the one you're catching it in</text>
  </message>
  <message conversation_id="1038">
    <ts>2018-12-06T13:14:17.142500</ts>
    <user>Monserrate</user>
    <text>and that `out` is not connected to the network directly, but is a buffer</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T14:34:23.142600</ts>
    <user>Alesha</user>
    <text>I enjoyed reading your article, my question is why the constraint that the type of `k`'s argument must be the same as the return type of `call/cc`'s function argument and `call/cc`'s return type? Racket's `call/cc` doesn't appear to have that restriction.

I understand that the motivating examples intentionally ensure that `k`'s argument type is the same but there's no a prior reason for that. Shouldn't it be possible to supply any arbitrary value we want to the `k` even if they cause an exception to be raised if used incorrectly in the surrounding continuation?

Won't it make more sense to say `call/cc : ((α → β) → γ) → (∪ α γ)` where `(∪ α γ)` denotes the union of the type variables `α` `γ`?

I'm not familiar with type theory so don't know the correct way to express the concept of typing a union of types.</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T15:02:06.142800</ts>
    <user>Omar</user>
    <text>&lt;@Alesha&gt; as I understand, it’s because traditional type systems (like Hindley–Milner) don’t support untagged union. And when we talk about types, we tend to assume that we are using this kind of type systems.</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T15:07:32.143000</ts>
    <user>Omar</user>
    <text>Untagged union is really complicated. Most programming languages that have it need it because they were not originally designed with type system in mind. Most programming languages that are designed with type system in mind usually don’t need untagged union.</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T15:11:36.143200</ts>
    <user>Alesha</user>
    <text>I see that googling tells me there's the corresponding concept of tagged union or otherwise called disjoint union or sum type. I suppose if we're using a type system that supports tagged union then the notation would be `call/cc : ((α → β) → γ) →  α + γ`

The question then becomes why do we assume traditional Hindley-Milner type system? Is it safe to assume that &lt;@Erika&gt; is assuming HM?</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T15:11:44.143400</ts>
    <user>Erika</user>
    <text>&lt;@Alesha&gt; Your observation is correct and it’s closer to the type that `call/cc` has in Typed Racket. This is part of the complexity I’m trying to sweep under the rug when I say “In Typed Racket the type of call/cc is a bit more elaborate, but for reasons that are beyond the scope of this article.” This topic is already pretty complicated as it is.

&lt;@Omar&gt;’s interpretation is correct, I wrote this with a Hindley–Milner type system in mind. These assumptions should be made more clear and I’ll revise the article accordingly.</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T15:11:56.143600</ts>
    <user>Alesha</user>
    <text>I guess if the traditional type system can't cope with tagged unions then why not use a better one? :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T15:15:06.143800</ts>
    <user>Alesha</user>
    <text>&lt;@Erika&gt; ok I see, I thought the topic in your article was straightforward, it didn't seem difficult or complicated and was comprehensible except for that observation</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T15:17:19.144400</ts>
    <user>Erika</user>
    <text>Thanks for reading and for the comments.</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T15:26:48.145600</ts>
    <user>Georgiann</user>
    <text>FWIW I found this thread in the mailing list: &lt;https://groups.google.com/forum/#!searchin/racket-users/streaming$20response%7Csort:date/racket-users/fc0mRI-empE/28Q5gUopBgAJ&gt;

The important bit being:

&amp;gt; The reason why responses have the lambda rather than a byte string is
specifically for streaming like you want. Make sure you specify the
correct response size in the headers.

And indeed, specifying the "Content-Length" headers make the "begin" show up before the "end".

That's at least a step in the right direction</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T16:56:19.145700</ts>
    <user>Erika</user>
    <text>I published a revision with: (1) an appendix addressing this concern &lt;@Alesha&gt; raised; (2) an alternative argument for `k`’s return type; and (3) an acknowledgements section thanking you for your contributions.</text>
  </message>
  <message conversation_id="1039">
    <ts>2018-12-06T17:03:14.145900</ts>
    <user>Alesha</user>
    <text>I like your new rewrite, it's more satisfying in that it answers my immediate questions and points me to where I can explore more</text>
  </message>
  <message conversation_id="1040">
    <ts>2018-12-06T17:15:05.149800</ts>
    <user>Carlyn</user>
    <text>&lt;@Lynna&gt; I have a weak hash table containing ephemeron values, and I’ve noticed that it’s possible for a GC to collect the value inside the ephemeron after the key is passed to `hash-ref` but before `ephemeron-value` is applied, as illustrated by this program:
```
#lang racket

(define h (make-weak-hasheq))

(define (f)
  (define k (gensym))
  (hash-set! h k (make-ephemeron k (gensym)))
  (ephemeron-value (begin0 (hash-ref h k)
                           (collect-garbage)
                           (collect-garbage)
                           (collect-garbage))))

(f) ; =&amp;gt; #f
```
In my situation, I’m not using this table as a cache, so I really do need the value. I can insert a hack so that `k` is referenced later in the program, but this seems fragile… I don’t know which uses of `k` the optimizer might optimize away, so I don’t know that I can rely on that working. Is there a proper way to ensure that `hash-ref` + `ephemeron-value` is somehow atomic with respect to the reachability of `k`?</text>
  </message>
  <message conversation_id="1040">
    <ts>2018-12-06T17:18:26.150400</ts>
    <user>Lynna</user>
    <text>Why not
```
(define (f)
  (define k (gensym))
  (let ([v (gensym)])
    (hash-set! h k (make-ephemeron k v))
    v))
```
?</text>
  </message>
  <message conversation_id="1040">
    <ts>2018-12-06T17:19:11.151300</ts>
    <user>Carlyn</user>
    <text>In my real program, the part of the program writing the value is not the same part reading the value.</text>
  </message>
  <message conversation_id="1040">
    <ts>2018-12-06T17:19:39.152200</ts>
    <user>Monserrate</user>
    <text>&lt;@Dia&gt; I have a student who created the "r-linq" package on &lt;http://pkgs.racket-lang.org|pkgs.racket-lang.org&gt; but then deleted it, and it wasn't deleted but now is in a weird state where it has no author but still exists.</text>
  </message>
  <message conversation_id="1040">
    <ts>2018-12-06T17:20:08.152900</ts>
    <user>Monserrate</user>
    <text>Also, it seems like the "Create new package" interface no longer adds `.git` which causes things to break.</text>
  </message>
  <message conversation_id="1040">
    <ts>2018-12-06T17:26:26.153000</ts>
    <user>Lynna</user>
    <text>That’s interesting problem.
The `ffi/unsafe` library provides `void/reference-sink` to reliably retain a reference, but it’s in `ffi/unsafe` because I’ve never seen a need outside of unsafe code.
Passing `k` as the second argument to `ephemeron-value` fundamentally also has to work, and maybe that should be a designated pattern.</text>
  </message>
  <message conversation_id="1040">
    <ts>2018-12-06T17:29:29.153200</ts>
    <user>Lynna</user>
    <text>And now that you point it out, probably `wrap-key` in “racket/private/custom-hash.rkt” should use that pattern. Or maybe that’s already the code that you’re looking at.</text>
  </message>
  <message conversation_id="1040">
    <ts>2018-12-06T17:30:00.153400</ts>
    <user>Carlyn</user>
    <text>That was not the code I was looking at, as it happens, but that sounds right. :) I will use that pattern, then.</text>
  </message>
  <message conversation_id="1041">
    <ts>2018-12-07T03:38:19.157100</ts>
    <user>Lashaunda</user>
    <text>Hello Guys! This is my first time here and I have a quite simple question I guess:) I created a color scheme for DrRacket. When installing via raco or package-manager-gui I dont get any errors logged.
The only problem is, that it isnt showing up in the _colors tab_ in _settings_. I already asked on r/racket an my university forum. So far no one could help me. I also compared my code to working color schemes and I dont see any difference.
Maybe you find my mistake:)
Thank you in advance!</text>
  </message>
  <message conversation_id="1040">
    <ts>2018-12-07T04:38:28.157900</ts>
    <user>Erika</user>
    <text>Thank you for reading.</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T06:40:48.159200</ts>
    <user>Lashell</user>
    <text>I’ve not done a colour scheme but it might be worth looking at an existing one
&lt;https://github.com/takikawa/drracket-solarized&gt;</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T06:46:25.161100</ts>
    <user>Lashaunda</user>
    <text>&lt;@Lashell&gt; Thanks a lot but this doesn't fix my problem! I don't understand why mine isn't working.</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T06:52:55.163600</ts>
    <user>Lashell</user>
    <text>&lt;@Lashaunda&gt; sorry, I’ve not done a colour scheme - try the Racket mailing list- I think there are more people on it. American Racketeers should be waking up soon :grinning:</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T07:30:10.164900</ts>
    <user>Lashaunda</user>
    <text>&lt;@Lashell&gt; I’ll probably wait for the americans :smile: and if they can’t help me I will try the mailing list! Thanks for the hint :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T07:33:38.167200</ts>
    <user>Lashell</user>
    <text>&lt;@Lashaunda&gt; are you in europe? I’m in uk - nice to meet another European racketeer! Good luck with the colour scheme. </text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T07:37:52.168700</ts>
    <user>Lashaunda</user>
    <text>&lt;@Lashell&gt; I am in Germany!
Racket is the language we use in one of my courses at university!:+1::skin-tone-2:</text>
  </message>
  <message conversation_id="1043">
    <ts>2018-12-07T08:08:11.169800</ts>
    <user>Andreas</user>
    <text>Germany here as well!</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T08:08:45.170300</ts>
    <user>Andreas</user>
    <text>&lt;@Lashaunda&gt; Don't miss out on &lt;https://www.meetup.com/After-Work-Racket/&gt; near Frankfurt by &lt;@Lanette&gt;</text>
  </message>
  <message conversation_id="1043">
    <ts>2018-12-07T08:13:53.170800</ts>
    <user>Millard</user>
    <text>Switzerland here :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1043">
    <ts>2018-12-07T08:15:10.170900</ts>
    <user>Lynna</user>
    <text>Looking at this more, I think it’s better to add a third argument to `ephemeron-value` to play the retaining role. A separate argument is less subtle, and it adapts better to situations that involve non-`eq?`-based mappings or finalization.</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T09:23:12.172500</ts>
    <user>Alesha</user>
    <text>&lt;@Lashaunda&gt; Americans are now awake on the East coast but I'm afraid I can't help with your problem. Did you already restart your DrRacket after installing your theme. I do remember needing to restart mine every time I install a theme before it would show up in the listing.</text>
  </message>
  <message conversation_id="1044">
    <ts>2018-12-07T09:29:36.176500</ts>
    <user>Lashell</user>
    <text>While us europeans are awake, I just saw the a message from &lt;@Lanette&gt; on Twitter: &amp;gt;I'm organizing a @racketlang 
&amp;gt;conference. Saturday, March 23, 2019, 
&amp;gt;in Berlin, Germany:
&amp;gt;
&amp;gt; &lt;http://racketfest.com|racketfest.com&gt;
&amp;gt;
&amp;gt;Spread the word!
(Twitter handle ‘@alamajesse’)</text>
  </message>
  <message conversation_id="1044">
    <ts>2018-12-07T09:33:52.178500</ts>
    <user>Lashell</user>
    <text>...and Eminent Professor Shriram Krishnamurthi &lt;@Roseann&gt; will be speaking! </text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T10:47:39.178900</ts>
    <user>Monserrate</user>
    <text>&lt;@Dia&gt; ping</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T11:07:14.179900</ts>
    <user>Aimee</user>
    <text>&lt;@Lashaunda&gt; Change `base02` to `(define base02 #(230  96  62 0.5))` seems to work. Alpha needs to be in the range `[0,1]`.</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T11:16:44.180100</ts>
    <user>Alesha</user>
    <text>I have a question if you'd like to answer or point me to where I can find out. I was wondering why not say the type of the continuation function `k` is `(α → )` is it because `k` is represented as a function so it must have an output even if it's not actually produced since execution never returns to  `k`? I do understand why it makes sense to choose that `β` means anything in `(α → β)` to ensure that `k` will work in all possible contexts.</text>
  </message>
  <message conversation_id="1042">
    <ts>2018-12-07T11:16:52.180300</ts>
    <user>Alesha</user>
    <text>&lt;@Erika&gt;</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T11:40:44.180700</ts>
    <user>Dia</user>
    <text>I removed it</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T11:41:02.180900</ts>
    <user>Monserrate</user>
    <text>do you know what happened?</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T11:41:14.181100</ts>
    <user>Erika</user>
    <text>Yes, you can say `call/cc : ((α → Nothing) → β) → (α ∪ β)`. It’s one step closer to the actual type of `call/cc` in Typed Racket.</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T11:42:14.181300</ts>
    <user>Erika</user>
    <text>And one step further away from the type you’d find on Wikipedia and other sources that assume a Hindley–Milner type system.</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T11:43:49.181600</ts>
    <user>Alesha</user>
    <text>cool, that's fascinating, thank you</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T11:59:54.182800</ts>
    <user>Andreas</user>
    <text>Isn't `read-accept-lang` the parameter to use if I want `read-syntax` to parse the `#lang` line? I have it set to `#true` and yet I still get: `read-syntax: #lang not enabled`</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T12:01:56.183500</ts>
    <user>Carlyn</user>
    <text>&lt;@Andreas&gt; You also have to set `read-accept-reader`, but consider just using `with-module-reading-parameterization` instead, which will set everything correctly. &lt;http://docs.racket-lang.org/syntax/module-helpers.html#%28def._%28%28lib._syntax%2Fmodread..rkt%29._with-module-reading-parameterization%29%29&gt;</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T12:05:37.184200</ts>
    <user>Andreas</user>
    <text>&lt;@Carlyn&gt; thanks that's it. frustrating that I knew I had done this before but I forgot that it was two parameters to set instead of one.</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T12:05:55.184800</ts>
    <user>Andreas</user>
    <text>Had no idea `with-module-read...` existed. Always learning. Thanks.</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T12:06:13.185100</ts>
    <user>Carlyn</user>
    <text>The `read-accept-lang` docs do mention `read-accept-reader`, fwiw.</text>
  </message>
  <message conversation_id="1046">
    <ts>2018-12-07T12:25:52.186000</ts>
    <user>Lashaunda</user>
    <text>&lt;@Alesha&gt; yes multiple Times! Also testet it in different devices and different OS:)</text>
  </message>
  <message conversation_id="1046">
    <ts>2018-12-07T12:26:37.187100</ts>
    <user>Lashaunda</user>
    <text>&lt;@Aimee&gt; I will try:+1::skin-tone-2: thank you very much!</text>
  </message>
  <message conversation_id="1047">
    <ts>2018-12-07T13:12:35.187200</ts>
    <user>Monserrate</user>
    <text>It doesn't look removed</text>
  </message>
  <message conversation_id="1045">
    <ts>2018-12-07T13:52:30.189200</ts>
    <user>Lashell</user>
    <text>Is there a way to launch DrRacket from DrRacket repl so you don’t need to keep restarting to test colourschemes?</text>
  </message>
  <message conversation_id="1047">
    <ts>2018-12-07T14:00:40.189500</ts>
    <user>Monserrate</user>
    <text>`(require drracket)` should do it</text>
  </message>
  <message conversation_id="1047">
    <ts>2018-12-07T14:08:44.191900</ts>
    <user>Lashell</user>
    <text>&lt;@Lashaunda&gt; &lt;@Alesha&gt; no need to restart use (require drracket) from interactions frame! Thanks &lt;@Monserrate&gt; :grinning:</text>
  </message>
  <message conversation_id="1047">
    <ts>2018-12-07T14:10:32.192700</ts>
    <user>Alesha</user>
    <text>I would rather DrRacket automatically refresh and make themes available without needing a restart but &lt;@Monserrate&gt;'s suggestion works as a workaround</text>
  </message>
  <message conversation_id="1047">
    <ts>2018-12-07T14:11:29.193500</ts>
    <user>Lashell</user>
    <text>That’s a good idea. I wonder if there is a way to do it?</text>
  </message>
  <message conversation_id="1047">
    <ts>2018-12-07T14:24:10.197600</ts>
    <user>Lashell</user>
    <text>Quickscript by &lt;@Janet&gt; doesn’t automatically refresh - you have to tell it to recompile - but it comes close. &lt;https://docs.racket-lang.org/quickscript/index.html&gt; 
It can access DrRacket’s frame but I don’t know if you can use it for colour schemes? </text>
  </message>
  <message conversation_id="1047">
    <ts>2018-12-07T14:42:24.198700</ts>
    <user>Lashaunda</user>
    <text>&lt;@Lashell&gt; Thanks that saves time!</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:43:51.200200</ts>
    <user>Lashaunda</user>
    <text>&lt;@Aimee&gt; well I fixed the thing with the alpha value. It’s still not working.
I looked at 3 other working schemes and I still dont see any difference. Is there anything possible I could’ve done wrong while creating the pkg?</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:44:18.200500</ts>
    <user>Aimee</user>
    <text>this is what I did when trying your color scheme:</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:45:13.201400</ts>
    <user>Aimee</user>
    <text>1. Create a directory
2. Create an `info.rkt`, with your code and the fixed alpha value (`(define base02 #(230  96  62 0.5))`)
3. In that very directory, install the package via `raco pkg install`</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:45:18.201600</ts>
    <user>Aimee</user>
    <text>4. Restart DrRacket</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:45:43.202000</ts>
    <user>Aimee</user>
    <text>How did you setup the stuff?</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:47:22.203600</ts>
    <user>Lashaunda</user>
    <text>&lt;@Aimee&gt; and it did work?
I created a pkg with `raco pkg new &amp;lt;name&amp;gt;`
then I deleted the unnecessary files and copied my info.rkt into the folder.
Then I initialized git to push it to github. And I installed with `raco pkg install`</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:47:44.203900</ts>
    <user>Aimee</user>
    <text>it did work</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:48:02.204200</ts>
    <user>Aimee</user>
    <text>do you have multiple racket installed?</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:49:12.204600</ts>
    <user>Lashaunda</user>
    <text>No I don’t. Only the current version!</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:49:58.205300</ts>
    <user>Lashaunda</user>
    <text>I did work for me too! I installed it from my local directory and not via GitHub.</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:50:13.205600</ts>
    <user>Lashaunda</user>
    <text>Great! Now I only have to fix the github dir/</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:51:18.206500</ts>
    <user>Aimee</user>
    <text>It's working now? yay</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:51:21.206600</ts>
    <user>Lashaunda</user>
    <text>Thanks  a lot for your help guys! :clap:</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:51:44.207200</ts>
    <user>Lashaunda</user>
    <text>I try to fix the directory on github now:)</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:53:44.207900</ts>
    <user>Aimee</user>
    <text>I tried installing directly from your github repo just now and it worked</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:54:39.208500</ts>
    <user>Lashaunda</user>
    <text>ye I pushed it to master a few seconds ago! Thanks a lot for your help!</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:57:24.209500</ts>
    <user>Lashell</user>
    <text>&lt;@Lashaunda&gt; don't forget to add it to &lt;https://pkgs.racket-lang.org&gt; :smiley:</text>
  </message>
  <message conversation_id="1048">
    <ts>2018-12-07T14:58:40.210400</ts>
    <user>Lashaunda</user>
    <text>I already did that! But the installation via package download isnt working yet. dont know exactly why. maybe it needs time to be refreshed from the Github repo!</text>
  </message>
  <message conversation_id="1049">
    <ts>2018-12-07T22:28:19.211000</ts>
    <user>Shan</user>
    <text>If we have a sandbox evaluator for a teaching language, how do we get the number of tests passed and run from it?</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T10:22:21.212600</ts>
    <user>Andreas</user>
    <text>Is there any library out there to count words in a scribble doc? If possible with a per-section breakdown? If not, I will have a go at having a library out to do just that.</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T11:09:28.213400</ts>
    <user>Andreas</user>
    <text>OK, it turns out it's trivial to implement one so just did that. However, please still let me know if there's something mature out there.</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T11:14:04.214000</ts>
    <user>Andreas</user>
    <text>&lt;@Lanette&gt; the racketfest link i find in ddg is broken: &lt;https://www.eventbrite.com/e/racketfest-registration-52898981277&gt; What happened?</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T11:16:29.214400</ts>
    <user>Andreas</user>
    <text>Oh, ok wow,  no more eventbrite, we have a homepage now: &lt;https://racketfest.com/&gt;</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T12:21:34.214900</ts>
    <user>Andreas</user>
    <text>&lt;@Lanette&gt; is on fire!</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T12:30:24.215400</ts>
    <user>Andreas</user>
    <text>For those not following him on twitter:</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T12:30:43.215500</ts>
    <user>Andreas</user>
    <text>None</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T12:33:09.215800</ts>
    <user>Aimee</user>
    <text>I vaguely remembered there's something like &lt;https://docs.racket-lang.org/htdp/index.html?q=test-engine#(part._.Testing)&gt; but haven't tried that myself</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T12:38:27.216000</ts>
    <user>Aimee</user>
    <text>tracing from `build-engine` and `get-info`, I got to here &lt;https://github.com/racket/htdp/blob/master/htdp-lib/test-engine/test-engine.rkt&gt; and there &lt;https://github.com/racket/htdp/blob/master/htdp-lib/test-engine/test-info.scm&gt;
that's probably how test info is collected and what's reported from `get-info`.
`summarize-results` could be useful too
on the other hand, it's probably also possible to parse the output and extract the # of passed tests</text>
  </message>
  <message conversation_id="1050">
    <ts>2018-12-08T12:42:09.216400</ts>
    <user>Aimee</user>
    <text>what i've done was to have my own tests and ran them using the sandbox evaluator (just eval or `call-in-sandbox-context`)</text>
  </message>
  <message conversation_id="1051">
    <ts>2018-12-08T21:07:52.221000</ts>
    <user>Omar</user>
    <text>I have a PL question: does the applicative-order Y combinator really work?

As I understand, the distinction of the applicative-order and call-by-value is that the former can reduce redex inside lambdas (&lt;http://www.cs.cornell.edu/courses/cs6110/2014sp/Lectures/lec04.pdf&gt;).

Consider even the term (applicative-order) Y alone. The term seems to diverge in the applicative-order evaluation strategy:

```
(λ (f)
  ((λ (x) (f (λ (v) ((x x) v))))
   (λ (x) (f (λ (v) ((x x) v))))))
=&amp;gt; 
(λ (f)
  (f (λ (v) (((λ (x) (f (λ (v) ((x x) v)))) 
              (λ (x) (f (λ (v) ((x x) v))))) v))))
=&amp;gt; 
...
```

Do I misunderstand anything?</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-09T05:48:39.221600</ts>
    <user>Erika</user>
    <text>The lecture notes you sent are interesting. I always used the terms applicative order and call-by-value (and strict, for that matter) to mean the same thing. Maybe other people do too, and when they say applicative-order Y-combinator they really mean call-by-value Y-combinator?</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-09T05:57:50.221900</ts>
    <user>Erika</user>
    <text>Here’s my attempt of explaining what’s going on: applicative order is a *reduction* strategy, while call-by-value is an *evaluation* strategy. The difference being that *reduction* is nondeterministic and *evaluation* is deterministic. You’re correct that using the Y-combinator *may* diverge on applicative order, but it may also produce a value in some other nondeterministic branch. Generally, we’d ignore the branch that diverges. And the call-by-value *evaluation* strategy wouldn’t have the same problem because it’s restricted to not reduce inside λs.

Maybe that’s why people abuse the terminology and call applicative order what they should be calling call-by-value.</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-09T06:00:50.222200</ts>
    <user>Omar</user>
    <text>Thank you very much! This makes sense.</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-09T06:10:55.222400</ts>
    <user>Omar</user>
    <text>Wait a minute. The applicative order reduction needs to reduce the leftmost-innermost first. While the reduction in general is allowed to be non deterministic, the leftmost-innermost order forces the reduction to be deterministic, no?

I guess another interpretation of “nondeterministic” here means we can stop reduction at anytime, but given a term like `((Y (lambda (fact) ...)) 5)` where `...` is the usual implementation of the factorial function, we would want the term to evaluate to 120. Now we are in the situation where “we can stop at anytime” doesn’t help.</text>
  </message>
  <message conversation_id="1051">
    <ts>2018-12-09T09:18:38.223300</ts>
    <user>Ola</user>
    <text>what is the best way to typeset racket code in a general LaTeX document? the listings package doesn’t even support scheme, only a generic Lisp</text>
  </message>
  <message conversation_id="1051">
    <ts>2018-12-09T09:19:36.223800</ts>
    <user>Franklin</user>
    <text>I think somehow it is possible to use the LaTeX produced by Scribble.</text>
  </message>
  <message conversation_id="1053">
    <ts>2018-12-09T10:37:05.223900</ts>
    <user>Monserrate</user>
    <text>I've done a variety of things. Use Scribble, use Slatex, just use verbatim. </text>
  </message>
  <message conversation_id="1054">
    <ts>2018-12-09T15:04:39.225300</ts>
    <user>Millard</user>
    <text>Just out of curiosity, is anyone here participating in this year's Advent of Code (&lt;https://adventofcode.com/&gt;)? I'm using it to learn Racket (started some of the exercises in Elvish, but switched to Racket for Day 6)</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-09T20:35:42.225400</ts>
    <user>Marinda</user>
    <text>&lt;https://github.com/mbutterick/aoc-racket/tree/master/2018&gt;</text>
  </message>
  <message conversation_id="1054">
    <ts>2018-12-10T03:17:50.225600</ts>
    <user>Millard</user>
    <text>Awesome! Mine are at &lt;https://github.com/zzamboni/adventofcode/tree/master/2018&gt; (I'm running a bit behind, still on Day 7)</text>
  </message>
  <message conversation_id="1054">
    <ts>2018-12-10T03:18:58.225800</ts>
    <user>Millard</user>
    <text>BTW thanks for your writing - I've been reading through &lt;https://beautifulracket.com/&gt;, it's a great book.</text>
  </message>
  <message conversation_id="1055">
    <ts>2018-12-10T06:55:30.226100</ts>
    <user>Erika</user>
    <text>I don’t think we can stop anytime, but only when we have a term in normal form. At that point the nondeterminism kicks in and we can observe the difference between applicative order and call-by-value. For example, when we have `((Y (lambda (fact) ...)) 5)` we have to reduce, regardless of whether we are in applicative order or call-by-value. But when we have just the Y-combinator (`(λ (f) ___)`), it is a normal form, so we have a choice. Call-by-value would stop here, but applicative order has the option to reduce inside the λ, spin around the loop once, land on another term in normal form, and face another nondeterministic decision of whether to stop or not.</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-10T10:50:45.226600</ts>
    <user>Omar</user>
    <text>You can use Pygments in LaTeX, and Pygments supports Racket.</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-10T10:55:54.227800</ts>
    <user>Tami</user>
    <text>I got an Ada Lovelace splash screen on startup today, I thought Ada Lovelace day was in October. Anyone know why it was displayed today?</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-10T10:56:28.228100</ts>
    <user>Monserrate</user>
    <text>&lt;@Tami&gt; today's her birthday</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-10T10:56:48.228500</ts>
    <user>Tami</user>
    <text>Ah cool, should have checked for the obvious.</text>
  </message>
  <message conversation_id="1052">
    <ts>2018-12-10T10:57:55.229100</ts>
    <user>Tami</user>
    <text>&lt;@Monserrate&gt; I should Google first, ask silly question second :grin:</text>
  </message>
  <message conversation_id="1056">
    <ts>2018-12-10T11:27:28.229200</ts>
    <user>Rosette</user>
    <text>&lt;@Lanette&gt;, this is awesome. Thanks for putting it together. I thought you should know that the logo is pretty large and it took a while for the page to load because of it.</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:18:31.230800</ts>
    <user>Odis</user>
    <text>Does anyone know why I would get this error:
```
no module instance found: #&amp;lt;resolved-module-path:"/home/leif/racket/racket/collects/racket/private/list.rkt"&amp;gt; 0
  context...:
   namespace-&amp;gt;module-instance70
   copy-namespace-value
   temp250
   for-loop
   [repeats 1 more time]
   perform-require!78
   /home/leif/racket/racket/share/pkgs/compatibility-lib/mzscheme/private/old-procs.rkt:47:4: make-namespace
   .../racket/unit.rkt:998:20
   "/home/leif/racket/racket/share/pkgs/pict-lib/pict/code.rkt": [running body]
   temp37_0
   for-loop
   run-module-instance!125
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   do-dynamic-require5
   ...
```</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:18:44.231000</ts>
    <user>Odis</user>
    <text>Also, I have the following code: &lt;https://gist.github.com/LeifAndersen/2334bd0bd1cd91f5c34443a7bef2e3d5&gt;</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:19:02.231400</ts>
    <user>Odis</user>
    <text>When i run `racket paper.scrbl`. But _not_ when I run it in DrRacket?</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:19:44.232100</ts>
    <user>Odis</user>
    <text>What's more interesting is when I remove the `pict/code` line in `lang.rkt` (line 10), `racket paper.scrbl` runs fine.</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:20:40.233000</ts>
    <user>Odis</user>
    <text>This almost feels like a syntax-module system issue &lt;@Lynna&gt;, &lt;@Eugena&gt;, or &lt;@Gaynell&gt;</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:21:00.233300</ts>
    <user>Odis</user>
    <text>(I also get the same error when I run `raco make paper.scrbl`.</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:23:57.233800</ts>
    <user>Monserrate</user>
    <text>usually that means you `require`d something at compile time that isn't required by the residual program but is needed</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:35:07.234700</ts>
    <user>Aimee</user>
    <text>My post on the users' mailing list seemed to have been blocked by Google. It contains an external link to a screenshot. Anyway to get around that?</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:46:07.234900</ts>
    <user>Odis</user>
    <text>That's odd.</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:46:18.235200</ts>
    <user>Odis</user>
    <text>I mean, I required the `pict/code` library at read time.</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:46:34.235600</ts>
    <user>Odis</user>
    <text>But it doesn't show up in the expanded code.</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:46:40.236000</ts>
    <user>Odis</user>
    <text>(When expanded in DrRacket that is.)</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T17:51:33.236100</ts>
    <user>Marinda</user>
    <text>:metal:</text>
  </message>
  <message conversation_id="1058">
    <ts>2018-12-10T18:26:28.236400</ts>
    <user>Monserrate</user>
    <text>&lt;@Aimee&gt; I allowed it</text>
  </message>
  <message conversation_id="1058">
    <ts>2018-12-10T18:26:50.236600</ts>
    <user>Aimee</user>
    <text>Thank you!</text>
  </message>
  <message conversation_id="1058">
    <ts>2018-12-10T18:27:50.237100</ts>
    <user>Aimee</user>
    <text>(Sorry I just sent it without the link again a few seconds ago)</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T20:20:55.237600</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; It looks like this is an expandera bug, as it works as expected in Racket 6.12.</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T22:39:03.237700</ts>
    <user>Lynna</user>
    <text>I’m testing a repair</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-10T22:46:50.237900</ts>
    <user>Lynna</user>
    <text>In case anyone is interested: A `#lang`-triggered `dynamic-require` is correctly wrapped with a `parameterize` to change to a root namespace, if necessary. But the call to the `read-syntax` function is outside that `parameterize`, so there’s a mismatch between the namespace used to load and the namespace in place for `read-syntax`. That mismatch easily shows up when the `read-syntax` from the `reader` language  loads another module to get its reader.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T06:35:04.239700</ts>
    <user>Andreas</user>
    <text>All, I need to draw some data structure illustrations. The obvious Latex solution for this problem is usually Tikz. Absolutely amazing tool, hate the language though. Have to relearn it each time I need to use it. Is there anything like this in Racket? It looks like `pict` is somehow going in this direction. Is it my best bet?</text>
  </message>
  <message conversation_id="1060">
    <ts>2018-12-11T07:50:09.240300</ts>
    <user>Millard</user>
    <text>How about Graphviz or PlantUML? Pretty easy to automatically generate diagram definitions.</text>
  </message>
  <message conversation_id="1060">
    <ts>2018-12-11T07:53:01.241000</ts>
    <user>Andreas</user>
    <text>Never looked at those (used graphviz for graph generation using dot) but certainly not plantuml. Will take a look.</text>
  </message>
  <message conversation_id="1057">
    <ts>2018-12-11T09:46:29.242300</ts>
    <user>Andreas</user>
    <text>&lt;@Monserrate&gt; following up a chat a few days ago about building racket and racketcs in the same build, `cd racket/src; ./configure; make; make cs` does not seem to work.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T09:46:42.242700</ts>
    <user>Andreas</user>
    <text>Take a look, if possible, at the end of : &lt;https://travis-ci.org/LinkiTools/racket/jobs/466507986&gt;</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T09:47:07.242900</ts>
    <user>Andreas</user>
    <text>```
make[7]: Entering directory `/home/travis/build/LinkiTools/racket/racket/src/cs'
cd ../thread; make RACO=" -N raco -l- raco" thread-src
make[8]: Entering directory `/home/travis/build/LinkiTools/racket/racket/src/thread'
N raco -l- raco make ../expander/bootstrap-run.rkt
make[8]: N: Command not found
make[8]: [thread-src] Error 127 (ignored)
make thread-src-generate
make[9]: Entering directory `/home/travis/build/LinkiTools/racket/racket/src/thread'
../expander/bootstrap-run.rkt -t main.rkt --submod main --check-depends ../cs/compiled/thread-dep.rktd ++depend-module ../expander/bootstrap-run.rkt --depends ../cs/compiled/thread-dep.rktd --makefile-depends compiled/thread.rktl ../cs/compiled/thread.d -c ../cs/compiled/cache-src -k ../.. -s -x ++direct pthread  -o ../cs/compiled/thread.rktl
make[9]: execvp: ../expander/bootstrap-run.rkt: Permission denied
make[9]: *** [thread-src-generate] Error 127
make[9]: Leaving directory `/home/travis/build/Link
```</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T09:47:46.243600</ts>
    <user>Andreas</user>
    <text>Anyone else tried this before? I am really only interested in the C part - which is the only interesting part for coverity.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T09:54:25.243900</ts>
    <user>Lynna</user>
    <text>I think Sam meant `make &amp;amp;&amp;amp; make cs` in the repo top-level directory, which is also what I do. The sequence `cs racket/src; ./configure --enable-cs; make; make cs` is also meant to work, but I haven’t tried that (and can’t try just at the moment).</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T09:57:08.244100</ts>
    <user>Andreas</user>
    <text>Ah, yes, that makes sense. I will give it a try. Thanks.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:01:28.244300</ts>
    <user>Andreas</user>
    <text>Looks like its working after cloning your chez repo as well.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:03:35.244500</ts>
    <user>Lynna</user>
    <text>Ah, right. Hopefully the `configure` script alerted you to do that, though.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:04:54.244700</ts>
    <user>Lynna</user>
    <text>I should make the `cs` target tell you to configure with `--enable-cs`, assuming that works.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:07:56.244900</ts>
    <user>Andreas</user>
    <text>doesn't actually work, there's some missing Makefile rule: `make[6]: *** No rule to make target '/home/pmatos/Projects/LT-racket/racket/src/cs/racket.so'.  Stop.`</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:08:13.245100</ts>
    <user>Andreas</user>
    <text>Don't really want to bother you with this because it's just so I can run coverity on both racket builds.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:08:53.245300</ts>
    <user>Andreas</user>
    <text>I am going to try to just get coverity running through `make` on top-level.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:10:37.245500</ts>
    <user>Lynna</user>
    <text>I bet the problem is that the build needs to run in a separate “build” subdirectory. So, `cd racket/src; mkdir build; cd build; ../configure --enable-cs; make cs`</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:21:58.245700</ts>
    <user>Andreas</user>
    <text>If I do it in the top-level I am still not getting it to work. Fails building cs: `Exception in $fasl-file-equal?: gensym comparison failed while comparing ../boot/ta6le/sbb and ../boot/ta6le/petite.boot within fasl entry 959
make[16]: *** [Mf-base:294: checkboot] Error 255`</text>
  </message>
  <message conversation_id="1061">
    <ts>2018-12-11T10:22:05.245900</ts>
    <user>Andreas</user>
    <text>Is this related to a recent change?</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:25:12.246100</ts>
    <user>Lynna</user>
    <text>That’s odd, since I recently sync’ed the bootfiles. I’ll have to investigate later today.</text>
  </message>
  <message conversation_id="1061">
    <ts>2018-12-11T10:25:28.246300</ts>
    <user>Lynna</user>
    <text>That’s a fresh checkout, or an existing one?</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:30:55.246500</ts>
    <user>Andreas</user>
    <text>That's an existing one. But I updated it a few hours ago.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T10:31:08.246700</ts>
    <user>Andreas</user>
    <text>I will try a fresh checkout to see if there's a difference.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T12:07:18.247400</ts>
    <user>Franklin</user>
    <text>Pocmatos check metapict &lt;http://docs.racket-lang.org/metapict/index.html&gt;</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T12:09:01.247900</ts>
    <user>Franklin</user>
    <text>Example of a State machine: &lt;https://github.com/soegaard/metapict/blob/master/metapict/examples/state-machine.rkt&gt;
</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T12:12:17.248300</ts>
    <user>Andreas</user>
    <text>&lt;@Franklin&gt; wow, saw the examples and am excited already. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T12:12:30.248600</ts>
    <user>Andreas</user>
    <text>Thanks. Will definitely give this one a try.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T12:14:25.248700</ts>
    <user>Andreas</user>
    <text>Works with fresh checkout. I am stumped. Will sort out now things on my branch. Thanks for your time.</text>
  </message>
  <message conversation_id="1059">
    <ts>2018-12-11T12:24:56.249200</ts>
    <user>Millard</user>
    <text>&lt;@Franklin&gt; wow, thanks for the pointer - looks very cool</text>
  </message>
  <message conversation_id="1062">
    <ts>2018-12-11T14:06:32.249400</ts>
    <user>Lynna</user>
    <text>Does `make` another time in your old checkout solve the problem? The Chez Scheme makefile tries to build and rebuild a time or two to reach a fixed point. I’m not sure why, but sometimes it takes another round to get there. Starting from a non-fresh build means starting with the bootfiles from your previous build, instead of the checked-in ones, so tat’s why a fresh checkout is different.</text>
  </message>
  <message conversation_id="1063">
    <ts>2018-12-11T14:26:25.249600</ts>
    <user>Odis</user>
    <text>Oh interesting. So are you saying the way to work around this is to require as few things in the reader as possible?</text>
  </message>
  <message conversation_id="1063">
    <ts>2018-12-11T14:26:33.249800</ts>
    <user>Odis</user>
    <text>(And move the rest to the `#:language` field?</text>
  </message>
  <message conversation_id="1062">
    <ts>2018-12-12T04:55:42.255600</ts>
    <user>Andreas</user>
    <text>&lt;@Lynna&gt; &lt;@Monserrate&gt; Thanks for your help. I finally got Racket HEAD (normal + CS) analyzed by coverity (or at least in the queue). I will start taking some time to analyze and submit bugs/PRs on this soon: &lt;https://scan.coverity.com/projects/linkitools-racket&gt;</text>
  </message>
  <message conversation_id="1064">
    <ts>2018-12-12T08:25:45.255700</ts>
    <user>Monserrate</user>
    <text>Awesome. If it makes sense to merge something, let me know</text>
  </message>
  <message conversation_id="1065">
    <ts>2018-12-12T10:05:13.255900</ts>
    <user>Andreas</user>
    <text>Not for now I think. For merging I need to simplify the process which is quite manual for now as I have to merge master and commit to my `coverity_scan` branch.</text>
  </message>
  <message conversation_id="1065">
    <ts>2018-12-12T10:05:50.256100</ts>
    <user>Andreas</user>
    <text>Problem is that the coverity server was broken for so long that there are something like 537 builds before us. That's bothering me so I am trying to setup my own server to statically analyze racket instead.</text>
  </message>
  <message conversation_id="1066">
    <ts>2018-12-13T12:45:18.258000</ts>
    <user>Ola</user>
    <text>if I use the following for `#%module-begin` in a #lang, it complains “cannot use identifier tainted by macro transformation”. why?
```
(define-syntax-rule (test-module-begin e ...)
  #'(#%module-begin
     e ...))
```</text>
  </message>
  <message conversation_id="1066">
    <ts>2018-12-13T13:18:54.259100</ts>
    <user>Carlyn</user>
    <text>&lt;@Ola&gt; I’m not sure how exactly you’re getting that error, but you don’t want to have the `#'` at the beginning if you’re using `syntax-rules`.</text>
  </message>
  <message conversation_id="1066">
    <ts>2018-12-13T13:20:12.259500</ts>
    <user>Ola</user>
    <text>right, is that because syntax-rules already returns a syntax object?</text>
  </message>
  <message conversation_id="1066">
    <ts>2018-12-13T13:21:02.260400</ts>
    <user>Carlyn</user>
    <text>Yes, `syntax-rules` expects to just be given a syntax template. It doesn’t expect a compile-time expression that produces a syntax object, unlike `syntax-parse`.</text>
  </message>
  <message conversation_id="1066">
    <ts>2018-12-13T13:21:27.260900</ts>
    <user>Ola</user>
    <text>so simple… it works now</text>
  </message>
  <message conversation_id="1066">
    <ts>2018-12-13T13:21:41.261200</ts>
    <user>Ola</user>
    <text>thanks</text>
  </message>
  <message conversation_id="1066">
    <ts>2018-12-13T15:16:30.263400</ts>
    <user>Odis</user>
    <text>&lt;@Lynna&gt; or &lt;@Carlyn&gt;: Any idea why `splicing-parameterize` breaks when used with `include-section`?  &lt;https://gist.github.com/LeifAndersen/631eaf27dfcfcc364efc8a12ca08dc9a&gt;</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:16:31.263500</ts>
    <user>Odis</user>
    <text>None</text>
  </message>
  <message conversation_id="1066">
    <ts>2018-12-13T15:17:09.264400</ts>
    <user>Carlyn</user>
    <text>What breaks about it? `splicing-parameterize` won’t affect the included section because the other module is expanded independently of the including module.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:17:21.264800</ts>
    <user>Odis</user>
    <text>The error I get is:
```
/home/leif/racket/racket/collects/racket/splicing.rkt:492:14: splicing-parameterize-body: bad syntax
  in: (splicing-parameterize-body new-parameterization (require (only-in "sec.rkt" (doc doc))))
  location...:
   /home/leif/racket/racket/collects/racket/splicing.rkt:492:14
  context...:
   do-raise-syntax-error
   apply-transformer-in-context
   apply-transformer52
   dispatch-transformer41
   loop
   finish
   [repeats 1 more time]
   pass-1-and-2-loop
   module-begin-k
   expand-module16
   expand-capturing-lifts
   temp118_0
   temp91_0
   compile15
   temp85_0
   standard-module-name-resolver
   ...
```</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:17:36.265100</ts>
    <user>Carlyn</user>
    <text>Ah, `include-section` is only supposed to be used at the top level of a module.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:17:49.265400</ts>
    <user>Odis</user>
    <text>That is correct.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:18:10.266100</ts>
    <user>Odis</user>
    <text>_but_ `require` seems to work inside a `splicing-parameterize`</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:18:30.266600</ts>
    <user>Carlyn</user>
    <text>So I guess the problem is that `splicing-parameterize` isn’t ignoring things that expand into uses of `require`.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:19:19.267600</ts>
    <user>Odis</user>
    <text>I thought that.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:19:30.268000</ts>
    <user>Odis</user>
    <text>But I made a macro that expanded to require and it worked</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:19:36.268400</ts>
    <user>Odis</user>
    <text>let me quickly dig it up.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:19:43.268700</ts>
    <user>Carlyn</user>
    <text>But that code wouldn’t work, anyway—`include-section` basically just expands into `(require (only-in "sec.rkt" doc)) doc`, so the evaluation of `doc` would _not_ be affected by the parameterization.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:21:07.269400</ts>
    <user>Odis</user>
    <text>Something like this:

```
#lang scratch

(define-syntax-parser my-req
  [(_)
   #'(require pict)])

(splicing-parameterize ([current-output-port (open-output-nowhere)])
  (my-req))
```</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:21:47.270300</ts>
    <user>Odis</user>
    <text>"so the evaluation of `doc` would _not_ be affected by the parameterization"</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:21:56.270700</ts>
    <user>Odis</user>
    <text>That is correct. My actual code is a much larger block of text.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:22:02.271000</ts>
    <user>Carlyn</user>
    <text>Looking at the implementation of `splicing-parameterize`, it looks like the real problem is that the expansion of the `begin` case is wrong. I’ll add a test and push a fix, so thanks for the report.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:22:06.271200</ts>
    <user>Odis</user>
    <text>Where `include-section` is only one part.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:22:18.271500</ts>
    <user>Carlyn</user>
    <text>Gotcha.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:22:21.271600</ts>
    <user>Odis</user>
    <text>Ah, cool. thanks. :smile:</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:23:43.271700</ts>
    <user>Odis</user>
    <text>For the record, ya, that seemed to work. Thanks again.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:24:02.272100</ts>
    <user>Odis</user>
    <text>Can you ping me when you push and/or merge?</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:25:14.272500</ts>
    <user>Carlyn</user>
    <text>Will do; it shouldn’t be long.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:30:28.272700</ts>
    <user>Carlyn</user>
    <text>&lt;@Odis&gt; Pushed as &lt;https://github.com/racket/racket/commit/15d0ccc2c097e20d51f1519c032e158d12214c0f&gt;.</text>
  </message>
  <message conversation_id="1067">
    <ts>2018-12-13T15:55:01.272900</ts>
    <user>Odis</user>
    <text>Thanks a lot. :smile:</text>
  </message>
  <message conversation_id="1068">
    <ts>2018-12-13T17:19:21.274100</ts>
    <user>Sandi</user>
    <text>have a question about `raco setup`: I work on small programs that aren’t packages per se, they’re CLI tools. Is there a way to use `raco setup` to install the deps from `info.rkt` or do I need to install them as packages first?</text>
  </message>
  <message conversation_id="1068">
    <ts>2018-12-13T17:22:33.274400</ts>
    <user>Monserrate</user>
    <text>&lt;@Sandi&gt; you need to install them as packages</text>
  </message>
  <message conversation_id="1068">
    <ts>2018-12-13T17:22:52.274800</ts>
    <user>Monserrate</user>
    <text>but in general it's helpful to have CLI tools installed as packages</text>
  </message>
  <message conversation_id="1068">
    <ts>2018-12-13T17:23:19.275400</ts>
    <user>Monserrate</user>
    <text>for example, if you install `my-tool` as a package, then you can run it as `racket -l my-tool` anywhere</text>
  </message>
  <message conversation_id="1068">
    <ts>2018-12-13T17:23:30.275600</ts>
    <user>Sandi</user>
    <text>ah, got ya</text>
  </message>
  <message conversation_id="1068">
    <ts>2018-12-13T17:23:32.275800</ts>
    <user>Sandi</user>
    <text>thanks!</text>
  </message>
  <message conversation_id="1069">
    <ts>2018-12-14T12:11:21.277100</ts>
    <user>Thomas</user>
    <text>So on Mac OS X, when I make an application with `raco exe --gui hello.rkt`, it creates a &lt;http://hello.app|hello.app&gt;, but clicking it doesn't launch. Instead I get `Failed to copy signing info for 73511` in the &lt;http://Console.app|Console.app&gt;</text>
  </message>
  <message conversation_id="1069">
    <ts>2018-12-14T12:12:31.277700</ts>
    <user>Thomas</user>
    <text>Same problem with the DrRacket launcher, I can only open that from command-line as well.</text>
  </message>
  <message conversation_id="1070">
    <ts>2018-12-14T13:53:51.278400</ts>
    <user>Aimee</user>
    <text>&lt;@Helena&gt; In gtp-benchmarks, how do you usually edit source code for typed programs? the adaptor modules would defeat background expansion</text>
  </message>
  <message conversation_id="1070">
    <ts>2018-12-14T14:05:59.278700</ts>
    <user>Helena</user>
    <text>copy the adaptors into the `typed/` directory</text>
  </message>
  <message conversation_id="1070">
    <ts>2018-12-14T14:06:33.279300</ts>
    <user>Helena</user>
    <text>(normally I don't use drracket to edit, but I need the adaptors to run the files anyway)</text>
  </message>
  <message conversation_id="1070">
    <ts>2018-12-14T14:07:35.279500</ts>
    <user>Aimee</user>
    <text>oh okay</text>
  </message>
  <message conversation_id="1069">
    <ts>2018-12-14T15:19:50.281500</ts>
    <user>Leena</user>
    <text>I have a package on the racket package system and it’s getting conflicts with other modules outside of my package. Kind of confused as to what these conflicts are and how I can determine what they might be in the future so that I can prevent them from occurring. Why are there conflicts (Is there some raco command I can run to determine this or how is the package manager figuring them out?</text>
  </message>
  <message conversation_id="1069">
    <ts>2018-12-14T15:21:21.282600</ts>
    <user>Leena</user>
    <text>Ooops, hit return on accident and my parenthesis aren’t balanced, so here you go)</text>
  </message>
  <message conversation_id="1069">
    <ts>2018-12-14T15:32:56.283100</ts>
    <user>Aimee</user>
    <text>searching in the conflict logs, I think this is what caused the conflict for your package:
```
doc "manual":
  bystroTeX design-by-numbers riff simply-scheme ts-fundamentals
 ```</text>
  </message>
  <message conversation_id="1069">
    <ts>2018-12-14T15:33:23.283600</ts>
    <user>Aimee</user>
    <text>probably `manual.scrbl` conflicts with the `manual.scrbl` in other packages</text>
  </message>
  <message conversation_id="1071">
    <ts>2018-12-14T16:21:49.285100</ts>
    <user>Helena</user>
    <text>hi, can someone with a newer mac try:
1. downloading &amp;amp; unpacking `cat.tar.gz` (attached)
2. running `raco pkg install ./cat`
?</text>
  </message>
  <message conversation_id="1071">
    <ts>2018-12-14T16:23:02.286300</ts>
    <user>Helena</user>
    <text>I'm on `osx-el-captan-10.11.1` and when I try to install (or really, build the documentation), I see this:
```
raco setup: --- building documentation ---
raco setup: 2 running: &amp;lt;pkgs&amp;gt;/cat/cat.scrbl
CoreAnimation: warning, deleted thread with uncommitted CATransaction; set CA_DEBUG_TRANSACTIONS=1 in environment to log backtraces.
zsh: segmentation fault  raco pkg install
```

but on a linux machine, I get a much better error about `cannot instantiate 'racket/gui/base' a second time`</text>
  </message>
  <message conversation_id="1071">
    <ts>2018-12-14T16:25:50.286600</ts>
    <user>Aimee</user>
    <text>10.13 with Racket v7.1.0.9 here:
```
raco setup: 0 running: &amp;lt;pkgs&amp;gt;/cat/cat.scrbl
2018-12-14 15:25:23.408 racket[98978:23844805] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'nextEventMatchingMask should only be called from the Main Thread!'
*** First throw call stack:
(
	0   CoreFoundation                      0x00007fff3535e32b __exceptionPreprocess + 171
	1   libobjc.A.dylib                     0x00007fff5c9c0c76 objc_exception_throw + 48
	2   AppKit                              0x00007fff3300a297 -[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 4167
	3   Racket                              0x00000001005c38ac ffi_call_unix64 + 76
	4   ???                                 0x00007000064f32b0 0x0 + 123145408164528
)
libc++abi.dylib: terminating with uncaught exception of type NSException
Abort trap: 6
```</text>
  </message>
  <message conversation_id="1071">
    <ts>2018-12-14T16:28:52.286900</ts>
    <user>Gaynell</user>
    <text>```
raco setup: 0 running: &amp;lt;pkgs&amp;gt;/cat/cat.scrbl
CoreAnimation: warning, deleted thread with uncommitted CATransaction; set CA_DEBUG_TRANSACTIONS=1 in environment to log backtraces.
raco setup: 4 rendering: &amp;lt;pkgs&amp;gt;/cat/cat.scrbl
raco setup: 3 rendering: &amp;lt;pkgs&amp;gt;/racket-index/scribblings/main/release.scrbl
raco setup: 2 rendering: &amp;lt;pkgs&amp;gt;/racket-index/scribblings/main/start.scrbl
raco setup: 1 rendering: &amp;lt;pkgs&amp;gt;/racket-index/scribblings/main/local-redirect.scrbl
raco setup: 0 rendering: &amp;lt;pkgs&amp;gt;/racket-index/scribblings/main/search.scrbl
cannot instantiate `racket/gui/base' a second time in the same process
  context...:
   "/Users/michaelb/racket/racket/share/pkgs/gui-lib/mred/private/wx/common/once.rkt": [running body]
   temp37_0
   for-loop
   run-module-instance!125
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   ...

  context...:
   /Users/michaelb/racket/racket/collects/setup/parallel-do.rkt:332:4: work-done method in list-queue%
   /Users/michaelb/racket/racket/collects/setup/parallel-do.rkt:282:17
   /Users/michaelb/racket/racket/collects/setup/parallel-do.rkt:236:4
   /Users/michaelb/racket/pkgs/racket-index/setup/scribble.rkt:433:2: make-loop
   /Users/michaelb/racket/pkgs/racket-index/setup/scribble.rkt:138:0: setup-scribblings
   /Users/michaelb/racket/racket/collects/setup/setup-core.rkt:71:0: setup-core
   /Users/michaelb/racket/racket/collects/setup/setup.rkt:65:3
   /Users/michaelb/racket/racket/collects/pkg/main.rkt:17:0: setup
   (submod "/Users/michaelb/racket/racket/collects/pkg/main.rkt" main): [running body]
   temp37_0
   for-loop
   run-module-instance!125
   for-loop
   [repeats 1 more time]
   run-module-instance!125
   "/Users/michaelb/racket/racket/collects/raco/raco.rkt": [running body]
   ...
raco setup: --- installing collections ---
raco setup: --- post-installing collections ---
raco setup: --- summary of errors ---
raco setup: error: during building docs for &amp;lt;pkgs&amp;gt;/cat/cat.scrbl
raco setup:   cannot instantiate `racket/gui/base' a second time in the same process
raco setup:     context...:
raco setup:      "/Users/michaelb/racket/racket/share/pkgs/gui-lib/mred/private/wx/common/once.rkt": [running body]
raco setup:      temp37_0
raco setup:      for-loop
raco setup:      run-module-instance!125
raco setup:      for-loop
raco setup:      [repeats 1 more time]
raco setup:      run-module-instance!125
raco setup:      for-loop
raco setup:      [repeats 1 more time]
raco setup:      run-module-instance!125
raco setup:      for-loop
raco setup:      [repeats 1 more time]
raco setup:      run-module-instance!125
raco setup:      for-loop
raco setup:      [repeats 1 more time]
raco setup:      run-module-instance!125
raco setup:      ...
raco setup:
raco pkg install: packages installed, although setup reported errors
```</text>
  </message>
  <message conversation_id="1071">
    <ts>2018-12-14T16:29:08.287100</ts>
    <user>Gaynell</user>
    <text>10.9.5, Racket 7.0.0.20</text>
  </message>
  <message conversation_id="1071">
    <ts>2018-12-14T16:49:17.287700</ts>
    <user>Omar</user>
    <text>10.14.1 with Racket 7.1

```
raco setup: version: 7.1
raco setup: platform: x86_64-macosx [3m]
raco setup: installation name: 7.1
raco setup: variants: 3m
raco setup: main collects: /Applications/Racket v7.1/collects
raco setup: collects paths:
raco setup:   /Users/sorawee/Library/Racket/7.1/collects
raco setup:   /Applications/Racket v7.1/collects
raco setup: main pkgs: /Applications/Racket v7.1/share/pkgs
raco setup: pkgs paths:
raco setup:   /Applications/Racket v7.1/share/pkgs
raco setup:   /Users/sorawee/Library/Racket/7.1/pkgs
raco setup: links files:
raco setup:   /Applications/Racket v7.1/share/links.rktd
raco setup:   /Users/sorawee/Library/Racket/7.1/links.rktd
raco setup: main docs: /Applications/Racket v7.1/doc
raco setup: --- updating info-domain tables ---
raco setup: updating: /Users/sorawee/Library/Racket/7.1/share/info-cache.rktd
raco setup: --- pre-installing collections ---
raco setup: --- installing foreign libraries ---
raco setup: --- installing shared files ---
raco setup: --- compiling collections ---
raco setup: --- parallel build using 4 jobs ---
raco setup: 3 making: &amp;lt;pkgs&amp;gt;/cat
raco setup: --- creating launchers ---
raco setup: --- installing man pages ---
raco setup: --- building documentation ---
raco setup: 1 running: &amp;lt;pkgs&amp;gt;/cat/cat.scrbl
2018-12-14 13:47:00.167 racket[75689:2551319] WARNING: nextEventMatchingMask should only be called from the Main Thread! This will throw an exception in the future.
2018-12-14 13:47:00.398 racket[75689:2551319] WARNING: NSWindow drag regions should only be invalidated on the Main Thread! This will throw an exception in the future. Called from (
	0   AppKit                              0x00007fff35cbc824 -[NSWindow(NSWindow_Theme) _postWindowNeedsToResetDragMarginsUnlessPostingDisabled] + 386
	1   AppKit                              0x00007fff35cb9bd0 -[NSWindow _initContent:styleMask:backing:defer:contentView:] + 1488
	2   AppKit                              0x00007fff35cb95fa -[NSWindow initWithContentRect:styleMask:backing:defer:] + 45
	3   Racket                              0x0000000100315d7c ffi_call_unix64 + 76
	4   ???                                 0x0000700008815fd0 0x0 + 123145445007312
)
Assertion failed: (NSViewIsCurrentlyBuildingLayerTreeForDisplay() != currentlyBuildingLayerTree), function NSViewSetCurrentlyBuildingLayerTreeForDisplay, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/AppKit/AppKit-1671.10.106/AppKit.subproj/NSView.m, line 14143.
[1]    75689 illegal hardware instruction  raco pkg install ../cat
```</text>
  </message>
  <message conversation_id="1071">
    <ts>2018-12-14T18:18:20.288200</ts>
    <user>Helena</user>
    <text>thanks everyone, I opened an issue &lt;https://github.com/racket/racket/issues/2426&gt;</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:29:00.289500</ts>
    <user>Delfina</user>
    <text>Hello, how do i make a square for example with random size and color? i read a lot about randomizing in racket but didn't find a way</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:29:32.289900</ts>
    <user>Franklin</user>
    <text>How are you making squares now?</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:29:54.290300</ts>
    <user>Delfina</user>
    <text>I am still in the basics, (square 10 "solid" "red")</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:30:20.290700</ts>
    <user>Delfina</user>
    <text>i am working on designing a simulation using DrRacket big-bang environment.</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:30:53.291400</ts>
    <user>Franklin</user>
    <text>The most basic function to generate random numbers is `random`.</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:31:23.292100</ts>
    <user>Franklin</user>
    <text>`(random 10)` will produce a random number between 0 (inclusive) and 10 (exclusive).</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:31:41.292500</ts>
    <user>Delfina</user>
    <text>oh, it was this easy</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:31:58.292900</ts>
    <user>Franklin</user>
    <text>`(random 10 20)` will produce a number between 10 (inclusive) and 20 (exclusive).</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:32:22.293500</ts>
    <user>Franklin</user>
    <text>So (square (random 10 20) "solid" "red") will produce a square with a random size.</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:32:35.293800</ts>
    <user>Franklin</user>
    <text>If you store colors in a list:</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:32:46.294100</ts>
    <user>Franklin</user>
    <text>(define colors (list "red" "blue" "green"))</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:32:49.294300</ts>
    <user>Franklin</user>
    <text>then you can use</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:33:00.294600</ts>
    <user>Franklin</user>
    <text>(list-ref colors (random (length colors)))</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:33:06.294900</ts>
    <user>Franklin</user>
    <text>to pick a random color.</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:33:20.295400</ts>
    <user>Franklin</user>
    <text>If you are using it multiple times, define a function:</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:33:35.296100</ts>
    <user>Franklin</user>
    <text>(define (random-color) (list-ref colors (random (length colors))))</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:33:36.296300</ts>
    <user>Delfina</user>
    <text>I am getting the following error when i am trying to create (square (random 10 20) solid red:

random: expects only 1 argument, but found 2</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:33:44.296500</ts>
    <user>Franklin</user>
    <text>and simply write (random-color).</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:34:01.296800</ts>
    <user>Franklin</user>
    <text>Which language are you using?</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:34:37.297400</ts>
    <user>Delfina</user>
    <text>Beginning student with  list abbservations</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:34:46.297900</ts>
    <user>Delfina</user>
    <text>Abbreviations*</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:35:04.298400</ts>
    <user>Ola</user>
    <text>`(+ 10 (random 10))`</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:35:05.298500</ts>
    <user>Franklin</user>
    <text>Ok, then use (+ 10 (random 10)) to get a random number between 10 and 20.</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:37:24.300000</ts>
    <user>Delfina</user>
    <text>The project that i am working is about a structure that got (size color type position)

i must write functions like tick-f (i did it)
but i must create a function called key-f which takes list-of-shapes and keyEvent and
produces a list-of-shapes. The function checks the key event. IfkeyEvent is \s" then create a new shape as \square" and produce random colored shape with random size (between 0-30) and random position where x is between [0,WIDTH] and y is between [0,HEIGHT].
If keyEvent \c" then create a new shape as "circle" or if keyEvent is
"t" then create a new shape as "triangle".</text>
  </message>
  <message conversation_id="1072">
    <ts>2018-12-15T08:37:42.300300</ts>
    <user>Delfina</user>
    <text>Constructors of the structure:
(define b1 (make-shape 10  "red"  "c" (make-posn 450 350)))
(define b2 (make-shape  15  "green" "t" (make-posn 150 150)))
(define b3 (make-shape  10 "purple" "c" (make-posn 250 200)))</text>
  </message>
  <message conversation_id="1073">
    <ts>2018-12-15T23:18:50.300900</ts>
    <user>Aimee</user>
    <text>Why can't I use `local-expand` with `begin` to expand definitions?
```
#lang racket/base

(require (for-syntax racket/base syntax/parse))

(define-syntax mutual
  (syntax-parser
    [(_ form ...)
     (define expanded-forms
       (local-expand #'(begin form ...) 'module '()))
     #'(void)]))

(mutual
 (define x 5))
```</text>
  </message>
  <message conversation_id="1073">
    <ts>2018-12-15T23:22:09.301200</ts>
    <user>Omar</user>
    <text>I think the problem is with the context</text>
  </message>
  <message conversation_id="1073">
    <ts>2018-12-15T23:22:20.301600</ts>
    <user>Omar</user>
    <text>If you use `'top-level`, it works fine</text>
  </message>
  <message conversation_id="1073">
    <ts>2018-12-15T23:24:25.302300</ts>
    <user>Aimee</user>
    <text>I thought `'module` means module-level context, which also allows definitions</text>
  </message>
  <message conversation_id="1073">
    <ts>2018-12-15T23:25:19.303400</ts>
    <user>Aimee</user>
    <text>okay, by replacing `'module` with `'top-level` I can have definitions. Mutually recursive definitions are still defeated :disappointed:</text>
  </message>
  <message conversation_id="1073">
    <ts>2018-12-16T01:08:56.305000</ts>
    <user>Carlyn</user>
    <text>&lt;@Aimee&gt; The gist of it is that `define` outside of the top level is not actually a form that means anything in isolation… rather, _enclosing_ forms (like `#%module-begin` or `let`) perform partial expansion to find definitions, then the enclosing forms themselves handle the definitions in some appropriate way.</text>
  </message>
  <message conversation_id="1073">
    <ts>2018-12-16T01:10:37.306400</ts>
    <user>Carlyn</user>
    <text>If you want to do that same kind of partial expansion yourself, you can—indeed, forms like `class` and `unit` _do_ do that in order to implement their custom definition contexts. This blog post of mine covers the gnarly details of doing such a thing “properly”: &lt;https://lexi-lambda.github.io/blog/2018/09/13/custom-core-forms-in-racket-part-ii-generalizing-to-arbitrary-expressions-and-internal-definitions/&gt;</text>
  </message>
  <message conversation_id="1073">
    <ts>2018-12-16T01:15:23.306700</ts>
    <user>Aimee</user>
    <text>ohh!! thanks a lot</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T10:09:45.309800</ts>
    <user>Bertha</user>
    <text>We have `choice-evt` to "logically OR" two or more events; the result is ready when _any_ are.
Is `replace-evt` how to "logically AND" two events; the result is ready when _all_ are.
e.g. `(replace-evt e1 (λ (_) e2))`
?</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T10:29:47.312200</ts>
    <user>Bertha</user>
    <text>(In the special case where you don't care about the synchronization result _value_ of `e1`, just the fact that it was ready. Where you know `e1` is an event such as a port, timer, `always-evt`, `never-evt`, etc.)</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T10:33:11.314500</ts>
    <user>Bertha</user>
    <text>I guess the "logical AND" analogy isn't quite right, due to time and concurrency.
But I do mean something weaker -- `e1` was ready, and subsequently `e2` is ready (even if `e1` might no longer be).</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T10:46:04.317600</ts>
    <user>Lynna</user>
    <text>Yes, `replace-evt` is an approximation to “and” in that sense. There’s no stronger “and”, since it would require fundamentally different internal machinery. (It’s a theorem that you can’t get N-way rendezvous from the 1-way rendezvous that is provided by Racket’s event API.)</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T10:52:44.318000</ts>
    <user>Monserrate</user>
    <text>maybe racket4 needs to implement Aaron Turon's reagents</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T12:57:11.322100</ts>
    <user>Bertha</user>
    <text>Thanks, that's helpful!
I guess that was an XY question.
My specific situation is I am working on some flow/congestion control.
Reading from the `in` of a `pipe`.
So I wanted to compose `in` being ready, with some event which is ready when "not congested".
It took me awhile to figure out that `replace-evt` was a way to do this, but I didn't feel super confident.
So I'm glad, it sounds like what I'm doing is not-awful.</text>
  </message>
  <message conversation_id="1075">
    <ts>2018-12-17T17:17:28.325900</ts>
    <user>Bertha</user>
    <text>Umm, so on 6.10 I'm seeing:
Supplying an optional limit to `make-pipe` works. It blocks if you try to write more into the pipe without reading.
But.
Supplying a limit and an optional name to `make-pipe` causes it to ignore the limit and accept unlimited writes.
For instance:
```
(require rackunit)
(let-values ([(pin pout) (make-pipe 4)])
  (write-bytes (make-bytes 4) pout)
  (check-false (sync/timeout 0 pout))) ;&amp;lt;- OK
(let-values ([(pin pout) (make-pipe 4 'name)])
  (write-bytes (make-bytes 4) pout)
  (check-false (sync/timeout 0 pout))) ;&amp;lt;- Nope
```
I'm guessing this is a bug?</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T17:22:12.326500</ts>
    <user>Bertha</user>
    <text>More simply:
```
(let-values ([(pin pout) (make-pipe 4)])
  (write-bytes (make-bytes 4) pout)
  (sync/timeout 0 pout)) ;=&amp;gt; #f
(let-values ([(pin pout) (make-pipe 4 'name)])
  (write-bytes (make-bytes 4) pout)
  (sync/timeout 0 pout)) ;=&amp;gt; #&amp;lt;output-port:pipe&amp;gt;  WAT
```</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T17:24:50.328000</ts>
    <user>Monserrate</user>
    <text>&lt;@Bertha&gt; it does the right thing on racketcs</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T17:25:07.328400</ts>
    <user>Setsuko</user>
    <text>Looks like this `==` check should be a `&amp;gt;=`?

&lt;https://github.com/racket/racket/blob/master/racket/src/racket/src/portfun.c#L2185&gt;</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T17:44:07.331600</ts>
    <user>Bertha</user>
    <text>I'm OK sacrificing neat port names if that means I can get back-pressure, now I know have to choose.
I was just a very confused person for a very long time, until I saw how to narrow it down.</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-17T22:39:27.332300</ts>
    <user>Monserrate</user>
    <text>&lt;@Dia&gt; can you actually fix the r-linq package?</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T12:03:31.337500</ts>
    <user>Bertha</user>
    <text>I'm seeing `udp-receive!` lose packets.
It happens approximately the same time as a major GC, so I think they're related, but I'm not sure.
Does that sound familiar to anyone who's done this?</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T12:04:05.338000</ts>
    <user>Bertha</user>
    <text>I understand UDP is inherently unreliable. If Racket didn't drop the packets, something else might.
So on the one hand, this is fine -- it's helpfully exercising my loss-detection. My sender retransmits and eventually all is fine.
On the other hand, it does add somewhat to the time-to-success.
And I'm just curious if `udp-receive!` is intended to be unreliable during GC, this way.</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T12:05:44.339200</ts>
    <user>Bertha</user>
    <text>(To clarify, I'm seeing this happen with the sender and receiver as two Racket processes bound to different UDP ports on the same machine. No interweb tubes involved.)</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T12:07:37.339800</ts>
    <user>Bertha</user>
    <text>(To clarify #2, these are small 1200 byte datagrams.)</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T14:53:38.340300</ts>
    <user>Bertha</user>
    <text>That was on 6.10. I see similar on 7.0.</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T14:54:16.341100</ts>
    <user>Bertha</user>
    <text>I just downloaded 7.1.0.10 CS for macOS, and I'm getting an error.
Making minimal example....</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T14:55:01.341600</ts>
    <user>Bertha</user>
    <text>Running something like this:
```
#lang racket/base

(require racket/udp
         racket/function)

(define port 50000)
(define u (udp-open-socket #f #f))
(udp-bind! u #f port #t)
(thread
 (thunk
  (define buffer (make-bytes 1200))
  (for ([(len host port) (in-producer (thunk (udp-receive! u buffer)))])
    (displayln (subbytes buffer 0 len)))))

(sleep 2)
(udp-send-to u "127.0.0.1" port #"Hello")
(sync never-evt)
```</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T14:55:40.342000</ts>
    <user>Bertha</user>
    <text>Outputs:
```
$ /Applications/Racket_v7.1.0.10-CS/bin/racket /tmp/udp.rkt
#&amp;lt;thread&amp;gt;
invalid memory reference.  Some debugging context lost
  context...:
   condition-&amp;gt;exn
   dynamic-wind
   winder-dummy
   /Users/racket/build/plt/build/cs/racket/src/build/cs/compiled/io.scm:37450:3: do-udp-receive!28
   /tmp/udp.rkt:12:2: for-loop
   /tmp/udp.rkt:10:1
internal error: terminated in atomic mode!
  context...:
   /Users/racket/build/plt/build/cs/racket/src/build/cs/compiled/thread.scm:1228:2: internal-error
   /Users/racket/build/plt/build/cs/racket/src/build/cs/compiled/thread.scm:10114:18
   invoke
```</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T14:58:05.342500</ts>
    <user>Bertha</user>
    <text>It's probably a simple fix on line 37,450 of io.scm? :smile:</text>
  </message>
  <message conversation_id="1074">
    <ts>2018-12-19T15:20:53.342800</ts>
    <user>Bertha</user>
    <text>Simplified a bit more and added as &lt;https://github.com/racket/racket/issues/2433&gt;</text>
  </message>
  <message conversation_id="1076">
    <ts>2018-12-19T16:07:49.343100</ts>
    <user>Franklin</user>
    <text>11</text>
  </message>
  <message conversation_id="1076">
    <ts>2018-12-19T16:08:11.343600</ts>
    <user>Franklin</user>
    <text>The number of questions on MetaPost on StackOverflow.</text>
  </message>
  <message conversation_id="1076">
    <ts>2018-12-19T16:08:20.343900</ts>
    <user>Franklin</user>
    <text>Does that mean that MetaPost is "dead"?</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:05:17.344700</ts>
    <user>Ola</user>
    <text>probably</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:05:30.345100</ts>
    <user>Ola</user>
    <text>I don’t know any TeX/LaTeX users who use metapost</text>
  </message>
  <message conversation_id="1076">
    <ts>2018-12-19T17:05:35.345400</ts>
    <user>Bertha</user>
    <text>&lt;@Franklin&gt; I am downvoting because you should discuss this on `meta.meta.stackexchange`.</text>
  </message>
  <message conversation_id="1076">
    <ts>2018-12-19T17:06:01.346000</ts>
    <user>Franklin</user>
    <text>meta meta !?</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:06:02.346100</ts>
    <user>Ola</user>
    <text>a few years back it was pstricks, nowadays almost everyone (including myself) is using tikz/pgf</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:06:53.346400</ts>
    <user>Bertha</user>
    <text>This recursion has no base case and will end badly. :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:07:04.346600</ts>
    <user>Ola</user>
    <text>I wonder if Knuth uses metapost</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:07:29.347000</ts>
    <user>Franklin</user>
    <text>Found the Metapost mailing list. Roughly one thread a month.</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:07:58.347500</ts>
    <user>Franklin</user>
    <text>What made tikz take over?</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:08:26.348100</ts>
    <user>Ola</user>
    <text>even metafont seems to be going away? I think with the truetype engines it becomes unnecessary, but I don’t know, maybe it will still be necessary</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:09:08.348700</ts>
    <user>Bertha</user>
    <text>Ah y'all mean &lt;https://stackoverflow.com/questions/tagged/metapost&gt; not &lt;https://meta.stackexchange.com/&gt;
Welp. Never mind. ¯\_(ツ)_/¯</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:09:38.349500</ts>
    <user>Ola</user>
    <text>tikz has a lot of functionality and you can work in many levels, from the level of basic shapes and forms to very high level constructs like “these nodes are a tree, draw it for me”</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:10:09.350200</ts>
    <user>Ola</user>
    <text>and it’s independent of the backend, pstricks was tied to postscript generation</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:10:56.350600</ts>
    <user>Franklin</user>
    <text>There is an impressive number of ready-made packages for tikz.</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-19T17:11:12.350800</ts>
    <user>Ola</user>
    <text>yeah</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-20T03:58:20.350900</ts>
    <user>Thaddeus</user>
    <text>The joke was good though :stuck_out_tongue:</text>
  </message>
  <message conversation_id="1078">
    <ts>2018-12-21T11:48:48.000400</ts>
    <user>Catrice</user>
    <text>Is anyone else getting a 404 on &lt;https://download.racket-lang.org/releases/7.1/catalog/&gt; ?</text>
  </message>
  <message conversation_id="1077">
    <ts>2018-12-21T13:00:02.000800</ts>
    <user>Monserrate</user>
    <text>That page is 404 for me too</text>
  </message>
  <message conversation_id="1078">
    <ts>2018-12-21T13:35:34.001500</ts>
    <user>Lynna</user>
    <text>That URL by itself won’t work, but content such as &lt;https://download.racket-lang.org/releases/7.1/catalog/pkgs&gt; will work</text>
  </message>
  <message conversation_id="1078">
    <ts>2018-12-21T13:37:48.002300</ts>
    <user>Catrice</user>
    <text>One of my staff was trying to install a package via DrR -&amp;gt; File -&amp;gt; Install packages, and got
```
Resolving "gregor" via &lt;https://download.racket-lang.org/releases/7.1/catalog/&gt;
tcp-write: error writing
  system error: Socket is not connected; errno=57
  context...:
   /Applications/Racket/collects/openssl/mzssl.rkt:1016:0: pump-output-once
   /Applications/Racket/collects/openssl/mzssl.rkt:1042:0: pump-output
   /Applications/Racket/collects/openssl/mzssl.rkt:1472:8: loop
   /Applications/Racket/collects/openssl/../racket/private/more-scheme.rkt:261:28
   /Applications/Racket/collects/net/http-client.rkt:67:0: http-conn-open!10
   /Applications/Racket/collects/net/http-client.rkt:272:0
   /Applications/Racket/collects/racket/contract/private/arrow-val-first.rkt:428:3
   /Applications/Racket/collects/net/url.rkt:195:0: &lt;http://getpost-impure-port&gt;
   /Applications/Racket/collects/net/url.rkt:302:2: redirection-loop
   /Applications/Racket/collects/racket/contract/private/arrow-val-first.rkt:428:3
   /Applications/Racket/collects/pkg/private/network.rkt:59:3
   /Applications/Racket/collects/pkg/private/catalog.rkt:218:0: read-from-server
   /Applications/Racket/collects/pkg/private/catalog.rkt:138:9: for-loop
   /Applications/Racket/collects/pkg/private/catalog.rkt:135:2: lookup-normally
   /Applications/Racket/collects/pkg/private/../../racket/private/more-scheme.rkt:261:28
   /Applications/Racket/collects/pkg/private/prefetch.rkt:128:2
   ...
```
which led him to think checking that URL was important, hence the 404</text>
  </message>
  <message conversation_id="1078">
    <ts>2018-12-21T13:38:16.002700</ts>
    <user>Catrice</user>
    <text>if that's a red herring, and it's a different problem, then /shrug</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T07:39:38.004500</ts>
    <user>Franklin</user>
    <text>&lt;https://stackoverflow.com/q/53895154/23567&gt;</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T09:00:28.004900</ts>
    <user>Franklin</user>
    <text>⃗e</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T09:01:22.006000</ts>
    <user>Franklin</user>
    <text>I am experimenting with unicode U+20D7 "Combining Right Arrow Above".</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T09:01:44.006500</ts>
    <user>Franklin</user>
    <text>The above combination displays correctly an arrow above an e in DrRacket.</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T09:01:58.006900</ts>
    <user>Franklin</user>
    <text>However I feel that the arrow is too close to the e.</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T09:02:47.007100</ts>
    <user>Franklin</user>
    <text>None</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T09:03:08.007700</ts>
    <user>Franklin</user>
    <text>Where do I look to fix this?</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T09:03:53.007800</ts>
    <user>Franklin</user>
    <text>None</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T09:27:18.009100</ts>
    <user>Franklin</user>
    <text>For comparison an a with a right arrow in the answer: &lt;https://stackoverflow.com/questions/53840086/vector-arrow-on-top-of-an-letter-as-char-or-string/53840445?r=SearchResults#53840445&gt;</text>
  </message>
  <message conversation_id="1079">
    <ts>2018-12-22T11:06:02.010000</ts>
    <user>Franklin</user>
    <text>Turns out the result depends on the font. In some fonts the result looks fine.</text>
  </message>
  <message conversation_id="1080">
    <ts>2018-12-22T23:11:17.014100</ts>
    <user>Omar</user>
    <text>Is there a way to maintain hygienity across macros?

For example, I want macros that expands:

```
(macro1 x (cons 1 2)))
(println (macro2 (* 10 x)))
(println (macro3 (* 10 x)))
```

into:

```
(define-match (cons x$1 x$2) (cons 1 2))
(println (* 10 x$1))
(println (* 10 x$2))
```

but it shouldn’t be possible to write `x$1` literally to access `x$1`.</text>
  </message>
  <message conversation_id="1080">
    <ts>2018-12-22T23:23:17.014300</ts>
    <user>Carlyn</user>
    <text>It’s possible, but not trivial</text>
  </message>
  <message conversation_id="1081">
    <ts>2018-12-23T00:02:36.016300</ts>
    <user>Marnie</user>
    <text>there really ought to be a library for making those kinds of macros</text>
  </message>
  <message conversation_id="1081">
    <ts>2018-12-23T00:03:42.017400</ts>
    <user>Marnie</user>
    <text>ones that need to stash values inside `define-syntax` and access them later with `syntax-local-value`</text>
  </message>
  <message conversation_id="1082">
    <ts>2018-12-23T03:24:34.018100</ts>
    <user>Orval</user>
    <text>I want look at the slides from 8. RacketCon, but i am not able to load them, because the link is wrong or the files are not in place. f.e. &lt;https://con.racket-lang.org/slides/david-storrs.pdf&gt;. Any idea?</text>
  </message>
  <message conversation_id="1080">
    <ts>2018-12-23T04:35:50.019100</ts>
    <user>Omar</user>
    <text>Thanks, &lt;@Carlyn&gt; and &lt;@Marnie&gt;. I’m reading “Macros that Work Together” right now. This is really cool!</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-23T12:35:46.019400</ts>
    <user>Kaylee</user>
    <text>First I added my package to the racket package index then I tried to delete it but something went wrong and now there is neither delete button nor edit button &lt;https://pkgs.racket-lang.org/package/rktvk&gt;</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-23T13:07:20.019900</ts>
    <user>Franklin</user>
    <text>&lt;@Kaylee&gt; ^ &lt;@Dia&gt;</text>
  </message>
  <message conversation_id="1084">
    <ts>2018-12-25T15:01:20.024000</ts>
    <user>Nakesha</user>
    <text>Merry Xmas friends, hope everyone here is having a great time. Decided to ask a question here before I plunge into a rabbit hole from which I may take hours to climb back. I am trying to implement a type of GUI app which is usually called an outliner. Basically it should be a Hierarchical List like the one provided by &lt;http://docs.racket-lang.org/mrlib/Hierarchical_List_Control.html&gt; but with each item being editable. I thought, maybe wrongly, that I could somehow build upon that control and instead of using a `text%`use some kind of editor or input field for each item but so far I don't see how to do it. I am new to Racket Gui stuff and this task is not obvious to me. Can someone here share a clue or two? Thanks a lot in advance.</text>
  </message>
  <message conversation_id="1080">
    <ts>2018-12-27T07:58:45.026400</ts>
    <user>Omar</user>
    <text>I am writing a macro that generates macros. What’s the proper way to generate `...` without making Racket confused about `...`’s phase? Right now I use `(datum-&amp;gt;syntax stx '...)`, but it seems really hacky.</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-27T07:59:19.027000</ts>
    <user>Franklin</user>
    <text>(with-syntax ([ooo (... ...)])     (syntax something ooo ))</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-27T07:59:47.027600</ts>
    <user>Franklin</user>
    <text>The strange syntax (... ...) is the way to quote ... .</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-27T08:00:01.028100</ts>
    <user>Franklin</user>
    <text>It's more readable to use  ooo   instead.</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-27T08:00:06.028200</ts>
    <user>Omar</user>
    <text>I see. Thank you :slightly_smiling_face:</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-27T08:00:41.028600</ts>
    <user>Franklin</user>
    <text>See this recent StackOverflow question: &lt;https://stackoverflow.com/q/53863620/23567&gt;</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-27T08:01:04.029100</ts>
    <user>Franklin</user>
    <text>Alex does a nice job explaining different solution.s</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-29T00:10:02.032900</ts>
    <user>Omar</user>
    <text>Is there anyway to make `merge-input` respect the order? For instance, I have:

```
;; a.rkt
#lang racket/base

(printf "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n")
(eprintf "BBB\n")
```

and

```
;; b.rkt
#lang racket/base

(require racket/match
         racket/system
         racket/port)

(match-define (list out in _ err proc) (process "racket a.rkt"))

(proc 'wait)

(define new-port (merge-input out err))

(let iter ()
  (match (read-line new-port)
    [(? string? s) (displayln s)
                   (iter)]
    [else (void)]))

(close-input-port out)
(close-input-port err)
(close-output-port in)
```

Running `a.rkt` directly _always_ yield the right order (`AAA...` and then `BBB`), but running `b.rkt` almost always gives the wrong order. I could switch `(merge-input out err)` to `(merge-input err out)` to make the order different, but it’s still wrong for a more complicated program.</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-29T11:52:00.036000</ts>
    <user>Bertha</user>
    <text>&lt;@Omar&gt; You could add `flush-output`s in `a.rkt`; that might help? (Similarly: Use `file-stream-buffer-mode` on both `current-output-port` and `current-error-port`.) But in general I'm not sure there's a guaranteed order?</text>
  </message>
  <message conversation_id="1085">
    <ts>2018-12-29T11:53:08.036900</ts>
    <user>Bertha</user>
    <text>To the extent it's a dependable order, it will probably be because `a.rkt` "de-multiplexes" the things, using the ordering you want to depend on?</text>
  </message>
  <message conversation_id="1085">
    <ts>2018-12-29T11:54:05.037700</ts>
    <user>Bertha</user>
    <text>Trying to do it in `b.rkt` seems less likely to be successful? idk for sure</text>
  </message>
  <message conversation_id="1083">
    <ts>2018-12-29T12:19:12.038100</ts>
    <user>Franklin</user>
    <text>I am scribbling away and am using `@interaction[#:eval eval ...]`</text>
  </message>
  <message conversation_id="1085">
    <ts>2018-12-29T12:19:20.038300</ts>
    <user>Franklin</user>
    <text>to show off some examples.</text>
  </message>
  <message conversation_id="1085">
    <ts>2018-12-29T12:19:39.038700</ts>
    <user>Franklin</user>
    <text>However comments:   `; standard comment`</text>
  </message>
  <message conversation_id="1085">
    <ts>2018-12-29T12:19:42.038900</ts>
    <user>Franklin</user>
    <text>disappear.</text>
  </message>
  <message conversation_id="1085">
    <ts>2018-12-29T12:20:08.039500</ts>
    <user>Franklin</user>
    <text>Is there a way to write comments inside an `interaction` form that survives?</text>
  </message>
  <message conversation_id="1085">
    <ts>2018-12-29T15:32:36.039900</ts>
    <user>Setsuko</user>
    <text>&lt;@Franklin&gt; You want `code:comment` I think: &lt;https://docs.racket-lang.org/scribble/scribble_manual_code.html?#%28idx._%28gentag._2._%28lib._scribblings%2Fscribble%2Fscribble..scrbl%29%29%29&gt;</text>
  </message>
  <message conversation_id="1085">
    <ts>2018-12-29T15:34:44.040500</ts>
    <user>Franklin</user>
    <text>&lt;@Setsuko&gt; Works beautifully. Thanks!</text>
  </message>
  <message conversation_id="1086">
    <ts>2018-12-29T20:02:39.043500</ts>
    <user>Vinnie</user>
    <text>Given that x is a vector, is it possible to write a macro that would take ([] x 1) and produce  (vector-ref x 1)?  </text>
  </message>
  <message conversation_id="1087">
    <ts>2018-12-29T20:53:05.044500</ts>
    <user>Ola</user>
    <text>I think `[]` won’t work unless you mess with the reader… `[]` is basically the same as `()` to the reader</text>
  </message>
  <message conversation_id="1087">
    <ts>2018-12-29T21:05:41.045000</ts>
    <user>Omar</user>
    <text>&lt;@Vinnie&gt; You can do this I think?

```
#lang racket

(require (for-syntax syntax/parse/class/paren-shape)
         (prefix-in racket/base/ racket/base)
         syntax/parse/define)

(define-syntax-parser #%app
  [(_ [~brackets] arg ...)
   #'(racket/base/#%app vector-ref arg ...)]
  [(_ arg ...)
   #'(racket/base/#%app arg ...)])


(define v (vector 1 2 3))
([] v 1)
```

(adapted from &lt;https://lexi-lambda.github.io/blog/2017/08/12/user-programmable-infix-operators-in-racket/&gt;)</text>
  </message>
  <message conversation_id="1087">
    <ts>2018-12-29T21:10:16.047000</ts>
    <user>Omar</user>
    <text>&lt;@Bertha&gt; not really. `a.rkt` is in fact a simplification of other people’s program (`coqtop`, to be precise). Interestingly, Emacs’s Proof General successfully parses the output from `coqtop`, so the ordering is “stable” enough to be used in real software.</text>
  </message>
  <message conversation_id="9709">
    <ts>2018-12-30T20:36:11.053300</ts>
    <user>Bertha</user>
    <text>This question is on-hold, which is unfortunate because it's an opportunity to discuss interesting Racket features like in-source doc, and submodules generally. I mention this in case anyone else has enough rep wants to vote to reopen it. &lt;https://stackoverflow.com/questions/53937982/source-code-documentation-in-racket-scheme&gt;</text>
  </message>
</slack>